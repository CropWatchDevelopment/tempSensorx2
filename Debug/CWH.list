
CWH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069dc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08006a9c  08006a9c  00007a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dec  08006dec  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006dec  08006dec  00007dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006df4  08006df4  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006df4  08006df4  00007df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006df8  08006df8  00007df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006dfc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  2000005c  08006e58  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006e58  000083c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013044  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000313a  00000000  00000000  0001b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001e208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d23  00000000  00000000  0001f308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017877  00000000  00000000  0002002b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ea1  00000000  00000000  000378a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af7c  00000000  00000000  0004d743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d86bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a4  00000000  00000000  000d8704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000dc8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006a84 	.word	0x08006a84

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08006a84 	.word	0x08006a84

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <ATC_SendReceive>:
#include "lorawan.h"
#include <string.h>
#include <stdio.h>

static int ATC_SendReceive(ATC_HandleTypeDef *lora, const char *command, uint32_t command_len, char *response, uint32_t response_size, uint32_t timeout_ms, const char *expected_response)
{
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b089      	sub	sp, #36	@ 0x24
 8000474:	af02      	add	r7, sp, #8
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
 800047c:	603b      	str	r3, [r7, #0]
    if (lora == NULL || lora->huart == NULL || command == NULL || command_len == 0) {
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d009      	beq.n	8000498 <ATC_SendReceive+0x28>
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d005      	beq.n	8000498 <ATC_SendReceive+0x28>
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <ATC_SendReceive+0x28>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d102      	bne.n	800049e <ATC_SendReceive+0x2e>
        return -1;
 8000498:	2301      	movs	r3, #1
 800049a:	425b      	negs	r3, r3
 800049c:	e054      	b.n	8000548 <ATC_SendReceive+0xd8>
    }

    HAL_StatusTypeDef status = HAL_UART_Transmit(lora->huart, (uint8_t *)command, command_len, timeout_ms);
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	6818      	ldr	r0, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	2517      	movs	r5, #23
 80004a8:	197c      	adds	r4, r7, r5
 80004aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004ac:	68b9      	ldr	r1, [r7, #8]
 80004ae:	f004 ff39 	bl	8005324 <HAL_UART_Transmit>
 80004b2:	0003      	movs	r3, r0
 80004b4:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80004b6:	197b      	adds	r3, r7, r5
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d002      	beq.n	80004c4 <ATC_SendReceive+0x54>
        return -2;
 80004be:	2302      	movs	r3, #2
 80004c0:	425b      	negs	r3, r3
 80004c2:	e041      	b.n	8000548 <ATC_SendReceive+0xd8>
    }

    if (response != NULL && response_size > 0) {
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d02c      	beq.n	8000524 <ATC_SendReceive+0xb4>
 80004ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d029      	beq.n	8000524 <ATC_SendReceive+0xb4>
        uint16_t rx_len = 0;
 80004d0:	2514      	movs	r5, #20
 80004d2:	197b      	adds	r3, r7, r5
 80004d4:	2200      	movs	r2, #0
 80004d6:	801a      	strh	r2, [r3, #0]
        memset(response, 0, response_size);
 80004d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	2100      	movs	r1, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f005 fe40 	bl	8006164 <memset>
        status = HAL_UARTEx_ReceiveToIdle(lora->huart, (uint8_t *)response, response_size - 1, &rx_len, timeout_ms);
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	6818      	ldr	r0, [r3, #0]
 80004e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	3b01      	subs	r3, #1
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	2617      	movs	r6, #23
 80004f2:	19bc      	adds	r4, r7, r6
 80004f4:	197d      	adds	r5, r7, r5
 80004f6:	6839      	ldr	r1, [r7, #0]
 80004f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	002b      	movs	r3, r5
 80004fe:	f005 fc7f 	bl	8005e00 <HAL_UARTEx_ReceiveToIdle>
 8000502:	0003      	movs	r3, r0
 8000504:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK) {
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d002      	beq.n	8000514 <ATC_SendReceive+0xa4>
            return -4;
 800050e:	2304      	movs	r3, #4
 8000510:	425b      	negs	r3, r3
 8000512:	e019      	b.n	8000548 <ATC_SendReceive+0xd8>
        }
        response[rx_len] = '\0';
 8000514:	2314      	movs	r3, #20
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	001a      	movs	r2, r3
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	189b      	adds	r3, r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
    }

    if (expected_response && response) {
 8000524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000526:	2b00      	cmp	r3, #0
 8000528:	d00d      	beq.n	8000546 <ATC_SendReceive+0xd6>
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00a      	beq.n	8000546 <ATC_SendReceive+0xd6>
        if (!strstr(response, expected_response)) {
 8000530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	0011      	movs	r1, r2
 8000536:	0018      	movs	r0, r3
 8000538:	f005 fe1c 	bl	8006174 <strstr>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d102      	bne.n	8000546 <ATC_SendReceive+0xd6>
            return -3;
 8000540:	2303      	movs	r3, #3
 8000542:	425b      	negs	r3, r3
 8000544:	e000      	b.n	8000548 <ATC_SendReceive+0xd8>
        }
    }

    return 0;
 8000546:	2300      	movs	r3, #0
}
 8000548:	0018      	movs	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	b007      	add	sp, #28
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000550 <send_data_and_get_response>:

LoRaWAN_Error_t send_data_and_get_response(ATC_HandleTypeDef *lora, const char *data, char *response, uint32_t response_size, uint32_t timeout_ms, const char *expected_response)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b08b      	sub	sp, #44	@ 0x2c
 8000554:	af04      	add	r7, sp, #16
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
 800055c:	603b      	str	r3, [r7, #0]
    if (!lora || !lora->huart || !data || !response || response_size == 0) {
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00c      	beq.n	800057e <send_data_and_get_response+0x2e>
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d008      	beq.n	800057e <send_data_and_get_response+0x2e>
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <send_data_and_get_response+0x2e>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d002      	beq.n	800057e <send_data_and_get_response+0x2e>
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d102      	bne.n	8000584 <send_data_and_get_response+0x34>
        return LORAWAN_ERROR_INVALID_PARAM;
 800057e:	2301      	movs	r3, #1
 8000580:	425b      	negs	r3, r3
 8000582:	e03e      	b.n	8000602 <send_data_and_get_response+0xb2>
    }

    ATC_SendReceive(lora, "AT\r\n", 4, response, response_size, timeout_ms, expected_response);
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4921      	ldr	r1, [pc, #132]	@ (800060c <send_data_and_get_response+0xbc>)
 8000588:	68f8      	ldr	r0, [r7, #12]
 800058a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800058c:	9302      	str	r3, [sp, #8]
 800058e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	0013      	movs	r3, r2
 8000598:	2204      	movs	r2, #4
 800059a:	f7ff ff69 	bl	8000470 <ATC_SendReceive>
    HAL_Delay(300);
 800059e:	2396      	movs	r3, #150	@ 0x96
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 fb20 	bl	8001be8 <HAL_Delay>
    int result = ATC_SendReceive(lora, data, strlen(data), response, response_size, timeout_ms, expected_response);
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff fdac 	bl	8000108 <strlen>
 80005b0:	0004      	movs	r4, r0
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	68b9      	ldr	r1, [r7, #8]
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	0013      	movs	r3, r2
 80005c6:	0022      	movs	r2, r4
 80005c8:	f7ff ff52 	bl	8000470 <ATC_SendReceive>
 80005cc:	0003      	movs	r3, r0
 80005ce:	617b      	str	r3, [r7, #20]

    if (result == -1) {
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	3301      	adds	r3, #1
 80005d4:	d102      	bne.n	80005dc <send_data_and_get_response+0x8c>
        return LORAWAN_ERROR_INVALID_PARAM;
 80005d6:	2301      	movs	r3, #1
 80005d8:	425b      	negs	r3, r3
 80005da:	e012      	b.n	8000602 <send_data_and_get_response+0xb2>
    } else if (result == -2) {
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	3302      	adds	r3, #2
 80005e0:	d102      	bne.n	80005e8 <send_data_and_get_response+0x98>
        return LORAWAN_ERROR_COMMUNICATION;
 80005e2:	2302      	movs	r3, #2
 80005e4:	425b      	negs	r3, r3
 80005e6:	e00c      	b.n	8000602 <send_data_and_get_response+0xb2>
    } else if (result == -3) {
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3303      	adds	r3, #3
 80005ec:	d102      	bne.n	80005f4 <send_data_and_get_response+0xa4>
        return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 80005ee:	2303      	movs	r3, #3
 80005f0:	425b      	negs	r3, r3
 80005f2:	e006      	b.n	8000602 <send_data_and_get_response+0xb2>
    } else if (result == -4) {
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	3304      	adds	r3, #4
 80005f8:	d102      	bne.n	8000600 <send_data_and_get_response+0xb0>
        return LORAWAN_ERROR_TIMEOUT;
 80005fa:	2304      	movs	r3, #4
 80005fc:	425b      	negs	r3, r3
 80005fe:	e000      	b.n	8000602 <send_data_and_get_response+0xb2>
    }

    return LORAWAN_ERROR_OK;
 8000600:	2300      	movs	r3, #0
}
 8000602:	0018      	movs	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	b007      	add	sp, #28
 8000608:	bd90      	pop	{r4, r7, pc}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	08006a9c 	.word	0x08006a9c

08000610 <LoRaWAN_SendHex>:
    }
    return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
}

LoRaWAN_Error_t LoRaWAN_SendHex(ATC_HandleTypeDef *lora, const uint8_t *payload, size_t length)
{
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	b0ab      	sub	sp, #172	@ 0xac
 8000614:	af02      	add	r7, sp, #8
 8000616:	6478      	str	r0, [r7, #68]	@ 0x44
 8000618:	6439      	str	r1, [r7, #64]	@ 0x40
 800061a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800061c:	466b      	mov	r3, sp
 800061e:	001e      	movs	r6, r3
    if (!lora || !lora->huart || !payload || length == 0) {
 8000620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000622:	2b00      	cmp	r3, #0
 8000624:	d009      	beq.n	800063a <LoRaWAN_SendHex+0x2a>
 8000626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d005      	beq.n	800063a <LoRaWAN_SendHex+0x2a>
 800062e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000630:	2b00      	cmp	r3, #0
 8000632:	d002      	beq.n	800063a <LoRaWAN_SendHex+0x2a>
 8000634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000636:	2b00      	cmp	r3, #0
 8000638:	d102      	bne.n	8000640 <LoRaWAN_SendHex+0x30>
        return LORAWAN_ERROR_INVALID_PARAM;
 800063a:	2301      	movs	r3, #1
 800063c:	425b      	negs	r3, r3
 800063e:	e0a8      	b.n	8000792 <LoRaWAN_SendHex+0x182>
    }

    char hex[length * 2 + 1];
 8000640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	0013      	movs	r3, r2
 8000648:	3b01      	subs	r3, #1
 800064a:	2198      	movs	r1, #152	@ 0x98
 800064c:	1879      	adds	r1, r7, r1
 800064e:	600b      	str	r3, [r1, #0]
 8000650:	61ba      	str	r2, [r7, #24]
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
 8000656:	69b8      	ldr	r0, [r7, #24]
 8000658:	69f9      	ldr	r1, [r7, #28]
 800065a:	0003      	movs	r3, r0
 800065c:	0f5b      	lsrs	r3, r3, #29
 800065e:	469c      	mov	ip, r3
 8000660:	000b      	movs	r3, r1
 8000662:	00dd      	lsls	r5, r3, #3
 8000664:	4663      	mov	r3, ip
 8000666:	431d      	orrs	r5, r3
 8000668:	0003      	movs	r3, r0
 800066a:	00dc      	lsls	r4, r3, #3
 800066c:	613a      	str	r2, [r7, #16]
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	6938      	ldr	r0, [r7, #16]
 8000674:	6979      	ldr	r1, [r7, #20]
 8000676:	0003      	movs	r3, r0
 8000678:	0f5b      	lsrs	r3, r3, #29
 800067a:	000c      	movs	r4, r1
 800067c:	00e4      	lsls	r4, r4, #3
 800067e:	637c      	str	r4, [r7, #52]	@ 0x34
 8000680:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8000682:	431c      	orrs	r4, r3
 8000684:	637c      	str	r4, [r7, #52]	@ 0x34
 8000686:	0003      	movs	r3, r0
 8000688:	00db      	lsls	r3, r3, #3
 800068a:	633b      	str	r3, [r7, #48]	@ 0x30
 800068c:	1dd3      	adds	r3, r2, #7
 800068e:	08db      	lsrs	r3, r3, #3
 8000690:	00db      	lsls	r3, r3, #3
 8000692:	466a      	mov	r2, sp
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	469d      	mov	sp, r3
 8000698:	ab02      	add	r3, sp, #8
 800069a:	3300      	adds	r3, #0
 800069c:	2294      	movs	r2, #148	@ 0x94
 800069e:	18ba      	adds	r2, r7, r2
 80006a0:	6013      	str	r3, [r2, #0]
    for (size_t i = 0; i < length; ++i) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	229c      	movs	r2, #156	@ 0x9c
 80006a6:	18ba      	adds	r2, r7, r2
 80006a8:	6013      	str	r3, [r2, #0]
 80006aa:	e019      	b.n	80006e0 <LoRaWAN_SendHex+0xd0>
        sprintf(&hex[i * 2], "%02X", payload[i]);
 80006ac:	239c      	movs	r3, #156	@ 0x9c
 80006ae:	18fb      	adds	r3, r7, r3
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	2294      	movs	r2, #148	@ 0x94
 80006b6:	18ba      	adds	r2, r7, r2
 80006b8:	6812      	ldr	r2, [r2, #0]
 80006ba:	18d0      	adds	r0, r2, r3
 80006bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80006be:	239c      	movs	r3, #156	@ 0x9c
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	18d3      	adds	r3, r2, r3
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	001a      	movs	r2, r3
 80006ca:	4b34      	ldr	r3, [pc, #208]	@ (800079c <LoRaWAN_SendHex+0x18c>)
 80006cc:	0019      	movs	r1, r3
 80006ce:	f005 fced 	bl	80060ac <siprintf>
    for (size_t i = 0; i < length; ++i) {
 80006d2:	239c      	movs	r3, #156	@ 0x9c
 80006d4:	18fb      	adds	r3, r7, r3
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	229c      	movs	r2, #156	@ 0x9c
 80006dc:	18ba      	adds	r2, r7, r2
 80006de:	6013      	str	r3, [r2, #0]
 80006e0:	239c      	movs	r3, #156	@ 0x9c
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d3df      	bcc.n	80006ac <LoRaWAN_SendHex+0x9c>
    }
    hex[length * 2] = '\0';
 80006ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	2294      	movs	r2, #148	@ 0x94
 80006f2:	18ba      	adds	r2, r7, r2
 80006f4:	6812      	ldr	r2, [r2, #0]
 80006f6:	2100      	movs	r1, #0
 80006f8:	54d1      	strb	r1, [r2, r3]

    char command[length * 2 + 12];
 80006fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006fc:	3306      	adds	r3, #6
 80006fe:	0059      	lsls	r1, r3, #1
 8000700:	000b      	movs	r3, r1
 8000702:	3b01      	subs	r3, #1
 8000704:	2290      	movs	r2, #144	@ 0x90
 8000706:	18ba      	adds	r2, r7, r2
 8000708:	6013      	str	r3, [r2, #0]
 800070a:	60b9      	str	r1, [r7, #8]
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68bc      	ldr	r4, [r7, #8]
 8000712:	68fd      	ldr	r5, [r7, #12]
 8000714:	0023      	movs	r3, r4
 8000716:	0f5b      	lsrs	r3, r3, #29
 8000718:	002a      	movs	r2, r5
 800071a:	00d2      	lsls	r2, r2, #3
 800071c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800071e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000720:	431a      	orrs	r2, r3
 8000722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000724:	0023      	movs	r3, r4
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800072a:	6039      	str	r1, [r7, #0]
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	683c      	ldr	r4, [r7, #0]
 8000732:	687d      	ldr	r5, [r7, #4]
 8000734:	0023      	movs	r3, r4
 8000736:	0f5b      	lsrs	r3, r3, #29
 8000738:	002a      	movs	r2, r5
 800073a:	00d2      	lsls	r2, r2, #3
 800073c:	627a      	str	r2, [r7, #36]	@ 0x24
 800073e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000740:	431a      	orrs	r2, r3
 8000742:	627a      	str	r2, [r7, #36]	@ 0x24
 8000744:	0023      	movs	r3, r4
 8000746:	00db      	lsls	r3, r3, #3
 8000748:	623b      	str	r3, [r7, #32]
 800074a:	1dcb      	adds	r3, r1, #7
 800074c:	08db      	lsrs	r3, r3, #3
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	466a      	mov	r2, sp
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	469d      	mov	sp, r3
 8000756:	ab02      	add	r3, sp, #8
 8000758:	3300      	adds	r3, #0
 800075a:	228c      	movs	r2, #140	@ 0x8c
 800075c:	18ba      	adds	r2, r7, r2
 800075e:	6013      	str	r3, [r2, #0]
    snprintf(command, sizeof(command), "AT+SEND \"%s\"\r\n", hex);
 8000760:	2394      	movs	r3, #148	@ 0x94
 8000762:	18fb      	adds	r3, r7, r3
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	4a0e      	ldr	r2, [pc, #56]	@ (80007a0 <LoRaWAN_SendHex+0x190>)
 8000768:	208c      	movs	r0, #140	@ 0x8c
 800076a:	1838      	adds	r0, r7, r0
 800076c:	6800      	ldr	r0, [r0, #0]
 800076e:	f005 fc67 	bl	8006040 <sniprintf>

    char response[64];
    return send_data_and_get_response(lora, command, response, sizeof(response), 5000, "OK");
 8000772:	2314      	movs	r3, #20
 8000774:	2238      	movs	r2, #56	@ 0x38
 8000776:	189b      	adds	r3, r3, r2
 8000778:	19da      	adds	r2, r3, r7
 800077a:	238c      	movs	r3, #140	@ 0x8c
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	6819      	ldr	r1, [r3, #0]
 8000780:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <LoRaWAN_SendHex+0x194>)
 8000784:	9301      	str	r3, [sp, #4]
 8000786:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <LoRaWAN_SendHex+0x198>)
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2340      	movs	r3, #64	@ 0x40
 800078c:	f7ff fee0 	bl	8000550 <send_data_and_get_response>
 8000790:	0003      	movs	r3, r0
 8000792:	46b5      	mov	sp, r6
}
 8000794:	0018      	movs	r0, r3
 8000796:	46bd      	mov	sp, r7
 8000798:	b029      	add	sp, #164	@ 0xa4
 800079a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800079c:	08006ac8 	.word	0x08006ac8
 80007a0:	08006ad0 	.word	0x08006ad0
 80007a4:	08006ab0 	.word	0x08006ab0
 80007a8:	00001388 	.word	0x00001388

080007ac <RTC_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RTC_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80007b0:	4b03      	ldr	r3, [pc, #12]	@ (80007c0 <RTC_IRQHandler+0x14>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f004 fcf4 	bl	80051a0 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 80007b8:	46c0      	nop			@ (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	20000238 	.word	0x20000238

080007c4 <RTC_WakeUp_Init>:

void RTC_WakeUp_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  ConsolePrintf("Starting RTC Wake-Up Timer configuration\r\n");
 80007c8:	4b15      	ldr	r3, [pc, #84]	@ (8000820 <RTC_WakeUp_Init+0x5c>)
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 fc02 	bl	8000fd4 <ConsolePrintf>

  // Disable the Wake-Up Timer before configuring
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80007d0:	4b14      	ldr	r3, [pc, #80]	@ (8000824 <RTC_WakeUp_Init+0x60>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f004 fc80 	bl	80050d8 <HAL_RTCEx_DeactivateWakeUpTimer>
  ConsolePrintf("RTC Wake-Up Timer disabled\r\n");
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <RTC_WakeUp_Init+0x64>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fbfa 	bl	8000fd4 <ConsolePrintf>

  // Configure Wake-Up Timer for 60 seconds using LSI (~40 kHz)
  // With AsynchPrediv = 127, SynchPrediv = 255: CK_SPRE = 40,000 / (128 * 256) = ~1.22 Hz
  // For ~60 seconds: WakeUpCounter = (60 * 1.22) - 1 = ~72
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80007e0:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <RTC_WakeUp_Init+0x60>)
 80007e2:	2204      	movs	r2, #4
 80007e4:	213b      	movs	r1, #59	@ 0x3b
 80007e6:	0018      	movs	r0, r3
 80007e8:	f004 fb9e 	bl	8004f28 <HAL_RTCEx_SetWakeUpTimer_IT>
 80007ec:	1e03      	subs	r3, r0, #0
 80007ee:	d004      	beq.n	80007fa <RTC_WakeUp_Init+0x36>
  {
    ConsolePrintf("RTC Wake-Up Timer Init Failed\r\n");
 80007f0:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <RTC_WakeUp_Init+0x68>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 fbee 	bl	8000fd4 <ConsolePrintf>
 80007f8:	e003      	b.n	8000802 <RTC_WakeUp_Init+0x3e>
  }
  else
  {
    ConsolePrintf("RTC Wake-Up Timer Initialized for ~60 seconds\r\n");
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <RTC_WakeUp_Init+0x6c>)
 80007fc:	0018      	movs	r0, r3
 80007fe:	f000 fbe9 	bl	8000fd4 <ConsolePrintf>
  }

  // Enable RTC Wake-Up interrupt in NVIC
  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2002      	movs	r0, #2
 8000808:	f001 ff9c 	bl	8002744 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 800080c:	2002      	movs	r0, #2
 800080e:	f001 ffae 	bl	800276e <HAL_NVIC_EnableIRQ>
  ConsolePrintf("RTC Wake-Up interrupt enabled in NVIC\r\n");
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <RTC_WakeUp_Init+0x70>)
 8000814:	0018      	movs	r0, r3
 8000816:	f000 fbdd 	bl	8000fd4 <ConsolePrintf>
}
 800081a:	46c0      	nop			@ (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08006ae0 	.word	0x08006ae0
 8000824:	20000238 	.word	0x20000238
 8000828:	08006b0c 	.word	0x08006b0c
 800082c:	08006b2c 	.word	0x08006b2c
 8000830:	08006b4c 	.word	0x08006b4c
 8000834:	08006b7c 	.word	0x08006b7c

08000838 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  // Reconfigure system clock after wake-up
  SystemClock_Config();
 8000840:	f000 f9b8 	bl	8000bb4 <SystemClock_Config>

  // Print message
  ConsolePrintf("Woke up at %s\r\n", "1-minute interval");
 8000844:	4a04      	ldr	r2, [pc, #16]	@ (8000858 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 8000846:	4b05      	ldr	r3, [pc, #20]	@ (800085c <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f000 fbc2 	bl	8000fd4 <ConsolePrintf>
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	b002      	add	sp, #8
 8000856:	bd80      	pop	{r7, pc}
 8000858:	08006ba4 	.word	0x08006ba4
 800085c:	08006bb8 	.word	0x08006bb8

08000860 <Enter_Stop_Mode>:

void Enter_Stop_Mode(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  ConsolePrintf("Preparing to enter Stop mode\r\n");
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <Enter_Stop_Mode+0x50>)
 8000866:	0018      	movs	r0, r3
 8000868:	f000 fbb4 	bl	8000fd4 <ConsolePrintf>

  // Clear Wake-Up flag
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800086c:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <Enter_Stop_Mode+0x54>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	22ff      	movs	r2, #255	@ 0xff
 8000874:	401a      	ands	r2, r3
 8000876:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <Enter_Stop_Mode+0x54>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	490f      	ldr	r1, [pc, #60]	@ (80008b8 <Enter_Stop_Mode+0x58>)
 800087c:	430a      	orrs	r2, r1
 800087e:	60da      	str	r2, [r3, #12]
  ConsolePrintf("RTC Wake-Up flag cleared\r\n");
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <Enter_Stop_Mode+0x5c>)
 8000882:	0018      	movs	r0, r3
 8000884:	f000 fba6 	bl	8000fd4 <ConsolePrintf>

  // Enter Stop mode (low-power mode)
  ConsolePrintf("Entering Stop mode\r\n");
 8000888:	4b0d      	ldr	r3, [pc, #52]	@ (80008c0 <Enter_Stop_Mode+0x60>)
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fba2 	bl	8000fd4 <ConsolePrintf>
  /* Suspend SysTick to prevent it from waking up the MCU immediately */
  HAL_SuspendTick();
 8000890:	f001 f9ce 	bl	8001c30 <HAL_SuspendTick>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000894:	2101      	movs	r1, #1
 8000896:	2001      	movs	r0, #1
 8000898:	f003 f974 	bl	8003b84 <HAL_PWR_EnterSTOPMode>
  /* Resume SysTick after waking up */
  HAL_ResumeTick();
 800089c:	f001 f9d6 	bl	8001c4c <HAL_ResumeTick>
  ConsolePrintf("Exited Stop mode\r\n");
 80008a0:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <Enter_Stop_Mode+0x64>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fb96 	bl	8000fd4 <ConsolePrintf>
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	08006bc8 	.word	0x08006bc8
 80008b4:	20000238 	.word	0x20000238
 80008b8:	fffffb7f 	.word	0xfffffb7f
 80008bc:	08006be8 	.word	0x08006be8
 80008c0:	08006c04 	.word	0x08006c04
 80008c4:	08006c1c 	.word	0x08006c1c

080008c8 <ReadBattery_mV>:
/**
 * @brief  Read VBAT (mV) via 1 MΩ:1 MΩ divider + unity buffer, no FPU
 * @retval Battery voltage in millivolts (rounded)
 */
uint32_t ReadBattery_mV(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	0018      	movs	r0, r3
 80008d2:	2308      	movs	r3, #8
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f005 fc44 	bl	8006164 <memset>
    uint32_t raw_vref, raw_div;
    uint32_t Vdda_mV, Vnode_mV, VBAT_mV;

    // 1) Enable internal reference measurement
    HAL_ADCEx_EnableVREFINT();
 80008dc:	f001 fe58 	bl	8002590 <HAL_ADCEx_EnableVREFINT>

    // 2) Sample VREFINT to compute true VDDA
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	4a3b      	ldr	r2, [pc, #236]	@ (80009d0 <ReadBattery_mV+0x108>)
 80008e4:	601a      	str	r2, [r3, #0]
    sConfig.Rank    = ADC_RANK_CHANNEL_NUMBER;
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2280      	movs	r2, #128	@ 0x80
 80008ea:	0152      	lsls	r2, r2, #5
 80008ec:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80008ee:	1d3a      	adds	r2, r7, #4
 80008f0:	4b38      	ldr	r3, [pc, #224]	@ (80009d4 <ReadBattery_mV+0x10c>)
 80008f2:	0011      	movs	r1, r2
 80008f4:	0018      	movs	r0, r3
 80008f6:	f001 fc6f 	bl	80021d8 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc);
 80008fa:	4b36      	ldr	r3, [pc, #216]	@ (80009d4 <ReadBattery_mV+0x10c>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f001 fb2f 	bl	8001f60 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000902:	2301      	movs	r3, #1
 8000904:	425a      	negs	r2, r3
 8000906:	4b33      	ldr	r3, [pc, #204]	@ (80009d4 <ReadBattery_mV+0x10c>)
 8000908:	0011      	movs	r1, r2
 800090a:	0018      	movs	r0, r3
 800090c:	f001 fbbc 	bl	8002088 <HAL_ADC_PollForConversion>
    raw_vref = HAL_ADC_GetValue(&hadc);
 8000910:	4b30      	ldr	r3, [pc, #192]	@ (80009d4 <ReadBattery_mV+0x10c>)
 8000912:	0018      	movs	r0, r3
 8000914:	f001 fc54 	bl	80021c0 <HAL_ADC_GetValue>
 8000918:	0003      	movs	r3, r0
 800091a:	61fb      	str	r3, [r7, #28]
    HAL_ADC_Stop(&hadc);
 800091c:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <ReadBattery_mV+0x10c>)
 800091e:	0018      	movs	r0, r3
 8000920:	f001 fb72 	bl	8002008 <HAL_ADC_Stop>

    // Vdda = 3000 mV × VREFINT_CAL / raw_vref  (calibrated at 3.0 V)
    Vdda_mV = (3000UL * (*VREFINT_CAL_ADDR) + raw_vref/2U) / raw_vref;
 8000924:	4b2c      	ldr	r3, [pc, #176]	@ (80009d8 <ReadBattery_mV+0x110>)
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	001a      	movs	r2, r3
 800092a:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <ReadBattery_mV+0x114>)
 800092c:	435a      	muls	r2, r3
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	18d3      	adds	r3, r2, r3
 8000934:	69f9      	ldr	r1, [r7, #28]
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff fbf8 	bl	800012c <__udivsi3>
 800093c:	0003      	movs	r3, r0
 800093e:	61bb      	str	r3, [r7, #24]

    // 3) Turn on your divider/buffer and let it settle
    HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin, GPIO_PIN_SET);
 8000940:	4b27      	ldr	r3, [pc, #156]	@ (80009e0 <ReadBattery_mV+0x118>)
 8000942:	2201      	movs	r2, #1
 8000944:	2101      	movs	r1, #1
 8000946:	0018      	movs	r0, r3
 8000948:	f002 f98e 	bl	8002c68 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 800094c:	2396      	movs	r3, #150	@ 0x96
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	0018      	movs	r0, r3
 8000952:	f001 f949 	bl	8001be8 <HAL_Delay>

    // 4) Sample the divider output (VBAT/2)
    sConfig.Channel = ADC_CHANNEL_4;              // ← adjust to your sense pin
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4a22      	ldr	r2, [pc, #136]	@ (80009e4 <ReadBattery_mV+0x11c>)
 800095a:	601a      	str	r2, [r3, #0]
    sConfig.Rank    = ADC_RANK_CHANNEL_NUMBER;
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2280      	movs	r2, #128	@ 0x80
 8000960:	0152      	lsls	r2, r2, #5
 8000962:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000964:	1d3a      	adds	r2, r7, #4
 8000966:	4b1b      	ldr	r3, [pc, #108]	@ (80009d4 <ReadBattery_mV+0x10c>)
 8000968:	0011      	movs	r1, r2
 800096a:	0018      	movs	r0, r3
 800096c:	f001 fc34 	bl	80021d8 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc);
 8000970:	4b18      	ldr	r3, [pc, #96]	@ (80009d4 <ReadBattery_mV+0x10c>)
 8000972:	0018      	movs	r0, r3
 8000974:	f001 faf4 	bl	8001f60 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000978:	2301      	movs	r3, #1
 800097a:	425a      	negs	r2, r3
 800097c:	4b15      	ldr	r3, [pc, #84]	@ (80009d4 <ReadBattery_mV+0x10c>)
 800097e:	0011      	movs	r1, r2
 8000980:	0018      	movs	r0, r3
 8000982:	f001 fb81 	bl	8002088 <HAL_ADC_PollForConversion>
    raw_div = HAL_ADC_GetValue(&hadc);
 8000986:	4b13      	ldr	r3, [pc, #76]	@ (80009d4 <ReadBattery_mV+0x10c>)
 8000988:	0018      	movs	r0, r3
 800098a:	f001 fc19 	bl	80021c0 <HAL_ADC_GetValue>
 800098e:	0003      	movs	r3, r0
 8000990:	617b      	str	r3, [r7, #20]
    HAL_ADC_Stop(&hadc);
 8000992:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <ReadBattery_mV+0x10c>)
 8000994:	0018      	movs	r0, r3
 8000996:	f001 fb37 	bl	8002008 <HAL_ADC_Stop>

    // 5) Turn divider off
    HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin, GPIO_PIN_RESET);
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <ReadBattery_mV+0x118>)
 800099c:	2200      	movs	r2, #0
 800099e:	2101      	movs	r1, #1
 80009a0:	0018      	movs	r0, r3
 80009a2:	f002 f961 	bl	8002c68 <HAL_GPIO_WritePin>

    // 6) Compute node voltage in mV and undo the 1:1 divider
    //    Vnode_mV = raw_div/4095 * Vdda_mV
    Vnode_mV = ((raw_div * Vdda_mV) + (ADC_MAX/2U)) / ADC_MAX;
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	69ba      	ldr	r2, [r7, #24]
 80009aa:	4353      	muls	r3, r2
 80009ac:	4a0e      	ldr	r2, [pc, #56]	@ (80009e8 <ReadBattery_mV+0x120>)
 80009ae:	4694      	mov	ip, r2
 80009b0:	4463      	add	r3, ip
 80009b2:	490e      	ldr	r1, [pc, #56]	@ (80009ec <ReadBattery_mV+0x124>)
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff fbb9 	bl	800012c <__udivsi3>
 80009ba:	0003      	movs	r3, r0
 80009bc:	613b      	str	r3, [r7, #16]
    VBAT_mV  = Vnode_mV * 2U;  // since divider ratio is 0.5
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	005b      	lsls	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]

    return VBAT_mV;  // e.g. 3700 → 3.700 V
 80009c4:	68fb      	ldr	r3, [r7, #12]
}
 80009c6:	0018      	movs	r0, r3
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b008      	add	sp, #32
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	44020000 	.word	0x44020000
 80009d4:	20000078 	.word	0x20000078
 80009d8:	1ff80078 	.word	0x1ff80078
 80009dc:	00000bb8 	.word	0x00000bb8
 80009e0:	50000400 	.word	0x50000400
 80009e4:	10000010 	.word	0x10000010
 80009e8:	000007ff 	.word	0x000007ff
 80009ec:	00000fff 	.word	0x00000fff

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f6:	f001 f887 	bl	8001b08 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(10000);
 80009fa:	4b5e      	ldr	r3, [pc, #376]	@ (8000b74 <main+0x184>)
 80009fc:	0018      	movs	r0, r3
 80009fe:	f001 f8f3 	bl	8001be8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a02:	f000 f8d7 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a06:	f000 faa1 	bl	8000f4c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a0a:	f000 f9cd 	bl	8000da8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a0e:	f000 fa3d 	bl	8000e8c <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000a12:	f000 fa71 	bl	8000ef8 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8000a16:	f000 fa07 	bl	8000e28 <MX_LPUART1_UART_Init>
  MX_ADC_Init();
 8000a1a:	f000 f943 	bl	8000ca4 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  RTC_WakeUp_Init();
 8000a1e:	f7ff fed1 	bl	80007c4 <RTC_WakeUp_Init>
//  /* Scan the I2C bus and read sensors once at startup */
//  scan_i2c_bus();
//  sensor_init_and_read();
//  LoRaWAN_Join(&lora);

  HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin, GPIO_PIN_SET);
 8000a22:	4b55      	ldr	r3, [pc, #340]	@ (8000b78 <main+0x188>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	2101      	movs	r1, #1
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f002 f91d 	bl	8002c68 <HAL_GPIO_WritePin>
  HAL_Delay(300);                          // let the divider & buffer settle
 8000a2e:	2396      	movs	r3, #150	@ 0x96
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	0018      	movs	r0, r3
 8000a34:	f001 f8d8 	bl	8001be8 <HAL_Delay>
  uint32_t batt = ReadBattery_mV();
 8000a38:	f7ff ff46 	bl	80008c8 <ReadBattery_mV>
 8000a3c:	0003      	movs	r3, r0
 8000a3e:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin, GPIO_PIN_RESET);
 8000a40:	4b4d      	ldr	r3, [pc, #308]	@ (8000b78 <main+0x188>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	2101      	movs	r1, #1
 8000a46:	0018      	movs	r0, r3
 8000a48:	f002 f90e 	bl	8002c68 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ConsolePrintf("Entering main loop\r\n");
 8000a4c:	4b4b      	ldr	r3, [pc, #300]	@ (8000b7c <main+0x18c>)
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 fac0 	bl	8000fd4 <ConsolePrintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ConsolePrintf("Going to sleep...\r\n");
 8000a54:	4b4a      	ldr	r3, [pc, #296]	@ (8000b80 <main+0x190>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f000 fabc 	bl	8000fd4 <ConsolePrintf>

    HAL_I2C_DeInit(&hi2c1);
 8000a5c:	4b49      	ldr	r3, [pc, #292]	@ (8000b84 <main+0x194>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f002 f9c6 	bl	8002df0 <HAL_I2C_DeInit>
    HAL_UART_DeInit(&huart1);
 8000a64:	4b48      	ldr	r3, [pc, #288]	@ (8000b88 <main+0x198>)
 8000a66:	0018      	movs	r0, r3
 8000a68:	f004 fc1e 	bl	80052a8 <HAL_UART_DeInit>
    // De-init LPUART1 (LoRaWAN UART)
    HAL_UART_DeInit(&hlpuart1);
 8000a6c:	4b47      	ldr	r3, [pc, #284]	@ (8000b8c <main+0x19c>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f004 fc1a 	bl	80052a8 <HAL_UART_DeInit>

    // Disable LPUART wake-up from Stop mode
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_RXNE);                    // Disable RXNE interrupt
 8000a74:	4b45      	ldr	r3, [pc, #276]	@ (8000b8c <main+0x19c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b44      	ldr	r3, [pc, #272]	@ (8000b8c <main+0x19c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2120      	movs	r1, #32
 8000a80:	438a      	bics	r2, r1
 8000a82:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_IDLE);                    // Disable IDLE interrupt
 8000a84:	4b41      	ldr	r3, [pc, #260]	@ (8000b8c <main+0x19c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4b40      	ldr	r3, [pc, #256]	@ (8000b8c <main+0x19c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2110      	movs	r1, #16
 8000a90:	438a      	bics	r2, r1
 8000a92:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(&hlpuart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 8000a94:	4b3d      	ldr	r3, [pc, #244]	@ (8000b8c <main+0x19c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2230      	movs	r2, #48	@ 0x30
 8000a9a:	621a      	str	r2, [r3, #32]

    __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);                    // Disable RXNE interrupt
 8000a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b88 <main+0x198>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	4b39      	ldr	r3, [pc, #228]	@ (8000b88 <main+0x198>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2120      	movs	r1, #32
 8000aa8:	438a      	bics	r2, r1
 8000aaa:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);                    // Disable IDLE interrupt
 8000aac:	4b36      	ldr	r3, [pc, #216]	@ (8000b88 <main+0x198>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	4b35      	ldr	r3, [pc, #212]	@ (8000b88 <main+0x198>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	438a      	bics	r2, r1
 8000aba:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 8000abc:	4b32      	ldr	r3, [pc, #200]	@ (8000b88 <main+0x198>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2230      	movs	r2, #48	@ 0x30
 8000ac2:	621a      	str	r2, [r3, #32]

    // Enter Stop mode
    Enter_Stop_Mode(); // Wakes up via RTC interrupt
 8000ac4:	f7ff fecc 	bl	8000860 <Enter_Stop_Mode>

    // === Code resumes after wake-up ===
    ConsolePrintf("Resumed after wake-up\r\n");
 8000ac8:	4b31      	ldr	r3, [pc, #196]	@ (8000b90 <main+0x1a0>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 fa82 	bl	8000fd4 <ConsolePrintf>

    // Reconfigure clocks
    SystemClock_Config();
 8000ad0:	f000 f870 	bl	8000bb4 <SystemClock_Config>
    ConsolePrintf("System clock reconfigured\r\n");
 8000ad4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b94 <main+0x1a4>)
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 fa7c 	bl	8000fd4 <ConsolePrintf>

    // Reinit I2C peripheral
    MX_I2C1_Init();
 8000adc:	f000 f964 	bl	8000da8 <MX_I2C1_Init>
    ConsolePrintf("I2C1 reinitialized\r\n");
 8000ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b98 <main+0x1a8>)
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 fa76 	bl	8000fd4 <ConsolePrintf>

    // Reinit UART
    MX_USART1_UART_Init();
 8000ae8:	f000 f9d0 	bl	8000e8c <MX_USART1_UART_Init>
    ConsolePrintf("UART reinitialized\r\n");
 8000aec:	4b2b      	ldr	r3, [pc, #172]	@ (8000b9c <main+0x1ac>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 fa70 	bl	8000fd4 <ConsolePrintf>

    MX_LPUART1_UART_Init();
 8000af4:	f000 f998 	bl	8000e28 <MX_LPUART1_UART_Init>
    ConsolePrintf("LPUART1 (lora) reinitialized\r\n");
 8000af8:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <main+0x1b0>)
 8000afa:	0018      	movs	r0, r3
 8000afc:	f000 fa6a 	bl	8000fd4 <ConsolePrintf>

    // Reinit WakeUp timer (MUST be outside the callback!)
    RTC_WakeUp_Init();
 8000b00:	f7ff fe60 	bl	80007c4 <RTC_WakeUp_Init>
    ConsolePrintf("RTC Wake-Up Timer reinitialized\r\n");
 8000b04:	4b27      	ldr	r3, [pc, #156]	@ (8000ba4 <main+0x1b4>)
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 fa64 	bl	8000fd4 <ConsolePrintf>


    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000b78 <main+0x188>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	2120      	movs	r1, #32
 8000b12:	0018      	movs	r0, r3
 8000b14:	f002 f8a8 	bl	8002c68 <HAL_GPIO_WritePin>
    HAL_Delay(300); // Short Delay to let voltage stabalize
 8000b18:	2396      	movs	r3, #150	@ 0x96
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f001 f863 	bl	8001be8 <HAL_Delay>
    scan_i2c_bus();
 8000b22:	f000 fca9 	bl	8001478 <scan_i2c_bus>
    bool i2c_success = sensor_init_and_read();
 8000b26:	1cfc      	adds	r4, r7, #3
 8000b28:	f000 fcce 	bl	80014c8 <sensor_init_and_read>
 8000b2c:	0003      	movs	r3, r0
 8000b2e:	7023      	strb	r3, [r4, #0]
    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8000b30:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <main+0x188>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	2120      	movs	r1, #32
 8000b36:	0018      	movs	r0, r3
 8000b38:	f002 f896 	bl	8002c68 <HAL_GPIO_WritePin>

    if (i2c_success)
 8000b3c:	1cfb      	adds	r3, r7, #3
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d087      	beq.n	8000a54 <main+0x64>
    {
		uint8_t payload[3];
		payload[0] = (uint8_t)(calculated_temp >> 8);     // high byte
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <main+0x1b8>)
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	003b      	movs	r3, r7
 8000b50:	701a      	strb	r2, [r3, #0]
		payload[1] = (uint8_t)(calculated_temp & 0xFF);   // low byte
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <main+0x1b8>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	003b      	movs	r3, r7
 8000b5a:	705a      	strb	r2, [r3, #1]
		payload[2] = calculated_hum;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <main+0x1bc>)
 8000b5e:	781a      	ldrb	r2, [r3, #0]
 8000b60:	003b      	movs	r3, r7
 8000b62:	709a      	strb	r2, [r3, #2]
		LoRaWAN_SendHex(&lora, payload, 3);
 8000b64:	0039      	movs	r1, r7
 8000b66:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <main+0x1c0>)
 8000b68:	2203      	movs	r2, #3
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff fd50 	bl	8000610 <LoRaWAN_SendHex>
  {
 8000b70:	e770      	b.n	8000a54 <main+0x64>
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	00002710 	.word	0x00002710
 8000b78:	50000400 	.word	0x50000400
 8000b7c:	08006c30 	.word	0x08006c30
 8000b80:	08006c48 	.word	0x08006c48
 8000b84:	200000d4 	.word	0x200000d4
 8000b88:	200001b0 	.word	0x200001b0
 8000b8c:	20000128 	.word	0x20000128
 8000b90:	08006c5c 	.word	0x08006c5c
 8000b94:	08006c74 	.word	0x08006c74
 8000b98:	08006c90 	.word	0x08006c90
 8000b9c:	08006ca8 	.word	0x08006ca8
 8000ba0:	08006cc0 	.word	0x08006cc0
 8000ba4:	08006ce0 	.word	0x08006ce0
 8000ba8:	2000026e 	.word	0x2000026e
 8000bac:	20000270 	.word	0x20000270
 8000bb0:	2000025c 	.word	0x2000025c

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b09f      	sub	sp, #124	@ 0x7c
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	2440      	movs	r4, #64	@ 0x40
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	2338      	movs	r3, #56	@ 0x38
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f005 facd 	bl	8006164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bca:	232c      	movs	r3, #44	@ 0x2c
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	0018      	movs	r0, r3
 8000bd0:	2314      	movs	r3, #20
 8000bd2:	001a      	movs	r2, r3
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	f005 fac5 	bl	8006164 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	0018      	movs	r0, r3
 8000bde:	2328      	movs	r3, #40	@ 0x28
 8000be0:	001a      	movs	r2, r3
 8000be2:	2100      	movs	r1, #0
 8000be4:	f005 fabe 	bl	8006164 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000be8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <SystemClock_Config+0xe8>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a2c      	ldr	r2, [pc, #176]	@ (8000ca0 <SystemClock_Config+0xec>)
 8000bee:	401a      	ands	r2, r3
 8000bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <SystemClock_Config+0xe8>)
 8000bf2:	2180      	movs	r1, #128	@ 0x80
 8000bf4:	0109      	lsls	r1, r1, #4
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000bfa:	0021      	movs	r1, r4
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	2218      	movs	r2, #24
 8000c00:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c02:	187b      	adds	r3, r7, r1
 8000c04:	2201      	movs	r2, #1
 8000c06:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c08:	187b      	adds	r3, r7, r1
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c0e:	187b      	adds	r3, r7, r1
 8000c10:	2200      	movs	r2, #0
 8000c12:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000c14:	187b      	adds	r3, r7, r1
 8000c16:	22a0      	movs	r2, #160	@ 0xa0
 8000c18:	0212      	lsls	r2, r2, #8
 8000c1a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2200      	movs	r2, #0
 8000c20:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	0018      	movs	r0, r3
 8000c26:	f003 f809 	bl	8003c3c <HAL_RCC_OscConfig>
 8000c2a:	1e03      	subs	r3, r0, #0
 8000c2c:	d001      	beq.n	8000c32 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000c2e:	f000 fa47 	bl	80010c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c32:	212c      	movs	r1, #44	@ 0x2c
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	220f      	movs	r2, #15
 8000c38:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2200      	movs	r2, #0
 8000c44:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c46:	187b      	adds	r3, r7, r1
 8000c48:	2200      	movs	r2, #0
 8000c4a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c52:	187b      	adds	r3, r7, r1
 8000c54:	2100      	movs	r1, #0
 8000c56:	0018      	movs	r0, r3
 8000c58:	f003 fbc4 	bl	80043e4 <HAL_RCC_ClockConfig>
 8000c5c:	1e03      	subs	r3, r0, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000c60:	f000 fa2e 	bl	80010c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8000c64:	1d3b      	adds	r3, r7, #4
 8000c66:	222d      	movs	r2, #45	@ 0x2d
 8000c68:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c70:	1d3b      	adds	r3, r7, #4
 8000c72:	2200      	movs	r2, #0
 8000c74:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c7c:	1d3b      	adds	r3, r7, #4
 8000c7e:	2280      	movs	r2, #128	@ 0x80
 8000c80:	0292      	lsls	r2, r2, #10
 8000c82:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	0018      	movs	r0, r3
 8000c88:	f003 fdb0 	bl	80047ec <HAL_RCCEx_PeriphCLKConfig>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000c90:	f000 fa16 	bl	80010c0 <Error_Handler>
  }
}
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b01f      	add	sp, #124	@ 0x7c
 8000c9a:	bd90      	pop	{r4, r7, pc}
 8000c9c:	40007000 	.word	0x40007000
 8000ca0:	ffffe7ff 	.word	0xffffe7ff

08000ca4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000caa:	003b      	movs	r3, r7
 8000cac:	0018      	movs	r0, r3
 8000cae:	2308      	movs	r3, #8
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	f005 fa56 	bl	8006164 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000cb8:	4b37      	ldr	r3, [pc, #220]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000cba:	4a38      	ldr	r2, [pc, #224]	@ (8000d9c <MX_ADC_Init+0xf8>)
 8000cbc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000cbe:	4b36      	ldr	r3, [pc, #216]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000cc4:	4b34      	ldr	r3, [pc, #208]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000cc6:	22c0      	movs	r2, #192	@ 0xc0
 8000cc8:	0612      	lsls	r2, r2, #24
 8000cca:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ccc:	4b32      	ldr	r3, [pc, #200]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000cd2:	4b31      	ldr	r3, [pc, #196]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000cd8:	4b2f      	ldr	r3, [pc, #188]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cde:	4b2e      	ldr	r3, [pc, #184]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ce4:	4b2c      	ldr	r3, [pc, #176]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000ce6:	2220      	movs	r2, #32
 8000ce8:	2100      	movs	r1, #0
 8000cea:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000cec:	4b2a      	ldr	r3, [pc, #168]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000cee:	2221      	movs	r2, #33	@ 0x21
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cf4:	4b28      	ldr	r3, [pc, #160]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cfa:	4b27      	ldr	r3, [pc, #156]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000cfc:	22c2      	movs	r2, #194	@ 0xc2
 8000cfe:	32ff      	adds	r2, #255	@ 0xff
 8000d00:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d02:	4b25      	ldr	r3, [pc, #148]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000d04:	222c      	movs	r2, #44	@ 0x2c
 8000d06:	2100      	movs	r1, #0
 8000d08:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d0a:	4b23      	ldr	r3, [pc, #140]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000d0c:	2204      	movs	r2, #4
 8000d0e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d10:	4b21      	ldr	r3, [pc, #132]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000d16:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000d22:	4b1d      	ldr	r3, [pc, #116]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d28:	4b1b      	ldr	r3, [pc, #108]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f000 ffa4 	bl	8001c78 <HAL_ADC_Init>
 8000d30:	1e03      	subs	r3, r0, #0
 8000d32:	d001      	beq.n	8000d38 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000d34:	f000 f9c4 	bl	80010c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d38:	003b      	movs	r3, r7
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000d3e:	003b      	movs	r3, r7
 8000d40:	2280      	movs	r2, #128	@ 0x80
 8000d42:	0152      	lsls	r2, r2, #5
 8000d44:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d46:	003a      	movs	r2, r7
 8000d48:	4b13      	ldr	r3, [pc, #76]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f001 fa43 	bl	80021d8 <HAL_ADC_ConfigChannel>
 8000d52:	1e03      	subs	r3, r0, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000d56:	f000 f9b3 	bl	80010c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d5a:	003b      	movs	r3, r7
 8000d5c:	4a10      	ldr	r2, [pc, #64]	@ (8000da0 <MX_ADC_Init+0xfc>)
 8000d5e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d60:	003a      	movs	r2, r7
 8000d62:	4b0d      	ldr	r3, [pc, #52]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000d64:	0011      	movs	r1, r2
 8000d66:	0018      	movs	r0, r3
 8000d68:	f001 fa36 	bl	80021d8 <HAL_ADC_ConfigChannel>
 8000d6c:	1e03      	subs	r3, r0, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000d70:	f000 f9a6 	bl	80010c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000d74:	003b      	movs	r3, r7
 8000d76:	4a0b      	ldr	r2, [pc, #44]	@ (8000da4 <MX_ADC_Init+0x100>)
 8000d78:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000d7a:	003a      	movs	r2, r7
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <MX_ADC_Init+0xf4>)
 8000d7e:	0011      	movs	r1, r2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f001 fa29 	bl	80021d8 <HAL_ADC_ConfigChannel>
 8000d86:	1e03      	subs	r3, r0, #0
 8000d88:	d001      	beq.n	8000d8e <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000d8a:	f000 f999 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	46bd      	mov	sp, r7
 8000d92:	b002      	add	sp, #8
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			@ (mov r8, r8)
 8000d98:	20000078 	.word	0x20000078
 8000d9c:	40012400 	.word	0x40012400
 8000da0:	48040000 	.word	0x48040000
 8000da4:	44020000 	.word	0x44020000

08000da8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dac:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <MX_I2C1_Init+0x78>)
 8000dae:	4a1d      	ldr	r2, [pc, #116]	@ (8000e24 <MX_I2C1_Init+0x7c>)
 8000db0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000db2:	4b1b      	ldr	r3, [pc, #108]	@ (8000e20 <MX_I2C1_Init+0x78>)
 8000db4:	22c1      	movs	r2, #193	@ 0xc1
 8000db6:	00d2      	lsls	r2, r2, #3
 8000db8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dba:	4b19      	ldr	r3, [pc, #100]	@ (8000e20 <MX_I2C1_Init+0x78>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc0:	4b17      	ldr	r3, [pc, #92]	@ (8000e20 <MX_I2C1_Init+0x78>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc6:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <MX_I2C1_Init+0x78>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	@ (8000e20 <MX_I2C1_Init+0x78>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dd2:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <MX_I2C1_Init+0x78>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd8:	4b11      	ldr	r3, [pc, #68]	@ (8000e20 <MX_I2C1_Init+0x78>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dde:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <MX_I2C1_Init+0x78>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000de4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e20 <MX_I2C1_Init+0x78>)
 8000de6:	0018      	movs	r0, r3
 8000de8:	f001 ff5c 	bl	8002ca4 <HAL_I2C_Init>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d001      	beq.n	8000df4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000df0:	f000 f966 	bl	80010c0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000df4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <MX_I2C1_Init+0x78>)
 8000df6:	2100      	movs	r1, #0
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f002 fe2b 	bl	8003a54 <HAL_I2CEx_ConfigAnalogFilter>
 8000dfe:	1e03      	subs	r3, r0, #0
 8000e00:	d001      	beq.n	8000e06 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000e02:	f000 f95d 	bl	80010c0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e06:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <MX_I2C1_Init+0x78>)
 8000e08:	2100      	movs	r1, #0
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f002 fe6e 	bl	8003aec <HAL_I2CEx_ConfigDigitalFilter>
 8000e10:	1e03      	subs	r3, r0, #0
 8000e12:	d001      	beq.n	8000e18 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e14:	f000 f954 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	200000d4 	.word	0x200000d4
 8000e24:	40005400 	.word	0x40005400

08000e28 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	@ (8000e80 <MX_LPUART1_UART_Init+0x58>)
 8000e2e:	4a15      	ldr	r2, [pc, #84]	@ (8000e84 <MX_LPUART1_UART_Init+0x5c>)
 8000e30:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000e32:	4b13      	ldr	r3, [pc, #76]	@ (8000e80 <MX_LPUART1_UART_Init+0x58>)
 8000e34:	22e1      	movs	r2, #225	@ 0xe1
 8000e36:	0252      	lsls	r2, r2, #9
 8000e38:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <MX_LPUART1_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <MX_LPUART1_UART_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <MX_LPUART1_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e80 <MX_LPUART1_UART_Init+0x58>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <MX_LPUART1_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e58:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <MX_LPUART1_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <MX_LPUART1_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e64:	4b06      	ldr	r3, [pc, #24]	@ (8000e80 <MX_LPUART1_UART_Init+0x58>)
 8000e66:	0018      	movs	r0, r3
 8000e68:	f004 f9ca 	bl	8005200 <HAL_UART_Init>
 8000e6c:	1e03      	subs	r3, r0, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000e70:	f000 f926 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  lora.huart = &hlpuart1;
 8000e74:	4b04      	ldr	r3, [pc, #16]	@ (8000e88 <MX_LPUART1_UART_Init+0x60>)
 8000e76:	4a02      	ldr	r2, [pc, #8]	@ (8000e80 <MX_LPUART1_UART_Init+0x58>)
 8000e78:	601a      	str	r2, [r3, #0]
  /* USER CODE END LPUART1_Init 2 */

}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000128 	.word	0x20000128
 8000e84:	40004800 	.word	0x40004800
 8000e88:	2000025c 	.word	0x2000025c

08000e8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e90:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <MX_USART1_UART_Init+0x60>)
 8000e92:	4a17      	ldr	r2, [pc, #92]	@ (8000ef0 <MX_USART1_UART_Init+0x64>)
 8000e94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <MX_USART1_UART_Init+0x60>)
 8000e98:	22e1      	movs	r2, #225	@ 0xe1
 8000e9a:	0252      	lsls	r2, r2, #9
 8000e9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	@ (8000eec <MX_USART1_UART_Init+0x60>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	@ (8000eec <MX_USART1_UART_Init+0x60>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eaa:	4b10      	ldr	r3, [pc, #64]	@ (8000eec <MX_USART1_UART_Init+0x60>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000eec <MX_USART1_UART_Init+0x60>)
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <MX_USART1_UART_Init+0x60>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <MX_USART1_UART_Init+0x60>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <MX_USART1_UART_Init+0x60>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec8:	4b08      	ldr	r3, [pc, #32]	@ (8000eec <MX_USART1_UART_Init+0x60>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <MX_USART1_UART_Init+0x60>)
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f004 f995 	bl	8005200 <HAL_UART_Init>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d001      	beq.n	8000ede <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eda:	f000 f8f1 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  ConsolePrintf("USART1 (DBG) Cnfigured\r\n");
 8000ede:	4b05      	ldr	r3, [pc, #20]	@ (8000ef4 <MX_USART1_UART_Init+0x68>)
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f000 f877 	bl	8000fd4 <ConsolePrintf>
  /* USER CODE END USART1_Init 2 */

}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	200001b0 	.word	0x200001b0
 8000ef0:	40013800 	.word	0x40013800
 8000ef4:	08006d04 	.word	0x08006d04

08000ef8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000efc:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_RTC_Init+0x4c>)
 8000efe:	4a12      	ldr	r2, [pc, #72]	@ (8000f48 <MX_RTC_Init+0x50>)
 8000f00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <MX_RTC_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_RTC_Init+0x4c>)
 8000f0a:	227f      	movs	r2, #127	@ 0x7f
 8000f0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <MX_RTC_Init+0x4c>)
 8000f10:	22ff      	movs	r2, #255	@ 0xff
 8000f12:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f14:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <MX_RTC_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <MX_RTC_Init+0x4c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f20:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <MX_RTC_Init+0x4c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f26:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <MX_RTC_Init+0x4c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <MX_RTC_Init+0x4c>)
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f003 fdfa 	bl	8004b28 <HAL_RTC_Init>
 8000f34:	1e03      	subs	r3, r0, #0
 8000f36:	d001      	beq.n	8000f3c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000f38:	f000 f8c2 	bl	80010c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f3c:	46c0      	nop			@ (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	20000238 	.word	0x20000238
 8000f48:	40002800 	.word	0x40002800

08000f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b089      	sub	sp, #36	@ 0x24
 8000f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	240c      	movs	r4, #12
 8000f54:	193b      	adds	r3, r7, r4
 8000f56:	0018      	movs	r0, r3
 8000f58:	2314      	movs	r3, #20
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	f005 f901 	bl	8006164 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <MX_GPIO_Init+0x80>)
 8000f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <MX_GPIO_Init+0x80>)
 8000f68:	2101      	movs	r1, #1
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f6e:	4b17      	ldr	r3, [pc, #92]	@ (8000fcc <MX_GPIO_Init+0x80>)
 8000f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f72:	2201      	movs	r2, #1
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b14      	ldr	r3, [pc, #80]	@ (8000fcc <MX_GPIO_Init+0x80>)
 8000f7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f7e:	4b13      	ldr	r3, [pc, #76]	@ (8000fcc <MX_GPIO_Init+0x80>)
 8000f80:	2102      	movs	r1, #2
 8000f82:	430a      	orrs	r2, r1
 8000f84:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f86:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <MX_GPIO_Init+0x80>)
 8000f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8000f92:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <MX_GPIO_Init+0x84>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	2121      	movs	r1, #33	@ 0x21
 8000f98:	0018      	movs	r0, r3
 8000f9a:	f001 fe65 	bl	8002c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VBAT_MEAS_EN_Pin I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin;
 8000f9e:	0021      	movs	r1, r4
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2221      	movs	r2, #33	@ 0x21
 8000fa4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2201      	movs	r2, #1
 8000faa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <MX_GPIO_Init+0x84>)
 8000fbc:	0019      	movs	r1, r3
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	f001 fbf2 	bl	80027a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b009      	add	sp, #36	@ 0x24
 8000fca:	bd90      	pop	{r4, r7, pc}
 8000fcc:	40021000 	.word	0x40021000
 8000fd0:	50000400 	.word	0x50000400

08000fd4 <ConsolePrintf>:

/* USER CODE BEGIN 4 */
void ConsolePrintf(const char *format, ...)
{
 8000fd4:	b40f      	push	{r0, r1, r2, r3}
 8000fd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fd8:	b0df      	sub	sp, #380	@ 0x17c
 8000fda:	af06      	add	r7, sp, #24
  char final_buffer[160];    // Combined buffer (timestamp + message)

  // Get time and date from RTC
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000fdc:	2308      	movs	r3, #8
 8000fde:	18f9      	adds	r1, r7, r3
 8000fe0:	4b31      	ldr	r3, [pc, #196]	@ (80010a8 <ConsolePrintf+0xd4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f003 fe3b 	bl	8004c60 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000fea:	231c      	movs	r3, #28
 8000fec:	18f9      	adds	r1, r7, r3
 8000fee:	4b2e      	ldr	r3, [pc, #184]	@ (80010a8 <ConsolePrintf+0xd4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f003 fe92 	bl	8004d1c <HAL_RTC_GetDate>

  // Format timestamp as [YYYY-MM-DD HH:MM:SS]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
           date.Year, date.Month, date.Date,
 8000ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80010ac <ConsolePrintf+0xd8>)
 8000ffa:	22b0      	movs	r2, #176	@ 0xb0
 8000ffc:	0052      	lsls	r2, r2, #1
 8000ffe:	189b      	adds	r3, r3, r2
 8001000:	19db      	adds	r3, r3, r7
 8001002:	78db      	ldrb	r3, [r3, #3]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001004:	469c      	mov	ip, r3
           date.Year, date.Month, date.Date,
 8001006:	4b29      	ldr	r3, [pc, #164]	@ (80010ac <ConsolePrintf+0xd8>)
 8001008:	189b      	adds	r3, r3, r2
 800100a:	19db      	adds	r3, r3, r7
 800100c:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 800100e:	0019      	movs	r1, r3
           date.Year, date.Month, date.Date,
 8001010:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <ConsolePrintf+0xd8>)
 8001012:	189b      	adds	r3, r3, r2
 8001014:	19db      	adds	r3, r3, r7
 8001016:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001018:	001c      	movs	r4, r3
           time.Hours, time.Minutes, time.Seconds);
 800101a:	4b25      	ldr	r3, [pc, #148]	@ (80010b0 <ConsolePrintf+0xdc>)
 800101c:	189b      	adds	r3, r3, r2
 800101e:	19db      	adds	r3, r3, r7
 8001020:	781b      	ldrb	r3, [r3, #0]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001022:	001d      	movs	r5, r3
           time.Hours, time.Minutes, time.Seconds);
 8001024:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <ConsolePrintf+0xdc>)
 8001026:	189b      	adds	r3, r3, r2
 8001028:	19db      	adds	r3, r3, r7
 800102a:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 800102c:	001e      	movs	r6, r3
           time.Hours, time.Minutes, time.Seconds);
 800102e:	4b20      	ldr	r3, [pc, #128]	@ (80010b0 <ConsolePrintf+0xdc>)
 8001030:	189b      	adds	r3, r3, r2
 8001032:	19db      	adds	r3, r3, r7
 8001034:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001036:	4a1f      	ldr	r2, [pc, #124]	@ (80010b4 <ConsolePrintf+0xe0>)
 8001038:	20c0      	movs	r0, #192	@ 0xc0
 800103a:	1838      	adds	r0, r7, r0
 800103c:	9304      	str	r3, [sp, #16]
 800103e:	9603      	str	r6, [sp, #12]
 8001040:	9502      	str	r5, [sp, #8]
 8001042:	9401      	str	r4, [sp, #4]
 8001044:	9100      	str	r1, [sp, #0]
 8001046:	4663      	mov	r3, ip
 8001048:	2120      	movs	r1, #32
 800104a:	f004 fff9 	bl	8006040 <sniprintf>

  // Format the original message
  va_list args;
  va_start(args, format);
 800104e:	23be      	movs	r3, #190	@ 0xbe
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), format, args);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	22bc      	movs	r2, #188	@ 0xbc
 800105a:	0052      	lsls	r2, r2, #1
 800105c:	18ba      	adds	r2, r7, r2
 800105e:	6812      	ldr	r2, [r2, #0]
 8001060:	25e0      	movs	r5, #224	@ 0xe0
 8001062:	1978      	adds	r0, r7, r5
 8001064:	2180      	movs	r1, #128	@ 0x80
 8001066:	f005 f871 	bl	800614c <vsniprintf>
  va_end(args);

  // Combine timestamp and message
  snprintf(final_buffer, sizeof(final_buffer), "%s%s", timestamp_buffer, buffer);
 800106a:	20c0      	movs	r0, #192	@ 0xc0
 800106c:	1839      	adds	r1, r7, r0
 800106e:	4a12      	ldr	r2, [pc, #72]	@ (80010b8 <ConsolePrintf+0xe4>)
 8001070:	2420      	movs	r4, #32
 8001072:	1938      	adds	r0, r7, r4
 8001074:	197b      	adds	r3, r7, r5
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	000b      	movs	r3, r1
 800107a:	21a0      	movs	r1, #160	@ 0xa0
 800107c:	f004 ffe0 	bl	8006040 <sniprintf>

  // Transmit the combined message
  HAL_UART_Transmit(&huart1, (uint8_t *)final_buffer, strlen(final_buffer), HAL_MAX_DELAY);
 8001080:	193b      	adds	r3, r7, r4
 8001082:	0018      	movs	r0, r3
 8001084:	f7ff f840 	bl	8000108 <strlen>
 8001088:	0003      	movs	r3, r0
 800108a:	b29a      	uxth	r2, r3
 800108c:	2301      	movs	r3, #1
 800108e:	425b      	negs	r3, r3
 8001090:	1939      	adds	r1, r7, r4
 8001092:	480a      	ldr	r0, [pc, #40]	@ (80010bc <ConsolePrintf+0xe8>)
 8001094:	f004 f946 	bl	8005324 <HAL_UART_Transmit>
}
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	b059      	add	sp, #356	@ 0x164
 800109e:	bcf0      	pop	{r4, r5, r6, r7}
 80010a0:	bc08      	pop	{r3}
 80010a2:	b004      	add	sp, #16
 80010a4:	4718      	bx	r3
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	20000238 	.word	0x20000238
 80010ac:	fffffebc 	.word	0xfffffebc
 80010b0:	fffffea8 	.word	0xfffffea8
 80010b4:	08006d20 	.word	0x08006d20
 80010b8:	08006d44 	.word	0x08006d44
 80010bc:	200001b0 	.word	0x200001b0

080010c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c4:	b672      	cpsid	i
}
 80010c6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	e7fd      	b.n	80010c8 <Error_Handler+0x8>

080010cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d0:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <HAL_MspInit+0x24>)
 80010d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_MspInit+0x24>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <HAL_MspInit+0x24>)
 80010de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80010e0:	4b03      	ldr	r3, [pc, #12]	@ (80010f0 <HAL_MspInit+0x24>)
 80010e2:	2180      	movs	r1, #128	@ 0x80
 80010e4:	0549      	lsls	r1, r1, #21
 80010e6:	430a      	orrs	r2, r1
 80010e8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40021000 	.word	0x40021000

080010f4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	240c      	movs	r4, #12
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	0018      	movs	r0, r3
 8001102:	2314      	movs	r3, #20
 8001104:	001a      	movs	r2, r3
 8001106:	2100      	movs	r1, #0
 8001108:	f005 f82c 	bl	8006164 <memset>
  if(hadc->Instance==ADC1)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a14      	ldr	r2, [pc, #80]	@ (8001164 <HAL_ADC_MspInit+0x70>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d122      	bne.n	800115c <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001116:	4b14      	ldr	r3, [pc, #80]	@ (8001168 <HAL_ADC_MspInit+0x74>)
 8001118:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800111a:	4b13      	ldr	r3, [pc, #76]	@ (8001168 <HAL_ADC_MspInit+0x74>)
 800111c:	2180      	movs	r1, #128	@ 0x80
 800111e:	0089      	lsls	r1, r1, #2
 8001120:	430a      	orrs	r2, r1
 8001122:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b10      	ldr	r3, [pc, #64]	@ (8001168 <HAL_ADC_MspInit+0x74>)
 8001126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001128:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <HAL_ADC_MspInit+0x74>)
 800112a:	2101      	movs	r1, #1
 800112c:	430a      	orrs	r2, r1
 800112e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001130:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <HAL_ADC_MspInit+0x74>)
 8001132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001134:	2201      	movs	r2, #1
 8001136:	4013      	ands	r3, r2
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = VBAT_MEAS_Pin;
 800113c:	193b      	adds	r3, r7, r4
 800113e:	2201      	movs	r2, #1
 8001140:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001142:	193b      	adds	r3, r7, r4
 8001144:	2203      	movs	r2, #3
 8001146:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	193b      	adds	r3, r7, r4
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBAT_MEAS_GPIO_Port, &GPIO_InitStruct);
 800114e:	193a      	adds	r2, r7, r4
 8001150:	23a0      	movs	r3, #160	@ 0xa0
 8001152:	05db      	lsls	r3, r3, #23
 8001154:	0011      	movs	r1, r2
 8001156:	0018      	movs	r0, r3
 8001158:	f001 fb26 	bl	80027a8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800115c:	46c0      	nop			@ (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	b009      	add	sp, #36	@ 0x24
 8001162:	bd90      	pop	{r4, r7, pc}
 8001164:	40012400 	.word	0x40012400
 8001168:	40021000 	.word	0x40021000

0800116c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b089      	sub	sp, #36	@ 0x24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	240c      	movs	r4, #12
 8001176:	193b      	adds	r3, r7, r4
 8001178:	0018      	movs	r0, r3
 800117a:	2314      	movs	r3, #20
 800117c:	001a      	movs	r2, r3
 800117e:	2100      	movs	r1, #0
 8001180:	f004 fff0 	bl	8006164 <memset>
  if(hi2c->Instance==I2C1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a17      	ldr	r2, [pc, #92]	@ (80011e8 <HAL_I2C_MspInit+0x7c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d128      	bne.n	80011e0 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b17      	ldr	r3, [pc, #92]	@ (80011ec <HAL_I2C_MspInit+0x80>)
 8001190:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001192:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <HAL_I2C_MspInit+0x80>)
 8001194:	2102      	movs	r1, #2
 8001196:	430a      	orrs	r2, r1
 8001198:	62da      	str	r2, [r3, #44]	@ 0x2c
 800119a:	4b14      	ldr	r3, [pc, #80]	@ (80011ec <HAL_I2C_MspInit+0x80>)
 800119c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800119e:	2202      	movs	r2, #2
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011a6:	0021      	movs	r1, r4
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	22c0      	movs	r2, #192	@ 0xc0
 80011ac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2212      	movs	r2, #18
 80011b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2203      	movs	r2, #3
 80011be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2201      	movs	r2, #1
 80011c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	4a09      	ldr	r2, [pc, #36]	@ (80011f0 <HAL_I2C_MspInit+0x84>)
 80011ca:	0019      	movs	r1, r3
 80011cc:	0010      	movs	r0, r2
 80011ce:	f001 faeb 	bl	80027a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_I2C_MspInit+0x80>)
 80011d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011d6:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <HAL_I2C_MspInit+0x80>)
 80011d8:	2180      	movs	r1, #128	@ 0x80
 80011da:	0389      	lsls	r1, r1, #14
 80011dc:	430a      	orrs	r2, r1
 80011de:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011e0:	46c0      	nop			@ (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b009      	add	sp, #36	@ 0x24
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	40005400 	.word	0x40005400
 80011ec:	40021000 	.word	0x40021000
 80011f0:	50000400 	.word	0x50000400

080011f4 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0b      	ldr	r2, [pc, #44]	@ (8001230 <HAL_I2C_MspDeInit+0x3c>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d10f      	bne.n	8001226 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001206:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <HAL_I2C_MspDeInit+0x40>)
 8001208:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800120a:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <HAL_I2C_MspDeInit+0x40>)
 800120c:	490a      	ldr	r1, [pc, #40]	@ (8001238 <HAL_I2C_MspDeInit+0x44>)
 800120e:	400a      	ands	r2, r1
 8001210:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001212:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <HAL_I2C_MspDeInit+0x48>)
 8001214:	2140      	movs	r1, #64	@ 0x40
 8001216:	0018      	movs	r0, r3
 8001218:	f001 fc44 	bl	8002aa4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800121c:	4b07      	ldr	r3, [pc, #28]	@ (800123c <HAL_I2C_MspDeInit+0x48>)
 800121e:	2180      	movs	r1, #128	@ 0x80
 8001220:	0018      	movs	r0, r3
 8001222:	f001 fc3f 	bl	8002aa4 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b002      	add	sp, #8
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	40005400 	.word	0x40005400
 8001234:	40021000 	.word	0x40021000
 8001238:	ffdfffff 	.word	0xffdfffff
 800123c:	50000400 	.word	0x50000400

08001240 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b08b      	sub	sp, #44	@ 0x2c
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	2414      	movs	r4, #20
 800124a:	193b      	adds	r3, r7, r4
 800124c:	0018      	movs	r0, r3
 800124e:	2314      	movs	r3, #20
 8001250:	001a      	movs	r2, r3
 8001252:	2100      	movs	r1, #0
 8001254:	f004 ff86 	bl	8006164 <memset>
  if(huart->Instance==LPUART1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a30      	ldr	r2, [pc, #192]	@ (8001320 <HAL_UART_MspInit+0xe0>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d12a      	bne.n	80012b8 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001262:	4b30      	ldr	r3, [pc, #192]	@ (8001324 <HAL_UART_MspInit+0xe4>)
 8001264:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001266:	4b2f      	ldr	r3, [pc, #188]	@ (8001324 <HAL_UART_MspInit+0xe4>)
 8001268:	2180      	movs	r1, #128	@ 0x80
 800126a:	02c9      	lsls	r1, r1, #11
 800126c:	430a      	orrs	r2, r1
 800126e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b2c      	ldr	r3, [pc, #176]	@ (8001324 <HAL_UART_MspInit+0xe4>)
 8001272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001274:	4b2b      	ldr	r3, [pc, #172]	@ (8001324 <HAL_UART_MspInit+0xe4>)
 8001276:	2101      	movs	r1, #1
 8001278:	430a      	orrs	r2, r1
 800127a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800127c:	4b29      	ldr	r3, [pc, #164]	@ (8001324 <HAL_UART_MspInit+0xe4>)
 800127e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001280:	2201      	movs	r2, #1
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001288:	0021      	movs	r1, r4
 800128a:	187b      	adds	r3, r7, r1
 800128c:	220c      	movs	r2, #12
 800128e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	187b      	adds	r3, r7, r1
 8001292:	2202      	movs	r2, #2
 8001294:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	187b      	adds	r3, r7, r1
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129c:	187b      	adds	r3, r7, r1
 800129e:	2203      	movs	r2, #3
 80012a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2206      	movs	r2, #6
 80012a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	187a      	adds	r2, r7, r1
 80012aa:	23a0      	movs	r3, #160	@ 0xa0
 80012ac:	05db      	lsls	r3, r3, #23
 80012ae:	0011      	movs	r1, r2
 80012b0:	0018      	movs	r0, r3
 80012b2:	f001 fa79 	bl	80027a8 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 80012b6:	e02f      	b.n	8001318 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART1)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a1a      	ldr	r2, [pc, #104]	@ (8001328 <HAL_UART_MspInit+0xe8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d12a      	bne.n	8001318 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80012c2:	4b18      	ldr	r3, [pc, #96]	@ (8001324 <HAL_UART_MspInit+0xe4>)
 80012c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <HAL_UART_MspInit+0xe4>)
 80012c8:	2180      	movs	r1, #128	@ 0x80
 80012ca:	01c9      	lsls	r1, r1, #7
 80012cc:	430a      	orrs	r2, r1
 80012ce:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <HAL_UART_MspInit+0xe4>)
 80012d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012d4:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <HAL_UART_MspInit+0xe4>)
 80012d6:	2101      	movs	r1, #1
 80012d8:	430a      	orrs	r2, r1
 80012da:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <HAL_UART_MspInit+0xe4>)
 80012de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012e0:	2201      	movs	r2, #1
 80012e2:	4013      	ands	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80012e8:	2114      	movs	r1, #20
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	22c0      	movs	r2, #192	@ 0xc0
 80012ee:	00d2      	lsls	r2, r2, #3
 80012f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	2202      	movs	r2, #2
 80012f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	2203      	movs	r2, #3
 8001302:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001304:	187b      	adds	r3, r7, r1
 8001306:	2204      	movs	r2, #4
 8001308:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130a:	187a      	adds	r2, r7, r1
 800130c:	23a0      	movs	r3, #160	@ 0xa0
 800130e:	05db      	lsls	r3, r3, #23
 8001310:	0011      	movs	r1, r2
 8001312:	0018      	movs	r0, r3
 8001314:	f001 fa48 	bl	80027a8 <HAL_GPIO_Init>
}
 8001318:	46c0      	nop			@ (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b00b      	add	sp, #44	@ 0x2c
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	40004800 	.word	0x40004800
 8001324:	40021000 	.word	0x40021000
 8001328:	40013800 	.word	0x40013800

0800132c <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <HAL_UART_MspDeInit+0x5c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10c      	bne.n	8001358 <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN LPUART1_MspDeInit 0 */

    /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800133e:	4b13      	ldr	r3, [pc, #76]	@ (800138c <HAL_UART_MspDeInit+0x60>)
 8001340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001342:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_UART_MspDeInit+0x60>)
 8001344:	4912      	ldr	r1, [pc, #72]	@ (8001390 <HAL_UART_MspDeInit+0x64>)
 8001346:	400a      	ands	r2, r1
 8001348:	639a      	str	r2, [r3, #56]	@ 0x38

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800134a:	23a0      	movs	r3, #160	@ 0xa0
 800134c:	05db      	lsls	r3, r3, #23
 800134e:	210c      	movs	r1, #12
 8001350:	0018      	movs	r0, r3
 8001352:	f001 fba7 	bl	8002aa4 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001356:	e012      	b.n	800137e <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <HAL_UART_MspDeInit+0x68>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10d      	bne.n	800137e <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART1_CLK_DISABLE();
 8001362:	4b0a      	ldr	r3, [pc, #40]	@ (800138c <HAL_UART_MspDeInit+0x60>)
 8001364:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001366:	4b09      	ldr	r3, [pc, #36]	@ (800138c <HAL_UART_MspDeInit+0x60>)
 8001368:	490b      	ldr	r1, [pc, #44]	@ (8001398 <HAL_UART_MspDeInit+0x6c>)
 800136a:	400a      	ands	r2, r1
 800136c:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800136e:	23c0      	movs	r3, #192	@ 0xc0
 8001370:	00da      	lsls	r2, r3, #3
 8001372:	23a0      	movs	r3, #160	@ 0xa0
 8001374:	05db      	lsls	r3, r3, #23
 8001376:	0011      	movs	r1, r2
 8001378:	0018      	movs	r0, r3
 800137a:	f001 fb93 	bl	8002aa4 <HAL_GPIO_DeInit>
}
 800137e:	46c0      	nop			@ (mov r8, r8)
 8001380:	46bd      	mov	sp, r7
 8001382:	b002      	add	sp, #8
 8001384:	bd80      	pop	{r7, pc}
 8001386:	46c0      	nop			@ (mov r8, r8)
 8001388:	40004800 	.word	0x40004800
 800138c:	40021000 	.word	0x40021000
 8001390:	fffbffff 	.word	0xfffbffff
 8001394:	40013800 	.word	0x40013800
 8001398:	ffffbfff 	.word	0xffffbfff

0800139c <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a06      	ldr	r2, [pc, #24]	@ (80013c4 <HAL_RTC_MspInit+0x28>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d106      	bne.n	80013bc <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013ae:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_RTC_MspInit+0x2c>)
 80013b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013b2:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <HAL_RTC_MspInit+0x2c>)
 80013b4:	2180      	movs	r1, #128	@ 0x80
 80013b6:	02c9      	lsls	r1, r1, #11
 80013b8:	430a      	orrs	r2, r1
 80013ba:	651a      	str	r2, [r3, #80]	@ 0x50

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80013bc:	46c0      	nop			@ (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40002800 	.word	0x40002800
 80013c8:	40021000 	.word	0x40021000

080013cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013d0:	46c0      	nop			@ (mov r8, r8)
 80013d2:	e7fd      	b.n	80013d0 <NMI_Handler+0x4>

080013d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d8:	46c0      	nop			@ (mov r8, r8)
 80013da:	e7fd      	b.n	80013d8 <HardFault_Handler+0x4>

080013dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80013e0:	46c0      	nop			@ (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 fbdc 	bl	8001bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	46c0      	nop			@ (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001408:	4a14      	ldr	r2, [pc, #80]	@ (800145c <_sbrk+0x5c>)
 800140a:	4b15      	ldr	r3, [pc, #84]	@ (8001460 <_sbrk+0x60>)
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001414:	4b13      	ldr	r3, [pc, #76]	@ (8001464 <_sbrk+0x64>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d102      	bne.n	8001422 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <_sbrk+0x64>)
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <_sbrk+0x68>)
 8001420:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001422:	4b10      	ldr	r3, [pc, #64]	@ (8001464 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	18d3      	adds	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d207      	bcs.n	8001440 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001430:	f004 feb6 	bl	80061a0 <__errno>
 8001434:	0003      	movs	r3, r0
 8001436:	220c      	movs	r2, #12
 8001438:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143a:	2301      	movs	r3, #1
 800143c:	425b      	negs	r3, r3
 800143e:	e009      	b.n	8001454 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001440:	4b08      	ldr	r3, [pc, #32]	@ (8001464 <_sbrk+0x64>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001446:	4b07      	ldr	r3, [pc, #28]	@ (8001464 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	18d2      	adds	r2, r2, r3
 800144e:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <_sbrk+0x64>)
 8001450:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001452:	68fb      	ldr	r3, [r7, #12]
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	b006      	add	sp, #24
 800145a:	bd80      	pop	{r7, pc}
 800145c:	20005000 	.word	0x20005000
 8001460:	00000400 	.word	0x00000400
 8001464:	20000260 	.word	0x20000260
 8001468:	200003c8 	.word	0x200003c8

0800146c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	46c0      	nop			@ (mov r8, r8)
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <scan_i2c_bus>:
uint16_t calculated_temp;
uint8_t  calculated_hum;
int16_t i2c_error_code = 0;

void scan_i2c_bus(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	// we re-set these to false because we want to check this every time for safety
    has_sensor_1 = false;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <scan_i2c_bus+0x44>)
 800147e:	2200      	movs	r2, #0
 8001480:	701a      	strb	r2, [r3, #0]
    has_sensor_2 = false;
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <scan_i2c_bus+0x48>)
 8001484:	2200      	movs	r2, #0
 8001486:	701a      	strb	r2, [r3, #0]

    if (HAL_I2C_IsDeviceReady(&hi2c1, 68 << 1, 1, 10) == HAL_OK) has_sensor_1 = true;
 8001488:	480e      	ldr	r0, [pc, #56]	@ (80014c4 <scan_i2c_bus+0x4c>)
 800148a:	230a      	movs	r3, #10
 800148c:	2201      	movs	r2, #1
 800148e:	2188      	movs	r1, #136	@ 0x88
 8001490:	f001 ff10 	bl	80032b4 <HAL_I2C_IsDeviceReady>
 8001494:	1e03      	subs	r3, r0, #0
 8001496:	d102      	bne.n	800149e <scan_i2c_bus+0x26>
 8001498:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <scan_i2c_bus+0x44>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_IsDeviceReady(&hi2c1, 70 << 1, 1, 10) == HAL_OK) has_sensor_2 = true;
 800149e:	4809      	ldr	r0, [pc, #36]	@ (80014c4 <scan_i2c_bus+0x4c>)
 80014a0:	230a      	movs	r3, #10
 80014a2:	2201      	movs	r2, #1
 80014a4:	218c      	movs	r1, #140	@ 0x8c
 80014a6:	f001 ff05 	bl	80032b4 <HAL_I2C_IsDeviceReady>
 80014aa:	1e03      	subs	r3, r0, #0
 80014ac:	d102      	bne.n	80014b4 <scan_i2c_bus+0x3c>
 80014ae:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <scan_i2c_bus+0x48>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]
}
 80014b4:	46c0      	nop			@ (mov r8, r8)
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	46c0      	nop			@ (mov r8, r8)
 80014bc:	20000264 	.word	0x20000264
 80014c0:	20000265 	.word	0x20000265
 80014c4:	200000d4 	.word	0x200000d4

080014c8 <sensor_init_and_read>:

bool sensor_init_and_read(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    if (!has_sensor_1 && !has_sensor_2) {
 80014cc:	4b37      	ldr	r3, [pc, #220]	@ (80015ac <sensor_init_and_read+0xe4>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2201      	movs	r2, #1
 80014d2:	4053      	eors	r3, r2
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00b      	beq.n	80014f2 <sensor_init_and_read+0x2a>
 80014da:	4b35      	ldr	r3, [pc, #212]	@ (80015b0 <sensor_init_and_read+0xe8>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2201      	movs	r2, #1
 80014e0:	4053      	eors	r3, r2
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d004      	beq.n	80014f2 <sensor_init_and_read+0x2a>
    	i2c_error_code = NO_SENSORS_FOUND;
 80014e8:	4b32      	ldr	r3, [pc, #200]	@ (80015b4 <sensor_init_and_read+0xec>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	801a      	strh	r2, [r3, #0]
        return false;
 80014ee:	2300      	movs	r3, #0
 80014f0:	e058      	b.n	80015a4 <sensor_init_and_read+0xdc>
    }

    i2c_error_code = NO_ERROR;
 80014f2:	4b30      	ldr	r3, [pc, #192]	@ (80015b4 <sensor_init_and_read+0xec>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	801a      	strh	r2, [r3, #0]
    HAL_Delay(100);
 80014f8:	2064      	movs	r0, #100	@ 0x64
 80014fa:	f000 fb75 	bl	8001be8 <HAL_Delay>

    if (has_sensor_1) {
 80014fe:	4b2b      	ldr	r3, [pc, #172]	@ (80015ac <sensor_init_and_read+0xe4>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d015      	beq.n	8001532 <sensor_init_and_read+0x6a>
        sht4x_init(SHT43_I2C_ADDR_44);
 8001506:	2044      	movs	r0, #68	@ 0x44
 8001508:	f000 fa24 	bl	8001954 <sht4x_init>
        sht4x_soft_reset();
 800150c:	f000 fa96 	bl	8001a3c <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 8001510:	4b29      	ldr	r3, [pc, #164]	@ (80015b8 <sensor_init_and_read+0xf0>)
 8001512:	0018      	movs	r0, r3
 8001514:	f000 f9f4 	bl	8001900 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT43_I2C_ADDR_44);
 8001518:	2044      	movs	r0, #68	@ 0x44
 800151a:	f000 fa1b 	bl	8001954 <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 800151e:	4a27      	ldr	r2, [pc, #156]	@ (80015bc <sensor_init_and_read+0xf4>)
 8001520:	4b27      	ldr	r3, [pc, #156]	@ (80015c0 <sensor_init_and_read+0xf8>)
 8001522:	0011      	movs	r1, r2
 8001524:	0018      	movs	r0, r3
 8001526:	f000 fa25 	bl	8001974 <sht4x_measure_high_precision_ticks>
 800152a:	0003      	movs	r3, r0
 800152c:	001a      	movs	r2, r3
 800152e:	4b21      	ldr	r3, [pc, #132]	@ (80015b4 <sensor_init_and_read+0xec>)
 8001530:	801a      	strh	r2, [r3, #0]
    }

    if (has_sensor_2) {
 8001532:	4b1f      	ldr	r3, [pc, #124]	@ (80015b0 <sensor_init_and_read+0xe8>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d015      	beq.n	8001566 <sensor_init_and_read+0x9e>
        sht4x_init(SHT40_I2C_ADDR_46);
 800153a:	2046      	movs	r0, #70	@ 0x46
 800153c:	f000 fa0a 	bl	8001954 <sht4x_init>
        sht4x_soft_reset();
 8001540:	f000 fa7c 	bl	8001a3c <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 8001544:	4b1c      	ldr	r3, [pc, #112]	@ (80015b8 <sensor_init_and_read+0xf0>)
 8001546:	0018      	movs	r0, r3
 8001548:	f000 f9da 	bl	8001900 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT40_I2C_ADDR_46);
 800154c:	2046      	movs	r0, #70	@ 0x46
 800154e:	f000 fa01 	bl	8001954 <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 8001552:	4a1c      	ldr	r2, [pc, #112]	@ (80015c4 <sensor_init_and_read+0xfc>)
 8001554:	4b1c      	ldr	r3, [pc, #112]	@ (80015c8 <sensor_init_and_read+0x100>)
 8001556:	0011      	movs	r1, r2
 8001558:	0018      	movs	r0, r3
 800155a:	f000 fa0b 	bl	8001974 <sht4x_measure_high_precision_ticks>
 800155e:	0003      	movs	r3, r0
 8001560:	001a      	movs	r2, r3
 8001562:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <sensor_init_and_read+0xec>)
 8001564:	801a      	strh	r2, [r3, #0]
    }

    calculated_temp            = (temp_ticks_1 / 100U) + 55U;
 8001566:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <sensor_init_and_read+0xf8>)
 8001568:	881b      	ldrh	r3, [r3, #0]
 800156a:	2164      	movs	r1, #100	@ 0x64
 800156c:	0018      	movs	r0, r3
 800156e:	f7fe fddd 	bl	800012c <__udivsi3>
 8001572:	0003      	movs	r3, r0
 8001574:	b29b      	uxth	r3, r3
 8001576:	3337      	adds	r3, #55	@ 0x37
 8001578:	b29a      	uxth	r2, r3
 800157a:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <sensor_init_and_read+0x104>)
 800157c:	801a      	strh	r2, [r3, #0]
//    uint16_t calculated_temp_2 = (temp_ticks_2 / 100U) + 55U;
    calculated_hum             = (hum_ticks_1 / 100U);
 800157e:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <sensor_init_and_read+0xf4>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	2164      	movs	r1, #100	@ 0x64
 8001584:	0018      	movs	r0, r3
 8001586:	f7fe fdd1 	bl	800012c <__udivsi3>
 800158a:	0003      	movs	r3, r0
 800158c:	b29b      	uxth	r3, r3
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b0f      	ldr	r3, [pc, #60]	@ (80015d0 <sensor_init_and_read+0x108>)
 8001592:	701a      	strb	r2, [r3, #0]

    // convert to absolute unsigned values
//    uint8_t temp_delta = (uint8_t)abs(temp_diff);
//    uint8_t hum_delta  = (uint8_t)abs(hum_diff);

    if (i2c_error_code) {
 8001594:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <sensor_init_and_read+0xec>)
 8001596:	2200      	movs	r2, #0
 8001598:	5e9b      	ldrsh	r3, [r3, r2]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <sensor_init_and_read+0xda>
        return false;
 800159e:	2300      	movs	r3, #0
 80015a0:	e000      	b.n	80015a4 <sensor_init_and_read+0xdc>
    }
    return true;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	0018      	movs	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			@ (mov r8, r8)
 80015ac:	20000264 	.word	0x20000264
 80015b0:	20000265 	.word	0x20000265
 80015b4:	20000272 	.word	0x20000272
 80015b8:	00002710 	.word	0x00002710
 80015bc:	20000268 	.word	0x20000268
 80015c0:	20000266 	.word	0x20000266
 80015c4:	2000026c 	.word	0x2000026c
 80015c8:	2000026a 	.word	0x2000026a
 80015cc:	2000026e 	.word	0x2000026e
 80015d0:	20000270 	.word	0x20000270

080015d4 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3301      	adds	r3, #1
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	b29b      	uxth	r3, r3
}
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b002      	add	sp, #8
 80015fa:	bd80      	pop	{r7, pc}

080015fc <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	000a      	movs	r2, r1
 8001606:	1cbb      	adds	r3, r7, #2
 8001608:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800160a:	230d      	movs	r3, #13
 800160c:	18fb      	adds	r3, r7, r3
 800160e:	22ff      	movs	r2, #255	@ 0xff
 8001610:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001612:	230e      	movs	r3, #14
 8001614:	18fb      	adds	r3, r7, r3
 8001616:	2200      	movs	r2, #0
 8001618:	801a      	strh	r2, [r3, #0]
 800161a:	e038      	b.n	800168e <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 800161c:	230e      	movs	r3, #14
 800161e:	18fb      	adds	r3, r7, r3
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	18d3      	adds	r3, r2, r3
 8001626:	7819      	ldrb	r1, [r3, #0]
 8001628:	220d      	movs	r2, #13
 800162a:	18bb      	adds	r3, r7, r2
 800162c:	18ba      	adds	r2, r7, r2
 800162e:	7812      	ldrb	r2, [r2, #0]
 8001630:	404a      	eors	r2, r1
 8001632:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001634:	230c      	movs	r3, #12
 8001636:	18fb      	adds	r3, r7, r3
 8001638:	2208      	movs	r2, #8
 800163a:	701a      	strb	r2, [r3, #0]
 800163c:	e01c      	b.n	8001678 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 800163e:	210d      	movs	r1, #13
 8001640:	187b      	adds	r3, r7, r1
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	b25b      	sxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	da0a      	bge.n	8001660 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800164a:	187b      	adds	r3, r7, r1
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b25b      	sxtb	r3, r3
 8001650:	18db      	adds	r3, r3, r3
 8001652:	b25b      	sxtb	r3, r3
 8001654:	2231      	movs	r2, #49	@ 0x31
 8001656:	4053      	eors	r3, r2
 8001658:	b25a      	sxtb	r2, r3
 800165a:	187b      	adds	r3, r7, r1
 800165c:	701a      	strb	r2, [r3, #0]
 800165e:	e005      	b.n	800166c <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8001660:	230d      	movs	r3, #13
 8001662:	18fa      	adds	r2, r7, r3
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	18db      	adds	r3, r3, r3
 800166a:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800166c:	220c      	movs	r2, #12
 800166e:	18bb      	adds	r3, r7, r2
 8001670:	18ba      	adds	r2, r7, r2
 8001672:	7812      	ldrb	r2, [r2, #0]
 8001674:	3a01      	subs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
 8001678:	230c      	movs	r3, #12
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1dd      	bne.n	800163e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001682:	220e      	movs	r2, #14
 8001684:	18bb      	adds	r3, r7, r2
 8001686:	18ba      	adds	r2, r7, r2
 8001688:	8812      	ldrh	r2, [r2, #0]
 800168a:	3201      	adds	r2, #1
 800168c:	801a      	strh	r2, [r3, #0]
 800168e:	230e      	movs	r3, #14
 8001690:	18fa      	adds	r2, r7, r3
 8001692:	1cbb      	adds	r3, r7, #2
 8001694:	8812      	ldrh	r2, [r2, #0]
 8001696:	881b      	ldrh	r3, [r3, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d3bf      	bcc.n	800161c <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800169c:	230d      	movs	r3, #13
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	781b      	ldrb	r3, [r3, #0]
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	b004      	add	sp, #16
 80016a8:	bd80      	pop	{r7, pc}

080016aa <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	0008      	movs	r0, r1
 80016b4:	0011      	movs	r1, r2
 80016b6:	1cbb      	adds	r3, r7, #2
 80016b8:	1c02      	adds	r2, r0, #0
 80016ba:	801a      	strh	r2, [r3, #0]
 80016bc:	1c7b      	adds	r3, r7, #1
 80016be:	1c0a      	adds	r2, r1, #0
 80016c0:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 80016c2:	1cbb      	adds	r3, r7, #2
 80016c4:	881a      	ldrh	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	0011      	movs	r1, r2
 80016ca:	0018      	movs	r0, r3
 80016cc:	f7ff ff96 	bl	80015fc <sensirion_i2c_generate_crc>
 80016d0:	0003      	movs	r3, r0
 80016d2:	001a      	movs	r2, r3
 80016d4:	1c7b      	adds	r3, r7, #1
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	4293      	cmp	r3, r2
 80016da:	d001      	beq.n	80016e0 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e000      	b.n	80016e2 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	0018      	movs	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}

080016ea <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	0008      	movs	r0, r1
 80016f4:	0011      	movs	r1, r2
 80016f6:	1cbb      	adds	r3, r7, #2
 80016f8:	1c02      	adds	r2, r0, #0
 80016fa:	801a      	strh	r2, [r3, #0]
 80016fc:	1c7b      	adds	r3, r7, #1
 80016fe:	1c0a      	adds	r2, r1, #0
 8001700:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 8001702:	1cbb      	adds	r3, r7, #2
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	1cba      	adds	r2, r7, #2
 8001708:	1c59      	adds	r1, r3, #1
 800170a:	8011      	strh	r1, [r2, #0]
 800170c:	001a      	movs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	189b      	adds	r3, r3, r2
 8001712:	1c7a      	adds	r2, r7, #1
 8001714:	7812      	ldrb	r2, [r2, #0]
 8001716:	701a      	strb	r2, [r3, #0]
    return offset;
 8001718:	1cbb      	adds	r3, r7, #2
 800171a:	881b      	ldrh	r3, [r3, #0]
}
 800171c:	0018      	movs	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}

08001724 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6039      	str	r1, [r7, #0]
 800172c:	0011      	movs	r1, r2
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	1c02      	adds	r2, r0, #0
 8001732:	701a      	strb	r2, [r3, #0]
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	1c0a      	adds	r2, r1, #0
 8001738:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	6839      	ldr	r1, [r7, #0]
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	0018      	movs	r0, r3
 8001748:	f000 f8b8 	bl	80018bc <sensirion_i2c_hal_write>
 800174c:	0003      	movs	r3, r0
}
 800174e:	0018      	movs	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	b002      	add	sp, #8
 8001754:	bd80      	pop	{r7, pc}

08001756 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8001756:	b5b0      	push	{r4, r5, r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	0011      	movs	r1, r2
 8001760:	1dfb      	adds	r3, r7, #7
 8001762:	1c02      	adds	r2, r0, #0
 8001764:	701a      	strb	r2, [r3, #0]
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	1c0a      	adds	r2, r1, #0
 800176a:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	085b      	lsrs	r3, r3, #1
 8001772:	b29b      	uxth	r3, r3
 8001774:	220a      	movs	r2, #10
 8001776:	18ba      	adds	r2, r7, r2
 8001778:	1c19      	adds	r1, r3, #0
 800177a:	1c0b      	adds	r3, r1, #0
 800177c:	18db      	adds	r3, r3, r3
 800177e:	185b      	adds	r3, r3, r1
 8001780:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	881b      	ldrh	r3, [r3, #0]
 8001786:	2201      	movs	r2, #1
 8001788:	4013      	ands	r3, r2
 800178a:	b29b      	uxth	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8001790:	2304      	movs	r3, #4
 8001792:	e06c      	b.n	800186e <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8001794:	230a      	movs	r3, #10
 8001796:	18fb      	adds	r3, r7, r3
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	6839      	ldr	r1, [r7, #0]
 800179e:	1dfb      	adds	r3, r7, #7
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	0018      	movs	r0, r3
 80017a4:	f000 f868 	bl	8001878 <sensirion_i2c_hal_read>
 80017a8:	0003      	movs	r3, r0
 80017aa:	001a      	movs	r2, r3
 80017ac:	2108      	movs	r1, #8
 80017ae:	187b      	adds	r3, r7, r1
 80017b0:	801a      	strh	r2, [r3, #0]
    if (error) {
 80017b2:	000a      	movs	r2, r1
 80017b4:	18bb      	adds	r3, r7, r2
 80017b6:	2100      	movs	r1, #0
 80017b8:	5e5b      	ldrsh	r3, [r3, r1]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d003      	beq.n	80017c6 <sensirion_i2c_read_data_inplace+0x70>
        return error;
 80017be:	18bb      	adds	r3, r7, r2
 80017c0:	2200      	movs	r2, #0
 80017c2:	5e9b      	ldrsh	r3, [r3, r2]
 80017c4:	e053      	b.n	800186e <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80017c6:	230e      	movs	r3, #14
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	2200      	movs	r2, #0
 80017cc:	801a      	strh	r2, [r3, #0]
 80017ce:	230c      	movs	r3, #12
 80017d0:	18fb      	adds	r3, r7, r3
 80017d2:	2200      	movs	r2, #0
 80017d4:	801a      	strh	r2, [r3, #0]
 80017d6:	e041      	b.n	800185c <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80017d8:	210e      	movs	r1, #14
 80017da:	187b      	adds	r3, r7, r1
 80017dc:	881b      	ldrh	r3, [r3, #0]
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 80017e2:	187b      	adds	r3, r7, r1
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	3302      	adds	r3, #2
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	001a      	movs	r2, r3
 80017f0:	2102      	movs	r1, #2
 80017f2:	f7ff ff5a 	bl	80016aa <sensirion_i2c_check_crc>
 80017f6:	0003      	movs	r3, r0
 80017f8:	001a      	movs	r2, r3
 80017fa:	2108      	movs	r1, #8
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	801a      	strh	r2, [r3, #0]
        if (error) {
 8001800:	000a      	movs	r2, r1
 8001802:	18bb      	adds	r3, r7, r2
 8001804:	2100      	movs	r1, #0
 8001806:	5e5b      	ldrsh	r3, [r3, r1]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 800180c:	18bb      	adds	r3, r7, r2
 800180e:	2200      	movs	r2, #0
 8001810:	5e9b      	ldrsh	r3, [r3, r2]
 8001812:	e02c      	b.n	800186e <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 8001814:	240e      	movs	r4, #14
 8001816:	193b      	adds	r3, r7, r4
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	18d2      	adds	r2, r2, r3
 800181e:	250c      	movs	r5, #12
 8001820:	197b      	adds	r3, r7, r5
 8001822:	881b      	ldrh	r3, [r3, #0]
 8001824:	1979      	adds	r1, r7, r5
 8001826:	1c58      	adds	r0, r3, #1
 8001828:	8008      	strh	r0, [r1, #0]
 800182a:	0019      	movs	r1, r3
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	185b      	adds	r3, r3, r1
 8001830:	7812      	ldrb	r2, [r2, #0]
 8001832:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8001834:	193b      	adds	r3, r7, r4
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	3301      	adds	r3, #1
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	18d2      	adds	r2, r2, r3
 800183e:	197b      	adds	r3, r7, r5
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	1979      	adds	r1, r7, r5
 8001844:	1c58      	adds	r0, r3, #1
 8001846:	8008      	strh	r0, [r1, #0]
 8001848:	0019      	movs	r1, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	185b      	adds	r3, r3, r1
 800184e:	7812      	ldrb	r2, [r2, #0]
 8001850:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001852:	193b      	adds	r3, r7, r4
 8001854:	193a      	adds	r2, r7, r4
 8001856:	8812      	ldrh	r2, [r2, #0]
 8001858:	3203      	adds	r2, #3
 800185a:	801a      	strh	r2, [r3, #0]
 800185c:	230e      	movs	r3, #14
 800185e:	18fa      	adds	r2, r7, r3
 8001860:	230a      	movs	r3, #10
 8001862:	18fb      	adds	r3, r7, r3
 8001864:	8812      	ldrh	r2, [r2, #0]
 8001866:	881b      	ldrh	r3, [r3, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d3b5      	bcc.n	80017d8 <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 800186c:	2300      	movs	r3, #0
}
 800186e:	0018      	movs	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	b004      	add	sp, #16
 8001874:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001878 <sensirion_i2c_hal_read>:

void sensirion_i2c_hal_free(void) {
    /* nothing to free */
}

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b085      	sub	sp, #20
 800187c:	af02      	add	r7, sp, #8
 800187e:	6039      	str	r1, [r7, #0]
 8001880:	0011      	movs	r1, r2
 8001882:	1dfb      	adds	r3, r7, #7
 8001884:	1c02      	adds	r2, r0, #0
 8001886:	701a      	strb	r2, [r3, #0]
 8001888:	1dbb      	adds	r3, r7, #6
 800188a:	1c0a      	adds	r2, r1, #0
 800188c:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1), data, count, 100);
 800188e:	1dfb      	adds	r3, r7, #7
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b29b      	uxth	r3, r3
 8001894:	18db      	adds	r3, r3, r3
 8001896:	b299      	uxth	r1, r3
 8001898:	1dbb      	adds	r3, r7, #6
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b29b      	uxth	r3, r3
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <sensirion_i2c_hal_read+0x40>)
 80018a2:	2464      	movs	r4, #100	@ 0x64
 80018a4:	9400      	str	r4, [sp, #0]
 80018a6:	f001 fbfd 	bl	80030a4 <HAL_I2C_Master_Receive>
 80018aa:	0003      	movs	r3, r0
 80018ac:	b25b      	sxtb	r3, r3
}
 80018ae:	0018      	movs	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	b003      	add	sp, #12
 80018b4:	bd90      	pop	{r4, r7, pc}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	200000d4 	.word	0x200000d4

080018bc <sensirion_i2c_hal_write>:

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint8_t count) {
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b085      	sub	sp, #20
 80018c0:	af02      	add	r7, sp, #8
 80018c2:	6039      	str	r1, [r7, #0]
 80018c4:	0011      	movs	r1, r2
 80018c6:	1dfb      	adds	r3, r7, #7
 80018c8:	1c02      	adds	r2, r0, #0
 80018ca:	701a      	strb	r2, [r3, #0]
 80018cc:	1dbb      	adds	r3, r7, #6
 80018ce:	1c0a      	adds	r2, r1, #0
 80018d0:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	18db      	adds	r3, r3, r3
 80018da:	b299      	uxth	r1, r3
 80018dc:	1dbb      	adds	r3, r7, #6
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	4805      	ldr	r0, [pc, #20]	@ (80018fc <sensirion_i2c_hal_write+0x40>)
 80018e6:	2464      	movs	r4, #100	@ 0x64
 80018e8:	9400      	str	r4, [sp, #0]
 80018ea:	f001 fab1 	bl	8002e50 <HAL_I2C_Master_Transmit>
 80018ee:	0003      	movs	r3, r0
 80018f0:	b25b      	sxtb	r3, r3
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b003      	add	sp, #12
 80018f8:	bd90      	pop	{r4, r7, pc}
 80018fa:	46c0      	nop			@ (mov r8, r8)
 80018fc:	200000d4 	.word	0x200000d4

08001900 <sensirion_i2c_hal_sleep_usec>:

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	22fa      	movs	r2, #250	@ 0xfa
 800190c:	0091      	lsls	r1, r2, #2
 800190e:	0018      	movs	r0, r3
 8001910:	f7fe fc0c 	bl	800012c <__udivsi3>
 8001914:	0003      	movs	r3, r0
 8001916:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	22fa      	movs	r2, #250	@ 0xfa
 800191c:	0091      	lsls	r1, r2, #2
 800191e:	0018      	movs	r0, r3
 8001920:	f7fe fc8a 	bl	8000238 <__aeabi_uidivmod>
 8001924:	1e0b      	subs	r3, r1, #0
 8001926:	d002      	beq.n	800192e <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3301      	adds	r3, #1
 800192c:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_GetHalVersion() < 0x01010100) {
 800192e:	f000 f99b 	bl	8001c68 <HAL_GetHalVersion>
 8001932:	0003      	movs	r3, r0
 8001934:	4a06      	ldr	r2, [pc, #24]	@ (8001950 <sensirion_i2c_hal_sleep_usec+0x50>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d802      	bhi.n	8001940 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3301      	adds	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	0018      	movs	r0, r3
 8001944:	f000 f950 	bl	8001be8 <HAL_Delay>
}
 8001948:	46c0      	nop			@ (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	b004      	add	sp, #16
 800194e:	bd80      	pop	{r7, pc}
 8001950:	010100ff 	.word	0x010100ff

08001954 <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	0002      	movs	r2, r0
 800195c:	1dfb      	adds	r3, r7, #7
 800195e:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 8001960:	4b03      	ldr	r3, [pc, #12]	@ (8001970 <sht4x_init+0x1c>)
 8001962:	1dfa      	adds	r2, r7, #7
 8001964:	7812      	ldrb	r2, [r2, #0]
 8001966:	701a      	strb	r2, [r3, #0]
}
 8001968:	46c0      	nop			@ (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b002      	add	sp, #8
 800196e:	bd80      	pop	{r7, pc}
 8001970:	2000027a 	.word	0x2000027a

08001974 <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 8001974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001976:	b087      	sub	sp, #28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 800197e:	2516      	movs	r5, #22
 8001980:	197b      	adds	r3, r7, r5
 8001982:	2200      	movs	r2, #0
 8001984:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8001986:	4b2a      	ldr	r3, [pc, #168]	@ (8001a30 <sht4x_measure_high_precision_ticks+0xbc>)
 8001988:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 800198a:	260e      	movs	r6, #14
 800198c:	19bb      	adds	r3, r7, r6
 800198e:	2200      	movs	r2, #0
 8001990:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 8001992:	19bc      	adds	r4, r7, r6
 8001994:	19bb      	adds	r3, r7, r6
 8001996:	8819      	ldrh	r1, [r3, #0]
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	22fd      	movs	r2, #253	@ 0xfd
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff fea4 	bl	80016ea <sensirion_i2c_add_command8_to_buffer>
 80019a2:	0003      	movs	r3, r0
 80019a4:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 80019a6:	4b23      	ldr	r3, [pc, #140]	@ (8001a34 <sht4x_measure_high_precision_ticks+0xc0>)
 80019a8:	7818      	ldrb	r0, [r3, #0]
 80019aa:	197c      	adds	r4, r7, r5
 80019ac:	19bb      	adds	r3, r7, r6
 80019ae:	881a      	ldrh	r2, [r3, #0]
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	0019      	movs	r1, r3
 80019b4:	f7ff feb6 	bl	8001724 <sensirion_i2c_write_data>
 80019b8:	0003      	movs	r3, r0
 80019ba:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 80019bc:	197b      	adds	r3, r7, r5
 80019be:	2200      	movs	r2, #0
 80019c0:	5e9b      	ldrsh	r3, [r3, r2]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 80019c6:	197b      	adds	r3, r7, r5
 80019c8:	2200      	movs	r2, #0
 80019ca:	5e9b      	ldrsh	r3, [r3, r2]
 80019cc:	e02c      	b.n	8001a28 <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80019ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001a38 <sht4x_measure_high_precision_ticks+0xc4>)
 80019d0:	0018      	movs	r0, r3
 80019d2:	f7ff ff95 	bl	8001900 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 80019d6:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <sht4x_measure_high_precision_ticks+0xc0>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2516      	movs	r5, #22
 80019dc:	197c      	adds	r4, r7, r5
 80019de:	6939      	ldr	r1, [r7, #16]
 80019e0:	2204      	movs	r2, #4
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7ff feb7 	bl	8001756 <sensirion_i2c_read_data_inplace>
 80019e8:	0003      	movs	r3, r0
 80019ea:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 80019ec:	197b      	adds	r3, r7, r5
 80019ee:	2200      	movs	r2, #0
 80019f0:	5e9b      	ldrsh	r3, [r3, r2]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 80019f6:	197b      	adds	r3, r7, r5
 80019f8:	2200      	movs	r2, #0
 80019fa:	5e9b      	ldrsh	r3, [r3, r2]
 80019fc:	e014      	b.n	8001a28 <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f7ff fde7 	bl	80015d4 <sensirion_common_bytes_to_uint16_t>
 8001a06:	0003      	movs	r3, r0
 8001a08:	001a      	movs	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	3302      	adds	r3, #2
 8001a12:	0018      	movs	r0, r3
 8001a14:	f7ff fdde 	bl	80015d4 <sensirion_common_bytes_to_uint16_t>
 8001a18:	0003      	movs	r3, r0
 8001a1a:	001a      	movs	r2, r3
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	801a      	strh	r2, [r3, #0]
    return local_error;
 8001a20:	2316      	movs	r3, #22
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	2200      	movs	r2, #0
 8001a26:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b007      	add	sp, #28
 8001a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a30:	20000274 	.word	0x20000274
 8001a34:	2000027a 	.word	0x2000027a
 8001a38:	00002710 	.word	0x00002710

08001a3c <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 8001a3c:	b5b0      	push	{r4, r5, r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8001a42:	250e      	movs	r5, #14
 8001a44:	197b      	adds	r3, r7, r5
 8001a46:	2200      	movs	r2, #0
 8001a48:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8001a4a:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <sht4x_soft_reset+0x6c>)
 8001a4c:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 8001a4e:	1dbb      	adds	r3, r7, #6
 8001a50:	2200      	movs	r2, #0
 8001a52:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 8001a54:	1dbc      	adds	r4, r7, #6
 8001a56:	1dbb      	adds	r3, r7, #6
 8001a58:	8819      	ldrh	r1, [r3, #0]
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2294      	movs	r2, #148	@ 0x94
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f7ff fe43 	bl	80016ea <sensirion_i2c_add_command8_to_buffer>
 8001a64:	0003      	movs	r3, r0
 8001a66:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8001a68:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <sht4x_soft_reset+0x70>)
 8001a6a:	7818      	ldrb	r0, [r3, #0]
 8001a6c:	197c      	adds	r4, r7, r5
 8001a6e:	1dbb      	adds	r3, r7, #6
 8001a70:	881a      	ldrh	r2, [r3, #0]
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	0019      	movs	r1, r3
 8001a76:	f7ff fe55 	bl	8001724 <sensirion_i2c_write_data>
 8001a7a:	0003      	movs	r3, r0
 8001a7c:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001a7e:	197b      	adds	r3, r7, r5
 8001a80:	2200      	movs	r2, #0
 8001a82:	5e9b      	ldrsh	r3, [r3, r2]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <sht4x_soft_reset+0x54>
        return local_error;
 8001a88:	197b      	adds	r3, r7, r5
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	5e9b      	ldrsh	r3, [r3, r2]
 8001a8e:	e007      	b.n	8001aa0 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8001a90:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <sht4x_soft_reset+0x74>)
 8001a92:	0018      	movs	r0, r3
 8001a94:	f7ff ff34 	bl	8001900 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8001a98:	230e      	movs	r3, #14
 8001a9a:	18fb      	adds	r3, r7, r3
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001aa0:	0018      	movs	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b004      	add	sp, #16
 8001aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa8:	20000274 	.word	0x20000274
 8001aac:	2000027a 	.word	0x2000027a
 8001ab0:	00002710 	.word	0x00002710

08001ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001ab4:	480d      	ldr	r0, [pc, #52]	@ (8001aec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001ab6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ab8:	f7ff fcd8 	bl	800146c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001abc:	480c      	ldr	r0, [pc, #48]	@ (8001af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001abe:	490d      	ldr	r1, [pc, #52]	@ (8001af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8001af8 <LoopForever+0xe>)
  movs r3, #0
 8001ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac4:	e002      	b.n	8001acc <LoopCopyDataInit>

08001ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aca:	3304      	adds	r3, #4

08001acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad0:	d3f9      	bcc.n	8001ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8001b00 <LoopForever+0x16>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad8:	e001      	b.n	8001ade <LoopFillZerobss>

08001ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001adc:	3204      	adds	r2, #4

08001ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae0:	d3fb      	bcc.n	8001ada <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001ae2:	f004 fb63 	bl	80061ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ae6:	f7fe ff83 	bl	80009f0 <main>

08001aea <LoopForever>:

LoopForever:
    b LoopForever
 8001aea:	e7fe      	b.n	8001aea <LoopForever>
   ldr   r0, =_estack
 8001aec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001af8:	08006dfc 	.word	0x08006dfc
  ldr r2, =_sbss
 8001afc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001b00:	200003c8 	.word	0x200003c8

08001b04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b04:	e7fe      	b.n	8001b04 <ADC1_COMP_IRQHandler>
	...

08001b08 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b0e:	1dfb      	adds	r3, r7, #7
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_Init+0x3c>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <HAL_Init+0x3c>)
 8001b1a:	2140      	movs	r1, #64	@ 0x40
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b20:	2003      	movs	r0, #3
 8001b22:	f000 f811 	bl	8001b48 <HAL_InitTick>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001b2a:	1dfb      	adds	r3, r7, #7
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	701a      	strb	r2, [r3, #0]
 8001b30:	e001      	b.n	8001b36 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b32:	f7ff facb 	bl	80010cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b36:	1dfb      	adds	r3, r7, #7
 8001b38:	781b      	ldrb	r3, [r3, #0]
}
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			@ (mov r8, r8)
 8001b44:	40022000 	.word	0x40022000

08001b48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b50:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <HAL_InitTick+0x5c>)
 8001b52:	681c      	ldr	r4, [r3, #0]
 8001b54:	4b14      	ldr	r3, [pc, #80]	@ (8001ba8 <HAL_InitTick+0x60>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	0019      	movs	r1, r3
 8001b5a:	23fa      	movs	r3, #250	@ 0xfa
 8001b5c:	0098      	lsls	r0, r3, #2
 8001b5e:	f7fe fae5 	bl	800012c <__udivsi3>
 8001b62:	0003      	movs	r3, r0
 8001b64:	0019      	movs	r1, r3
 8001b66:	0020      	movs	r0, r4
 8001b68:	f7fe fae0 	bl	800012c <__udivsi3>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	0018      	movs	r0, r3
 8001b70:	f000 fe0d 	bl	800278e <HAL_SYSTICK_Config>
 8001b74:	1e03      	subs	r3, r0, #0
 8001b76:	d001      	beq.n	8001b7c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e00f      	b.n	8001b9c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d80b      	bhi.n	8001b9a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	2301      	movs	r3, #1
 8001b86:	425b      	negs	r3, r3
 8001b88:	2200      	movs	r2, #0
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 fdda 	bl	8002744 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b90:	4b06      	ldr	r3, [pc, #24]	@ (8001bac <HAL_InitTick+0x64>)
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	e000      	b.n	8001b9c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
}
 8001b9c:	0018      	movs	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	b003      	add	sp, #12
 8001ba2:	bd90      	pop	{r4, r7, pc}
 8001ba4:	20000000 	.word	0x20000000
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	20000004 	.word	0x20000004

08001bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb4:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <HAL_IncTick+0x1c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	001a      	movs	r2, r3
 8001bba:	4b05      	ldr	r3, [pc, #20]	@ (8001bd0 <HAL_IncTick+0x20>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	18d2      	adds	r2, r2, r3
 8001bc0:	4b03      	ldr	r3, [pc, #12]	@ (8001bd0 <HAL_IncTick+0x20>)
 8001bc2:	601a      	str	r2, [r3, #0]
}
 8001bc4:	46c0      	nop			@ (mov r8, r8)
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	2000027c 	.word	0x2000027c

08001bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd8:	4b02      	ldr	r3, [pc, #8]	@ (8001be4 <HAL_GetTick+0x10>)
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	0018      	movs	r0, r3
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	2000027c 	.word	0x2000027c

08001be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bf0:	f7ff fff0 	bl	8001bd4 <HAL_GetTick>
 8001bf4:	0003      	movs	r3, r0
 8001bf6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	d005      	beq.n	8001c0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	@ (8001c2c <HAL_Delay+0x44>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	001a      	movs	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	189b      	adds	r3, r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	f7ff ffe0 	bl	8001bd4 <HAL_GetTick>
 8001c14:	0002      	movs	r2, r0
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d8f7      	bhi.n	8001c10 <HAL_Delay+0x28>
  {
  }
}
 8001c20:	46c0      	nop			@ (mov r8, r8)
 8001c22:	46c0      	nop			@ (mov r8, r8)
 8001c24:	46bd      	mov	sp, r7
 8001c26:	b004      	add	sp, #16
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	46c0      	nop			@ (mov r8, r8)
 8001c2c:	20000008 	.word	0x20000008

08001c30 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001c34:	4b04      	ldr	r3, [pc, #16]	@ (8001c48 <HAL_SuspendTick+0x18>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b03      	ldr	r3, [pc, #12]	@ (8001c48 <HAL_SuspendTick+0x18>)
 8001c3a:	2102      	movs	r1, #2
 8001c3c:	438a      	bics	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
}
 8001c40:	46c0      	nop			@ (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	46c0      	nop			@ (mov r8, r8)
 8001c48:	e000e010 	.word	0xe000e010

08001c4c <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001c50:	4b04      	ldr	r3, [pc, #16]	@ (8001c64 <HAL_ResumeTick+0x18>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <HAL_ResumeTick+0x18>)
 8001c56:	2102      	movs	r1, #2
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]
}
 8001c5c:	46c0      	nop			@ (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			@ (mov r8, r8)
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8001c6c:	4b01      	ldr	r3, [pc, #4]	@ (8001c74 <HAL_GetHalVersion+0xc>)
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	010a0700 	.word	0x010a0700

08001c78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e159      	b.n	8001f3e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10a      	bne.n	8001ca8 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2250      	movs	r2, #80	@ 0x50
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f7ff fa26 	bl	80010f4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cac:	2210      	movs	r2, #16
 8001cae:	4013      	ands	r3, r2
 8001cb0:	2b10      	cmp	r3, #16
 8001cb2:	d005      	beq.n	8001cc0 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2204      	movs	r2, #4
 8001cbc:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001cbe:	d00b      	beq.n	8001cd8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2250      	movs	r2, #80	@ 0x50
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e132      	b.n	8001f3e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cdc:	4a9a      	ldr	r2, [pc, #616]	@ (8001f48 <HAL_ADC_Init+0x2d0>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d108      	bne.n	8001d08 <HAL_ADC_Init+0x90>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <HAL_ADC_Init+0x90>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_ADC_Init+0x92>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d149      	bne.n	8001da2 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	23c0      	movs	r3, #192	@ 0xc0
 8001d14:	061b      	lsls	r3, r3, #24
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d00b      	beq.n	8001d32 <HAL_ADC_Init+0xba>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	2380      	movs	r3, #128	@ 0x80
 8001d20:	05db      	lsls	r3, r3, #23
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d005      	beq.n	8001d32 <HAL_ADC_Init+0xba>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	2380      	movs	r3, #128	@ 0x80
 8001d2c:	061b      	lsls	r3, r3, #24
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d111      	bne.n	8001d56 <HAL_ADC_Init+0xde>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	0092      	lsls	r2, r2, #2
 8001d3e:	0892      	lsrs	r2, r2, #2
 8001d40:	611a      	str	r2, [r3, #16]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	6919      	ldr	r1, [r3, #16]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	611a      	str	r2, [r3, #16]
 8001d54:	e014      	b.n	8001d80 <HAL_ADC_Init+0x108>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	0892      	lsrs	r2, r2, #2
 8001d64:	611a      	str	r2, [r3, #16]
 8001d66:	4b79      	ldr	r3, [pc, #484]	@ (8001f4c <HAL_ADC_Init+0x2d4>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4b78      	ldr	r3, [pc, #480]	@ (8001f4c <HAL_ADC_Init+0x2d4>)
 8001d6c:	4978      	ldr	r1, [pc, #480]	@ (8001f50 <HAL_ADC_Init+0x2d8>)
 8001d6e:	400a      	ands	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	4b76      	ldr	r3, [pc, #472]	@ (8001f4c <HAL_ADC_Init+0x2d4>)
 8001d74:	6819      	ldr	r1, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4b74      	ldr	r3, [pc, #464]	@ (8001f4c <HAL_ADC_Init+0x2d4>)
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2118      	movs	r1, #24
 8001d8c:	438a      	bics	r2, r1
 8001d8e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68d9      	ldr	r1, [r3, #12]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001da2:	4b6a      	ldr	r3, [pc, #424]	@ (8001f4c <HAL_ADC_Init+0x2d4>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	4b69      	ldr	r3, [pc, #420]	@ (8001f4c <HAL_ADC_Init+0x2d4>)
 8001da8:	496a      	ldr	r1, [pc, #424]	@ (8001f54 <HAL_ADC_Init+0x2dc>)
 8001daa:	400a      	ands	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001dae:	4b67      	ldr	r3, [pc, #412]	@ (8001f4c <HAL_ADC_Init+0x2d4>)
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001db6:	065a      	lsls	r2, r3, #25
 8001db8:	4b64      	ldr	r3, [pc, #400]	@ (8001f4c <HAL_ADC_Init+0x2d4>)
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	2380      	movs	r3, #128	@ 0x80
 8001dc6:	055b      	lsls	r3, r3, #21
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d108      	bne.n	8001dde <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2180      	movs	r1, #128	@ 0x80
 8001dd8:	0549      	lsls	r1, r1, #21
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	495b      	ldr	r1, [pc, #364]	@ (8001f58 <HAL_ADC_Init+0x2e0>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68d9      	ldr	r1, [r3, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d101      	bne.n	8001e04 <HAL_ADC_Init+0x18c>
 8001e00:	2304      	movs	r3, #4
 8001e02:	e000      	b.n	8001e06 <HAL_ADC_Init+0x18e>
 8001e04:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001e06:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2020      	movs	r0, #32
 8001e0c:	5c1b      	ldrb	r3, [r3, r0]
 8001e0e:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001e10:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	202c      	movs	r0, #44	@ 0x2c
 8001e16:	5c1b      	ldrb	r3, [r3, r0]
 8001e18:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001e1a:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001e20:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001e28:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001e30:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e3e:	23c2      	movs	r3, #194	@ 0xc2
 8001e40:	33ff      	adds	r3, #255	@ 0xff
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d00b      	beq.n	8001e5e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68d9      	ldr	r1, [r3, #12]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	430a      	orrs	r2, r1
 8001e5c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2221      	movs	r2, #33	@ 0x21
 8001e62:	5c9b      	ldrb	r3, [r3, r2]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d11a      	bne.n	8001e9e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	5c9b      	ldrb	r3, [r3, r2]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d109      	bne.n	8001e86 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2180      	movs	r1, #128	@ 0x80
 8001e7e:	0249      	lsls	r1, r1, #9
 8001e80:	430a      	orrs	r2, r1
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	e00b      	b.n	8001e9e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	431a      	orrs	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e96:	2201      	movs	r2, #1
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d11f      	bne.n	8001ee6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	492a      	ldr	r1, [pc, #168]	@ (8001f5c <HAL_ADC_Init+0x2e4>)
 8001eb2:	400a      	ands	r2, r1
 8001eb4:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6919      	ldr	r1, [r3, #16]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001ec4:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8001eca:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691a      	ldr	r2, [r3, #16]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2101      	movs	r1, #1
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	611a      	str	r2, [r3, #16]
 8001ee4:	e00e      	b.n	8001f04 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	2201      	movs	r2, #1
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d107      	bne.n	8001f04 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2101      	movs	r1, #1
 8001f00:	438a      	bics	r2, r1
 8001f02:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695a      	ldr	r2, [r3, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2107      	movs	r1, #7
 8001f10:	438a      	bics	r2, r1
 8001f12:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6959      	ldr	r1, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f30:	2203      	movs	r2, #3
 8001f32:	4393      	bics	r3, r2
 8001f34:	2201      	movs	r2, #1
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	0018      	movs	r0, r3
 8001f40:	46bd      	mov	sp, r7
 8001f42:	b002      	add	sp, #8
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	46c0      	nop			@ (mov r8, r8)
 8001f48:	fffffefd 	.word	0xfffffefd
 8001f4c:	40012708 	.word	0x40012708
 8001f50:	ffc3ffff 	.word	0xffc3ffff
 8001f54:	fdffffff 	.word	0xfdffffff
 8001f58:	fffe0219 	.word	0xfffe0219
 8001f5c:	fffffc03 	.word	0xfffffc03

08001f60 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f68:	230f      	movs	r3, #15
 8001f6a:	18fb      	adds	r3, r7, r3
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2204      	movs	r2, #4
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d138      	bne.n	8001fee <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2250      	movs	r2, #80	@ 0x50
 8001f80:	5c9b      	ldrb	r3, [r3, r2]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_Start+0x2a>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e038      	b.n	8001ffc <HAL_ADC_Start+0x9c>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2250      	movs	r2, #80	@ 0x50
 8001f8e:	2101      	movs	r1, #1
 8001f90:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d007      	beq.n	8001faa <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001f9a:	230f      	movs	r3, #15
 8001f9c:	18fc      	adds	r4, r7, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 f9b9 	bl	8002318 <ADC_Enable>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001faa:	230f      	movs	r3, #15
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d120      	bne.n	8001ff6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb8:	4a12      	ldr	r2, [pc, #72]	@ (8002004 <HAL_ADC_Start+0xa4>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2280      	movs	r2, #128	@ 0x80
 8001fbe:	0052      	lsls	r2, r2, #1
 8001fc0:	431a      	orrs	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2250      	movs	r2, #80	@ 0x50
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	221c      	movs	r2, #28
 8001fda:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2104      	movs	r1, #4
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	e003      	b.n	8001ff6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001fee:	230f      	movs	r3, #15
 8001ff0:	18fb      	adds	r3, r7, r3
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ff6:	230f      	movs	r3, #15
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	781b      	ldrb	r3, [r3, #0]
}
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b005      	add	sp, #20
 8002002:	bd90      	pop	{r4, r7, pc}
 8002004:	fffff0fe 	.word	0xfffff0fe

08002008 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002008:	b5b0      	push	{r4, r5, r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002010:	230f      	movs	r3, #15
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	2200      	movs	r2, #0
 8002016:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2250      	movs	r2, #80	@ 0x50
 800201c:	5c9b      	ldrb	r3, [r3, r2]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_ADC_Stop+0x1e>
 8002022:	2302      	movs	r3, #2
 8002024:	e029      	b.n	800207a <HAL_ADC_Stop+0x72>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2250      	movs	r2, #80	@ 0x50
 800202a:	2101      	movs	r1, #1
 800202c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800202e:	250f      	movs	r5, #15
 8002030:	197c      	adds	r4, r7, r5
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	0018      	movs	r0, r3
 8002036:	f000 fa3e 	bl	80024b6 <ADC_ConversionStop>
 800203a:	0003      	movs	r3, r0
 800203c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800203e:	197b      	adds	r3, r7, r5
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d112      	bne.n	800206c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002046:	197c      	adds	r4, r7, r5
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	0018      	movs	r0, r3
 800204c:	f000 f9cc 	bl	80023e8 <ADC_Disable>
 8002050:	0003      	movs	r3, r0
 8002052:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002054:	197b      	adds	r3, r7, r5
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d107      	bne.n	800206c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002060:	4a08      	ldr	r2, [pc, #32]	@ (8002084 <HAL_ADC_Stop+0x7c>)
 8002062:	4013      	ands	r3, r2
 8002064:	2201      	movs	r2, #1
 8002066:	431a      	orrs	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2250      	movs	r2, #80	@ 0x50
 8002070:	2100      	movs	r1, #0
 8002072:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002074:	230f      	movs	r3, #15
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	781b      	ldrb	r3, [r3, #0]
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b004      	add	sp, #16
 8002080:	bdb0      	pop	{r4, r5, r7, pc}
 8002082:	46c0      	nop			@ (mov r8, r8)
 8002084:	fffffefe 	.word	0xfffffefe

08002088 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d102      	bne.n	80020a8 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80020a2:	2308      	movs	r3, #8
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	e014      	b.n	80020d2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	2201      	movs	r2, #1
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d10b      	bne.n	80020ce <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020ba:	2220      	movs	r2, #32
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2250      	movs	r2, #80	@ 0x50
 80020c6:	2100      	movs	r1, #0
 80020c8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e072      	b.n	80021b4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80020ce:	230c      	movs	r3, #12
 80020d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80020d2:	f7ff fd7f 	bl	8001bd4 <HAL_GetTick>
 80020d6:	0003      	movs	r3, r0
 80020d8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80020da:	e01f      	b.n	800211c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	3301      	adds	r3, #1
 80020e0:	d01c      	beq.n	800211c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_ADC_PollForConversion+0x70>
 80020e8:	f7ff fd74 	bl	8001bd4 <HAL_GetTick>
 80020ec:	0002      	movs	r2, r0
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d211      	bcs.n	800211c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4013      	ands	r3, r2
 8002102:	d10b      	bne.n	800211c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002108:	2204      	movs	r2, #4
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2250      	movs	r2, #80	@ 0x50
 8002114:	2100      	movs	r1, #0
 8002116:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e04b      	b.n	80021b4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4013      	ands	r3, r2
 8002126:	d0d9      	beq.n	80020dc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800212c:	2280      	movs	r2, #128	@ 0x80
 800212e:	0092      	lsls	r2, r2, #2
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	23c0      	movs	r3, #192	@ 0xc0
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	4013      	ands	r3, r2
 8002142:	d12e      	bne.n	80021a2 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2220      	movs	r2, #32
 8002148:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800214a:	2b00      	cmp	r3, #0
 800214c:	d129      	bne.n	80021a2 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2208      	movs	r2, #8
 8002156:	4013      	ands	r3, r2
 8002158:	2b08      	cmp	r3, #8
 800215a:	d122      	bne.n	80021a2 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2204      	movs	r2, #4
 8002164:	4013      	ands	r3, r2
 8002166:	d110      	bne.n	800218a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	210c      	movs	r1, #12
 8002174:	438a      	bics	r2, r1
 8002176:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800217c:	4a0f      	ldr	r2, [pc, #60]	@ (80021bc <HAL_ADC_PollForConversion+0x134>)
 800217e:	4013      	ands	r3, r2
 8002180:	2201      	movs	r2, #1
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	655a      	str	r2, [r3, #84]	@ 0x54
 8002188:	e00b      	b.n	80021a2 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218e:	2220      	movs	r2, #32
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800219a:	2201      	movs	r2, #1
 800219c:	431a      	orrs	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d103      	bne.n	80021b2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	220c      	movs	r2, #12
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	0018      	movs	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	b004      	add	sp, #16
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	fffffefe 	.word	0xfffffefe

080021c0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80021ce:	0018      	movs	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b002      	add	sp, #8
 80021d4:	bd80      	pop	{r7, pc}
	...

080021d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2250      	movs	r2, #80	@ 0x50
 80021e6:	5c9b      	ldrb	r3, [r3, r2]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x18>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e085      	b.n	80022fc <HAL_ADC_ConfigChannel+0x124>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2250      	movs	r2, #80	@ 0x50
 80021f4:	2101      	movs	r1, #1
 80021f6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2204      	movs	r2, #4
 8002200:	4013      	ands	r3, r2
 8002202:	d00b      	beq.n	800221c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002208:	2220      	movs	r2, #32
 800220a:	431a      	orrs	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2250      	movs	r2, #80	@ 0x50
 8002214:	2100      	movs	r1, #0
 8002216:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e06f      	b.n	80022fc <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a38      	ldr	r2, [pc, #224]	@ (8002304 <HAL_ADC_ConfigChannel+0x12c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d035      	beq.n	8002292 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	035b      	lsls	r3, r3, #13
 8002232:	0b5a      	lsrs	r2, r3, #13
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	2380      	movs	r3, #128	@ 0x80
 8002242:	02db      	lsls	r3, r3, #11
 8002244:	4013      	ands	r3, r2
 8002246:	d009      	beq.n	800225c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002248:	4b2f      	ldr	r3, [pc, #188]	@ (8002308 <HAL_ADC_ConfigChannel+0x130>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b2e      	ldr	r3, [pc, #184]	@ (8002308 <HAL_ADC_ConfigChannel+0x130>)
 800224e:	2180      	movs	r1, #128	@ 0x80
 8002250:	0409      	lsls	r1, r1, #16
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8002256:	200a      	movs	r0, #10
 8002258:	f000 f97a 	bl	8002550 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	2380      	movs	r3, #128	@ 0x80
 8002262:	029b      	lsls	r3, r3, #10
 8002264:	4013      	ands	r3, r2
 8002266:	d006      	beq.n	8002276 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8002268:	4b27      	ldr	r3, [pc, #156]	@ (8002308 <HAL_ADC_ConfigChannel+0x130>)
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b26      	ldr	r3, [pc, #152]	@ (8002308 <HAL_ADC_ConfigChannel+0x130>)
 800226e:	2180      	movs	r1, #128	@ 0x80
 8002270:	03c9      	lsls	r1, r1, #15
 8002272:	430a      	orrs	r2, r1
 8002274:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	2380      	movs	r3, #128	@ 0x80
 800227c:	025b      	lsls	r3, r3, #9
 800227e:	4013      	ands	r3, r2
 8002280:	d037      	beq.n	80022f2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8002282:	4b21      	ldr	r3, [pc, #132]	@ (8002308 <HAL_ADC_ConfigChannel+0x130>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	4b20      	ldr	r3, [pc, #128]	@ (8002308 <HAL_ADC_ConfigChannel+0x130>)
 8002288:	2180      	movs	r1, #128	@ 0x80
 800228a:	0449      	lsls	r1, r1, #17
 800228c:	430a      	orrs	r2, r1
 800228e:	601a      	str	r2, [r3, #0]
 8002290:	e02f      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	035b      	lsls	r3, r3, #13
 800229e:	0b5b      	lsrs	r3, r3, #13
 80022a0:	43d9      	mvns	r1, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	400a      	ands	r2, r1
 80022a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	2380      	movs	r3, #128	@ 0x80
 80022b0:	02db      	lsls	r3, r3, #11
 80022b2:	4013      	ands	r3, r2
 80022b4:	d005      	beq.n	80022c2 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80022b6:	4b14      	ldr	r3, [pc, #80]	@ (8002308 <HAL_ADC_ConfigChannel+0x130>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4b13      	ldr	r3, [pc, #76]	@ (8002308 <HAL_ADC_ConfigChannel+0x130>)
 80022bc:	4913      	ldr	r1, [pc, #76]	@ (800230c <HAL_ADC_ConfigChannel+0x134>)
 80022be:	400a      	ands	r2, r1
 80022c0:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	2380      	movs	r3, #128	@ 0x80
 80022c8:	029b      	lsls	r3, r3, #10
 80022ca:	4013      	ands	r3, r2
 80022cc:	d005      	beq.n	80022da <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80022ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002308 <HAL_ADC_ConfigChannel+0x130>)
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002308 <HAL_ADC_ConfigChannel+0x130>)
 80022d4:	490e      	ldr	r1, [pc, #56]	@ (8002310 <HAL_ADC_ConfigChannel+0x138>)
 80022d6:	400a      	ands	r2, r1
 80022d8:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	2380      	movs	r3, #128	@ 0x80
 80022e0:	025b      	lsls	r3, r3, #9
 80022e2:	4013      	ands	r3, r2
 80022e4:	d005      	beq.n	80022f2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 80022e6:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <HAL_ADC_ConfigChannel+0x130>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	4b07      	ldr	r3, [pc, #28]	@ (8002308 <HAL_ADC_ConfigChannel+0x130>)
 80022ec:	4909      	ldr	r1, [pc, #36]	@ (8002314 <HAL_ADC_ConfigChannel+0x13c>)
 80022ee:	400a      	ands	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2250      	movs	r2, #80	@ 0x50
 80022f6:	2100      	movs	r1, #0
 80022f8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b002      	add	sp, #8
 8002302:	bd80      	pop	{r7, pc}
 8002304:	00001001 	.word	0x00001001
 8002308:	40012708 	.word	0x40012708
 800230c:	ff7fffff 	.word	0xff7fffff
 8002310:	ffbfffff 	.word	0xffbfffff
 8002314:	feffffff 	.word	0xfeffffff

08002318 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2203      	movs	r2, #3
 800232c:	4013      	ands	r3, r2
 800232e:	2b01      	cmp	r3, #1
 8002330:	d108      	bne.n	8002344 <ADC_Enable+0x2c>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2201      	movs	r2, #1
 800233a:	4013      	ands	r3, r2
 800233c:	2b01      	cmp	r3, #1
 800233e:	d101      	bne.n	8002344 <ADC_Enable+0x2c>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <ADC_Enable+0x2e>
 8002344:	2300      	movs	r3, #0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d146      	bne.n	80023d8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a24      	ldr	r2, [pc, #144]	@ (80023e4 <ADC_Enable+0xcc>)
 8002352:	4013      	ands	r3, r2
 8002354:	d00d      	beq.n	8002372 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235a:	2210      	movs	r2, #16
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002366:	2201      	movs	r2, #1
 8002368:	431a      	orrs	r2, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e033      	b.n	80023da <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	430a      	orrs	r2, r1
 8002380:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8002382:	2001      	movs	r0, #1
 8002384:	f000 f8e4 	bl	8002550 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002388:	f7ff fc24 	bl	8001bd4 <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002390:	e01b      	b.n	80023ca <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002392:	f7ff fc1f 	bl	8001bd4 <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b0a      	cmp	r3, #10
 800239e:	d914      	bls.n	80023ca <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2201      	movs	r2, #1
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d00d      	beq.n	80023ca <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023b2:	2210      	movs	r2, #16
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023be:	2201      	movs	r2, #1
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e007      	b.n	80023da <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2201      	movs	r2, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d1dc      	bne.n	8002392 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b004      	add	sp, #16
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	80000017 	.word	0x80000017

080023e8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2203      	movs	r2, #3
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d108      	bne.n	8002414 <ADC_Disable+0x2c>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2201      	movs	r2, #1
 800240a:	4013      	ands	r3, r2
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <ADC_Disable+0x2c>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <ADC_Disable+0x2e>
 8002414:	2300      	movs	r3, #0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d048      	beq.n	80024ac <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2205      	movs	r2, #5
 8002422:	4013      	ands	r3, r2
 8002424:	2b01      	cmp	r3, #1
 8002426:	d110      	bne.n	800244a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2102      	movs	r1, #2
 8002434:	430a      	orrs	r2, r1
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2203      	movs	r2, #3
 800243e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002440:	f7ff fbc8 	bl	8001bd4 <HAL_GetTick>
 8002444:	0003      	movs	r3, r0
 8002446:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002448:	e029      	b.n	800249e <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244e:	2210      	movs	r2, #16
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	2201      	movs	r2, #1
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e023      	b.n	80024ae <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002466:	f7ff fbb5 	bl	8001bd4 <HAL_GetTick>
 800246a:	0002      	movs	r2, r0
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b0a      	cmp	r3, #10
 8002472:	d914      	bls.n	800249e <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2201      	movs	r2, #1
 800247c:	4013      	ands	r3, r2
 800247e:	2b01      	cmp	r3, #1
 8002480:	d10d      	bne.n	800249e <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002486:	2210      	movs	r2, #16
 8002488:	431a      	orrs	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	2201      	movs	r2, #1
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e007      	b.n	80024ae <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2201      	movs	r2, #1
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d0dc      	beq.n	8002466 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	0018      	movs	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b004      	add	sp, #16
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2204      	movs	r2, #4
 80024ca:	4013      	ands	r3, r2
 80024cc:	d03a      	beq.n	8002544 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2204      	movs	r2, #4
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d10d      	bne.n	80024f8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	2202      	movs	r2, #2
 80024e4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80024e6:	d107      	bne.n	80024f8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2110      	movs	r1, #16
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80024f8:	f7ff fb6c 	bl	8001bd4 <HAL_GetTick>
 80024fc:	0003      	movs	r3, r0
 80024fe:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002500:	e01a      	b.n	8002538 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002502:	f7ff fb67 	bl	8001bd4 <HAL_GetTick>
 8002506:	0002      	movs	r2, r0
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b0a      	cmp	r3, #10
 800250e:	d913      	bls.n	8002538 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	2204      	movs	r2, #4
 8002518:	4013      	ands	r3, r2
 800251a:	d00d      	beq.n	8002538 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002520:	2210      	movs	r2, #16
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252c:	2201      	movs	r2, #1
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e006      	b.n	8002546 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2204      	movs	r2, #4
 8002540:	4013      	ands	r3, r2
 8002542:	d1de      	bne.n	8002502 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	0018      	movs	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	b004      	add	sp, #16
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002558:	4b0b      	ldr	r3, [pc, #44]	@ (8002588 <ADC_DelayMicroSecond+0x38>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	490b      	ldr	r1, [pc, #44]	@ (800258c <ADC_DelayMicroSecond+0x3c>)
 800255e:	0018      	movs	r0, r3
 8002560:	f7fd fde4 	bl	800012c <__udivsi3>
 8002564:	0003      	movs	r3, r0
 8002566:	001a      	movs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4353      	muls	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800256e:	e002      	b.n	8002576 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	3b01      	subs	r3, #1
 8002574:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1f9      	bne.n	8002570 <ADC_DelayMicroSecond+0x20>
  }
}
 800257c:	46c0      	nop			@ (mov r8, r8)
 800257e:	46c0      	nop			@ (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b004      	add	sp, #16
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			@ (mov r8, r8)
 8002588:	20000000 	.word	0x20000000
 800258c:	000f4240 	.word	0x000f4240

08002590 <HAL_ADCEx_EnableVREFINT>:
  * @note   This API is obsolete. This equivalent configuration is done in HAL_ADC_ConfigChannel().
            bit fields in ADC_CCR and SYSCFG_CFGR3 control the same signals to VREFINT and TempSensor buffers
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_EnableVREFINT(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002596:	2300      	movs	r3, #0
 8002598:	607b      	str	r3, [r7, #4]

  /* Enable the Buffer for the ADC by setting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 800259a:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <HAL_ADCEx_EnableVREFINT+0x58>)
 800259c:	6a1a      	ldr	r2, [r3, #32]
 800259e:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <HAL_ADCEx_EnableVREFINT+0x58>)
 80025a0:	2180      	movs	r1, #128	@ 0x80
 80025a2:	0049      	lsls	r1, r1, #1
 80025a4:	430a      	orrs	r2, r1
 80025a6:	621a      	str	r2, [r3, #32]

  /* Wait for Vrefint buffer effectively enabled */
  /* Get tick count */
  tickstart = HAL_GetTick();
 80025a8:	f7ff fb14 	bl	8001bd4 <HAL_GetTick>
 80025ac:	0003      	movs	r3, r0
 80025ae:	607b      	str	r3, [r7, #4]

  while (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 80025b0:	e00e      	b.n	80025d0 <HAL_ADCEx_EnableVREFINT+0x40>
  {
    if ((HAL_GetTick() - tickstart) > SYSCFG_BUF_VREFINT_ENABLE_TIMEOUT)
 80025b2:	f7ff fb0f 	bl	8001bd4 <HAL_GetTick>
 80025b6:	0002      	movs	r2, r0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d907      	bls.n	80025d0 <HAL_ADCEx_EnableVREFINT+0x40>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 80025c0:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_ADCEx_EnableVREFINT+0x58>)
 80025c2:	6a1a      	ldr	r2, [r3, #32]
 80025c4:	2380      	movs	r3, #128	@ 0x80
 80025c6:	05db      	lsls	r3, r3, #23
 80025c8:	4013      	ands	r3, r2
 80025ca:	d101      	bne.n	80025d0 <HAL_ADCEx_EnableVREFINT+0x40>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e006      	b.n	80025de <HAL_ADCEx_EnableVREFINT+0x4e>
  while (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 80025d0:	4b05      	ldr	r3, [pc, #20]	@ (80025e8 <HAL_ADCEx_EnableVREFINT+0x58>)
 80025d2:	6a1a      	ldr	r2, [r3, #32]
 80025d4:	2380      	movs	r3, #128	@ 0x80
 80025d6:	05db      	lsls	r3, r3, #23
 80025d8:	4013      	ands	r3, r2
 80025da:	d0ea      	beq.n	80025b2 <HAL_ADCEx_EnableVREFINT+0x22>
      }
    }
  }

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	0018      	movs	r0, r3
 80025e0:	46bd      	mov	sp, r7
 80025e2:	b002      	add	sp, #8
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	46c0      	nop			@ (mov r8, r8)
 80025e8:	40010000 	.word	0x40010000

080025ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	0002      	movs	r2, r0
 80025f4:	1dfb      	adds	r3, r7, #7
 80025f6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80025f8:	1dfb      	adds	r3, r7, #7
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80025fe:	d809      	bhi.n	8002614 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002600:	1dfb      	adds	r3, r7, #7
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	001a      	movs	r2, r3
 8002606:	231f      	movs	r3, #31
 8002608:	401a      	ands	r2, r3
 800260a:	4b04      	ldr	r3, [pc, #16]	@ (800261c <__NVIC_EnableIRQ+0x30>)
 800260c:	2101      	movs	r1, #1
 800260e:	4091      	lsls	r1, r2
 8002610:	000a      	movs	r2, r1
 8002612:	601a      	str	r2, [r3, #0]
  }
}
 8002614:	46c0      	nop			@ (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}
 800261c:	e000e100 	.word	0xe000e100

08002620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002620:	b590      	push	{r4, r7, lr}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	0002      	movs	r2, r0
 8002628:	6039      	str	r1, [r7, #0]
 800262a:	1dfb      	adds	r3, r7, #7
 800262c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800262e:	1dfb      	adds	r3, r7, #7
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b7f      	cmp	r3, #127	@ 0x7f
 8002634:	d828      	bhi.n	8002688 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002636:	4a2f      	ldr	r2, [pc, #188]	@ (80026f4 <__NVIC_SetPriority+0xd4>)
 8002638:	1dfb      	adds	r3, r7, #7
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	b25b      	sxtb	r3, r3
 800263e:	089b      	lsrs	r3, r3, #2
 8002640:	33c0      	adds	r3, #192	@ 0xc0
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	589b      	ldr	r3, [r3, r2]
 8002646:	1dfa      	adds	r2, r7, #7
 8002648:	7812      	ldrb	r2, [r2, #0]
 800264a:	0011      	movs	r1, r2
 800264c:	2203      	movs	r2, #3
 800264e:	400a      	ands	r2, r1
 8002650:	00d2      	lsls	r2, r2, #3
 8002652:	21ff      	movs	r1, #255	@ 0xff
 8002654:	4091      	lsls	r1, r2
 8002656:	000a      	movs	r2, r1
 8002658:	43d2      	mvns	r2, r2
 800265a:	401a      	ands	r2, r3
 800265c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	019b      	lsls	r3, r3, #6
 8002662:	22ff      	movs	r2, #255	@ 0xff
 8002664:	401a      	ands	r2, r3
 8002666:	1dfb      	adds	r3, r7, #7
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	0018      	movs	r0, r3
 800266c:	2303      	movs	r3, #3
 800266e:	4003      	ands	r3, r0
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002674:	481f      	ldr	r0, [pc, #124]	@ (80026f4 <__NVIC_SetPriority+0xd4>)
 8002676:	1dfb      	adds	r3, r7, #7
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b25b      	sxtb	r3, r3
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	430a      	orrs	r2, r1
 8002680:	33c0      	adds	r3, #192	@ 0xc0
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002686:	e031      	b.n	80026ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002688:	4a1b      	ldr	r2, [pc, #108]	@ (80026f8 <__NVIC_SetPriority+0xd8>)
 800268a:	1dfb      	adds	r3, r7, #7
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	0019      	movs	r1, r3
 8002690:	230f      	movs	r3, #15
 8002692:	400b      	ands	r3, r1
 8002694:	3b08      	subs	r3, #8
 8002696:	089b      	lsrs	r3, r3, #2
 8002698:	3306      	adds	r3, #6
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	18d3      	adds	r3, r2, r3
 800269e:	3304      	adds	r3, #4
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	1dfa      	adds	r2, r7, #7
 80026a4:	7812      	ldrb	r2, [r2, #0]
 80026a6:	0011      	movs	r1, r2
 80026a8:	2203      	movs	r2, #3
 80026aa:	400a      	ands	r2, r1
 80026ac:	00d2      	lsls	r2, r2, #3
 80026ae:	21ff      	movs	r1, #255	@ 0xff
 80026b0:	4091      	lsls	r1, r2
 80026b2:	000a      	movs	r2, r1
 80026b4:	43d2      	mvns	r2, r2
 80026b6:	401a      	ands	r2, r3
 80026b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	019b      	lsls	r3, r3, #6
 80026be:	22ff      	movs	r2, #255	@ 0xff
 80026c0:	401a      	ands	r2, r3
 80026c2:	1dfb      	adds	r3, r7, #7
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	0018      	movs	r0, r3
 80026c8:	2303      	movs	r3, #3
 80026ca:	4003      	ands	r3, r0
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026d0:	4809      	ldr	r0, [pc, #36]	@ (80026f8 <__NVIC_SetPriority+0xd8>)
 80026d2:	1dfb      	adds	r3, r7, #7
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	001c      	movs	r4, r3
 80026d8:	230f      	movs	r3, #15
 80026da:	4023      	ands	r3, r4
 80026dc:	3b08      	subs	r3, #8
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	430a      	orrs	r2, r1
 80026e2:	3306      	adds	r3, #6
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	18c3      	adds	r3, r0, r3
 80026e8:	3304      	adds	r3, #4
 80026ea:	601a      	str	r2, [r3, #0]
}
 80026ec:	46c0      	nop			@ (mov r8, r8)
 80026ee:	46bd      	mov	sp, r7
 80026f0:	b003      	add	sp, #12
 80026f2:	bd90      	pop	{r4, r7, pc}
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	1e5a      	subs	r2, r3, #1
 8002708:	2380      	movs	r3, #128	@ 0x80
 800270a:	045b      	lsls	r3, r3, #17
 800270c:	429a      	cmp	r2, r3
 800270e:	d301      	bcc.n	8002714 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002710:	2301      	movs	r3, #1
 8002712:	e010      	b.n	8002736 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002714:	4b0a      	ldr	r3, [pc, #40]	@ (8002740 <SysTick_Config+0x44>)
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	3a01      	subs	r2, #1
 800271a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800271c:	2301      	movs	r3, #1
 800271e:	425b      	negs	r3, r3
 8002720:	2103      	movs	r1, #3
 8002722:	0018      	movs	r0, r3
 8002724:	f7ff ff7c 	bl	8002620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002728:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <SysTick_Config+0x44>)
 800272a:	2200      	movs	r2, #0
 800272c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800272e:	4b04      	ldr	r3, [pc, #16]	@ (8002740 <SysTick_Config+0x44>)
 8002730:	2207      	movs	r2, #7
 8002732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002734:	2300      	movs	r3, #0
}
 8002736:	0018      	movs	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	b002      	add	sp, #8
 800273c:	bd80      	pop	{r7, pc}
 800273e:	46c0      	nop			@ (mov r8, r8)
 8002740:	e000e010 	.word	0xe000e010

08002744 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
 800274e:	210f      	movs	r1, #15
 8002750:	187b      	adds	r3, r7, r1
 8002752:	1c02      	adds	r2, r0, #0
 8002754:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002756:	68ba      	ldr	r2, [r7, #8]
 8002758:	187b      	adds	r3, r7, r1
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	b25b      	sxtb	r3, r3
 800275e:	0011      	movs	r1, r2
 8002760:	0018      	movs	r0, r3
 8002762:	f7ff ff5d 	bl	8002620 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8002766:	46c0      	nop			@ (mov r8, r8)
 8002768:	46bd      	mov	sp, r7
 800276a:	b004      	add	sp, #16
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	0002      	movs	r2, r0
 8002776:	1dfb      	adds	r3, r7, #7
 8002778:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800277a:	1dfb      	adds	r3, r7, #7
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	b25b      	sxtb	r3, r3
 8002780:	0018      	movs	r0, r3
 8002782:	f7ff ff33 	bl	80025ec <__NVIC_EnableIRQ>
}
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	46bd      	mov	sp, r7
 800278a:	b002      	add	sp, #8
 800278c:	bd80      	pop	{r7, pc}

0800278e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	0018      	movs	r0, r3
 800279a:	f7ff ffaf 	bl	80026fc <SysTick_Config>
 800279e:	0003      	movs	r3, r0
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b002      	add	sp, #8
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80027be:	e155      	b.n	8002a6c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2101      	movs	r1, #1
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4091      	lsls	r1, r2
 80027ca:	000a      	movs	r2, r1
 80027cc:	4013      	ands	r3, r2
 80027ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d100      	bne.n	80027d8 <HAL_GPIO_Init+0x30>
 80027d6:	e146      	b.n	8002a66 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	2203      	movs	r2, #3
 80027de:	4013      	ands	r3, r2
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d005      	beq.n	80027f0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2203      	movs	r2, #3
 80027ea:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d130      	bne.n	8002852 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	409a      	lsls	r2, r3
 80027fe:	0013      	movs	r3, r2
 8002800:	43da      	mvns	r2, r3
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	409a      	lsls	r2, r3
 8002812:	0013      	movs	r3, r2
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002826:	2201      	movs	r2, #1
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
 800282c:	0013      	movs	r3, r2
 800282e:	43da      	mvns	r2, r3
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	091b      	lsrs	r3, r3, #4
 800283c:	2201      	movs	r2, #1
 800283e:	401a      	ands	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	409a      	lsls	r2, r3
 8002844:	0013      	movs	r3, r2
 8002846:	693a      	ldr	r2, [r7, #16]
 8002848:	4313      	orrs	r3, r2
 800284a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	693a      	ldr	r2, [r7, #16]
 8002850:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2203      	movs	r2, #3
 8002858:	4013      	ands	r3, r2
 800285a:	2b03      	cmp	r3, #3
 800285c:	d017      	beq.n	800288e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	2203      	movs	r2, #3
 800286a:	409a      	lsls	r2, r3
 800286c:	0013      	movs	r3, r2
 800286e:	43da      	mvns	r2, r3
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	409a      	lsls	r2, r3
 8002880:	0013      	movs	r3, r2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2203      	movs	r2, #3
 8002894:	4013      	ands	r3, r2
 8002896:	2b02      	cmp	r3, #2
 8002898:	d123      	bne.n	80028e2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	08da      	lsrs	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3208      	adds	r2, #8
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	58d3      	ldr	r3, [r2, r3]
 80028a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2207      	movs	r2, #7
 80028ac:	4013      	ands	r3, r2
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	220f      	movs	r2, #15
 80028b2:	409a      	lsls	r2, r3
 80028b4:	0013      	movs	r3, r2
 80028b6:	43da      	mvns	r2, r3
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4013      	ands	r3, r2
 80028bc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	691a      	ldr	r2, [r3, #16]
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	2107      	movs	r1, #7
 80028c6:	400b      	ands	r3, r1
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	409a      	lsls	r2, r3
 80028cc:	0013      	movs	r3, r2
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	08da      	lsrs	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3208      	adds	r2, #8
 80028dc:	0092      	lsls	r2, r2, #2
 80028de:	6939      	ldr	r1, [r7, #16]
 80028e0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	2203      	movs	r2, #3
 80028ee:	409a      	lsls	r2, r3
 80028f0:	0013      	movs	r3, r2
 80028f2:	43da      	mvns	r2, r3
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4013      	ands	r3, r2
 80028f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2203      	movs	r2, #3
 8002900:	401a      	ands	r2, r3
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	409a      	lsls	r2, r3
 8002908:	0013      	movs	r3, r2
 800290a:	693a      	ldr	r2, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	23c0      	movs	r3, #192	@ 0xc0
 800291c:	029b      	lsls	r3, r3, #10
 800291e:	4013      	ands	r3, r2
 8002920:	d100      	bne.n	8002924 <HAL_GPIO_Init+0x17c>
 8002922:	e0a0      	b.n	8002a66 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002924:	4b57      	ldr	r3, [pc, #348]	@ (8002a84 <HAL_GPIO_Init+0x2dc>)
 8002926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002928:	4b56      	ldr	r3, [pc, #344]	@ (8002a84 <HAL_GPIO_Init+0x2dc>)
 800292a:	2101      	movs	r1, #1
 800292c:	430a      	orrs	r2, r1
 800292e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002930:	4a55      	ldr	r2, [pc, #340]	@ (8002a88 <HAL_GPIO_Init+0x2e0>)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	089b      	lsrs	r3, r3, #2
 8002936:	3302      	adds	r3, #2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	589b      	ldr	r3, [r3, r2]
 800293c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2203      	movs	r2, #3
 8002942:	4013      	ands	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	220f      	movs	r2, #15
 8002948:	409a      	lsls	r2, r3
 800294a:	0013      	movs	r3, r2
 800294c:	43da      	mvns	r2, r3
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	4013      	ands	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	23a0      	movs	r3, #160	@ 0xa0
 8002958:	05db      	lsls	r3, r3, #23
 800295a:	429a      	cmp	r2, r3
 800295c:	d01f      	beq.n	800299e <HAL_GPIO_Init+0x1f6>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4a      	ldr	r2, [pc, #296]	@ (8002a8c <HAL_GPIO_Init+0x2e4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d019      	beq.n	800299a <HAL_GPIO_Init+0x1f2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a49      	ldr	r2, [pc, #292]	@ (8002a90 <HAL_GPIO_Init+0x2e8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d013      	beq.n	8002996 <HAL_GPIO_Init+0x1ee>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a48      	ldr	r2, [pc, #288]	@ (8002a94 <HAL_GPIO_Init+0x2ec>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00d      	beq.n	8002992 <HAL_GPIO_Init+0x1ea>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a47      	ldr	r2, [pc, #284]	@ (8002a98 <HAL_GPIO_Init+0x2f0>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d007      	beq.n	800298e <HAL_GPIO_Init+0x1e6>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a46      	ldr	r2, [pc, #280]	@ (8002a9c <HAL_GPIO_Init+0x2f4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d101      	bne.n	800298a <HAL_GPIO_Init+0x1e2>
 8002986:	2305      	movs	r3, #5
 8002988:	e00a      	b.n	80029a0 <HAL_GPIO_Init+0x1f8>
 800298a:	2306      	movs	r3, #6
 800298c:	e008      	b.n	80029a0 <HAL_GPIO_Init+0x1f8>
 800298e:	2304      	movs	r3, #4
 8002990:	e006      	b.n	80029a0 <HAL_GPIO_Init+0x1f8>
 8002992:	2303      	movs	r3, #3
 8002994:	e004      	b.n	80029a0 <HAL_GPIO_Init+0x1f8>
 8002996:	2302      	movs	r3, #2
 8002998:	e002      	b.n	80029a0 <HAL_GPIO_Init+0x1f8>
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_GPIO_Init+0x1f8>
 800299e:	2300      	movs	r3, #0
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	2103      	movs	r1, #3
 80029a4:	400a      	ands	r2, r1
 80029a6:	0092      	lsls	r2, r2, #2
 80029a8:	4093      	lsls	r3, r2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029b0:	4935      	ldr	r1, [pc, #212]	@ (8002a88 <HAL_GPIO_Init+0x2e0>)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	089b      	lsrs	r3, r3, #2
 80029b6:	3302      	adds	r3, #2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029be:	4b38      	ldr	r3, [pc, #224]	@ (8002aa0 <HAL_GPIO_Init+0x2f8>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	43da      	mvns	r2, r3
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4013      	ands	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	2380      	movs	r3, #128	@ 0x80
 80029d4:	035b      	lsls	r3, r3, #13
 80029d6:	4013      	ands	r3, r2
 80029d8:	d003      	beq.n	80029e2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80029e2:	4b2f      	ldr	r3, [pc, #188]	@ (8002aa0 <HAL_GPIO_Init+0x2f8>)
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80029e8:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa0 <HAL_GPIO_Init+0x2f8>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	43da      	mvns	r2, r3
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	2380      	movs	r3, #128	@ 0x80
 80029fe:	039b      	lsls	r3, r3, #14
 8002a00:	4013      	ands	r3, r2
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a0c:	4b24      	ldr	r3, [pc, #144]	@ (8002aa0 <HAL_GPIO_Init+0x2f8>)
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002a12:	4b23      	ldr	r3, [pc, #140]	@ (8002aa0 <HAL_GPIO_Init+0x2f8>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	2380      	movs	r3, #128	@ 0x80
 8002a28:	029b      	lsls	r3, r3, #10
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a36:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa0 <HAL_GPIO_Init+0x2f8>)
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a3c:	4b18      	ldr	r3, [pc, #96]	@ (8002aa0 <HAL_GPIO_Init+0x2f8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	43da      	mvns	r2, r3
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	2380      	movs	r3, #128	@ 0x80
 8002a52:	025b      	lsls	r3, r3, #9
 8002a54:	4013      	ands	r3, r2
 8002a56:	d003      	beq.n	8002a60 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a60:	4b0f      	ldr	r3, [pc, #60]	@ (8002aa0 <HAL_GPIO_Init+0x2f8>)
 8002a62:	693a      	ldr	r2, [r7, #16]
 8002a64:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	40da      	lsrs	r2, r3
 8002a74:	1e13      	subs	r3, r2, #0
 8002a76:	d000      	beq.n	8002a7a <HAL_GPIO_Init+0x2d2>
 8002a78:	e6a2      	b.n	80027c0 <HAL_GPIO_Init+0x18>
  }
}
 8002a7a:	46c0      	nop			@ (mov r8, r8)
 8002a7c:	46c0      	nop			@ (mov r8, r8)
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	b006      	add	sp, #24
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	40010000 	.word	0x40010000
 8002a8c:	50000400 	.word	0x50000400
 8002a90:	50000800 	.word	0x50000800
 8002a94:	50000c00 	.word	0x50000c00
 8002a98:	50001000 	.word	0x50001000
 8002a9c:	50001c00 	.word	0x50001c00
 8002aa0:	40010400 	.word	0x40010400

08002aa4 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8002aba:	e0bc      	b.n	8002c36 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8002abc:	2201      	movs	r2, #1
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d100      	bne.n	8002ad0 <HAL_GPIO_DeInit+0x2c>
 8002ace:	e0af      	b.n	8002c30 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002ad0:	4a5e      	ldr	r2, [pc, #376]	@ (8002c4c <HAL_GPIO_DeInit+0x1a8>)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	089b      	lsrs	r3, r3, #2
 8002ad6:	3302      	adds	r3, #2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	589b      	ldr	r3, [r3, r2]
 8002adc:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	220f      	movs	r2, #15
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4013      	ands	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	23a0      	movs	r3, #160	@ 0xa0
 8002af4:	05db      	lsls	r3, r3, #23
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d01f      	beq.n	8002b3a <HAL_GPIO_DeInit+0x96>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a54      	ldr	r2, [pc, #336]	@ (8002c50 <HAL_GPIO_DeInit+0x1ac>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d019      	beq.n	8002b36 <HAL_GPIO_DeInit+0x92>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a53      	ldr	r2, [pc, #332]	@ (8002c54 <HAL_GPIO_DeInit+0x1b0>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <HAL_GPIO_DeInit+0x8e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a52      	ldr	r2, [pc, #328]	@ (8002c58 <HAL_GPIO_DeInit+0x1b4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00d      	beq.n	8002b2e <HAL_GPIO_DeInit+0x8a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a51      	ldr	r2, [pc, #324]	@ (8002c5c <HAL_GPIO_DeInit+0x1b8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <HAL_GPIO_DeInit+0x86>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a50      	ldr	r2, [pc, #320]	@ (8002c60 <HAL_GPIO_DeInit+0x1bc>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d101      	bne.n	8002b26 <HAL_GPIO_DeInit+0x82>
 8002b22:	2305      	movs	r3, #5
 8002b24:	e00a      	b.n	8002b3c <HAL_GPIO_DeInit+0x98>
 8002b26:	2306      	movs	r3, #6
 8002b28:	e008      	b.n	8002b3c <HAL_GPIO_DeInit+0x98>
 8002b2a:	2304      	movs	r3, #4
 8002b2c:	e006      	b.n	8002b3c <HAL_GPIO_DeInit+0x98>
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e004      	b.n	8002b3c <HAL_GPIO_DeInit+0x98>
 8002b32:	2302      	movs	r3, #2
 8002b34:	e002      	b.n	8002b3c <HAL_GPIO_DeInit+0x98>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_GPIO_DeInit+0x98>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	2103      	movs	r1, #3
 8002b40:	400a      	ands	r2, r1
 8002b42:	0092      	lsls	r2, r2, #2
 8002b44:	4093      	lsls	r3, r2
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d132      	bne.n	8002bb2 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002b4c:	4b45      	ldr	r3, [pc, #276]	@ (8002c64 <HAL_GPIO_DeInit+0x1c0>)
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	43d9      	mvns	r1, r3
 8002b54:	4b43      	ldr	r3, [pc, #268]	@ (8002c64 <HAL_GPIO_DeInit+0x1c0>)
 8002b56:	400a      	ands	r2, r1
 8002b58:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002b5a:	4b42      	ldr	r3, [pc, #264]	@ (8002c64 <HAL_GPIO_DeInit+0x1c0>)
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	43d9      	mvns	r1, r3
 8002b62:	4b40      	ldr	r3, [pc, #256]	@ (8002c64 <HAL_GPIO_DeInit+0x1c0>)
 8002b64:	400a      	ands	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b68:	4b3e      	ldr	r3, [pc, #248]	@ (8002c64 <HAL_GPIO_DeInit+0x1c0>)
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	43d9      	mvns	r1, r3
 8002b70:	4b3c      	ldr	r3, [pc, #240]	@ (8002c64 <HAL_GPIO_DeInit+0x1c0>)
 8002b72:	400a      	ands	r2, r1
 8002b74:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b76:	4b3b      	ldr	r3, [pc, #236]	@ (8002c64 <HAL_GPIO_DeInit+0x1c0>)
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	43d9      	mvns	r1, r3
 8002b7e:	4b39      	ldr	r3, [pc, #228]	@ (8002c64 <HAL_GPIO_DeInit+0x1c0>)
 8002b80:	400a      	ands	r2, r1
 8002b82:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2203      	movs	r2, #3
 8002b88:	4013      	ands	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	220f      	movs	r2, #15
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	0013      	movs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002b94:	4a2d      	ldr	r2, [pc, #180]	@ (8002c4c <HAL_GPIO_DeInit+0x1a8>)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	089b      	lsrs	r3, r3, #2
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	589a      	ldr	r2, [r3, r2]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	43d9      	mvns	r1, r3
 8002ba4:	4829      	ldr	r0, [pc, #164]	@ (8002c4c <HAL_GPIO_DeInit+0x1a8>)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	089b      	lsrs	r3, r3, #2
 8002baa:	400a      	ands	r2, r1
 8002bac:	3302      	adds	r3, #2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2103      	movs	r1, #3
 8002bbc:	4099      	lsls	r1, r3
 8002bbe:	000b      	movs	r3, r1
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	0092      	lsls	r2, r2, #2
 8002bd0:	58d3      	ldr	r3, [r2, r3]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	2107      	movs	r1, #7
 8002bd6:	400a      	ands	r2, r1
 8002bd8:	0092      	lsls	r2, r2, #2
 8002bda:	210f      	movs	r1, #15
 8002bdc:	4091      	lsls	r1, r2
 8002bde:	000a      	movs	r2, r1
 8002be0:	43d1      	mvns	r1, r2
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	08d2      	lsrs	r2, r2, #3
 8002be6:	4019      	ands	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3208      	adds	r2, #8
 8002bec:	0092      	lsls	r2, r2, #2
 8002bee:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	0052      	lsls	r2, r2, #1
 8002bf8:	2103      	movs	r1, #3
 8002bfa:	4091      	lsls	r1, r2
 8002bfc:	000a      	movs	r2, r1
 8002bfe:	43d2      	mvns	r2, r2
 8002c00:	401a      	ands	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	4091      	lsls	r1, r2
 8002c10:	000a      	movs	r2, r1
 8002c12:	43d2      	mvns	r2, r2
 8002c14:	401a      	ands	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	0052      	lsls	r2, r2, #1
 8002c22:	2103      	movs	r1, #3
 8002c24:	4091      	lsls	r1, r2
 8002c26:	000a      	movs	r2, r1
 8002c28:	43d2      	mvns	r2, r2
 8002c2a:	401a      	ands	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
    }
    position++;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3301      	adds	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	40da      	lsrs	r2, r3
 8002c3c:	1e13      	subs	r3, r2, #0
 8002c3e:	d000      	beq.n	8002c42 <HAL_GPIO_DeInit+0x19e>
 8002c40:	e73c      	b.n	8002abc <HAL_GPIO_DeInit+0x18>
  }
}
 8002c42:	46c0      	nop			@ (mov r8, r8)
 8002c44:	46c0      	nop			@ (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b006      	add	sp, #24
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40010000 	.word	0x40010000
 8002c50:	50000400 	.word	0x50000400
 8002c54:	50000800 	.word	0x50000800
 8002c58:	50000c00 	.word	0x50000c00
 8002c5c:	50001000 	.word	0x50001000
 8002c60:	50001c00 	.word	0x50001c00
 8002c64:	40010400 	.word	0x40010400

08002c68 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	0008      	movs	r0, r1
 8002c72:	0011      	movs	r1, r2
 8002c74:	1cbb      	adds	r3, r7, #2
 8002c76:	1c02      	adds	r2, r0, #0
 8002c78:	801a      	strh	r2, [r3, #0]
 8002c7a:	1c7b      	adds	r3, r7, #1
 8002c7c:	1c0a      	adds	r2, r1, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c80:	1c7b      	adds	r3, r7, #1
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d004      	beq.n	8002c92 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c88:	1cbb      	adds	r3, r7, #2
 8002c8a:	881a      	ldrh	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002c90:	e003      	b.n	8002c9a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002c92:	1cbb      	adds	r3, r7, #2
 8002c94:	881a      	ldrh	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b002      	add	sp, #8
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e08f      	b.n	8002dd6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2241      	movs	r2, #65	@ 0x41
 8002cba:	5c9b      	ldrb	r3, [r3, r2]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d107      	bne.n	8002cd2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2240      	movs	r2, #64	@ 0x40
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	0018      	movs	r0, r3
 8002cce:	f7fe fa4d 	bl	800116c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2241      	movs	r2, #65	@ 0x41
 8002cd6:	2124      	movs	r1, #36	@ 0x24
 8002cd8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	438a      	bics	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	493b      	ldr	r1, [pc, #236]	@ (8002de0 <HAL_I2C_Init+0x13c>)
 8002cf4:	400a      	ands	r2, r1
 8002cf6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4938      	ldr	r1, [pc, #224]	@ (8002de4 <HAL_I2C_Init+0x140>)
 8002d04:	400a      	ands	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d108      	bne.n	8002d22 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2180      	movs	r1, #128	@ 0x80
 8002d1a:	0209      	lsls	r1, r1, #8
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	e007      	b.n	8002d32 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2184      	movs	r1, #132	@ 0x84
 8002d2c:	0209      	lsls	r1, r1, #8
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d109      	bne.n	8002d4e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2180      	movs	r1, #128	@ 0x80
 8002d46:	0109      	lsls	r1, r1, #4
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	e007      	b.n	8002d5e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4923      	ldr	r1, [pc, #140]	@ (8002de8 <HAL_I2C_Init+0x144>)
 8002d5a:	400a      	ands	r2, r1
 8002d5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4920      	ldr	r1, [pc, #128]	@ (8002dec <HAL_I2C_Init+0x148>)
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	68da      	ldr	r2, [r3, #12]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	491a      	ldr	r1, [pc, #104]	@ (8002de4 <HAL_I2C_Init+0x140>)
 8002d7a:	400a      	ands	r2, r1
 8002d7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	691a      	ldr	r2, [r3, #16]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69d9      	ldr	r1, [r3, #28]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a1a      	ldr	r2, [r3, #32]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2101      	movs	r1, #1
 8002db4:	430a      	orrs	r2, r1
 8002db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2241      	movs	r2, #65	@ 0x41
 8002dc2:	2120      	movs	r1, #32
 8002dc4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2242      	movs	r2, #66	@ 0x42
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	0018      	movs	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	b002      	add	sp, #8
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	46c0      	nop			@ (mov r8, r8)
 8002de0:	f0ffffff 	.word	0xf0ffffff
 8002de4:	ffff7fff 	.word	0xffff7fff
 8002de8:	fffff7ff 	.word	0xfffff7ff
 8002dec:	02008000 	.word	0x02008000

08002df0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e022      	b.n	8002e48 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2241      	movs	r2, #65	@ 0x41
 8002e06:	2124      	movs	r1, #36	@ 0x24
 8002e08:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2101      	movs	r1, #1
 8002e16:	438a      	bics	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	0018      	movs	r0, r3
 8002e1e:	f7fe f9e9 	bl	80011f4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2241      	movs	r2, #65	@ 0x41
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2242      	movs	r2, #66	@ 0x42
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2240      	movs	r2, #64	@ 0x40
 8002e42:	2100      	movs	r1, #0
 8002e44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	0018      	movs	r0, r3
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b002      	add	sp, #8
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b089      	sub	sp, #36	@ 0x24
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	0008      	movs	r0, r1
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	0019      	movs	r1, r3
 8002e5e:	230a      	movs	r3, #10
 8002e60:	18fb      	adds	r3, r7, r3
 8002e62:	1c02      	adds	r2, r0, #0
 8002e64:	801a      	strh	r2, [r3, #0]
 8002e66:	2308      	movs	r3, #8
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	1c0a      	adds	r2, r1, #0
 8002e6c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2241      	movs	r2, #65	@ 0x41
 8002e72:	5c9b      	ldrb	r3, [r3, r2]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b20      	cmp	r3, #32
 8002e78:	d000      	beq.n	8002e7c <HAL_I2C_Master_Transmit+0x2c>
 8002e7a:	e10a      	b.n	8003092 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2240      	movs	r2, #64	@ 0x40
 8002e80:	5c9b      	ldrb	r3, [r3, r2]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_I2C_Master_Transmit+0x3a>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e104      	b.n	8003094 <HAL_I2C_Master_Transmit+0x244>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2240      	movs	r2, #64	@ 0x40
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e92:	f7fe fe9f 	bl	8001bd4 <HAL_GetTick>
 8002e96:	0003      	movs	r3, r0
 8002e98:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e9a:	2380      	movs	r3, #128	@ 0x80
 8002e9c:	0219      	lsls	r1, r3, #8
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	2319      	movs	r3, #25
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f000 fb22 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 8002eac:	1e03      	subs	r3, r0, #0
 8002eae:	d001      	beq.n	8002eb4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e0ef      	b.n	8003094 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2241      	movs	r2, #65	@ 0x41
 8002eb8:	2121      	movs	r1, #33	@ 0x21
 8002eba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2242      	movs	r2, #66	@ 0x42
 8002ec0:	2110      	movs	r1, #16
 8002ec2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	18ba      	adds	r2, r7, r2
 8002ed6:	8812      	ldrh	r2, [r2, #0]
 8002ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2bff      	cmp	r3, #255	@ 0xff
 8002ee8:	d906      	bls.n	8002ef8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	22ff      	movs	r2, #255	@ 0xff
 8002eee:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002ef0:	2380      	movs	r3, #128	@ 0x80
 8002ef2:	045b      	lsls	r3, r3, #17
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e007      	b.n	8002f08 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002f02:	2380      	movs	r3, #128	@ 0x80
 8002f04:	049b      	lsls	r3, r3, #18
 8002f06:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d027      	beq.n	8002f60 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	781a      	ldrb	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	697c      	ldr	r4, [r7, #20]
 8002f4c:	230a      	movs	r3, #10
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	8819      	ldrh	r1, [r3, #0]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	4b51      	ldr	r3, [pc, #324]	@ (800309c <HAL_I2C_Master_Transmit+0x24c>)
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	0023      	movs	r3, r4
 8002f5a:	f000 fd41 	bl	80039e0 <I2C_TransferConfig>
 8002f5e:	e06f      	b.n	8003040 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f64:	b2da      	uxtb	r2, r3
 8002f66:	697c      	ldr	r4, [r7, #20]
 8002f68:	230a      	movs	r3, #10
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	8819      	ldrh	r1, [r3, #0]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	4b4a      	ldr	r3, [pc, #296]	@ (800309c <HAL_I2C_Master_Transmit+0x24c>)
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	0023      	movs	r3, r4
 8002f76:	f000 fd33 	bl	80039e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002f7a:	e061      	b.n	8003040 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 fb0c 	bl	80035a0 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f88:	1e03      	subs	r3, r0, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e081      	b.n	8003094 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	781a      	ldrb	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d03a      	beq.n	8003040 <HAL_I2C_Master_Transmit+0x1f0>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d136      	bne.n	8003040 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	0013      	movs	r3, r2
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2180      	movs	r1, #128	@ 0x80
 8002fe0:	f000 fa86 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 8002fe4:	1e03      	subs	r3, r0, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e053      	b.n	8003094 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2bff      	cmp	r3, #255	@ 0xff
 8002ff4:	d911      	bls.n	800301a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	22ff      	movs	r2, #255	@ 0xff
 8002ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	b2da      	uxtb	r2, r3
 8003002:	2380      	movs	r3, #128	@ 0x80
 8003004:	045c      	lsls	r4, r3, #17
 8003006:	230a      	movs	r3, #10
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	8819      	ldrh	r1, [r3, #0]
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	2300      	movs	r3, #0
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	0023      	movs	r3, r4
 8003014:	f000 fce4 	bl	80039e0 <I2C_TransferConfig>
 8003018:	e012      	b.n	8003040 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301e:	b29a      	uxth	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003028:	b2da      	uxtb	r2, r3
 800302a:	2380      	movs	r3, #128	@ 0x80
 800302c:	049c      	lsls	r4, r3, #18
 800302e:	230a      	movs	r3, #10
 8003030:	18fb      	adds	r3, r7, r3
 8003032:	8819      	ldrh	r1, [r3, #0]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	2300      	movs	r3, #0
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	0023      	movs	r3, r4
 800303c:	f000 fcd0 	bl	80039e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d198      	bne.n	8002f7c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	0018      	movs	r0, r3
 8003052:	f000 faeb 	bl	800362c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d001      	beq.n	800305e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e01a      	b.n	8003094 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2220      	movs	r2, #32
 8003064:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	490b      	ldr	r1, [pc, #44]	@ (80030a0 <HAL_I2C_Master_Transmit+0x250>)
 8003072:	400a      	ands	r2, r1
 8003074:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2241      	movs	r2, #65	@ 0x41
 800307a:	2120      	movs	r1, #32
 800307c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2242      	movs	r2, #66	@ 0x42
 8003082:	2100      	movs	r1, #0
 8003084:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2240      	movs	r2, #64	@ 0x40
 800308a:	2100      	movs	r1, #0
 800308c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800308e:	2300      	movs	r3, #0
 8003090:	e000      	b.n	8003094 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003092:	2302      	movs	r3, #2
  }
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b007      	add	sp, #28
 800309a:	bd90      	pop	{r4, r7, pc}
 800309c:	80002000 	.word	0x80002000
 80030a0:	fe00e800 	.word	0xfe00e800

080030a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b089      	sub	sp, #36	@ 0x24
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	0008      	movs	r0, r1
 80030ae:	607a      	str	r2, [r7, #4]
 80030b0:	0019      	movs	r1, r3
 80030b2:	230a      	movs	r3, #10
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	1c02      	adds	r2, r0, #0
 80030b8:	801a      	strh	r2, [r3, #0]
 80030ba:	2308      	movs	r3, #8
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	1c0a      	adds	r2, r1, #0
 80030c0:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2241      	movs	r2, #65	@ 0x41
 80030c6:	5c9b      	ldrb	r3, [r3, r2]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d000      	beq.n	80030d0 <HAL_I2C_Master_Receive+0x2c>
 80030ce:	e0e8      	b.n	80032a2 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2240      	movs	r2, #64	@ 0x40
 80030d4:	5c9b      	ldrb	r3, [r3, r2]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_I2C_Master_Receive+0x3a>
 80030da:	2302      	movs	r3, #2
 80030dc:	e0e2      	b.n	80032a4 <HAL_I2C_Master_Receive+0x200>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2240      	movs	r2, #64	@ 0x40
 80030e2:	2101      	movs	r1, #1
 80030e4:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030e6:	f7fe fd75 	bl	8001bd4 <HAL_GetTick>
 80030ea:	0003      	movs	r3, r0
 80030ec:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030ee:	2380      	movs	r3, #128	@ 0x80
 80030f0:	0219      	lsls	r1, r3, #8
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	2319      	movs	r3, #25
 80030fa:	2201      	movs	r2, #1
 80030fc:	f000 f9f8 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 8003100:	1e03      	subs	r3, r0, #0
 8003102:	d001      	beq.n	8003108 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e0cd      	b.n	80032a4 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2241      	movs	r2, #65	@ 0x41
 800310c:	2122      	movs	r1, #34	@ 0x22
 800310e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2242      	movs	r2, #66	@ 0x42
 8003114:	2110      	movs	r1, #16
 8003116:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2208      	movs	r2, #8
 8003128:	18ba      	adds	r2, r7, r2
 800312a:	8812      	ldrh	r2, [r2, #0]
 800312c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	2bff      	cmp	r3, #255	@ 0xff
 800313c:	d911      	bls.n	8003162 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2201      	movs	r2, #1
 8003142:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003148:	b2da      	uxtb	r2, r3
 800314a:	2380      	movs	r3, #128	@ 0x80
 800314c:	045c      	lsls	r4, r3, #17
 800314e:	230a      	movs	r3, #10
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	8819      	ldrh	r1, [r3, #0]
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	4b55      	ldr	r3, [pc, #340]	@ (80032ac <HAL_I2C_Master_Receive+0x208>)
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	0023      	movs	r3, r4
 800315c:	f000 fc40 	bl	80039e0 <I2C_TransferConfig>
 8003160:	e076      	b.n	8003250 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003166:	b29a      	uxth	r2, r3
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003170:	b2da      	uxtb	r2, r3
 8003172:	2380      	movs	r3, #128	@ 0x80
 8003174:	049c      	lsls	r4, r3, #18
 8003176:	230a      	movs	r3, #10
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	8819      	ldrh	r1, [r3, #0]
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	4b4b      	ldr	r3, [pc, #300]	@ (80032ac <HAL_I2C_Master_Receive+0x208>)
 8003180:	9300      	str	r3, [sp, #0]
 8003182:	0023      	movs	r3, r4
 8003184:	f000 fc2c 	bl	80039e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003188:	e062      	b.n	8003250 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	0018      	movs	r0, r3
 8003192:	f000 fa8f 	bl	80036b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003196:	1e03      	subs	r3, r0, #0
 8003198:	d001      	beq.n	800319e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e082      	b.n	80032a4 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	b2d2      	uxtb	r2, r2
 80031aa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b0:	1c5a      	adds	r2, r3, #1
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d03a      	beq.n	8003250 <HAL_I2C_Master_Receive+0x1ac>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d136      	bne.n	8003250 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	0013      	movs	r3, r2
 80031ec:	2200      	movs	r2, #0
 80031ee:	2180      	movs	r1, #128	@ 0x80
 80031f0:	f000 f97e 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 80031f4:	1e03      	subs	r3, r0, #0
 80031f6:	d001      	beq.n	80031fc <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e053      	b.n	80032a4 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	2bff      	cmp	r3, #255	@ 0xff
 8003204:	d911      	bls.n	800322a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	22ff      	movs	r2, #255	@ 0xff
 800320a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003210:	b2da      	uxtb	r2, r3
 8003212:	2380      	movs	r3, #128	@ 0x80
 8003214:	045c      	lsls	r4, r3, #17
 8003216:	230a      	movs	r3, #10
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	8819      	ldrh	r1, [r3, #0]
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	2300      	movs	r3, #0
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	0023      	movs	r3, r4
 8003224:	f000 fbdc 	bl	80039e0 <I2C_TransferConfig>
 8003228:	e012      	b.n	8003250 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003238:	b2da      	uxtb	r2, r3
 800323a:	2380      	movs	r3, #128	@ 0x80
 800323c:	049c      	lsls	r4, r3, #18
 800323e:	230a      	movs	r3, #10
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	8819      	ldrh	r1, [r3, #0]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	2300      	movs	r3, #0
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	0023      	movs	r3, r4
 800324c:	f000 fbc8 	bl	80039e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003254:	b29b      	uxth	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d197      	bne.n	800318a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800325a:	697a      	ldr	r2, [r7, #20]
 800325c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	0018      	movs	r0, r3
 8003262:	f000 f9e3 	bl	800362c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003266:	1e03      	subs	r3, r0, #0
 8003268:	d001      	beq.n	800326e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e01a      	b.n	80032a4 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2220      	movs	r2, #32
 8003274:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685a      	ldr	r2, [r3, #4]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	490b      	ldr	r1, [pc, #44]	@ (80032b0 <HAL_I2C_Master_Receive+0x20c>)
 8003282:	400a      	ands	r2, r1
 8003284:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2241      	movs	r2, #65	@ 0x41
 800328a:	2120      	movs	r1, #32
 800328c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2242      	movs	r2, #66	@ 0x42
 8003292:	2100      	movs	r1, #0
 8003294:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2240      	movs	r2, #64	@ 0x40
 800329a:	2100      	movs	r1, #0
 800329c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	e000      	b.n	80032a4 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
  }
}
 80032a4:	0018      	movs	r0, r3
 80032a6:	46bd      	mov	sp, r7
 80032a8:	b007      	add	sp, #28
 80032aa:	bd90      	pop	{r4, r7, pc}
 80032ac:	80002400 	.word	0x80002400
 80032b0:	fe00e800 	.word	0xfe00e800

080032b4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	@ 0x28
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	607a      	str	r2, [r7, #4]
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	230a      	movs	r3, #10
 80032c2:	18fb      	adds	r3, r7, r3
 80032c4:	1c0a      	adds	r2, r1, #0
 80032c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2241      	movs	r2, #65	@ 0x41
 80032d0:	5c9b      	ldrb	r3, [r3, r2]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b20      	cmp	r3, #32
 80032d6:	d000      	beq.n	80032da <HAL_I2C_IsDeviceReady+0x26>
 80032d8:	e0df      	b.n	800349a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699a      	ldr	r2, [r3, #24]
 80032e0:	2380      	movs	r3, #128	@ 0x80
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	401a      	ands	r2, r3
 80032e6:	2380      	movs	r3, #128	@ 0x80
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d101      	bne.n	80032f2 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80032ee:	2302      	movs	r3, #2
 80032f0:	e0d4      	b.n	800349c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2240      	movs	r2, #64	@ 0x40
 80032f6:	5c9b      	ldrb	r3, [r3, r2]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_I2C_IsDeviceReady+0x4c>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e0cd      	b.n	800349c <HAL_I2C_IsDeviceReady+0x1e8>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2240      	movs	r2, #64	@ 0x40
 8003304:	2101      	movs	r1, #1
 8003306:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2241      	movs	r2, #65	@ 0x41
 800330c:	2124      	movs	r1, #36	@ 0x24
 800330e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d107      	bne.n	800332e <HAL_I2C_IsDeviceReady+0x7a>
 800331e:	230a      	movs	r3, #10
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	881b      	ldrh	r3, [r3, #0]
 8003324:	059b      	lsls	r3, r3, #22
 8003326:	0d9b      	lsrs	r3, r3, #22
 8003328:	4a5e      	ldr	r2, [pc, #376]	@ (80034a4 <HAL_I2C_IsDeviceReady+0x1f0>)
 800332a:	431a      	orrs	r2, r3
 800332c:	e006      	b.n	800333c <HAL_I2C_IsDeviceReady+0x88>
 800332e:	230a      	movs	r3, #10
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	881b      	ldrh	r3, [r3, #0]
 8003334:	059b      	lsls	r3, r3, #22
 8003336:	0d9b      	lsrs	r3, r3, #22
 8003338:	4a5b      	ldr	r2, [pc, #364]	@ (80034a8 <HAL_I2C_IsDeviceReady+0x1f4>)
 800333a:	431a      	orrs	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003342:	f7fe fc47 	bl	8001bd4 <HAL_GetTick>
 8003346:	0003      	movs	r3, r0
 8003348:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	2220      	movs	r2, #32
 8003352:	4013      	ands	r3, r2
 8003354:	3b20      	subs	r3, #32
 8003356:	425a      	negs	r2, r3
 8003358:	4153      	adcs	r3, r2
 800335a:	b2da      	uxtb	r2, r3
 800335c:	231f      	movs	r3, #31
 800335e:	18fb      	adds	r3, r7, r3
 8003360:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	2210      	movs	r2, #16
 800336a:	4013      	ands	r3, r2
 800336c:	3b10      	subs	r3, #16
 800336e:	425a      	negs	r2, r3
 8003370:	4153      	adcs	r3, r2
 8003372:	b2da      	uxtb	r2, r3
 8003374:	231e      	movs	r3, #30
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800337a:	e035      	b.n	80033e8 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	3301      	adds	r3, #1
 8003380:	d01a      	beq.n	80033b8 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003382:	f7fe fc27 	bl	8001bd4 <HAL_GetTick>
 8003386:	0002      	movs	r2, r0
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	429a      	cmp	r2, r3
 8003390:	d302      	bcc.n	8003398 <HAL_I2C_IsDeviceReady+0xe4>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10f      	bne.n	80033b8 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2241      	movs	r2, #65	@ 0x41
 800339c:	2120      	movs	r1, #32
 800339e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033a4:	2220      	movs	r2, #32
 80033a6:	431a      	orrs	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2240      	movs	r2, #64	@ 0x40
 80033b0:	2100      	movs	r1, #0
 80033b2:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e071      	b.n	800349c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2220      	movs	r2, #32
 80033c0:	4013      	ands	r3, r2
 80033c2:	3b20      	subs	r3, #32
 80033c4:	425a      	negs	r2, r3
 80033c6:	4153      	adcs	r3, r2
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	231f      	movs	r3, #31
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2210      	movs	r2, #16
 80033d8:	4013      	ands	r3, r2
 80033da:	3b10      	subs	r3, #16
 80033dc:	425a      	negs	r2, r3
 80033de:	4153      	adcs	r3, r2
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	231e      	movs	r3, #30
 80033e4:	18fb      	adds	r3, r7, r3
 80033e6:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80033e8:	231f      	movs	r3, #31
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d104      	bne.n	80033fc <HAL_I2C_IsDeviceReady+0x148>
 80033f2:	231e      	movs	r3, #30
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0bf      	beq.n	800337c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	2210      	movs	r2, #16
 8003404:	4013      	ands	r3, r2
 8003406:	2b10      	cmp	r3, #16
 8003408:	d01a      	beq.n	8003440 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	0013      	movs	r3, r2
 8003414:	2200      	movs	r2, #0
 8003416:	2120      	movs	r1, #32
 8003418:	f000 f86a 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 800341c:	1e03      	subs	r3, r0, #0
 800341e:	d001      	beq.n	8003424 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e03b      	b.n	800349c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2220      	movs	r2, #32
 800342a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2241      	movs	r2, #65	@ 0x41
 8003430:	2120      	movs	r1, #32
 8003432:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2240      	movs	r2, #64	@ 0x40
 8003438:	2100      	movs	r1, #0
 800343a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800343c:	2300      	movs	r3, #0
 800343e:	e02d      	b.n	800349c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	0013      	movs	r3, r2
 800344a:	2200      	movs	r2, #0
 800344c:	2120      	movs	r1, #32
 800344e:	f000 f84f 	bl	80034f0 <I2C_WaitOnFlagUntilTimeout>
 8003452:	1e03      	subs	r3, r0, #0
 8003454:	d001      	beq.n	800345a <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e020      	b.n	800349c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2210      	movs	r2, #16
 8003460:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2220      	movs	r2, #32
 8003468:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	3301      	adds	r3, #1
 800346e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	429a      	cmp	r2, r3
 8003476:	d900      	bls.n	800347a <HAL_I2C_IsDeviceReady+0x1c6>
 8003478:	e74d      	b.n	8003316 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2241      	movs	r2, #65	@ 0x41
 800347e:	2120      	movs	r1, #32
 8003480:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	2220      	movs	r2, #32
 8003488:	431a      	orrs	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2240      	movs	r2, #64	@ 0x40
 8003492:	2100      	movs	r1, #0
 8003494:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e000      	b.n	800349c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800349a:	2302      	movs	r3, #2
  }
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b008      	add	sp, #32
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	02002000 	.word	0x02002000
 80034a8:	02002800 	.word	0x02002800

080034ac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2202      	movs	r2, #2
 80034bc:	4013      	ands	r3, r2
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d103      	bne.n	80034ca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2200      	movs	r2, #0
 80034c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2201      	movs	r2, #1
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d007      	beq.n	80034e8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699a      	ldr	r2, [r3, #24]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2101      	movs	r1, #1
 80034e4:	430a      	orrs	r2, r1
 80034e6:	619a      	str	r2, [r3, #24]
  }
}
 80034e8:	46c0      	nop			@ (mov r8, r8)
 80034ea:	46bd      	mov	sp, r7
 80034ec:	b002      	add	sp, #8
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	603b      	str	r3, [r7, #0]
 80034fc:	1dfb      	adds	r3, r7, #7
 80034fe:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003500:	e03a      	b.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	6839      	ldr	r1, [r7, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	0018      	movs	r0, r3
 800350a:	f000 f971 	bl	80037f0 <I2C_IsErrorOccurred>
 800350e:	1e03      	subs	r3, r0, #0
 8003510:	d001      	beq.n	8003516 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e040      	b.n	8003598 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	d02d      	beq.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800351c:	f7fe fb5a 	bl	8001bd4 <HAL_GetTick>
 8003520:	0002      	movs	r2, r0
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	683a      	ldr	r2, [r7, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d302      	bcc.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x42>
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d122      	bne.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	4013      	ands	r3, r2
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	425a      	negs	r2, r3
 8003542:	4153      	adcs	r3, r2
 8003544:	b2db      	uxtb	r3, r3
 8003546:	001a      	movs	r2, r3
 8003548:	1dfb      	adds	r3, r7, #7
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d113      	bne.n	8003578 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003554:	2220      	movs	r2, #32
 8003556:	431a      	orrs	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2241      	movs	r2, #65	@ 0x41
 8003560:	2120      	movs	r1, #32
 8003562:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2242      	movs	r2, #66	@ 0x42
 8003568:	2100      	movs	r1, #0
 800356a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2240      	movs	r2, #64	@ 0x40
 8003570:	2100      	movs	r1, #0
 8003572:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e00f      	b.n	8003598 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	68ba      	ldr	r2, [r7, #8]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	425a      	negs	r2, r3
 8003588:	4153      	adcs	r3, r2
 800358a:	b2db      	uxtb	r3, r3
 800358c:	001a      	movs	r2, r3
 800358e:	1dfb      	adds	r3, r7, #7
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d0b5      	beq.n	8003502 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	0018      	movs	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	b004      	add	sp, #16
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035ac:	e032      	b.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	0018      	movs	r0, r3
 80035b6:	f000 f91b 	bl	80037f0 <I2C_IsErrorOccurred>
 80035ba:	1e03      	subs	r3, r0, #0
 80035bc:	d001      	beq.n	80035c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e030      	b.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	3301      	adds	r3, #1
 80035c6:	d025      	beq.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c8:	f7fe fb04 	bl	8001bd4 <HAL_GetTick>
 80035cc:	0002      	movs	r2, r0
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d302      	bcc.n	80035de <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11a      	bne.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	2202      	movs	r2, #2
 80035e6:	4013      	ands	r3, r2
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d013      	beq.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f0:	2220      	movs	r2, #32
 80035f2:	431a      	orrs	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2241      	movs	r2, #65	@ 0x41
 80035fc:	2120      	movs	r1, #32
 80035fe:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2242      	movs	r2, #66	@ 0x42
 8003604:	2100      	movs	r1, #0
 8003606:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2240      	movs	r2, #64	@ 0x40
 800360c:	2100      	movs	r1, #0
 800360e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e007      	b.n	8003624 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2202      	movs	r2, #2
 800361c:	4013      	ands	r3, r2
 800361e:	2b02      	cmp	r3, #2
 8003620:	d1c5      	bne.n	80035ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003622:	2300      	movs	r3, #0
}
 8003624:	0018      	movs	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	b004      	add	sp, #16
 800362a:	bd80      	pop	{r7, pc}

0800362c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003638:	e02f      	b.n	800369a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68b9      	ldr	r1, [r7, #8]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	0018      	movs	r0, r3
 8003642:	f000 f8d5 	bl	80037f0 <I2C_IsErrorOccurred>
 8003646:	1e03      	subs	r3, r0, #0
 8003648:	d001      	beq.n	800364e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e02d      	b.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364e:	f7fe fac1 	bl	8001bd4 <HAL_GetTick>
 8003652:	0002      	movs	r2, r0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	429a      	cmp	r2, r3
 800365c:	d302      	bcc.n	8003664 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d11a      	bne.n	800369a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2220      	movs	r2, #32
 800366c:	4013      	ands	r3, r2
 800366e:	2b20      	cmp	r3, #32
 8003670:	d013      	beq.n	800369a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003676:	2220      	movs	r2, #32
 8003678:	431a      	orrs	r2, r3
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2241      	movs	r2, #65	@ 0x41
 8003682:	2120      	movs	r1, #32
 8003684:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2242      	movs	r2, #66	@ 0x42
 800368a:	2100      	movs	r1, #0
 800368c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2240      	movs	r2, #64	@ 0x40
 8003692:	2100      	movs	r1, #0
 8003694:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e007      	b.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2220      	movs	r2, #32
 80036a2:	4013      	ands	r3, r2
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d1c8      	bne.n	800363a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	0018      	movs	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b004      	add	sp, #16
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c0:	2317      	movs	r3, #23
 80036c2:	18fb      	adds	r3, r7, r3
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80036c8:	e07b      	b.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 f88d 	bl	80037f0 <I2C_IsErrorOccurred>
 80036d6:	1e03      	subs	r3, r0, #0
 80036d8:	d003      	beq.n	80036e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80036da:	2317      	movs	r3, #23
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	2201      	movs	r2, #1
 80036e0:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2220      	movs	r2, #32
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b20      	cmp	r3, #32
 80036ee:	d140      	bne.n	8003772 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80036f0:	2117      	movs	r1, #23
 80036f2:	187b      	adds	r3, r7, r1
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d13b      	bne.n	8003772 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2204      	movs	r2, #4
 8003702:	4013      	ands	r3, r2
 8003704:	2b04      	cmp	r3, #4
 8003706:	d106      	bne.n	8003716 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003710:	187b      	adds	r3, r7, r1
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2210      	movs	r2, #16
 800371e:	4013      	ands	r3, r2
 8003720:	2b10      	cmp	r3, #16
 8003722:	d123      	bne.n	800376c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2210      	movs	r2, #16
 800372a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2204      	movs	r2, #4
 8003730:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2220      	movs	r2, #32
 8003738:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4929      	ldr	r1, [pc, #164]	@ (80037ec <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003746:	400a      	ands	r2, r1
 8003748:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2241      	movs	r2, #65	@ 0x41
 800374e:	2120      	movs	r1, #32
 8003750:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2242      	movs	r2, #66	@ 0x42
 8003756:	2100      	movs	r1, #0
 8003758:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2240      	movs	r2, #64	@ 0x40
 800375e:	2100      	movs	r1, #0
 8003760:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003762:	2317      	movs	r3, #23
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	2201      	movs	r2, #1
 8003768:	701a      	strb	r2, [r3, #0]
 800376a:	e002      	b.n	8003772 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003772:	f7fe fa2f 	bl	8001bd4 <HAL_GetTick>
 8003776:	0002      	movs	r2, r0
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	d302      	bcc.n	8003788 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d11c      	bne.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003788:	2017      	movs	r0, #23
 800378a:	183b      	adds	r3, r7, r0
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d117      	bne.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2204      	movs	r2, #4
 800379a:	4013      	ands	r3, r2
 800379c:	2b04      	cmp	r3, #4
 800379e:	d010      	beq.n	80037c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a4:	2220      	movs	r2, #32
 80037a6:	431a      	orrs	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2241      	movs	r2, #65	@ 0x41
 80037b0:	2120      	movs	r1, #32
 80037b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2240      	movs	r2, #64	@ 0x40
 80037b8:	2100      	movs	r1, #0
 80037ba:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80037bc:	183b      	adds	r3, r7, r0
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2204      	movs	r2, #4
 80037ca:	4013      	ands	r3, r2
 80037cc:	2b04      	cmp	r3, #4
 80037ce:	d005      	beq.n	80037dc <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80037d0:	2317      	movs	r3, #23
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d100      	bne.n	80037dc <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80037da:	e776      	b.n	80036ca <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80037dc:	2317      	movs	r3, #23
 80037de:	18fb      	adds	r3, r7, r3
 80037e0:	781b      	ldrb	r3, [r3, #0]
}
 80037e2:	0018      	movs	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b006      	add	sp, #24
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	46c0      	nop			@ (mov r8, r8)
 80037ec:	fe00e800 	.word	0xfe00e800

080037f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	@ 0x28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037fc:	2327      	movs	r3, #39	@ 0x27
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800380c:	2300      	movs	r3, #0
 800380e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	2210      	movs	r2, #16
 8003818:	4013      	ands	r3, r2
 800381a:	d100      	bne.n	800381e <I2C_IsErrorOccurred+0x2e>
 800381c:	e079      	b.n	8003912 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2210      	movs	r2, #16
 8003824:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003826:	e057      	b.n	80038d8 <I2C_IsErrorOccurred+0xe8>
 8003828:	2227      	movs	r2, #39	@ 0x27
 800382a:	18bb      	adds	r3, r7, r2
 800382c:	18ba      	adds	r2, r7, r2
 800382e:	7812      	ldrb	r2, [r2, #0]
 8003830:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	3301      	adds	r3, #1
 8003836:	d04f      	beq.n	80038d8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003838:	f7fe f9cc 	bl	8001bd4 <HAL_GetTick>
 800383c:	0002      	movs	r2, r0
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	d302      	bcc.n	800384e <I2C_IsErrorOccurred+0x5e>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d144      	bne.n	80038d8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
 8003854:	2380      	movs	r3, #128	@ 0x80
 8003856:	01db      	lsls	r3, r3, #7
 8003858:	4013      	ands	r3, r2
 800385a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800385c:	2013      	movs	r0, #19
 800385e:	183b      	adds	r3, r7, r0
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	2142      	movs	r1, #66	@ 0x42
 8003864:	5c52      	ldrb	r2, [r2, r1]
 8003866:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	699a      	ldr	r2, [r3, #24]
 800386e:	2380      	movs	r3, #128	@ 0x80
 8003870:	021b      	lsls	r3, r3, #8
 8003872:	401a      	ands	r2, r3
 8003874:	2380      	movs	r3, #128	@ 0x80
 8003876:	021b      	lsls	r3, r3, #8
 8003878:	429a      	cmp	r2, r3
 800387a:	d126      	bne.n	80038ca <I2C_IsErrorOccurred+0xda>
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	2380      	movs	r3, #128	@ 0x80
 8003880:	01db      	lsls	r3, r3, #7
 8003882:	429a      	cmp	r2, r3
 8003884:	d021      	beq.n	80038ca <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003886:	183b      	adds	r3, r7, r0
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b20      	cmp	r3, #32
 800388c:	d01d      	beq.n	80038ca <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2180      	movs	r1, #128	@ 0x80
 800389a:	01c9      	lsls	r1, r1, #7
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038a0:	f7fe f998 	bl	8001bd4 <HAL_GetTick>
 80038a4:	0003      	movs	r3, r0
 80038a6:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038a8:	e00f      	b.n	80038ca <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038aa:	f7fe f993 	bl	8001bd4 <HAL_GetTick>
 80038ae:	0002      	movs	r2, r0
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b19      	cmp	r3, #25
 80038b6:	d908      	bls.n	80038ca <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	2220      	movs	r2, #32
 80038bc:	4313      	orrs	r3, r2
 80038be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80038c0:	2327      	movs	r3, #39	@ 0x27
 80038c2:	18fb      	adds	r3, r7, r3
 80038c4:	2201      	movs	r2, #1
 80038c6:	701a      	strb	r2, [r3, #0]

              break;
 80038c8:	e006      	b.n	80038d8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2220      	movs	r2, #32
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d1e8      	bne.n	80038aa <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2220      	movs	r2, #32
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d004      	beq.n	80038f0 <I2C_IsErrorOccurred+0x100>
 80038e6:	2327      	movs	r3, #39	@ 0x27
 80038e8:	18fb      	adds	r3, r7, r3
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d09b      	beq.n	8003828 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038f0:	2327      	movs	r3, #39	@ 0x27
 80038f2:	18fb      	adds	r3, r7, r3
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d103      	bne.n	8003902 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2220      	movs	r2, #32
 8003900:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	2204      	movs	r2, #4
 8003906:	4313      	orrs	r3, r2
 8003908:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800390a:	2327      	movs	r3, #39	@ 0x27
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	2380      	movs	r3, #128	@ 0x80
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	4013      	ands	r3, r2
 8003922:	d00c      	beq.n	800393e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	2201      	movs	r2, #1
 8003928:	4313      	orrs	r3, r2
 800392a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2280      	movs	r2, #128	@ 0x80
 8003932:	0052      	lsls	r2, r2, #1
 8003934:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003936:	2327      	movs	r3, #39	@ 0x27
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	2380      	movs	r3, #128	@ 0x80
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4013      	ands	r3, r2
 8003946:	d00c      	beq.n	8003962 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	2208      	movs	r2, #8
 800394c:	4313      	orrs	r3, r2
 800394e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2280      	movs	r2, #128	@ 0x80
 8003956:	00d2      	lsls	r2, r2, #3
 8003958:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800395a:	2327      	movs	r3, #39	@ 0x27
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	2201      	movs	r2, #1
 8003960:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	2380      	movs	r3, #128	@ 0x80
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4013      	ands	r3, r2
 800396a:	d00c      	beq.n	8003986 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	2202      	movs	r2, #2
 8003970:	4313      	orrs	r3, r2
 8003972:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2280      	movs	r2, #128	@ 0x80
 800397a:	0092      	lsls	r2, r2, #2
 800397c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800397e:	2327      	movs	r3, #39	@ 0x27
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	2201      	movs	r2, #1
 8003984:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003986:	2327      	movs	r3, #39	@ 0x27
 8003988:	18fb      	adds	r3, r7, r3
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d01d      	beq.n	80039cc <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	0018      	movs	r0, r3
 8003994:	f7ff fd8a 	bl	80034ac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	490e      	ldr	r1, [pc, #56]	@ (80039dc <I2C_IsErrorOccurred+0x1ec>)
 80039a4:	400a      	ands	r2, r1
 80039a6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2241      	movs	r2, #65	@ 0x41
 80039b8:	2120      	movs	r1, #32
 80039ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2242      	movs	r2, #66	@ 0x42
 80039c0:	2100      	movs	r1, #0
 80039c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2240      	movs	r2, #64	@ 0x40
 80039c8:	2100      	movs	r1, #0
 80039ca:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80039cc:	2327      	movs	r3, #39	@ 0x27
 80039ce:	18fb      	adds	r3, r7, r3
 80039d0:	781b      	ldrb	r3, [r3, #0]
}
 80039d2:	0018      	movs	r0, r3
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b00a      	add	sp, #40	@ 0x28
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	fe00e800 	.word	0xfe00e800

080039e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039e0:	b590      	push	{r4, r7, lr}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	0008      	movs	r0, r1
 80039ea:	0011      	movs	r1, r2
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	240a      	movs	r4, #10
 80039f0:	193b      	adds	r3, r7, r4
 80039f2:	1c02      	adds	r2, r0, #0
 80039f4:	801a      	strh	r2, [r3, #0]
 80039f6:	2009      	movs	r0, #9
 80039f8:	183b      	adds	r3, r7, r0
 80039fa:	1c0a      	adds	r2, r1, #0
 80039fc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039fe:	193b      	adds	r3, r7, r4
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	059b      	lsls	r3, r3, #22
 8003a04:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a06:	183b      	adds	r3, r7, r0
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	0419      	lsls	r1, r3, #16
 8003a0c:	23ff      	movs	r3, #255	@ 0xff
 8003a0e:	041b      	lsls	r3, r3, #16
 8003a10:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a12:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	005b      	lsls	r3, r3, #1
 8003a1e:	085b      	lsrs	r3, r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a2a:	0d51      	lsrs	r1, r2, #21
 8003a2c:	2280      	movs	r2, #128	@ 0x80
 8003a2e:	00d2      	lsls	r2, r2, #3
 8003a30:	400a      	ands	r2, r1
 8003a32:	4907      	ldr	r1, [pc, #28]	@ (8003a50 <I2C_TransferConfig+0x70>)
 8003a34:	430a      	orrs	r2, r1
 8003a36:	43d2      	mvns	r2, r2
 8003a38:	401a      	ands	r2, r3
 8003a3a:	0011      	movs	r1, r2
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	430a      	orrs	r2, r1
 8003a44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b007      	add	sp, #28
 8003a4c:	bd90      	pop	{r4, r7, pc}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	03ff63ff 	.word	0x03ff63ff

08003a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2241      	movs	r2, #65	@ 0x41
 8003a62:	5c9b      	ldrb	r3, [r3, r2]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d138      	bne.n	8003adc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2240      	movs	r2, #64	@ 0x40
 8003a6e:	5c9b      	ldrb	r3, [r3, r2]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d101      	bne.n	8003a78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e032      	b.n	8003ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2240      	movs	r2, #64	@ 0x40
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2241      	movs	r2, #65	@ 0x41
 8003a84:	2124      	movs	r1, #36	@ 0x24
 8003a86:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2101      	movs	r1, #1
 8003a94:	438a      	bics	r2, r1
 8003a96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4911      	ldr	r1, [pc, #68]	@ (8003ae8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003aa4:	400a      	ands	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6819      	ldr	r1, [r3, #0]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2241      	movs	r2, #65	@ 0x41
 8003acc:	2120      	movs	r1, #32
 8003ace:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2240      	movs	r2, #64	@ 0x40
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e000      	b.n	8003ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003adc:	2302      	movs	r3, #2
  }
}
 8003ade:	0018      	movs	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	b002      	add	sp, #8
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	ffffefff 	.word	0xffffefff

08003aec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2241      	movs	r2, #65	@ 0x41
 8003afa:	5c9b      	ldrb	r3, [r3, r2]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b20      	cmp	r3, #32
 8003b00:	d139      	bne.n	8003b76 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2240      	movs	r2, #64	@ 0x40
 8003b06:	5c9b      	ldrb	r3, [r3, r2]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d101      	bne.n	8003b10 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	e033      	b.n	8003b78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2240      	movs	r2, #64	@ 0x40
 8003b14:	2101      	movs	r1, #1
 8003b16:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2241      	movs	r2, #65	@ 0x41
 8003b1c:	2124      	movs	r1, #36	@ 0x24
 8003b1e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	438a      	bics	r2, r1
 8003b2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a11      	ldr	r2, [pc, #68]	@ (8003b80 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	021b      	lsls	r3, r3, #8
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2241      	movs	r2, #65	@ 0x41
 8003b66:	2120      	movs	r1, #32
 8003b68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2240      	movs	r2, #64	@ 0x40
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e000      	b.n	8003b78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
  }
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b004      	add	sp, #16
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	fffff0ff 	.word	0xfffff0ff

08003b84 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	000a      	movs	r2, r1
 8003b8e:	1cfb      	adds	r3, r7, #3
 8003b90:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003b96:	4b25      	ldr	r3, [pc, #148]	@ (8003c2c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	2380      	movs	r3, #128	@ 0x80
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003ba2:	4b23      	ldr	r3, [pc, #140]	@ (8003c30 <HAL_PWR_EnterSTOPMode+0xac>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	4013      	ands	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d008      	beq.n	8003bc4 <HAL_PWR_EnterSTOPMode+0x40>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d005      	beq.n	8003bc4 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8003c2c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c2c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003bbe:	491d      	ldr	r1, [pc, #116]	@ (8003c34 <HAL_PWR_EnterSTOPMode+0xb0>)
 8003bc0:	400a      	ands	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003bc4:	4b19      	ldr	r3, [pc, #100]	@ (8003c2c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2203      	movs	r2, #3
 8003bce:	4393      	bics	r3, r2
 8003bd0:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003bda:	4b14      	ldr	r3, [pc, #80]	@ (8003c2c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003be0:	4b15      	ldr	r3, [pc, #84]	@ (8003c38 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	4b14      	ldr	r3, [pc, #80]	@ (8003c38 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003be6:	2104      	movs	r1, #4
 8003be8:	430a      	orrs	r2, r1
 8003bea:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003bec:	1cfb      	adds	r3, r7, #3
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003bf4:	bf30      	wfi
 8003bf6:	e002      	b.n	8003bfe <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003bf8:	bf40      	sev
    __WFE();
 8003bfa:	bf20      	wfe
    __WFE();
 8003bfc:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8003c38 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003c04:	2104      	movs	r1, #4
 8003c06:	438a      	bics	r2, r1
 8003c08:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d009      	beq.n	8003c24 <HAL_PWR_EnterSTOPMode+0xa0>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d006      	beq.n	8003c24 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003c16:	4b05      	ldr	r3, [pc, #20]	@ (8003c2c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4b04      	ldr	r3, [pc, #16]	@ (8003c2c <HAL_PWR_EnterSTOPMode+0xa8>)
 8003c1c:	2180      	movs	r1, #128	@ 0x80
 8003c1e:	0089      	lsls	r1, r1, #2
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]
  }
}
 8003c24:	46c0      	nop			@ (mov r8, r8)
 8003c26:	46bd      	mov	sp, r7
 8003c28:	b006      	add	sp, #24
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40007000 	.word	0x40007000
 8003c30:	40010000 	.word	0x40010000
 8003c34:	fffffdff 	.word	0xfffffdff
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c3c:	b5b0      	push	{r4, r5, r7, lr}
 8003c3e:	b08a      	sub	sp, #40	@ 0x28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	f000 fbbf 	bl	80043ce <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c50:	4bc9      	ldr	r3, [pc, #804]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	220c      	movs	r2, #12
 8003c56:	4013      	ands	r3, r2
 8003c58:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c5a:	4bc7      	ldr	r3, [pc, #796]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	2380      	movs	r3, #128	@ 0x80
 8003c60:	025b      	lsls	r3, r3, #9
 8003c62:	4013      	ands	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d100      	bne.n	8003c72 <HAL_RCC_OscConfig+0x36>
 8003c70:	e07e      	b.n	8003d70 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d007      	beq.n	8003c88 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	2b0c      	cmp	r3, #12
 8003c7c:	d112      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x68>
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	2380      	movs	r3, #128	@ 0x80
 8003c82:	025b      	lsls	r3, r3, #9
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d10d      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c88:	4bbb      	ldr	r3, [pc, #748]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	2380      	movs	r3, #128	@ 0x80
 8003c8e:	029b      	lsls	r3, r3, #10
 8003c90:	4013      	ands	r3, r2
 8003c92:	d100      	bne.n	8003c96 <HAL_RCC_OscConfig+0x5a>
 8003c94:	e06b      	b.n	8003d6e <HAL_RCC_OscConfig+0x132>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d167      	bne.n	8003d6e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f000 fb95 	bl	80043ce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	2380      	movs	r3, #128	@ 0x80
 8003caa:	025b      	lsls	r3, r3, #9
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d107      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x84>
 8003cb0:	4bb1      	ldr	r3, [pc, #708]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	4bb0      	ldr	r3, [pc, #704]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003cb6:	2180      	movs	r1, #128	@ 0x80
 8003cb8:	0249      	lsls	r1, r1, #9
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	601a      	str	r2, [r3, #0]
 8003cbe:	e027      	b.n	8003d10 <HAL_RCC_OscConfig+0xd4>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	23a0      	movs	r3, #160	@ 0xa0
 8003cc6:	02db      	lsls	r3, r3, #11
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d10e      	bne.n	8003cea <HAL_RCC_OscConfig+0xae>
 8003ccc:	4baa      	ldr	r3, [pc, #680]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4ba9      	ldr	r3, [pc, #676]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003cd2:	2180      	movs	r1, #128	@ 0x80
 8003cd4:	02c9      	lsls	r1, r1, #11
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	4ba7      	ldr	r3, [pc, #668]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	4ba6      	ldr	r3, [pc, #664]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003ce0:	2180      	movs	r1, #128	@ 0x80
 8003ce2:	0249      	lsls	r1, r1, #9
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	e012      	b.n	8003d10 <HAL_RCC_OscConfig+0xd4>
 8003cea:	4ba3      	ldr	r3, [pc, #652]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	4ba2      	ldr	r3, [pc, #648]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003cf0:	49a2      	ldr	r1, [pc, #648]	@ (8003f7c <HAL_RCC_OscConfig+0x340>)
 8003cf2:	400a      	ands	r2, r1
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	4ba0      	ldr	r3, [pc, #640]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	2380      	movs	r3, #128	@ 0x80
 8003cfc:	025b      	lsls	r3, r3, #9
 8003cfe:	4013      	ands	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	4b9c      	ldr	r3, [pc, #624]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	4b9b      	ldr	r3, [pc, #620]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003d0a:	499d      	ldr	r1, [pc, #628]	@ (8003f80 <HAL_RCC_OscConfig+0x344>)
 8003d0c:	400a      	ands	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d015      	beq.n	8003d44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fd ff5c 	bl	8001bd4 <HAL_GetTick>
 8003d1c:	0003      	movs	r3, r0
 8003d1e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d20:	e009      	b.n	8003d36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d22:	f7fd ff57 	bl	8001bd4 <HAL_GetTick>
 8003d26:	0002      	movs	r2, r0
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b64      	cmp	r3, #100	@ 0x64
 8003d2e:	d902      	bls.n	8003d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	f000 fb4c 	bl	80043ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d36:	4b90      	ldr	r3, [pc, #576]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	2380      	movs	r3, #128	@ 0x80
 8003d3c:	029b      	lsls	r3, r3, #10
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d0ef      	beq.n	8003d22 <HAL_RCC_OscConfig+0xe6>
 8003d42:	e015      	b.n	8003d70 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d44:	f7fd ff46 	bl	8001bd4 <HAL_GetTick>
 8003d48:	0003      	movs	r3, r0
 8003d4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d4e:	f7fd ff41 	bl	8001bd4 <HAL_GetTick>
 8003d52:	0002      	movs	r2, r0
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b64      	cmp	r3, #100	@ 0x64
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e336      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d60:	4b85      	ldr	r3, [pc, #532]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	2380      	movs	r3, #128	@ 0x80
 8003d66:	029b      	lsls	r3, r3, #10
 8003d68:	4013      	ands	r3, r2
 8003d6a:	d1f0      	bne.n	8003d4e <HAL_RCC_OscConfig+0x112>
 8003d6c:	e000      	b.n	8003d70 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2202      	movs	r2, #2
 8003d76:	4013      	ands	r3, r2
 8003d78:	d100      	bne.n	8003d7c <HAL_RCC_OscConfig+0x140>
 8003d7a:	e099      	b.n	8003eb0 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	2220      	movs	r2, #32
 8003d86:	4013      	ands	r3, r2
 8003d88:	d009      	beq.n	8003d9e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003d8a:	4b7b      	ldr	r3, [pc, #492]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003d90:	2120      	movs	r1, #32
 8003d92:	430a      	orrs	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	2220      	movs	r2, #32
 8003d9a:	4393      	bics	r3, r2
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d005      	beq.n	8003db0 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	2b0c      	cmp	r3, #12
 8003da8:	d13e      	bne.n	8003e28 <HAL_RCC_OscConfig+0x1ec>
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d13b      	bne.n	8003e28 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003db0:	4b71      	ldr	r3, [pc, #452]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2204      	movs	r2, #4
 8003db6:	4013      	ands	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x188>
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d101      	bne.n	8003dc4 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e304      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc4:	4b6c      	ldr	r3, [pc, #432]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4a6e      	ldr	r2, [pc, #440]	@ (8003f84 <HAL_RCC_OscConfig+0x348>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	0019      	movs	r1, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	021a      	lsls	r2, r3, #8
 8003dd4:	4b68      	ldr	r3, [pc, #416]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003dda:	4b67      	ldr	r3, [pc, #412]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2209      	movs	r2, #9
 8003de0:	4393      	bics	r3, r2
 8003de2:	0019      	movs	r1, r3
 8003de4:	4b64      	ldr	r3, [pc, #400]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dec:	f000 fc42 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8003df0:	0001      	movs	r1, r0
 8003df2:	4b61      	ldr	r3, [pc, #388]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	091b      	lsrs	r3, r3, #4
 8003df8:	220f      	movs	r2, #15
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	4a62      	ldr	r2, [pc, #392]	@ (8003f88 <HAL_RCC_OscConfig+0x34c>)
 8003dfe:	5cd3      	ldrb	r3, [r2, r3]
 8003e00:	000a      	movs	r2, r1
 8003e02:	40da      	lsrs	r2, r3
 8003e04:	4b61      	ldr	r3, [pc, #388]	@ (8003f8c <HAL_RCC_OscConfig+0x350>)
 8003e06:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003e08:	4b61      	ldr	r3, [pc, #388]	@ (8003f90 <HAL_RCC_OscConfig+0x354>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2513      	movs	r5, #19
 8003e0e:	197c      	adds	r4, r7, r5
 8003e10:	0018      	movs	r0, r3
 8003e12:	f7fd fe99 	bl	8001b48 <HAL_InitTick>
 8003e16:	0003      	movs	r3, r0
 8003e18:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003e1a:	197b      	adds	r3, r7, r5
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d046      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003e22:	197b      	adds	r3, r7, r5
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	e2d2      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d027      	beq.n	8003e7e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003e2e:	4b52      	ldr	r3, [pc, #328]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2209      	movs	r2, #9
 8003e34:	4393      	bics	r3, r2
 8003e36:	0019      	movs	r1, r3
 8003e38:	4b4f      	ldr	r3, [pc, #316]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e40:	f7fd fec8 	bl	8001bd4 <HAL_GetTick>
 8003e44:	0003      	movs	r3, r0
 8003e46:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e4a:	f7fd fec3 	bl	8001bd4 <HAL_GetTick>
 8003e4e:	0002      	movs	r2, r0
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e2b8      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e5c:	4b46      	ldr	r3, [pc, #280]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2204      	movs	r2, #4
 8003e62:	4013      	ands	r3, r2
 8003e64:	d0f1      	beq.n	8003e4a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e66:	4b44      	ldr	r3, [pc, #272]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	4a46      	ldr	r2, [pc, #280]	@ (8003f84 <HAL_RCC_OscConfig+0x348>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	0019      	movs	r1, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	021a      	lsls	r2, r3, #8
 8003e76:	4b40      	ldr	r3, [pc, #256]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]
 8003e7c:	e018      	b.n	8003eb0 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	4b3d      	ldr	r3, [pc, #244]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003e84:	2101      	movs	r1, #1
 8003e86:	438a      	bics	r2, r1
 8003e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8a:	f7fd fea3 	bl	8001bd4 <HAL_GetTick>
 8003e8e:	0003      	movs	r3, r0
 8003e90:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e94:	f7fd fe9e 	bl	8001bd4 <HAL_GetTick>
 8003e98:	0002      	movs	r2, r0
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e293      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ea6:	4b34      	ldr	r3, [pc, #208]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	4013      	ands	r3, r2
 8003eae:	d1f1      	bne.n	8003e94 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d100      	bne.n	8003ebc <HAL_RCC_OscConfig+0x280>
 8003eba:	e0a2      	b.n	8004002 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d140      	bne.n	8003f44 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	2380      	movs	r3, #128	@ 0x80
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4013      	ands	r3, r2
 8003ecc:	d005      	beq.n	8003eda <HAL_RCC_OscConfig+0x29e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e279      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eda:	4b27      	ldr	r3, [pc, #156]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4a2d      	ldr	r2, [pc, #180]	@ (8003f94 <HAL_RCC_OscConfig+0x358>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	0019      	movs	r1, r3
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ee8:	4b23      	ldr	r3, [pc, #140]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eee:	4b22      	ldr	r3, [pc, #136]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	0a19      	lsrs	r1, r3, #8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	061a      	lsls	r2, r3, #24
 8003efc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003efe:	430a      	orrs	r2, r1
 8003f00:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f06:	0b5b      	lsrs	r3, r3, #13
 8003f08:	3301      	adds	r3, #1
 8003f0a:	2280      	movs	r2, #128	@ 0x80
 8003f0c:	0212      	lsls	r2, r2, #8
 8003f0e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003f10:	4b19      	ldr	r3, [pc, #100]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	210f      	movs	r1, #15
 8003f18:	400b      	ands	r3, r1
 8003f1a:	491b      	ldr	r1, [pc, #108]	@ (8003f88 <HAL_RCC_OscConfig+0x34c>)
 8003f1c:	5ccb      	ldrb	r3, [r1, r3]
 8003f1e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f20:	4b1a      	ldr	r3, [pc, #104]	@ (8003f8c <HAL_RCC_OscConfig+0x350>)
 8003f22:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003f24:	4b1a      	ldr	r3, [pc, #104]	@ (8003f90 <HAL_RCC_OscConfig+0x354>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2513      	movs	r5, #19
 8003f2a:	197c      	adds	r4, r7, r5
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7fd fe0b 	bl	8001b48 <HAL_InitTick>
 8003f32:	0003      	movs	r3, r0
 8003f34:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003f36:	197b      	adds	r3, r7, r5
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d061      	beq.n	8004002 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8003f3e:	197b      	adds	r3, r7, r5
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	e244      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d040      	beq.n	8003fce <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	4b09      	ldr	r3, [pc, #36]	@ (8003f78 <HAL_RCC_OscConfig+0x33c>)
 8003f52:	2180      	movs	r1, #128	@ 0x80
 8003f54:	0049      	lsls	r1, r1, #1
 8003f56:	430a      	orrs	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7fd fe3b 	bl	8001bd4 <HAL_GetTick>
 8003f5e:	0003      	movs	r3, r0
 8003f60:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f62:	e019      	b.n	8003f98 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f64:	f7fd fe36 	bl	8001bd4 <HAL_GetTick>
 8003f68:	0002      	movs	r2, r0
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d912      	bls.n	8003f98 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e22b      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
 8003f76:	46c0      	nop			@ (mov r8, r8)
 8003f78:	40021000 	.word	0x40021000
 8003f7c:	fffeffff 	.word	0xfffeffff
 8003f80:	fffbffff 	.word	0xfffbffff
 8003f84:	ffffe0ff 	.word	0xffffe0ff
 8003f88:	08006d4c 	.word	0x08006d4c
 8003f8c:	20000000 	.word	0x20000000
 8003f90:	20000004 	.word	0x20000004
 8003f94:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003f98:	4bca      	ldr	r3, [pc, #808]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	2380      	movs	r3, #128	@ 0x80
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	d0df      	beq.n	8003f64 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fa4:	4bc7      	ldr	r3, [pc, #796]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	4ac7      	ldr	r2, [pc, #796]	@ (80042c8 <HAL_RCC_OscConfig+0x68c>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	0019      	movs	r1, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fb2:	4bc4      	ldr	r3, [pc, #784]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fb8:	4bc2      	ldr	r3, [pc, #776]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	0a19      	lsrs	r1, r3, #8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	061a      	lsls	r2, r3, #24
 8003fc6:	4bbf      	ldr	r3, [pc, #764]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	e019      	b.n	8004002 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fce:	4bbd      	ldr	r3, [pc, #756]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	4bbc      	ldr	r3, [pc, #752]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8003fd4:	49bd      	ldr	r1, [pc, #756]	@ (80042cc <HAL_RCC_OscConfig+0x690>)
 8003fd6:	400a      	ands	r2, r1
 8003fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fda:	f7fd fdfb 	bl	8001bd4 <HAL_GetTick>
 8003fde:	0003      	movs	r3, r0
 8003fe0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fe4:	f7fd fdf6 	bl	8001bd4 <HAL_GetTick>
 8003fe8:	0002      	movs	r2, r0
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e1eb      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003ff6:	4bb3      	ldr	r3, [pc, #716]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	2380      	movs	r3, #128	@ 0x80
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4013      	ands	r3, r2
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2208      	movs	r2, #8
 8004008:	4013      	ands	r3, r2
 800400a:	d036      	beq.n	800407a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d019      	beq.n	8004048 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004014:	4bab      	ldr	r3, [pc, #684]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8004016:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004018:	4baa      	ldr	r3, [pc, #680]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800401a:	2101      	movs	r1, #1
 800401c:	430a      	orrs	r2, r1
 800401e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004020:	f7fd fdd8 	bl	8001bd4 <HAL_GetTick>
 8004024:	0003      	movs	r3, r0
 8004026:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004028:	e008      	b.n	800403c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800402a:	f7fd fdd3 	bl	8001bd4 <HAL_GetTick>
 800402e:	0002      	movs	r2, r0
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d901      	bls.n	800403c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e1c8      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800403c:	4ba1      	ldr	r3, [pc, #644]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800403e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004040:	2202      	movs	r2, #2
 8004042:	4013      	ands	r3, r2
 8004044:	d0f1      	beq.n	800402a <HAL_RCC_OscConfig+0x3ee>
 8004046:	e018      	b.n	800407a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004048:	4b9e      	ldr	r3, [pc, #632]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800404a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800404c:	4b9d      	ldr	r3, [pc, #628]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800404e:	2101      	movs	r1, #1
 8004050:	438a      	bics	r2, r1
 8004052:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004054:	f7fd fdbe 	bl	8001bd4 <HAL_GetTick>
 8004058:	0003      	movs	r3, r0
 800405a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800405e:	f7fd fdb9 	bl	8001bd4 <HAL_GetTick>
 8004062:	0002      	movs	r2, r0
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e1ae      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004070:	4b94      	ldr	r3, [pc, #592]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8004072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004074:	2202      	movs	r2, #2
 8004076:	4013      	ands	r3, r2
 8004078:	d1f1      	bne.n	800405e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2204      	movs	r2, #4
 8004080:	4013      	ands	r3, r2
 8004082:	d100      	bne.n	8004086 <HAL_RCC_OscConfig+0x44a>
 8004084:	e0ae      	b.n	80041e4 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004086:	2023      	movs	r0, #35	@ 0x23
 8004088:	183b      	adds	r3, r7, r0
 800408a:	2200      	movs	r2, #0
 800408c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800408e:	4b8d      	ldr	r3, [pc, #564]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8004090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004092:	2380      	movs	r3, #128	@ 0x80
 8004094:	055b      	lsls	r3, r3, #21
 8004096:	4013      	ands	r3, r2
 8004098:	d109      	bne.n	80040ae <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800409a:	4b8a      	ldr	r3, [pc, #552]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800409c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800409e:	4b89      	ldr	r3, [pc, #548]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 80040a0:	2180      	movs	r1, #128	@ 0x80
 80040a2:	0549      	lsls	r1, r1, #21
 80040a4:	430a      	orrs	r2, r1
 80040a6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80040a8:	183b      	adds	r3, r7, r0
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ae:	4b88      	ldr	r3, [pc, #544]	@ (80042d0 <HAL_RCC_OscConfig+0x694>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	2380      	movs	r3, #128	@ 0x80
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4013      	ands	r3, r2
 80040b8:	d11a      	bne.n	80040f0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ba:	4b85      	ldr	r3, [pc, #532]	@ (80042d0 <HAL_RCC_OscConfig+0x694>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	4b84      	ldr	r3, [pc, #528]	@ (80042d0 <HAL_RCC_OscConfig+0x694>)
 80040c0:	2180      	movs	r1, #128	@ 0x80
 80040c2:	0049      	lsls	r1, r1, #1
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c8:	f7fd fd84 	bl	8001bd4 <HAL_GetTick>
 80040cc:	0003      	movs	r3, r0
 80040ce:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d2:	f7fd fd7f 	bl	8001bd4 <HAL_GetTick>
 80040d6:	0002      	movs	r2, r0
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b64      	cmp	r3, #100	@ 0x64
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e174      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	4b7a      	ldr	r3, [pc, #488]	@ (80042d0 <HAL_RCC_OscConfig+0x694>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	2380      	movs	r3, #128	@ 0x80
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4013      	ands	r3, r2
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	2380      	movs	r3, #128	@ 0x80
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d107      	bne.n	800410c <HAL_RCC_OscConfig+0x4d0>
 80040fc:	4b71      	ldr	r3, [pc, #452]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 80040fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004100:	4b70      	ldr	r3, [pc, #448]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8004102:	2180      	movs	r1, #128	@ 0x80
 8004104:	0049      	lsls	r1, r1, #1
 8004106:	430a      	orrs	r2, r1
 8004108:	651a      	str	r2, [r3, #80]	@ 0x50
 800410a:	e031      	b.n	8004170 <HAL_RCC_OscConfig+0x534>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10c      	bne.n	800412e <HAL_RCC_OscConfig+0x4f2>
 8004114:	4b6b      	ldr	r3, [pc, #428]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8004116:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004118:	4b6a      	ldr	r3, [pc, #424]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800411a:	496c      	ldr	r1, [pc, #432]	@ (80042cc <HAL_RCC_OscConfig+0x690>)
 800411c:	400a      	ands	r2, r1
 800411e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004120:	4b68      	ldr	r3, [pc, #416]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8004122:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004124:	4b67      	ldr	r3, [pc, #412]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8004126:	496b      	ldr	r1, [pc, #428]	@ (80042d4 <HAL_RCC_OscConfig+0x698>)
 8004128:	400a      	ands	r2, r1
 800412a:	651a      	str	r2, [r3, #80]	@ 0x50
 800412c:	e020      	b.n	8004170 <HAL_RCC_OscConfig+0x534>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	23a0      	movs	r3, #160	@ 0xa0
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	429a      	cmp	r2, r3
 8004138:	d10e      	bne.n	8004158 <HAL_RCC_OscConfig+0x51c>
 800413a:	4b62      	ldr	r3, [pc, #392]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800413c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800413e:	4b61      	ldr	r3, [pc, #388]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8004140:	2180      	movs	r1, #128	@ 0x80
 8004142:	00c9      	lsls	r1, r1, #3
 8004144:	430a      	orrs	r2, r1
 8004146:	651a      	str	r2, [r3, #80]	@ 0x50
 8004148:	4b5e      	ldr	r3, [pc, #376]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800414a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800414c:	4b5d      	ldr	r3, [pc, #372]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800414e:	2180      	movs	r1, #128	@ 0x80
 8004150:	0049      	lsls	r1, r1, #1
 8004152:	430a      	orrs	r2, r1
 8004154:	651a      	str	r2, [r3, #80]	@ 0x50
 8004156:	e00b      	b.n	8004170 <HAL_RCC_OscConfig+0x534>
 8004158:	4b5a      	ldr	r3, [pc, #360]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800415a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800415c:	4b59      	ldr	r3, [pc, #356]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800415e:	495b      	ldr	r1, [pc, #364]	@ (80042cc <HAL_RCC_OscConfig+0x690>)
 8004160:	400a      	ands	r2, r1
 8004162:	651a      	str	r2, [r3, #80]	@ 0x50
 8004164:	4b57      	ldr	r3, [pc, #348]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8004166:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004168:	4b56      	ldr	r3, [pc, #344]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800416a:	495a      	ldr	r1, [pc, #360]	@ (80042d4 <HAL_RCC_OscConfig+0x698>)
 800416c:	400a      	ands	r2, r1
 800416e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d015      	beq.n	80041a4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004178:	f7fd fd2c 	bl	8001bd4 <HAL_GetTick>
 800417c:	0003      	movs	r3, r0
 800417e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004180:	e009      	b.n	8004196 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004182:	f7fd fd27 	bl	8001bd4 <HAL_GetTick>
 8004186:	0002      	movs	r2, r0
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	4a52      	ldr	r2, [pc, #328]	@ (80042d8 <HAL_RCC_OscConfig+0x69c>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d901      	bls.n	8004196 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e11b      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004196:	4b4b      	ldr	r3, [pc, #300]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8004198:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800419a:	2380      	movs	r3, #128	@ 0x80
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4013      	ands	r3, r2
 80041a0:	d0ef      	beq.n	8004182 <HAL_RCC_OscConfig+0x546>
 80041a2:	e014      	b.n	80041ce <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a4:	f7fd fd16 	bl	8001bd4 <HAL_GetTick>
 80041a8:	0003      	movs	r3, r0
 80041aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041ac:	e009      	b.n	80041c2 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ae:	f7fd fd11 	bl	8001bd4 <HAL_GetTick>
 80041b2:	0002      	movs	r2, r0
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	4a47      	ldr	r2, [pc, #284]	@ (80042d8 <HAL_RCC_OscConfig+0x69c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e105      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041c2:	4b40      	ldr	r3, [pc, #256]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 80041c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041c6:	2380      	movs	r3, #128	@ 0x80
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4013      	ands	r3, r2
 80041cc:	d1ef      	bne.n	80041ae <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041ce:	2323      	movs	r3, #35	@ 0x23
 80041d0:	18fb      	adds	r3, r7, r3
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d105      	bne.n	80041e4 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d8:	4b3a      	ldr	r3, [pc, #232]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 80041da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041dc:	4b39      	ldr	r3, [pc, #228]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 80041de:	493f      	ldr	r1, [pc, #252]	@ (80042dc <HAL_RCC_OscConfig+0x6a0>)
 80041e0:	400a      	ands	r2, r1
 80041e2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2220      	movs	r2, #32
 80041ea:	4013      	ands	r3, r2
 80041ec:	d049      	beq.n	8004282 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d026      	beq.n	8004244 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80041f6:	4b33      	ldr	r3, [pc, #204]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 80041f8:	689a      	ldr	r2, [r3, #8]
 80041fa:	4b32      	ldr	r3, [pc, #200]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 80041fc:	2101      	movs	r1, #1
 80041fe:	430a      	orrs	r2, r1
 8004200:	609a      	str	r2, [r3, #8]
 8004202:	4b30      	ldr	r3, [pc, #192]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8004204:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004206:	4b2f      	ldr	r3, [pc, #188]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8004208:	2101      	movs	r1, #1
 800420a:	430a      	orrs	r2, r1
 800420c:	635a      	str	r2, [r3, #52]	@ 0x34
 800420e:	4b34      	ldr	r3, [pc, #208]	@ (80042e0 <HAL_RCC_OscConfig+0x6a4>)
 8004210:	6a1a      	ldr	r2, [r3, #32]
 8004212:	4b33      	ldr	r3, [pc, #204]	@ (80042e0 <HAL_RCC_OscConfig+0x6a4>)
 8004214:	2180      	movs	r1, #128	@ 0x80
 8004216:	0189      	lsls	r1, r1, #6
 8004218:	430a      	orrs	r2, r1
 800421a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fd fcda 	bl	8001bd4 <HAL_GetTick>
 8004220:	0003      	movs	r3, r0
 8004222:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004226:	f7fd fcd5 	bl	8001bd4 <HAL_GetTick>
 800422a:	0002      	movs	r2, r0
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e0ca      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004238:	4b22      	ldr	r3, [pc, #136]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2202      	movs	r2, #2
 800423e:	4013      	ands	r3, r2
 8004240:	d0f1      	beq.n	8004226 <HAL_RCC_OscConfig+0x5ea>
 8004242:	e01e      	b.n	8004282 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004244:	4b1f      	ldr	r3, [pc, #124]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	4b1e      	ldr	r3, [pc, #120]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800424a:	2101      	movs	r1, #1
 800424c:	438a      	bics	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	4b23      	ldr	r3, [pc, #140]	@ (80042e0 <HAL_RCC_OscConfig+0x6a4>)
 8004252:	6a1a      	ldr	r2, [r3, #32]
 8004254:	4b22      	ldr	r3, [pc, #136]	@ (80042e0 <HAL_RCC_OscConfig+0x6a4>)
 8004256:	4923      	ldr	r1, [pc, #140]	@ (80042e4 <HAL_RCC_OscConfig+0x6a8>)
 8004258:	400a      	ands	r2, r1
 800425a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425c:	f7fd fcba 	bl	8001bd4 <HAL_GetTick>
 8004260:	0003      	movs	r3, r0
 8004262:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004266:	f7fd fcb5 	bl	8001bd4 <HAL_GetTick>
 800426a:	0002      	movs	r2, r0
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e0aa      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004278:	4b12      	ldr	r3, [pc, #72]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2202      	movs	r2, #2
 800427e:	4013      	ands	r3, r2
 8004280:	d1f1      	bne.n	8004266 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004286:	2b00      	cmp	r3, #0
 8004288:	d100      	bne.n	800428c <HAL_RCC_OscConfig+0x650>
 800428a:	e09f      	b.n	80043cc <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	2b0c      	cmp	r3, #12
 8004290:	d100      	bne.n	8004294 <HAL_RCC_OscConfig+0x658>
 8004292:	e078      	b.n	8004386 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	2b02      	cmp	r3, #2
 800429a:	d159      	bne.n	8004350 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800429c:	4b09      	ldr	r3, [pc, #36]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	4b08      	ldr	r3, [pc, #32]	@ (80042c4 <HAL_RCC_OscConfig+0x688>)
 80042a2:	4911      	ldr	r1, [pc, #68]	@ (80042e8 <HAL_RCC_OscConfig+0x6ac>)
 80042a4:	400a      	ands	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a8:	f7fd fc94 	bl	8001bd4 <HAL_GetTick>
 80042ac:	0003      	movs	r3, r0
 80042ae:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80042b0:	e01c      	b.n	80042ec <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b2:	f7fd fc8f 	bl	8001bd4 <HAL_GetTick>
 80042b6:	0002      	movs	r2, r0
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d915      	bls.n	80042ec <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e084      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
 80042c4:	40021000 	.word	0x40021000
 80042c8:	ffff1fff 	.word	0xffff1fff
 80042cc:	fffffeff 	.word	0xfffffeff
 80042d0:	40007000 	.word	0x40007000
 80042d4:	fffffbff 	.word	0xfffffbff
 80042d8:	00001388 	.word	0x00001388
 80042dc:	efffffff 	.word	0xefffffff
 80042e0:	40010000 	.word	0x40010000
 80042e4:	ffffdfff 	.word	0xffffdfff
 80042e8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80042ec:	4b3a      	ldr	r3, [pc, #232]	@ (80043d8 <HAL_RCC_OscConfig+0x79c>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	2380      	movs	r3, #128	@ 0x80
 80042f2:	049b      	lsls	r3, r3, #18
 80042f4:	4013      	ands	r3, r2
 80042f6:	d1dc      	bne.n	80042b2 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f8:	4b37      	ldr	r3, [pc, #220]	@ (80043d8 <HAL_RCC_OscConfig+0x79c>)
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4a37      	ldr	r2, [pc, #220]	@ (80043dc <HAL_RCC_OscConfig+0x7a0>)
 80042fe:	4013      	ands	r3, r2
 8004300:	0019      	movs	r1, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	431a      	orrs	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004310:	431a      	orrs	r2, r3
 8004312:	4b31      	ldr	r3, [pc, #196]	@ (80043d8 <HAL_RCC_OscConfig+0x79c>)
 8004314:	430a      	orrs	r2, r1
 8004316:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004318:	4b2f      	ldr	r3, [pc, #188]	@ (80043d8 <HAL_RCC_OscConfig+0x79c>)
 800431a:	681a      	ldr	r2, [r3, #0]
 800431c:	4b2e      	ldr	r3, [pc, #184]	@ (80043d8 <HAL_RCC_OscConfig+0x79c>)
 800431e:	2180      	movs	r1, #128	@ 0x80
 8004320:	0449      	lsls	r1, r1, #17
 8004322:	430a      	orrs	r2, r1
 8004324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004326:	f7fd fc55 	bl	8001bd4 <HAL_GetTick>
 800432a:	0003      	movs	r3, r0
 800432c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004330:	f7fd fc50 	bl	8001bd4 <HAL_GetTick>
 8004334:	0002      	movs	r2, r0
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e045      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004342:	4b25      	ldr	r3, [pc, #148]	@ (80043d8 <HAL_RCC_OscConfig+0x79c>)
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	2380      	movs	r3, #128	@ 0x80
 8004348:	049b      	lsls	r3, r3, #18
 800434a:	4013      	ands	r3, r2
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0x6f4>
 800434e:	e03d      	b.n	80043cc <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004350:	4b21      	ldr	r3, [pc, #132]	@ (80043d8 <HAL_RCC_OscConfig+0x79c>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b20      	ldr	r3, [pc, #128]	@ (80043d8 <HAL_RCC_OscConfig+0x79c>)
 8004356:	4922      	ldr	r1, [pc, #136]	@ (80043e0 <HAL_RCC_OscConfig+0x7a4>)
 8004358:	400a      	ands	r2, r1
 800435a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7fd fc3a 	bl	8001bd4 <HAL_GetTick>
 8004360:	0003      	movs	r3, r0
 8004362:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004364:	e008      	b.n	8004378 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004366:	f7fd fc35 	bl	8001bd4 <HAL_GetTick>
 800436a:	0002      	movs	r2, r0
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	2b02      	cmp	r3, #2
 8004372:	d901      	bls.n	8004378 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e02a      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004378:	4b17      	ldr	r3, [pc, #92]	@ (80043d8 <HAL_RCC_OscConfig+0x79c>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	2380      	movs	r3, #128	@ 0x80
 800437e:	049b      	lsls	r3, r3, #18
 8004380:	4013      	ands	r3, r2
 8004382:	d1f0      	bne.n	8004366 <HAL_RCC_OscConfig+0x72a>
 8004384:	e022      	b.n	80043cc <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e01d      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004392:	4b11      	ldr	r3, [pc, #68]	@ (80043d8 <HAL_RCC_OscConfig+0x79c>)
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	2380      	movs	r3, #128	@ 0x80
 800439c:	025b      	lsls	r3, r3, #9
 800439e:	401a      	ands	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d10f      	bne.n	80043c8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	23f0      	movs	r3, #240	@ 0xf0
 80043ac:	039b      	lsls	r3, r3, #14
 80043ae:	401a      	ands	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d107      	bne.n	80043c8 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	23c0      	movs	r3, #192	@ 0xc0
 80043bc:	041b      	lsls	r3, r3, #16
 80043be:	401a      	ands	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	0018      	movs	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	b00a      	add	sp, #40	@ 0x28
 80043d4:	bdb0      	pop	{r4, r5, r7, pc}
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	40021000 	.word	0x40021000
 80043dc:	ff02ffff 	.word	0xff02ffff
 80043e0:	feffffff 	.word	0xfeffffff

080043e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043e4:	b5b0      	push	{r4, r5, r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e128      	b.n	800464a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043f8:	4b96      	ldr	r3, [pc, #600]	@ (8004654 <HAL_RCC_ClockConfig+0x270>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2201      	movs	r2, #1
 80043fe:	4013      	ands	r3, r2
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d91e      	bls.n	8004444 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004406:	4b93      	ldr	r3, [pc, #588]	@ (8004654 <HAL_RCC_ClockConfig+0x270>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2201      	movs	r2, #1
 800440c:	4393      	bics	r3, r2
 800440e:	0019      	movs	r1, r3
 8004410:	4b90      	ldr	r3, [pc, #576]	@ (8004654 <HAL_RCC_ClockConfig+0x270>)
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004418:	f7fd fbdc 	bl	8001bd4 <HAL_GetTick>
 800441c:	0003      	movs	r3, r0
 800441e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004420:	e009      	b.n	8004436 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004422:	f7fd fbd7 	bl	8001bd4 <HAL_GetTick>
 8004426:	0002      	movs	r2, r0
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	1ad3      	subs	r3, r2, r3
 800442c:	4a8a      	ldr	r2, [pc, #552]	@ (8004658 <HAL_RCC_ClockConfig+0x274>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e109      	b.n	800464a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004436:	4b87      	ldr	r3, [pc, #540]	@ (8004654 <HAL_RCC_ClockConfig+0x270>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	2201      	movs	r2, #1
 800443c:	4013      	ands	r3, r2
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d1ee      	bne.n	8004422 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2202      	movs	r2, #2
 800444a:	4013      	ands	r3, r2
 800444c:	d009      	beq.n	8004462 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800444e:	4b83      	ldr	r3, [pc, #524]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	22f0      	movs	r2, #240	@ 0xf0
 8004454:	4393      	bics	r3, r2
 8004456:	0019      	movs	r1, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	4b7f      	ldr	r3, [pc, #508]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 800445e:	430a      	orrs	r2, r1
 8004460:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2201      	movs	r2, #1
 8004468:	4013      	ands	r3, r2
 800446a:	d100      	bne.n	800446e <HAL_RCC_ClockConfig+0x8a>
 800446c:	e089      	b.n	8004582 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004476:	4b79      	ldr	r3, [pc, #484]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	2380      	movs	r3, #128	@ 0x80
 800447c:	029b      	lsls	r3, r3, #10
 800447e:	4013      	ands	r3, r2
 8004480:	d120      	bne.n	80044c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e0e1      	b.n	800464a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2b03      	cmp	r3, #3
 800448c:	d107      	bne.n	800449e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800448e:	4b73      	ldr	r3, [pc, #460]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	2380      	movs	r3, #128	@ 0x80
 8004494:	049b      	lsls	r3, r3, #18
 8004496:	4013      	ands	r3, r2
 8004498:	d114      	bne.n	80044c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e0d5      	b.n	800464a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d106      	bne.n	80044b4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044a6:	4b6d      	ldr	r3, [pc, #436]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2204      	movs	r2, #4
 80044ac:	4013      	ands	r3, r2
 80044ae:	d109      	bne.n	80044c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0ca      	b.n	800464a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044b4:	4b69      	ldr	r3, [pc, #420]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	2380      	movs	r3, #128	@ 0x80
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4013      	ands	r3, r2
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0c2      	b.n	800464a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044c4:	4b65      	ldr	r3, [pc, #404]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	2203      	movs	r2, #3
 80044ca:	4393      	bics	r3, r2
 80044cc:	0019      	movs	r1, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	4b62      	ldr	r3, [pc, #392]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 80044d4:	430a      	orrs	r2, r1
 80044d6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044d8:	f7fd fb7c 	bl	8001bd4 <HAL_GetTick>
 80044dc:	0003      	movs	r3, r0
 80044de:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d111      	bne.n	800450c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044e8:	e009      	b.n	80044fe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ea:	f7fd fb73 	bl	8001bd4 <HAL_GetTick>
 80044ee:	0002      	movs	r2, r0
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	4a58      	ldr	r2, [pc, #352]	@ (8004658 <HAL_RCC_ClockConfig+0x274>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e0a5      	b.n	800464a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044fe:	4b57      	ldr	r3, [pc, #348]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	220c      	movs	r2, #12
 8004504:	4013      	ands	r3, r2
 8004506:	2b08      	cmp	r3, #8
 8004508:	d1ef      	bne.n	80044ea <HAL_RCC_ClockConfig+0x106>
 800450a:	e03a      	b.n	8004582 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b03      	cmp	r3, #3
 8004512:	d111      	bne.n	8004538 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004514:	e009      	b.n	800452a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004516:	f7fd fb5d 	bl	8001bd4 <HAL_GetTick>
 800451a:	0002      	movs	r2, r0
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	4a4d      	ldr	r2, [pc, #308]	@ (8004658 <HAL_RCC_ClockConfig+0x274>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e08f      	b.n	800464a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800452a:	4b4c      	ldr	r3, [pc, #304]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	220c      	movs	r2, #12
 8004530:	4013      	ands	r3, r2
 8004532:	2b0c      	cmp	r3, #12
 8004534:	d1ef      	bne.n	8004516 <HAL_RCC_ClockConfig+0x132>
 8004536:	e024      	b.n	8004582 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d11b      	bne.n	8004578 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004540:	e009      	b.n	8004556 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004542:	f7fd fb47 	bl	8001bd4 <HAL_GetTick>
 8004546:	0002      	movs	r2, r0
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	4a42      	ldr	r2, [pc, #264]	@ (8004658 <HAL_RCC_ClockConfig+0x274>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e079      	b.n	800464a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004556:	4b41      	ldr	r3, [pc, #260]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	220c      	movs	r2, #12
 800455c:	4013      	ands	r3, r2
 800455e:	2b04      	cmp	r3, #4
 8004560:	d1ef      	bne.n	8004542 <HAL_RCC_ClockConfig+0x15e>
 8004562:	e00e      	b.n	8004582 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004564:	f7fd fb36 	bl	8001bd4 <HAL_GetTick>
 8004568:	0002      	movs	r2, r0
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	4a3a      	ldr	r2, [pc, #232]	@ (8004658 <HAL_RCC_ClockConfig+0x274>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e068      	b.n	800464a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004578:	4b38      	ldr	r3, [pc, #224]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	220c      	movs	r2, #12
 800457e:	4013      	ands	r3, r2
 8004580:	d1f0      	bne.n	8004564 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004582:	4b34      	ldr	r3, [pc, #208]	@ (8004654 <HAL_RCC_ClockConfig+0x270>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2201      	movs	r2, #1
 8004588:	4013      	ands	r3, r2
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d21e      	bcs.n	80045ce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004590:	4b30      	ldr	r3, [pc, #192]	@ (8004654 <HAL_RCC_ClockConfig+0x270>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2201      	movs	r2, #1
 8004596:	4393      	bics	r3, r2
 8004598:	0019      	movs	r1, r3
 800459a:	4b2e      	ldr	r3, [pc, #184]	@ (8004654 <HAL_RCC_ClockConfig+0x270>)
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80045a2:	f7fd fb17 	bl	8001bd4 <HAL_GetTick>
 80045a6:	0003      	movs	r3, r0
 80045a8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045aa:	e009      	b.n	80045c0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ac:	f7fd fb12 	bl	8001bd4 <HAL_GetTick>
 80045b0:	0002      	movs	r2, r0
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	4a28      	ldr	r2, [pc, #160]	@ (8004658 <HAL_RCC_ClockConfig+0x274>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e044      	b.n	800464a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c0:	4b24      	ldr	r3, [pc, #144]	@ (8004654 <HAL_RCC_ClockConfig+0x270>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2201      	movs	r2, #1
 80045c6:	4013      	ands	r3, r2
 80045c8:	683a      	ldr	r2, [r7, #0]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d1ee      	bne.n	80045ac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2204      	movs	r2, #4
 80045d4:	4013      	ands	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045d8:	4b20      	ldr	r3, [pc, #128]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a20      	ldr	r2, [pc, #128]	@ (8004660 <HAL_RCC_ClockConfig+0x27c>)
 80045de:	4013      	ands	r3, r2
 80045e0:	0019      	movs	r1, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	4b1d      	ldr	r3, [pc, #116]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 80045e8:	430a      	orrs	r2, r1
 80045ea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2208      	movs	r2, #8
 80045f2:	4013      	ands	r3, r2
 80045f4:	d00a      	beq.n	800460c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80045f6:	4b19      	ldr	r3, [pc, #100]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	4a1a      	ldr	r2, [pc, #104]	@ (8004664 <HAL_RCC_ClockConfig+0x280>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	0019      	movs	r1, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	00da      	lsls	r2, r3, #3
 8004606:	4b15      	ldr	r3, [pc, #84]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 8004608:	430a      	orrs	r2, r1
 800460a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800460c:	f000 f832 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8004610:	0001      	movs	r1, r0
 8004612:	4b12      	ldr	r3, [pc, #72]	@ (800465c <HAL_RCC_ClockConfig+0x278>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	220f      	movs	r2, #15
 800461a:	4013      	ands	r3, r2
 800461c:	4a12      	ldr	r2, [pc, #72]	@ (8004668 <HAL_RCC_ClockConfig+0x284>)
 800461e:	5cd3      	ldrb	r3, [r2, r3]
 8004620:	000a      	movs	r2, r1
 8004622:	40da      	lsrs	r2, r3
 8004624:	4b11      	ldr	r3, [pc, #68]	@ (800466c <HAL_RCC_ClockConfig+0x288>)
 8004626:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004628:	4b11      	ldr	r3, [pc, #68]	@ (8004670 <HAL_RCC_ClockConfig+0x28c>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	250b      	movs	r5, #11
 800462e:	197c      	adds	r4, r7, r5
 8004630:	0018      	movs	r0, r3
 8004632:	f7fd fa89 	bl	8001b48 <HAL_InitTick>
 8004636:	0003      	movs	r3, r0
 8004638:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800463a:	197b      	adds	r3, r7, r5
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004642:	197b      	adds	r3, r7, r5
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	e000      	b.n	800464a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	0018      	movs	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	b004      	add	sp, #16
 8004650:	bdb0      	pop	{r4, r5, r7, pc}
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	40022000 	.word	0x40022000
 8004658:	00001388 	.word	0x00001388
 800465c:	40021000 	.word	0x40021000
 8004660:	fffff8ff 	.word	0xfffff8ff
 8004664:	ffffc7ff 	.word	0xffffc7ff
 8004668:	08006d4c 	.word	0x08006d4c
 800466c:	20000000 	.word	0x20000000
 8004670:	20000004 	.word	0x20000004

08004674 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800467a:	4b3c      	ldr	r3, [pc, #240]	@ (800476c <HAL_RCC_GetSysClockFreq+0xf8>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	220c      	movs	r2, #12
 8004684:	4013      	ands	r3, r2
 8004686:	2b0c      	cmp	r3, #12
 8004688:	d013      	beq.n	80046b2 <HAL_RCC_GetSysClockFreq+0x3e>
 800468a:	d85c      	bhi.n	8004746 <HAL_RCC_GetSysClockFreq+0xd2>
 800468c:	2b04      	cmp	r3, #4
 800468e:	d002      	beq.n	8004696 <HAL_RCC_GetSysClockFreq+0x22>
 8004690:	2b08      	cmp	r3, #8
 8004692:	d00b      	beq.n	80046ac <HAL_RCC_GetSysClockFreq+0x38>
 8004694:	e057      	b.n	8004746 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004696:	4b35      	ldr	r3, [pc, #212]	@ (800476c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2210      	movs	r2, #16
 800469c:	4013      	ands	r3, r2
 800469e:	d002      	beq.n	80046a6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80046a0:	4b33      	ldr	r3, [pc, #204]	@ (8004770 <HAL_RCC_GetSysClockFreq+0xfc>)
 80046a2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80046a4:	e05d      	b.n	8004762 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80046a6:	4b33      	ldr	r3, [pc, #204]	@ (8004774 <HAL_RCC_GetSysClockFreq+0x100>)
 80046a8:	613b      	str	r3, [r7, #16]
      break;
 80046aa:	e05a      	b.n	8004762 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046ac:	4b32      	ldr	r3, [pc, #200]	@ (8004778 <HAL_RCC_GetSysClockFreq+0x104>)
 80046ae:	613b      	str	r3, [r7, #16]
      break;
 80046b0:	e057      	b.n	8004762 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	0c9b      	lsrs	r3, r3, #18
 80046b6:	220f      	movs	r2, #15
 80046b8:	4013      	ands	r3, r2
 80046ba:	4a30      	ldr	r2, [pc, #192]	@ (800477c <HAL_RCC_GetSysClockFreq+0x108>)
 80046bc:	5cd3      	ldrb	r3, [r2, r3]
 80046be:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	0d9b      	lsrs	r3, r3, #22
 80046c4:	2203      	movs	r2, #3
 80046c6:	4013      	ands	r3, r2
 80046c8:	3301      	adds	r3, #1
 80046ca:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046cc:	4b27      	ldr	r3, [pc, #156]	@ (800476c <HAL_RCC_GetSysClockFreq+0xf8>)
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	2380      	movs	r3, #128	@ 0x80
 80046d2:	025b      	lsls	r3, r3, #9
 80046d4:	4013      	ands	r3, r2
 80046d6:	d00f      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	000a      	movs	r2, r1
 80046dc:	0152      	lsls	r2, r2, #5
 80046de:	1a52      	subs	r2, r2, r1
 80046e0:	0193      	lsls	r3, r2, #6
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	185b      	adds	r3, r3, r1
 80046e8:	025b      	lsls	r3, r3, #9
 80046ea:	6879      	ldr	r1, [r7, #4]
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7fb fd1d 	bl	800012c <__udivsi3>
 80046f2:	0003      	movs	r3, r0
 80046f4:	617b      	str	r3, [r7, #20]
 80046f6:	e023      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80046f8:	4b1c      	ldr	r3, [pc, #112]	@ (800476c <HAL_RCC_GetSysClockFreq+0xf8>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2210      	movs	r2, #16
 80046fe:	4013      	ands	r3, r2
 8004700:	d00f      	beq.n	8004722 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8004702:	68b9      	ldr	r1, [r7, #8]
 8004704:	000a      	movs	r2, r1
 8004706:	0152      	lsls	r2, r2, #5
 8004708:	1a52      	subs	r2, r2, r1
 800470a:	0193      	lsls	r3, r2, #6
 800470c:	1a9b      	subs	r3, r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	185b      	adds	r3, r3, r1
 8004712:	021b      	lsls	r3, r3, #8
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	0018      	movs	r0, r3
 8004718:	f7fb fd08 	bl	800012c <__udivsi3>
 800471c:	0003      	movs	r3, r0
 800471e:	617b      	str	r3, [r7, #20]
 8004720:	e00e      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	000a      	movs	r2, r1
 8004726:	0152      	lsls	r2, r2, #5
 8004728:	1a52      	subs	r2, r2, r1
 800472a:	0193      	lsls	r3, r2, #6
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	185b      	adds	r3, r3, r1
 8004732:	029b      	lsls	r3, r3, #10
 8004734:	6879      	ldr	r1, [r7, #4]
 8004736:	0018      	movs	r0, r3
 8004738:	f7fb fcf8 	bl	800012c <__udivsi3>
 800473c:	0003      	movs	r3, r0
 800473e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	613b      	str	r3, [r7, #16]
      break;
 8004744:	e00d      	b.n	8004762 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004746:	4b09      	ldr	r3, [pc, #36]	@ (800476c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	0b5b      	lsrs	r3, r3, #13
 800474c:	2207      	movs	r2, #7
 800474e:	4013      	ands	r3, r2
 8004750:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	3301      	adds	r3, #1
 8004756:	2280      	movs	r2, #128	@ 0x80
 8004758:	0212      	lsls	r2, r2, #8
 800475a:	409a      	lsls	r2, r3
 800475c:	0013      	movs	r3, r2
 800475e:	613b      	str	r3, [r7, #16]
      break;
 8004760:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004762:	693b      	ldr	r3, [r7, #16]
}
 8004764:	0018      	movs	r0, r3
 8004766:	46bd      	mov	sp, r7
 8004768:	b006      	add	sp, #24
 800476a:	bd80      	pop	{r7, pc}
 800476c:	40021000 	.word	0x40021000
 8004770:	003d0900 	.word	0x003d0900
 8004774:	00f42400 	.word	0x00f42400
 8004778:	007a1200 	.word	0x007a1200
 800477c:	08006d64 	.word	0x08006d64

08004780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004784:	4b02      	ldr	r3, [pc, #8]	@ (8004790 <HAL_RCC_GetHCLKFreq+0x10>)
 8004786:	681b      	ldr	r3, [r3, #0]
}
 8004788:	0018      	movs	r0, r3
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	46c0      	nop			@ (mov r8, r8)
 8004790:	20000000 	.word	0x20000000

08004794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004798:	f7ff fff2 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 800479c:	0001      	movs	r1, r0
 800479e:	4b06      	ldr	r3, [pc, #24]	@ (80047b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	2207      	movs	r2, #7
 80047a6:	4013      	ands	r3, r2
 80047a8:	4a04      	ldr	r2, [pc, #16]	@ (80047bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80047aa:	5cd3      	ldrb	r3, [r2, r3]
 80047ac:	40d9      	lsrs	r1, r3
 80047ae:	000b      	movs	r3, r1
}
 80047b0:	0018      	movs	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	46c0      	nop			@ (mov r8, r8)
 80047b8:	40021000 	.word	0x40021000
 80047bc:	08006d5c 	.word	0x08006d5c

080047c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047c4:	f7ff ffdc 	bl	8004780 <HAL_RCC_GetHCLKFreq>
 80047c8:	0001      	movs	r1, r0
 80047ca:	4b06      	ldr	r3, [pc, #24]	@ (80047e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	0adb      	lsrs	r3, r3, #11
 80047d0:	2207      	movs	r2, #7
 80047d2:	4013      	ands	r3, r2
 80047d4:	4a04      	ldr	r2, [pc, #16]	@ (80047e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80047d6:	5cd3      	ldrb	r3, [r2, r3]
 80047d8:	40d9      	lsrs	r1, r3
 80047da:	000b      	movs	r3, r1
}
 80047dc:	0018      	movs	r0, r3
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	40021000 	.word	0x40021000
 80047e8:	08006d5c 	.word	0x08006d5c

080047ec <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80047f4:	2317      	movs	r3, #23
 80047f6:	18fb      	adds	r3, r7, r3
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2220      	movs	r2, #32
 8004802:	4013      	ands	r3, r2
 8004804:	d106      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	2380      	movs	r3, #128	@ 0x80
 800480c:	011b      	lsls	r3, r3, #4
 800480e:	4013      	ands	r3, r2
 8004810:	d100      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004812:	e104      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004814:	4bb9      	ldr	r3, [pc, #740]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004818:	2380      	movs	r3, #128	@ 0x80
 800481a:	055b      	lsls	r3, r3, #21
 800481c:	4013      	ands	r3, r2
 800481e:	d10a      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004820:	4bb6      	ldr	r3, [pc, #728]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004822:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004824:	4bb5      	ldr	r3, [pc, #724]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004826:	2180      	movs	r1, #128	@ 0x80
 8004828:	0549      	lsls	r1, r1, #21
 800482a:	430a      	orrs	r2, r1
 800482c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800482e:	2317      	movs	r3, #23
 8004830:	18fb      	adds	r3, r7, r3
 8004832:	2201      	movs	r2, #1
 8004834:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004836:	4bb2      	ldr	r3, [pc, #712]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	2380      	movs	r3, #128	@ 0x80
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	4013      	ands	r3, r2
 8004840:	d11a      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004842:	4baf      	ldr	r3, [pc, #700]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4bae      	ldr	r3, [pc, #696]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004848:	2180      	movs	r1, #128	@ 0x80
 800484a:	0049      	lsls	r1, r1, #1
 800484c:	430a      	orrs	r2, r1
 800484e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004850:	f7fd f9c0 	bl	8001bd4 <HAL_GetTick>
 8004854:	0003      	movs	r3, r0
 8004856:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004858:	e008      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485a:	f7fd f9bb 	bl	8001bd4 <HAL_GetTick>
 800485e:	0002      	movs	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b64      	cmp	r3, #100	@ 0x64
 8004866:	d901      	bls.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e143      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800486c:	4ba4      	ldr	r3, [pc, #656]	@ (8004b00 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	2380      	movs	r3, #128	@ 0x80
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4013      	ands	r3, r2
 8004876:	d0f0      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004878:	4ba0      	ldr	r3, [pc, #640]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	23c0      	movs	r3, #192	@ 0xc0
 800487e:	039b      	lsls	r3, r3, #14
 8004880:	4013      	ands	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	23c0      	movs	r3, #192	@ 0xc0
 800488a:	039b      	lsls	r3, r3, #14
 800488c:	4013      	ands	r3, r2
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	429a      	cmp	r2, r3
 8004892:	d107      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	23c0      	movs	r3, #192	@ 0xc0
 800489a:	039b      	lsls	r3, r3, #14
 800489c:	4013      	ands	r3, r2
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	429a      	cmp	r2, r3
 80048a2:	d013      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	23c0      	movs	r3, #192	@ 0xc0
 80048aa:	029b      	lsls	r3, r3, #10
 80048ac:	401a      	ands	r2, r3
 80048ae:	23c0      	movs	r3, #192	@ 0xc0
 80048b0:	029b      	lsls	r3, r3, #10
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d10a      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80048b6:	4b91      	ldr	r3, [pc, #580]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	2380      	movs	r3, #128	@ 0x80
 80048bc:	029b      	lsls	r3, r3, #10
 80048be:	401a      	ands	r2, r3
 80048c0:	2380      	movs	r3, #128	@ 0x80
 80048c2:	029b      	lsls	r3, r3, #10
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d101      	bne.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e113      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80048cc:	4b8b      	ldr	r3, [pc, #556]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80048ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80048d0:	23c0      	movs	r3, #192	@ 0xc0
 80048d2:	029b      	lsls	r3, r3, #10
 80048d4:	4013      	ands	r3, r2
 80048d6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d049      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x186>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	23c0      	movs	r3, #192	@ 0xc0
 80048e4:	029b      	lsls	r3, r3, #10
 80048e6:	4013      	ands	r3, r2
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d004      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2220      	movs	r2, #32
 80048f4:	4013      	ands	r3, r2
 80048f6:	d10d      	bne.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	23c0      	movs	r3, #192	@ 0xc0
 80048fe:	029b      	lsls	r3, r3, #10
 8004900:	4013      	ands	r3, r2
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	429a      	cmp	r2, r3
 8004906:	d034      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	2380      	movs	r3, #128	@ 0x80
 800490e:	011b      	lsls	r3, r3, #4
 8004910:	4013      	ands	r3, r2
 8004912:	d02e      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004914:	4b79      	ldr	r3, [pc, #484]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004918:	4a7a      	ldr	r2, [pc, #488]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800491a:	4013      	ands	r3, r2
 800491c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800491e:	4b77      	ldr	r3, [pc, #476]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004920:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004922:	4b76      	ldr	r3, [pc, #472]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004924:	2180      	movs	r1, #128	@ 0x80
 8004926:	0309      	lsls	r1, r1, #12
 8004928:	430a      	orrs	r2, r1
 800492a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800492c:	4b73      	ldr	r3, [pc, #460]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800492e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004930:	4b72      	ldr	r3, [pc, #456]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004932:	4975      	ldr	r1, [pc, #468]	@ (8004b08 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004934:	400a      	ands	r2, r1
 8004936:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004938:	4b70      	ldr	r3, [pc, #448]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	2380      	movs	r3, #128	@ 0x80
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	4013      	ands	r3, r2
 8004946:	d014      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004948:	f7fd f944 	bl	8001bd4 <HAL_GetTick>
 800494c:	0003      	movs	r3, r0
 800494e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004950:	e009      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004952:	f7fd f93f 	bl	8001bd4 <HAL_GetTick>
 8004956:	0002      	movs	r2, r0
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	4a6b      	ldr	r2, [pc, #428]	@ (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d901      	bls.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e0c6      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004966:	4b65      	ldr	r3, [pc, #404]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004968:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800496a:	2380      	movs	r3, #128	@ 0x80
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4013      	ands	r3, r2
 8004970:	d0ef      	beq.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	2380      	movs	r3, #128	@ 0x80
 8004978:	011b      	lsls	r3, r3, #4
 800497a:	4013      	ands	r3, r2
 800497c:	d01f      	beq.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	23c0      	movs	r3, #192	@ 0xc0
 8004984:	029b      	lsls	r3, r3, #10
 8004986:	401a      	ands	r2, r3
 8004988:	23c0      	movs	r3, #192	@ 0xc0
 800498a:	029b      	lsls	r3, r3, #10
 800498c:	429a      	cmp	r2, r3
 800498e:	d10c      	bne.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004990:	4b5a      	ldr	r3, [pc, #360]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a5e      	ldr	r2, [pc, #376]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004996:	4013      	ands	r3, r2
 8004998:	0019      	movs	r1, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	23c0      	movs	r3, #192	@ 0xc0
 80049a0:	039b      	lsls	r3, r3, #14
 80049a2:	401a      	ands	r2, r3
 80049a4:	4b55      	ldr	r3, [pc, #340]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049a6:	430a      	orrs	r2, r1
 80049a8:	601a      	str	r2, [r3, #0]
 80049aa:	4b54      	ldr	r3, [pc, #336]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049ac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	23c0      	movs	r3, #192	@ 0xc0
 80049b4:	029b      	lsls	r3, r3, #10
 80049b6:	401a      	ands	r2, r3
 80049b8:	4b50      	ldr	r3, [pc, #320]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049ba:	430a      	orrs	r2, r1
 80049bc:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2220      	movs	r2, #32
 80049c4:	4013      	ands	r3, r2
 80049c6:	d01f      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685a      	ldr	r2, [r3, #4]
 80049cc:	23c0      	movs	r3, #192	@ 0xc0
 80049ce:	029b      	lsls	r3, r3, #10
 80049d0:	401a      	ands	r2, r3
 80049d2:	23c0      	movs	r3, #192	@ 0xc0
 80049d4:	029b      	lsls	r3, r3, #10
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d10c      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80049da:	4b48      	ldr	r3, [pc, #288]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a4c      	ldr	r2, [pc, #304]	@ (8004b10 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80049e0:	4013      	ands	r3, r2
 80049e2:	0019      	movs	r1, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685a      	ldr	r2, [r3, #4]
 80049e8:	23c0      	movs	r3, #192	@ 0xc0
 80049ea:	039b      	lsls	r3, r3, #14
 80049ec:	401a      	ands	r2, r3
 80049ee:	4b43      	ldr	r3, [pc, #268]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049f0:	430a      	orrs	r2, r1
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	4b41      	ldr	r3, [pc, #260]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049f6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	23c0      	movs	r3, #192	@ 0xc0
 80049fe:	029b      	lsls	r3, r3, #10
 8004a00:	401a      	ands	r2, r3
 8004a02:	4b3e      	ldr	r3, [pc, #248]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a04:	430a      	orrs	r2, r1
 8004a06:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a08:	2317      	movs	r3, #23
 8004a0a:	18fb      	adds	r3, r7, r3
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d105      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a12:	4b3a      	ldr	r3, [pc, #232]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a16:	4b39      	ldr	r3, [pc, #228]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a18:	493e      	ldr	r1, [pc, #248]	@ (8004b14 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004a1a:	400a      	ands	r2, r1
 8004a1c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2201      	movs	r2, #1
 8004a24:	4013      	ands	r3, r2
 8004a26:	d009      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a28:	4b34      	ldr	r3, [pc, #208]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a2c:	2203      	movs	r2, #3
 8004a2e:	4393      	bics	r3, r2
 8004a30:	0019      	movs	r1, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	4b31      	ldr	r3, [pc, #196]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2202      	movs	r2, #2
 8004a42:	4013      	ands	r3, r2
 8004a44:	d009      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a46:	4b2d      	ldr	r3, [pc, #180]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a4a:	220c      	movs	r2, #12
 8004a4c:	4393      	bics	r3, r2
 8004a4e:	0019      	movs	r1, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	4b29      	ldr	r3, [pc, #164]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a56:	430a      	orrs	r2, r1
 8004a58:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2204      	movs	r2, #4
 8004a60:	4013      	ands	r3, r2
 8004a62:	d009      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a64:	4b25      	ldr	r3, [pc, #148]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a68:	4a2b      	ldr	r2, [pc, #172]	@ (8004b18 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	695a      	ldr	r2, [r3, #20]
 8004a72:	4b22      	ldr	r3, [pc, #136]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a74:	430a      	orrs	r2, r1
 8004a76:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	4013      	ands	r3, r2
 8004a80:	d009      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a82:	4b1e      	ldr	r3, [pc, #120]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a86:	4a25      	ldr	r2, [pc, #148]	@ (8004b1c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004a88:	4013      	ands	r3, r2
 8004a8a:	0019      	movs	r1, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699a      	ldr	r2, [r3, #24]
 8004a90:	4b1a      	ldr	r3, [pc, #104]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a92:	430a      	orrs	r2, r1
 8004a94:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	2380      	movs	r3, #128	@ 0x80
 8004a9c:	005b      	lsls	r3, r3, #1
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	d009      	beq.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004aa2:	4b16      	ldr	r3, [pc, #88]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa6:	4a17      	ldr	r2, [pc, #92]	@ (8004b04 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	0019      	movs	r1, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	4b12      	ldr	r3, [pc, #72]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2240      	movs	r2, #64	@ 0x40
 8004abc:	4013      	ands	r3, r2
 8004abe:	d009      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ac4:	4a16      	ldr	r2, [pc, #88]	@ (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	0019      	movs	r1, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ace:	4b0b      	ldr	r3, [pc, #44]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2280      	movs	r2, #128	@ 0x80
 8004ada:	4013      	ands	r3, r2
 8004adc:	d009      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004ade:	4b07      	ldr	r3, [pc, #28]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ae2:	4a10      	ldr	r2, [pc, #64]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	0019      	movs	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1a      	ldr	r2, [r3, #32]
 8004aec:	4b03      	ldr	r3, [pc, #12]	@ (8004afc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004aee:	430a      	orrs	r2, r1
 8004af0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	0018      	movs	r0, r3
 8004af6:	46bd      	mov	sp, r7
 8004af8:	b006      	add	sp, #24
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	40021000 	.word	0x40021000
 8004b00:	40007000 	.word	0x40007000
 8004b04:	fffcffff 	.word	0xfffcffff
 8004b08:	fff7ffff 	.word	0xfff7ffff
 8004b0c:	00001388 	.word	0x00001388
 8004b10:	ffcfffff 	.word	0xffcfffff
 8004b14:	efffffff 	.word	0xefffffff
 8004b18:	fffff3ff 	.word	0xfffff3ff
 8004b1c:	ffffcfff 	.word	0xffffcfff
 8004b20:	fbffffff 	.word	0xfbffffff
 8004b24:	fff3ffff 	.word	0xfff3ffff

08004b28 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004b28:	b5b0      	push	{r4, r5, r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004b30:	230f      	movs	r3, #15
 8004b32:	18fb      	adds	r3, r7, r3
 8004b34:	2201      	movs	r2, #1
 8004b36:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e088      	b.n	8004c54 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2221      	movs	r2, #33	@ 0x21
 8004b46:	5c9b      	ldrb	r3, [r3, r2]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d107      	bne.n	8004b5e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2220      	movs	r2, #32
 8004b52:	2100      	movs	r1, #0
 8004b54:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f7fc fc1f 	bl	800139c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2221      	movs	r2, #33	@ 0x21
 8004b62:	2102      	movs	r1, #2
 8004b64:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	2210      	movs	r2, #16
 8004b6e:	4013      	ands	r3, r2
 8004b70:	2b10      	cmp	r3, #16
 8004b72:	d05f      	beq.n	8004c34 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	22ca      	movs	r2, #202	@ 0xca
 8004b7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2253      	movs	r2, #83	@ 0x53
 8004b82:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004b84:	250f      	movs	r5, #15
 8004b86:	197c      	adds	r4, r7, r5
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f000 f93e 	bl	8004e0c <RTC_EnterInitMode>
 8004b90:	0003      	movs	r3, r0
 8004b92:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8004b94:	0028      	movs	r0, r5
 8004b96:	183b      	adds	r3, r7, r0
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d12c      	bne.n	8004bf8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	492c      	ldr	r1, [pc, #176]	@ (8004c5c <HAL_RTC_Init+0x134>)
 8004baa:	400a      	ands	r2, r1
 8004bac:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	6899      	ldr	r1, [r3, #8]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	68d2      	ldr	r2, [r2, #12]
 8004bd4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6919      	ldr	r1, [r3, #16]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	041a      	lsls	r2, r3, #16
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004bea:	183c      	adds	r4, r7, r0
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f000 f950 	bl	8004e94 <RTC_ExitInitMode>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004bf8:	230f      	movs	r3, #15
 8004bfa:	18fb      	adds	r3, r7, r3
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d113      	bne.n	8004c2a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2103      	movs	r1, #3
 8004c0e:	438a      	bics	r2, r1
 8004c10:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	22ff      	movs	r2, #255	@ 0xff
 8004c30:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c32:	e003      	b.n	8004c3c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004c34:	230f      	movs	r3, #15
 8004c36:	18fb      	adds	r3, r7, r3
 8004c38:	2200      	movs	r2, #0
 8004c3a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004c3c:	230f      	movs	r3, #15
 8004c3e:	18fb      	adds	r3, r7, r3
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2221      	movs	r2, #33	@ 0x21
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004c4e:	230f      	movs	r3, #15
 8004c50:	18fb      	adds	r3, r7, r3
 8004c52:	781b      	ldrb	r3, [r3, #0]
}
 8004c54:	0018      	movs	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	b004      	add	sp, #16
 8004c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8004c5c:	ff8fffbf 	.word	0xff8fffbf

08004c60 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	045b      	lsls	r3, r3, #17
 8004c82:	0c5a      	lsrs	r2, r3, #17
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a22      	ldr	r2, [pc, #136]	@ (8004d18 <HAL_RTC_GetTime+0xb8>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	0c1b      	lsrs	r3, r3, #16
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	223f      	movs	r2, #63	@ 0x3f
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	b2da      	uxtb	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	0a1b      	lsrs	r3, r3, #8
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	227f      	movs	r2, #127	@ 0x7f
 8004cac:	4013      	ands	r3, r2
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	227f      	movs	r2, #127	@ 0x7f
 8004cba:	4013      	ands	r3, r2
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	0d9b      	lsrs	r3, r3, #22
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2201      	movs	r2, #1
 8004cca:	4013      	ands	r3, r2
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d11a      	bne.n	8004d0e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f000 f903 	bl	8004ee8 <RTC_Bcd2ToByte>
 8004ce2:	0003      	movs	r3, r0
 8004ce4:	001a      	movs	r2, r3
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	785b      	ldrb	r3, [r3, #1]
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f000 f8fa 	bl	8004ee8 <RTC_Bcd2ToByte>
 8004cf4:	0003      	movs	r3, r0
 8004cf6:	001a      	movs	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	789b      	ldrb	r3, [r3, #2]
 8004d00:	0018      	movs	r0, r3
 8004d02:	f000 f8f1 	bl	8004ee8 <RTC_Bcd2ToByte>
 8004d06:	0003      	movs	r3, r0
 8004d08:	001a      	movs	r2, r3
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	0018      	movs	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b006      	add	sp, #24
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	007f7f7f 	.word	0x007f7f7f

08004d1c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	4a21      	ldr	r2, [pc, #132]	@ (8004db8 <HAL_RTC_GetDate+0x9c>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	0c1b      	lsrs	r3, r3, #16
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	0a1b      	lsrs	r3, r3, #8
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	221f      	movs	r2, #31
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	b2da      	uxtb	r2, r3
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	223f      	movs	r2, #63	@ 0x3f
 8004d58:	4013      	ands	r3, r2
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	0b5b      	lsrs	r3, r3, #13
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2207      	movs	r2, #7
 8004d68:	4013      	ands	r3, r2
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d11a      	bne.n	8004dac <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	78db      	ldrb	r3, [r3, #3]
 8004d7a:	0018      	movs	r0, r3
 8004d7c:	f000 f8b4 	bl	8004ee8 <RTC_Bcd2ToByte>
 8004d80:	0003      	movs	r3, r0
 8004d82:	001a      	movs	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	785b      	ldrb	r3, [r3, #1]
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	f000 f8ab 	bl	8004ee8 <RTC_Bcd2ToByte>
 8004d92:	0003      	movs	r3, r0
 8004d94:	001a      	movs	r2, r3
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	789b      	ldrb	r3, [r3, #2]
 8004d9e:	0018      	movs	r0, r3
 8004da0:	f000 f8a2 	bl	8004ee8 <RTC_Bcd2ToByte>
 8004da4:	0003      	movs	r3, r0
 8004da6:	001a      	movs	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	0018      	movs	r0, r3
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b006      	add	sp, #24
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	46c0      	nop			@ (mov r8, r8)
 8004db8:	00ffff3f 	.word	0x00ffff3f

08004dbc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a0e      	ldr	r2, [pc, #56]	@ (8004e08 <HAL_RTC_WaitForSynchro+0x4c>)
 8004dce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dd0:	f7fc ff00 	bl	8001bd4 <HAL_GetTick>
 8004dd4:	0003      	movs	r3, r0
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004dda:	f7fc fefb 	bl	8001bd4 <HAL_GetTick>
 8004dde:	0002      	movs	r2, r0
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1ad2      	subs	r2, r2, r3
 8004de4:	23fa      	movs	r3, #250	@ 0xfa
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d901      	bls.n	8004df0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e006      	b.n	8004dfe <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	4013      	ands	r3, r2
 8004dfa:	d0ee      	beq.n	8004dda <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	0018      	movs	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	b004      	add	sp, #16
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			@ (mov r8, r8)
 8004e08:	0001ff5f 	.word	0x0001ff5f

08004e0c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e18:	230f      	movs	r3, #15
 8004e1a:	18fb      	adds	r3, r7, r3
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2240      	movs	r2, #64	@ 0x40
 8004e28:	4013      	ands	r3, r2
 8004e2a:	d12c      	bne.n	8004e86 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68da      	ldr	r2, [r3, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2180      	movs	r1, #128	@ 0x80
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e3c:	f7fc feca 	bl	8001bd4 <HAL_GetTick>
 8004e40:	0003      	movs	r3, r0
 8004e42:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004e44:	e014      	b.n	8004e70 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e46:	f7fc fec5 	bl	8001bd4 <HAL_GetTick>
 8004e4a:	0002      	movs	r2, r0
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	1ad2      	subs	r2, r2, r3
 8004e50:	200f      	movs	r0, #15
 8004e52:	183b      	adds	r3, r7, r0
 8004e54:	1839      	adds	r1, r7, r0
 8004e56:	7809      	ldrb	r1, [r1, #0]
 8004e58:	7019      	strb	r1, [r3, #0]
 8004e5a:	23fa      	movs	r3, #250	@ 0xfa
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d906      	bls.n	8004e70 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2221      	movs	r2, #33	@ 0x21
 8004e66:	2104      	movs	r1, #4
 8004e68:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8004e6a:	183b      	adds	r3, r7, r0
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	2240      	movs	r2, #64	@ 0x40
 8004e78:	4013      	ands	r3, r2
 8004e7a:	d104      	bne.n	8004e86 <RTC_EnterInitMode+0x7a>
 8004e7c:	230f      	movs	r3, #15
 8004e7e:	18fb      	adds	r3, r7, r3
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d1df      	bne.n	8004e46 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004e86:	230f      	movs	r3, #15
 8004e88:	18fb      	adds	r3, r7, r3
 8004e8a:	781b      	ldrb	r3, [r3, #0]
}
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	b004      	add	sp, #16
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e94:	b590      	push	{r4, r7, lr}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e9c:	240f      	movs	r4, #15
 8004e9e:	193b      	adds	r3, r7, r4
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68da      	ldr	r2, [r3, #12]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2180      	movs	r1, #128	@ 0x80
 8004eb0:	438a      	bics	r2, r1
 8004eb2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d10c      	bne.n	8004eda <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	f7ff ff7a 	bl	8004dbc <HAL_RTC_WaitForSynchro>
 8004ec8:	1e03      	subs	r3, r0, #0
 8004eca:	d006      	beq.n	8004eda <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2221      	movs	r2, #33	@ 0x21
 8004ed0:	2104      	movs	r1, #4
 8004ed2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004ed4:	193b      	adds	r3, r7, r4
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004eda:	230f      	movs	r3, #15
 8004edc:	18fb      	adds	r3, r7, r3
 8004ede:	781b      	ldrb	r3, [r3, #0]
}
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b005      	add	sp, #20
 8004ee6:	bd90      	pop	{r4, r7, pc}

08004ee8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	0002      	movs	r2, r0
 8004ef0:	1dfb      	adds	r3, r7, #7
 8004ef2:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004ef8:	1dfb      	adds	r3, r7, #7
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	091b      	lsrs	r3, r3, #4
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	001a      	movs	r2, r3
 8004f02:	0013      	movs	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	189b      	adds	r3, r3, r2
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	1dfb      	adds	r3, r7, #7
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	210f      	movs	r1, #15
 8004f16:	400b      	ands	r3, r1
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	18d3      	adds	r3, r2, r3
 8004f1c:	b2db      	uxtb	r3, r3
}
 8004f1e:	0018      	movs	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	b004      	add	sp, #16
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004f34:	4b64      	ldr	r3, [pc, #400]	@ (80050c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	22fa      	movs	r2, #250	@ 0xfa
 8004f3a:	01d1      	lsls	r1, r2, #7
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f7fb f8f5 	bl	800012c <__udivsi3>
 8004f42:	0003      	movs	r3, r0
 8004f44:	001a      	movs	r2, r3
 8004f46:	0013      	movs	r3, r2
 8004f48:	015b      	lsls	r3, r3, #5
 8004f4a:	1a9b      	subs	r3, r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	189b      	adds	r3, r3, r2
 8004f50:	00db      	lsls	r3, r3, #3
 8004f52:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2220      	movs	r2, #32
 8004f58:	5c9b      	ldrb	r3, [r3, r2]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e0ad      	b.n	80050be <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2220      	movs	r2, #32
 8004f66:	2101      	movs	r1, #1
 8004f68:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2221      	movs	r2, #33	@ 0x21
 8004f6e:	2102      	movs	r1, #2
 8004f70:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	22ca      	movs	r2, #202	@ 0xca
 8004f78:	625a      	str	r2, [r3, #36]	@ 0x24
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2253      	movs	r2, #83	@ 0x53
 8004f80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	2380      	movs	r3, #128	@ 0x80
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d019      	beq.n	8004fc4 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10d      	bne.n	8004fb8 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	22ff      	movs	r2, #255	@ 0xff
 8004fa2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2221      	movs	r2, #33	@ 0x21
 8004fa8:	2103      	movs	r1, #3
 8004faa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e082      	b.n	80050be <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d1e5      	bne.n	8004f90 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	493f      	ldr	r1, [pc, #252]	@ (80050cc <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8004fd0:	400a      	ands	r2, r1
 8004fd2:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	22ff      	movs	r2, #255	@ 0xff
 8004fdc:	401a      	ands	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	493b      	ldr	r1, [pc, #236]	@ (80050d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004fe8:	4b37      	ldr	r3, [pc, #220]	@ (80050c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	22fa      	movs	r2, #250	@ 0xfa
 8004fee:	01d1      	lsls	r1, r2, #7
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f7fb f89b 	bl	800012c <__udivsi3>
 8004ff6:	0003      	movs	r3, r0
 8004ff8:	001a      	movs	r2, r3
 8004ffa:	0013      	movs	r3, r2
 8004ffc:	015b      	lsls	r3, r3, #5
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	189b      	adds	r3, r3, r2
 8005004:	00db      	lsls	r3, r3, #3
 8005006:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	3b01      	subs	r3, #1
 800500c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10d      	bne.n	8005030 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	22ff      	movs	r2, #255	@ 0xff
 800501a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2221      	movs	r2, #33	@ 0x21
 8005020:	2103      	movs	r1, #3
 8005022:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	2100      	movs	r1, #0
 800502a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800502c:	2303      	movs	r3, #3
 800502e:	e046      	b.n	80050be <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	2204      	movs	r2, #4
 8005038:	4013      	ands	r3, r2
 800503a:	d0e5      	beq.n	8005008 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2107      	movs	r1, #7
 8005048:	438a      	bics	r2, r1
 800504a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6899      	ldr	r1, [r3, #8]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	430a      	orrs	r2, r1
 800505a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8005064:	4b1b      	ldr	r3, [pc, #108]	@ (80050d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	4b1a      	ldr	r3, [pc, #104]	@ (80050d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800506a:	2180      	movs	r1, #128	@ 0x80
 800506c:	0349      	lsls	r1, r1, #13
 800506e:	430a      	orrs	r2, r1
 8005070:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8005072:	4b18      	ldr	r3, [pc, #96]	@ (80050d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	4b17      	ldr	r3, [pc, #92]	@ (80050d4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8005078:	2180      	movs	r1, #128	@ 0x80
 800507a:	0349      	lsls	r1, r1, #13
 800507c:	430a      	orrs	r2, r1
 800507e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689a      	ldr	r2, [r3, #8]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2180      	movs	r1, #128	@ 0x80
 800508c:	01c9      	lsls	r1, r1, #7
 800508e:	430a      	orrs	r2, r1
 8005090:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2180      	movs	r1, #128	@ 0x80
 800509e:	00c9      	lsls	r1, r1, #3
 80050a0:	430a      	orrs	r2, r1
 80050a2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	22ff      	movs	r2, #255	@ 0xff
 80050aa:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2221      	movs	r2, #33	@ 0x21
 80050b0:	2101      	movs	r1, #1
 80050b2:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2220      	movs	r2, #32
 80050b8:	2100      	movs	r1, #0
 80050ba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	0018      	movs	r0, r3
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b006      	add	sp, #24
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	46c0      	nop			@ (mov r8, r8)
 80050c8:	20000000 	.word	0x20000000
 80050cc:	fffffbff 	.word	0xfffffbff
 80050d0:	fffffb7f 	.word	0xfffffb7f
 80050d4:	40010400 	.word	0x40010400

080050d8 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2220      	movs	r2, #32
 80050e8:	5c9b      	ldrb	r3, [r3, r2]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d101      	bne.n	80050f2 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 80050ee:	2302      	movs	r3, #2
 80050f0:	e04e      	b.n	8005190 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2220      	movs	r2, #32
 80050f6:	2101      	movs	r1, #1
 80050f8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2221      	movs	r2, #33	@ 0x21
 80050fe:	2102      	movs	r1, #2
 8005100:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	22ca      	movs	r2, #202	@ 0xca
 8005108:	625a      	str	r2, [r3, #36]	@ 0x24
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2253      	movs	r2, #83	@ 0x53
 8005110:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	491e      	ldr	r1, [pc, #120]	@ (8005198 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 800511e:	400a      	ands	r2, r1
 8005120:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	689a      	ldr	r2, [r3, #8]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	491b      	ldr	r1, [pc, #108]	@ (800519c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 800512e:	400a      	ands	r2, r1
 8005130:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005132:	f7fc fd4f 	bl	8001bd4 <HAL_GetTick>
 8005136:	0003      	movs	r3, r0
 8005138:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800513a:	e016      	b.n	800516a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800513c:	f7fc fd4a 	bl	8001bd4 <HAL_GetTick>
 8005140:	0002      	movs	r2, r0
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1ad2      	subs	r2, r2, r3
 8005146:	23fa      	movs	r3, #250	@ 0xfa
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	429a      	cmp	r2, r3
 800514c:	d90d      	bls.n	800516a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	22ff      	movs	r2, #255	@ 0xff
 8005154:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2221      	movs	r2, #33	@ 0x21
 800515a:	2103      	movs	r1, #3
 800515c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2220      	movs	r2, #32
 8005162:	2100      	movs	r1, #0
 8005164:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e012      	b.n	8005190 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2204      	movs	r2, #4
 8005172:	4013      	ands	r3, r2
 8005174:	d0e2      	beq.n	800513c <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	22ff      	movs	r2, #255	@ 0xff
 800517c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2221      	movs	r2, #33	@ 0x21
 8005182:	2101      	movs	r1, #1
 8005184:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2220      	movs	r2, #32
 800518a:	2100      	movs	r1, #0
 800518c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	0018      	movs	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	b004      	add	sp, #16
 8005196:	bd80      	pop	{r7, pc}
 8005198:	fffffbff 	.word	0xfffffbff
 800519c:	ffffbfff 	.word	0xffffbfff

080051a0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80051a8:	4b13      	ldr	r3, [pc, #76]	@ (80051f8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80051aa:	2280      	movs	r2, #128	@ 0x80
 80051ac:	0352      	lsls	r2, r2, #13
 80051ae:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	689a      	ldr	r2, [r3, #8]
 80051b6:	2380      	movs	r3, #128	@ 0x80
 80051b8:	01db      	lsls	r3, r3, #7
 80051ba:	4013      	ands	r3, r2
 80051bc:	d014      	beq.n	80051e8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68da      	ldr	r2, [r3, #12]
 80051c4:	2380      	movs	r3, #128	@ 0x80
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4013      	ands	r3, r2
 80051ca:	d00d      	beq.n	80051e8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	22ff      	movs	r2, #255	@ 0xff
 80051d4:	401a      	ands	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4908      	ldr	r1, [pc, #32]	@ (80051fc <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 80051dc:	430a      	orrs	r2, r1
 80051de:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	0018      	movs	r0, r3
 80051e4:	f7fb fb28 	bl	8000838 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2221      	movs	r2, #33	@ 0x21
 80051ec:	2101      	movs	r1, #1
 80051ee:	5499      	strb	r1, [r3, r2]
}
 80051f0:	46c0      	nop			@ (mov r8, r8)
 80051f2:	46bd      	mov	sp, r7
 80051f4:	b002      	add	sp, #8
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40010400 	.word	0x40010400
 80051fc:	fffffb7f 	.word	0xfffffb7f

08005200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e044      	b.n	800529c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005216:	2b00      	cmp	r3, #0
 8005218:	d107      	bne.n	800522a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2278      	movs	r2, #120	@ 0x78
 800521e:	2100      	movs	r1, #0
 8005220:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	0018      	movs	r0, r3
 8005226:	f7fc f80b 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2224      	movs	r2, #36	@ 0x24
 800522e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2101      	movs	r1, #1
 800523c:	438a      	bics	r2, r1
 800523e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	0018      	movs	r0, r3
 800524c:	f000 fba8 	bl	80059a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	0018      	movs	r0, r3
 8005254:	f000 f906 	bl	8005464 <UART_SetConfig>
 8005258:	0003      	movs	r3, r0
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e01c      	b.n	800529c <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	490d      	ldr	r1, [pc, #52]	@ (80052a4 <HAL_UART_Init+0xa4>)
 800526e:	400a      	ands	r2, r1
 8005270:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	212a      	movs	r1, #42	@ 0x2a
 800527e:	438a      	bics	r2, r1
 8005280:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2101      	movs	r1, #1
 800528e:	430a      	orrs	r2, r1
 8005290:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	0018      	movs	r0, r3
 8005296:	f000 fc37 	bl	8005b08 <UART_CheckIdleState>
 800529a:	0003      	movs	r3, r0
}
 800529c:	0018      	movs	r0, r3
 800529e:	46bd      	mov	sp, r7
 80052a0:	b002      	add	sp, #8
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	ffffb7ff 	.word	0xffffb7ff

080052a8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e030      	b.n	800531c <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2224      	movs	r2, #36	@ 0x24
 80052be:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2101      	movs	r1, #1
 80052cc:	438a      	bics	r2, r1
 80052ce:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2200      	movs	r2, #0
 80052de:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2200      	movs	r2, #0
 80052e6:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	0018      	movs	r0, r3
 80052ec:	f7fc f81e 	bl	800132c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2284      	movs	r2, #132	@ 0x84
 80052f4:	2100      	movs	r1, #0
 80052f6:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2280      	movs	r2, #128	@ 0x80
 8005302:	2100      	movs	r1, #0
 8005304:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2278      	movs	r2, #120	@ 0x78
 8005316:	2100      	movs	r1, #0
 8005318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	0018      	movs	r0, r3
 800531e:	46bd      	mov	sp, r7
 8005320:	b002      	add	sp, #8
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08a      	sub	sp, #40	@ 0x28
 8005328:	af02      	add	r7, sp, #8
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	603b      	str	r3, [r7, #0]
 8005330:	1dbb      	adds	r3, r7, #6
 8005332:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005338:	2b20      	cmp	r3, #32
 800533a:	d000      	beq.n	800533e <HAL_UART_Transmit+0x1a>
 800533c:	e08c      	b.n	8005458 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d003      	beq.n	800534c <HAL_UART_Transmit+0x28>
 8005344:	1dbb      	adds	r3, r7, #6
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e084      	b.n	800545a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	2380      	movs	r3, #128	@ 0x80
 8005356:	015b      	lsls	r3, r3, #5
 8005358:	429a      	cmp	r2, r3
 800535a:	d109      	bne.n	8005370 <HAL_UART_Transmit+0x4c>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d105      	bne.n	8005370 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2201      	movs	r2, #1
 8005368:	4013      	ands	r3, r2
 800536a:	d001      	beq.n	8005370 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e074      	b.n	800545a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2284      	movs	r2, #132	@ 0x84
 8005374:	2100      	movs	r1, #0
 8005376:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2221      	movs	r2, #33	@ 0x21
 800537c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800537e:	f7fc fc29 	bl	8001bd4 <HAL_GetTick>
 8005382:	0003      	movs	r3, r0
 8005384:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	1dba      	adds	r2, r7, #6
 800538a:	2150      	movs	r1, #80	@ 0x50
 800538c:	8812      	ldrh	r2, [r2, #0]
 800538e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	1dba      	adds	r2, r7, #6
 8005394:	2152      	movs	r1, #82	@ 0x52
 8005396:	8812      	ldrh	r2, [r2, #0]
 8005398:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	689a      	ldr	r2, [r3, #8]
 800539e:	2380      	movs	r3, #128	@ 0x80
 80053a0:	015b      	lsls	r3, r3, #5
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d108      	bne.n	80053b8 <HAL_UART_Transmit+0x94>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d104      	bne.n	80053b8 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	e003      	b.n	80053c0 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053bc:	2300      	movs	r3, #0
 80053be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053c0:	e02f      	b.n	8005422 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	0013      	movs	r3, r2
 80053cc:	2200      	movs	r2, #0
 80053ce:	2180      	movs	r1, #128	@ 0x80
 80053d0:	f000 fc42 	bl	8005c58 <UART_WaitOnFlagUntilTimeout>
 80053d4:	1e03      	subs	r3, r0, #0
 80053d6:	d004      	beq.n	80053e2 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2220      	movs	r2, #32
 80053dc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e03b      	b.n	800545a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10b      	bne.n	8005400 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	881b      	ldrh	r3, [r3, #0]
 80053ec:	001a      	movs	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	05d2      	lsls	r2, r2, #23
 80053f4:	0dd2      	lsrs	r2, r2, #23
 80053f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	3302      	adds	r3, #2
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	e007      	b.n	8005410 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	781a      	ldrb	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	3301      	adds	r3, #1
 800540e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2252      	movs	r2, #82	@ 0x52
 8005414:	5a9b      	ldrh	r3, [r3, r2]
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b299      	uxth	r1, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2252      	movs	r2, #82	@ 0x52
 8005420:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2252      	movs	r2, #82	@ 0x52
 8005426:	5a9b      	ldrh	r3, [r3, r2]
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d1c9      	bne.n	80053c2 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	0013      	movs	r3, r2
 8005438:	2200      	movs	r2, #0
 800543a:	2140      	movs	r1, #64	@ 0x40
 800543c:	f000 fc0c 	bl	8005c58 <UART_WaitOnFlagUntilTimeout>
 8005440:	1e03      	subs	r3, r0, #0
 8005442:	d004      	beq.n	800544e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e005      	b.n	800545a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2220      	movs	r2, #32
 8005452:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	e000      	b.n	800545a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005458:	2302      	movs	r3, #2
  }
}
 800545a:	0018      	movs	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	b008      	add	sp, #32
 8005460:	bd80      	pop	{r7, pc}
	...

08005464 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005464:	b5b0      	push	{r4, r5, r7, lr}
 8005466:	b08e      	sub	sp, #56	@ 0x38
 8005468:	af00      	add	r7, sp, #0
 800546a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800546c:	231a      	movs	r3, #26
 800546e:	2218      	movs	r2, #24
 8005470:	189b      	adds	r3, r3, r2
 8005472:	19db      	adds	r3, r3, r7
 8005474:	2200      	movs	r2, #0
 8005476:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	689a      	ldr	r2, [r3, #8]
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	431a      	orrs	r2, r3
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	431a      	orrs	r2, r3
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	4313      	orrs	r3, r2
 800548e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4ac3      	ldr	r2, [pc, #780]	@ (80057a4 <UART_SetConfig+0x340>)
 8005498:	4013      	ands	r3, r2
 800549a:	0019      	movs	r1, r3
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054a2:	430a      	orrs	r2, r1
 80054a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	4abe      	ldr	r2, [pc, #760]	@ (80057a8 <UART_SetConfig+0x344>)
 80054ae:	4013      	ands	r3, r2
 80054b0:	0019      	movs	r1, r3
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	68da      	ldr	r2, [r3, #12]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	699b      	ldr	r3, [r3, #24]
 80054c2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4ab8      	ldr	r2, [pc, #736]	@ (80057ac <UART_SetConfig+0x348>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d004      	beq.n	80054d8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054d4:	4313      	orrs	r3, r2
 80054d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	4ab4      	ldr	r2, [pc, #720]	@ (80057b0 <UART_SetConfig+0x34c>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	0019      	movs	r1, r3
 80054e4:	69fb      	ldr	r3, [r7, #28]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054ea:	430a      	orrs	r2, r1
 80054ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4ab0      	ldr	r2, [pc, #704]	@ (80057b4 <UART_SetConfig+0x350>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d131      	bne.n	800555c <UART_SetConfig+0xf8>
 80054f8:	4baf      	ldr	r3, [pc, #700]	@ (80057b8 <UART_SetConfig+0x354>)
 80054fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054fc:	2203      	movs	r2, #3
 80054fe:	4013      	ands	r3, r2
 8005500:	2b03      	cmp	r3, #3
 8005502:	d01d      	beq.n	8005540 <UART_SetConfig+0xdc>
 8005504:	d823      	bhi.n	800554e <UART_SetConfig+0xea>
 8005506:	2b02      	cmp	r3, #2
 8005508:	d00c      	beq.n	8005524 <UART_SetConfig+0xc0>
 800550a:	d820      	bhi.n	800554e <UART_SetConfig+0xea>
 800550c:	2b00      	cmp	r3, #0
 800550e:	d002      	beq.n	8005516 <UART_SetConfig+0xb2>
 8005510:	2b01      	cmp	r3, #1
 8005512:	d00e      	beq.n	8005532 <UART_SetConfig+0xce>
 8005514:	e01b      	b.n	800554e <UART_SetConfig+0xea>
 8005516:	231b      	movs	r3, #27
 8005518:	2218      	movs	r2, #24
 800551a:	189b      	adds	r3, r3, r2
 800551c:	19db      	adds	r3, r3, r7
 800551e:	2201      	movs	r2, #1
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	e0b4      	b.n	800568e <UART_SetConfig+0x22a>
 8005524:	231b      	movs	r3, #27
 8005526:	2218      	movs	r2, #24
 8005528:	189b      	adds	r3, r3, r2
 800552a:	19db      	adds	r3, r3, r7
 800552c:	2202      	movs	r2, #2
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	e0ad      	b.n	800568e <UART_SetConfig+0x22a>
 8005532:	231b      	movs	r3, #27
 8005534:	2218      	movs	r2, #24
 8005536:	189b      	adds	r3, r3, r2
 8005538:	19db      	adds	r3, r3, r7
 800553a:	2204      	movs	r2, #4
 800553c:	701a      	strb	r2, [r3, #0]
 800553e:	e0a6      	b.n	800568e <UART_SetConfig+0x22a>
 8005540:	231b      	movs	r3, #27
 8005542:	2218      	movs	r2, #24
 8005544:	189b      	adds	r3, r3, r2
 8005546:	19db      	adds	r3, r3, r7
 8005548:	2208      	movs	r2, #8
 800554a:	701a      	strb	r2, [r3, #0]
 800554c:	e09f      	b.n	800568e <UART_SetConfig+0x22a>
 800554e:	231b      	movs	r3, #27
 8005550:	2218      	movs	r2, #24
 8005552:	189b      	adds	r3, r3, r2
 8005554:	19db      	adds	r3, r3, r7
 8005556:	2210      	movs	r2, #16
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	e098      	b.n	800568e <UART_SetConfig+0x22a>
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a96      	ldr	r2, [pc, #600]	@ (80057bc <UART_SetConfig+0x358>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d131      	bne.n	80055ca <UART_SetConfig+0x166>
 8005566:	4b94      	ldr	r3, [pc, #592]	@ (80057b8 <UART_SetConfig+0x354>)
 8005568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800556a:	220c      	movs	r2, #12
 800556c:	4013      	ands	r3, r2
 800556e:	2b0c      	cmp	r3, #12
 8005570:	d01d      	beq.n	80055ae <UART_SetConfig+0x14a>
 8005572:	d823      	bhi.n	80055bc <UART_SetConfig+0x158>
 8005574:	2b08      	cmp	r3, #8
 8005576:	d00c      	beq.n	8005592 <UART_SetConfig+0x12e>
 8005578:	d820      	bhi.n	80055bc <UART_SetConfig+0x158>
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <UART_SetConfig+0x120>
 800557e:	2b04      	cmp	r3, #4
 8005580:	d00e      	beq.n	80055a0 <UART_SetConfig+0x13c>
 8005582:	e01b      	b.n	80055bc <UART_SetConfig+0x158>
 8005584:	231b      	movs	r3, #27
 8005586:	2218      	movs	r2, #24
 8005588:	189b      	adds	r3, r3, r2
 800558a:	19db      	adds	r3, r3, r7
 800558c:	2200      	movs	r2, #0
 800558e:	701a      	strb	r2, [r3, #0]
 8005590:	e07d      	b.n	800568e <UART_SetConfig+0x22a>
 8005592:	231b      	movs	r3, #27
 8005594:	2218      	movs	r2, #24
 8005596:	189b      	adds	r3, r3, r2
 8005598:	19db      	adds	r3, r3, r7
 800559a:	2202      	movs	r2, #2
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	e076      	b.n	800568e <UART_SetConfig+0x22a>
 80055a0:	231b      	movs	r3, #27
 80055a2:	2218      	movs	r2, #24
 80055a4:	189b      	adds	r3, r3, r2
 80055a6:	19db      	adds	r3, r3, r7
 80055a8:	2204      	movs	r2, #4
 80055aa:	701a      	strb	r2, [r3, #0]
 80055ac:	e06f      	b.n	800568e <UART_SetConfig+0x22a>
 80055ae:	231b      	movs	r3, #27
 80055b0:	2218      	movs	r2, #24
 80055b2:	189b      	adds	r3, r3, r2
 80055b4:	19db      	adds	r3, r3, r7
 80055b6:	2208      	movs	r2, #8
 80055b8:	701a      	strb	r2, [r3, #0]
 80055ba:	e068      	b.n	800568e <UART_SetConfig+0x22a>
 80055bc:	231b      	movs	r3, #27
 80055be:	2218      	movs	r2, #24
 80055c0:	189b      	adds	r3, r3, r2
 80055c2:	19db      	adds	r3, r3, r7
 80055c4:	2210      	movs	r2, #16
 80055c6:	701a      	strb	r2, [r3, #0]
 80055c8:	e061      	b.n	800568e <UART_SetConfig+0x22a>
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a7c      	ldr	r2, [pc, #496]	@ (80057c0 <UART_SetConfig+0x35c>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d106      	bne.n	80055e2 <UART_SetConfig+0x17e>
 80055d4:	231b      	movs	r3, #27
 80055d6:	2218      	movs	r2, #24
 80055d8:	189b      	adds	r3, r3, r2
 80055da:	19db      	adds	r3, r3, r7
 80055dc:	2200      	movs	r2, #0
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	e055      	b.n	800568e <UART_SetConfig+0x22a>
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a77      	ldr	r2, [pc, #476]	@ (80057c4 <UART_SetConfig+0x360>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d106      	bne.n	80055fa <UART_SetConfig+0x196>
 80055ec:	231b      	movs	r3, #27
 80055ee:	2218      	movs	r2, #24
 80055f0:	189b      	adds	r3, r3, r2
 80055f2:	19db      	adds	r3, r3, r7
 80055f4:	2200      	movs	r2, #0
 80055f6:	701a      	strb	r2, [r3, #0]
 80055f8:	e049      	b.n	800568e <UART_SetConfig+0x22a>
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a6b      	ldr	r2, [pc, #428]	@ (80057ac <UART_SetConfig+0x348>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d13e      	bne.n	8005682 <UART_SetConfig+0x21e>
 8005604:	4b6c      	ldr	r3, [pc, #432]	@ (80057b8 <UART_SetConfig+0x354>)
 8005606:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005608:	23c0      	movs	r3, #192	@ 0xc0
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	4013      	ands	r3, r2
 800560e:	22c0      	movs	r2, #192	@ 0xc0
 8005610:	0112      	lsls	r2, r2, #4
 8005612:	4293      	cmp	r3, r2
 8005614:	d027      	beq.n	8005666 <UART_SetConfig+0x202>
 8005616:	22c0      	movs	r2, #192	@ 0xc0
 8005618:	0112      	lsls	r2, r2, #4
 800561a:	4293      	cmp	r3, r2
 800561c:	d82a      	bhi.n	8005674 <UART_SetConfig+0x210>
 800561e:	2280      	movs	r2, #128	@ 0x80
 8005620:	0112      	lsls	r2, r2, #4
 8005622:	4293      	cmp	r3, r2
 8005624:	d011      	beq.n	800564a <UART_SetConfig+0x1e6>
 8005626:	2280      	movs	r2, #128	@ 0x80
 8005628:	0112      	lsls	r2, r2, #4
 800562a:	4293      	cmp	r3, r2
 800562c:	d822      	bhi.n	8005674 <UART_SetConfig+0x210>
 800562e:	2b00      	cmp	r3, #0
 8005630:	d004      	beq.n	800563c <UART_SetConfig+0x1d8>
 8005632:	2280      	movs	r2, #128	@ 0x80
 8005634:	00d2      	lsls	r2, r2, #3
 8005636:	4293      	cmp	r3, r2
 8005638:	d00e      	beq.n	8005658 <UART_SetConfig+0x1f4>
 800563a:	e01b      	b.n	8005674 <UART_SetConfig+0x210>
 800563c:	231b      	movs	r3, #27
 800563e:	2218      	movs	r2, #24
 8005640:	189b      	adds	r3, r3, r2
 8005642:	19db      	adds	r3, r3, r7
 8005644:	2200      	movs	r2, #0
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	e021      	b.n	800568e <UART_SetConfig+0x22a>
 800564a:	231b      	movs	r3, #27
 800564c:	2218      	movs	r2, #24
 800564e:	189b      	adds	r3, r3, r2
 8005650:	19db      	adds	r3, r3, r7
 8005652:	2202      	movs	r2, #2
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	e01a      	b.n	800568e <UART_SetConfig+0x22a>
 8005658:	231b      	movs	r3, #27
 800565a:	2218      	movs	r2, #24
 800565c:	189b      	adds	r3, r3, r2
 800565e:	19db      	adds	r3, r3, r7
 8005660:	2204      	movs	r2, #4
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	e013      	b.n	800568e <UART_SetConfig+0x22a>
 8005666:	231b      	movs	r3, #27
 8005668:	2218      	movs	r2, #24
 800566a:	189b      	adds	r3, r3, r2
 800566c:	19db      	adds	r3, r3, r7
 800566e:	2208      	movs	r2, #8
 8005670:	701a      	strb	r2, [r3, #0]
 8005672:	e00c      	b.n	800568e <UART_SetConfig+0x22a>
 8005674:	231b      	movs	r3, #27
 8005676:	2218      	movs	r2, #24
 8005678:	189b      	adds	r3, r3, r2
 800567a:	19db      	adds	r3, r3, r7
 800567c:	2210      	movs	r2, #16
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	e005      	b.n	800568e <UART_SetConfig+0x22a>
 8005682:	231b      	movs	r3, #27
 8005684:	2218      	movs	r2, #24
 8005686:	189b      	adds	r3, r3, r2
 8005688:	19db      	adds	r3, r3, r7
 800568a:	2210      	movs	r2, #16
 800568c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a46      	ldr	r2, [pc, #280]	@ (80057ac <UART_SetConfig+0x348>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d000      	beq.n	800569a <UART_SetConfig+0x236>
 8005698:	e09a      	b.n	80057d0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800569a:	231b      	movs	r3, #27
 800569c:	2218      	movs	r2, #24
 800569e:	189b      	adds	r3, r3, r2
 80056a0:	19db      	adds	r3, r3, r7
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d01d      	beq.n	80056e4 <UART_SetConfig+0x280>
 80056a8:	dc20      	bgt.n	80056ec <UART_SetConfig+0x288>
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d015      	beq.n	80056da <UART_SetConfig+0x276>
 80056ae:	dc1d      	bgt.n	80056ec <UART_SetConfig+0x288>
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <UART_SetConfig+0x256>
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d005      	beq.n	80056c4 <UART_SetConfig+0x260>
 80056b8:	e018      	b.n	80056ec <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056ba:	f7ff f86b 	bl	8004794 <HAL_RCC_GetPCLK1Freq>
 80056be:	0003      	movs	r3, r0
 80056c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056c2:	e01c      	b.n	80056fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056c4:	4b3c      	ldr	r3, [pc, #240]	@ (80057b8 <UART_SetConfig+0x354>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2210      	movs	r2, #16
 80056ca:	4013      	ands	r3, r2
 80056cc:	d002      	beq.n	80056d4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80056ce:	4b3e      	ldr	r3, [pc, #248]	@ (80057c8 <UART_SetConfig+0x364>)
 80056d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80056d2:	e014      	b.n	80056fe <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80056d4:	4b3d      	ldr	r3, [pc, #244]	@ (80057cc <UART_SetConfig+0x368>)
 80056d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056d8:	e011      	b.n	80056fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056da:	f7fe ffcb 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 80056de:	0003      	movs	r3, r0
 80056e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056e2:	e00c      	b.n	80056fe <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056e4:	2380      	movs	r3, #128	@ 0x80
 80056e6:	021b      	lsls	r3, r3, #8
 80056e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80056ea:	e008      	b.n	80056fe <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80056ec:	2300      	movs	r3, #0
 80056ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80056f0:	231a      	movs	r3, #26
 80056f2:	2218      	movs	r2, #24
 80056f4:	189b      	adds	r3, r3, r2
 80056f6:	19db      	adds	r3, r3, r7
 80056f8:	2201      	movs	r2, #1
 80056fa:	701a      	strb	r2, [r3, #0]
        break;
 80056fc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005700:	2b00      	cmp	r3, #0
 8005702:	d100      	bne.n	8005706 <UART_SetConfig+0x2a2>
 8005704:	e133      	b.n	800596e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	0013      	movs	r3, r2
 800570c:	005b      	lsls	r3, r3, #1
 800570e:	189b      	adds	r3, r3, r2
 8005710:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005712:	429a      	cmp	r2, r3
 8005714:	d305      	bcc.n	8005722 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800571c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800571e:	429a      	cmp	r2, r3
 8005720:	d906      	bls.n	8005730 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005722:	231a      	movs	r3, #26
 8005724:	2218      	movs	r2, #24
 8005726:	189b      	adds	r3, r3, r2
 8005728:	19db      	adds	r3, r3, r7
 800572a:	2201      	movs	r2, #1
 800572c:	701a      	strb	r2, [r3, #0]
 800572e:	e11e      	b.n	800596e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005732:	613b      	str	r3, [r7, #16]
 8005734:	2300      	movs	r3, #0
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	6939      	ldr	r1, [r7, #16]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	000b      	movs	r3, r1
 800573e:	0e1b      	lsrs	r3, r3, #24
 8005740:	0010      	movs	r0, r2
 8005742:	0205      	lsls	r5, r0, #8
 8005744:	431d      	orrs	r5, r3
 8005746:	000b      	movs	r3, r1
 8005748:	021c      	lsls	r4, r3, #8
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	085b      	lsrs	r3, r3, #1
 8005750:	60bb      	str	r3, [r7, #8]
 8005752:	2300      	movs	r3, #0
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	68b8      	ldr	r0, [r7, #8]
 8005758:	68f9      	ldr	r1, [r7, #12]
 800575a:	1900      	adds	r0, r0, r4
 800575c:	4169      	adcs	r1, r5
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	603b      	str	r3, [r7, #0]
 8005764:	2300      	movs	r3, #0
 8005766:	607b      	str	r3, [r7, #4]
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f7fa fd6a 	bl	8000244 <__aeabi_uldivmod>
 8005770:	0002      	movs	r2, r0
 8005772:	000b      	movs	r3, r1
 8005774:	0013      	movs	r3, r2
 8005776:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800577a:	23c0      	movs	r3, #192	@ 0xc0
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	429a      	cmp	r2, r3
 8005780:	d309      	bcc.n	8005796 <UART_SetConfig+0x332>
 8005782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005784:	2380      	movs	r3, #128	@ 0x80
 8005786:	035b      	lsls	r3, r3, #13
 8005788:	429a      	cmp	r2, r3
 800578a:	d204      	bcs.n	8005796 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005792:	60da      	str	r2, [r3, #12]
 8005794:	e0eb      	b.n	800596e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005796:	231a      	movs	r3, #26
 8005798:	2218      	movs	r2, #24
 800579a:	189b      	adds	r3, r3, r2
 800579c:	19db      	adds	r3, r3, r7
 800579e:	2201      	movs	r2, #1
 80057a0:	701a      	strb	r2, [r3, #0]
 80057a2:	e0e4      	b.n	800596e <UART_SetConfig+0x50a>
 80057a4:	efff69f3 	.word	0xefff69f3
 80057a8:	ffffcfff 	.word	0xffffcfff
 80057ac:	40004800 	.word	0x40004800
 80057b0:	fffff4ff 	.word	0xfffff4ff
 80057b4:	40013800 	.word	0x40013800
 80057b8:	40021000 	.word	0x40021000
 80057bc:	40004400 	.word	0x40004400
 80057c0:	40004c00 	.word	0x40004c00
 80057c4:	40005000 	.word	0x40005000
 80057c8:	003d0900 	.word	0x003d0900
 80057cc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	69da      	ldr	r2, [r3, #28]
 80057d4:	2380      	movs	r3, #128	@ 0x80
 80057d6:	021b      	lsls	r3, r3, #8
 80057d8:	429a      	cmp	r2, r3
 80057da:	d000      	beq.n	80057de <UART_SetConfig+0x37a>
 80057dc:	e070      	b.n	80058c0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80057de:	231b      	movs	r3, #27
 80057e0:	2218      	movs	r2, #24
 80057e2:	189b      	adds	r3, r3, r2
 80057e4:	19db      	adds	r3, r3, r7
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	2b08      	cmp	r3, #8
 80057ea:	d822      	bhi.n	8005832 <UART_SetConfig+0x3ce>
 80057ec:	009a      	lsls	r2, r3, #2
 80057ee:	4b67      	ldr	r3, [pc, #412]	@ (800598c <UART_SetConfig+0x528>)
 80057f0:	18d3      	adds	r3, r2, r3
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f6:	f7fe ffcd 	bl	8004794 <HAL_RCC_GetPCLK1Freq>
 80057fa:	0003      	movs	r3, r0
 80057fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057fe:	e021      	b.n	8005844 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005800:	f7fe ffde 	bl	80047c0 <HAL_RCC_GetPCLK2Freq>
 8005804:	0003      	movs	r3, r0
 8005806:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005808:	e01c      	b.n	8005844 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800580a:	4b61      	ldr	r3, [pc, #388]	@ (8005990 <UART_SetConfig+0x52c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2210      	movs	r2, #16
 8005810:	4013      	ands	r3, r2
 8005812:	d002      	beq.n	800581a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005814:	4b5f      	ldr	r3, [pc, #380]	@ (8005994 <UART_SetConfig+0x530>)
 8005816:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005818:	e014      	b.n	8005844 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800581a:	4b5f      	ldr	r3, [pc, #380]	@ (8005998 <UART_SetConfig+0x534>)
 800581c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800581e:	e011      	b.n	8005844 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005820:	f7fe ff28 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8005824:	0003      	movs	r3, r0
 8005826:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005828:	e00c      	b.n	8005844 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800582a:	2380      	movs	r3, #128	@ 0x80
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005830:	e008      	b.n	8005844 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005836:	231a      	movs	r3, #26
 8005838:	2218      	movs	r2, #24
 800583a:	189b      	adds	r3, r3, r2
 800583c:	19db      	adds	r3, r3, r7
 800583e:	2201      	movs	r2, #1
 8005840:	701a      	strb	r2, [r3, #0]
        break;
 8005842:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005846:	2b00      	cmp	r3, #0
 8005848:	d100      	bne.n	800584c <UART_SetConfig+0x3e8>
 800584a:	e090      	b.n	800596e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800584c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584e:	005a      	lsls	r2, r3, #1
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	085b      	lsrs	r3, r3, #1
 8005856:	18d2      	adds	r2, r2, r3
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	0019      	movs	r1, r3
 800585e:	0010      	movs	r0, r2
 8005860:	f7fa fc64 	bl	800012c <__udivsi3>
 8005864:	0003      	movs	r3, r0
 8005866:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586a:	2b0f      	cmp	r3, #15
 800586c:	d921      	bls.n	80058b2 <UART_SetConfig+0x44e>
 800586e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005870:	2380      	movs	r3, #128	@ 0x80
 8005872:	025b      	lsls	r3, r3, #9
 8005874:	429a      	cmp	r2, r3
 8005876:	d21c      	bcs.n	80058b2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800587a:	b29a      	uxth	r2, r3
 800587c:	200e      	movs	r0, #14
 800587e:	2418      	movs	r4, #24
 8005880:	1903      	adds	r3, r0, r4
 8005882:	19db      	adds	r3, r3, r7
 8005884:	210f      	movs	r1, #15
 8005886:	438a      	bics	r2, r1
 8005888:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	085b      	lsrs	r3, r3, #1
 800588e:	b29b      	uxth	r3, r3
 8005890:	2207      	movs	r2, #7
 8005892:	4013      	ands	r3, r2
 8005894:	b299      	uxth	r1, r3
 8005896:	1903      	adds	r3, r0, r4
 8005898:	19db      	adds	r3, r3, r7
 800589a:	1902      	adds	r2, r0, r4
 800589c:	19d2      	adds	r2, r2, r7
 800589e:	8812      	ldrh	r2, [r2, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	1902      	adds	r2, r0, r4
 80058aa:	19d2      	adds	r2, r2, r7
 80058ac:	8812      	ldrh	r2, [r2, #0]
 80058ae:	60da      	str	r2, [r3, #12]
 80058b0:	e05d      	b.n	800596e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80058b2:	231a      	movs	r3, #26
 80058b4:	2218      	movs	r2, #24
 80058b6:	189b      	adds	r3, r3, r2
 80058b8:	19db      	adds	r3, r3, r7
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	e056      	b.n	800596e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058c0:	231b      	movs	r3, #27
 80058c2:	2218      	movs	r2, #24
 80058c4:	189b      	adds	r3, r3, r2
 80058c6:	19db      	adds	r3, r3, r7
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d822      	bhi.n	8005914 <UART_SetConfig+0x4b0>
 80058ce:	009a      	lsls	r2, r3, #2
 80058d0:	4b32      	ldr	r3, [pc, #200]	@ (800599c <UART_SetConfig+0x538>)
 80058d2:	18d3      	adds	r3, r2, r3
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d8:	f7fe ff5c 	bl	8004794 <HAL_RCC_GetPCLK1Freq>
 80058dc:	0003      	movs	r3, r0
 80058de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80058e0:	e021      	b.n	8005926 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e2:	f7fe ff6d 	bl	80047c0 <HAL_RCC_GetPCLK2Freq>
 80058e6:	0003      	movs	r3, r0
 80058e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80058ea:	e01c      	b.n	8005926 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ec:	4b28      	ldr	r3, [pc, #160]	@ (8005990 <UART_SetConfig+0x52c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2210      	movs	r2, #16
 80058f2:	4013      	ands	r3, r2
 80058f4:	d002      	beq.n	80058fc <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80058f6:	4b27      	ldr	r3, [pc, #156]	@ (8005994 <UART_SetConfig+0x530>)
 80058f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058fa:	e014      	b.n	8005926 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80058fc:	4b26      	ldr	r3, [pc, #152]	@ (8005998 <UART_SetConfig+0x534>)
 80058fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005900:	e011      	b.n	8005926 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005902:	f7fe feb7 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8005906:	0003      	movs	r3, r0
 8005908:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800590a:	e00c      	b.n	8005926 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590c:	2380      	movs	r3, #128	@ 0x80
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005912:	e008      	b.n	8005926 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005918:	231a      	movs	r3, #26
 800591a:	2218      	movs	r2, #24
 800591c:	189b      	adds	r3, r3, r2
 800591e:	19db      	adds	r3, r3, r7
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
        break;
 8005924:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d020      	beq.n	800596e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	085a      	lsrs	r2, r3, #1
 8005932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005934:	18d2      	adds	r2, r2, r3
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	0019      	movs	r1, r3
 800593c:	0010      	movs	r0, r2
 800593e:	f7fa fbf5 	bl	800012c <__udivsi3>
 8005942:	0003      	movs	r3, r0
 8005944:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005948:	2b0f      	cmp	r3, #15
 800594a:	d90a      	bls.n	8005962 <UART_SetConfig+0x4fe>
 800594c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800594e:	2380      	movs	r3, #128	@ 0x80
 8005950:	025b      	lsls	r3, r3, #9
 8005952:	429a      	cmp	r2, r3
 8005954:	d205      	bcs.n	8005962 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005958:	b29a      	uxth	r2, r3
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60da      	str	r2, [r3, #12]
 8005960:	e005      	b.n	800596e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005962:	231a      	movs	r3, #26
 8005964:	2218      	movs	r2, #24
 8005966:	189b      	adds	r3, r3, r2
 8005968:	19db      	adds	r3, r3, r7
 800596a:	2201      	movs	r2, #1
 800596c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	2200      	movs	r2, #0
 8005972:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	2200      	movs	r2, #0
 8005978:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800597a:	231a      	movs	r3, #26
 800597c:	2218      	movs	r2, #24
 800597e:	189b      	adds	r3, r3, r2
 8005980:	19db      	adds	r3, r3, r7
 8005982:	781b      	ldrb	r3, [r3, #0]
}
 8005984:	0018      	movs	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	b00e      	add	sp, #56	@ 0x38
 800598a:	bdb0      	pop	{r4, r5, r7, pc}
 800598c:	08006d70 	.word	0x08006d70
 8005990:	40021000 	.word	0x40021000
 8005994:	003d0900 	.word	0x003d0900
 8005998:	00f42400 	.word	0x00f42400
 800599c:	08006d94 	.word	0x08006d94

080059a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ac:	2208      	movs	r2, #8
 80059ae:	4013      	ands	r3, r2
 80059b0:	d00b      	beq.n	80059ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	4a4a      	ldr	r2, [pc, #296]	@ (8005ae4 <UART_AdvFeatureConfig+0x144>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	0019      	movs	r1, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ce:	2201      	movs	r2, #1
 80059d0:	4013      	ands	r3, r2
 80059d2:	d00b      	beq.n	80059ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	4a43      	ldr	r2, [pc, #268]	@ (8005ae8 <UART_AdvFeatureConfig+0x148>)
 80059dc:	4013      	ands	r3, r2
 80059de:	0019      	movs	r1, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f0:	2202      	movs	r2, #2
 80059f2:	4013      	ands	r3, r2
 80059f4:	d00b      	beq.n	8005a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	4a3b      	ldr	r2, [pc, #236]	@ (8005aec <UART_AdvFeatureConfig+0x14c>)
 80059fe:	4013      	ands	r3, r2
 8005a00:	0019      	movs	r1, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a12:	2204      	movs	r2, #4
 8005a14:	4013      	ands	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4a34      	ldr	r2, [pc, #208]	@ (8005af0 <UART_AdvFeatureConfig+0x150>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	0019      	movs	r1, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a34:	2210      	movs	r2, #16
 8005a36:	4013      	ands	r3, r2
 8005a38:	d00b      	beq.n	8005a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	4a2c      	ldr	r2, [pc, #176]	@ (8005af4 <UART_AdvFeatureConfig+0x154>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	0019      	movs	r1, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a56:	2220      	movs	r2, #32
 8005a58:	4013      	ands	r3, r2
 8005a5a:	d00b      	beq.n	8005a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	4a25      	ldr	r2, [pc, #148]	@ (8005af8 <UART_AdvFeatureConfig+0x158>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	0019      	movs	r1, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	2240      	movs	r2, #64	@ 0x40
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d01d      	beq.n	8005aba <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	4a1d      	ldr	r2, [pc, #116]	@ (8005afc <UART_AdvFeatureConfig+0x15c>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	0019      	movs	r1, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a9a:	2380      	movs	r3, #128	@ 0x80
 8005a9c:	035b      	lsls	r3, r3, #13
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d10b      	bne.n	8005aba <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a15      	ldr	r2, [pc, #84]	@ (8005b00 <UART_AdvFeatureConfig+0x160>)
 8005aaa:	4013      	ands	r3, r2
 8005aac:	0019      	movs	r1, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	430a      	orrs	r2, r1
 8005ab8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005abe:	2280      	movs	r2, #128	@ 0x80
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	d00b      	beq.n	8005adc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	4a0e      	ldr	r2, [pc, #56]	@ (8005b04 <UART_AdvFeatureConfig+0x164>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	0019      	movs	r1, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	605a      	str	r2, [r3, #4]
  }
}
 8005adc:	46c0      	nop			@ (mov r8, r8)
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	b002      	add	sp, #8
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	ffff7fff 	.word	0xffff7fff
 8005ae8:	fffdffff 	.word	0xfffdffff
 8005aec:	fffeffff 	.word	0xfffeffff
 8005af0:	fffbffff 	.word	0xfffbffff
 8005af4:	ffffefff 	.word	0xffffefff
 8005af8:	ffffdfff 	.word	0xffffdfff
 8005afc:	ffefffff 	.word	0xffefffff
 8005b00:	ff9fffff 	.word	0xff9fffff
 8005b04:	fff7ffff 	.word	0xfff7ffff

08005b08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b092      	sub	sp, #72	@ 0x48
 8005b0c:	af02      	add	r7, sp, #8
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2284      	movs	r2, #132	@ 0x84
 8005b14:	2100      	movs	r1, #0
 8005b16:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b18:	f7fc f85c 	bl	8001bd4 <HAL_GetTick>
 8005b1c:	0003      	movs	r3, r0
 8005b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2208      	movs	r2, #8
 8005b28:	4013      	ands	r3, r2
 8005b2a:	2b08      	cmp	r3, #8
 8005b2c:	d12c      	bne.n	8005b88 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b30:	2280      	movs	r2, #128	@ 0x80
 8005b32:	0391      	lsls	r1, r2, #14
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	4a46      	ldr	r2, [pc, #280]	@ (8005c50 <UART_CheckIdleState+0x148>)
 8005b38:	9200      	str	r2, [sp, #0]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f000 f88c 	bl	8005c58 <UART_WaitOnFlagUntilTimeout>
 8005b40:	1e03      	subs	r3, r0, #0
 8005b42:	d021      	beq.n	8005b88 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b44:	f3ef 8310 	mrs	r3, PRIMASK
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b4e:	2301      	movs	r3, #1
 8005b50:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b54:	f383 8810 	msr	PRIMASK, r3
}
 8005b58:	46c0      	nop			@ (mov r8, r8)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2180      	movs	r1, #128	@ 0x80
 8005b66:	438a      	bics	r2, r1
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b70:	f383 8810 	msr	PRIMASK, r3
}
 8005b74:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2278      	movs	r2, #120	@ 0x78
 8005b80:	2100      	movs	r1, #0
 8005b82:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e05f      	b.n	8005c48 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	2204      	movs	r2, #4
 8005b90:	4013      	ands	r3, r2
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	d146      	bne.n	8005c24 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b98:	2280      	movs	r2, #128	@ 0x80
 8005b9a:	03d1      	lsls	r1, r2, #15
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8005c50 <UART_CheckIdleState+0x148>)
 8005ba0:	9200      	str	r2, [sp, #0]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f000 f858 	bl	8005c58 <UART_WaitOnFlagUntilTimeout>
 8005ba8:	1e03      	subs	r3, r0, #0
 8005baa:	d03b      	beq.n	8005c24 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bac:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f383 8810 	msr	PRIMASK, r3
}
 8005bc0:	46c0      	nop			@ (mov r8, r8)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4921      	ldr	r1, [pc, #132]	@ (8005c54 <UART_CheckIdleState+0x14c>)
 8005bce:	400a      	ands	r2, r1
 8005bd0:	601a      	str	r2, [r3, #0]
 8005bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f383 8810 	msr	PRIMASK, r3
}
 8005bdc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bde:	f3ef 8310 	mrs	r3, PRIMASK
 8005be2:	61bb      	str	r3, [r7, #24]
  return(result);
 8005be4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005be8:	2301      	movs	r3, #1
 8005bea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	f383 8810 	msr	PRIMASK, r3
}
 8005bf2:	46c0      	nop			@ (mov r8, r8)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2101      	movs	r1, #1
 8005c00:	438a      	bics	r2, r1
 8005c02:	609a      	str	r2, [r3, #8]
 8005c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c08:	6a3b      	ldr	r3, [r7, #32]
 8005c0a:	f383 8810 	msr	PRIMASK, r3
}
 8005c0e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2280      	movs	r2, #128	@ 0x80
 8005c14:	2120      	movs	r1, #32
 8005c16:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2278      	movs	r2, #120	@ 0x78
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c20:	2303      	movs	r3, #3
 8005c22:	e011      	b.n	8005c48 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2220      	movs	r2, #32
 8005c28:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2280      	movs	r2, #128	@ 0x80
 8005c2e:	2120      	movs	r1, #32
 8005c30:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2278      	movs	r2, #120	@ 0x78
 8005c42:	2100      	movs	r1, #0
 8005c44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c46:	2300      	movs	r3, #0
}
 8005c48:	0018      	movs	r0, r3
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	b010      	add	sp, #64	@ 0x40
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	01ffffff 	.word	0x01ffffff
 8005c54:	fffffedf 	.word	0xfffffedf

08005c58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	1dfb      	adds	r3, r7, #7
 8005c66:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c68:	e051      	b.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	d04e      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c70:	f7fb ffb0 	bl	8001bd4 <HAL_GetTick>
 8005c74:	0002      	movs	r2, r0
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d302      	bcc.n	8005c86 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e051      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2204      	movs	r2, #4
 8005c92:	4013      	ands	r3, r2
 8005c94:	d03b      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b80      	cmp	r3, #128	@ 0x80
 8005c9a:	d038      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ca0:	d035      	beq.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	69db      	ldr	r3, [r3, #28]
 8005ca8:	2208      	movs	r2, #8
 8005caa:	4013      	ands	r3, r2
 8005cac:	2b08      	cmp	r3, #8
 8005cae:	d111      	bne.n	8005cd4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2208      	movs	r2, #8
 8005cb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	0018      	movs	r0, r3
 8005cbc:	f000 f83c 	bl	8005d38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2284      	movs	r2, #132	@ 0x84
 8005cc4:	2108      	movs	r1, #8
 8005cc6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2278      	movs	r2, #120	@ 0x78
 8005ccc:	2100      	movs	r1, #0
 8005cce:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e02c      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	69da      	ldr	r2, [r3, #28]
 8005cda:	2380      	movs	r3, #128	@ 0x80
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	401a      	ands	r2, r3
 8005ce0:	2380      	movs	r3, #128	@ 0x80
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d112      	bne.n	8005d0e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2280      	movs	r2, #128	@ 0x80
 8005cee:	0112      	lsls	r2, r2, #4
 8005cf0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	f000 f81f 	bl	8005d38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2284      	movs	r2, #132	@ 0x84
 8005cfe:	2120      	movs	r1, #32
 8005d00:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2278      	movs	r2, #120	@ 0x78
 8005d06:	2100      	movs	r1, #0
 8005d08:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	e00f      	b.n	8005d2e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	68ba      	ldr	r2, [r7, #8]
 8005d16:	4013      	ands	r3, r2
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	425a      	negs	r2, r3
 8005d1e:	4153      	adcs	r3, r2
 8005d20:	b2db      	uxtb	r3, r3
 8005d22:	001a      	movs	r2, r3
 8005d24:	1dfb      	adds	r3, r7, #7
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d09e      	beq.n	8005c6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	0018      	movs	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	b004      	add	sp, #16
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08e      	sub	sp, #56	@ 0x38
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d40:	f3ef 8310 	mrs	r3, PRIMASK
 8005d44:	617b      	str	r3, [r7, #20]
  return(result);
 8005d46:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	f383 8810 	msr	PRIMASK, r3
}
 8005d54:	46c0      	nop			@ (mov r8, r8)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4926      	ldr	r1, [pc, #152]	@ (8005dfc <UART_EndRxTransfer+0xc4>)
 8005d62:	400a      	ands	r2, r1
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	f383 8810 	msr	PRIMASK, r3
}
 8005d70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d72:	f3ef 8310 	mrs	r3, PRIMASK
 8005d76:	623b      	str	r3, [r7, #32]
  return(result);
 8005d78:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	f383 8810 	msr	PRIMASK, r3
}
 8005d86:	46c0      	nop			@ (mov r8, r8)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2101      	movs	r1, #1
 8005d94:	438a      	bics	r2, r1
 8005d96:	609a      	str	r2, [r3, #8]
 8005d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9e:	f383 8810 	msr	PRIMASK, r3
}
 8005da2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d118      	bne.n	8005dde <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dac:	f3ef 8310 	mrs	r3, PRIMASK
 8005db0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005db2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005db6:	2301      	movs	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f383 8810 	msr	PRIMASK, r3
}
 8005dc0:	46c0      	nop			@ (mov r8, r8)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2110      	movs	r1, #16
 8005dce:	438a      	bics	r2, r1
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	f383 8810 	msr	PRIMASK, r3
}
 8005ddc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2280      	movs	r2, #128	@ 0x80
 8005de2:	2120      	movs	r1, #32
 8005de4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005df2:	46c0      	nop			@ (mov r8, r8)
 8005df4:	46bd      	mov	sp, r7
 8005df6:	b00e      	add	sp, #56	@ 0x38
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	46c0      	nop			@ (mov r8, r8)
 8005dfc:	fffffedf 	.word	0xfffffedf

08005e00 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	1dbb      	adds	r3, r7, #6
 8005e0e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2280      	movs	r2, #128	@ 0x80
 8005e14:	589b      	ldr	r3, [r3, r2]
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d000      	beq.n	8005e1c <HAL_UARTEx_ReceiveToIdle+0x1c>
 8005e1a:	e109      	b.n	8006030 <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_UARTEx_ReceiveToIdle+0x2a>
 8005e22:	1dbb      	adds	r3, r7, #6
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d101      	bne.n	8005e2e <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e101      	b.n	8006032 <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	2380      	movs	r3, #128	@ 0x80
 8005e34:	015b      	lsls	r3, r3, #5
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d109      	bne.n	8005e4e <HAL_UARTEx_ReceiveToIdle+0x4e>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d105      	bne.n	8005e4e <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	2201      	movs	r2, #1
 8005e46:	4013      	ands	r3, r2
 8005e48:	d001      	beq.n	8005e4e <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e0f1      	b.n	8006032 <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2284      	movs	r2, #132	@ 0x84
 8005e52:	2100      	movs	r1, #0
 8005e54:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2280      	movs	r2, #128	@ 0x80
 8005e5a:	2122      	movs	r1, #34	@ 0x22
 8005e5c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2201      	movs	r2, #1
 8005e62:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e6a:	f7fb feb3 	bl	8001bd4 <HAL_GetTick>
 8005e6e:	0003      	movs	r3, r0
 8005e70:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	1dba      	adds	r2, r7, #6
 8005e76:	2158      	movs	r1, #88	@ 0x58
 8005e78:	8812      	ldrh	r2, [r2, #0]
 8005e7a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	1dba      	adds	r2, r7, #6
 8005e80:	215a      	movs	r1, #90	@ 0x5a
 8005e82:	8812      	ldrh	r2, [r2, #0]
 8005e84:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	2380      	movs	r3, #128	@ 0x80
 8005e8c:	015b      	lsls	r3, r3, #5
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d10d      	bne.n	8005eae <HAL_UARTEx_ReceiveToIdle+0xae>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <HAL_UARTEx_ReceiveToIdle+0xa4>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	225c      	movs	r2, #92	@ 0x5c
 8005e9e:	4967      	ldr	r1, [pc, #412]	@ (800603c <HAL_UARTEx_ReceiveToIdle+0x23c>)
 8005ea0:	5299      	strh	r1, [r3, r2]
 8005ea2:	e02e      	b.n	8005f02 <HAL_UARTEx_ReceiveToIdle+0x102>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	225c      	movs	r2, #92	@ 0x5c
 8005ea8:	21ff      	movs	r1, #255	@ 0xff
 8005eaa:	5299      	strh	r1, [r3, r2]
 8005eac:	e029      	b.n	8005f02 <HAL_UARTEx_ReceiveToIdle+0x102>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10d      	bne.n	8005ed2 <HAL_UARTEx_ReceiveToIdle+0xd2>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d104      	bne.n	8005ec8 <HAL_UARTEx_ReceiveToIdle+0xc8>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	225c      	movs	r2, #92	@ 0x5c
 8005ec2:	21ff      	movs	r1, #255	@ 0xff
 8005ec4:	5299      	strh	r1, [r3, r2]
 8005ec6:	e01c      	b.n	8005f02 <HAL_UARTEx_ReceiveToIdle+0x102>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	225c      	movs	r2, #92	@ 0x5c
 8005ecc:	217f      	movs	r1, #127	@ 0x7f
 8005ece:	5299      	strh	r1, [r3, r2]
 8005ed0:	e017      	b.n	8005f02 <HAL_UARTEx_ReceiveToIdle+0x102>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	689a      	ldr	r2, [r3, #8]
 8005ed6:	2380      	movs	r3, #128	@ 0x80
 8005ed8:	055b      	lsls	r3, r3, #21
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d10d      	bne.n	8005efa <HAL_UARTEx_ReceiveToIdle+0xfa>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d104      	bne.n	8005ef0 <HAL_UARTEx_ReceiveToIdle+0xf0>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	225c      	movs	r2, #92	@ 0x5c
 8005eea:	217f      	movs	r1, #127	@ 0x7f
 8005eec:	5299      	strh	r1, [r3, r2]
 8005eee:	e008      	b.n	8005f02 <HAL_UARTEx_ReceiveToIdle+0x102>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	225c      	movs	r2, #92	@ 0x5c
 8005ef4:	213f      	movs	r1, #63	@ 0x3f
 8005ef6:	5299      	strh	r1, [r3, r2]
 8005ef8:	e003      	b.n	8005f02 <HAL_UARTEx_ReceiveToIdle+0x102>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	225c      	movs	r2, #92	@ 0x5c
 8005efe:	2100      	movs	r1, #0
 8005f00:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005f02:	2312      	movs	r3, #18
 8005f04:	18fb      	adds	r3, r7, r3
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	215c      	movs	r1, #92	@ 0x5c
 8005f0a:	5a52      	ldrh	r2, [r2, r1]
 8005f0c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	689a      	ldr	r2, [r3, #8]
 8005f12:	2380      	movs	r3, #128	@ 0x80
 8005f14:	015b      	lsls	r3, r3, #5
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d108      	bne.n	8005f2c <HAL_UARTEx_ReceiveToIdle+0x12c>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d104      	bne.n	8005f2c <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	e003      	b.n	8005f34 <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f30:	2300      	movs	r3, #0
 8005f32:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2200      	movs	r2, #0
 8005f38:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005f3a:	e062      	b.n	8006002 <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	2210      	movs	r2, #16
 8005f44:	4013      	ands	r3, r2
 8005f46:	2b10      	cmp	r3, #16
 8005f48:	d110      	bne.n	8005f6c <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2210      	movs	r2, #16
 8005f50:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	881b      	ldrh	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d008      	beq.n	8005f6c <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2202      	movs	r2, #2
 8005f5e:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2280      	movs	r2, #128	@ 0x80
 8005f64:	2120      	movs	r1, #32
 8005f66:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e062      	b.n	8006032 <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	2220      	movs	r2, #32
 8005f74:	4013      	ands	r3, r2
 8005f76:	2b20      	cmp	r3, #32
 8005f78:	d12f      	bne.n	8005fda <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 8005f7a:	69fb      	ldr	r3, [r7, #28]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10e      	bne.n	8005f9e <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	2212      	movs	r2, #18
 8005f8a:	18ba      	adds	r2, r7, r2
 8005f8c:	8812      	ldrh	r2, [r2, #0]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	3302      	adds	r3, #2
 8005f9a:	61bb      	str	r3, [r7, #24]
 8005f9c:	e00e      	b.n	8005fbc <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2212      	movs	r2, #18
 8005fa8:	18ba      	adds	r2, r7, r2
 8005faa:	8812      	ldrh	r2, [r2, #0]
 8005fac:	b2d2      	uxtb	r2, r2
 8005fae:	4013      	ands	r3, r2
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	881b      	ldrh	r3, [r3, #0]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	225a      	movs	r2, #90	@ 0x5a
 8005fcc:	5a9b      	ldrh	r3, [r3, r2]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	b299      	uxth	r1, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	225a      	movs	r2, #90	@ 0x5a
 8005fd8:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fdc:	3301      	adds	r3, #1
 8005fde:	d010      	beq.n	8006002 <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fe0:	f7fb fdf8 	bl	8001bd4 <HAL_GetTick>
 8005fe4:	0002      	movs	r2, r0
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d302      	bcc.n	8005ff6 <HAL_UARTEx_ReceiveToIdle+0x1f6>
 8005ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d105      	bne.n	8006002 <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2280      	movs	r2, #128	@ 0x80
 8005ffa:	2120      	movs	r1, #32
 8005ffc:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e017      	b.n	8006032 <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	225a      	movs	r2, #90	@ 0x5a
 8006006:	5a9b      	ldrh	r3, [r3, r2]
 8006008:	b29b      	uxth	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d196      	bne.n	8005f3c <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2258      	movs	r2, #88	@ 0x58
 8006012:	5a9a      	ldrh	r2, [r3, r2]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	215a      	movs	r1, #90	@ 0x5a
 8006018:	5a5b      	ldrh	r3, [r3, r1]
 800601a:	b29b      	uxth	r3, r3
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	b29a      	uxth	r2, r3
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2280      	movs	r2, #128	@ 0x80
 8006028:	2120      	movs	r1, #32
 800602a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	e000      	b.n	8006032 <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 8006030:	2302      	movs	r3, #2
  }
}
 8006032:	0018      	movs	r0, r3
 8006034:	46bd      	mov	sp, r7
 8006036:	b008      	add	sp, #32
 8006038:	bd80      	pop	{r7, pc}
 800603a:	46c0      	nop			@ (mov r8, r8)
 800603c:	000001ff 	.word	0x000001ff

08006040 <sniprintf>:
 8006040:	b40c      	push	{r2, r3}
 8006042:	b530      	push	{r4, r5, lr}
 8006044:	4b18      	ldr	r3, [pc, #96]	@ (80060a8 <sniprintf+0x68>)
 8006046:	000c      	movs	r4, r1
 8006048:	681d      	ldr	r5, [r3, #0]
 800604a:	b09d      	sub	sp, #116	@ 0x74
 800604c:	2900      	cmp	r1, #0
 800604e:	da08      	bge.n	8006062 <sniprintf+0x22>
 8006050:	238b      	movs	r3, #139	@ 0x8b
 8006052:	2001      	movs	r0, #1
 8006054:	602b      	str	r3, [r5, #0]
 8006056:	4240      	negs	r0, r0
 8006058:	b01d      	add	sp, #116	@ 0x74
 800605a:	bc30      	pop	{r4, r5}
 800605c:	bc08      	pop	{r3}
 800605e:	b002      	add	sp, #8
 8006060:	4718      	bx	r3
 8006062:	2382      	movs	r3, #130	@ 0x82
 8006064:	466a      	mov	r2, sp
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	8293      	strh	r3, [r2, #20]
 800606a:	2300      	movs	r3, #0
 800606c:	9002      	str	r0, [sp, #8]
 800606e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006070:	9006      	str	r0, [sp, #24]
 8006072:	4299      	cmp	r1, r3
 8006074:	d000      	beq.n	8006078 <sniprintf+0x38>
 8006076:	1e4b      	subs	r3, r1, #1
 8006078:	9304      	str	r3, [sp, #16]
 800607a:	9307      	str	r3, [sp, #28]
 800607c:	2301      	movs	r3, #1
 800607e:	466a      	mov	r2, sp
 8006080:	425b      	negs	r3, r3
 8006082:	82d3      	strh	r3, [r2, #22]
 8006084:	0028      	movs	r0, r5
 8006086:	ab21      	add	r3, sp, #132	@ 0x84
 8006088:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800608a:	a902      	add	r1, sp, #8
 800608c:	9301      	str	r3, [sp, #4]
 800608e:	f000 fa0f 	bl	80064b0 <_svfiprintf_r>
 8006092:	1c43      	adds	r3, r0, #1
 8006094:	da01      	bge.n	800609a <sniprintf+0x5a>
 8006096:	238b      	movs	r3, #139	@ 0x8b
 8006098:	602b      	str	r3, [r5, #0]
 800609a:	2c00      	cmp	r4, #0
 800609c:	d0dc      	beq.n	8006058 <sniprintf+0x18>
 800609e:	2200      	movs	r2, #0
 80060a0:	9b02      	ldr	r3, [sp, #8]
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	e7d8      	b.n	8006058 <sniprintf+0x18>
 80060a6:	46c0      	nop			@ (mov r8, r8)
 80060a8:	2000000c 	.word	0x2000000c

080060ac <siprintf>:
 80060ac:	b40e      	push	{r1, r2, r3}
 80060ae:	b510      	push	{r4, lr}
 80060b0:	2400      	movs	r4, #0
 80060b2:	490c      	ldr	r1, [pc, #48]	@ (80060e4 <siprintf+0x38>)
 80060b4:	b09d      	sub	sp, #116	@ 0x74
 80060b6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80060b8:	9002      	str	r0, [sp, #8]
 80060ba:	9006      	str	r0, [sp, #24]
 80060bc:	9107      	str	r1, [sp, #28]
 80060be:	9104      	str	r1, [sp, #16]
 80060c0:	4809      	ldr	r0, [pc, #36]	@ (80060e8 <siprintf+0x3c>)
 80060c2:	490a      	ldr	r1, [pc, #40]	@ (80060ec <siprintf+0x40>)
 80060c4:	cb04      	ldmia	r3!, {r2}
 80060c6:	9105      	str	r1, [sp, #20]
 80060c8:	6800      	ldr	r0, [r0, #0]
 80060ca:	a902      	add	r1, sp, #8
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	941b      	str	r4, [sp, #108]	@ 0x6c
 80060d0:	f000 f9ee 	bl	80064b0 <_svfiprintf_r>
 80060d4:	9b02      	ldr	r3, [sp, #8]
 80060d6:	701c      	strb	r4, [r3, #0]
 80060d8:	b01d      	add	sp, #116	@ 0x74
 80060da:	bc10      	pop	{r4}
 80060dc:	bc08      	pop	{r3}
 80060de:	b003      	add	sp, #12
 80060e0:	4718      	bx	r3
 80060e2:	46c0      	nop			@ (mov r8, r8)
 80060e4:	7fffffff 	.word	0x7fffffff
 80060e8:	2000000c 	.word	0x2000000c
 80060ec:	ffff0208 	.word	0xffff0208

080060f0 <_vsniprintf_r>:
 80060f0:	b530      	push	{r4, r5, lr}
 80060f2:	0005      	movs	r5, r0
 80060f4:	0014      	movs	r4, r2
 80060f6:	0008      	movs	r0, r1
 80060f8:	001a      	movs	r2, r3
 80060fa:	b09b      	sub	sp, #108	@ 0x6c
 80060fc:	2c00      	cmp	r4, #0
 80060fe:	da05      	bge.n	800610c <_vsniprintf_r+0x1c>
 8006100:	238b      	movs	r3, #139	@ 0x8b
 8006102:	2001      	movs	r0, #1
 8006104:	602b      	str	r3, [r5, #0]
 8006106:	4240      	negs	r0, r0
 8006108:	b01b      	add	sp, #108	@ 0x6c
 800610a:	bd30      	pop	{r4, r5, pc}
 800610c:	2382      	movs	r3, #130	@ 0x82
 800610e:	4669      	mov	r1, sp
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	818b      	strh	r3, [r1, #12]
 8006114:	2100      	movs	r1, #0
 8006116:	9000      	str	r0, [sp, #0]
 8006118:	9119      	str	r1, [sp, #100]	@ 0x64
 800611a:	9004      	str	r0, [sp, #16]
 800611c:	428c      	cmp	r4, r1
 800611e:	d000      	beq.n	8006122 <_vsniprintf_r+0x32>
 8006120:	1e61      	subs	r1, r4, #1
 8006122:	2301      	movs	r3, #1
 8006124:	9102      	str	r1, [sp, #8]
 8006126:	9105      	str	r1, [sp, #20]
 8006128:	4669      	mov	r1, sp
 800612a:	425b      	negs	r3, r3
 800612c:	81cb      	strh	r3, [r1, #14]
 800612e:	0028      	movs	r0, r5
 8006130:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006132:	f000 f9bd 	bl	80064b0 <_svfiprintf_r>
 8006136:	1c43      	adds	r3, r0, #1
 8006138:	da01      	bge.n	800613e <_vsniprintf_r+0x4e>
 800613a:	238b      	movs	r3, #139	@ 0x8b
 800613c:	602b      	str	r3, [r5, #0]
 800613e:	2c00      	cmp	r4, #0
 8006140:	d0e2      	beq.n	8006108 <_vsniprintf_r+0x18>
 8006142:	2200      	movs	r2, #0
 8006144:	9b00      	ldr	r3, [sp, #0]
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	e7de      	b.n	8006108 <_vsniprintf_r+0x18>
	...

0800614c <vsniprintf>:
 800614c:	b513      	push	{r0, r1, r4, lr}
 800614e:	4c04      	ldr	r4, [pc, #16]	@ (8006160 <vsniprintf+0x14>)
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	0013      	movs	r3, r2
 8006154:	000a      	movs	r2, r1
 8006156:	0001      	movs	r1, r0
 8006158:	6820      	ldr	r0, [r4, #0]
 800615a:	f7ff ffc9 	bl	80060f0 <_vsniprintf_r>
 800615e:	bd16      	pop	{r1, r2, r4, pc}
 8006160:	2000000c 	.word	0x2000000c

08006164 <memset>:
 8006164:	0003      	movs	r3, r0
 8006166:	1882      	adds	r2, r0, r2
 8006168:	4293      	cmp	r3, r2
 800616a:	d100      	bne.n	800616e <memset+0xa>
 800616c:	4770      	bx	lr
 800616e:	7019      	strb	r1, [r3, #0]
 8006170:	3301      	adds	r3, #1
 8006172:	e7f9      	b.n	8006168 <memset+0x4>

08006174 <strstr>:
 8006174:	780a      	ldrb	r2, [r1, #0]
 8006176:	b530      	push	{r4, r5, lr}
 8006178:	2a00      	cmp	r2, #0
 800617a:	d10c      	bne.n	8006196 <strstr+0x22>
 800617c:	bd30      	pop	{r4, r5, pc}
 800617e:	429a      	cmp	r2, r3
 8006180:	d108      	bne.n	8006194 <strstr+0x20>
 8006182:	2301      	movs	r3, #1
 8006184:	5ccc      	ldrb	r4, [r1, r3]
 8006186:	2c00      	cmp	r4, #0
 8006188:	d0f8      	beq.n	800617c <strstr+0x8>
 800618a:	5cc5      	ldrb	r5, [r0, r3]
 800618c:	42a5      	cmp	r5, r4
 800618e:	d101      	bne.n	8006194 <strstr+0x20>
 8006190:	3301      	adds	r3, #1
 8006192:	e7f7      	b.n	8006184 <strstr+0x10>
 8006194:	3001      	adds	r0, #1
 8006196:	7803      	ldrb	r3, [r0, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1f0      	bne.n	800617e <strstr+0xa>
 800619c:	0018      	movs	r0, r3
 800619e:	e7ed      	b.n	800617c <strstr+0x8>

080061a0 <__errno>:
 80061a0:	4b01      	ldr	r3, [pc, #4]	@ (80061a8 <__errno+0x8>)
 80061a2:	6818      	ldr	r0, [r3, #0]
 80061a4:	4770      	bx	lr
 80061a6:	46c0      	nop			@ (mov r8, r8)
 80061a8:	2000000c 	.word	0x2000000c

080061ac <__libc_init_array>:
 80061ac:	b570      	push	{r4, r5, r6, lr}
 80061ae:	2600      	movs	r6, #0
 80061b0:	4c0c      	ldr	r4, [pc, #48]	@ (80061e4 <__libc_init_array+0x38>)
 80061b2:	4d0d      	ldr	r5, [pc, #52]	@ (80061e8 <__libc_init_array+0x3c>)
 80061b4:	1b64      	subs	r4, r4, r5
 80061b6:	10a4      	asrs	r4, r4, #2
 80061b8:	42a6      	cmp	r6, r4
 80061ba:	d109      	bne.n	80061d0 <__libc_init_array+0x24>
 80061bc:	2600      	movs	r6, #0
 80061be:	f000 fc61 	bl	8006a84 <_init>
 80061c2:	4c0a      	ldr	r4, [pc, #40]	@ (80061ec <__libc_init_array+0x40>)
 80061c4:	4d0a      	ldr	r5, [pc, #40]	@ (80061f0 <__libc_init_array+0x44>)
 80061c6:	1b64      	subs	r4, r4, r5
 80061c8:	10a4      	asrs	r4, r4, #2
 80061ca:	42a6      	cmp	r6, r4
 80061cc:	d105      	bne.n	80061da <__libc_init_array+0x2e>
 80061ce:	bd70      	pop	{r4, r5, r6, pc}
 80061d0:	00b3      	lsls	r3, r6, #2
 80061d2:	58eb      	ldr	r3, [r5, r3]
 80061d4:	4798      	blx	r3
 80061d6:	3601      	adds	r6, #1
 80061d8:	e7ee      	b.n	80061b8 <__libc_init_array+0xc>
 80061da:	00b3      	lsls	r3, r6, #2
 80061dc:	58eb      	ldr	r3, [r5, r3]
 80061de:	4798      	blx	r3
 80061e0:	3601      	adds	r6, #1
 80061e2:	e7f2      	b.n	80061ca <__libc_init_array+0x1e>
 80061e4:	08006df4 	.word	0x08006df4
 80061e8:	08006df4 	.word	0x08006df4
 80061ec:	08006df8 	.word	0x08006df8
 80061f0:	08006df4 	.word	0x08006df4

080061f4 <__retarget_lock_acquire_recursive>:
 80061f4:	4770      	bx	lr

080061f6 <__retarget_lock_release_recursive>:
 80061f6:	4770      	bx	lr

080061f8 <_free_r>:
 80061f8:	b570      	push	{r4, r5, r6, lr}
 80061fa:	0005      	movs	r5, r0
 80061fc:	1e0c      	subs	r4, r1, #0
 80061fe:	d010      	beq.n	8006222 <_free_r+0x2a>
 8006200:	3c04      	subs	r4, #4
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	da00      	bge.n	800620a <_free_r+0x12>
 8006208:	18e4      	adds	r4, r4, r3
 800620a:	0028      	movs	r0, r5
 800620c:	f000 f8e0 	bl	80063d0 <__malloc_lock>
 8006210:	4a1d      	ldr	r2, [pc, #116]	@ (8006288 <_free_r+0x90>)
 8006212:	6813      	ldr	r3, [r2, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <_free_r+0x2c>
 8006218:	6063      	str	r3, [r4, #4]
 800621a:	6014      	str	r4, [r2, #0]
 800621c:	0028      	movs	r0, r5
 800621e:	f000 f8df 	bl	80063e0 <__malloc_unlock>
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	42a3      	cmp	r3, r4
 8006226:	d908      	bls.n	800623a <_free_r+0x42>
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	1821      	adds	r1, r4, r0
 800622c:	428b      	cmp	r3, r1
 800622e:	d1f3      	bne.n	8006218 <_free_r+0x20>
 8006230:	6819      	ldr	r1, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	1809      	adds	r1, r1, r0
 8006236:	6021      	str	r1, [r4, #0]
 8006238:	e7ee      	b.n	8006218 <_free_r+0x20>
 800623a:	001a      	movs	r2, r3
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <_free_r+0x4e>
 8006242:	42a3      	cmp	r3, r4
 8006244:	d9f9      	bls.n	800623a <_free_r+0x42>
 8006246:	6811      	ldr	r1, [r2, #0]
 8006248:	1850      	adds	r0, r2, r1
 800624a:	42a0      	cmp	r0, r4
 800624c:	d10b      	bne.n	8006266 <_free_r+0x6e>
 800624e:	6820      	ldr	r0, [r4, #0]
 8006250:	1809      	adds	r1, r1, r0
 8006252:	1850      	adds	r0, r2, r1
 8006254:	6011      	str	r1, [r2, #0]
 8006256:	4283      	cmp	r3, r0
 8006258:	d1e0      	bne.n	800621c <_free_r+0x24>
 800625a:	6818      	ldr	r0, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	1841      	adds	r1, r0, r1
 8006260:	6011      	str	r1, [r2, #0]
 8006262:	6053      	str	r3, [r2, #4]
 8006264:	e7da      	b.n	800621c <_free_r+0x24>
 8006266:	42a0      	cmp	r0, r4
 8006268:	d902      	bls.n	8006270 <_free_r+0x78>
 800626a:	230c      	movs	r3, #12
 800626c:	602b      	str	r3, [r5, #0]
 800626e:	e7d5      	b.n	800621c <_free_r+0x24>
 8006270:	6820      	ldr	r0, [r4, #0]
 8006272:	1821      	adds	r1, r4, r0
 8006274:	428b      	cmp	r3, r1
 8006276:	d103      	bne.n	8006280 <_free_r+0x88>
 8006278:	6819      	ldr	r1, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	1809      	adds	r1, r1, r0
 800627e:	6021      	str	r1, [r4, #0]
 8006280:	6063      	str	r3, [r4, #4]
 8006282:	6054      	str	r4, [r2, #4]
 8006284:	e7ca      	b.n	800621c <_free_r+0x24>
 8006286:	46c0      	nop			@ (mov r8, r8)
 8006288:	200003c4 	.word	0x200003c4

0800628c <sbrk_aligned>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	4e0f      	ldr	r6, [pc, #60]	@ (80062cc <sbrk_aligned+0x40>)
 8006290:	000d      	movs	r5, r1
 8006292:	6831      	ldr	r1, [r6, #0]
 8006294:	0004      	movs	r4, r0
 8006296:	2900      	cmp	r1, #0
 8006298:	d102      	bne.n	80062a0 <sbrk_aligned+0x14>
 800629a:	f000 fb95 	bl	80069c8 <_sbrk_r>
 800629e:	6030      	str	r0, [r6, #0]
 80062a0:	0029      	movs	r1, r5
 80062a2:	0020      	movs	r0, r4
 80062a4:	f000 fb90 	bl	80069c8 <_sbrk_r>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d103      	bne.n	80062b4 <sbrk_aligned+0x28>
 80062ac:	2501      	movs	r5, #1
 80062ae:	426d      	negs	r5, r5
 80062b0:	0028      	movs	r0, r5
 80062b2:	bd70      	pop	{r4, r5, r6, pc}
 80062b4:	2303      	movs	r3, #3
 80062b6:	1cc5      	adds	r5, r0, #3
 80062b8:	439d      	bics	r5, r3
 80062ba:	42a8      	cmp	r0, r5
 80062bc:	d0f8      	beq.n	80062b0 <sbrk_aligned+0x24>
 80062be:	1a29      	subs	r1, r5, r0
 80062c0:	0020      	movs	r0, r4
 80062c2:	f000 fb81 	bl	80069c8 <_sbrk_r>
 80062c6:	3001      	adds	r0, #1
 80062c8:	d1f2      	bne.n	80062b0 <sbrk_aligned+0x24>
 80062ca:	e7ef      	b.n	80062ac <sbrk_aligned+0x20>
 80062cc:	200003c0 	.word	0x200003c0

080062d0 <_malloc_r>:
 80062d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062d2:	2203      	movs	r2, #3
 80062d4:	1ccb      	adds	r3, r1, #3
 80062d6:	4393      	bics	r3, r2
 80062d8:	3308      	adds	r3, #8
 80062da:	0005      	movs	r5, r0
 80062dc:	001f      	movs	r7, r3
 80062de:	2b0c      	cmp	r3, #12
 80062e0:	d234      	bcs.n	800634c <_malloc_r+0x7c>
 80062e2:	270c      	movs	r7, #12
 80062e4:	42b9      	cmp	r1, r7
 80062e6:	d833      	bhi.n	8006350 <_malloc_r+0x80>
 80062e8:	0028      	movs	r0, r5
 80062ea:	f000 f871 	bl	80063d0 <__malloc_lock>
 80062ee:	4e37      	ldr	r6, [pc, #220]	@ (80063cc <_malloc_r+0xfc>)
 80062f0:	6833      	ldr	r3, [r6, #0]
 80062f2:	001c      	movs	r4, r3
 80062f4:	2c00      	cmp	r4, #0
 80062f6:	d12f      	bne.n	8006358 <_malloc_r+0x88>
 80062f8:	0039      	movs	r1, r7
 80062fa:	0028      	movs	r0, r5
 80062fc:	f7ff ffc6 	bl	800628c <sbrk_aligned>
 8006300:	0004      	movs	r4, r0
 8006302:	1c43      	adds	r3, r0, #1
 8006304:	d15f      	bne.n	80063c6 <_malloc_r+0xf6>
 8006306:	6834      	ldr	r4, [r6, #0]
 8006308:	9400      	str	r4, [sp, #0]
 800630a:	9b00      	ldr	r3, [sp, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d14a      	bne.n	80063a6 <_malloc_r+0xd6>
 8006310:	2c00      	cmp	r4, #0
 8006312:	d052      	beq.n	80063ba <_malloc_r+0xea>
 8006314:	6823      	ldr	r3, [r4, #0]
 8006316:	0028      	movs	r0, r5
 8006318:	18e3      	adds	r3, r4, r3
 800631a:	9900      	ldr	r1, [sp, #0]
 800631c:	9301      	str	r3, [sp, #4]
 800631e:	f000 fb53 	bl	80069c8 <_sbrk_r>
 8006322:	9b01      	ldr	r3, [sp, #4]
 8006324:	4283      	cmp	r3, r0
 8006326:	d148      	bne.n	80063ba <_malloc_r+0xea>
 8006328:	6823      	ldr	r3, [r4, #0]
 800632a:	0028      	movs	r0, r5
 800632c:	1aff      	subs	r7, r7, r3
 800632e:	0039      	movs	r1, r7
 8006330:	f7ff ffac 	bl	800628c <sbrk_aligned>
 8006334:	3001      	adds	r0, #1
 8006336:	d040      	beq.n	80063ba <_malloc_r+0xea>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	19db      	adds	r3, r3, r7
 800633c:	6023      	str	r3, [r4, #0]
 800633e:	6833      	ldr	r3, [r6, #0]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	2a00      	cmp	r2, #0
 8006344:	d133      	bne.n	80063ae <_malloc_r+0xde>
 8006346:	9b00      	ldr	r3, [sp, #0]
 8006348:	6033      	str	r3, [r6, #0]
 800634a:	e019      	b.n	8006380 <_malloc_r+0xb0>
 800634c:	2b00      	cmp	r3, #0
 800634e:	dac9      	bge.n	80062e4 <_malloc_r+0x14>
 8006350:	230c      	movs	r3, #12
 8006352:	602b      	str	r3, [r5, #0]
 8006354:	2000      	movs	r0, #0
 8006356:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006358:	6821      	ldr	r1, [r4, #0]
 800635a:	1bc9      	subs	r1, r1, r7
 800635c:	d420      	bmi.n	80063a0 <_malloc_r+0xd0>
 800635e:	290b      	cmp	r1, #11
 8006360:	d90a      	bls.n	8006378 <_malloc_r+0xa8>
 8006362:	19e2      	adds	r2, r4, r7
 8006364:	6027      	str	r7, [r4, #0]
 8006366:	42a3      	cmp	r3, r4
 8006368:	d104      	bne.n	8006374 <_malloc_r+0xa4>
 800636a:	6032      	str	r2, [r6, #0]
 800636c:	6863      	ldr	r3, [r4, #4]
 800636e:	6011      	str	r1, [r2, #0]
 8006370:	6053      	str	r3, [r2, #4]
 8006372:	e005      	b.n	8006380 <_malloc_r+0xb0>
 8006374:	605a      	str	r2, [r3, #4]
 8006376:	e7f9      	b.n	800636c <_malloc_r+0x9c>
 8006378:	6862      	ldr	r2, [r4, #4]
 800637a:	42a3      	cmp	r3, r4
 800637c:	d10e      	bne.n	800639c <_malloc_r+0xcc>
 800637e:	6032      	str	r2, [r6, #0]
 8006380:	0028      	movs	r0, r5
 8006382:	f000 f82d 	bl	80063e0 <__malloc_unlock>
 8006386:	0020      	movs	r0, r4
 8006388:	2207      	movs	r2, #7
 800638a:	300b      	adds	r0, #11
 800638c:	1d23      	adds	r3, r4, #4
 800638e:	4390      	bics	r0, r2
 8006390:	1ac2      	subs	r2, r0, r3
 8006392:	4298      	cmp	r0, r3
 8006394:	d0df      	beq.n	8006356 <_malloc_r+0x86>
 8006396:	1a1b      	subs	r3, r3, r0
 8006398:	50a3      	str	r3, [r4, r2]
 800639a:	e7dc      	b.n	8006356 <_malloc_r+0x86>
 800639c:	605a      	str	r2, [r3, #4]
 800639e:	e7ef      	b.n	8006380 <_malloc_r+0xb0>
 80063a0:	0023      	movs	r3, r4
 80063a2:	6864      	ldr	r4, [r4, #4]
 80063a4:	e7a6      	b.n	80062f4 <_malloc_r+0x24>
 80063a6:	9c00      	ldr	r4, [sp, #0]
 80063a8:	6863      	ldr	r3, [r4, #4]
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	e7ad      	b.n	800630a <_malloc_r+0x3a>
 80063ae:	001a      	movs	r2, r3
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	42a3      	cmp	r3, r4
 80063b4:	d1fb      	bne.n	80063ae <_malloc_r+0xde>
 80063b6:	2300      	movs	r3, #0
 80063b8:	e7da      	b.n	8006370 <_malloc_r+0xa0>
 80063ba:	230c      	movs	r3, #12
 80063bc:	0028      	movs	r0, r5
 80063be:	602b      	str	r3, [r5, #0]
 80063c0:	f000 f80e 	bl	80063e0 <__malloc_unlock>
 80063c4:	e7c6      	b.n	8006354 <_malloc_r+0x84>
 80063c6:	6007      	str	r7, [r0, #0]
 80063c8:	e7da      	b.n	8006380 <_malloc_r+0xb0>
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	200003c4 	.word	0x200003c4

080063d0 <__malloc_lock>:
 80063d0:	b510      	push	{r4, lr}
 80063d2:	4802      	ldr	r0, [pc, #8]	@ (80063dc <__malloc_lock+0xc>)
 80063d4:	f7ff ff0e 	bl	80061f4 <__retarget_lock_acquire_recursive>
 80063d8:	bd10      	pop	{r4, pc}
 80063da:	46c0      	nop			@ (mov r8, r8)
 80063dc:	200003bc 	.word	0x200003bc

080063e0 <__malloc_unlock>:
 80063e0:	b510      	push	{r4, lr}
 80063e2:	4802      	ldr	r0, [pc, #8]	@ (80063ec <__malloc_unlock+0xc>)
 80063e4:	f7ff ff07 	bl	80061f6 <__retarget_lock_release_recursive>
 80063e8:	bd10      	pop	{r4, pc}
 80063ea:	46c0      	nop			@ (mov r8, r8)
 80063ec:	200003bc 	.word	0x200003bc

080063f0 <__ssputs_r>:
 80063f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063f2:	688e      	ldr	r6, [r1, #8]
 80063f4:	b085      	sub	sp, #20
 80063f6:	001f      	movs	r7, r3
 80063f8:	000c      	movs	r4, r1
 80063fa:	680b      	ldr	r3, [r1, #0]
 80063fc:	9002      	str	r0, [sp, #8]
 80063fe:	9203      	str	r2, [sp, #12]
 8006400:	42be      	cmp	r6, r7
 8006402:	d830      	bhi.n	8006466 <__ssputs_r+0x76>
 8006404:	210c      	movs	r1, #12
 8006406:	5e62      	ldrsh	r2, [r4, r1]
 8006408:	2190      	movs	r1, #144	@ 0x90
 800640a:	00c9      	lsls	r1, r1, #3
 800640c:	420a      	tst	r2, r1
 800640e:	d028      	beq.n	8006462 <__ssputs_r+0x72>
 8006410:	2003      	movs	r0, #3
 8006412:	6921      	ldr	r1, [r4, #16]
 8006414:	1a5b      	subs	r3, r3, r1
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	6963      	ldr	r3, [r4, #20]
 800641a:	4343      	muls	r3, r0
 800641c:	9801      	ldr	r0, [sp, #4]
 800641e:	0fdd      	lsrs	r5, r3, #31
 8006420:	18ed      	adds	r5, r5, r3
 8006422:	1c7b      	adds	r3, r7, #1
 8006424:	181b      	adds	r3, r3, r0
 8006426:	106d      	asrs	r5, r5, #1
 8006428:	42ab      	cmp	r3, r5
 800642a:	d900      	bls.n	800642e <__ssputs_r+0x3e>
 800642c:	001d      	movs	r5, r3
 800642e:	0552      	lsls	r2, r2, #21
 8006430:	d528      	bpl.n	8006484 <__ssputs_r+0x94>
 8006432:	0029      	movs	r1, r5
 8006434:	9802      	ldr	r0, [sp, #8]
 8006436:	f7ff ff4b 	bl	80062d0 <_malloc_r>
 800643a:	1e06      	subs	r6, r0, #0
 800643c:	d02c      	beq.n	8006498 <__ssputs_r+0xa8>
 800643e:	9a01      	ldr	r2, [sp, #4]
 8006440:	6921      	ldr	r1, [r4, #16]
 8006442:	f000 fade 	bl	8006a02 <memcpy>
 8006446:	89a2      	ldrh	r2, [r4, #12]
 8006448:	4b18      	ldr	r3, [pc, #96]	@ (80064ac <__ssputs_r+0xbc>)
 800644a:	401a      	ands	r2, r3
 800644c:	2380      	movs	r3, #128	@ 0x80
 800644e:	4313      	orrs	r3, r2
 8006450:	81a3      	strh	r3, [r4, #12]
 8006452:	9b01      	ldr	r3, [sp, #4]
 8006454:	6126      	str	r6, [r4, #16]
 8006456:	18f6      	adds	r6, r6, r3
 8006458:	6026      	str	r6, [r4, #0]
 800645a:	003e      	movs	r6, r7
 800645c:	6165      	str	r5, [r4, #20]
 800645e:	1aed      	subs	r5, r5, r3
 8006460:	60a5      	str	r5, [r4, #8]
 8006462:	42be      	cmp	r6, r7
 8006464:	d900      	bls.n	8006468 <__ssputs_r+0x78>
 8006466:	003e      	movs	r6, r7
 8006468:	0032      	movs	r2, r6
 800646a:	9903      	ldr	r1, [sp, #12]
 800646c:	6820      	ldr	r0, [r4, #0]
 800646e:	f000 fa99 	bl	80069a4 <memmove>
 8006472:	2000      	movs	r0, #0
 8006474:	68a3      	ldr	r3, [r4, #8]
 8006476:	1b9b      	subs	r3, r3, r6
 8006478:	60a3      	str	r3, [r4, #8]
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	199b      	adds	r3, r3, r6
 800647e:	6023      	str	r3, [r4, #0]
 8006480:	b005      	add	sp, #20
 8006482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006484:	002a      	movs	r2, r5
 8006486:	9802      	ldr	r0, [sp, #8]
 8006488:	f000 fac4 	bl	8006a14 <_realloc_r>
 800648c:	1e06      	subs	r6, r0, #0
 800648e:	d1e0      	bne.n	8006452 <__ssputs_r+0x62>
 8006490:	6921      	ldr	r1, [r4, #16]
 8006492:	9802      	ldr	r0, [sp, #8]
 8006494:	f7ff feb0 	bl	80061f8 <_free_r>
 8006498:	230c      	movs	r3, #12
 800649a:	2001      	movs	r0, #1
 800649c:	9a02      	ldr	r2, [sp, #8]
 800649e:	4240      	negs	r0, r0
 80064a0:	6013      	str	r3, [r2, #0]
 80064a2:	89a2      	ldrh	r2, [r4, #12]
 80064a4:	3334      	adds	r3, #52	@ 0x34
 80064a6:	4313      	orrs	r3, r2
 80064a8:	81a3      	strh	r3, [r4, #12]
 80064aa:	e7e9      	b.n	8006480 <__ssputs_r+0x90>
 80064ac:	fffffb7f 	.word	0xfffffb7f

080064b0 <_svfiprintf_r>:
 80064b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064b2:	b0a1      	sub	sp, #132	@ 0x84
 80064b4:	9003      	str	r0, [sp, #12]
 80064b6:	001d      	movs	r5, r3
 80064b8:	898b      	ldrh	r3, [r1, #12]
 80064ba:	000f      	movs	r7, r1
 80064bc:	0016      	movs	r6, r2
 80064be:	061b      	lsls	r3, r3, #24
 80064c0:	d511      	bpl.n	80064e6 <_svfiprintf_r+0x36>
 80064c2:	690b      	ldr	r3, [r1, #16]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d10e      	bne.n	80064e6 <_svfiprintf_r+0x36>
 80064c8:	2140      	movs	r1, #64	@ 0x40
 80064ca:	f7ff ff01 	bl	80062d0 <_malloc_r>
 80064ce:	6038      	str	r0, [r7, #0]
 80064d0:	6138      	str	r0, [r7, #16]
 80064d2:	2800      	cmp	r0, #0
 80064d4:	d105      	bne.n	80064e2 <_svfiprintf_r+0x32>
 80064d6:	230c      	movs	r3, #12
 80064d8:	9a03      	ldr	r2, [sp, #12]
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	2001      	movs	r0, #1
 80064de:	4240      	negs	r0, r0
 80064e0:	e0cf      	b.n	8006682 <_svfiprintf_r+0x1d2>
 80064e2:	2340      	movs	r3, #64	@ 0x40
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	2300      	movs	r3, #0
 80064e8:	ac08      	add	r4, sp, #32
 80064ea:	6163      	str	r3, [r4, #20]
 80064ec:	3320      	adds	r3, #32
 80064ee:	7663      	strb	r3, [r4, #25]
 80064f0:	3310      	adds	r3, #16
 80064f2:	76a3      	strb	r3, [r4, #26]
 80064f4:	9507      	str	r5, [sp, #28]
 80064f6:	0035      	movs	r5, r6
 80064f8:	782b      	ldrb	r3, [r5, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d001      	beq.n	8006502 <_svfiprintf_r+0x52>
 80064fe:	2b25      	cmp	r3, #37	@ 0x25
 8006500:	d148      	bne.n	8006594 <_svfiprintf_r+0xe4>
 8006502:	1bab      	subs	r3, r5, r6
 8006504:	9305      	str	r3, [sp, #20]
 8006506:	42b5      	cmp	r5, r6
 8006508:	d00b      	beq.n	8006522 <_svfiprintf_r+0x72>
 800650a:	0032      	movs	r2, r6
 800650c:	0039      	movs	r1, r7
 800650e:	9803      	ldr	r0, [sp, #12]
 8006510:	f7ff ff6e 	bl	80063f0 <__ssputs_r>
 8006514:	3001      	adds	r0, #1
 8006516:	d100      	bne.n	800651a <_svfiprintf_r+0x6a>
 8006518:	e0ae      	b.n	8006678 <_svfiprintf_r+0x1c8>
 800651a:	6963      	ldr	r3, [r4, #20]
 800651c:	9a05      	ldr	r2, [sp, #20]
 800651e:	189b      	adds	r3, r3, r2
 8006520:	6163      	str	r3, [r4, #20]
 8006522:	782b      	ldrb	r3, [r5, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d100      	bne.n	800652a <_svfiprintf_r+0x7a>
 8006528:	e0a6      	b.n	8006678 <_svfiprintf_r+0x1c8>
 800652a:	2201      	movs	r2, #1
 800652c:	2300      	movs	r3, #0
 800652e:	4252      	negs	r2, r2
 8006530:	6062      	str	r2, [r4, #4]
 8006532:	a904      	add	r1, sp, #16
 8006534:	3254      	adds	r2, #84	@ 0x54
 8006536:	1852      	adds	r2, r2, r1
 8006538:	1c6e      	adds	r6, r5, #1
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	60e3      	str	r3, [r4, #12]
 800653e:	60a3      	str	r3, [r4, #8]
 8006540:	7013      	strb	r3, [r2, #0]
 8006542:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006544:	4b54      	ldr	r3, [pc, #336]	@ (8006698 <_svfiprintf_r+0x1e8>)
 8006546:	2205      	movs	r2, #5
 8006548:	0018      	movs	r0, r3
 800654a:	7831      	ldrb	r1, [r6, #0]
 800654c:	9305      	str	r3, [sp, #20]
 800654e:	f000 fa4d 	bl	80069ec <memchr>
 8006552:	1c75      	adds	r5, r6, #1
 8006554:	2800      	cmp	r0, #0
 8006556:	d11f      	bne.n	8006598 <_svfiprintf_r+0xe8>
 8006558:	6822      	ldr	r2, [r4, #0]
 800655a:	06d3      	lsls	r3, r2, #27
 800655c:	d504      	bpl.n	8006568 <_svfiprintf_r+0xb8>
 800655e:	2353      	movs	r3, #83	@ 0x53
 8006560:	a904      	add	r1, sp, #16
 8006562:	185b      	adds	r3, r3, r1
 8006564:	2120      	movs	r1, #32
 8006566:	7019      	strb	r1, [r3, #0]
 8006568:	0713      	lsls	r3, r2, #28
 800656a:	d504      	bpl.n	8006576 <_svfiprintf_r+0xc6>
 800656c:	2353      	movs	r3, #83	@ 0x53
 800656e:	a904      	add	r1, sp, #16
 8006570:	185b      	adds	r3, r3, r1
 8006572:	212b      	movs	r1, #43	@ 0x2b
 8006574:	7019      	strb	r1, [r3, #0]
 8006576:	7833      	ldrb	r3, [r6, #0]
 8006578:	2b2a      	cmp	r3, #42	@ 0x2a
 800657a:	d016      	beq.n	80065aa <_svfiprintf_r+0xfa>
 800657c:	0035      	movs	r5, r6
 800657e:	2100      	movs	r1, #0
 8006580:	200a      	movs	r0, #10
 8006582:	68e3      	ldr	r3, [r4, #12]
 8006584:	782a      	ldrb	r2, [r5, #0]
 8006586:	1c6e      	adds	r6, r5, #1
 8006588:	3a30      	subs	r2, #48	@ 0x30
 800658a:	2a09      	cmp	r2, #9
 800658c:	d950      	bls.n	8006630 <_svfiprintf_r+0x180>
 800658e:	2900      	cmp	r1, #0
 8006590:	d111      	bne.n	80065b6 <_svfiprintf_r+0x106>
 8006592:	e017      	b.n	80065c4 <_svfiprintf_r+0x114>
 8006594:	3501      	adds	r5, #1
 8006596:	e7af      	b.n	80064f8 <_svfiprintf_r+0x48>
 8006598:	9b05      	ldr	r3, [sp, #20]
 800659a:	6822      	ldr	r2, [r4, #0]
 800659c:	1ac0      	subs	r0, r0, r3
 800659e:	2301      	movs	r3, #1
 80065a0:	4083      	lsls	r3, r0
 80065a2:	4313      	orrs	r3, r2
 80065a4:	002e      	movs	r6, r5
 80065a6:	6023      	str	r3, [r4, #0]
 80065a8:	e7cc      	b.n	8006544 <_svfiprintf_r+0x94>
 80065aa:	9b07      	ldr	r3, [sp, #28]
 80065ac:	1d19      	adds	r1, r3, #4
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	9107      	str	r1, [sp, #28]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	db01      	blt.n	80065ba <_svfiprintf_r+0x10a>
 80065b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065b8:	e004      	b.n	80065c4 <_svfiprintf_r+0x114>
 80065ba:	425b      	negs	r3, r3
 80065bc:	60e3      	str	r3, [r4, #12]
 80065be:	2302      	movs	r3, #2
 80065c0:	4313      	orrs	r3, r2
 80065c2:	6023      	str	r3, [r4, #0]
 80065c4:	782b      	ldrb	r3, [r5, #0]
 80065c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80065c8:	d10c      	bne.n	80065e4 <_svfiprintf_r+0x134>
 80065ca:	786b      	ldrb	r3, [r5, #1]
 80065cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80065ce:	d134      	bne.n	800663a <_svfiprintf_r+0x18a>
 80065d0:	9b07      	ldr	r3, [sp, #28]
 80065d2:	3502      	adds	r5, #2
 80065d4:	1d1a      	adds	r2, r3, #4
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	9207      	str	r2, [sp, #28]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	da01      	bge.n	80065e2 <_svfiprintf_r+0x132>
 80065de:	2301      	movs	r3, #1
 80065e0:	425b      	negs	r3, r3
 80065e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80065e4:	4e2d      	ldr	r6, [pc, #180]	@ (800669c <_svfiprintf_r+0x1ec>)
 80065e6:	2203      	movs	r2, #3
 80065e8:	0030      	movs	r0, r6
 80065ea:	7829      	ldrb	r1, [r5, #0]
 80065ec:	f000 f9fe 	bl	80069ec <memchr>
 80065f0:	2800      	cmp	r0, #0
 80065f2:	d006      	beq.n	8006602 <_svfiprintf_r+0x152>
 80065f4:	2340      	movs	r3, #64	@ 0x40
 80065f6:	1b80      	subs	r0, r0, r6
 80065f8:	4083      	lsls	r3, r0
 80065fa:	6822      	ldr	r2, [r4, #0]
 80065fc:	3501      	adds	r5, #1
 80065fe:	4313      	orrs	r3, r2
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	7829      	ldrb	r1, [r5, #0]
 8006604:	2206      	movs	r2, #6
 8006606:	4826      	ldr	r0, [pc, #152]	@ (80066a0 <_svfiprintf_r+0x1f0>)
 8006608:	1c6e      	adds	r6, r5, #1
 800660a:	7621      	strb	r1, [r4, #24]
 800660c:	f000 f9ee 	bl	80069ec <memchr>
 8006610:	2800      	cmp	r0, #0
 8006612:	d038      	beq.n	8006686 <_svfiprintf_r+0x1d6>
 8006614:	4b23      	ldr	r3, [pc, #140]	@ (80066a4 <_svfiprintf_r+0x1f4>)
 8006616:	2b00      	cmp	r3, #0
 8006618:	d122      	bne.n	8006660 <_svfiprintf_r+0x1b0>
 800661a:	2207      	movs	r2, #7
 800661c:	9b07      	ldr	r3, [sp, #28]
 800661e:	3307      	adds	r3, #7
 8006620:	4393      	bics	r3, r2
 8006622:	3308      	adds	r3, #8
 8006624:	9307      	str	r3, [sp, #28]
 8006626:	6963      	ldr	r3, [r4, #20]
 8006628:	9a04      	ldr	r2, [sp, #16]
 800662a:	189b      	adds	r3, r3, r2
 800662c:	6163      	str	r3, [r4, #20]
 800662e:	e762      	b.n	80064f6 <_svfiprintf_r+0x46>
 8006630:	4343      	muls	r3, r0
 8006632:	0035      	movs	r5, r6
 8006634:	2101      	movs	r1, #1
 8006636:	189b      	adds	r3, r3, r2
 8006638:	e7a4      	b.n	8006584 <_svfiprintf_r+0xd4>
 800663a:	2300      	movs	r3, #0
 800663c:	200a      	movs	r0, #10
 800663e:	0019      	movs	r1, r3
 8006640:	3501      	adds	r5, #1
 8006642:	6063      	str	r3, [r4, #4]
 8006644:	782a      	ldrb	r2, [r5, #0]
 8006646:	1c6e      	adds	r6, r5, #1
 8006648:	3a30      	subs	r2, #48	@ 0x30
 800664a:	2a09      	cmp	r2, #9
 800664c:	d903      	bls.n	8006656 <_svfiprintf_r+0x1a6>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0c8      	beq.n	80065e4 <_svfiprintf_r+0x134>
 8006652:	9109      	str	r1, [sp, #36]	@ 0x24
 8006654:	e7c6      	b.n	80065e4 <_svfiprintf_r+0x134>
 8006656:	4341      	muls	r1, r0
 8006658:	0035      	movs	r5, r6
 800665a:	2301      	movs	r3, #1
 800665c:	1889      	adds	r1, r1, r2
 800665e:	e7f1      	b.n	8006644 <_svfiprintf_r+0x194>
 8006660:	aa07      	add	r2, sp, #28
 8006662:	9200      	str	r2, [sp, #0]
 8006664:	0021      	movs	r1, r4
 8006666:	003a      	movs	r2, r7
 8006668:	4b0f      	ldr	r3, [pc, #60]	@ (80066a8 <_svfiprintf_r+0x1f8>)
 800666a:	9803      	ldr	r0, [sp, #12]
 800666c:	e000      	b.n	8006670 <_svfiprintf_r+0x1c0>
 800666e:	bf00      	nop
 8006670:	9004      	str	r0, [sp, #16]
 8006672:	9b04      	ldr	r3, [sp, #16]
 8006674:	3301      	adds	r3, #1
 8006676:	d1d6      	bne.n	8006626 <_svfiprintf_r+0x176>
 8006678:	89bb      	ldrh	r3, [r7, #12]
 800667a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800667c:	065b      	lsls	r3, r3, #25
 800667e:	d500      	bpl.n	8006682 <_svfiprintf_r+0x1d2>
 8006680:	e72c      	b.n	80064dc <_svfiprintf_r+0x2c>
 8006682:	b021      	add	sp, #132	@ 0x84
 8006684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006686:	aa07      	add	r2, sp, #28
 8006688:	9200      	str	r2, [sp, #0]
 800668a:	0021      	movs	r1, r4
 800668c:	003a      	movs	r2, r7
 800668e:	4b06      	ldr	r3, [pc, #24]	@ (80066a8 <_svfiprintf_r+0x1f8>)
 8006690:	9803      	ldr	r0, [sp, #12]
 8006692:	f000 f87b 	bl	800678c <_printf_i>
 8006696:	e7eb      	b.n	8006670 <_svfiprintf_r+0x1c0>
 8006698:	08006db8 	.word	0x08006db8
 800669c:	08006dbe 	.word	0x08006dbe
 80066a0:	08006dc2 	.word	0x08006dc2
 80066a4:	00000000 	.word	0x00000000
 80066a8:	080063f1 	.word	0x080063f1

080066ac <_printf_common>:
 80066ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066ae:	0016      	movs	r6, r2
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	688a      	ldr	r2, [r1, #8]
 80066b4:	690b      	ldr	r3, [r1, #16]
 80066b6:	000c      	movs	r4, r1
 80066b8:	9000      	str	r0, [sp, #0]
 80066ba:	4293      	cmp	r3, r2
 80066bc:	da00      	bge.n	80066c0 <_printf_common+0x14>
 80066be:	0013      	movs	r3, r2
 80066c0:	0022      	movs	r2, r4
 80066c2:	6033      	str	r3, [r6, #0]
 80066c4:	3243      	adds	r2, #67	@ 0x43
 80066c6:	7812      	ldrb	r2, [r2, #0]
 80066c8:	2a00      	cmp	r2, #0
 80066ca:	d001      	beq.n	80066d0 <_printf_common+0x24>
 80066cc:	3301      	adds	r3, #1
 80066ce:	6033      	str	r3, [r6, #0]
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	069b      	lsls	r3, r3, #26
 80066d4:	d502      	bpl.n	80066dc <_printf_common+0x30>
 80066d6:	6833      	ldr	r3, [r6, #0]
 80066d8:	3302      	adds	r3, #2
 80066da:	6033      	str	r3, [r6, #0]
 80066dc:	6822      	ldr	r2, [r4, #0]
 80066de:	2306      	movs	r3, #6
 80066e0:	0015      	movs	r5, r2
 80066e2:	401d      	ands	r5, r3
 80066e4:	421a      	tst	r2, r3
 80066e6:	d027      	beq.n	8006738 <_printf_common+0x8c>
 80066e8:	0023      	movs	r3, r4
 80066ea:	3343      	adds	r3, #67	@ 0x43
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	1e5a      	subs	r2, r3, #1
 80066f0:	4193      	sbcs	r3, r2
 80066f2:	6822      	ldr	r2, [r4, #0]
 80066f4:	0692      	lsls	r2, r2, #26
 80066f6:	d430      	bmi.n	800675a <_printf_common+0xae>
 80066f8:	0022      	movs	r2, r4
 80066fa:	9901      	ldr	r1, [sp, #4]
 80066fc:	9800      	ldr	r0, [sp, #0]
 80066fe:	9d08      	ldr	r5, [sp, #32]
 8006700:	3243      	adds	r2, #67	@ 0x43
 8006702:	47a8      	blx	r5
 8006704:	3001      	adds	r0, #1
 8006706:	d025      	beq.n	8006754 <_printf_common+0xa8>
 8006708:	2206      	movs	r2, #6
 800670a:	6823      	ldr	r3, [r4, #0]
 800670c:	2500      	movs	r5, #0
 800670e:	4013      	ands	r3, r2
 8006710:	2b04      	cmp	r3, #4
 8006712:	d105      	bne.n	8006720 <_printf_common+0x74>
 8006714:	6833      	ldr	r3, [r6, #0]
 8006716:	68e5      	ldr	r5, [r4, #12]
 8006718:	1aed      	subs	r5, r5, r3
 800671a:	43eb      	mvns	r3, r5
 800671c:	17db      	asrs	r3, r3, #31
 800671e:	401d      	ands	r5, r3
 8006720:	68a3      	ldr	r3, [r4, #8]
 8006722:	6922      	ldr	r2, [r4, #16]
 8006724:	4293      	cmp	r3, r2
 8006726:	dd01      	ble.n	800672c <_printf_common+0x80>
 8006728:	1a9b      	subs	r3, r3, r2
 800672a:	18ed      	adds	r5, r5, r3
 800672c:	2600      	movs	r6, #0
 800672e:	42b5      	cmp	r5, r6
 8006730:	d120      	bne.n	8006774 <_printf_common+0xc8>
 8006732:	2000      	movs	r0, #0
 8006734:	e010      	b.n	8006758 <_printf_common+0xac>
 8006736:	3501      	adds	r5, #1
 8006738:	68e3      	ldr	r3, [r4, #12]
 800673a:	6832      	ldr	r2, [r6, #0]
 800673c:	1a9b      	subs	r3, r3, r2
 800673e:	42ab      	cmp	r3, r5
 8006740:	ddd2      	ble.n	80066e8 <_printf_common+0x3c>
 8006742:	0022      	movs	r2, r4
 8006744:	2301      	movs	r3, #1
 8006746:	9901      	ldr	r1, [sp, #4]
 8006748:	9800      	ldr	r0, [sp, #0]
 800674a:	9f08      	ldr	r7, [sp, #32]
 800674c:	3219      	adds	r2, #25
 800674e:	47b8      	blx	r7
 8006750:	3001      	adds	r0, #1
 8006752:	d1f0      	bne.n	8006736 <_printf_common+0x8a>
 8006754:	2001      	movs	r0, #1
 8006756:	4240      	negs	r0, r0
 8006758:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800675a:	2030      	movs	r0, #48	@ 0x30
 800675c:	18e1      	adds	r1, r4, r3
 800675e:	3143      	adds	r1, #67	@ 0x43
 8006760:	7008      	strb	r0, [r1, #0]
 8006762:	0021      	movs	r1, r4
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	3145      	adds	r1, #69	@ 0x45
 8006768:	7809      	ldrb	r1, [r1, #0]
 800676a:	18a2      	adds	r2, r4, r2
 800676c:	3243      	adds	r2, #67	@ 0x43
 800676e:	3302      	adds	r3, #2
 8006770:	7011      	strb	r1, [r2, #0]
 8006772:	e7c1      	b.n	80066f8 <_printf_common+0x4c>
 8006774:	0022      	movs	r2, r4
 8006776:	2301      	movs	r3, #1
 8006778:	9901      	ldr	r1, [sp, #4]
 800677a:	9800      	ldr	r0, [sp, #0]
 800677c:	9f08      	ldr	r7, [sp, #32]
 800677e:	321a      	adds	r2, #26
 8006780:	47b8      	blx	r7
 8006782:	3001      	adds	r0, #1
 8006784:	d0e6      	beq.n	8006754 <_printf_common+0xa8>
 8006786:	3601      	adds	r6, #1
 8006788:	e7d1      	b.n	800672e <_printf_common+0x82>
	...

0800678c <_printf_i>:
 800678c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800678e:	b08b      	sub	sp, #44	@ 0x2c
 8006790:	9206      	str	r2, [sp, #24]
 8006792:	000a      	movs	r2, r1
 8006794:	3243      	adds	r2, #67	@ 0x43
 8006796:	9307      	str	r3, [sp, #28]
 8006798:	9005      	str	r0, [sp, #20]
 800679a:	9203      	str	r2, [sp, #12]
 800679c:	7e0a      	ldrb	r2, [r1, #24]
 800679e:	000c      	movs	r4, r1
 80067a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80067a2:	2a78      	cmp	r2, #120	@ 0x78
 80067a4:	d809      	bhi.n	80067ba <_printf_i+0x2e>
 80067a6:	2a62      	cmp	r2, #98	@ 0x62
 80067a8:	d80b      	bhi.n	80067c2 <_printf_i+0x36>
 80067aa:	2a00      	cmp	r2, #0
 80067ac:	d100      	bne.n	80067b0 <_printf_i+0x24>
 80067ae:	e0ba      	b.n	8006926 <_printf_i+0x19a>
 80067b0:	497a      	ldr	r1, [pc, #488]	@ (800699c <_printf_i+0x210>)
 80067b2:	9104      	str	r1, [sp, #16]
 80067b4:	2a58      	cmp	r2, #88	@ 0x58
 80067b6:	d100      	bne.n	80067ba <_printf_i+0x2e>
 80067b8:	e08e      	b.n	80068d8 <_printf_i+0x14c>
 80067ba:	0025      	movs	r5, r4
 80067bc:	3542      	adds	r5, #66	@ 0x42
 80067be:	702a      	strb	r2, [r5, #0]
 80067c0:	e022      	b.n	8006808 <_printf_i+0x7c>
 80067c2:	0010      	movs	r0, r2
 80067c4:	3863      	subs	r0, #99	@ 0x63
 80067c6:	2815      	cmp	r0, #21
 80067c8:	d8f7      	bhi.n	80067ba <_printf_i+0x2e>
 80067ca:	f7f9 fca5 	bl	8000118 <__gnu_thumb1_case_shi>
 80067ce:	0016      	.short	0x0016
 80067d0:	fff6001f 	.word	0xfff6001f
 80067d4:	fff6fff6 	.word	0xfff6fff6
 80067d8:	001ffff6 	.word	0x001ffff6
 80067dc:	fff6fff6 	.word	0xfff6fff6
 80067e0:	fff6fff6 	.word	0xfff6fff6
 80067e4:	0036009f 	.word	0x0036009f
 80067e8:	fff6007e 	.word	0xfff6007e
 80067ec:	00b0fff6 	.word	0x00b0fff6
 80067f0:	0036fff6 	.word	0x0036fff6
 80067f4:	fff6fff6 	.word	0xfff6fff6
 80067f8:	0082      	.short	0x0082
 80067fa:	0025      	movs	r5, r4
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	3542      	adds	r5, #66	@ 0x42
 8006800:	1d11      	adds	r1, r2, #4
 8006802:	6019      	str	r1, [r3, #0]
 8006804:	6813      	ldr	r3, [r2, #0]
 8006806:	702b      	strb	r3, [r5, #0]
 8006808:	2301      	movs	r3, #1
 800680a:	e09e      	b.n	800694a <_printf_i+0x1be>
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	6809      	ldr	r1, [r1, #0]
 8006810:	1d02      	adds	r2, r0, #4
 8006812:	060d      	lsls	r5, r1, #24
 8006814:	d50b      	bpl.n	800682e <_printf_i+0xa2>
 8006816:	6806      	ldr	r6, [r0, #0]
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	2e00      	cmp	r6, #0
 800681c:	da03      	bge.n	8006826 <_printf_i+0x9a>
 800681e:	232d      	movs	r3, #45	@ 0x2d
 8006820:	9a03      	ldr	r2, [sp, #12]
 8006822:	4276      	negs	r6, r6
 8006824:	7013      	strb	r3, [r2, #0]
 8006826:	4b5d      	ldr	r3, [pc, #372]	@ (800699c <_printf_i+0x210>)
 8006828:	270a      	movs	r7, #10
 800682a:	9304      	str	r3, [sp, #16]
 800682c:	e018      	b.n	8006860 <_printf_i+0xd4>
 800682e:	6806      	ldr	r6, [r0, #0]
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	0649      	lsls	r1, r1, #25
 8006834:	d5f1      	bpl.n	800681a <_printf_i+0x8e>
 8006836:	b236      	sxth	r6, r6
 8006838:	e7ef      	b.n	800681a <_printf_i+0x8e>
 800683a:	6808      	ldr	r0, [r1, #0]
 800683c:	6819      	ldr	r1, [r3, #0]
 800683e:	c940      	ldmia	r1!, {r6}
 8006840:	0605      	lsls	r5, r0, #24
 8006842:	d402      	bmi.n	800684a <_printf_i+0xbe>
 8006844:	0640      	lsls	r0, r0, #25
 8006846:	d500      	bpl.n	800684a <_printf_i+0xbe>
 8006848:	b2b6      	uxth	r6, r6
 800684a:	6019      	str	r1, [r3, #0]
 800684c:	4b53      	ldr	r3, [pc, #332]	@ (800699c <_printf_i+0x210>)
 800684e:	270a      	movs	r7, #10
 8006850:	9304      	str	r3, [sp, #16]
 8006852:	2a6f      	cmp	r2, #111	@ 0x6f
 8006854:	d100      	bne.n	8006858 <_printf_i+0xcc>
 8006856:	3f02      	subs	r7, #2
 8006858:	0023      	movs	r3, r4
 800685a:	2200      	movs	r2, #0
 800685c:	3343      	adds	r3, #67	@ 0x43
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	6863      	ldr	r3, [r4, #4]
 8006862:	60a3      	str	r3, [r4, #8]
 8006864:	2b00      	cmp	r3, #0
 8006866:	db06      	blt.n	8006876 <_printf_i+0xea>
 8006868:	2104      	movs	r1, #4
 800686a:	6822      	ldr	r2, [r4, #0]
 800686c:	9d03      	ldr	r5, [sp, #12]
 800686e:	438a      	bics	r2, r1
 8006870:	6022      	str	r2, [r4, #0]
 8006872:	4333      	orrs	r3, r6
 8006874:	d00c      	beq.n	8006890 <_printf_i+0x104>
 8006876:	9d03      	ldr	r5, [sp, #12]
 8006878:	0030      	movs	r0, r6
 800687a:	0039      	movs	r1, r7
 800687c:	f7f9 fcdc 	bl	8000238 <__aeabi_uidivmod>
 8006880:	9b04      	ldr	r3, [sp, #16]
 8006882:	3d01      	subs	r5, #1
 8006884:	5c5b      	ldrb	r3, [r3, r1]
 8006886:	702b      	strb	r3, [r5, #0]
 8006888:	0033      	movs	r3, r6
 800688a:	0006      	movs	r6, r0
 800688c:	429f      	cmp	r7, r3
 800688e:	d9f3      	bls.n	8006878 <_printf_i+0xec>
 8006890:	2f08      	cmp	r7, #8
 8006892:	d109      	bne.n	80068a8 <_printf_i+0x11c>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	07db      	lsls	r3, r3, #31
 8006898:	d506      	bpl.n	80068a8 <_printf_i+0x11c>
 800689a:	6862      	ldr	r2, [r4, #4]
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	429a      	cmp	r2, r3
 80068a0:	dc02      	bgt.n	80068a8 <_printf_i+0x11c>
 80068a2:	2330      	movs	r3, #48	@ 0x30
 80068a4:	3d01      	subs	r5, #1
 80068a6:	702b      	strb	r3, [r5, #0]
 80068a8:	9b03      	ldr	r3, [sp, #12]
 80068aa:	1b5b      	subs	r3, r3, r5
 80068ac:	6123      	str	r3, [r4, #16]
 80068ae:	9b07      	ldr	r3, [sp, #28]
 80068b0:	0021      	movs	r1, r4
 80068b2:	9300      	str	r3, [sp, #0]
 80068b4:	9805      	ldr	r0, [sp, #20]
 80068b6:	9b06      	ldr	r3, [sp, #24]
 80068b8:	aa09      	add	r2, sp, #36	@ 0x24
 80068ba:	f7ff fef7 	bl	80066ac <_printf_common>
 80068be:	3001      	adds	r0, #1
 80068c0:	d148      	bne.n	8006954 <_printf_i+0x1c8>
 80068c2:	2001      	movs	r0, #1
 80068c4:	4240      	negs	r0, r0
 80068c6:	b00b      	add	sp, #44	@ 0x2c
 80068c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068ca:	2220      	movs	r2, #32
 80068cc:	6809      	ldr	r1, [r1, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	6022      	str	r2, [r4, #0]
 80068d2:	2278      	movs	r2, #120	@ 0x78
 80068d4:	4932      	ldr	r1, [pc, #200]	@ (80069a0 <_printf_i+0x214>)
 80068d6:	9104      	str	r1, [sp, #16]
 80068d8:	0021      	movs	r1, r4
 80068da:	3145      	adds	r1, #69	@ 0x45
 80068dc:	700a      	strb	r2, [r1, #0]
 80068de:	6819      	ldr	r1, [r3, #0]
 80068e0:	6822      	ldr	r2, [r4, #0]
 80068e2:	c940      	ldmia	r1!, {r6}
 80068e4:	0610      	lsls	r0, r2, #24
 80068e6:	d402      	bmi.n	80068ee <_printf_i+0x162>
 80068e8:	0650      	lsls	r0, r2, #25
 80068ea:	d500      	bpl.n	80068ee <_printf_i+0x162>
 80068ec:	b2b6      	uxth	r6, r6
 80068ee:	6019      	str	r1, [r3, #0]
 80068f0:	07d3      	lsls	r3, r2, #31
 80068f2:	d502      	bpl.n	80068fa <_printf_i+0x16e>
 80068f4:	2320      	movs	r3, #32
 80068f6:	4313      	orrs	r3, r2
 80068f8:	6023      	str	r3, [r4, #0]
 80068fa:	2e00      	cmp	r6, #0
 80068fc:	d001      	beq.n	8006902 <_printf_i+0x176>
 80068fe:	2710      	movs	r7, #16
 8006900:	e7aa      	b.n	8006858 <_printf_i+0xcc>
 8006902:	2220      	movs	r2, #32
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	4393      	bics	r3, r2
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	e7f8      	b.n	80068fe <_printf_i+0x172>
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	680d      	ldr	r5, [r1, #0]
 8006910:	1d10      	adds	r0, r2, #4
 8006912:	6949      	ldr	r1, [r1, #20]
 8006914:	6018      	str	r0, [r3, #0]
 8006916:	6813      	ldr	r3, [r2, #0]
 8006918:	062e      	lsls	r6, r5, #24
 800691a:	d501      	bpl.n	8006920 <_printf_i+0x194>
 800691c:	6019      	str	r1, [r3, #0]
 800691e:	e002      	b.n	8006926 <_printf_i+0x19a>
 8006920:	066d      	lsls	r5, r5, #25
 8006922:	d5fb      	bpl.n	800691c <_printf_i+0x190>
 8006924:	8019      	strh	r1, [r3, #0]
 8006926:	2300      	movs	r3, #0
 8006928:	9d03      	ldr	r5, [sp, #12]
 800692a:	6123      	str	r3, [r4, #16]
 800692c:	e7bf      	b.n	80068ae <_printf_i+0x122>
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	1d11      	adds	r1, r2, #4
 8006932:	6019      	str	r1, [r3, #0]
 8006934:	6815      	ldr	r5, [r2, #0]
 8006936:	2100      	movs	r1, #0
 8006938:	0028      	movs	r0, r5
 800693a:	6862      	ldr	r2, [r4, #4]
 800693c:	f000 f856 	bl	80069ec <memchr>
 8006940:	2800      	cmp	r0, #0
 8006942:	d001      	beq.n	8006948 <_printf_i+0x1bc>
 8006944:	1b40      	subs	r0, r0, r5
 8006946:	6060      	str	r0, [r4, #4]
 8006948:	6863      	ldr	r3, [r4, #4]
 800694a:	6123      	str	r3, [r4, #16]
 800694c:	2300      	movs	r3, #0
 800694e:	9a03      	ldr	r2, [sp, #12]
 8006950:	7013      	strb	r3, [r2, #0]
 8006952:	e7ac      	b.n	80068ae <_printf_i+0x122>
 8006954:	002a      	movs	r2, r5
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	9906      	ldr	r1, [sp, #24]
 800695a:	9805      	ldr	r0, [sp, #20]
 800695c:	9d07      	ldr	r5, [sp, #28]
 800695e:	47a8      	blx	r5
 8006960:	3001      	adds	r0, #1
 8006962:	d0ae      	beq.n	80068c2 <_printf_i+0x136>
 8006964:	6823      	ldr	r3, [r4, #0]
 8006966:	079b      	lsls	r3, r3, #30
 8006968:	d415      	bmi.n	8006996 <_printf_i+0x20a>
 800696a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800696c:	68e0      	ldr	r0, [r4, #12]
 800696e:	4298      	cmp	r0, r3
 8006970:	daa9      	bge.n	80068c6 <_printf_i+0x13a>
 8006972:	0018      	movs	r0, r3
 8006974:	e7a7      	b.n	80068c6 <_printf_i+0x13a>
 8006976:	0022      	movs	r2, r4
 8006978:	2301      	movs	r3, #1
 800697a:	9906      	ldr	r1, [sp, #24]
 800697c:	9805      	ldr	r0, [sp, #20]
 800697e:	9e07      	ldr	r6, [sp, #28]
 8006980:	3219      	adds	r2, #25
 8006982:	47b0      	blx	r6
 8006984:	3001      	adds	r0, #1
 8006986:	d09c      	beq.n	80068c2 <_printf_i+0x136>
 8006988:	3501      	adds	r5, #1
 800698a:	68e3      	ldr	r3, [r4, #12]
 800698c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800698e:	1a9b      	subs	r3, r3, r2
 8006990:	42ab      	cmp	r3, r5
 8006992:	dcf0      	bgt.n	8006976 <_printf_i+0x1ea>
 8006994:	e7e9      	b.n	800696a <_printf_i+0x1de>
 8006996:	2500      	movs	r5, #0
 8006998:	e7f7      	b.n	800698a <_printf_i+0x1fe>
 800699a:	46c0      	nop			@ (mov r8, r8)
 800699c:	08006dc9 	.word	0x08006dc9
 80069a0:	08006dda 	.word	0x08006dda

080069a4 <memmove>:
 80069a4:	b510      	push	{r4, lr}
 80069a6:	4288      	cmp	r0, r1
 80069a8:	d902      	bls.n	80069b0 <memmove+0xc>
 80069aa:	188b      	adds	r3, r1, r2
 80069ac:	4298      	cmp	r0, r3
 80069ae:	d308      	bcc.n	80069c2 <memmove+0x1e>
 80069b0:	2300      	movs	r3, #0
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d007      	beq.n	80069c6 <memmove+0x22>
 80069b6:	5ccc      	ldrb	r4, [r1, r3]
 80069b8:	54c4      	strb	r4, [r0, r3]
 80069ba:	3301      	adds	r3, #1
 80069bc:	e7f9      	b.n	80069b2 <memmove+0xe>
 80069be:	5c8b      	ldrb	r3, [r1, r2]
 80069c0:	5483      	strb	r3, [r0, r2]
 80069c2:	3a01      	subs	r2, #1
 80069c4:	d2fb      	bcs.n	80069be <memmove+0x1a>
 80069c6:	bd10      	pop	{r4, pc}

080069c8 <_sbrk_r>:
 80069c8:	2300      	movs	r3, #0
 80069ca:	b570      	push	{r4, r5, r6, lr}
 80069cc:	4d06      	ldr	r5, [pc, #24]	@ (80069e8 <_sbrk_r+0x20>)
 80069ce:	0004      	movs	r4, r0
 80069d0:	0008      	movs	r0, r1
 80069d2:	602b      	str	r3, [r5, #0]
 80069d4:	f7fa fd14 	bl	8001400 <_sbrk>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d103      	bne.n	80069e4 <_sbrk_r+0x1c>
 80069dc:	682b      	ldr	r3, [r5, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d000      	beq.n	80069e4 <_sbrk_r+0x1c>
 80069e2:	6023      	str	r3, [r4, #0]
 80069e4:	bd70      	pop	{r4, r5, r6, pc}
 80069e6:	46c0      	nop			@ (mov r8, r8)
 80069e8:	200003b8 	.word	0x200003b8

080069ec <memchr>:
 80069ec:	b2c9      	uxtb	r1, r1
 80069ee:	1882      	adds	r2, r0, r2
 80069f0:	4290      	cmp	r0, r2
 80069f2:	d101      	bne.n	80069f8 <memchr+0xc>
 80069f4:	2000      	movs	r0, #0
 80069f6:	4770      	bx	lr
 80069f8:	7803      	ldrb	r3, [r0, #0]
 80069fa:	428b      	cmp	r3, r1
 80069fc:	d0fb      	beq.n	80069f6 <memchr+0xa>
 80069fe:	3001      	adds	r0, #1
 8006a00:	e7f6      	b.n	80069f0 <memchr+0x4>

08006a02 <memcpy>:
 8006a02:	2300      	movs	r3, #0
 8006a04:	b510      	push	{r4, lr}
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d100      	bne.n	8006a0c <memcpy+0xa>
 8006a0a:	bd10      	pop	{r4, pc}
 8006a0c:	5ccc      	ldrb	r4, [r1, r3]
 8006a0e:	54c4      	strb	r4, [r0, r3]
 8006a10:	3301      	adds	r3, #1
 8006a12:	e7f8      	b.n	8006a06 <memcpy+0x4>

08006a14 <_realloc_r>:
 8006a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a16:	0006      	movs	r6, r0
 8006a18:	000c      	movs	r4, r1
 8006a1a:	0015      	movs	r5, r2
 8006a1c:	2900      	cmp	r1, #0
 8006a1e:	d105      	bne.n	8006a2c <_realloc_r+0x18>
 8006a20:	0011      	movs	r1, r2
 8006a22:	f7ff fc55 	bl	80062d0 <_malloc_r>
 8006a26:	0004      	movs	r4, r0
 8006a28:	0020      	movs	r0, r4
 8006a2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a2c:	2a00      	cmp	r2, #0
 8006a2e:	d103      	bne.n	8006a38 <_realloc_r+0x24>
 8006a30:	f7ff fbe2 	bl	80061f8 <_free_r>
 8006a34:	002c      	movs	r4, r5
 8006a36:	e7f7      	b.n	8006a28 <_realloc_r+0x14>
 8006a38:	f000 f81c 	bl	8006a74 <_malloc_usable_size_r>
 8006a3c:	0007      	movs	r7, r0
 8006a3e:	4285      	cmp	r5, r0
 8006a40:	d802      	bhi.n	8006a48 <_realloc_r+0x34>
 8006a42:	0843      	lsrs	r3, r0, #1
 8006a44:	42ab      	cmp	r3, r5
 8006a46:	d3ef      	bcc.n	8006a28 <_realloc_r+0x14>
 8006a48:	0029      	movs	r1, r5
 8006a4a:	0030      	movs	r0, r6
 8006a4c:	f7ff fc40 	bl	80062d0 <_malloc_r>
 8006a50:	9001      	str	r0, [sp, #4]
 8006a52:	2800      	cmp	r0, #0
 8006a54:	d101      	bne.n	8006a5a <_realloc_r+0x46>
 8006a56:	9c01      	ldr	r4, [sp, #4]
 8006a58:	e7e6      	b.n	8006a28 <_realloc_r+0x14>
 8006a5a:	002a      	movs	r2, r5
 8006a5c:	42bd      	cmp	r5, r7
 8006a5e:	d900      	bls.n	8006a62 <_realloc_r+0x4e>
 8006a60:	003a      	movs	r2, r7
 8006a62:	0021      	movs	r1, r4
 8006a64:	9801      	ldr	r0, [sp, #4]
 8006a66:	f7ff ffcc 	bl	8006a02 <memcpy>
 8006a6a:	0021      	movs	r1, r4
 8006a6c:	0030      	movs	r0, r6
 8006a6e:	f7ff fbc3 	bl	80061f8 <_free_r>
 8006a72:	e7f0      	b.n	8006a56 <_realloc_r+0x42>

08006a74 <_malloc_usable_size_r>:
 8006a74:	1f0b      	subs	r3, r1, #4
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	1f18      	subs	r0, r3, #4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	da01      	bge.n	8006a82 <_malloc_usable_size_r+0xe>
 8006a7e:	580b      	ldr	r3, [r1, r0]
 8006a80:	18c0      	adds	r0, r0, r3
 8006a82:	4770      	bx	lr

08006a84 <_init>:
 8006a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a86:	46c0      	nop			@ (mov r8, r8)
 8006a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a8a:	bc08      	pop	{r3}
 8006a8c:	469e      	mov	lr, r3
 8006a8e:	4770      	bx	lr

08006a90 <_fini>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	46c0      	nop			@ (mov r8, r8)
 8006a94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a96:	bc08      	pop	{r3}
 8006a98:	469e      	mov	lr, r3
 8006a9a:	4770      	bx	lr
