
CWH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000447c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d4  0800453c  0800453c  0000553c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004810  08004810  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004810  08004810  00005810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004818  08004818  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004818  08004818  00005818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800481c  0800481c  0000581c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004820  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000005c  0800487c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  0800487c  00006350  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d9a0  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fa3  00000000  00000000  00013a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000159c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f4  00000000  00000000  00016690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a74  00000000  00000000  00017084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fe24  00000000  00000000  0002caf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085cdd  00000000  00000000  0003c91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c25f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b0  00000000  00000000  000c263c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000c58ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004524 	.word	0x08004524

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004524 	.word	0x08004524

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <RTC_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RTC_IRQHandler(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
    HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000474:	4b03      	ldr	r3, [pc, #12]	@ (8000484 <RTC_IRQHandler+0x14>)
 8000476:	0018      	movs	r0, r3
 8000478:	f002 fd3a 	bl	8002ef0 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 800047c:	46c0      	nop			@ (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	200001dc 	.word	0x200001dc

08000488 <RTC_WakeUp_Init>:

void RTC_WakeUp_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	ConsolePrintf("Starting RTC Wake-Up Timer configuration\r\n");
 800048c:	4b15      	ldr	r3, [pc, #84]	@ (80004e4 <RTC_WakeUp_Init+0x5c>)
 800048e:	0018      	movs	r0, r3
 8000490:	f000 fa82 	bl	8000998 <ConsolePrintf>

	// Disable the Wake-Up Timer before configuring
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000494:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <RTC_WakeUp_Init+0x60>)
 8000496:	0018      	movs	r0, r3
 8000498:	f002 fcc6 	bl	8002e28 <HAL_RTCEx_DeactivateWakeUpTimer>
	ConsolePrintf("RTC Wake-Up Timer disabled\r\n");
 800049c:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <RTC_WakeUp_Init+0x64>)
 800049e:	0018      	movs	r0, r3
 80004a0:	f000 fa7a 	bl	8000998 <ConsolePrintf>

	// Configure Wake-Up Timer for 60 seconds using LSI (~40 kHz)
	// With AsynchPrediv = 127, SynchPrediv = 255: CK_SPRE = 40,000 / (128 * 256) = ~1.22 Hz
	// For ~60 seconds: WakeUpCounter = (60 * 1.22) - 1 = ~72
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80004a4:	4b10      	ldr	r3, [pc, #64]	@ (80004e8 <RTC_WakeUp_Init+0x60>)
 80004a6:	2204      	movs	r2, #4
 80004a8:	213b      	movs	r1, #59	@ 0x3b
 80004aa:	0018      	movs	r0, r3
 80004ac:	f002 fbe4 	bl	8002c78 <HAL_RTCEx_SetWakeUpTimer_IT>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d004      	beq.n	80004be <RTC_WakeUp_Init+0x36>
	{
		ConsolePrintf("RTC Wake-Up Timer Init Failed\r\n");
 80004b4:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <RTC_WakeUp_Init+0x68>)
 80004b6:	0018      	movs	r0, r3
 80004b8:	f000 fa6e 	bl	8000998 <ConsolePrintf>
 80004bc:	e003      	b.n	80004c6 <RTC_WakeUp_Init+0x3e>

	}
	else
	{
		ConsolePrintf("RTC Wake-Up Timer Initialized for ~60 seconds\r\n");
 80004be:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <RTC_WakeUp_Init+0x6c>)
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 fa69 	bl	8000998 <ConsolePrintf>
	}

	// Enable RTC Wake-Up interrupt in NVIC
	HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2100      	movs	r1, #0
 80004ca:	2002      	movs	r0, #2
 80004cc:	f000 fde4 	bl	8001098 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_IRQn);
 80004d0:	2002      	movs	r0, #2
 80004d2:	f000 fdf6 	bl	80010c2 <HAL_NVIC_EnableIRQ>
	ConsolePrintf("RTC Wake-Up interrupt enabled in NVIC\r\n");
 80004d6:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <RTC_WakeUp_Init+0x70>)
 80004d8:	0018      	movs	r0, r3
 80004da:	f000 fa5d 	bl	8000998 <ConsolePrintf>
}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	0800453c 	.word	0x0800453c
 80004e8:	200001dc 	.word	0x200001dc
 80004ec:	08004568 	.word	0x08004568
 80004f0:	08004588 	.word	0x08004588
 80004f4:	080045a8 	.word	0x080045a8
 80004f8:	080045d8 	.word	0x080045d8

080004fc <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
    // Reconfigure system clock after wake-up
    SystemClock_Config();
 8000504:	f000 f8be 	bl	8000684 <SystemClock_Config>

    // Print message
    ConsolePrintf("Woke up at %s\r\n", "1-minute interval");
 8000508:	4a04      	ldr	r2, [pc, #16]	@ (800051c <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 800050a:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 800050c:	0011      	movs	r1, r2
 800050e:	0018      	movs	r0, r3
 8000510:	f000 fa42 	bl	8000998 <ConsolePrintf>
}
 8000514:	46c0      	nop			@ (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	b002      	add	sp, #8
 800051a:	bd80      	pop	{r7, pc}
 800051c:	08004600 	.word	0x08004600
 8000520:	08004614 	.word	0x08004614

08000524 <Enter_Stop_Mode>:

void Enter_Stop_Mode(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
	ConsolePrintf("Preparing to enter Stop mode\r\n");
 8000528:	4b10      	ldr	r3, [pc, #64]	@ (800056c <Enter_Stop_Mode+0x48>)
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fa34 	bl	8000998 <ConsolePrintf>

    // Clear Wake-Up flag
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8000530:	4b0f      	ldr	r3, [pc, #60]	@ (8000570 <Enter_Stop_Mode+0x4c>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	68db      	ldr	r3, [r3, #12]
 8000536:	22ff      	movs	r2, #255	@ 0xff
 8000538:	401a      	ands	r2, r3
 800053a:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <Enter_Stop_Mode+0x4c>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	490d      	ldr	r1, [pc, #52]	@ (8000574 <Enter_Stop_Mode+0x50>)
 8000540:	430a      	orrs	r2, r1
 8000542:	60da      	str	r2, [r3, #12]
    ConsolePrintf("RTC Wake-Up flag cleared\r\n");
 8000544:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <Enter_Stop_Mode+0x54>)
 8000546:	0018      	movs	r0, r3
 8000548:	f000 fa26 	bl	8000998 <ConsolePrintf>

    // Enter Stop mode (low-power mode)
    ConsolePrintf("Entering Stop mode\r\n");
 800054c:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <Enter_Stop_Mode+0x58>)
 800054e:	0018      	movs	r0, r3
 8000550:	f000 fa22 	bl	8000998 <ConsolePrintf>
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000554:	2101      	movs	r1, #1
 8000556:	2001      	movs	r0, #1
 8000558:	f001 f9bc 	bl	80018d4 <HAL_PWR_EnterSTOPMode>
    ConsolePrintf("Exited Stop mode\r\n");
 800055c:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <Enter_Stop_Mode+0x5c>)
 800055e:	0018      	movs	r0, r3
 8000560:	f000 fa1a 	bl	8000998 <ConsolePrintf>
}
 8000564:	46c0      	nop			@ (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	08004624 	.word	0x08004624
 8000570:	200001dc 	.word	0x200001dc
 8000574:	fffffb7f 	.word	0xfffffb7f
 8000578:	08004644 	.word	0x08004644
 800057c:	08004660 	.word	0x08004660
 8000580:	08004678 	.word	0x08004678

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fc46 	bl	8000e18 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(10000);
 800058c:	4b33      	ldr	r3, [pc, #204]	@ (800065c <main+0xd8>)
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fcb2 	bl	8000ef8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f876 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 f9ba 	bl	8000910 <MX_GPIO_Init>
  MX_I2C1_Init();
 800059c:	f000 f8ea 	bl	8000774 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 f956 	bl	8000850 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80005a4:	f000 f98a 	bl	80008bc <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80005a8:	f000 f924 	bl	80007f4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RTC_WakeUp_Init();
 80005ac:	f7ff ff6c 	bl	8000488 <RTC_WakeUp_Init>
//  lora.huart = &hlpuart1;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ConsolePrintf("Entering main loop\r\n");
 80005b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000660 <main+0xdc>)
 80005b2:	0018      	movs	r0, r3
 80005b4:	f000 f9f0 	bl	8000998 <ConsolePrintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ConsolePrintf("Going to sleep...\r\n");
 80005b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000664 <main+0xe0>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 f9ec 	bl	8000998 <ConsolePrintf>

	  		HAL_I2C_DeInit(&hi2c1);
 80005c0:	4b29      	ldr	r3, [pc, #164]	@ (8000668 <main+0xe4>)
 80005c2:	0018      	movs	r0, r3
 80005c4:	f001 f8be 	bl	8001744 <HAL_I2C_DeInit>
	  		HAL_UART_DeInit(&huart1);
 80005c8:	4b28      	ldr	r3, [pc, #160]	@ (800066c <main+0xe8>)
 80005ca:	0018      	movs	r0, r3
 80005cc:	f002 fd14 	bl	8002ff8 <HAL_UART_DeInit>
	  		// De-init LPUART1 (LoRaWAN UART)
	  		HAL_UART_DeInit(&hlpuart1);
 80005d0:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <main+0xec>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f002 fd10 	bl	8002ff8 <HAL_UART_DeInit>

	  		// Disable LPUART wake-up from Stop mode
	  		__HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_RXNE); // Disable RXNE interrupt
 80005d8:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <main+0xec>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	4b24      	ldr	r3, [pc, #144]	@ (8000670 <main+0xec>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2120      	movs	r1, #32
 80005e4:	438a      	bics	r2, r1
 80005e6:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_IDLE); // Disable IDLE interrupt
 80005e8:	4b21      	ldr	r3, [pc, #132]	@ (8000670 <main+0xec>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <main+0xec>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	2110      	movs	r1, #16
 80005f4:	438a      	bics	r2, r1
 80005f6:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 80005f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000670 <main+0xec>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2230      	movs	r2, #48	@ 0x30
 80005fe:	621a      	str	r2, [r3, #32]

	  		__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE); // Disable RXNE interrupt
 8000600:	4b1a      	ldr	r3, [pc, #104]	@ (800066c <main+0xe8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	4b19      	ldr	r3, [pc, #100]	@ (800066c <main+0xe8>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2120      	movs	r1, #32
 800060c:	438a      	bics	r2, r1
 800060e:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE); // Disable IDLE interrupt
 8000610:	4b16      	ldr	r3, [pc, #88]	@ (800066c <main+0xe8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	4b15      	ldr	r3, [pc, #84]	@ (800066c <main+0xe8>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2110      	movs	r1, #16
 800061c:	438a      	bics	r2, r1
 800061e:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 8000620:	4b12      	ldr	r3, [pc, #72]	@ (800066c <main+0xe8>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2230      	movs	r2, #48	@ 0x30
 8000626:	621a      	str	r2, [r3, #32]


	  		// Enter Stop mode
	  		Enter_Stop_Mode();  // Wakes up via RTC interrupt
 8000628:	f7ff ff7c 	bl	8000524 <Enter_Stop_Mode>

	  		// === Code resumes after wake-up ===
	  		ConsolePrintf("Resumed after wake-up\r\n");
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <main+0xf0>)
 800062e:	0018      	movs	r0, r3
 8000630:	f000 f9b2 	bl	8000998 <ConsolePrintf>

	  		// Reconfigure clocks
	  		SystemClock_Config();
 8000634:	f000 f826 	bl	8000684 <SystemClock_Config>
	  		ConsolePrintf("System clock reconfigured\r\n");
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <main+0xf4>)
 800063a:	0018      	movs	r0, r3
 800063c:	f000 f9ac 	bl	8000998 <ConsolePrintf>

	  		// Reinit UART
	  		MX_USART1_UART_Init();
 8000640:	f000 f906 	bl	8000850 <MX_USART1_UART_Init>
	  		ConsolePrintf("UART reinitialized\r\n");
 8000644:	4b0d      	ldr	r3, [pc, #52]	@ (800067c <main+0xf8>)
 8000646:	0018      	movs	r0, r3
 8000648:	f000 f9a6 	bl	8000998 <ConsolePrintf>

	  		// Reinit WakeUp timer (MUST be outside the callback!)
	  		RTC_WakeUp_Init();
 800064c:	f7ff ff1c 	bl	8000488 <RTC_WakeUp_Init>
	  		ConsolePrintf("RTC Wake-Up Timer reinitialized\r\n");
 8000650:	4b0b      	ldr	r3, [pc, #44]	@ (8000680 <main+0xfc>)
 8000652:	0018      	movs	r0, r3
 8000654:	f000 f9a0 	bl	8000998 <ConsolePrintf>
	  ConsolePrintf("Going to sleep...\r\n");
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	e7ad      	b.n	80005b8 <main+0x34>
 800065c:	00002710 	.word	0x00002710
 8000660:	0800468c 	.word	0x0800468c
 8000664:	080046a4 	.word	0x080046a4
 8000668:	20000078 	.word	0x20000078
 800066c:	20000154 	.word	0x20000154
 8000670:	200000cc 	.word	0x200000cc
 8000674:	080046b8 	.word	0x080046b8
 8000678:	080046d0 	.word	0x080046d0
 800067c:	080046ec 	.word	0x080046ec
 8000680:	08004704 	.word	0x08004704

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b09f      	sub	sp, #124	@ 0x7c
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	2440      	movs	r4, #64	@ 0x40
 800068c:	193b      	adds	r3, r7, r4
 800068e:	0018      	movs	r0, r3
 8000690:	2338      	movs	r3, #56	@ 0x38
 8000692:	001a      	movs	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	f003 facb 	bl	8003c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069a:	232c      	movs	r3, #44	@ 0x2c
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	0018      	movs	r0, r3
 80006a0:	2314      	movs	r3, #20
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f003 fac3 	bl	8003c30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	0018      	movs	r0, r3
 80006ae:	2328      	movs	r3, #40	@ 0x28
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f003 fabc 	bl	8003c30 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b8:	4b2c      	ldr	r3, [pc, #176]	@ (800076c <SystemClock_Config+0xe8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a2c      	ldr	r2, [pc, #176]	@ (8000770 <SystemClock_Config+0xec>)
 80006be:	401a      	ands	r2, r3
 80006c0:	4b2a      	ldr	r3, [pc, #168]	@ (800076c <SystemClock_Config+0xe8>)
 80006c2:	2180      	movs	r1, #128	@ 0x80
 80006c4:	0109      	lsls	r1, r1, #4
 80006c6:	430a      	orrs	r2, r1
 80006c8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80006ca:	0021      	movs	r1, r4
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2218      	movs	r2, #24
 80006d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2201      	movs	r2, #1
 80006d6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2201      	movs	r2, #1
 80006dc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80006e4:	187b      	adds	r3, r7, r1
 80006e6:	22a0      	movs	r2, #160	@ 0xa0
 80006e8:	0212      	lsls	r2, r2, #8
 80006ea:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	0018      	movs	r0, r3
 80006f6:	f001 f949 	bl	800198c <HAL_RCC_OscConfig>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80006fe:	f000 f9c1 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	212c      	movs	r1, #44	@ 0x2c
 8000704:	187b      	adds	r3, r7, r1
 8000706:	220f      	movs	r2, #15
 8000708:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2200      	movs	r2, #0
 800071a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2100      	movs	r1, #0
 8000726:	0018      	movs	r0, r3
 8000728:	f001 fd04 	bl	8002134 <HAL_RCC_ClockConfig>
 800072c:	1e03      	subs	r3, r0, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000730:	f000 f9a8 	bl	8000a84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	222d      	movs	r2, #45	@ 0x2d
 8000738:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000740:	1d3b      	adds	r3, r7, #4
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000746:	1d3b      	adds	r3, r7, #4
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2280      	movs	r2, #128	@ 0x80
 8000750:	0292      	lsls	r2, r2, #10
 8000752:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	0018      	movs	r0, r3
 8000758:	f001 fef0 	bl	800253c <HAL_RCCEx_PeriphCLKConfig>
 800075c:	1e03      	subs	r3, r0, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000760:	f000 f990 	bl	8000a84 <Error_Handler>
  }
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b01f      	add	sp, #124	@ 0x7c
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	40007000 	.word	0x40007000
 8000770:	ffffe7ff 	.word	0xffffe7ff

08000774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_I2C1_Init+0x78>)
 800077a:	4a1d      	ldr	r2, [pc, #116]	@ (80007f0 <MX_I2C1_Init+0x7c>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 800077e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <MX_I2C1_Init+0x78>)
 8000780:	22c1      	movs	r2, #193	@ 0xc1
 8000782:	00d2      	lsls	r2, r2, #3
 8000784:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_I2C1_Init+0x78>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_I2C1_Init+0x78>)
 800078e:	2201      	movs	r2, #1
 8000790:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000792:	4b16      	ldr	r3, [pc, #88]	@ (80007ec <MX_I2C1_Init+0x78>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000798:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_I2C1_Init+0x78>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800079e:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <MX_I2C1_Init+0x78>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_I2C1_Init+0x78>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <MX_I2C1_Init+0x78>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_I2C1_Init+0x78>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 ff20 	bl	80015f8 <HAL_I2C_Init>
 80007b8:	1e03      	subs	r3, r0, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 f962 	bl	8000a84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <MX_I2C1_Init+0x78>)
 80007c2:	2100      	movs	r1, #0
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 ffed 	bl	80017a4 <HAL_I2CEx_ConfigAnalogFilter>
 80007ca:	1e03      	subs	r3, r0, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80007ce:	f000 f959 	bl	8000a84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d2:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_I2C1_Init+0x78>)
 80007d4:	2100      	movs	r1, #0
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 f830 	bl	800183c <HAL_I2CEx_ConfigDigitalFilter>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80007e0:	f000 f950 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007e4:	46c0      	nop			@ (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	20000078 	.word	0x20000078
 80007f0:	40005400 	.word	0x40005400

080007f4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007f8:	4b13      	ldr	r3, [pc, #76]	@ (8000848 <MX_LPUART1_UART_Init+0x54>)
 80007fa:	4a14      	ldr	r2, [pc, #80]	@ (800084c <MX_LPUART1_UART_Init+0x58>)
 80007fc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_LPUART1_UART_Init+0x54>)
 8000800:	22e1      	movs	r2, #225	@ 0xe1
 8000802:	0252      	lsls	r2, r2, #9
 8000804:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b10      	ldr	r3, [pc, #64]	@ (8000848 <MX_LPUART1_UART_Init+0x54>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0e      	ldr	r3, [pc, #56]	@ (8000848 <MX_LPUART1_UART_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0d      	ldr	r3, [pc, #52]	@ (8000848 <MX_LPUART1_UART_Init+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <MX_LPUART1_UART_Init+0x54>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b0a      	ldr	r3, [pc, #40]	@ (8000848 <MX_LPUART1_UART_Init+0x54>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000824:	4b08      	ldr	r3, [pc, #32]	@ (8000848 <MX_LPUART1_UART_Init+0x54>)
 8000826:	2200      	movs	r2, #0
 8000828:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082a:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <MX_LPUART1_UART_Init+0x54>)
 800082c:	2200      	movs	r2, #0
 800082e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <MX_LPUART1_UART_Init+0x54>)
 8000832:	0018      	movs	r0, r3
 8000834:	f002 fb8c 	bl	8002f50 <HAL_UART_Init>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d001      	beq.n	8000840 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800083c:	f000 f922 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	200000cc 	.word	0x200000cc
 800084c:	40004800 	.word	0x40004800

08000850 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_USART1_UART_Init+0x60>)
 8000856:	4a17      	ldr	r2, [pc, #92]	@ (80008b4 <MX_USART1_UART_Init+0x64>)
 8000858:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_USART1_UART_Init+0x60>)
 800085c:	22e1      	movs	r2, #225	@ 0xe1
 800085e:	0252      	lsls	r2, r2, #9
 8000860:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b13      	ldr	r3, [pc, #76]	@ (80008b0 <MX_USART1_UART_Init+0x60>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_USART1_UART_Init+0x60>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800086e:	4b10      	ldr	r3, [pc, #64]	@ (80008b0 <MX_USART1_UART_Init+0x60>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_USART1_UART_Init+0x60>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <MX_USART1_UART_Init+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000880:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_USART1_UART_Init+0x60>)
 8000882:	2200      	movs	r2, #0
 8000884:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000886:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <MX_USART1_UART_Init+0x60>)
 8000888:	2200      	movs	r2, #0
 800088a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088c:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_USART1_UART_Init+0x60>)
 800088e:	2200      	movs	r2, #0
 8000890:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000892:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <MX_USART1_UART_Init+0x60>)
 8000894:	0018      	movs	r0, r3
 8000896:	f002 fb5b 	bl	8002f50 <HAL_UART_Init>
 800089a:	1e03      	subs	r3, r0, #0
 800089c:	d001      	beq.n	80008a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800089e:	f000 f8f1 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  ConsolePrintf("USART1 (DBG) Cnfigured\r\n");
 80008a2:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <MX_USART1_UART_Init+0x68>)
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 f877 	bl	8000998 <ConsolePrintf>
  /* USER CODE END USART1_Init 2 */

}
 80008aa:	46c0      	nop			@ (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000154 	.word	0x20000154
 80008b4:	40013800 	.word	0x40013800
 80008b8:	08004728 	.word	0x08004728

080008bc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008c0:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_RTC_Init+0x4c>)
 80008c2:	4a12      	ldr	r2, [pc, #72]	@ (800090c <MX_RTC_Init+0x50>)
 80008c4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008c6:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <MX_RTC_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <MX_RTC_Init+0x4c>)
 80008ce:	227f      	movs	r2, #127	@ 0x7f
 80008d0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <MX_RTC_Init+0x4c>)
 80008d4:	22ff      	movs	r2, #255	@ 0xff
 80008d6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <MX_RTC_Init+0x4c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008de:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <MX_RTC_Init+0x4c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <MX_RTC_Init+0x4c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008ea:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <MX_RTC_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008f0:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <MX_RTC_Init+0x4c>)
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 ffc0 	bl	8002878 <HAL_RTC_Init>
 80008f8:	1e03      	subs	r3, r0, #0
 80008fa:	d001      	beq.n	8000900 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80008fc:	f000 f8c2 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	200001dc 	.word	0x200001dc
 800090c:	40002800 	.word	0x40002800

08000910 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b089      	sub	sp, #36	@ 0x24
 8000914:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000916:	240c      	movs	r4, #12
 8000918:	193b      	adds	r3, r7, r4
 800091a:	0018      	movs	r0, r3
 800091c:	2314      	movs	r3, #20
 800091e:	001a      	movs	r2, r3
 8000920:	2100      	movs	r1, #0
 8000922:	f003 f985 	bl	8003c30 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_GPIO_Init+0x80>)
 8000928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800092a:	4b19      	ldr	r3, [pc, #100]	@ (8000990 <MX_GPIO_Init+0x80>)
 800092c:	2101      	movs	r1, #1
 800092e:	430a      	orrs	r2, r1
 8000930:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <MX_GPIO_Init+0x80>)
 8000934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000936:	2201      	movs	r2, #1
 8000938:	4013      	ands	r3, r2
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <MX_GPIO_Init+0x80>)
 8000940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000942:	4b13      	ldr	r3, [pc, #76]	@ (8000990 <MX_GPIO_Init+0x80>)
 8000944:	2102      	movs	r1, #2
 8000946:	430a      	orrs	r2, r1
 8000948:	62da      	str	r2, [r3, #44]	@ 0x2c
 800094a:	4b11      	ldr	r3, [pc, #68]	@ (8000990 <MX_GPIO_Init+0x80>)
 800094c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800094e:	2202      	movs	r2, #2
 8000950:	4013      	ands	r3, r2
 8000952:	607b      	str	r3, [r7, #4]
 8000954:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_GPIO_Init+0x84>)
 8000958:	2200      	movs	r2, #0
 800095a:	2120      	movs	r1, #32
 800095c:	0018      	movs	r0, r3
 800095e:	f000 fe2d 	bl	80015bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000962:	0021      	movs	r1, r4
 8000964:	187b      	adds	r3, r7, r1
 8000966:	2220      	movs	r2, #32
 8000968:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096a:	187b      	adds	r3, r7, r1
 800096c:	2201      	movs	r2, #1
 800096e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2200      	movs	r2, #0
 800097a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097c:	187b      	adds	r3, r7, r1
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <MX_GPIO_Init+0x84>)
 8000980:	0019      	movs	r1, r3
 8000982:	0010      	movs	r0, r2
 8000984:	f000 fbba 	bl	80010fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000988:	46c0      	nop			@ (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	b009      	add	sp, #36	@ 0x24
 800098e:	bd90      	pop	{r4, r7, pc}
 8000990:	40021000 	.word	0x40021000
 8000994:	50000400 	.word	0x50000400

08000998 <ConsolePrintf>:

/* USER CODE BEGIN 4 */
void ConsolePrintf(const char *format, ...)
{
 8000998:	b40f      	push	{r0, r1, r2, r3}
 800099a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800099c:	b0df      	sub	sp, #380	@ 0x17c
 800099e:	af06      	add	r7, sp, #24
    char final_buffer[160]; // Combined buffer (timestamp + message)

    // Get time and date from RTC
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;
    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80009a0:	2308      	movs	r3, #8
 80009a2:	18f9      	adds	r1, r7, r3
 80009a4:	4b31      	ldr	r3, [pc, #196]	@ (8000a6c <ConsolePrintf+0xd4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	0018      	movs	r0, r3
 80009aa:	f002 f801 	bl	80029b0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80009ae:	231c      	movs	r3, #28
 80009b0:	18f9      	adds	r1, r7, r3
 80009b2:	4b2e      	ldr	r3, [pc, #184]	@ (8000a6c <ConsolePrintf+0xd4>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f002 f858 	bl	8002a6c <HAL_RTC_GetDate>

    // Format timestamp as [YYYY-MM-DD HH:MM:SS]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
             date.Year, date.Month, date.Date,
 80009bc:	4b2c      	ldr	r3, [pc, #176]	@ (8000a70 <ConsolePrintf+0xd8>)
 80009be:	22b0      	movs	r2, #176	@ 0xb0
 80009c0:	0052      	lsls	r2, r2, #1
 80009c2:	189b      	adds	r3, r3, r2
 80009c4:	19db      	adds	r3, r3, r7
 80009c6:	78db      	ldrb	r3, [r3, #3]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80009c8:	469c      	mov	ip, r3
             date.Year, date.Month, date.Date,
 80009ca:	4b29      	ldr	r3, [pc, #164]	@ (8000a70 <ConsolePrintf+0xd8>)
 80009cc:	189b      	adds	r3, r3, r2
 80009ce:	19db      	adds	r3, r3, r7
 80009d0:	785b      	ldrb	r3, [r3, #1]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80009d2:	0019      	movs	r1, r3
             date.Year, date.Month, date.Date,
 80009d4:	4b26      	ldr	r3, [pc, #152]	@ (8000a70 <ConsolePrintf+0xd8>)
 80009d6:	189b      	adds	r3, r3, r2
 80009d8:	19db      	adds	r3, r3, r7
 80009da:	789b      	ldrb	r3, [r3, #2]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80009dc:	001c      	movs	r4, r3
             time.Hours, time.Minutes, time.Seconds);
 80009de:	4b25      	ldr	r3, [pc, #148]	@ (8000a74 <ConsolePrintf+0xdc>)
 80009e0:	189b      	adds	r3, r3, r2
 80009e2:	19db      	adds	r3, r3, r7
 80009e4:	781b      	ldrb	r3, [r3, #0]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80009e6:	001d      	movs	r5, r3
             time.Hours, time.Minutes, time.Seconds);
 80009e8:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <ConsolePrintf+0xdc>)
 80009ea:	189b      	adds	r3, r3, r2
 80009ec:	19db      	adds	r3, r3, r7
 80009ee:	785b      	ldrb	r3, [r3, #1]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80009f0:	001e      	movs	r6, r3
             time.Hours, time.Minutes, time.Seconds);
 80009f2:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <ConsolePrintf+0xdc>)
 80009f4:	189b      	adds	r3, r3, r2
 80009f6:	19db      	adds	r3, r3, r7
 80009f8:	789b      	ldrb	r3, [r3, #2]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80009fa:	4a1f      	ldr	r2, [pc, #124]	@ (8000a78 <ConsolePrintf+0xe0>)
 80009fc:	20c0      	movs	r0, #192	@ 0xc0
 80009fe:	1838      	adds	r0, r7, r0
 8000a00:	9304      	str	r3, [sp, #16]
 8000a02:	9603      	str	r6, [sp, #12]
 8000a04:	9502      	str	r5, [sp, #8]
 8000a06:	9401      	str	r4, [sp, #4]
 8000a08:	9100      	str	r1, [sp, #0]
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	f003 f89f 	bl	8003b50 <sniprintf>

    // Format the original message
    va_list args;
    va_start(args, format);
 8000a12:	23be      	movs	r3, #190	@ 0xbe
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	18fb      	adds	r3, r7, r3
 8000a18:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	22bc      	movs	r2, #188	@ 0xbc
 8000a1e:	0052      	lsls	r2, r2, #1
 8000a20:	18ba      	adds	r2, r7, r2
 8000a22:	6812      	ldr	r2, [r2, #0]
 8000a24:	25e0      	movs	r5, #224	@ 0xe0
 8000a26:	1978      	adds	r0, r7, r5
 8000a28:	2180      	movs	r1, #128	@ 0x80
 8000a2a:	f003 f8f5 	bl	8003c18 <vsniprintf>
    va_end(args);

    // Combine timestamp and message
    snprintf(final_buffer, sizeof(final_buffer), "%s%s", timestamp_buffer, buffer);
 8000a2e:	20c0      	movs	r0, #192	@ 0xc0
 8000a30:	1839      	adds	r1, r7, r0
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <ConsolePrintf+0xe4>)
 8000a34:	2420      	movs	r4, #32
 8000a36:	1938      	adds	r0, r7, r4
 8000a38:	197b      	adds	r3, r7, r5
 8000a3a:	9300      	str	r3, [sp, #0]
 8000a3c:	000b      	movs	r3, r1
 8000a3e:	21a0      	movs	r1, #160	@ 0xa0
 8000a40:	f003 f886 	bl	8003b50 <sniprintf>

    // Transmit the combined message
    HAL_UART_Transmit(&huart1, (uint8_t *)final_buffer, strlen(final_buffer), HAL_MAX_DELAY);
 8000a44:	193b      	adds	r3, r7, r4
 8000a46:	0018      	movs	r0, r3
 8000a48:	f7ff fb5e 	bl	8000108 <strlen>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	b29a      	uxth	r2, r3
 8000a50:	2301      	movs	r3, #1
 8000a52:	425b      	negs	r3, r3
 8000a54:	1939      	adds	r1, r7, r4
 8000a56:	480a      	ldr	r0, [pc, #40]	@ (8000a80 <ConsolePrintf+0xe8>)
 8000a58:	f002 fb0c 	bl	8003074 <HAL_UART_Transmit>
}
 8000a5c:	46c0      	nop			@ (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b059      	add	sp, #356	@ 0x164
 8000a62:	bcf0      	pop	{r4, r5, r6, r7}
 8000a64:	bc08      	pop	{r3}
 8000a66:	b004      	add	sp, #16
 8000a68:	4718      	bx	r3
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	200001dc 	.word	0x200001dc
 8000a70:	fffffebc 	.word	0xfffffebc
 8000a74:	fffffea8 	.word	0xfffffea8
 8000a78:	08004744 	.word	0x08004744
 8000a7c:	08004768 	.word	0x08004768
 8000a80:	20000154 	.word	0x20000154

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	46c0      	nop			@ (mov r8, r8)
 8000a8e:	e7fd      	b.n	8000a8c <Error_Handler+0x8>

08000a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a94:	4b07      	ldr	r3, [pc, #28]	@ (8000ab4 <HAL_MspInit+0x24>)
 8000a96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a98:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_MspInit+0x24>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa0:	4b04      	ldr	r3, [pc, #16]	@ (8000ab4 <HAL_MspInit+0x24>)
 8000aa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000aa4:	4b03      	ldr	r3, [pc, #12]	@ (8000ab4 <HAL_MspInit+0x24>)
 8000aa6:	2180      	movs	r1, #128	@ 0x80
 8000aa8:	0549      	lsls	r1, r1, #21
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b089      	sub	sp, #36	@ 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	240c      	movs	r4, #12
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	2314      	movs	r3, #20
 8000ac8:	001a      	movs	r2, r3
 8000aca:	2100      	movs	r1, #0
 8000acc:	f003 f8b0 	bl	8003c30 <memset>
  if(hi2c->Instance==I2C1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a17      	ldr	r2, [pc, #92]	@ (8000b34 <HAL_I2C_MspInit+0x7c>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d128      	bne.n	8000b2c <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <HAL_I2C_MspInit+0x80>)
 8000adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <HAL_I2C_MspInit+0x80>)
 8000ae0:	2102      	movs	r1, #2
 8000ae2:	430a      	orrs	r2, r1
 8000ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <HAL_I2C_MspInit+0x80>)
 8000ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aea:	2202      	movs	r2, #2
 8000aec:	4013      	ands	r3, r2
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000af2:	0021      	movs	r1, r4
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	22c0      	movs	r2, #192	@ 0xc0
 8000af8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2212      	movs	r2, #18
 8000afe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2203      	movs	r2, #3
 8000b0a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2201      	movs	r2, #1
 8000b10:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	4a09      	ldr	r2, [pc, #36]	@ (8000b3c <HAL_I2C_MspInit+0x84>)
 8000b16:	0019      	movs	r1, r3
 8000b18:	0010      	movs	r0, r2
 8000b1a:	f000 faef 	bl	80010fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_I2C_MspInit+0x80>)
 8000b20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b22:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <HAL_I2C_MspInit+0x80>)
 8000b24:	2180      	movs	r1, #128	@ 0x80
 8000b26:	0389      	lsls	r1, r1, #14
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000b2c:	46c0      	nop			@ (mov r8, r8)
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b009      	add	sp, #36	@ 0x24
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	40005400 	.word	0x40005400
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	50000400 	.word	0x50000400

08000b40 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b7c <HAL_I2C_MspDeInit+0x3c>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d10f      	bne.n	8000b72 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <HAL_I2C_MspDeInit+0x40>)
 8000b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b56:	4b0a      	ldr	r3, [pc, #40]	@ (8000b80 <HAL_I2C_MspDeInit+0x40>)
 8000b58:	490a      	ldr	r1, [pc, #40]	@ (8000b84 <HAL_I2C_MspDeInit+0x44>)
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <HAL_I2C_MspDeInit+0x48>)
 8000b60:	2140      	movs	r1, #64	@ 0x40
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 fc48 	bl	80013f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <HAL_I2C_MspDeInit+0x48>)
 8000b6a:	2180      	movs	r1, #128	@ 0x80
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f000 fc43 	bl	80013f8 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000b72:	46c0      	nop			@ (mov r8, r8)
 8000b74:	46bd      	mov	sp, r7
 8000b76:	b002      	add	sp, #8
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	40021000 	.word	0x40021000
 8000b84:	ffdfffff 	.word	0xffdfffff
 8000b88:	50000400 	.word	0x50000400

08000b8c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b8c:	b590      	push	{r4, r7, lr}
 8000b8e:	b08b      	sub	sp, #44	@ 0x2c
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b94:	2414      	movs	r4, #20
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	0018      	movs	r0, r3
 8000b9a:	2314      	movs	r3, #20
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	f003 f846 	bl	8003c30 <memset>
  if(huart->Instance==LPUART1)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a30      	ldr	r2, [pc, #192]	@ (8000c6c <HAL_UART_MspInit+0xe0>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d12a      	bne.n	8000c04 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bae:	4b30      	ldr	r3, [pc, #192]	@ (8000c70 <HAL_UART_MspInit+0xe4>)
 8000bb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c70 <HAL_UART_MspInit+0xe4>)
 8000bb4:	2180      	movs	r1, #128	@ 0x80
 8000bb6:	02c9      	lsls	r1, r1, #11
 8000bb8:	430a      	orrs	r2, r1
 8000bba:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000c70 <HAL_UART_MspInit+0xe4>)
 8000bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c70 <HAL_UART_MspInit+0xe4>)
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bc8:	4b29      	ldr	r3, [pc, #164]	@ (8000c70 <HAL_UART_MspInit+0xe4>)
 8000bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4013      	ands	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bd4:	0021      	movs	r1, r4
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	220c      	movs	r2, #12
 8000bda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2202      	movs	r2, #2
 8000be0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2203      	movs	r2, #3
 8000bec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2206      	movs	r2, #6
 8000bf2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf4:	187a      	adds	r2, r7, r1
 8000bf6:	23a0      	movs	r3, #160	@ 0xa0
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	0011      	movs	r1, r2
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f000 fa7d 	bl	80010fc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c02:	e02f      	b.n	8000c64 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART1)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a1a      	ldr	r2, [pc, #104]	@ (8000c74 <HAL_UART_MspInit+0xe8>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d12a      	bne.n	8000c64 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c0e:	4b18      	ldr	r3, [pc, #96]	@ (8000c70 <HAL_UART_MspInit+0xe4>)
 8000c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000c12:	4b17      	ldr	r3, [pc, #92]	@ (8000c70 <HAL_UART_MspInit+0xe4>)
 8000c14:	2180      	movs	r1, #128	@ 0x80
 8000c16:	01c9      	lsls	r1, r1, #7
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <HAL_UART_MspInit+0xe4>)
 8000c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c20:	4b13      	ldr	r3, [pc, #76]	@ (8000c70 <HAL_UART_MspInit+0xe4>)
 8000c22:	2101      	movs	r1, #1
 8000c24:	430a      	orrs	r2, r1
 8000c26:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <HAL_UART_MspInit+0xe4>)
 8000c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4013      	ands	r3, r2
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c34:	2114      	movs	r1, #20
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	22c0      	movs	r2, #192	@ 0xc0
 8000c3a:	00d2      	lsls	r2, r2, #3
 8000c3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2202      	movs	r2, #2
 8000c42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2204      	movs	r2, #4
 8000c54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	187a      	adds	r2, r7, r1
 8000c58:	23a0      	movs	r3, #160	@ 0xa0
 8000c5a:	05db      	lsls	r3, r3, #23
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 fa4c 	bl	80010fc <HAL_GPIO_Init>
}
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b00b      	add	sp, #44	@ 0x2c
 8000c6a:	bd90      	pop	{r4, r7, pc}
 8000c6c:	40004800 	.word	0x40004800
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40013800 	.word	0x40013800

08000c78 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a13      	ldr	r2, [pc, #76]	@ (8000cd4 <HAL_UART_MspDeInit+0x5c>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d10c      	bne.n	8000ca4 <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN LPUART1_MspDeInit 0 */

    /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8000c8a:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <HAL_UART_MspDeInit+0x60>)
 8000c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000c8e:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_UART_MspDeInit+0x60>)
 8000c90:	4912      	ldr	r1, [pc, #72]	@ (8000cdc <HAL_UART_MspDeInit+0x64>)
 8000c92:	400a      	ands	r2, r1
 8000c94:	639a      	str	r2, [r3, #56]	@ 0x38

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8000c96:	23a0      	movs	r3, #160	@ 0xa0
 8000c98:	05db      	lsls	r3, r3, #23
 8000c9a:	210c      	movs	r1, #12
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f000 fbab 	bl	80013f8 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8000ca2:	e012      	b.n	8000cca <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce0 <HAL_UART_MspDeInit+0x68>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d10d      	bne.n	8000cca <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART1_CLK_DISABLE();
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_UART_MspDeInit+0x60>)
 8000cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000cb2:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <HAL_UART_MspDeInit+0x60>)
 8000cb4:	490b      	ldr	r1, [pc, #44]	@ (8000ce4 <HAL_UART_MspDeInit+0x6c>)
 8000cb6:	400a      	ands	r2, r1
 8000cb8:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000cba:	23c0      	movs	r3, #192	@ 0xc0
 8000cbc:	00da      	lsls	r2, r3, #3
 8000cbe:	23a0      	movs	r3, #160	@ 0xa0
 8000cc0:	05db      	lsls	r3, r3, #23
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 fb97 	bl	80013f8 <HAL_GPIO_DeInit>
}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b002      	add	sp, #8
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	40004800 	.word	0x40004800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	fffbffff 	.word	0xfffbffff
 8000ce0:	40013800 	.word	0x40013800
 8000ce4:	ffffbfff 	.word	0xffffbfff

08000ce8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a06      	ldr	r2, [pc, #24]	@ (8000d10 <HAL_RTC_MspInit+0x28>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d106      	bne.n	8000d08 <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_RTC_MspInit+0x2c>)
 8000cfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000cfe:	4b05      	ldr	r3, [pc, #20]	@ (8000d14 <HAL_RTC_MspInit+0x2c>)
 8000d00:	2180      	movs	r1, #128	@ 0x80
 8000d02:	02c9      	lsls	r1, r1, #11
 8000d04:	430a      	orrs	r2, r1
 8000d06:	651a      	str	r2, [r3, #80]	@ 0x50

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40002800 	.word	0x40002800
 8000d14:	40021000 	.word	0x40021000

08000d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	e7fd      	b.n	8000d1c <NMI_Handler+0x4>

08000d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	e7fd      	b.n	8000d24 <HardFault_Handler+0x4>

08000d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d2c:	46c0      	nop			@ (mov r8, r8)
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	46c0      	nop			@ (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 f8be 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <_sbrk>:
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	4a14      	ldr	r2, [pc, #80]	@ (8000da8 <_sbrk+0x5c>)
 8000d56:	4b15      	ldr	r3, [pc, #84]	@ (8000dac <_sbrk+0x60>)
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	617b      	str	r3, [r7, #20]
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	4b13      	ldr	r3, [pc, #76]	@ (8000db0 <_sbrk+0x64>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <_sbrk+0x22>
 8000d68:	4b11      	ldr	r3, [pc, #68]	@ (8000db0 <_sbrk+0x64>)
 8000d6a:	4a12      	ldr	r2, [pc, #72]	@ (8000db4 <_sbrk+0x68>)
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	18d3      	adds	r3, r2, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d207      	bcs.n	8000d8c <_sbrk+0x40>
 8000d7c:	f002 ff60 	bl	8003c40 <__errno>
 8000d80:	0003      	movs	r3, r0
 8000d82:	220c      	movs	r2, #12
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	2301      	movs	r3, #1
 8000d88:	425b      	negs	r3, r3
 8000d8a:	e009      	b.n	8000da0 <_sbrk+0x54>
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b07      	ldr	r3, [pc, #28]	@ (8000db0 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	18d2      	adds	r2, r2, r3
 8000d9a:	4b05      	ldr	r3, [pc, #20]	@ (8000db0 <_sbrk+0x64>)
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b006      	add	sp, #24
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20005000 	.word	0x20005000
 8000dac:	00000400 	.word	0x00000400
 8000db0:	20000200 	.word	0x20000200
 8000db4:	20000350 	.word	0x20000350

08000db8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	46c0      	nop			@ (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000dc4:	480d      	ldr	r0, [pc, #52]	@ (8000dfc <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000dc6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc8:	f7ff fff6 	bl	8000db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dcc:	480c      	ldr	r0, [pc, #48]	@ (8000e00 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dce:	490d      	ldr	r1, [pc, #52]	@ (8000e04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e08 <LoopForever+0xe>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dd4:	e002      	b.n	8000ddc <LoopCopyDataInit>

08000dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dda:	3304      	adds	r3, #4

08000ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de0:	d3f9      	bcc.n	8000dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e10 <LoopForever+0x16>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de8:	e001      	b.n	8000dee <LoopFillZerobss>

08000dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dec:	3204      	adds	r2, #4

08000dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df0:	d3fb      	bcc.n	8000dea <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8000df2:	f002 ff2b 	bl	8003c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df6:	f7ff fbc5 	bl	8000584 <main>

08000dfa <LoopForever>:

LoopForever:
    b LoopForever
 8000dfa:	e7fe      	b.n	8000dfa <LoopForever>
   ldr   r0, =_estack
 8000dfc:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e04:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e08:	08004820 	.word	0x08004820
  ldr r2, =_sbss
 8000e0c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e10:	20000350 	.word	0x20000350

08000e14 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	e7fe      	b.n	8000e14 <ADC1_COMP_IRQHandler>
	...

08000e18 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <HAL_Init+0x3c>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <HAL_Init+0x3c>)
 8000e2a:	2140      	movs	r1, #64	@ 0x40
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f811 	bl	8000e58 <HAL_InitTick>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d003      	beq.n	8000e42 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e001      	b.n	8000e46 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e42:	f7ff fe25 	bl	8000a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e46:	1dfb      	adds	r3, r7, #7
 8000e48:	781b      	ldrb	r3, [r3, #0]
}
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	b002      	add	sp, #8
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			@ (mov r8, r8)
 8000e54:	40022000 	.word	0x40022000

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <HAL_InitTick+0x5c>)
 8000e62:	681c      	ldr	r4, [r3, #0]
 8000e64:	4b14      	ldr	r3, [pc, #80]	@ (8000eb8 <HAL_InitTick+0x60>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	0019      	movs	r1, r3
 8000e6a:	23fa      	movs	r3, #250	@ 0xfa
 8000e6c:	0098      	lsls	r0, r3, #2
 8000e6e:	f7ff f95d 	bl	800012c <__udivsi3>
 8000e72:	0003      	movs	r3, r0
 8000e74:	0019      	movs	r1, r3
 8000e76:	0020      	movs	r0, r4
 8000e78:	f7ff f958 	bl	800012c <__udivsi3>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f000 f92f 	bl	80010e2 <HAL_SYSTICK_Config>
 8000e84:	1e03      	subs	r3, r0, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e00f      	b.n	8000eac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b03      	cmp	r3, #3
 8000e90:	d80b      	bhi.n	8000eaa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	2301      	movs	r3, #1
 8000e96:	425b      	negs	r3, r3
 8000e98:	2200      	movs	r2, #0
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f000 f8fc 	bl	8001098 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <HAL_InitTick+0x64>)
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b003      	add	sp, #12
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec4:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <HAL_IncTick+0x1c>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	001a      	movs	r2, r3
 8000eca:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	18d2      	adds	r2, r2, r3
 8000ed0:	4b03      	ldr	r3, [pc, #12]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ed2:	601a      	str	r2, [r3, #0]
}
 8000ed4:	46c0      	nop			@ (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	46c0      	nop			@ (mov r8, r8)
 8000edc:	20000008 	.word	0x20000008
 8000ee0:	20000204 	.word	0x20000204

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b02      	ldr	r3, [pc, #8]	@ (8000ef4 <HAL_GetTick+0x10>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	46c0      	nop			@ (mov r8, r8)
 8000ef4:	20000204 	.word	0x20000204

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff fff0 	bl	8000ee4 <HAL_GetTick>
 8000f04:	0003      	movs	r3, r0
 8000f06:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	d005      	beq.n	8000f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f12:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <HAL_Delay+0x44>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	001a      	movs	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	189b      	adds	r3, r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	f7ff ffe0 	bl	8000ee4 <HAL_GetTick>
 8000f24:	0002      	movs	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8f7      	bhi.n	8000f20 <HAL_Delay+0x28>
  {
  }
}
 8000f30:	46c0      	nop			@ (mov r8, r8)
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	46bd      	mov	sp, r7
 8000f36:	b004      	add	sp, #16
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	46c0      	nop			@ (mov r8, r8)
 8000f3c:	20000008 	.word	0x20000008

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	0002      	movs	r2, r0
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f4c:	1dfb      	adds	r3, r7, #7
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f52:	d809      	bhi.n	8000f68 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	001a      	movs	r2, r3
 8000f5a:	231f      	movs	r3, #31
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	4b04      	ldr	r3, [pc, #16]	@ (8000f70 <__NVIC_EnableIRQ+0x30>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	4091      	lsls	r1, r2
 8000f64:	000a      	movs	r2, r1
 8000f66:	601a      	str	r2, [r3, #0]
  }
}
 8000f68:	46c0      	nop			@ (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b002      	add	sp, #8
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	0002      	movs	r2, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	1dfb      	adds	r3, r7, #7
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f88:	d828      	bhi.n	8000fdc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8001048 <__NVIC_SetPriority+0xd4>)
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	33c0      	adds	r3, #192	@ 0xc0
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	589b      	ldr	r3, [r3, r2]
 8000f9a:	1dfa      	adds	r2, r7, #7
 8000f9c:	7812      	ldrb	r2, [r2, #0]
 8000f9e:	0011      	movs	r1, r2
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	400a      	ands	r2, r1
 8000fa4:	00d2      	lsls	r2, r2, #3
 8000fa6:	21ff      	movs	r1, #255	@ 0xff
 8000fa8:	4091      	lsls	r1, r2
 8000faa:	000a      	movs	r2, r1
 8000fac:	43d2      	mvns	r2, r2
 8000fae:	401a      	ands	r2, r3
 8000fb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	019b      	lsls	r3, r3, #6
 8000fb6:	22ff      	movs	r2, #255	@ 0xff
 8000fb8:	401a      	ands	r2, r3
 8000fba:	1dfb      	adds	r3, r7, #7
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	4003      	ands	r3, r0
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc8:	481f      	ldr	r0, [pc, #124]	@ (8001048 <__NVIC_SetPriority+0xd4>)
 8000fca:	1dfb      	adds	r3, r7, #7
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b25b      	sxtb	r3, r3
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	33c0      	adds	r3, #192	@ 0xc0
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fda:	e031      	b.n	8001040 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fdc:	4a1b      	ldr	r2, [pc, #108]	@ (800104c <__NVIC_SetPriority+0xd8>)
 8000fde:	1dfb      	adds	r3, r7, #7
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	0019      	movs	r1, r3
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	400b      	ands	r3, r1
 8000fe8:	3b08      	subs	r3, #8
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3306      	adds	r3, #6
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	18d3      	adds	r3, r2, r3
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	1dfa      	adds	r2, r7, #7
 8000ff8:	7812      	ldrb	r2, [r2, #0]
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	400a      	ands	r2, r1
 8001000:	00d2      	lsls	r2, r2, #3
 8001002:	21ff      	movs	r1, #255	@ 0xff
 8001004:	4091      	lsls	r1, r2
 8001006:	000a      	movs	r2, r1
 8001008:	43d2      	mvns	r2, r2
 800100a:	401a      	ands	r2, r3
 800100c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	019b      	lsls	r3, r3, #6
 8001012:	22ff      	movs	r2, #255	@ 0xff
 8001014:	401a      	ands	r2, r3
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	0018      	movs	r0, r3
 800101c:	2303      	movs	r3, #3
 800101e:	4003      	ands	r3, r0
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001024:	4809      	ldr	r0, [pc, #36]	@ (800104c <__NVIC_SetPriority+0xd8>)
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	001c      	movs	r4, r3
 800102c:	230f      	movs	r3, #15
 800102e:	4023      	ands	r3, r4
 8001030:	3b08      	subs	r3, #8
 8001032:	089b      	lsrs	r3, r3, #2
 8001034:	430a      	orrs	r2, r1
 8001036:	3306      	adds	r3, #6
 8001038:	009b      	lsls	r3, r3, #2
 800103a:	18c3      	adds	r3, r0, r3
 800103c:	3304      	adds	r3, #4
 800103e:	601a      	str	r2, [r3, #0]
}
 8001040:	46c0      	nop			@ (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b003      	add	sp, #12
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	e000e100 	.word	0xe000e100
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	1e5a      	subs	r2, r3, #1
 800105c:	2380      	movs	r3, #128	@ 0x80
 800105e:	045b      	lsls	r3, r3, #17
 8001060:	429a      	cmp	r2, r3
 8001062:	d301      	bcc.n	8001068 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001064:	2301      	movs	r3, #1
 8001066:	e010      	b.n	800108a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001068:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <SysTick_Config+0x44>)
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	3a01      	subs	r2, #1
 800106e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001070:	2301      	movs	r3, #1
 8001072:	425b      	negs	r3, r3
 8001074:	2103      	movs	r1, #3
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff ff7c 	bl	8000f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <SysTick_Config+0x44>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001082:	4b04      	ldr	r3, [pc, #16]	@ (8001094 <SysTick_Config+0x44>)
 8001084:	2207      	movs	r2, #7
 8001086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001088:	2300      	movs	r3, #0
}
 800108a:	0018      	movs	r0, r3
 800108c:	46bd      	mov	sp, r7
 800108e:	b002      	add	sp, #8
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	210f      	movs	r1, #15
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	1c02      	adds	r2, r0, #0
 80010a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010aa:	68ba      	ldr	r2, [r7, #8]
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b25b      	sxtb	r3, r3
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f7ff ff5d 	bl	8000f74 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	46bd      	mov	sp, r7
 80010be:	b004      	add	sp, #16
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	0002      	movs	r2, r0
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	b25b      	sxtb	r3, r3
 80010d4:	0018      	movs	r0, r3
 80010d6:	f7ff ff33 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	0018      	movs	r0, r3
 80010ee:	f7ff ffaf 	bl	8001050 <SysTick_Config>
 80010f2:	0003      	movs	r3, r0
}
 80010f4:	0018      	movs	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001112:	e155      	b.n	80013c0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2101      	movs	r1, #1
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	4091      	lsls	r1, r2
 800111e:	000a      	movs	r2, r1
 8001120:	4013      	ands	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d100      	bne.n	800112c <HAL_GPIO_Init+0x30>
 800112a:	e146      	b.n	80013ba <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2203      	movs	r2, #3
 8001132:	4013      	ands	r3, r2
 8001134:	2b01      	cmp	r3, #1
 8001136:	d005      	beq.n	8001144 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2203      	movs	r2, #3
 800113e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001140:	2b02      	cmp	r3, #2
 8001142:	d130      	bne.n	80011a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	409a      	lsls	r2, r3
 8001152:	0013      	movs	r3, r2
 8001154:	43da      	mvns	r2, r3
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	68da      	ldr	r2, [r3, #12]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800117a:	2201      	movs	r2, #1
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	409a      	lsls	r2, r3
 8001180:	0013      	movs	r3, r2
 8001182:	43da      	mvns	r2, r3
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	091b      	lsrs	r3, r3, #4
 8001190:	2201      	movs	r2, #1
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
 8001198:	0013      	movs	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2203      	movs	r2, #3
 80011ac:	4013      	ands	r3, r2
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d017      	beq.n	80011e2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	409a      	lsls	r2, r3
 80011c0:	0013      	movs	r3, r2
 80011c2:	43da      	mvns	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2203      	movs	r2, #3
 80011e8:	4013      	ands	r3, r2
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d123      	bne.n	8001236 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	08da      	lsrs	r2, r3, #3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3208      	adds	r2, #8
 80011f6:	0092      	lsls	r2, r2, #2
 80011f8:	58d3      	ldr	r3, [r2, r3]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	2207      	movs	r2, #7
 8001200:	4013      	ands	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	220f      	movs	r2, #15
 8001206:	409a      	lsls	r2, r3
 8001208:	0013      	movs	r3, r2
 800120a:	43da      	mvns	r2, r3
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4013      	ands	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	691a      	ldr	r2, [r3, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2107      	movs	r1, #7
 800121a:	400b      	ands	r3, r1
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	409a      	lsls	r2, r3
 8001220:	0013      	movs	r3, r2
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4313      	orrs	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	08da      	lsrs	r2, r3, #3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3208      	adds	r2, #8
 8001230:	0092      	lsls	r2, r2, #2
 8001232:	6939      	ldr	r1, [r7, #16]
 8001234:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	409a      	lsls	r2, r3
 8001244:	0013      	movs	r3, r2
 8001246:	43da      	mvns	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2203      	movs	r2, #3
 8001254:	401a      	ands	r2, r3
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	409a      	lsls	r2, r3
 800125c:	0013      	movs	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685a      	ldr	r2, [r3, #4]
 800126e:	23c0      	movs	r3, #192	@ 0xc0
 8001270:	029b      	lsls	r3, r3, #10
 8001272:	4013      	ands	r3, r2
 8001274:	d100      	bne.n	8001278 <HAL_GPIO_Init+0x17c>
 8001276:	e0a0      	b.n	80013ba <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001278:	4b57      	ldr	r3, [pc, #348]	@ (80013d8 <HAL_GPIO_Init+0x2dc>)
 800127a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800127c:	4b56      	ldr	r3, [pc, #344]	@ (80013d8 <HAL_GPIO_Init+0x2dc>)
 800127e:	2101      	movs	r1, #1
 8001280:	430a      	orrs	r2, r1
 8001282:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001284:	4a55      	ldr	r2, [pc, #340]	@ (80013dc <HAL_GPIO_Init+0x2e0>)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3302      	adds	r3, #2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	589b      	ldr	r3, [r3, r2]
 8001290:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2203      	movs	r2, #3
 8001296:	4013      	ands	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	220f      	movs	r2, #15
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	43da      	mvns	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	23a0      	movs	r3, #160	@ 0xa0
 80012ac:	05db      	lsls	r3, r3, #23
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d01f      	beq.n	80012f2 <HAL_GPIO_Init+0x1f6>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a4a      	ldr	r2, [pc, #296]	@ (80013e0 <HAL_GPIO_Init+0x2e4>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d019      	beq.n	80012ee <HAL_GPIO_Init+0x1f2>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a49      	ldr	r2, [pc, #292]	@ (80013e4 <HAL_GPIO_Init+0x2e8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d013      	beq.n	80012ea <HAL_GPIO_Init+0x1ee>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a48      	ldr	r2, [pc, #288]	@ (80013e8 <HAL_GPIO_Init+0x2ec>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d00d      	beq.n	80012e6 <HAL_GPIO_Init+0x1ea>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a47      	ldr	r2, [pc, #284]	@ (80013ec <HAL_GPIO_Init+0x2f0>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d007      	beq.n	80012e2 <HAL_GPIO_Init+0x1e6>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a46      	ldr	r2, [pc, #280]	@ (80013f0 <HAL_GPIO_Init+0x2f4>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d101      	bne.n	80012de <HAL_GPIO_Init+0x1e2>
 80012da:	2305      	movs	r3, #5
 80012dc:	e00a      	b.n	80012f4 <HAL_GPIO_Init+0x1f8>
 80012de:	2306      	movs	r3, #6
 80012e0:	e008      	b.n	80012f4 <HAL_GPIO_Init+0x1f8>
 80012e2:	2304      	movs	r3, #4
 80012e4:	e006      	b.n	80012f4 <HAL_GPIO_Init+0x1f8>
 80012e6:	2303      	movs	r3, #3
 80012e8:	e004      	b.n	80012f4 <HAL_GPIO_Init+0x1f8>
 80012ea:	2302      	movs	r3, #2
 80012ec:	e002      	b.n	80012f4 <HAL_GPIO_Init+0x1f8>
 80012ee:	2301      	movs	r3, #1
 80012f0:	e000      	b.n	80012f4 <HAL_GPIO_Init+0x1f8>
 80012f2:	2300      	movs	r3, #0
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	2103      	movs	r1, #3
 80012f8:	400a      	ands	r2, r1
 80012fa:	0092      	lsls	r2, r2, #2
 80012fc:	4093      	lsls	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001304:	4935      	ldr	r1, [pc, #212]	@ (80013dc <HAL_GPIO_Init+0x2e0>)
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	3302      	adds	r3, #2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001312:	4b38      	ldr	r3, [pc, #224]	@ (80013f4 <HAL_GPIO_Init+0x2f8>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	43da      	mvns	r2, r3
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4013      	ands	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685a      	ldr	r2, [r3, #4]
 8001326:	2380      	movs	r3, #128	@ 0x80
 8001328:	035b      	lsls	r3, r3, #13
 800132a:	4013      	ands	r3, r2
 800132c:	d003      	beq.n	8001336 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001336:	4b2f      	ldr	r3, [pc, #188]	@ (80013f4 <HAL_GPIO_Init+0x2f8>)
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800133c:	4b2d      	ldr	r3, [pc, #180]	@ (80013f4 <HAL_GPIO_Init+0x2f8>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43da      	mvns	r2, r3
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	2380      	movs	r3, #128	@ 0x80
 8001352:	039b      	lsls	r3, r3, #14
 8001354:	4013      	ands	r3, r2
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001360:	4b24      	ldr	r3, [pc, #144]	@ (80013f4 <HAL_GPIO_Init+0x2f8>)
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001366:	4b23      	ldr	r3, [pc, #140]	@ (80013f4 <HAL_GPIO_Init+0x2f8>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	43da      	mvns	r2, r3
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	029b      	lsls	r3, r3, #10
 800137e:	4013      	ands	r3, r2
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800138a:	4b1a      	ldr	r3, [pc, #104]	@ (80013f4 <HAL_GPIO_Init+0x2f8>)
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001390:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <HAL_GPIO_Init+0x2f8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43da      	mvns	r2, r3
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	2380      	movs	r3, #128	@ 0x80
 80013a6:	025b      	lsls	r3, r3, #9
 80013a8:	4013      	ands	r3, r2
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	@ (80013f4 <HAL_GPIO_Init+0x2f8>)
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3301      	adds	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	40da      	lsrs	r2, r3
 80013c8:	1e13      	subs	r3, r2, #0
 80013ca:	d000      	beq.n	80013ce <HAL_GPIO_Init+0x2d2>
 80013cc:	e6a2      	b.n	8001114 <HAL_GPIO_Init+0x18>
  }
}
 80013ce:	46c0      	nop			@ (mov r8, r8)
 80013d0:	46c0      	nop			@ (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b006      	add	sp, #24
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010000 	.word	0x40010000
 80013e0:	50000400 	.word	0x50000400
 80013e4:	50000800 	.word	0x50000800
 80013e8:	50000c00 	.word	0x50000c00
 80013ec:	50001000 	.word	0x50001000
 80013f0:	50001c00 	.word	0x50001c00
 80013f4:	40010400 	.word	0x40010400

080013f8 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001402:	2300      	movs	r3, #0
 8001404:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800140e:	e0bc      	b.n	800158a <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8001410:	2201      	movs	r2, #1
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	409a      	lsls	r2, r3
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	4013      	ands	r3, r2
 800141a:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d100      	bne.n	8001424 <HAL_GPIO_DeInit+0x2c>
 8001422:	e0af      	b.n	8001584 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8001424:	4a5e      	ldr	r2, [pc, #376]	@ (80015a0 <HAL_GPIO_DeInit+0x1a8>)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	589b      	ldr	r3, [r3, r2]
 8001430:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2203      	movs	r2, #3
 8001436:	4013      	ands	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	409a      	lsls	r2, r3
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4013      	ands	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	23a0      	movs	r3, #160	@ 0xa0
 8001448:	05db      	lsls	r3, r3, #23
 800144a:	429a      	cmp	r2, r3
 800144c:	d01f      	beq.n	800148e <HAL_GPIO_DeInit+0x96>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a54      	ldr	r2, [pc, #336]	@ (80015a4 <HAL_GPIO_DeInit+0x1ac>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d019      	beq.n	800148a <HAL_GPIO_DeInit+0x92>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a53      	ldr	r2, [pc, #332]	@ (80015a8 <HAL_GPIO_DeInit+0x1b0>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d013      	beq.n	8001486 <HAL_GPIO_DeInit+0x8e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a52      	ldr	r2, [pc, #328]	@ (80015ac <HAL_GPIO_DeInit+0x1b4>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d00d      	beq.n	8001482 <HAL_GPIO_DeInit+0x8a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a51      	ldr	r2, [pc, #324]	@ (80015b0 <HAL_GPIO_DeInit+0x1b8>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d007      	beq.n	800147e <HAL_GPIO_DeInit+0x86>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a50      	ldr	r2, [pc, #320]	@ (80015b4 <HAL_GPIO_DeInit+0x1bc>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d101      	bne.n	800147a <HAL_GPIO_DeInit+0x82>
 8001476:	2305      	movs	r3, #5
 8001478:	e00a      	b.n	8001490 <HAL_GPIO_DeInit+0x98>
 800147a:	2306      	movs	r3, #6
 800147c:	e008      	b.n	8001490 <HAL_GPIO_DeInit+0x98>
 800147e:	2304      	movs	r3, #4
 8001480:	e006      	b.n	8001490 <HAL_GPIO_DeInit+0x98>
 8001482:	2303      	movs	r3, #3
 8001484:	e004      	b.n	8001490 <HAL_GPIO_DeInit+0x98>
 8001486:	2302      	movs	r3, #2
 8001488:	e002      	b.n	8001490 <HAL_GPIO_DeInit+0x98>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_GPIO_DeInit+0x98>
 800148e:	2300      	movs	r3, #0
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	2103      	movs	r1, #3
 8001494:	400a      	ands	r2, r1
 8001496:	0092      	lsls	r2, r2, #2
 8001498:	4093      	lsls	r3, r2
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d132      	bne.n	8001506 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80014a0:	4b45      	ldr	r3, [pc, #276]	@ (80015b8 <HAL_GPIO_DeInit+0x1c0>)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	4b43      	ldr	r3, [pc, #268]	@ (80015b8 <HAL_GPIO_DeInit+0x1c0>)
 80014aa:	400a      	ands	r2, r1
 80014ac:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80014ae:	4b42      	ldr	r3, [pc, #264]	@ (80015b8 <HAL_GPIO_DeInit+0x1c0>)
 80014b0:	685a      	ldr	r2, [r3, #4]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43d9      	mvns	r1, r3
 80014b6:	4b40      	ldr	r3, [pc, #256]	@ (80015b8 <HAL_GPIO_DeInit+0x1c0>)
 80014b8:	400a      	ands	r2, r1
 80014ba:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80014bc:	4b3e      	ldr	r3, [pc, #248]	@ (80015b8 <HAL_GPIO_DeInit+0x1c0>)
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	4b3c      	ldr	r3, [pc, #240]	@ (80015b8 <HAL_GPIO_DeInit+0x1c0>)
 80014c6:	400a      	ands	r2, r1
 80014c8:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80014ca:	4b3b      	ldr	r3, [pc, #236]	@ (80015b8 <HAL_GPIO_DeInit+0x1c0>)
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	43d9      	mvns	r1, r3
 80014d2:	4b39      	ldr	r3, [pc, #228]	@ (80015b8 <HAL_GPIO_DeInit+0x1c0>)
 80014d4:	400a      	ands	r2, r1
 80014d6:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	2203      	movs	r2, #3
 80014dc:	4013      	ands	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	220f      	movs	r2, #15
 80014e2:	409a      	lsls	r2, r3
 80014e4:	0013      	movs	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80014e8:	4a2d      	ldr	r2, [pc, #180]	@ (80015a0 <HAL_GPIO_DeInit+0x1a8>)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	589a      	ldr	r2, [r3, r2]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	43d9      	mvns	r1, r3
 80014f8:	4829      	ldr	r0, [pc, #164]	@ (80015a0 <HAL_GPIO_DeInit+0x1a8>)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	089b      	lsrs	r3, r3, #2
 80014fe:	400a      	ands	r2, r1
 8001500:	3302      	adds	r3, #2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2103      	movs	r1, #3
 8001510:	4099      	lsls	r1, r3
 8001512:	000b      	movs	r3, r1
 8001514:	431a      	orrs	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	08da      	lsrs	r2, r3, #3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	3208      	adds	r2, #8
 8001522:	0092      	lsls	r2, r2, #2
 8001524:	58d3      	ldr	r3, [r2, r3]
 8001526:	697a      	ldr	r2, [r7, #20]
 8001528:	2107      	movs	r1, #7
 800152a:	400a      	ands	r2, r1
 800152c:	0092      	lsls	r2, r2, #2
 800152e:	210f      	movs	r1, #15
 8001530:	4091      	lsls	r1, r2
 8001532:	000a      	movs	r2, r1
 8001534:	43d1      	mvns	r1, r2
 8001536:	697a      	ldr	r2, [r7, #20]
 8001538:	08d2      	lsrs	r2, r2, #3
 800153a:	4019      	ands	r1, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3208      	adds	r2, #8
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	0052      	lsls	r2, r2, #1
 800154c:	2103      	movs	r1, #3
 800154e:	4091      	lsls	r1, r2
 8001550:	000a      	movs	r2, r1
 8001552:	43d2      	mvns	r2, r2
 8001554:	401a      	ands	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2101      	movs	r1, #1
 8001560:	697a      	ldr	r2, [r7, #20]
 8001562:	4091      	lsls	r1, r2
 8001564:	000a      	movs	r2, r1
 8001566:	43d2      	mvns	r2, r2
 8001568:	401a      	ands	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	0052      	lsls	r2, r2, #1
 8001576:	2103      	movs	r1, #3
 8001578:	4091      	lsls	r1, r2
 800157a:	000a      	movs	r2, r1
 800157c:	43d2      	mvns	r2, r2
 800157e:	401a      	ands	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	609a      	str	r2, [r3, #8]
    }
    position++;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	3301      	adds	r3, #1
 8001588:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	40da      	lsrs	r2, r3
 8001590:	1e13      	subs	r3, r2, #0
 8001592:	d000      	beq.n	8001596 <HAL_GPIO_DeInit+0x19e>
 8001594:	e73c      	b.n	8001410 <HAL_GPIO_DeInit+0x18>
  }
}
 8001596:	46c0      	nop			@ (mov r8, r8)
 8001598:	46c0      	nop			@ (mov r8, r8)
 800159a:	46bd      	mov	sp, r7
 800159c:	b006      	add	sp, #24
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40010000 	.word	0x40010000
 80015a4:	50000400 	.word	0x50000400
 80015a8:	50000800 	.word	0x50000800
 80015ac:	50000c00 	.word	0x50000c00
 80015b0:	50001000 	.word	0x50001000
 80015b4:	50001c00 	.word	0x50001c00
 80015b8:	40010400 	.word	0x40010400

080015bc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	0008      	movs	r0, r1
 80015c6:	0011      	movs	r1, r2
 80015c8:	1cbb      	adds	r3, r7, #2
 80015ca:	1c02      	adds	r2, r0, #0
 80015cc:	801a      	strh	r2, [r3, #0]
 80015ce:	1c7b      	adds	r3, r7, #1
 80015d0:	1c0a      	adds	r2, r1, #0
 80015d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015d4:	1c7b      	adds	r3, r7, #1
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d004      	beq.n	80015e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015dc:	1cbb      	adds	r3, r7, #2
 80015de:	881a      	ldrh	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80015e4:	e003      	b.n	80015ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80015e6:	1cbb      	adds	r3, r7, #2
 80015e8:	881a      	ldrh	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b002      	add	sp, #8
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e08f      	b.n	800172a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2241      	movs	r2, #65	@ 0x41
 800160e:	5c9b      	ldrb	r3, [r3, r2]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d107      	bne.n	8001626 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2240      	movs	r2, #64	@ 0x40
 800161a:	2100      	movs	r1, #0
 800161c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	0018      	movs	r0, r3
 8001622:	f7ff fa49 	bl	8000ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2241      	movs	r2, #65	@ 0x41
 800162a:	2124      	movs	r1, #36	@ 0x24
 800162c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2101      	movs	r1, #1
 800163a:	438a      	bics	r2, r1
 800163c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	493b      	ldr	r1, [pc, #236]	@ (8001734 <HAL_I2C_Init+0x13c>)
 8001648:	400a      	ands	r2, r1
 800164a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4938      	ldr	r1, [pc, #224]	@ (8001738 <HAL_I2C_Init+0x140>)
 8001658:	400a      	ands	r2, r1
 800165a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d108      	bne.n	8001676 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2180      	movs	r1, #128	@ 0x80
 800166e:	0209      	lsls	r1, r1, #8
 8001670:	430a      	orrs	r2, r1
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	e007      	b.n	8001686 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2184      	movs	r1, #132	@ 0x84
 8001680:	0209      	lsls	r1, r1, #8
 8001682:	430a      	orrs	r2, r1
 8001684:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b02      	cmp	r3, #2
 800168c:	d109      	bne.n	80016a2 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2180      	movs	r1, #128	@ 0x80
 800169a:	0109      	lsls	r1, r1, #4
 800169c:	430a      	orrs	r2, r1
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	e007      	b.n	80016b2 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4923      	ldr	r1, [pc, #140]	@ (800173c <HAL_I2C_Init+0x144>)
 80016ae:	400a      	ands	r2, r1
 80016b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4920      	ldr	r1, [pc, #128]	@ (8001740 <HAL_I2C_Init+0x148>)
 80016be:	430a      	orrs	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68da      	ldr	r2, [r3, #12]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	491a      	ldr	r1, [pc, #104]	@ (8001738 <HAL_I2C_Init+0x140>)
 80016ce:	400a      	ands	r2, r1
 80016d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	691a      	ldr	r2, [r3, #16]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	431a      	orrs	r2, r3
 80016dc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	699b      	ldr	r3, [r3, #24]
 80016e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	430a      	orrs	r2, r1
 80016ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	69d9      	ldr	r1, [r3, #28]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a1a      	ldr	r2, [r3, #32]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	430a      	orrs	r2, r1
 80016fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2101      	movs	r1, #1
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2200      	movs	r2, #0
 8001710:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2241      	movs	r2, #65	@ 0x41
 8001716:	2120      	movs	r1, #32
 8001718:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2242      	movs	r2, #66	@ 0x42
 8001724:	2100      	movs	r1, #0
 8001726:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	0018      	movs	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	b002      	add	sp, #8
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			@ (mov r8, r8)
 8001734:	f0ffffff 	.word	0xf0ffffff
 8001738:	ffff7fff 	.word	0xffff7fff
 800173c:	fffff7ff 	.word	0xfffff7ff
 8001740:	02008000 	.word	0x02008000

08001744 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e022      	b.n	800179c <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2241      	movs	r2, #65	@ 0x41
 800175a:	2124      	movs	r1, #36	@ 0x24
 800175c:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2101      	movs	r1, #1
 800176a:	438a      	bics	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff f9e5 	bl	8000b40 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2241      	movs	r2, #65	@ 0x41
 8001780:	2100      	movs	r1, #0
 8001782:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2242      	movs	r2, #66	@ 0x42
 800178e:	2100      	movs	r1, #0
 8001790:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2240      	movs	r2, #64	@ 0x40
 8001796:	2100      	movs	r1, #0
 8001798:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b002      	add	sp, #8
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2241      	movs	r2, #65	@ 0x41
 80017b2:	5c9b      	ldrb	r3, [r3, r2]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b20      	cmp	r3, #32
 80017b8:	d138      	bne.n	800182c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2240      	movs	r2, #64	@ 0x40
 80017be:	5c9b      	ldrb	r3, [r3, r2]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80017c4:	2302      	movs	r3, #2
 80017c6:	e032      	b.n	800182e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2240      	movs	r2, #64	@ 0x40
 80017cc:	2101      	movs	r1, #1
 80017ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2241      	movs	r2, #65	@ 0x41
 80017d4:	2124      	movs	r1, #36	@ 0x24
 80017d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2101      	movs	r1, #1
 80017e4:	438a      	bics	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4911      	ldr	r1, [pc, #68]	@ (8001838 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80017f4:	400a      	ands	r2, r1
 80017f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6819      	ldr	r1, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2101      	movs	r1, #1
 8001814:	430a      	orrs	r2, r1
 8001816:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2241      	movs	r2, #65	@ 0x41
 800181c:	2120      	movs	r1, #32
 800181e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2240      	movs	r2, #64	@ 0x40
 8001824:	2100      	movs	r1, #0
 8001826:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	e000      	b.n	800182e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800182c:	2302      	movs	r3, #2
  }
}
 800182e:	0018      	movs	r0, r3
 8001830:	46bd      	mov	sp, r7
 8001832:	b002      	add	sp, #8
 8001834:	bd80      	pop	{r7, pc}
 8001836:	46c0      	nop			@ (mov r8, r8)
 8001838:	ffffefff 	.word	0xffffefff

0800183c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2241      	movs	r2, #65	@ 0x41
 800184a:	5c9b      	ldrb	r3, [r3, r2]
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b20      	cmp	r3, #32
 8001850:	d139      	bne.n	80018c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2240      	movs	r2, #64	@ 0x40
 8001856:	5c9b      	ldrb	r3, [r3, r2]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d101      	bne.n	8001860 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800185c:	2302      	movs	r3, #2
 800185e:	e033      	b.n	80018c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2240      	movs	r2, #64	@ 0x40
 8001864:	2101      	movs	r1, #1
 8001866:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2241      	movs	r2, #65	@ 0x41
 800186c:	2124      	movs	r1, #36	@ 0x24
 800186e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2101      	movs	r1, #1
 800187c:	438a      	bics	r2, r1
 800187e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4a11      	ldr	r2, [pc, #68]	@ (80018d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800188c:	4013      	ands	r3, r2
 800188e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2101      	movs	r1, #1
 80018ae:	430a      	orrs	r2, r1
 80018b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2241      	movs	r2, #65	@ 0x41
 80018b6:	2120      	movs	r1, #32
 80018b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2240      	movs	r2, #64	@ 0x40
 80018be:	2100      	movs	r1, #0
 80018c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80018c6:	2302      	movs	r3, #2
  }
}
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b004      	add	sp, #16
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	fffff0ff 	.word	0xfffff0ff

080018d4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	000a      	movs	r2, r1
 80018de:	1cfb      	adds	r3, r7, #3
 80018e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80018e6:	4b25      	ldr	r3, [pc, #148]	@ (800197c <HAL_PWR_EnterSTOPMode+0xa8>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	2380      	movs	r3, #128	@ 0x80
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80018f2:	4b23      	ldr	r3, [pc, #140]	@ (8001980 <HAL_PWR_EnterSTOPMode+0xac>)
 80018f4:	6a1b      	ldr	r3, [r3, #32]
 80018f6:	2201      	movs	r2, #1
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d008      	beq.n	8001914 <HAL_PWR_EnterSTOPMode+0x40>
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001908:	4b1c      	ldr	r3, [pc, #112]	@ (800197c <HAL_PWR_EnterSTOPMode+0xa8>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <HAL_PWR_EnterSTOPMode+0xa8>)
 800190e:	491d      	ldr	r1, [pc, #116]	@ (8001984 <HAL_PWR_EnterSTOPMode+0xb0>)
 8001910:	400a      	ands	r2, r1
 8001912:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001914:	4b19      	ldr	r3, [pc, #100]	@ (800197c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2203      	movs	r2, #3
 800191e:	4393      	bics	r3, r2
 8001920:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4313      	orrs	r3, r2
 8001928:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800192a:	4b14      	ldr	r3, [pc, #80]	@ (800197c <HAL_PWR_EnterSTOPMode+0xa8>)
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001930:	4b15      	ldr	r3, [pc, #84]	@ (8001988 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001932:	691a      	ldr	r2, [r3, #16]
 8001934:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001936:	2104      	movs	r1, #4
 8001938:	430a      	orrs	r2, r1
 800193a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800193c:	1cfb      	adds	r3, r7, #3
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001944:	bf30      	wfi
 8001946:	e002      	b.n	800194e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001948:	bf40      	sev
    __WFE();
 800194a:	bf20      	wfe
    __WFE();
 800194c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001954:	2104      	movs	r1, #4
 8001956:	438a      	bics	r2, r1
 8001958:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d009      	beq.n	8001974 <HAL_PWR_EnterSTOPMode+0xa0>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001966:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_PWR_EnterSTOPMode+0xa8>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4b04      	ldr	r3, [pc, #16]	@ (800197c <HAL_PWR_EnterSTOPMode+0xa8>)
 800196c:	2180      	movs	r1, #128	@ 0x80
 800196e:	0089      	lsls	r1, r1, #2
 8001970:	430a      	orrs	r2, r1
 8001972:	601a      	str	r2, [r3, #0]
  }
}
 8001974:	46c0      	nop			@ (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	b006      	add	sp, #24
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40007000 	.word	0x40007000
 8001980:	40010000 	.word	0x40010000
 8001984:	fffffdff 	.word	0xfffffdff
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b5b0      	push	{r4, r5, r7, lr}
 800198e:	b08a      	sub	sp, #40	@ 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	f000 fbbf 	bl	800211e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a0:	4bc9      	ldr	r3, [pc, #804]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	220c      	movs	r2, #12
 80019a6:	4013      	ands	r3, r2
 80019a8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019aa:	4bc7      	ldr	r3, [pc, #796]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	2380      	movs	r3, #128	@ 0x80
 80019b0:	025b      	lsls	r3, r3, #9
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2201      	movs	r2, #1
 80019bc:	4013      	ands	r3, r2
 80019be:	d100      	bne.n	80019c2 <HAL_RCC_OscConfig+0x36>
 80019c0:	e07e      	b.n	8001ac0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d007      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	2b0c      	cmp	r3, #12
 80019cc:	d112      	bne.n	80019f4 <HAL_RCC_OscConfig+0x68>
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	2380      	movs	r3, #128	@ 0x80
 80019d2:	025b      	lsls	r3, r3, #9
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d10d      	bne.n	80019f4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	4bbb      	ldr	r3, [pc, #748]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	2380      	movs	r3, #128	@ 0x80
 80019de:	029b      	lsls	r3, r3, #10
 80019e0:	4013      	ands	r3, r2
 80019e2:	d100      	bne.n	80019e6 <HAL_RCC_OscConfig+0x5a>
 80019e4:	e06b      	b.n	8001abe <HAL_RCC_OscConfig+0x132>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d167      	bne.n	8001abe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f000 fb95 	bl	800211e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	2380      	movs	r3, #128	@ 0x80
 80019fa:	025b      	lsls	r3, r3, #9
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_OscConfig+0x84>
 8001a00:	4bb1      	ldr	r3, [pc, #708]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4bb0      	ldr	r3, [pc, #704]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001a06:	2180      	movs	r1, #128	@ 0x80
 8001a08:	0249      	lsls	r1, r1, #9
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e027      	b.n	8001a60 <HAL_RCC_OscConfig+0xd4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	23a0      	movs	r3, #160	@ 0xa0
 8001a16:	02db      	lsls	r3, r3, #11
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d10e      	bne.n	8001a3a <HAL_RCC_OscConfig+0xae>
 8001a1c:	4baa      	ldr	r3, [pc, #680]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4ba9      	ldr	r3, [pc, #676]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001a22:	2180      	movs	r1, #128	@ 0x80
 8001a24:	02c9      	lsls	r1, r1, #11
 8001a26:	430a      	orrs	r2, r1
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	4ba7      	ldr	r3, [pc, #668]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	4ba6      	ldr	r3, [pc, #664]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001a30:	2180      	movs	r1, #128	@ 0x80
 8001a32:	0249      	lsls	r1, r1, #9
 8001a34:	430a      	orrs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e012      	b.n	8001a60 <HAL_RCC_OscConfig+0xd4>
 8001a3a:	4ba3      	ldr	r3, [pc, #652]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	4ba2      	ldr	r3, [pc, #648]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001a40:	49a2      	ldr	r1, [pc, #648]	@ (8001ccc <HAL_RCC_OscConfig+0x340>)
 8001a42:	400a      	ands	r2, r1
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	4ba0      	ldr	r3, [pc, #640]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	2380      	movs	r3, #128	@ 0x80
 8001a4c:	025b      	lsls	r3, r3, #9
 8001a4e:	4013      	ands	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4b9c      	ldr	r3, [pc, #624]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b9b      	ldr	r3, [pc, #620]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001a5a:	499d      	ldr	r1, [pc, #628]	@ (8001cd0 <HAL_RCC_OscConfig+0x344>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d015      	beq.n	8001a94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a68:	f7ff fa3c 	bl	8000ee4 <HAL_GetTick>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a70:	e009      	b.n	8001a86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a72:	f7ff fa37 	bl	8000ee4 <HAL_GetTick>
 8001a76:	0002      	movs	r2, r0
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b64      	cmp	r3, #100	@ 0x64
 8001a7e:	d902      	bls.n	8001a86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	f000 fb4c 	bl	800211e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a86:	4b90      	ldr	r3, [pc, #576]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	2380      	movs	r3, #128	@ 0x80
 8001a8c:	029b      	lsls	r3, r3, #10
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d0ef      	beq.n	8001a72 <HAL_RCC_OscConfig+0xe6>
 8001a92:	e015      	b.n	8001ac0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff fa26 	bl	8000ee4 <HAL_GetTick>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a9e:	f7ff fa21 	bl	8000ee4 <HAL_GetTick>
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b64      	cmp	r3, #100	@ 0x64
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e336      	b.n	800211e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ab0:	4b85      	ldr	r3, [pc, #532]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2380      	movs	r3, #128	@ 0x80
 8001ab6:	029b      	lsls	r3, r3, #10
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x112>
 8001abc:	e000      	b.n	8001ac0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	d100      	bne.n	8001acc <HAL_RCC_OscConfig+0x140>
 8001aca:	e099      	b.n	8001c00 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d009      	beq.n	8001aee <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001ada:	4b7b      	ldr	r3, [pc, #492]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b7a      	ldr	r3, [pc, #488]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001ae0:	2120      	movs	r1, #32
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	2220      	movs	r2, #32
 8001aea:	4393      	bics	r3, r2
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d13e      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1ec>
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d13b      	bne.n	8001b78 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001b00:	4b71      	ldr	r3, [pc, #452]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2204      	movs	r2, #4
 8001b06:	4013      	ands	r3, r2
 8001b08:	d004      	beq.n	8001b14 <HAL_RCC_OscConfig+0x188>
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e304      	b.n	800211e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b14:	4b6c      	ldr	r3, [pc, #432]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4a6e      	ldr	r2, [pc, #440]	@ (8001cd4 <HAL_RCC_OscConfig+0x348>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	0019      	movs	r1, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	021a      	lsls	r2, r3, #8
 8001b24:	4b68      	ldr	r3, [pc, #416]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001b26:	430a      	orrs	r2, r1
 8001b28:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b2a:	4b67      	ldr	r3, [pc, #412]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2209      	movs	r2, #9
 8001b30:	4393      	bics	r3, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	4b64      	ldr	r3, [pc, #400]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b3c:	f000 fc42 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8001b40:	0001      	movs	r1, r0
 8001b42:	4b61      	ldr	r3, [pc, #388]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	220f      	movs	r2, #15
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	4a62      	ldr	r2, [pc, #392]	@ (8001cd8 <HAL_RCC_OscConfig+0x34c>)
 8001b4e:	5cd3      	ldrb	r3, [r2, r3]
 8001b50:	000a      	movs	r2, r1
 8001b52:	40da      	lsrs	r2, r3
 8001b54:	4b61      	ldr	r3, [pc, #388]	@ (8001cdc <HAL_RCC_OscConfig+0x350>)
 8001b56:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001b58:	4b61      	ldr	r3, [pc, #388]	@ (8001ce0 <HAL_RCC_OscConfig+0x354>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2513      	movs	r5, #19
 8001b5e:	197c      	adds	r4, r7, r5
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7ff f979 	bl	8000e58 <HAL_InitTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001b6a:	197b      	adds	r3, r7, r5
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d046      	beq.n	8001c00 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001b72:	197b      	adds	r3, r7, r5
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	e2d2      	b.n	800211e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d027      	beq.n	8001bce <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001b7e:	4b52      	ldr	r3, [pc, #328]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2209      	movs	r2, #9
 8001b84:	4393      	bics	r3, r2
 8001b86:	0019      	movs	r1, r3
 8001b88:	4b4f      	ldr	r3, [pc, #316]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff f9a8 	bl	8000ee4 <HAL_GetTick>
 8001b94:	0003      	movs	r3, r0
 8001b96:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9a:	f7ff f9a3 	bl	8000ee4 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e2b8      	b.n	800211e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bac:	4b46      	ldr	r3, [pc, #280]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d0f1      	beq.n	8001b9a <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb6:	4b44      	ldr	r3, [pc, #272]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4a46      	ldr	r2, [pc, #280]	@ (8001cd4 <HAL_RCC_OscConfig+0x348>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	021a      	lsls	r2, r3, #8
 8001bc6:	4b40      	ldr	r3, [pc, #256]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	e018      	b.n	8001c00 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bce:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	4b3d      	ldr	r3, [pc, #244]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	438a      	bics	r2, r1
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bda:	f7ff f983 	bl	8000ee4 <HAL_GetTick>
 8001bde:	0003      	movs	r3, r0
 8001be0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001be4:	f7ff f97e 	bl	8000ee4 <HAL_GetTick>
 8001be8:	0002      	movs	r2, r0
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e293      	b.n	800211e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bf6:	4b34      	ldr	r3, [pc, #208]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	d1f1      	bne.n	8001be4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2210      	movs	r2, #16
 8001c06:	4013      	ands	r3, r2
 8001c08:	d100      	bne.n	8001c0c <HAL_RCC_OscConfig+0x280>
 8001c0a:	e0a2      	b.n	8001d52 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d140      	bne.n	8001c94 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c12:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	2380      	movs	r3, #128	@ 0x80
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d005      	beq.n	8001c2a <HAL_RCC_OscConfig+0x29e>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e279      	b.n	800211e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c2a:	4b27      	ldr	r3, [pc, #156]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ce4 <HAL_RCC_OscConfig+0x358>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c38:	4b23      	ldr	r3, [pc, #140]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c3e:	4b22      	ldr	r3, [pc, #136]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	0a19      	lsrs	r1, r3, #8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	061a      	lsls	r2, r3, #24
 8001c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c56:	0b5b      	lsrs	r3, r3, #13
 8001c58:	3301      	adds	r3, #1
 8001c5a:	2280      	movs	r2, #128	@ 0x80
 8001c5c:	0212      	lsls	r2, r2, #8
 8001c5e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001c60:	4b19      	ldr	r3, [pc, #100]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	210f      	movs	r1, #15
 8001c68:	400b      	ands	r3, r1
 8001c6a:	491b      	ldr	r1, [pc, #108]	@ (8001cd8 <HAL_RCC_OscConfig+0x34c>)
 8001c6c:	5ccb      	ldrb	r3, [r1, r3]
 8001c6e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001c70:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <HAL_RCC_OscConfig+0x350>)
 8001c72:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001c74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce0 <HAL_RCC_OscConfig+0x354>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2513      	movs	r5, #19
 8001c7a:	197c      	adds	r4, r7, r5
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f7ff f8eb 	bl	8000e58 <HAL_InitTick>
 8001c82:	0003      	movs	r3, r0
 8001c84:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001c86:	197b      	adds	r3, r7, r5
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d061      	beq.n	8001d52 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001c8e:	197b      	adds	r3, r7, r5
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	e244      	b.n	800211e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d040      	beq.n	8001d1e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <HAL_RCC_OscConfig+0x33c>)
 8001ca2:	2180      	movs	r1, #128	@ 0x80
 8001ca4:	0049      	lsls	r1, r1, #1
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7ff f91b 	bl	8000ee4 <HAL_GetTick>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cb2:	e019      	b.n	8001ce8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb4:	f7ff f916 	bl	8000ee4 <HAL_GetTick>
 8001cb8:	0002      	movs	r2, r0
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d912      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e22b      	b.n	800211e <HAL_RCC_OscConfig+0x792>
 8001cc6:	46c0      	nop			@ (mov r8, r8)
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	fffeffff 	.word	0xfffeffff
 8001cd0:	fffbffff 	.word	0xfffbffff
 8001cd4:	ffffe0ff 	.word	0xffffe0ff
 8001cd8:	08004770 	.word	0x08004770
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000004 	.word	0x20000004
 8001ce4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001ce8:	4bca      	ldr	r3, [pc, #808]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	@ 0x80
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d0df      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf4:	4bc7      	ldr	r3, [pc, #796]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	4ac7      	ldr	r2, [pc, #796]	@ (8002018 <HAL_RCC_OscConfig+0x68c>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	0019      	movs	r1, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d02:	4bc4      	ldr	r3, [pc, #784]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001d04:	430a      	orrs	r2, r1
 8001d06:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d08:	4bc2      	ldr	r3, [pc, #776]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	0a19      	lsrs	r1, r3, #8
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	061a      	lsls	r2, r3, #24
 8001d16:	4bbf      	ldr	r3, [pc, #764]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	e019      	b.n	8001d52 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d1e:	4bbd      	ldr	r3, [pc, #756]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	4bbc      	ldr	r3, [pc, #752]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001d24:	49bd      	ldr	r1, [pc, #756]	@ (800201c <HAL_RCC_OscConfig+0x690>)
 8001d26:	400a      	ands	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2a:	f7ff f8db 	bl	8000ee4 <HAL_GetTick>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d34:	f7ff f8d6 	bl	8000ee4 <HAL_GetTick>
 8001d38:	0002      	movs	r2, r0
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e1eb      	b.n	800211e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001d46:	4bb3      	ldr	r3, [pc, #716]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2208      	movs	r2, #8
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d036      	beq.n	8001dca <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d019      	beq.n	8001d98 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d64:	4bab      	ldr	r3, [pc, #684]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001d66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d68:	4baa      	ldr	r3, [pc, #680]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	430a      	orrs	r2, r1
 8001d6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d70:	f7ff f8b8 	bl	8000ee4 <HAL_GetTick>
 8001d74:	0003      	movs	r3, r0
 8001d76:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d7a:	f7ff f8b3 	bl	8000ee4 <HAL_GetTick>
 8001d7e:	0002      	movs	r2, r0
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e1c8      	b.n	800211e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d8c:	4ba1      	ldr	r3, [pc, #644]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001d8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d90:	2202      	movs	r2, #2
 8001d92:	4013      	ands	r3, r2
 8001d94:	d0f1      	beq.n	8001d7a <HAL_RCC_OscConfig+0x3ee>
 8001d96:	e018      	b.n	8001dca <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d98:	4b9e      	ldr	r3, [pc, #632]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001d9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d9c:	4b9d      	ldr	r3, [pc, #628]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	438a      	bics	r2, r1
 8001da2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da4:	f7ff f89e 	bl	8000ee4 <HAL_GetTick>
 8001da8:	0003      	movs	r3, r0
 8001daa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dae:	f7ff f899 	bl	8000ee4 <HAL_GetTick>
 8001db2:	0002      	movs	r2, r0
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e1ae      	b.n	800211e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001dc0:	4b94      	ldr	r3, [pc, #592]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d1f1      	bne.n	8001dae <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2204      	movs	r2, #4
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	d100      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x44a>
 8001dd4:	e0ae      	b.n	8001f34 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd6:	2023      	movs	r0, #35	@ 0x23
 8001dd8:	183b      	adds	r3, r7, r0
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dde:	4b8d      	ldr	r3, [pc, #564]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001de0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001de2:	2380      	movs	r3, #128	@ 0x80
 8001de4:	055b      	lsls	r3, r3, #21
 8001de6:	4013      	ands	r3, r2
 8001de8:	d109      	bne.n	8001dfe <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dea:	4b8a      	ldr	r3, [pc, #552]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001dec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001dee:	4b89      	ldr	r3, [pc, #548]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001df0:	2180      	movs	r1, #128	@ 0x80
 8001df2:	0549      	lsls	r1, r1, #21
 8001df4:	430a      	orrs	r2, r1
 8001df6:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001df8:	183b      	adds	r3, r7, r0
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b88      	ldr	r3, [pc, #544]	@ (8002020 <HAL_RCC_OscConfig+0x694>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	2380      	movs	r3, #128	@ 0x80
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4013      	ands	r3, r2
 8001e08:	d11a      	bne.n	8001e40 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0a:	4b85      	ldr	r3, [pc, #532]	@ (8002020 <HAL_RCC_OscConfig+0x694>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	4b84      	ldr	r3, [pc, #528]	@ (8002020 <HAL_RCC_OscConfig+0x694>)
 8001e10:	2180      	movs	r1, #128	@ 0x80
 8001e12:	0049      	lsls	r1, r1, #1
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e18:	f7ff f864 	bl	8000ee4 <HAL_GetTick>
 8001e1c:	0003      	movs	r3, r0
 8001e1e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e22:	f7ff f85f 	bl	8000ee4 <HAL_GetTick>
 8001e26:	0002      	movs	r2, r0
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b64      	cmp	r3, #100	@ 0x64
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e174      	b.n	800211e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e34:	4b7a      	ldr	r3, [pc, #488]	@ (8002020 <HAL_RCC_OscConfig+0x694>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	@ 0x80
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	2380      	movs	r3, #128	@ 0x80
 8001e46:	005b      	lsls	r3, r3, #1
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d107      	bne.n	8001e5c <HAL_RCC_OscConfig+0x4d0>
 8001e4c:	4b71      	ldr	r3, [pc, #452]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001e4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e50:	4b70      	ldr	r3, [pc, #448]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001e52:	2180      	movs	r1, #128	@ 0x80
 8001e54:	0049      	lsls	r1, r1, #1
 8001e56:	430a      	orrs	r2, r1
 8001e58:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e5a:	e031      	b.n	8001ec0 <HAL_RCC_OscConfig+0x534>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10c      	bne.n	8001e7e <HAL_RCC_OscConfig+0x4f2>
 8001e64:	4b6b      	ldr	r3, [pc, #428]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001e66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e68:	4b6a      	ldr	r3, [pc, #424]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001e6a:	496c      	ldr	r1, [pc, #432]	@ (800201c <HAL_RCC_OscConfig+0x690>)
 8001e6c:	400a      	ands	r2, r1
 8001e6e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e70:	4b68      	ldr	r3, [pc, #416]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001e72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e74:	4b67      	ldr	r3, [pc, #412]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001e76:	496b      	ldr	r1, [pc, #428]	@ (8002024 <HAL_RCC_OscConfig+0x698>)
 8001e78:	400a      	ands	r2, r1
 8001e7a:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e7c:	e020      	b.n	8001ec0 <HAL_RCC_OscConfig+0x534>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	23a0      	movs	r3, #160	@ 0xa0
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d10e      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x51c>
 8001e8a:	4b62      	ldr	r3, [pc, #392]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001e8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e8e:	4b61      	ldr	r3, [pc, #388]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001e90:	2180      	movs	r1, #128	@ 0x80
 8001e92:	00c9      	lsls	r1, r1, #3
 8001e94:	430a      	orrs	r2, r1
 8001e96:	651a      	str	r2, [r3, #80]	@ 0x50
 8001e98:	4b5e      	ldr	r3, [pc, #376]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001e9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e9c:	4b5d      	ldr	r3, [pc, #372]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001e9e:	2180      	movs	r1, #128	@ 0x80
 8001ea0:	0049      	lsls	r1, r1, #1
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x534>
 8001ea8:	4b5a      	ldr	r3, [pc, #360]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001eaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001eac:	4b59      	ldr	r3, [pc, #356]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001eae:	495b      	ldr	r1, [pc, #364]	@ (800201c <HAL_RCC_OscConfig+0x690>)
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	651a      	str	r2, [r3, #80]	@ 0x50
 8001eb4:	4b57      	ldr	r3, [pc, #348]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001eb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001eb8:	4b56      	ldr	r3, [pc, #344]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001eba:	495a      	ldr	r1, [pc, #360]	@ (8002024 <HAL_RCC_OscConfig+0x698>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d015      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec8:	f7ff f80c 	bl	8000ee4 <HAL_GetTick>
 8001ecc:	0003      	movs	r3, r0
 8001ece:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ed0:	e009      	b.n	8001ee6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7ff f807 	bl	8000ee4 <HAL_GetTick>
 8001ed6:	0002      	movs	r2, r0
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	4a52      	ldr	r2, [pc, #328]	@ (8002028 <HAL_RCC_OscConfig+0x69c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e11b      	b.n	800211e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ee6:	4b4b      	ldr	r3, [pc, #300]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001ee8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001eea:	2380      	movs	r3, #128	@ 0x80
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d0ef      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x546>
 8001ef2:	e014      	b.n	8001f1e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef4:	f7fe fff6 	bl	8000ee4 <HAL_GetTick>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001efc:	e009      	b.n	8001f12 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7fe fff1 	bl	8000ee4 <HAL_GetTick>
 8001f02:	0002      	movs	r2, r0
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	4a47      	ldr	r2, [pc, #284]	@ (8002028 <HAL_RCC_OscConfig+0x69c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e105      	b.n	800211e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f12:	4b40      	ldr	r3, [pc, #256]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001f14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001f16:	2380      	movs	r3, #128	@ 0x80
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	d1ef      	bne.n	8001efe <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f1e:	2323      	movs	r3, #35	@ 0x23
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f28:	4b3a      	ldr	r3, [pc, #232]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001f2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f2c:	4b39      	ldr	r3, [pc, #228]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001f2e:	493f      	ldr	r1, [pc, #252]	@ (800202c <HAL_RCC_OscConfig+0x6a0>)
 8001f30:	400a      	ands	r2, r1
 8001f32:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d049      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d026      	beq.n	8001f94 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001f46:	4b33      	ldr	r3, [pc, #204]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	4b32      	ldr	r3, [pc, #200]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001f4c:	2101      	movs	r1, #1
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	609a      	str	r2, [r3, #8]
 8001f52:	4b30      	ldr	r3, [pc, #192]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001f54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f56:	4b2f      	ldr	r3, [pc, #188]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f5e:	4b34      	ldr	r3, [pc, #208]	@ (8002030 <HAL_RCC_OscConfig+0x6a4>)
 8001f60:	6a1a      	ldr	r2, [r3, #32]
 8001f62:	4b33      	ldr	r3, [pc, #204]	@ (8002030 <HAL_RCC_OscConfig+0x6a4>)
 8001f64:	2180      	movs	r1, #128	@ 0x80
 8001f66:	0189      	lsls	r1, r1, #6
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6c:	f7fe ffba 	bl	8000ee4 <HAL_GetTick>
 8001f70:	0003      	movs	r3, r0
 8001f72:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f76:	f7fe ffb5 	bl	8000ee4 <HAL_GetTick>
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e0ca      	b.n	800211e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f88:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d0f1      	beq.n	8001f76 <HAL_RCC_OscConfig+0x5ea>
 8001f92:	e01e      	b.n	8001fd2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f94:	4b1f      	ldr	r3, [pc, #124]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001f96:	689a      	ldr	r2, [r3, #8]
 8001f98:	4b1e      	ldr	r3, [pc, #120]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	438a      	bics	r2, r1
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	4b23      	ldr	r3, [pc, #140]	@ (8002030 <HAL_RCC_OscConfig+0x6a4>)
 8001fa2:	6a1a      	ldr	r2, [r3, #32]
 8001fa4:	4b22      	ldr	r3, [pc, #136]	@ (8002030 <HAL_RCC_OscConfig+0x6a4>)
 8001fa6:	4923      	ldr	r1, [pc, #140]	@ (8002034 <HAL_RCC_OscConfig+0x6a8>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7fe ff9a 	bl	8000ee4 <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fb6:	f7fe ff95 	bl	8000ee4 <HAL_GetTick>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e0aa      	b.n	800211e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001fc8:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d1f1      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d100      	bne.n	8001fdc <HAL_RCC_OscConfig+0x650>
 8001fda:	e09f      	b.n	800211c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	2b0c      	cmp	r3, #12
 8001fe0:	d100      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x658>
 8001fe2:	e078      	b.n	80020d6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d159      	bne.n	80020a0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fec:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <HAL_RCC_OscConfig+0x688>)
 8001ff2:	4911      	ldr	r1, [pc, #68]	@ (8002038 <HAL_RCC_OscConfig+0x6ac>)
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7fe ff74 	bl	8000ee4 <HAL_GetTick>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002000:	e01c      	b.n	800203c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002002:	f7fe ff6f 	bl	8000ee4 <HAL_GetTick>
 8002006:	0002      	movs	r2, r0
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b02      	cmp	r3, #2
 800200e:	d915      	bls.n	800203c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e084      	b.n	800211e <HAL_RCC_OscConfig+0x792>
 8002014:	40021000 	.word	0x40021000
 8002018:	ffff1fff 	.word	0xffff1fff
 800201c:	fffffeff 	.word	0xfffffeff
 8002020:	40007000 	.word	0x40007000
 8002024:	fffffbff 	.word	0xfffffbff
 8002028:	00001388 	.word	0x00001388
 800202c:	efffffff 	.word	0xefffffff
 8002030:	40010000 	.word	0x40010000
 8002034:	ffffdfff 	.word	0xffffdfff
 8002038:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800203c:	4b3a      	ldr	r3, [pc, #232]	@ (8002128 <HAL_RCC_OscConfig+0x79c>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	049b      	lsls	r3, r3, #18
 8002044:	4013      	ands	r3, r2
 8002046:	d1dc      	bne.n	8002002 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002048:	4b37      	ldr	r3, [pc, #220]	@ (8002128 <HAL_RCC_OscConfig+0x79c>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a37      	ldr	r2, [pc, #220]	@ (800212c <HAL_RCC_OscConfig+0x7a0>)
 800204e:	4013      	ands	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002060:	431a      	orrs	r2, r3
 8002062:	4b31      	ldr	r3, [pc, #196]	@ (8002128 <HAL_RCC_OscConfig+0x79c>)
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002068:	4b2f      	ldr	r3, [pc, #188]	@ (8002128 <HAL_RCC_OscConfig+0x79c>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b2e      	ldr	r3, [pc, #184]	@ (8002128 <HAL_RCC_OscConfig+0x79c>)
 800206e:	2180      	movs	r1, #128	@ 0x80
 8002070:	0449      	lsls	r1, r1, #17
 8002072:	430a      	orrs	r2, r1
 8002074:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002076:	f7fe ff35 	bl	8000ee4 <HAL_GetTick>
 800207a:	0003      	movs	r3, r0
 800207c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002080:	f7fe ff30 	bl	8000ee4 <HAL_GetTick>
 8002084:	0002      	movs	r2, r0
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e045      	b.n	800211e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002092:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <HAL_RCC_OscConfig+0x79c>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	2380      	movs	r3, #128	@ 0x80
 8002098:	049b      	lsls	r3, r3, #18
 800209a:	4013      	ands	r3, r2
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x6f4>
 800209e:	e03d      	b.n	800211c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a0:	4b21      	ldr	r3, [pc, #132]	@ (8002128 <HAL_RCC_OscConfig+0x79c>)
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <HAL_RCC_OscConfig+0x79c>)
 80020a6:	4922      	ldr	r1, [pc, #136]	@ (8002130 <HAL_RCC_OscConfig+0x7a4>)
 80020a8:	400a      	ands	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7fe ff1a 	bl	8000ee4 <HAL_GetTick>
 80020b0:	0003      	movs	r3, r0
 80020b2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b6:	f7fe ff15 	bl	8000ee4 <HAL_GetTick>
 80020ba:	0002      	movs	r2, r0
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e02a      	b.n	800211e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020c8:	4b17      	ldr	r3, [pc, #92]	@ (8002128 <HAL_RCC_OscConfig+0x79c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	2380      	movs	r3, #128	@ 0x80
 80020ce:	049b      	lsls	r3, r3, #18
 80020d0:	4013      	ands	r3, r2
 80020d2:	d1f0      	bne.n	80020b6 <HAL_RCC_OscConfig+0x72a>
 80020d4:	e022      	b.n	800211c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e01d      	b.n	800211e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020e2:	4b11      	ldr	r3, [pc, #68]	@ (8002128 <HAL_RCC_OscConfig+0x79c>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	2380      	movs	r3, #128	@ 0x80
 80020ec:	025b      	lsls	r3, r3, #9
 80020ee:	401a      	ands	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d10f      	bne.n	8002118 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	23f0      	movs	r3, #240	@ 0xf0
 80020fc:	039b      	lsls	r3, r3, #14
 80020fe:	401a      	ands	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d107      	bne.n	8002118 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	23c0      	movs	r3, #192	@ 0xc0
 800210c:	041b      	lsls	r3, r3, #16
 800210e:	401a      	ands	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e000      	b.n	800211e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	0018      	movs	r0, r3
 8002120:	46bd      	mov	sp, r7
 8002122:	b00a      	add	sp, #40	@ 0x28
 8002124:	bdb0      	pop	{r4, r5, r7, pc}
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	40021000 	.word	0x40021000
 800212c:	ff02ffff 	.word	0xff02ffff
 8002130:	feffffff 	.word	0xfeffffff

08002134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002134:	b5b0      	push	{r4, r5, r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e128      	b.n	800239a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002148:	4b96      	ldr	r3, [pc, #600]	@ (80023a4 <HAL_RCC_ClockConfig+0x270>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2201      	movs	r2, #1
 800214e:	4013      	ands	r3, r2
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d91e      	bls.n	8002194 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b93      	ldr	r3, [pc, #588]	@ (80023a4 <HAL_RCC_ClockConfig+0x270>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2201      	movs	r2, #1
 800215c:	4393      	bics	r3, r2
 800215e:	0019      	movs	r1, r3
 8002160:	4b90      	ldr	r3, [pc, #576]	@ (80023a4 <HAL_RCC_ClockConfig+0x270>)
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002168:	f7fe febc 	bl	8000ee4 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002170:	e009      	b.n	8002186 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002172:	f7fe feb7 	bl	8000ee4 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	4a8a      	ldr	r2, [pc, #552]	@ (80023a8 <HAL_RCC_ClockConfig+0x274>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e109      	b.n	800239a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002186:	4b87      	ldr	r3, [pc, #540]	@ (80023a4 <HAL_RCC_ClockConfig+0x270>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2201      	movs	r2, #1
 800218c:	4013      	ands	r3, r2
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d1ee      	bne.n	8002172 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2202      	movs	r2, #2
 800219a:	4013      	ands	r3, r2
 800219c:	d009      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800219e:	4b83      	ldr	r3, [pc, #524]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	22f0      	movs	r2, #240	@ 0xf0
 80021a4:	4393      	bics	r3, r2
 80021a6:	0019      	movs	r1, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4b7f      	ldr	r3, [pc, #508]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 80021ae:	430a      	orrs	r2, r1
 80021b0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	d100      	bne.n	80021be <HAL_RCC_ClockConfig+0x8a>
 80021bc:	e089      	b.n	80022d2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021c6:	4b79      	ldr	r3, [pc, #484]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	029b      	lsls	r3, r3, #10
 80021ce:	4013      	ands	r3, r2
 80021d0:	d120      	bne.n	8002214 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0e1      	b.n	800239a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b03      	cmp	r3, #3
 80021dc:	d107      	bne.n	80021ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021de:	4b73      	ldr	r3, [pc, #460]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	2380      	movs	r3, #128	@ 0x80
 80021e4:	049b      	lsls	r3, r3, #18
 80021e6:	4013      	ands	r3, r2
 80021e8:	d114      	bne.n	8002214 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e0d5      	b.n	800239a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d106      	bne.n	8002204 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021f6:	4b6d      	ldr	r3, [pc, #436]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2204      	movs	r2, #4
 80021fc:	4013      	ands	r3, r2
 80021fe:	d109      	bne.n	8002214 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0ca      	b.n	800239a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002204:	4b69      	ldr	r3, [pc, #420]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2380      	movs	r3, #128	@ 0x80
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4013      	ands	r3, r2
 800220e:	d101      	bne.n	8002214 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0c2      	b.n	800239a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002214:	4b65      	ldr	r3, [pc, #404]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2203      	movs	r2, #3
 800221a:	4393      	bics	r3, r2
 800221c:	0019      	movs	r1, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	4b62      	ldr	r3, [pc, #392]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002224:	430a      	orrs	r2, r1
 8002226:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002228:	f7fe fe5c 	bl	8000ee4 <HAL_GetTick>
 800222c:	0003      	movs	r3, r0
 800222e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d111      	bne.n	800225c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002238:	e009      	b.n	800224e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223a:	f7fe fe53 	bl	8000ee4 <HAL_GetTick>
 800223e:	0002      	movs	r2, r0
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	4a58      	ldr	r2, [pc, #352]	@ (80023a8 <HAL_RCC_ClockConfig+0x274>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d901      	bls.n	800224e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e0a5      	b.n	800239a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800224e:	4b57      	ldr	r3, [pc, #348]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	220c      	movs	r2, #12
 8002254:	4013      	ands	r3, r2
 8002256:	2b08      	cmp	r3, #8
 8002258:	d1ef      	bne.n	800223a <HAL_RCC_ClockConfig+0x106>
 800225a:	e03a      	b.n	80022d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d111      	bne.n	8002288 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002264:	e009      	b.n	800227a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002266:	f7fe fe3d 	bl	8000ee4 <HAL_GetTick>
 800226a:	0002      	movs	r2, r0
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	4a4d      	ldr	r2, [pc, #308]	@ (80023a8 <HAL_RCC_ClockConfig+0x274>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e08f      	b.n	800239a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800227a:	4b4c      	ldr	r3, [pc, #304]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	220c      	movs	r2, #12
 8002280:	4013      	ands	r3, r2
 8002282:	2b0c      	cmp	r3, #12
 8002284:	d1ef      	bne.n	8002266 <HAL_RCC_ClockConfig+0x132>
 8002286:	e024      	b.n	80022d2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d11b      	bne.n	80022c8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002290:	e009      	b.n	80022a6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002292:	f7fe fe27 	bl	8000ee4 <HAL_GetTick>
 8002296:	0002      	movs	r2, r0
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	4a42      	ldr	r2, [pc, #264]	@ (80023a8 <HAL_RCC_ClockConfig+0x274>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e079      	b.n	800239a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80022a6:	4b41      	ldr	r3, [pc, #260]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	220c      	movs	r2, #12
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d1ef      	bne.n	8002292 <HAL_RCC_ClockConfig+0x15e>
 80022b2:	e00e      	b.n	80022d2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b4:	f7fe fe16 	bl	8000ee4 <HAL_GetTick>
 80022b8:	0002      	movs	r2, r0
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	4a3a      	ldr	r2, [pc, #232]	@ (80023a8 <HAL_RCC_ClockConfig+0x274>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e068      	b.n	800239a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80022c8:	4b38      	ldr	r3, [pc, #224]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	220c      	movs	r2, #12
 80022ce:	4013      	ands	r3, r2
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d2:	4b34      	ldr	r3, [pc, #208]	@ (80023a4 <HAL_RCC_ClockConfig+0x270>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2201      	movs	r2, #1
 80022d8:	4013      	ands	r3, r2
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	429a      	cmp	r2, r3
 80022de:	d21e      	bcs.n	800231e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e0:	4b30      	ldr	r3, [pc, #192]	@ (80023a4 <HAL_RCC_ClockConfig+0x270>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2201      	movs	r2, #1
 80022e6:	4393      	bics	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	4b2e      	ldr	r3, [pc, #184]	@ (80023a4 <HAL_RCC_ClockConfig+0x270>)
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022f2:	f7fe fdf7 	bl	8000ee4 <HAL_GetTick>
 80022f6:	0003      	movs	r3, r0
 80022f8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	e009      	b.n	8002310 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fc:	f7fe fdf2 	bl	8000ee4 <HAL_GetTick>
 8002300:	0002      	movs	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	4a28      	ldr	r2, [pc, #160]	@ (80023a8 <HAL_RCC_ClockConfig+0x274>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e044      	b.n	800239a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002310:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCC_ClockConfig+0x270>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2201      	movs	r2, #1
 8002316:	4013      	ands	r3, r2
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d1ee      	bne.n	80022fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2204      	movs	r2, #4
 8002324:	4013      	ands	r3, r2
 8002326:	d009      	beq.n	800233c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002328:	4b20      	ldr	r3, [pc, #128]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4a20      	ldr	r2, [pc, #128]	@ (80023b0 <HAL_RCC_ClockConfig+0x27c>)
 800232e:	4013      	ands	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	68da      	ldr	r2, [r3, #12]
 8002336:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002338:	430a      	orrs	r2, r1
 800233a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2208      	movs	r2, #8
 8002342:	4013      	ands	r3, r2
 8002344:	d00a      	beq.n	800235c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002346:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4a1a      	ldr	r2, [pc, #104]	@ (80023b4 <HAL_RCC_ClockConfig+0x280>)
 800234c:	4013      	ands	r3, r2
 800234e:	0019      	movs	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	00da      	lsls	r2, r3, #3
 8002356:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002358:	430a      	orrs	r2, r1
 800235a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800235c:	f000 f832 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8002360:	0001      	movs	r1, r0
 8002362:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_RCC_ClockConfig+0x278>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	091b      	lsrs	r3, r3, #4
 8002368:	220f      	movs	r2, #15
 800236a:	4013      	ands	r3, r2
 800236c:	4a12      	ldr	r2, [pc, #72]	@ (80023b8 <HAL_RCC_ClockConfig+0x284>)
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	000a      	movs	r2, r1
 8002372:	40da      	lsrs	r2, r3
 8002374:	4b11      	ldr	r3, [pc, #68]	@ (80023bc <HAL_RCC_ClockConfig+0x288>)
 8002376:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002378:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <HAL_RCC_ClockConfig+0x28c>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	250b      	movs	r5, #11
 800237e:	197c      	adds	r4, r7, r5
 8002380:	0018      	movs	r0, r3
 8002382:	f7fe fd69 	bl	8000e58 <HAL_InitTick>
 8002386:	0003      	movs	r3, r0
 8002388:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800238a:	197b      	adds	r3, r7, r5
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002392:	197b      	adds	r3, r7, r5
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	e000      	b.n	800239a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	0018      	movs	r0, r3
 800239c:	46bd      	mov	sp, r7
 800239e:	b004      	add	sp, #16
 80023a0:	bdb0      	pop	{r4, r5, r7, pc}
 80023a2:	46c0      	nop			@ (mov r8, r8)
 80023a4:	40022000 	.word	0x40022000
 80023a8:	00001388 	.word	0x00001388
 80023ac:	40021000 	.word	0x40021000
 80023b0:	fffff8ff 	.word	0xfffff8ff
 80023b4:	ffffc7ff 	.word	0xffffc7ff
 80023b8:	08004770 	.word	0x08004770
 80023bc:	20000000 	.word	0x20000000
 80023c0:	20000004 	.word	0x20000004

080023c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80023ca:	4b3c      	ldr	r3, [pc, #240]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	220c      	movs	r2, #12
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b0c      	cmp	r3, #12
 80023d8:	d013      	beq.n	8002402 <HAL_RCC_GetSysClockFreq+0x3e>
 80023da:	d85c      	bhi.n	8002496 <HAL_RCC_GetSysClockFreq+0xd2>
 80023dc:	2b04      	cmp	r3, #4
 80023de:	d002      	beq.n	80023e6 <HAL_RCC_GetSysClockFreq+0x22>
 80023e0:	2b08      	cmp	r3, #8
 80023e2:	d00b      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0x38>
 80023e4:	e057      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80023e6:	4b35      	ldr	r3, [pc, #212]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2210      	movs	r2, #16
 80023ec:	4013      	ands	r3, r2
 80023ee:	d002      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80023f0:	4b33      	ldr	r3, [pc, #204]	@ (80024c0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023f2:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80023f4:	e05d      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80023f6:	4b33      	ldr	r3, [pc, #204]	@ (80024c4 <HAL_RCC_GetSysClockFreq+0x100>)
 80023f8:	613b      	str	r3, [r7, #16]
      break;
 80023fa:	e05a      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023fc:	4b32      	ldr	r3, [pc, #200]	@ (80024c8 <HAL_RCC_GetSysClockFreq+0x104>)
 80023fe:	613b      	str	r3, [r7, #16]
      break;
 8002400:	e057      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	0c9b      	lsrs	r3, r3, #18
 8002406:	220f      	movs	r2, #15
 8002408:	4013      	ands	r3, r2
 800240a:	4a30      	ldr	r2, [pc, #192]	@ (80024cc <HAL_RCC_GetSysClockFreq+0x108>)
 800240c:	5cd3      	ldrb	r3, [r2, r3]
 800240e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	0d9b      	lsrs	r3, r3, #22
 8002414:	2203      	movs	r2, #3
 8002416:	4013      	ands	r3, r2
 8002418:	3301      	adds	r3, #1
 800241a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800241c:	4b27      	ldr	r3, [pc, #156]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	2380      	movs	r3, #128	@ 0x80
 8002422:	025b      	lsls	r3, r3, #9
 8002424:	4013      	ands	r3, r2
 8002426:	d00f      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002428:	68b9      	ldr	r1, [r7, #8]
 800242a:	000a      	movs	r2, r1
 800242c:	0152      	lsls	r2, r2, #5
 800242e:	1a52      	subs	r2, r2, r1
 8002430:	0193      	lsls	r3, r2, #6
 8002432:	1a9b      	subs	r3, r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	185b      	adds	r3, r3, r1
 8002438:	025b      	lsls	r3, r3, #9
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f7fd fe75 	bl	800012c <__udivsi3>
 8002442:	0003      	movs	r3, r0
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	e023      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002448:	4b1c      	ldr	r3, [pc, #112]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	2210      	movs	r2, #16
 800244e:	4013      	ands	r3, r2
 8002450:	d00f      	beq.n	8002472 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8002452:	68b9      	ldr	r1, [r7, #8]
 8002454:	000a      	movs	r2, r1
 8002456:	0152      	lsls	r2, r2, #5
 8002458:	1a52      	subs	r2, r2, r1
 800245a:	0193      	lsls	r3, r2, #6
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	185b      	adds	r3, r3, r1
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	6879      	ldr	r1, [r7, #4]
 8002466:	0018      	movs	r0, r3
 8002468:	f7fd fe60 	bl	800012c <__udivsi3>
 800246c:	0003      	movs	r3, r0
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	e00e      	b.n	8002490 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8002472:	68b9      	ldr	r1, [r7, #8]
 8002474:	000a      	movs	r2, r1
 8002476:	0152      	lsls	r2, r2, #5
 8002478:	1a52      	subs	r2, r2, r1
 800247a:	0193      	lsls	r3, r2, #6
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	185b      	adds	r3, r3, r1
 8002482:	029b      	lsls	r3, r3, #10
 8002484:	6879      	ldr	r1, [r7, #4]
 8002486:	0018      	movs	r0, r3
 8002488:	f7fd fe50 	bl	800012c <__udivsi3>
 800248c:	0003      	movs	r3, r0
 800248e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	613b      	str	r3, [r7, #16]
      break;
 8002494:	e00d      	b.n	80024b2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002496:	4b09      	ldr	r3, [pc, #36]	@ (80024bc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	0b5b      	lsrs	r3, r3, #13
 800249c:	2207      	movs	r2, #7
 800249e:	4013      	ands	r3, r2
 80024a0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	2280      	movs	r2, #128	@ 0x80
 80024a8:	0212      	lsls	r2, r2, #8
 80024aa:	409a      	lsls	r2, r3
 80024ac:	0013      	movs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
      break;
 80024b0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024b2:	693b      	ldr	r3, [r7, #16]
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b006      	add	sp, #24
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	003d0900 	.word	0x003d0900
 80024c4:	00f42400 	.word	0x00f42400
 80024c8:	007a1200 	.word	0x007a1200
 80024cc:	08004788 	.word	0x08004788

080024d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d4:	4b02      	ldr	r3, [pc, #8]	@ (80024e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80024d6:	681b      	ldr	r3, [r3, #0]
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	20000000 	.word	0x20000000

080024e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024e8:	f7ff fff2 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 80024ec:	0001      	movs	r1, r0
 80024ee:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	0a1b      	lsrs	r3, r3, #8
 80024f4:	2207      	movs	r2, #7
 80024f6:	4013      	ands	r3, r2
 80024f8:	4a04      	ldr	r2, [pc, #16]	@ (800250c <HAL_RCC_GetPCLK1Freq+0x28>)
 80024fa:	5cd3      	ldrb	r3, [r2, r3]
 80024fc:	40d9      	lsrs	r1, r3
 80024fe:	000b      	movs	r3, r1
}
 8002500:	0018      	movs	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	46c0      	nop			@ (mov r8, r8)
 8002508:	40021000 	.word	0x40021000
 800250c:	08004780 	.word	0x08004780

08002510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002514:	f7ff ffdc 	bl	80024d0 <HAL_RCC_GetHCLKFreq>
 8002518:	0001      	movs	r1, r0
 800251a:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <HAL_RCC_GetPCLK2Freq+0x24>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	0adb      	lsrs	r3, r3, #11
 8002520:	2207      	movs	r2, #7
 8002522:	4013      	ands	r3, r2
 8002524:	4a04      	ldr	r2, [pc, #16]	@ (8002538 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002526:	5cd3      	ldrb	r3, [r2, r3]
 8002528:	40d9      	lsrs	r1, r3
 800252a:	000b      	movs	r3, r1
}
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	46c0      	nop			@ (mov r8, r8)
 8002534:	40021000 	.word	0x40021000
 8002538:	08004780 	.word	0x08004780

0800253c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002544:	2317      	movs	r3, #23
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2220      	movs	r2, #32
 8002552:	4013      	ands	r3, r2
 8002554:	d106      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	011b      	lsls	r3, r3, #4
 800255e:	4013      	ands	r3, r2
 8002560:	d100      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002562:	e104      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002564:	4bb9      	ldr	r3, [pc, #740]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002566:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	055b      	lsls	r3, r3, #21
 800256c:	4013      	ands	r3, r2
 800256e:	d10a      	bne.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002570:	4bb6      	ldr	r3, [pc, #728]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002572:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002574:	4bb5      	ldr	r3, [pc, #724]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002576:	2180      	movs	r1, #128	@ 0x80
 8002578:	0549      	lsls	r1, r1, #21
 800257a:	430a      	orrs	r2, r1
 800257c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800257e:	2317      	movs	r3, #23
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002586:	4bb2      	ldr	r3, [pc, #712]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	2380      	movs	r3, #128	@ 0x80
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	4013      	ands	r3, r2
 8002590:	d11a      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002592:	4baf      	ldr	r3, [pc, #700]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4bae      	ldr	r3, [pc, #696]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002598:	2180      	movs	r1, #128	@ 0x80
 800259a:	0049      	lsls	r1, r1, #1
 800259c:	430a      	orrs	r2, r1
 800259e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a0:	f7fe fca0 	bl	8000ee4 <HAL_GetTick>
 80025a4:	0003      	movs	r3, r0
 80025a6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	e008      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025aa:	f7fe fc9b 	bl	8000ee4 <HAL_GetTick>
 80025ae:	0002      	movs	r2, r0
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	1ad3      	subs	r3, r2, r3
 80025b4:	2b64      	cmp	r3, #100	@ 0x64
 80025b6:	d901      	bls.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80025b8:	2303      	movs	r3, #3
 80025ba:	e143      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025bc:	4ba4      	ldr	r3, [pc, #656]	@ (8002850 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	2380      	movs	r3, #128	@ 0x80
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	4013      	ands	r3, r2
 80025c6:	d0f0      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80025c8:	4ba0      	ldr	r3, [pc, #640]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	23c0      	movs	r3, #192	@ 0xc0
 80025ce:	039b      	lsls	r3, r3, #14
 80025d0:	4013      	ands	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	23c0      	movs	r3, #192	@ 0xc0
 80025da:	039b      	lsls	r3, r3, #14
 80025dc:	4013      	ands	r3, r2
 80025de:	68fa      	ldr	r2, [r7, #12]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d107      	bne.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	23c0      	movs	r3, #192	@ 0xc0
 80025ea:	039b      	lsls	r3, r3, #14
 80025ec:	4013      	ands	r3, r2
 80025ee:	68fa      	ldr	r2, [r7, #12]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d013      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	23c0      	movs	r3, #192	@ 0xc0
 80025fa:	029b      	lsls	r3, r3, #10
 80025fc:	401a      	ands	r2, r3
 80025fe:	23c0      	movs	r3, #192	@ 0xc0
 8002600:	029b      	lsls	r3, r3, #10
 8002602:	429a      	cmp	r2, r3
 8002604:	d10a      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002606:	4b91      	ldr	r3, [pc, #580]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	2380      	movs	r3, #128	@ 0x80
 800260c:	029b      	lsls	r3, r3, #10
 800260e:	401a      	ands	r2, r3
 8002610:	2380      	movs	r3, #128	@ 0x80
 8002612:	029b      	lsls	r3, r3, #10
 8002614:	429a      	cmp	r2, r3
 8002616:	d101      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e113      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800261c:	4b8b      	ldr	r3, [pc, #556]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800261e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002620:	23c0      	movs	r3, #192	@ 0xc0
 8002622:	029b      	lsls	r3, r3, #10
 8002624:	4013      	ands	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d049      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	23c0      	movs	r3, #192	@ 0xc0
 8002634:	029b      	lsls	r3, r3, #10
 8002636:	4013      	ands	r3, r2
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	429a      	cmp	r2, r3
 800263c:	d004      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2220      	movs	r2, #32
 8002644:	4013      	ands	r3, r2
 8002646:	d10d      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	23c0      	movs	r3, #192	@ 0xc0
 800264e:	029b      	lsls	r3, r3, #10
 8002650:	4013      	ands	r3, r2
 8002652:	68fa      	ldr	r2, [r7, #12]
 8002654:	429a      	cmp	r2, r3
 8002656:	d034      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	2380      	movs	r3, #128	@ 0x80
 800265e:	011b      	lsls	r3, r3, #4
 8002660:	4013      	ands	r3, r2
 8002662:	d02e      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002664:	4b79      	ldr	r3, [pc, #484]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002666:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002668:	4a7a      	ldr	r2, [pc, #488]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 800266a:	4013      	ands	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800266e:	4b77      	ldr	r3, [pc, #476]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002670:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002672:	4b76      	ldr	r3, [pc, #472]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002674:	2180      	movs	r1, #128	@ 0x80
 8002676:	0309      	lsls	r1, r1, #12
 8002678:	430a      	orrs	r2, r1
 800267a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800267c:	4b73      	ldr	r3, [pc, #460]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800267e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002680:	4b72      	ldr	r3, [pc, #456]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002682:	4975      	ldr	r1, [pc, #468]	@ (8002858 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002684:	400a      	ands	r2, r1
 8002686:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002688:	4b70      	ldr	r3, [pc, #448]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	2380      	movs	r3, #128	@ 0x80
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4013      	ands	r3, r2
 8002696:	d014      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002698:	f7fe fc24 	bl	8000ee4 <HAL_GetTick>
 800269c:	0003      	movs	r3, r0
 800269e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026a0:	e009      	b.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7fe fc1f 	bl	8000ee4 <HAL_GetTick>
 80026a6:	0002      	movs	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	4a6b      	ldr	r2, [pc, #428]	@ (800285c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e0c6      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026b6:	4b65      	ldr	r3, [pc, #404]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026ba:	2380      	movs	r3, #128	@ 0x80
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4013      	ands	r3, r2
 80026c0:	d0ef      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	4013      	ands	r3, r2
 80026cc:	d01f      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	23c0      	movs	r3, #192	@ 0xc0
 80026d4:	029b      	lsls	r3, r3, #10
 80026d6:	401a      	ands	r2, r3
 80026d8:	23c0      	movs	r3, #192	@ 0xc0
 80026da:	029b      	lsls	r3, r3, #10
 80026dc:	429a      	cmp	r2, r3
 80026de:	d10c      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80026e0:	4b5a      	ldr	r3, [pc, #360]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a5e      	ldr	r2, [pc, #376]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	0019      	movs	r1, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	23c0      	movs	r3, #192	@ 0xc0
 80026f0:	039b      	lsls	r3, r3, #14
 80026f2:	401a      	ands	r2, r3
 80026f4:	4b55      	ldr	r3, [pc, #340]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026f6:	430a      	orrs	r2, r1
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	4b54      	ldr	r3, [pc, #336]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80026fc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	23c0      	movs	r3, #192	@ 0xc0
 8002704:	029b      	lsls	r3, r3, #10
 8002706:	401a      	ands	r2, r3
 8002708:	4b50      	ldr	r3, [pc, #320]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800270a:	430a      	orrs	r2, r1
 800270c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2220      	movs	r2, #32
 8002714:	4013      	ands	r3, r2
 8002716:	d01f      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	23c0      	movs	r3, #192	@ 0xc0
 800271e:	029b      	lsls	r3, r3, #10
 8002720:	401a      	ands	r2, r3
 8002722:	23c0      	movs	r3, #192	@ 0xc0
 8002724:	029b      	lsls	r3, r3, #10
 8002726:	429a      	cmp	r2, r3
 8002728:	d10c      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800272a:	4b48      	ldr	r3, [pc, #288]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a4c      	ldr	r2, [pc, #304]	@ (8002860 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002730:	4013      	ands	r3, r2
 8002732:	0019      	movs	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	23c0      	movs	r3, #192	@ 0xc0
 800273a:	039b      	lsls	r3, r3, #14
 800273c:	401a      	ands	r2, r3
 800273e:	4b43      	ldr	r3, [pc, #268]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	4b41      	ldr	r3, [pc, #260]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002746:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	23c0      	movs	r3, #192	@ 0xc0
 800274e:	029b      	lsls	r3, r3, #10
 8002750:	401a      	ands	r2, r3
 8002752:	4b3e      	ldr	r3, [pc, #248]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002754:	430a      	orrs	r2, r1
 8002756:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002758:	2317      	movs	r3, #23
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d105      	bne.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002762:	4b3a      	ldr	r3, [pc, #232]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002766:	4b39      	ldr	r3, [pc, #228]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002768:	493e      	ldr	r1, [pc, #248]	@ (8002864 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 800276a:	400a      	ands	r2, r1
 800276c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2201      	movs	r2, #1
 8002774:	4013      	ands	r3, r2
 8002776:	d009      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002778:	4b34      	ldr	r3, [pc, #208]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800277a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277c:	2203      	movs	r2, #3
 800277e:	4393      	bics	r3, r2
 8002780:	0019      	movs	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68da      	ldr	r2, [r3, #12]
 8002786:	4b31      	ldr	r3, [pc, #196]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002788:	430a      	orrs	r2, r1
 800278a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2202      	movs	r2, #2
 8002792:	4013      	ands	r3, r2
 8002794:	d009      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002796:	4b2d      	ldr	r3, [pc, #180]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279a:	220c      	movs	r2, #12
 800279c:	4393      	bics	r3, r2
 800279e:	0019      	movs	r1, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	4b29      	ldr	r3, [pc, #164]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027a6:	430a      	orrs	r2, r1
 80027a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2204      	movs	r2, #4
 80027b0:	4013      	ands	r3, r2
 80027b2:	d009      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027b4:	4b25      	ldr	r3, [pc, #148]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002868 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695a      	ldr	r2, [r3, #20]
 80027c2:	4b22      	ldr	r3, [pc, #136]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027c4:	430a      	orrs	r2, r1
 80027c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2208      	movs	r2, #8
 80027ce:	4013      	ands	r3, r2
 80027d0:	d009      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027d2:	4b1e      	ldr	r3, [pc, #120]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d6:	4a25      	ldr	r2, [pc, #148]	@ (800286c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027d8:	4013      	ands	r3, r2
 80027da:	0019      	movs	r1, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	699a      	ldr	r2, [r3, #24]
 80027e0:	4b1a      	ldr	r3, [pc, #104]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027e2:	430a      	orrs	r2, r1
 80027e4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	2380      	movs	r3, #128	@ 0x80
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4013      	ands	r3, r2
 80027f0:	d009      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027f2:	4b16      	ldr	r3, [pc, #88]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f6:	4a17      	ldr	r2, [pc, #92]	@ (8002854 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	0019      	movs	r1, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	69da      	ldr	r2, [r3, #28]
 8002800:	4b12      	ldr	r3, [pc, #72]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002802:	430a      	orrs	r2, r1
 8002804:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2240      	movs	r2, #64	@ 0x40
 800280c:	4013      	ands	r3, r2
 800280e:	d009      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002810:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002814:	4a16      	ldr	r2, [pc, #88]	@ (8002870 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800281e:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002820:	430a      	orrs	r2, r1
 8002822:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2280      	movs	r2, #128	@ 0x80
 800282a:	4013      	ands	r3, r2
 800282c:	d009      	beq.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800282e:	4b07      	ldr	r3, [pc, #28]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002830:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002832:	4a10      	ldr	r2, [pc, #64]	@ (8002874 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002834:	4013      	ands	r3, r2
 8002836:	0019      	movs	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1a      	ldr	r2, [r3, #32]
 800283c:	4b03      	ldr	r3, [pc, #12]	@ (800284c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800283e:	430a      	orrs	r2, r1
 8002840:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	0018      	movs	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	b006      	add	sp, #24
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000
 8002850:	40007000 	.word	0x40007000
 8002854:	fffcffff 	.word	0xfffcffff
 8002858:	fff7ffff 	.word	0xfff7ffff
 800285c:	00001388 	.word	0x00001388
 8002860:	ffcfffff 	.word	0xffcfffff
 8002864:	efffffff 	.word	0xefffffff
 8002868:	fffff3ff 	.word	0xfffff3ff
 800286c:	ffffcfff 	.word	0xffffcfff
 8002870:	fbffffff 	.word	0xfbffffff
 8002874:	fff3ffff 	.word	0xfff3ffff

08002878 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002878:	b5b0      	push	{r4, r5, r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002880:	230f      	movs	r3, #15
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e088      	b.n	80029a4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2221      	movs	r2, #33	@ 0x21
 8002896:	5c9b      	ldrb	r3, [r3, r2]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d107      	bne.n	80028ae <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2220      	movs	r2, #32
 80028a2:	2100      	movs	r1, #0
 80028a4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7fe fa1d 	bl	8000ce8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2221      	movs	r2, #33	@ 0x21
 80028b2:	2102      	movs	r1, #2
 80028b4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	2210      	movs	r2, #16
 80028be:	4013      	ands	r3, r2
 80028c0:	2b10      	cmp	r3, #16
 80028c2:	d05f      	beq.n	8002984 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	22ca      	movs	r2, #202	@ 0xca
 80028ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2253      	movs	r2, #83	@ 0x53
 80028d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80028d4:	250f      	movs	r5, #15
 80028d6:	197c      	adds	r4, r7, r5
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 f93e 	bl	8002b5c <RTC_EnterInitMode>
 80028e0:	0003      	movs	r3, r0
 80028e2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80028e4:	0028      	movs	r0, r5
 80028e6:	183b      	adds	r3, r7, r0
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d12c      	bne.n	8002948 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	492c      	ldr	r1, [pc, #176]	@ (80029ac <HAL_RTC_Init+0x134>)
 80028fa:	400a      	ands	r2, r1
 80028fc:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6899      	ldr	r1, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	68d2      	ldr	r2, [r2, #12]
 8002924:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6919      	ldr	r1, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	041a      	lsls	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	430a      	orrs	r2, r1
 8002938:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800293a:	183c      	adds	r4, r7, r0
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	0018      	movs	r0, r3
 8002940:	f000 f950 	bl	8002be4 <RTC_ExitInitMode>
 8002944:	0003      	movs	r3, r0
 8002946:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002948:	230f      	movs	r3, #15
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d113      	bne.n	800297a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2103      	movs	r1, #3
 800295e:	438a      	bics	r2, r1
 8002960:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69da      	ldr	r2, [r3, #28]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	22ff      	movs	r2, #255	@ 0xff
 8002980:	625a      	str	r2, [r3, #36]	@ 0x24
 8002982:	e003      	b.n	800298c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002984:	230f      	movs	r3, #15
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800298c:	230f      	movs	r3, #15
 800298e:	18fb      	adds	r3, r7, r3
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d103      	bne.n	800299e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2221      	movs	r2, #33	@ 0x21
 800299a:	2101      	movs	r1, #1
 800299c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800299e:	230f      	movs	r3, #15
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	781b      	ldrb	r3, [r3, #0]
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b004      	add	sp, #16
 80029aa:	bdb0      	pop	{r4, r5, r7, pc}
 80029ac:	ff8fffbf 	.word	0xff8fffbf

080029b0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	691b      	ldr	r3, [r3, #16]
 80029d0:	045b      	lsls	r3, r3, #17
 80029d2:	0c5a      	lsrs	r2, r3, #17
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a22      	ldr	r2, [pc, #136]	@ (8002a68 <HAL_RTC_GetTime+0xb8>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	0c1b      	lsrs	r3, r3, #16
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	223f      	movs	r2, #63	@ 0x3f
 80029ec:	4013      	ands	r3, r2
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	227f      	movs	r2, #127	@ 0x7f
 80029fc:	4013      	ands	r3, r2
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	227f      	movs	r2, #127	@ 0x7f
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	0d9b      	lsrs	r3, r3, #22
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2201      	movs	r2, #1
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d11a      	bne.n	8002a5e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	f000 f903 	bl	8002c38 <RTC_Bcd2ToByte>
 8002a32:	0003      	movs	r3, r0
 8002a34:	001a      	movs	r2, r3
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	785b      	ldrb	r3, [r3, #1]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f000 f8fa 	bl	8002c38 <RTC_Bcd2ToByte>
 8002a44:	0003      	movs	r3, r0
 8002a46:	001a      	movs	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	789b      	ldrb	r3, [r3, #2]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 f8f1 	bl	8002c38 <RTC_Bcd2ToByte>
 8002a56:	0003      	movs	r3, r0
 8002a58:	001a      	movs	r2, r3
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b006      	add	sp, #24
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	007f7f7f 	.word	0x007f7f7f

08002a6c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	4a21      	ldr	r2, [pc, #132]	@ (8002b08 <HAL_RTC_GetDate+0x9c>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	0c1b      	lsrs	r3, r3, #16
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	0a1b      	lsrs	r3, r3, #8
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	221f      	movs	r2, #31
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	223f      	movs	r2, #63	@ 0x3f
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	b2da      	uxtb	r2, r3
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	0b5b      	lsrs	r3, r3, #13
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	4013      	ands	r3, r2
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d11a      	bne.n	8002afc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	78db      	ldrb	r3, [r3, #3]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f8b4 	bl	8002c38 <RTC_Bcd2ToByte>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	001a      	movs	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	785b      	ldrb	r3, [r3, #1]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f000 f8ab 	bl	8002c38 <RTC_Bcd2ToByte>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	001a      	movs	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	789b      	ldrb	r3, [r3, #2]
 8002aee:	0018      	movs	r0, r3
 8002af0:	f000 f8a2 	bl	8002c38 <RTC_Bcd2ToByte>
 8002af4:	0003      	movs	r3, r0
 8002af6:	001a      	movs	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	0018      	movs	r0, r3
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b006      	add	sp, #24
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			@ (mov r8, r8)
 8002b08:	00ffff3f 	.word	0x00ffff3f

08002b0c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8002b58 <HAL_RTC_WaitForSynchro+0x4c>)
 8002b1e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b20:	f7fe f9e0 	bl	8000ee4 <HAL_GetTick>
 8002b24:	0003      	movs	r3, r0
 8002b26:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b28:	e00a      	b.n	8002b40 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b2a:	f7fe f9db 	bl	8000ee4 <HAL_GetTick>
 8002b2e:	0002      	movs	r2, r0
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	1ad2      	subs	r2, r2, r3
 8002b34:	23fa      	movs	r3, #250	@ 0xfa
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d901      	bls.n	8002b40 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e006      	b.n	8002b4e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	2220      	movs	r2, #32
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d0ee      	beq.n	8002b2a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	0018      	movs	r0, r3
 8002b50:	46bd      	mov	sp, r7
 8002b52:	b004      	add	sp, #16
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	46c0      	nop			@ (mov r8, r8)
 8002b58:	0001ff5f 	.word	0x0001ff5f

08002b5c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002b68:	230f      	movs	r3, #15
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2240      	movs	r2, #64	@ 0x40
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d12c      	bne.n	8002bd6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2180      	movs	r1, #128	@ 0x80
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002b8c:	f7fe f9aa 	bl	8000ee4 <HAL_GetTick>
 8002b90:	0003      	movs	r3, r0
 8002b92:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002b94:	e014      	b.n	8002bc0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002b96:	f7fe f9a5 	bl	8000ee4 <HAL_GetTick>
 8002b9a:	0002      	movs	r2, r0
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	1ad2      	subs	r2, r2, r3
 8002ba0:	200f      	movs	r0, #15
 8002ba2:	183b      	adds	r3, r7, r0
 8002ba4:	1839      	adds	r1, r7, r0
 8002ba6:	7809      	ldrb	r1, [r1, #0]
 8002ba8:	7019      	strb	r1, [r3, #0]
 8002baa:	23fa      	movs	r3, #250	@ 0xfa
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d906      	bls.n	8002bc0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2221      	movs	r2, #33	@ 0x21
 8002bb6:	2104      	movs	r1, #4
 8002bb8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002bba:	183b      	adds	r3, r7, r0
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2240      	movs	r2, #64	@ 0x40
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d104      	bne.n	8002bd6 <RTC_EnterInitMode+0x7a>
 8002bcc:	230f      	movs	r3, #15
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d1df      	bne.n	8002b96 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002bd6:	230f      	movs	r3, #15
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	781b      	ldrb	r3, [r3, #0]
}
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002be4:	b590      	push	{r4, r7, lr}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bec:	240f      	movs	r4, #15
 8002bee:	193b      	adds	r3, r7, r4
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2180      	movs	r1, #128	@ 0x80
 8002c00:	438a      	bics	r2, r1
 8002c02:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d10c      	bne.n	8002c2a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	0018      	movs	r0, r3
 8002c14:	f7ff ff7a 	bl	8002b0c <HAL_RTC_WaitForSynchro>
 8002c18:	1e03      	subs	r3, r0, #0
 8002c1a:	d006      	beq.n	8002c2a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2221      	movs	r2, #33	@ 0x21
 8002c20:	2104      	movs	r1, #4
 8002c22:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002c24:	193b      	adds	r3, r7, r4
 8002c26:	2201      	movs	r2, #1
 8002c28:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002c2a:	230f      	movs	r3, #15
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
}
 8002c30:	0018      	movs	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b005      	add	sp, #20
 8002c36:	bd90      	pop	{r4, r7, pc}

08002c38 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	0002      	movs	r2, r0
 8002c40:	1dfb      	adds	r3, r7, #7
 8002c42:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002c48:	1dfb      	adds	r3, r7, #7
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	001a      	movs	r2, r3
 8002c52:	0013      	movs	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	189b      	adds	r3, r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	1dfb      	adds	r3, r7, #7
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	210f      	movs	r1, #15
 8002c66:	400b      	ands	r3, r1
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	18d3      	adds	r3, r2, r3
 8002c6c:	b2db      	uxtb	r3, r3
}
 8002c6e:	0018      	movs	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	b004      	add	sp, #16
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002c84:	4b64      	ldr	r3, [pc, #400]	@ (8002e18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	22fa      	movs	r2, #250	@ 0xfa
 8002c8a:	01d1      	lsls	r1, r2, #7
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f7fd fa4d 	bl	800012c <__udivsi3>
 8002c92:	0003      	movs	r3, r0
 8002c94:	001a      	movs	r2, r3
 8002c96:	0013      	movs	r3, r2
 8002c98:	015b      	lsls	r3, r3, #5
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	189b      	adds	r3, r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2220      	movs	r2, #32
 8002ca8:	5c9b      	ldrb	r3, [r3, r2]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d101      	bne.n	8002cb2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8002cae:	2302      	movs	r3, #2
 8002cb0:	e0ad      	b.n	8002e0e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2221      	movs	r2, #33	@ 0x21
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	22ca      	movs	r2, #202	@ 0xca
 8002cc8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2253      	movs	r2, #83	@ 0x53
 8002cd0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	2380      	movs	r3, #128	@ 0x80
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	4013      	ands	r3, r2
 8002cde:	d019      	beq.n	8002d14 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10d      	bne.n	8002d08 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	22ff      	movs	r2, #255	@ 0xff
 8002cf2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2221      	movs	r2, #33	@ 0x21
 8002cf8:	2103      	movs	r1, #3
 8002cfa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	2100      	movs	r1, #0
 8002d02:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e082      	b.n	8002e0e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2204      	movs	r2, #4
 8002d10:	4013      	ands	r3, r2
 8002d12:	d1e5      	bne.n	8002ce0 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	493f      	ldr	r1, [pc, #252]	@ (8002e1c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8002d20:	400a      	ands	r2, r1
 8002d22:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	22ff      	movs	r2, #255	@ 0xff
 8002d2c:	401a      	ands	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	493b      	ldr	r1, [pc, #236]	@ (8002e20 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8002d34:	430a      	orrs	r2, r1
 8002d36:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002d38:	4b37      	ldr	r3, [pc, #220]	@ (8002e18 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	22fa      	movs	r2, #250	@ 0xfa
 8002d3e:	01d1      	lsls	r1, r2, #7
 8002d40:	0018      	movs	r0, r3
 8002d42:	f7fd f9f3 	bl	800012c <__udivsi3>
 8002d46:	0003      	movs	r3, r0
 8002d48:	001a      	movs	r2, r3
 8002d4a:	0013      	movs	r3, r2
 8002d4c:	015b      	lsls	r3, r3, #5
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	189b      	adds	r3, r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10d      	bne.n	8002d80 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	22ff      	movs	r2, #255	@ 0xff
 8002d6a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2221      	movs	r2, #33	@ 0x21
 8002d70:	2103      	movs	r1, #3
 8002d72:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2220      	movs	r2, #32
 8002d78:	2100      	movs	r1, #0
 8002d7a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e046      	b.n	8002e0e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	2204      	movs	r2, #4
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d0e5      	beq.n	8002d58 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	689a      	ldr	r2, [r3, #8]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2107      	movs	r1, #7
 8002d98:	438a      	bics	r2, r1
 8002d9a:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6899      	ldr	r1, [r3, #8]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002db4:	4b1b      	ldr	r3, [pc, #108]	@ (8002e24 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e24 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002dba:	2180      	movs	r1, #128	@ 0x80
 8002dbc:	0349      	lsls	r1, r1, #13
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8002dc2:	4b18      	ldr	r3, [pc, #96]	@ (8002e24 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	4b17      	ldr	r3, [pc, #92]	@ (8002e24 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8002dc8:	2180      	movs	r1, #128	@ 0x80
 8002dca:	0349      	lsls	r1, r1, #13
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2180      	movs	r1, #128	@ 0x80
 8002ddc:	01c9      	lsls	r1, r1, #7
 8002dde:	430a      	orrs	r2, r1
 8002de0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2180      	movs	r1, #128	@ 0x80
 8002dee:	00c9      	lsls	r1, r1, #3
 8002df0:	430a      	orrs	r2, r1
 8002df2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	22ff      	movs	r2, #255	@ 0xff
 8002dfa:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2221      	movs	r2, #33	@ 0x21
 8002e00:	2101      	movs	r1, #1
 8002e02:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	2100      	movs	r1, #0
 8002e0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b006      	add	sp, #24
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	46c0      	nop			@ (mov r8, r8)
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	fffffbff 	.word	0xfffffbff
 8002e20:	fffffb7f 	.word	0xfffffb7f
 8002e24:	40010400 	.word	0x40010400

08002e28 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2220      	movs	r2, #32
 8002e38:	5c9b      	ldrb	r3, [r3, r2]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d101      	bne.n	8002e42 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e04e      	b.n	8002ee0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	2101      	movs	r1, #1
 8002e48:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2221      	movs	r2, #33	@ 0x21
 8002e4e:	2102      	movs	r1, #2
 8002e50:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	22ca      	movs	r2, #202	@ 0xca
 8002e58:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2253      	movs	r2, #83	@ 0x53
 8002e60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	491e      	ldr	r1, [pc, #120]	@ (8002ee8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8002e6e:	400a      	ands	r2, r1
 8002e70:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	491b      	ldr	r1, [pc, #108]	@ (8002eec <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8002e7e:	400a      	ands	r2, r1
 8002e80:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e82:	f7fe f82f 	bl	8000ee4 <HAL_GetTick>
 8002e86:	0003      	movs	r3, r0
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002e8a:	e016      	b.n	8002eba <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e8c:	f7fe f82a 	bl	8000ee4 <HAL_GetTick>
 8002e90:	0002      	movs	r2, r0
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1ad2      	subs	r2, r2, r3
 8002e96:	23fa      	movs	r3, #250	@ 0xfa
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d90d      	bls.n	8002eba <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	22ff      	movs	r2, #255	@ 0xff
 8002ea4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2221      	movs	r2, #33	@ 0x21
 8002eaa:	2103      	movs	r1, #3
 8002eac:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2220      	movs	r2, #32
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e012      	b.n	8002ee0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	d0e2      	beq.n	8002e8c <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	22ff      	movs	r2, #255	@ 0xff
 8002ecc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2221      	movs	r2, #33	@ 0x21
 8002ed2:	2101      	movs	r1, #1
 8002ed4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	2100      	movs	r1, #0
 8002edc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	b004      	add	sp, #16
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	fffffbff 	.word	0xfffffbff
 8002eec:	ffffbfff 	.word	0xffffbfff

08002ef0 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002ef8:	4b13      	ldr	r3, [pc, #76]	@ (8002f48 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8002efa:	2280      	movs	r2, #128	@ 0x80
 8002efc:	0352      	lsls	r2, r2, #13
 8002efe:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689a      	ldr	r2, [r3, #8]
 8002f06:	2380      	movs	r3, #128	@ 0x80
 8002f08:	01db      	lsls	r3, r3, #7
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d014      	beq.n	8002f38 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	2380      	movs	r3, #128	@ 0x80
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4013      	ands	r3, r2
 8002f1a:	d00d      	beq.n	8002f38 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	22ff      	movs	r2, #255	@ 0xff
 8002f24:	401a      	ands	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4908      	ldr	r1, [pc, #32]	@ (8002f4c <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	0018      	movs	r0, r3
 8002f34:	f7fd fae2 	bl	80004fc <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2221      	movs	r2, #33	@ 0x21
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	5499      	strb	r1, [r3, r2]
}
 8002f40:	46c0      	nop			@ (mov r8, r8)
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b002      	add	sp, #8
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40010400 	.word	0x40010400
 8002f4c:	fffffb7f 	.word	0xfffffb7f

08002f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e044      	b.n	8002fec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d107      	bne.n	8002f7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2278      	movs	r2, #120	@ 0x78
 8002f6e:	2100      	movs	r1, #0
 8002f70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	0018      	movs	r0, r3
 8002f76:	f7fd fe09 	bl	8000b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2224      	movs	r2, #36	@ 0x24
 8002f7e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	438a      	bics	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 fba8 	bl	80036f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 f906 	bl	80031b4 <UART_SetConfig>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e01c      	b.n	8002fec <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	490d      	ldr	r1, [pc, #52]	@ (8002ff4 <HAL_UART_Init+0xa4>)
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	212a      	movs	r1, #42	@ 0x2a
 8002fce:	438a      	bics	r2, r1
 8002fd0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 fc37 	bl	8003858 <UART_CheckIdleState>
 8002fea:	0003      	movs	r3, r0
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b002      	add	sp, #8
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	ffffb7ff 	.word	0xffffb7ff

08002ff8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e030      	b.n	800306c <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2224      	movs	r2, #36	@ 0x24
 800300e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2101      	movs	r1, #1
 800301c:	438a      	bics	r2, r1
 800301e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2200      	movs	r2, #0
 800302e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2200      	movs	r2, #0
 8003036:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	0018      	movs	r0, r3
 800303c:	f7fd fe1c 	bl	8000c78 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2284      	movs	r2, #132	@ 0x84
 8003044:	2100      	movs	r1, #0
 8003046:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2280      	movs	r2, #128	@ 0x80
 8003052:	2100      	movs	r1, #0
 8003054:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2278      	movs	r2, #120	@ 0x78
 8003066:	2100      	movs	r1, #0
 8003068:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	0018      	movs	r0, r3
 800306e:	46bd      	mov	sp, r7
 8003070:	b002      	add	sp, #8
 8003072:	bd80      	pop	{r7, pc}

08003074 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08a      	sub	sp, #40	@ 0x28
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	1dbb      	adds	r3, r7, #6
 8003082:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003088:	2b20      	cmp	r3, #32
 800308a:	d000      	beq.n	800308e <HAL_UART_Transmit+0x1a>
 800308c:	e08c      	b.n	80031a8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_UART_Transmit+0x28>
 8003094:	1dbb      	adds	r3, r7, #6
 8003096:	881b      	ldrh	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e084      	b.n	80031aa <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	015b      	lsls	r3, r3, #5
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d109      	bne.n	80030c0 <HAL_UART_Transmit+0x4c>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d105      	bne.n	80030c0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2201      	movs	r2, #1
 80030b8:	4013      	ands	r3, r2
 80030ba:	d001      	beq.n	80030c0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e074      	b.n	80031aa <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2284      	movs	r2, #132	@ 0x84
 80030c4:	2100      	movs	r1, #0
 80030c6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2221      	movs	r2, #33	@ 0x21
 80030cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030ce:	f7fd ff09 	bl	8000ee4 <HAL_GetTick>
 80030d2:	0003      	movs	r3, r0
 80030d4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1dba      	adds	r2, r7, #6
 80030da:	2150      	movs	r1, #80	@ 0x50
 80030dc:	8812      	ldrh	r2, [r2, #0]
 80030de:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1dba      	adds	r2, r7, #6
 80030e4:	2152      	movs	r1, #82	@ 0x52
 80030e6:	8812      	ldrh	r2, [r2, #0]
 80030e8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	2380      	movs	r3, #128	@ 0x80
 80030f0:	015b      	lsls	r3, r3, #5
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d108      	bne.n	8003108 <HAL_UART_Transmit+0x94>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d104      	bne.n	8003108 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	e003      	b.n	8003110 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800310c:	2300      	movs	r3, #0
 800310e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003110:	e02f      	b.n	8003172 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	0013      	movs	r3, r2
 800311c:	2200      	movs	r2, #0
 800311e:	2180      	movs	r1, #128	@ 0x80
 8003120:	f000 fc42 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 8003124:	1e03      	subs	r3, r0, #0
 8003126:	d004      	beq.n	8003132 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e03b      	b.n	80031aa <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10b      	bne.n	8003150 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	001a      	movs	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	05d2      	lsls	r2, r2, #23
 8003144:	0dd2      	lsrs	r2, r2, #23
 8003146:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	3302      	adds	r3, #2
 800314c:	61bb      	str	r3, [r7, #24]
 800314e:	e007      	b.n	8003160 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	3301      	adds	r3, #1
 800315e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2252      	movs	r2, #82	@ 0x52
 8003164:	5a9b      	ldrh	r3, [r3, r2]
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b299      	uxth	r1, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2252      	movs	r2, #82	@ 0x52
 8003170:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2252      	movs	r2, #82	@ 0x52
 8003176:	5a9b      	ldrh	r3, [r3, r2]
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1c9      	bne.n	8003112 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	0013      	movs	r3, r2
 8003188:	2200      	movs	r2, #0
 800318a:	2140      	movs	r1, #64	@ 0x40
 800318c:	f000 fc0c 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 8003190:	1e03      	subs	r3, r0, #0
 8003192:	d004      	beq.n	800319e <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e005      	b.n	80031aa <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e000      	b.n	80031aa <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80031a8:	2302      	movs	r3, #2
  }
}
 80031aa:	0018      	movs	r0, r3
 80031ac:	46bd      	mov	sp, r7
 80031ae:	b008      	add	sp, #32
 80031b0:	bd80      	pop	{r7, pc}
	...

080031b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b4:	b5b0      	push	{r4, r5, r7, lr}
 80031b6:	b08e      	sub	sp, #56	@ 0x38
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031bc:	231a      	movs	r3, #26
 80031be:	2218      	movs	r2, #24
 80031c0:	189b      	adds	r3, r3, r2
 80031c2:	19db      	adds	r3, r3, r7
 80031c4:	2200      	movs	r2, #0
 80031c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	431a      	orrs	r2, r3
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	431a      	orrs	r2, r3
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	4313      	orrs	r3, r2
 80031de:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4ac3      	ldr	r2, [pc, #780]	@ (80034f4 <UART_SetConfig+0x340>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	0019      	movs	r1, r3
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031f2:	430a      	orrs	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	4abe      	ldr	r2, [pc, #760]	@ (80034f8 <UART_SetConfig+0x344>)
 80031fe:	4013      	ands	r3, r2
 8003200:	0019      	movs	r1, r3
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4ab8      	ldr	r2, [pc, #736]	@ (80034fc <UART_SetConfig+0x348>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d004      	beq.n	8003228 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003224:	4313      	orrs	r3, r2
 8003226:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	4ab4      	ldr	r2, [pc, #720]	@ (8003500 <UART_SetConfig+0x34c>)
 8003230:	4013      	ands	r3, r2
 8003232:	0019      	movs	r1, r3
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800323a:	430a      	orrs	r2, r1
 800323c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4ab0      	ldr	r2, [pc, #704]	@ (8003504 <UART_SetConfig+0x350>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d131      	bne.n	80032ac <UART_SetConfig+0xf8>
 8003248:	4baf      	ldr	r3, [pc, #700]	@ (8003508 <UART_SetConfig+0x354>)
 800324a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800324c:	2203      	movs	r2, #3
 800324e:	4013      	ands	r3, r2
 8003250:	2b03      	cmp	r3, #3
 8003252:	d01d      	beq.n	8003290 <UART_SetConfig+0xdc>
 8003254:	d823      	bhi.n	800329e <UART_SetConfig+0xea>
 8003256:	2b02      	cmp	r3, #2
 8003258:	d00c      	beq.n	8003274 <UART_SetConfig+0xc0>
 800325a:	d820      	bhi.n	800329e <UART_SetConfig+0xea>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <UART_SetConfig+0xb2>
 8003260:	2b01      	cmp	r3, #1
 8003262:	d00e      	beq.n	8003282 <UART_SetConfig+0xce>
 8003264:	e01b      	b.n	800329e <UART_SetConfig+0xea>
 8003266:	231b      	movs	r3, #27
 8003268:	2218      	movs	r2, #24
 800326a:	189b      	adds	r3, r3, r2
 800326c:	19db      	adds	r3, r3, r7
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e0b4      	b.n	80033de <UART_SetConfig+0x22a>
 8003274:	231b      	movs	r3, #27
 8003276:	2218      	movs	r2, #24
 8003278:	189b      	adds	r3, r3, r2
 800327a:	19db      	adds	r3, r3, r7
 800327c:	2202      	movs	r2, #2
 800327e:	701a      	strb	r2, [r3, #0]
 8003280:	e0ad      	b.n	80033de <UART_SetConfig+0x22a>
 8003282:	231b      	movs	r3, #27
 8003284:	2218      	movs	r2, #24
 8003286:	189b      	adds	r3, r3, r2
 8003288:	19db      	adds	r3, r3, r7
 800328a:	2204      	movs	r2, #4
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e0a6      	b.n	80033de <UART_SetConfig+0x22a>
 8003290:	231b      	movs	r3, #27
 8003292:	2218      	movs	r2, #24
 8003294:	189b      	adds	r3, r3, r2
 8003296:	19db      	adds	r3, r3, r7
 8003298:	2208      	movs	r2, #8
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	e09f      	b.n	80033de <UART_SetConfig+0x22a>
 800329e:	231b      	movs	r3, #27
 80032a0:	2218      	movs	r2, #24
 80032a2:	189b      	adds	r3, r3, r2
 80032a4:	19db      	adds	r3, r3, r7
 80032a6:	2210      	movs	r2, #16
 80032a8:	701a      	strb	r2, [r3, #0]
 80032aa:	e098      	b.n	80033de <UART_SetConfig+0x22a>
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a96      	ldr	r2, [pc, #600]	@ (800350c <UART_SetConfig+0x358>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d131      	bne.n	800331a <UART_SetConfig+0x166>
 80032b6:	4b94      	ldr	r3, [pc, #592]	@ (8003508 <UART_SetConfig+0x354>)
 80032b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ba:	220c      	movs	r2, #12
 80032bc:	4013      	ands	r3, r2
 80032be:	2b0c      	cmp	r3, #12
 80032c0:	d01d      	beq.n	80032fe <UART_SetConfig+0x14a>
 80032c2:	d823      	bhi.n	800330c <UART_SetConfig+0x158>
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d00c      	beq.n	80032e2 <UART_SetConfig+0x12e>
 80032c8:	d820      	bhi.n	800330c <UART_SetConfig+0x158>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <UART_SetConfig+0x120>
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d00e      	beq.n	80032f0 <UART_SetConfig+0x13c>
 80032d2:	e01b      	b.n	800330c <UART_SetConfig+0x158>
 80032d4:	231b      	movs	r3, #27
 80032d6:	2218      	movs	r2, #24
 80032d8:	189b      	adds	r3, r3, r2
 80032da:	19db      	adds	r3, r3, r7
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	e07d      	b.n	80033de <UART_SetConfig+0x22a>
 80032e2:	231b      	movs	r3, #27
 80032e4:	2218      	movs	r2, #24
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	19db      	adds	r3, r3, r7
 80032ea:	2202      	movs	r2, #2
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e076      	b.n	80033de <UART_SetConfig+0x22a>
 80032f0:	231b      	movs	r3, #27
 80032f2:	2218      	movs	r2, #24
 80032f4:	189b      	adds	r3, r3, r2
 80032f6:	19db      	adds	r3, r3, r7
 80032f8:	2204      	movs	r2, #4
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e06f      	b.n	80033de <UART_SetConfig+0x22a>
 80032fe:	231b      	movs	r3, #27
 8003300:	2218      	movs	r2, #24
 8003302:	189b      	adds	r3, r3, r2
 8003304:	19db      	adds	r3, r3, r7
 8003306:	2208      	movs	r2, #8
 8003308:	701a      	strb	r2, [r3, #0]
 800330a:	e068      	b.n	80033de <UART_SetConfig+0x22a>
 800330c:	231b      	movs	r3, #27
 800330e:	2218      	movs	r2, #24
 8003310:	189b      	adds	r3, r3, r2
 8003312:	19db      	adds	r3, r3, r7
 8003314:	2210      	movs	r2, #16
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e061      	b.n	80033de <UART_SetConfig+0x22a>
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a7c      	ldr	r2, [pc, #496]	@ (8003510 <UART_SetConfig+0x35c>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d106      	bne.n	8003332 <UART_SetConfig+0x17e>
 8003324:	231b      	movs	r3, #27
 8003326:	2218      	movs	r2, #24
 8003328:	189b      	adds	r3, r3, r2
 800332a:	19db      	adds	r3, r3, r7
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]
 8003330:	e055      	b.n	80033de <UART_SetConfig+0x22a>
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a77      	ldr	r2, [pc, #476]	@ (8003514 <UART_SetConfig+0x360>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d106      	bne.n	800334a <UART_SetConfig+0x196>
 800333c:	231b      	movs	r3, #27
 800333e:	2218      	movs	r2, #24
 8003340:	189b      	adds	r3, r3, r2
 8003342:	19db      	adds	r3, r3, r7
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e049      	b.n	80033de <UART_SetConfig+0x22a>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a6b      	ldr	r2, [pc, #428]	@ (80034fc <UART_SetConfig+0x348>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d13e      	bne.n	80033d2 <UART_SetConfig+0x21e>
 8003354:	4b6c      	ldr	r3, [pc, #432]	@ (8003508 <UART_SetConfig+0x354>)
 8003356:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003358:	23c0      	movs	r3, #192	@ 0xc0
 800335a:	011b      	lsls	r3, r3, #4
 800335c:	4013      	ands	r3, r2
 800335e:	22c0      	movs	r2, #192	@ 0xc0
 8003360:	0112      	lsls	r2, r2, #4
 8003362:	4293      	cmp	r3, r2
 8003364:	d027      	beq.n	80033b6 <UART_SetConfig+0x202>
 8003366:	22c0      	movs	r2, #192	@ 0xc0
 8003368:	0112      	lsls	r2, r2, #4
 800336a:	4293      	cmp	r3, r2
 800336c:	d82a      	bhi.n	80033c4 <UART_SetConfig+0x210>
 800336e:	2280      	movs	r2, #128	@ 0x80
 8003370:	0112      	lsls	r2, r2, #4
 8003372:	4293      	cmp	r3, r2
 8003374:	d011      	beq.n	800339a <UART_SetConfig+0x1e6>
 8003376:	2280      	movs	r2, #128	@ 0x80
 8003378:	0112      	lsls	r2, r2, #4
 800337a:	4293      	cmp	r3, r2
 800337c:	d822      	bhi.n	80033c4 <UART_SetConfig+0x210>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d004      	beq.n	800338c <UART_SetConfig+0x1d8>
 8003382:	2280      	movs	r2, #128	@ 0x80
 8003384:	00d2      	lsls	r2, r2, #3
 8003386:	4293      	cmp	r3, r2
 8003388:	d00e      	beq.n	80033a8 <UART_SetConfig+0x1f4>
 800338a:	e01b      	b.n	80033c4 <UART_SetConfig+0x210>
 800338c:	231b      	movs	r3, #27
 800338e:	2218      	movs	r2, #24
 8003390:	189b      	adds	r3, r3, r2
 8003392:	19db      	adds	r3, r3, r7
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e021      	b.n	80033de <UART_SetConfig+0x22a>
 800339a:	231b      	movs	r3, #27
 800339c:	2218      	movs	r2, #24
 800339e:	189b      	adds	r3, r3, r2
 80033a0:	19db      	adds	r3, r3, r7
 80033a2:	2202      	movs	r2, #2
 80033a4:	701a      	strb	r2, [r3, #0]
 80033a6:	e01a      	b.n	80033de <UART_SetConfig+0x22a>
 80033a8:	231b      	movs	r3, #27
 80033aa:	2218      	movs	r2, #24
 80033ac:	189b      	adds	r3, r3, r2
 80033ae:	19db      	adds	r3, r3, r7
 80033b0:	2204      	movs	r2, #4
 80033b2:	701a      	strb	r2, [r3, #0]
 80033b4:	e013      	b.n	80033de <UART_SetConfig+0x22a>
 80033b6:	231b      	movs	r3, #27
 80033b8:	2218      	movs	r2, #24
 80033ba:	189b      	adds	r3, r3, r2
 80033bc:	19db      	adds	r3, r3, r7
 80033be:	2208      	movs	r2, #8
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e00c      	b.n	80033de <UART_SetConfig+0x22a>
 80033c4:	231b      	movs	r3, #27
 80033c6:	2218      	movs	r2, #24
 80033c8:	189b      	adds	r3, r3, r2
 80033ca:	19db      	adds	r3, r3, r7
 80033cc:	2210      	movs	r2, #16
 80033ce:	701a      	strb	r2, [r3, #0]
 80033d0:	e005      	b.n	80033de <UART_SetConfig+0x22a>
 80033d2:	231b      	movs	r3, #27
 80033d4:	2218      	movs	r2, #24
 80033d6:	189b      	adds	r3, r3, r2
 80033d8:	19db      	adds	r3, r3, r7
 80033da:	2210      	movs	r2, #16
 80033dc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a46      	ldr	r2, [pc, #280]	@ (80034fc <UART_SetConfig+0x348>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d000      	beq.n	80033ea <UART_SetConfig+0x236>
 80033e8:	e09a      	b.n	8003520 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033ea:	231b      	movs	r3, #27
 80033ec:	2218      	movs	r2, #24
 80033ee:	189b      	adds	r3, r3, r2
 80033f0:	19db      	adds	r3, r3, r7
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d01d      	beq.n	8003434 <UART_SetConfig+0x280>
 80033f8:	dc20      	bgt.n	800343c <UART_SetConfig+0x288>
 80033fa:	2b04      	cmp	r3, #4
 80033fc:	d015      	beq.n	800342a <UART_SetConfig+0x276>
 80033fe:	dc1d      	bgt.n	800343c <UART_SetConfig+0x288>
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <UART_SetConfig+0x256>
 8003404:	2b02      	cmp	r3, #2
 8003406:	d005      	beq.n	8003414 <UART_SetConfig+0x260>
 8003408:	e018      	b.n	800343c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800340a:	f7ff f86b 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 800340e:	0003      	movs	r3, r0
 8003410:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003412:	e01c      	b.n	800344e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003414:	4b3c      	ldr	r3, [pc, #240]	@ (8003508 <UART_SetConfig+0x354>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2210      	movs	r2, #16
 800341a:	4013      	ands	r3, r2
 800341c:	d002      	beq.n	8003424 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800341e:	4b3e      	ldr	r3, [pc, #248]	@ (8003518 <UART_SetConfig+0x364>)
 8003420:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003422:	e014      	b.n	800344e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003424:	4b3d      	ldr	r3, [pc, #244]	@ (800351c <UART_SetConfig+0x368>)
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003428:	e011      	b.n	800344e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800342a:	f7fe ffcb 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 800342e:	0003      	movs	r3, r0
 8003430:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003432:	e00c      	b.n	800344e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003434:	2380      	movs	r3, #128	@ 0x80
 8003436:	021b      	lsls	r3, r3, #8
 8003438:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800343a:	e008      	b.n	800344e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003440:	231a      	movs	r3, #26
 8003442:	2218      	movs	r2, #24
 8003444:	189b      	adds	r3, r3, r2
 8003446:	19db      	adds	r3, r3, r7
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
        break;
 800344c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800344e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d100      	bne.n	8003456 <UART_SetConfig+0x2a2>
 8003454:	e133      	b.n	80036be <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	0013      	movs	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	189b      	adds	r3, r3, r2
 8003460:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003462:	429a      	cmp	r2, r3
 8003464:	d305      	bcc.n	8003472 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800346c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800346e:	429a      	cmp	r2, r3
 8003470:	d906      	bls.n	8003480 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003472:	231a      	movs	r3, #26
 8003474:	2218      	movs	r2, #24
 8003476:	189b      	adds	r3, r3, r2
 8003478:	19db      	adds	r3, r3, r7
 800347a:	2201      	movs	r2, #1
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e11e      	b.n	80036be <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	2300      	movs	r3, #0
 8003486:	617b      	str	r3, [r7, #20]
 8003488:	6939      	ldr	r1, [r7, #16]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	000b      	movs	r3, r1
 800348e:	0e1b      	lsrs	r3, r3, #24
 8003490:	0010      	movs	r0, r2
 8003492:	0205      	lsls	r5, r0, #8
 8003494:	431d      	orrs	r5, r3
 8003496:	000b      	movs	r3, r1
 8003498:	021c      	lsls	r4, r3, #8
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	085b      	lsrs	r3, r3, #1
 80034a0:	60bb      	str	r3, [r7, #8]
 80034a2:	2300      	movs	r3, #0
 80034a4:	60fb      	str	r3, [r7, #12]
 80034a6:	68b8      	ldr	r0, [r7, #8]
 80034a8:	68f9      	ldr	r1, [r7, #12]
 80034aa:	1900      	adds	r0, r0, r4
 80034ac:	4169      	adcs	r1, r5
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	2300      	movs	r3, #0
 80034b6:	607b      	str	r3, [r7, #4]
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f7fc fec2 	bl	8000244 <__aeabi_uldivmod>
 80034c0:	0002      	movs	r2, r0
 80034c2:	000b      	movs	r3, r1
 80034c4:	0013      	movs	r3, r2
 80034c6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034ca:	23c0      	movs	r3, #192	@ 0xc0
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d309      	bcc.n	80034e6 <UART_SetConfig+0x332>
 80034d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034d4:	2380      	movs	r3, #128	@ 0x80
 80034d6:	035b      	lsls	r3, r3, #13
 80034d8:	429a      	cmp	r2, r3
 80034da:	d204      	bcs.n	80034e6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80034e2:	60da      	str	r2, [r3, #12]
 80034e4:	e0eb      	b.n	80036be <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80034e6:	231a      	movs	r3, #26
 80034e8:	2218      	movs	r2, #24
 80034ea:	189b      	adds	r3, r3, r2
 80034ec:	19db      	adds	r3, r3, r7
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e0e4      	b.n	80036be <UART_SetConfig+0x50a>
 80034f4:	efff69f3 	.word	0xefff69f3
 80034f8:	ffffcfff 	.word	0xffffcfff
 80034fc:	40004800 	.word	0x40004800
 8003500:	fffff4ff 	.word	0xfffff4ff
 8003504:	40013800 	.word	0x40013800
 8003508:	40021000 	.word	0x40021000
 800350c:	40004400 	.word	0x40004400
 8003510:	40004c00 	.word	0x40004c00
 8003514:	40005000 	.word	0x40005000
 8003518:	003d0900 	.word	0x003d0900
 800351c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	2380      	movs	r3, #128	@ 0x80
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	429a      	cmp	r2, r3
 800352a:	d000      	beq.n	800352e <UART_SetConfig+0x37a>
 800352c:	e070      	b.n	8003610 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800352e:	231b      	movs	r3, #27
 8003530:	2218      	movs	r2, #24
 8003532:	189b      	adds	r3, r3, r2
 8003534:	19db      	adds	r3, r3, r7
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b08      	cmp	r3, #8
 800353a:	d822      	bhi.n	8003582 <UART_SetConfig+0x3ce>
 800353c:	009a      	lsls	r2, r3, #2
 800353e:	4b67      	ldr	r3, [pc, #412]	@ (80036dc <UART_SetConfig+0x528>)
 8003540:	18d3      	adds	r3, r2, r3
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003546:	f7fe ffcd 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 800354a:	0003      	movs	r3, r0
 800354c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800354e:	e021      	b.n	8003594 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003550:	f7fe ffde 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 8003554:	0003      	movs	r3, r0
 8003556:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003558:	e01c      	b.n	8003594 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800355a:	4b61      	ldr	r3, [pc, #388]	@ (80036e0 <UART_SetConfig+0x52c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2210      	movs	r2, #16
 8003560:	4013      	ands	r3, r2
 8003562:	d002      	beq.n	800356a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003564:	4b5f      	ldr	r3, [pc, #380]	@ (80036e4 <UART_SetConfig+0x530>)
 8003566:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003568:	e014      	b.n	8003594 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800356a:	4b5f      	ldr	r3, [pc, #380]	@ (80036e8 <UART_SetConfig+0x534>)
 800356c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800356e:	e011      	b.n	8003594 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003570:	f7fe ff28 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8003574:	0003      	movs	r3, r0
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003578:	e00c      	b.n	8003594 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800357a:	2380      	movs	r3, #128	@ 0x80
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003580:	e008      	b.n	8003594 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003586:	231a      	movs	r3, #26
 8003588:	2218      	movs	r2, #24
 800358a:	189b      	adds	r3, r3, r2
 800358c:	19db      	adds	r3, r3, r7
 800358e:	2201      	movs	r2, #1
 8003590:	701a      	strb	r2, [r3, #0]
        break;
 8003592:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003596:	2b00      	cmp	r3, #0
 8003598:	d100      	bne.n	800359c <UART_SetConfig+0x3e8>
 800359a:	e090      	b.n	80036be <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800359c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359e:	005a      	lsls	r2, r3, #1
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	085b      	lsrs	r3, r3, #1
 80035a6:	18d2      	adds	r2, r2, r3
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	0019      	movs	r1, r3
 80035ae:	0010      	movs	r0, r2
 80035b0:	f7fc fdbc 	bl	800012c <__udivsi3>
 80035b4:	0003      	movs	r3, r0
 80035b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ba:	2b0f      	cmp	r3, #15
 80035bc:	d921      	bls.n	8003602 <UART_SetConfig+0x44e>
 80035be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035c0:	2380      	movs	r3, #128	@ 0x80
 80035c2:	025b      	lsls	r3, r3, #9
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d21c      	bcs.n	8003602 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	200e      	movs	r0, #14
 80035ce:	2418      	movs	r4, #24
 80035d0:	1903      	adds	r3, r0, r4
 80035d2:	19db      	adds	r3, r3, r7
 80035d4:	210f      	movs	r1, #15
 80035d6:	438a      	bics	r2, r1
 80035d8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035dc:	085b      	lsrs	r3, r3, #1
 80035de:	b29b      	uxth	r3, r3
 80035e0:	2207      	movs	r2, #7
 80035e2:	4013      	ands	r3, r2
 80035e4:	b299      	uxth	r1, r3
 80035e6:	1903      	adds	r3, r0, r4
 80035e8:	19db      	adds	r3, r3, r7
 80035ea:	1902      	adds	r2, r0, r4
 80035ec:	19d2      	adds	r2, r2, r7
 80035ee:	8812      	ldrh	r2, [r2, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	1902      	adds	r2, r0, r4
 80035fa:	19d2      	adds	r2, r2, r7
 80035fc:	8812      	ldrh	r2, [r2, #0]
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	e05d      	b.n	80036be <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003602:	231a      	movs	r3, #26
 8003604:	2218      	movs	r2, #24
 8003606:	189b      	adds	r3, r3, r2
 8003608:	19db      	adds	r3, r3, r7
 800360a:	2201      	movs	r2, #1
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	e056      	b.n	80036be <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003610:	231b      	movs	r3, #27
 8003612:	2218      	movs	r2, #24
 8003614:	189b      	adds	r3, r3, r2
 8003616:	19db      	adds	r3, r3, r7
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b08      	cmp	r3, #8
 800361c:	d822      	bhi.n	8003664 <UART_SetConfig+0x4b0>
 800361e:	009a      	lsls	r2, r3, #2
 8003620:	4b32      	ldr	r3, [pc, #200]	@ (80036ec <UART_SetConfig+0x538>)
 8003622:	18d3      	adds	r3, r2, r3
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003628:	f7fe ff5c 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 800362c:	0003      	movs	r3, r0
 800362e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003630:	e021      	b.n	8003676 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003632:	f7fe ff6d 	bl	8002510 <HAL_RCC_GetPCLK2Freq>
 8003636:	0003      	movs	r3, r0
 8003638:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800363a:	e01c      	b.n	8003676 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800363c:	4b28      	ldr	r3, [pc, #160]	@ (80036e0 <UART_SetConfig+0x52c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2210      	movs	r2, #16
 8003642:	4013      	ands	r3, r2
 8003644:	d002      	beq.n	800364c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003646:	4b27      	ldr	r3, [pc, #156]	@ (80036e4 <UART_SetConfig+0x530>)
 8003648:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800364a:	e014      	b.n	8003676 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800364c:	4b26      	ldr	r3, [pc, #152]	@ (80036e8 <UART_SetConfig+0x534>)
 800364e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003650:	e011      	b.n	8003676 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003652:	f7fe feb7 	bl	80023c4 <HAL_RCC_GetSysClockFreq>
 8003656:	0003      	movs	r3, r0
 8003658:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800365a:	e00c      	b.n	8003676 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800365c:	2380      	movs	r3, #128	@ 0x80
 800365e:	021b      	lsls	r3, r3, #8
 8003660:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003662:	e008      	b.n	8003676 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003664:	2300      	movs	r3, #0
 8003666:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003668:	231a      	movs	r3, #26
 800366a:	2218      	movs	r2, #24
 800366c:	189b      	adds	r3, r3, r2
 800366e:	19db      	adds	r3, r3, r7
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
        break;
 8003674:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003678:	2b00      	cmp	r3, #0
 800367a:	d020      	beq.n	80036be <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	085a      	lsrs	r2, r3, #1
 8003682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003684:	18d2      	adds	r2, r2, r3
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	0019      	movs	r1, r3
 800368c:	0010      	movs	r0, r2
 800368e:	f7fc fd4d 	bl	800012c <__udivsi3>
 8003692:	0003      	movs	r3, r0
 8003694:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003698:	2b0f      	cmp	r3, #15
 800369a:	d90a      	bls.n	80036b2 <UART_SetConfig+0x4fe>
 800369c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800369e:	2380      	movs	r3, #128	@ 0x80
 80036a0:	025b      	lsls	r3, r3, #9
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d205      	bcs.n	80036b2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60da      	str	r2, [r3, #12]
 80036b0:	e005      	b.n	80036be <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80036b2:	231a      	movs	r3, #26
 80036b4:	2218      	movs	r2, #24
 80036b6:	189b      	adds	r3, r3, r2
 80036b8:	19db      	adds	r3, r3, r7
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	2200      	movs	r2, #0
 80036c2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	2200      	movs	r2, #0
 80036c8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80036ca:	231a      	movs	r3, #26
 80036cc:	2218      	movs	r2, #24
 80036ce:	189b      	adds	r3, r3, r2
 80036d0:	19db      	adds	r3, r3, r7
 80036d2:	781b      	ldrb	r3, [r3, #0]
}
 80036d4:	0018      	movs	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b00e      	add	sp, #56	@ 0x38
 80036da:	bdb0      	pop	{r4, r5, r7, pc}
 80036dc:	08004794 	.word	0x08004794
 80036e0:	40021000 	.word	0x40021000
 80036e4:	003d0900 	.word	0x003d0900
 80036e8:	00f42400 	.word	0x00f42400
 80036ec:	080047b8 	.word	0x080047b8

080036f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fc:	2208      	movs	r2, #8
 80036fe:	4013      	ands	r3, r2
 8003700:	d00b      	beq.n	800371a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4a4a      	ldr	r2, [pc, #296]	@ (8003834 <UART_AdvFeatureConfig+0x144>)
 800370a:	4013      	ands	r3, r2
 800370c:	0019      	movs	r1, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800371e:	2201      	movs	r2, #1
 8003720:	4013      	ands	r3, r2
 8003722:	d00b      	beq.n	800373c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4a43      	ldr	r2, [pc, #268]	@ (8003838 <UART_AdvFeatureConfig+0x148>)
 800372c:	4013      	ands	r3, r2
 800372e:	0019      	movs	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003740:	2202      	movs	r2, #2
 8003742:	4013      	ands	r3, r2
 8003744:	d00b      	beq.n	800375e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	4a3b      	ldr	r2, [pc, #236]	@ (800383c <UART_AdvFeatureConfig+0x14c>)
 800374e:	4013      	ands	r3, r2
 8003750:	0019      	movs	r1, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	2204      	movs	r2, #4
 8003764:	4013      	ands	r3, r2
 8003766:	d00b      	beq.n	8003780 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4a34      	ldr	r2, [pc, #208]	@ (8003840 <UART_AdvFeatureConfig+0x150>)
 8003770:	4013      	ands	r3, r2
 8003772:	0019      	movs	r1, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	2210      	movs	r2, #16
 8003786:	4013      	ands	r3, r2
 8003788:	d00b      	beq.n	80037a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a2c      	ldr	r2, [pc, #176]	@ (8003844 <UART_AdvFeatureConfig+0x154>)
 8003792:	4013      	ands	r3, r2
 8003794:	0019      	movs	r1, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	430a      	orrs	r2, r1
 80037a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	2220      	movs	r2, #32
 80037a8:	4013      	ands	r3, r2
 80037aa:	d00b      	beq.n	80037c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	4a25      	ldr	r2, [pc, #148]	@ (8003848 <UART_AdvFeatureConfig+0x158>)
 80037b4:	4013      	ands	r3, r2
 80037b6:	0019      	movs	r1, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c8:	2240      	movs	r2, #64	@ 0x40
 80037ca:	4013      	ands	r3, r2
 80037cc:	d01d      	beq.n	800380a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <UART_AdvFeatureConfig+0x15c>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	0019      	movs	r1, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037ea:	2380      	movs	r3, #128	@ 0x80
 80037ec:	035b      	lsls	r3, r3, #13
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d10b      	bne.n	800380a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	4a15      	ldr	r2, [pc, #84]	@ (8003850 <UART_AdvFeatureConfig+0x160>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	0019      	movs	r1, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	430a      	orrs	r2, r1
 8003808:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380e:	2280      	movs	r2, #128	@ 0x80
 8003810:	4013      	ands	r3, r2
 8003812:	d00b      	beq.n	800382c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	4a0e      	ldr	r2, [pc, #56]	@ (8003854 <UART_AdvFeatureConfig+0x164>)
 800381c:	4013      	ands	r3, r2
 800381e:	0019      	movs	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	605a      	str	r2, [r3, #4]
  }
}
 800382c:	46c0      	nop			@ (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b002      	add	sp, #8
 8003832:	bd80      	pop	{r7, pc}
 8003834:	ffff7fff 	.word	0xffff7fff
 8003838:	fffdffff 	.word	0xfffdffff
 800383c:	fffeffff 	.word	0xfffeffff
 8003840:	fffbffff 	.word	0xfffbffff
 8003844:	ffffefff 	.word	0xffffefff
 8003848:	ffffdfff 	.word	0xffffdfff
 800384c:	ffefffff 	.word	0xffefffff
 8003850:	ff9fffff 	.word	0xff9fffff
 8003854:	fff7ffff 	.word	0xfff7ffff

08003858 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b092      	sub	sp, #72	@ 0x48
 800385c:	af02      	add	r7, sp, #8
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2284      	movs	r2, #132	@ 0x84
 8003864:	2100      	movs	r1, #0
 8003866:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003868:	f7fd fb3c 	bl	8000ee4 <HAL_GetTick>
 800386c:	0003      	movs	r3, r0
 800386e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2208      	movs	r2, #8
 8003878:	4013      	ands	r3, r2
 800387a:	2b08      	cmp	r3, #8
 800387c:	d12c      	bne.n	80038d8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800387e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003880:	2280      	movs	r2, #128	@ 0x80
 8003882:	0391      	lsls	r1, r2, #14
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4a46      	ldr	r2, [pc, #280]	@ (80039a0 <UART_CheckIdleState+0x148>)
 8003888:	9200      	str	r2, [sp, #0]
 800388a:	2200      	movs	r2, #0
 800388c:	f000 f88c 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 8003890:	1e03      	subs	r3, r0, #0
 8003892:	d021      	beq.n	80038d8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003894:	f3ef 8310 	mrs	r3, PRIMASK
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800389a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800389c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800389e:	2301      	movs	r3, #1
 80038a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a4:	f383 8810 	msr	PRIMASK, r3
}
 80038a8:	46c0      	nop			@ (mov r8, r8)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2180      	movs	r1, #128	@ 0x80
 80038b6:	438a      	bics	r2, r1
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c0:	f383 8810 	msr	PRIMASK, r3
}
 80038c4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2278      	movs	r2, #120	@ 0x78
 80038d0:	2100      	movs	r1, #0
 80038d2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e05f      	b.n	8003998 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2204      	movs	r2, #4
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d146      	bne.n	8003974 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038e8:	2280      	movs	r2, #128	@ 0x80
 80038ea:	03d1      	lsls	r1, r2, #15
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	4a2c      	ldr	r2, [pc, #176]	@ (80039a0 <UART_CheckIdleState+0x148>)
 80038f0:	9200      	str	r2, [sp, #0]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f000 f858 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 80038f8:	1e03      	subs	r3, r0, #0
 80038fa:	d03b      	beq.n	8003974 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003900:	60fb      	str	r3, [r7, #12]
  return(result);
 8003902:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003904:	637b      	str	r3, [r7, #52]	@ 0x34
 8003906:	2301      	movs	r3, #1
 8003908:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f383 8810 	msr	PRIMASK, r3
}
 8003910:	46c0      	nop			@ (mov r8, r8)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4921      	ldr	r1, [pc, #132]	@ (80039a4 <UART_CheckIdleState+0x14c>)
 800391e:	400a      	ands	r2, r1
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003924:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f383 8810 	msr	PRIMASK, r3
}
 800392c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800392e:	f3ef 8310 	mrs	r3, PRIMASK
 8003932:	61bb      	str	r3, [r7, #24]
  return(result);
 8003934:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003936:	633b      	str	r3, [r7, #48]	@ 0x30
 8003938:	2301      	movs	r3, #1
 800393a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f383 8810 	msr	PRIMASK, r3
}
 8003942:	46c0      	nop			@ (mov r8, r8)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2101      	movs	r1, #1
 8003950:	438a      	bics	r2, r1
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003956:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	f383 8810 	msr	PRIMASK, r3
}
 800395e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2280      	movs	r2, #128	@ 0x80
 8003964:	2120      	movs	r1, #32
 8003966:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2278      	movs	r2, #120	@ 0x78
 800396c:	2100      	movs	r1, #0
 800396e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e011      	b.n	8003998 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2220      	movs	r2, #32
 8003978:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2280      	movs	r2, #128	@ 0x80
 800397e:	2120      	movs	r1, #32
 8003980:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2278      	movs	r2, #120	@ 0x78
 8003992:	2100      	movs	r1, #0
 8003994:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	0018      	movs	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	b010      	add	sp, #64	@ 0x40
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	01ffffff 	.word	0x01ffffff
 80039a4:	fffffedf 	.word	0xfffffedf

080039a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	1dfb      	adds	r3, r7, #7
 80039b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b8:	e051      	b.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	3301      	adds	r3, #1
 80039be:	d04e      	beq.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c0:	f7fd fa90 	bl	8000ee4 <HAL_GetTick>
 80039c4:	0002      	movs	r2, r0
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d302      	bcc.n	80039d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e051      	b.n	8003a7e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2204      	movs	r2, #4
 80039e2:	4013      	ands	r3, r2
 80039e4:	d03b      	beq.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xb6>
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b80      	cmp	r3, #128	@ 0x80
 80039ea:	d038      	beq.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xb6>
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2b40      	cmp	r3, #64	@ 0x40
 80039f0:	d035      	beq.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	69db      	ldr	r3, [r3, #28]
 80039f8:	2208      	movs	r2, #8
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d111      	bne.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2208      	movs	r2, #8
 8003a06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f000 f83c 	bl	8003a88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2284      	movs	r2, #132	@ 0x84
 8003a14:	2108      	movs	r1, #8
 8003a16:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2278      	movs	r2, #120	@ 0x78
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e02c      	b.n	8003a7e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69da      	ldr	r2, [r3, #28]
 8003a2a:	2380      	movs	r3, #128	@ 0x80
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	401a      	ands	r2, r3
 8003a30:	2380      	movs	r3, #128	@ 0x80
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d112      	bne.n	8003a5e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2280      	movs	r2, #128	@ 0x80
 8003a3e:	0112      	lsls	r2, r2, #4
 8003a40:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	0018      	movs	r0, r3
 8003a46:	f000 f81f 	bl	8003a88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2284      	movs	r2, #132	@ 0x84
 8003a4e:	2120      	movs	r1, #32
 8003a50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2278      	movs	r2, #120	@ 0x78
 8003a56:	2100      	movs	r1, #0
 8003a58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e00f      	b.n	8003a7e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	4013      	ands	r3, r2
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	425a      	negs	r2, r3
 8003a6e:	4153      	adcs	r3, r2
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	001a      	movs	r2, r3
 8003a74:	1dfb      	adds	r3, r7, #7
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d09e      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	0018      	movs	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	b004      	add	sp, #16
 8003a84:	bd80      	pop	{r7, pc}
	...

08003a88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08e      	sub	sp, #56	@ 0x38
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a90:	f3ef 8310 	mrs	r3, PRIMASK
 8003a94:	617b      	str	r3, [r7, #20]
  return(result);
 8003a96:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a98:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	f383 8810 	msr	PRIMASK, r3
}
 8003aa4:	46c0      	nop			@ (mov r8, r8)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4926      	ldr	r1, [pc, #152]	@ (8003b4c <UART_EndRxTransfer+0xc4>)
 8003ab2:	400a      	ands	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f383 8810 	msr	PRIMASK, r3
}
 8003ac0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac6:	623b      	str	r3, [r7, #32]
  return(result);
 8003ac8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aca:	633b      	str	r3, [r7, #48]	@ 0x30
 8003acc:	2301      	movs	r3, #1
 8003ace:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad2:	f383 8810 	msr	PRIMASK, r3
}
 8003ad6:	46c0      	nop			@ (mov r8, r8)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689a      	ldr	r2, [r3, #8]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	438a      	bics	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aee:	f383 8810 	msr	PRIMASK, r3
}
 8003af2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d118      	bne.n	8003b2e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003afc:	f3ef 8310 	mrs	r3, PRIMASK
 8003b00:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b02:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b06:	2301      	movs	r3, #1
 8003b08:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f383 8810 	msr	PRIMASK, r3
}
 8003b10:	46c0      	nop			@ (mov r8, r8)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2110      	movs	r1, #16
 8003b1e:	438a      	bics	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]
 8003b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f383 8810 	msr	PRIMASK, r3
}
 8003b2c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2280      	movs	r2, #128	@ 0x80
 8003b32:	2120      	movs	r1, #32
 8003b34:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b00e      	add	sp, #56	@ 0x38
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	fffffedf 	.word	0xfffffedf

08003b50 <sniprintf>:
 8003b50:	b40c      	push	{r2, r3}
 8003b52:	b530      	push	{r4, r5, lr}
 8003b54:	4b18      	ldr	r3, [pc, #96]	@ (8003bb8 <sniprintf+0x68>)
 8003b56:	000c      	movs	r4, r1
 8003b58:	681d      	ldr	r5, [r3, #0]
 8003b5a:	b09d      	sub	sp, #116	@ 0x74
 8003b5c:	2900      	cmp	r1, #0
 8003b5e:	da08      	bge.n	8003b72 <sniprintf+0x22>
 8003b60:	238b      	movs	r3, #139	@ 0x8b
 8003b62:	2001      	movs	r0, #1
 8003b64:	602b      	str	r3, [r5, #0]
 8003b66:	4240      	negs	r0, r0
 8003b68:	b01d      	add	sp, #116	@ 0x74
 8003b6a:	bc30      	pop	{r4, r5}
 8003b6c:	bc08      	pop	{r3}
 8003b6e:	b002      	add	sp, #8
 8003b70:	4718      	bx	r3
 8003b72:	2382      	movs	r3, #130	@ 0x82
 8003b74:	466a      	mov	r2, sp
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	8293      	strh	r3, [r2, #20]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	9002      	str	r0, [sp, #8]
 8003b7e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003b80:	9006      	str	r0, [sp, #24]
 8003b82:	4299      	cmp	r1, r3
 8003b84:	d000      	beq.n	8003b88 <sniprintf+0x38>
 8003b86:	1e4b      	subs	r3, r1, #1
 8003b88:	9304      	str	r3, [sp, #16]
 8003b8a:	9307      	str	r3, [sp, #28]
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	466a      	mov	r2, sp
 8003b90:	425b      	negs	r3, r3
 8003b92:	82d3      	strh	r3, [r2, #22]
 8003b94:	0028      	movs	r0, r5
 8003b96:	ab21      	add	r3, sp, #132	@ 0x84
 8003b98:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003b9a:	a902      	add	r1, sp, #8
 8003b9c:	9301      	str	r3, [sp, #4]
 8003b9e:	f000 f9d7 	bl	8003f50 <_svfiprintf_r>
 8003ba2:	1c43      	adds	r3, r0, #1
 8003ba4:	da01      	bge.n	8003baa <sniprintf+0x5a>
 8003ba6:	238b      	movs	r3, #139	@ 0x8b
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	2c00      	cmp	r4, #0
 8003bac:	d0dc      	beq.n	8003b68 <sniprintf+0x18>
 8003bae:	2200      	movs	r2, #0
 8003bb0:	9b02      	ldr	r3, [sp, #8]
 8003bb2:	701a      	strb	r2, [r3, #0]
 8003bb4:	e7d8      	b.n	8003b68 <sniprintf+0x18>
 8003bb6:	46c0      	nop			@ (mov r8, r8)
 8003bb8:	2000000c 	.word	0x2000000c

08003bbc <_vsniprintf_r>:
 8003bbc:	b530      	push	{r4, r5, lr}
 8003bbe:	0005      	movs	r5, r0
 8003bc0:	0014      	movs	r4, r2
 8003bc2:	0008      	movs	r0, r1
 8003bc4:	001a      	movs	r2, r3
 8003bc6:	b09b      	sub	sp, #108	@ 0x6c
 8003bc8:	2c00      	cmp	r4, #0
 8003bca:	da05      	bge.n	8003bd8 <_vsniprintf_r+0x1c>
 8003bcc:	238b      	movs	r3, #139	@ 0x8b
 8003bce:	2001      	movs	r0, #1
 8003bd0:	602b      	str	r3, [r5, #0]
 8003bd2:	4240      	negs	r0, r0
 8003bd4:	b01b      	add	sp, #108	@ 0x6c
 8003bd6:	bd30      	pop	{r4, r5, pc}
 8003bd8:	2382      	movs	r3, #130	@ 0x82
 8003bda:	4669      	mov	r1, sp
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	818b      	strh	r3, [r1, #12]
 8003be0:	2100      	movs	r1, #0
 8003be2:	9000      	str	r0, [sp, #0]
 8003be4:	9119      	str	r1, [sp, #100]	@ 0x64
 8003be6:	9004      	str	r0, [sp, #16]
 8003be8:	428c      	cmp	r4, r1
 8003bea:	d000      	beq.n	8003bee <_vsniprintf_r+0x32>
 8003bec:	1e61      	subs	r1, r4, #1
 8003bee:	2301      	movs	r3, #1
 8003bf0:	9102      	str	r1, [sp, #8]
 8003bf2:	9105      	str	r1, [sp, #20]
 8003bf4:	4669      	mov	r1, sp
 8003bf6:	425b      	negs	r3, r3
 8003bf8:	81cb      	strh	r3, [r1, #14]
 8003bfa:	0028      	movs	r0, r5
 8003bfc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003bfe:	f000 f9a7 	bl	8003f50 <_svfiprintf_r>
 8003c02:	1c43      	adds	r3, r0, #1
 8003c04:	da01      	bge.n	8003c0a <_vsniprintf_r+0x4e>
 8003c06:	238b      	movs	r3, #139	@ 0x8b
 8003c08:	602b      	str	r3, [r5, #0]
 8003c0a:	2c00      	cmp	r4, #0
 8003c0c:	d0e2      	beq.n	8003bd4 <_vsniprintf_r+0x18>
 8003c0e:	2200      	movs	r2, #0
 8003c10:	9b00      	ldr	r3, [sp, #0]
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	e7de      	b.n	8003bd4 <_vsniprintf_r+0x18>
	...

08003c18 <vsniprintf>:
 8003c18:	b513      	push	{r0, r1, r4, lr}
 8003c1a:	4c04      	ldr	r4, [pc, #16]	@ (8003c2c <vsniprintf+0x14>)
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	0013      	movs	r3, r2
 8003c20:	000a      	movs	r2, r1
 8003c22:	0001      	movs	r1, r0
 8003c24:	6820      	ldr	r0, [r4, #0]
 8003c26:	f7ff ffc9 	bl	8003bbc <_vsniprintf_r>
 8003c2a:	bd16      	pop	{r1, r2, r4, pc}
 8003c2c:	2000000c 	.word	0x2000000c

08003c30 <memset>:
 8003c30:	0003      	movs	r3, r0
 8003c32:	1882      	adds	r2, r0, r2
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d100      	bne.n	8003c3a <memset+0xa>
 8003c38:	4770      	bx	lr
 8003c3a:	7019      	strb	r1, [r3, #0]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	e7f9      	b.n	8003c34 <memset+0x4>

08003c40 <__errno>:
 8003c40:	4b01      	ldr	r3, [pc, #4]	@ (8003c48 <__errno+0x8>)
 8003c42:	6818      	ldr	r0, [r3, #0]
 8003c44:	4770      	bx	lr
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	2000000c 	.word	0x2000000c

08003c4c <__libc_init_array>:
 8003c4c:	b570      	push	{r4, r5, r6, lr}
 8003c4e:	2600      	movs	r6, #0
 8003c50:	4c0c      	ldr	r4, [pc, #48]	@ (8003c84 <__libc_init_array+0x38>)
 8003c52:	4d0d      	ldr	r5, [pc, #52]	@ (8003c88 <__libc_init_array+0x3c>)
 8003c54:	1b64      	subs	r4, r4, r5
 8003c56:	10a4      	asrs	r4, r4, #2
 8003c58:	42a6      	cmp	r6, r4
 8003c5a:	d109      	bne.n	8003c70 <__libc_init_array+0x24>
 8003c5c:	2600      	movs	r6, #0
 8003c5e:	f000 fc61 	bl	8004524 <_init>
 8003c62:	4c0a      	ldr	r4, [pc, #40]	@ (8003c8c <__libc_init_array+0x40>)
 8003c64:	4d0a      	ldr	r5, [pc, #40]	@ (8003c90 <__libc_init_array+0x44>)
 8003c66:	1b64      	subs	r4, r4, r5
 8003c68:	10a4      	asrs	r4, r4, #2
 8003c6a:	42a6      	cmp	r6, r4
 8003c6c:	d105      	bne.n	8003c7a <__libc_init_array+0x2e>
 8003c6e:	bd70      	pop	{r4, r5, r6, pc}
 8003c70:	00b3      	lsls	r3, r6, #2
 8003c72:	58eb      	ldr	r3, [r5, r3]
 8003c74:	4798      	blx	r3
 8003c76:	3601      	adds	r6, #1
 8003c78:	e7ee      	b.n	8003c58 <__libc_init_array+0xc>
 8003c7a:	00b3      	lsls	r3, r6, #2
 8003c7c:	58eb      	ldr	r3, [r5, r3]
 8003c7e:	4798      	blx	r3
 8003c80:	3601      	adds	r6, #1
 8003c82:	e7f2      	b.n	8003c6a <__libc_init_array+0x1e>
 8003c84:	08004818 	.word	0x08004818
 8003c88:	08004818 	.word	0x08004818
 8003c8c:	0800481c 	.word	0x0800481c
 8003c90:	08004818 	.word	0x08004818

08003c94 <__retarget_lock_acquire_recursive>:
 8003c94:	4770      	bx	lr

08003c96 <__retarget_lock_release_recursive>:
 8003c96:	4770      	bx	lr

08003c98 <_free_r>:
 8003c98:	b570      	push	{r4, r5, r6, lr}
 8003c9a:	0005      	movs	r5, r0
 8003c9c:	1e0c      	subs	r4, r1, #0
 8003c9e:	d010      	beq.n	8003cc2 <_free_r+0x2a>
 8003ca0:	3c04      	subs	r4, #4
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	da00      	bge.n	8003caa <_free_r+0x12>
 8003ca8:	18e4      	adds	r4, r4, r3
 8003caa:	0028      	movs	r0, r5
 8003cac:	f000 f8e0 	bl	8003e70 <__malloc_lock>
 8003cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d28 <_free_r+0x90>)
 8003cb2:	6813      	ldr	r3, [r2, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d105      	bne.n	8003cc4 <_free_r+0x2c>
 8003cb8:	6063      	str	r3, [r4, #4]
 8003cba:	6014      	str	r4, [r2, #0]
 8003cbc:	0028      	movs	r0, r5
 8003cbe:	f000 f8df 	bl	8003e80 <__malloc_unlock>
 8003cc2:	bd70      	pop	{r4, r5, r6, pc}
 8003cc4:	42a3      	cmp	r3, r4
 8003cc6:	d908      	bls.n	8003cda <_free_r+0x42>
 8003cc8:	6820      	ldr	r0, [r4, #0]
 8003cca:	1821      	adds	r1, r4, r0
 8003ccc:	428b      	cmp	r3, r1
 8003cce:	d1f3      	bne.n	8003cb8 <_free_r+0x20>
 8003cd0:	6819      	ldr	r1, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	1809      	adds	r1, r1, r0
 8003cd6:	6021      	str	r1, [r4, #0]
 8003cd8:	e7ee      	b.n	8003cb8 <_free_r+0x20>
 8003cda:	001a      	movs	r2, r3
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <_free_r+0x4e>
 8003ce2:	42a3      	cmp	r3, r4
 8003ce4:	d9f9      	bls.n	8003cda <_free_r+0x42>
 8003ce6:	6811      	ldr	r1, [r2, #0]
 8003ce8:	1850      	adds	r0, r2, r1
 8003cea:	42a0      	cmp	r0, r4
 8003cec:	d10b      	bne.n	8003d06 <_free_r+0x6e>
 8003cee:	6820      	ldr	r0, [r4, #0]
 8003cf0:	1809      	adds	r1, r1, r0
 8003cf2:	1850      	adds	r0, r2, r1
 8003cf4:	6011      	str	r1, [r2, #0]
 8003cf6:	4283      	cmp	r3, r0
 8003cf8:	d1e0      	bne.n	8003cbc <_free_r+0x24>
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	1841      	adds	r1, r0, r1
 8003d00:	6011      	str	r1, [r2, #0]
 8003d02:	6053      	str	r3, [r2, #4]
 8003d04:	e7da      	b.n	8003cbc <_free_r+0x24>
 8003d06:	42a0      	cmp	r0, r4
 8003d08:	d902      	bls.n	8003d10 <_free_r+0x78>
 8003d0a:	230c      	movs	r3, #12
 8003d0c:	602b      	str	r3, [r5, #0]
 8003d0e:	e7d5      	b.n	8003cbc <_free_r+0x24>
 8003d10:	6820      	ldr	r0, [r4, #0]
 8003d12:	1821      	adds	r1, r4, r0
 8003d14:	428b      	cmp	r3, r1
 8003d16:	d103      	bne.n	8003d20 <_free_r+0x88>
 8003d18:	6819      	ldr	r1, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	1809      	adds	r1, r1, r0
 8003d1e:	6021      	str	r1, [r4, #0]
 8003d20:	6063      	str	r3, [r4, #4]
 8003d22:	6054      	str	r4, [r2, #4]
 8003d24:	e7ca      	b.n	8003cbc <_free_r+0x24>
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	2000034c 	.word	0x2000034c

08003d2c <sbrk_aligned>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	4e0f      	ldr	r6, [pc, #60]	@ (8003d6c <sbrk_aligned+0x40>)
 8003d30:	000d      	movs	r5, r1
 8003d32:	6831      	ldr	r1, [r6, #0]
 8003d34:	0004      	movs	r4, r0
 8003d36:	2900      	cmp	r1, #0
 8003d38:	d102      	bne.n	8003d40 <sbrk_aligned+0x14>
 8003d3a:	f000 fb95 	bl	8004468 <_sbrk_r>
 8003d3e:	6030      	str	r0, [r6, #0]
 8003d40:	0029      	movs	r1, r5
 8003d42:	0020      	movs	r0, r4
 8003d44:	f000 fb90 	bl	8004468 <_sbrk_r>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d103      	bne.n	8003d54 <sbrk_aligned+0x28>
 8003d4c:	2501      	movs	r5, #1
 8003d4e:	426d      	negs	r5, r5
 8003d50:	0028      	movs	r0, r5
 8003d52:	bd70      	pop	{r4, r5, r6, pc}
 8003d54:	2303      	movs	r3, #3
 8003d56:	1cc5      	adds	r5, r0, #3
 8003d58:	439d      	bics	r5, r3
 8003d5a:	42a8      	cmp	r0, r5
 8003d5c:	d0f8      	beq.n	8003d50 <sbrk_aligned+0x24>
 8003d5e:	1a29      	subs	r1, r5, r0
 8003d60:	0020      	movs	r0, r4
 8003d62:	f000 fb81 	bl	8004468 <_sbrk_r>
 8003d66:	3001      	adds	r0, #1
 8003d68:	d1f2      	bne.n	8003d50 <sbrk_aligned+0x24>
 8003d6a:	e7ef      	b.n	8003d4c <sbrk_aligned+0x20>
 8003d6c:	20000348 	.word	0x20000348

08003d70 <_malloc_r>:
 8003d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d72:	2203      	movs	r2, #3
 8003d74:	1ccb      	adds	r3, r1, #3
 8003d76:	4393      	bics	r3, r2
 8003d78:	3308      	adds	r3, #8
 8003d7a:	0005      	movs	r5, r0
 8003d7c:	001f      	movs	r7, r3
 8003d7e:	2b0c      	cmp	r3, #12
 8003d80:	d234      	bcs.n	8003dec <_malloc_r+0x7c>
 8003d82:	270c      	movs	r7, #12
 8003d84:	42b9      	cmp	r1, r7
 8003d86:	d833      	bhi.n	8003df0 <_malloc_r+0x80>
 8003d88:	0028      	movs	r0, r5
 8003d8a:	f000 f871 	bl	8003e70 <__malloc_lock>
 8003d8e:	4e37      	ldr	r6, [pc, #220]	@ (8003e6c <_malloc_r+0xfc>)
 8003d90:	6833      	ldr	r3, [r6, #0]
 8003d92:	001c      	movs	r4, r3
 8003d94:	2c00      	cmp	r4, #0
 8003d96:	d12f      	bne.n	8003df8 <_malloc_r+0x88>
 8003d98:	0039      	movs	r1, r7
 8003d9a:	0028      	movs	r0, r5
 8003d9c:	f7ff ffc6 	bl	8003d2c <sbrk_aligned>
 8003da0:	0004      	movs	r4, r0
 8003da2:	1c43      	adds	r3, r0, #1
 8003da4:	d15f      	bne.n	8003e66 <_malloc_r+0xf6>
 8003da6:	6834      	ldr	r4, [r6, #0]
 8003da8:	9400      	str	r4, [sp, #0]
 8003daa:	9b00      	ldr	r3, [sp, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d14a      	bne.n	8003e46 <_malloc_r+0xd6>
 8003db0:	2c00      	cmp	r4, #0
 8003db2:	d052      	beq.n	8003e5a <_malloc_r+0xea>
 8003db4:	6823      	ldr	r3, [r4, #0]
 8003db6:	0028      	movs	r0, r5
 8003db8:	18e3      	adds	r3, r4, r3
 8003dba:	9900      	ldr	r1, [sp, #0]
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	f000 fb53 	bl	8004468 <_sbrk_r>
 8003dc2:	9b01      	ldr	r3, [sp, #4]
 8003dc4:	4283      	cmp	r3, r0
 8003dc6:	d148      	bne.n	8003e5a <_malloc_r+0xea>
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	0028      	movs	r0, r5
 8003dcc:	1aff      	subs	r7, r7, r3
 8003dce:	0039      	movs	r1, r7
 8003dd0:	f7ff ffac 	bl	8003d2c <sbrk_aligned>
 8003dd4:	3001      	adds	r0, #1
 8003dd6:	d040      	beq.n	8003e5a <_malloc_r+0xea>
 8003dd8:	6823      	ldr	r3, [r4, #0]
 8003dda:	19db      	adds	r3, r3, r7
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	6833      	ldr	r3, [r6, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	2a00      	cmp	r2, #0
 8003de4:	d133      	bne.n	8003e4e <_malloc_r+0xde>
 8003de6:	9b00      	ldr	r3, [sp, #0]
 8003de8:	6033      	str	r3, [r6, #0]
 8003dea:	e019      	b.n	8003e20 <_malloc_r+0xb0>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	dac9      	bge.n	8003d84 <_malloc_r+0x14>
 8003df0:	230c      	movs	r3, #12
 8003df2:	602b      	str	r3, [r5, #0]
 8003df4:	2000      	movs	r0, #0
 8003df6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003df8:	6821      	ldr	r1, [r4, #0]
 8003dfa:	1bc9      	subs	r1, r1, r7
 8003dfc:	d420      	bmi.n	8003e40 <_malloc_r+0xd0>
 8003dfe:	290b      	cmp	r1, #11
 8003e00:	d90a      	bls.n	8003e18 <_malloc_r+0xa8>
 8003e02:	19e2      	adds	r2, r4, r7
 8003e04:	6027      	str	r7, [r4, #0]
 8003e06:	42a3      	cmp	r3, r4
 8003e08:	d104      	bne.n	8003e14 <_malloc_r+0xa4>
 8003e0a:	6032      	str	r2, [r6, #0]
 8003e0c:	6863      	ldr	r3, [r4, #4]
 8003e0e:	6011      	str	r1, [r2, #0]
 8003e10:	6053      	str	r3, [r2, #4]
 8003e12:	e005      	b.n	8003e20 <_malloc_r+0xb0>
 8003e14:	605a      	str	r2, [r3, #4]
 8003e16:	e7f9      	b.n	8003e0c <_malloc_r+0x9c>
 8003e18:	6862      	ldr	r2, [r4, #4]
 8003e1a:	42a3      	cmp	r3, r4
 8003e1c:	d10e      	bne.n	8003e3c <_malloc_r+0xcc>
 8003e1e:	6032      	str	r2, [r6, #0]
 8003e20:	0028      	movs	r0, r5
 8003e22:	f000 f82d 	bl	8003e80 <__malloc_unlock>
 8003e26:	0020      	movs	r0, r4
 8003e28:	2207      	movs	r2, #7
 8003e2a:	300b      	adds	r0, #11
 8003e2c:	1d23      	adds	r3, r4, #4
 8003e2e:	4390      	bics	r0, r2
 8003e30:	1ac2      	subs	r2, r0, r3
 8003e32:	4298      	cmp	r0, r3
 8003e34:	d0df      	beq.n	8003df6 <_malloc_r+0x86>
 8003e36:	1a1b      	subs	r3, r3, r0
 8003e38:	50a3      	str	r3, [r4, r2]
 8003e3a:	e7dc      	b.n	8003df6 <_malloc_r+0x86>
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	e7ef      	b.n	8003e20 <_malloc_r+0xb0>
 8003e40:	0023      	movs	r3, r4
 8003e42:	6864      	ldr	r4, [r4, #4]
 8003e44:	e7a6      	b.n	8003d94 <_malloc_r+0x24>
 8003e46:	9c00      	ldr	r4, [sp, #0]
 8003e48:	6863      	ldr	r3, [r4, #4]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	e7ad      	b.n	8003daa <_malloc_r+0x3a>
 8003e4e:	001a      	movs	r2, r3
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	42a3      	cmp	r3, r4
 8003e54:	d1fb      	bne.n	8003e4e <_malloc_r+0xde>
 8003e56:	2300      	movs	r3, #0
 8003e58:	e7da      	b.n	8003e10 <_malloc_r+0xa0>
 8003e5a:	230c      	movs	r3, #12
 8003e5c:	0028      	movs	r0, r5
 8003e5e:	602b      	str	r3, [r5, #0]
 8003e60:	f000 f80e 	bl	8003e80 <__malloc_unlock>
 8003e64:	e7c6      	b.n	8003df4 <_malloc_r+0x84>
 8003e66:	6007      	str	r7, [r0, #0]
 8003e68:	e7da      	b.n	8003e20 <_malloc_r+0xb0>
 8003e6a:	46c0      	nop			@ (mov r8, r8)
 8003e6c:	2000034c 	.word	0x2000034c

08003e70 <__malloc_lock>:
 8003e70:	b510      	push	{r4, lr}
 8003e72:	4802      	ldr	r0, [pc, #8]	@ (8003e7c <__malloc_lock+0xc>)
 8003e74:	f7ff ff0e 	bl	8003c94 <__retarget_lock_acquire_recursive>
 8003e78:	bd10      	pop	{r4, pc}
 8003e7a:	46c0      	nop			@ (mov r8, r8)
 8003e7c:	20000344 	.word	0x20000344

08003e80 <__malloc_unlock>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	4802      	ldr	r0, [pc, #8]	@ (8003e8c <__malloc_unlock+0xc>)
 8003e84:	f7ff ff07 	bl	8003c96 <__retarget_lock_release_recursive>
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	20000344 	.word	0x20000344

08003e90 <__ssputs_r>:
 8003e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e92:	688e      	ldr	r6, [r1, #8]
 8003e94:	b085      	sub	sp, #20
 8003e96:	001f      	movs	r7, r3
 8003e98:	000c      	movs	r4, r1
 8003e9a:	680b      	ldr	r3, [r1, #0]
 8003e9c:	9002      	str	r0, [sp, #8]
 8003e9e:	9203      	str	r2, [sp, #12]
 8003ea0:	42be      	cmp	r6, r7
 8003ea2:	d830      	bhi.n	8003f06 <__ssputs_r+0x76>
 8003ea4:	210c      	movs	r1, #12
 8003ea6:	5e62      	ldrsh	r2, [r4, r1]
 8003ea8:	2190      	movs	r1, #144	@ 0x90
 8003eaa:	00c9      	lsls	r1, r1, #3
 8003eac:	420a      	tst	r2, r1
 8003eae:	d028      	beq.n	8003f02 <__ssputs_r+0x72>
 8003eb0:	2003      	movs	r0, #3
 8003eb2:	6921      	ldr	r1, [r4, #16]
 8003eb4:	1a5b      	subs	r3, r3, r1
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	6963      	ldr	r3, [r4, #20]
 8003eba:	4343      	muls	r3, r0
 8003ebc:	9801      	ldr	r0, [sp, #4]
 8003ebe:	0fdd      	lsrs	r5, r3, #31
 8003ec0:	18ed      	adds	r5, r5, r3
 8003ec2:	1c7b      	adds	r3, r7, #1
 8003ec4:	181b      	adds	r3, r3, r0
 8003ec6:	106d      	asrs	r5, r5, #1
 8003ec8:	42ab      	cmp	r3, r5
 8003eca:	d900      	bls.n	8003ece <__ssputs_r+0x3e>
 8003ecc:	001d      	movs	r5, r3
 8003ece:	0552      	lsls	r2, r2, #21
 8003ed0:	d528      	bpl.n	8003f24 <__ssputs_r+0x94>
 8003ed2:	0029      	movs	r1, r5
 8003ed4:	9802      	ldr	r0, [sp, #8]
 8003ed6:	f7ff ff4b 	bl	8003d70 <_malloc_r>
 8003eda:	1e06      	subs	r6, r0, #0
 8003edc:	d02c      	beq.n	8003f38 <__ssputs_r+0xa8>
 8003ede:	9a01      	ldr	r2, [sp, #4]
 8003ee0:	6921      	ldr	r1, [r4, #16]
 8003ee2:	f000 fade 	bl	80044a2 <memcpy>
 8003ee6:	89a2      	ldrh	r2, [r4, #12]
 8003ee8:	4b18      	ldr	r3, [pc, #96]	@ (8003f4c <__ssputs_r+0xbc>)
 8003eea:	401a      	ands	r2, r3
 8003eec:	2380      	movs	r3, #128	@ 0x80
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	81a3      	strh	r3, [r4, #12]
 8003ef2:	9b01      	ldr	r3, [sp, #4]
 8003ef4:	6126      	str	r6, [r4, #16]
 8003ef6:	18f6      	adds	r6, r6, r3
 8003ef8:	6026      	str	r6, [r4, #0]
 8003efa:	003e      	movs	r6, r7
 8003efc:	6165      	str	r5, [r4, #20]
 8003efe:	1aed      	subs	r5, r5, r3
 8003f00:	60a5      	str	r5, [r4, #8]
 8003f02:	42be      	cmp	r6, r7
 8003f04:	d900      	bls.n	8003f08 <__ssputs_r+0x78>
 8003f06:	003e      	movs	r6, r7
 8003f08:	0032      	movs	r2, r6
 8003f0a:	9903      	ldr	r1, [sp, #12]
 8003f0c:	6820      	ldr	r0, [r4, #0]
 8003f0e:	f000 fa99 	bl	8004444 <memmove>
 8003f12:	2000      	movs	r0, #0
 8003f14:	68a3      	ldr	r3, [r4, #8]
 8003f16:	1b9b      	subs	r3, r3, r6
 8003f18:	60a3      	str	r3, [r4, #8]
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	199b      	adds	r3, r3, r6
 8003f1e:	6023      	str	r3, [r4, #0]
 8003f20:	b005      	add	sp, #20
 8003f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f24:	002a      	movs	r2, r5
 8003f26:	9802      	ldr	r0, [sp, #8]
 8003f28:	f000 fac4 	bl	80044b4 <_realloc_r>
 8003f2c:	1e06      	subs	r6, r0, #0
 8003f2e:	d1e0      	bne.n	8003ef2 <__ssputs_r+0x62>
 8003f30:	6921      	ldr	r1, [r4, #16]
 8003f32:	9802      	ldr	r0, [sp, #8]
 8003f34:	f7ff feb0 	bl	8003c98 <_free_r>
 8003f38:	230c      	movs	r3, #12
 8003f3a:	2001      	movs	r0, #1
 8003f3c:	9a02      	ldr	r2, [sp, #8]
 8003f3e:	4240      	negs	r0, r0
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	89a2      	ldrh	r2, [r4, #12]
 8003f44:	3334      	adds	r3, #52	@ 0x34
 8003f46:	4313      	orrs	r3, r2
 8003f48:	81a3      	strh	r3, [r4, #12]
 8003f4a:	e7e9      	b.n	8003f20 <__ssputs_r+0x90>
 8003f4c:	fffffb7f 	.word	0xfffffb7f

08003f50 <_svfiprintf_r>:
 8003f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f52:	b0a1      	sub	sp, #132	@ 0x84
 8003f54:	9003      	str	r0, [sp, #12]
 8003f56:	001d      	movs	r5, r3
 8003f58:	898b      	ldrh	r3, [r1, #12]
 8003f5a:	000f      	movs	r7, r1
 8003f5c:	0016      	movs	r6, r2
 8003f5e:	061b      	lsls	r3, r3, #24
 8003f60:	d511      	bpl.n	8003f86 <_svfiprintf_r+0x36>
 8003f62:	690b      	ldr	r3, [r1, #16]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d10e      	bne.n	8003f86 <_svfiprintf_r+0x36>
 8003f68:	2140      	movs	r1, #64	@ 0x40
 8003f6a:	f7ff ff01 	bl	8003d70 <_malloc_r>
 8003f6e:	6038      	str	r0, [r7, #0]
 8003f70:	6138      	str	r0, [r7, #16]
 8003f72:	2800      	cmp	r0, #0
 8003f74:	d105      	bne.n	8003f82 <_svfiprintf_r+0x32>
 8003f76:	230c      	movs	r3, #12
 8003f78:	9a03      	ldr	r2, [sp, #12]
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	2001      	movs	r0, #1
 8003f7e:	4240      	negs	r0, r0
 8003f80:	e0cf      	b.n	8004122 <_svfiprintf_r+0x1d2>
 8003f82:	2340      	movs	r3, #64	@ 0x40
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	2300      	movs	r3, #0
 8003f88:	ac08      	add	r4, sp, #32
 8003f8a:	6163      	str	r3, [r4, #20]
 8003f8c:	3320      	adds	r3, #32
 8003f8e:	7663      	strb	r3, [r4, #25]
 8003f90:	3310      	adds	r3, #16
 8003f92:	76a3      	strb	r3, [r4, #26]
 8003f94:	9507      	str	r5, [sp, #28]
 8003f96:	0035      	movs	r5, r6
 8003f98:	782b      	ldrb	r3, [r5, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <_svfiprintf_r+0x52>
 8003f9e:	2b25      	cmp	r3, #37	@ 0x25
 8003fa0:	d148      	bne.n	8004034 <_svfiprintf_r+0xe4>
 8003fa2:	1bab      	subs	r3, r5, r6
 8003fa4:	9305      	str	r3, [sp, #20]
 8003fa6:	42b5      	cmp	r5, r6
 8003fa8:	d00b      	beq.n	8003fc2 <_svfiprintf_r+0x72>
 8003faa:	0032      	movs	r2, r6
 8003fac:	0039      	movs	r1, r7
 8003fae:	9803      	ldr	r0, [sp, #12]
 8003fb0:	f7ff ff6e 	bl	8003e90 <__ssputs_r>
 8003fb4:	3001      	adds	r0, #1
 8003fb6:	d100      	bne.n	8003fba <_svfiprintf_r+0x6a>
 8003fb8:	e0ae      	b.n	8004118 <_svfiprintf_r+0x1c8>
 8003fba:	6963      	ldr	r3, [r4, #20]
 8003fbc:	9a05      	ldr	r2, [sp, #20]
 8003fbe:	189b      	adds	r3, r3, r2
 8003fc0:	6163      	str	r3, [r4, #20]
 8003fc2:	782b      	ldrb	r3, [r5, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d100      	bne.n	8003fca <_svfiprintf_r+0x7a>
 8003fc8:	e0a6      	b.n	8004118 <_svfiprintf_r+0x1c8>
 8003fca:	2201      	movs	r2, #1
 8003fcc:	2300      	movs	r3, #0
 8003fce:	4252      	negs	r2, r2
 8003fd0:	6062      	str	r2, [r4, #4]
 8003fd2:	a904      	add	r1, sp, #16
 8003fd4:	3254      	adds	r2, #84	@ 0x54
 8003fd6:	1852      	adds	r2, r2, r1
 8003fd8:	1c6e      	adds	r6, r5, #1
 8003fda:	6023      	str	r3, [r4, #0]
 8003fdc:	60e3      	str	r3, [r4, #12]
 8003fde:	60a3      	str	r3, [r4, #8]
 8003fe0:	7013      	strb	r3, [r2, #0]
 8003fe2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003fe4:	4b54      	ldr	r3, [pc, #336]	@ (8004138 <_svfiprintf_r+0x1e8>)
 8003fe6:	2205      	movs	r2, #5
 8003fe8:	0018      	movs	r0, r3
 8003fea:	7831      	ldrb	r1, [r6, #0]
 8003fec:	9305      	str	r3, [sp, #20]
 8003fee:	f000 fa4d 	bl	800448c <memchr>
 8003ff2:	1c75      	adds	r5, r6, #1
 8003ff4:	2800      	cmp	r0, #0
 8003ff6:	d11f      	bne.n	8004038 <_svfiprintf_r+0xe8>
 8003ff8:	6822      	ldr	r2, [r4, #0]
 8003ffa:	06d3      	lsls	r3, r2, #27
 8003ffc:	d504      	bpl.n	8004008 <_svfiprintf_r+0xb8>
 8003ffe:	2353      	movs	r3, #83	@ 0x53
 8004000:	a904      	add	r1, sp, #16
 8004002:	185b      	adds	r3, r3, r1
 8004004:	2120      	movs	r1, #32
 8004006:	7019      	strb	r1, [r3, #0]
 8004008:	0713      	lsls	r3, r2, #28
 800400a:	d504      	bpl.n	8004016 <_svfiprintf_r+0xc6>
 800400c:	2353      	movs	r3, #83	@ 0x53
 800400e:	a904      	add	r1, sp, #16
 8004010:	185b      	adds	r3, r3, r1
 8004012:	212b      	movs	r1, #43	@ 0x2b
 8004014:	7019      	strb	r1, [r3, #0]
 8004016:	7833      	ldrb	r3, [r6, #0]
 8004018:	2b2a      	cmp	r3, #42	@ 0x2a
 800401a:	d016      	beq.n	800404a <_svfiprintf_r+0xfa>
 800401c:	0035      	movs	r5, r6
 800401e:	2100      	movs	r1, #0
 8004020:	200a      	movs	r0, #10
 8004022:	68e3      	ldr	r3, [r4, #12]
 8004024:	782a      	ldrb	r2, [r5, #0]
 8004026:	1c6e      	adds	r6, r5, #1
 8004028:	3a30      	subs	r2, #48	@ 0x30
 800402a:	2a09      	cmp	r2, #9
 800402c:	d950      	bls.n	80040d0 <_svfiprintf_r+0x180>
 800402e:	2900      	cmp	r1, #0
 8004030:	d111      	bne.n	8004056 <_svfiprintf_r+0x106>
 8004032:	e017      	b.n	8004064 <_svfiprintf_r+0x114>
 8004034:	3501      	adds	r5, #1
 8004036:	e7af      	b.n	8003f98 <_svfiprintf_r+0x48>
 8004038:	9b05      	ldr	r3, [sp, #20]
 800403a:	6822      	ldr	r2, [r4, #0]
 800403c:	1ac0      	subs	r0, r0, r3
 800403e:	2301      	movs	r3, #1
 8004040:	4083      	lsls	r3, r0
 8004042:	4313      	orrs	r3, r2
 8004044:	002e      	movs	r6, r5
 8004046:	6023      	str	r3, [r4, #0]
 8004048:	e7cc      	b.n	8003fe4 <_svfiprintf_r+0x94>
 800404a:	9b07      	ldr	r3, [sp, #28]
 800404c:	1d19      	adds	r1, r3, #4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	9107      	str	r1, [sp, #28]
 8004052:	2b00      	cmp	r3, #0
 8004054:	db01      	blt.n	800405a <_svfiprintf_r+0x10a>
 8004056:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004058:	e004      	b.n	8004064 <_svfiprintf_r+0x114>
 800405a:	425b      	negs	r3, r3
 800405c:	60e3      	str	r3, [r4, #12]
 800405e:	2302      	movs	r3, #2
 8004060:	4313      	orrs	r3, r2
 8004062:	6023      	str	r3, [r4, #0]
 8004064:	782b      	ldrb	r3, [r5, #0]
 8004066:	2b2e      	cmp	r3, #46	@ 0x2e
 8004068:	d10c      	bne.n	8004084 <_svfiprintf_r+0x134>
 800406a:	786b      	ldrb	r3, [r5, #1]
 800406c:	2b2a      	cmp	r3, #42	@ 0x2a
 800406e:	d134      	bne.n	80040da <_svfiprintf_r+0x18a>
 8004070:	9b07      	ldr	r3, [sp, #28]
 8004072:	3502      	adds	r5, #2
 8004074:	1d1a      	adds	r2, r3, #4
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	9207      	str	r2, [sp, #28]
 800407a:	2b00      	cmp	r3, #0
 800407c:	da01      	bge.n	8004082 <_svfiprintf_r+0x132>
 800407e:	2301      	movs	r3, #1
 8004080:	425b      	negs	r3, r3
 8004082:	9309      	str	r3, [sp, #36]	@ 0x24
 8004084:	4e2d      	ldr	r6, [pc, #180]	@ (800413c <_svfiprintf_r+0x1ec>)
 8004086:	2203      	movs	r2, #3
 8004088:	0030      	movs	r0, r6
 800408a:	7829      	ldrb	r1, [r5, #0]
 800408c:	f000 f9fe 	bl	800448c <memchr>
 8004090:	2800      	cmp	r0, #0
 8004092:	d006      	beq.n	80040a2 <_svfiprintf_r+0x152>
 8004094:	2340      	movs	r3, #64	@ 0x40
 8004096:	1b80      	subs	r0, r0, r6
 8004098:	4083      	lsls	r3, r0
 800409a:	6822      	ldr	r2, [r4, #0]
 800409c:	3501      	adds	r5, #1
 800409e:	4313      	orrs	r3, r2
 80040a0:	6023      	str	r3, [r4, #0]
 80040a2:	7829      	ldrb	r1, [r5, #0]
 80040a4:	2206      	movs	r2, #6
 80040a6:	4826      	ldr	r0, [pc, #152]	@ (8004140 <_svfiprintf_r+0x1f0>)
 80040a8:	1c6e      	adds	r6, r5, #1
 80040aa:	7621      	strb	r1, [r4, #24]
 80040ac:	f000 f9ee 	bl	800448c <memchr>
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d038      	beq.n	8004126 <_svfiprintf_r+0x1d6>
 80040b4:	4b23      	ldr	r3, [pc, #140]	@ (8004144 <_svfiprintf_r+0x1f4>)
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d122      	bne.n	8004100 <_svfiprintf_r+0x1b0>
 80040ba:	2207      	movs	r2, #7
 80040bc:	9b07      	ldr	r3, [sp, #28]
 80040be:	3307      	adds	r3, #7
 80040c0:	4393      	bics	r3, r2
 80040c2:	3308      	adds	r3, #8
 80040c4:	9307      	str	r3, [sp, #28]
 80040c6:	6963      	ldr	r3, [r4, #20]
 80040c8:	9a04      	ldr	r2, [sp, #16]
 80040ca:	189b      	adds	r3, r3, r2
 80040cc:	6163      	str	r3, [r4, #20]
 80040ce:	e762      	b.n	8003f96 <_svfiprintf_r+0x46>
 80040d0:	4343      	muls	r3, r0
 80040d2:	0035      	movs	r5, r6
 80040d4:	2101      	movs	r1, #1
 80040d6:	189b      	adds	r3, r3, r2
 80040d8:	e7a4      	b.n	8004024 <_svfiprintf_r+0xd4>
 80040da:	2300      	movs	r3, #0
 80040dc:	200a      	movs	r0, #10
 80040de:	0019      	movs	r1, r3
 80040e0:	3501      	adds	r5, #1
 80040e2:	6063      	str	r3, [r4, #4]
 80040e4:	782a      	ldrb	r2, [r5, #0]
 80040e6:	1c6e      	adds	r6, r5, #1
 80040e8:	3a30      	subs	r2, #48	@ 0x30
 80040ea:	2a09      	cmp	r2, #9
 80040ec:	d903      	bls.n	80040f6 <_svfiprintf_r+0x1a6>
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0c8      	beq.n	8004084 <_svfiprintf_r+0x134>
 80040f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80040f4:	e7c6      	b.n	8004084 <_svfiprintf_r+0x134>
 80040f6:	4341      	muls	r1, r0
 80040f8:	0035      	movs	r5, r6
 80040fa:	2301      	movs	r3, #1
 80040fc:	1889      	adds	r1, r1, r2
 80040fe:	e7f1      	b.n	80040e4 <_svfiprintf_r+0x194>
 8004100:	aa07      	add	r2, sp, #28
 8004102:	9200      	str	r2, [sp, #0]
 8004104:	0021      	movs	r1, r4
 8004106:	003a      	movs	r2, r7
 8004108:	4b0f      	ldr	r3, [pc, #60]	@ (8004148 <_svfiprintf_r+0x1f8>)
 800410a:	9803      	ldr	r0, [sp, #12]
 800410c:	e000      	b.n	8004110 <_svfiprintf_r+0x1c0>
 800410e:	bf00      	nop
 8004110:	9004      	str	r0, [sp, #16]
 8004112:	9b04      	ldr	r3, [sp, #16]
 8004114:	3301      	adds	r3, #1
 8004116:	d1d6      	bne.n	80040c6 <_svfiprintf_r+0x176>
 8004118:	89bb      	ldrh	r3, [r7, #12]
 800411a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800411c:	065b      	lsls	r3, r3, #25
 800411e:	d500      	bpl.n	8004122 <_svfiprintf_r+0x1d2>
 8004120:	e72c      	b.n	8003f7c <_svfiprintf_r+0x2c>
 8004122:	b021      	add	sp, #132	@ 0x84
 8004124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004126:	aa07      	add	r2, sp, #28
 8004128:	9200      	str	r2, [sp, #0]
 800412a:	0021      	movs	r1, r4
 800412c:	003a      	movs	r2, r7
 800412e:	4b06      	ldr	r3, [pc, #24]	@ (8004148 <_svfiprintf_r+0x1f8>)
 8004130:	9803      	ldr	r0, [sp, #12]
 8004132:	f000 f87b 	bl	800422c <_printf_i>
 8004136:	e7eb      	b.n	8004110 <_svfiprintf_r+0x1c0>
 8004138:	080047dc 	.word	0x080047dc
 800413c:	080047e2 	.word	0x080047e2
 8004140:	080047e6 	.word	0x080047e6
 8004144:	00000000 	.word	0x00000000
 8004148:	08003e91 	.word	0x08003e91

0800414c <_printf_common>:
 800414c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800414e:	0016      	movs	r6, r2
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	688a      	ldr	r2, [r1, #8]
 8004154:	690b      	ldr	r3, [r1, #16]
 8004156:	000c      	movs	r4, r1
 8004158:	9000      	str	r0, [sp, #0]
 800415a:	4293      	cmp	r3, r2
 800415c:	da00      	bge.n	8004160 <_printf_common+0x14>
 800415e:	0013      	movs	r3, r2
 8004160:	0022      	movs	r2, r4
 8004162:	6033      	str	r3, [r6, #0]
 8004164:	3243      	adds	r2, #67	@ 0x43
 8004166:	7812      	ldrb	r2, [r2, #0]
 8004168:	2a00      	cmp	r2, #0
 800416a:	d001      	beq.n	8004170 <_printf_common+0x24>
 800416c:	3301      	adds	r3, #1
 800416e:	6033      	str	r3, [r6, #0]
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	069b      	lsls	r3, r3, #26
 8004174:	d502      	bpl.n	800417c <_printf_common+0x30>
 8004176:	6833      	ldr	r3, [r6, #0]
 8004178:	3302      	adds	r3, #2
 800417a:	6033      	str	r3, [r6, #0]
 800417c:	6822      	ldr	r2, [r4, #0]
 800417e:	2306      	movs	r3, #6
 8004180:	0015      	movs	r5, r2
 8004182:	401d      	ands	r5, r3
 8004184:	421a      	tst	r2, r3
 8004186:	d027      	beq.n	80041d8 <_printf_common+0x8c>
 8004188:	0023      	movs	r3, r4
 800418a:	3343      	adds	r3, #67	@ 0x43
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	1e5a      	subs	r2, r3, #1
 8004190:	4193      	sbcs	r3, r2
 8004192:	6822      	ldr	r2, [r4, #0]
 8004194:	0692      	lsls	r2, r2, #26
 8004196:	d430      	bmi.n	80041fa <_printf_common+0xae>
 8004198:	0022      	movs	r2, r4
 800419a:	9901      	ldr	r1, [sp, #4]
 800419c:	9800      	ldr	r0, [sp, #0]
 800419e:	9d08      	ldr	r5, [sp, #32]
 80041a0:	3243      	adds	r2, #67	@ 0x43
 80041a2:	47a8      	blx	r5
 80041a4:	3001      	adds	r0, #1
 80041a6:	d025      	beq.n	80041f4 <_printf_common+0xa8>
 80041a8:	2206      	movs	r2, #6
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	2500      	movs	r5, #0
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d105      	bne.n	80041c0 <_printf_common+0x74>
 80041b4:	6833      	ldr	r3, [r6, #0]
 80041b6:	68e5      	ldr	r5, [r4, #12]
 80041b8:	1aed      	subs	r5, r5, r3
 80041ba:	43eb      	mvns	r3, r5
 80041bc:	17db      	asrs	r3, r3, #31
 80041be:	401d      	ands	r5, r3
 80041c0:	68a3      	ldr	r3, [r4, #8]
 80041c2:	6922      	ldr	r2, [r4, #16]
 80041c4:	4293      	cmp	r3, r2
 80041c6:	dd01      	ble.n	80041cc <_printf_common+0x80>
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	18ed      	adds	r5, r5, r3
 80041cc:	2600      	movs	r6, #0
 80041ce:	42b5      	cmp	r5, r6
 80041d0:	d120      	bne.n	8004214 <_printf_common+0xc8>
 80041d2:	2000      	movs	r0, #0
 80041d4:	e010      	b.n	80041f8 <_printf_common+0xac>
 80041d6:	3501      	adds	r5, #1
 80041d8:	68e3      	ldr	r3, [r4, #12]
 80041da:	6832      	ldr	r2, [r6, #0]
 80041dc:	1a9b      	subs	r3, r3, r2
 80041de:	42ab      	cmp	r3, r5
 80041e0:	ddd2      	ble.n	8004188 <_printf_common+0x3c>
 80041e2:	0022      	movs	r2, r4
 80041e4:	2301      	movs	r3, #1
 80041e6:	9901      	ldr	r1, [sp, #4]
 80041e8:	9800      	ldr	r0, [sp, #0]
 80041ea:	9f08      	ldr	r7, [sp, #32]
 80041ec:	3219      	adds	r2, #25
 80041ee:	47b8      	blx	r7
 80041f0:	3001      	adds	r0, #1
 80041f2:	d1f0      	bne.n	80041d6 <_printf_common+0x8a>
 80041f4:	2001      	movs	r0, #1
 80041f6:	4240      	negs	r0, r0
 80041f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80041fa:	2030      	movs	r0, #48	@ 0x30
 80041fc:	18e1      	adds	r1, r4, r3
 80041fe:	3143      	adds	r1, #67	@ 0x43
 8004200:	7008      	strb	r0, [r1, #0]
 8004202:	0021      	movs	r1, r4
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	3145      	adds	r1, #69	@ 0x45
 8004208:	7809      	ldrb	r1, [r1, #0]
 800420a:	18a2      	adds	r2, r4, r2
 800420c:	3243      	adds	r2, #67	@ 0x43
 800420e:	3302      	adds	r3, #2
 8004210:	7011      	strb	r1, [r2, #0]
 8004212:	e7c1      	b.n	8004198 <_printf_common+0x4c>
 8004214:	0022      	movs	r2, r4
 8004216:	2301      	movs	r3, #1
 8004218:	9901      	ldr	r1, [sp, #4]
 800421a:	9800      	ldr	r0, [sp, #0]
 800421c:	9f08      	ldr	r7, [sp, #32]
 800421e:	321a      	adds	r2, #26
 8004220:	47b8      	blx	r7
 8004222:	3001      	adds	r0, #1
 8004224:	d0e6      	beq.n	80041f4 <_printf_common+0xa8>
 8004226:	3601      	adds	r6, #1
 8004228:	e7d1      	b.n	80041ce <_printf_common+0x82>
	...

0800422c <_printf_i>:
 800422c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800422e:	b08b      	sub	sp, #44	@ 0x2c
 8004230:	9206      	str	r2, [sp, #24]
 8004232:	000a      	movs	r2, r1
 8004234:	3243      	adds	r2, #67	@ 0x43
 8004236:	9307      	str	r3, [sp, #28]
 8004238:	9005      	str	r0, [sp, #20]
 800423a:	9203      	str	r2, [sp, #12]
 800423c:	7e0a      	ldrb	r2, [r1, #24]
 800423e:	000c      	movs	r4, r1
 8004240:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004242:	2a78      	cmp	r2, #120	@ 0x78
 8004244:	d809      	bhi.n	800425a <_printf_i+0x2e>
 8004246:	2a62      	cmp	r2, #98	@ 0x62
 8004248:	d80b      	bhi.n	8004262 <_printf_i+0x36>
 800424a:	2a00      	cmp	r2, #0
 800424c:	d100      	bne.n	8004250 <_printf_i+0x24>
 800424e:	e0ba      	b.n	80043c6 <_printf_i+0x19a>
 8004250:	497a      	ldr	r1, [pc, #488]	@ (800443c <_printf_i+0x210>)
 8004252:	9104      	str	r1, [sp, #16]
 8004254:	2a58      	cmp	r2, #88	@ 0x58
 8004256:	d100      	bne.n	800425a <_printf_i+0x2e>
 8004258:	e08e      	b.n	8004378 <_printf_i+0x14c>
 800425a:	0025      	movs	r5, r4
 800425c:	3542      	adds	r5, #66	@ 0x42
 800425e:	702a      	strb	r2, [r5, #0]
 8004260:	e022      	b.n	80042a8 <_printf_i+0x7c>
 8004262:	0010      	movs	r0, r2
 8004264:	3863      	subs	r0, #99	@ 0x63
 8004266:	2815      	cmp	r0, #21
 8004268:	d8f7      	bhi.n	800425a <_printf_i+0x2e>
 800426a:	f7fb ff55 	bl	8000118 <__gnu_thumb1_case_shi>
 800426e:	0016      	.short	0x0016
 8004270:	fff6001f 	.word	0xfff6001f
 8004274:	fff6fff6 	.word	0xfff6fff6
 8004278:	001ffff6 	.word	0x001ffff6
 800427c:	fff6fff6 	.word	0xfff6fff6
 8004280:	fff6fff6 	.word	0xfff6fff6
 8004284:	0036009f 	.word	0x0036009f
 8004288:	fff6007e 	.word	0xfff6007e
 800428c:	00b0fff6 	.word	0x00b0fff6
 8004290:	0036fff6 	.word	0x0036fff6
 8004294:	fff6fff6 	.word	0xfff6fff6
 8004298:	0082      	.short	0x0082
 800429a:	0025      	movs	r5, r4
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	3542      	adds	r5, #66	@ 0x42
 80042a0:	1d11      	adds	r1, r2, #4
 80042a2:	6019      	str	r1, [r3, #0]
 80042a4:	6813      	ldr	r3, [r2, #0]
 80042a6:	702b      	strb	r3, [r5, #0]
 80042a8:	2301      	movs	r3, #1
 80042aa:	e09e      	b.n	80043ea <_printf_i+0x1be>
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	6809      	ldr	r1, [r1, #0]
 80042b0:	1d02      	adds	r2, r0, #4
 80042b2:	060d      	lsls	r5, r1, #24
 80042b4:	d50b      	bpl.n	80042ce <_printf_i+0xa2>
 80042b6:	6806      	ldr	r6, [r0, #0]
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	2e00      	cmp	r6, #0
 80042bc:	da03      	bge.n	80042c6 <_printf_i+0x9a>
 80042be:	232d      	movs	r3, #45	@ 0x2d
 80042c0:	9a03      	ldr	r2, [sp, #12]
 80042c2:	4276      	negs	r6, r6
 80042c4:	7013      	strb	r3, [r2, #0]
 80042c6:	4b5d      	ldr	r3, [pc, #372]	@ (800443c <_printf_i+0x210>)
 80042c8:	270a      	movs	r7, #10
 80042ca:	9304      	str	r3, [sp, #16]
 80042cc:	e018      	b.n	8004300 <_printf_i+0xd4>
 80042ce:	6806      	ldr	r6, [r0, #0]
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	0649      	lsls	r1, r1, #25
 80042d4:	d5f1      	bpl.n	80042ba <_printf_i+0x8e>
 80042d6:	b236      	sxth	r6, r6
 80042d8:	e7ef      	b.n	80042ba <_printf_i+0x8e>
 80042da:	6808      	ldr	r0, [r1, #0]
 80042dc:	6819      	ldr	r1, [r3, #0]
 80042de:	c940      	ldmia	r1!, {r6}
 80042e0:	0605      	lsls	r5, r0, #24
 80042e2:	d402      	bmi.n	80042ea <_printf_i+0xbe>
 80042e4:	0640      	lsls	r0, r0, #25
 80042e6:	d500      	bpl.n	80042ea <_printf_i+0xbe>
 80042e8:	b2b6      	uxth	r6, r6
 80042ea:	6019      	str	r1, [r3, #0]
 80042ec:	4b53      	ldr	r3, [pc, #332]	@ (800443c <_printf_i+0x210>)
 80042ee:	270a      	movs	r7, #10
 80042f0:	9304      	str	r3, [sp, #16]
 80042f2:	2a6f      	cmp	r2, #111	@ 0x6f
 80042f4:	d100      	bne.n	80042f8 <_printf_i+0xcc>
 80042f6:	3f02      	subs	r7, #2
 80042f8:	0023      	movs	r3, r4
 80042fa:	2200      	movs	r2, #0
 80042fc:	3343      	adds	r3, #67	@ 0x43
 80042fe:	701a      	strb	r2, [r3, #0]
 8004300:	6863      	ldr	r3, [r4, #4]
 8004302:	60a3      	str	r3, [r4, #8]
 8004304:	2b00      	cmp	r3, #0
 8004306:	db06      	blt.n	8004316 <_printf_i+0xea>
 8004308:	2104      	movs	r1, #4
 800430a:	6822      	ldr	r2, [r4, #0]
 800430c:	9d03      	ldr	r5, [sp, #12]
 800430e:	438a      	bics	r2, r1
 8004310:	6022      	str	r2, [r4, #0]
 8004312:	4333      	orrs	r3, r6
 8004314:	d00c      	beq.n	8004330 <_printf_i+0x104>
 8004316:	9d03      	ldr	r5, [sp, #12]
 8004318:	0030      	movs	r0, r6
 800431a:	0039      	movs	r1, r7
 800431c:	f7fb ff8c 	bl	8000238 <__aeabi_uidivmod>
 8004320:	9b04      	ldr	r3, [sp, #16]
 8004322:	3d01      	subs	r5, #1
 8004324:	5c5b      	ldrb	r3, [r3, r1]
 8004326:	702b      	strb	r3, [r5, #0]
 8004328:	0033      	movs	r3, r6
 800432a:	0006      	movs	r6, r0
 800432c:	429f      	cmp	r7, r3
 800432e:	d9f3      	bls.n	8004318 <_printf_i+0xec>
 8004330:	2f08      	cmp	r7, #8
 8004332:	d109      	bne.n	8004348 <_printf_i+0x11c>
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	07db      	lsls	r3, r3, #31
 8004338:	d506      	bpl.n	8004348 <_printf_i+0x11c>
 800433a:	6862      	ldr	r2, [r4, #4]
 800433c:	6923      	ldr	r3, [r4, #16]
 800433e:	429a      	cmp	r2, r3
 8004340:	dc02      	bgt.n	8004348 <_printf_i+0x11c>
 8004342:	2330      	movs	r3, #48	@ 0x30
 8004344:	3d01      	subs	r5, #1
 8004346:	702b      	strb	r3, [r5, #0]
 8004348:	9b03      	ldr	r3, [sp, #12]
 800434a:	1b5b      	subs	r3, r3, r5
 800434c:	6123      	str	r3, [r4, #16]
 800434e:	9b07      	ldr	r3, [sp, #28]
 8004350:	0021      	movs	r1, r4
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	9805      	ldr	r0, [sp, #20]
 8004356:	9b06      	ldr	r3, [sp, #24]
 8004358:	aa09      	add	r2, sp, #36	@ 0x24
 800435a:	f7ff fef7 	bl	800414c <_printf_common>
 800435e:	3001      	adds	r0, #1
 8004360:	d148      	bne.n	80043f4 <_printf_i+0x1c8>
 8004362:	2001      	movs	r0, #1
 8004364:	4240      	negs	r0, r0
 8004366:	b00b      	add	sp, #44	@ 0x2c
 8004368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800436a:	2220      	movs	r2, #32
 800436c:	6809      	ldr	r1, [r1, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	6022      	str	r2, [r4, #0]
 8004372:	2278      	movs	r2, #120	@ 0x78
 8004374:	4932      	ldr	r1, [pc, #200]	@ (8004440 <_printf_i+0x214>)
 8004376:	9104      	str	r1, [sp, #16]
 8004378:	0021      	movs	r1, r4
 800437a:	3145      	adds	r1, #69	@ 0x45
 800437c:	700a      	strb	r2, [r1, #0]
 800437e:	6819      	ldr	r1, [r3, #0]
 8004380:	6822      	ldr	r2, [r4, #0]
 8004382:	c940      	ldmia	r1!, {r6}
 8004384:	0610      	lsls	r0, r2, #24
 8004386:	d402      	bmi.n	800438e <_printf_i+0x162>
 8004388:	0650      	lsls	r0, r2, #25
 800438a:	d500      	bpl.n	800438e <_printf_i+0x162>
 800438c:	b2b6      	uxth	r6, r6
 800438e:	6019      	str	r1, [r3, #0]
 8004390:	07d3      	lsls	r3, r2, #31
 8004392:	d502      	bpl.n	800439a <_printf_i+0x16e>
 8004394:	2320      	movs	r3, #32
 8004396:	4313      	orrs	r3, r2
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	2e00      	cmp	r6, #0
 800439c:	d001      	beq.n	80043a2 <_printf_i+0x176>
 800439e:	2710      	movs	r7, #16
 80043a0:	e7aa      	b.n	80042f8 <_printf_i+0xcc>
 80043a2:	2220      	movs	r2, #32
 80043a4:	6823      	ldr	r3, [r4, #0]
 80043a6:	4393      	bics	r3, r2
 80043a8:	6023      	str	r3, [r4, #0]
 80043aa:	e7f8      	b.n	800439e <_printf_i+0x172>
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	680d      	ldr	r5, [r1, #0]
 80043b0:	1d10      	adds	r0, r2, #4
 80043b2:	6949      	ldr	r1, [r1, #20]
 80043b4:	6018      	str	r0, [r3, #0]
 80043b6:	6813      	ldr	r3, [r2, #0]
 80043b8:	062e      	lsls	r6, r5, #24
 80043ba:	d501      	bpl.n	80043c0 <_printf_i+0x194>
 80043bc:	6019      	str	r1, [r3, #0]
 80043be:	e002      	b.n	80043c6 <_printf_i+0x19a>
 80043c0:	066d      	lsls	r5, r5, #25
 80043c2:	d5fb      	bpl.n	80043bc <_printf_i+0x190>
 80043c4:	8019      	strh	r1, [r3, #0]
 80043c6:	2300      	movs	r3, #0
 80043c8:	9d03      	ldr	r5, [sp, #12]
 80043ca:	6123      	str	r3, [r4, #16]
 80043cc:	e7bf      	b.n	800434e <_printf_i+0x122>
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	1d11      	adds	r1, r2, #4
 80043d2:	6019      	str	r1, [r3, #0]
 80043d4:	6815      	ldr	r5, [r2, #0]
 80043d6:	2100      	movs	r1, #0
 80043d8:	0028      	movs	r0, r5
 80043da:	6862      	ldr	r2, [r4, #4]
 80043dc:	f000 f856 	bl	800448c <memchr>
 80043e0:	2800      	cmp	r0, #0
 80043e2:	d001      	beq.n	80043e8 <_printf_i+0x1bc>
 80043e4:	1b40      	subs	r0, r0, r5
 80043e6:	6060      	str	r0, [r4, #4]
 80043e8:	6863      	ldr	r3, [r4, #4]
 80043ea:	6123      	str	r3, [r4, #16]
 80043ec:	2300      	movs	r3, #0
 80043ee:	9a03      	ldr	r2, [sp, #12]
 80043f0:	7013      	strb	r3, [r2, #0]
 80043f2:	e7ac      	b.n	800434e <_printf_i+0x122>
 80043f4:	002a      	movs	r2, r5
 80043f6:	6923      	ldr	r3, [r4, #16]
 80043f8:	9906      	ldr	r1, [sp, #24]
 80043fa:	9805      	ldr	r0, [sp, #20]
 80043fc:	9d07      	ldr	r5, [sp, #28]
 80043fe:	47a8      	blx	r5
 8004400:	3001      	adds	r0, #1
 8004402:	d0ae      	beq.n	8004362 <_printf_i+0x136>
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	079b      	lsls	r3, r3, #30
 8004408:	d415      	bmi.n	8004436 <_printf_i+0x20a>
 800440a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800440c:	68e0      	ldr	r0, [r4, #12]
 800440e:	4298      	cmp	r0, r3
 8004410:	daa9      	bge.n	8004366 <_printf_i+0x13a>
 8004412:	0018      	movs	r0, r3
 8004414:	e7a7      	b.n	8004366 <_printf_i+0x13a>
 8004416:	0022      	movs	r2, r4
 8004418:	2301      	movs	r3, #1
 800441a:	9906      	ldr	r1, [sp, #24]
 800441c:	9805      	ldr	r0, [sp, #20]
 800441e:	9e07      	ldr	r6, [sp, #28]
 8004420:	3219      	adds	r2, #25
 8004422:	47b0      	blx	r6
 8004424:	3001      	adds	r0, #1
 8004426:	d09c      	beq.n	8004362 <_printf_i+0x136>
 8004428:	3501      	adds	r5, #1
 800442a:	68e3      	ldr	r3, [r4, #12]
 800442c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	42ab      	cmp	r3, r5
 8004432:	dcf0      	bgt.n	8004416 <_printf_i+0x1ea>
 8004434:	e7e9      	b.n	800440a <_printf_i+0x1de>
 8004436:	2500      	movs	r5, #0
 8004438:	e7f7      	b.n	800442a <_printf_i+0x1fe>
 800443a:	46c0      	nop			@ (mov r8, r8)
 800443c:	080047ed 	.word	0x080047ed
 8004440:	080047fe 	.word	0x080047fe

08004444 <memmove>:
 8004444:	b510      	push	{r4, lr}
 8004446:	4288      	cmp	r0, r1
 8004448:	d902      	bls.n	8004450 <memmove+0xc>
 800444a:	188b      	adds	r3, r1, r2
 800444c:	4298      	cmp	r0, r3
 800444e:	d308      	bcc.n	8004462 <memmove+0x1e>
 8004450:	2300      	movs	r3, #0
 8004452:	429a      	cmp	r2, r3
 8004454:	d007      	beq.n	8004466 <memmove+0x22>
 8004456:	5ccc      	ldrb	r4, [r1, r3]
 8004458:	54c4      	strb	r4, [r0, r3]
 800445a:	3301      	adds	r3, #1
 800445c:	e7f9      	b.n	8004452 <memmove+0xe>
 800445e:	5c8b      	ldrb	r3, [r1, r2]
 8004460:	5483      	strb	r3, [r0, r2]
 8004462:	3a01      	subs	r2, #1
 8004464:	d2fb      	bcs.n	800445e <memmove+0x1a>
 8004466:	bd10      	pop	{r4, pc}

08004468 <_sbrk_r>:
 8004468:	2300      	movs	r3, #0
 800446a:	b570      	push	{r4, r5, r6, lr}
 800446c:	4d06      	ldr	r5, [pc, #24]	@ (8004488 <_sbrk_r+0x20>)
 800446e:	0004      	movs	r4, r0
 8004470:	0008      	movs	r0, r1
 8004472:	602b      	str	r3, [r5, #0]
 8004474:	f7fc fc6a 	bl	8000d4c <_sbrk>
 8004478:	1c43      	adds	r3, r0, #1
 800447a:	d103      	bne.n	8004484 <_sbrk_r+0x1c>
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d000      	beq.n	8004484 <_sbrk_r+0x1c>
 8004482:	6023      	str	r3, [r4, #0]
 8004484:	bd70      	pop	{r4, r5, r6, pc}
 8004486:	46c0      	nop			@ (mov r8, r8)
 8004488:	20000340 	.word	0x20000340

0800448c <memchr>:
 800448c:	b2c9      	uxtb	r1, r1
 800448e:	1882      	adds	r2, r0, r2
 8004490:	4290      	cmp	r0, r2
 8004492:	d101      	bne.n	8004498 <memchr+0xc>
 8004494:	2000      	movs	r0, #0
 8004496:	4770      	bx	lr
 8004498:	7803      	ldrb	r3, [r0, #0]
 800449a:	428b      	cmp	r3, r1
 800449c:	d0fb      	beq.n	8004496 <memchr+0xa>
 800449e:	3001      	adds	r0, #1
 80044a0:	e7f6      	b.n	8004490 <memchr+0x4>

080044a2 <memcpy>:
 80044a2:	2300      	movs	r3, #0
 80044a4:	b510      	push	{r4, lr}
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d100      	bne.n	80044ac <memcpy+0xa>
 80044aa:	bd10      	pop	{r4, pc}
 80044ac:	5ccc      	ldrb	r4, [r1, r3]
 80044ae:	54c4      	strb	r4, [r0, r3]
 80044b0:	3301      	adds	r3, #1
 80044b2:	e7f8      	b.n	80044a6 <memcpy+0x4>

080044b4 <_realloc_r>:
 80044b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044b6:	0006      	movs	r6, r0
 80044b8:	000c      	movs	r4, r1
 80044ba:	0015      	movs	r5, r2
 80044bc:	2900      	cmp	r1, #0
 80044be:	d105      	bne.n	80044cc <_realloc_r+0x18>
 80044c0:	0011      	movs	r1, r2
 80044c2:	f7ff fc55 	bl	8003d70 <_malloc_r>
 80044c6:	0004      	movs	r4, r0
 80044c8:	0020      	movs	r0, r4
 80044ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044cc:	2a00      	cmp	r2, #0
 80044ce:	d103      	bne.n	80044d8 <_realloc_r+0x24>
 80044d0:	f7ff fbe2 	bl	8003c98 <_free_r>
 80044d4:	002c      	movs	r4, r5
 80044d6:	e7f7      	b.n	80044c8 <_realloc_r+0x14>
 80044d8:	f000 f81c 	bl	8004514 <_malloc_usable_size_r>
 80044dc:	0007      	movs	r7, r0
 80044de:	4285      	cmp	r5, r0
 80044e0:	d802      	bhi.n	80044e8 <_realloc_r+0x34>
 80044e2:	0843      	lsrs	r3, r0, #1
 80044e4:	42ab      	cmp	r3, r5
 80044e6:	d3ef      	bcc.n	80044c8 <_realloc_r+0x14>
 80044e8:	0029      	movs	r1, r5
 80044ea:	0030      	movs	r0, r6
 80044ec:	f7ff fc40 	bl	8003d70 <_malloc_r>
 80044f0:	9001      	str	r0, [sp, #4]
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d101      	bne.n	80044fa <_realloc_r+0x46>
 80044f6:	9c01      	ldr	r4, [sp, #4]
 80044f8:	e7e6      	b.n	80044c8 <_realloc_r+0x14>
 80044fa:	002a      	movs	r2, r5
 80044fc:	42bd      	cmp	r5, r7
 80044fe:	d900      	bls.n	8004502 <_realloc_r+0x4e>
 8004500:	003a      	movs	r2, r7
 8004502:	0021      	movs	r1, r4
 8004504:	9801      	ldr	r0, [sp, #4]
 8004506:	f7ff ffcc 	bl	80044a2 <memcpy>
 800450a:	0021      	movs	r1, r4
 800450c:	0030      	movs	r0, r6
 800450e:	f7ff fbc3 	bl	8003c98 <_free_r>
 8004512:	e7f0      	b.n	80044f6 <_realloc_r+0x42>

08004514 <_malloc_usable_size_r>:
 8004514:	1f0b      	subs	r3, r1, #4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	1f18      	subs	r0, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	da01      	bge.n	8004522 <_malloc_usable_size_r+0xe>
 800451e:	580b      	ldr	r3, [r1, r0]
 8004520:	18c0      	adds	r0, r0, r3
 8004522:	4770      	bx	lr

08004524 <_init>:
 8004524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004526:	46c0      	nop			@ (mov r8, r8)
 8004528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800452a:	bc08      	pop	{r3}
 800452c:	469e      	mov	lr, r3
 800452e:	4770      	bx	lr

08004530 <_fini>:
 8004530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004532:	46c0      	nop			@ (mov r8, r8)
 8004534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004536:	bc08      	pop	{r3}
 8004538:	469e      	mov	lr, r3
 800453a:	4770      	bx	lr
