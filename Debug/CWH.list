
CWH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f18  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08005fd8  08005fd8  00006fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006328  08006328  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006328  08006328  00007328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006330  08006330  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006330  08006330  00007330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006334  08006334  00007334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006338  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  2000005c  08006394  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  08006394  0000836c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011480  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cec  00000000  00000000  00019504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  0001c1f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c04  00000000  00000000  0001d180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d53  00000000  00000000  0001dd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013fe1  00000000  00000000  00034ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086cb8  00000000  00000000  00048ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf770  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c84  00000000  00000000  000cf7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d3438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005fc0 	.word	0x08005fc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005fc0 	.word	0x08005fc0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <ATC_SendReceive>:
#include "lorawan.h"
#include <string.h>
#include <stdio.h>

static int ATC_SendReceive(ATC_HandleTypeDef *lora, const char *command, uint32_t command_len, char *response, uint32_t response_size, uint32_t timeout_ms, const char *expected_response)
{
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b089      	sub	sp, #36	@ 0x24
 8000474:	af02      	add	r7, sp, #8
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
 800047c:	603b      	str	r3, [r7, #0]
    if (lora == NULL || lora->huart == NULL || command == NULL || command_len == 0) {
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d009      	beq.n	8000498 <ATC_SendReceive+0x28>
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d005      	beq.n	8000498 <ATC_SendReceive+0x28>
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <ATC_SendReceive+0x28>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d102      	bne.n	800049e <ATC_SendReceive+0x2e>
        return -1;
 8000498:	2301      	movs	r3, #1
 800049a:	425b      	negs	r3, r3
 800049c:	e054      	b.n	8000548 <ATC_SendReceive+0xd8>
    }

    HAL_StatusTypeDef status = HAL_UART_Transmit(lora->huart, (uint8_t *)command, command_len, timeout_ms);
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	6818      	ldr	r0, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	2517      	movs	r5, #23
 80004a8:	197c      	adds	r4, r7, r5
 80004aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004ac:	68b9      	ldr	r1, [r7, #8]
 80004ae:	f004 f9d7 	bl	8004860 <HAL_UART_Transmit>
 80004b2:	0003      	movs	r3, r0
 80004b4:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80004b6:	197b      	adds	r3, r7, r5
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d002      	beq.n	80004c4 <ATC_SendReceive+0x54>
        return -2;
 80004be:	2302      	movs	r3, #2
 80004c0:	425b      	negs	r3, r3
 80004c2:	e041      	b.n	8000548 <ATC_SendReceive+0xd8>
    }

    if (response != NULL && response_size > 0) {
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d02c      	beq.n	8000524 <ATC_SendReceive+0xb4>
 80004ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d029      	beq.n	8000524 <ATC_SendReceive+0xb4>
        uint16_t rx_len = 0;
 80004d0:	2514      	movs	r5, #20
 80004d2:	197b      	adds	r3, r7, r5
 80004d4:	2200      	movs	r2, #0
 80004d6:	801a      	strh	r2, [r3, #0]
        memset(response, 0, response_size);
 80004d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	2100      	movs	r1, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f005 f8de 	bl	80056a0 <memset>
        status = HAL_UARTEx_ReceiveToIdle(lora->huart, (uint8_t *)response, response_size - 1, &rx_len, timeout_ms);
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	6818      	ldr	r0, [r3, #0]
 80004e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	3b01      	subs	r3, #1
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	2617      	movs	r6, #23
 80004f2:	19bc      	adds	r4, r7, r6
 80004f4:	197d      	adds	r5, r7, r5
 80004f6:	6839      	ldr	r1, [r7, #0]
 80004f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	002b      	movs	r3, r5
 80004fe:	f004 ff1d 	bl	800533c <HAL_UARTEx_ReceiveToIdle>
 8000502:	0003      	movs	r3, r0
 8000504:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK) {
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d002      	beq.n	8000514 <ATC_SendReceive+0xa4>
            return -4;
 800050e:	2304      	movs	r3, #4
 8000510:	425b      	negs	r3, r3
 8000512:	e019      	b.n	8000548 <ATC_SendReceive+0xd8>
        }
        response[rx_len] = '\0';
 8000514:	2314      	movs	r3, #20
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	001a      	movs	r2, r3
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	189b      	adds	r3, r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
    }

    if (expected_response && response) {
 8000524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000526:	2b00      	cmp	r3, #0
 8000528:	d00d      	beq.n	8000546 <ATC_SendReceive+0xd6>
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00a      	beq.n	8000546 <ATC_SendReceive+0xd6>
        if (!strstr(response, expected_response)) {
 8000530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	0011      	movs	r1, r2
 8000536:	0018      	movs	r0, r3
 8000538:	f005 f8ba 	bl	80056b0 <strstr>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d102      	bne.n	8000546 <ATC_SendReceive+0xd6>
            return -3;
 8000540:	2303      	movs	r3, #3
 8000542:	425b      	negs	r3, r3
 8000544:	e000      	b.n	8000548 <ATC_SendReceive+0xd8>
        }
    }

    return 0;
 8000546:	2300      	movs	r3, #0
}
 8000548:	0018      	movs	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	b007      	add	sp, #28
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000550 <send_data_and_get_response>:

LoRaWAN_Error_t send_data_and_get_response(ATC_HandleTypeDef *lora, const char *data, char *response, uint32_t response_size, uint32_t timeout_ms, const char *expected_response)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b08b      	sub	sp, #44	@ 0x2c
 8000554:	af04      	add	r7, sp, #16
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
 800055c:	603b      	str	r3, [r7, #0]
    if (!lora || !lora->huart || !data || !response || response_size == 0) {
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00c      	beq.n	800057e <send_data_and_get_response+0x2e>
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d008      	beq.n	800057e <send_data_and_get_response+0x2e>
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <send_data_and_get_response+0x2e>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d002      	beq.n	800057e <send_data_and_get_response+0x2e>
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d102      	bne.n	8000584 <send_data_and_get_response+0x34>
        return LORAWAN_ERROR_INVALID_PARAM;
 800057e:	2301      	movs	r3, #1
 8000580:	425b      	negs	r3, r3
 8000582:	e03e      	b.n	8000602 <send_data_and_get_response+0xb2>
    }

    ATC_SendReceive(lora, "AT\r\n", 4, response, response_size, timeout_ms, expected_response);
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4921      	ldr	r1, [pc, #132]	@ (800060c <send_data_and_get_response+0xbc>)
 8000588:	68f8      	ldr	r0, [r7, #12]
 800058a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800058c:	9302      	str	r3, [sp, #8]
 800058e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	0013      	movs	r3, r2
 8000598:	2204      	movs	r2, #4
 800059a:	f7ff ff69 	bl	8000470 <ATC_SendReceive>
    HAL_Delay(300);
 800059e:	2396      	movs	r3, #150	@ 0x96
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 fa78 	bl	8001a98 <HAL_Delay>
    int result = ATC_SendReceive(lora, data, strlen(data), response, response_size, timeout_ms, expected_response);
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff fdac 	bl	8000108 <strlen>
 80005b0:	0004      	movs	r4, r0
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	68b9      	ldr	r1, [r7, #8]
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	0013      	movs	r3, r2
 80005c6:	0022      	movs	r2, r4
 80005c8:	f7ff ff52 	bl	8000470 <ATC_SendReceive>
 80005cc:	0003      	movs	r3, r0
 80005ce:	617b      	str	r3, [r7, #20]

    if (result == -1) {
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	3301      	adds	r3, #1
 80005d4:	d102      	bne.n	80005dc <send_data_and_get_response+0x8c>
        return LORAWAN_ERROR_INVALID_PARAM;
 80005d6:	2301      	movs	r3, #1
 80005d8:	425b      	negs	r3, r3
 80005da:	e012      	b.n	8000602 <send_data_and_get_response+0xb2>
    } else if (result == -2) {
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	3302      	adds	r3, #2
 80005e0:	d102      	bne.n	80005e8 <send_data_and_get_response+0x98>
        return LORAWAN_ERROR_COMMUNICATION;
 80005e2:	2302      	movs	r3, #2
 80005e4:	425b      	negs	r3, r3
 80005e6:	e00c      	b.n	8000602 <send_data_and_get_response+0xb2>
    } else if (result == -3) {
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3303      	adds	r3, #3
 80005ec:	d102      	bne.n	80005f4 <send_data_and_get_response+0xa4>
        return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 80005ee:	2303      	movs	r3, #3
 80005f0:	425b      	negs	r3, r3
 80005f2:	e006      	b.n	8000602 <send_data_and_get_response+0xb2>
    } else if (result == -4) {
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	3304      	adds	r3, #4
 80005f8:	d102      	bne.n	8000600 <send_data_and_get_response+0xb0>
        return LORAWAN_ERROR_TIMEOUT;
 80005fa:	2304      	movs	r3, #4
 80005fc:	425b      	negs	r3, r3
 80005fe:	e000      	b.n	8000602 <send_data_and_get_response+0xb2>
    }

    return LORAWAN_ERROR_OK;
 8000600:	2300      	movs	r3, #0
}
 8000602:	0018      	movs	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	b007      	add	sp, #28
 8000608:	bd90      	pop	{r4, r7, pc}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	08005fd8 	.word	0x08005fd8

08000610 <LoRaWAN_Join>:

LoRaWAN_Error_t LoRaWAN_Join(ATC_HandleTypeDef *lora)
{
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	b0c7      	sub	sp, #284	@ 0x11c
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]
    char response[256];
    LoRaWAN_Error_t status = send_data_and_get_response(lora, "AT+JOIN\r\n", response, sizeof(response), 10000, "OK");
 8000618:	2610      	movs	r6, #16
 800061a:	36ff      	adds	r6, #255	@ 0xff
 800061c:	19bc      	adds	r4, r7, r6
 800061e:	2380      	movs	r3, #128	@ 0x80
 8000620:	005d      	lsls	r5, r3, #1
 8000622:	230c      	movs	r3, #12
 8000624:	18fa      	adds	r2, r7, r3
 8000626:	4931      	ldr	r1, [pc, #196]	@ (80006ec <LoRaWAN_Join+0xdc>)
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	4b31      	ldr	r3, [pc, #196]	@ (80006f0 <LoRaWAN_Join+0xe0>)
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	4b31      	ldr	r3, [pc, #196]	@ (80006f4 <LoRaWAN_Join+0xe4>)
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	002b      	movs	r3, r5
 8000634:	f7ff ff8c 	bl	8000550 <send_data_and_get_response>
 8000638:	0003      	movs	r3, r0
 800063a:	7023      	strb	r3, [r4, #0]
    if (status != LORAWAN_ERROR_OK) {
 800063c:	19bb      	adds	r3, r7, r6
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b25b      	sxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d003      	beq.n	800064e <LoRaWAN_Join+0x3e>
        return status;
 8000646:	19bb      	adds	r3, r7, r6
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b25b      	sxtb	r3, r3
 800064c:	e049      	b.n	80006e2 <LoRaWAN_Join+0xd2>
    }

    memset(response, 0, sizeof(response));
 800064e:	2380      	movs	r3, #128	@ 0x80
 8000650:	005a      	lsls	r2, r3, #1
 8000652:	250c      	movs	r5, #12
 8000654:	197b      	adds	r3, r7, r5
 8000656:	2100      	movs	r1, #0
 8000658:	0018      	movs	r0, r3
 800065a:	f005 f821 	bl	80056a0 <memset>
    uint16_t rx_len = 0;
 800065e:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <LoRaWAN_Join+0xe8>)
 8000660:	2288      	movs	r2, #136	@ 0x88
 8000662:	0052      	lsls	r2, r2, #1
 8000664:	189b      	adds	r3, r3, r2
 8000666:	19db      	adds	r3, r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef hal_status = HAL_UARTEx_ReceiveToIdle(lora->huart, (uint8_t *)response, sizeof(response) - 1, &rx_len, 10000);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	2687      	movs	r6, #135	@ 0x87
 8000672:	0076      	lsls	r6, r6, #1
 8000674:	19bc      	adds	r4, r7, r6
 8000676:	230a      	movs	r3, #10
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	1979      	adds	r1, r7, r5
 800067c:	4a1d      	ldr	r2, [pc, #116]	@ (80006f4 <LoRaWAN_Join+0xe4>)
 800067e:	9200      	str	r2, [sp, #0]
 8000680:	22ff      	movs	r2, #255	@ 0xff
 8000682:	f004 fe5b 	bl	800533c <HAL_UARTEx_ReceiveToIdle>
 8000686:	0003      	movs	r3, r0
 8000688:	7023      	strb	r3, [r4, #0]
    if (hal_status != HAL_OK) {
 800068a:	19bb      	adds	r3, r7, r6
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <LoRaWAN_Join+0x88>
        return LORAWAN_ERROR_TIMEOUT;
 8000692:	2304      	movs	r3, #4
 8000694:	425b      	negs	r3, r3
 8000696:	e024      	b.n	80006e2 <LoRaWAN_Join+0xd2>
    }
    response[rx_len] = '\0';
 8000698:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <LoRaWAN_Join+0xe8>)
 800069a:	2188      	movs	r1, #136	@ 0x88
 800069c:	0049      	lsls	r1, r1, #1
 800069e:	185b      	adds	r3, r3, r1
 80006a0:	19db      	adds	r3, r3, r7
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	001a      	movs	r2, r3
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <LoRaWAN_Join+0xec>)
 80006a8:	185b      	adds	r3, r3, r1
 80006aa:	19db      	adds	r3, r3, r7
 80006ac:	2100      	movs	r1, #0
 80006ae:	5499      	strb	r1, [r3, r2]

    if (strstr(response, "JOINED")) {
 80006b0:	4a13      	ldr	r2, [pc, #76]	@ (8000700 <LoRaWAN_Join+0xf0>)
 80006b2:	230c      	movs	r3, #12
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f004 fff9 	bl	80056b0 <strstr>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <LoRaWAN_Join+0xb6>
        return LORAWAN_ERROR_OK;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e00d      	b.n	80006e2 <LoRaWAN_Join+0xd2>
    } else if (strstr(response, "JOIN FAILED")) {
 80006c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000704 <LoRaWAN_Join+0xf4>)
 80006c8:	230c      	movs	r3, #12
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f004 ffee 	bl	80056b0 <strstr>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d002      	beq.n	80006de <LoRaWAN_Join+0xce>
        return LORAWAN_ERROR_NOT_JOINED;
 80006d8:	2305      	movs	r3, #5
 80006da:	425b      	negs	r3, r3
 80006dc:	e001      	b.n	80006e2 <LoRaWAN_Join+0xd2>
    }
    return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 80006de:	2303      	movs	r3, #3
 80006e0:	425b      	negs	r3, r3
}
 80006e2:	0018      	movs	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b045      	add	sp, #276	@ 0x114
 80006e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	08005fe0 	.word	0x08005fe0
 80006f0:	08005fec 	.word	0x08005fec
 80006f4:	00002710 	.word	0x00002710
 80006f8:	fffffefa 	.word	0xfffffefa
 80006fc:	fffffefc 	.word	0xfffffefc
 8000700:	08005ff0 	.word	0x08005ff0
 8000704:	08005ff8 	.word	0x08005ff8

08000708 <LoRaWAN_SendHex>:

LoRaWAN_Error_t LoRaWAN_SendHex(ATC_HandleTypeDef *lora, const uint8_t *payload, size_t length)
{
 8000708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070a:	b0ab      	sub	sp, #172	@ 0xac
 800070c:	af02      	add	r7, sp, #8
 800070e:	6478      	str	r0, [r7, #68]	@ 0x44
 8000710:	6439      	str	r1, [r7, #64]	@ 0x40
 8000712:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000714:	466b      	mov	r3, sp
 8000716:	001e      	movs	r6, r3
    if (!lora || !lora->huart || !payload || length == 0) {
 8000718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800071a:	2b00      	cmp	r3, #0
 800071c:	d009      	beq.n	8000732 <LoRaWAN_SendHex+0x2a>
 800071e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d005      	beq.n	8000732 <LoRaWAN_SendHex+0x2a>
 8000726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <LoRaWAN_SendHex+0x2a>
 800072c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800072e:	2b00      	cmp	r3, #0
 8000730:	d102      	bne.n	8000738 <LoRaWAN_SendHex+0x30>
        return LORAWAN_ERROR_INVALID_PARAM;
 8000732:	2301      	movs	r3, #1
 8000734:	425b      	negs	r3, r3
 8000736:	e0a8      	b.n	800088a <LoRaWAN_SendHex+0x182>
    }

    char hex[length * 2 + 1];
 8000738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	0013      	movs	r3, r2
 8000740:	3b01      	subs	r3, #1
 8000742:	2198      	movs	r1, #152	@ 0x98
 8000744:	1879      	adds	r1, r7, r1
 8000746:	600b      	str	r3, [r1, #0]
 8000748:	61ba      	str	r2, [r7, #24]
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
 800074e:	69b8      	ldr	r0, [r7, #24]
 8000750:	69f9      	ldr	r1, [r7, #28]
 8000752:	0003      	movs	r3, r0
 8000754:	0f5b      	lsrs	r3, r3, #29
 8000756:	469c      	mov	ip, r3
 8000758:	000b      	movs	r3, r1
 800075a:	00dd      	lsls	r5, r3, #3
 800075c:	4663      	mov	r3, ip
 800075e:	431d      	orrs	r5, r3
 8000760:	0003      	movs	r3, r0
 8000762:	00dc      	lsls	r4, r3, #3
 8000764:	613a      	str	r2, [r7, #16]
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	6938      	ldr	r0, [r7, #16]
 800076c:	6979      	ldr	r1, [r7, #20]
 800076e:	0003      	movs	r3, r0
 8000770:	0f5b      	lsrs	r3, r3, #29
 8000772:	000c      	movs	r4, r1
 8000774:	00e4      	lsls	r4, r4, #3
 8000776:	637c      	str	r4, [r7, #52]	@ 0x34
 8000778:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 800077a:	431c      	orrs	r4, r3
 800077c:	637c      	str	r4, [r7, #52]	@ 0x34
 800077e:	0003      	movs	r3, r0
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	633b      	str	r3, [r7, #48]	@ 0x30
 8000784:	1dd3      	adds	r3, r2, #7
 8000786:	08db      	lsrs	r3, r3, #3
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	466a      	mov	r2, sp
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	469d      	mov	sp, r3
 8000790:	ab02      	add	r3, sp, #8
 8000792:	3300      	adds	r3, #0
 8000794:	2294      	movs	r2, #148	@ 0x94
 8000796:	18ba      	adds	r2, r7, r2
 8000798:	6013      	str	r3, [r2, #0]
    for (size_t i = 0; i < length; ++i) {
 800079a:	2300      	movs	r3, #0
 800079c:	229c      	movs	r2, #156	@ 0x9c
 800079e:	18ba      	adds	r2, r7, r2
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	e019      	b.n	80007d8 <LoRaWAN_SendHex+0xd0>
        sprintf(&hex[i * 2], "%02X", payload[i]);
 80007a4:	239c      	movs	r3, #156	@ 0x9c
 80007a6:	18fb      	adds	r3, r7, r3
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	2294      	movs	r2, #148	@ 0x94
 80007ae:	18ba      	adds	r2, r7, r2
 80007b0:	6812      	ldr	r2, [r2, #0]
 80007b2:	18d0      	adds	r0, r2, r3
 80007b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80007b6:	239c      	movs	r3, #156	@ 0x9c
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	18d3      	adds	r3, r2, r3
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	001a      	movs	r2, r3
 80007c2:	4b34      	ldr	r3, [pc, #208]	@ (8000894 <LoRaWAN_SendHex+0x18c>)
 80007c4:	0019      	movs	r1, r3
 80007c6:	f004 ff0f 	bl	80055e8 <siprintf>
    for (size_t i = 0; i < length; ++i) {
 80007ca:	239c      	movs	r3, #156	@ 0x9c
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	229c      	movs	r2, #156	@ 0x9c
 80007d4:	18ba      	adds	r2, r7, r2
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	239c      	movs	r3, #156	@ 0x9c
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d3df      	bcc.n	80007a4 <LoRaWAN_SendHex+0x9c>
    }
    hex[length * 2] = '\0';
 80007e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	2294      	movs	r2, #148	@ 0x94
 80007ea:	18ba      	adds	r2, r7, r2
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	2100      	movs	r1, #0
 80007f0:	54d1      	strb	r1, [r2, r3]

    char command[length * 2 + 12];
 80007f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007f4:	3306      	adds	r3, #6
 80007f6:	0059      	lsls	r1, r3, #1
 80007f8:	000b      	movs	r3, r1
 80007fa:	3b01      	subs	r3, #1
 80007fc:	2290      	movs	r2, #144	@ 0x90
 80007fe:	18ba      	adds	r2, r7, r2
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68bc      	ldr	r4, [r7, #8]
 800080a:	68fd      	ldr	r5, [r7, #12]
 800080c:	0023      	movs	r3, r4
 800080e:	0f5b      	lsrs	r3, r3, #29
 8000810:	002a      	movs	r2, r5
 8000812:	00d2      	lsls	r2, r2, #3
 8000814:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000818:	431a      	orrs	r2, r3
 800081a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800081c:	0023      	movs	r3, r4
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000822:	6039      	str	r1, [r7, #0]
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	683c      	ldr	r4, [r7, #0]
 800082a:	687d      	ldr	r5, [r7, #4]
 800082c:	0023      	movs	r3, r4
 800082e:	0f5b      	lsrs	r3, r3, #29
 8000830:	002a      	movs	r2, r5
 8000832:	00d2      	lsls	r2, r2, #3
 8000834:	627a      	str	r2, [r7, #36]	@ 0x24
 8000836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000838:	431a      	orrs	r2, r3
 800083a:	627a      	str	r2, [r7, #36]	@ 0x24
 800083c:	0023      	movs	r3, r4
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	623b      	str	r3, [r7, #32]
 8000842:	1dcb      	adds	r3, r1, #7
 8000844:	08db      	lsrs	r3, r3, #3
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	466a      	mov	r2, sp
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	469d      	mov	sp, r3
 800084e:	ab02      	add	r3, sp, #8
 8000850:	3300      	adds	r3, #0
 8000852:	228c      	movs	r2, #140	@ 0x8c
 8000854:	18ba      	adds	r2, r7, r2
 8000856:	6013      	str	r3, [r2, #0]
    snprintf(command, sizeof(command), "AT+SEND \"%s\"\r\n", hex);
 8000858:	2394      	movs	r3, #148	@ 0x94
 800085a:	18fb      	adds	r3, r7, r3
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a0e      	ldr	r2, [pc, #56]	@ (8000898 <LoRaWAN_SendHex+0x190>)
 8000860:	208c      	movs	r0, #140	@ 0x8c
 8000862:	1838      	adds	r0, r7, r0
 8000864:	6800      	ldr	r0, [r0, #0]
 8000866:	f004 fe89 	bl	800557c <sniprintf>

    char response[64];
    return send_data_and_get_response(lora, command, response, sizeof(response), 5000, "OK");
 800086a:	2314      	movs	r3, #20
 800086c:	2238      	movs	r2, #56	@ 0x38
 800086e:	189b      	adds	r3, r3, r2
 8000870:	19da      	adds	r2, r3, r7
 8000872:	238c      	movs	r3, #140	@ 0x8c
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	6819      	ldr	r1, [r3, #0]
 8000878:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <LoRaWAN_SendHex+0x194>)
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <LoRaWAN_SendHex+0x198>)
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2340      	movs	r3, #64	@ 0x40
 8000884:	f7ff fe64 	bl	8000550 <send_data_and_get_response>
 8000888:	0003      	movs	r3, r0
 800088a:	46b5      	mov	sp, r6
}
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	b029      	add	sp, #164	@ 0xa4
 8000892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000894:	08006004 	.word	0x08006004
 8000898:	0800600c 	.word	0x0800600c
 800089c:	08005fec 	.word	0x08005fec
 80008a0:	00001388 	.word	0x00001388

080008a4 <RTC_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RTC_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80008a8:	4b03      	ldr	r3, [pc, #12]	@ (80008b8 <RTC_IRQHandler+0x14>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f003 ff16 	bl	80046dc <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 80008b0:	46c0      	nop			@ (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	200001dc 	.word	0x200001dc

080008bc <RTC_WakeUp_Init>:

void RTC_WakeUp_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  ConsolePrintf("Starting RTC Wake-Up Timer configuration\r\n");
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <RTC_WakeUp_Init+0x5c>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fac4 	bl	8000e50 <ConsolePrintf>

  // Disable the Wake-Up Timer before configuring
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80008c8:	4b14      	ldr	r3, [pc, #80]	@ (800091c <RTC_WakeUp_Init+0x60>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f003 fea2 	bl	8004614 <HAL_RTCEx_DeactivateWakeUpTimer>
  ConsolePrintf("RTC Wake-Up Timer disabled\r\n");
 80008d0:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <RTC_WakeUp_Init+0x64>)
 80008d2:	0018      	movs	r0, r3
 80008d4:	f000 fabc 	bl	8000e50 <ConsolePrintf>

  // Configure Wake-Up Timer for 60 seconds using LSI (~40 kHz)
  // With AsynchPrediv = 127, SynchPrediv = 255: CK_SPRE = 40,000 / (128 * 256) = ~1.22 Hz
  // For ~60 seconds: WakeUpCounter = (60 * 1.22) - 1 = ~72
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80008d8:	4b10      	ldr	r3, [pc, #64]	@ (800091c <RTC_WakeUp_Init+0x60>)
 80008da:	2204      	movs	r2, #4
 80008dc:	213b      	movs	r1, #59	@ 0x3b
 80008de:	0018      	movs	r0, r3
 80008e0:	f003 fdc0 	bl	8004464 <HAL_RTCEx_SetWakeUpTimer_IT>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d004      	beq.n	80008f2 <RTC_WakeUp_Init+0x36>
  {
    ConsolePrintf("RTC Wake-Up Timer Init Failed\r\n");
 80008e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <RTC_WakeUp_Init+0x68>)
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fab0 	bl	8000e50 <ConsolePrintf>
 80008f0:	e003      	b.n	80008fa <RTC_WakeUp_Init+0x3e>
  }
  else
  {
    ConsolePrintf("RTC Wake-Up Timer Initialized for ~60 seconds\r\n");
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <RTC_WakeUp_Init+0x6c>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f000 faab 	bl	8000e50 <ConsolePrintf>
  }

  // Enable RTC Wake-Up interrupt in NVIC
  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2002      	movs	r0, #2
 8000900:	f001 f9be 	bl	8001c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000904:	2002      	movs	r0, #2
 8000906:	f001 f9d0 	bl	8001caa <HAL_NVIC_EnableIRQ>
  ConsolePrintf("RTC Wake-Up interrupt enabled in NVIC\r\n");
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <RTC_WakeUp_Init+0x70>)
 800090c:	0018      	movs	r0, r3
 800090e:	f000 fa9f 	bl	8000e50 <ConsolePrintf>
}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	0800601c 	.word	0x0800601c
 800091c:	200001dc 	.word	0x200001dc
 8000920:	08006048 	.word	0x08006048
 8000924:	08006068 	.word	0x08006068
 8000928:	08006088 	.word	0x08006088
 800092c:	080060b8 	.word	0x080060b8

08000930 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  // Reconfigure system clock after wake-up
  SystemClock_Config();
 8000938:	f000 f8fc 	bl	8000b34 <SystemClock_Config>

  // Print message
  ConsolePrintf("Woke up at %s\r\n", "1-minute interval");
 800093c:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 800093e:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f000 fa84 	bl	8000e50 <ConsolePrintf>
}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b002      	add	sp, #8
 800094e:	bd80      	pop	{r7, pc}
 8000950:	080060e0 	.word	0x080060e0
 8000954:	080060f4 	.word	0x080060f4

08000958 <Enter_Stop_Mode>:

void Enter_Stop_Mode(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  ConsolePrintf("Preparing to enter Stop mode\r\n");
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <Enter_Stop_Mode+0x50>)
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fa76 	bl	8000e50 <ConsolePrintf>

  // Clear Wake-Up flag
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <Enter_Stop_Mode+0x54>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	22ff      	movs	r2, #255	@ 0xff
 800096c:	401a      	ands	r2, r3
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <Enter_Stop_Mode+0x54>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	490f      	ldr	r1, [pc, #60]	@ (80009b0 <Enter_Stop_Mode+0x58>)
 8000974:	430a      	orrs	r2, r1
 8000976:	60da      	str	r2, [r3, #12]
  ConsolePrintf("RTC Wake-Up flag cleared\r\n");
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <Enter_Stop_Mode+0x5c>)
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fa68 	bl	8000e50 <ConsolePrintf>

  // Enter Stop mode (low-power mode)
  ConsolePrintf("Entering Stop mode\r\n");
 8000980:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <Enter_Stop_Mode+0x60>)
 8000982:	0018      	movs	r0, r3
 8000984:	f000 fa64 	bl	8000e50 <ConsolePrintf>
  /* Suspend SysTick to prevent it from waking up the MCU immediately */
  HAL_SuspendTick();
 8000988:	f001 f8aa 	bl	8001ae0 <HAL_SuspendTick>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800098c:	2101      	movs	r1, #1
 800098e:	2001      	movs	r0, #1
 8000990:	f002 fb96 	bl	80030c0 <HAL_PWR_EnterSTOPMode>
  /* Resume SysTick after waking up */
  HAL_ResumeTick();
 8000994:	f001 f8b2 	bl	8001afc <HAL_ResumeTick>
  ConsolePrintf("Exited Stop mode\r\n");
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <Enter_Stop_Mode+0x64>)
 800099a:	0018      	movs	r0, r3
 800099c:	f000 fa58 	bl	8000e50 <ConsolePrintf>
}
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	08006104 	.word	0x08006104
 80009ac:	200001dc 	.word	0x200001dc
 80009b0:	fffffb7f 	.word	0xfffffb7f
 80009b4:	08006124 	.word	0x08006124
 80009b8:	08006140 	.word	0x08006140
 80009bc:	08006158 	.word	0x08006158

080009c0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f000 fff7 	bl	80019b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(10000);
 80009ca:	4b4b      	ldr	r3, [pc, #300]	@ (8000af8 <main+0x138>)
 80009cc:	0018      	movs	r0, r3
 80009ce:	f001 f863 	bl	8001a98 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f8af 	bl	8000b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 f9f7 	bl	8000dc8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80009da:	f000 f923 	bl	8000c24 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80009de:	f000 f993 	bl	8000d08 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80009e2:	f000 f9c7 	bl	8000d74 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80009e6:	f000 f95d 	bl	8000ca4 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RTC_WakeUp_Init();
 80009ea:	f7ff ff67 	bl	80008bc <RTC_WakeUp_Init>

  /* Scan the I2C bus and read sensors once at startup */
  scan_i2c_bus();
 80009ee:	f000 fc45 	bl	800127c <scan_i2c_bus>
  sensor_init_and_read();
 80009f2:	f000 fc81 	bl	80012f8 <sensor_init_and_read>

  LoRaWAN_Join(&lora);
 80009f6:	4b41      	ldr	r3, [pc, #260]	@ (8000afc <main+0x13c>)
 80009f8:	0018      	movs	r0, r3
 80009fa:	f7ff fe09 	bl	8000610 <LoRaWAN_Join>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ConsolePrintf("Entering main loop\r\n");
 80009fe:	4b40      	ldr	r3, [pc, #256]	@ (8000b00 <main+0x140>)
 8000a00:	0018      	movs	r0, r3
 8000a02:	f000 fa25 	bl	8000e50 <ConsolePrintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ConsolePrintf("Going to sleep...\r\n");
 8000a06:	4b3f      	ldr	r3, [pc, #252]	@ (8000b04 <main+0x144>)
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 fa21 	bl	8000e50 <ConsolePrintf>

    HAL_I2C_DeInit(&hi2c1);
 8000a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b08 <main+0x148>)
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 fc8b 	bl	800232c <HAL_I2C_DeInit>
    HAL_UART_DeInit(&huart1);
 8000a16:	4b3d      	ldr	r3, [pc, #244]	@ (8000b0c <main+0x14c>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f003 fee3 	bl	80047e4 <HAL_UART_DeInit>
    // De-init LPUART1 (LoRaWAN UART)
    HAL_UART_DeInit(&hlpuart1);
 8000a1e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b10 <main+0x150>)
 8000a20:	0018      	movs	r0, r3
 8000a22:	f003 fedf 	bl	80047e4 <HAL_UART_DeInit>

    // Disable LPUART wake-up from Stop mode
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_RXNE);                    // Disable RXNE interrupt
 8000a26:	4b3a      	ldr	r3, [pc, #232]	@ (8000b10 <main+0x150>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b38      	ldr	r3, [pc, #224]	@ (8000b10 <main+0x150>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2120      	movs	r1, #32
 8000a32:	438a      	bics	r2, r1
 8000a34:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_IDLE);                    // Disable IDLE interrupt
 8000a36:	4b36      	ldr	r3, [pc, #216]	@ (8000b10 <main+0x150>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	4b34      	ldr	r3, [pc, #208]	@ (8000b10 <main+0x150>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	2110      	movs	r1, #16
 8000a42:	438a      	bics	r2, r1
 8000a44:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(&hlpuart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 8000a46:	4b32      	ldr	r3, [pc, #200]	@ (8000b10 <main+0x150>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2230      	movs	r2, #48	@ 0x30
 8000a4c:	621a      	str	r2, [r3, #32]

    __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);                    // Disable RXNE interrupt
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b0c <main+0x14c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	681a      	ldr	r2, [r3, #0]
 8000a54:	4b2d      	ldr	r3, [pc, #180]	@ (8000b0c <main+0x14c>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2120      	movs	r1, #32
 8000a5a:	438a      	bics	r2, r1
 8000a5c:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);                    // Disable IDLE interrupt
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b0c <main+0x14c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <main+0x14c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2110      	movs	r1, #16
 8000a6a:	438a      	bics	r2, r1
 8000a6c:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 8000a6e:	4b27      	ldr	r3, [pc, #156]	@ (8000b0c <main+0x14c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2230      	movs	r2, #48	@ 0x30
 8000a74:	621a      	str	r2, [r3, #32]

    // Enter Stop mode
    Enter_Stop_Mode(); // Wakes up via RTC interrupt
 8000a76:	f7ff ff6f 	bl	8000958 <Enter_Stop_Mode>

    // === Code resumes after wake-up ===
    ConsolePrintf("Resumed after wake-up\r\n");
 8000a7a:	4b26      	ldr	r3, [pc, #152]	@ (8000b14 <main+0x154>)
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f000 f9e7 	bl	8000e50 <ConsolePrintf>

    // Reconfigure clocks
    SystemClock_Config();
 8000a82:	f000 f857 	bl	8000b34 <SystemClock_Config>
    ConsolePrintf("System clock reconfigured\r\n");
 8000a86:	4b24      	ldr	r3, [pc, #144]	@ (8000b18 <main+0x158>)
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f000 f9e1 	bl	8000e50 <ConsolePrintf>

    // Reinit I2C peripheral
    MX_I2C1_Init();
 8000a8e:	f000 f8c9 	bl	8000c24 <MX_I2C1_Init>
    ConsolePrintf("I2C1 reinitialized\r\n");
 8000a92:	4b22      	ldr	r3, [pc, #136]	@ (8000b1c <main+0x15c>)
 8000a94:	0018      	movs	r0, r3
 8000a96:	f000 f9db 	bl	8000e50 <ConsolePrintf>

    // Reinit UART
    MX_USART1_UART_Init();
 8000a9a:	f000 f935 	bl	8000d08 <MX_USART1_UART_Init>
    ConsolePrintf("UART reinitialized\r\n");
 8000a9e:	4b20      	ldr	r3, [pc, #128]	@ (8000b20 <main+0x160>)
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f000 f9d5 	bl	8000e50 <ConsolePrintf>

    MX_LPUART1_UART_Init();
 8000aa6:	f000 f8fd 	bl	8000ca4 <MX_LPUART1_UART_Init>
    ConsolePrintf("LPUART1 (lora) reinitialized\r\n");
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <main+0x164>)
 8000aac:	0018      	movs	r0, r3
 8000aae:	f000 f9cf 	bl	8000e50 <ConsolePrintf>

    // Reinit WakeUp timer (MUST be outside the callback!)
    RTC_WakeUp_Init();
 8000ab2:	f7ff ff03 	bl	80008bc <RTC_WakeUp_Init>
    ConsolePrintf("RTC Wake-Up Timer reinitialized\r\n");
 8000ab6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b28 <main+0x168>)
 8000ab8:	0018      	movs	r0, r3
 8000aba:	f000 f9c9 	bl	8000e50 <ConsolePrintf>

    scan_i2c_bus();
 8000abe:	f000 fbdd 	bl	800127c <scan_i2c_bus>
    sensor_init_and_read();
 8000ac2:	f000 fc19 	bl	80012f8 <sensor_init_and_read>


    uint8_t payload[3];
    payload[0] = (uint8_t)(calculated_temp >> 8);     // high byte
 8000ac6:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <main+0x16c>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	0a1b      	lsrs	r3, r3, #8
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	701a      	strb	r2, [r3, #0]
    payload[1] = (uint8_t)(calculated_temp & 0xFF);   // low byte
 8000ad4:	4b15      	ldr	r3, [pc, #84]	@ (8000b2c <main+0x16c>)
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	b2da      	uxtb	r2, r3
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	705a      	strb	r2, [r3, #1]
    payload[2] = calculated_hum;
 8000ade:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <main+0x170>)
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	709a      	strb	r2, [r3, #2]
    LoRaWAN_SendHex(&lora, payload, 3);
 8000ae6:	1d39      	adds	r1, r7, #4
 8000ae8:	4b04      	ldr	r3, [pc, #16]	@ (8000afc <main+0x13c>)
 8000aea:	2203      	movs	r2, #3
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff fe0b 	bl	8000708 <LoRaWAN_SendHex>
  {
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	e787      	b.n	8000a06 <main+0x46>
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	00002710 	.word	0x00002710
 8000afc:	20000200 	.word	0x20000200
 8000b00:	0800616c 	.word	0x0800616c
 8000b04:	08006184 	.word	0x08006184
 8000b08:	20000078 	.word	0x20000078
 8000b0c:	20000154 	.word	0x20000154
 8000b10:	200000cc 	.word	0x200000cc
 8000b14:	08006198 	.word	0x08006198
 8000b18:	080061b0 	.word	0x080061b0
 8000b1c:	080061cc 	.word	0x080061cc
 8000b20:	080061e4 	.word	0x080061e4
 8000b24:	080061fc 	.word	0x080061fc
 8000b28:	0800621c 	.word	0x0800621c
 8000b2c:	20000212 	.word	0x20000212
 8000b30:	20000214 	.word	0x20000214

08000b34 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b34:	b590      	push	{r4, r7, lr}
 8000b36:	b09f      	sub	sp, #124	@ 0x7c
 8000b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b3a:	2440      	movs	r4, #64	@ 0x40
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	0018      	movs	r0, r3
 8000b40:	2338      	movs	r3, #56	@ 0x38
 8000b42:	001a      	movs	r2, r3
 8000b44:	2100      	movs	r1, #0
 8000b46:	f004 fdab 	bl	80056a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b4a:	232c      	movs	r3, #44	@ 0x2c
 8000b4c:	18fb      	adds	r3, r7, r3
 8000b4e:	0018      	movs	r0, r3
 8000b50:	2314      	movs	r3, #20
 8000b52:	001a      	movs	r2, r3
 8000b54:	2100      	movs	r1, #0
 8000b56:	f004 fda3 	bl	80056a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	2328      	movs	r3, #40	@ 0x28
 8000b60:	001a      	movs	r2, r3
 8000b62:	2100      	movs	r1, #0
 8000b64:	f004 fd9c 	bl	80056a0 <memset>

  /** Configure the main internal regulator output voltage
   */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b68:	4b2c      	ldr	r3, [pc, #176]	@ (8000c1c <SystemClock_Config+0xe8>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a2c      	ldr	r2, [pc, #176]	@ (8000c20 <SystemClock_Config+0xec>)
 8000b6e:	401a      	ands	r2, r3
 8000b70:	4b2a      	ldr	r3, [pc, #168]	@ (8000c1c <SystemClock_Config+0xe8>)
 8000b72:	2180      	movs	r1, #128	@ 0x80
 8000b74:	0109      	lsls	r1, r1, #4
 8000b76:	430a      	orrs	r2, r1
 8000b78:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_MSI;
 8000b7a:	0021      	movs	r1, r4
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	2218      	movs	r2, #24
 8000b80:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2201      	movs	r2, #1
 8000b86:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2200      	movs	r2, #0
 8000b92:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	22a0      	movs	r2, #160	@ 0xa0
 8000b98:	0212      	lsls	r2, r2, #8
 8000b9a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b9c:	187b      	adds	r3, r7, r1
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f002 fae7 	bl	8003178 <HAL_RCC_OscConfig>
 8000baa:	1e03      	subs	r3, r0, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000bae:	f000 f9c5 	bl	8000f3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000bb2:	212c      	movs	r1, #44	@ 0x2c
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	220f      	movs	r2, #15
 8000bb8:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bd2:	187b      	adds	r3, r7, r1
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f002 fea2 	bl	8003920 <HAL_RCC_ClockConfig>
 8000bdc:	1e03      	subs	r3, r0, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000be0:	f000 f9ac 	bl	8000f3c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_LPUART1 | RCC_PERIPHCLK_I2C1 | RCC_PERIPHCLK_RTC;
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	222d      	movs	r2, #45	@ 0x2d
 8000be8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	2200      	movs	r2, #0
 8000bee:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bf6:	1d3b      	adds	r3, r7, #4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	2280      	movs	r2, #128	@ 0x80
 8000c00:	0292      	lsls	r2, r2, #10
 8000c02:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	0018      	movs	r0, r3
 8000c08:	f003 f88e 	bl	8003d28 <HAL_RCCEx_PeriphCLKConfig>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d001      	beq.n	8000c14 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000c10:	f000 f994 	bl	8000f3c <Error_Handler>
  }
}
 8000c14:	46c0      	nop			@ (mov r8, r8)
 8000c16:	46bd      	mov	sp, r7
 8000c18:	b01f      	add	sp, #124	@ 0x7c
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	40007000 	.word	0x40007000
 8000c20:	ffffe7ff 	.word	0xffffe7ff

08000c24 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c28:	4b1c      	ldr	r3, [pc, #112]	@ (8000c9c <MX_I2C1_Init+0x78>)
 8000c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca0 <MX_I2C1_Init+0x7c>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8000c9c <MX_I2C1_Init+0x78>)
 8000c30:	22c1      	movs	r2, #193	@ 0xc1
 8000c32:	00d2      	lsls	r2, r2, #3
 8000c34:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c36:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <MX_I2C1_Init+0x78>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3c:	4b17      	ldr	r3, [pc, #92]	@ (8000c9c <MX_I2C1_Init+0x78>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c42:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <MX_I2C1_Init+0x78>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c48:	4b14      	ldr	r3, [pc, #80]	@ (8000c9c <MX_I2C1_Init+0x78>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <MX_I2C1_Init+0x78>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <MX_I2C1_Init+0x78>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <MX_I2C1_Init+0x78>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c60:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <MX_I2C1_Init+0x78>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f001 fabc 	bl	80021e0 <HAL_I2C_Init>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c6c:	f000 f966 	bl	8000f3c <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c70:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <MX_I2C1_Init+0x78>)
 8000c72:	2100      	movs	r1, #0
 8000c74:	0018      	movs	r0, r3
 8000c76:	f002 f98b 	bl	8002f90 <HAL_I2CEx_ConfigAnalogFilter>
 8000c7a:	1e03      	subs	r3, r0, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c7e:	f000 f95d 	bl	8000f3c <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <MX_I2C1_Init+0x78>)
 8000c84:	2100      	movs	r1, #0
 8000c86:	0018      	movs	r0, r3
 8000c88:	f002 f9ce 	bl	8003028 <HAL_I2CEx_ConfigDigitalFilter>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c90:	f000 f954 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8000c94:	46c0      	nop			@ (mov r8, r8)
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			@ (mov r8, r8)
 8000c9c:	20000078 	.word	0x20000078
 8000ca0:	40005400 	.word	0x40005400

08000ca4 <MX_LPUART1_UART_Init>:
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ca8:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <MX_LPUART1_UART_Init+0x58>)
 8000caa:	4a15      	ldr	r2, [pc, #84]	@ (8000d00 <MX_LPUART1_UART_Init+0x5c>)
 8000cac:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <MX_LPUART1_UART_Init+0x58>)
 8000cb0:	22e1      	movs	r2, #225	@ 0xe1
 8000cb2:	0252      	lsls	r2, r2, #9
 8000cb4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_LPUART1_UART_Init+0x58>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <MX_LPUART1_UART_Init+0x58>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cfc <MX_LPUART1_UART_Init+0x58>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cfc <MX_LPUART1_UART_Init+0x58>)
 8000cca:	220c      	movs	r2, #12
 8000ccc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <MX_LPUART1_UART_Init+0x58>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <MX_LPUART1_UART_Init+0x58>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <MX_LPUART1_UART_Init+0x58>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <MX_LPUART1_UART_Init+0x58>)
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	f003 fd2a 	bl	800473c <HAL_UART_Init>
 8000ce8:	1e03      	subs	r3, r0, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000cec:	f000 f926 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  lora.huart = &hlpuart1;
 8000cf0:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <MX_LPUART1_UART_Init+0x60>)
 8000cf2:	4a02      	ldr	r2, [pc, #8]	@ (8000cfc <MX_LPUART1_UART_Init+0x58>)
 8000cf4:	601a      	str	r2, [r3, #0]
  /* USER CODE END LPUART1_Init 2 */
}
 8000cf6:	46c0      	nop			@ (mov r8, r8)
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200000cc 	.word	0x200000cc
 8000d00:	40004800 	.word	0x40004800
 8000d04:	20000200 	.word	0x20000200

08000d08 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <MX_USART1_UART_Init+0x60>)
 8000d0e:	4a17      	ldr	r2, [pc, #92]	@ (8000d6c <MX_USART1_UART_Init+0x64>)
 8000d10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <MX_USART1_UART_Init+0x60>)
 8000d14:	22e1      	movs	r2, #225	@ 0xe1
 8000d16:	0252      	lsls	r2, r2, #9
 8000d18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <MX_USART1_UART_Init+0x60>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d20:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <MX_USART1_UART_Init+0x60>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <MX_USART1_UART_Init+0x60>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d68 <MX_USART1_UART_Init+0x60>)
 8000d2e:	220c      	movs	r2, #12
 8000d30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <MX_USART1_UART_Init+0x60>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d38:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <MX_USART1_UART_Init+0x60>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <MX_USART1_UART_Init+0x60>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <MX_USART1_UART_Init+0x60>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d4a:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <MX_USART1_UART_Init+0x60>)
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f003 fcf5 	bl	800473c <HAL_UART_Init>
 8000d52:	1e03      	subs	r3, r0, #0
 8000d54:	d001      	beq.n	8000d5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d56:	f000 f8f1 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  ConsolePrintf("USART1 (DBG) Cnfigured\r\n");
 8000d5a:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <MX_USART1_UART_Init+0x68>)
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f000 f877 	bl	8000e50 <ConsolePrintf>
  /* USER CODE END USART1_Init 2 */
}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000154 	.word	0x20000154
 8000d6c:	40013800 	.word	0x40013800
 8000d70:	08006240 	.word	0x08006240

08000d74 <MX_RTC_Init>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 8000d78:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <MX_RTC_Init+0x4c>)
 8000d7a:	4a12      	ldr	r2, [pc, #72]	@ (8000dc4 <MX_RTC_Init+0x50>)
 8000d7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000d7e:	4b10      	ldr	r3, [pc, #64]	@ (8000dc0 <MX_RTC_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000d84:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc0 <MX_RTC_Init+0x4c>)
 8000d86:	227f      	movs	r2, #127	@ 0x7f
 8000d88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc0 <MX_RTC_Init+0x4c>)
 8000d8c:	22ff      	movs	r2, #255	@ 0xff
 8000d8e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000d90:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc0 <MX_RTC_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000d96:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc0 <MX_RTC_Init+0x4c>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	@ (8000dc0 <MX_RTC_Init+0x4c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000da2:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <MX_RTC_Init+0x4c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000da8:	4b05      	ldr	r3, [pc, #20]	@ (8000dc0 <MX_RTC_Init+0x4c>)
 8000daa:	0018      	movs	r0, r3
 8000dac:	f003 f95a 	bl	8004064 <HAL_RTC_Init>
 8000db0:	1e03      	subs	r3, r0, #0
 8000db2:	d001      	beq.n	8000db8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000db4:	f000 f8c2 	bl	8000f3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8000db8:	46c0      	nop			@ (mov r8, r8)
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	200001dc 	.word	0x200001dc
 8000dc4:	40002800 	.word	0x40002800

08000dc8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dce:	240c      	movs	r4, #12
 8000dd0:	193b      	adds	r3, r7, r4
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	2314      	movs	r3, #20
 8000dd6:	001a      	movs	r2, r3
 8000dd8:	2100      	movs	r1, #0
 8000dda:	f004 fc61 	bl	80056a0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <MX_GPIO_Init+0x80>)
 8000de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000de2:	4b19      	ldr	r3, [pc, #100]	@ (8000e48 <MX_GPIO_Init+0x80>)
 8000de4:	2101      	movs	r1, #1
 8000de6:	430a      	orrs	r2, r1
 8000de8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dea:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <MX_GPIO_Init+0x80>)
 8000dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dee:	2201      	movs	r2, #1
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
 8000df4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <MX_GPIO_Init+0x80>)
 8000df8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000dfa:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <MX_GPIO_Init+0x80>)
 8000dfc:	2102      	movs	r1, #2
 8000dfe:	430a      	orrs	r2, r1
 8000e00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_GPIO_Init+0x80>)
 8000e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e06:	2202      	movs	r2, #2
 8000e08:	4013      	ands	r3, r2
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <MX_GPIO_Init+0x84>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	2120      	movs	r1, #32
 8000e14:	0018      	movs	r0, r3
 8000e16:	f001 f9c5 	bl	80021a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e1a:	0021      	movs	r1, r4
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	2220      	movs	r2, #32
 8000e20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2201      	movs	r2, #1
 8000e26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2200      	movs	r2, #0
 8000e32:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	4a05      	ldr	r2, [pc, #20]	@ (8000e4c <MX_GPIO_Init+0x84>)
 8000e38:	0019      	movs	r1, r3
 8000e3a:	0010      	movs	r0, r2
 8000e3c:	f000 ff52 	bl	8001ce4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e40:	46c0      	nop			@ (mov r8, r8)
 8000e42:	46bd      	mov	sp, r7
 8000e44:	b009      	add	sp, #36	@ 0x24
 8000e46:	bd90      	pop	{r4, r7, pc}
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	50000400 	.word	0x50000400

08000e50 <ConsolePrintf>:

/* USER CODE BEGIN 4 */
void ConsolePrintf(const char *format, ...)
{
 8000e50:	b40f      	push	{r0, r1, r2, r3}
 8000e52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e54:	b0df      	sub	sp, #380	@ 0x17c
 8000e56:	af06      	add	r7, sp, #24
  char final_buffer[160];    // Combined buffer (timestamp + message)

  // Get time and date from RTC
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000e58:	2308      	movs	r3, #8
 8000e5a:	18f9      	adds	r1, r7, r3
 8000e5c:	4b31      	ldr	r3, [pc, #196]	@ (8000f24 <ConsolePrintf+0xd4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	0018      	movs	r0, r3
 8000e62:	f003 f99b 	bl	800419c <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000e66:	231c      	movs	r3, #28
 8000e68:	18f9      	adds	r1, r7, r3
 8000e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8000f24 <ConsolePrintf+0xd4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f003 f9f2 	bl	8004258 <HAL_RTC_GetDate>

  // Format timestamp as [YYYY-MM-DD HH:MM:SS]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
           date.Year, date.Month, date.Date,
 8000e74:	4b2c      	ldr	r3, [pc, #176]	@ (8000f28 <ConsolePrintf+0xd8>)
 8000e76:	22b0      	movs	r2, #176	@ 0xb0
 8000e78:	0052      	lsls	r2, r2, #1
 8000e7a:	189b      	adds	r3, r3, r2
 8000e7c:	19db      	adds	r3, r3, r7
 8000e7e:	78db      	ldrb	r3, [r3, #3]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000e80:	469c      	mov	ip, r3
           date.Year, date.Month, date.Date,
 8000e82:	4b29      	ldr	r3, [pc, #164]	@ (8000f28 <ConsolePrintf+0xd8>)
 8000e84:	189b      	adds	r3, r3, r2
 8000e86:	19db      	adds	r3, r3, r7
 8000e88:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000e8a:	0019      	movs	r1, r3
           date.Year, date.Month, date.Date,
 8000e8c:	4b26      	ldr	r3, [pc, #152]	@ (8000f28 <ConsolePrintf+0xd8>)
 8000e8e:	189b      	adds	r3, r3, r2
 8000e90:	19db      	adds	r3, r3, r7
 8000e92:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000e94:	001c      	movs	r4, r3
           time.Hours, time.Minutes, time.Seconds);
 8000e96:	4b25      	ldr	r3, [pc, #148]	@ (8000f2c <ConsolePrintf+0xdc>)
 8000e98:	189b      	adds	r3, r3, r2
 8000e9a:	19db      	adds	r3, r3, r7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000e9e:	001d      	movs	r5, r3
           time.Hours, time.Minutes, time.Seconds);
 8000ea0:	4b22      	ldr	r3, [pc, #136]	@ (8000f2c <ConsolePrintf+0xdc>)
 8000ea2:	189b      	adds	r3, r3, r2
 8000ea4:	19db      	adds	r3, r3, r7
 8000ea6:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000ea8:	001e      	movs	r6, r3
           time.Hours, time.Minutes, time.Seconds);
 8000eaa:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <ConsolePrintf+0xdc>)
 8000eac:	189b      	adds	r3, r3, r2
 8000eae:	19db      	adds	r3, r3, r7
 8000eb0:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8000f30 <ConsolePrintf+0xe0>)
 8000eb4:	20c0      	movs	r0, #192	@ 0xc0
 8000eb6:	1838      	adds	r0, r7, r0
 8000eb8:	9304      	str	r3, [sp, #16]
 8000eba:	9603      	str	r6, [sp, #12]
 8000ebc:	9502      	str	r5, [sp, #8]
 8000ebe:	9401      	str	r4, [sp, #4]
 8000ec0:	9100      	str	r1, [sp, #0]
 8000ec2:	4663      	mov	r3, ip
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	f004 fb59 	bl	800557c <sniprintf>

  // Format the original message
  va_list args;
  va_start(args, format);
 8000eca:	23be      	movs	r3, #190	@ 0xbe
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), format, args);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	22bc      	movs	r2, #188	@ 0xbc
 8000ed6:	0052      	lsls	r2, r2, #1
 8000ed8:	18ba      	adds	r2, r7, r2
 8000eda:	6812      	ldr	r2, [r2, #0]
 8000edc:	25e0      	movs	r5, #224	@ 0xe0
 8000ede:	1978      	adds	r0, r7, r5
 8000ee0:	2180      	movs	r1, #128	@ 0x80
 8000ee2:	f004 fbd1 	bl	8005688 <vsniprintf>
  va_end(args);

  // Combine timestamp and message
  snprintf(final_buffer, sizeof(final_buffer), "%s%s", timestamp_buffer, buffer);
 8000ee6:	20c0      	movs	r0, #192	@ 0xc0
 8000ee8:	1839      	adds	r1, r7, r0
 8000eea:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <ConsolePrintf+0xe4>)
 8000eec:	2420      	movs	r4, #32
 8000eee:	1938      	adds	r0, r7, r4
 8000ef0:	197b      	adds	r3, r7, r5
 8000ef2:	9300      	str	r3, [sp, #0]
 8000ef4:	000b      	movs	r3, r1
 8000ef6:	21a0      	movs	r1, #160	@ 0xa0
 8000ef8:	f004 fb40 	bl	800557c <sniprintf>

  // Transmit the combined message
  HAL_UART_Transmit(&huart1, (uint8_t *)final_buffer, strlen(final_buffer), HAL_MAX_DELAY);
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	0018      	movs	r0, r3
 8000f00:	f7ff f902 	bl	8000108 <strlen>
 8000f04:	0003      	movs	r3, r0
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	2301      	movs	r3, #1
 8000f0a:	425b      	negs	r3, r3
 8000f0c:	1939      	adds	r1, r7, r4
 8000f0e:	480a      	ldr	r0, [pc, #40]	@ (8000f38 <ConsolePrintf+0xe8>)
 8000f10:	f003 fca6 	bl	8004860 <HAL_UART_Transmit>
}
 8000f14:	46c0      	nop			@ (mov r8, r8)
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b059      	add	sp, #356	@ 0x164
 8000f1a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f1c:	bc08      	pop	{r3}
 8000f1e:	b004      	add	sp, #16
 8000f20:	4718      	bx	r3
 8000f22:	46c0      	nop			@ (mov r8, r8)
 8000f24:	200001dc 	.word	0x200001dc
 8000f28:	fffffebc 	.word	0xfffffebc
 8000f2c:	fffffea8 	.word	0xfffffea8
 8000f30:	0800625c 	.word	0x0800625c
 8000f34:	08006280 	.word	0x08006280
 8000f38:	20000154 	.word	0x20000154

08000f3c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f40:	b672      	cpsid	i
}
 8000f42:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f44:	46c0      	nop			@ (mov r8, r8)
 8000f46:	e7fd      	b.n	8000f44 <Error_Handler+0x8>

08000f48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4c:	4b07      	ldr	r3, [pc, #28]	@ (8000f6c <HAL_MspInit+0x24>)
 8000f4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <HAL_MspInit+0x24>)
 8000f52:	2101      	movs	r1, #1
 8000f54:	430a      	orrs	r2, r1
 8000f56:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f58:	4b04      	ldr	r3, [pc, #16]	@ (8000f6c <HAL_MspInit+0x24>)
 8000f5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f5c:	4b03      	ldr	r3, [pc, #12]	@ (8000f6c <HAL_MspInit+0x24>)
 8000f5e:	2180      	movs	r1, #128	@ 0x80
 8000f60:	0549      	lsls	r1, r1, #21
 8000f62:	430a      	orrs	r2, r1
 8000f64:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40021000 	.word	0x40021000

08000f70 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f70:	b590      	push	{r4, r7, lr}
 8000f72:	b089      	sub	sp, #36	@ 0x24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	240c      	movs	r4, #12
 8000f7a:	193b      	adds	r3, r7, r4
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	2314      	movs	r3, #20
 8000f80:	001a      	movs	r2, r3
 8000f82:	2100      	movs	r1, #0
 8000f84:	f004 fb8c 	bl	80056a0 <memset>
  if(hi2c->Instance==I2C1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <HAL_I2C_MspInit+0x7c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d128      	bne.n	8000fe4 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	4b17      	ldr	r3, [pc, #92]	@ (8000ff0 <HAL_I2C_MspInit+0x80>)
 8000f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f96:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <HAL_I2C_MspInit+0x80>)
 8000f98:	2102      	movs	r1, #2
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <HAL_I2C_MspInit+0x80>)
 8000fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fa2:	2202      	movs	r2, #2
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000faa:	0021      	movs	r1, r4
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	22c0      	movs	r2, #192	@ 0xc0
 8000fb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	2212      	movs	r2, #18
 8000fb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	4a09      	ldr	r2, [pc, #36]	@ (8000ff4 <HAL_I2C_MspInit+0x84>)
 8000fce:	0019      	movs	r1, r3
 8000fd0:	0010      	movs	r0, r2
 8000fd2:	f000 fe87 	bl	8001ce4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_I2C_MspInit+0x80>)
 8000fd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000fda:	4b05      	ldr	r3, [pc, #20]	@ (8000ff0 <HAL_I2C_MspInit+0x80>)
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	0389      	lsls	r1, r1, #14
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000fe4:	46c0      	nop			@ (mov r8, r8)
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	b009      	add	sp, #36	@ 0x24
 8000fea:	bd90      	pop	{r4, r7, pc}
 8000fec:	40005400 	.word	0x40005400
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	50000400 	.word	0x50000400

08000ff8 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a0b      	ldr	r2, [pc, #44]	@ (8001034 <HAL_I2C_MspDeInit+0x3c>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d10f      	bne.n	800102a <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <HAL_I2C_MspDeInit+0x40>)
 800100c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800100e:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <HAL_I2C_MspDeInit+0x40>)
 8001010:	490a      	ldr	r1, [pc, #40]	@ (800103c <HAL_I2C_MspDeInit+0x44>)
 8001012:	400a      	ands	r2, r1
 8001014:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_I2C_MspDeInit+0x48>)
 8001018:	2140      	movs	r1, #64	@ 0x40
 800101a:	0018      	movs	r0, r3
 800101c:	f000 ffe0 	bl	8001fe0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001020:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <HAL_I2C_MspDeInit+0x48>)
 8001022:	2180      	movs	r1, #128	@ 0x80
 8001024:	0018      	movs	r0, r3
 8001026:	f000 ffdb 	bl	8001fe0 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b002      	add	sp, #8
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	40005400 	.word	0x40005400
 8001038:	40021000 	.word	0x40021000
 800103c:	ffdfffff 	.word	0xffdfffff
 8001040:	50000400 	.word	0x50000400

08001044 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b08b      	sub	sp, #44	@ 0x2c
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	2414      	movs	r4, #20
 800104e:	193b      	adds	r3, r7, r4
 8001050:	0018      	movs	r0, r3
 8001052:	2314      	movs	r3, #20
 8001054:	001a      	movs	r2, r3
 8001056:	2100      	movs	r1, #0
 8001058:	f004 fb22 	bl	80056a0 <memset>
  if(huart->Instance==LPUART1)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a30      	ldr	r2, [pc, #192]	@ (8001124 <HAL_UART_MspInit+0xe0>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d12a      	bne.n	80010bc <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001066:	4b30      	ldr	r3, [pc, #192]	@ (8001128 <HAL_UART_MspInit+0xe4>)
 8001068:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800106a:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <HAL_UART_MspInit+0xe4>)
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	02c9      	lsls	r1, r1, #11
 8001070:	430a      	orrs	r2, r1
 8001072:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001074:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <HAL_UART_MspInit+0xe4>)
 8001076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001078:	4b2b      	ldr	r3, [pc, #172]	@ (8001128 <HAL_UART_MspInit+0xe4>)
 800107a:	2101      	movs	r1, #1
 800107c:	430a      	orrs	r2, r1
 800107e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001080:	4b29      	ldr	r3, [pc, #164]	@ (8001128 <HAL_UART_MspInit+0xe4>)
 8001082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001084:	2201      	movs	r2, #1
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800108c:	0021      	movs	r1, r4
 800108e:	187b      	adds	r3, r7, r1
 8001090:	220c      	movs	r2, #12
 8001092:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2202      	movs	r2, #2
 8001098:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	187b      	adds	r3, r7, r1
 80010a2:	2203      	movs	r2, #3
 80010a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80010a6:	187b      	adds	r3, r7, r1
 80010a8:	2206      	movs	r2, #6
 80010aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ac:	187a      	adds	r2, r7, r1
 80010ae:	23a0      	movs	r3, #160	@ 0xa0
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	0011      	movs	r1, r2
 80010b4:	0018      	movs	r0, r3
 80010b6:	f000 fe15 	bl	8001ce4 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 80010ba:	e02f      	b.n	800111c <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1a      	ldr	r2, [pc, #104]	@ (800112c <HAL_UART_MspInit+0xe8>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d12a      	bne.n	800111c <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c6:	4b18      	ldr	r3, [pc, #96]	@ (8001128 <HAL_UART_MspInit+0xe4>)
 80010c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80010ca:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <HAL_UART_MspInit+0xe4>)
 80010cc:	2180      	movs	r1, #128	@ 0x80
 80010ce:	01c9      	lsls	r1, r1, #7
 80010d0:	430a      	orrs	r2, r1
 80010d2:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <HAL_UART_MspInit+0xe4>)
 80010d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010d8:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <HAL_UART_MspInit+0xe4>)
 80010da:	2101      	movs	r1, #1
 80010dc:	430a      	orrs	r2, r1
 80010de:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010e0:	4b11      	ldr	r3, [pc, #68]	@ (8001128 <HAL_UART_MspInit+0xe4>)
 80010e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e4:	2201      	movs	r2, #1
 80010e6:	4013      	ands	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010ec:	2114      	movs	r1, #20
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	22c0      	movs	r2, #192	@ 0xc0
 80010f2:	00d2      	lsls	r2, r2, #3
 80010f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2202      	movs	r2, #2
 80010fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2203      	movs	r2, #3
 8001106:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001108:	187b      	adds	r3, r7, r1
 800110a:	2204      	movs	r2, #4
 800110c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	187a      	adds	r2, r7, r1
 8001110:	23a0      	movs	r3, #160	@ 0xa0
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	0011      	movs	r1, r2
 8001116:	0018      	movs	r0, r3
 8001118:	f000 fde4 	bl	8001ce4 <HAL_GPIO_Init>
}
 800111c:	46c0      	nop			@ (mov r8, r8)
 800111e:	46bd      	mov	sp, r7
 8001120:	b00b      	add	sp, #44	@ 0x2c
 8001122:	bd90      	pop	{r4, r7, pc}
 8001124:	40004800 	.word	0x40004800
 8001128:	40021000 	.word	0x40021000
 800112c:	40013800 	.word	0x40013800

08001130 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a13      	ldr	r2, [pc, #76]	@ (800118c <HAL_UART_MspDeInit+0x5c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10c      	bne.n	800115c <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN LPUART1_MspDeInit 0 */

    /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8001142:	4b13      	ldr	r3, [pc, #76]	@ (8001190 <HAL_UART_MspDeInit+0x60>)
 8001144:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001146:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_UART_MspDeInit+0x60>)
 8001148:	4912      	ldr	r1, [pc, #72]	@ (8001194 <HAL_UART_MspDeInit+0x64>)
 800114a:	400a      	ands	r2, r1
 800114c:	639a      	str	r2, [r3, #56]	@ 0x38

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800114e:	23a0      	movs	r3, #160	@ 0xa0
 8001150:	05db      	lsls	r3, r3, #23
 8001152:	210c      	movs	r1, #12
 8001154:	0018      	movs	r0, r3
 8001156:	f000 ff43 	bl	8001fe0 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800115a:	e012      	b.n	8001182 <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <HAL_UART_MspDeInit+0x68>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d10d      	bne.n	8001182 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART1_CLK_DISABLE();
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <HAL_UART_MspDeInit+0x60>)
 8001168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <HAL_UART_MspDeInit+0x60>)
 800116c:	490b      	ldr	r1, [pc, #44]	@ (800119c <HAL_UART_MspDeInit+0x6c>)
 800116e:	400a      	ands	r2, r1
 8001170:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001172:	23c0      	movs	r3, #192	@ 0xc0
 8001174:	00da      	lsls	r2, r3, #3
 8001176:	23a0      	movs	r3, #160	@ 0xa0
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	0011      	movs	r1, r2
 800117c:	0018      	movs	r0, r3
 800117e:	f000 ff2f 	bl	8001fe0 <HAL_GPIO_DeInit>
}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b002      	add	sp, #8
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			@ (mov r8, r8)
 800118c:	40004800 	.word	0x40004800
 8001190:	40021000 	.word	0x40021000
 8001194:	fffbffff 	.word	0xfffbffff
 8001198:	40013800 	.word	0x40013800
 800119c:	ffffbfff 	.word	0xffffbfff

080011a0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a06      	ldr	r2, [pc, #24]	@ (80011c8 <HAL_RTC_MspInit+0x28>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d106      	bne.n	80011c0 <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_RTC_MspInit+0x2c>)
 80011b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80011b6:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <HAL_RTC_MspInit+0x2c>)
 80011b8:	2180      	movs	r1, #128	@ 0x80
 80011ba:	02c9      	lsls	r1, r1, #11
 80011bc:	430a      	orrs	r2, r1
 80011be:	651a      	str	r2, [r3, #80]	@ 0x50

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80011c0:	46c0      	nop			@ (mov r8, r8)
 80011c2:	46bd      	mov	sp, r7
 80011c4:	b002      	add	sp, #8
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40002800 	.word	0x40002800
 80011cc:	40021000 	.word	0x40021000

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d4:	46c0      	nop			@ (mov r8, r8)
 80011d6:	e7fd      	b.n	80011d4 <NMI_Handler+0x4>

080011d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011dc:	46c0      	nop			@ (mov r8, r8)
 80011de:	e7fd      	b.n	80011dc <HardFault_Handler+0x4>

080011e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011e4:	46c0      	nop			@ (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f8:	f000 fc32 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800120c:	4a14      	ldr	r2, [pc, #80]	@ (8001260 <_sbrk+0x5c>)
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <_sbrk+0x60>)
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001218:	4b13      	ldr	r3, [pc, #76]	@ (8001268 <_sbrk+0x64>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d102      	bne.n	8001226 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001220:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <_sbrk+0x64>)
 8001222:	4a12      	ldr	r2, [pc, #72]	@ (800126c <_sbrk+0x68>)
 8001224:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	18d3      	adds	r3, r2, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	429a      	cmp	r2, r3
 8001232:	d207      	bcs.n	8001244 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001234:	f004 fa52 	bl	80056dc <__errno>
 8001238:	0003      	movs	r3, r0
 800123a:	220c      	movs	r2, #12
 800123c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123e:	2301      	movs	r3, #1
 8001240:	425b      	negs	r3, r3
 8001242:	e009      	b.n	8001258 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <_sbrk+0x64>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800124a:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <_sbrk+0x64>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	18d2      	adds	r2, r2, r3
 8001252:	4b05      	ldr	r3, [pc, #20]	@ (8001268 <_sbrk+0x64>)
 8001254:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001256:	68fb      	ldr	r3, [r7, #12]
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b006      	add	sp, #24
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20005000 	.word	0x20005000
 8001264:	00000400 	.word	0x00000400
 8001268:	20000204 	.word	0x20000204
 800126c:	20000370 	.word	0x20000370

08001270 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <scan_i2c_bus>:
uint16_t calculated_temp;
uint8_t  calculated_hum;
int16_t error = 0;

void scan_i2c_bus(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
    has_sensor_1 = false;
 8001282:	4b1a      	ldr	r3, [pc, #104]	@ (80012ec <scan_i2c_bus+0x70>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
    has_sensor_2 = false;
 8001288:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <scan_i2c_bus+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]

    uint8_t addr;
    HAL_Delay(100);
 800128e:	2064      	movs	r0, #100	@ 0x64
 8001290:	f000 fc02 	bl	8001a98 <HAL_Delay>

    for (addr = 3; addr < 0x78; addr++) {
 8001294:	1dfb      	adds	r3, r7, #7
 8001296:	2203      	movs	r2, #3
 8001298:	701a      	strb	r2, [r3, #0]
 800129a:	e01e      	b.n	80012da <scan_i2c_bus+0x5e>
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK) {
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	18db      	adds	r3, r3, r3
 80012a4:	b299      	uxth	r1, r3
 80012a6:	4813      	ldr	r0, [pc, #76]	@ (80012f4 <scan_i2c_bus+0x78>)
 80012a8:	230a      	movs	r3, #10
 80012aa:	2201      	movs	r2, #1
 80012ac:	f001 faa0 	bl	80027f0 <HAL_I2C_IsDeviceReady>
 80012b0:	1e03      	subs	r3, r0, #0
 80012b2:	d10d      	bne.n	80012d0 <scan_i2c_bus+0x54>
            if (addr == 0x44)
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b44      	cmp	r3, #68	@ 0x44
 80012ba:	d102      	bne.n	80012c2 <scan_i2c_bus+0x46>
                has_sensor_1 = true;
 80012bc:	4b0b      	ldr	r3, [pc, #44]	@ (80012ec <scan_i2c_bus+0x70>)
 80012be:	2201      	movs	r2, #1
 80012c0:	701a      	strb	r2, [r3, #0]
            if (addr == 0x46)
 80012c2:	1dfb      	adds	r3, r7, #7
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b46      	cmp	r3, #70	@ 0x46
 80012c8:	d102      	bne.n	80012d0 <scan_i2c_bus+0x54>
                has_sensor_2 = true;
 80012ca:	4b09      	ldr	r3, [pc, #36]	@ (80012f0 <scan_i2c_bus+0x74>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	701a      	strb	r2, [r3, #0]
    for (addr = 3; addr < 0x78; addr++) {
 80012d0:	1dfb      	adds	r3, r7, #7
 80012d2:	781a      	ldrb	r2, [r3, #0]
 80012d4:	1dfb      	adds	r3, r7, #7
 80012d6:	3201      	adds	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b77      	cmp	r3, #119	@ 0x77
 80012e0:	d9dc      	bls.n	800129c <scan_i2c_bus+0x20>
        }
    }
}
 80012e2:	46c0      	nop			@ (mov r8, r8)
 80012e4:	46c0      	nop			@ (mov r8, r8)
 80012e6:	46bd      	mov	sp, r7
 80012e8:	b002      	add	sp, #8
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	20000208 	.word	0x20000208
 80012f0:	20000209 	.word	0x20000209
 80012f4:	20000078 	.word	0x20000078

080012f8 <sensor_init_and_read>:

int sensor_init_and_read(void)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
    if (!has_sensor_1 && !has_sensor_2) {
 80012fe:	4b57      	ldr	r3, [pc, #348]	@ (800145c <sensor_init_and_read+0x164>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2201      	movs	r2, #1
 8001304:	4053      	eors	r3, r2
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d009      	beq.n	8001320 <sensor_init_and_read+0x28>
 800130c:	4b54      	ldr	r3, [pc, #336]	@ (8001460 <sensor_init_and_read+0x168>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2201      	movs	r2, #1
 8001312:	4053      	eors	r3, r2
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b00      	cmp	r3, #0
 8001318:	d002      	beq.n	8001320 <sensor_init_and_read+0x28>
        return -1;
 800131a:	2301      	movs	r3, #1
 800131c:	425b      	negs	r3, r3
 800131e:	e098      	b.n	8001452 <sensor_init_and_read+0x15a>
    }

    error = NO_ERROR;
 8001320:	4b50      	ldr	r3, [pc, #320]	@ (8001464 <sensor_init_and_read+0x16c>)
 8001322:	2200      	movs	r2, #0
 8001324:	801a      	strh	r2, [r3, #0]
    HAL_Delay(100);
 8001326:	2064      	movs	r0, #100	@ 0x64
 8001328:	f000 fbb6 	bl	8001a98 <HAL_Delay>

    if (has_sensor_1) {
 800132c:	4b4b      	ldr	r3, [pc, #300]	@ (800145c <sensor_init_and_read+0x164>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d015      	beq.n	8001360 <sensor_init_and_read+0x68>
        sht4x_init(SHT43_I2C_ADDR_44);
 8001334:	2044      	movs	r0, #68	@ 0x44
 8001336:	f000 fa65 	bl	8001804 <sht4x_init>
        sht4x_soft_reset();
 800133a:	f000 fad7 	bl	80018ec <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 800133e:	4b4a      	ldr	r3, [pc, #296]	@ (8001468 <sensor_init_and_read+0x170>)
 8001340:	0018      	movs	r0, r3
 8001342:	f000 fa35 	bl	80017b0 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT43_I2C_ADDR_44);
 8001346:	2044      	movs	r0, #68	@ 0x44
 8001348:	f000 fa5c 	bl	8001804 <sht4x_init>
        error = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 800134c:	4a47      	ldr	r2, [pc, #284]	@ (800146c <sensor_init_and_read+0x174>)
 800134e:	4b48      	ldr	r3, [pc, #288]	@ (8001470 <sensor_init_and_read+0x178>)
 8001350:	0011      	movs	r1, r2
 8001352:	0018      	movs	r0, r3
 8001354:	f000 fa66 	bl	8001824 <sht4x_measure_high_precision_ticks>
 8001358:	0003      	movs	r3, r0
 800135a:	001a      	movs	r2, r3
 800135c:	4b41      	ldr	r3, [pc, #260]	@ (8001464 <sensor_init_and_read+0x16c>)
 800135e:	801a      	strh	r2, [r3, #0]
    }

    if (has_sensor_2) {
 8001360:	4b3f      	ldr	r3, [pc, #252]	@ (8001460 <sensor_init_and_read+0x168>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d015      	beq.n	8001394 <sensor_init_and_read+0x9c>
        sht4x_init(SHT40_I2C_ADDR_46);
 8001368:	2046      	movs	r0, #70	@ 0x46
 800136a:	f000 fa4b 	bl	8001804 <sht4x_init>
        sht4x_soft_reset();
 800136e:	f000 fabd 	bl	80018ec <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 8001372:	4b3d      	ldr	r3, [pc, #244]	@ (8001468 <sensor_init_and_read+0x170>)
 8001374:	0018      	movs	r0, r3
 8001376:	f000 fa1b 	bl	80017b0 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT40_I2C_ADDR_46);
 800137a:	2046      	movs	r0, #70	@ 0x46
 800137c:	f000 fa42 	bl	8001804 <sht4x_init>
        error = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 8001380:	4a3c      	ldr	r2, [pc, #240]	@ (8001474 <sensor_init_and_read+0x17c>)
 8001382:	4b3d      	ldr	r3, [pc, #244]	@ (8001478 <sensor_init_and_read+0x180>)
 8001384:	0011      	movs	r1, r2
 8001386:	0018      	movs	r0, r3
 8001388:	f000 fa4c 	bl	8001824 <sht4x_measure_high_precision_ticks>
 800138c:	0003      	movs	r3, r0
 800138e:	001a      	movs	r2, r3
 8001390:	4b34      	ldr	r3, [pc, #208]	@ (8001464 <sensor_init_and_read+0x16c>)
 8001392:	801a      	strh	r2, [r3, #0]
    }

    calculated_temp            = (temp_ticks_1 / 100U) + 55U;
 8001394:	4b36      	ldr	r3, [pc, #216]	@ (8001470 <sensor_init_and_read+0x178>)
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	2164      	movs	r1, #100	@ 0x64
 800139a:	0018      	movs	r0, r3
 800139c:	f7fe fec6 	bl	800012c <__udivsi3>
 80013a0:	0003      	movs	r3, r0
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	3337      	adds	r3, #55	@ 0x37
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4b34      	ldr	r3, [pc, #208]	@ (800147c <sensor_init_and_read+0x184>)
 80013aa:	801a      	strh	r2, [r3, #0]
    uint16_t calculated_temp_2 = (temp_ticks_2 / 100U) + 55U;
 80013ac:	4b32      	ldr	r3, [pc, #200]	@ (8001478 <sensor_init_and_read+0x180>)
 80013ae:	881b      	ldrh	r3, [r3, #0]
 80013b0:	2164      	movs	r1, #100	@ 0x64
 80013b2:	0018      	movs	r0, r3
 80013b4:	f7fe feba 	bl	800012c <__udivsi3>
 80013b8:	0003      	movs	r3, r0
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	240e      	movs	r4, #14
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	3237      	adds	r2, #55	@ 0x37
 80013c2:	801a      	strh	r2, [r3, #0]
    calculated_hum             = (hum_ticks_1 / 100U);
 80013c4:	4b29      	ldr	r3, [pc, #164]	@ (800146c <sensor_init_and_read+0x174>)
 80013c6:	881b      	ldrh	r3, [r3, #0]
 80013c8:	2164      	movs	r1, #100	@ 0x64
 80013ca:	0018      	movs	r0, r3
 80013cc:	f7fe feae 	bl	800012c <__udivsi3>
 80013d0:	0003      	movs	r3, r0
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b2a      	ldr	r3, [pc, #168]	@ (8001480 <sensor_init_and_read+0x188>)
 80013d8:	701a      	strb	r2, [r3, #0]
    uint8_t  calculated_hum_2  = (hum_ticks_2 / 100U);
 80013da:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <sensor_init_and_read+0x17c>)
 80013dc:	881b      	ldrh	r3, [r3, #0]
 80013de:	2164      	movs	r1, #100	@ 0x64
 80013e0:	0018      	movs	r0, r3
 80013e2:	f7fe fea3 	bl	800012c <__udivsi3>
 80013e6:	0003      	movs	r3, r0
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	210d      	movs	r1, #13
 80013ec:	187b      	adds	r3, r7, r1
 80013ee:	701a      	strb	r2, [r3, #0]

    // compute raw differences (signed)
    int16_t temp_diff = (int16_t)calculated_temp - (int16_t)calculated_temp_2;
 80013f0:	4b22      	ldr	r3, [pc, #136]	@ (800147c <sensor_init_and_read+0x184>)
 80013f2:	881a      	ldrh	r2, [r3, #0]
 80013f4:	193b      	adds	r3, r7, r4
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	200a      	movs	r0, #10
 80013fe:	183b      	adds	r3, r7, r0
 8001400:	801a      	strh	r2, [r3, #0]
    int16_t hum_diff  = (int16_t)calculated_hum - (int16_t)calculated_hum_2;
 8001402:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <sensor_init_and_read+0x188>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	001a      	movs	r2, r3
 8001408:	187b      	adds	r3, r7, r1
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b29b      	uxth	r3, r3
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b29a      	uxth	r2, r3
 8001412:	2108      	movs	r1, #8
 8001414:	187b      	adds	r3, r7, r1
 8001416:	801a      	strh	r2, [r3, #0]

    // convert to absolute unsigned values
    uint8_t temp_delta = (uint8_t)abs(temp_diff);
 8001418:	183b      	adds	r3, r7, r0
 800141a:	2200      	movs	r2, #0
 800141c:	5e9b      	ldrsh	r3, [r3, r2]
 800141e:	17da      	asrs	r2, r3, #31
 8001420:	189b      	adds	r3, r3, r2
 8001422:	4053      	eors	r3, r2
 8001424:	b29a      	uxth	r2, r3
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	701a      	strb	r2, [r3, #0]
    uint8_t hum_delta  = (uint8_t)abs(hum_diff);
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2200      	movs	r2, #0
 800142e:	5e9b      	ldrsh	r3, [r3, r2]
 8001430:	17da      	asrs	r2, r3, #31
 8001432:	189b      	adds	r3, r3, r2
 8001434:	4053      	eors	r3, r2
 8001436:	b29a      	uxth	r2, r3
 8001438:	1dbb      	adds	r3, r7, #6
 800143a:	701a      	strb	r2, [r3, #0]

    if (error) {
 800143c:	4b09      	ldr	r3, [pc, #36]	@ (8001464 <sensor_init_and_read+0x16c>)
 800143e:	2200      	movs	r2, #0
 8001440:	5e9b      	ldrsh	r3, [r3, r2]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d002      	beq.n	800144c <sensor_init_and_read+0x154>
        return -200;
 8001446:	23c8      	movs	r3, #200	@ 0xc8
 8001448:	425b      	negs	r3, r3
 800144a:	e002      	b.n	8001452 <sensor_init_and_read+0x15a>
    }
    return error;
 800144c:	4b05      	ldr	r3, [pc, #20]	@ (8001464 <sensor_init_and_read+0x16c>)
 800144e:	2200      	movs	r2, #0
 8001450:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001452:	0018      	movs	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	b005      	add	sp, #20
 8001458:	bd90      	pop	{r4, r7, pc}
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	20000208 	.word	0x20000208
 8001460:	20000209 	.word	0x20000209
 8001464:	20000216 	.word	0x20000216
 8001468:	00002710 	.word	0x00002710
 800146c:	2000020c 	.word	0x2000020c
 8001470:	2000020a 	.word	0x2000020a
 8001474:	20000210 	.word	0x20000210
 8001478:	2000020e 	.word	0x2000020e
 800147c:	20000212 	.word	0x20000212
 8001480:	20000214 	.word	0x20000214

08001484 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	b21b      	sxth	r3, r3
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	b21a      	sxth	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3301      	adds	r3, #1
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	b29b      	uxth	r3, r3
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}

080014ac <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	000a      	movs	r2, r1
 80014b6:	1cbb      	adds	r3, r7, #2
 80014b8:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80014ba:	230d      	movs	r3, #13
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	22ff      	movs	r2, #255	@ 0xff
 80014c0:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80014c2:	230e      	movs	r3, #14
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	2200      	movs	r2, #0
 80014c8:	801a      	strh	r2, [r3, #0]
 80014ca:	e038      	b.n	800153e <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 80014cc:	230e      	movs	r3, #14
 80014ce:	18fb      	adds	r3, r7, r3
 80014d0:	881b      	ldrh	r3, [r3, #0]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	18d3      	adds	r3, r2, r3
 80014d6:	7819      	ldrb	r1, [r3, #0]
 80014d8:	220d      	movs	r2, #13
 80014da:	18bb      	adds	r3, r7, r2
 80014dc:	18ba      	adds	r2, r7, r2
 80014de:	7812      	ldrb	r2, [r2, #0]
 80014e0:	404a      	eors	r2, r1
 80014e2:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80014e4:	230c      	movs	r3, #12
 80014e6:	18fb      	adds	r3, r7, r3
 80014e8:	2208      	movs	r2, #8
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	e01c      	b.n	8001528 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 80014ee:	210d      	movs	r1, #13
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	da0a      	bge.n	8001510 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80014fa:	187b      	adds	r3, r7, r1
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	18db      	adds	r3, r3, r3
 8001502:	b25b      	sxtb	r3, r3
 8001504:	2231      	movs	r2, #49	@ 0x31
 8001506:	4053      	eors	r3, r2
 8001508:	b25a      	sxtb	r2, r3
 800150a:	187b      	adds	r3, r7, r1
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	e005      	b.n	800151c <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8001510:	230d      	movs	r3, #13
 8001512:	18fa      	adds	r2, r7, r3
 8001514:	18fb      	adds	r3, r7, r3
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	18db      	adds	r3, r3, r3
 800151a:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800151c:	220c      	movs	r2, #12
 800151e:	18bb      	adds	r3, r7, r2
 8001520:	18ba      	adds	r2, r7, r2
 8001522:	7812      	ldrb	r2, [r2, #0]
 8001524:	3a01      	subs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
 8001528:	230c      	movs	r3, #12
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1dd      	bne.n	80014ee <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001532:	220e      	movs	r2, #14
 8001534:	18bb      	adds	r3, r7, r2
 8001536:	18ba      	adds	r2, r7, r2
 8001538:	8812      	ldrh	r2, [r2, #0]
 800153a:	3201      	adds	r2, #1
 800153c:	801a      	strh	r2, [r3, #0]
 800153e:	230e      	movs	r3, #14
 8001540:	18fa      	adds	r2, r7, r3
 8001542:	1cbb      	adds	r3, r7, #2
 8001544:	8812      	ldrh	r2, [r2, #0]
 8001546:	881b      	ldrh	r3, [r3, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d3bf      	bcc.n	80014cc <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800154c:	230d      	movs	r3, #13
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	781b      	ldrb	r3, [r3, #0]
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b004      	add	sp, #16
 8001558:	bd80      	pop	{r7, pc}

0800155a <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800155a:	b580      	push	{r7, lr}
 800155c:	b082      	sub	sp, #8
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	0008      	movs	r0, r1
 8001564:	0011      	movs	r1, r2
 8001566:	1cbb      	adds	r3, r7, #2
 8001568:	1c02      	adds	r2, r0, #0
 800156a:	801a      	strh	r2, [r3, #0]
 800156c:	1c7b      	adds	r3, r7, #1
 800156e:	1c0a      	adds	r2, r1, #0
 8001570:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8001572:	1cbb      	adds	r3, r7, #2
 8001574:	881a      	ldrh	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	0011      	movs	r1, r2
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff ff96 	bl	80014ac <sensirion_i2c_generate_crc>
 8001580:	0003      	movs	r3, r0
 8001582:	001a      	movs	r2, r3
 8001584:	1c7b      	adds	r3, r7, #1
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4293      	cmp	r3, r2
 800158a:	d001      	beq.n	8001590 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8001590:	2300      	movs	r3, #0
}
 8001592:	0018      	movs	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	b002      	add	sp, #8
 8001598:	bd80      	pop	{r7, pc}

0800159a <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	0008      	movs	r0, r1
 80015a4:	0011      	movs	r1, r2
 80015a6:	1cbb      	adds	r3, r7, #2
 80015a8:	1c02      	adds	r2, r0, #0
 80015aa:	801a      	strh	r2, [r3, #0]
 80015ac:	1c7b      	adds	r3, r7, #1
 80015ae:	1c0a      	adds	r2, r1, #0
 80015b0:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 80015b2:	1cbb      	adds	r3, r7, #2
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	1cba      	adds	r2, r7, #2
 80015b8:	1c59      	adds	r1, r3, #1
 80015ba:	8011      	strh	r1, [r2, #0]
 80015bc:	001a      	movs	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	189b      	adds	r3, r3, r2
 80015c2:	1c7a      	adds	r2, r7, #1
 80015c4:	7812      	ldrb	r2, [r2, #0]
 80015c6:	701a      	strb	r2, [r3, #0]
    return offset;
 80015c8:	1cbb      	adds	r3, r7, #2
 80015ca:	881b      	ldrh	r3, [r3, #0]
}
 80015cc:	0018      	movs	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b002      	add	sp, #8
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6039      	str	r1, [r7, #0]
 80015dc:	0011      	movs	r1, r2
 80015de:	1dfb      	adds	r3, r7, #7
 80015e0:	1c02      	adds	r2, r0, #0
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	1c0a      	adds	r2, r1, #0
 80015e8:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	6839      	ldr	r1, [r7, #0]
 80015f2:	1dfb      	adds	r3, r7, #7
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	0018      	movs	r0, r3
 80015f8:	f000 f8b8 	bl	800176c <sensirion_i2c_hal_write>
 80015fc:	0003      	movs	r3, r0
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b002      	add	sp, #8
 8001604:	bd80      	pop	{r7, pc}

08001606 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8001606:	b5b0      	push	{r4, r5, r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	0011      	movs	r1, r2
 8001610:	1dfb      	adds	r3, r7, #7
 8001612:	1c02      	adds	r2, r0, #0
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	1c0a      	adds	r2, r1, #0
 800161a:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	085b      	lsrs	r3, r3, #1
 8001622:	b29b      	uxth	r3, r3
 8001624:	220a      	movs	r2, #10
 8001626:	18ba      	adds	r2, r7, r2
 8001628:	1c19      	adds	r1, r3, #0
 800162a:	1c0b      	adds	r3, r1, #0
 800162c:	18db      	adds	r3, r3, r3
 800162e:	185b      	adds	r3, r3, r1
 8001630:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	881b      	ldrh	r3, [r3, #0]
 8001636:	2201      	movs	r2, #1
 8001638:	4013      	ands	r3, r2
 800163a:	b29b      	uxth	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8001640:	2304      	movs	r3, #4
 8001642:	e06c      	b.n	800171e <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8001644:	230a      	movs	r3, #10
 8001646:	18fb      	adds	r3, r7, r3
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	b2da      	uxtb	r2, r3
 800164c:	6839      	ldr	r1, [r7, #0]
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	0018      	movs	r0, r3
 8001654:	f000 f868 	bl	8001728 <sensirion_i2c_hal_read>
 8001658:	0003      	movs	r3, r0
 800165a:	001a      	movs	r2, r3
 800165c:	2108      	movs	r1, #8
 800165e:	187b      	adds	r3, r7, r1
 8001660:	801a      	strh	r2, [r3, #0]
    if (error) {
 8001662:	000a      	movs	r2, r1
 8001664:	18bb      	adds	r3, r7, r2
 8001666:	2100      	movs	r1, #0
 8001668:	5e5b      	ldrsh	r3, [r3, r1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <sensirion_i2c_read_data_inplace+0x70>
        return error;
 800166e:	18bb      	adds	r3, r7, r2
 8001670:	2200      	movs	r2, #0
 8001672:	5e9b      	ldrsh	r3, [r3, r2]
 8001674:	e053      	b.n	800171e <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001676:	230e      	movs	r3, #14
 8001678:	18fb      	adds	r3, r7, r3
 800167a:	2200      	movs	r2, #0
 800167c:	801a      	strh	r2, [r3, #0]
 800167e:	230c      	movs	r3, #12
 8001680:	18fb      	adds	r3, r7, r3
 8001682:	2200      	movs	r2, #0
 8001684:	801a      	strh	r2, [r3, #0]
 8001686:	e041      	b.n	800170c <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001688:	210e      	movs	r1, #14
 800168a:	187b      	adds	r3, r7, r1
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8001692:	187b      	adds	r3, r7, r1
 8001694:	881b      	ldrh	r3, [r3, #0]
 8001696:	3302      	adds	r3, #2
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	001a      	movs	r2, r3
 80016a0:	2102      	movs	r1, #2
 80016a2:	f7ff ff5a 	bl	800155a <sensirion_i2c_check_crc>
 80016a6:	0003      	movs	r3, r0
 80016a8:	001a      	movs	r2, r3
 80016aa:	2108      	movs	r1, #8
 80016ac:	187b      	adds	r3, r7, r1
 80016ae:	801a      	strh	r2, [r3, #0]
        if (error) {
 80016b0:	000a      	movs	r2, r1
 80016b2:	18bb      	adds	r3, r7, r2
 80016b4:	2100      	movs	r1, #0
 80016b6:	5e5b      	ldrsh	r3, [r3, r1]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 80016bc:	18bb      	adds	r3, r7, r2
 80016be:	2200      	movs	r2, #0
 80016c0:	5e9b      	ldrsh	r3, [r3, r2]
 80016c2:	e02c      	b.n	800171e <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 80016c4:	240e      	movs	r4, #14
 80016c6:	193b      	adds	r3, r7, r4
 80016c8:	881b      	ldrh	r3, [r3, #0]
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	18d2      	adds	r2, r2, r3
 80016ce:	250c      	movs	r5, #12
 80016d0:	197b      	adds	r3, r7, r5
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	1979      	adds	r1, r7, r5
 80016d6:	1c58      	adds	r0, r3, #1
 80016d8:	8008      	strh	r0, [r1, #0]
 80016da:	0019      	movs	r1, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	185b      	adds	r3, r3, r1
 80016e0:	7812      	ldrb	r2, [r2, #0]
 80016e2:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 80016e4:	193b      	adds	r3, r7, r4
 80016e6:	881b      	ldrh	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	683a      	ldr	r2, [r7, #0]
 80016ec:	18d2      	adds	r2, r2, r3
 80016ee:	197b      	adds	r3, r7, r5
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	1979      	adds	r1, r7, r5
 80016f4:	1c58      	adds	r0, r3, #1
 80016f6:	8008      	strh	r0, [r1, #0]
 80016f8:	0019      	movs	r1, r3
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	185b      	adds	r3, r3, r1
 80016fe:	7812      	ldrb	r2, [r2, #0]
 8001700:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001702:	193b      	adds	r3, r7, r4
 8001704:	193a      	adds	r2, r7, r4
 8001706:	8812      	ldrh	r2, [r2, #0]
 8001708:	3203      	adds	r2, #3
 800170a:	801a      	strh	r2, [r3, #0]
 800170c:	230e      	movs	r3, #14
 800170e:	18fa      	adds	r2, r7, r3
 8001710:	230a      	movs	r3, #10
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	8812      	ldrh	r2, [r2, #0]
 8001716:	881b      	ldrh	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d3b5      	bcc.n	8001688 <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 800171c:	2300      	movs	r3, #0
}
 800171e:	0018      	movs	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	b004      	add	sp, #16
 8001724:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001728 <sensirion_i2c_hal_read>:

void sensirion_i2c_hal_free(void) {
    /* nothing to free */
}

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af02      	add	r7, sp, #8
 800172e:	6039      	str	r1, [r7, #0]
 8001730:	0011      	movs	r1, r2
 8001732:	1dfb      	adds	r3, r7, #7
 8001734:	1c02      	adds	r2, r0, #0
 8001736:	701a      	strb	r2, [r3, #0]
 8001738:	1dbb      	adds	r3, r7, #6
 800173a:	1c0a      	adds	r2, r1, #0
 800173c:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1), data, count, 100);
 800173e:	1dfb      	adds	r3, r7, #7
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b29b      	uxth	r3, r3
 8001744:	18db      	adds	r3, r3, r3
 8001746:	b299      	uxth	r1, r3
 8001748:	1dbb      	adds	r3, r7, #6
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	4805      	ldr	r0, [pc, #20]	@ (8001768 <sensirion_i2c_hal_read+0x40>)
 8001752:	2464      	movs	r4, #100	@ 0x64
 8001754:	9400      	str	r4, [sp, #0]
 8001756:	f000 ff43 	bl	80025e0 <HAL_I2C_Master_Receive>
 800175a:	0003      	movs	r3, r0
 800175c:	b25b      	sxtb	r3, r3
}
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b003      	add	sp, #12
 8001764:	bd90      	pop	{r4, r7, pc}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	20000078 	.word	0x20000078

0800176c <sensirion_i2c_hal_write>:

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint8_t count) {
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b085      	sub	sp, #20
 8001770:	af02      	add	r7, sp, #8
 8001772:	6039      	str	r1, [r7, #0]
 8001774:	0011      	movs	r1, r2
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	1c02      	adds	r2, r0, #0
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	1dbb      	adds	r3, r7, #6
 800177e:	1c0a      	adds	r2, r1, #0
 8001780:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8001782:	1dfb      	adds	r3, r7, #7
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	18db      	adds	r3, r3, r3
 800178a:	b299      	uxth	r1, r3
 800178c:	1dbb      	adds	r3, r7, #6
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b29b      	uxth	r3, r3
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	4805      	ldr	r0, [pc, #20]	@ (80017ac <sensirion_i2c_hal_write+0x40>)
 8001796:	2464      	movs	r4, #100	@ 0x64
 8001798:	9400      	str	r4, [sp, #0]
 800179a:	f000 fdf7 	bl	800238c <HAL_I2C_Master_Transmit>
 800179e:	0003      	movs	r3, r0
 80017a0:	b25b      	sxtb	r3, r3
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b003      	add	sp, #12
 80017a8:	bd90      	pop	{r4, r7, pc}
 80017aa:	46c0      	nop			@ (mov r8, r8)
 80017ac:	20000078 	.word	0x20000078

080017b0 <sensirion_i2c_hal_sleep_usec>:

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	22fa      	movs	r2, #250	@ 0xfa
 80017bc:	0091      	lsls	r1, r2, #2
 80017be:	0018      	movs	r0, r3
 80017c0:	f7fe fcb4 	bl	800012c <__udivsi3>
 80017c4:	0003      	movs	r3, r0
 80017c6:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	22fa      	movs	r2, #250	@ 0xfa
 80017cc:	0091      	lsls	r1, r2, #2
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7fe fd32 	bl	8000238 <__aeabi_uidivmod>
 80017d4:	1e0b      	subs	r3, r1, #0
 80017d6:	d002      	beq.n	80017de <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3301      	adds	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_GetHalVersion() < 0x01010100) {
 80017de:	f000 f99b 	bl	8001b18 <HAL_GetHalVersion>
 80017e2:	0003      	movs	r3, r0
 80017e4:	4a06      	ldr	r2, [pc, #24]	@ (8001800 <sensirion_i2c_hal_sleep_usec+0x50>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d802      	bhi.n	80017f0 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3301      	adds	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	0018      	movs	r0, r3
 80017f4:	f000 f950 	bl	8001a98 <HAL_Delay>
}
 80017f8:	46c0      	nop			@ (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b004      	add	sp, #16
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	010100ff 	.word	0x010100ff

08001804 <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	0002      	movs	r2, r0
 800180c:	1dfb      	adds	r3, r7, #7
 800180e:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 8001810:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <sht4x_init+0x1c>)
 8001812:	1dfa      	adds	r2, r7, #7
 8001814:	7812      	ldrb	r2, [r2, #0]
 8001816:	701a      	strb	r2, [r3, #0]
}
 8001818:	46c0      	nop			@ (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	b002      	add	sp, #8
 800181e:	bd80      	pop	{r7, pc}
 8001820:	2000021e 	.word	0x2000021e

08001824 <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 800182e:	2516      	movs	r5, #22
 8001830:	197b      	adds	r3, r7, r5
 8001832:	2200      	movs	r2, #0
 8001834:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <sht4x_measure_high_precision_ticks+0xbc>)
 8001838:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 800183a:	260e      	movs	r6, #14
 800183c:	19bb      	adds	r3, r7, r6
 800183e:	2200      	movs	r2, #0
 8001840:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 8001842:	19bc      	adds	r4, r7, r6
 8001844:	19bb      	adds	r3, r7, r6
 8001846:	8819      	ldrh	r1, [r3, #0]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	22fd      	movs	r2, #253	@ 0xfd
 800184c:	0018      	movs	r0, r3
 800184e:	f7ff fea4 	bl	800159a <sensirion_i2c_add_command8_to_buffer>
 8001852:	0003      	movs	r3, r0
 8001854:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8001856:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <sht4x_measure_high_precision_ticks+0xc0>)
 8001858:	7818      	ldrb	r0, [r3, #0]
 800185a:	197c      	adds	r4, r7, r5
 800185c:	19bb      	adds	r3, r7, r6
 800185e:	881a      	ldrh	r2, [r3, #0]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	0019      	movs	r1, r3
 8001864:	f7ff feb6 	bl	80015d4 <sensirion_i2c_write_data>
 8001868:	0003      	movs	r3, r0
 800186a:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 800186c:	197b      	adds	r3, r7, r5
 800186e:	2200      	movs	r2, #0
 8001870:	5e9b      	ldrsh	r3, [r3, r2]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 8001876:	197b      	adds	r3, r7, r5
 8001878:	2200      	movs	r2, #0
 800187a:	5e9b      	ldrsh	r3, [r3, r2]
 800187c:	e02c      	b.n	80018d8 <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 800187e:	4b1a      	ldr	r3, [pc, #104]	@ (80018e8 <sht4x_measure_high_precision_ticks+0xc4>)
 8001880:	0018      	movs	r0, r3
 8001882:	f7ff ff95 	bl	80017b0 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 8001886:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <sht4x_measure_high_precision_ticks+0xc0>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2516      	movs	r5, #22
 800188c:	197c      	adds	r4, r7, r5
 800188e:	6939      	ldr	r1, [r7, #16]
 8001890:	2204      	movs	r2, #4
 8001892:	0018      	movs	r0, r3
 8001894:	f7ff feb7 	bl	8001606 <sensirion_i2c_read_data_inplace>
 8001898:	0003      	movs	r3, r0
 800189a:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 800189c:	197b      	adds	r3, r7, r5
 800189e:	2200      	movs	r2, #0
 80018a0:	5e9b      	ldrsh	r3, [r3, r2]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 80018a6:	197b      	adds	r3, r7, r5
 80018a8:	2200      	movs	r2, #0
 80018aa:	5e9b      	ldrsh	r3, [r3, r2]
 80018ac:	e014      	b.n	80018d8 <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	0018      	movs	r0, r3
 80018b2:	f7ff fde7 	bl	8001484 <sensirion_common_bytes_to_uint16_t>
 80018b6:	0003      	movs	r3, r0
 80018b8:	001a      	movs	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	3302      	adds	r3, #2
 80018c2:	0018      	movs	r0, r3
 80018c4:	f7ff fdde 	bl	8001484 <sensirion_common_bytes_to_uint16_t>
 80018c8:	0003      	movs	r3, r0
 80018ca:	001a      	movs	r2, r3
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	801a      	strh	r2, [r3, #0]
    return local_error;
 80018d0:	2316      	movs	r3, #22
 80018d2:	18fb      	adds	r3, r7, r3
 80018d4:	2200      	movs	r2, #0
 80018d6:	5e9b      	ldrsh	r3, [r3, r2]
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b007      	add	sp, #28
 80018de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018e0:	20000218 	.word	0x20000218
 80018e4:	2000021e 	.word	0x2000021e
 80018e8:	00002710 	.word	0x00002710

080018ec <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 80018ec:	b5b0      	push	{r4, r5, r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 80018f2:	250e      	movs	r5, #14
 80018f4:	197b      	adds	r3, r7, r5
 80018f6:	2200      	movs	r2, #0
 80018f8:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 80018fa:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <sht4x_soft_reset+0x6c>)
 80018fc:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 80018fe:	1dbb      	adds	r3, r7, #6
 8001900:	2200      	movs	r2, #0
 8001902:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 8001904:	1dbc      	adds	r4, r7, #6
 8001906:	1dbb      	adds	r3, r7, #6
 8001908:	8819      	ldrh	r1, [r3, #0]
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2294      	movs	r2, #148	@ 0x94
 800190e:	0018      	movs	r0, r3
 8001910:	f7ff fe43 	bl	800159a <sensirion_i2c_add_command8_to_buffer>
 8001914:	0003      	movs	r3, r0
 8001916:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8001918:	4b10      	ldr	r3, [pc, #64]	@ (800195c <sht4x_soft_reset+0x70>)
 800191a:	7818      	ldrb	r0, [r3, #0]
 800191c:	197c      	adds	r4, r7, r5
 800191e:	1dbb      	adds	r3, r7, #6
 8001920:	881a      	ldrh	r2, [r3, #0]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	0019      	movs	r1, r3
 8001926:	f7ff fe55 	bl	80015d4 <sensirion_i2c_write_data>
 800192a:	0003      	movs	r3, r0
 800192c:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 800192e:	197b      	adds	r3, r7, r5
 8001930:	2200      	movs	r2, #0
 8001932:	5e9b      	ldrsh	r3, [r3, r2]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <sht4x_soft_reset+0x54>
        return local_error;
 8001938:	197b      	adds	r3, r7, r5
 800193a:	2200      	movs	r2, #0
 800193c:	5e9b      	ldrsh	r3, [r3, r2]
 800193e:	e007      	b.n	8001950 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8001940:	4b07      	ldr	r3, [pc, #28]	@ (8001960 <sht4x_soft_reset+0x74>)
 8001942:	0018      	movs	r0, r3
 8001944:	f7ff ff34 	bl	80017b0 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8001948:	230e      	movs	r3, #14
 800194a:	18fb      	adds	r3, r7, r3
 800194c:	2200      	movs	r2, #0
 800194e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	b004      	add	sp, #16
 8001956:	bdb0      	pop	{r4, r5, r7, pc}
 8001958:	20000218 	.word	0x20000218
 800195c:	2000021e 	.word	0x2000021e
 8001960:	00002710 	.word	0x00002710

08001964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001964:	480d      	ldr	r0, [pc, #52]	@ (800199c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001966:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001968:	f7ff fc82 	bl	8001270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800196c:	480c      	ldr	r0, [pc, #48]	@ (80019a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800196e:	490d      	ldr	r1, [pc, #52]	@ (80019a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001970:	4a0d      	ldr	r2, [pc, #52]	@ (80019a8 <LoopForever+0xe>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001984:	4c0a      	ldr	r4, [pc, #40]	@ (80019b0 <LoopForever+0x16>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001992:	f003 fea9 	bl	80056e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001996:	f7ff f813 	bl	80009c0 <main>

0800199a <LoopForever>:

LoopForever:
    b LoopForever
 800199a:	e7fe      	b.n	800199a <LoopForever>
   ldr   r0, =_estack
 800199c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80019a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80019a8:	08006338 	.word	0x08006338
  ldr r2, =_sbss
 80019ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80019b0:	2000036c 	.word	0x2000036c

080019b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC1_COMP_IRQHandler>
	...

080019b8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019be:	1dfb      	adds	r3, r7, #7
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80019c4:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <HAL_Init+0x3c>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b0a      	ldr	r3, [pc, #40]	@ (80019f4 <HAL_Init+0x3c>)
 80019ca:	2140      	movs	r1, #64	@ 0x40
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019d0:	2003      	movs	r0, #3
 80019d2:	f000 f811 	bl	80019f8 <HAL_InitTick>
 80019d6:	1e03      	subs	r3, r0, #0
 80019d8:	d003      	beq.n	80019e2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80019da:	1dfb      	adds	r3, r7, #7
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
 80019e0:	e001      	b.n	80019e6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019e2:	f7ff fab1 	bl	8000f48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	781b      	ldrb	r3, [r3, #0]
}
 80019ea:	0018      	movs	r0, r3
 80019ec:	46bd      	mov	sp, r7
 80019ee:	b002      	add	sp, #8
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	46c0      	nop			@ (mov r8, r8)
 80019f4:	40022000 	.word	0x40022000

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b590      	push	{r4, r7, lr}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a00:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <HAL_InitTick+0x5c>)
 8001a02:	681c      	ldr	r4, [r3, #0]
 8001a04:	4b14      	ldr	r3, [pc, #80]	@ (8001a58 <HAL_InitTick+0x60>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	0019      	movs	r1, r3
 8001a0a:	23fa      	movs	r3, #250	@ 0xfa
 8001a0c:	0098      	lsls	r0, r3, #2
 8001a0e:	f7fe fb8d 	bl	800012c <__udivsi3>
 8001a12:	0003      	movs	r3, r0
 8001a14:	0019      	movs	r1, r3
 8001a16:	0020      	movs	r0, r4
 8001a18:	f7fe fb88 	bl	800012c <__udivsi3>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f000 f953 	bl	8001cca <HAL_SYSTICK_Config>
 8001a24:	1e03      	subs	r3, r0, #0
 8001a26:	d001      	beq.n	8001a2c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e00f      	b.n	8001a4c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d80b      	bhi.n	8001a4a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	2301      	movs	r3, #1
 8001a36:	425b      	negs	r3, r3
 8001a38:	2200      	movs	r2, #0
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	f000 f920 	bl	8001c80 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a40:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_InitTick+0x64>)
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e000      	b.n	8001a4c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b003      	add	sp, #12
 8001a52:	bd90      	pop	{r4, r7, pc}
 8001a54:	20000000 	.word	0x20000000
 8001a58:	20000008 	.word	0x20000008
 8001a5c:	20000004 	.word	0x20000004

08001a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <HAL_IncTick+0x1c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	001a      	movs	r2, r3
 8001a6a:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <HAL_IncTick+0x20>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	18d2      	adds	r2, r2, r3
 8001a70:	4b03      	ldr	r3, [pc, #12]	@ (8001a80 <HAL_IncTick+0x20>)
 8001a72:	601a      	str	r2, [r3, #0]
}
 8001a74:	46c0      	nop			@ (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	20000008 	.word	0x20000008
 8001a80:	20000220 	.word	0x20000220

08001a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b02      	ldr	r3, [pc, #8]	@ (8001a94 <HAL_GetTick+0x10>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	20000220 	.word	0x20000220

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff fff0 	bl	8001a84 <HAL_GetTick>
 8001aa4:	0003      	movs	r3, r0
 8001aa6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <HAL_Delay+0x44>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	001a      	movs	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	189b      	adds	r3, r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001abe:	46c0      	nop			@ (mov r8, r8)
 8001ac0:	f7ff ffe0 	bl	8001a84 <HAL_GetTick>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	46c0      	nop			@ (mov r8, r8)
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b004      	add	sp, #16
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	20000008 	.word	0x20000008

08001ae0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001ae4:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <HAL_SuspendTick+0x18>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b03      	ldr	r3, [pc, #12]	@ (8001af8 <HAL_SuspendTick+0x18>)
 8001aea:	2102      	movs	r1, #2
 8001aec:	438a      	bics	r2, r1
 8001aee:	601a      	str	r2, [r3, #0]
}
 8001af0:	46c0      	nop			@ (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			@ (mov r8, r8)
 8001af8:	e000e010 	.word	0xe000e010

08001afc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001b00:	4b04      	ldr	r3, [pc, #16]	@ (8001b14 <HAL_ResumeTick+0x18>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b03      	ldr	r3, [pc, #12]	@ (8001b14 <HAL_ResumeTick+0x18>)
 8001b06:	2102      	movs	r1, #2
 8001b08:	430a      	orrs	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]
}
 8001b0c:	46c0      	nop			@ (mov r8, r8)
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	e000e010 	.word	0xe000e010

08001b18 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8001b1c:	4b01      	ldr	r3, [pc, #4]	@ (8001b24 <HAL_GetHalVersion+0xc>)
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	010a0700 	.word	0x010a0700

08001b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	0002      	movs	r2, r0
 8001b30:	1dfb      	adds	r3, r7, #7
 8001b32:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	1dfb      	adds	r3, r7, #7
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b3a:	d809      	bhi.n	8001b50 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3c:	1dfb      	adds	r3, r7, #7
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	001a      	movs	r2, r3
 8001b42:	231f      	movs	r3, #31
 8001b44:	401a      	ands	r2, r3
 8001b46:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <__NVIC_EnableIRQ+0x30>)
 8001b48:	2101      	movs	r1, #1
 8001b4a:	4091      	lsls	r1, r2
 8001b4c:	000a      	movs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
  }
}
 8001b50:	46c0      	nop			@ (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b002      	add	sp, #8
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	0002      	movs	r2, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	1dfb      	adds	r3, r7, #7
 8001b68:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	1dfb      	adds	r3, r7, #7
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b70:	d828      	bhi.n	8001bc4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b72:	4a2f      	ldr	r2, [pc, #188]	@ (8001c30 <__NVIC_SetPriority+0xd4>)
 8001b74:	1dfb      	adds	r3, r7, #7
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b25b      	sxtb	r3, r3
 8001b7a:	089b      	lsrs	r3, r3, #2
 8001b7c:	33c0      	adds	r3, #192	@ 0xc0
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	589b      	ldr	r3, [r3, r2]
 8001b82:	1dfa      	adds	r2, r7, #7
 8001b84:	7812      	ldrb	r2, [r2, #0]
 8001b86:	0011      	movs	r1, r2
 8001b88:	2203      	movs	r2, #3
 8001b8a:	400a      	ands	r2, r1
 8001b8c:	00d2      	lsls	r2, r2, #3
 8001b8e:	21ff      	movs	r1, #255	@ 0xff
 8001b90:	4091      	lsls	r1, r2
 8001b92:	000a      	movs	r2, r1
 8001b94:	43d2      	mvns	r2, r2
 8001b96:	401a      	ands	r2, r3
 8001b98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	019b      	lsls	r3, r3, #6
 8001b9e:	22ff      	movs	r2, #255	@ 0xff
 8001ba0:	401a      	ands	r2, r3
 8001ba2:	1dfb      	adds	r3, r7, #7
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	2303      	movs	r3, #3
 8001baa:	4003      	ands	r3, r0
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb0:	481f      	ldr	r0, [pc, #124]	@ (8001c30 <__NVIC_SetPriority+0xd4>)
 8001bb2:	1dfb      	adds	r3, r7, #7
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b25b      	sxtb	r3, r3
 8001bb8:	089b      	lsrs	r3, r3, #2
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	33c0      	adds	r3, #192	@ 0xc0
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bc2:	e031      	b.n	8001c28 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bc4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c34 <__NVIC_SetPriority+0xd8>)
 8001bc6:	1dfb      	adds	r3, r7, #7
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	0019      	movs	r1, r3
 8001bcc:	230f      	movs	r3, #15
 8001bce:	400b      	ands	r3, r1
 8001bd0:	3b08      	subs	r3, #8
 8001bd2:	089b      	lsrs	r3, r3, #2
 8001bd4:	3306      	adds	r3, #6
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	18d3      	adds	r3, r2, r3
 8001bda:	3304      	adds	r3, #4
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	1dfa      	adds	r2, r7, #7
 8001be0:	7812      	ldrb	r2, [r2, #0]
 8001be2:	0011      	movs	r1, r2
 8001be4:	2203      	movs	r2, #3
 8001be6:	400a      	ands	r2, r1
 8001be8:	00d2      	lsls	r2, r2, #3
 8001bea:	21ff      	movs	r1, #255	@ 0xff
 8001bec:	4091      	lsls	r1, r2
 8001bee:	000a      	movs	r2, r1
 8001bf0:	43d2      	mvns	r2, r2
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	019b      	lsls	r3, r3, #6
 8001bfa:	22ff      	movs	r2, #255	@ 0xff
 8001bfc:	401a      	ands	r2, r3
 8001bfe:	1dfb      	adds	r3, r7, #7
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	0018      	movs	r0, r3
 8001c04:	2303      	movs	r3, #3
 8001c06:	4003      	ands	r3, r0
 8001c08:	00db      	lsls	r3, r3, #3
 8001c0a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c0c:	4809      	ldr	r0, [pc, #36]	@ (8001c34 <__NVIC_SetPriority+0xd8>)
 8001c0e:	1dfb      	adds	r3, r7, #7
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	001c      	movs	r4, r3
 8001c14:	230f      	movs	r3, #15
 8001c16:	4023      	ands	r3, r4
 8001c18:	3b08      	subs	r3, #8
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	3306      	adds	r3, #6
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	18c3      	adds	r3, r0, r3
 8001c24:	3304      	adds	r3, #4
 8001c26:	601a      	str	r2, [r3, #0]
}
 8001c28:	46c0      	nop			@ (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b003      	add	sp, #12
 8001c2e:	bd90      	pop	{r4, r7, pc}
 8001c30:	e000e100 	.word	0xe000e100
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	1e5a      	subs	r2, r3, #1
 8001c44:	2380      	movs	r3, #128	@ 0x80
 8001c46:	045b      	lsls	r3, r3, #17
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d301      	bcc.n	8001c50 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e010      	b.n	8001c72 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c50:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <SysTick_Config+0x44>)
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	3a01      	subs	r2, #1
 8001c56:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c58:	2301      	movs	r3, #1
 8001c5a:	425b      	negs	r3, r3
 8001c5c:	2103      	movs	r1, #3
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f7ff ff7c 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <SysTick_Config+0x44>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <SysTick_Config+0x44>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b002      	add	sp, #8
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			@ (mov r8, r8)
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	210f      	movs	r1, #15
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	1c02      	adds	r2, r0, #0
 8001c90:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	b25b      	sxtb	r3, r3
 8001c9a:	0011      	movs	r1, r2
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f7ff ff5d 	bl	8001b5c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b004      	add	sp, #16
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	0002      	movs	r2, r0
 8001cb2:	1dfb      	adds	r3, r7, #7
 8001cb4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb6:	1dfb      	adds	r3, r7, #7
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	b25b      	sxtb	r3, r3
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7ff ff33 	bl	8001b28 <__NVIC_EnableIRQ>
}
 8001cc2:	46c0      	nop			@ (mov r8, r8)
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b002      	add	sp, #8
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7ff ffaf 	bl	8001c38 <SysTick_Config>
 8001cda:	0003      	movs	r3, r0
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b002      	add	sp, #8
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cfa:	e155      	b.n	8001fa8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2101      	movs	r1, #1
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4091      	lsls	r1, r2
 8001d06:	000a      	movs	r2, r1
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d100      	bne.n	8001d14 <HAL_GPIO_Init+0x30>
 8001d12:	e146      	b.n	8001fa2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2203      	movs	r2, #3
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d005      	beq.n	8001d2c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2203      	movs	r2, #3
 8001d26:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d130      	bne.n	8001d8e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	0013      	movs	r3, r2
 8001d3c:	43da      	mvns	r2, r3
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68da      	ldr	r2, [r3, #12]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	0013      	movs	r3, r2
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d62:	2201      	movs	r2, #1
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
 8001d68:	0013      	movs	r3, r2
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	091b      	lsrs	r3, r3, #4
 8001d78:	2201      	movs	r2, #1
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
 8001d80:	0013      	movs	r3, r2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2203      	movs	r2, #3
 8001d94:	4013      	ands	r3, r2
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d017      	beq.n	8001dca <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	409a      	lsls	r2, r3
 8001da8:	0013      	movs	r3, r2
 8001daa:	43da      	mvns	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	409a      	lsls	r2, r3
 8001dbc:	0013      	movs	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2203      	movs	r2, #3
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d123      	bne.n	8001e1e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	08da      	lsrs	r2, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3208      	adds	r2, #8
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	58d3      	ldr	r3, [r2, r3]
 8001de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	2207      	movs	r2, #7
 8001de8:	4013      	ands	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	220f      	movs	r2, #15
 8001dee:	409a      	lsls	r2, r3
 8001df0:	0013      	movs	r3, r2
 8001df2:	43da      	mvns	r2, r3
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	691a      	ldr	r2, [r3, #16]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	2107      	movs	r1, #7
 8001e02:	400b      	ands	r3, r1
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	409a      	lsls	r2, r3
 8001e08:	0013      	movs	r3, r2
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	08da      	lsrs	r2, r3, #3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3208      	adds	r2, #8
 8001e18:	0092      	lsls	r2, r2, #2
 8001e1a:	6939      	ldr	r1, [r7, #16]
 8001e1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	409a      	lsls	r2, r3
 8001e2c:	0013      	movs	r3, r2
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	4013      	ands	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	005b      	lsls	r3, r3, #1
 8001e42:	409a      	lsls	r2, r3
 8001e44:	0013      	movs	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	23c0      	movs	r3, #192	@ 0xc0
 8001e58:	029b      	lsls	r3, r3, #10
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d100      	bne.n	8001e60 <HAL_GPIO_Init+0x17c>
 8001e5e:	e0a0      	b.n	8001fa2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e60:	4b57      	ldr	r3, [pc, #348]	@ (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001e62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e64:	4b56      	ldr	r3, [pc, #344]	@ (8001fc0 <HAL_GPIO_Init+0x2dc>)
 8001e66:	2101      	movs	r1, #1
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6c:	4a55      	ldr	r2, [pc, #340]	@ (8001fc4 <HAL_GPIO_Init+0x2e0>)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	3302      	adds	r3, #2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	589b      	ldr	r3, [r3, r2]
 8001e78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	4013      	ands	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	220f      	movs	r2, #15
 8001e84:	409a      	lsls	r2, r3
 8001e86:	0013      	movs	r3, r2
 8001e88:	43da      	mvns	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	23a0      	movs	r3, #160	@ 0xa0
 8001e94:	05db      	lsls	r3, r3, #23
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d01f      	beq.n	8001eda <HAL_GPIO_Init+0x1f6>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4a      	ldr	r2, [pc, #296]	@ (8001fc8 <HAL_GPIO_Init+0x2e4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d019      	beq.n	8001ed6 <HAL_GPIO_Init+0x1f2>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a49      	ldr	r2, [pc, #292]	@ (8001fcc <HAL_GPIO_Init+0x2e8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_GPIO_Init+0x1ee>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a48      	ldr	r2, [pc, #288]	@ (8001fd0 <HAL_GPIO_Init+0x2ec>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d00d      	beq.n	8001ece <HAL_GPIO_Init+0x1ea>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a47      	ldr	r2, [pc, #284]	@ (8001fd4 <HAL_GPIO_Init+0x2f0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d007      	beq.n	8001eca <HAL_GPIO_Init+0x1e6>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a46      	ldr	r2, [pc, #280]	@ (8001fd8 <HAL_GPIO_Init+0x2f4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d101      	bne.n	8001ec6 <HAL_GPIO_Init+0x1e2>
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	e00a      	b.n	8001edc <HAL_GPIO_Init+0x1f8>
 8001ec6:	2306      	movs	r3, #6
 8001ec8:	e008      	b.n	8001edc <HAL_GPIO_Init+0x1f8>
 8001eca:	2304      	movs	r3, #4
 8001ecc:	e006      	b.n	8001edc <HAL_GPIO_Init+0x1f8>
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e004      	b.n	8001edc <HAL_GPIO_Init+0x1f8>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e002      	b.n	8001edc <HAL_GPIO_Init+0x1f8>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_GPIO_Init+0x1f8>
 8001eda:	2300      	movs	r3, #0
 8001edc:	697a      	ldr	r2, [r7, #20]
 8001ede:	2103      	movs	r1, #3
 8001ee0:	400a      	ands	r2, r1
 8001ee2:	0092      	lsls	r2, r2, #2
 8001ee4:	4093      	lsls	r3, r2
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eec:	4935      	ldr	r1, [pc, #212]	@ (8001fc4 <HAL_GPIO_Init+0x2e0>)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efa:	4b38      	ldr	r3, [pc, #224]	@ (8001fdc <HAL_GPIO_Init+0x2f8>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	43da      	mvns	r2, r3
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4013      	ands	r3, r2
 8001f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	2380      	movs	r3, #128	@ 0x80
 8001f10:	035b      	lsls	r3, r3, #13
 8001f12:	4013      	ands	r3, r2
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8001fdc <HAL_GPIO_Init+0x2f8>)
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001f24:	4b2d      	ldr	r3, [pc, #180]	@ (8001fdc <HAL_GPIO_Init+0x2f8>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	43da      	mvns	r2, r3
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	2380      	movs	r3, #128	@ 0x80
 8001f3a:	039b      	lsls	r3, r3, #14
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f48:	4b24      	ldr	r3, [pc, #144]	@ (8001fdc <HAL_GPIO_Init+0x2f8>)
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001f4e:	4b23      	ldr	r3, [pc, #140]	@ (8001fdc <HAL_GPIO_Init+0x2f8>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	43da      	mvns	r2, r3
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	2380      	movs	r3, #128	@ 0x80
 8001f64:	029b      	lsls	r3, r3, #10
 8001f66:	4013      	ands	r3, r2
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <HAL_GPIO_Init+0x2f8>)
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f78:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_GPIO_Init+0x2f8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	43da      	mvns	r2, r3
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4013      	ands	r3, r2
 8001f86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	2380      	movs	r3, #128	@ 0x80
 8001f8e:	025b      	lsls	r3, r3, #9
 8001f90:	4013      	ands	r3, r2
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <HAL_GPIO_Init+0x2f8>)
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	40da      	lsrs	r2, r3
 8001fb0:	1e13      	subs	r3, r2, #0
 8001fb2:	d000      	beq.n	8001fb6 <HAL_GPIO_Init+0x2d2>
 8001fb4:	e6a2      	b.n	8001cfc <HAL_GPIO_Init+0x18>
  }
}
 8001fb6:	46c0      	nop			@ (mov r8, r8)
 8001fb8:	46c0      	nop			@ (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b006      	add	sp, #24
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	50000400 	.word	0x50000400
 8001fcc:	50000800 	.word	0x50000800
 8001fd0:	50000c00 	.word	0x50000c00
 8001fd4:	50001000 	.word	0x50001000
 8001fd8:	50001c00 	.word	0x50001c00
 8001fdc:	40010400 	.word	0x40010400

08001fe0 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8001ff6:	e0bc      	b.n	8002172 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d100      	bne.n	800200c <HAL_GPIO_DeInit+0x2c>
 800200a:	e0af      	b.n	800216c <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800200c:	4a5e      	ldr	r2, [pc, #376]	@ (8002188 <HAL_GPIO_DeInit+0x1a8>)
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	3302      	adds	r3, #2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	589b      	ldr	r3, [r3, r2]
 8002018:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	2203      	movs	r2, #3
 800201e:	4013      	ands	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	220f      	movs	r2, #15
 8002024:	409a      	lsls	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4013      	ands	r3, r2
 800202a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	23a0      	movs	r3, #160	@ 0xa0
 8002030:	05db      	lsls	r3, r3, #23
 8002032:	429a      	cmp	r2, r3
 8002034:	d01f      	beq.n	8002076 <HAL_GPIO_DeInit+0x96>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a54      	ldr	r2, [pc, #336]	@ (800218c <HAL_GPIO_DeInit+0x1ac>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d019      	beq.n	8002072 <HAL_GPIO_DeInit+0x92>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a53      	ldr	r2, [pc, #332]	@ (8002190 <HAL_GPIO_DeInit+0x1b0>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_DeInit+0x8e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a52      	ldr	r2, [pc, #328]	@ (8002194 <HAL_GPIO_DeInit+0x1b4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_DeInit+0x8a>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a51      	ldr	r2, [pc, #324]	@ (8002198 <HAL_GPIO_DeInit+0x1b8>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_DeInit+0x86>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a50      	ldr	r2, [pc, #320]	@ (800219c <HAL_GPIO_DeInit+0x1bc>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_DeInit+0x82>
 800205e:	2305      	movs	r3, #5
 8002060:	e00a      	b.n	8002078 <HAL_GPIO_DeInit+0x98>
 8002062:	2306      	movs	r3, #6
 8002064:	e008      	b.n	8002078 <HAL_GPIO_DeInit+0x98>
 8002066:	2304      	movs	r3, #4
 8002068:	e006      	b.n	8002078 <HAL_GPIO_DeInit+0x98>
 800206a:	2303      	movs	r3, #3
 800206c:	e004      	b.n	8002078 <HAL_GPIO_DeInit+0x98>
 800206e:	2302      	movs	r3, #2
 8002070:	e002      	b.n	8002078 <HAL_GPIO_DeInit+0x98>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <HAL_GPIO_DeInit+0x98>
 8002076:	2300      	movs	r3, #0
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	2103      	movs	r1, #3
 800207c:	400a      	ands	r2, r1
 800207e:	0092      	lsls	r2, r2, #2
 8002080:	4093      	lsls	r3, r2
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	429a      	cmp	r2, r3
 8002086:	d132      	bne.n	80020ee <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002088:	4b45      	ldr	r3, [pc, #276]	@ (80021a0 <HAL_GPIO_DeInit+0x1c0>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	43d9      	mvns	r1, r3
 8002090:	4b43      	ldr	r3, [pc, #268]	@ (80021a0 <HAL_GPIO_DeInit+0x1c0>)
 8002092:	400a      	ands	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002096:	4b42      	ldr	r3, [pc, #264]	@ (80021a0 <HAL_GPIO_DeInit+0x1c0>)
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	43d9      	mvns	r1, r3
 800209e:	4b40      	ldr	r3, [pc, #256]	@ (80021a0 <HAL_GPIO_DeInit+0x1c0>)
 80020a0:	400a      	ands	r2, r1
 80020a2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80020a4:	4b3e      	ldr	r3, [pc, #248]	@ (80021a0 <HAL_GPIO_DeInit+0x1c0>)
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43d9      	mvns	r1, r3
 80020ac:	4b3c      	ldr	r3, [pc, #240]	@ (80021a0 <HAL_GPIO_DeInit+0x1c0>)
 80020ae:	400a      	ands	r2, r1
 80020b0:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80020b2:	4b3b      	ldr	r3, [pc, #236]	@ (80021a0 <HAL_GPIO_DeInit+0x1c0>)
 80020b4:	689a      	ldr	r2, [r3, #8]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	43d9      	mvns	r1, r3
 80020ba:	4b39      	ldr	r3, [pc, #228]	@ (80021a0 <HAL_GPIO_DeInit+0x1c0>)
 80020bc:	400a      	ands	r2, r1
 80020be:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	2203      	movs	r2, #3
 80020c4:	4013      	ands	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	220f      	movs	r2, #15
 80020ca:	409a      	lsls	r2, r3
 80020cc:	0013      	movs	r3, r2
 80020ce:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80020d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002188 <HAL_GPIO_DeInit+0x1a8>)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	089b      	lsrs	r3, r3, #2
 80020d6:	3302      	adds	r3, #2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	589a      	ldr	r2, [r3, r2]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	43d9      	mvns	r1, r3
 80020e0:	4829      	ldr	r0, [pc, #164]	@ (8002188 <HAL_GPIO_DeInit+0x1a8>)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	400a      	ands	r2, r1
 80020e8:	3302      	adds	r3, #2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2103      	movs	r1, #3
 80020f8:	4099      	lsls	r1, r3
 80020fa:	000b      	movs	r3, r1
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	08da      	lsrs	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3208      	adds	r2, #8
 800210a:	0092      	lsls	r2, r2, #2
 800210c:	58d3      	ldr	r3, [r2, r3]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	2107      	movs	r1, #7
 8002112:	400a      	ands	r2, r1
 8002114:	0092      	lsls	r2, r2, #2
 8002116:	210f      	movs	r1, #15
 8002118:	4091      	lsls	r1, r2
 800211a:	000a      	movs	r2, r1
 800211c:	43d1      	mvns	r1, r2
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	08d2      	lsrs	r2, r2, #3
 8002122:	4019      	ands	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3208      	adds	r2, #8
 8002128:	0092      	lsls	r2, r2, #2
 800212a:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	0052      	lsls	r2, r2, #1
 8002134:	2103      	movs	r1, #3
 8002136:	4091      	lsls	r1, r2
 8002138:	000a      	movs	r2, r1
 800213a:	43d2      	mvns	r2, r2
 800213c:	401a      	ands	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2101      	movs	r1, #1
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	4091      	lsls	r1, r2
 800214c:	000a      	movs	r2, r1
 800214e:	43d2      	mvns	r2, r2
 8002150:	401a      	ands	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	0052      	lsls	r2, r2, #1
 800215e:	2103      	movs	r1, #3
 8002160:	4091      	lsls	r1, r2
 8002162:	000a      	movs	r2, r1
 8002164:	43d2      	mvns	r2, r2
 8002166:	401a      	ands	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	609a      	str	r2, [r3, #8]
    }
    position++;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	3301      	adds	r3, #1
 8002170:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	40da      	lsrs	r2, r3
 8002178:	1e13      	subs	r3, r2, #0
 800217a:	d000      	beq.n	800217e <HAL_GPIO_DeInit+0x19e>
 800217c:	e73c      	b.n	8001ff8 <HAL_GPIO_DeInit+0x18>
  }
}
 800217e:	46c0      	nop			@ (mov r8, r8)
 8002180:	46c0      	nop			@ (mov r8, r8)
 8002182:	46bd      	mov	sp, r7
 8002184:	b006      	add	sp, #24
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40010000 	.word	0x40010000
 800218c:	50000400 	.word	0x50000400
 8002190:	50000800 	.word	0x50000800
 8002194:	50000c00 	.word	0x50000c00
 8002198:	50001000 	.word	0x50001000
 800219c:	50001c00 	.word	0x50001c00
 80021a0:	40010400 	.word	0x40010400

080021a4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	0008      	movs	r0, r1
 80021ae:	0011      	movs	r1, r2
 80021b0:	1cbb      	adds	r3, r7, #2
 80021b2:	1c02      	adds	r2, r0, #0
 80021b4:	801a      	strh	r2, [r3, #0]
 80021b6:	1c7b      	adds	r3, r7, #1
 80021b8:	1c0a      	adds	r2, r1, #0
 80021ba:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021bc:	1c7b      	adds	r3, r7, #1
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d004      	beq.n	80021ce <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c4:	1cbb      	adds	r3, r7, #2
 80021c6:	881a      	ldrh	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80021cc:	e003      	b.n	80021d6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80021ce:	1cbb      	adds	r3, r7, #2
 80021d0:	881a      	ldrh	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80021d6:	46c0      	nop			@ (mov r8, r8)
 80021d8:	46bd      	mov	sp, r7
 80021da:	b002      	add	sp, #8
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e08f      	b.n	8002312 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2241      	movs	r2, #65	@ 0x41
 80021f6:	5c9b      	ldrb	r3, [r3, r2]
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d107      	bne.n	800220e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2240      	movs	r2, #64	@ 0x40
 8002202:	2100      	movs	r1, #0
 8002204:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	0018      	movs	r0, r3
 800220a:	f7fe feb1 	bl	8000f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2241      	movs	r2, #65	@ 0x41
 8002212:	2124      	movs	r1, #36	@ 0x24
 8002214:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2101      	movs	r1, #1
 8002222:	438a      	bics	r2, r1
 8002224:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	493b      	ldr	r1, [pc, #236]	@ (800231c <HAL_I2C_Init+0x13c>)
 8002230:	400a      	ands	r2, r1
 8002232:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4938      	ldr	r1, [pc, #224]	@ (8002320 <HAL_I2C_Init+0x140>)
 8002240:	400a      	ands	r2, r1
 8002242:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d108      	bne.n	800225e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2180      	movs	r1, #128	@ 0x80
 8002256:	0209      	lsls	r1, r1, #8
 8002258:	430a      	orrs	r2, r1
 800225a:	609a      	str	r2, [r3, #8]
 800225c:	e007      	b.n	800226e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2184      	movs	r1, #132	@ 0x84
 8002268:	0209      	lsls	r1, r1, #8
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	2b02      	cmp	r3, #2
 8002274:	d109      	bne.n	800228a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2180      	movs	r1, #128	@ 0x80
 8002282:	0109      	lsls	r1, r1, #4
 8002284:	430a      	orrs	r2, r1
 8002286:	605a      	str	r2, [r3, #4]
 8002288:	e007      	b.n	800229a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4923      	ldr	r1, [pc, #140]	@ (8002324 <HAL_I2C_Init+0x144>)
 8002296:	400a      	ands	r2, r1
 8002298:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4920      	ldr	r1, [pc, #128]	@ (8002328 <HAL_I2C_Init+0x148>)
 80022a6:	430a      	orrs	r2, r1
 80022a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	491a      	ldr	r1, [pc, #104]	@ (8002320 <HAL_I2C_Init+0x140>)
 80022b6:	400a      	ands	r2, r1
 80022b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691a      	ldr	r2, [r3, #16]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69d9      	ldr	r1, [r3, #28]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1a      	ldr	r2, [r3, #32]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2101      	movs	r1, #1
 80022f0:	430a      	orrs	r2, r1
 80022f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2241      	movs	r2, #65	@ 0x41
 80022fe:	2120      	movs	r1, #32
 8002300:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2242      	movs	r2, #66	@ 0x42
 800230c:	2100      	movs	r1, #0
 800230e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b002      	add	sp, #8
 8002318:	bd80      	pop	{r7, pc}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	f0ffffff 	.word	0xf0ffffff
 8002320:	ffff7fff 	.word	0xffff7fff
 8002324:	fffff7ff 	.word	0xfffff7ff
 8002328:	02008000 	.word	0x02008000

0800232c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e022      	b.n	8002384 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2241      	movs	r2, #65	@ 0x41
 8002342:	2124      	movs	r1, #36	@ 0x24
 8002344:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2101      	movs	r1, #1
 8002352:	438a      	bics	r2, r1
 8002354:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	0018      	movs	r0, r3
 800235a:	f7fe fe4d 	bl	8000ff8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2241      	movs	r2, #65	@ 0x41
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2242      	movs	r2, #66	@ 0x42
 8002376:	2100      	movs	r1, #0
 8002378:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2240      	movs	r2, #64	@ 0x40
 800237e:	2100      	movs	r1, #0
 8002380:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002382:	2300      	movs	r3, #0
}
 8002384:	0018      	movs	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	b002      	add	sp, #8
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b089      	sub	sp, #36	@ 0x24
 8002390:	af02      	add	r7, sp, #8
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	0008      	movs	r0, r1
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	0019      	movs	r1, r3
 800239a:	230a      	movs	r3, #10
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	1c02      	adds	r2, r0, #0
 80023a0:	801a      	strh	r2, [r3, #0]
 80023a2:	2308      	movs	r3, #8
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	1c0a      	adds	r2, r1, #0
 80023a8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2241      	movs	r2, #65	@ 0x41
 80023ae:	5c9b      	ldrb	r3, [r3, r2]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b20      	cmp	r3, #32
 80023b4:	d000      	beq.n	80023b8 <HAL_I2C_Master_Transmit+0x2c>
 80023b6:	e10a      	b.n	80025ce <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2240      	movs	r2, #64	@ 0x40
 80023bc:	5c9b      	ldrb	r3, [r3, r2]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_I2C_Master_Transmit+0x3a>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e104      	b.n	80025d0 <HAL_I2C_Master_Transmit+0x244>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2240      	movs	r2, #64	@ 0x40
 80023ca:	2101      	movs	r1, #1
 80023cc:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023ce:	f7ff fb59 	bl	8001a84 <HAL_GetTick>
 80023d2:	0003      	movs	r3, r0
 80023d4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023d6:	2380      	movs	r3, #128	@ 0x80
 80023d8:	0219      	lsls	r1, r3, #8
 80023da:	68f8      	ldr	r0, [r7, #12]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2319      	movs	r3, #25
 80023e2:	2201      	movs	r2, #1
 80023e4:	f000 fb22 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 80023e8:	1e03      	subs	r3, r0, #0
 80023ea:	d001      	beq.n	80023f0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0ef      	b.n	80025d0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2241      	movs	r2, #65	@ 0x41
 80023f4:	2121      	movs	r1, #33	@ 0x21
 80023f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2242      	movs	r2, #66	@ 0x42
 80023fc:	2110      	movs	r1, #16
 80023fe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2208      	movs	r2, #8
 8002410:	18ba      	adds	r2, r7, r2
 8002412:	8812      	ldrh	r2, [r2, #0]
 8002414:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	2bff      	cmp	r3, #255	@ 0xff
 8002424:	d906      	bls.n	8002434 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	22ff      	movs	r2, #255	@ 0xff
 800242a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800242c:	2380      	movs	r3, #128	@ 0x80
 800242e:	045b      	lsls	r3, r3, #17
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	e007      	b.n	8002444 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800243e:	2380      	movs	r3, #128	@ 0x80
 8002440:	049b      	lsls	r3, r3, #18
 8002442:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002448:	2b00      	cmp	r3, #0
 800244a:	d027      	beq.n	800249c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002450:	781a      	ldrb	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002466:	b29b      	uxth	r3, r3
 8002468:	3b01      	subs	r3, #1
 800246a:	b29a      	uxth	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002480:	b2db      	uxtb	r3, r3
 8002482:	3301      	adds	r3, #1
 8002484:	b2da      	uxtb	r2, r3
 8002486:	697c      	ldr	r4, [r7, #20]
 8002488:	230a      	movs	r3, #10
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	8819      	ldrh	r1, [r3, #0]
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	4b51      	ldr	r3, [pc, #324]	@ (80025d8 <HAL_I2C_Master_Transmit+0x24c>)
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	0023      	movs	r3, r4
 8002496:	f000 fd41 	bl	8002f1c <I2C_TransferConfig>
 800249a:	e06f      	b.n	800257c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	697c      	ldr	r4, [r7, #20]
 80024a4:	230a      	movs	r3, #10
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	8819      	ldrh	r1, [r3, #0]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	4b4a      	ldr	r3, [pc, #296]	@ (80025d8 <HAL_I2C_Master_Transmit+0x24c>)
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	0023      	movs	r3, r4
 80024b2:	f000 fd33 	bl	8002f1c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80024b6:	e061      	b.n	800257c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	0018      	movs	r0, r3
 80024c0:	f000 fb0c 	bl	8002adc <I2C_WaitOnTXISFlagUntilTimeout>
 80024c4:	1e03      	subs	r3, r0, #0
 80024c6:	d001      	beq.n	80024cc <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e081      	b.n	80025d0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	781a      	ldrb	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3b01      	subs	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002500:	b29b      	uxth	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d03a      	beq.n	800257c <HAL_I2C_Master_Transmit+0x1f0>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800250a:	2b00      	cmp	r3, #0
 800250c:	d136      	bne.n	800257c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800250e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	0013      	movs	r3, r2
 8002518:	2200      	movs	r2, #0
 800251a:	2180      	movs	r1, #128	@ 0x80
 800251c:	f000 fa86 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 8002520:	1e03      	subs	r3, r0, #0
 8002522:	d001      	beq.n	8002528 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e053      	b.n	80025d0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800252c:	b29b      	uxth	r3, r3
 800252e:	2bff      	cmp	r3, #255	@ 0xff
 8002530:	d911      	bls.n	8002556 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	22ff      	movs	r2, #255	@ 0xff
 8002536:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253c:	b2da      	uxtb	r2, r3
 800253e:	2380      	movs	r3, #128	@ 0x80
 8002540:	045c      	lsls	r4, r3, #17
 8002542:	230a      	movs	r3, #10
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	8819      	ldrh	r1, [r3, #0]
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	2300      	movs	r3, #0
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	0023      	movs	r3, r4
 8002550:	f000 fce4 	bl	8002f1c <I2C_TransferConfig>
 8002554:	e012      	b.n	800257c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800255a:	b29a      	uxth	r2, r3
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002564:	b2da      	uxtb	r2, r3
 8002566:	2380      	movs	r3, #128	@ 0x80
 8002568:	049c      	lsls	r4, r3, #18
 800256a:	230a      	movs	r3, #10
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	8819      	ldrh	r1, [r3, #0]
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	2300      	movs	r3, #0
 8002574:	9300      	str	r3, [sp, #0]
 8002576:	0023      	movs	r3, r4
 8002578:	f000 fcd0 	bl	8002f1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002580:	b29b      	uxth	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d198      	bne.n	80024b8 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	0018      	movs	r0, r3
 800258e:	f000 faeb 	bl	8002b68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002592:	1e03      	subs	r3, r0, #0
 8002594:	d001      	beq.n	800259a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e01a      	b.n	80025d0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2220      	movs	r2, #32
 80025a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	490b      	ldr	r1, [pc, #44]	@ (80025dc <HAL_I2C_Master_Transmit+0x250>)
 80025ae:	400a      	ands	r2, r1
 80025b0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2241      	movs	r2, #65	@ 0x41
 80025b6:	2120      	movs	r1, #32
 80025b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2242      	movs	r2, #66	@ 0x42
 80025be:	2100      	movs	r1, #0
 80025c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2240      	movs	r2, #64	@ 0x40
 80025c6:	2100      	movs	r1, #0
 80025c8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e000      	b.n	80025d0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80025ce:	2302      	movs	r3, #2
  }
}
 80025d0:	0018      	movs	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	b007      	add	sp, #28
 80025d6:	bd90      	pop	{r4, r7, pc}
 80025d8:	80002000 	.word	0x80002000
 80025dc:	fe00e800 	.word	0xfe00e800

080025e0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80025e0:	b590      	push	{r4, r7, lr}
 80025e2:	b089      	sub	sp, #36	@ 0x24
 80025e4:	af02      	add	r7, sp, #8
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	0008      	movs	r0, r1
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	0019      	movs	r1, r3
 80025ee:	230a      	movs	r3, #10
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	1c02      	adds	r2, r0, #0
 80025f4:	801a      	strh	r2, [r3, #0]
 80025f6:	2308      	movs	r3, #8
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	1c0a      	adds	r2, r1, #0
 80025fc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2241      	movs	r2, #65	@ 0x41
 8002602:	5c9b      	ldrb	r3, [r3, r2]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b20      	cmp	r3, #32
 8002608:	d000      	beq.n	800260c <HAL_I2C_Master_Receive+0x2c>
 800260a:	e0e8      	b.n	80027de <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2240      	movs	r2, #64	@ 0x40
 8002610:	5c9b      	ldrb	r3, [r3, r2]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_I2C_Master_Receive+0x3a>
 8002616:	2302      	movs	r3, #2
 8002618:	e0e2      	b.n	80027e0 <HAL_I2C_Master_Receive+0x200>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2240      	movs	r2, #64	@ 0x40
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002622:	f7ff fa2f 	bl	8001a84 <HAL_GetTick>
 8002626:	0003      	movs	r3, r0
 8002628:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800262a:	2380      	movs	r3, #128	@ 0x80
 800262c:	0219      	lsls	r1, r3, #8
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	2319      	movs	r3, #25
 8002636:	2201      	movs	r2, #1
 8002638:	f000 f9f8 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 800263c:	1e03      	subs	r3, r0, #0
 800263e:	d001      	beq.n	8002644 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0cd      	b.n	80027e0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2241      	movs	r2, #65	@ 0x41
 8002648:	2122      	movs	r1, #34	@ 0x22
 800264a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2242      	movs	r2, #66	@ 0x42
 8002650:	2110      	movs	r1, #16
 8002652:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2208      	movs	r2, #8
 8002664:	18ba      	adds	r2, r7, r2
 8002666:	8812      	ldrh	r2, [r2, #0]
 8002668:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2200      	movs	r2, #0
 800266e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002674:	b29b      	uxth	r3, r3
 8002676:	2bff      	cmp	r3, #255	@ 0xff
 8002678:	d911      	bls.n	800269e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2201      	movs	r2, #1
 800267e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002684:	b2da      	uxtb	r2, r3
 8002686:	2380      	movs	r3, #128	@ 0x80
 8002688:	045c      	lsls	r4, r3, #17
 800268a:	230a      	movs	r3, #10
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	8819      	ldrh	r1, [r3, #0]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	4b55      	ldr	r3, [pc, #340]	@ (80027e8 <HAL_I2C_Master_Receive+0x208>)
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	0023      	movs	r3, r4
 8002698:	f000 fc40 	bl	8002f1c <I2C_TransferConfig>
 800269c:	e076      	b.n	800278c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	2380      	movs	r3, #128	@ 0x80
 80026b0:	049c      	lsls	r4, r3, #18
 80026b2:	230a      	movs	r3, #10
 80026b4:	18fb      	adds	r3, r7, r3
 80026b6:	8819      	ldrh	r1, [r3, #0]
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	4b4b      	ldr	r3, [pc, #300]	@ (80027e8 <HAL_I2C_Master_Receive+0x208>)
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	0023      	movs	r3, r4
 80026c0:	f000 fc2c 	bl	8002f1c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80026c4:	e062      	b.n	800278c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	0018      	movs	r0, r3
 80026ce:	f000 fa8f 	bl	8002bf0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026d2:	1e03      	subs	r3, r0, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e082      	b.n	80027e0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002702:	b29b      	uxth	r3, r3
 8002704:	3b01      	subs	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d03a      	beq.n	800278c <HAL_I2C_Master_Receive+0x1ac>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800271a:	2b00      	cmp	r3, #0
 800271c:	d136      	bne.n	800278c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800271e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	0013      	movs	r3, r2
 8002728:	2200      	movs	r2, #0
 800272a:	2180      	movs	r1, #128	@ 0x80
 800272c:	f000 f97e 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 8002730:	1e03      	subs	r3, r0, #0
 8002732:	d001      	beq.n	8002738 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e053      	b.n	80027e0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800273c:	b29b      	uxth	r3, r3
 800273e:	2bff      	cmp	r3, #255	@ 0xff
 8002740:	d911      	bls.n	8002766 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	22ff      	movs	r2, #255	@ 0xff
 8002746:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274c:	b2da      	uxtb	r2, r3
 800274e:	2380      	movs	r3, #128	@ 0x80
 8002750:	045c      	lsls	r4, r3, #17
 8002752:	230a      	movs	r3, #10
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	8819      	ldrh	r1, [r3, #0]
 8002758:	68f8      	ldr	r0, [r7, #12]
 800275a:	2300      	movs	r3, #0
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	0023      	movs	r3, r4
 8002760:	f000 fbdc 	bl	8002f1c <I2C_TransferConfig>
 8002764:	e012      	b.n	800278c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002774:	b2da      	uxtb	r2, r3
 8002776:	2380      	movs	r3, #128	@ 0x80
 8002778:	049c      	lsls	r4, r3, #18
 800277a:	230a      	movs	r3, #10
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	8819      	ldrh	r1, [r3, #0]
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	2300      	movs	r3, #0
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	0023      	movs	r3, r4
 8002788:	f000 fbc8 	bl	8002f1c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d197      	bne.n	80026c6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	0018      	movs	r0, r3
 800279e:	f000 f9e3 	bl	8002b68 <I2C_WaitOnSTOPFlagUntilTimeout>
 80027a2:	1e03      	subs	r3, r0, #0
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e01a      	b.n	80027e0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2220      	movs	r2, #32
 80027b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	490b      	ldr	r1, [pc, #44]	@ (80027ec <HAL_I2C_Master_Receive+0x20c>)
 80027be:	400a      	ands	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2241      	movs	r2, #65	@ 0x41
 80027c6:	2120      	movs	r1, #32
 80027c8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2242      	movs	r2, #66	@ 0x42
 80027ce:	2100      	movs	r1, #0
 80027d0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2240      	movs	r2, #64	@ 0x40
 80027d6:	2100      	movs	r1, #0
 80027d8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	e000      	b.n	80027e0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80027de:	2302      	movs	r3, #2
  }
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b007      	add	sp, #28
 80027e6:	bd90      	pop	{r4, r7, pc}
 80027e8:	80002400 	.word	0x80002400
 80027ec:	fe00e800 	.word	0xfe00e800

080027f0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	@ 0x28
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	230a      	movs	r3, #10
 80027fe:	18fb      	adds	r3, r7, r3
 8002800:	1c0a      	adds	r2, r1, #0
 8002802:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2241      	movs	r2, #65	@ 0x41
 800280c:	5c9b      	ldrb	r3, [r3, r2]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b20      	cmp	r3, #32
 8002812:	d000      	beq.n	8002816 <HAL_I2C_IsDeviceReady+0x26>
 8002814:	e0df      	b.n	80029d6 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	2380      	movs	r3, #128	@ 0x80
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	401a      	ands	r2, r3
 8002822:	2380      	movs	r3, #128	@ 0x80
 8002824:	021b      	lsls	r3, r3, #8
 8002826:	429a      	cmp	r2, r3
 8002828:	d101      	bne.n	800282e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800282a:	2302      	movs	r3, #2
 800282c:	e0d4      	b.n	80029d8 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2240      	movs	r2, #64	@ 0x40
 8002832:	5c9b      	ldrb	r3, [r3, r2]
 8002834:	2b01      	cmp	r3, #1
 8002836:	d101      	bne.n	800283c <HAL_I2C_IsDeviceReady+0x4c>
 8002838:	2302      	movs	r3, #2
 800283a:	e0cd      	b.n	80029d8 <HAL_I2C_IsDeviceReady+0x1e8>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2240      	movs	r2, #64	@ 0x40
 8002840:	2101      	movs	r1, #1
 8002842:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2241      	movs	r2, #65	@ 0x41
 8002848:	2124      	movs	r1, #36	@ 0x24
 800284a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d107      	bne.n	800286a <HAL_I2C_IsDeviceReady+0x7a>
 800285a:	230a      	movs	r3, #10
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	059b      	lsls	r3, r3, #22
 8002862:	0d9b      	lsrs	r3, r3, #22
 8002864:	4a5e      	ldr	r2, [pc, #376]	@ (80029e0 <HAL_I2C_IsDeviceReady+0x1f0>)
 8002866:	431a      	orrs	r2, r3
 8002868:	e006      	b.n	8002878 <HAL_I2C_IsDeviceReady+0x88>
 800286a:	230a      	movs	r3, #10
 800286c:	18fb      	adds	r3, r7, r3
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	059b      	lsls	r3, r3, #22
 8002872:	0d9b      	lsrs	r3, r3, #22
 8002874:	4a5b      	ldr	r2, [pc, #364]	@ (80029e4 <HAL_I2C_IsDeviceReady+0x1f4>)
 8002876:	431a      	orrs	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800287e:	f7ff f901 	bl	8001a84 <HAL_GetTick>
 8002882:	0003      	movs	r3, r0
 8002884:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	2220      	movs	r2, #32
 800288e:	4013      	ands	r3, r2
 8002890:	3b20      	subs	r3, #32
 8002892:	425a      	negs	r2, r3
 8002894:	4153      	adcs	r3, r2
 8002896:	b2da      	uxtb	r2, r3
 8002898:	231f      	movs	r3, #31
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	2210      	movs	r2, #16
 80028a6:	4013      	ands	r3, r2
 80028a8:	3b10      	subs	r3, #16
 80028aa:	425a      	negs	r2, r3
 80028ac:	4153      	adcs	r3, r2
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	231e      	movs	r3, #30
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80028b6:	e035      	b.n	8002924 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	3301      	adds	r3, #1
 80028bc:	d01a      	beq.n	80028f4 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028be:	f7ff f8e1 	bl	8001a84 <HAL_GetTick>
 80028c2:	0002      	movs	r2, r0
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <HAL_I2C_IsDeviceReady+0xe4>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d10f      	bne.n	80028f4 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2241      	movs	r2, #65	@ 0x41
 80028d8:	2120      	movs	r1, #32
 80028da:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e0:	2220      	movs	r2, #32
 80028e2:	431a      	orrs	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2240      	movs	r2, #64	@ 0x40
 80028ec:	2100      	movs	r1, #0
 80028ee:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e071      	b.n	80029d8 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2220      	movs	r2, #32
 80028fc:	4013      	ands	r3, r2
 80028fe:	3b20      	subs	r3, #32
 8002900:	425a      	negs	r2, r3
 8002902:	4153      	adcs	r3, r2
 8002904:	b2da      	uxtb	r2, r3
 8002906:	231f      	movs	r3, #31
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	2210      	movs	r2, #16
 8002914:	4013      	ands	r3, r2
 8002916:	3b10      	subs	r3, #16
 8002918:	425a      	negs	r2, r3
 800291a:	4153      	adcs	r3, r2
 800291c:	b2da      	uxtb	r2, r3
 800291e:	231e      	movs	r3, #30
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002924:	231f      	movs	r3, #31
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d104      	bne.n	8002938 <HAL_I2C_IsDeviceReady+0x148>
 800292e:	231e      	movs	r3, #30
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0bf      	beq.n	80028b8 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	2210      	movs	r2, #16
 8002940:	4013      	ands	r3, r2
 8002942:	2b10      	cmp	r3, #16
 8002944:	d01a      	beq.n	800297c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	0013      	movs	r3, r2
 8002950:	2200      	movs	r2, #0
 8002952:	2120      	movs	r1, #32
 8002954:	f000 f86a 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 8002958:	1e03      	subs	r3, r0, #0
 800295a:	d001      	beq.n	8002960 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800295c:	2301      	movs	r3, #1
 800295e:	e03b      	b.n	80029d8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2220      	movs	r2, #32
 8002966:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2241      	movs	r2, #65	@ 0x41
 800296c:	2120      	movs	r1, #32
 800296e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2240      	movs	r2, #64	@ 0x40
 8002974:	2100      	movs	r1, #0
 8002976:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	e02d      	b.n	80029d8 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	69bb      	ldr	r3, [r7, #24]
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	0013      	movs	r3, r2
 8002986:	2200      	movs	r2, #0
 8002988:	2120      	movs	r1, #32
 800298a:	f000 f84f 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 800298e:	1e03      	subs	r3, r0, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e020      	b.n	80029d8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2210      	movs	r2, #16
 800299c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2220      	movs	r2, #32
 80029a4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3301      	adds	r3, #1
 80029aa:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d900      	bls.n	80029b6 <HAL_I2C_IsDeviceReady+0x1c6>
 80029b4:	e74d      	b.n	8002852 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2241      	movs	r2, #65	@ 0x41
 80029ba:	2120      	movs	r1, #32
 80029bc:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029c2:	2220      	movs	r2, #32
 80029c4:	431a      	orrs	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2240      	movs	r2, #64	@ 0x40
 80029ce:	2100      	movs	r1, #0
 80029d0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
  }
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b008      	add	sp, #32
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	02002000 	.word	0x02002000
 80029e4:	02002800 	.word	0x02002800

080029e8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2202      	movs	r2, #2
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d103      	bne.n	8002a06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d007      	beq.n	8002a24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699a      	ldr	r2, [r3, #24]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2101      	movs	r1, #1
 8002a20:	430a      	orrs	r2, r1
 8002a22:	619a      	str	r2, [r3, #24]
  }
}
 8002a24:	46c0      	nop			@ (mov r8, r8)
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b002      	add	sp, #8
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	1dfb      	adds	r3, r7, #7
 8002a3a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a3c:	e03a      	b.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	6839      	ldr	r1, [r7, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f000 f971 	bl	8002d2c <I2C_IsErrorOccurred>
 8002a4a:	1e03      	subs	r3, r0, #0
 8002a4c:	d001      	beq.n	8002a52 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e040      	b.n	8002ad4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	3301      	adds	r3, #1
 8002a56:	d02d      	beq.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a58:	f7ff f814 	bl	8001a84 <HAL_GetTick>
 8002a5c:	0002      	movs	r2, r0
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	683a      	ldr	r2, [r7, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d302      	bcc.n	8002a6e <I2C_WaitOnFlagUntilTimeout+0x42>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d122      	bne.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	4013      	ands	r3, r2
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	425a      	negs	r2, r3
 8002a7e:	4153      	adcs	r3, r2
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	001a      	movs	r2, r3
 8002a84:	1dfb      	adds	r3, r7, #7
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d113      	bne.n	8002ab4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a90:	2220      	movs	r2, #32
 8002a92:	431a      	orrs	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2241      	movs	r2, #65	@ 0x41
 8002a9c:	2120      	movs	r1, #32
 8002a9e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2242      	movs	r2, #66	@ 0x42
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2240      	movs	r2, #64	@ 0x40
 8002aac:	2100      	movs	r1, #0
 8002aae:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e00f      	b.n	8002ad4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	4013      	ands	r3, r2
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	425a      	negs	r2, r3
 8002ac4:	4153      	adcs	r3, r2
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	001a      	movs	r2, r3
 8002aca:	1dfb      	adds	r3, r7, #7
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d0b5      	beq.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b004      	add	sp, #16
 8002ada:	bd80      	pop	{r7, pc}

08002adc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ae8:	e032      	b.n	8002b50 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	0018      	movs	r0, r3
 8002af2:	f000 f91b 	bl	8002d2c <I2C_IsErrorOccurred>
 8002af6:	1e03      	subs	r3, r0, #0
 8002af8:	d001      	beq.n	8002afe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e030      	b.n	8002b60 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	3301      	adds	r3, #1
 8002b02:	d025      	beq.n	8002b50 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b04:	f7fe ffbe 	bl	8001a84 <HAL_GetTick>
 8002b08:	0002      	movs	r2, r0
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	68ba      	ldr	r2, [r7, #8]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d302      	bcc.n	8002b1a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d11a      	bne.n	8002b50 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	2202      	movs	r2, #2
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d013      	beq.n	8002b50 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2241      	movs	r2, #65	@ 0x41
 8002b38:	2120      	movs	r1, #32
 8002b3a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2242      	movs	r2, #66	@ 0x42
 8002b40:	2100      	movs	r1, #0
 8002b42:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2240      	movs	r2, #64	@ 0x40
 8002b48:	2100      	movs	r1, #0
 8002b4a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e007      	b.n	8002b60 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	2202      	movs	r2, #2
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d1c5      	bne.n	8002aea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b004      	add	sp, #16
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b74:	e02f      	b.n	8002bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	68b9      	ldr	r1, [r7, #8]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	f000 f8d5 	bl	8002d2c <I2C_IsErrorOccurred>
 8002b82:	1e03      	subs	r3, r0, #0
 8002b84:	d001      	beq.n	8002b8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e02d      	b.n	8002be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b8a:	f7fe ff7b 	bl	8001a84 <HAL_GetTick>
 8002b8e:	0002      	movs	r2, r0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d302      	bcc.n	8002ba0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d11a      	bne.n	8002bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	d013      	beq.n	8002bd6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2241      	movs	r2, #65	@ 0x41
 8002bbe:	2120      	movs	r1, #32
 8002bc0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2242      	movs	r2, #66	@ 0x42
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2240      	movs	r2, #64	@ 0x40
 8002bce:	2100      	movs	r1, #0
 8002bd0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e007      	b.n	8002be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	4013      	ands	r3, r2
 8002be0:	2b20      	cmp	r3, #32
 8002be2:	d1c8      	bne.n	8002b76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	0018      	movs	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	b004      	add	sp, #16
 8002bec:	bd80      	pop	{r7, pc}
	...

08002bf0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b086      	sub	sp, #24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfc:	2317      	movs	r3, #23
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002c04:	e07b      	b.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 f88d 	bl	8002d2c <I2C_IsErrorOccurred>
 8002c12:	1e03      	subs	r3, r0, #0
 8002c14:	d003      	beq.n	8002c1e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002c16:	2317      	movs	r3, #23
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2220      	movs	r2, #32
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b20      	cmp	r3, #32
 8002c2a:	d140      	bne.n	8002cae <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002c2c:	2117      	movs	r1, #23
 8002c2e:	187b      	adds	r3, r7, r1
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d13b      	bne.n	8002cae <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	2204      	movs	r2, #4
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d106      	bne.n	8002c52 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002c4c:	187b      	adds	r3, r7, r1
 8002c4e:	2200      	movs	r2, #0
 8002c50:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	2210      	movs	r2, #16
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b10      	cmp	r3, #16
 8002c5e:	d123      	bne.n	8002ca8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2210      	movs	r2, #16
 8002c66:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2220      	movs	r2, #32
 8002c74:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4929      	ldr	r1, [pc, #164]	@ (8002d28 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8002c82:	400a      	ands	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2241      	movs	r2, #65	@ 0x41
 8002c8a:	2120      	movs	r1, #32
 8002c8c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2242      	movs	r2, #66	@ 0x42
 8002c92:	2100      	movs	r1, #0
 8002c94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2240      	movs	r2, #64	@ 0x40
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002c9e:	2317      	movs	r3, #23
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e002      	b.n	8002cae <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002cae:	f7fe fee9 	bl	8001a84 <HAL_GetTick>
 8002cb2:	0002      	movs	r2, r0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d302      	bcc.n	8002cc4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d11c      	bne.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002cc4:	2017      	movs	r0, #23
 8002cc6:	183b      	adds	r3, r7, r0
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d117      	bne.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d010      	beq.n	8002cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2241      	movs	r2, #65	@ 0x41
 8002cec:	2120      	movs	r1, #32
 8002cee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2240      	movs	r2, #64	@ 0x40
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002cf8:	183b      	adds	r3, r7, r0
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2204      	movs	r2, #4
 8002d06:	4013      	ands	r3, r2
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d005      	beq.n	8002d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002d0c:	2317      	movs	r3, #23
 8002d0e:	18fb      	adds	r3, r7, r3
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d100      	bne.n	8002d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002d16:	e776      	b.n	8002c06 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002d18:	2317      	movs	r3, #23
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	781b      	ldrb	r3, [r3, #0]
}
 8002d1e:	0018      	movs	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	b006      	add	sp, #24
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	fe00e800 	.word	0xfe00e800

08002d2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	@ 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d38:	2327      	movs	r3, #39	@ 0x27
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	2210      	movs	r2, #16
 8002d54:	4013      	ands	r3, r2
 8002d56:	d100      	bne.n	8002d5a <I2C_IsErrorOccurred+0x2e>
 8002d58:	e079      	b.n	8002e4e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2210      	movs	r2, #16
 8002d60:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d62:	e057      	b.n	8002e14 <I2C_IsErrorOccurred+0xe8>
 8002d64:	2227      	movs	r2, #39	@ 0x27
 8002d66:	18bb      	adds	r3, r7, r2
 8002d68:	18ba      	adds	r2, r7, r2
 8002d6a:	7812      	ldrb	r2, [r2, #0]
 8002d6c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3301      	adds	r3, #1
 8002d72:	d04f      	beq.n	8002e14 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d74:	f7fe fe86 	bl	8001a84 <HAL_GetTick>
 8002d78:	0002      	movs	r2, r0
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d302      	bcc.n	8002d8a <I2C_IsErrorOccurred+0x5e>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d144      	bne.n	8002e14 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	01db      	lsls	r3, r3, #7
 8002d94:	4013      	ands	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002d98:	2013      	movs	r0, #19
 8002d9a:	183b      	adds	r3, r7, r0
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	2142      	movs	r1, #66	@ 0x42
 8002da0:	5c52      	ldrb	r2, [r2, r1]
 8002da2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699a      	ldr	r2, [r3, #24]
 8002daa:	2380      	movs	r3, #128	@ 0x80
 8002dac:	021b      	lsls	r3, r3, #8
 8002dae:	401a      	ands	r2, r3
 8002db0:	2380      	movs	r3, #128	@ 0x80
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d126      	bne.n	8002e06 <I2C_IsErrorOccurred+0xda>
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	2380      	movs	r3, #128	@ 0x80
 8002dbc:	01db      	lsls	r3, r3, #7
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d021      	beq.n	8002e06 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002dc2:	183b      	adds	r3, r7, r0
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b20      	cmp	r3, #32
 8002dc8:	d01d      	beq.n	8002e06 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2180      	movs	r1, #128	@ 0x80
 8002dd6:	01c9      	lsls	r1, r1, #7
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ddc:	f7fe fe52 	bl	8001a84 <HAL_GetTick>
 8002de0:	0003      	movs	r3, r0
 8002de2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002de4:	e00f      	b.n	8002e06 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002de6:	f7fe fe4d 	bl	8001a84 <HAL_GetTick>
 8002dea:	0002      	movs	r2, r0
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b19      	cmp	r3, #25
 8002df2:	d908      	bls.n	8002e06 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002df4:	6a3b      	ldr	r3, [r7, #32]
 8002df6:	2220      	movs	r2, #32
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002dfc:	2327      	movs	r3, #39	@ 0x27
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]

              break;
 8002e04:	e006      	b.n	8002e14 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d1e8      	bne.n	8002de6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d004      	beq.n	8002e2c <I2C_IsErrorOccurred+0x100>
 8002e22:	2327      	movs	r3, #39	@ 0x27
 8002e24:	18fb      	adds	r3, r7, r3
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d09b      	beq.n	8002d64 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e2c:	2327      	movs	r3, #39	@ 0x27
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d103      	bne.n	8002e3e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	2204      	movs	r2, #4
 8002e42:	4313      	orrs	r3, r2
 8002e44:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e46:	2327      	movs	r3, #39	@ 0x27
 8002e48:	18fb      	adds	r3, r7, r3
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	2380      	movs	r3, #128	@ 0x80
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d00c      	beq.n	8002e7a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	2201      	movs	r2, #1
 8002e64:	4313      	orrs	r3, r2
 8002e66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2280      	movs	r2, #128	@ 0x80
 8002e6e:	0052      	lsls	r2, r2, #1
 8002e70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e72:	2327      	movs	r3, #39	@ 0x27
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	2380      	movs	r3, #128	@ 0x80
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4013      	ands	r3, r2
 8002e82:	d00c      	beq.n	8002e9e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002e84:	6a3b      	ldr	r3, [r7, #32]
 8002e86:	2208      	movs	r2, #8
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2280      	movs	r2, #128	@ 0x80
 8002e92:	00d2      	lsls	r2, r2, #3
 8002e94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002e96:	2327      	movs	r3, #39	@ 0x27
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	2380      	movs	r3, #128	@ 0x80
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d00c      	beq.n	8002ec2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	4313      	orrs	r3, r2
 8002eae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2280      	movs	r2, #128	@ 0x80
 8002eb6:	0092      	lsls	r2, r2, #2
 8002eb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eba:	2327      	movs	r3, #39	@ 0x27
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002ec2:	2327      	movs	r3, #39	@ 0x27
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d01d      	beq.n	8002f08 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f7ff fd8a 	bl	80029e8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	490e      	ldr	r1, [pc, #56]	@ (8002f18 <I2C_IsErrorOccurred+0x1ec>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ee8:	6a3b      	ldr	r3, [r7, #32]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2241      	movs	r2, #65	@ 0x41
 8002ef4:	2120      	movs	r1, #32
 8002ef6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2242      	movs	r2, #66	@ 0x42
 8002efc:	2100      	movs	r1, #0
 8002efe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2240      	movs	r2, #64	@ 0x40
 8002f04:	2100      	movs	r1, #0
 8002f06:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002f08:	2327      	movs	r3, #39	@ 0x27
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	781b      	ldrb	r3, [r3, #0]
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b00a      	add	sp, #40	@ 0x28
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	fe00e800 	.word	0xfe00e800

08002f1c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f1c:	b590      	push	{r4, r7, lr}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	0008      	movs	r0, r1
 8002f26:	0011      	movs	r1, r2
 8002f28:	607b      	str	r3, [r7, #4]
 8002f2a:	240a      	movs	r4, #10
 8002f2c:	193b      	adds	r3, r7, r4
 8002f2e:	1c02      	adds	r2, r0, #0
 8002f30:	801a      	strh	r2, [r3, #0]
 8002f32:	2009      	movs	r0, #9
 8002f34:	183b      	adds	r3, r7, r0
 8002f36:	1c0a      	adds	r2, r1, #0
 8002f38:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f3a:	193b      	adds	r3, r7, r4
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	059b      	lsls	r3, r3, #22
 8002f40:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f42:	183b      	adds	r3, r7, r0
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	0419      	lsls	r1, r3, #16
 8002f48:	23ff      	movs	r3, #255	@ 0xff
 8002f4a:	041b      	lsls	r3, r3, #16
 8002f4c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f4e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f56:	4313      	orrs	r3, r2
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f66:	0d51      	lsrs	r1, r2, #21
 8002f68:	2280      	movs	r2, #128	@ 0x80
 8002f6a:	00d2      	lsls	r2, r2, #3
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	4907      	ldr	r1, [pc, #28]	@ (8002f8c <I2C_TransferConfig+0x70>)
 8002f70:	430a      	orrs	r2, r1
 8002f72:	43d2      	mvns	r2, r2
 8002f74:	401a      	ands	r2, r3
 8002f76:	0011      	movs	r1, r2
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b007      	add	sp, #28
 8002f88:	bd90      	pop	{r4, r7, pc}
 8002f8a:	46c0      	nop			@ (mov r8, r8)
 8002f8c:	03ff63ff 	.word	0x03ff63ff

08002f90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2241      	movs	r2, #65	@ 0x41
 8002f9e:	5c9b      	ldrb	r3, [r3, r2]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d138      	bne.n	8003018 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2240      	movs	r2, #64	@ 0x40
 8002faa:	5c9b      	ldrb	r3, [r3, r2]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d101      	bne.n	8002fb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	e032      	b.n	800301a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2240      	movs	r2, #64	@ 0x40
 8002fb8:	2101      	movs	r1, #1
 8002fba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2241      	movs	r2, #65	@ 0x41
 8002fc0:	2124      	movs	r1, #36	@ 0x24
 8002fc2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2101      	movs	r1, #1
 8002fd0:	438a      	bics	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4911      	ldr	r1, [pc, #68]	@ (8003024 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002fe0:	400a      	ands	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6819      	ldr	r1, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	683a      	ldr	r2, [r7, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2101      	movs	r1, #1
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2241      	movs	r2, #65	@ 0x41
 8003008:	2120      	movs	r1, #32
 800300a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2240      	movs	r2, #64	@ 0x40
 8003010:	2100      	movs	r1, #0
 8003012:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003014:	2300      	movs	r3, #0
 8003016:	e000      	b.n	800301a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003018:	2302      	movs	r3, #2
  }
}
 800301a:	0018      	movs	r0, r3
 800301c:	46bd      	mov	sp, r7
 800301e:	b002      	add	sp, #8
 8003020:	bd80      	pop	{r7, pc}
 8003022:	46c0      	nop			@ (mov r8, r8)
 8003024:	ffffefff 	.word	0xffffefff

08003028 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2241      	movs	r2, #65	@ 0x41
 8003036:	5c9b      	ldrb	r3, [r3, r2]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b20      	cmp	r3, #32
 800303c:	d139      	bne.n	80030b2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2240      	movs	r2, #64	@ 0x40
 8003042:	5c9b      	ldrb	r3, [r3, r2]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d101      	bne.n	800304c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003048:	2302      	movs	r3, #2
 800304a:	e033      	b.n	80030b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2240      	movs	r2, #64	@ 0x40
 8003050:	2101      	movs	r1, #1
 8003052:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2241      	movs	r2, #65	@ 0x41
 8003058:	2124      	movs	r1, #36	@ 0x24
 800305a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2101      	movs	r1, #1
 8003068:	438a      	bics	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a11      	ldr	r2, [pc, #68]	@ (80030bc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003078:	4013      	ands	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	021b      	lsls	r3, r3, #8
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	4313      	orrs	r3, r2
 8003084:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2101      	movs	r1, #1
 800309a:	430a      	orrs	r2, r1
 800309c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2241      	movs	r2, #65	@ 0x41
 80030a2:	2120      	movs	r1, #32
 80030a4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2240      	movs	r2, #64	@ 0x40
 80030aa:	2100      	movs	r1, #0
 80030ac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	e000      	b.n	80030b4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030b2:	2302      	movs	r3, #2
  }
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b004      	add	sp, #16
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	fffff0ff 	.word	0xfffff0ff

080030c0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	000a      	movs	r2, r1
 80030ca:	1cfb      	adds	r3, r7, #3
 80030cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80030d2:	4b25      	ldr	r3, [pc, #148]	@ (8003168 <HAL_PWR_EnterSTOPMode+0xa8>)
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	2380      	movs	r3, #128	@ 0x80
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4013      	ands	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80030de:	4b23      	ldr	r3, [pc, #140]	@ (800316c <HAL_PWR_EnterSTOPMode+0xac>)
 80030e0:	6a1b      	ldr	r3, [r3, #32]
 80030e2:	2201      	movs	r2, #1
 80030e4:	4013      	ands	r3, r2
 80030e6:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <HAL_PWR_EnterSTOPMode+0x40>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80030f4:	4b1c      	ldr	r3, [pc, #112]	@ (8003168 <HAL_PWR_EnterSTOPMode+0xa8>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003168 <HAL_PWR_EnterSTOPMode+0xa8>)
 80030fa:	491d      	ldr	r1, [pc, #116]	@ (8003170 <HAL_PWR_EnterSTOPMode+0xb0>)
 80030fc:	400a      	ands	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003100:	4b19      	ldr	r3, [pc, #100]	@ (8003168 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2203      	movs	r2, #3
 800310a:	4393      	bics	r3, r2
 800310c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003116:	4b14      	ldr	r3, [pc, #80]	@ (8003168 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800311c:	4b15      	ldr	r3, [pc, #84]	@ (8003174 <HAL_PWR_EnterSTOPMode+0xb4>)
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	4b14      	ldr	r3, [pc, #80]	@ (8003174 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003122:	2104      	movs	r1, #4
 8003124:	430a      	orrs	r2, r1
 8003126:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003128:	1cfb      	adds	r3, r7, #3
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d101      	bne.n	8003134 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003130:	bf30      	wfi
 8003132:	e002      	b.n	800313a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003134:	bf40      	sev
    __WFE();
 8003136:	bf20      	wfe
    __WFE();
 8003138:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800313a:	4b0e      	ldr	r3, [pc, #56]	@ (8003174 <HAL_PWR_EnterSTOPMode+0xb4>)
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	4b0d      	ldr	r3, [pc, #52]	@ (8003174 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003140:	2104      	movs	r1, #4
 8003142:	438a      	bics	r2, r1
 8003144:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d009      	beq.n	8003160 <HAL_PWR_EnterSTOPMode+0xa0>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d006      	beq.n	8003160 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003152:	4b05      	ldr	r3, [pc, #20]	@ (8003168 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003158:	2180      	movs	r1, #128	@ 0x80
 800315a:	0089      	lsls	r1, r1, #2
 800315c:	430a      	orrs	r2, r1
 800315e:	601a      	str	r2, [r3, #0]
  }
}
 8003160:	46c0      	nop			@ (mov r8, r8)
 8003162:	46bd      	mov	sp, r7
 8003164:	b006      	add	sp, #24
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40007000 	.word	0x40007000
 800316c:	40010000 	.word	0x40010000
 8003170:	fffffdff 	.word	0xfffffdff
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003178:	b5b0      	push	{r4, r5, r7, lr}
 800317a:	b08a      	sub	sp, #40	@ 0x28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f000 fbbf 	bl	800390a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800318c:	4bc9      	ldr	r3, [pc, #804]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	220c      	movs	r2, #12
 8003192:	4013      	ands	r3, r2
 8003194:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003196:	4bc7      	ldr	r3, [pc, #796]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003198:	68da      	ldr	r2, [r3, #12]
 800319a:	2380      	movs	r3, #128	@ 0x80
 800319c:	025b      	lsls	r3, r3, #9
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2201      	movs	r2, #1
 80031a8:	4013      	ands	r3, r2
 80031aa:	d100      	bne.n	80031ae <HAL_RCC_OscConfig+0x36>
 80031ac:	e07e      	b.n	80032ac <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d007      	beq.n	80031c4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	2b0c      	cmp	r3, #12
 80031b8:	d112      	bne.n	80031e0 <HAL_RCC_OscConfig+0x68>
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	2380      	movs	r3, #128	@ 0x80
 80031be:	025b      	lsls	r3, r3, #9
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d10d      	bne.n	80031e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c4:	4bbb      	ldr	r3, [pc, #748]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	2380      	movs	r3, #128	@ 0x80
 80031ca:	029b      	lsls	r3, r3, #10
 80031cc:	4013      	ands	r3, r2
 80031ce:	d100      	bne.n	80031d2 <HAL_RCC_OscConfig+0x5a>
 80031d0:	e06b      	b.n	80032aa <HAL_RCC_OscConfig+0x132>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d167      	bne.n	80032aa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	f000 fb95 	bl	800390a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	2380      	movs	r3, #128	@ 0x80
 80031e6:	025b      	lsls	r3, r3, #9
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d107      	bne.n	80031fc <HAL_RCC_OscConfig+0x84>
 80031ec:	4bb1      	ldr	r3, [pc, #708]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4bb0      	ldr	r3, [pc, #704]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 80031f2:	2180      	movs	r1, #128	@ 0x80
 80031f4:	0249      	lsls	r1, r1, #9
 80031f6:	430a      	orrs	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]
 80031fa:	e027      	b.n	800324c <HAL_RCC_OscConfig+0xd4>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	23a0      	movs	r3, #160	@ 0xa0
 8003202:	02db      	lsls	r3, r3, #11
 8003204:	429a      	cmp	r2, r3
 8003206:	d10e      	bne.n	8003226 <HAL_RCC_OscConfig+0xae>
 8003208:	4baa      	ldr	r3, [pc, #680]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4ba9      	ldr	r3, [pc, #676]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 800320e:	2180      	movs	r1, #128	@ 0x80
 8003210:	02c9      	lsls	r1, r1, #11
 8003212:	430a      	orrs	r2, r1
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	4ba7      	ldr	r3, [pc, #668]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	4ba6      	ldr	r3, [pc, #664]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 800321c:	2180      	movs	r1, #128	@ 0x80
 800321e:	0249      	lsls	r1, r1, #9
 8003220:	430a      	orrs	r2, r1
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	e012      	b.n	800324c <HAL_RCC_OscConfig+0xd4>
 8003226:	4ba3      	ldr	r3, [pc, #652]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	4ba2      	ldr	r3, [pc, #648]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 800322c:	49a2      	ldr	r1, [pc, #648]	@ (80034b8 <HAL_RCC_OscConfig+0x340>)
 800322e:	400a      	ands	r2, r1
 8003230:	601a      	str	r2, [r3, #0]
 8003232:	4ba0      	ldr	r3, [pc, #640]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	2380      	movs	r3, #128	@ 0x80
 8003238:	025b      	lsls	r3, r3, #9
 800323a:	4013      	ands	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	4b9c      	ldr	r3, [pc, #624]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	4b9b      	ldr	r3, [pc, #620]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003246:	499d      	ldr	r1, [pc, #628]	@ (80034bc <HAL_RCC_OscConfig+0x344>)
 8003248:	400a      	ands	r2, r1
 800324a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d015      	beq.n	8003280 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7fe fc16 	bl	8001a84 <HAL_GetTick>
 8003258:	0003      	movs	r3, r0
 800325a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800325c:	e009      	b.n	8003272 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800325e:	f7fe fc11 	bl	8001a84 <HAL_GetTick>
 8003262:	0002      	movs	r2, r0
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b64      	cmp	r3, #100	@ 0x64
 800326a:	d902      	bls.n	8003272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	f000 fb4c 	bl	800390a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003272:	4b90      	ldr	r3, [pc, #576]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	2380      	movs	r3, #128	@ 0x80
 8003278:	029b      	lsls	r3, r3, #10
 800327a:	4013      	ands	r3, r2
 800327c:	d0ef      	beq.n	800325e <HAL_RCC_OscConfig+0xe6>
 800327e:	e015      	b.n	80032ac <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003280:	f7fe fc00 	bl	8001a84 <HAL_GetTick>
 8003284:	0003      	movs	r3, r0
 8003286:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800328a:	f7fe fbfb 	bl	8001a84 <HAL_GetTick>
 800328e:	0002      	movs	r2, r0
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b64      	cmp	r3, #100	@ 0x64
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e336      	b.n	800390a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800329c:	4b85      	ldr	r3, [pc, #532]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2380      	movs	r3, #128	@ 0x80
 80032a2:	029b      	lsls	r3, r3, #10
 80032a4:	4013      	ands	r3, r2
 80032a6:	d1f0      	bne.n	800328a <HAL_RCC_OscConfig+0x112>
 80032a8:	e000      	b.n	80032ac <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032aa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2202      	movs	r2, #2
 80032b2:	4013      	ands	r3, r2
 80032b4:	d100      	bne.n	80032b8 <HAL_RCC_OscConfig+0x140>
 80032b6:	e099      	b.n	80033ec <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	2220      	movs	r2, #32
 80032c2:	4013      	ands	r3, r2
 80032c4:	d009      	beq.n	80032da <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80032c6:	4b7b      	ldr	r3, [pc, #492]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	4b7a      	ldr	r3, [pc, #488]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 80032cc:	2120      	movs	r1, #32
 80032ce:	430a      	orrs	r2, r1
 80032d0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80032d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d4:	2220      	movs	r2, #32
 80032d6:	4393      	bics	r3, r2
 80032d8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d005      	beq.n	80032ec <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	2b0c      	cmp	r3, #12
 80032e4:	d13e      	bne.n	8003364 <HAL_RCC_OscConfig+0x1ec>
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d13b      	bne.n	8003364 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80032ec:	4b71      	ldr	r3, [pc, #452]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2204      	movs	r2, #4
 80032f2:	4013      	ands	r3, r2
 80032f4:	d004      	beq.n	8003300 <HAL_RCC_OscConfig+0x188>
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e304      	b.n	800390a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003300:	4b6c      	ldr	r3, [pc, #432]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	4a6e      	ldr	r2, [pc, #440]	@ (80034c0 <HAL_RCC_OscConfig+0x348>)
 8003306:	4013      	ands	r3, r2
 8003308:	0019      	movs	r1, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	021a      	lsls	r2, r3, #8
 8003310:	4b68      	ldr	r3, [pc, #416]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003312:	430a      	orrs	r2, r1
 8003314:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003316:	4b67      	ldr	r3, [pc, #412]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2209      	movs	r2, #9
 800331c:	4393      	bics	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	4b64      	ldr	r3, [pc, #400]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003324:	430a      	orrs	r2, r1
 8003326:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003328:	f000 fc42 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 800332c:	0001      	movs	r1, r0
 800332e:	4b61      	ldr	r3, [pc, #388]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	091b      	lsrs	r3, r3, #4
 8003334:	220f      	movs	r2, #15
 8003336:	4013      	ands	r3, r2
 8003338:	4a62      	ldr	r2, [pc, #392]	@ (80034c4 <HAL_RCC_OscConfig+0x34c>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	000a      	movs	r2, r1
 800333e:	40da      	lsrs	r2, r3
 8003340:	4b61      	ldr	r3, [pc, #388]	@ (80034c8 <HAL_RCC_OscConfig+0x350>)
 8003342:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003344:	4b61      	ldr	r3, [pc, #388]	@ (80034cc <HAL_RCC_OscConfig+0x354>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2513      	movs	r5, #19
 800334a:	197c      	adds	r4, r7, r5
 800334c:	0018      	movs	r0, r3
 800334e:	f7fe fb53 	bl	80019f8 <HAL_InitTick>
 8003352:	0003      	movs	r3, r0
 8003354:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003356:	197b      	adds	r3, r7, r5
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d046      	beq.n	80033ec <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800335e:	197b      	adds	r3, r7, r5
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	e2d2      	b.n	800390a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003366:	2b00      	cmp	r3, #0
 8003368:	d027      	beq.n	80033ba <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800336a:	4b52      	ldr	r3, [pc, #328]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2209      	movs	r2, #9
 8003370:	4393      	bics	r3, r2
 8003372:	0019      	movs	r1, r3
 8003374:	4b4f      	ldr	r3, [pc, #316]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003378:	430a      	orrs	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe fb82 	bl	8001a84 <HAL_GetTick>
 8003380:	0003      	movs	r3, r0
 8003382:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003386:	f7fe fb7d 	bl	8001a84 <HAL_GetTick>
 800338a:	0002      	movs	r2, r0
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e2b8      	b.n	800390a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003398:	4b46      	ldr	r3, [pc, #280]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2204      	movs	r2, #4
 800339e:	4013      	ands	r3, r2
 80033a0:	d0f1      	beq.n	8003386 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a2:	4b44      	ldr	r3, [pc, #272]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4a46      	ldr	r2, [pc, #280]	@ (80034c0 <HAL_RCC_OscConfig+0x348>)
 80033a8:	4013      	ands	r3, r2
 80033aa:	0019      	movs	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	021a      	lsls	r2, r3, #8
 80033b2:	4b40      	ldr	r3, [pc, #256]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 80033b4:	430a      	orrs	r2, r1
 80033b6:	605a      	str	r2, [r3, #4]
 80033b8:	e018      	b.n	80033ec <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ba:	4b3e      	ldr	r3, [pc, #248]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	4b3d      	ldr	r3, [pc, #244]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 80033c0:	2101      	movs	r1, #1
 80033c2:	438a      	bics	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c6:	f7fe fb5d 	bl	8001a84 <HAL_GetTick>
 80033ca:	0003      	movs	r3, r0
 80033cc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d0:	f7fe fb58 	bl	8001a84 <HAL_GetTick>
 80033d4:	0002      	movs	r2, r0
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e293      	b.n	800390a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80033e2:	4b34      	ldr	r3, [pc, #208]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2204      	movs	r2, #4
 80033e8:	4013      	ands	r3, r2
 80033ea:	d1f1      	bne.n	80033d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2210      	movs	r2, #16
 80033f2:	4013      	ands	r3, r2
 80033f4:	d100      	bne.n	80033f8 <HAL_RCC_OscConfig+0x280>
 80033f6:	e0a2      	b.n	800353e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d140      	bne.n	8003480 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033fe:	4b2d      	ldr	r3, [pc, #180]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	2380      	movs	r3, #128	@ 0x80
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4013      	ands	r3, r2
 8003408:	d005      	beq.n	8003416 <HAL_RCC_OscConfig+0x29e>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69db      	ldr	r3, [r3, #28]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e279      	b.n	800390a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003416:	4b27      	ldr	r3, [pc, #156]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4a2d      	ldr	r2, [pc, #180]	@ (80034d0 <HAL_RCC_OscConfig+0x358>)
 800341c:	4013      	ands	r3, r2
 800341e:	0019      	movs	r1, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003424:	4b23      	ldr	r3, [pc, #140]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800342a:	4b22      	ldr	r3, [pc, #136]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	0a19      	lsrs	r1, r3, #8
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	061a      	lsls	r2, r3, #24
 8003438:	4b1e      	ldr	r3, [pc, #120]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 800343a:	430a      	orrs	r2, r1
 800343c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	0b5b      	lsrs	r3, r3, #13
 8003444:	3301      	adds	r3, #1
 8003446:	2280      	movs	r2, #128	@ 0x80
 8003448:	0212      	lsls	r2, r2, #8
 800344a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800344c:	4b19      	ldr	r3, [pc, #100]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	210f      	movs	r1, #15
 8003454:	400b      	ands	r3, r1
 8003456:	491b      	ldr	r1, [pc, #108]	@ (80034c4 <HAL_RCC_OscConfig+0x34c>)
 8003458:	5ccb      	ldrb	r3, [r1, r3]
 800345a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800345c:	4b1a      	ldr	r3, [pc, #104]	@ (80034c8 <HAL_RCC_OscConfig+0x350>)
 800345e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003460:	4b1a      	ldr	r3, [pc, #104]	@ (80034cc <HAL_RCC_OscConfig+0x354>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2513      	movs	r5, #19
 8003466:	197c      	adds	r4, r7, r5
 8003468:	0018      	movs	r0, r3
 800346a:	f7fe fac5 	bl	80019f8 <HAL_InitTick>
 800346e:	0003      	movs	r3, r0
 8003470:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8003472:	197b      	adds	r3, r7, r5
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d061      	beq.n	800353e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800347a:	197b      	adds	r3, r7, r5
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	e244      	b.n	800390a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d040      	beq.n	800350a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003488:	4b0a      	ldr	r3, [pc, #40]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	4b09      	ldr	r3, [pc, #36]	@ (80034b4 <HAL_RCC_OscConfig+0x33c>)
 800348e:	2180      	movs	r1, #128	@ 0x80
 8003490:	0049      	lsls	r1, r1, #1
 8003492:	430a      	orrs	r2, r1
 8003494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003496:	f7fe faf5 	bl	8001a84 <HAL_GetTick>
 800349a:	0003      	movs	r3, r0
 800349c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800349e:	e019      	b.n	80034d4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034a0:	f7fe faf0 	bl	8001a84 <HAL_GetTick>
 80034a4:	0002      	movs	r2, r0
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d912      	bls.n	80034d4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e22b      	b.n	800390a <HAL_RCC_OscConfig+0x792>
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	40021000 	.word	0x40021000
 80034b8:	fffeffff 	.word	0xfffeffff
 80034bc:	fffbffff 	.word	0xfffbffff
 80034c0:	ffffe0ff 	.word	0xffffe0ff
 80034c4:	08006288 	.word	0x08006288
 80034c8:	20000000 	.word	0x20000000
 80034cc:	20000004 	.word	0x20000004
 80034d0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80034d4:	4bca      	ldr	r3, [pc, #808]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	2380      	movs	r3, #128	@ 0x80
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	4013      	ands	r3, r2
 80034de:	d0df      	beq.n	80034a0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034e0:	4bc7      	ldr	r3, [pc, #796]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	4ac7      	ldr	r2, [pc, #796]	@ (8003804 <HAL_RCC_OscConfig+0x68c>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	0019      	movs	r1, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034ee:	4bc4      	ldr	r3, [pc, #784]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 80034f0:	430a      	orrs	r2, r1
 80034f2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034f4:	4bc2      	ldr	r3, [pc, #776]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	0a19      	lsrs	r1, r3, #8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	061a      	lsls	r2, r3, #24
 8003502:	4bbf      	ldr	r3, [pc, #764]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
 8003508:	e019      	b.n	800353e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800350a:	4bbd      	ldr	r3, [pc, #756]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4bbc      	ldr	r3, [pc, #752]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003510:	49bd      	ldr	r1, [pc, #756]	@ (8003808 <HAL_RCC_OscConfig+0x690>)
 8003512:	400a      	ands	r2, r1
 8003514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003516:	f7fe fab5 	bl	8001a84 <HAL_GetTick>
 800351a:	0003      	movs	r3, r0
 800351c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800351e:	e008      	b.n	8003532 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003520:	f7fe fab0 	bl	8001a84 <HAL_GetTick>
 8003524:	0002      	movs	r2, r0
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e1eb      	b.n	800390a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003532:	4bb3      	ldr	r3, [pc, #716]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	2380      	movs	r3, #128	@ 0x80
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4013      	ands	r3, r2
 800353c:	d1f0      	bne.n	8003520 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2208      	movs	r2, #8
 8003544:	4013      	ands	r3, r2
 8003546:	d036      	beq.n	80035b6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d019      	beq.n	8003584 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003550:	4bab      	ldr	r3, [pc, #684]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003552:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003554:	4baa      	ldr	r3, [pc, #680]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003556:	2101      	movs	r1, #1
 8003558:	430a      	orrs	r2, r1
 800355a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355c:	f7fe fa92 	bl	8001a84 <HAL_GetTick>
 8003560:	0003      	movs	r3, r0
 8003562:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003564:	e008      	b.n	8003578 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003566:	f7fe fa8d 	bl	8001a84 <HAL_GetTick>
 800356a:	0002      	movs	r2, r0
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	2b02      	cmp	r3, #2
 8003572:	d901      	bls.n	8003578 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e1c8      	b.n	800390a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003578:	4ba1      	ldr	r3, [pc, #644]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 800357a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357c:	2202      	movs	r2, #2
 800357e:	4013      	ands	r3, r2
 8003580:	d0f1      	beq.n	8003566 <HAL_RCC_OscConfig+0x3ee>
 8003582:	e018      	b.n	80035b6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003584:	4b9e      	ldr	r3, [pc, #632]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003586:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003588:	4b9d      	ldr	r3, [pc, #628]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 800358a:	2101      	movs	r1, #1
 800358c:	438a      	bics	r2, r1
 800358e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003590:	f7fe fa78 	bl	8001a84 <HAL_GetTick>
 8003594:	0003      	movs	r3, r0
 8003596:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800359a:	f7fe fa73 	bl	8001a84 <HAL_GetTick>
 800359e:	0002      	movs	r2, r0
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e1ae      	b.n	800390a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035ac:	4b94      	ldr	r3, [pc, #592]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 80035ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b0:	2202      	movs	r2, #2
 80035b2:	4013      	ands	r3, r2
 80035b4:	d1f1      	bne.n	800359a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2204      	movs	r2, #4
 80035bc:	4013      	ands	r3, r2
 80035be:	d100      	bne.n	80035c2 <HAL_RCC_OscConfig+0x44a>
 80035c0:	e0ae      	b.n	8003720 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c2:	2023      	movs	r0, #35	@ 0x23
 80035c4:	183b      	adds	r3, r7, r0
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ca:	4b8d      	ldr	r3, [pc, #564]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 80035cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ce:	2380      	movs	r3, #128	@ 0x80
 80035d0:	055b      	lsls	r3, r3, #21
 80035d2:	4013      	ands	r3, r2
 80035d4:	d109      	bne.n	80035ea <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d6:	4b8a      	ldr	r3, [pc, #552]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 80035d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035da:	4b89      	ldr	r3, [pc, #548]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 80035dc:	2180      	movs	r1, #128	@ 0x80
 80035de:	0549      	lsls	r1, r1, #21
 80035e0:	430a      	orrs	r2, r1
 80035e2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80035e4:	183b      	adds	r3, r7, r0
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ea:	4b88      	ldr	r3, [pc, #544]	@ (800380c <HAL_RCC_OscConfig+0x694>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	2380      	movs	r3, #128	@ 0x80
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	4013      	ands	r3, r2
 80035f4:	d11a      	bne.n	800362c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035f6:	4b85      	ldr	r3, [pc, #532]	@ (800380c <HAL_RCC_OscConfig+0x694>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4b84      	ldr	r3, [pc, #528]	@ (800380c <HAL_RCC_OscConfig+0x694>)
 80035fc:	2180      	movs	r1, #128	@ 0x80
 80035fe:	0049      	lsls	r1, r1, #1
 8003600:	430a      	orrs	r2, r1
 8003602:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003604:	f7fe fa3e 	bl	8001a84 <HAL_GetTick>
 8003608:	0003      	movs	r3, r0
 800360a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360e:	f7fe fa39 	bl	8001a84 <HAL_GetTick>
 8003612:	0002      	movs	r2, r0
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b64      	cmp	r3, #100	@ 0x64
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e174      	b.n	800390a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	4b7a      	ldr	r3, [pc, #488]	@ (800380c <HAL_RCC_OscConfig+0x694>)
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	2380      	movs	r3, #128	@ 0x80
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	4013      	ands	r3, r2
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	2380      	movs	r3, #128	@ 0x80
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	429a      	cmp	r2, r3
 8003636:	d107      	bne.n	8003648 <HAL_RCC_OscConfig+0x4d0>
 8003638:	4b71      	ldr	r3, [pc, #452]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 800363a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800363c:	4b70      	ldr	r3, [pc, #448]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 800363e:	2180      	movs	r1, #128	@ 0x80
 8003640:	0049      	lsls	r1, r1, #1
 8003642:	430a      	orrs	r2, r1
 8003644:	651a      	str	r2, [r3, #80]	@ 0x50
 8003646:	e031      	b.n	80036ac <HAL_RCC_OscConfig+0x534>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10c      	bne.n	800366a <HAL_RCC_OscConfig+0x4f2>
 8003650:	4b6b      	ldr	r3, [pc, #428]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003652:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003654:	4b6a      	ldr	r3, [pc, #424]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003656:	496c      	ldr	r1, [pc, #432]	@ (8003808 <HAL_RCC_OscConfig+0x690>)
 8003658:	400a      	ands	r2, r1
 800365a:	651a      	str	r2, [r3, #80]	@ 0x50
 800365c:	4b68      	ldr	r3, [pc, #416]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 800365e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003660:	4b67      	ldr	r3, [pc, #412]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003662:	496b      	ldr	r1, [pc, #428]	@ (8003810 <HAL_RCC_OscConfig+0x698>)
 8003664:	400a      	ands	r2, r1
 8003666:	651a      	str	r2, [r3, #80]	@ 0x50
 8003668:	e020      	b.n	80036ac <HAL_RCC_OscConfig+0x534>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	23a0      	movs	r3, #160	@ 0xa0
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	429a      	cmp	r2, r3
 8003674:	d10e      	bne.n	8003694 <HAL_RCC_OscConfig+0x51c>
 8003676:	4b62      	ldr	r3, [pc, #392]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003678:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800367a:	4b61      	ldr	r3, [pc, #388]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 800367c:	2180      	movs	r1, #128	@ 0x80
 800367e:	00c9      	lsls	r1, r1, #3
 8003680:	430a      	orrs	r2, r1
 8003682:	651a      	str	r2, [r3, #80]	@ 0x50
 8003684:	4b5e      	ldr	r3, [pc, #376]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003686:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003688:	4b5d      	ldr	r3, [pc, #372]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 800368a:	2180      	movs	r1, #128	@ 0x80
 800368c:	0049      	lsls	r1, r1, #1
 800368e:	430a      	orrs	r2, r1
 8003690:	651a      	str	r2, [r3, #80]	@ 0x50
 8003692:	e00b      	b.n	80036ac <HAL_RCC_OscConfig+0x534>
 8003694:	4b5a      	ldr	r3, [pc, #360]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003696:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003698:	4b59      	ldr	r3, [pc, #356]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 800369a:	495b      	ldr	r1, [pc, #364]	@ (8003808 <HAL_RCC_OscConfig+0x690>)
 800369c:	400a      	ands	r2, r1
 800369e:	651a      	str	r2, [r3, #80]	@ 0x50
 80036a0:	4b57      	ldr	r3, [pc, #348]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 80036a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036a4:	4b56      	ldr	r3, [pc, #344]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 80036a6:	495a      	ldr	r1, [pc, #360]	@ (8003810 <HAL_RCC_OscConfig+0x698>)
 80036a8:	400a      	ands	r2, r1
 80036aa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d015      	beq.n	80036e0 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b4:	f7fe f9e6 	bl	8001a84 <HAL_GetTick>
 80036b8:	0003      	movs	r3, r0
 80036ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036bc:	e009      	b.n	80036d2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fe f9e1 	bl	8001a84 <HAL_GetTick>
 80036c2:	0002      	movs	r2, r0
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	4a52      	ldr	r2, [pc, #328]	@ (8003814 <HAL_RCC_OscConfig+0x69c>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e11b      	b.n	800390a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036d2:	4b4b      	ldr	r3, [pc, #300]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 80036d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036d6:	2380      	movs	r3, #128	@ 0x80
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4013      	ands	r3, r2
 80036dc:	d0ef      	beq.n	80036be <HAL_RCC_OscConfig+0x546>
 80036de:	e014      	b.n	800370a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e0:	f7fe f9d0 	bl	8001a84 <HAL_GetTick>
 80036e4:	0003      	movs	r3, r0
 80036e6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036e8:	e009      	b.n	80036fe <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f7fe f9cb 	bl	8001a84 <HAL_GetTick>
 80036ee:	0002      	movs	r2, r0
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	4a47      	ldr	r2, [pc, #284]	@ (8003814 <HAL_RCC_OscConfig+0x69c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e105      	b.n	800390a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80036fe:	4b40      	ldr	r3, [pc, #256]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003700:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003702:	2380      	movs	r3, #128	@ 0x80
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4013      	ands	r3, r2
 8003708:	d1ef      	bne.n	80036ea <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800370a:	2323      	movs	r3, #35	@ 0x23
 800370c:	18fb      	adds	r3, r7, r3
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d105      	bne.n	8003720 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003714:	4b3a      	ldr	r3, [pc, #232]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003716:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003718:	4b39      	ldr	r3, [pc, #228]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 800371a:	493f      	ldr	r1, [pc, #252]	@ (8003818 <HAL_RCC_OscConfig+0x6a0>)
 800371c:	400a      	ands	r2, r1
 800371e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2220      	movs	r2, #32
 8003726:	4013      	ands	r3, r2
 8003728:	d049      	beq.n	80037be <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d026      	beq.n	8003780 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003732:	4b33      	ldr	r3, [pc, #204]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	4b32      	ldr	r3, [pc, #200]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003738:	2101      	movs	r1, #1
 800373a:	430a      	orrs	r2, r1
 800373c:	609a      	str	r2, [r3, #8]
 800373e:	4b30      	ldr	r3, [pc, #192]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003740:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003742:	4b2f      	ldr	r3, [pc, #188]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003744:	2101      	movs	r1, #1
 8003746:	430a      	orrs	r2, r1
 8003748:	635a      	str	r2, [r3, #52]	@ 0x34
 800374a:	4b34      	ldr	r3, [pc, #208]	@ (800381c <HAL_RCC_OscConfig+0x6a4>)
 800374c:	6a1a      	ldr	r2, [r3, #32]
 800374e:	4b33      	ldr	r3, [pc, #204]	@ (800381c <HAL_RCC_OscConfig+0x6a4>)
 8003750:	2180      	movs	r1, #128	@ 0x80
 8003752:	0189      	lsls	r1, r1, #6
 8003754:	430a      	orrs	r2, r1
 8003756:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003758:	f7fe f994 	bl	8001a84 <HAL_GetTick>
 800375c:	0003      	movs	r3, r0
 800375e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003762:	f7fe f98f 	bl	8001a84 <HAL_GetTick>
 8003766:	0002      	movs	r2, r0
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e0ca      	b.n	800390a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003774:	4b22      	ldr	r3, [pc, #136]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2202      	movs	r2, #2
 800377a:	4013      	ands	r3, r2
 800377c:	d0f1      	beq.n	8003762 <HAL_RCC_OscConfig+0x5ea>
 800377e:	e01e      	b.n	80037be <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003780:	4b1f      	ldr	r3, [pc, #124]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	4b1e      	ldr	r3, [pc, #120]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 8003786:	2101      	movs	r1, #1
 8003788:	438a      	bics	r2, r1
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	4b23      	ldr	r3, [pc, #140]	@ (800381c <HAL_RCC_OscConfig+0x6a4>)
 800378e:	6a1a      	ldr	r2, [r3, #32]
 8003790:	4b22      	ldr	r3, [pc, #136]	@ (800381c <HAL_RCC_OscConfig+0x6a4>)
 8003792:	4923      	ldr	r1, [pc, #140]	@ (8003820 <HAL_RCC_OscConfig+0x6a8>)
 8003794:	400a      	ands	r2, r1
 8003796:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe f974 	bl	8001a84 <HAL_GetTick>
 800379c:	0003      	movs	r3, r0
 800379e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037a2:	f7fe f96f 	bl	8001a84 <HAL_GetTick>
 80037a6:	0002      	movs	r2, r0
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e0aa      	b.n	800390a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80037b4:	4b12      	ldr	r3, [pc, #72]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2202      	movs	r2, #2
 80037ba:	4013      	ands	r3, r2
 80037bc:	d1f1      	bne.n	80037a2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d100      	bne.n	80037c8 <HAL_RCC_OscConfig+0x650>
 80037c6:	e09f      	b.n	8003908 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	2b0c      	cmp	r3, #12
 80037cc:	d100      	bne.n	80037d0 <HAL_RCC_OscConfig+0x658>
 80037ce:	e078      	b.n	80038c2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d159      	bne.n	800388c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d8:	4b09      	ldr	r3, [pc, #36]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	4b08      	ldr	r3, [pc, #32]	@ (8003800 <HAL_RCC_OscConfig+0x688>)
 80037de:	4911      	ldr	r1, [pc, #68]	@ (8003824 <HAL_RCC_OscConfig+0x6ac>)
 80037e0:	400a      	ands	r2, r1
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fe f94e 	bl	8001a84 <HAL_GetTick>
 80037e8:	0003      	movs	r3, r0
 80037ea:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80037ec:	e01c      	b.n	8003828 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ee:	f7fe f949 	bl	8001a84 <HAL_GetTick>
 80037f2:	0002      	movs	r2, r0
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d915      	bls.n	8003828 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e084      	b.n	800390a <HAL_RCC_OscConfig+0x792>
 8003800:	40021000 	.word	0x40021000
 8003804:	ffff1fff 	.word	0xffff1fff
 8003808:	fffffeff 	.word	0xfffffeff
 800380c:	40007000 	.word	0x40007000
 8003810:	fffffbff 	.word	0xfffffbff
 8003814:	00001388 	.word	0x00001388
 8003818:	efffffff 	.word	0xefffffff
 800381c:	40010000 	.word	0x40010000
 8003820:	ffffdfff 	.word	0xffffdfff
 8003824:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003828:	4b3a      	ldr	r3, [pc, #232]	@ (8003914 <HAL_RCC_OscConfig+0x79c>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	2380      	movs	r3, #128	@ 0x80
 800382e:	049b      	lsls	r3, r3, #18
 8003830:	4013      	ands	r3, r2
 8003832:	d1dc      	bne.n	80037ee <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003834:	4b37      	ldr	r3, [pc, #220]	@ (8003914 <HAL_RCC_OscConfig+0x79c>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	4a37      	ldr	r2, [pc, #220]	@ (8003918 <HAL_RCC_OscConfig+0x7a0>)
 800383a:	4013      	ands	r3, r2
 800383c:	0019      	movs	r1, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800384c:	431a      	orrs	r2, r3
 800384e:	4b31      	ldr	r3, [pc, #196]	@ (8003914 <HAL_RCC_OscConfig+0x79c>)
 8003850:	430a      	orrs	r2, r1
 8003852:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003854:	4b2f      	ldr	r3, [pc, #188]	@ (8003914 <HAL_RCC_OscConfig+0x79c>)
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4b2e      	ldr	r3, [pc, #184]	@ (8003914 <HAL_RCC_OscConfig+0x79c>)
 800385a:	2180      	movs	r1, #128	@ 0x80
 800385c:	0449      	lsls	r1, r1, #17
 800385e:	430a      	orrs	r2, r1
 8003860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003862:	f7fe f90f 	bl	8001a84 <HAL_GetTick>
 8003866:	0003      	movs	r3, r0
 8003868:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800386c:	f7fe f90a 	bl	8001a84 <HAL_GetTick>
 8003870:	0002      	movs	r2, r0
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e045      	b.n	800390a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800387e:	4b25      	ldr	r3, [pc, #148]	@ (8003914 <HAL_RCC_OscConfig+0x79c>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	2380      	movs	r3, #128	@ 0x80
 8003884:	049b      	lsls	r3, r3, #18
 8003886:	4013      	ands	r3, r2
 8003888:	d0f0      	beq.n	800386c <HAL_RCC_OscConfig+0x6f4>
 800388a:	e03d      	b.n	8003908 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800388c:	4b21      	ldr	r3, [pc, #132]	@ (8003914 <HAL_RCC_OscConfig+0x79c>)
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	4b20      	ldr	r3, [pc, #128]	@ (8003914 <HAL_RCC_OscConfig+0x79c>)
 8003892:	4922      	ldr	r1, [pc, #136]	@ (800391c <HAL_RCC_OscConfig+0x7a4>)
 8003894:	400a      	ands	r2, r1
 8003896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7fe f8f4 	bl	8001a84 <HAL_GetTick>
 800389c:	0003      	movs	r3, r0
 800389e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a2:	f7fe f8ef 	bl	8001a84 <HAL_GetTick>
 80038a6:	0002      	movs	r2, r0
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e02a      	b.n	800390a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80038b4:	4b17      	ldr	r3, [pc, #92]	@ (8003914 <HAL_RCC_OscConfig+0x79c>)
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	2380      	movs	r3, #128	@ 0x80
 80038ba:	049b      	lsls	r3, r3, #18
 80038bc:	4013      	ands	r3, r2
 80038be:	d1f0      	bne.n	80038a2 <HAL_RCC_OscConfig+0x72a>
 80038c0:	e022      	b.n	8003908 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d101      	bne.n	80038ce <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e01d      	b.n	800390a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038ce:	4b11      	ldr	r3, [pc, #68]	@ (8003914 <HAL_RCC_OscConfig+0x79c>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	2380      	movs	r3, #128	@ 0x80
 80038d8:	025b      	lsls	r3, r3, #9
 80038da:	401a      	ands	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d10f      	bne.n	8003904 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	23f0      	movs	r3, #240	@ 0xf0
 80038e8:	039b      	lsls	r3, r3, #14
 80038ea:	401a      	ands	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d107      	bne.n	8003904 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	23c0      	movs	r3, #192	@ 0xc0
 80038f8:	041b      	lsls	r3, r3, #16
 80038fa:	401a      	ands	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003900:	429a      	cmp	r2, r3
 8003902:	d001      	beq.n	8003908 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	0018      	movs	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	b00a      	add	sp, #40	@ 0x28
 8003910:	bdb0      	pop	{r4, r5, r7, pc}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	40021000 	.word	0x40021000
 8003918:	ff02ffff 	.word	0xff02ffff
 800391c:	feffffff 	.word	0xfeffffff

08003920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003920:	b5b0      	push	{r4, r5, r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e128      	b.n	8003b86 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003934:	4b96      	ldr	r3, [pc, #600]	@ (8003b90 <HAL_RCC_ClockConfig+0x270>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2201      	movs	r2, #1
 800393a:	4013      	ands	r3, r2
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d91e      	bls.n	8003980 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b93      	ldr	r3, [pc, #588]	@ (8003b90 <HAL_RCC_ClockConfig+0x270>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2201      	movs	r2, #1
 8003948:	4393      	bics	r3, r2
 800394a:	0019      	movs	r1, r3
 800394c:	4b90      	ldr	r3, [pc, #576]	@ (8003b90 <HAL_RCC_ClockConfig+0x270>)
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003954:	f7fe f896 	bl	8001a84 <HAL_GetTick>
 8003958:	0003      	movs	r3, r0
 800395a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395c:	e009      	b.n	8003972 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800395e:	f7fe f891 	bl	8001a84 <HAL_GetTick>
 8003962:	0002      	movs	r2, r0
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	4a8a      	ldr	r2, [pc, #552]	@ (8003b94 <HAL_RCC_ClockConfig+0x274>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e109      	b.n	8003b86 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b87      	ldr	r3, [pc, #540]	@ (8003b90 <HAL_RCC_ClockConfig+0x270>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2201      	movs	r2, #1
 8003978:	4013      	ands	r3, r2
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d1ee      	bne.n	800395e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2202      	movs	r2, #2
 8003986:	4013      	ands	r3, r2
 8003988:	d009      	beq.n	800399e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398a:	4b83      	ldr	r3, [pc, #524]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	22f0      	movs	r2, #240	@ 0xf0
 8003990:	4393      	bics	r3, r2
 8003992:	0019      	movs	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	4b7f      	ldr	r3, [pc, #508]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 800399a:	430a      	orrs	r2, r1
 800399c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2201      	movs	r2, #1
 80039a4:	4013      	ands	r3, r2
 80039a6:	d100      	bne.n	80039aa <HAL_RCC_ClockConfig+0x8a>
 80039a8:	e089      	b.n	8003abe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80039b2:	4b79      	ldr	r3, [pc, #484]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	2380      	movs	r3, #128	@ 0x80
 80039b8:	029b      	lsls	r3, r3, #10
 80039ba:	4013      	ands	r3, r2
 80039bc:	d120      	bne.n	8003a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e0e1      	b.n	8003b86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d107      	bne.n	80039da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039ca:	4b73      	ldr	r3, [pc, #460]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	2380      	movs	r3, #128	@ 0x80
 80039d0:	049b      	lsls	r3, r3, #18
 80039d2:	4013      	ands	r3, r2
 80039d4:	d114      	bne.n	8003a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e0d5      	b.n	8003b86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d106      	bne.n	80039f0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039e2:	4b6d      	ldr	r3, [pc, #436]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2204      	movs	r2, #4
 80039e8:	4013      	ands	r3, r2
 80039ea:	d109      	bne.n	8003a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0ca      	b.n	8003b86 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80039f0:	4b69      	ldr	r3, [pc, #420]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	2380      	movs	r3, #128	@ 0x80
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4013      	ands	r3, r2
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0c2      	b.n	8003b86 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a00:	4b65      	ldr	r3, [pc, #404]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2203      	movs	r2, #3
 8003a06:	4393      	bics	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	4b62      	ldr	r3, [pc, #392]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 8003a10:	430a      	orrs	r2, r1
 8003a12:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a14:	f7fe f836 	bl	8001a84 <HAL_GetTick>
 8003a18:	0003      	movs	r3, r0
 8003a1a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d111      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a24:	e009      	b.n	8003a3a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a26:	f7fe f82d 	bl	8001a84 <HAL_GetTick>
 8003a2a:	0002      	movs	r2, r0
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	4a58      	ldr	r2, [pc, #352]	@ (8003b94 <HAL_RCC_ClockConfig+0x274>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e0a5      	b.n	8003b86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a3a:	4b57      	ldr	r3, [pc, #348]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	220c      	movs	r2, #12
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d1ef      	bne.n	8003a26 <HAL_RCC_ClockConfig+0x106>
 8003a46:	e03a      	b.n	8003abe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b03      	cmp	r3, #3
 8003a4e:	d111      	bne.n	8003a74 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a50:	e009      	b.n	8003a66 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a52:	f7fe f817 	bl	8001a84 <HAL_GetTick>
 8003a56:	0002      	movs	r2, r0
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	4a4d      	ldr	r2, [pc, #308]	@ (8003b94 <HAL_RCC_ClockConfig+0x274>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e08f      	b.n	8003b86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a66:	4b4c      	ldr	r3, [pc, #304]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	220c      	movs	r2, #12
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d1ef      	bne.n	8003a52 <HAL_RCC_ClockConfig+0x132>
 8003a72:	e024      	b.n	8003abe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d11b      	bne.n	8003ab4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a7c:	e009      	b.n	8003a92 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a7e:	f7fe f801 	bl	8001a84 <HAL_GetTick>
 8003a82:	0002      	movs	r2, r0
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	4a42      	ldr	r2, [pc, #264]	@ (8003b94 <HAL_RCC_ClockConfig+0x274>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d901      	bls.n	8003a92 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e079      	b.n	8003b86 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a92:	4b41      	ldr	r3, [pc, #260]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	220c      	movs	r2, #12
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b04      	cmp	r3, #4
 8003a9c:	d1ef      	bne.n	8003a7e <HAL_RCC_ClockConfig+0x15e>
 8003a9e:	e00e      	b.n	8003abe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa0:	f7fd fff0 	bl	8001a84 <HAL_GetTick>
 8003aa4:	0002      	movs	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	4a3a      	ldr	r2, [pc, #232]	@ (8003b94 <HAL_RCC_ClockConfig+0x274>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e068      	b.n	8003b86 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003ab4:	4b38      	ldr	r3, [pc, #224]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	220c      	movs	r2, #12
 8003aba:	4013      	ands	r3, r2
 8003abc:	d1f0      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003abe:	4b34      	ldr	r3, [pc, #208]	@ (8003b90 <HAL_RCC_ClockConfig+0x270>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d21e      	bcs.n	8003b0a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003acc:	4b30      	ldr	r3, [pc, #192]	@ (8003b90 <HAL_RCC_ClockConfig+0x270>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	4393      	bics	r3, r2
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	4b2e      	ldr	r3, [pc, #184]	@ (8003b90 <HAL_RCC_ClockConfig+0x270>)
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ade:	f7fd ffd1 	bl	8001a84 <HAL_GetTick>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	e009      	b.n	8003afc <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae8:	f7fd ffcc 	bl	8001a84 <HAL_GetTick>
 8003aec:	0002      	movs	r2, r0
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	4a28      	ldr	r2, [pc, #160]	@ (8003b94 <HAL_RCC_ClockConfig+0x274>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e044      	b.n	8003b86 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afc:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <HAL_RCC_ClockConfig+0x270>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2201      	movs	r2, #1
 8003b02:	4013      	ands	r3, r2
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d1ee      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	4013      	ands	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b14:	4b20      	ldr	r3, [pc, #128]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	4a20      	ldr	r2, [pc, #128]	@ (8003b9c <HAL_RCC_ClockConfig+0x27c>)
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	4b1d      	ldr	r3, [pc, #116]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 8003b24:	430a      	orrs	r2, r1
 8003b26:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d00a      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b32:	4b19      	ldr	r3, [pc, #100]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	4a1a      	ldr	r2, [pc, #104]	@ (8003ba0 <HAL_RCC_ClockConfig+0x280>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	0019      	movs	r1, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	00da      	lsls	r2, r3, #3
 8003b42:	4b15      	ldr	r3, [pc, #84]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 8003b44:	430a      	orrs	r2, r1
 8003b46:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b48:	f000 f832 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8003b4c:	0001      	movs	r1, r0
 8003b4e:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <HAL_RCC_ClockConfig+0x278>)
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	091b      	lsrs	r3, r3, #4
 8003b54:	220f      	movs	r2, #15
 8003b56:	4013      	ands	r3, r2
 8003b58:	4a12      	ldr	r2, [pc, #72]	@ (8003ba4 <HAL_RCC_ClockConfig+0x284>)
 8003b5a:	5cd3      	ldrb	r3, [r2, r3]
 8003b5c:	000a      	movs	r2, r1
 8003b5e:	40da      	lsrs	r2, r3
 8003b60:	4b11      	ldr	r3, [pc, #68]	@ (8003ba8 <HAL_RCC_ClockConfig+0x288>)
 8003b62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b64:	4b11      	ldr	r3, [pc, #68]	@ (8003bac <HAL_RCC_ClockConfig+0x28c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	250b      	movs	r5, #11
 8003b6a:	197c      	adds	r4, r7, r5
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f7fd ff43 	bl	80019f8 <HAL_InitTick>
 8003b72:	0003      	movs	r3, r0
 8003b74:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003b76:	197b      	adds	r3, r7, r5
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003b7e:	197b      	adds	r3, r7, r5
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	b004      	add	sp, #16
 8003b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8e:	46c0      	nop			@ (mov r8, r8)
 8003b90:	40022000 	.word	0x40022000
 8003b94:	00001388 	.word	0x00001388
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	fffff8ff 	.word	0xfffff8ff
 8003ba0:	ffffc7ff 	.word	0xffffc7ff
 8003ba4:	08006288 	.word	0x08006288
 8003ba8:	20000000 	.word	0x20000000
 8003bac:	20000004 	.word	0x20000004

08003bb0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003bb6:	4b3c      	ldr	r3, [pc, #240]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	220c      	movs	r2, #12
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	2b0c      	cmp	r3, #12
 8003bc4:	d013      	beq.n	8003bee <HAL_RCC_GetSysClockFreq+0x3e>
 8003bc6:	d85c      	bhi.n	8003c82 <HAL_RCC_GetSysClockFreq+0xd2>
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d002      	beq.n	8003bd2 <HAL_RCC_GetSysClockFreq+0x22>
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d00b      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x38>
 8003bd0:	e057      	b.n	8003c82 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003bd2:	4b35      	ldr	r3, [pc, #212]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d002      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003bdc:	4b33      	ldr	r3, [pc, #204]	@ (8003cac <HAL_RCC_GetSysClockFreq+0xfc>)
 8003bde:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003be0:	e05d      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003be2:	4b33      	ldr	r3, [pc, #204]	@ (8003cb0 <HAL_RCC_GetSysClockFreq+0x100>)
 8003be4:	613b      	str	r3, [r7, #16]
      break;
 8003be6:	e05a      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003be8:	4b32      	ldr	r3, [pc, #200]	@ (8003cb4 <HAL_RCC_GetSysClockFreq+0x104>)
 8003bea:	613b      	str	r3, [r7, #16]
      break;
 8003bec:	e057      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	0c9b      	lsrs	r3, r3, #18
 8003bf2:	220f      	movs	r2, #15
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	4a30      	ldr	r2, [pc, #192]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf8:	5cd3      	ldrb	r3, [r2, r3]
 8003bfa:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	0d9b      	lsrs	r3, r3, #22
 8003c00:	2203      	movs	r2, #3
 8003c02:	4013      	ands	r3, r2
 8003c04:	3301      	adds	r3, #1
 8003c06:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c08:	4b27      	ldr	r3, [pc, #156]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	2380      	movs	r3, #128	@ 0x80
 8003c0e:	025b      	lsls	r3, r3, #9
 8003c10:	4013      	ands	r3, r2
 8003c12:	d00f      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	000a      	movs	r2, r1
 8003c18:	0152      	lsls	r2, r2, #5
 8003c1a:	1a52      	subs	r2, r2, r1
 8003c1c:	0193      	lsls	r3, r2, #6
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	185b      	adds	r3, r3, r1
 8003c24:	025b      	lsls	r3, r3, #9
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f7fc fa7f 	bl	800012c <__udivsi3>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	e023      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003c34:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2210      	movs	r2, #16
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	d00f      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003c3e:	68b9      	ldr	r1, [r7, #8]
 8003c40:	000a      	movs	r2, r1
 8003c42:	0152      	lsls	r2, r2, #5
 8003c44:	1a52      	subs	r2, r2, r1
 8003c46:	0193      	lsls	r3, r2, #6
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	00db      	lsls	r3, r3, #3
 8003c4c:	185b      	adds	r3, r3, r1
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	0018      	movs	r0, r3
 8003c54:	f7fc fa6a 	bl	800012c <__udivsi3>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	617b      	str	r3, [r7, #20]
 8003c5c:	e00e      	b.n	8003c7c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	000a      	movs	r2, r1
 8003c62:	0152      	lsls	r2, r2, #5
 8003c64:	1a52      	subs	r2, r2, r1
 8003c66:	0193      	lsls	r3, r2, #6
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	00db      	lsls	r3, r3, #3
 8003c6c:	185b      	adds	r3, r3, r1
 8003c6e:	029b      	lsls	r3, r3, #10
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	0018      	movs	r0, r3
 8003c74:	f7fc fa5a 	bl	800012c <__udivsi3>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	613b      	str	r3, [r7, #16]
      break;
 8003c80:	e00d      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003c82:	4b09      	ldr	r3, [pc, #36]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	0b5b      	lsrs	r3, r3, #13
 8003c88:	2207      	movs	r2, #7
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	3301      	adds	r3, #1
 8003c92:	2280      	movs	r2, #128	@ 0x80
 8003c94:	0212      	lsls	r2, r2, #8
 8003c96:	409a      	lsls	r2, r3
 8003c98:	0013      	movs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]
      break;
 8003c9c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003c9e:	693b      	ldr	r3, [r7, #16]
}
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	b006      	add	sp, #24
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40021000 	.word	0x40021000
 8003cac:	003d0900 	.word	0x003d0900
 8003cb0:	00f42400 	.word	0x00f42400
 8003cb4:	007a1200 	.word	0x007a1200
 8003cb8:	080062a0 	.word	0x080062a0

08003cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc0:	4b02      	ldr	r3, [pc, #8]	@ (8003ccc <HAL_RCC_GetHCLKFreq+0x10>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
}
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	46c0      	nop			@ (mov r8, r8)
 8003ccc:	20000000 	.word	0x20000000

08003cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cd4:	f7ff fff2 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 8003cd8:	0001      	movs	r1, r0
 8003cda:	4b06      	ldr	r3, [pc, #24]	@ (8003cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	0a1b      	lsrs	r3, r3, #8
 8003ce0:	2207      	movs	r2, #7
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	4a04      	ldr	r2, [pc, #16]	@ (8003cf8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ce6:	5cd3      	ldrb	r3, [r2, r3]
 8003ce8:	40d9      	lsrs	r1, r3
 8003cea:	000b      	movs	r3, r1
}
 8003cec:	0018      	movs	r0, r3
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	46c0      	nop			@ (mov r8, r8)
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	08006298 	.word	0x08006298

08003cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d00:	f7ff ffdc 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 8003d04:	0001      	movs	r1, r0
 8003d06:	4b06      	ldr	r3, [pc, #24]	@ (8003d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	0adb      	lsrs	r3, r3, #11
 8003d0c:	2207      	movs	r2, #7
 8003d0e:	4013      	ands	r3, r2
 8003d10:	4a04      	ldr	r2, [pc, #16]	@ (8003d24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d12:	5cd3      	ldrb	r3, [r2, r3]
 8003d14:	40d9      	lsrs	r1, r3
 8003d16:	000b      	movs	r3, r1
}
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	40021000 	.word	0x40021000
 8003d24:	08006298 	.word	0x08006298

08003d28 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003d30:	2317      	movs	r3, #23
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	2200      	movs	r2, #0
 8003d36:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d106      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	2380      	movs	r3, #128	@ 0x80
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d100      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003d4e:	e104      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d50:	4bb9      	ldr	r3, [pc, #740]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d54:	2380      	movs	r3, #128	@ 0x80
 8003d56:	055b      	lsls	r3, r3, #21
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d10a      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d5c:	4bb6      	ldr	r3, [pc, #728]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d60:	4bb5      	ldr	r3, [pc, #724]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d62:	2180      	movs	r1, #128	@ 0x80
 8003d64:	0549      	lsls	r1, r1, #21
 8003d66:	430a      	orrs	r2, r1
 8003d68:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003d6a:	2317      	movs	r3, #23
 8003d6c:	18fb      	adds	r3, r7, r3
 8003d6e:	2201      	movs	r2, #1
 8003d70:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d72:	4bb2      	ldr	r3, [pc, #712]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	2380      	movs	r3, #128	@ 0x80
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d11a      	bne.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d7e:	4baf      	ldr	r3, [pc, #700]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	4bae      	ldr	r3, [pc, #696]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003d84:	2180      	movs	r1, #128	@ 0x80
 8003d86:	0049      	lsls	r1, r1, #1
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8c:	f7fd fe7a 	bl	8001a84 <HAL_GetTick>
 8003d90:	0003      	movs	r3, r0
 8003d92:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d94:	e008      	b.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d96:	f7fd fe75 	bl	8001a84 <HAL_GetTick>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b64      	cmp	r3, #100	@ 0x64
 8003da2:	d901      	bls.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e143      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	4ba4      	ldr	r3, [pc, #656]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	2380      	movs	r3, #128	@ 0x80
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	4013      	ands	r3, r2
 8003db2:	d0f0      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003db4:	4ba0      	ldr	r3, [pc, #640]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	23c0      	movs	r3, #192	@ 0xc0
 8003dba:	039b      	lsls	r3, r3, #14
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	23c0      	movs	r3, #192	@ 0xc0
 8003dc6:	039b      	lsls	r3, r3, #14
 8003dc8:	4013      	ands	r3, r2
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d107      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	23c0      	movs	r3, #192	@ 0xc0
 8003dd6:	039b      	lsls	r3, r3, #14
 8003dd8:	4013      	ands	r3, r2
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d013      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	23c0      	movs	r3, #192	@ 0xc0
 8003de6:	029b      	lsls	r3, r3, #10
 8003de8:	401a      	ands	r2, r3
 8003dea:	23c0      	movs	r3, #192	@ 0xc0
 8003dec:	029b      	lsls	r3, r3, #10
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d10a      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003df2:	4b91      	ldr	r3, [pc, #580]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	2380      	movs	r3, #128	@ 0x80
 8003df8:	029b      	lsls	r3, r3, #10
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	2380      	movs	r3, #128	@ 0x80
 8003dfe:	029b      	lsls	r3, r3, #10
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d101      	bne.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e113      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003e08:	4b8b      	ldr	r3, [pc, #556]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e0c:	23c0      	movs	r3, #192	@ 0xc0
 8003e0e:	029b      	lsls	r3, r3, #10
 8003e10:	4013      	ands	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d049      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	23c0      	movs	r3, #192	@ 0xc0
 8003e20:	029b      	lsls	r3, r3, #10
 8003e22:	4013      	ands	r3, r2
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d004      	beq.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	4013      	ands	r3, r2
 8003e32:	d10d      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689a      	ldr	r2, [r3, #8]
 8003e38:	23c0      	movs	r3, #192	@ 0xc0
 8003e3a:	029b      	lsls	r3, r3, #10
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d034      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	2380      	movs	r3, #128	@ 0x80
 8003e4a:	011b      	lsls	r3, r3, #4
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d02e      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003e50:	4b79      	ldr	r3, [pc, #484]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e54:	4a7a      	ldr	r2, [pc, #488]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e5a:	4b77      	ldr	r3, [pc, #476]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e5e:	4b76      	ldr	r3, [pc, #472]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e60:	2180      	movs	r1, #128	@ 0x80
 8003e62:	0309      	lsls	r1, r1, #12
 8003e64:	430a      	orrs	r2, r1
 8003e66:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e68:	4b73      	ldr	r3, [pc, #460]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e6a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003e6c:	4b72      	ldr	r3, [pc, #456]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e6e:	4975      	ldr	r1, [pc, #468]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003e70:	400a      	ands	r2, r1
 8003e72:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003e74:	4b70      	ldr	r3, [pc, #448]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	2380      	movs	r3, #128	@ 0x80
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4013      	ands	r3, r2
 8003e82:	d014      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fd fdfe 	bl	8001a84 <HAL_GetTick>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e8c:	e009      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e8e:	f7fd fdf9 	bl	8001a84 <HAL_GetTick>
 8003e92:	0002      	movs	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	4a6b      	ldr	r2, [pc, #428]	@ (8004048 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e0c6      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ea2:	4b65      	ldr	r3, [pc, #404]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ea4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d0ef      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	2380      	movs	r3, #128	@ 0x80
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d01f      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	23c0      	movs	r3, #192	@ 0xc0
 8003ec0:	029b      	lsls	r3, r3, #10
 8003ec2:	401a      	ands	r2, r3
 8003ec4:	23c0      	movs	r3, #192	@ 0xc0
 8003ec6:	029b      	lsls	r3, r3, #10
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d10c      	bne.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003ecc:	4b5a      	ldr	r3, [pc, #360]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a5e      	ldr	r2, [pc, #376]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	0019      	movs	r1, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	23c0      	movs	r3, #192	@ 0xc0
 8003edc:	039b      	lsls	r3, r3, #14
 8003ede:	401a      	ands	r2, r3
 8003ee0:	4b55      	ldr	r3, [pc, #340]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	4b54      	ldr	r3, [pc, #336]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ee8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	23c0      	movs	r3, #192	@ 0xc0
 8003ef0:	029b      	lsls	r3, r3, #10
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	4b50      	ldr	r3, [pc, #320]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2220      	movs	r2, #32
 8003f00:	4013      	ands	r3, r2
 8003f02:	d01f      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	23c0      	movs	r3, #192	@ 0xc0
 8003f0a:	029b      	lsls	r3, r3, #10
 8003f0c:	401a      	ands	r2, r3
 8003f0e:	23c0      	movs	r3, #192	@ 0xc0
 8003f10:	029b      	lsls	r3, r3, #10
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003f16:	4b48      	ldr	r3, [pc, #288]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a4c      	ldr	r2, [pc, #304]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	0019      	movs	r1, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	23c0      	movs	r3, #192	@ 0xc0
 8003f26:	039b      	lsls	r3, r3, #14
 8003f28:	401a      	ands	r2, r3
 8003f2a:	4b43      	ldr	r3, [pc, #268]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	4b41      	ldr	r3, [pc, #260]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f32:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	23c0      	movs	r3, #192	@ 0xc0
 8003f3a:	029b      	lsls	r3, r3, #10
 8003f3c:	401a      	ands	r2, r3
 8003f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f40:	430a      	orrs	r2, r1
 8003f42:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f44:	2317      	movs	r3, #23
 8003f46:	18fb      	adds	r3, r7, r3
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d105      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f4e:	4b3a      	ldr	r3, [pc, #232]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f52:	4b39      	ldr	r3, [pc, #228]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f54:	493e      	ldr	r1, [pc, #248]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003f56:	400a      	ands	r2, r1
 8003f58:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4013      	ands	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f64:	4b34      	ldr	r3, [pc, #208]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f68:	2203      	movs	r2, #3
 8003f6a:	4393      	bics	r3, r2
 8003f6c:	0019      	movs	r1, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68da      	ldr	r2, [r3, #12]
 8003f72:	4b31      	ldr	r3, [pc, #196]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f74:	430a      	orrs	r2, r1
 8003f76:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2202      	movs	r2, #2
 8003f7e:	4013      	ands	r3, r2
 8003f80:	d009      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f82:	4b2d      	ldr	r3, [pc, #180]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f86:	220c      	movs	r2, #12
 8003f88:	4393      	bics	r3, r2
 8003f8a:	0019      	movs	r1, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691a      	ldr	r2, [r3, #16]
 8003f90:	4b29      	ldr	r3, [pc, #164]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003f92:	430a      	orrs	r2, r1
 8003f94:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2204      	movs	r2, #4
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fa0:	4b25      	ldr	r3, [pc, #148]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	0019      	movs	r1, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	4b22      	ldr	r3, [pc, #136]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2208      	movs	r2, #8
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc2:	4a25      	ldr	r2, [pc, #148]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	699a      	ldr	r2, [r3, #24]
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	2380      	movs	r3, #128	@ 0x80
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fde:	4b16      	ldr	r3, [pc, #88]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe2:	4a17      	ldr	r2, [pc, #92]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	0019      	movs	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	4b12      	ldr	r3, [pc, #72]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2240      	movs	r2, #64	@ 0x40
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d009      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ffc:	4b0e      	ldr	r3, [pc, #56]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ffe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004000:	4a16      	ldr	r2, [pc, #88]	@ (800405c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004002:	4013      	ands	r3, r2
 8004004:	0019      	movs	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800400a:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800400c:	430a      	orrs	r2, r1
 800400e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2280      	movs	r2, #128	@ 0x80
 8004016:	4013      	ands	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800401a:	4b07      	ldr	r3, [pc, #28]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800401c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800401e:	4a10      	ldr	r2, [pc, #64]	@ (8004060 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004020:	4013      	ands	r3, r2
 8004022:	0019      	movs	r1, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a1a      	ldr	r2, [r3, #32]
 8004028:	4b03      	ldr	r3, [pc, #12]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800402a:	430a      	orrs	r2, r1
 800402c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	0018      	movs	r0, r3
 8004032:	46bd      	mov	sp, r7
 8004034:	b006      	add	sp, #24
 8004036:	bd80      	pop	{r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	40007000 	.word	0x40007000
 8004040:	fffcffff 	.word	0xfffcffff
 8004044:	fff7ffff 	.word	0xfff7ffff
 8004048:	00001388 	.word	0x00001388
 800404c:	ffcfffff 	.word	0xffcfffff
 8004050:	efffffff 	.word	0xefffffff
 8004054:	fffff3ff 	.word	0xfffff3ff
 8004058:	ffffcfff 	.word	0xffffcfff
 800405c:	fbffffff 	.word	0xfbffffff
 8004060:	fff3ffff 	.word	0xfff3ffff

08004064 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004064:	b5b0      	push	{r4, r5, r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800406c:	230f      	movs	r3, #15
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	2201      	movs	r2, #1
 8004072:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e088      	b.n	8004190 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2221      	movs	r2, #33	@ 0x21
 8004082:	5c9b      	ldrb	r3, [r3, r2]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d107      	bne.n	800409a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2220      	movs	r2, #32
 800408e:	2100      	movs	r1, #0
 8004090:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	0018      	movs	r0, r3
 8004096:	f7fd f883 	bl	80011a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2221      	movs	r2, #33	@ 0x21
 800409e:	2102      	movs	r1, #2
 80040a0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	2210      	movs	r2, #16
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d05f      	beq.n	8004170 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	22ca      	movs	r2, #202	@ 0xca
 80040b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2253      	movs	r2, #83	@ 0x53
 80040be:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80040c0:	250f      	movs	r5, #15
 80040c2:	197c      	adds	r4, r7, r5
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 f93e 	bl	8004348 <RTC_EnterInitMode>
 80040cc:	0003      	movs	r3, r0
 80040ce:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80040d0:	0028      	movs	r0, r5
 80040d2:	183b      	adds	r3, r7, r0
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d12c      	bne.n	8004134 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	492c      	ldr	r1, [pc, #176]	@ (8004198 <HAL_RTC_Init+0x134>)
 80040e6:	400a      	ands	r2, r1
 80040e8:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6899      	ldr	r1, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	431a      	orrs	r2, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	68d2      	ldr	r2, [r2, #12]
 8004110:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6919      	ldr	r1, [r3, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	041a      	lsls	r2, r3, #16
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004126:	183c      	adds	r4, r7, r0
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	0018      	movs	r0, r3
 800412c:	f000 f950 	bl	80043d0 <RTC_ExitInitMode>
 8004130:	0003      	movs	r3, r0
 8004132:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004134:	230f      	movs	r3, #15
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d113      	bne.n	8004166 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	2103      	movs	r1, #3
 800414a:	438a      	bics	r2, r1
 800414c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69da      	ldr	r2, [r3, #28]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	431a      	orrs	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	22ff      	movs	r2, #255	@ 0xff
 800416c:	625a      	str	r2, [r3, #36]	@ 0x24
 800416e:	e003      	b.n	8004178 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004170:	230f      	movs	r3, #15
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	2200      	movs	r2, #0
 8004176:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004178:	230f      	movs	r3, #15
 800417a:	18fb      	adds	r3, r7, r3
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d103      	bne.n	800418a <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2221      	movs	r2, #33	@ 0x21
 8004186:	2101      	movs	r1, #1
 8004188:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800418a:	230f      	movs	r3, #15
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	781b      	ldrb	r3, [r3, #0]
}
 8004190:	0018      	movs	r0, r3
 8004192:	46bd      	mov	sp, r7
 8004194:	b004      	add	sp, #16
 8004196:	bdb0      	pop	{r4, r5, r7, pc}
 8004198:	ff8fffbf 	.word	0xff8fffbf

0800419c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80041a8:	2300      	movs	r3, #0
 80041aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	045b      	lsls	r3, r3, #17
 80041be:	0c5a      	lsrs	r2, r3, #17
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a22      	ldr	r2, [pc, #136]	@ (8004254 <HAL_RTC_GetTime+0xb8>)
 80041cc:	4013      	ands	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	0c1b      	lsrs	r3, r3, #16
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	223f      	movs	r2, #63	@ 0x3f
 80041d8:	4013      	ands	r3, r2
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	0a1b      	lsrs	r3, r3, #8
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	227f      	movs	r2, #127	@ 0x7f
 80041e8:	4013      	ands	r3, r2
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	227f      	movs	r2, #127	@ 0x7f
 80041f6:	4013      	ands	r3, r2
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	0d9b      	lsrs	r3, r3, #22
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2201      	movs	r2, #1
 8004206:	4013      	ands	r3, r2
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d11a      	bne.n	800424a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	0018      	movs	r0, r3
 800421a:	f000 f903 	bl	8004424 <RTC_Bcd2ToByte>
 800421e:	0003      	movs	r3, r0
 8004220:	001a      	movs	r2, r3
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	785b      	ldrb	r3, [r3, #1]
 800422a:	0018      	movs	r0, r3
 800422c:	f000 f8fa 	bl	8004424 <RTC_Bcd2ToByte>
 8004230:	0003      	movs	r3, r0
 8004232:	001a      	movs	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	789b      	ldrb	r3, [r3, #2]
 800423c:	0018      	movs	r0, r3
 800423e:	f000 f8f1 	bl	8004424 <RTC_Bcd2ToByte>
 8004242:	0003      	movs	r3, r0
 8004244:	001a      	movs	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	0018      	movs	r0, r3
 800424e:	46bd      	mov	sp, r7
 8004250:	b006      	add	sp, #24
 8004252:	bd80      	pop	{r7, pc}
 8004254:	007f7f7f 	.word	0x007f7f7f

08004258 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	4a21      	ldr	r2, [pc, #132]	@ (80042f4 <HAL_RTC_GetDate+0x9c>)
 8004270:	4013      	ands	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	0c1b      	lsrs	r3, r3, #16
 8004278:	b2da      	uxtb	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	b2db      	uxtb	r3, r3
 8004284:	221f      	movs	r2, #31
 8004286:	4013      	ands	r3, r2
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	b2db      	uxtb	r3, r3
 8004292:	223f      	movs	r2, #63	@ 0x3f
 8004294:	4013      	ands	r3, r2
 8004296:	b2da      	uxtb	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	0b5b      	lsrs	r3, r3, #13
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2207      	movs	r2, #7
 80042a4:	4013      	ands	r3, r2
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d11a      	bne.n	80042e8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	78db      	ldrb	r3, [r3, #3]
 80042b6:	0018      	movs	r0, r3
 80042b8:	f000 f8b4 	bl	8004424 <RTC_Bcd2ToByte>
 80042bc:	0003      	movs	r3, r0
 80042be:	001a      	movs	r2, r3
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	0018      	movs	r0, r3
 80042ca:	f000 f8ab 	bl	8004424 <RTC_Bcd2ToByte>
 80042ce:	0003      	movs	r3, r0
 80042d0:	001a      	movs	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	789b      	ldrb	r3, [r3, #2]
 80042da:	0018      	movs	r0, r3
 80042dc:	f000 f8a2 	bl	8004424 <RTC_Bcd2ToByte>
 80042e0:	0003      	movs	r3, r0
 80042e2:	001a      	movs	r2, r3
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	0018      	movs	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	b006      	add	sp, #24
 80042f0:	bd80      	pop	{r7, pc}
 80042f2:	46c0      	nop			@ (mov r8, r8)
 80042f4:	00ffff3f 	.word	0x00ffff3f

080042f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a0e      	ldr	r2, [pc, #56]	@ (8004344 <HAL_RTC_WaitForSynchro+0x4c>)
 800430a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800430c:	f7fd fbba 	bl	8001a84 <HAL_GetTick>
 8004310:	0003      	movs	r3, r0
 8004312:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004314:	e00a      	b.n	800432c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004316:	f7fd fbb5 	bl	8001a84 <HAL_GetTick>
 800431a:	0002      	movs	r2, r0
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	1ad2      	subs	r2, r2, r3
 8004320:	23fa      	movs	r3, #250	@ 0xfa
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	429a      	cmp	r2, r3
 8004326:	d901      	bls.n	800432c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e006      	b.n	800433a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2220      	movs	r2, #32
 8004334:	4013      	ands	r3, r2
 8004336:	d0ee      	beq.n	8004316 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	0018      	movs	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	b004      	add	sp, #16
 8004340:	bd80      	pop	{r7, pc}
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	0001ff5f 	.word	0x0001ff5f

08004348 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004354:	230f      	movs	r3, #15
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2240      	movs	r2, #64	@ 0x40
 8004364:	4013      	ands	r3, r2
 8004366:	d12c      	bne.n	80043c2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2180      	movs	r1, #128	@ 0x80
 8004374:	430a      	orrs	r2, r1
 8004376:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004378:	f7fd fb84 	bl	8001a84 <HAL_GetTick>
 800437c:	0003      	movs	r3, r0
 800437e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004380:	e014      	b.n	80043ac <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004382:	f7fd fb7f 	bl	8001a84 <HAL_GetTick>
 8004386:	0002      	movs	r2, r0
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	1ad2      	subs	r2, r2, r3
 800438c:	200f      	movs	r0, #15
 800438e:	183b      	adds	r3, r7, r0
 8004390:	1839      	adds	r1, r7, r0
 8004392:	7809      	ldrb	r1, [r1, #0]
 8004394:	7019      	strb	r1, [r3, #0]
 8004396:	23fa      	movs	r3, #250	@ 0xfa
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	429a      	cmp	r2, r3
 800439c:	d906      	bls.n	80043ac <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2221      	movs	r2, #33	@ 0x21
 80043a2:	2104      	movs	r1, #4
 80043a4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80043a6:	183b      	adds	r3, r7, r0
 80043a8:	2201      	movs	r2, #1
 80043aa:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2240      	movs	r2, #64	@ 0x40
 80043b4:	4013      	ands	r3, r2
 80043b6:	d104      	bne.n	80043c2 <RTC_EnterInitMode+0x7a>
 80043b8:	230f      	movs	r3, #15
 80043ba:	18fb      	adds	r3, r7, r3
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d1df      	bne.n	8004382 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80043c2:	230f      	movs	r3, #15
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	781b      	ldrb	r3, [r3, #0]
}
 80043c8:	0018      	movs	r0, r3
 80043ca:	46bd      	mov	sp, r7
 80043cc:	b004      	add	sp, #16
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043d8:	240f      	movs	r4, #15
 80043da:	193b      	adds	r3, r7, r4
 80043dc:	2200      	movs	r2, #0
 80043de:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2180      	movs	r1, #128	@ 0x80
 80043ec:	438a      	bics	r2, r1
 80043ee:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2220      	movs	r2, #32
 80043f8:	4013      	ands	r3, r2
 80043fa:	d10c      	bne.n	8004416 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	0018      	movs	r0, r3
 8004400:	f7ff ff7a 	bl	80042f8 <HAL_RTC_WaitForSynchro>
 8004404:	1e03      	subs	r3, r0, #0
 8004406:	d006      	beq.n	8004416 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2221      	movs	r2, #33	@ 0x21
 800440c:	2104      	movs	r1, #4
 800440e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004410:	193b      	adds	r3, r7, r4
 8004412:	2201      	movs	r2, #1
 8004414:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8004416:	230f      	movs	r3, #15
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	781b      	ldrb	r3, [r3, #0]
}
 800441c:	0018      	movs	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	b005      	add	sp, #20
 8004422:	bd90      	pop	{r4, r7, pc}

08004424 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	0002      	movs	r2, r0
 800442c:	1dfb      	adds	r3, r7, #7
 800442e:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004434:	1dfb      	adds	r3, r7, #7
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	091b      	lsrs	r3, r3, #4
 800443a:	b2db      	uxtb	r3, r3
 800443c:	001a      	movs	r2, r3
 800443e:	0013      	movs	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	189b      	adds	r3, r3, r2
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	b2da      	uxtb	r2, r3
 800444c:	1dfb      	adds	r3, r7, #7
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	210f      	movs	r1, #15
 8004452:	400b      	ands	r3, r1
 8004454:	b2db      	uxtb	r3, r3
 8004456:	18d3      	adds	r3, r2, r3
 8004458:	b2db      	uxtb	r3, r3
}
 800445a:	0018      	movs	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	b004      	add	sp, #16
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004470:	4b64      	ldr	r3, [pc, #400]	@ (8004604 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	22fa      	movs	r2, #250	@ 0xfa
 8004476:	01d1      	lsls	r1, r2, #7
 8004478:	0018      	movs	r0, r3
 800447a:	f7fb fe57 	bl	800012c <__udivsi3>
 800447e:	0003      	movs	r3, r0
 8004480:	001a      	movs	r2, r3
 8004482:	0013      	movs	r3, r2
 8004484:	015b      	lsls	r3, r3, #5
 8004486:	1a9b      	subs	r3, r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	189b      	adds	r3, r3, r2
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	5c9b      	ldrb	r3, [r3, r2]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 800449a:	2302      	movs	r3, #2
 800449c:	e0ad      	b.n	80045fa <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2220      	movs	r2, #32
 80044a2:	2101      	movs	r1, #1
 80044a4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2221      	movs	r2, #33	@ 0x21
 80044aa:	2102      	movs	r1, #2
 80044ac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	22ca      	movs	r2, #202	@ 0xca
 80044b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2253      	movs	r2, #83	@ 0x53
 80044bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	2380      	movs	r3, #128	@ 0x80
 80044c6:	00db      	lsls	r3, r3, #3
 80044c8:	4013      	ands	r3, r2
 80044ca:	d019      	beq.n	8004500 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d10d      	bne.n	80044f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	22ff      	movs	r2, #255	@ 0xff
 80044de:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2221      	movs	r2, #33	@ 0x21
 80044e4:	2103      	movs	r1, #3
 80044e6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2220      	movs	r2, #32
 80044ec:	2100      	movs	r1, #0
 80044ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e082      	b.n	80045fa <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	2204      	movs	r2, #4
 80044fc:	4013      	ands	r3, r2
 80044fe:	d1e5      	bne.n	80044cc <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	493f      	ldr	r1, [pc, #252]	@ (8004608 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 800450c:	400a      	ands	r2, r1
 800450e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	22ff      	movs	r2, #255	@ 0xff
 8004518:	401a      	ands	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	493b      	ldr	r1, [pc, #236]	@ (800460c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004520:	430a      	orrs	r2, r1
 8004522:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004524:	4b37      	ldr	r3, [pc, #220]	@ (8004604 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	22fa      	movs	r2, #250	@ 0xfa
 800452a:	01d1      	lsls	r1, r2, #7
 800452c:	0018      	movs	r0, r3
 800452e:	f7fb fdfd 	bl	800012c <__udivsi3>
 8004532:	0003      	movs	r3, r0
 8004534:	001a      	movs	r2, r3
 8004536:	0013      	movs	r3, r2
 8004538:	015b      	lsls	r3, r3, #5
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	189b      	adds	r3, r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	3b01      	subs	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10d      	bne.n	800456c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	22ff      	movs	r2, #255	@ 0xff
 8004556:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2221      	movs	r2, #33	@ 0x21
 800455c:	2103      	movs	r1, #3
 800455e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	2100      	movs	r1, #0
 8004566:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e046      	b.n	80045fa <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	2204      	movs	r2, #4
 8004574:	4013      	ands	r3, r2
 8004576:	d0e5      	beq.n	8004544 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2107      	movs	r1, #7
 8004584:	438a      	bics	r2, r1
 8004586:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6899      	ldr	r1, [r3, #8]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	430a      	orrs	r2, r1
 8004596:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80045a0:	4b1b      	ldr	r3, [pc, #108]	@ (8004610 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004610 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80045a6:	2180      	movs	r1, #128	@ 0x80
 80045a8:	0349      	lsls	r1, r1, #13
 80045aa:	430a      	orrs	r2, r1
 80045ac:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80045ae:	4b18      	ldr	r3, [pc, #96]	@ (8004610 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80045b0:	689a      	ldr	r2, [r3, #8]
 80045b2:	4b17      	ldr	r3, [pc, #92]	@ (8004610 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80045b4:	2180      	movs	r1, #128	@ 0x80
 80045b6:	0349      	lsls	r1, r1, #13
 80045b8:	430a      	orrs	r2, r1
 80045ba:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2180      	movs	r1, #128	@ 0x80
 80045c8:	01c9      	lsls	r1, r1, #7
 80045ca:	430a      	orrs	r2, r1
 80045cc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2180      	movs	r1, #128	@ 0x80
 80045da:	00c9      	lsls	r1, r1, #3
 80045dc:	430a      	orrs	r2, r1
 80045de:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	22ff      	movs	r2, #255	@ 0xff
 80045e6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2221      	movs	r2, #33	@ 0x21
 80045ec:	2101      	movs	r1, #1
 80045ee:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2220      	movs	r2, #32
 80045f4:	2100      	movs	r1, #0
 80045f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	0018      	movs	r0, r3
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b006      	add	sp, #24
 8004600:	bd80      	pop	{r7, pc}
 8004602:	46c0      	nop			@ (mov r8, r8)
 8004604:	20000000 	.word	0x20000000
 8004608:	fffffbff 	.word	0xfffffbff
 800460c:	fffffb7f 	.word	0xfffffb7f
 8004610:	40010400 	.word	0x40010400

08004614 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2220      	movs	r2, #32
 8004624:	5c9b      	ldrb	r3, [r3, r2]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 800462a:	2302      	movs	r3, #2
 800462c:	e04e      	b.n	80046cc <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2220      	movs	r2, #32
 8004632:	2101      	movs	r1, #1
 8004634:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2221      	movs	r2, #33	@ 0x21
 800463a:	2102      	movs	r1, #2
 800463c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	22ca      	movs	r2, #202	@ 0xca
 8004644:	625a      	str	r2, [r3, #36]	@ 0x24
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2253      	movs	r2, #83	@ 0x53
 800464c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	491e      	ldr	r1, [pc, #120]	@ (80046d4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 800465a:	400a      	ands	r2, r1
 800465c:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	491b      	ldr	r1, [pc, #108]	@ (80046d8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 800466a:	400a      	ands	r2, r1
 800466c:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800466e:	f7fd fa09 	bl	8001a84 <HAL_GetTick>
 8004672:	0003      	movs	r3, r0
 8004674:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8004676:	e016      	b.n	80046a6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004678:	f7fd fa04 	bl	8001a84 <HAL_GetTick>
 800467c:	0002      	movs	r2, r0
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad2      	subs	r2, r2, r3
 8004682:	23fa      	movs	r3, #250	@ 0xfa
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	429a      	cmp	r2, r3
 8004688:	d90d      	bls.n	80046a6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	22ff      	movs	r2, #255	@ 0xff
 8004690:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2221      	movs	r2, #33	@ 0x21
 8004696:	2103      	movs	r1, #3
 8004698:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	2100      	movs	r1, #0
 80046a0:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e012      	b.n	80046cc <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	2204      	movs	r2, #4
 80046ae:	4013      	ands	r3, r2
 80046b0:	d0e2      	beq.n	8004678 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	22ff      	movs	r2, #255	@ 0xff
 80046b8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2221      	movs	r2, #33	@ 0x21
 80046be:	2101      	movs	r1, #1
 80046c0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	2100      	movs	r1, #0
 80046c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	0018      	movs	r0, r3
 80046ce:	46bd      	mov	sp, r7
 80046d0:	b004      	add	sp, #16
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	fffffbff 	.word	0xfffffbff
 80046d8:	ffffbfff 	.word	0xffffbfff

080046dc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80046e4:	4b13      	ldr	r3, [pc, #76]	@ (8004734 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80046e6:	2280      	movs	r2, #128	@ 0x80
 80046e8:	0352      	lsls	r2, r2, #13
 80046ea:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	2380      	movs	r3, #128	@ 0x80
 80046f4:	01db      	lsls	r3, r3, #7
 80046f6:	4013      	ands	r3, r2
 80046f8:	d014      	beq.n	8004724 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	2380      	movs	r3, #128	@ 0x80
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4013      	ands	r3, r2
 8004706:	d00d      	beq.n	8004724 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	22ff      	movs	r2, #255	@ 0xff
 8004710:	401a      	ands	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4908      	ldr	r1, [pc, #32]	@ (8004738 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8004718:	430a      	orrs	r2, r1
 800471a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	0018      	movs	r0, r3
 8004720:	f7fc f906 	bl	8000930 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2221      	movs	r2, #33	@ 0x21
 8004728:	2101      	movs	r1, #1
 800472a:	5499      	strb	r1, [r3, r2]
}
 800472c:	46c0      	nop			@ (mov r8, r8)
 800472e:	46bd      	mov	sp, r7
 8004730:	b002      	add	sp, #8
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40010400 	.word	0x40010400
 8004738:	fffffb7f 	.word	0xfffffb7f

0800473c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e044      	b.n	80047d8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d107      	bne.n	8004766 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2278      	movs	r2, #120	@ 0x78
 800475a:	2100      	movs	r1, #0
 800475c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	0018      	movs	r0, r3
 8004762:	f7fc fc6f 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2224      	movs	r2, #36	@ 0x24
 800476a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2101      	movs	r1, #1
 8004778:	438a      	bics	r2, r1
 800477a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	0018      	movs	r0, r3
 8004788:	f000 fba8 	bl	8004edc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	0018      	movs	r0, r3
 8004790:	f000 f906 	bl	80049a0 <UART_SetConfig>
 8004794:	0003      	movs	r3, r0
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e01c      	b.n	80047d8 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	490d      	ldr	r1, [pc, #52]	@ (80047e0 <HAL_UART_Init+0xa4>)
 80047aa:	400a      	ands	r2, r1
 80047ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689a      	ldr	r2, [r3, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	212a      	movs	r1, #42	@ 0x2a
 80047ba:	438a      	bics	r2, r1
 80047bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2101      	movs	r1, #1
 80047ca:	430a      	orrs	r2, r1
 80047cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0018      	movs	r0, r3
 80047d2:	f000 fc37 	bl	8005044 <UART_CheckIdleState>
 80047d6:	0003      	movs	r3, r0
}
 80047d8:	0018      	movs	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	b002      	add	sp, #8
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	ffffb7ff 	.word	0xffffb7ff

080047e4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e030      	b.n	8004858 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2224      	movs	r2, #36	@ 0x24
 80047fa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2101      	movs	r1, #1
 8004808:	438a      	bics	r2, r1
 800480a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2200      	movs	r2, #0
 800481a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2200      	movs	r2, #0
 8004822:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	0018      	movs	r0, r3
 8004828:	f7fc fc82 	bl	8001130 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2284      	movs	r2, #132	@ 0x84
 8004830:	2100      	movs	r1, #0
 8004832:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2280      	movs	r2, #128	@ 0x80
 800483e:	2100      	movs	r1, #0
 8004840:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2278      	movs	r2, #120	@ 0x78
 8004852:	2100      	movs	r1, #0
 8004854:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	0018      	movs	r0, r3
 800485a:	46bd      	mov	sp, r7
 800485c:	b002      	add	sp, #8
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b08a      	sub	sp, #40	@ 0x28
 8004864:	af02      	add	r7, sp, #8
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	603b      	str	r3, [r7, #0]
 800486c:	1dbb      	adds	r3, r7, #6
 800486e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004874:	2b20      	cmp	r3, #32
 8004876:	d000      	beq.n	800487a <HAL_UART_Transmit+0x1a>
 8004878:	e08c      	b.n	8004994 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d003      	beq.n	8004888 <HAL_UART_Transmit+0x28>
 8004880:	1dbb      	adds	r3, r7, #6
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e084      	b.n	8004996 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	2380      	movs	r3, #128	@ 0x80
 8004892:	015b      	lsls	r3, r3, #5
 8004894:	429a      	cmp	r2, r3
 8004896:	d109      	bne.n	80048ac <HAL_UART_Transmit+0x4c>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d105      	bne.n	80048ac <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	2201      	movs	r2, #1
 80048a4:	4013      	ands	r3, r2
 80048a6:	d001      	beq.n	80048ac <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e074      	b.n	8004996 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2284      	movs	r2, #132	@ 0x84
 80048b0:	2100      	movs	r1, #0
 80048b2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2221      	movs	r2, #33	@ 0x21
 80048b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048ba:	f7fd f8e3 	bl	8001a84 <HAL_GetTick>
 80048be:	0003      	movs	r3, r0
 80048c0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1dba      	adds	r2, r7, #6
 80048c6:	2150      	movs	r1, #80	@ 0x50
 80048c8:	8812      	ldrh	r2, [r2, #0]
 80048ca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	1dba      	adds	r2, r7, #6
 80048d0:	2152      	movs	r1, #82	@ 0x52
 80048d2:	8812      	ldrh	r2, [r2, #0]
 80048d4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	2380      	movs	r3, #128	@ 0x80
 80048dc:	015b      	lsls	r3, r3, #5
 80048de:	429a      	cmp	r2, r3
 80048e0:	d108      	bne.n	80048f4 <HAL_UART_Transmit+0x94>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d104      	bne.n	80048f4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	e003      	b.n	80048fc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048f8:	2300      	movs	r3, #0
 80048fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048fc:	e02f      	b.n	800495e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	0013      	movs	r3, r2
 8004908:	2200      	movs	r2, #0
 800490a:	2180      	movs	r1, #128	@ 0x80
 800490c:	f000 fc42 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 8004910:	1e03      	subs	r3, r0, #0
 8004912:	d004      	beq.n	800491e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2220      	movs	r2, #32
 8004918:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e03b      	b.n	8004996 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10b      	bne.n	800493c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	881b      	ldrh	r3, [r3, #0]
 8004928:	001a      	movs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	05d2      	lsls	r2, r2, #23
 8004930:	0dd2      	lsrs	r2, r2, #23
 8004932:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	3302      	adds	r3, #2
 8004938:	61bb      	str	r3, [r7, #24]
 800493a:	e007      	b.n	800494c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	781a      	ldrb	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	3301      	adds	r3, #1
 800494a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2252      	movs	r2, #82	@ 0x52
 8004950:	5a9b      	ldrh	r3, [r3, r2]
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b299      	uxth	r1, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2252      	movs	r2, #82	@ 0x52
 800495c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2252      	movs	r2, #82	@ 0x52
 8004962:	5a9b      	ldrh	r3, [r3, r2]
 8004964:	b29b      	uxth	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d1c9      	bne.n	80048fe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	0013      	movs	r3, r2
 8004974:	2200      	movs	r2, #0
 8004976:	2140      	movs	r1, #64	@ 0x40
 8004978:	f000 fc0c 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 800497c:	1e03      	subs	r3, r0, #0
 800497e:	d004      	beq.n	800498a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2220      	movs	r2, #32
 8004984:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e005      	b.n	8004996 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2220      	movs	r2, #32
 800498e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	e000      	b.n	8004996 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004994:	2302      	movs	r3, #2
  }
}
 8004996:	0018      	movs	r0, r3
 8004998:	46bd      	mov	sp, r7
 800499a:	b008      	add	sp, #32
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a0:	b5b0      	push	{r4, r5, r7, lr}
 80049a2:	b08e      	sub	sp, #56	@ 0x38
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049a8:	231a      	movs	r3, #26
 80049aa:	2218      	movs	r2, #24
 80049ac:	189b      	adds	r3, r3, r2
 80049ae:	19db      	adds	r3, r3, r7
 80049b0:	2200      	movs	r2, #0
 80049b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	431a      	orrs	r2, r3
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	69db      	ldr	r3, [r3, #28]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4ac3      	ldr	r2, [pc, #780]	@ (8004ce0 <UART_SetConfig+0x340>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	0019      	movs	r1, r3
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049de:	430a      	orrs	r2, r1
 80049e0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	4abe      	ldr	r2, [pc, #760]	@ (8004ce4 <UART_SetConfig+0x344>)
 80049ea:	4013      	ands	r3, r2
 80049ec:	0019      	movs	r1, r3
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	430a      	orrs	r2, r1
 80049f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4ab8      	ldr	r2, [pc, #736]	@ (8004ce8 <UART_SetConfig+0x348>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a10:	4313      	orrs	r3, r2
 8004a12:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	4ab4      	ldr	r2, [pc, #720]	@ (8004cec <UART_SetConfig+0x34c>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	0019      	movs	r1, r3
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a26:	430a      	orrs	r2, r1
 8004a28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4ab0      	ldr	r2, [pc, #704]	@ (8004cf0 <UART_SetConfig+0x350>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d131      	bne.n	8004a98 <UART_SetConfig+0xf8>
 8004a34:	4baf      	ldr	r3, [pc, #700]	@ (8004cf4 <UART_SetConfig+0x354>)
 8004a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a38:	2203      	movs	r2, #3
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b03      	cmp	r3, #3
 8004a3e:	d01d      	beq.n	8004a7c <UART_SetConfig+0xdc>
 8004a40:	d823      	bhi.n	8004a8a <UART_SetConfig+0xea>
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d00c      	beq.n	8004a60 <UART_SetConfig+0xc0>
 8004a46:	d820      	bhi.n	8004a8a <UART_SetConfig+0xea>
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d002      	beq.n	8004a52 <UART_SetConfig+0xb2>
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d00e      	beq.n	8004a6e <UART_SetConfig+0xce>
 8004a50:	e01b      	b.n	8004a8a <UART_SetConfig+0xea>
 8004a52:	231b      	movs	r3, #27
 8004a54:	2218      	movs	r2, #24
 8004a56:	189b      	adds	r3, r3, r2
 8004a58:	19db      	adds	r3, r3, r7
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e0b4      	b.n	8004bca <UART_SetConfig+0x22a>
 8004a60:	231b      	movs	r3, #27
 8004a62:	2218      	movs	r2, #24
 8004a64:	189b      	adds	r3, r3, r2
 8004a66:	19db      	adds	r3, r3, r7
 8004a68:	2202      	movs	r2, #2
 8004a6a:	701a      	strb	r2, [r3, #0]
 8004a6c:	e0ad      	b.n	8004bca <UART_SetConfig+0x22a>
 8004a6e:	231b      	movs	r3, #27
 8004a70:	2218      	movs	r2, #24
 8004a72:	189b      	adds	r3, r3, r2
 8004a74:	19db      	adds	r3, r3, r7
 8004a76:	2204      	movs	r2, #4
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	e0a6      	b.n	8004bca <UART_SetConfig+0x22a>
 8004a7c:	231b      	movs	r3, #27
 8004a7e:	2218      	movs	r2, #24
 8004a80:	189b      	adds	r3, r3, r2
 8004a82:	19db      	adds	r3, r3, r7
 8004a84:	2208      	movs	r2, #8
 8004a86:	701a      	strb	r2, [r3, #0]
 8004a88:	e09f      	b.n	8004bca <UART_SetConfig+0x22a>
 8004a8a:	231b      	movs	r3, #27
 8004a8c:	2218      	movs	r2, #24
 8004a8e:	189b      	adds	r3, r3, r2
 8004a90:	19db      	adds	r3, r3, r7
 8004a92:	2210      	movs	r2, #16
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	e098      	b.n	8004bca <UART_SetConfig+0x22a>
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a96      	ldr	r2, [pc, #600]	@ (8004cf8 <UART_SetConfig+0x358>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d131      	bne.n	8004b06 <UART_SetConfig+0x166>
 8004aa2:	4b94      	ldr	r3, [pc, #592]	@ (8004cf4 <UART_SetConfig+0x354>)
 8004aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa6:	220c      	movs	r2, #12
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	d01d      	beq.n	8004aea <UART_SetConfig+0x14a>
 8004aae:	d823      	bhi.n	8004af8 <UART_SetConfig+0x158>
 8004ab0:	2b08      	cmp	r3, #8
 8004ab2:	d00c      	beq.n	8004ace <UART_SetConfig+0x12e>
 8004ab4:	d820      	bhi.n	8004af8 <UART_SetConfig+0x158>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d002      	beq.n	8004ac0 <UART_SetConfig+0x120>
 8004aba:	2b04      	cmp	r3, #4
 8004abc:	d00e      	beq.n	8004adc <UART_SetConfig+0x13c>
 8004abe:	e01b      	b.n	8004af8 <UART_SetConfig+0x158>
 8004ac0:	231b      	movs	r3, #27
 8004ac2:	2218      	movs	r2, #24
 8004ac4:	189b      	adds	r3, r3, r2
 8004ac6:	19db      	adds	r3, r3, r7
 8004ac8:	2200      	movs	r2, #0
 8004aca:	701a      	strb	r2, [r3, #0]
 8004acc:	e07d      	b.n	8004bca <UART_SetConfig+0x22a>
 8004ace:	231b      	movs	r3, #27
 8004ad0:	2218      	movs	r2, #24
 8004ad2:	189b      	adds	r3, r3, r2
 8004ad4:	19db      	adds	r3, r3, r7
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	701a      	strb	r2, [r3, #0]
 8004ada:	e076      	b.n	8004bca <UART_SetConfig+0x22a>
 8004adc:	231b      	movs	r3, #27
 8004ade:	2218      	movs	r2, #24
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	19db      	adds	r3, r3, r7
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	e06f      	b.n	8004bca <UART_SetConfig+0x22a>
 8004aea:	231b      	movs	r3, #27
 8004aec:	2218      	movs	r2, #24
 8004aee:	189b      	adds	r3, r3, r2
 8004af0:	19db      	adds	r3, r3, r7
 8004af2:	2208      	movs	r2, #8
 8004af4:	701a      	strb	r2, [r3, #0]
 8004af6:	e068      	b.n	8004bca <UART_SetConfig+0x22a>
 8004af8:	231b      	movs	r3, #27
 8004afa:	2218      	movs	r2, #24
 8004afc:	189b      	adds	r3, r3, r2
 8004afe:	19db      	adds	r3, r3, r7
 8004b00:	2210      	movs	r2, #16
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e061      	b.n	8004bca <UART_SetConfig+0x22a>
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a7c      	ldr	r2, [pc, #496]	@ (8004cfc <UART_SetConfig+0x35c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d106      	bne.n	8004b1e <UART_SetConfig+0x17e>
 8004b10:	231b      	movs	r3, #27
 8004b12:	2218      	movs	r2, #24
 8004b14:	189b      	adds	r3, r3, r2
 8004b16:	19db      	adds	r3, r3, r7
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	e055      	b.n	8004bca <UART_SetConfig+0x22a>
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a77      	ldr	r2, [pc, #476]	@ (8004d00 <UART_SetConfig+0x360>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d106      	bne.n	8004b36 <UART_SetConfig+0x196>
 8004b28:	231b      	movs	r3, #27
 8004b2a:	2218      	movs	r2, #24
 8004b2c:	189b      	adds	r3, r3, r2
 8004b2e:	19db      	adds	r3, r3, r7
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e049      	b.n	8004bca <UART_SetConfig+0x22a>
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a6b      	ldr	r2, [pc, #428]	@ (8004ce8 <UART_SetConfig+0x348>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d13e      	bne.n	8004bbe <UART_SetConfig+0x21e>
 8004b40:	4b6c      	ldr	r3, [pc, #432]	@ (8004cf4 <UART_SetConfig+0x354>)
 8004b42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b44:	23c0      	movs	r3, #192	@ 0xc0
 8004b46:	011b      	lsls	r3, r3, #4
 8004b48:	4013      	ands	r3, r2
 8004b4a:	22c0      	movs	r2, #192	@ 0xc0
 8004b4c:	0112      	lsls	r2, r2, #4
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d027      	beq.n	8004ba2 <UART_SetConfig+0x202>
 8004b52:	22c0      	movs	r2, #192	@ 0xc0
 8004b54:	0112      	lsls	r2, r2, #4
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d82a      	bhi.n	8004bb0 <UART_SetConfig+0x210>
 8004b5a:	2280      	movs	r2, #128	@ 0x80
 8004b5c:	0112      	lsls	r2, r2, #4
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d011      	beq.n	8004b86 <UART_SetConfig+0x1e6>
 8004b62:	2280      	movs	r2, #128	@ 0x80
 8004b64:	0112      	lsls	r2, r2, #4
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d822      	bhi.n	8004bb0 <UART_SetConfig+0x210>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d004      	beq.n	8004b78 <UART_SetConfig+0x1d8>
 8004b6e:	2280      	movs	r2, #128	@ 0x80
 8004b70:	00d2      	lsls	r2, r2, #3
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00e      	beq.n	8004b94 <UART_SetConfig+0x1f4>
 8004b76:	e01b      	b.n	8004bb0 <UART_SetConfig+0x210>
 8004b78:	231b      	movs	r3, #27
 8004b7a:	2218      	movs	r2, #24
 8004b7c:	189b      	adds	r3, r3, r2
 8004b7e:	19db      	adds	r3, r3, r7
 8004b80:	2200      	movs	r2, #0
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	e021      	b.n	8004bca <UART_SetConfig+0x22a>
 8004b86:	231b      	movs	r3, #27
 8004b88:	2218      	movs	r2, #24
 8004b8a:	189b      	adds	r3, r3, r2
 8004b8c:	19db      	adds	r3, r3, r7
 8004b8e:	2202      	movs	r2, #2
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	e01a      	b.n	8004bca <UART_SetConfig+0x22a>
 8004b94:	231b      	movs	r3, #27
 8004b96:	2218      	movs	r2, #24
 8004b98:	189b      	adds	r3, r3, r2
 8004b9a:	19db      	adds	r3, r3, r7
 8004b9c:	2204      	movs	r2, #4
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	e013      	b.n	8004bca <UART_SetConfig+0x22a>
 8004ba2:	231b      	movs	r3, #27
 8004ba4:	2218      	movs	r2, #24
 8004ba6:	189b      	adds	r3, r3, r2
 8004ba8:	19db      	adds	r3, r3, r7
 8004baa:	2208      	movs	r2, #8
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	e00c      	b.n	8004bca <UART_SetConfig+0x22a>
 8004bb0:	231b      	movs	r3, #27
 8004bb2:	2218      	movs	r2, #24
 8004bb4:	189b      	adds	r3, r3, r2
 8004bb6:	19db      	adds	r3, r3, r7
 8004bb8:	2210      	movs	r2, #16
 8004bba:	701a      	strb	r2, [r3, #0]
 8004bbc:	e005      	b.n	8004bca <UART_SetConfig+0x22a>
 8004bbe:	231b      	movs	r3, #27
 8004bc0:	2218      	movs	r2, #24
 8004bc2:	189b      	adds	r3, r3, r2
 8004bc4:	19db      	adds	r3, r3, r7
 8004bc6:	2210      	movs	r2, #16
 8004bc8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a46      	ldr	r2, [pc, #280]	@ (8004ce8 <UART_SetConfig+0x348>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d000      	beq.n	8004bd6 <UART_SetConfig+0x236>
 8004bd4:	e09a      	b.n	8004d0c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bd6:	231b      	movs	r3, #27
 8004bd8:	2218      	movs	r2, #24
 8004bda:	189b      	adds	r3, r3, r2
 8004bdc:	19db      	adds	r3, r3, r7
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	2b08      	cmp	r3, #8
 8004be2:	d01d      	beq.n	8004c20 <UART_SetConfig+0x280>
 8004be4:	dc20      	bgt.n	8004c28 <UART_SetConfig+0x288>
 8004be6:	2b04      	cmp	r3, #4
 8004be8:	d015      	beq.n	8004c16 <UART_SetConfig+0x276>
 8004bea:	dc1d      	bgt.n	8004c28 <UART_SetConfig+0x288>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <UART_SetConfig+0x256>
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d005      	beq.n	8004c00 <UART_SetConfig+0x260>
 8004bf4:	e018      	b.n	8004c28 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bf6:	f7ff f86b 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8004bfa:	0003      	movs	r3, r0
 8004bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004bfe:	e01c      	b.n	8004c3a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c00:	4b3c      	ldr	r3, [pc, #240]	@ (8004cf4 <UART_SetConfig+0x354>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2210      	movs	r2, #16
 8004c06:	4013      	ands	r3, r2
 8004c08:	d002      	beq.n	8004c10 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8004d04 <UART_SetConfig+0x364>)
 8004c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c0e:	e014      	b.n	8004c3a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004c10:	4b3d      	ldr	r3, [pc, #244]	@ (8004d08 <UART_SetConfig+0x368>)
 8004c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c14:	e011      	b.n	8004c3a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c16:	f7fe ffcb 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8004c1a:	0003      	movs	r3, r0
 8004c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c1e:	e00c      	b.n	8004c3a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c20:	2380      	movs	r3, #128	@ 0x80
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c26:	e008      	b.n	8004c3a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004c2c:	231a      	movs	r3, #26
 8004c2e:	2218      	movs	r2, #24
 8004c30:	189b      	adds	r3, r3, r2
 8004c32:	19db      	adds	r3, r3, r7
 8004c34:	2201      	movs	r2, #1
 8004c36:	701a      	strb	r2, [r3, #0]
        break;
 8004c38:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d100      	bne.n	8004c42 <UART_SetConfig+0x2a2>
 8004c40:	e133      	b.n	8004eaa <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	0013      	movs	r3, r2
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	189b      	adds	r3, r3, r2
 8004c4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d305      	bcc.n	8004c5e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d906      	bls.n	8004c6c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004c5e:	231a      	movs	r3, #26
 8004c60:	2218      	movs	r2, #24
 8004c62:	189b      	adds	r3, r3, r2
 8004c64:	19db      	adds	r3, r3, r7
 8004c66:	2201      	movs	r2, #1
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	e11e      	b.n	8004eaa <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	6939      	ldr	r1, [r7, #16]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	000b      	movs	r3, r1
 8004c7a:	0e1b      	lsrs	r3, r3, #24
 8004c7c:	0010      	movs	r0, r2
 8004c7e:	0205      	lsls	r5, r0, #8
 8004c80:	431d      	orrs	r5, r3
 8004c82:	000b      	movs	r3, r1
 8004c84:	021c      	lsls	r4, r3, #8
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]
 8004c92:	68b8      	ldr	r0, [r7, #8]
 8004c94:	68f9      	ldr	r1, [r7, #12]
 8004c96:	1900      	adds	r0, r0, r4
 8004c98:	4169      	adcs	r1, r5
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f7fb facc 	bl	8000244 <__aeabi_uldivmod>
 8004cac:	0002      	movs	r2, r0
 8004cae:	000b      	movs	r3, r1
 8004cb0:	0013      	movs	r3, r2
 8004cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cb6:	23c0      	movs	r3, #192	@ 0xc0
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d309      	bcc.n	8004cd2 <UART_SetConfig+0x332>
 8004cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cc0:	2380      	movs	r3, #128	@ 0x80
 8004cc2:	035b      	lsls	r3, r3, #13
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d204      	bcs.n	8004cd2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cce:	60da      	str	r2, [r3, #12]
 8004cd0:	e0eb      	b.n	8004eaa <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004cd2:	231a      	movs	r3, #26
 8004cd4:	2218      	movs	r2, #24
 8004cd6:	189b      	adds	r3, r3, r2
 8004cd8:	19db      	adds	r3, r3, r7
 8004cda:	2201      	movs	r2, #1
 8004cdc:	701a      	strb	r2, [r3, #0]
 8004cde:	e0e4      	b.n	8004eaa <UART_SetConfig+0x50a>
 8004ce0:	efff69f3 	.word	0xefff69f3
 8004ce4:	ffffcfff 	.word	0xffffcfff
 8004ce8:	40004800 	.word	0x40004800
 8004cec:	fffff4ff 	.word	0xfffff4ff
 8004cf0:	40013800 	.word	0x40013800
 8004cf4:	40021000 	.word	0x40021000
 8004cf8:	40004400 	.word	0x40004400
 8004cfc:	40004c00 	.word	0x40004c00
 8004d00:	40005000 	.word	0x40005000
 8004d04:	003d0900 	.word	0x003d0900
 8004d08:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	69da      	ldr	r2, [r3, #28]
 8004d10:	2380      	movs	r3, #128	@ 0x80
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d000      	beq.n	8004d1a <UART_SetConfig+0x37a>
 8004d18:	e070      	b.n	8004dfc <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004d1a:	231b      	movs	r3, #27
 8004d1c:	2218      	movs	r2, #24
 8004d1e:	189b      	adds	r3, r3, r2
 8004d20:	19db      	adds	r3, r3, r7
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d822      	bhi.n	8004d6e <UART_SetConfig+0x3ce>
 8004d28:	009a      	lsls	r2, r3, #2
 8004d2a:	4b67      	ldr	r3, [pc, #412]	@ (8004ec8 <UART_SetConfig+0x528>)
 8004d2c:	18d3      	adds	r3, r2, r3
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d32:	f7fe ffcd 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8004d36:	0003      	movs	r3, r0
 8004d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d3a:	e021      	b.n	8004d80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d3c:	f7fe ffde 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 8004d40:	0003      	movs	r3, r0
 8004d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d44:	e01c      	b.n	8004d80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d46:	4b61      	ldr	r3, [pc, #388]	@ (8004ecc <UART_SetConfig+0x52c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2210      	movs	r2, #16
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	d002      	beq.n	8004d56 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004d50:	4b5f      	ldr	r3, [pc, #380]	@ (8004ed0 <UART_SetConfig+0x530>)
 8004d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d54:	e014      	b.n	8004d80 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004d56:	4b5f      	ldr	r3, [pc, #380]	@ (8004ed4 <UART_SetConfig+0x534>)
 8004d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d5a:	e011      	b.n	8004d80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d5c:	f7fe ff28 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8004d60:	0003      	movs	r3, r0
 8004d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d64:	e00c      	b.n	8004d80 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d66:	2380      	movs	r3, #128	@ 0x80
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004d6c:	e008      	b.n	8004d80 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004d72:	231a      	movs	r3, #26
 8004d74:	2218      	movs	r2, #24
 8004d76:	189b      	adds	r3, r3, r2
 8004d78:	19db      	adds	r3, r3, r7
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	701a      	strb	r2, [r3, #0]
        break;
 8004d7e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d100      	bne.n	8004d88 <UART_SetConfig+0x3e8>
 8004d86:	e090      	b.n	8004eaa <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d8a:	005a      	lsls	r2, r3, #1
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	18d2      	adds	r2, r2, r3
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	0019      	movs	r1, r3
 8004d9a:	0010      	movs	r0, r2
 8004d9c:	f7fb f9c6 	bl	800012c <__udivsi3>
 8004da0:	0003      	movs	r3, r0
 8004da2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da6:	2b0f      	cmp	r3, #15
 8004da8:	d921      	bls.n	8004dee <UART_SetConfig+0x44e>
 8004daa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dac:	2380      	movs	r3, #128	@ 0x80
 8004dae:	025b      	lsls	r3, r3, #9
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d21c      	bcs.n	8004dee <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	200e      	movs	r0, #14
 8004dba:	2418      	movs	r4, #24
 8004dbc:	1903      	adds	r3, r0, r4
 8004dbe:	19db      	adds	r3, r3, r7
 8004dc0:	210f      	movs	r1, #15
 8004dc2:	438a      	bics	r2, r1
 8004dc4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc8:	085b      	lsrs	r3, r3, #1
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	2207      	movs	r2, #7
 8004dce:	4013      	ands	r3, r2
 8004dd0:	b299      	uxth	r1, r3
 8004dd2:	1903      	adds	r3, r0, r4
 8004dd4:	19db      	adds	r3, r3, r7
 8004dd6:	1902      	adds	r2, r0, r4
 8004dd8:	19d2      	adds	r2, r2, r7
 8004dda:	8812      	ldrh	r2, [r2, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	1902      	adds	r2, r0, r4
 8004de6:	19d2      	adds	r2, r2, r7
 8004de8:	8812      	ldrh	r2, [r2, #0]
 8004dea:	60da      	str	r2, [r3, #12]
 8004dec:	e05d      	b.n	8004eaa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004dee:	231a      	movs	r3, #26
 8004df0:	2218      	movs	r2, #24
 8004df2:	189b      	adds	r3, r3, r2
 8004df4:	19db      	adds	r3, r3, r7
 8004df6:	2201      	movs	r2, #1
 8004df8:	701a      	strb	r2, [r3, #0]
 8004dfa:	e056      	b.n	8004eaa <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dfc:	231b      	movs	r3, #27
 8004dfe:	2218      	movs	r2, #24
 8004e00:	189b      	adds	r3, r3, r2
 8004e02:	19db      	adds	r3, r3, r7
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	2b08      	cmp	r3, #8
 8004e08:	d822      	bhi.n	8004e50 <UART_SetConfig+0x4b0>
 8004e0a:	009a      	lsls	r2, r3, #2
 8004e0c:	4b32      	ldr	r3, [pc, #200]	@ (8004ed8 <UART_SetConfig+0x538>)
 8004e0e:	18d3      	adds	r3, r2, r3
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e14:	f7fe ff5c 	bl	8003cd0 <HAL_RCC_GetPCLK1Freq>
 8004e18:	0003      	movs	r3, r0
 8004e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e1c:	e021      	b.n	8004e62 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e1e:	f7fe ff6d 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 8004e22:	0003      	movs	r3, r0
 8004e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e26:	e01c      	b.n	8004e62 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e28:	4b28      	ldr	r3, [pc, #160]	@ (8004ecc <UART_SetConfig+0x52c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2210      	movs	r2, #16
 8004e2e:	4013      	ands	r3, r2
 8004e30:	d002      	beq.n	8004e38 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004e32:	4b27      	ldr	r3, [pc, #156]	@ (8004ed0 <UART_SetConfig+0x530>)
 8004e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e36:	e014      	b.n	8004e62 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004e38:	4b26      	ldr	r3, [pc, #152]	@ (8004ed4 <UART_SetConfig+0x534>)
 8004e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e3c:	e011      	b.n	8004e62 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3e:	f7fe feb7 	bl	8003bb0 <HAL_RCC_GetSysClockFreq>
 8004e42:	0003      	movs	r3, r0
 8004e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e46:	e00c      	b.n	8004e62 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e48:	2380      	movs	r3, #128	@ 0x80
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e4e:	e008      	b.n	8004e62 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004e50:	2300      	movs	r3, #0
 8004e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004e54:	231a      	movs	r3, #26
 8004e56:	2218      	movs	r2, #24
 8004e58:	189b      	adds	r3, r3, r2
 8004e5a:	19db      	adds	r3, r3, r7
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	701a      	strb	r2, [r3, #0]
        break;
 8004e60:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d020      	beq.n	8004eaa <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	085a      	lsrs	r2, r3, #1
 8004e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e70:	18d2      	adds	r2, r2, r3
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	0019      	movs	r1, r3
 8004e78:	0010      	movs	r0, r2
 8004e7a:	f7fb f957 	bl	800012c <__udivsi3>
 8004e7e:	0003      	movs	r3, r0
 8004e80:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e84:	2b0f      	cmp	r3, #15
 8004e86:	d90a      	bls.n	8004e9e <UART_SetConfig+0x4fe>
 8004e88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e8a:	2380      	movs	r3, #128	@ 0x80
 8004e8c:	025b      	lsls	r3, r3, #9
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d205      	bcs.n	8004e9e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	60da      	str	r2, [r3, #12]
 8004e9c:	e005      	b.n	8004eaa <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004e9e:	231a      	movs	r3, #26
 8004ea0:	2218      	movs	r2, #24
 8004ea2:	189b      	adds	r3, r3, r2
 8004ea4:	19db      	adds	r3, r3, r7
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	2200      	movs	r2, #0
 8004eae:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004eb6:	231a      	movs	r3, #26
 8004eb8:	2218      	movs	r2, #24
 8004eba:	189b      	adds	r3, r3, r2
 8004ebc:	19db      	adds	r3, r3, r7
 8004ebe:	781b      	ldrb	r3, [r3, #0]
}
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b00e      	add	sp, #56	@ 0x38
 8004ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8004ec8:	080062ac 	.word	0x080062ac
 8004ecc:	40021000 	.word	0x40021000
 8004ed0:	003d0900 	.word	0x003d0900
 8004ed4:	00f42400 	.word	0x00f42400
 8004ed8:	080062d0 	.word	0x080062d0

08004edc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	2208      	movs	r2, #8
 8004eea:	4013      	ands	r3, r2
 8004eec:	d00b      	beq.n	8004f06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4a4a      	ldr	r2, [pc, #296]	@ (8005020 <UART_AdvFeatureConfig+0x144>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	0019      	movs	r1, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4a43      	ldr	r2, [pc, #268]	@ (8005024 <UART_AdvFeatureConfig+0x148>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	0019      	movs	r1, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d00b      	beq.n	8004f4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4a3b      	ldr	r2, [pc, #236]	@ (8005028 <UART_AdvFeatureConfig+0x14c>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	2204      	movs	r2, #4
 8004f50:	4013      	ands	r3, r2
 8004f52:	d00b      	beq.n	8004f6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	4a34      	ldr	r2, [pc, #208]	@ (800502c <UART_AdvFeatureConfig+0x150>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	0019      	movs	r1, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	2210      	movs	r2, #16
 8004f72:	4013      	ands	r3, r2
 8004f74:	d00b      	beq.n	8004f8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	4a2c      	ldr	r2, [pc, #176]	@ (8005030 <UART_AdvFeatureConfig+0x154>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	0019      	movs	r1, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f92:	2220      	movs	r2, #32
 8004f94:	4013      	ands	r3, r2
 8004f96:	d00b      	beq.n	8004fb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	4a25      	ldr	r2, [pc, #148]	@ (8005034 <UART_AdvFeatureConfig+0x158>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	0019      	movs	r1, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb4:	2240      	movs	r2, #64	@ 0x40
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	d01d      	beq.n	8004ff6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005038 <UART_AdvFeatureConfig+0x15c>)
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	0019      	movs	r1, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004fd6:	2380      	movs	r3, #128	@ 0x80
 8004fd8:	035b      	lsls	r3, r3, #13
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d10b      	bne.n	8004ff6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a15      	ldr	r2, [pc, #84]	@ (800503c <UART_AdvFeatureConfig+0x160>)
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	0019      	movs	r1, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	2280      	movs	r2, #128	@ 0x80
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	d00b      	beq.n	8005018 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	4a0e      	ldr	r2, [pc, #56]	@ (8005040 <UART_AdvFeatureConfig+0x164>)
 8005008:	4013      	ands	r3, r2
 800500a:	0019      	movs	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	430a      	orrs	r2, r1
 8005016:	605a      	str	r2, [r3, #4]
  }
}
 8005018:	46c0      	nop			@ (mov r8, r8)
 800501a:	46bd      	mov	sp, r7
 800501c:	b002      	add	sp, #8
 800501e:	bd80      	pop	{r7, pc}
 8005020:	ffff7fff 	.word	0xffff7fff
 8005024:	fffdffff 	.word	0xfffdffff
 8005028:	fffeffff 	.word	0xfffeffff
 800502c:	fffbffff 	.word	0xfffbffff
 8005030:	ffffefff 	.word	0xffffefff
 8005034:	ffffdfff 	.word	0xffffdfff
 8005038:	ffefffff 	.word	0xffefffff
 800503c:	ff9fffff 	.word	0xff9fffff
 8005040:	fff7ffff 	.word	0xfff7ffff

08005044 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b092      	sub	sp, #72	@ 0x48
 8005048:	af02      	add	r7, sp, #8
 800504a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2284      	movs	r2, #132	@ 0x84
 8005050:	2100      	movs	r1, #0
 8005052:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005054:	f7fc fd16 	bl	8001a84 <HAL_GetTick>
 8005058:	0003      	movs	r3, r0
 800505a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2208      	movs	r2, #8
 8005064:	4013      	ands	r3, r2
 8005066:	2b08      	cmp	r3, #8
 8005068:	d12c      	bne.n	80050c4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800506a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800506c:	2280      	movs	r2, #128	@ 0x80
 800506e:	0391      	lsls	r1, r2, #14
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4a46      	ldr	r2, [pc, #280]	@ (800518c <UART_CheckIdleState+0x148>)
 8005074:	9200      	str	r2, [sp, #0]
 8005076:	2200      	movs	r2, #0
 8005078:	f000 f88c 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 800507c:	1e03      	subs	r3, r0, #0
 800507e:	d021      	beq.n	80050c4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005080:	f3ef 8310 	mrs	r3, PRIMASK
 8005084:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005088:	63bb      	str	r3, [r7, #56]	@ 0x38
 800508a:	2301      	movs	r3, #1
 800508c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005090:	f383 8810 	msr	PRIMASK, r3
}
 8005094:	46c0      	nop			@ (mov r8, r8)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2180      	movs	r1, #128	@ 0x80
 80050a2:	438a      	bics	r2, r1
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ac:	f383 8810 	msr	PRIMASK, r3
}
 80050b0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2278      	movs	r2, #120	@ 0x78
 80050bc:	2100      	movs	r1, #0
 80050be:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e05f      	b.n	8005184 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2204      	movs	r2, #4
 80050cc:	4013      	ands	r3, r2
 80050ce:	2b04      	cmp	r3, #4
 80050d0:	d146      	bne.n	8005160 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d4:	2280      	movs	r2, #128	@ 0x80
 80050d6:	03d1      	lsls	r1, r2, #15
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	4a2c      	ldr	r2, [pc, #176]	@ (800518c <UART_CheckIdleState+0x148>)
 80050dc:	9200      	str	r2, [sp, #0]
 80050de:	2200      	movs	r2, #0
 80050e0:	f000 f858 	bl	8005194 <UART_WaitOnFlagUntilTimeout>
 80050e4:	1e03      	subs	r3, r0, #0
 80050e6:	d03b      	beq.n	8005160 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e8:	f3ef 8310 	mrs	r3, PRIMASK
 80050ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80050ee:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80050f2:	2301      	movs	r3, #1
 80050f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f383 8810 	msr	PRIMASK, r3
}
 80050fc:	46c0      	nop			@ (mov r8, r8)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4921      	ldr	r1, [pc, #132]	@ (8005190 <UART_CheckIdleState+0x14c>)
 800510a:	400a      	ands	r2, r1
 800510c:	601a      	str	r2, [r3, #0]
 800510e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005110:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	f383 8810 	msr	PRIMASK, r3
}
 8005118:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800511a:	f3ef 8310 	mrs	r3, PRIMASK
 800511e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005120:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005122:	633b      	str	r3, [r7, #48]	@ 0x30
 8005124:	2301      	movs	r3, #1
 8005126:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	f383 8810 	msr	PRIMASK, r3
}
 800512e:	46c0      	nop			@ (mov r8, r8)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2101      	movs	r1, #1
 800513c:	438a      	bics	r2, r1
 800513e:	609a      	str	r2, [r3, #8]
 8005140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005142:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	f383 8810 	msr	PRIMASK, r3
}
 800514a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2280      	movs	r2, #128	@ 0x80
 8005150:	2120      	movs	r1, #32
 8005152:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2278      	movs	r2, #120	@ 0x78
 8005158:	2100      	movs	r1, #0
 800515a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e011      	b.n	8005184 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2280      	movs	r2, #128	@ 0x80
 800516a:	2120      	movs	r1, #32
 800516c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2200      	movs	r2, #0
 8005178:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2278      	movs	r2, #120	@ 0x78
 800517e:	2100      	movs	r1, #0
 8005180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	0018      	movs	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	b010      	add	sp, #64	@ 0x40
 800518a:	bd80      	pop	{r7, pc}
 800518c:	01ffffff 	.word	0x01ffffff
 8005190:	fffffedf 	.word	0xfffffedf

08005194 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	1dfb      	adds	r3, r7, #7
 80051a2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051a4:	e051      	b.n	800524a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	3301      	adds	r3, #1
 80051aa:	d04e      	beq.n	800524a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ac:	f7fc fc6a 	bl	8001a84 <HAL_GetTick>
 80051b0:	0002      	movs	r2, r0
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	69ba      	ldr	r2, [r7, #24]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d302      	bcc.n	80051c2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e051      	b.n	800526a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2204      	movs	r2, #4
 80051ce:	4013      	ands	r3, r2
 80051d0:	d03b      	beq.n	800524a <UART_WaitOnFlagUntilTimeout+0xb6>
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b80      	cmp	r3, #128	@ 0x80
 80051d6:	d038      	beq.n	800524a <UART_WaitOnFlagUntilTimeout+0xb6>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b40      	cmp	r3, #64	@ 0x40
 80051dc:	d035      	beq.n	800524a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	2208      	movs	r2, #8
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b08      	cmp	r3, #8
 80051ea:	d111      	bne.n	8005210 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2208      	movs	r2, #8
 80051f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	0018      	movs	r0, r3
 80051f8:	f000 f83c 	bl	8005274 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2284      	movs	r2, #132	@ 0x84
 8005200:	2108      	movs	r1, #8
 8005202:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2278      	movs	r2, #120	@ 0x78
 8005208:	2100      	movs	r1, #0
 800520a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e02c      	b.n	800526a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69da      	ldr	r2, [r3, #28]
 8005216:	2380      	movs	r3, #128	@ 0x80
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	401a      	ands	r2, r3
 800521c:	2380      	movs	r3, #128	@ 0x80
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	429a      	cmp	r2, r3
 8005222:	d112      	bne.n	800524a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2280      	movs	r2, #128	@ 0x80
 800522a:	0112      	lsls	r2, r2, #4
 800522c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	0018      	movs	r0, r3
 8005232:	f000 f81f 	bl	8005274 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2284      	movs	r2, #132	@ 0x84
 800523a:	2120      	movs	r1, #32
 800523c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2278      	movs	r2, #120	@ 0x78
 8005242:	2100      	movs	r1, #0
 8005244:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e00f      	b.n	800526a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	4013      	ands	r3, r2
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	425a      	negs	r2, r3
 800525a:	4153      	adcs	r3, r2
 800525c:	b2db      	uxtb	r3, r3
 800525e:	001a      	movs	r2, r3
 8005260:	1dfb      	adds	r3, r7, #7
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d09e      	beq.n	80051a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	0018      	movs	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	b004      	add	sp, #16
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b08e      	sub	sp, #56	@ 0x38
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800527c:	f3ef 8310 	mrs	r3, PRIMASK
 8005280:	617b      	str	r3, [r7, #20]
  return(result);
 8005282:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005284:	637b      	str	r3, [r7, #52]	@ 0x34
 8005286:	2301      	movs	r3, #1
 8005288:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	f383 8810 	msr	PRIMASK, r3
}
 8005290:	46c0      	nop			@ (mov r8, r8)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4926      	ldr	r1, [pc, #152]	@ (8005338 <UART_EndRxTransfer+0xc4>)
 800529e:	400a      	ands	r2, r1
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	f383 8810 	msr	PRIMASK, r3
}
 80052ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052ae:	f3ef 8310 	mrs	r3, PRIMASK
 80052b2:	623b      	str	r3, [r7, #32]
  return(result);
 80052b4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80052b8:	2301      	movs	r3, #1
 80052ba:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052be:	f383 8810 	msr	PRIMASK, r3
}
 80052c2:	46c0      	nop			@ (mov r8, r8)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2101      	movs	r1, #1
 80052d0:	438a      	bics	r2, r1
 80052d2:	609a      	str	r2, [r3, #8]
 80052d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	f383 8810 	msr	PRIMASK, r3
}
 80052de:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d118      	bne.n	800531a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e8:	f3ef 8310 	mrs	r3, PRIMASK
 80052ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80052ee:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052f2:	2301      	movs	r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f383 8810 	msr	PRIMASK, r3
}
 80052fc:	46c0      	nop			@ (mov r8, r8)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2110      	movs	r1, #16
 800530a:	438a      	bics	r2, r1
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005310:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f383 8810 	msr	PRIMASK, r3
}
 8005318:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2280      	movs	r2, #128	@ 0x80
 800531e:	2120      	movs	r1, #32
 8005320:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	46bd      	mov	sp, r7
 8005332:	b00e      	add	sp, #56	@ 0x38
 8005334:	bd80      	pop	{r7, pc}
 8005336:	46c0      	nop			@ (mov r8, r8)
 8005338:	fffffedf 	.word	0xfffffedf

0800533c <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	1dbb      	adds	r3, r7, #6
 800534a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2280      	movs	r2, #128	@ 0x80
 8005350:	589b      	ldr	r3, [r3, r2]
 8005352:	2b20      	cmp	r3, #32
 8005354:	d000      	beq.n	8005358 <HAL_UARTEx_ReceiveToIdle+0x1c>
 8005356:	e109      	b.n	800556c <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_UARTEx_ReceiveToIdle+0x2a>
 800535e:	1dbb      	adds	r3, r7, #6
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e101      	b.n	800556e <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689a      	ldr	r2, [r3, #8]
 800536e:	2380      	movs	r3, #128	@ 0x80
 8005370:	015b      	lsls	r3, r3, #5
 8005372:	429a      	cmp	r2, r3
 8005374:	d109      	bne.n	800538a <HAL_UARTEx_ReceiveToIdle+0x4e>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d105      	bne.n	800538a <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2201      	movs	r2, #1
 8005382:	4013      	ands	r3, r2
 8005384:	d001      	beq.n	800538a <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e0f1      	b.n	800556e <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2284      	movs	r2, #132	@ 0x84
 800538e:	2100      	movs	r1, #0
 8005390:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2280      	movs	r2, #128	@ 0x80
 8005396:	2122      	movs	r1, #34	@ 0x22
 8005398:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2201      	movs	r2, #1
 800539e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053a6:	f7fc fb6d 	bl	8001a84 <HAL_GetTick>
 80053aa:	0003      	movs	r3, r0
 80053ac:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1dba      	adds	r2, r7, #6
 80053b2:	2158      	movs	r1, #88	@ 0x58
 80053b4:	8812      	ldrh	r2, [r2, #0]
 80053b6:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	1dba      	adds	r2, r7, #6
 80053bc:	215a      	movs	r1, #90	@ 0x5a
 80053be:	8812      	ldrh	r2, [r2, #0]
 80053c0:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	2380      	movs	r3, #128	@ 0x80
 80053c8:	015b      	lsls	r3, r3, #5
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d10d      	bne.n	80053ea <HAL_UARTEx_ReceiveToIdle+0xae>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d104      	bne.n	80053e0 <HAL_UARTEx_ReceiveToIdle+0xa4>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	225c      	movs	r2, #92	@ 0x5c
 80053da:	4967      	ldr	r1, [pc, #412]	@ (8005578 <HAL_UARTEx_ReceiveToIdle+0x23c>)
 80053dc:	5299      	strh	r1, [r3, r2]
 80053de:	e02e      	b.n	800543e <HAL_UARTEx_ReceiveToIdle+0x102>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	225c      	movs	r2, #92	@ 0x5c
 80053e4:	21ff      	movs	r1, #255	@ 0xff
 80053e6:	5299      	strh	r1, [r3, r2]
 80053e8:	e029      	b.n	800543e <HAL_UARTEx_ReceiveToIdle+0x102>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d10d      	bne.n	800540e <HAL_UARTEx_ReceiveToIdle+0xd2>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d104      	bne.n	8005404 <HAL_UARTEx_ReceiveToIdle+0xc8>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	225c      	movs	r2, #92	@ 0x5c
 80053fe:	21ff      	movs	r1, #255	@ 0xff
 8005400:	5299      	strh	r1, [r3, r2]
 8005402:	e01c      	b.n	800543e <HAL_UARTEx_ReceiveToIdle+0x102>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	225c      	movs	r2, #92	@ 0x5c
 8005408:	217f      	movs	r1, #127	@ 0x7f
 800540a:	5299      	strh	r1, [r3, r2]
 800540c:	e017      	b.n	800543e <HAL_UARTEx_ReceiveToIdle+0x102>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	2380      	movs	r3, #128	@ 0x80
 8005414:	055b      	lsls	r3, r3, #21
 8005416:	429a      	cmp	r2, r3
 8005418:	d10d      	bne.n	8005436 <HAL_UARTEx_ReceiveToIdle+0xfa>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <HAL_UARTEx_ReceiveToIdle+0xf0>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	225c      	movs	r2, #92	@ 0x5c
 8005426:	217f      	movs	r1, #127	@ 0x7f
 8005428:	5299      	strh	r1, [r3, r2]
 800542a:	e008      	b.n	800543e <HAL_UARTEx_ReceiveToIdle+0x102>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	225c      	movs	r2, #92	@ 0x5c
 8005430:	213f      	movs	r1, #63	@ 0x3f
 8005432:	5299      	strh	r1, [r3, r2]
 8005434:	e003      	b.n	800543e <HAL_UARTEx_ReceiveToIdle+0x102>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	225c      	movs	r2, #92	@ 0x5c
 800543a:	2100      	movs	r1, #0
 800543c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800543e:	2312      	movs	r3, #18
 8005440:	18fb      	adds	r3, r7, r3
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	215c      	movs	r1, #92	@ 0x5c
 8005446:	5a52      	ldrh	r2, [r2, r1]
 8005448:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	2380      	movs	r3, #128	@ 0x80
 8005450:	015b      	lsls	r3, r3, #5
 8005452:	429a      	cmp	r2, r3
 8005454:	d108      	bne.n	8005468 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d104      	bne.n	8005468 <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	61bb      	str	r3, [r7, #24]
 8005466:	e003      	b.n	8005470 <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800546c:	2300      	movs	r3, #0
 800546e:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	2200      	movs	r2, #0
 8005474:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005476:	e062      	b.n	800553e <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69db      	ldr	r3, [r3, #28]
 800547e:	2210      	movs	r2, #16
 8005480:	4013      	ands	r3, r2
 8005482:	2b10      	cmp	r3, #16
 8005484:	d110      	bne.n	80054a8 <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2210      	movs	r2, #16
 800548c:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	881b      	ldrh	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2202      	movs	r2, #2
 800549a:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2280      	movs	r2, #128	@ 0x80
 80054a0:	2120      	movs	r1, #32
 80054a2:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 80054a4:	2300      	movs	r3, #0
 80054a6:	e062      	b.n	800556e <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69db      	ldr	r3, [r3, #28]
 80054ae:	2220      	movs	r2, #32
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	d12f      	bne.n	8005516 <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10e      	bne.n	80054da <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2212      	movs	r2, #18
 80054c6:	18ba      	adds	r2, r7, r2
 80054c8:	8812      	ldrh	r2, [r2, #0]
 80054ca:	4013      	ands	r3, r2
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	3302      	adds	r3, #2
 80054d6:	61bb      	str	r3, [r7, #24]
 80054d8:	e00e      	b.n	80054f8 <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2212      	movs	r2, #18
 80054e4:	18ba      	adds	r2, r7, r2
 80054e6:	8812      	ldrh	r2, [r2, #0]
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	4013      	ands	r3, r2
 80054ec:	b2da      	uxtb	r2, r3
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	3301      	adds	r3, #1
 80054f6:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	225a      	movs	r2, #90	@ 0x5a
 8005508:	5a9b      	ldrh	r3, [r3, r2]
 800550a:	b29b      	uxth	r3, r3
 800550c:	3b01      	subs	r3, #1
 800550e:	b299      	uxth	r1, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	225a      	movs	r2, #90	@ 0x5a
 8005514:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005518:	3301      	adds	r3, #1
 800551a:	d010      	beq.n	800553e <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800551c:	f7fc fab2 	bl	8001a84 <HAL_GetTick>
 8005520:	0002      	movs	r2, r0
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005528:	429a      	cmp	r2, r3
 800552a:	d302      	bcc.n	8005532 <HAL_UARTEx_ReceiveToIdle+0x1f6>
 800552c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552e:	2b00      	cmp	r3, #0
 8005530:	d105      	bne.n	800553e <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2280      	movs	r2, #128	@ 0x80
 8005536:	2120      	movs	r1, #32
 8005538:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e017      	b.n	800556e <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	225a      	movs	r2, #90	@ 0x5a
 8005542:	5a9b      	ldrh	r3, [r3, r2]
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	d196      	bne.n	8005478 <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2258      	movs	r2, #88	@ 0x58
 800554e:	5a9a      	ldrh	r2, [r3, r2]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	215a      	movs	r1, #90	@ 0x5a
 8005554:	5a5b      	ldrh	r3, [r3, r1]
 8005556:	b29b      	uxth	r3, r3
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	b29a      	uxth	r2, r3
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2280      	movs	r2, #128	@ 0x80
 8005564:	2120      	movs	r1, #32
 8005566:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005568:	2300      	movs	r3, #0
 800556a:	e000      	b.n	800556e <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 800556c:	2302      	movs	r3, #2
  }
}
 800556e:	0018      	movs	r0, r3
 8005570:	46bd      	mov	sp, r7
 8005572:	b008      	add	sp, #32
 8005574:	bd80      	pop	{r7, pc}
 8005576:	46c0      	nop			@ (mov r8, r8)
 8005578:	000001ff 	.word	0x000001ff

0800557c <sniprintf>:
 800557c:	b40c      	push	{r2, r3}
 800557e:	b530      	push	{r4, r5, lr}
 8005580:	4b18      	ldr	r3, [pc, #96]	@ (80055e4 <sniprintf+0x68>)
 8005582:	000c      	movs	r4, r1
 8005584:	681d      	ldr	r5, [r3, #0]
 8005586:	b09d      	sub	sp, #116	@ 0x74
 8005588:	2900      	cmp	r1, #0
 800558a:	da08      	bge.n	800559e <sniprintf+0x22>
 800558c:	238b      	movs	r3, #139	@ 0x8b
 800558e:	2001      	movs	r0, #1
 8005590:	602b      	str	r3, [r5, #0]
 8005592:	4240      	negs	r0, r0
 8005594:	b01d      	add	sp, #116	@ 0x74
 8005596:	bc30      	pop	{r4, r5}
 8005598:	bc08      	pop	{r3}
 800559a:	b002      	add	sp, #8
 800559c:	4718      	bx	r3
 800559e:	2382      	movs	r3, #130	@ 0x82
 80055a0:	466a      	mov	r2, sp
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	8293      	strh	r3, [r2, #20]
 80055a6:	2300      	movs	r3, #0
 80055a8:	9002      	str	r0, [sp, #8]
 80055aa:	931b      	str	r3, [sp, #108]	@ 0x6c
 80055ac:	9006      	str	r0, [sp, #24]
 80055ae:	4299      	cmp	r1, r3
 80055b0:	d000      	beq.n	80055b4 <sniprintf+0x38>
 80055b2:	1e4b      	subs	r3, r1, #1
 80055b4:	9304      	str	r3, [sp, #16]
 80055b6:	9307      	str	r3, [sp, #28]
 80055b8:	2301      	movs	r3, #1
 80055ba:	466a      	mov	r2, sp
 80055bc:	425b      	negs	r3, r3
 80055be:	82d3      	strh	r3, [r2, #22]
 80055c0:	0028      	movs	r0, r5
 80055c2:	ab21      	add	r3, sp, #132	@ 0x84
 80055c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80055c6:	a902      	add	r1, sp, #8
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	f000 fa0f 	bl	80059ec <_svfiprintf_r>
 80055ce:	1c43      	adds	r3, r0, #1
 80055d0:	da01      	bge.n	80055d6 <sniprintf+0x5a>
 80055d2:	238b      	movs	r3, #139	@ 0x8b
 80055d4:	602b      	str	r3, [r5, #0]
 80055d6:	2c00      	cmp	r4, #0
 80055d8:	d0dc      	beq.n	8005594 <sniprintf+0x18>
 80055da:	2200      	movs	r2, #0
 80055dc:	9b02      	ldr	r3, [sp, #8]
 80055de:	701a      	strb	r2, [r3, #0]
 80055e0:	e7d8      	b.n	8005594 <sniprintf+0x18>
 80055e2:	46c0      	nop			@ (mov r8, r8)
 80055e4:	2000000c 	.word	0x2000000c

080055e8 <siprintf>:
 80055e8:	b40e      	push	{r1, r2, r3}
 80055ea:	b510      	push	{r4, lr}
 80055ec:	2400      	movs	r4, #0
 80055ee:	490c      	ldr	r1, [pc, #48]	@ (8005620 <siprintf+0x38>)
 80055f0:	b09d      	sub	sp, #116	@ 0x74
 80055f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80055f4:	9002      	str	r0, [sp, #8]
 80055f6:	9006      	str	r0, [sp, #24]
 80055f8:	9107      	str	r1, [sp, #28]
 80055fa:	9104      	str	r1, [sp, #16]
 80055fc:	4809      	ldr	r0, [pc, #36]	@ (8005624 <siprintf+0x3c>)
 80055fe:	490a      	ldr	r1, [pc, #40]	@ (8005628 <siprintf+0x40>)
 8005600:	cb04      	ldmia	r3!, {r2}
 8005602:	9105      	str	r1, [sp, #20]
 8005604:	6800      	ldr	r0, [r0, #0]
 8005606:	a902      	add	r1, sp, #8
 8005608:	9301      	str	r3, [sp, #4]
 800560a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800560c:	f000 f9ee 	bl	80059ec <_svfiprintf_r>
 8005610:	9b02      	ldr	r3, [sp, #8]
 8005612:	701c      	strb	r4, [r3, #0]
 8005614:	b01d      	add	sp, #116	@ 0x74
 8005616:	bc10      	pop	{r4}
 8005618:	bc08      	pop	{r3}
 800561a:	b003      	add	sp, #12
 800561c:	4718      	bx	r3
 800561e:	46c0      	nop			@ (mov r8, r8)
 8005620:	7fffffff 	.word	0x7fffffff
 8005624:	2000000c 	.word	0x2000000c
 8005628:	ffff0208 	.word	0xffff0208

0800562c <_vsniprintf_r>:
 800562c:	b530      	push	{r4, r5, lr}
 800562e:	0005      	movs	r5, r0
 8005630:	0014      	movs	r4, r2
 8005632:	0008      	movs	r0, r1
 8005634:	001a      	movs	r2, r3
 8005636:	b09b      	sub	sp, #108	@ 0x6c
 8005638:	2c00      	cmp	r4, #0
 800563a:	da05      	bge.n	8005648 <_vsniprintf_r+0x1c>
 800563c:	238b      	movs	r3, #139	@ 0x8b
 800563e:	2001      	movs	r0, #1
 8005640:	602b      	str	r3, [r5, #0]
 8005642:	4240      	negs	r0, r0
 8005644:	b01b      	add	sp, #108	@ 0x6c
 8005646:	bd30      	pop	{r4, r5, pc}
 8005648:	2382      	movs	r3, #130	@ 0x82
 800564a:	4669      	mov	r1, sp
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	818b      	strh	r3, [r1, #12]
 8005650:	2100      	movs	r1, #0
 8005652:	9000      	str	r0, [sp, #0]
 8005654:	9119      	str	r1, [sp, #100]	@ 0x64
 8005656:	9004      	str	r0, [sp, #16]
 8005658:	428c      	cmp	r4, r1
 800565a:	d000      	beq.n	800565e <_vsniprintf_r+0x32>
 800565c:	1e61      	subs	r1, r4, #1
 800565e:	2301      	movs	r3, #1
 8005660:	9102      	str	r1, [sp, #8]
 8005662:	9105      	str	r1, [sp, #20]
 8005664:	4669      	mov	r1, sp
 8005666:	425b      	negs	r3, r3
 8005668:	81cb      	strh	r3, [r1, #14]
 800566a:	0028      	movs	r0, r5
 800566c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800566e:	f000 f9bd 	bl	80059ec <_svfiprintf_r>
 8005672:	1c43      	adds	r3, r0, #1
 8005674:	da01      	bge.n	800567a <_vsniprintf_r+0x4e>
 8005676:	238b      	movs	r3, #139	@ 0x8b
 8005678:	602b      	str	r3, [r5, #0]
 800567a:	2c00      	cmp	r4, #0
 800567c:	d0e2      	beq.n	8005644 <_vsniprintf_r+0x18>
 800567e:	2200      	movs	r2, #0
 8005680:	9b00      	ldr	r3, [sp, #0]
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	e7de      	b.n	8005644 <_vsniprintf_r+0x18>
	...

08005688 <vsniprintf>:
 8005688:	b513      	push	{r0, r1, r4, lr}
 800568a:	4c04      	ldr	r4, [pc, #16]	@ (800569c <vsniprintf+0x14>)
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	0013      	movs	r3, r2
 8005690:	000a      	movs	r2, r1
 8005692:	0001      	movs	r1, r0
 8005694:	6820      	ldr	r0, [r4, #0]
 8005696:	f7ff ffc9 	bl	800562c <_vsniprintf_r>
 800569a:	bd16      	pop	{r1, r2, r4, pc}
 800569c:	2000000c 	.word	0x2000000c

080056a0 <memset>:
 80056a0:	0003      	movs	r3, r0
 80056a2:	1882      	adds	r2, r0, r2
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d100      	bne.n	80056aa <memset+0xa>
 80056a8:	4770      	bx	lr
 80056aa:	7019      	strb	r1, [r3, #0]
 80056ac:	3301      	adds	r3, #1
 80056ae:	e7f9      	b.n	80056a4 <memset+0x4>

080056b0 <strstr>:
 80056b0:	780a      	ldrb	r2, [r1, #0]
 80056b2:	b530      	push	{r4, r5, lr}
 80056b4:	2a00      	cmp	r2, #0
 80056b6:	d10c      	bne.n	80056d2 <strstr+0x22>
 80056b8:	bd30      	pop	{r4, r5, pc}
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d108      	bne.n	80056d0 <strstr+0x20>
 80056be:	2301      	movs	r3, #1
 80056c0:	5ccc      	ldrb	r4, [r1, r3]
 80056c2:	2c00      	cmp	r4, #0
 80056c4:	d0f8      	beq.n	80056b8 <strstr+0x8>
 80056c6:	5cc5      	ldrb	r5, [r0, r3]
 80056c8:	42a5      	cmp	r5, r4
 80056ca:	d101      	bne.n	80056d0 <strstr+0x20>
 80056cc:	3301      	adds	r3, #1
 80056ce:	e7f7      	b.n	80056c0 <strstr+0x10>
 80056d0:	3001      	adds	r0, #1
 80056d2:	7803      	ldrb	r3, [r0, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1f0      	bne.n	80056ba <strstr+0xa>
 80056d8:	0018      	movs	r0, r3
 80056da:	e7ed      	b.n	80056b8 <strstr+0x8>

080056dc <__errno>:
 80056dc:	4b01      	ldr	r3, [pc, #4]	@ (80056e4 <__errno+0x8>)
 80056de:	6818      	ldr	r0, [r3, #0]
 80056e0:	4770      	bx	lr
 80056e2:	46c0      	nop			@ (mov r8, r8)
 80056e4:	2000000c 	.word	0x2000000c

080056e8 <__libc_init_array>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	2600      	movs	r6, #0
 80056ec:	4c0c      	ldr	r4, [pc, #48]	@ (8005720 <__libc_init_array+0x38>)
 80056ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005724 <__libc_init_array+0x3c>)
 80056f0:	1b64      	subs	r4, r4, r5
 80056f2:	10a4      	asrs	r4, r4, #2
 80056f4:	42a6      	cmp	r6, r4
 80056f6:	d109      	bne.n	800570c <__libc_init_array+0x24>
 80056f8:	2600      	movs	r6, #0
 80056fa:	f000 fc61 	bl	8005fc0 <_init>
 80056fe:	4c0a      	ldr	r4, [pc, #40]	@ (8005728 <__libc_init_array+0x40>)
 8005700:	4d0a      	ldr	r5, [pc, #40]	@ (800572c <__libc_init_array+0x44>)
 8005702:	1b64      	subs	r4, r4, r5
 8005704:	10a4      	asrs	r4, r4, #2
 8005706:	42a6      	cmp	r6, r4
 8005708:	d105      	bne.n	8005716 <__libc_init_array+0x2e>
 800570a:	bd70      	pop	{r4, r5, r6, pc}
 800570c:	00b3      	lsls	r3, r6, #2
 800570e:	58eb      	ldr	r3, [r5, r3]
 8005710:	4798      	blx	r3
 8005712:	3601      	adds	r6, #1
 8005714:	e7ee      	b.n	80056f4 <__libc_init_array+0xc>
 8005716:	00b3      	lsls	r3, r6, #2
 8005718:	58eb      	ldr	r3, [r5, r3]
 800571a:	4798      	blx	r3
 800571c:	3601      	adds	r6, #1
 800571e:	e7f2      	b.n	8005706 <__libc_init_array+0x1e>
 8005720:	08006330 	.word	0x08006330
 8005724:	08006330 	.word	0x08006330
 8005728:	08006334 	.word	0x08006334
 800572c:	08006330 	.word	0x08006330

08005730 <__retarget_lock_acquire_recursive>:
 8005730:	4770      	bx	lr

08005732 <__retarget_lock_release_recursive>:
 8005732:	4770      	bx	lr

08005734 <_free_r>:
 8005734:	b570      	push	{r4, r5, r6, lr}
 8005736:	0005      	movs	r5, r0
 8005738:	1e0c      	subs	r4, r1, #0
 800573a:	d010      	beq.n	800575e <_free_r+0x2a>
 800573c:	3c04      	subs	r4, #4
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	da00      	bge.n	8005746 <_free_r+0x12>
 8005744:	18e4      	adds	r4, r4, r3
 8005746:	0028      	movs	r0, r5
 8005748:	f000 f8e0 	bl	800590c <__malloc_lock>
 800574c:	4a1d      	ldr	r2, [pc, #116]	@ (80057c4 <_free_r+0x90>)
 800574e:	6813      	ldr	r3, [r2, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d105      	bne.n	8005760 <_free_r+0x2c>
 8005754:	6063      	str	r3, [r4, #4]
 8005756:	6014      	str	r4, [r2, #0]
 8005758:	0028      	movs	r0, r5
 800575a:	f000 f8df 	bl	800591c <__malloc_unlock>
 800575e:	bd70      	pop	{r4, r5, r6, pc}
 8005760:	42a3      	cmp	r3, r4
 8005762:	d908      	bls.n	8005776 <_free_r+0x42>
 8005764:	6820      	ldr	r0, [r4, #0]
 8005766:	1821      	adds	r1, r4, r0
 8005768:	428b      	cmp	r3, r1
 800576a:	d1f3      	bne.n	8005754 <_free_r+0x20>
 800576c:	6819      	ldr	r1, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	1809      	adds	r1, r1, r0
 8005772:	6021      	str	r1, [r4, #0]
 8005774:	e7ee      	b.n	8005754 <_free_r+0x20>
 8005776:	001a      	movs	r2, r3
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <_free_r+0x4e>
 800577e:	42a3      	cmp	r3, r4
 8005780:	d9f9      	bls.n	8005776 <_free_r+0x42>
 8005782:	6811      	ldr	r1, [r2, #0]
 8005784:	1850      	adds	r0, r2, r1
 8005786:	42a0      	cmp	r0, r4
 8005788:	d10b      	bne.n	80057a2 <_free_r+0x6e>
 800578a:	6820      	ldr	r0, [r4, #0]
 800578c:	1809      	adds	r1, r1, r0
 800578e:	1850      	adds	r0, r2, r1
 8005790:	6011      	str	r1, [r2, #0]
 8005792:	4283      	cmp	r3, r0
 8005794:	d1e0      	bne.n	8005758 <_free_r+0x24>
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	1841      	adds	r1, r0, r1
 800579c:	6011      	str	r1, [r2, #0]
 800579e:	6053      	str	r3, [r2, #4]
 80057a0:	e7da      	b.n	8005758 <_free_r+0x24>
 80057a2:	42a0      	cmp	r0, r4
 80057a4:	d902      	bls.n	80057ac <_free_r+0x78>
 80057a6:	230c      	movs	r3, #12
 80057a8:	602b      	str	r3, [r5, #0]
 80057aa:	e7d5      	b.n	8005758 <_free_r+0x24>
 80057ac:	6820      	ldr	r0, [r4, #0]
 80057ae:	1821      	adds	r1, r4, r0
 80057b0:	428b      	cmp	r3, r1
 80057b2:	d103      	bne.n	80057bc <_free_r+0x88>
 80057b4:	6819      	ldr	r1, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	1809      	adds	r1, r1, r0
 80057ba:	6021      	str	r1, [r4, #0]
 80057bc:	6063      	str	r3, [r4, #4]
 80057be:	6054      	str	r4, [r2, #4]
 80057c0:	e7ca      	b.n	8005758 <_free_r+0x24>
 80057c2:	46c0      	nop			@ (mov r8, r8)
 80057c4:	20000368 	.word	0x20000368

080057c8 <sbrk_aligned>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	4e0f      	ldr	r6, [pc, #60]	@ (8005808 <sbrk_aligned+0x40>)
 80057cc:	000d      	movs	r5, r1
 80057ce:	6831      	ldr	r1, [r6, #0]
 80057d0:	0004      	movs	r4, r0
 80057d2:	2900      	cmp	r1, #0
 80057d4:	d102      	bne.n	80057dc <sbrk_aligned+0x14>
 80057d6:	f000 fb95 	bl	8005f04 <_sbrk_r>
 80057da:	6030      	str	r0, [r6, #0]
 80057dc:	0029      	movs	r1, r5
 80057de:	0020      	movs	r0, r4
 80057e0:	f000 fb90 	bl	8005f04 <_sbrk_r>
 80057e4:	1c43      	adds	r3, r0, #1
 80057e6:	d103      	bne.n	80057f0 <sbrk_aligned+0x28>
 80057e8:	2501      	movs	r5, #1
 80057ea:	426d      	negs	r5, r5
 80057ec:	0028      	movs	r0, r5
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	2303      	movs	r3, #3
 80057f2:	1cc5      	adds	r5, r0, #3
 80057f4:	439d      	bics	r5, r3
 80057f6:	42a8      	cmp	r0, r5
 80057f8:	d0f8      	beq.n	80057ec <sbrk_aligned+0x24>
 80057fa:	1a29      	subs	r1, r5, r0
 80057fc:	0020      	movs	r0, r4
 80057fe:	f000 fb81 	bl	8005f04 <_sbrk_r>
 8005802:	3001      	adds	r0, #1
 8005804:	d1f2      	bne.n	80057ec <sbrk_aligned+0x24>
 8005806:	e7ef      	b.n	80057e8 <sbrk_aligned+0x20>
 8005808:	20000364 	.word	0x20000364

0800580c <_malloc_r>:
 800580c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800580e:	2203      	movs	r2, #3
 8005810:	1ccb      	adds	r3, r1, #3
 8005812:	4393      	bics	r3, r2
 8005814:	3308      	adds	r3, #8
 8005816:	0005      	movs	r5, r0
 8005818:	001f      	movs	r7, r3
 800581a:	2b0c      	cmp	r3, #12
 800581c:	d234      	bcs.n	8005888 <_malloc_r+0x7c>
 800581e:	270c      	movs	r7, #12
 8005820:	42b9      	cmp	r1, r7
 8005822:	d833      	bhi.n	800588c <_malloc_r+0x80>
 8005824:	0028      	movs	r0, r5
 8005826:	f000 f871 	bl	800590c <__malloc_lock>
 800582a:	4e37      	ldr	r6, [pc, #220]	@ (8005908 <_malloc_r+0xfc>)
 800582c:	6833      	ldr	r3, [r6, #0]
 800582e:	001c      	movs	r4, r3
 8005830:	2c00      	cmp	r4, #0
 8005832:	d12f      	bne.n	8005894 <_malloc_r+0x88>
 8005834:	0039      	movs	r1, r7
 8005836:	0028      	movs	r0, r5
 8005838:	f7ff ffc6 	bl	80057c8 <sbrk_aligned>
 800583c:	0004      	movs	r4, r0
 800583e:	1c43      	adds	r3, r0, #1
 8005840:	d15f      	bne.n	8005902 <_malloc_r+0xf6>
 8005842:	6834      	ldr	r4, [r6, #0]
 8005844:	9400      	str	r4, [sp, #0]
 8005846:	9b00      	ldr	r3, [sp, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d14a      	bne.n	80058e2 <_malloc_r+0xd6>
 800584c:	2c00      	cmp	r4, #0
 800584e:	d052      	beq.n	80058f6 <_malloc_r+0xea>
 8005850:	6823      	ldr	r3, [r4, #0]
 8005852:	0028      	movs	r0, r5
 8005854:	18e3      	adds	r3, r4, r3
 8005856:	9900      	ldr	r1, [sp, #0]
 8005858:	9301      	str	r3, [sp, #4]
 800585a:	f000 fb53 	bl	8005f04 <_sbrk_r>
 800585e:	9b01      	ldr	r3, [sp, #4]
 8005860:	4283      	cmp	r3, r0
 8005862:	d148      	bne.n	80058f6 <_malloc_r+0xea>
 8005864:	6823      	ldr	r3, [r4, #0]
 8005866:	0028      	movs	r0, r5
 8005868:	1aff      	subs	r7, r7, r3
 800586a:	0039      	movs	r1, r7
 800586c:	f7ff ffac 	bl	80057c8 <sbrk_aligned>
 8005870:	3001      	adds	r0, #1
 8005872:	d040      	beq.n	80058f6 <_malloc_r+0xea>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	19db      	adds	r3, r3, r7
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	6833      	ldr	r3, [r6, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	2a00      	cmp	r2, #0
 8005880:	d133      	bne.n	80058ea <_malloc_r+0xde>
 8005882:	9b00      	ldr	r3, [sp, #0]
 8005884:	6033      	str	r3, [r6, #0]
 8005886:	e019      	b.n	80058bc <_malloc_r+0xb0>
 8005888:	2b00      	cmp	r3, #0
 800588a:	dac9      	bge.n	8005820 <_malloc_r+0x14>
 800588c:	230c      	movs	r3, #12
 800588e:	602b      	str	r3, [r5, #0]
 8005890:	2000      	movs	r0, #0
 8005892:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005894:	6821      	ldr	r1, [r4, #0]
 8005896:	1bc9      	subs	r1, r1, r7
 8005898:	d420      	bmi.n	80058dc <_malloc_r+0xd0>
 800589a:	290b      	cmp	r1, #11
 800589c:	d90a      	bls.n	80058b4 <_malloc_r+0xa8>
 800589e:	19e2      	adds	r2, r4, r7
 80058a0:	6027      	str	r7, [r4, #0]
 80058a2:	42a3      	cmp	r3, r4
 80058a4:	d104      	bne.n	80058b0 <_malloc_r+0xa4>
 80058a6:	6032      	str	r2, [r6, #0]
 80058a8:	6863      	ldr	r3, [r4, #4]
 80058aa:	6011      	str	r1, [r2, #0]
 80058ac:	6053      	str	r3, [r2, #4]
 80058ae:	e005      	b.n	80058bc <_malloc_r+0xb0>
 80058b0:	605a      	str	r2, [r3, #4]
 80058b2:	e7f9      	b.n	80058a8 <_malloc_r+0x9c>
 80058b4:	6862      	ldr	r2, [r4, #4]
 80058b6:	42a3      	cmp	r3, r4
 80058b8:	d10e      	bne.n	80058d8 <_malloc_r+0xcc>
 80058ba:	6032      	str	r2, [r6, #0]
 80058bc:	0028      	movs	r0, r5
 80058be:	f000 f82d 	bl	800591c <__malloc_unlock>
 80058c2:	0020      	movs	r0, r4
 80058c4:	2207      	movs	r2, #7
 80058c6:	300b      	adds	r0, #11
 80058c8:	1d23      	adds	r3, r4, #4
 80058ca:	4390      	bics	r0, r2
 80058cc:	1ac2      	subs	r2, r0, r3
 80058ce:	4298      	cmp	r0, r3
 80058d0:	d0df      	beq.n	8005892 <_malloc_r+0x86>
 80058d2:	1a1b      	subs	r3, r3, r0
 80058d4:	50a3      	str	r3, [r4, r2]
 80058d6:	e7dc      	b.n	8005892 <_malloc_r+0x86>
 80058d8:	605a      	str	r2, [r3, #4]
 80058da:	e7ef      	b.n	80058bc <_malloc_r+0xb0>
 80058dc:	0023      	movs	r3, r4
 80058de:	6864      	ldr	r4, [r4, #4]
 80058e0:	e7a6      	b.n	8005830 <_malloc_r+0x24>
 80058e2:	9c00      	ldr	r4, [sp, #0]
 80058e4:	6863      	ldr	r3, [r4, #4]
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	e7ad      	b.n	8005846 <_malloc_r+0x3a>
 80058ea:	001a      	movs	r2, r3
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	42a3      	cmp	r3, r4
 80058f0:	d1fb      	bne.n	80058ea <_malloc_r+0xde>
 80058f2:	2300      	movs	r3, #0
 80058f4:	e7da      	b.n	80058ac <_malloc_r+0xa0>
 80058f6:	230c      	movs	r3, #12
 80058f8:	0028      	movs	r0, r5
 80058fa:	602b      	str	r3, [r5, #0]
 80058fc:	f000 f80e 	bl	800591c <__malloc_unlock>
 8005900:	e7c6      	b.n	8005890 <_malloc_r+0x84>
 8005902:	6007      	str	r7, [r0, #0]
 8005904:	e7da      	b.n	80058bc <_malloc_r+0xb0>
 8005906:	46c0      	nop			@ (mov r8, r8)
 8005908:	20000368 	.word	0x20000368

0800590c <__malloc_lock>:
 800590c:	b510      	push	{r4, lr}
 800590e:	4802      	ldr	r0, [pc, #8]	@ (8005918 <__malloc_lock+0xc>)
 8005910:	f7ff ff0e 	bl	8005730 <__retarget_lock_acquire_recursive>
 8005914:	bd10      	pop	{r4, pc}
 8005916:	46c0      	nop			@ (mov r8, r8)
 8005918:	20000360 	.word	0x20000360

0800591c <__malloc_unlock>:
 800591c:	b510      	push	{r4, lr}
 800591e:	4802      	ldr	r0, [pc, #8]	@ (8005928 <__malloc_unlock+0xc>)
 8005920:	f7ff ff07 	bl	8005732 <__retarget_lock_release_recursive>
 8005924:	bd10      	pop	{r4, pc}
 8005926:	46c0      	nop			@ (mov r8, r8)
 8005928:	20000360 	.word	0x20000360

0800592c <__ssputs_r>:
 800592c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592e:	688e      	ldr	r6, [r1, #8]
 8005930:	b085      	sub	sp, #20
 8005932:	001f      	movs	r7, r3
 8005934:	000c      	movs	r4, r1
 8005936:	680b      	ldr	r3, [r1, #0]
 8005938:	9002      	str	r0, [sp, #8]
 800593a:	9203      	str	r2, [sp, #12]
 800593c:	42be      	cmp	r6, r7
 800593e:	d830      	bhi.n	80059a2 <__ssputs_r+0x76>
 8005940:	210c      	movs	r1, #12
 8005942:	5e62      	ldrsh	r2, [r4, r1]
 8005944:	2190      	movs	r1, #144	@ 0x90
 8005946:	00c9      	lsls	r1, r1, #3
 8005948:	420a      	tst	r2, r1
 800594a:	d028      	beq.n	800599e <__ssputs_r+0x72>
 800594c:	2003      	movs	r0, #3
 800594e:	6921      	ldr	r1, [r4, #16]
 8005950:	1a5b      	subs	r3, r3, r1
 8005952:	9301      	str	r3, [sp, #4]
 8005954:	6963      	ldr	r3, [r4, #20]
 8005956:	4343      	muls	r3, r0
 8005958:	9801      	ldr	r0, [sp, #4]
 800595a:	0fdd      	lsrs	r5, r3, #31
 800595c:	18ed      	adds	r5, r5, r3
 800595e:	1c7b      	adds	r3, r7, #1
 8005960:	181b      	adds	r3, r3, r0
 8005962:	106d      	asrs	r5, r5, #1
 8005964:	42ab      	cmp	r3, r5
 8005966:	d900      	bls.n	800596a <__ssputs_r+0x3e>
 8005968:	001d      	movs	r5, r3
 800596a:	0552      	lsls	r2, r2, #21
 800596c:	d528      	bpl.n	80059c0 <__ssputs_r+0x94>
 800596e:	0029      	movs	r1, r5
 8005970:	9802      	ldr	r0, [sp, #8]
 8005972:	f7ff ff4b 	bl	800580c <_malloc_r>
 8005976:	1e06      	subs	r6, r0, #0
 8005978:	d02c      	beq.n	80059d4 <__ssputs_r+0xa8>
 800597a:	9a01      	ldr	r2, [sp, #4]
 800597c:	6921      	ldr	r1, [r4, #16]
 800597e:	f000 fade 	bl	8005f3e <memcpy>
 8005982:	89a2      	ldrh	r2, [r4, #12]
 8005984:	4b18      	ldr	r3, [pc, #96]	@ (80059e8 <__ssputs_r+0xbc>)
 8005986:	401a      	ands	r2, r3
 8005988:	2380      	movs	r3, #128	@ 0x80
 800598a:	4313      	orrs	r3, r2
 800598c:	81a3      	strh	r3, [r4, #12]
 800598e:	9b01      	ldr	r3, [sp, #4]
 8005990:	6126      	str	r6, [r4, #16]
 8005992:	18f6      	adds	r6, r6, r3
 8005994:	6026      	str	r6, [r4, #0]
 8005996:	003e      	movs	r6, r7
 8005998:	6165      	str	r5, [r4, #20]
 800599a:	1aed      	subs	r5, r5, r3
 800599c:	60a5      	str	r5, [r4, #8]
 800599e:	42be      	cmp	r6, r7
 80059a0:	d900      	bls.n	80059a4 <__ssputs_r+0x78>
 80059a2:	003e      	movs	r6, r7
 80059a4:	0032      	movs	r2, r6
 80059a6:	9903      	ldr	r1, [sp, #12]
 80059a8:	6820      	ldr	r0, [r4, #0]
 80059aa:	f000 fa99 	bl	8005ee0 <memmove>
 80059ae:	2000      	movs	r0, #0
 80059b0:	68a3      	ldr	r3, [r4, #8]
 80059b2:	1b9b      	subs	r3, r3, r6
 80059b4:	60a3      	str	r3, [r4, #8]
 80059b6:	6823      	ldr	r3, [r4, #0]
 80059b8:	199b      	adds	r3, r3, r6
 80059ba:	6023      	str	r3, [r4, #0]
 80059bc:	b005      	add	sp, #20
 80059be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c0:	002a      	movs	r2, r5
 80059c2:	9802      	ldr	r0, [sp, #8]
 80059c4:	f000 fac4 	bl	8005f50 <_realloc_r>
 80059c8:	1e06      	subs	r6, r0, #0
 80059ca:	d1e0      	bne.n	800598e <__ssputs_r+0x62>
 80059cc:	6921      	ldr	r1, [r4, #16]
 80059ce:	9802      	ldr	r0, [sp, #8]
 80059d0:	f7ff feb0 	bl	8005734 <_free_r>
 80059d4:	230c      	movs	r3, #12
 80059d6:	2001      	movs	r0, #1
 80059d8:	9a02      	ldr	r2, [sp, #8]
 80059da:	4240      	negs	r0, r0
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	89a2      	ldrh	r2, [r4, #12]
 80059e0:	3334      	adds	r3, #52	@ 0x34
 80059e2:	4313      	orrs	r3, r2
 80059e4:	81a3      	strh	r3, [r4, #12]
 80059e6:	e7e9      	b.n	80059bc <__ssputs_r+0x90>
 80059e8:	fffffb7f 	.word	0xfffffb7f

080059ec <_svfiprintf_r>:
 80059ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ee:	b0a1      	sub	sp, #132	@ 0x84
 80059f0:	9003      	str	r0, [sp, #12]
 80059f2:	001d      	movs	r5, r3
 80059f4:	898b      	ldrh	r3, [r1, #12]
 80059f6:	000f      	movs	r7, r1
 80059f8:	0016      	movs	r6, r2
 80059fa:	061b      	lsls	r3, r3, #24
 80059fc:	d511      	bpl.n	8005a22 <_svfiprintf_r+0x36>
 80059fe:	690b      	ldr	r3, [r1, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10e      	bne.n	8005a22 <_svfiprintf_r+0x36>
 8005a04:	2140      	movs	r1, #64	@ 0x40
 8005a06:	f7ff ff01 	bl	800580c <_malloc_r>
 8005a0a:	6038      	str	r0, [r7, #0]
 8005a0c:	6138      	str	r0, [r7, #16]
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	d105      	bne.n	8005a1e <_svfiprintf_r+0x32>
 8005a12:	230c      	movs	r3, #12
 8005a14:	9a03      	ldr	r2, [sp, #12]
 8005a16:	6013      	str	r3, [r2, #0]
 8005a18:	2001      	movs	r0, #1
 8005a1a:	4240      	negs	r0, r0
 8005a1c:	e0cf      	b.n	8005bbe <_svfiprintf_r+0x1d2>
 8005a1e:	2340      	movs	r3, #64	@ 0x40
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	2300      	movs	r3, #0
 8005a24:	ac08      	add	r4, sp, #32
 8005a26:	6163      	str	r3, [r4, #20]
 8005a28:	3320      	adds	r3, #32
 8005a2a:	7663      	strb	r3, [r4, #25]
 8005a2c:	3310      	adds	r3, #16
 8005a2e:	76a3      	strb	r3, [r4, #26]
 8005a30:	9507      	str	r5, [sp, #28]
 8005a32:	0035      	movs	r5, r6
 8005a34:	782b      	ldrb	r3, [r5, #0]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <_svfiprintf_r+0x52>
 8005a3a:	2b25      	cmp	r3, #37	@ 0x25
 8005a3c:	d148      	bne.n	8005ad0 <_svfiprintf_r+0xe4>
 8005a3e:	1bab      	subs	r3, r5, r6
 8005a40:	9305      	str	r3, [sp, #20]
 8005a42:	42b5      	cmp	r5, r6
 8005a44:	d00b      	beq.n	8005a5e <_svfiprintf_r+0x72>
 8005a46:	0032      	movs	r2, r6
 8005a48:	0039      	movs	r1, r7
 8005a4a:	9803      	ldr	r0, [sp, #12]
 8005a4c:	f7ff ff6e 	bl	800592c <__ssputs_r>
 8005a50:	3001      	adds	r0, #1
 8005a52:	d100      	bne.n	8005a56 <_svfiprintf_r+0x6a>
 8005a54:	e0ae      	b.n	8005bb4 <_svfiprintf_r+0x1c8>
 8005a56:	6963      	ldr	r3, [r4, #20]
 8005a58:	9a05      	ldr	r2, [sp, #20]
 8005a5a:	189b      	adds	r3, r3, r2
 8005a5c:	6163      	str	r3, [r4, #20]
 8005a5e:	782b      	ldrb	r3, [r5, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d100      	bne.n	8005a66 <_svfiprintf_r+0x7a>
 8005a64:	e0a6      	b.n	8005bb4 <_svfiprintf_r+0x1c8>
 8005a66:	2201      	movs	r2, #1
 8005a68:	2300      	movs	r3, #0
 8005a6a:	4252      	negs	r2, r2
 8005a6c:	6062      	str	r2, [r4, #4]
 8005a6e:	a904      	add	r1, sp, #16
 8005a70:	3254      	adds	r2, #84	@ 0x54
 8005a72:	1852      	adds	r2, r2, r1
 8005a74:	1c6e      	adds	r6, r5, #1
 8005a76:	6023      	str	r3, [r4, #0]
 8005a78:	60e3      	str	r3, [r4, #12]
 8005a7a:	60a3      	str	r3, [r4, #8]
 8005a7c:	7013      	strb	r3, [r2, #0]
 8005a7e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005a80:	4b54      	ldr	r3, [pc, #336]	@ (8005bd4 <_svfiprintf_r+0x1e8>)
 8005a82:	2205      	movs	r2, #5
 8005a84:	0018      	movs	r0, r3
 8005a86:	7831      	ldrb	r1, [r6, #0]
 8005a88:	9305      	str	r3, [sp, #20]
 8005a8a:	f000 fa4d 	bl	8005f28 <memchr>
 8005a8e:	1c75      	adds	r5, r6, #1
 8005a90:	2800      	cmp	r0, #0
 8005a92:	d11f      	bne.n	8005ad4 <_svfiprintf_r+0xe8>
 8005a94:	6822      	ldr	r2, [r4, #0]
 8005a96:	06d3      	lsls	r3, r2, #27
 8005a98:	d504      	bpl.n	8005aa4 <_svfiprintf_r+0xb8>
 8005a9a:	2353      	movs	r3, #83	@ 0x53
 8005a9c:	a904      	add	r1, sp, #16
 8005a9e:	185b      	adds	r3, r3, r1
 8005aa0:	2120      	movs	r1, #32
 8005aa2:	7019      	strb	r1, [r3, #0]
 8005aa4:	0713      	lsls	r3, r2, #28
 8005aa6:	d504      	bpl.n	8005ab2 <_svfiprintf_r+0xc6>
 8005aa8:	2353      	movs	r3, #83	@ 0x53
 8005aaa:	a904      	add	r1, sp, #16
 8005aac:	185b      	adds	r3, r3, r1
 8005aae:	212b      	movs	r1, #43	@ 0x2b
 8005ab0:	7019      	strb	r1, [r3, #0]
 8005ab2:	7833      	ldrb	r3, [r6, #0]
 8005ab4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ab6:	d016      	beq.n	8005ae6 <_svfiprintf_r+0xfa>
 8005ab8:	0035      	movs	r5, r6
 8005aba:	2100      	movs	r1, #0
 8005abc:	200a      	movs	r0, #10
 8005abe:	68e3      	ldr	r3, [r4, #12]
 8005ac0:	782a      	ldrb	r2, [r5, #0]
 8005ac2:	1c6e      	adds	r6, r5, #1
 8005ac4:	3a30      	subs	r2, #48	@ 0x30
 8005ac6:	2a09      	cmp	r2, #9
 8005ac8:	d950      	bls.n	8005b6c <_svfiprintf_r+0x180>
 8005aca:	2900      	cmp	r1, #0
 8005acc:	d111      	bne.n	8005af2 <_svfiprintf_r+0x106>
 8005ace:	e017      	b.n	8005b00 <_svfiprintf_r+0x114>
 8005ad0:	3501      	adds	r5, #1
 8005ad2:	e7af      	b.n	8005a34 <_svfiprintf_r+0x48>
 8005ad4:	9b05      	ldr	r3, [sp, #20]
 8005ad6:	6822      	ldr	r2, [r4, #0]
 8005ad8:	1ac0      	subs	r0, r0, r3
 8005ada:	2301      	movs	r3, #1
 8005adc:	4083      	lsls	r3, r0
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	002e      	movs	r6, r5
 8005ae2:	6023      	str	r3, [r4, #0]
 8005ae4:	e7cc      	b.n	8005a80 <_svfiprintf_r+0x94>
 8005ae6:	9b07      	ldr	r3, [sp, #28]
 8005ae8:	1d19      	adds	r1, r3, #4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	9107      	str	r1, [sp, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	db01      	blt.n	8005af6 <_svfiprintf_r+0x10a>
 8005af2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005af4:	e004      	b.n	8005b00 <_svfiprintf_r+0x114>
 8005af6:	425b      	negs	r3, r3
 8005af8:	60e3      	str	r3, [r4, #12]
 8005afa:	2302      	movs	r3, #2
 8005afc:	4313      	orrs	r3, r2
 8005afe:	6023      	str	r3, [r4, #0]
 8005b00:	782b      	ldrb	r3, [r5, #0]
 8005b02:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b04:	d10c      	bne.n	8005b20 <_svfiprintf_r+0x134>
 8005b06:	786b      	ldrb	r3, [r5, #1]
 8005b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b0a:	d134      	bne.n	8005b76 <_svfiprintf_r+0x18a>
 8005b0c:	9b07      	ldr	r3, [sp, #28]
 8005b0e:	3502      	adds	r5, #2
 8005b10:	1d1a      	adds	r2, r3, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	9207      	str	r2, [sp, #28]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	da01      	bge.n	8005b1e <_svfiprintf_r+0x132>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	425b      	negs	r3, r3
 8005b1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b20:	4e2d      	ldr	r6, [pc, #180]	@ (8005bd8 <_svfiprintf_r+0x1ec>)
 8005b22:	2203      	movs	r2, #3
 8005b24:	0030      	movs	r0, r6
 8005b26:	7829      	ldrb	r1, [r5, #0]
 8005b28:	f000 f9fe 	bl	8005f28 <memchr>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d006      	beq.n	8005b3e <_svfiprintf_r+0x152>
 8005b30:	2340      	movs	r3, #64	@ 0x40
 8005b32:	1b80      	subs	r0, r0, r6
 8005b34:	4083      	lsls	r3, r0
 8005b36:	6822      	ldr	r2, [r4, #0]
 8005b38:	3501      	adds	r5, #1
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	7829      	ldrb	r1, [r5, #0]
 8005b40:	2206      	movs	r2, #6
 8005b42:	4826      	ldr	r0, [pc, #152]	@ (8005bdc <_svfiprintf_r+0x1f0>)
 8005b44:	1c6e      	adds	r6, r5, #1
 8005b46:	7621      	strb	r1, [r4, #24]
 8005b48:	f000 f9ee 	bl	8005f28 <memchr>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d038      	beq.n	8005bc2 <_svfiprintf_r+0x1d6>
 8005b50:	4b23      	ldr	r3, [pc, #140]	@ (8005be0 <_svfiprintf_r+0x1f4>)
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d122      	bne.n	8005b9c <_svfiprintf_r+0x1b0>
 8005b56:	2207      	movs	r2, #7
 8005b58:	9b07      	ldr	r3, [sp, #28]
 8005b5a:	3307      	adds	r3, #7
 8005b5c:	4393      	bics	r3, r2
 8005b5e:	3308      	adds	r3, #8
 8005b60:	9307      	str	r3, [sp, #28]
 8005b62:	6963      	ldr	r3, [r4, #20]
 8005b64:	9a04      	ldr	r2, [sp, #16]
 8005b66:	189b      	adds	r3, r3, r2
 8005b68:	6163      	str	r3, [r4, #20]
 8005b6a:	e762      	b.n	8005a32 <_svfiprintf_r+0x46>
 8005b6c:	4343      	muls	r3, r0
 8005b6e:	0035      	movs	r5, r6
 8005b70:	2101      	movs	r1, #1
 8005b72:	189b      	adds	r3, r3, r2
 8005b74:	e7a4      	b.n	8005ac0 <_svfiprintf_r+0xd4>
 8005b76:	2300      	movs	r3, #0
 8005b78:	200a      	movs	r0, #10
 8005b7a:	0019      	movs	r1, r3
 8005b7c:	3501      	adds	r5, #1
 8005b7e:	6063      	str	r3, [r4, #4]
 8005b80:	782a      	ldrb	r2, [r5, #0]
 8005b82:	1c6e      	adds	r6, r5, #1
 8005b84:	3a30      	subs	r2, #48	@ 0x30
 8005b86:	2a09      	cmp	r2, #9
 8005b88:	d903      	bls.n	8005b92 <_svfiprintf_r+0x1a6>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0c8      	beq.n	8005b20 <_svfiprintf_r+0x134>
 8005b8e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b90:	e7c6      	b.n	8005b20 <_svfiprintf_r+0x134>
 8005b92:	4341      	muls	r1, r0
 8005b94:	0035      	movs	r5, r6
 8005b96:	2301      	movs	r3, #1
 8005b98:	1889      	adds	r1, r1, r2
 8005b9a:	e7f1      	b.n	8005b80 <_svfiprintf_r+0x194>
 8005b9c:	aa07      	add	r2, sp, #28
 8005b9e:	9200      	str	r2, [sp, #0]
 8005ba0:	0021      	movs	r1, r4
 8005ba2:	003a      	movs	r2, r7
 8005ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8005be4 <_svfiprintf_r+0x1f8>)
 8005ba6:	9803      	ldr	r0, [sp, #12]
 8005ba8:	e000      	b.n	8005bac <_svfiprintf_r+0x1c0>
 8005baa:	bf00      	nop
 8005bac:	9004      	str	r0, [sp, #16]
 8005bae:	9b04      	ldr	r3, [sp, #16]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	d1d6      	bne.n	8005b62 <_svfiprintf_r+0x176>
 8005bb4:	89bb      	ldrh	r3, [r7, #12]
 8005bb6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005bb8:	065b      	lsls	r3, r3, #25
 8005bba:	d500      	bpl.n	8005bbe <_svfiprintf_r+0x1d2>
 8005bbc:	e72c      	b.n	8005a18 <_svfiprintf_r+0x2c>
 8005bbe:	b021      	add	sp, #132	@ 0x84
 8005bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bc2:	aa07      	add	r2, sp, #28
 8005bc4:	9200      	str	r2, [sp, #0]
 8005bc6:	0021      	movs	r1, r4
 8005bc8:	003a      	movs	r2, r7
 8005bca:	4b06      	ldr	r3, [pc, #24]	@ (8005be4 <_svfiprintf_r+0x1f8>)
 8005bcc:	9803      	ldr	r0, [sp, #12]
 8005bce:	f000 f87b 	bl	8005cc8 <_printf_i>
 8005bd2:	e7eb      	b.n	8005bac <_svfiprintf_r+0x1c0>
 8005bd4:	080062f4 	.word	0x080062f4
 8005bd8:	080062fa 	.word	0x080062fa
 8005bdc:	080062fe 	.word	0x080062fe
 8005be0:	00000000 	.word	0x00000000
 8005be4:	0800592d 	.word	0x0800592d

08005be8 <_printf_common>:
 8005be8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bea:	0016      	movs	r6, r2
 8005bec:	9301      	str	r3, [sp, #4]
 8005bee:	688a      	ldr	r2, [r1, #8]
 8005bf0:	690b      	ldr	r3, [r1, #16]
 8005bf2:	000c      	movs	r4, r1
 8005bf4:	9000      	str	r0, [sp, #0]
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	da00      	bge.n	8005bfc <_printf_common+0x14>
 8005bfa:	0013      	movs	r3, r2
 8005bfc:	0022      	movs	r2, r4
 8005bfe:	6033      	str	r3, [r6, #0]
 8005c00:	3243      	adds	r2, #67	@ 0x43
 8005c02:	7812      	ldrb	r2, [r2, #0]
 8005c04:	2a00      	cmp	r2, #0
 8005c06:	d001      	beq.n	8005c0c <_printf_common+0x24>
 8005c08:	3301      	adds	r3, #1
 8005c0a:	6033      	str	r3, [r6, #0]
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	069b      	lsls	r3, r3, #26
 8005c10:	d502      	bpl.n	8005c18 <_printf_common+0x30>
 8005c12:	6833      	ldr	r3, [r6, #0]
 8005c14:	3302      	adds	r3, #2
 8005c16:	6033      	str	r3, [r6, #0]
 8005c18:	6822      	ldr	r2, [r4, #0]
 8005c1a:	2306      	movs	r3, #6
 8005c1c:	0015      	movs	r5, r2
 8005c1e:	401d      	ands	r5, r3
 8005c20:	421a      	tst	r2, r3
 8005c22:	d027      	beq.n	8005c74 <_printf_common+0x8c>
 8005c24:	0023      	movs	r3, r4
 8005c26:	3343      	adds	r3, #67	@ 0x43
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	1e5a      	subs	r2, r3, #1
 8005c2c:	4193      	sbcs	r3, r2
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	0692      	lsls	r2, r2, #26
 8005c32:	d430      	bmi.n	8005c96 <_printf_common+0xae>
 8005c34:	0022      	movs	r2, r4
 8005c36:	9901      	ldr	r1, [sp, #4]
 8005c38:	9800      	ldr	r0, [sp, #0]
 8005c3a:	9d08      	ldr	r5, [sp, #32]
 8005c3c:	3243      	adds	r2, #67	@ 0x43
 8005c3e:	47a8      	blx	r5
 8005c40:	3001      	adds	r0, #1
 8005c42:	d025      	beq.n	8005c90 <_printf_common+0xa8>
 8005c44:	2206      	movs	r2, #6
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	2500      	movs	r5, #0
 8005c4a:	4013      	ands	r3, r2
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	d105      	bne.n	8005c5c <_printf_common+0x74>
 8005c50:	6833      	ldr	r3, [r6, #0]
 8005c52:	68e5      	ldr	r5, [r4, #12]
 8005c54:	1aed      	subs	r5, r5, r3
 8005c56:	43eb      	mvns	r3, r5
 8005c58:	17db      	asrs	r3, r3, #31
 8005c5a:	401d      	ands	r5, r3
 8005c5c:	68a3      	ldr	r3, [r4, #8]
 8005c5e:	6922      	ldr	r2, [r4, #16]
 8005c60:	4293      	cmp	r3, r2
 8005c62:	dd01      	ble.n	8005c68 <_printf_common+0x80>
 8005c64:	1a9b      	subs	r3, r3, r2
 8005c66:	18ed      	adds	r5, r5, r3
 8005c68:	2600      	movs	r6, #0
 8005c6a:	42b5      	cmp	r5, r6
 8005c6c:	d120      	bne.n	8005cb0 <_printf_common+0xc8>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e010      	b.n	8005c94 <_printf_common+0xac>
 8005c72:	3501      	adds	r5, #1
 8005c74:	68e3      	ldr	r3, [r4, #12]
 8005c76:	6832      	ldr	r2, [r6, #0]
 8005c78:	1a9b      	subs	r3, r3, r2
 8005c7a:	42ab      	cmp	r3, r5
 8005c7c:	ddd2      	ble.n	8005c24 <_printf_common+0x3c>
 8005c7e:	0022      	movs	r2, r4
 8005c80:	2301      	movs	r3, #1
 8005c82:	9901      	ldr	r1, [sp, #4]
 8005c84:	9800      	ldr	r0, [sp, #0]
 8005c86:	9f08      	ldr	r7, [sp, #32]
 8005c88:	3219      	adds	r2, #25
 8005c8a:	47b8      	blx	r7
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d1f0      	bne.n	8005c72 <_printf_common+0x8a>
 8005c90:	2001      	movs	r0, #1
 8005c92:	4240      	negs	r0, r0
 8005c94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c96:	2030      	movs	r0, #48	@ 0x30
 8005c98:	18e1      	adds	r1, r4, r3
 8005c9a:	3143      	adds	r1, #67	@ 0x43
 8005c9c:	7008      	strb	r0, [r1, #0]
 8005c9e:	0021      	movs	r1, r4
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	3145      	adds	r1, #69	@ 0x45
 8005ca4:	7809      	ldrb	r1, [r1, #0]
 8005ca6:	18a2      	adds	r2, r4, r2
 8005ca8:	3243      	adds	r2, #67	@ 0x43
 8005caa:	3302      	adds	r3, #2
 8005cac:	7011      	strb	r1, [r2, #0]
 8005cae:	e7c1      	b.n	8005c34 <_printf_common+0x4c>
 8005cb0:	0022      	movs	r2, r4
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	9901      	ldr	r1, [sp, #4]
 8005cb6:	9800      	ldr	r0, [sp, #0]
 8005cb8:	9f08      	ldr	r7, [sp, #32]
 8005cba:	321a      	adds	r2, #26
 8005cbc:	47b8      	blx	r7
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d0e6      	beq.n	8005c90 <_printf_common+0xa8>
 8005cc2:	3601      	adds	r6, #1
 8005cc4:	e7d1      	b.n	8005c6a <_printf_common+0x82>
	...

08005cc8 <_printf_i>:
 8005cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cca:	b08b      	sub	sp, #44	@ 0x2c
 8005ccc:	9206      	str	r2, [sp, #24]
 8005cce:	000a      	movs	r2, r1
 8005cd0:	3243      	adds	r2, #67	@ 0x43
 8005cd2:	9307      	str	r3, [sp, #28]
 8005cd4:	9005      	str	r0, [sp, #20]
 8005cd6:	9203      	str	r2, [sp, #12]
 8005cd8:	7e0a      	ldrb	r2, [r1, #24]
 8005cda:	000c      	movs	r4, r1
 8005cdc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005cde:	2a78      	cmp	r2, #120	@ 0x78
 8005ce0:	d809      	bhi.n	8005cf6 <_printf_i+0x2e>
 8005ce2:	2a62      	cmp	r2, #98	@ 0x62
 8005ce4:	d80b      	bhi.n	8005cfe <_printf_i+0x36>
 8005ce6:	2a00      	cmp	r2, #0
 8005ce8:	d100      	bne.n	8005cec <_printf_i+0x24>
 8005cea:	e0ba      	b.n	8005e62 <_printf_i+0x19a>
 8005cec:	497a      	ldr	r1, [pc, #488]	@ (8005ed8 <_printf_i+0x210>)
 8005cee:	9104      	str	r1, [sp, #16]
 8005cf0:	2a58      	cmp	r2, #88	@ 0x58
 8005cf2:	d100      	bne.n	8005cf6 <_printf_i+0x2e>
 8005cf4:	e08e      	b.n	8005e14 <_printf_i+0x14c>
 8005cf6:	0025      	movs	r5, r4
 8005cf8:	3542      	adds	r5, #66	@ 0x42
 8005cfa:	702a      	strb	r2, [r5, #0]
 8005cfc:	e022      	b.n	8005d44 <_printf_i+0x7c>
 8005cfe:	0010      	movs	r0, r2
 8005d00:	3863      	subs	r0, #99	@ 0x63
 8005d02:	2815      	cmp	r0, #21
 8005d04:	d8f7      	bhi.n	8005cf6 <_printf_i+0x2e>
 8005d06:	f7fa fa07 	bl	8000118 <__gnu_thumb1_case_shi>
 8005d0a:	0016      	.short	0x0016
 8005d0c:	fff6001f 	.word	0xfff6001f
 8005d10:	fff6fff6 	.word	0xfff6fff6
 8005d14:	001ffff6 	.word	0x001ffff6
 8005d18:	fff6fff6 	.word	0xfff6fff6
 8005d1c:	fff6fff6 	.word	0xfff6fff6
 8005d20:	0036009f 	.word	0x0036009f
 8005d24:	fff6007e 	.word	0xfff6007e
 8005d28:	00b0fff6 	.word	0x00b0fff6
 8005d2c:	0036fff6 	.word	0x0036fff6
 8005d30:	fff6fff6 	.word	0xfff6fff6
 8005d34:	0082      	.short	0x0082
 8005d36:	0025      	movs	r5, r4
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	3542      	adds	r5, #66	@ 0x42
 8005d3c:	1d11      	adds	r1, r2, #4
 8005d3e:	6019      	str	r1, [r3, #0]
 8005d40:	6813      	ldr	r3, [r2, #0]
 8005d42:	702b      	strb	r3, [r5, #0]
 8005d44:	2301      	movs	r3, #1
 8005d46:	e09e      	b.n	8005e86 <_printf_i+0x1be>
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	6809      	ldr	r1, [r1, #0]
 8005d4c:	1d02      	adds	r2, r0, #4
 8005d4e:	060d      	lsls	r5, r1, #24
 8005d50:	d50b      	bpl.n	8005d6a <_printf_i+0xa2>
 8005d52:	6806      	ldr	r6, [r0, #0]
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	2e00      	cmp	r6, #0
 8005d58:	da03      	bge.n	8005d62 <_printf_i+0x9a>
 8005d5a:	232d      	movs	r3, #45	@ 0x2d
 8005d5c:	9a03      	ldr	r2, [sp, #12]
 8005d5e:	4276      	negs	r6, r6
 8005d60:	7013      	strb	r3, [r2, #0]
 8005d62:	4b5d      	ldr	r3, [pc, #372]	@ (8005ed8 <_printf_i+0x210>)
 8005d64:	270a      	movs	r7, #10
 8005d66:	9304      	str	r3, [sp, #16]
 8005d68:	e018      	b.n	8005d9c <_printf_i+0xd4>
 8005d6a:	6806      	ldr	r6, [r0, #0]
 8005d6c:	601a      	str	r2, [r3, #0]
 8005d6e:	0649      	lsls	r1, r1, #25
 8005d70:	d5f1      	bpl.n	8005d56 <_printf_i+0x8e>
 8005d72:	b236      	sxth	r6, r6
 8005d74:	e7ef      	b.n	8005d56 <_printf_i+0x8e>
 8005d76:	6808      	ldr	r0, [r1, #0]
 8005d78:	6819      	ldr	r1, [r3, #0]
 8005d7a:	c940      	ldmia	r1!, {r6}
 8005d7c:	0605      	lsls	r5, r0, #24
 8005d7e:	d402      	bmi.n	8005d86 <_printf_i+0xbe>
 8005d80:	0640      	lsls	r0, r0, #25
 8005d82:	d500      	bpl.n	8005d86 <_printf_i+0xbe>
 8005d84:	b2b6      	uxth	r6, r6
 8005d86:	6019      	str	r1, [r3, #0]
 8005d88:	4b53      	ldr	r3, [pc, #332]	@ (8005ed8 <_printf_i+0x210>)
 8005d8a:	270a      	movs	r7, #10
 8005d8c:	9304      	str	r3, [sp, #16]
 8005d8e:	2a6f      	cmp	r2, #111	@ 0x6f
 8005d90:	d100      	bne.n	8005d94 <_printf_i+0xcc>
 8005d92:	3f02      	subs	r7, #2
 8005d94:	0023      	movs	r3, r4
 8005d96:	2200      	movs	r2, #0
 8005d98:	3343      	adds	r3, #67	@ 0x43
 8005d9a:	701a      	strb	r2, [r3, #0]
 8005d9c:	6863      	ldr	r3, [r4, #4]
 8005d9e:	60a3      	str	r3, [r4, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	db06      	blt.n	8005db2 <_printf_i+0xea>
 8005da4:	2104      	movs	r1, #4
 8005da6:	6822      	ldr	r2, [r4, #0]
 8005da8:	9d03      	ldr	r5, [sp, #12]
 8005daa:	438a      	bics	r2, r1
 8005dac:	6022      	str	r2, [r4, #0]
 8005dae:	4333      	orrs	r3, r6
 8005db0:	d00c      	beq.n	8005dcc <_printf_i+0x104>
 8005db2:	9d03      	ldr	r5, [sp, #12]
 8005db4:	0030      	movs	r0, r6
 8005db6:	0039      	movs	r1, r7
 8005db8:	f7fa fa3e 	bl	8000238 <__aeabi_uidivmod>
 8005dbc:	9b04      	ldr	r3, [sp, #16]
 8005dbe:	3d01      	subs	r5, #1
 8005dc0:	5c5b      	ldrb	r3, [r3, r1]
 8005dc2:	702b      	strb	r3, [r5, #0]
 8005dc4:	0033      	movs	r3, r6
 8005dc6:	0006      	movs	r6, r0
 8005dc8:	429f      	cmp	r7, r3
 8005dca:	d9f3      	bls.n	8005db4 <_printf_i+0xec>
 8005dcc:	2f08      	cmp	r7, #8
 8005dce:	d109      	bne.n	8005de4 <_printf_i+0x11c>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	07db      	lsls	r3, r3, #31
 8005dd4:	d506      	bpl.n	8005de4 <_printf_i+0x11c>
 8005dd6:	6862      	ldr	r2, [r4, #4]
 8005dd8:	6923      	ldr	r3, [r4, #16]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	dc02      	bgt.n	8005de4 <_printf_i+0x11c>
 8005dde:	2330      	movs	r3, #48	@ 0x30
 8005de0:	3d01      	subs	r5, #1
 8005de2:	702b      	strb	r3, [r5, #0]
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	1b5b      	subs	r3, r3, r5
 8005de8:	6123      	str	r3, [r4, #16]
 8005dea:	9b07      	ldr	r3, [sp, #28]
 8005dec:	0021      	movs	r1, r4
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	9805      	ldr	r0, [sp, #20]
 8005df2:	9b06      	ldr	r3, [sp, #24]
 8005df4:	aa09      	add	r2, sp, #36	@ 0x24
 8005df6:	f7ff fef7 	bl	8005be8 <_printf_common>
 8005dfa:	3001      	adds	r0, #1
 8005dfc:	d148      	bne.n	8005e90 <_printf_i+0x1c8>
 8005dfe:	2001      	movs	r0, #1
 8005e00:	4240      	negs	r0, r0
 8005e02:	b00b      	add	sp, #44	@ 0x2c
 8005e04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e06:	2220      	movs	r2, #32
 8005e08:	6809      	ldr	r1, [r1, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	6022      	str	r2, [r4, #0]
 8005e0e:	2278      	movs	r2, #120	@ 0x78
 8005e10:	4932      	ldr	r1, [pc, #200]	@ (8005edc <_printf_i+0x214>)
 8005e12:	9104      	str	r1, [sp, #16]
 8005e14:	0021      	movs	r1, r4
 8005e16:	3145      	adds	r1, #69	@ 0x45
 8005e18:	700a      	strb	r2, [r1, #0]
 8005e1a:	6819      	ldr	r1, [r3, #0]
 8005e1c:	6822      	ldr	r2, [r4, #0]
 8005e1e:	c940      	ldmia	r1!, {r6}
 8005e20:	0610      	lsls	r0, r2, #24
 8005e22:	d402      	bmi.n	8005e2a <_printf_i+0x162>
 8005e24:	0650      	lsls	r0, r2, #25
 8005e26:	d500      	bpl.n	8005e2a <_printf_i+0x162>
 8005e28:	b2b6      	uxth	r6, r6
 8005e2a:	6019      	str	r1, [r3, #0]
 8005e2c:	07d3      	lsls	r3, r2, #31
 8005e2e:	d502      	bpl.n	8005e36 <_printf_i+0x16e>
 8005e30:	2320      	movs	r3, #32
 8005e32:	4313      	orrs	r3, r2
 8005e34:	6023      	str	r3, [r4, #0]
 8005e36:	2e00      	cmp	r6, #0
 8005e38:	d001      	beq.n	8005e3e <_printf_i+0x176>
 8005e3a:	2710      	movs	r7, #16
 8005e3c:	e7aa      	b.n	8005d94 <_printf_i+0xcc>
 8005e3e:	2220      	movs	r2, #32
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	4393      	bics	r3, r2
 8005e44:	6023      	str	r3, [r4, #0]
 8005e46:	e7f8      	b.n	8005e3a <_printf_i+0x172>
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	680d      	ldr	r5, [r1, #0]
 8005e4c:	1d10      	adds	r0, r2, #4
 8005e4e:	6949      	ldr	r1, [r1, #20]
 8005e50:	6018      	str	r0, [r3, #0]
 8005e52:	6813      	ldr	r3, [r2, #0]
 8005e54:	062e      	lsls	r6, r5, #24
 8005e56:	d501      	bpl.n	8005e5c <_printf_i+0x194>
 8005e58:	6019      	str	r1, [r3, #0]
 8005e5a:	e002      	b.n	8005e62 <_printf_i+0x19a>
 8005e5c:	066d      	lsls	r5, r5, #25
 8005e5e:	d5fb      	bpl.n	8005e58 <_printf_i+0x190>
 8005e60:	8019      	strh	r1, [r3, #0]
 8005e62:	2300      	movs	r3, #0
 8005e64:	9d03      	ldr	r5, [sp, #12]
 8005e66:	6123      	str	r3, [r4, #16]
 8005e68:	e7bf      	b.n	8005dea <_printf_i+0x122>
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	1d11      	adds	r1, r2, #4
 8005e6e:	6019      	str	r1, [r3, #0]
 8005e70:	6815      	ldr	r5, [r2, #0]
 8005e72:	2100      	movs	r1, #0
 8005e74:	0028      	movs	r0, r5
 8005e76:	6862      	ldr	r2, [r4, #4]
 8005e78:	f000 f856 	bl	8005f28 <memchr>
 8005e7c:	2800      	cmp	r0, #0
 8005e7e:	d001      	beq.n	8005e84 <_printf_i+0x1bc>
 8005e80:	1b40      	subs	r0, r0, r5
 8005e82:	6060      	str	r0, [r4, #4]
 8005e84:	6863      	ldr	r3, [r4, #4]
 8005e86:	6123      	str	r3, [r4, #16]
 8005e88:	2300      	movs	r3, #0
 8005e8a:	9a03      	ldr	r2, [sp, #12]
 8005e8c:	7013      	strb	r3, [r2, #0]
 8005e8e:	e7ac      	b.n	8005dea <_printf_i+0x122>
 8005e90:	002a      	movs	r2, r5
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	9906      	ldr	r1, [sp, #24]
 8005e96:	9805      	ldr	r0, [sp, #20]
 8005e98:	9d07      	ldr	r5, [sp, #28]
 8005e9a:	47a8      	blx	r5
 8005e9c:	3001      	adds	r0, #1
 8005e9e:	d0ae      	beq.n	8005dfe <_printf_i+0x136>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	079b      	lsls	r3, r3, #30
 8005ea4:	d415      	bmi.n	8005ed2 <_printf_i+0x20a>
 8005ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea8:	68e0      	ldr	r0, [r4, #12]
 8005eaa:	4298      	cmp	r0, r3
 8005eac:	daa9      	bge.n	8005e02 <_printf_i+0x13a>
 8005eae:	0018      	movs	r0, r3
 8005eb0:	e7a7      	b.n	8005e02 <_printf_i+0x13a>
 8005eb2:	0022      	movs	r2, r4
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	9906      	ldr	r1, [sp, #24]
 8005eb8:	9805      	ldr	r0, [sp, #20]
 8005eba:	9e07      	ldr	r6, [sp, #28]
 8005ebc:	3219      	adds	r2, #25
 8005ebe:	47b0      	blx	r6
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d09c      	beq.n	8005dfe <_printf_i+0x136>
 8005ec4:	3501      	adds	r5, #1
 8005ec6:	68e3      	ldr	r3, [r4, #12]
 8005ec8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eca:	1a9b      	subs	r3, r3, r2
 8005ecc:	42ab      	cmp	r3, r5
 8005ece:	dcf0      	bgt.n	8005eb2 <_printf_i+0x1ea>
 8005ed0:	e7e9      	b.n	8005ea6 <_printf_i+0x1de>
 8005ed2:	2500      	movs	r5, #0
 8005ed4:	e7f7      	b.n	8005ec6 <_printf_i+0x1fe>
 8005ed6:	46c0      	nop			@ (mov r8, r8)
 8005ed8:	08006305 	.word	0x08006305
 8005edc:	08006316 	.word	0x08006316

08005ee0 <memmove>:
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	4288      	cmp	r0, r1
 8005ee4:	d902      	bls.n	8005eec <memmove+0xc>
 8005ee6:	188b      	adds	r3, r1, r2
 8005ee8:	4298      	cmp	r0, r3
 8005eea:	d308      	bcc.n	8005efe <memmove+0x1e>
 8005eec:	2300      	movs	r3, #0
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d007      	beq.n	8005f02 <memmove+0x22>
 8005ef2:	5ccc      	ldrb	r4, [r1, r3]
 8005ef4:	54c4      	strb	r4, [r0, r3]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	e7f9      	b.n	8005eee <memmove+0xe>
 8005efa:	5c8b      	ldrb	r3, [r1, r2]
 8005efc:	5483      	strb	r3, [r0, r2]
 8005efe:	3a01      	subs	r2, #1
 8005f00:	d2fb      	bcs.n	8005efa <memmove+0x1a>
 8005f02:	bd10      	pop	{r4, pc}

08005f04 <_sbrk_r>:
 8005f04:	2300      	movs	r3, #0
 8005f06:	b570      	push	{r4, r5, r6, lr}
 8005f08:	4d06      	ldr	r5, [pc, #24]	@ (8005f24 <_sbrk_r+0x20>)
 8005f0a:	0004      	movs	r4, r0
 8005f0c:	0008      	movs	r0, r1
 8005f0e:	602b      	str	r3, [r5, #0]
 8005f10:	f7fb f978 	bl	8001204 <_sbrk>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d103      	bne.n	8005f20 <_sbrk_r+0x1c>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d000      	beq.n	8005f20 <_sbrk_r+0x1c>
 8005f1e:	6023      	str	r3, [r4, #0]
 8005f20:	bd70      	pop	{r4, r5, r6, pc}
 8005f22:	46c0      	nop			@ (mov r8, r8)
 8005f24:	2000035c 	.word	0x2000035c

08005f28 <memchr>:
 8005f28:	b2c9      	uxtb	r1, r1
 8005f2a:	1882      	adds	r2, r0, r2
 8005f2c:	4290      	cmp	r0, r2
 8005f2e:	d101      	bne.n	8005f34 <memchr+0xc>
 8005f30:	2000      	movs	r0, #0
 8005f32:	4770      	bx	lr
 8005f34:	7803      	ldrb	r3, [r0, #0]
 8005f36:	428b      	cmp	r3, r1
 8005f38:	d0fb      	beq.n	8005f32 <memchr+0xa>
 8005f3a:	3001      	adds	r0, #1
 8005f3c:	e7f6      	b.n	8005f2c <memchr+0x4>

08005f3e <memcpy>:
 8005f3e:	2300      	movs	r3, #0
 8005f40:	b510      	push	{r4, lr}
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d100      	bne.n	8005f48 <memcpy+0xa>
 8005f46:	bd10      	pop	{r4, pc}
 8005f48:	5ccc      	ldrb	r4, [r1, r3]
 8005f4a:	54c4      	strb	r4, [r0, r3]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	e7f8      	b.n	8005f42 <memcpy+0x4>

08005f50 <_realloc_r>:
 8005f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f52:	0006      	movs	r6, r0
 8005f54:	000c      	movs	r4, r1
 8005f56:	0015      	movs	r5, r2
 8005f58:	2900      	cmp	r1, #0
 8005f5a:	d105      	bne.n	8005f68 <_realloc_r+0x18>
 8005f5c:	0011      	movs	r1, r2
 8005f5e:	f7ff fc55 	bl	800580c <_malloc_r>
 8005f62:	0004      	movs	r4, r0
 8005f64:	0020      	movs	r0, r4
 8005f66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f68:	2a00      	cmp	r2, #0
 8005f6a:	d103      	bne.n	8005f74 <_realloc_r+0x24>
 8005f6c:	f7ff fbe2 	bl	8005734 <_free_r>
 8005f70:	002c      	movs	r4, r5
 8005f72:	e7f7      	b.n	8005f64 <_realloc_r+0x14>
 8005f74:	f000 f81c 	bl	8005fb0 <_malloc_usable_size_r>
 8005f78:	0007      	movs	r7, r0
 8005f7a:	4285      	cmp	r5, r0
 8005f7c:	d802      	bhi.n	8005f84 <_realloc_r+0x34>
 8005f7e:	0843      	lsrs	r3, r0, #1
 8005f80:	42ab      	cmp	r3, r5
 8005f82:	d3ef      	bcc.n	8005f64 <_realloc_r+0x14>
 8005f84:	0029      	movs	r1, r5
 8005f86:	0030      	movs	r0, r6
 8005f88:	f7ff fc40 	bl	800580c <_malloc_r>
 8005f8c:	9001      	str	r0, [sp, #4]
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d101      	bne.n	8005f96 <_realloc_r+0x46>
 8005f92:	9c01      	ldr	r4, [sp, #4]
 8005f94:	e7e6      	b.n	8005f64 <_realloc_r+0x14>
 8005f96:	002a      	movs	r2, r5
 8005f98:	42bd      	cmp	r5, r7
 8005f9a:	d900      	bls.n	8005f9e <_realloc_r+0x4e>
 8005f9c:	003a      	movs	r2, r7
 8005f9e:	0021      	movs	r1, r4
 8005fa0:	9801      	ldr	r0, [sp, #4]
 8005fa2:	f7ff ffcc 	bl	8005f3e <memcpy>
 8005fa6:	0021      	movs	r1, r4
 8005fa8:	0030      	movs	r0, r6
 8005faa:	f7ff fbc3 	bl	8005734 <_free_r>
 8005fae:	e7f0      	b.n	8005f92 <_realloc_r+0x42>

08005fb0 <_malloc_usable_size_r>:
 8005fb0:	1f0b      	subs	r3, r1, #4
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	1f18      	subs	r0, r3, #4
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	da01      	bge.n	8005fbe <_malloc_usable_size_r+0xe>
 8005fba:	580b      	ldr	r3, [r1, r0]
 8005fbc:	18c0      	adds	r0, r0, r3
 8005fbe:	4770      	bx	lr

08005fc0 <_init>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	46c0      	nop			@ (mov r8, r8)
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr

08005fcc <_fini>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	46c0      	nop			@ (mov r8, r8)
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr
