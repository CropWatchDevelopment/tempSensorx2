
CWH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007db4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f50  08007e74  08007e74  00008e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dc4  08008dc4  0000a05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008dc4  08008dc4  00009dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dcc  08008dcc  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dcc  08008dcc  00009dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008dd0  08008dd0  00009dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008dd4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000374  2000005c  08008e30  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d0  08008e30  0000a3d0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000156e1  00000000  00000000  0000a084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038af  00000000  00000000  0001f765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  00023018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dff  00000000  00000000  00024240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180a4  00000000  00000000  0002503f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ae9  00000000  00000000  0003d0e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bd10  00000000  00000000  00054bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e08dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004554  00000000  00000000  000e0920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e4e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007e5c 	.word	0x08007e5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08007e5c 	.word	0x08007e5c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <ATC_SendReceive>:
    uint32_t command_len,
    char *response,
    uint32_t response_size,
    uint32_t timeout_ms,
    const char *expected_response
) {
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b089      	sub	sp, #36	@ 0x24
 8000474:	af02      	add	r7, sp, #8
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
 800047c:	603b      	str	r3, [r7, #0]
    if (!lora || !lora->huart || !command || command_len == 0) {
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d009      	beq.n	8000498 <ATC_SendReceive+0x28>
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d005      	beq.n	8000498 <ATC_SendReceive+0x28>
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <ATC_SendReceive+0x28>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d102      	bne.n	800049e <ATC_SendReceive+0x2e>
        return -1;
 8000498:	2301      	movs	r3, #1
 800049a:	425b      	negs	r3, r3
 800049c:	e068      	b.n	8000570 <ATC_SendReceive+0x100>
    }
    HAL_StatusTypeDef status = HAL_UART_Transmit(
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	6818      	ldr	r0, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	2517      	movs	r5, #23
 80004a8:	197c      	adds	r4, r7, r5
 80004aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004ac:	68b9      	ldr	r1, [r7, #8]
 80004ae:	f005 ffcb 	bl	8006448 <HAL_UART_Transmit>
 80004b2:	0003      	movs	r3, r0
 80004b4:	7023      	strb	r3, [r4, #0]
        lora->huart,
        (const uint8_t *)command,
        command_len,
        timeout_ms
    );
    if (status != HAL_OK) {
 80004b6:	197b      	adds	r3, r7, r5
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d009      	beq.n	80004d2 <ATC_SendReceive+0x62>
        ConsolePrintf("ATC_SendReceive: TX failed (status=%d)\r\n", (int)status);
 80004be:	197b      	adds	r3, r7, r5
 80004c0:	781a      	ldrb	r2, [r3, #0]
 80004c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000578 <ATC_SendReceive+0x108>)
 80004c4:	0011      	movs	r1, r2
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 ff2e 	bl	8001328 <ConsolePrintf>
        return -2;
 80004cc:	2302      	movs	r3, #2
 80004ce:	425b      	negs	r3, r3
 80004d0:	e04e      	b.n	8000570 <ATC_SendReceive+0x100>
    }
    if (response && response_size > 0) {
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d033      	beq.n	8000540 <ATC_SendReceive+0xd0>
 80004d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d030      	beq.n	8000540 <ATC_SendReceive+0xd0>
        uint16_t rx_len = 0;
 80004de:	2514      	movs	r5, #20
 80004e0:	197b      	adds	r3, r7, r5
 80004e2:	2200      	movs	r2, #0
 80004e4:	801a      	strh	r2, [r3, #0]
        memset(response, 0, response_size);
 80004e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	2100      	movs	r1, #0
 80004ec:	0018      	movs	r0, r3
 80004ee:	f007 f825 	bl	800753c <memset>
        status = HAL_UARTEx_ReceiveToIdle(
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	6818      	ldr	r0, [r3, #0]
 80004f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	3b01      	subs	r3, #1
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	2617      	movs	r6, #23
 8000500:	19bc      	adds	r4, r7, r6
 8000502:	197d      	adds	r5, r7, r5
 8000504:	6839      	ldr	r1, [r7, #0]
 8000506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	002b      	movs	r3, r5
 800050c:	f006 fdf0 	bl	80070f0 <HAL_UARTEx_ReceiveToIdle>
 8000510:	0003      	movs	r3, r0
 8000512:	7023      	strb	r3, [r4, #0]
            (uint8_t *)response,
            response_size - 1,
            &rx_len,
            timeout_ms
        );
        if (status != HAL_OK) {
 8000514:	19bb      	adds	r3, r7, r6
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d009      	beq.n	8000530 <ATC_SendReceive+0xc0>
            ConsolePrintf("ATC_SendReceive: RX failed (status=%d)\r\n", (int)status);
 800051c:	19bb      	adds	r3, r7, r6
 800051e:	781a      	ldrb	r2, [r3, #0]
 8000520:	4b16      	ldr	r3, [pc, #88]	@ (800057c <ATC_SendReceive+0x10c>)
 8000522:	0011      	movs	r1, r2
 8000524:	0018      	movs	r0, r3
 8000526:	f000 feff 	bl	8001328 <ConsolePrintf>
            return -4;
 800052a:	2304      	movs	r3, #4
 800052c:	425b      	negs	r3, r3
 800052e:	e01f      	b.n	8000570 <ATC_SendReceive+0x100>
        }
        response[rx_len] = '\0';
 8000530:	2314      	movs	r3, #20
 8000532:	18fb      	adds	r3, r7, r3
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	001a      	movs	r2, r3
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	189b      	adds	r3, r3, r2
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
    }
    if (expected_response && response) {
 8000540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000542:	2b00      	cmp	r3, #0
 8000544:	d013      	beq.n	800056e <ATC_SendReceive+0xfe>
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d010      	beq.n	800056e <ATC_SendReceive+0xfe>
        if (!strstr(response, expected_response)) {
 800054c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f006 fffa 	bl	800754c <strstr>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d108      	bne.n	800056e <ATC_SendReceive+0xfe>
            ConsolePrintf("ATC_SendReceive: expected response '%s' not found\r\n", expected_response);
 800055c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800055e:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <ATC_SendReceive+0x110>)
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fee0 	bl	8001328 <ConsolePrintf>
            return -3;
 8000568:	2303      	movs	r3, #3
 800056a:	425b      	negs	r3, r3
 800056c:	e000      	b.n	8000570 <ATC_SendReceive+0x100>
        }
    }
    return 0;
 800056e:	2300      	movs	r3, #0
}
 8000570:	0018      	movs	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	b007      	add	sp, #28
 8000576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000578:	08007e74 	.word	0x08007e74
 800057c:	08007ea0 	.word	0x08007ea0
 8000580:	08007ecc 	.word	0x08007ecc

08000584 <wake_module>:
static LoRaWAN_Error_t wake_module(
    ATC_HandleTypeDef *lora,
    char *response,
    uint32_t response_size,
    uint32_t timeout_ms
) {
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b08b      	sub	sp, #44	@ 0x2c
 8000588:	af04      	add	r7, sp, #16
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
    uint8_t dummy;
    // Flush RX FIFO by reading until no more data
    while (HAL_UART_Receive(lora->huart, &dummy, 1, 1) == HAL_OK) {
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	6818      	ldr	r0, [r3, #0]
 8000598:	2313      	movs	r3, #19
 800059a:	18f9      	adds	r1, r7, r3
 800059c:	2301      	movs	r3, #1
 800059e:	2201      	movs	r2, #1
 80005a0:	f005 fff2 	bl	8006588 <HAL_UART_Receive>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d0f5      	beq.n	8000594 <wake_module+0x10>
    }
    static const char wake_cmd[] = "AT\r\n";
    int rc = ATC_SendReceive(
        lora,
        wake_cmd,
        (uint32_t)strlen(wake_cmd),
 80005a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000620 <wake_module+0x9c>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff fdac 	bl	8000108 <strlen>
 80005b0:	0004      	movs	r4, r0
    int rc = ATC_SendReceive(
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	491a      	ldr	r1, [pc, #104]	@ (8000620 <wake_module+0x9c>)
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	2300      	movs	r3, #0
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	0013      	movs	r3, r2
 80005c6:	0022      	movs	r2, r4
 80005c8:	f7ff ff52 	bl	8000470 <ATC_SendReceive>
 80005cc:	0003      	movs	r3, r0
 80005ce:	617b      	str	r3, [r7, #20]
        response,
        response_size,
        timeout_ms,
        NULL
    );
    if (rc != 0) {
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d008      	beq.n	80005e8 <wake_module+0x64>
        ConsolePrintf("wake_module: AT transmit error (rc=%d)\r\n", rc);
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <wake_module+0xa0>)
 80005da:	0011      	movs	r1, r2
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 fea3 	bl	8001328 <ConsolePrintf>
        return LORAWAN_ERROR_COMMUNICATION;
 80005e2:	2302      	movs	r3, #2
 80005e4:	425b      	negs	r3, r3
 80005e6:	e016      	b.n	8000616 <wake_module+0x92>
    }
    HAL_Delay(100);
 80005e8:	2064      	movs	r0, #100	@ 0x64
 80005ea:	f002 fa43 	bl	8002a74 <HAL_Delay>
    if (strstr(response, "WAKE") || strstr(response, "OK")) {
 80005ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000628 <wake_module+0xa4>)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f006 ffa9 	bl	800754c <strstr>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d107      	bne.n	800060e <wake_module+0x8a>
 80005fe:	4a0b      	ldr	r2, [pc, #44]	@ (800062c <wake_module+0xa8>)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	0011      	movs	r1, r2
 8000604:	0018      	movs	r0, r3
 8000606:	f006 ffa1 	bl	800754c <strstr>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <wake_module+0x8e>
        return LORAWAN_ERROR_OK;
 800060e:	2300      	movs	r3, #0
 8000610:	e001      	b.n	8000616 <wake_module+0x92>
    }
    return LORAWAN_ERROR_COMMUNICATION;
 8000612:	2302      	movs	r3, #2
 8000614:	425b      	negs	r3, r3
}
 8000616:	0018      	movs	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	b007      	add	sp, #28
 800061c:	bd90      	pop	{r4, r7, pc}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	08008c1c 	.word	0x08008c1c
 8000624:	08007f00 	.word	0x08007f00
 8000628:	08007f2c 	.word	0x08007f2c
 800062c:	08007f34 	.word	0x08007f34

08000630 <send_data_and_get_response>:
    const char *data,
    char *response,
    uint32_t response_size,
    uint32_t timeout_ms,
    const char *expected_response
) {
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af04      	add	r7, sp, #16
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	603b      	str	r3, [r7, #0]
    if (!lora || !lora->huart || !data || !response || response_size == 0) {
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00c      	beq.n	800065e <send_data_and_get_response+0x2e>
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d008      	beq.n	800065e <send_data_and_get_response+0x2e>
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d005      	beq.n	800065e <send_data_and_get_response+0x2e>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <send_data_and_get_response+0x2e>
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <send_data_and_get_response+0x34>
        return LORAWAN_ERROR_INVALID_PARAM;
 800065e:	2301      	movs	r3, #1
 8000660:	425b      	negs	r3, r3
 8000662:	e049      	b.n	80006f8 <send_data_and_get_response+0xc8>
    }
    LoRaWAN_Error_t wake_status = wake_module(
 8000664:	2517      	movs	r5, #23
 8000666:	197c      	adds	r4, r7, r5
 8000668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	68f8      	ldr	r0, [r7, #12]
 8000670:	f7ff ff88 	bl	8000584 <wake_module>
 8000674:	0003      	movs	r3, r0
 8000676:	7023      	strb	r3, [r4, #0]
        lora,
        response,
        response_size,
        timeout_ms
    );
    if (wake_status != LORAWAN_ERROR_OK) {
 8000678:	197b      	adds	r3, r7, r5
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b25b      	sxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d003      	beq.n	800068a <send_data_and_get_response+0x5a>
        return wake_status;
 8000682:	197b      	adds	r3, r7, r5
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b25b      	sxtb	r3, r3
 8000688:	e036      	b.n	80006f8 <send_data_and_get_response+0xc8>
    }
    HAL_Delay(50);
 800068a:	2032      	movs	r0, #50	@ 0x32
 800068c:	f002 f9f2 	bl	8002a74 <HAL_Delay>
    int res = ATC_SendReceive(
        lora,
        data,
        (uint32_t)strlen(data),
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff fd38 	bl	8000108 <strlen>
 8000698:	0004      	movs	r4, r0
    int res = ATC_SendReceive(
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	68f8      	ldr	r0, [r7, #12]
 80006a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006a2:	9302      	str	r3, [sp, #8]
 80006a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	0013      	movs	r3, r2
 80006ae:	0022      	movs	r2, r4
 80006b0:	f7ff fede 	bl	8000470 <ATC_SendReceive>
 80006b4:	0003      	movs	r3, r0
 80006b6:	613b      	str	r3, [r7, #16]
        response,
        response_size,
        timeout_ms,
        expected_response
    );
    switch (res) {
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3301      	adds	r3, #1
 80006bc:	d00f      	beq.n	80006de <send_data_and_get_response+0xae>
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	da18      	bge.n	80006f6 <send_data_and_get_response+0xc6>
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	3302      	adds	r3, #2
 80006c8:	d00c      	beq.n	80006e4 <send_data_and_get_response+0xb4>
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	3302      	adds	r3, #2
 80006ce:	dc12      	bgt.n	80006f6 <send_data_and_get_response+0xc6>
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	3304      	adds	r3, #4
 80006d4:	d00c      	beq.n	80006f0 <send_data_and_get_response+0xc0>
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	3303      	adds	r3, #3
 80006da:	d006      	beq.n	80006ea <send_data_and_get_response+0xba>
 80006dc:	e00b      	b.n	80006f6 <send_data_and_get_response+0xc6>
        case -1: return LORAWAN_ERROR_INVALID_PARAM;
 80006de:	2301      	movs	r3, #1
 80006e0:	425b      	negs	r3, r3
 80006e2:	e009      	b.n	80006f8 <send_data_and_get_response+0xc8>
        case -2: return LORAWAN_ERROR_COMMUNICATION;
 80006e4:	2302      	movs	r3, #2
 80006e6:	425b      	negs	r3, r3
 80006e8:	e006      	b.n	80006f8 <send_data_and_get_response+0xc8>
        case -3: return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 80006ea:	2303      	movs	r3, #3
 80006ec:	425b      	negs	r3, r3
 80006ee:	e003      	b.n	80006f8 <send_data_and_get_response+0xc8>
        case -4: return LORAWAN_ERROR_TIMEOUT;
 80006f0:	2304      	movs	r3, #4
 80006f2:	425b      	negs	r3, r3
 80006f4:	e000      	b.n	80006f8 <send_data_and_get_response+0xc8>
        default:  return LORAWAN_ERROR_OK;
 80006f6:	2300      	movs	r3, #0
    }
}
 80006f8:	0018      	movs	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b006      	add	sp, #24
 80006fe:	bdb0      	pop	{r4, r5, r7, pc}

08000700 <LoRaWAN_Join>:

LoRaWAN_Error_t LoRaWAN_Join(ATC_HandleTypeDef *lora) {
 8000700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000702:	b0c7      	sub	sp, #284	@ 0x11c
 8000704:	af02      	add	r7, sp, #8
 8000706:	6078      	str	r0, [r7, #4]
    char response[LORAWAN_MAX_RESP_LEN] = {0};
 8000708:	4b34      	ldr	r3, [pc, #208]	@ (80007dc <LoRaWAN_Join+0xdc>)
 800070a:	2288      	movs	r2, #136	@ 0x88
 800070c:	0052      	lsls	r2, r2, #1
 800070e:	189b      	adds	r3, r3, r2
 8000710:	19db      	adds	r3, r3, r7
 8000712:	0018      	movs	r0, r3
 8000714:	2380      	movs	r3, #128	@ 0x80
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f006 ff0e 	bl	800753c <memset>
    LoRaWAN_Error_t status = send_data_and_get_response(
 8000720:	2610      	movs	r6, #16
 8000722:	36ff      	adds	r6, #255	@ 0xff
 8000724:	19bc      	adds	r4, r7, r6
 8000726:	2380      	movs	r3, #128	@ 0x80
 8000728:	005d      	lsls	r5, r3, #1
 800072a:	230c      	movs	r3, #12
 800072c:	18fa      	adds	r2, r7, r3
 800072e:	492c      	ldr	r1, [pc, #176]	@ (80007e0 <LoRaWAN_Join+0xe0>)
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	4b2c      	ldr	r3, [pc, #176]	@ (80007e4 <LoRaWAN_Join+0xe4>)
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	4b2c      	ldr	r3, [pc, #176]	@ (80007e8 <LoRaWAN_Join+0xe8>)
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	002b      	movs	r3, r5
 800073c:	f7ff ff78 	bl	8000630 <send_data_and_get_response>
 8000740:	0003      	movs	r3, r0
 8000742:	7023      	strb	r3, [r4, #0]
        response,
        sizeof(response),
        10000,
        "OK"
    );
    if (status != LORAWAN_ERROR_OK) {
 8000744:	19bb      	adds	r3, r7, r6
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b25b      	sxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d003      	beq.n	8000756 <LoRaWAN_Join+0x56>
        return status;
 800074e:	19bb      	adds	r3, r7, r6
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b25b      	sxtb	r3, r3
 8000754:	e03d      	b.n	80007d2 <LoRaWAN_Join+0xd2>
    }
    memset(response, 0, sizeof(response));
 8000756:	2380      	movs	r3, #128	@ 0x80
 8000758:	005a      	lsls	r2, r3, #1
 800075a:	250c      	movs	r5, #12
 800075c:	197b      	adds	r3, r7, r5
 800075e:	2100      	movs	r1, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f006 feeb 	bl	800753c <memset>
    uint16_t rx_len = 0;
 8000766:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <LoRaWAN_Join+0xec>)
 8000768:	2488      	movs	r4, #136	@ 0x88
 800076a:	0064      	lsls	r4, r4, #1
 800076c:	191b      	adds	r3, r3, r4
 800076e:	19db      	adds	r3, r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	801a      	strh	r2, [r3, #0]
    if (HAL_UARTEx_ReceiveToIdle(
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	230a      	movs	r3, #10
 800077a:	18fb      	adds	r3, r7, r3
 800077c:	1979      	adds	r1, r7, r5
 800077e:	4a1a      	ldr	r2, [pc, #104]	@ (80007e8 <LoRaWAN_Join+0xe8>)
 8000780:	9200      	str	r2, [sp, #0]
 8000782:	22ff      	movs	r2, #255	@ 0xff
 8000784:	f006 fcb4 	bl	80070f0 <HAL_UARTEx_ReceiveToIdle>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d109      	bne.n	80007a0 <LoRaWAN_Join+0xa0>
            (uint8_t *)response,
            sizeof(response) - 1,
            &rx_len,
            10000
        ) == HAL_OK) {
        response[rx_len] = '\0';
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <LoRaWAN_Join+0xec>)
 800078e:	191b      	adds	r3, r3, r4
 8000790:	19db      	adds	r3, r3, r7
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	001a      	movs	r2, r3
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <LoRaWAN_Join+0xdc>)
 8000798:	191b      	adds	r3, r3, r4
 800079a:	19db      	adds	r3, r3, r7
 800079c:	2100      	movs	r1, #0
 800079e:	5499      	strb	r1, [r3, r2]
    }
    if (strstr(response, "JOINED")) {
 80007a0:	4a13      	ldr	r2, [pc, #76]	@ (80007f0 <LoRaWAN_Join+0xf0>)
 80007a2:	230c      	movs	r3, #12
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f006 fecf 	bl	800754c <strstr>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <LoRaWAN_Join+0xb6>
        return LORAWAN_ERROR_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e00d      	b.n	80007d2 <LoRaWAN_Join+0xd2>
    }
    if (strstr(response, "JOIN FAILED")) {
 80007b6:	4a0f      	ldr	r2, [pc, #60]	@ (80007f4 <LoRaWAN_Join+0xf4>)
 80007b8:	230c      	movs	r3, #12
 80007ba:	18fb      	adds	r3, r7, r3
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f006 fec4 	bl	800754c <strstr>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d002      	beq.n	80007ce <LoRaWAN_Join+0xce>
        return LORAWAN_ERROR_NOT_JOINED;
 80007c8:	2305      	movs	r3, #5
 80007ca:	425b      	negs	r3, r3
 80007cc:	e001      	b.n	80007d2 <LoRaWAN_Join+0xd2>
    }
    return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 80007ce:	2303      	movs	r3, #3
 80007d0:	425b      	negs	r3, r3
}
 80007d2:	0018      	movs	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b045      	add	sp, #276	@ 0x114
 80007d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	fffffefc 	.word	0xfffffefc
 80007e0:	08007f38 	.word	0x08007f38
 80007e4:	08007f34 	.word	0x08007f34
 80007e8:	00002710 	.word	0x00002710
 80007ec:	fffffefa 	.word	0xfffffefa
 80007f0:	08007f44 	.word	0x08007f44
 80007f4:	08007f4c 	.word	0x08007f4c

080007f8 <LoRaWAN_SendHex>:

LoRaWAN_Error_t LoRaWAN_SendHex(
    ATC_HandleTypeDef *lora,
    const uint8_t *payload,
    size_t length
) {
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b0cb      	sub	sp, #300	@ 0x12c
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
    if (!lora || !lora->huart || !payload || length == 0 || length > (LORAWAN_MAX_HEX_LEN/2)) {
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d00c      	beq.n	8000824 <LoRaWAN_SendHex+0x2c>
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <LoRaWAN_SendHex+0x2c>
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d005      	beq.n	8000824 <LoRaWAN_SendHex+0x2c>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d002      	beq.n	8000824 <LoRaWAN_SendHex+0x2c>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b40      	cmp	r3, #64	@ 0x40
 8000822:	d902      	bls.n	800082a <LoRaWAN_SendHex+0x32>
        return LORAWAN_ERROR_INVALID_PARAM;
 8000824:	2301      	movs	r3, #1
 8000826:	425b      	negs	r3, r3
 8000828:	e057      	b.n	80008da <LoRaWAN_SendHex+0xe2>
    }
    char hex[LORAWAN_MAX_HEX_LEN + 1];
    for (size_t i = 0; i < length; ++i) {
 800082a:	2300      	movs	r3, #0
 800082c:	228e      	movs	r2, #142	@ 0x8e
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	18ba      	adds	r2, r7, r2
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	e015      	b.n	8000862 <LoRaWAN_SendHex+0x6a>
        snprintf(&hex[2 * i], 3, "%02X", payload[i]);
 8000836:	248e      	movs	r4, #142	@ 0x8e
 8000838:	0064      	lsls	r4, r4, #1
 800083a:	193b      	adds	r3, r7, r4
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	2294      	movs	r2, #148	@ 0x94
 8000842:	18ba      	adds	r2, r7, r2
 8000844:	18d0      	adds	r0, r2, r3
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	193b      	adds	r3, r7, r4
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	18d3      	adds	r3, r2, r3
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4a24      	ldr	r2, [pc, #144]	@ (80008e4 <LoRaWAN_SendHex+0xec>)
 8000852:	2103      	movs	r1, #3
 8000854:	f006 fe02 	bl	800745c <sniprintf>
    for (size_t i = 0; i < length; ++i) {
 8000858:	193b      	adds	r3, r7, r4
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	193a      	adds	r2, r7, r4
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	238e      	movs	r3, #142	@ 0x8e
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	429a      	cmp	r2, r3
 800086e:	d3e2      	bcc.n	8000836 <LoRaWAN_SendHex+0x3e>
    }
    hex[2 * length] = '\0';
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	2094      	movs	r0, #148	@ 0x94
 8000876:	183a      	adds	r2, r7, r0
 8000878:	2100      	movs	r1, #0
 800087a:	54d1      	strb	r1, [r2, r3]
    char cmd[LORAWAN_MAX_CMD_LEN];
    int n = snprintf(cmd, sizeof(cmd), "AT+SEND \"%s\"\r\n", hex);
 800087c:	183b      	adds	r3, r7, r0
 800087e:	4a1a      	ldr	r2, [pc, #104]	@ (80008e8 <LoRaWAN_SendHex+0xf0>)
 8000880:	2154      	movs	r1, #84	@ 0x54
 8000882:	1878      	adds	r0, r7, r1
 8000884:	2140      	movs	r1, #64	@ 0x40
 8000886:	f006 fde9 	bl	800745c <sniprintf>
 800088a:	0003      	movs	r3, r0
 800088c:	228c      	movs	r2, #140	@ 0x8c
 800088e:	0052      	lsls	r2, r2, #1
 8000890:	18b9      	adds	r1, r7, r2
 8000892:	600b      	str	r3, [r1, #0]
    if (n < 0 || n >= (int)sizeof(cmd)) {
 8000894:	18bb      	adds	r3, r7, r2
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	db03      	blt.n	80008a4 <LoRaWAN_SendHex+0xac>
 800089c:	18bb      	adds	r3, r7, r2
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80008a2:	dd02      	ble.n	80008aa <LoRaWAN_SendHex+0xb2>
        return LORAWAN_ERROR_INVALID_PARAM;
 80008a4:	2301      	movs	r3, #1
 80008a6:	425b      	negs	r3, r3
 80008a8:	e017      	b.n	80008da <LoRaWAN_SendHex+0xe2>
    }
    char response[64] = {0};
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <LoRaWAN_SendHex+0xf4>)
 80008ac:	2290      	movs	r2, #144	@ 0x90
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	189b      	adds	r3, r3, r2
 80008b2:	19db      	adds	r3, r3, r7
 80008b4:	0018      	movs	r0, r3
 80008b6:	2340      	movs	r3, #64	@ 0x40
 80008b8:	001a      	movs	r2, r3
 80008ba:	2100      	movs	r1, #0
 80008bc:	f006 fe3e 	bl	800753c <memset>
    return send_data_and_get_response(
 80008c0:	2314      	movs	r3, #20
 80008c2:	18fa      	adds	r2, r7, r3
 80008c4:	2354      	movs	r3, #84	@ 0x54
 80008c6:	18f9      	adds	r1, r7, r3
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <LoRaWAN_SendHex+0xf8>)
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <LoRaWAN_SendHex+0xfc>)
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2340      	movs	r3, #64	@ 0x40
 80008d4:	f7ff feac 	bl	8000630 <send_data_and_get_response>
 80008d8:	0003      	movs	r3, r0
        response,
        sizeof(response),
        5000,
        "OK"
    );
}
 80008da:	0018      	movs	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	b049      	add	sp, #292	@ 0x124
 80008e0:	bd90      	pop	{r4, r7, pc}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	08007f58 	.word	0x08007f58
 80008e8:	08007f60 	.word	0x08007f60
 80008ec:	fffffef4 	.word	0xfffffef4
 80008f0:	08007f34 	.word	0x08007f34
 80008f4:	00001388 	.word	0x00001388

080008f8 <LoRaWAN_Join_Status>:


LoRaWAN_Error_t LoRaWAN_Join_Status(ATC_HandleTypeDef *lora) {
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	b08f      	sub	sp, #60	@ 0x3c
 80008fc:	af02      	add	r7, sp, #8
 80008fe:	6078      	str	r0, [r7, #4]
    char resp[32] = {0};
 8000900:	2508      	movs	r5, #8
 8000902:	197b      	adds	r3, r7, r5
 8000904:	0018      	movs	r0, r3
 8000906:	2320      	movs	r3, #32
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f006 fe16 	bl	800753c <memset>

    // Read the full response (don’t stop on any particular substring)
    LoRaWAN_Error_t st = send_data_and_get_response(
 8000910:	262b      	movs	r6, #43	@ 0x2b
 8000912:	19bc      	adds	r4, r7, r6
 8000914:	197a      	adds	r2, r7, r5
 8000916:	491d      	ldr	r1, [pc, #116]	@ (800098c <LoRaWAN_Join_Status+0x94>)
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	2300      	movs	r3, #0
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	2396      	movs	r3, #150	@ 0x96
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2320      	movs	r3, #32
 8000926:	f7ff fe83 	bl	8000630 <send_data_and_get_response>
 800092a:	0003      	movs	r3, r0
 800092c:	7023      	strb	r3, [r4, #0]
        resp,
        sizeof(resp),
        300,
        NULL
    );
    if (st != LORAWAN_ERROR_OK) {
 800092e:	19bb      	adds	r3, r7, r6
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b25b      	sxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d002      	beq.n	800093e <LoRaWAN_Join_Status+0x46>
        return LORAWAN_ERROR_NOT_JOINED;
 8000938:	2305      	movs	r3, #5
 800093a:	425b      	negs	r3, r3
 800093c:	e021      	b.n	8000982 <LoRaWAN_Join_Status+0x8a>
    }

    // Skip leading CR/LF/whitespace
    char *p = resp;
 800093e:	2308      	movs	r3, #8
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (*p && isspace((unsigned char)*p)) {
 8000944:	e002      	b.n	800094c <LoRaWAN_Join_Status+0x54>
        p++;
 8000946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000948:	3301      	adds	r3, #1
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (*p && isspace((unsigned char)*p)) {
 800094c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d009      	beq.n	8000968 <LoRaWAN_Join_Status+0x70>
 8000954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <LoRaWAN_Join_Status+0x98>)
 800095c:	18d3      	adds	r3, r2, r3
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	001a      	movs	r2, r3
 8000962:	2308      	movs	r3, #8
 8000964:	4013      	ands	r3, r2
 8000966:	d1ee      	bne.n	8000946 <LoRaWAN_Join_Status+0x4e>
    }

    // Option A: parse as integer
    if (strtol(p, NULL, 10) == 1) {
 8000968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800096a:	220a      	movs	r2, #10
 800096c:	2100      	movs	r1, #0
 800096e:	0018      	movs	r0, r3
 8000970:	f006 fd68 	bl	8007444 <strtol>
 8000974:	0003      	movs	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d101      	bne.n	800097e <LoRaWAN_Join_Status+0x86>
        return LORAWAN_ERROR_OK;
 800097a:	2300      	movs	r3, #0
 800097c:	e001      	b.n	8000982 <LoRaWAN_Join_Status+0x8a>
    }

    return LORAWAN_ERROR_NOT_JOINED;
 800097e:	2305      	movs	r3, #5
 8000980:	425b      	negs	r3, r3
}
 8000982:	0018      	movs	r0, r3
 8000984:	46bd      	mov	sp, r7
 8000986:	b00d      	add	sp, #52	@ 0x34
 8000988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	08007f70 	.word	0x08007f70
 8000990:	08008c90 	.word	0x08008c90

08000994 <LoRaWAN_SetPort>:

LoRaWAN_Error_t LoRaWAN_SetPort(ATC_HandleTypeDef *lora, uint8_t port) {
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b09b      	sub	sp, #108	@ 0x6c
 8000998:	af02      	add	r7, sp, #8
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	000a      	movs	r2, r1
 800099e:	1cfb      	adds	r3, r7, #3
 80009a0:	701a      	strb	r2, [r3, #0]
    if (!lora || !lora->huart || port < 1 || port > 198) {
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d00b      	beq.n	80009c0 <LoRaWAN_SetPort+0x2c>
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d007      	beq.n	80009c0 <LoRaWAN_SetPort+0x2c>
 80009b0:	1cfb      	adds	r3, r7, #3
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d003      	beq.n	80009c0 <LoRaWAN_SetPort+0x2c>
 80009b8:	1cfb      	adds	r3, r7, #3
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2bc6      	cmp	r3, #198	@ 0xc6
 80009be:	d902      	bls.n	80009c6 <LoRaWAN_SetPort+0x32>
        return LORAWAN_ERROR_INVALID_PARAM;
 80009c0:	2301      	movs	r3, #1
 80009c2:	425b      	negs	r3, r3
 80009c4:	e029      	b.n	8000a1a <LoRaWAN_SetPort+0x86>
    }
    // build the ATS command to set the Application Port
    char cmd[16];
    int n = snprintf(cmd, sizeof(cmd), "ATS%u=%u\r\n",
 80009c6:	1cfb      	adds	r3, r7, #3
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	4916      	ldr	r1, [pc, #88]	@ (8000a24 <LoRaWAN_SetPort+0x90>)
 80009cc:	4a16      	ldr	r2, [pc, #88]	@ (8000a28 <LoRaWAN_SetPort+0x94>)
 80009ce:	204c      	movs	r0, #76	@ 0x4c
 80009d0:	1838      	adds	r0, r7, r0
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	000b      	movs	r3, r1
 80009d6:	2110      	movs	r1, #16
 80009d8:	f006 fd40 	bl	800745c <sniprintf>
 80009dc:	0003      	movs	r3, r0
 80009de:	65fb      	str	r3, [r7, #92]	@ 0x5c
                     (unsigned)APPLICATION_PORT_PARAM,
                     (unsigned)port);
    if (n < 0 || n >= (int)sizeof(cmd)) {
 80009e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	db02      	blt.n	80009ec <LoRaWAN_SetPort+0x58>
 80009e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009e8:	2b0f      	cmp	r3, #15
 80009ea:	dd02      	ble.n	80009f2 <LoRaWAN_SetPort+0x5e>
        return LORAWAN_ERROR_INVALID_PARAM;
 80009ec:	2301      	movs	r3, #1
 80009ee:	425b      	negs	r3, r3
 80009f0:	e013      	b.n	8000a1a <LoRaWAN_SetPort+0x86>
    }
    // fire off “ATS629=<port>” and wait for “OK”
    char resp[64] = {0};
 80009f2:	240c      	movs	r4, #12
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	0018      	movs	r0, r3
 80009f8:	2340      	movs	r3, #64	@ 0x40
 80009fa:	001a      	movs	r2, r3
 80009fc:	2100      	movs	r1, #0
 80009fe:	f006 fd9d 	bl	800753c <memset>
    return send_data_and_get_response(
 8000a02:	193a      	adds	r2, r7, r4
 8000a04:	234c      	movs	r3, #76	@ 0x4c
 8000a06:	18f9      	adds	r1, r7, r3
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	4b08      	ldr	r3, [pc, #32]	@ (8000a2c <LoRaWAN_SetPort+0x98>)
 8000a0c:	9301      	str	r3, [sp, #4]
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <LoRaWAN_SetPort+0x9c>)
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	2340      	movs	r3, #64	@ 0x40
 8000a14:	f7ff fe0c 	bl	8000630 <send_data_and_get_response>
 8000a18:	0003      	movs	r3, r0
        resp,
        sizeof(resp),
        5000,
        "OK"
    );
}
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	b019      	add	sp, #100	@ 0x64
 8000a20:	bd90      	pop	{r4, r7, pc}
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	00000275 	.word	0x00000275
 8000a28:	08007f7c 	.word	0x08007f7c
 8000a2c:	08007f34 	.word	0x08007f34
 8000a30:	00001388 	.word	0x00001388

08000a34 <LoRaWAN_SendHexOnPort>:
LoRaWAN_Error_t LoRaWAN_SendHexOnPort(
    ATC_HandleTypeDef *lora,
    uint8_t           port,
    const uint8_t    *payload,
    size_t            length
) {
 8000a34:	b5b0      	push	{r4, r5, r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	607a      	str	r2, [r7, #4]
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	200b      	movs	r0, #11
 8000a42:	183b      	adds	r3, r7, r0
 8000a44:	1c0a      	adds	r2, r1, #0
 8000a46:	701a      	strb	r2, [r3, #0]
    // 1) change to your desired port
    LoRaWAN_Error_t err = LoRaWAN_SetPort(lora, port);
 8000a48:	2517      	movs	r5, #23
 8000a4a:	197c      	adds	r4, r7, r5
 8000a4c:	183b      	adds	r3, r7, r0
 8000a4e:	781a      	ldrb	r2, [r3, #0]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	0011      	movs	r1, r2
 8000a54:	0018      	movs	r0, r3
 8000a56:	f7ff ff9d 	bl	8000994 <LoRaWAN_SetPort>
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	7023      	strb	r3, [r4, #0]
    if (err != LORAWAN_ERROR_OK) {
 8000a5e:	197b      	adds	r3, r7, r5
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <LoRaWAN_SendHexOnPort+0x3c>
        return err;
 8000a68:	197b      	adds	r3, r7, r5
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	b25b      	sxtb	r3, r3
 8000a6e:	e006      	b.n	8000a7e <LoRaWAN_SendHexOnPort+0x4a>
    }
    // 2) send exactly as before
    return LoRaWAN_SendHex(lora, payload, length);
 8000a70:	683a      	ldr	r2, [r7, #0]
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff febe 	bl	80007f8 <LoRaWAN_SendHex>
 8000a7c:	0003      	movs	r3, r0
}
 8000a7e:	0018      	movs	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b006      	add	sp, #24
 8000a84:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000a88 <LoRaWAN_Set_Battery>:

LoRaWAN_Error_t LoRaWAN_Set_Battery(
    ATC_HandleTypeDef *lora,
    uint8_t batteryStatus  // 0..254 per spec
) {
 8000a88:	b590      	push	{r4, r7, lr}
 8000a8a:	b09b      	sub	sp, #108	@ 0x6c
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	000a      	movs	r2, r1
 8000a92:	1cfb      	adds	r3, r7, #3
 8000a94:	701a      	strb	r2, [r3, #0]
    if (!lora || !lora->huart || batteryStatus > 254U) {
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d007      	beq.n	8000aac <LoRaWAN_Set_Battery+0x24>
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d003      	beq.n	8000aac <LoRaWAN_Set_Battery+0x24>
 8000aa4:	1cfb      	adds	r3, r7, #3
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2bff      	cmp	r3, #255	@ 0xff
 8000aaa:	d102      	bne.n	8000ab2 <LoRaWAN_Set_Battery+0x2a>
        return LORAWAN_ERROR_INVALID_PARAM;
 8000aac:	2301      	movs	r3, #1
 8000aae:	425b      	negs	r3, r3
 8000ab0:	e026      	b.n	8000b00 <LoRaWAN_Set_Battery+0x78>
    }
    char cmd[16];
    int len = snprintf(cmd, sizeof(cmd), "AT+BAT %u\r\n", (unsigned)batteryStatus);
 8000ab2:	1cfb      	adds	r3, r7, #3
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <LoRaWAN_Set_Battery+0x80>)
 8000ab8:	214c      	movs	r1, #76	@ 0x4c
 8000aba:	1878      	adds	r0, r7, r1
 8000abc:	2110      	movs	r1, #16
 8000abe:	f006 fccd 	bl	800745c <sniprintf>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (len < 0 || len >= (int)sizeof(cmd)) {
 8000ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	db02      	blt.n	8000ad2 <LoRaWAN_Set_Battery+0x4a>
 8000acc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ace:	2b0f      	cmp	r3, #15
 8000ad0:	dd02      	ble.n	8000ad8 <LoRaWAN_Set_Battery+0x50>
        return LORAWAN_ERROR_INVALID_PARAM;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	425b      	negs	r3, r3
 8000ad6:	e013      	b.n	8000b00 <LoRaWAN_Set_Battery+0x78>
    }
    char resp[64] = {0};
 8000ad8:	240c      	movs	r4, #12
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	0018      	movs	r0, r3
 8000ade:	2340      	movs	r3, #64	@ 0x40
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	f006 fd2a 	bl	800753c <memset>
    return send_data_and_get_response(
 8000ae8:	193a      	adds	r2, r7, r4
 8000aea:	234c      	movs	r3, #76	@ 0x4c
 8000aec:	18f9      	adds	r1, r7, r3
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <LoRaWAN_Set_Battery+0x84>)
 8000af2:	9301      	str	r3, [sp, #4]
 8000af4:	4b06      	ldr	r3, [pc, #24]	@ (8000b10 <LoRaWAN_Set_Battery+0x88>)
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	2340      	movs	r3, #64	@ 0x40
 8000afa:	f7ff fd99 	bl	8000630 <send_data_and_get_response>
 8000afe:	0003      	movs	r3, r0
        resp,
        sizeof(resp),
        5000,
        "OK"
    );
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	b019      	add	sp, #100	@ 0x64
 8000b06:	bd90      	pop	{r4, r7, pc}
 8000b08:	08007f88 	.word	0x08007f88
 8000b0c:	08007f34 	.word	0x08007f34
 8000b10:	00001388 	.word	0x00001388

08000b14 <LoRaWAN_UpdateBattery>:

LoRaWAN_Error_t LoRaWAN_UpdateBattery(ATC_HandleTypeDef *lora) {
 8000b14:	b5b0      	push	{r4, r5, r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
    uint32_t v_mV;
    uint8_t  pct;
    Battery_Status_t bst = GetBatteryLevel(&v_mV, &pct);
 8000b1c:	2516      	movs	r5, #22
 8000b1e:	197c      	adds	r4, r7, r5
 8000b20:	230f      	movs	r3, #15
 8000b22:	18fa      	adds	r2, r7, r3
 8000b24:	2310      	movs	r3, #16
 8000b26:	18fb      	adds	r3, r7, r3
 8000b28:	0011      	movs	r1, r2
 8000b2a:	0018      	movs	r0, r3
 8000b2c:	f000 f89c 	bl	8000c68 <GetBatteryLevel>
 8000b30:	0003      	movs	r3, r0
 8000b32:	7023      	strb	r3, [r4, #0]
    if (bst != BATTERY_OK) {
 8000b34:	197b      	adds	r3, r7, r5
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <LoRaWAN_UpdateBattery+0x30>
        return LORAWAN_ERROR_COMMUNICATION;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	425b      	negs	r3, r3
 8000b42:	e030      	b.n	8000ba6 <LoRaWAN_UpdateBattery+0x92>
    // map pct(0..100) → batteryStatus(1..254):
    //   0%   → 1
    //   100% → 254
    //   linearly in between
    uint8_t batteryStatus;
    if (pct == 0) {
 8000b44:	230f      	movs	r3, #15
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d104      	bne.n	8000b58 <LoRaWAN_UpdateBattery+0x44>
        batteryStatus = 1;
 8000b4e:	2317      	movs	r3, #23
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	e01d      	b.n	8000b94 <LoRaWAN_UpdateBattery+0x80>
    } else if (pct >= 100) {
 8000b58:	230f      	movs	r3, #15
 8000b5a:	18fb      	adds	r3, r7, r3
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b63      	cmp	r3, #99	@ 0x63
 8000b60:	d904      	bls.n	8000b6c <LoRaWAN_UpdateBattery+0x58>
        batteryStatus = 254;
 8000b62:	2317      	movs	r3, #23
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	22fe      	movs	r2, #254	@ 0xfe
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	e013      	b.n	8000b94 <LoRaWAN_UpdateBattery+0x80>
    } else {
        batteryStatus = (uint8_t)(((uint32_t)pct * 253U + 50U) / 100U + 1U);
 8000b6c:	230f      	movs	r3, #15
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	001a      	movs	r2, r3
 8000b74:	0013      	movs	r3, r2
 8000b76:	019b      	lsls	r3, r3, #6
 8000b78:	1a9b      	subs	r3, r3, r2
 8000b7a:	009b      	lsls	r3, r3, #2
 8000b7c:	189b      	adds	r3, r3, r2
 8000b7e:	3332      	adds	r3, #50	@ 0x32
 8000b80:	2164      	movs	r1, #100	@ 0x64
 8000b82:	0018      	movs	r0, r3
 8000b84:	f7ff fad2 	bl	800012c <__udivsi3>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	2317      	movs	r3, #23
 8000b8e:	18fb      	adds	r3, r7, r3
 8000b90:	3201      	adds	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
    }

    return LoRaWAN_Set_Battery(lora, batteryStatus);
 8000b94:	2317      	movs	r3, #23
 8000b96:	18fb      	adds	r3, r7, r3
 8000b98:	781a      	ldrb	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0011      	movs	r1, r2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff ff72 	bl	8000a88 <LoRaWAN_Set_Battery>
 8000ba4:	0003      	movs	r3, r0
}
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b006      	add	sp, #24
 8000bac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000bb0 <ReadBatteryVoltage>:
// Battery percentage curve (in mV)
#define V_MIN_MV 3000U    // 3.0 V → 0%
#define V_MAX_MV 4200U    // 4.2 V → 100%

int32_t ReadBatteryVoltage(void)
{
 8000bb0:	b5b0      	push	{r4, r5, r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;
    uint32_t raw;

    // 1) Enable the divider
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_SET);
 8000bb6:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <ReadBatteryVoltage+0xa8>)
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2101      	movs	r1, #1
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f003 f85a 	bl	8003c76 <HAL_GPIO_WritePin>

    // 2) Wait for it to settle
    HAL_Delay(VBAT_SETTLE_DELAY_MS);
 8000bc2:	200a      	movs	r0, #10
 8000bc4:	f001 ff56 	bl	8002a74 <HAL_Delay>

    // 3) Sample ADC
    status = HAL_ADC_Start(&hadc);
 8000bc8:	2517      	movs	r5, #23
 8000bca:	197c      	adds	r4, r7, r5
 8000bcc:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <ReadBatteryVoltage+0xac>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f002 f9be 	bl	8002f50 <HAL_ADC_Start>
 8000bd4:	0003      	movs	r3, r0
 8000bd6:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) goto fail;
 8000bd8:	197b      	adds	r3, r7, r5
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d12c      	bne.n	8000c3a <ReadBatteryVoltage+0x8a>
    status = HAL_ADC_PollForConversion(&hadc, 10);
 8000be0:	197c      	adds	r4, r7, r5
 8000be2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <ReadBatteryVoltage+0xac>)
 8000be4:	210a      	movs	r1, #10
 8000be6:	0018      	movs	r0, r3
 8000be8:	f002 fa46 	bl	8003078 <HAL_ADC_PollForConversion>
 8000bec:	0003      	movs	r3, r0
 8000bee:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) goto fail;
 8000bf0:	197b      	adds	r3, r7, r5
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d122      	bne.n	8000c3e <ReadBatteryVoltage+0x8e>
    raw = HAL_ADC_GetValue(&hadc);
 8000bf8:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <ReadBatteryVoltage+0xac>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f002 fad8 	bl	80031b0 <HAL_ADC_GetValue>
 8000c00:	0003      	movs	r3, r0
 8000c02:	613b      	str	r3, [r7, #16]
    HAL_ADC_Stop(&hadc);
 8000c04:	4b15      	ldr	r3, [pc, #84]	@ (8000c5c <ReadBatteryVoltage+0xac>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f002 f9f6 	bl	8002ff8 <HAL_ADC_Stop>

    // 4) Turn divider off
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_RESET);
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <ReadBatteryVoltage+0xa8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2101      	movs	r1, #1
 8000c12:	0018      	movs	r0, r3
 8000c14:	f003 f82f 	bl	8003c76 <HAL_GPIO_WritePin>

    // 5) Compute VBAT in mV:
    //    VBAT = (raw/ADC_MAX_COUNT) * ADC_REF_VOLTAGE_MV * (DIVIDER_RATIO_NUM/DIVIDER_RATIO_DEN)
    //    = (raw * ADC_REF_VOLTAGE_MV * DIVIDER_RATIO_NUM + denom/2) / denom  (rounded)
    const uint32_t denom = ADC_MAX_COUNT * DIVIDER_RATIO_DEN;
 8000c18:	4b11      	ldr	r3, [pc, #68]	@ (8000c60 <ReadBatteryVoltage+0xb0>)
 8000c1a:	60fb      	str	r3, [r7, #12]
    uint32_t numerator = raw * ADC_REF_VOLTAGE_MV * DIVIDER_RATIO_NUM + (denom/2U);
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	4a11      	ldr	r2, [pc, #68]	@ (8000c64 <ReadBatteryVoltage+0xb4>)
 8000c20:	435a      	muls	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	085b      	lsrs	r3, r3, #1
 8000c26:	18d3      	adds	r3, r2, r3
 8000c28:	60bb      	str	r3, [r7, #8]
    uint32_t vbat_mV = numerator / denom;
 8000c2a:	68f9      	ldr	r1, [r7, #12]
 8000c2c:	68b8      	ldr	r0, [r7, #8]
 8000c2e:	f7ff fa7d 	bl	800012c <__udivsi3>
 8000c32:	0003      	movs	r3, r0
 8000c34:	607b      	str	r3, [r7, #4]

    return (int32_t)vbat_mV;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	e00a      	b.n	8000c50 <ReadBatteryVoltage+0xa0>
    if (status != HAL_OK) goto fail;
 8000c3a:	46c0      	nop			@ (mov r8, r8)
 8000c3c:	e000      	b.n	8000c40 <ReadBatteryVoltage+0x90>
    if (status != HAL_OK) goto fail;
 8000c3e:	46c0      	nop			@ (mov r8, r8)

fail:
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_RESET);
 8000c40:	4b05      	ldr	r3, [pc, #20]	@ (8000c58 <ReadBatteryVoltage+0xa8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	2101      	movs	r1, #1
 8000c46:	0018      	movs	r0, r3
 8000c48:	f003 f815 	bl	8003c76 <HAL_GPIO_WritePin>
    return -1;  // ADC error indicator
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	425b      	negs	r3, r3
}
 8000c50:	0018      	movs	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	b006      	add	sp, #24
 8000c56:	bdb0      	pop	{r4, r5, r7, pc}
 8000c58:	50000400 	.word	0x50000400
 8000c5c:	20000078 	.word	0x20000078
 8000c60:	00000fff 	.word	0x00000fff
 8000c64:	000019c8 	.word	0x000019c8

08000c68 <GetBatteryLevel>:

Battery_Status_t GetBatteryLevel(uint32_t *out_v, uint8_t *out_pct)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
    if (out_v == NULL || out_pct == NULL) {
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d002      	beq.n	8000c7e <GetBatteryLevel+0x16>
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d102      	bne.n	8000c84 <GetBatteryLevel+0x1c>
        return BATTERY_ERROR;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	425b      	negs	r3, r3
 8000c82:	e049      	b.n	8000d18 <GetBatteryLevel+0xb0>
    }

    int32_t v_mV = ReadBatteryVoltage();
 8000c84:	f7ff ff94 	bl	8000bb0 <ReadBatteryVoltage>
 8000c88:	0003      	movs	r3, r0
 8000c8a:	617b      	str	r3, [r7, #20]
    if (v_mV < 0) {
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	da02      	bge.n	8000c98 <GetBatteryLevel+0x30>
        return BATTERY_ADC_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	425b      	negs	r3, r3
 8000c96:	e03f      	b.n	8000d18 <GetBatteryLevel+0xb0>
    }

    *out_v = (uint32_t)v_mV;
 8000c98:	697a      	ldr	r2, [r7, #20]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	601a      	str	r2, [r3, #0]
    ConsolePrintf("Input Voltage: %lu.%03lu V\r\n", (uint32_t)v_mV / 1000, (uint32_t)v_mV % 1000);
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	22fa      	movs	r2, #250	@ 0xfa
 8000ca2:	0091      	lsls	r1, r2, #2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff fa41 	bl	800012c <__udivsi3>
 8000caa:	0003      	movs	r3, r0
 8000cac:	001c      	movs	r4, r3
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	22fa      	movs	r2, #250	@ 0xfa
 8000cb2:	0091      	lsls	r1, r2, #2
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff fabf 	bl	8000238 <__aeabi_uidivmod>
 8000cba:	000b      	movs	r3, r1
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <GetBatteryLevel+0xb8>)
 8000cc0:	0021      	movs	r1, r4
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	f000 fb30 	bl	8001328 <ConsolePrintf>

    if ((uint32_t)v_mV <= V_MIN_MV) {
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	4a16      	ldr	r2, [pc, #88]	@ (8000d24 <GetBatteryLevel+0xbc>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d803      	bhi.n	8000cd8 <GetBatteryLevel+0x70>
        *out_pct = 0;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	e01e      	b.n	8000d16 <GetBatteryLevel+0xae>
    }
    else if ((uint32_t)v_mV >= V_MAX_MV) {
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	4a13      	ldr	r2, [pc, #76]	@ (8000d28 <GetBatteryLevel+0xc0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d903      	bls.n	8000ce8 <GetBatteryLevel+0x80>
        *out_pct = 100;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2264      	movs	r2, #100	@ 0x64
 8000ce4:	701a      	strb	r2, [r3, #0]
 8000ce6:	e016      	b.n	8000d16 <GetBatteryLevel+0xae>
    }
    else {
        uint32_t range = V_MAX_MV - V_MIN_MV;
 8000ce8:	2396      	movs	r3, #150	@ 0x96
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	613b      	str	r3, [r7, #16]
        // pct = ((v_mV - V_MIN_MV) / range) * 100
        // = ( (v_mV - V_MIN_MV)*100 + range/2 ) / range
        uint32_t numerator = (uint32_t)(v_mV - V_MIN_MV) * 100U + (range/2U);
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	2264      	movs	r2, #100	@ 0x64
 8000cf2:	435a      	muls	r2, r3
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	085b      	lsrs	r3, r3, #1
 8000cf8:	18d3      	adds	r3, r2, r3
 8000cfa:	4a0c      	ldr	r2, [pc, #48]	@ (8000d2c <GetBatteryLevel+0xc4>)
 8000cfc:	4694      	mov	ip, r2
 8000cfe:	4463      	add	r3, ip
 8000d00:	60fb      	str	r3, [r7, #12]
        uint32_t pct = numerator / range;
 8000d02:	6939      	ldr	r1, [r7, #16]
 8000d04:	68f8      	ldr	r0, [r7, #12]
 8000d06:	f7ff fa11 	bl	800012c <__udivsi3>
 8000d0a:	0003      	movs	r3, r0
 8000d0c:	60bb      	str	r3, [r7, #8]
        *out_pct = (uint8_t)pct;
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	701a      	strb	r2, [r3, #0]
    }

    return BATTERY_OK;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	0018      	movs	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	b007      	add	sp, #28
 8000d1e:	bd90      	pop	{r4, r7, pc}
 8000d20:	08007f94 	.word	0x08007f94
 8000d24:	00000bb8 	.word	0x00000bb8
 8000d28:	00001067 	.word	0x00001067
 8000d2c:	fffb6c20 	.word	0xfffb6c20

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b5b0      	push	{r4, r5, r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d36:	f001 fe2d 	bl	8002994 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(6000);
 8000d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8000e68 <main+0x138>)
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f001 fe99 	bl	8002a74 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d42:	f000 f8a1 	bl	8000e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d46:	f000 fa6b 	bl	8001220 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d4a:	f000 f997 	bl	800107c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d4e:	f000 fa07 	bl	8001160 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000d52:	f000 fa3b 	bl	80011cc <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8000d56:	f000 f9d1 	bl	80010fc <MX_LPUART1_UART_Init>
  MX_ADC_Init();
 8000d5a:	f000 f90d 	bl	8000f78 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  RTC_WakeUp_Init();
 8000d5e:	f001 fb43 	bl	80023e8 <RTC_WakeUp_Init>
  LoRaWAN_Join(&lora);
 8000d62:	4b42      	ldr	r3, [pc, #264]	@ (8000e6c <main+0x13c>)
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff fccb 	bl	8000700 <LoRaWAN_Join>
  LoRaWAN_UpdateBattery(&lora);
 8000d6a:	4b40      	ldr	r3, [pc, #256]	@ (8000e6c <main+0x13c>)
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff fed1 	bl	8000b14 <LoRaWAN_UpdateBattery>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  enter_sleep_mode();
 8000d72:	f001 fa5b 	bl	800222c <enter_sleep_mode>
	  LoRaWAN_Error_t isConnected = LoRaWAN_Join_Status(&lora);
 8000d76:	250f      	movs	r5, #15
 8000d78:	197c      	adds	r4, r7, r5
 8000d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e6c <main+0x13c>)
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff fdbb 	bl	80008f8 <LoRaWAN_Join_Status>
 8000d82:	0003      	movs	r3, r0
 8000d84:	7023      	strb	r3, [r4, #0]
	  if (isConnected == LORAWAN_ERROR_OK)
 8000d86:	197b      	adds	r3, r7, r5
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d15f      	bne.n	8000e50 <main+0x120>
	  {
	  	UPLINK_COUNT++;
 8000d90:	4b37      	ldr	r3, [pc, #220]	@ (8000e70 <main+0x140>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	5e9b      	ldrsh	r3, [r3, r2]
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	3301      	adds	r3, #1
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	4b34      	ldr	r3, [pc, #208]	@ (8000e70 <main+0x140>)
 8000da0:	801a      	strh	r2, [r3, #0]
	  	if (UPLINK_COUNT > 4464)
 8000da2:	4b33      	ldr	r3, [pc, #204]	@ (8000e70 <main+0x140>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	5e9b      	ldrsh	r3, [r3, r2]
 8000da8:	4a32      	ldr	r2, [pc, #200]	@ (8000e74 <main+0x144>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	dd06      	ble.n	8000dbc <main+0x8c>
	  	{
			UPLINK_COUNT = 0;
 8000dae:	4b30      	ldr	r3, [pc, #192]	@ (8000e70 <main+0x140>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	801a      	strh	r2, [r3, #0]
	    	LoRaWAN_UpdateBattery(&lora);
 8000db4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e6c <main+0x13c>)
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff feac 	bl	8000b14 <LoRaWAN_UpdateBattery>
		}
		I2C_Error_t i2c_result = sensor_init_and_read();
 8000dbc:	250e      	movs	r5, #14
 8000dbe:	197c      	adds	r4, r7, r5
 8000dc0:	f000 fdec 	bl	800199c <sensor_init_and_read>
 8000dc4:	0003      	movs	r3, r0
 8000dc6:	7023      	strb	r3, [r4, #0]
		uint8_t payload[3];
		if (i2c_result == I2C_ERROR_OK)
 8000dc8:	197b      	adds	r3, r7, r5
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d117      	bne.n	8000e02 <main+0xd2>
		{
			payload[0] = (uint8_t)(calculated_temp >> 8);
 8000dd2:	4b29      	ldr	r3, [pc, #164]	@ (8000e78 <main+0x148>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	0a1b      	lsrs	r3, r3, #8
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	2108      	movs	r1, #8
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	701a      	strb	r2, [r3, #0]
			payload[1] = (uint8_t)(calculated_temp & 0xFF);
 8000de2:	4b25      	ldr	r3, [pc, #148]	@ (8000e78 <main+0x148>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	705a      	strb	r2, [r3, #1]
			payload[2] = calculated_hum;
 8000dec:	4b23      	ldr	r3, [pc, #140]	@ (8000e7c <main+0x14c>)
 8000dee:	781a      	ldrb	r2, [r3, #0]
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	709a      	strb	r2, [r3, #2]
			LoRaWAN_SendHexOnPort(&lora, 1, payload, sizeof(payload));
 8000df4:	187a      	adds	r2, r7, r1
 8000df6:	481d      	ldr	r0, [pc, #116]	@ (8000e6c <main+0x13c>)
 8000df8:	2303      	movs	r3, #3
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	f7ff fe1a 	bl	8000a34 <LoRaWAN_SendHexOnPort>
 8000e00:	e02e      	b.n	8000e60 <main+0x130>
		}
		else if (i2c_result == I2C_ERROR_SENSORS_TOO_DIFFERENT)
 8000e02:	230e      	movs	r3, #14
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	b25b      	sxtb	r3, r3
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	d110      	bne.n	8000e30 <main+0x100>
		{
		  uint8_t payload[3];
		  payload[0] = (uint8_t)(temp_delta >> 8);
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <main+0x150>)
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	121b      	asrs	r3, r3, #8
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	701a      	strb	r2, [r3, #0]
		  payload[1] = (uint8_t)(temp_delta & 0xFF);
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <main+0x150>)
 8000e1c:	781a      	ldrb	r2, [r3, #0]
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	705a      	strb	r2, [r3, #1]
		  LoRaWAN_SendHexOnPort(&lora, 6, payload, sizeof(payload));
 8000e22:	1d3a      	adds	r2, r7, #4
 8000e24:	4811      	ldr	r0, [pc, #68]	@ (8000e6c <main+0x13c>)
 8000e26:	2303      	movs	r3, #3
 8000e28:	2106      	movs	r1, #6
 8000e2a:	f7ff fe03 	bl	8000a34 <LoRaWAN_SendHexOnPort>
 8000e2e:	e017      	b.n	8000e60 <main+0x130>
		}
		else
		{
			uint8_t payload[3];
			payload[0] = 255;
 8000e30:	003b      	movs	r3, r7
 8000e32:	22ff      	movs	r2, #255	@ 0xff
 8000e34:	701a      	strb	r2, [r3, #0]
			payload[1] = 255;
 8000e36:	003b      	movs	r3, r7
 8000e38:	22ff      	movs	r2, #255	@ 0xff
 8000e3a:	705a      	strb	r2, [r3, #1]
			payload[2] = 255;
 8000e3c:	003b      	movs	r3, r7
 8000e3e:	22ff      	movs	r2, #255	@ 0xff
 8000e40:	709a      	strb	r2, [r3, #2]
			LoRaWAN_SendHexOnPort(&lora, 6, payload, sizeof(payload));
 8000e42:	003a      	movs	r2, r7
 8000e44:	4809      	ldr	r0, [pc, #36]	@ (8000e6c <main+0x13c>)
 8000e46:	2303      	movs	r3, #3
 8000e48:	2106      	movs	r1, #6
 8000e4a:	f7ff fdf3 	bl	8000a34 <LoRaWAN_SendHexOnPort>
 8000e4e:	e007      	b.n	8000e60 <main+0x130>
		}
	}
	else
	{
		ConsolePrintf("I am not joined, trying to join again...\r\n");
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <main+0x154>)
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 fa68 	bl	8001328 <ConsolePrintf>
		LoRaWAN_Join(&lora);
 8000e58:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <main+0x13c>)
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff fc50 	bl	8000700 <LoRaWAN_Join>
	}
	
	// CRITICAL: Prepare for next sleep cycle after all operations complete
	prepare_for_next_sleep();
 8000e60:	f001 fd46 	bl	80028f0 <prepare_for_next_sleep>
  {
 8000e64:	e785      	b.n	8000d72 <main+0x42>
 8000e66:	46c0      	nop			@ (mov r8, r8)
 8000e68:	00001770 	.word	0x00001770
 8000e6c:	2000025c 	.word	0x2000025c
 8000e70:	20000260 	.word	0x20000260
 8000e74:	00001170 	.word	0x00001170
 8000e78:	20000272 	.word	0x20000272
 8000e7c:	20000274 	.word	0x20000274
 8000e80:	20000275 	.word	0x20000275
 8000e84:	08007fb4 	.word	0x08007fb4

08000e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b09f      	sub	sp, #124	@ 0x7c
 8000e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8e:	2440      	movs	r4, #64	@ 0x40
 8000e90:	193b      	adds	r3, r7, r4
 8000e92:	0018      	movs	r0, r3
 8000e94:	2338      	movs	r3, #56	@ 0x38
 8000e96:	001a      	movs	r2, r3
 8000e98:	2100      	movs	r1, #0
 8000e9a:	f006 fb4f 	bl	800753c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e9e:	232c      	movs	r3, #44	@ 0x2c
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	2314      	movs	r3, #20
 8000ea6:	001a      	movs	r2, r3
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	f006 fb47 	bl	800753c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	2328      	movs	r3, #40	@ 0x28
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	f006 fb40 	bl	800753c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ebc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f70 <SystemClock_Config+0xe8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8000f74 <SystemClock_Config+0xec>)
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f70 <SystemClock_Config+0xe8>)
 8000ec6:	2180      	movs	r1, #128	@ 0x80
 8000ec8:	0109      	lsls	r1, r1, #4
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000ece:	0021      	movs	r1, r4
 8000ed0:	187b      	adds	r3, r7, r1
 8000ed2:	2218      	movs	r2, #24
 8000ed4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	2201      	movs	r2, #1
 8000eda:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	2201      	movs	r2, #1
 8000ee0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000ee2:	187b      	adds	r3, r7, r1
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	22a0      	movs	r2, #160	@ 0xa0
 8000eec:	0212      	lsls	r2, r2, #8
 8000eee:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f003 ff31 	bl	8004d60 <HAL_RCC_OscConfig>
 8000efe:	1e03      	subs	r3, r0, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000f02:	f000 fa87 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f06:	212c      	movs	r1, #44	@ 0x2c
 8000f08:	187b      	adds	r3, r7, r1
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f20:	187b      	adds	r3, r7, r1
 8000f22:	2200      	movs	r2, #0
 8000f24:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2100      	movs	r1, #0
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f004 faec 	bl	8005508 <HAL_RCC_ClockConfig>
 8000f30:	1e03      	subs	r3, r0, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000f34:	f000 fa6e 	bl	8001414 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8000f38:	1d3b      	adds	r3, r7, #4
 8000f3a:	222d      	movs	r2, #45	@ 0x2d
 8000f3c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f3e:	1d3b      	adds	r3, r7, #4
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2280      	movs	r2, #128	@ 0x80
 8000f54:	0292      	lsls	r2, r2, #10
 8000f56:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	0018      	movs	r0, r3
 8000f5c:	f004 fcd8 	bl	8005910 <HAL_RCCEx_PeriphCLKConfig>
 8000f60:	1e03      	subs	r3, r0, #0
 8000f62:	d001      	beq.n	8000f68 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000f64:	f000 fa56 	bl	8001414 <Error_Handler>
  }
}
 8000f68:	46c0      	nop			@ (mov r8, r8)
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	b01f      	add	sp, #124	@ 0x7c
 8000f6e:	bd90      	pop	{r4, r7, pc}
 8000f70:	40007000 	.word	0x40007000
 8000f74:	ffffe7ff 	.word	0xffffe7ff

08000f78 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7e:	003b      	movs	r3, r7
 8000f80:	0018      	movs	r0, r3
 8000f82:	2308      	movs	r3, #8
 8000f84:	001a      	movs	r2, r3
 8000f86:	2100      	movs	r1, #0
 8000f88:	f006 fad8 	bl	800753c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000f8c:	4b37      	ldr	r3, [pc, #220]	@ (800106c <MX_ADC_Init+0xf4>)
 8000f8e:	4a38      	ldr	r2, [pc, #224]	@ (8001070 <MX_ADC_Init+0xf8>)
 8000f90:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000f92:	4b36      	ldr	r3, [pc, #216]	@ (800106c <MX_ADC_Init+0xf4>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000f98:	4b34      	ldr	r3, [pc, #208]	@ (800106c <MX_ADC_Init+0xf4>)
 8000f9a:	22c0      	movs	r2, #192	@ 0xc0
 8000f9c:	0612      	lsls	r2, r2, #24
 8000f9e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa0:	4b32      	ldr	r3, [pc, #200]	@ (800106c <MX_ADC_Init+0xf4>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000fa6:	4b31      	ldr	r3, [pc, #196]	@ (800106c <MX_ADC_Init+0xf4>)
 8000fa8:	2207      	movs	r2, #7
 8000faa:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000fac:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <MX_ADC_Init+0xf4>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	@ (800106c <MX_ADC_Init+0xf4>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000fb8:	4b2c      	ldr	r3, [pc, #176]	@ (800106c <MX_ADC_Init+0xf4>)
 8000fba:	2220      	movs	r2, #32
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800106c <MX_ADC_Init+0xf4>)
 8000fc2:	2221      	movs	r2, #33	@ 0x21
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fc8:	4b28      	ldr	r3, [pc, #160]	@ (800106c <MX_ADC_Init+0xf4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fce:	4b27      	ldr	r3, [pc, #156]	@ (800106c <MX_ADC_Init+0xf4>)
 8000fd0:	22c2      	movs	r2, #194	@ 0xc2
 8000fd2:	32ff      	adds	r2, #255	@ 0xff
 8000fd4:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000fd6:	4b25      	ldr	r3, [pc, #148]	@ (800106c <MX_ADC_Init+0xf4>)
 8000fd8:	222c      	movs	r2, #44	@ 0x2c
 8000fda:	2100      	movs	r1, #0
 8000fdc:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fde:	4b23      	ldr	r3, [pc, #140]	@ (800106c <MX_ADC_Init+0xf4>)
 8000fe0:	2204      	movs	r2, #4
 8000fe2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fe4:	4b21      	ldr	r3, [pc, #132]	@ (800106c <MX_ADC_Init+0xf4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000fea:	4b20      	ldr	r3, [pc, #128]	@ (800106c <MX_ADC_Init+0xf4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800106c <MX_ADC_Init+0xf4>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <MX_ADC_Init+0xf4>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800106c <MX_ADC_Init+0xf4>)
 8000ffe:	0018      	movs	r0, r3
 8001000:	f001 fd96 	bl	8002b30 <HAL_ADC_Init>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d001      	beq.n	800100c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001008:	f000 fa04 	bl	8001414 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800100c:	003b      	movs	r3, r7
 800100e:	2201      	movs	r2, #1
 8001010:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001012:	003b      	movs	r3, r7
 8001014:	2280      	movs	r2, #128	@ 0x80
 8001016:	0152      	lsls	r2, r2, #5
 8001018:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800101a:	003a      	movs	r2, r7
 800101c:	4b13      	ldr	r3, [pc, #76]	@ (800106c <MX_ADC_Init+0xf4>)
 800101e:	0011      	movs	r1, r2
 8001020:	0018      	movs	r0, r3
 8001022:	f002 f8d1 	bl	80031c8 <HAL_ADC_ConfigChannel>
 8001026:	1e03      	subs	r3, r0, #0
 8001028:	d001      	beq.n	800102e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800102a:	f000 f9f3 	bl	8001414 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800102e:	003b      	movs	r3, r7
 8001030:	4a10      	ldr	r2, [pc, #64]	@ (8001074 <MX_ADC_Init+0xfc>)
 8001032:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001034:	003a      	movs	r2, r7
 8001036:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <MX_ADC_Init+0xf4>)
 8001038:	0011      	movs	r1, r2
 800103a:	0018      	movs	r0, r3
 800103c:	f002 f8c4 	bl	80031c8 <HAL_ADC_ConfigChannel>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8001044:	f000 f9e6 	bl	8001414 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001048:	003b      	movs	r3, r7
 800104a:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <MX_ADC_Init+0x100>)
 800104c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800104e:	003a      	movs	r2, r7
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <MX_ADC_Init+0xf4>)
 8001052:	0011      	movs	r1, r2
 8001054:	0018      	movs	r0, r3
 8001056:	f002 f8b7 	bl	80031c8 <HAL_ADC_ConfigChannel>
 800105a:	1e03      	subs	r3, r0, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 800105e:	f000 f9d9 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b002      	add	sp, #8
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	20000078 	.word	0x20000078
 8001070:	40012400 	.word	0x40012400
 8001074:	48040000 	.word	0x48040000
 8001078:	44020000 	.word	0x44020000

0800107c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001080:	4b1c      	ldr	r3, [pc, #112]	@ (80010f4 <MX_I2C1_Init+0x78>)
 8001082:	4a1d      	ldr	r2, [pc, #116]	@ (80010f8 <MX_I2C1_Init+0x7c>)
 8001084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8001086:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <MX_I2C1_Init+0x78>)
 8001088:	22c1      	movs	r2, #193	@ 0xc1
 800108a:	00d2      	lsls	r2, r2, #3
 800108c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800108e:	4b19      	ldr	r3, [pc, #100]	@ (80010f4 <MX_I2C1_Init+0x78>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001094:	4b17      	ldr	r3, [pc, #92]	@ (80010f4 <MX_I2C1_Init+0x78>)
 8001096:	2201      	movs	r2, #1
 8001098:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800109a:	4b16      	ldr	r3, [pc, #88]	@ (80010f4 <MX_I2C1_Init+0x78>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010a0:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <MX_I2C1_Init+0x78>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a6:	4b13      	ldr	r3, [pc, #76]	@ (80010f4 <MX_I2C1_Init+0x78>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_I2C1_Init+0x78>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b2:	4b10      	ldr	r3, [pc, #64]	@ (80010f4 <MX_I2C1_Init+0x78>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010b8:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <MX_I2C1_Init+0x78>)
 80010ba:	0018      	movs	r0, r3
 80010bc:	f002 fdf8 	bl	8003cb0 <HAL_I2C_Init>
 80010c0:	1e03      	subs	r3, r0, #0
 80010c2:	d001      	beq.n	80010c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010c4:	f000 f9a6 	bl	8001414 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <MX_I2C1_Init+0x78>)
 80010ca:	2100      	movs	r1, #0
 80010cc:	0018      	movs	r0, r3
 80010ce:	f003 fcc7 	bl	8004a60 <HAL_I2CEx_ConfigAnalogFilter>
 80010d2:	1e03      	subs	r3, r0, #0
 80010d4:	d001      	beq.n	80010da <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80010d6:	f000 f99d 	bl	8001414 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_I2C1_Init+0x78>)
 80010dc:	2100      	movs	r1, #0
 80010de:	0018      	movs	r0, r3
 80010e0:	f003 fd0a 	bl	8004af8 <HAL_I2CEx_ConfigDigitalFilter>
 80010e4:	1e03      	subs	r3, r0, #0
 80010e6:	d001      	beq.n	80010ec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80010e8:	f000 f994 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010ec:	46c0      	nop			@ (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			@ (mov r8, r8)
 80010f4:	200000d4 	.word	0x200000d4
 80010f8:	40005400 	.word	0x40005400

080010fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <MX_LPUART1_UART_Init+0x58>)
 8001102:	4a15      	ldr	r2, [pc, #84]	@ (8001158 <MX_LPUART1_UART_Init+0x5c>)
 8001104:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001106:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <MX_LPUART1_UART_Init+0x58>)
 8001108:	22e1      	movs	r2, #225	@ 0xe1
 800110a:	0252      	lsls	r2, r2, #9
 800110c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800110e:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <MX_LPUART1_UART_Init+0x58>)
 8001110:	2200      	movs	r2, #0
 8001112:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <MX_LPUART1_UART_Init+0x58>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800111a:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <MX_LPUART1_UART_Init+0x58>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001120:	4b0c      	ldr	r3, [pc, #48]	@ (8001154 <MX_LPUART1_UART_Init+0x58>)
 8001122:	220c      	movs	r2, #12
 8001124:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <MX_LPUART1_UART_Init+0x58>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112c:	4b09      	ldr	r3, [pc, #36]	@ (8001154 <MX_LPUART1_UART_Init+0x58>)
 800112e:	2200      	movs	r2, #0
 8001130:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001132:	4b08      	ldr	r3, [pc, #32]	@ (8001154 <MX_LPUART1_UART_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001138:	4b06      	ldr	r3, [pc, #24]	@ (8001154 <MX_LPUART1_UART_Init+0x58>)
 800113a:	0018      	movs	r0, r3
 800113c:	f005 f8f2 	bl	8006324 <HAL_UART_Init>
 8001140:	1e03      	subs	r3, r0, #0
 8001142:	d001      	beq.n	8001148 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001144:	f000 f966 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  lora.huart = &hlpuart1;
 8001148:	4b04      	ldr	r3, [pc, #16]	@ (800115c <MX_LPUART1_UART_Init+0x60>)
 800114a:	4a02      	ldr	r2, [pc, #8]	@ (8001154 <MX_LPUART1_UART_Init+0x58>)
 800114c:	601a      	str	r2, [r3, #0]
  /* USER CODE END LPUART1_Init 2 */

}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000128 	.word	0x20000128
 8001158:	40004800 	.word	0x40004800
 800115c:	2000025c 	.word	0x2000025c

08001160 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001164:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <MX_USART1_UART_Init+0x60>)
 8001166:	4a17      	ldr	r2, [pc, #92]	@ (80011c4 <MX_USART1_UART_Init+0x64>)
 8001168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800116a:	4b15      	ldr	r3, [pc, #84]	@ (80011c0 <MX_USART1_UART_Init+0x60>)
 800116c:	22e1      	movs	r2, #225	@ 0xe1
 800116e:	0252      	lsls	r2, r2, #9
 8001170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <MX_USART1_UART_Init+0x60>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <MX_USART1_UART_Init+0x60>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117e:	4b10      	ldr	r3, [pc, #64]	@ (80011c0 <MX_USART1_UART_Init+0x60>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <MX_USART1_UART_Init+0x60>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b0d      	ldr	r3, [pc, #52]	@ (80011c0 <MX_USART1_UART_Init+0x60>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <MX_USART1_UART_Init+0x60>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001196:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <MX_USART1_UART_Init+0x60>)
 8001198:	2200      	movs	r2, #0
 800119a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <MX_USART1_UART_Init+0x60>)
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011a2:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <MX_USART1_UART_Init+0x60>)
 80011a4:	0018      	movs	r0, r3
 80011a6:	f005 f8bd 	bl	8006324 <HAL_UART_Init>
 80011aa:	1e03      	subs	r3, r0, #0
 80011ac:	d001      	beq.n	80011b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80011ae:	f000 f931 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  ConsolePrintf("USART1 (DBG) Cnfigured\r\n");
 80011b2:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <MX_USART1_UART_Init+0x68>)
 80011b4:	0018      	movs	r0, r3
 80011b6:	f000 f8b7 	bl	8001328 <ConsolePrintf>
  /* USER CODE END USART1_Init 2 */

}
 80011ba:	46c0      	nop			@ (mov r8, r8)
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	200001b0 	.word	0x200001b0
 80011c4:	40013800 	.word	0x40013800
 80011c8:	08007fe0 	.word	0x08007fe0

080011cc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011d0:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_RTC_Init+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	@ (800121c <MX_RTC_Init+0x50>)
 80011d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011d6:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <MX_RTC_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_RTC_Init+0x4c>)
 80011de:	227f      	movs	r2, #127	@ 0x7f
 80011e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <MX_RTC_Init+0x4c>)
 80011e4:	22ff      	movs	r2, #255	@ 0xff
 80011e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <MX_RTC_Init+0x4c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <MX_RTC_Init+0x4c>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011f4:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <MX_RTC_Init+0x4c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011fa:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <MX_RTC_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <MX_RTC_Init+0x4c>)
 8001202:	0018      	movs	r0, r3
 8001204:	f004 fd22 	bl	8005c4c <HAL_RTC_Init>
 8001208:	1e03      	subs	r3, r0, #0
 800120a:	d001      	beq.n	8001210 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800120c:	f000 f902 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001210:	46c0      	nop			@ (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	20000238 	.word	0x20000238
 800121c:	40002800 	.word	0x40002800

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b089      	sub	sp, #36	@ 0x24
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	240c      	movs	r4, #12
 8001228:	193b      	adds	r3, r7, r4
 800122a:	0018      	movs	r0, r3
 800122c:	2314      	movs	r3, #20
 800122e:	001a      	movs	r2, r3
 8001230:	2100      	movs	r1, #0
 8001232:	f006 f983 	bl	800753c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b25      	ldr	r3, [pc, #148]	@ (80012cc <MX_GPIO_Init+0xac>)
 8001238:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800123a:	4b24      	ldr	r3, [pc, #144]	@ (80012cc <MX_GPIO_Init+0xac>)
 800123c:	2101      	movs	r1, #1
 800123e:	430a      	orrs	r2, r1
 8001240:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001242:	4b22      	ldr	r3, [pc, #136]	@ (80012cc <MX_GPIO_Init+0xac>)
 8001244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001246:	2201      	movs	r2, #1
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124e:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <MX_GPIO_Init+0xac>)
 8001250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001252:	4b1e      	ldr	r3, [pc, #120]	@ (80012cc <MX_GPIO_Init+0xac>)
 8001254:	2102      	movs	r1, #2
 8001256:	430a      	orrs	r2, r1
 8001258:	62da      	str	r2, [r3, #44]	@ 0x2c
 800125a:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <MX_GPIO_Init+0xac>)
 800125c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800125e:	2202      	movs	r2, #2
 8001260:	4013      	ands	r3, r2
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_SET);
 8001266:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <MX_GPIO_Init+0xb0>)
 8001268:	2201      	movs	r2, #1
 800126a:	2101      	movs	r1, #1
 800126c:	0018      	movs	r0, r3
 800126e:	f002 fd02 	bl	8003c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8001272:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <MX_GPIO_Init+0xb0>)
 8001274:	2200      	movs	r2, #0
 8001276:	2120      	movs	r1, #32
 8001278:	0018      	movs	r0, r3
 800127a:	f002 fcfc 	bl	8003c76 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VBAT_MEAS_EN_Pin I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin;
 800127e:	193b      	adds	r3, r7, r4
 8001280:	2221      	movs	r2, #33	@ 0x21
 8001282:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	193b      	adds	r3, r7, r4
 8001286:	2201      	movs	r2, #1
 8001288:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	193b      	adds	r3, r7, r4
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001296:	193b      	adds	r3, r7, r4
 8001298:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <MX_GPIO_Init+0xb0>)
 800129a:	0019      	movs	r1, r3
 800129c:	0010      	movs	r0, r2
 800129e:	f002 fa6d 	bl	800377c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80012a2:	0021      	movs	r1, r4
 80012a4:	187b      	adds	r3, r7, r1
 80012a6:	2202      	movs	r2, #2
 80012a8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012aa:	187b      	adds	r3, r7, r1
 80012ac:	2203      	movs	r2, #3
 80012ae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	187b      	adds	r3, r7, r1
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b6:	187b      	adds	r3, r7, r1
 80012b8:	4a05      	ldr	r2, [pc, #20]	@ (80012d0 <MX_GPIO_Init+0xb0>)
 80012ba:	0019      	movs	r1, r3
 80012bc:	0010      	movs	r0, r2
 80012be:	f002 fa5d 	bl	800377c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012c2:	46c0      	nop			@ (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b009      	add	sp, #36	@ 0x24
 80012c8:	bd90      	pop	{r4, r7, pc}
 80012ca:	46c0      	nop			@ (mov r8, r8)
 80012cc:	40021000 	.word	0x40021000
 80012d0:	50000400 	.word	0x50000400

080012d4 <SystemClock_Config_Wrapper>:

/* USER CODE BEGIN 4 */
// Wrapper functions for sleep module to access static initialization functions
void SystemClock_Config_Wrapper(void) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
    SystemClock_Config();
 80012d8:	f7ff fdd6 	bl	8000e88 <SystemClock_Config>
}
 80012dc:	46c0      	nop			@ (mov r8, r8)
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <MX_GPIO_Init_Wrapper>:

void MX_GPIO_Init_Wrapper(void) {
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
    MX_GPIO_Init();
 80012e6:	f7ff ff9b 	bl	8001220 <MX_GPIO_Init>
}
 80012ea:	46c0      	nop			@ (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <MX_I2C1_Init_Wrapper>:

void MX_I2C1_Init_Wrapper(void) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
    MX_I2C1_Init();
 80012f4:	f7ff fec2 	bl	800107c <MX_I2C1_Init>
}
 80012f8:	46c0      	nop			@ (mov r8, r8)
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <MX_USART1_UART_Init_Wrapper>:

void MX_USART1_UART_Init_Wrapper(void) {
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
    MX_USART1_UART_Init();
 8001302:	f7ff ff2d 	bl	8001160 <MX_USART1_UART_Init>
}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <MX_LPUART1_UART_Init_Wrapper>:

void MX_LPUART1_UART_Init_Wrapper(void) {
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
    MX_LPUART1_UART_Init();
 8001310:	f7ff fef4 	bl	80010fc <MX_LPUART1_UART_Init>
}
 8001314:	46c0      	nop			@ (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <MX_ADC_Init_Wrapper>:

void MX_ADC_Init_Wrapper(void) {
 800131a:	b580      	push	{r7, lr}
 800131c:	af00      	add	r7, sp, #0
    MX_ADC_Init();
 800131e:	f7ff fe2b 	bl	8000f78 <MX_ADC_Init>
}
 8001322:	46c0      	nop			@ (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <ConsolePrintf>:

void ConsolePrintf(const char *format, ...)
{
 8001328:	b40f      	push	{r0, r1, r2, r3}
 800132a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132c:	b0df      	sub	sp, #380	@ 0x17c
 800132e:	af06      	add	r7, sp, #24
  char final_buffer[160];    // Combined buffer (timestamp + message)

  // Get time and date from RTC
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001330:	2308      	movs	r3, #8
 8001332:	18f9      	adds	r1, r7, r3
 8001334:	4b31      	ldr	r3, [pc, #196]	@ (80013fc <ConsolePrintf+0xd4>)
 8001336:	2200      	movs	r2, #0
 8001338:	0018      	movs	r0, r3
 800133a:	f004 fd23 	bl	8005d84 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 800133e:	231c      	movs	r3, #28
 8001340:	18f9      	adds	r1, r7, r3
 8001342:	4b2e      	ldr	r3, [pc, #184]	@ (80013fc <ConsolePrintf+0xd4>)
 8001344:	2200      	movs	r2, #0
 8001346:	0018      	movs	r0, r3
 8001348:	f004 fd7a 	bl	8005e40 <HAL_RTC_GetDate>

  // Format timestamp as [YYYY-MM-DD HH:MM:SS]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
           date.Year, date.Month, date.Date,
 800134c:	4b2c      	ldr	r3, [pc, #176]	@ (8001400 <ConsolePrintf+0xd8>)
 800134e:	22b0      	movs	r2, #176	@ 0xb0
 8001350:	0052      	lsls	r2, r2, #1
 8001352:	189b      	adds	r3, r3, r2
 8001354:	19db      	adds	r3, r3, r7
 8001356:	78db      	ldrb	r3, [r3, #3]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001358:	469c      	mov	ip, r3
           date.Year, date.Month, date.Date,
 800135a:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <ConsolePrintf+0xd8>)
 800135c:	189b      	adds	r3, r3, r2
 800135e:	19db      	adds	r3, r3, r7
 8001360:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001362:	0019      	movs	r1, r3
           date.Year, date.Month, date.Date,
 8001364:	4b26      	ldr	r3, [pc, #152]	@ (8001400 <ConsolePrintf+0xd8>)
 8001366:	189b      	adds	r3, r3, r2
 8001368:	19db      	adds	r3, r3, r7
 800136a:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 800136c:	001c      	movs	r4, r3
           time.Hours, time.Minutes, time.Seconds);
 800136e:	4b25      	ldr	r3, [pc, #148]	@ (8001404 <ConsolePrintf+0xdc>)
 8001370:	189b      	adds	r3, r3, r2
 8001372:	19db      	adds	r3, r3, r7
 8001374:	781b      	ldrb	r3, [r3, #0]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001376:	001d      	movs	r5, r3
           time.Hours, time.Minutes, time.Seconds);
 8001378:	4b22      	ldr	r3, [pc, #136]	@ (8001404 <ConsolePrintf+0xdc>)
 800137a:	189b      	adds	r3, r3, r2
 800137c:	19db      	adds	r3, r3, r7
 800137e:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001380:	001e      	movs	r6, r3
           time.Hours, time.Minutes, time.Seconds);
 8001382:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <ConsolePrintf+0xdc>)
 8001384:	189b      	adds	r3, r3, r2
 8001386:	19db      	adds	r3, r3, r7
 8001388:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 800138a:	4a1f      	ldr	r2, [pc, #124]	@ (8001408 <ConsolePrintf+0xe0>)
 800138c:	20c0      	movs	r0, #192	@ 0xc0
 800138e:	1838      	adds	r0, r7, r0
 8001390:	9304      	str	r3, [sp, #16]
 8001392:	9603      	str	r6, [sp, #12]
 8001394:	9502      	str	r5, [sp, #8]
 8001396:	9401      	str	r4, [sp, #4]
 8001398:	9100      	str	r1, [sp, #0]
 800139a:	4663      	mov	r3, ip
 800139c:	2120      	movs	r1, #32
 800139e:	f006 f85d 	bl	800745c <sniprintf>

  // Format the original message
  va_list args;
  va_start(args, format);
 80013a2:	23be      	movs	r3, #190	@ 0xbe
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), format, args);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	22bc      	movs	r2, #188	@ 0xbc
 80013ae:	0052      	lsls	r2, r2, #1
 80013b0:	18ba      	adds	r2, r7, r2
 80013b2:	6812      	ldr	r2, [r2, #0]
 80013b4:	25e0      	movs	r5, #224	@ 0xe0
 80013b6:	1978      	adds	r0, r7, r5
 80013b8:	2180      	movs	r1, #128	@ 0x80
 80013ba:	f006 f8b3 	bl	8007524 <vsniprintf>
  va_end(args);

  // Combine timestamp and message
  snprintf(final_buffer, sizeof(final_buffer), "%s%s", timestamp_buffer, buffer);
 80013be:	20c0      	movs	r0, #192	@ 0xc0
 80013c0:	1839      	adds	r1, r7, r0
 80013c2:	4a12      	ldr	r2, [pc, #72]	@ (800140c <ConsolePrintf+0xe4>)
 80013c4:	2420      	movs	r4, #32
 80013c6:	1938      	adds	r0, r7, r4
 80013c8:	197b      	adds	r3, r7, r5
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	000b      	movs	r3, r1
 80013ce:	21a0      	movs	r1, #160	@ 0xa0
 80013d0:	f006 f844 	bl	800745c <sniprintf>

  // Transmit the combined message
  HAL_UART_Transmit(&huart1, (uint8_t *)final_buffer, strlen(final_buffer), HAL_MAX_DELAY);
 80013d4:	193b      	adds	r3, r7, r4
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7fe fe96 	bl	8000108 <strlen>
 80013dc:	0003      	movs	r3, r0
 80013de:	b29a      	uxth	r2, r3
 80013e0:	2301      	movs	r3, #1
 80013e2:	425b      	negs	r3, r3
 80013e4:	1939      	adds	r1, r7, r4
 80013e6:	480a      	ldr	r0, [pc, #40]	@ (8001410 <ConsolePrintf+0xe8>)
 80013e8:	f005 f82e 	bl	8006448 <HAL_UART_Transmit>
}
 80013ec:	46c0      	nop			@ (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b059      	add	sp, #356	@ 0x164
 80013f2:	bcf0      	pop	{r4, r5, r6, r7}
 80013f4:	bc08      	pop	{r3}
 80013f6:	b004      	add	sp, #16
 80013f8:	4718      	bx	r3
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	20000238 	.word	0x20000238
 8001400:	fffffebc 	.word	0xfffffebc
 8001404:	fffffea8 	.word	0xfffffea8
 8001408:	08007ffc 	.word	0x08007ffc
 800140c:	08008020 	.word	0x08008020
 8001410:	200001b0 	.word	0x200001b0

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	46c0      	nop			@ (mov r8, r8)
 800141e:	e7fd      	b.n	800141c <Error_Handler+0x8>

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8001426:	003b      	movs	r3, r7
 8001428:	0018      	movs	r0, r3
 800142a:	2308      	movs	r3, #8
 800142c:	001a      	movs	r2, r3
 800142e:	2100      	movs	r1, #0
 8001430:	f006 f884 	bl	800753c <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001434:	4b0f      	ldr	r3, [pc, #60]	@ (8001474 <HAL_MspInit+0x54>)
 8001436:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001438:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <HAL_MspInit+0x54>)
 800143a:	2101      	movs	r1, #1
 800143c:	430a      	orrs	r2, r1
 800143e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	4b0c      	ldr	r3, [pc, #48]	@ (8001474 <HAL_MspInit+0x54>)
 8001442:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001444:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <HAL_MspInit+0x54>)
 8001446:	2180      	movs	r1, #128	@ 0x80
 8001448:	0549      	lsls	r1, r1, #21
 800144a:	430a      	orrs	r2, r1
 800144c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/

  /** Select which pad is connected to VREFINT_ADC
  */
  HAL_SYSCFG_VREFINT_OutputSelect(SYSCFG_VREFINT_OUT_PB1);
 800144e:	2020      	movs	r0, #32
 8001450:	f001 fb58 	bl	8002b04 <HAL_SYSCFG_VREFINT_OutputSelect>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8001454:	003b      	movs	r3, r7
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 800145a:	003b      	movs	r3, r7
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001460:	003b      	movs	r3, r7
 8001462:	0018      	movs	r0, r3
 8001464:	f003 fb94 	bl	8004b90 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8001468:	f003 fbf4 	bl	8004c54 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146c:	46c0      	nop			@ (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b002      	add	sp, #8
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b089      	sub	sp, #36	@ 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	240c      	movs	r4, #12
 8001482:	193b      	adds	r3, r7, r4
 8001484:	0018      	movs	r0, r3
 8001486:	2314      	movs	r3, #20
 8001488:	001a      	movs	r2, r3
 800148a:	2100      	movs	r1, #0
 800148c:	f006 f856 	bl	800753c <memset>
  if(hadc->Instance==ADC1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a14      	ldr	r2, [pc, #80]	@ (80014e8 <HAL_ADC_MspInit+0x70>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d122      	bne.n	80014e0 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800149a:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <HAL_ADC_MspInit+0x74>)
 800149c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800149e:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <HAL_ADC_MspInit+0x74>)
 80014a0:	2180      	movs	r1, #128	@ 0x80
 80014a2:	0089      	lsls	r1, r1, #2
 80014a4:	430a      	orrs	r2, r1
 80014a6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <HAL_ADC_MspInit+0x74>)
 80014aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014ac:	4b0f      	ldr	r3, [pc, #60]	@ (80014ec <HAL_ADC_MspInit+0x74>)
 80014ae:	2101      	movs	r1, #1
 80014b0:	430a      	orrs	r2, r1
 80014b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014b4:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <HAL_ADC_MspInit+0x74>)
 80014b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b8:	2201      	movs	r2, #1
 80014ba:	4013      	ands	r3, r2
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = VBAT_MEAS_Pin;
 80014c0:	193b      	adds	r3, r7, r4
 80014c2:	2201      	movs	r2, #1
 80014c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c6:	193b      	adds	r3, r7, r4
 80014c8:	2203      	movs	r2, #3
 80014ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	193b      	adds	r3, r7, r4
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBAT_MEAS_GPIO_Port, &GPIO_InitStruct);
 80014d2:	193a      	adds	r2, r7, r4
 80014d4:	23a0      	movs	r3, #160	@ 0xa0
 80014d6:	05db      	lsls	r3, r3, #23
 80014d8:	0011      	movs	r1, r2
 80014da:	0018      	movs	r0, r3
 80014dc:	f002 f94e 	bl	800377c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80014e0:	46c0      	nop			@ (mov r8, r8)
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b009      	add	sp, #36	@ 0x24
 80014e6:	bd90      	pop	{r4, r7, pc}
 80014e8:	40012400 	.word	0x40012400
 80014ec:	40021000 	.word	0x40021000

080014f0 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a09      	ldr	r2, [pc, #36]	@ (8001524 <HAL_ADC_MspDeInit+0x34>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d10b      	bne.n	800151a <HAL_ADC_MspDeInit+0x2a>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_ADC_MspDeInit+0x38>)
 8001504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001506:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <HAL_ADC_MspDeInit+0x38>)
 8001508:	4908      	ldr	r1, [pc, #32]	@ (800152c <HAL_ADC_MspDeInit+0x3c>)
 800150a:	400a      	ands	r2, r1
 800150c:	635a      	str	r2, [r3, #52]	@ 0x34

    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(VBAT_MEAS_GPIO_Port, VBAT_MEAS_Pin);
 800150e:	23a0      	movs	r3, #160	@ 0xa0
 8001510:	05db      	lsls	r3, r3, #23
 8001512:	2101      	movs	r1, #1
 8001514:	0018      	movs	r0, r3
 8001516:	f002 faaf 	bl	8003a78 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 800151a:	46c0      	nop			@ (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			@ (mov r8, r8)
 8001524:	40012400 	.word	0x40012400
 8001528:	40021000 	.word	0x40021000
 800152c:	fffffdff 	.word	0xfffffdff

08001530 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b089      	sub	sp, #36	@ 0x24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	240c      	movs	r4, #12
 800153a:	193b      	adds	r3, r7, r4
 800153c:	0018      	movs	r0, r3
 800153e:	2314      	movs	r3, #20
 8001540:	001a      	movs	r2, r3
 8001542:	2100      	movs	r1, #0
 8001544:	f005 fffa 	bl	800753c <memset>
  if(hi2c->Instance==I2C1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a17      	ldr	r2, [pc, #92]	@ (80015ac <HAL_I2C_MspInit+0x7c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d128      	bne.n	80015a4 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001552:	4b17      	ldr	r3, [pc, #92]	@ (80015b0 <HAL_I2C_MspInit+0x80>)
 8001554:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <HAL_I2C_MspInit+0x80>)
 8001558:	2102      	movs	r1, #2
 800155a:	430a      	orrs	r2, r1
 800155c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800155e:	4b14      	ldr	r3, [pc, #80]	@ (80015b0 <HAL_I2C_MspInit+0x80>)
 8001560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001562:	2202      	movs	r2, #2
 8001564:	4013      	ands	r3, r2
 8001566:	60bb      	str	r3, [r7, #8]
 8001568:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800156a:	0021      	movs	r1, r4
 800156c:	187b      	adds	r3, r7, r1
 800156e:	22c0      	movs	r2, #192	@ 0xc0
 8001570:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2212      	movs	r2, #18
 8001576:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	187b      	adds	r3, r7, r1
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157e:	187b      	adds	r3, r7, r1
 8001580:	2203      	movs	r2, #3
 8001582:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001584:	187b      	adds	r3, r7, r1
 8001586:	2201      	movs	r2, #1
 8001588:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	187b      	adds	r3, r7, r1
 800158c:	4a09      	ldr	r2, [pc, #36]	@ (80015b4 <HAL_I2C_MspInit+0x84>)
 800158e:	0019      	movs	r1, r3
 8001590:	0010      	movs	r0, r2
 8001592:	f002 f8f3 	bl	800377c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_I2C_MspInit+0x80>)
 8001598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800159a:	4b05      	ldr	r3, [pc, #20]	@ (80015b0 <HAL_I2C_MspInit+0x80>)
 800159c:	2180      	movs	r1, #128	@ 0x80
 800159e:	0389      	lsls	r1, r1, #14
 80015a0:	430a      	orrs	r2, r1
 80015a2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015a4:	46c0      	nop			@ (mov r8, r8)
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b009      	add	sp, #36	@ 0x24
 80015aa:	bd90      	pop	{r4, r7, pc}
 80015ac:	40005400 	.word	0x40005400
 80015b0:	40021000 	.word	0x40021000
 80015b4:	50000400 	.word	0x50000400

080015b8 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <HAL_I2C_MspDeInit+0x3c>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10f      	bne.n	80015ea <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80015ca:	4b0b      	ldr	r3, [pc, #44]	@ (80015f8 <HAL_I2C_MspDeInit+0x40>)
 80015cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_I2C_MspDeInit+0x40>)
 80015d0:	490a      	ldr	r1, [pc, #40]	@ (80015fc <HAL_I2C_MspDeInit+0x44>)
 80015d2:	400a      	ands	r2, r1
 80015d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80015d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <HAL_I2C_MspDeInit+0x48>)
 80015d8:	2140      	movs	r1, #64	@ 0x40
 80015da:	0018      	movs	r0, r3
 80015dc:	f002 fa4c 	bl	8003a78 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80015e0:	4b07      	ldr	r3, [pc, #28]	@ (8001600 <HAL_I2C_MspDeInit+0x48>)
 80015e2:	2180      	movs	r1, #128	@ 0x80
 80015e4:	0018      	movs	r0, r3
 80015e6:	f002 fa47 	bl	8003a78 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80015ea:	46c0      	nop			@ (mov r8, r8)
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b002      	add	sp, #8
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	40005400 	.word	0x40005400
 80015f8:	40021000 	.word	0x40021000
 80015fc:	ffdfffff 	.word	0xffdfffff
 8001600:	50000400 	.word	0x50000400

08001604 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b08b      	sub	sp, #44	@ 0x2c
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	2414      	movs	r4, #20
 800160e:	193b      	adds	r3, r7, r4
 8001610:	0018      	movs	r0, r3
 8001612:	2314      	movs	r3, #20
 8001614:	001a      	movs	r2, r3
 8001616:	2100      	movs	r1, #0
 8001618:	f005 ff90 	bl	800753c <memset>
  if(huart->Instance==LPUART1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a30      	ldr	r2, [pc, #192]	@ (80016e4 <HAL_UART_MspInit+0xe0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d12a      	bne.n	800167c <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001626:	4b30      	ldr	r3, [pc, #192]	@ (80016e8 <HAL_UART_MspInit+0xe4>)
 8001628:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800162a:	4b2f      	ldr	r3, [pc, #188]	@ (80016e8 <HAL_UART_MspInit+0xe4>)
 800162c:	2180      	movs	r1, #128	@ 0x80
 800162e:	02c9      	lsls	r1, r1, #11
 8001630:	430a      	orrs	r2, r1
 8001632:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	4b2c      	ldr	r3, [pc, #176]	@ (80016e8 <HAL_UART_MspInit+0xe4>)
 8001636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001638:	4b2b      	ldr	r3, [pc, #172]	@ (80016e8 <HAL_UART_MspInit+0xe4>)
 800163a:	2101      	movs	r1, #1
 800163c:	430a      	orrs	r2, r1
 800163e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001640:	4b29      	ldr	r3, [pc, #164]	@ (80016e8 <HAL_UART_MspInit+0xe4>)
 8001642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001644:	2201      	movs	r2, #1
 8001646:	4013      	ands	r3, r2
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800164c:	0021      	movs	r1, r4
 800164e:	187b      	adds	r3, r7, r1
 8001650:	220c      	movs	r2, #12
 8001652:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	187b      	adds	r3, r7, r1
 8001656:	2202      	movs	r2, #2
 8001658:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	187b      	adds	r3, r7, r1
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	187b      	adds	r3, r7, r1
 8001662:	2203      	movs	r2, #3
 8001664:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001666:	187b      	adds	r3, r7, r1
 8001668:	2206      	movs	r2, #6
 800166a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166c:	187a      	adds	r2, r7, r1
 800166e:	23a0      	movs	r3, #160	@ 0xa0
 8001670:	05db      	lsls	r3, r3, #23
 8001672:	0011      	movs	r1, r2
 8001674:	0018      	movs	r0, r3
 8001676:	f002 f881 	bl	800377c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 800167a:	e02f      	b.n	80016dc <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a1a      	ldr	r2, [pc, #104]	@ (80016ec <HAL_UART_MspInit+0xe8>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d12a      	bne.n	80016dc <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001686:	4b18      	ldr	r3, [pc, #96]	@ (80016e8 <HAL_UART_MspInit+0xe4>)
 8001688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <HAL_UART_MspInit+0xe4>)
 800168c:	2180      	movs	r1, #128	@ 0x80
 800168e:	01c9      	lsls	r1, r1, #7
 8001690:	430a      	orrs	r2, r1
 8001692:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <HAL_UART_MspInit+0xe4>)
 8001696:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001698:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <HAL_UART_MspInit+0xe4>)
 800169a:	2101      	movs	r1, #1
 800169c:	430a      	orrs	r2, r1
 800169e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <HAL_UART_MspInit+0xe4>)
 80016a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a4:	2201      	movs	r2, #1
 80016a6:	4013      	ands	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016ac:	2114      	movs	r1, #20
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	22c0      	movs	r2, #192	@ 0xc0
 80016b2:	00d2      	lsls	r2, r2, #3
 80016b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	187b      	adds	r3, r7, r1
 80016b8:	2202      	movs	r2, #2
 80016ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	187b      	adds	r3, r7, r1
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	187b      	adds	r3, r7, r1
 80016c4:	2203      	movs	r2, #3
 80016c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	2204      	movs	r2, #4
 80016cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ce:	187a      	adds	r2, r7, r1
 80016d0:	23a0      	movs	r3, #160	@ 0xa0
 80016d2:	05db      	lsls	r3, r3, #23
 80016d4:	0011      	movs	r1, r2
 80016d6:	0018      	movs	r0, r3
 80016d8:	f002 f850 	bl	800377c <HAL_GPIO_Init>
}
 80016dc:	46c0      	nop			@ (mov r8, r8)
 80016de:	46bd      	mov	sp, r7
 80016e0:	b00b      	add	sp, #44	@ 0x2c
 80016e2:	bd90      	pop	{r4, r7, pc}
 80016e4:	40004800 	.word	0x40004800
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40013800 	.word	0x40013800

080016f0 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a13      	ldr	r2, [pc, #76]	@ (800174c <HAL_UART_MspDeInit+0x5c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d10c      	bne.n	800171c <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN LPUART1_MspDeInit 0 */

    /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8001702:	4b13      	ldr	r3, [pc, #76]	@ (8001750 <HAL_UART_MspDeInit+0x60>)
 8001704:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001706:	4b12      	ldr	r3, [pc, #72]	@ (8001750 <HAL_UART_MspDeInit+0x60>)
 8001708:	4912      	ldr	r1, [pc, #72]	@ (8001754 <HAL_UART_MspDeInit+0x64>)
 800170a:	400a      	ands	r2, r1
 800170c:	639a      	str	r2, [r3, #56]	@ 0x38

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800170e:	23a0      	movs	r3, #160	@ 0xa0
 8001710:	05db      	lsls	r3, r3, #23
 8001712:	210c      	movs	r1, #12
 8001714:	0018      	movs	r0, r3
 8001716:	f002 f9af 	bl	8003a78 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800171a:	e012      	b.n	8001742 <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <HAL_UART_MspDeInit+0x68>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d10d      	bne.n	8001742 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART1_CLK_DISABLE();
 8001726:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <HAL_UART_MspDeInit+0x60>)
 8001728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800172a:	4b09      	ldr	r3, [pc, #36]	@ (8001750 <HAL_UART_MspDeInit+0x60>)
 800172c:	490b      	ldr	r1, [pc, #44]	@ (800175c <HAL_UART_MspDeInit+0x6c>)
 800172e:	400a      	ands	r2, r1
 8001730:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001732:	23c0      	movs	r3, #192	@ 0xc0
 8001734:	00da      	lsls	r2, r3, #3
 8001736:	23a0      	movs	r3, #160	@ 0xa0
 8001738:	05db      	lsls	r3, r3, #23
 800173a:	0011      	movs	r1, r2
 800173c:	0018      	movs	r0, r3
 800173e:	f002 f99b 	bl	8003a78 <HAL_GPIO_DeInit>
}
 8001742:	46c0      	nop			@ (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b002      	add	sp, #8
 8001748:	bd80      	pop	{r7, pc}
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	40004800 	.word	0x40004800
 8001750:	40021000 	.word	0x40021000
 8001754:	fffbffff 	.word	0xfffbffff
 8001758:	40013800 	.word	0x40013800
 800175c:	ffffbfff 	.word	0xffffbfff

08001760 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a06      	ldr	r2, [pc, #24]	@ (8001788 <HAL_RTC_MspInit+0x28>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d106      	bne.n	8001780 <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_RTC_MspInit+0x2c>)
 8001774:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001776:	4b05      	ldr	r3, [pc, #20]	@ (800178c <HAL_RTC_MspInit+0x2c>)
 8001778:	2180      	movs	r1, #128	@ 0x80
 800177a:	02c9      	lsls	r1, r1, #11
 800177c:	430a      	orrs	r2, r1
 800177e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001780:	46c0      	nop			@ (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	b002      	add	sp, #8
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40002800 	.word	0x40002800
 800178c:	40021000 	.word	0x40021000

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001794:	46c0      	nop			@ (mov r8, r8)
 8001796:	e7fd      	b.n	8001794 <NMI_Handler+0x4>

08001798 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179c:	46c0      	nop			@ (mov r8, r8)
 800179e:	e7fd      	b.n	800179c <HardFault_Handler+0x4>

080017a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80017a4:	46c0      	nop			@ (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ae:	46c0      	nop			@ (mov r8, r8)
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017b8:	f001 f940 	bl	8002a3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017bc:	46c0      	nop			@ (mov r8, r8)
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
	...

080017c4 <RTC_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles RTC wake-up timer interrupt.
  */
void RTC_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80017c8:	4b03      	ldr	r3, [pc, #12]	@ (80017d8 <RTC_IRQHandler+0x14>)
 80017ca:	0018      	movs	r0, r3
 80017cc:	f004 fd7a 	bl	80062c4 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 80017d0:	46c0      	nop			@ (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	46c0      	nop			@ (mov r8, r8)
 80017d8:	20000238 	.word	0x20000238

080017dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017e4:	4a14      	ldr	r2, [pc, #80]	@ (8001838 <_sbrk+0x5c>)
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <_sbrk+0x60>)
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f0:	4b13      	ldr	r3, [pc, #76]	@ (8001840 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d102      	bne.n	80017fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f8:	4b11      	ldr	r3, [pc, #68]	@ (8001840 <_sbrk+0x64>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	@ (8001844 <_sbrk+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017fe:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <_sbrk+0x64>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	18d3      	adds	r3, r2, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	429a      	cmp	r2, r3
 800180a:	d207      	bcs.n	800181c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800180c:	f005 feb4 	bl	8007578 <__errno>
 8001810:	0003      	movs	r3, r0
 8001812:	220c      	movs	r2, #12
 8001814:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001816:	2301      	movs	r3, #1
 8001818:	425b      	negs	r3, r3
 800181a:	e009      	b.n	8001830 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800181c:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <_sbrk+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001822:	4b07      	ldr	r3, [pc, #28]	@ (8001840 <_sbrk+0x64>)
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	18d2      	adds	r2, r2, r3
 800182a:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <_sbrk+0x64>)
 800182c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800182e:	68fb      	ldr	r3, [r7, #12]
}
 8001830:	0018      	movs	r0, r3
 8001832:	46bd      	mov	sp, r7
 8001834:	b006      	add	sp, #24
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20005000 	.word	0x20005000
 800183c:	00000400 	.word	0x00000400
 8001840:	20000264 	.word	0x20000264
 8001844:	200003d0 	.word	0x200003d0

08001848 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800184c:	46c0      	nop			@ (mov r8, r8)
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <scan_i2c_bus>:
uint8_t temp_delta;
uint8_t hum_delta;
int16_t i2c_error_code = 0;

void scan_i2c_bus(void)
{
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
	// we re-set these to false because we want to check this every time for safety
    has_sensor_1 = false;
 800185a:	4b41      	ldr	r3, [pc, #260]	@ (8001960 <scan_i2c_bus+0x10c>)
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
    has_sensor_2 = false;
 8001860:	4b40      	ldr	r3, [pc, #256]	@ (8001964 <scan_i2c_bus+0x110>)
 8001862:	2200      	movs	r2, #0
 8001864:	701a      	strb	r2, [r3, #0]
    
    ConsolePrintf("Testing sensor 1 at address 0x44 (I2C addr 0x88)...\r\n");
 8001866:	4b40      	ldr	r3, [pc, #256]	@ (8001968 <scan_i2c_bus+0x114>)
 8001868:	0018      	movs	r0, r3
 800186a:	f7ff fd5d 	bl	8001328 <ConsolePrintf>
    HAL_StatusTypeDef result1 = HAL_I2C_IsDeviceReady(&hi2c1, 68 << 1, 1, 10);
 800186e:	1dfc      	adds	r4, r7, #7
 8001870:	483e      	ldr	r0, [pc, #248]	@ (800196c <scan_i2c_bus+0x118>)
 8001872:	230a      	movs	r3, #10
 8001874:	2201      	movs	r2, #1
 8001876:	2188      	movs	r1, #136	@ 0x88
 8001878:	f002 fd22 	bl	80042c0 <HAL_I2C_IsDeviceReady>
 800187c:	0003      	movs	r3, r0
 800187e:	7023      	strb	r3, [r4, #0]
    ConsolePrintf("Sensor 1 result: %s (code: %d)\r\n", 
 8001880:	1dfb      	adds	r3, r7, #7
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d013      	beq.n	80018b0 <scan_i2c_bus+0x5c>
                  (result1 == HAL_OK) ? "HAL_OK" : 
                  (result1 == HAL_ERROR) ? "HAL_ERROR" :
 8001888:	1dfb      	adds	r3, r7, #7
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d00d      	beq.n	80018ac <scan_i2c_bus+0x58>
                  (result1 == HAL_BUSY) ? "HAL_BUSY" : 
 8001890:	1dfb      	adds	r3, r7, #7
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d007      	beq.n	80018a8 <scan_i2c_bus+0x54>
                  (result1 == HAL_TIMEOUT) ? "HAL_TIMEOUT" : "UNKNOWN", result1);
 8001898:	1dfb      	adds	r3, r7, #7
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b03      	cmp	r3, #3
 800189e:	d101      	bne.n	80018a4 <scan_i2c_bus+0x50>
 80018a0:	4b33      	ldr	r3, [pc, #204]	@ (8001970 <scan_i2c_bus+0x11c>)
 80018a2:	e006      	b.n	80018b2 <scan_i2c_bus+0x5e>
 80018a4:	4b33      	ldr	r3, [pc, #204]	@ (8001974 <scan_i2c_bus+0x120>)
 80018a6:	e004      	b.n	80018b2 <scan_i2c_bus+0x5e>
                  (result1 == HAL_BUSY) ? "HAL_BUSY" : 
 80018a8:	4b33      	ldr	r3, [pc, #204]	@ (8001978 <scan_i2c_bus+0x124>)
 80018aa:	e002      	b.n	80018b2 <scan_i2c_bus+0x5e>
                  (result1 == HAL_ERROR) ? "HAL_ERROR" :
 80018ac:	4b33      	ldr	r3, [pc, #204]	@ (800197c <scan_i2c_bus+0x128>)
 80018ae:	e000      	b.n	80018b2 <scan_i2c_bus+0x5e>
    ConsolePrintf("Sensor 1 result: %s (code: %d)\r\n", 
 80018b0:	4b33      	ldr	r3, [pc, #204]	@ (8001980 <scan_i2c_bus+0x12c>)
 80018b2:	1dfa      	adds	r2, r7, #7
 80018b4:	7812      	ldrb	r2, [r2, #0]
 80018b6:	4833      	ldr	r0, [pc, #204]	@ (8001984 <scan_i2c_bus+0x130>)
 80018b8:	0019      	movs	r1, r3
 80018ba:	f7ff fd35 	bl	8001328 <ConsolePrintf>
    if (result1 == HAL_OK) has_sensor_1 = true;
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d102      	bne.n	80018cc <scan_i2c_bus+0x78>
 80018c6:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <scan_i2c_bus+0x10c>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
    
    ConsolePrintf("Testing sensor 2 at address 0x46 (I2C addr 0x8C)...\r\n");
 80018cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001988 <scan_i2c_bus+0x134>)
 80018ce:	0018      	movs	r0, r3
 80018d0:	f7ff fd2a 	bl	8001328 <ConsolePrintf>
    HAL_StatusTypeDef result2 = HAL_I2C_IsDeviceReady(&hi2c1, 70 << 1, 1, 10);
 80018d4:	1dbc      	adds	r4, r7, #6
 80018d6:	4825      	ldr	r0, [pc, #148]	@ (800196c <scan_i2c_bus+0x118>)
 80018d8:	230a      	movs	r3, #10
 80018da:	2201      	movs	r2, #1
 80018dc:	218c      	movs	r1, #140	@ 0x8c
 80018de:	f002 fcef 	bl	80042c0 <HAL_I2C_IsDeviceReady>
 80018e2:	0003      	movs	r3, r0
 80018e4:	7023      	strb	r3, [r4, #0]
    ConsolePrintf("Sensor 2 result: %s (code: %d)\r\n", 
 80018e6:	1dbb      	adds	r3, r7, #6
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d013      	beq.n	8001916 <scan_i2c_bus+0xc2>
                  (result2 == HAL_OK) ? "HAL_OK" : 
                  (result2 == HAL_ERROR) ? "HAL_ERROR" :
 80018ee:	1dbb      	adds	r3, r7, #6
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d00d      	beq.n	8001912 <scan_i2c_bus+0xbe>
                  (result2 == HAL_BUSY) ? "HAL_BUSY" : 
 80018f6:	1dbb      	adds	r3, r7, #6
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d007      	beq.n	800190e <scan_i2c_bus+0xba>
                  (result2 == HAL_TIMEOUT) ? "HAL_TIMEOUT" : "UNKNOWN", result2);
 80018fe:	1dbb      	adds	r3, r7, #6
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b03      	cmp	r3, #3
 8001904:	d101      	bne.n	800190a <scan_i2c_bus+0xb6>
 8001906:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <scan_i2c_bus+0x11c>)
 8001908:	e006      	b.n	8001918 <scan_i2c_bus+0xc4>
 800190a:	4b1a      	ldr	r3, [pc, #104]	@ (8001974 <scan_i2c_bus+0x120>)
 800190c:	e004      	b.n	8001918 <scan_i2c_bus+0xc4>
                  (result2 == HAL_BUSY) ? "HAL_BUSY" : 
 800190e:	4b1a      	ldr	r3, [pc, #104]	@ (8001978 <scan_i2c_bus+0x124>)
 8001910:	e002      	b.n	8001918 <scan_i2c_bus+0xc4>
                  (result2 == HAL_ERROR) ? "HAL_ERROR" :
 8001912:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <scan_i2c_bus+0x128>)
 8001914:	e000      	b.n	8001918 <scan_i2c_bus+0xc4>
    ConsolePrintf("Sensor 2 result: %s (code: %d)\r\n", 
 8001916:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <scan_i2c_bus+0x12c>)
 8001918:	1dba      	adds	r2, r7, #6
 800191a:	7812      	ldrb	r2, [r2, #0]
 800191c:	481b      	ldr	r0, [pc, #108]	@ (800198c <scan_i2c_bus+0x138>)
 800191e:	0019      	movs	r1, r3
 8001920:	f7ff fd02 	bl	8001328 <ConsolePrintf>
    if (result2 == HAL_OK) has_sensor_2 = true;
 8001924:	1dbb      	adds	r3, r7, #6
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <scan_i2c_bus+0xde>
 800192c:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <scan_i2c_bus+0x110>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]

    ConsolePrintf("Sensor scan: Sensor 1 (0x44): %s, Sensor 2 (0x46): %s\r\n", 
                  has_sensor_1 ? "FOUND" : "NOT FOUND", 
 8001932:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <scan_i2c_bus+0x10c>)
 8001934:	781b      	ldrb	r3, [r3, #0]
    ConsolePrintf("Sensor scan: Sensor 1 (0x44): %s, Sensor 2 (0x46): %s\r\n", 
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <scan_i2c_bus+0xea>
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <scan_i2c_bus+0x13c>)
 800193c:	e000      	b.n	8001940 <scan_i2c_bus+0xec>
 800193e:	4b15      	ldr	r3, [pc, #84]	@ (8001994 <scan_i2c_bus+0x140>)
                  has_sensor_2 ? "FOUND" : "NOT FOUND");
 8001940:	4a08      	ldr	r2, [pc, #32]	@ (8001964 <scan_i2c_bus+0x110>)
 8001942:	7812      	ldrb	r2, [r2, #0]
    ConsolePrintf("Sensor scan: Sensor 1 (0x44): %s, Sensor 2 (0x46): %s\r\n", 
 8001944:	2a00      	cmp	r2, #0
 8001946:	d001      	beq.n	800194c <scan_i2c_bus+0xf8>
 8001948:	4a11      	ldr	r2, [pc, #68]	@ (8001990 <scan_i2c_bus+0x13c>)
 800194a:	e000      	b.n	800194e <scan_i2c_bus+0xfa>
 800194c:	4a11      	ldr	r2, [pc, #68]	@ (8001994 <scan_i2c_bus+0x140>)
 800194e:	4812      	ldr	r0, [pc, #72]	@ (8001998 <scan_i2c_bus+0x144>)
 8001950:	0019      	movs	r1, r3
 8001952:	f7ff fce9 	bl	8001328 <ConsolePrintf>
    return;
 8001956:	46c0      	nop			@ (mov r8, r8)
}
 8001958:	46bd      	mov	sp, r7
 800195a:	b003      	add	sp, #12
 800195c:	bd90      	pop	{r4, r7, pc}
 800195e:	46c0      	nop			@ (mov r8, r8)
 8001960:	20000268 	.word	0x20000268
 8001964:	20000269 	.word	0x20000269
 8001968:	08008028 	.word	0x08008028
 800196c:	200000d4 	.word	0x200000d4
 8001970:	08008060 	.word	0x08008060
 8001974:	0800806c 	.word	0x0800806c
 8001978:	08008074 	.word	0x08008074
 800197c:	08008080 	.word	0x08008080
 8001980:	0800808c 	.word	0x0800808c
 8001984:	08008094 	.word	0x08008094
 8001988:	080080b8 	.word	0x080080b8
 800198c:	080080f0 	.word	0x080080f0
 8001990:	08008114 	.word	0x08008114
 8001994:	0800811c 	.word	0x0800811c
 8001998:	08008128 	.word	0x08008128

0800199c <sensor_init_and_read>:

I2C_Error_t sensor_init_and_read(void)
{
 800199c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199e:	b087      	sub	sp, #28
 80019a0:	af02      	add	r7, sp, #8
	ConsolePrintf("Enabling I2C power...\r\n");
 80019a2:	4bca      	ldr	r3, [pc, #808]	@ (8001ccc <sensor_init_and_read+0x330>)
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff fcbf 	bl	8001328 <ConsolePrintf>
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 80019aa:	4bc9      	ldr	r3, [pc, #804]	@ (8001cd0 <sensor_init_and_read+0x334>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	2120      	movs	r1, #32
 80019b0:	0018      	movs	r0, r3
 80019b2:	f002 f960 	bl	8003c76 <HAL_GPIO_WritePin>
	ConsolePrintf("I2C_ENABLE pin set to HIGH (PB5)\r\n");
 80019b6:	4bc7      	ldr	r3, [pc, #796]	@ (8001cd4 <sensor_init_and_read+0x338>)
 80019b8:	0018      	movs	r0, r3
 80019ba:	f7ff fcb5 	bl	8001328 <ConsolePrintf>
	
	// Read back the pin state to confirm it's actually set
	GPIO_PinState pin_state = HAL_GPIO_ReadPin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin);
 80019be:	250a      	movs	r5, #10
 80019c0:	197c      	adds	r4, r7, r5
 80019c2:	4bc3      	ldr	r3, [pc, #780]	@ (8001cd0 <sensor_init_and_read+0x334>)
 80019c4:	2120      	movs	r1, #32
 80019c6:	0018      	movs	r0, r3
 80019c8:	f002 f938 	bl	8003c3c <HAL_GPIO_ReadPin>
 80019cc:	0003      	movs	r3, r0
 80019ce:	7023      	strb	r3, [r4, #0]
	ConsolePrintf("I2C_ENABLE pin readback: %s\r\n", (pin_state == GPIO_PIN_SET) ? "HIGH" : "LOW");
 80019d0:	197b      	adds	r3, r7, r5
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d101      	bne.n	80019dc <sensor_init_and_read+0x40>
 80019d8:	4bbf      	ldr	r3, [pc, #764]	@ (8001cd8 <sensor_init_and_read+0x33c>)
 80019da:	e000      	b.n	80019de <sensor_init_and_read+0x42>
 80019dc:	4bbf      	ldr	r3, [pc, #764]	@ (8001cdc <sensor_init_and_read+0x340>)
 80019de:	4ac0      	ldr	r2, [pc, #768]	@ (8001ce0 <sensor_init_and_read+0x344>)
 80019e0:	0019      	movs	r1, r3
 80019e2:	0010      	movs	r0, r2
 80019e4:	f7ff fca0 	bl	8001328 <ConsolePrintf>
	
	HAL_Delay(400); // WE NEED THIS FOR IC POWER UP!!! IT TAKES 300mS to competely power up!!!
 80019e8:	23c8      	movs	r3, #200	@ 0xc8
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	0018      	movs	r0, r3
 80019ee:	f001 f841 	bl	8002a74 <HAL_Delay>
	ConsolePrintf("I2C power stabilized, scanning for sensors...\r\n");
 80019f2:	4bbc      	ldr	r3, [pc, #752]	@ (8001ce4 <sensor_init_and_read+0x348>)
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7ff fc97 	bl	8001328 <ConsolePrintf>
	
	// Test I2C bus by scanning a wider range of addresses
	ConsolePrintf("Performing extended I2C bus scan...\r\n");
 80019fa:	4bbb      	ldr	r3, [pc, #748]	@ (8001ce8 <sensor_init_and_read+0x34c>)
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff fc93 	bl	8001328 <ConsolePrintf>
	int devices_found = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
	for (uint8_t addr = 0x08; addr < 0x78; addr++) {
 8001a06:	230b      	movs	r3, #11
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	e01c      	b.n	8001a4a <sensor_init_and_read+0xae>
		if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK) {
 8001a10:	240b      	movs	r4, #11
 8001a12:	193b      	adds	r3, r7, r4
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	18db      	adds	r3, r3, r3
 8001a1a:	b299      	uxth	r1, r3
 8001a1c:	48b3      	ldr	r0, [pc, #716]	@ (8001cec <sensor_init_and_read+0x350>)
 8001a1e:	230a      	movs	r3, #10
 8001a20:	2201      	movs	r2, #1
 8001a22:	f002 fc4d 	bl	80042c0 <HAL_I2C_IsDeviceReady>
 8001a26:	1e03      	subs	r3, r0, #0
 8001a28:	d109      	bne.n	8001a3e <sensor_init_and_read+0xa2>
			ConsolePrintf("I2C device found at address 0x%02X\r\n", addr);
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	781a      	ldrb	r2, [r3, #0]
 8001a2e:	4bb0      	ldr	r3, [pc, #704]	@ (8001cf0 <sensor_init_and_read+0x354>)
 8001a30:	0011      	movs	r1, r2
 8001a32:	0018      	movs	r0, r3
 8001a34:	f7ff fc78 	bl	8001328 <ConsolePrintf>
			devices_found++;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	3301      	adds	r3, #1
 8001a3c:	60fb      	str	r3, [r7, #12]
	for (uint8_t addr = 0x08; addr < 0x78; addr++) {
 8001a3e:	210b      	movs	r1, #11
 8001a40:	187b      	adds	r3, r7, r1
 8001a42:	781a      	ldrb	r2, [r3, #0]
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	3201      	adds	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
 8001a4a:	230b      	movs	r3, #11
 8001a4c:	18fb      	adds	r3, r7, r3
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b77      	cmp	r3, #119	@ 0x77
 8001a52:	d9dd      	bls.n	8001a10 <sensor_init_and_read+0x74>
		}
	}
	ConsolePrintf("Total I2C devices found: %d\r\n", devices_found);
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	4ba7      	ldr	r3, [pc, #668]	@ (8001cf4 <sensor_init_and_read+0x358>)
 8001a58:	0011      	movs	r1, r2
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f7ff fc64 	bl	8001328 <ConsolePrintf>
	
	scan_i2c_bus();
 8001a60:	f7ff fef8 	bl	8001854 <scan_i2c_bus>
    if (!has_sensor_1 && !has_sensor_2) {
 8001a64:	4ba4      	ldr	r3, [pc, #656]	@ (8001cf8 <sensor_init_and_read+0x35c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	4053      	eors	r3, r2
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d012      	beq.n	8001a98 <sensor_init_and_read+0xfc>
 8001a72:	4ba2      	ldr	r3, [pc, #648]	@ (8001cfc <sensor_init_and_read+0x360>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2201      	movs	r2, #1
 8001a78:	4053      	eors	r3, r2
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00b      	beq.n	8001a98 <sensor_init_and_read+0xfc>
    	i2c_error_code = NO_SENSORS_FOUND;
 8001a80:	4b9f      	ldr	r3, [pc, #636]	@ (8001d00 <sensor_init_and_read+0x364>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	801a      	strh	r2, [r3, #0]
    	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8001a86:	4b92      	ldr	r3, [pc, #584]	@ (8001cd0 <sensor_init_and_read+0x334>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2120      	movs	r1, #32
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f002 f8f2 	bl	8003c76 <HAL_GPIO_WritePin>
        return I2C_ERROR_BOTH_SENSORS_NOT_RESPONDING;
 8001a92:	2303      	movs	r3, #3
 8001a94:	425b      	negs	r3, r3
 8001a96:	e115      	b.n	8001cc4 <sensor_init_and_read+0x328>
    }

    i2c_error_code = NO_ERROR;
 8001a98:	4b99      	ldr	r3, [pc, #612]	@ (8001d00 <sensor_init_and_read+0x364>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	801a      	strh	r2, [r3, #0]

    if (has_sensor_1) {
 8001a9e:	4b96      	ldr	r3, [pc, #600]	@ (8001cf8 <sensor_init_and_read+0x35c>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d023      	beq.n	8001aee <sensor_init_and_read+0x152>
        ConsolePrintf("Reading sensor 1 (SHT43 at 0x44)...\r\n");
 8001aa6:	4b97      	ldr	r3, [pc, #604]	@ (8001d04 <sensor_init_and_read+0x368>)
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f7ff fc3d 	bl	8001328 <ConsolePrintf>
        sht4x_init(SHT43_I2C_ADDR_44);
 8001aae:	2044      	movs	r0, #68	@ 0x44
 8001ab0:	f000 fb0c 	bl	80020cc <sht4x_init>
        sht4x_soft_reset();
 8001ab4:	f000 fb7e 	bl	80021b4 <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 8001ab8:	4b93      	ldr	r3, [pc, #588]	@ (8001d08 <sensor_init_and_read+0x36c>)
 8001aba:	0018      	movs	r0, r3
 8001abc:	f000 fadc 	bl	8002078 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT43_I2C_ADDR_44);
 8001ac0:	2044      	movs	r0, #68	@ 0x44
 8001ac2:	f000 fb03 	bl	80020cc <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 8001ac6:	4a91      	ldr	r2, [pc, #580]	@ (8001d0c <sensor_init_and_read+0x370>)
 8001ac8:	4b91      	ldr	r3, [pc, #580]	@ (8001d10 <sensor_init_and_read+0x374>)
 8001aca:	0011      	movs	r1, r2
 8001acc:	0018      	movs	r0, r3
 8001ace:	f000 fb0d 	bl	80020ec <sht4x_measure_high_precision_ticks>
 8001ad2:	0003      	movs	r3, r0
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	4b8a      	ldr	r3, [pc, #552]	@ (8001d00 <sensor_init_and_read+0x364>)
 8001ad8:	801a      	strh	r2, [r3, #0]
        ConsolePrintf("Sensor 1 raw: temp_ticks=%u, hum_ticks=%u\r\n", temp_ticks_1, hum_ticks_1);
 8001ada:	4b8d      	ldr	r3, [pc, #564]	@ (8001d10 <sensor_init_and_read+0x374>)
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	0019      	movs	r1, r3
 8001ae0:	4b8a      	ldr	r3, [pc, #552]	@ (8001d0c <sensor_init_and_read+0x370>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	4b8b      	ldr	r3, [pc, #556]	@ (8001d14 <sensor_init_and_read+0x378>)
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f7ff fc1d 	bl	8001328 <ConsolePrintf>
    }

    if (has_sensor_2) {
 8001aee:	4b83      	ldr	r3, [pc, #524]	@ (8001cfc <sensor_init_and_read+0x360>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d023      	beq.n	8001b3e <sensor_init_and_read+0x1a2>
        ConsolePrintf("Reading sensor 2 (SHT40 at 0x46)...\r\n");
 8001af6:	4b88      	ldr	r3, [pc, #544]	@ (8001d18 <sensor_init_and_read+0x37c>)
 8001af8:	0018      	movs	r0, r3
 8001afa:	f7ff fc15 	bl	8001328 <ConsolePrintf>
        sht4x_init(SHT40_I2C_ADDR_46);
 8001afe:	2046      	movs	r0, #70	@ 0x46
 8001b00:	f000 fae4 	bl	80020cc <sht4x_init>
        sht4x_soft_reset();
 8001b04:	f000 fb56 	bl	80021b4 <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 8001b08:	4b7f      	ldr	r3, [pc, #508]	@ (8001d08 <sensor_init_and_read+0x36c>)
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f000 fab4 	bl	8002078 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT40_I2C_ADDR_46);
 8001b10:	2046      	movs	r0, #70	@ 0x46
 8001b12:	f000 fadb 	bl	80020cc <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 8001b16:	4a81      	ldr	r2, [pc, #516]	@ (8001d1c <sensor_init_and_read+0x380>)
 8001b18:	4b81      	ldr	r3, [pc, #516]	@ (8001d20 <sensor_init_and_read+0x384>)
 8001b1a:	0011      	movs	r1, r2
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	f000 fae5 	bl	80020ec <sht4x_measure_high_precision_ticks>
 8001b22:	0003      	movs	r3, r0
 8001b24:	001a      	movs	r2, r3
 8001b26:	4b76      	ldr	r3, [pc, #472]	@ (8001d00 <sensor_init_and_read+0x364>)
 8001b28:	801a      	strh	r2, [r3, #0]
        ConsolePrintf("Sensor 2 raw: temp_ticks=%u, hum_ticks=%u\r\n", temp_ticks_2, hum_ticks_2);
 8001b2a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d20 <sensor_init_and_read+0x384>)
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	0019      	movs	r1, r3
 8001b30:	4b7a      	ldr	r3, [pc, #488]	@ (8001d1c <sensor_init_and_read+0x380>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	001a      	movs	r2, r3
 8001b36:	4b7b      	ldr	r3, [pc, #492]	@ (8001d24 <sensor_init_and_read+0x388>)
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff fbf5 	bl	8001328 <ConsolePrintf>
    }
    ConsolePrintf("Disabling I2C power...\r\n");
 8001b3e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d28 <sensor_init_and_read+0x38c>)
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff fbf1 	bl	8001328 <ConsolePrintf>
    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8001b46:	4b62      	ldr	r3, [pc, #392]	@ (8001cd0 <sensor_init_and_read+0x334>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f002 f892 	bl	8003c76 <HAL_GPIO_WritePin>

             calculated_temp   = (uint16_t)((temp_ticks_1 + 5U) / 10U);
 8001b52:	4b6f      	ldr	r3, [pc, #444]	@ (8001d10 <sensor_init_and_read+0x374>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	3305      	adds	r3, #5
 8001b58:	210a      	movs	r1, #10
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f7fe fae6 	bl	800012c <__udivsi3>
 8001b60:	0003      	movs	r3, r0
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	4b71      	ldr	r3, [pc, #452]	@ (8001d2c <sensor_init_and_read+0x390>)
 8001b66:	801a      	strh	r2, [r3, #0]
    uint16_t calculated_temp_2 = (uint16_t)((temp_ticks_2 + 5U) / 10U);
 8001b68:	4b6d      	ldr	r3, [pc, #436]	@ (8001d20 <sensor_init_and_read+0x384>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	3305      	adds	r3, #5
 8001b6e:	210a      	movs	r1, #10
 8001b70:	0018      	movs	r0, r3
 8001b72:	f7fe fadb 	bl	800012c <__udivsi3>
 8001b76:	0003      	movs	r3, r0
 8001b78:	001a      	movs	r2, r3
 8001b7a:	2608      	movs	r6, #8
 8001b7c:	19bb      	adds	r3, r7, r6
 8001b7e:	801a      	strh	r2, [r3, #0]

    ConsolePrintf("Temperature readings: Sensor 1: %u.%u°C, Sensor 2: %u.%u°C\r\n", 
 8001b80:	4b6a      	ldr	r3, [pc, #424]	@ (8001d2c <sensor_init_and_read+0x390>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	210a      	movs	r1, #10
 8001b86:	0018      	movs	r0, r3
 8001b88:	f7fe fad0 	bl	800012c <__udivsi3>
 8001b8c:	0003      	movs	r3, r0
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	001c      	movs	r4, r3
 8001b92:	4b66      	ldr	r3, [pc, #408]	@ (8001d2c <sensor_init_and_read+0x390>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	210a      	movs	r1, #10
 8001b98:	0018      	movs	r0, r3
 8001b9a:	f7fe fb4d 	bl	8000238 <__aeabi_uidivmod>
 8001b9e:	000b      	movs	r3, r1
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	001d      	movs	r5, r3
 8001ba4:	19bb      	adds	r3, r7, r6
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	210a      	movs	r1, #10
 8001baa:	0018      	movs	r0, r3
 8001bac:	f7fe fabe 	bl	800012c <__udivsi3>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	001e      	movs	r6, r3
 8001bb6:	2308      	movs	r3, #8
 8001bb8:	18fb      	adds	r3, r7, r3
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	210a      	movs	r1, #10
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f7fe fb3a 	bl	8000238 <__aeabi_uidivmod>
 8001bc4:	000b      	movs	r3, r1
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	4859      	ldr	r0, [pc, #356]	@ (8001d30 <sensor_init_and_read+0x394>)
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	0033      	movs	r3, r6
 8001bce:	002a      	movs	r2, r5
 8001bd0:	0021      	movs	r1, r4
 8001bd2:	f7ff fba9 	bl	8001328 <ConsolePrintf>
                  calculated_temp / 10, calculated_temp % 10,
                  calculated_temp_2 / 10, calculated_temp_2 % 10);

             calculated_hum    = (uint8_t)(hum_ticks_1 / 1000U);
 8001bd6:	4b4d      	ldr	r3, [pc, #308]	@ (8001d0c <sensor_init_and_read+0x370>)
 8001bd8:	881b      	ldrh	r3, [r3, #0]
 8001bda:	22fa      	movs	r2, #250	@ 0xfa
 8001bdc:	0091      	lsls	r1, r2, #2
 8001bde:	0018      	movs	r0, r3
 8001be0:	f7fe faa4 	bl	800012c <__udivsi3>
 8001be4:	0003      	movs	r3, r0
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	4b52      	ldr	r3, [pc, #328]	@ (8001d34 <sensor_init_and_read+0x398>)
 8001bec:	701a      	strb	r2, [r3, #0]
    uint8_t  calculated_hum_2  = (uint8_t)(hum_ticks_2 / 1000U);
 8001bee:	4b4b      	ldr	r3, [pc, #300]	@ (8001d1c <sensor_init_and_read+0x380>)
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	22fa      	movs	r2, #250	@ 0xfa
 8001bf4:	0091      	lsls	r1, r2, #2
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f7fe fa98 	bl	800012c <__udivsi3>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	1dfb      	adds	r3, r7, #7
 8001c02:	701a      	strb	r2, [r3, #0]

    ConsolePrintf("Humidity readings: Sensor 1: %u%%, Sensor 2: %u%%\r\n", 
 8001c04:	4b4b      	ldr	r3, [pc, #300]	@ (8001d34 <sensor_init_and_read+0x398>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	0019      	movs	r1, r3
 8001c0a:	1dfb      	adds	r3, r7, #7
 8001c0c:	781a      	ldrb	r2, [r3, #0]
 8001c0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001d38 <sensor_init_and_read+0x39c>)
 8001c10:	0018      	movs	r0, r3
 8001c12:	f7ff fb89 	bl	8001328 <ConsolePrintf>
                  calculated_hum, calculated_hum_2);

             temp_delta        = (uint8_t)abs(calculated_temp - calculated_temp_2);
 8001c16:	4b45      	ldr	r3, [pc, #276]	@ (8001d2c <sensor_init_and_read+0x390>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	18fb      	adds	r3, r7, r3
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	17da      	asrs	r2, r3, #31
 8001c26:	189b      	adds	r3, r3, r2
 8001c28:	4053      	eors	r3, r2
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	4b43      	ldr	r3, [pc, #268]	@ (8001d3c <sensor_init_and_read+0x3a0>)
 8001c2e:	701a      	strb	r2, [r3, #0]
             hum_delta         = (uint8_t)abs(calculated_hum  - calculated_hum_2);
 8001c30:	4b40      	ldr	r3, [pc, #256]	@ (8001d34 <sensor_init_and_read+0x398>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	001a      	movs	r2, r3
 8001c36:	1dfb      	adds	r3, r7, #7
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	17da      	asrs	r2, r3, #31
 8001c3e:	189b      	adds	r3, r3, r2
 8001c40:	4053      	eors	r3, r2
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b3e      	ldr	r3, [pc, #248]	@ (8001d40 <sensor_init_and_read+0x3a4>)
 8001c46:	701a      	strb	r2, [r3, #0]

    ConsolePrintf("Sensor deltas: Temp delta: %u.%u°C, Hum delta: %u%%\r\n", 
 8001c48:	4b3c      	ldr	r3, [pc, #240]	@ (8001d3c <sensor_init_and_read+0x3a0>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	210a      	movs	r1, #10
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f7fe fa6c 	bl	800012c <__udivsi3>
 8001c54:	0003      	movs	r3, r0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	001c      	movs	r4, r3
 8001c5a:	4b38      	ldr	r3, [pc, #224]	@ (8001d3c <sensor_init_and_read+0x3a0>)
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	210a      	movs	r1, #10
 8001c60:	0018      	movs	r0, r3
 8001c62:	f7fe fae9 	bl	8000238 <__aeabi_uidivmod>
 8001c66:	000b      	movs	r3, r1
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	001a      	movs	r2, r3
 8001c6c:	4b34      	ldr	r3, [pc, #208]	@ (8001d40 <sensor_init_and_read+0x3a4>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4834      	ldr	r0, [pc, #208]	@ (8001d44 <sensor_init_and_read+0x3a8>)
 8001c72:	0021      	movs	r1, r4
 8001c74:	f7ff fb58 	bl	8001328 <ConsolePrintf>
                  temp_delta / 10, temp_delta % 10, hum_delta);

    if (temp_delta > 200) {
 8001c78:	4b30      	ldr	r3, [pc, #192]	@ (8001d3c <sensor_init_and_read+0x3a0>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2bc8      	cmp	r3, #200	@ 0xc8
 8001c7e:	d919      	bls.n	8001cb4 <sensor_init_and_read+0x318>
        ConsolePrintf("WARNING: Temperature difference too large (%u.%u°C > 20.0°C)\r\n", 
 8001c80:	4b2e      	ldr	r3, [pc, #184]	@ (8001d3c <sensor_init_and_read+0x3a0>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	210a      	movs	r1, #10
 8001c86:	0018      	movs	r0, r3
 8001c88:	f7fe fa50 	bl	800012c <__udivsi3>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	001c      	movs	r4, r3
 8001c92:	4b2a      	ldr	r3, [pc, #168]	@ (8001d3c <sensor_init_and_read+0x3a0>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	210a      	movs	r1, #10
 8001c98:	0018      	movs	r0, r3
 8001c9a:	f7fe facd 	bl	8000238 <__aeabi_uidivmod>
 8001c9e:	000b      	movs	r3, r1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	001a      	movs	r2, r3
 8001ca4:	4b28      	ldr	r3, [pc, #160]	@ (8001d48 <sensor_init_and_read+0x3ac>)
 8001ca6:	0021      	movs	r1, r4
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7ff fb3d 	bl	8001328 <ConsolePrintf>
                      temp_delta / 10, temp_delta % 10);
        return I2C_ERROR_SENSORS_TOO_DIFFERENT;
 8001cae:	2304      	movs	r3, #4
 8001cb0:	425b      	negs	r3, r3
 8001cb2:	e007      	b.n	8001cc4 <sensor_init_and_read+0x328>
    }
    if (i2c_error_code) return false;
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <sensor_init_and_read+0x364>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	5e9b      	ldrsh	r3, [r3, r2]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <sensor_init_and_read+0x326>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <sensor_init_and_read+0x328>

    return I2C_ERROR_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	b005      	add	sp, #20
 8001cca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ccc:	08008160 	.word	0x08008160
 8001cd0:	50000400 	.word	0x50000400
 8001cd4:	08008178 	.word	0x08008178
 8001cd8:	0800819c 	.word	0x0800819c
 8001cdc:	080081a4 	.word	0x080081a4
 8001ce0:	080081a8 	.word	0x080081a8
 8001ce4:	080081c8 	.word	0x080081c8
 8001ce8:	080081f8 	.word	0x080081f8
 8001cec:	200000d4 	.word	0x200000d4
 8001cf0:	08008220 	.word	0x08008220
 8001cf4:	08008248 	.word	0x08008248
 8001cf8:	20000268 	.word	0x20000268
 8001cfc:	20000269 	.word	0x20000269
 8001d00:	20000278 	.word	0x20000278
 8001d04:	08008268 	.word	0x08008268
 8001d08:	00002710 	.word	0x00002710
 8001d0c:	2000026c 	.word	0x2000026c
 8001d10:	2000026a 	.word	0x2000026a
 8001d14:	08008290 	.word	0x08008290
 8001d18:	080082bc 	.word	0x080082bc
 8001d1c:	20000270 	.word	0x20000270
 8001d20:	2000026e 	.word	0x2000026e
 8001d24:	080082e4 	.word	0x080082e4
 8001d28:	08008310 	.word	0x08008310
 8001d2c:	20000272 	.word	0x20000272
 8001d30:	0800832c 	.word	0x0800832c
 8001d34:	20000274 	.word	0x20000274
 8001d38:	0800836c 	.word	0x0800836c
 8001d3c:	20000275 	.word	0x20000275
 8001d40:	20000276 	.word	0x20000276
 8001d44:	080083a0 	.word	0x080083a0
 8001d48:	080083d8 	.word	0x080083d8

08001d4c <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	021b      	lsls	r3, r3, #8
 8001d5c:	b21a      	sxth	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3301      	adds	r3, #1
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b21b      	sxth	r3, r3
 8001d66:	4313      	orrs	r3, r2
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	b29b      	uxth	r3, r3
}
 8001d6c:	0018      	movs	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	b002      	add	sp, #8
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	000a      	movs	r2, r1
 8001d7e:	1cbb      	adds	r3, r7, #2
 8001d80:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8001d82:	230d      	movs	r3, #13
 8001d84:	18fb      	adds	r3, r7, r3
 8001d86:	22ff      	movs	r2, #255	@ 0xff
 8001d88:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001d8a:	230e      	movs	r3, #14
 8001d8c:	18fb      	adds	r3, r7, r3
 8001d8e:	2200      	movs	r2, #0
 8001d90:	801a      	strh	r2, [r3, #0]
 8001d92:	e038      	b.n	8001e06 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8001d94:	230e      	movs	r3, #14
 8001d96:	18fb      	adds	r3, r7, r3
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	18d3      	adds	r3, r2, r3
 8001d9e:	7819      	ldrb	r1, [r3, #0]
 8001da0:	220d      	movs	r2, #13
 8001da2:	18bb      	adds	r3, r7, r2
 8001da4:	18ba      	adds	r2, r7, r2
 8001da6:	7812      	ldrb	r2, [r2, #0]
 8001da8:	404a      	eors	r2, r1
 8001daa:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001dac:	230c      	movs	r3, #12
 8001dae:	18fb      	adds	r3, r7, r3
 8001db0:	2208      	movs	r2, #8
 8001db2:	701a      	strb	r2, [r3, #0]
 8001db4:	e01c      	b.n	8001df0 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 8001db6:	210d      	movs	r1, #13
 8001db8:	187b      	adds	r3, r7, r1
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	b25b      	sxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	da0a      	bge.n	8001dd8 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8001dc2:	187b      	adds	r3, r7, r1
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b25b      	sxtb	r3, r3
 8001dc8:	18db      	adds	r3, r3, r3
 8001dca:	b25b      	sxtb	r3, r3
 8001dcc:	2231      	movs	r2, #49	@ 0x31
 8001dce:	4053      	eors	r3, r2
 8001dd0:	b25a      	sxtb	r2, r3
 8001dd2:	187b      	adds	r3, r7, r1
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	e005      	b.n	8001de4 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8001dd8:	230d      	movs	r3, #13
 8001dda:	18fa      	adds	r2, r7, r3
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	18db      	adds	r3, r3, r3
 8001de2:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001de4:	220c      	movs	r2, #12
 8001de6:	18bb      	adds	r3, r7, r2
 8001de8:	18ba      	adds	r2, r7, r2
 8001dea:	7812      	ldrb	r2, [r2, #0]
 8001dec:	3a01      	subs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
 8001df0:	230c      	movs	r3, #12
 8001df2:	18fb      	adds	r3, r7, r3
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1dd      	bne.n	8001db6 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001dfa:	220e      	movs	r2, #14
 8001dfc:	18bb      	adds	r3, r7, r2
 8001dfe:	18ba      	adds	r2, r7, r2
 8001e00:	8812      	ldrh	r2, [r2, #0]
 8001e02:	3201      	adds	r2, #1
 8001e04:	801a      	strh	r2, [r3, #0]
 8001e06:	230e      	movs	r3, #14
 8001e08:	18fa      	adds	r2, r7, r3
 8001e0a:	1cbb      	adds	r3, r7, #2
 8001e0c:	8812      	ldrh	r2, [r2, #0]
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d3bf      	bcc.n	8001d94 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8001e14:	230d      	movs	r3, #13
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	781b      	ldrb	r3, [r3, #0]
}
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b004      	add	sp, #16
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	0008      	movs	r0, r1
 8001e2c:	0011      	movs	r1, r2
 8001e2e:	1cbb      	adds	r3, r7, #2
 8001e30:	1c02      	adds	r2, r0, #0
 8001e32:	801a      	strh	r2, [r3, #0]
 8001e34:	1c7b      	adds	r3, r7, #1
 8001e36:	1c0a      	adds	r2, r1, #0
 8001e38:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8001e3a:	1cbb      	adds	r3, r7, #2
 8001e3c:	881a      	ldrh	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	0011      	movs	r1, r2
 8001e42:	0018      	movs	r0, r3
 8001e44:	f7ff ff96 	bl	8001d74 <sensirion_i2c_generate_crc>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	001a      	movs	r2, r3
 8001e4c:	1c7b      	adds	r3, r7, #1
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d001      	beq.n	8001e58 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b002      	add	sp, #8
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	0008      	movs	r0, r1
 8001e6c:	0011      	movs	r1, r2
 8001e6e:	1cbb      	adds	r3, r7, #2
 8001e70:	1c02      	adds	r2, r0, #0
 8001e72:	801a      	strh	r2, [r3, #0]
 8001e74:	1c7b      	adds	r3, r7, #1
 8001e76:	1c0a      	adds	r2, r1, #0
 8001e78:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 8001e7a:	1cbb      	adds	r3, r7, #2
 8001e7c:	881b      	ldrh	r3, [r3, #0]
 8001e7e:	1cba      	adds	r2, r7, #2
 8001e80:	1c59      	adds	r1, r3, #1
 8001e82:	8011      	strh	r1, [r2, #0]
 8001e84:	001a      	movs	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	189b      	adds	r3, r3, r2
 8001e8a:	1c7a      	adds	r2, r7, #1
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	701a      	strb	r2, [r3, #0]
    return offset;
 8001e90:	1cbb      	adds	r3, r7, #2
 8001e92:	881b      	ldrh	r3, [r3, #0]
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	b002      	add	sp, #8
 8001e9a:	bd80      	pop	{r7, pc}

08001e9c <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6039      	str	r1, [r7, #0]
 8001ea4:	0011      	movs	r1, r2
 8001ea6:	1dfb      	adds	r3, r7, #7
 8001ea8:	1c02      	adds	r2, r0, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	1c0a      	adds	r2, r1, #0
 8001eb0:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	6839      	ldr	r1, [r7, #0]
 8001eba:	1dfb      	adds	r3, r7, #7
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f000 f8b8 	bl	8002034 <sensirion_i2c_hal_write>
 8001ec4:	0003      	movs	r3, r0
}
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	b002      	add	sp, #8
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8001ece:	b5b0      	push	{r4, r5, r7, lr}
 8001ed0:	b084      	sub	sp, #16
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	0011      	movs	r1, r2
 8001ed8:	1dfb      	adds	r3, r7, #7
 8001eda:	1c02      	adds	r2, r0, #0
 8001edc:	701a      	strb	r2, [r3, #0]
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	1c0a      	adds	r2, r1, #0
 8001ee2:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	085b      	lsrs	r3, r3, #1
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	220a      	movs	r2, #10
 8001eee:	18ba      	adds	r2, r7, r2
 8001ef0:	1c19      	adds	r1, r3, #0
 8001ef2:	1c0b      	adds	r3, r1, #0
 8001ef4:	18db      	adds	r3, r3, r3
 8001ef6:	185b      	adds	r3, r3, r1
 8001ef8:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	2201      	movs	r2, #1
 8001f00:	4013      	ands	r3, r2
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8001f08:	2304      	movs	r3, #4
 8001f0a:	e06c      	b.n	8001fe6 <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8001f0c:	230a      	movs	r3, #10
 8001f0e:	18fb      	adds	r3, r7, r3
 8001f10:	881b      	ldrh	r3, [r3, #0]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	6839      	ldr	r1, [r7, #0]
 8001f16:	1dfb      	adds	r3, r7, #7
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 f868 	bl	8001ff0 <sensirion_i2c_hal_read>
 8001f20:	0003      	movs	r3, r0
 8001f22:	001a      	movs	r2, r3
 8001f24:	2108      	movs	r1, #8
 8001f26:	187b      	adds	r3, r7, r1
 8001f28:	801a      	strh	r2, [r3, #0]
    if (error) {
 8001f2a:	000a      	movs	r2, r1
 8001f2c:	18bb      	adds	r3, r7, r2
 8001f2e:	2100      	movs	r1, #0
 8001f30:	5e5b      	ldrsh	r3, [r3, r1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <sensirion_i2c_read_data_inplace+0x70>
        return error;
 8001f36:	18bb      	adds	r3, r7, r2
 8001f38:	2200      	movs	r2, #0
 8001f3a:	5e9b      	ldrsh	r3, [r3, r2]
 8001f3c:	e053      	b.n	8001fe6 <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001f3e:	230e      	movs	r3, #14
 8001f40:	18fb      	adds	r3, r7, r3
 8001f42:	2200      	movs	r2, #0
 8001f44:	801a      	strh	r2, [r3, #0]
 8001f46:	230c      	movs	r3, #12
 8001f48:	18fb      	adds	r3, r7, r3
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	801a      	strh	r2, [r3, #0]
 8001f4e:	e041      	b.n	8001fd4 <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001f50:	210e      	movs	r1, #14
 8001f52:	187b      	adds	r3, r7, r1
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8001f5a:	187b      	adds	r3, r7, r1
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	3302      	adds	r3, #2
 8001f60:	683a      	ldr	r2, [r7, #0]
 8001f62:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	001a      	movs	r2, r3
 8001f68:	2102      	movs	r1, #2
 8001f6a:	f7ff ff5a 	bl	8001e22 <sensirion_i2c_check_crc>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	001a      	movs	r2, r3
 8001f72:	2108      	movs	r1, #8
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	801a      	strh	r2, [r3, #0]
        if (error) {
 8001f78:	000a      	movs	r2, r1
 8001f7a:	18bb      	adds	r3, r7, r2
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	5e5b      	ldrsh	r3, [r3, r1]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d003      	beq.n	8001f8c <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 8001f84:	18bb      	adds	r3, r7, r2
 8001f86:	2200      	movs	r2, #0
 8001f88:	5e9b      	ldrsh	r3, [r3, r2]
 8001f8a:	e02c      	b.n	8001fe6 <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 8001f8c:	240e      	movs	r4, #14
 8001f8e:	193b      	adds	r3, r7, r4
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	683a      	ldr	r2, [r7, #0]
 8001f94:	18d2      	adds	r2, r2, r3
 8001f96:	250c      	movs	r5, #12
 8001f98:	197b      	adds	r3, r7, r5
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	1979      	adds	r1, r7, r5
 8001f9e:	1c58      	adds	r0, r3, #1
 8001fa0:	8008      	strh	r0, [r1, #0]
 8001fa2:	0019      	movs	r1, r3
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	185b      	adds	r3, r3, r1
 8001fa8:	7812      	ldrb	r2, [r2, #0]
 8001faa:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8001fac:	193b      	adds	r3, r7, r4
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	18d2      	adds	r2, r2, r3
 8001fb6:	197b      	adds	r3, r7, r5
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	1979      	adds	r1, r7, r5
 8001fbc:	1c58      	adds	r0, r3, #1
 8001fbe:	8008      	strh	r0, [r1, #0]
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	185b      	adds	r3, r3, r1
 8001fc6:	7812      	ldrb	r2, [r2, #0]
 8001fc8:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001fca:	193b      	adds	r3, r7, r4
 8001fcc:	193a      	adds	r2, r7, r4
 8001fce:	8812      	ldrh	r2, [r2, #0]
 8001fd0:	3203      	adds	r2, #3
 8001fd2:	801a      	strh	r2, [r3, #0]
 8001fd4:	230e      	movs	r3, #14
 8001fd6:	18fa      	adds	r2, r7, r3
 8001fd8:	230a      	movs	r3, #10
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	8812      	ldrh	r2, [r2, #0]
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d3b5      	bcc.n	8001f50 <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b004      	add	sp, #16
 8001fec:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001ff0 <sensirion_i2c_hal_read>:

void sensirion_i2c_hal_free(void) {
    /* nothing to free */
}

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	6039      	str	r1, [r7, #0]
 8001ff8:	0011      	movs	r1, r2
 8001ffa:	1dfb      	adds	r3, r7, #7
 8001ffc:	1c02      	adds	r2, r0, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
 8002000:	1dbb      	adds	r3, r7, #6
 8002002:	1c0a      	adds	r2, r1, #0
 8002004:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1), data, count, 100);
 8002006:	1dfb      	adds	r3, r7, #7
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	18db      	adds	r3, r3, r3
 800200e:	b299      	uxth	r1, r3
 8002010:	1dbb      	adds	r3, r7, #6
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	b29b      	uxth	r3, r3
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	4805      	ldr	r0, [pc, #20]	@ (8002030 <sensirion_i2c_hal_read+0x40>)
 800201a:	2464      	movs	r4, #100	@ 0x64
 800201c:	9400      	str	r4, [sp, #0]
 800201e:	f002 f847 	bl	80040b0 <HAL_I2C_Master_Receive>
 8002022:	0003      	movs	r3, r0
 8002024:	b25b      	sxtb	r3, r3
}
 8002026:	0018      	movs	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	b003      	add	sp, #12
 800202c:	bd90      	pop	{r4, r7, pc}
 800202e:	46c0      	nop			@ (mov r8, r8)
 8002030:	200000d4 	.word	0x200000d4

08002034 <sensirion_i2c_hal_write>:

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint8_t count) {
 8002034:	b590      	push	{r4, r7, lr}
 8002036:	b085      	sub	sp, #20
 8002038:	af02      	add	r7, sp, #8
 800203a:	6039      	str	r1, [r7, #0]
 800203c:	0011      	movs	r1, r2
 800203e:	1dfb      	adds	r3, r7, #7
 8002040:	1c02      	adds	r2, r0, #0
 8002042:	701a      	strb	r2, [r3, #0]
 8002044:	1dbb      	adds	r3, r7, #6
 8002046:	1c0a      	adds	r2, r1, #0
 8002048:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 800204a:	1dfb      	adds	r3, r7, #7
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	18db      	adds	r3, r3, r3
 8002052:	b299      	uxth	r1, r3
 8002054:	1dbb      	adds	r3, r7, #6
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	b29b      	uxth	r3, r3
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	4805      	ldr	r0, [pc, #20]	@ (8002074 <sensirion_i2c_hal_write+0x40>)
 800205e:	2464      	movs	r4, #100	@ 0x64
 8002060:	9400      	str	r4, [sp, #0]
 8002062:	f001 fefb 	bl	8003e5c <HAL_I2C_Master_Transmit>
 8002066:	0003      	movs	r3, r0
 8002068:	b25b      	sxtb	r3, r3
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b003      	add	sp, #12
 8002070:	bd90      	pop	{r4, r7, pc}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	200000d4 	.word	0x200000d4

08002078 <sensirion_i2c_hal_sleep_usec>:

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	22fa      	movs	r2, #250	@ 0xfa
 8002084:	0091      	lsls	r1, r2, #2
 8002086:	0018      	movs	r0, r3
 8002088:	f7fe f850 	bl	800012c <__udivsi3>
 800208c:	0003      	movs	r3, r0
 800208e:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	22fa      	movs	r2, #250	@ 0xfa
 8002094:	0091      	lsls	r1, r2, #2
 8002096:	0018      	movs	r0, r3
 8002098:	f7fe f8ce 	bl	8000238 <__aeabi_uidivmod>
 800209c:	1e0b      	subs	r3, r1, #0
 800209e:	d002      	beq.n	80020a6 <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3301      	adds	r3, #1
 80020a4:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_GetHalVersion() < 0x01010100) {
 80020a6:	f000 fd25 	bl	8002af4 <HAL_GetHalVersion>
 80020aa:	0003      	movs	r3, r0
 80020ac:	4a06      	ldr	r2, [pc, #24]	@ (80020c8 <sensirion_i2c_hal_sleep_usec+0x50>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d802      	bhi.n	80020b8 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	3301      	adds	r3, #1
 80020b6:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 fcda 	bl	8002a74 <HAL_Delay>
}
 80020c0:	46c0      	nop			@ (mov r8, r8)
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b004      	add	sp, #16
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	010100ff 	.word	0x010100ff

080020cc <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	0002      	movs	r2, r0
 80020d4:	1dfb      	adds	r3, r7, #7
 80020d6:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <sht4x_init+0x1c>)
 80020da:	1dfa      	adds	r2, r7, #7
 80020dc:	7812      	ldrb	r2, [r2, #0]
 80020de:	701a      	strb	r2, [r3, #0]
}
 80020e0:	46c0      	nop			@ (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000282 	.word	0x20000282

080020ec <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 80020ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 80020f6:	2516      	movs	r5, #22
 80020f8:	197b      	adds	r3, r7, r5
 80020fa:	2200      	movs	r2, #0
 80020fc:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 80020fe:	4b2a      	ldr	r3, [pc, #168]	@ (80021a8 <sht4x_measure_high_precision_ticks+0xbc>)
 8002100:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 8002102:	260e      	movs	r6, #14
 8002104:	19bb      	adds	r3, r7, r6
 8002106:	2200      	movs	r2, #0
 8002108:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 800210a:	19bc      	adds	r4, r7, r6
 800210c:	19bb      	adds	r3, r7, r6
 800210e:	8819      	ldrh	r1, [r3, #0]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	22fd      	movs	r2, #253	@ 0xfd
 8002114:	0018      	movs	r0, r3
 8002116:	f7ff fea4 	bl	8001e62 <sensirion_i2c_add_command8_to_buffer>
 800211a:	0003      	movs	r3, r0
 800211c:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 800211e:	4b23      	ldr	r3, [pc, #140]	@ (80021ac <sht4x_measure_high_precision_ticks+0xc0>)
 8002120:	7818      	ldrb	r0, [r3, #0]
 8002122:	197c      	adds	r4, r7, r5
 8002124:	19bb      	adds	r3, r7, r6
 8002126:	881a      	ldrh	r2, [r3, #0]
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	0019      	movs	r1, r3
 800212c:	f7ff feb6 	bl	8001e9c <sensirion_i2c_write_data>
 8002130:	0003      	movs	r3, r0
 8002132:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8002134:	197b      	adds	r3, r7, r5
 8002136:	2200      	movs	r2, #0
 8002138:	5e9b      	ldrsh	r3, [r3, r2]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 800213e:	197b      	adds	r3, r7, r5
 8002140:	2200      	movs	r2, #0
 8002142:	5e9b      	ldrsh	r3, [r3, r2]
 8002144:	e02c      	b.n	80021a0 <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8002146:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <sht4x_measure_high_precision_ticks+0xc4>)
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff ff95 	bl	8002078 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 800214e:	4b17      	ldr	r3, [pc, #92]	@ (80021ac <sht4x_measure_high_precision_ticks+0xc0>)
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	2516      	movs	r5, #22
 8002154:	197c      	adds	r4, r7, r5
 8002156:	6939      	ldr	r1, [r7, #16]
 8002158:	2204      	movs	r2, #4
 800215a:	0018      	movs	r0, r3
 800215c:	f7ff feb7 	bl	8001ece <sensirion_i2c_read_data_inplace>
 8002160:	0003      	movs	r3, r0
 8002162:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8002164:	197b      	adds	r3, r7, r5
 8002166:	2200      	movs	r2, #0
 8002168:	5e9b      	ldrsh	r3, [r3, r2]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 800216e:	197b      	adds	r3, r7, r5
 8002170:	2200      	movs	r2, #0
 8002172:	5e9b      	ldrsh	r3, [r3, r2]
 8002174:	e014      	b.n	80021a0 <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	0018      	movs	r0, r3
 800217a:	f7ff fde7 	bl	8001d4c <sensirion_common_bytes_to_uint16_t>
 800217e:	0003      	movs	r3, r0
 8002180:	001a      	movs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	3302      	adds	r3, #2
 800218a:	0018      	movs	r0, r3
 800218c:	f7ff fdde 	bl	8001d4c <sensirion_common_bytes_to_uint16_t>
 8002190:	0003      	movs	r3, r0
 8002192:	001a      	movs	r2, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	801a      	strh	r2, [r3, #0]
    return local_error;
 8002198:	2316      	movs	r3, #22
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	2200      	movs	r2, #0
 800219e:	5e9b      	ldrsh	r3, [r3, r2]
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b007      	add	sp, #28
 80021a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021a8:	2000027c 	.word	0x2000027c
 80021ac:	20000282 	.word	0x20000282
 80021b0:	00002710 	.word	0x00002710

080021b4 <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 80021b4:	b5b0      	push	{r4, r5, r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 80021ba:	250e      	movs	r5, #14
 80021bc:	197b      	adds	r3, r7, r5
 80021be:	2200      	movs	r2, #0
 80021c0:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 80021c2:	4b17      	ldr	r3, [pc, #92]	@ (8002220 <sht4x_soft_reset+0x6c>)
 80021c4:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 80021c6:	1dbb      	adds	r3, r7, #6
 80021c8:	2200      	movs	r2, #0
 80021ca:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 80021cc:	1dbc      	adds	r4, r7, #6
 80021ce:	1dbb      	adds	r3, r7, #6
 80021d0:	8819      	ldrh	r1, [r3, #0]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2294      	movs	r2, #148	@ 0x94
 80021d6:	0018      	movs	r0, r3
 80021d8:	f7ff fe43 	bl	8001e62 <sensirion_i2c_add_command8_to_buffer>
 80021dc:	0003      	movs	r3, r0
 80021de:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 80021e0:	4b10      	ldr	r3, [pc, #64]	@ (8002224 <sht4x_soft_reset+0x70>)
 80021e2:	7818      	ldrb	r0, [r3, #0]
 80021e4:	197c      	adds	r4, r7, r5
 80021e6:	1dbb      	adds	r3, r7, #6
 80021e8:	881a      	ldrh	r2, [r3, #0]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	0019      	movs	r1, r3
 80021ee:	f7ff fe55 	bl	8001e9c <sensirion_i2c_write_data>
 80021f2:	0003      	movs	r3, r0
 80021f4:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 80021f6:	197b      	adds	r3, r7, r5
 80021f8:	2200      	movs	r2, #0
 80021fa:	5e9b      	ldrsh	r3, [r3, r2]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <sht4x_soft_reset+0x54>
        return local_error;
 8002200:	197b      	adds	r3, r7, r5
 8002202:	2200      	movs	r2, #0
 8002204:	5e9b      	ldrsh	r3, [r3, r2]
 8002206:	e007      	b.n	8002218 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8002208:	4b07      	ldr	r3, [pc, #28]	@ (8002228 <sht4x_soft_reset+0x74>)
 800220a:	0018      	movs	r0, r3
 800220c:	f7ff ff34 	bl	8002078 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8002210:	230e      	movs	r3, #14
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	2200      	movs	r2, #0
 8002216:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b004      	add	sp, #16
 800221e:	bdb0      	pop	{r4, r5, r7, pc}
 8002220:	2000027c 	.word	0x2000027c
 8002224:	20000282 	.word	0x20000282
 8002228:	00002710 	.word	0x00002710

0800222c <enter_sleep_mode>:
#include "stm32l0xx_hal_adc.h"
#include "stm32l0xx_hal_adc_ex.h"
#include "sleep.h"

void enter_sleep_mode()
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
	ConsolePrintf("Going to sleep...\r\n");
 8002230:	4b53      	ldr	r3, [pc, #332]	@ (8002380 <enter_sleep_mode+0x154>)
 8002232:	0018      	movs	r0, r3
 8002234:	f7ff f878 	bl	8001328 <ConsolePrintf>
	
	// Configure all unused GPIO pins to analog mode for minimum power consumption
	configure_gpio_for_low_power();
 8002238:	f000 f9e4 	bl	8002604 <configure_gpio_for_low_power>
	ConsolePrintf("GPIO configured for low power\r\n");
 800223c:	4b51      	ldr	r3, [pc, #324]	@ (8002384 <enter_sleep_mode+0x158>)
 800223e:	0018      	movs	r0, r3
 8002240:	f7ff f872 	bl	8001328 <ConsolePrintf>
	
	// Properly deinitialize peripherals before sleep
	HAL_I2C_DeInit(&hi2c1);
 8002244:	4b50      	ldr	r3, [pc, #320]	@ (8002388 <enter_sleep_mode+0x15c>)
 8002246:	0018      	movs	r0, r3
 8002248:	f001 fdd8 	bl	8003dfc <HAL_I2C_DeInit>
	ConsolePrintf("I2C deinitialized\r\n");
 800224c:	4b4f      	ldr	r3, [pc, #316]	@ (800238c <enter_sleep_mode+0x160>)
 800224e:	0018      	movs	r0, r3
 8002250:	f7ff f86a 	bl	8001328 <ConsolePrintf>
	HAL_UART_DeInit(&huart1);
 8002254:	4b4e      	ldr	r3, [pc, #312]	@ (8002390 <enter_sleep_mode+0x164>)
 8002256:	0018      	movs	r0, r3
 8002258:	f004 f8b8 	bl	80063cc <HAL_UART_DeInit>
	ConsolePrintf("UART1 deinitialized\r\n");
 800225c:	4b4d      	ldr	r3, [pc, #308]	@ (8002394 <enter_sleep_mode+0x168>)
 800225e:	0018      	movs	r0, r3
 8002260:	f7ff f862 	bl	8001328 <ConsolePrintf>
	HAL_UART_DeInit(&hlpuart1);
 8002264:	4b4c      	ldr	r3, [pc, #304]	@ (8002398 <enter_sleep_mode+0x16c>)
 8002266:	0018      	movs	r0, r3
 8002268:	f004 f8b0 	bl	80063cc <HAL_UART_DeInit>
	ConsolePrintf("LPUART1 deinitialized\r\n");
 800226c:	4b4b      	ldr	r3, [pc, #300]	@ (800239c <enter_sleep_mode+0x170>)
 800226e:	0018      	movs	r0, r3
 8002270:	f7ff f85a 	bl	8001328 <ConsolePrintf>
	MX_ADC_DeInit();
 8002274:	f000 f8f2 	bl	800245c <MX_ADC_DeInit>
	
	// CRITICAL: Disable peripheral clocks completely before sleep
	__HAL_RCC_I2C1_CLK_DISABLE();
 8002278:	4b49      	ldr	r3, [pc, #292]	@ (80023a0 <enter_sleep_mode+0x174>)
 800227a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800227c:	4b48      	ldr	r3, [pc, #288]	@ (80023a0 <enter_sleep_mode+0x174>)
 800227e:	4949      	ldr	r1, [pc, #292]	@ (80023a4 <enter_sleep_mode+0x178>)
 8002280:	400a      	ands	r2, r1
 8002282:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_RCC_USART1_CLK_DISABLE();
 8002284:	4b46      	ldr	r3, [pc, #280]	@ (80023a0 <enter_sleep_mode+0x174>)
 8002286:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002288:	4b45      	ldr	r3, [pc, #276]	@ (80023a0 <enter_sleep_mode+0x174>)
 800228a:	4947      	ldr	r1, [pc, #284]	@ (80023a8 <enter_sleep_mode+0x17c>)
 800228c:	400a      	ands	r2, r1
 800228e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_RCC_LPUART1_CLK_DISABLE();
 8002290:	4b43      	ldr	r3, [pc, #268]	@ (80023a0 <enter_sleep_mode+0x174>)
 8002292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002294:	4b42      	ldr	r3, [pc, #264]	@ (80023a0 <enter_sleep_mode+0x174>)
 8002296:	4945      	ldr	r1, [pc, #276]	@ (80023ac <enter_sleep_mode+0x180>)
 8002298:	400a      	ands	r2, r1
 800229a:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_RCC_ADC1_CLK_DISABLE();
 800229c:	4b40      	ldr	r3, [pc, #256]	@ (80023a0 <enter_sleep_mode+0x174>)
 800229e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022a0:	4b3f      	ldr	r3, [pc, #252]	@ (80023a0 <enter_sleep_mode+0x174>)
 80022a2:	4943      	ldr	r1, [pc, #268]	@ (80023b0 <enter_sleep_mode+0x184>)
 80022a4:	400a      	ands	r2, r1
 80022a6:	635a      	str	r2, [r3, #52]	@ 0x34
	ConsolePrintf("All peripheral clocks disabled\r\n");
 80022a8:	4b42      	ldr	r3, [pc, #264]	@ (80023b4 <enter_sleep_mode+0x188>)
 80022aa:	0018      	movs	r0, r3
 80022ac:	f7ff f83c 	bl	8001328 <ConsolePrintf>
	
	// CRITICAL: Disable VREFINT and temperature sensor to save power
	HAL_ADCEx_DisableVREFINT();
 80022b0:	f001 f966 	bl	8003580 <HAL_ADCEx_DisableVREFINT>
	HAL_ADCEx_DisableVREFINTTempSensor();
 80022b4:	f001 f974 	bl	80035a0 <HAL_ADCEx_DisableVREFINTTempSensor>
	ConsolePrintf("VREFINT and temp sensor disabled\r\n");
 80022b8:	4b3f      	ldr	r3, [pc, #252]	@ (80023b8 <enter_sleep_mode+0x18c>)
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7ff f834 	bl	8001328 <ConsolePrintf>
	
	// CRITICAL: Enable Ultra Low Power mode before entering sleep
	HAL_PWREx_EnableUltraLowPower();
 80022c0:	f002 fd40 	bl	8004d44 <HAL_PWREx_EnableUltraLowPower>
	HAL_PWREx_EnableFastWakeUp();
 80022c4:	f002 fd30 	bl	8004d28 <HAL_PWREx_EnableFastWakeUp>
	ConsolePrintf("Ultra Low Power mode enabled\r\n");
 80022c8:	4b3c      	ldr	r3, [pc, #240]	@ (80023bc <enter_sleep_mode+0x190>)
 80022ca:	0018      	movs	r0, r3
 80022cc:	f7ff f82c 	bl	8001328 <ConsolePrintf>
	
	// Final power state check right before sleep
	ConsolePrintf("=== FINAL POWER CHECK BEFORE SLEEP ===\r\n");
 80022d0:	4b3b      	ldr	r3, [pc, #236]	@ (80023c0 <enter_sleep_mode+0x194>)
 80022d2:	0018      	movs	r0, r3
 80022d4:	f7ff f828 	bl	8001328 <ConsolePrintf>
	debug_power_state();
 80022d8:	f000 fa58 	bl	800278c <debug_power_state>
	
	Enter_Stop_Mode();
 80022dc:	f000 f902 	bl	80024e4 <Enter_Stop_Mode>
	
	ConsolePrintf("Resumed after wake-up\r\n");
 80022e0:	4b38      	ldr	r3, [pc, #224]	@ (80023c4 <enter_sleep_mode+0x198>)
 80022e2:	0018      	movs	r0, r3
 80022e4:	f7ff f820 	bl	8001328 <ConsolePrintf>
	
	// Basic system clock reconfiguration
	SystemClock_Config_Wrapper();
 80022e8:	f7fe fff4 	bl	80012d4 <SystemClock_Config_Wrapper>
	ConsolePrintf("System clock reconfigured\r\n");
 80022ec:	4b36      	ldr	r3, [pc, #216]	@ (80023c8 <enter_sleep_mode+0x19c>)
 80022ee:	0018      	movs	r0, r3
 80022f0:	f7ff f81a 	bl	8001328 <ConsolePrintf>
	
	// Re-enable peripheral clocks
	__HAL_RCC_I2C1_CLK_ENABLE();
 80022f4:	4b2a      	ldr	r3, [pc, #168]	@ (80023a0 <enter_sleep_mode+0x174>)
 80022f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022f8:	4b29      	ldr	r3, [pc, #164]	@ (80023a0 <enter_sleep_mode+0x174>)
 80022fa:	2180      	movs	r1, #128	@ 0x80
 80022fc:	0389      	lsls	r1, r1, #14
 80022fe:	430a      	orrs	r2, r1
 8002300:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_RCC_USART1_CLK_ENABLE();
 8002302:	4b27      	ldr	r3, [pc, #156]	@ (80023a0 <enter_sleep_mode+0x174>)
 8002304:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002306:	4b26      	ldr	r3, [pc, #152]	@ (80023a0 <enter_sleep_mode+0x174>)
 8002308:	2180      	movs	r1, #128	@ 0x80
 800230a:	01c9      	lsls	r1, r1, #7
 800230c:	430a      	orrs	r2, r1
 800230e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_RCC_LPUART1_CLK_ENABLE();
 8002310:	4b23      	ldr	r3, [pc, #140]	@ (80023a0 <enter_sleep_mode+0x174>)
 8002312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002314:	4b22      	ldr	r3, [pc, #136]	@ (80023a0 <enter_sleep_mode+0x174>)
 8002316:	2180      	movs	r1, #128	@ 0x80
 8002318:	02c9      	lsls	r1, r1, #11
 800231a:	430a      	orrs	r2, r1
 800231c:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_RCC_ADC1_CLK_ENABLE();
 800231e:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <enter_sleep_mode+0x174>)
 8002320:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002322:	4b1f      	ldr	r3, [pc, #124]	@ (80023a0 <enter_sleep_mode+0x174>)
 8002324:	2180      	movs	r1, #128	@ 0x80
 8002326:	0089      	lsls	r1, r1, #2
 8002328:	430a      	orrs	r2, r1
 800232a:	635a      	str	r2, [r3, #52]	@ 0x34
	ConsolePrintf("Peripheral clocks re-enabled\r\n");
 800232c:	4b27      	ldr	r3, [pc, #156]	@ (80023cc <enter_sleep_mode+0x1a0>)
 800232e:	0018      	movs	r0, r3
 8002330:	f7fe fffa 	bl	8001328 <ConsolePrintf>
	
	// Restore GPIO configuration after sleep
	restore_gpio_after_sleep();
 8002334:	f000 fa22 	bl	800277c <restore_gpio_after_sleep>
	ConsolePrintf("GPIO restored\r\n");
 8002338:	4b25      	ldr	r3, [pc, #148]	@ (80023d0 <enter_sleep_mode+0x1a4>)
 800233a:	0018      	movs	r0, r3
 800233c:	f7fe fff4 	bl	8001328 <ConsolePrintf>
	
	// Re-initialize peripherals
	MX_I2C1_Init_Wrapper();
 8002340:	f7fe ffd6 	bl	80012f0 <MX_I2C1_Init_Wrapper>
	ConsolePrintf("I2C1 reinitialized\r\n");
 8002344:	4b23      	ldr	r3, [pc, #140]	@ (80023d4 <enter_sleep_mode+0x1a8>)
 8002346:	0018      	movs	r0, r3
 8002348:	f7fe ffee 	bl	8001328 <ConsolePrintf>
	
	MX_USART1_UART_Init_Wrapper();
 800234c:	f7fe ffd7 	bl	80012fe <MX_USART1_UART_Init_Wrapper>
	ConsolePrintf("UART reinitialized\r\n");
 8002350:	4b21      	ldr	r3, [pc, #132]	@ (80023d8 <enter_sleep_mode+0x1ac>)
 8002352:	0018      	movs	r0, r3
 8002354:	f7fe ffe8 	bl	8001328 <ConsolePrintf>
	
	MX_LPUART1_UART_Init_Wrapper();
 8002358:	f7fe ffd8 	bl	800130c <MX_LPUART1_UART_Init_Wrapper>
	ConsolePrintf("LPUART1 (lora) reinitialized\r\n");
 800235c:	4b1f      	ldr	r3, [pc, #124]	@ (80023dc <enter_sleep_mode+0x1b0>)
 800235e:	0018      	movs	r0, r3
 8002360:	f7fe ffe2 	bl	8001328 <ConsolePrintf>
	
	MX_ADC_Init_Wrapper();
 8002364:	f7fe ffd9 	bl	800131a <MX_ADC_Init_Wrapper>
	ConsolePrintf("ADC reinitialized\r\n");
 8002368:	4b1d      	ldr	r3, [pc, #116]	@ (80023e0 <enter_sleep_mode+0x1b4>)
 800236a:	0018      	movs	r0, r3
 800236c:	f7fe ffdc 	bl	8001328 <ConsolePrintf>
	
	ConsolePrintf("Wake-up sequence complete - peripherals ready\r\n");
 8002370:	4b1c      	ldr	r3, [pc, #112]	@ (80023e4 <enter_sleep_mode+0x1b8>)
 8002372:	0018      	movs	r0, r3
 8002374:	f7fe ffd8 	bl	8001328 <ConsolePrintf>
}
 8002378:	46c0      	nop			@ (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			@ (mov r8, r8)
 8002380:	0800841c 	.word	0x0800841c
 8002384:	08008430 	.word	0x08008430
 8002388:	200000d4 	.word	0x200000d4
 800238c:	08008450 	.word	0x08008450
 8002390:	200001b0 	.word	0x200001b0
 8002394:	08008464 	.word	0x08008464
 8002398:	20000128 	.word	0x20000128
 800239c:	0800847c 	.word	0x0800847c
 80023a0:	40021000 	.word	0x40021000
 80023a4:	ffdfffff 	.word	0xffdfffff
 80023a8:	ffffbfff 	.word	0xffffbfff
 80023ac:	fffbffff 	.word	0xfffbffff
 80023b0:	fffffdff 	.word	0xfffffdff
 80023b4:	08008494 	.word	0x08008494
 80023b8:	080084b8 	.word	0x080084b8
 80023bc:	080084dc 	.word	0x080084dc
 80023c0:	080084fc 	.word	0x080084fc
 80023c4:	08008528 	.word	0x08008528
 80023c8:	08008540 	.word	0x08008540
 80023cc:	0800855c 	.word	0x0800855c
 80023d0:	0800857c 	.word	0x0800857c
 80023d4:	0800858c 	.word	0x0800858c
 80023d8:	080085a4 	.word	0x080085a4
 80023dc:	080085bc 	.word	0x080085bc
 80023e0:	080085dc 	.word	0x080085dc
 80023e4:	080085f0 	.word	0x080085f0

080023e8 <RTC_WakeUp_Init>:

void RTC_WakeUp_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  ConsolePrintf("Starting RTC Wake-Up Timer configuration\r\n");
 80023ec:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <RTC_WakeUp_Init+0x5c>)
 80023ee:	0018      	movs	r0, r3
 80023f0:	f7fe ff9a 	bl	8001328 <ConsolePrintf>

  // Disable the Wake-Up Timer before configuring
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80023f4:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <RTC_WakeUp_Init+0x60>)
 80023f6:	0018      	movs	r0, r3
 80023f8:	f003 ff00 	bl	80061fc <HAL_RTCEx_DeactivateWakeUpTimer>
  ConsolePrintf("RTC Wake-Up Timer disabled\r\n");
 80023fc:	4b13      	ldr	r3, [pc, #76]	@ (800244c <RTC_WakeUp_Init+0x64>)
 80023fe:	0018      	movs	r0, r3
 8002400:	f7fe ff92 	bl	8001328 <ConsolePrintf>

  // Configure Wake-Up Timer for 60 seconds using LSI (~40 kHz)
  // With AsynchPrediv = 127, SynchPrediv = 255: CK_SPRE = 40,000 / (128 * 256) = ~1.22 Hz
  // For ~60 seconds: WakeUpCounter = (60 * 1.22) - 1 = ~72
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002404:	4b10      	ldr	r3, [pc, #64]	@ (8002448 <RTC_WakeUp_Init+0x60>)
 8002406:	2204      	movs	r2, #4
 8002408:	213b      	movs	r1, #59	@ 0x3b
 800240a:	0018      	movs	r0, r3
 800240c:	f003 fe1e 	bl	800604c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002410:	1e03      	subs	r3, r0, #0
 8002412:	d004      	beq.n	800241e <RTC_WakeUp_Init+0x36>
  {
    ConsolePrintf("RTC Wake-Up Timer Init Failed\r\n");
 8002414:	4b0e      	ldr	r3, [pc, #56]	@ (8002450 <RTC_WakeUp_Init+0x68>)
 8002416:	0018      	movs	r0, r3
 8002418:	f7fe ff86 	bl	8001328 <ConsolePrintf>
 800241c:	e003      	b.n	8002426 <RTC_WakeUp_Init+0x3e>
  }
  else
  {
    ConsolePrintf("RTC Wake-Up Timer Initialized for ~60 seconds\r\n");
 800241e:	4b0d      	ldr	r3, [pc, #52]	@ (8002454 <RTC_WakeUp_Init+0x6c>)
 8002420:	0018      	movs	r0, r3
 8002422:	f7fe ff81 	bl	8001328 <ConsolePrintf>
  }

  // Enable RTC Wake-Up interrupt in NVIC
  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2100      	movs	r1, #0
 800242a:	2002      	movs	r0, #2
 800242c:	f001 f974 	bl	8003718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 8002430:	2002      	movs	r0, #2
 8002432:	f001 f986 	bl	8003742 <HAL_NVIC_EnableIRQ>
  ConsolePrintf("RTC Wake-Up interrupt enabled in NVIC\r\n");
 8002436:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <RTC_WakeUp_Init+0x70>)
 8002438:	0018      	movs	r0, r3
 800243a:	f7fe ff75 	bl	8001328 <ConsolePrintf>
}
 800243e:	46c0      	nop			@ (mov r8, r8)
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	08008620 	.word	0x08008620
 8002448:	20000238 	.word	0x20000238
 800244c:	0800864c 	.word	0x0800864c
 8002450:	0800866c 	.word	0x0800866c
 8002454:	0800868c 	.word	0x0800868c
 8002458:	080086bc 	.word	0x080086bc

0800245c <MX_ADC_DeInit>:

void MX_ADC_DeInit(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
    ConsolePrintf("Deinitializing ADC...\r\n");
 8002460:	4b17      	ldr	r3, [pc, #92]	@ (80024c0 <MX_ADC_DeInit+0x64>)
 8002462:	0018      	movs	r0, r3
 8002464:	f7fe ff60 	bl	8001328 <ConsolePrintf>
    
    /* 1) Stop any ongoing ADC conversions */
    if (HAL_ADC_Stop(&hadc) != HAL_OK) {
 8002468:	4b16      	ldr	r3, [pc, #88]	@ (80024c4 <MX_ADC_DeInit+0x68>)
 800246a:	0018      	movs	r0, r3
 800246c:	f000 fdc4 	bl	8002ff8 <HAL_ADC_Stop>
 8002470:	1e03      	subs	r3, r0, #0
 8002472:	d003      	beq.n	800247c <MX_ADC_DeInit+0x20>
        ConsolePrintf("ADC Stop failed\r\n");
 8002474:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <MX_ADC_DeInit+0x6c>)
 8002476:	0018      	movs	r0, r3
 8002478:	f7fe ff56 	bl	8001328 <ConsolePrintf>
    }
    
    /* 2) De‑initialize the ADC handle */
    if (HAL_ADC_DeInit(&hadc) != HAL_OK) {
 800247c:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <MX_ADC_DeInit+0x68>)
 800247e:	0018      	movs	r0, r3
 8002480:	f000 fcca 	bl	8002e18 <HAL_ADC_DeInit>
 8002484:	1e03      	subs	r3, r0, #0
 8002486:	d005      	beq.n	8002494 <MX_ADC_DeInit+0x38>
        ConsolePrintf("ADC DeInit failed\r\n");
 8002488:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <MX_ADC_DeInit+0x70>)
 800248a:	0018      	movs	r0, r3
 800248c:	f7fe ff4c 	bl	8001328 <ConsolePrintf>
        Error_Handler();
 8002490:	f7fe ffc0 	bl	8001414 <Error_Handler>
    }
    
    /* 3) Disable the ADC clock */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002494:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <MX_ADC_DeInit+0x74>)
 8002496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002498:	4b0d      	ldr	r3, [pc, #52]	@ (80024d0 <MX_ADC_DeInit+0x74>)
 800249a:	490e      	ldr	r1, [pc, #56]	@ (80024d4 <MX_ADC_DeInit+0x78>)
 800249c:	400a      	ands	r2, r1
 800249e:	635a      	str	r2, [r3, #52]	@ 0x34
    ConsolePrintf("ADC clock disabled\r\n");
 80024a0:	4b0d      	ldr	r3, [pc, #52]	@ (80024d8 <MX_ADC_DeInit+0x7c>)
 80024a2:	0018      	movs	r0, r3
 80024a4:	f7fe ff40 	bl	8001328 <ConsolePrintf>

    /* 4) Reset the GPIO pin back to its default state (analog mode) */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 80024a8:	4b0c      	ldr	r3, [pc, #48]	@ (80024dc <MX_ADC_DeInit+0x80>)
 80024aa:	2102      	movs	r1, #2
 80024ac:	0018      	movs	r0, r3
 80024ae:	f001 fae3 	bl	8003a78 <HAL_GPIO_DeInit>
    
    ConsolePrintf("ADC deinitialization complete\r\n");
 80024b2:	4b0b      	ldr	r3, [pc, #44]	@ (80024e0 <MX_ADC_DeInit+0x84>)
 80024b4:	0018      	movs	r0, r3
 80024b6:	f7fe ff37 	bl	8001328 <ConsolePrintf>
}
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	080086e4 	.word	0x080086e4
 80024c4:	20000078 	.word	0x20000078
 80024c8:	080086fc 	.word	0x080086fc
 80024cc:	08008710 	.word	0x08008710
 80024d0:	40021000 	.word	0x40021000
 80024d4:	fffffdff 	.word	0xfffffdff
 80024d8:	08008724 	.word	0x08008724
 80024dc:	50000400 	.word	0x50000400
 80024e0:	0800873c 	.word	0x0800873c

080024e4 <Enter_Stop_Mode>:

void Enter_Stop_Mode(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  ConsolePrintf("Preparing to enter Stop mode\r\n");
 80024e8:	4b34      	ldr	r3, [pc, #208]	@ (80025bc <Enter_Stop_Mode+0xd8>)
 80024ea:	0018      	movs	r0, r3
 80024ec:	f7fe ff1c 	bl	8001328 <ConsolePrintf>

  // CRITICAL: Apply Kevin Cantrell's GPIO optimization RIGHT before sleep
  configure_gpio_for_low_power();
 80024f0:	f000 f888 	bl	8002604 <configure_gpio_for_low_power>
  ConsolePrintf("GPIO re-optimized immediately before sleep\r\n");
 80024f4:	4b32      	ldr	r3, [pc, #200]	@ (80025c0 <Enter_Stop_Mode+0xdc>)
 80024f6:	0018      	movs	r0, r3
 80024f8:	f7fe ff16 	bl	8001328 <ConsolePrintf>
  
  // CRITICAL: Disable VREFINT immediately before sleep for ultra-low power
  // This is the key to getting <5µA sleep current
  HAL_ADCEx_DisableVREFINT();
 80024fc:	f001 f840 	bl	8003580 <HAL_ADCEx_DisableVREFINT>
  HAL_ADCEx_DisableVREFINTTempSensor();
 8002500:	f001 f84e 	bl	80035a0 <HAL_ADCEx_DisableVREFINTTempSensor>
  ConsolePrintf("VREFINT force-disabled before sleep\r\n");
 8002504:	4b2f      	ldr	r3, [pc, #188]	@ (80025c4 <Enter_Stop_Mode+0xe0>)
 8002506:	0018      	movs	r0, r3
 8002508:	f7fe ff0e 	bl	8001328 <ConsolePrintf>
  
  // CRITICAL: Disable additional peripheral clocks that might consume power
  __HAL_RCC_DMA1_CLK_DISABLE();
 800250c:	4b2e      	ldr	r3, [pc, #184]	@ (80025c8 <Enter_Stop_Mode+0xe4>)
 800250e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002510:	4b2d      	ldr	r3, [pc, #180]	@ (80025c8 <Enter_Stop_Mode+0xe4>)
 8002512:	2101      	movs	r1, #1
 8002514:	438a      	bics	r2, r1
 8002516:	631a      	str	r2, [r3, #48]	@ 0x30
  __HAL_RCC_CRC_CLK_DISABLE();
 8002518:	4b2b      	ldr	r3, [pc, #172]	@ (80025c8 <Enter_Stop_Mode+0xe4>)
 800251a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800251c:	4b2a      	ldr	r3, [pc, #168]	@ (80025c8 <Enter_Stop_Mode+0xe4>)
 800251e:	492b      	ldr	r1, [pc, #172]	@ (80025cc <Enter_Stop_Mode+0xe8>)
 8002520:	400a      	ands	r2, r1
 8002522:	631a      	str	r2, [r3, #48]	@ 0x30
  ConsolePrintf("Additional peripheral clocks disabled\r\n");
 8002524:	4b2a      	ldr	r3, [pc, #168]	@ (80025d0 <Enter_Stop_Mode+0xec>)
 8002526:	0018      	movs	r0, r3
 8002528:	f7fe fefe 	bl	8001328 <ConsolePrintf>
  
  // CRITICAL: Additional power optimizations for ultra-low power
  // Disable any remaining high-power peripherals
  __HAL_RCC_TIM2_CLK_DISABLE();
 800252c:	4b26      	ldr	r3, [pc, #152]	@ (80025c8 <Enter_Stop_Mode+0xe4>)
 800252e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002530:	4b25      	ldr	r3, [pc, #148]	@ (80025c8 <Enter_Stop_Mode+0xe4>)
 8002532:	2101      	movs	r1, #1
 8002534:	438a      	bics	r2, r1
 8002536:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_RCC_TIM21_CLK_DISABLE();
 8002538:	4b23      	ldr	r3, [pc, #140]	@ (80025c8 <Enter_Stop_Mode+0xe4>)
 800253a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800253c:	4b22      	ldr	r3, [pc, #136]	@ (80025c8 <Enter_Stop_Mode+0xe4>)
 800253e:	2104      	movs	r1, #4
 8002540:	438a      	bics	r2, r1
 8002542:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_TIM22_CLK_DISABLE();
 8002544:	4b20      	ldr	r3, [pc, #128]	@ (80025c8 <Enter_Stop_Mode+0xe4>)
 8002546:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002548:	4b1f      	ldr	r3, [pc, #124]	@ (80025c8 <Enter_Stop_Mode+0xe4>)
 800254a:	2120      	movs	r1, #32
 800254c:	438a      	bics	r2, r1
 800254e:	635a      	str	r2, [r3, #52]	@ 0x34
  ConsolePrintf("Timer clocks disabled\r\n");
 8002550:	4b20      	ldr	r3, [pc, #128]	@ (80025d4 <Enter_Stop_Mode+0xf0>)
 8002552:	0018      	movs	r0, r3
 8002554:	f7fe fee8 	bl	8001328 <ConsolePrintf>
  
  // Verify and force Ultra Low Power mode
  HAL_PWREx_EnableUltraLowPower();
 8002558:	f002 fbf4 	bl	8004d44 <HAL_PWREx_EnableUltraLowPower>
  HAL_PWREx_EnableFastWakeUp();
 800255c:	f002 fbe4 	bl	8004d28 <HAL_PWREx_EnableFastWakeUp>
  ConsolePrintf("ULP mode verified and enabled before sleep\r\n");
 8002560:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <Enter_Stop_Mode+0xf4>)
 8002562:	0018      	movs	r0, r3
 8002564:	f7fe fee0 	bl	8001328 <ConsolePrintf>
  
  // CRITICAL: One final VREFINT disable (sometimes it gets re-enabled)
  HAL_ADCEx_DisableVREFINT();
 8002568:	f001 f80a 	bl	8003580 <HAL_ADCEx_DisableVREFINT>
  HAL_ADCEx_DisableVREFINTTempSensor();
 800256c:	f001 f818 	bl	80035a0 <HAL_ADCEx_DisableVREFINTTempSensor>
  ConsolePrintf("VREFINT double-check disabled\r\n");
 8002570:	4b1a      	ldr	r3, [pc, #104]	@ (80025dc <Enter_Stop_Mode+0xf8>)
 8002572:	0018      	movs	r0, r3
 8002574:	f7fe fed8 	bl	8001328 <ConsolePrintf>

  // Clear Wake-Up flag
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8002578:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <Enter_Stop_Mode+0xfc>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	22ff      	movs	r2, #255	@ 0xff
 8002580:	401a      	ands	r2, r3
 8002582:	4b17      	ldr	r3, [pc, #92]	@ (80025e0 <Enter_Stop_Mode+0xfc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4917      	ldr	r1, [pc, #92]	@ (80025e4 <Enter_Stop_Mode+0x100>)
 8002588:	430a      	orrs	r2, r1
 800258a:	60da      	str	r2, [r3, #12]
  ConsolePrintf("RTC Wake-Up flag cleared\r\n");
 800258c:	4b16      	ldr	r3, [pc, #88]	@ (80025e8 <Enter_Stop_Mode+0x104>)
 800258e:	0018      	movs	r0, r3
 8002590:	f7fe feca 	bl	8001328 <ConsolePrintf>

  // Enter Stop mode (low-power mode)
  ConsolePrintf("Entering Stop mode\r\n");
 8002594:	4b15      	ldr	r3, [pc, #84]	@ (80025ec <Enter_Stop_Mode+0x108>)
 8002596:	0018      	movs	r0, r3
 8002598:	f7fe fec6 	bl	8001328 <ConsolePrintf>
  /* Suspend SysTick to prevent it from waking up the MCU immediately */
  HAL_SuspendTick();
 800259c:	f000 fa8e 	bl	8002abc <HAL_SuspendTick>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80025a0:	2101      	movs	r1, #1
 80025a2:	2001      	movs	r0, #1
 80025a4:	f002 fb64 	bl	8004c70 <HAL_PWR_EnterSTOPMode>
  /* Resume SysTick after waking up */
  HAL_ResumeTick();
 80025a8:	f000 fa96 	bl	8002ad8 <HAL_ResumeTick>
  
  ConsolePrintf("Exited Stop mode\r\n");
 80025ac:	4b10      	ldr	r3, [pc, #64]	@ (80025f0 <Enter_Stop_Mode+0x10c>)
 80025ae:	0018      	movs	r0, r3
 80025b0:	f7fe feba 	bl	8001328 <ConsolePrintf>
}
 80025b4:	46c0      	nop			@ (mov r8, r8)
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			@ (mov r8, r8)
 80025bc:	0800875c 	.word	0x0800875c
 80025c0:	0800877c 	.word	0x0800877c
 80025c4:	080087ac 	.word	0x080087ac
 80025c8:	40021000 	.word	0x40021000
 80025cc:	ffffefff 	.word	0xffffefff
 80025d0:	080087d4 	.word	0x080087d4
 80025d4:	080087fc 	.word	0x080087fc
 80025d8:	08008814 	.word	0x08008814
 80025dc:	08008844 	.word	0x08008844
 80025e0:	20000238 	.word	0x20000238
 80025e4:	fffffb7f 	.word	0xfffffb7f
 80025e8:	08008864 	.word	0x08008864
 80025ec:	08008880 	.word	0x08008880
 80025f0:	08008898 	.word	0x08008898

080025f4 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  // System clock will be reconfigured in the main wake-up sequence
  // No need to do it here to avoid conflicts
}
 80025fc:	46c0      	nop			@ (mov r8, r8)
 80025fe:	46bd      	mov	sp, r7
 8002600:	b002      	add	sp, #8
 8002602:	bd80      	pop	{r7, pc}

08002604 <configure_gpio_for_low_power>:

void configure_gpio_for_low_power(void)
{
 8002604:	b590      	push	{r4, r7, lr}
 8002606:	b08b      	sub	sp, #44	@ 0x2c
 8002608:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260a:	2414      	movs	r4, #20
 800260c:	193b      	adds	r3, r7, r4
 800260e:	0018      	movs	r0, r3
 8002610:	2314      	movs	r3, #20
 8002612:	001a      	movs	r2, r3
 8002614:	2100      	movs	r1, #0
 8002616:	f004 ff91 	bl	800753c <memset>
    
    // Enable all GPIO clocks first
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800261a:	4b4f      	ldr	r3, [pc, #316]	@ (8002758 <configure_gpio_for_low_power+0x154>)
 800261c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800261e:	4b4e      	ldr	r3, [pc, #312]	@ (8002758 <configure_gpio_for_low_power+0x154>)
 8002620:	2101      	movs	r1, #1
 8002622:	430a      	orrs	r2, r1
 8002624:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002626:	4b4c      	ldr	r3, [pc, #304]	@ (8002758 <configure_gpio_for_low_power+0x154>)
 8002628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262a:	2201      	movs	r2, #1
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
 8002630:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002632:	4b49      	ldr	r3, [pc, #292]	@ (8002758 <configure_gpio_for_low_power+0x154>)
 8002634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002636:	4b48      	ldr	r3, [pc, #288]	@ (8002758 <configure_gpio_for_low_power+0x154>)
 8002638:	2102      	movs	r1, #2
 800263a:	430a      	orrs	r2, r1
 800263c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800263e:	4b46      	ldr	r3, [pc, #280]	@ (8002758 <configure_gpio_for_low_power+0x154>)
 8002640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002642:	2202      	movs	r2, #2
 8002644:	4013      	ands	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800264a:	4b43      	ldr	r3, [pc, #268]	@ (8002758 <configure_gpio_for_low_power+0x154>)
 800264c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800264e:	4b42      	ldr	r3, [pc, #264]	@ (8002758 <configure_gpio_for_low_power+0x154>)
 8002650:	2104      	movs	r1, #4
 8002652:	430a      	orrs	r2, r1
 8002654:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002656:	4b40      	ldr	r3, [pc, #256]	@ (8002758 <configure_gpio_for_low_power+0x154>)
 8002658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265a:	2204      	movs	r2, #4
 800265c:	4013      	ands	r3, r2
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOH_CLK_ENABLE(); // Don't forget GPIOH for ultra-low power
 8002662:	4b3d      	ldr	r3, [pc, #244]	@ (8002758 <configure_gpio_for_low_power+0x154>)
 8002664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002666:	4b3c      	ldr	r3, [pc, #240]	@ (8002758 <configure_gpio_for_low_power+0x154>)
 8002668:	2180      	movs	r1, #128	@ 0x80
 800266a:	430a      	orrs	r2, r1
 800266c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800266e:	4b3a      	ldr	r3, [pc, #232]	@ (8002758 <configure_gpio_for_low_power+0x154>)
 8002670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002672:	2280      	movs	r2, #128	@ 0x80
 8002674:	4013      	ands	r3, r2
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
    // Kevin Cantrell's optimized GPIO configuration for ultra-low power
    // CRITICAL: Be very careful with pin selection - avoid pins used by system
    
    // GPIOA: Set unused pins to analog mode (EXCLUDE PA13/PA14 for SWD debug)
    // Also exclude any pins used by the application
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | 
 800267a:	193b      	adds	r3, r7, r4
 800267c:	4a37      	ldr	r2, [pc, #220]	@ (800275c <configure_gpio_for_low_power+0x158>)
 800267e:	601a      	str	r2, [r3, #0]
                          GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | 
                          GPIO_PIN_12 | GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002680:	193b      	adds	r3, r7, r4
 8002682:	2203      	movs	r2, #3
 8002684:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	193b      	adds	r3, r7, r4
 8002688:	2200      	movs	r2, #0
 800268a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	193b      	adds	r3, r7, r4
 800268e:	2200      	movs	r2, #0
 8002690:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002692:	193a      	adds	r2, r7, r4
 8002694:	23a0      	movs	r3, #160	@ 0xa0
 8002696:	05db      	lsls	r3, r3, #23
 8002698:	0011      	movs	r1, r2
 800269a:	0018      	movs	r0, r3
 800269c:	f001 f86e 	bl	800377c <HAL_GPIO_Init>

    // GPIOB: Critical optimization - set some pins as output LOW first
    // PB5 is I2C_ENABLE - set it LOW to disable I2C power during sleep
    GPIO_InitStruct.Pin = GPIO_PIN_5; // I2C_ENABLE pin
 80026a0:	193b      	adds	r3, r7, r4
 80026a2:	2220      	movs	r2, #32
 80026a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026a6:	193b      	adds	r3, r7, r4
 80026a8:	2201      	movs	r2, #1
 80026aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	193b      	adds	r3, r7, r4
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	193b      	adds	r3, r7, r4
 80026b4:	2200      	movs	r2, #0
 80026b6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026b8:	193b      	adds	r3, r7, r4
 80026ba:	4a29      	ldr	r2, [pc, #164]	@ (8002760 <configure_gpio_for_low_power+0x15c>)
 80026bc:	0019      	movs	r1, r3
 80026be:	0010      	movs	r0, r2
 80026c0:	f001 f85c 	bl	800377c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // Turn OFF I2C power
 80026c4:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <configure_gpio_for_low_power+0x15c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	2120      	movs	r1, #32
 80026ca:	0018      	movs	r0, r3
 80026cc:	f001 fad3 	bl	8003c76 <HAL_GPIO_WritePin>
    ConsolePrintf("I2C power disabled during sleep (PB5 = LOW)\r\n");
 80026d0:	4b24      	ldr	r3, [pc, #144]	@ (8002764 <configure_gpio_for_low_power+0x160>)
 80026d2:	0018      	movs	r0, r3
 80026d4:	f7fe fe28 	bl	8001328 <ConsolePrintf>
    
    // Set other GPIOB pins to analog (exclude PB6/PB7 which might be I2C pins)
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | 
 80026d8:	193b      	adds	r3, r7, r4
 80026da:	4a23      	ldr	r2, [pc, #140]	@ (8002768 <configure_gpio_for_low_power+0x164>)
 80026dc:	601a      	str	r2, [r3, #0]
                          GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | 
                          GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026de:	193b      	adds	r3, r7, r4
 80026e0:	2203      	movs	r2, #3
 80026e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	193b      	adds	r3, r7, r4
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ea:	193b      	adds	r3, r7, r4
 80026ec:	2200      	movs	r2, #0
 80026ee:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f0:	193b      	adds	r3, r7, r4
 80026f2:	4a1b      	ldr	r2, [pc, #108]	@ (8002760 <configure_gpio_for_low_power+0x15c>)
 80026f4:	0019      	movs	r1, r3
 80026f6:	0010      	movs	r0, r2
 80026f8:	f001 f840 	bl	800377c <HAL_GPIO_Init>

    // GPIOC: Set ALL pins to analog mode (usually safe)
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | 
 80026fc:	193b      	adds	r3, r7, r4
 80026fe:	4a1b      	ldr	r2, [pc, #108]	@ (800276c <configure_gpio_for_low_power+0x168>)
 8002700:	601a      	str	r2, [r3, #0]
                          GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | 
                          GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002702:	193b      	adds	r3, r7, r4
 8002704:	2203      	movs	r2, #3
 8002706:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	193b      	adds	r3, r7, r4
 800270a:	2200      	movs	r2, #0
 800270c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	193b      	adds	r3, r7, r4
 8002710:	2200      	movs	r2, #0
 8002712:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002714:	193b      	adds	r3, r7, r4
 8002716:	4a16      	ldr	r2, [pc, #88]	@ (8002770 <configure_gpio_for_low_power+0x16c>)
 8002718:	0019      	movs	r1, r3
 800271a:	0010      	movs	r0, r2
 800271c:	f001 f82e 	bl	800377c <HAL_GPIO_Init>
    
    // GPIOH: Usually just H0 and H1 on STM32L0, set to analog for lowest power
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002720:	0021      	movs	r1, r4
 8002722:	187b      	adds	r3, r7, r1
 8002724:	2203      	movs	r2, #3
 8002726:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002728:	187b      	adds	r3, r7, r1
 800272a:	2203      	movs	r2, #3
 800272c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	187b      	adds	r3, r7, r1
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002734:	187b      	adds	r3, r7, r1
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800273a:	187b      	adds	r3, r7, r1
 800273c:	4a0d      	ldr	r2, [pc, #52]	@ (8002774 <configure_gpio_for_low_power+0x170>)
 800273e:	0019      	movs	r1, r3
 8002740:	0010      	movs	r0, r2
 8002742:	f001 f81b 	bl	800377c <HAL_GPIO_Init>
    
    ConsolePrintf("All unused GPIO pins optimized for ultra-low power\r\n");
 8002746:	4b0c      	ldr	r3, [pc, #48]	@ (8002778 <configure_gpio_for_low_power+0x174>)
 8002748:	0018      	movs	r0, r3
 800274a:	f7fe fded 	bl	8001328 <ConsolePrintf>
}
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	46bd      	mov	sp, r7
 8002752:	b00b      	add	sp, #44	@ 0x2c
 8002754:	bd90      	pop	{r4, r7, pc}
 8002756:	46c0      	nop			@ (mov r8, r8)
 8002758:	40021000 	.word	0x40021000
 800275c:	000099fb 	.word	0x000099fb
 8002760:	50000400 	.word	0x50000400
 8002764:	080088ac 	.word	0x080088ac
 8002768:	0000ff1f 	.word	0x0000ff1f
 800276c:	0000ffff 	.word	0x0000ffff
 8002770:	50000800 	.word	0x50000800
 8002774:	50001c00 	.word	0x50001c00
 8002778:	080088dc 	.word	0x080088dc

0800277c <restore_gpio_after_sleep>:

void restore_gpio_after_sleep(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
    // Re-initialize GPIO pins that need to be restored after sleep
    // This should restore only the pins that are actually used
    // Most pins can remain in analog mode
    MX_GPIO_Init_Wrapper(); // This will restore the necessary GPIO configurations
 8002780:	f7fe fdaf 	bl	80012e2 <MX_GPIO_Init_Wrapper>
}
 8002784:	46c0      	nop			@ (mov r8, r8)
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <debug_power_state>:

void debug_power_state(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
    ConsolePrintf("=== POWER DEBUG ===\r\n");
 8002790:	4b44      	ldr	r3, [pc, #272]	@ (80028a4 <debug_power_state+0x118>)
 8002792:	0018      	movs	r0, r3
 8002794:	f7fe fdc8 	bl	8001328 <ConsolePrintf>
    
    // Check Ultra Low Power mode status
    if (READ_BIT(PWR->CR, PWR_CR_ULP) != 0) {
 8002798:	4b43      	ldr	r3, [pc, #268]	@ (80028a8 <debug_power_state+0x11c>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	2380      	movs	r3, #128	@ 0x80
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	d004      	beq.n	80027ae <debug_power_state+0x22>
        ConsolePrintf("ULP mode: ENABLED\r\n");
 80027a4:	4b41      	ldr	r3, [pc, #260]	@ (80028ac <debug_power_state+0x120>)
 80027a6:	0018      	movs	r0, r3
 80027a8:	f7fe fdbe 	bl	8001328 <ConsolePrintf>
 80027ac:	e003      	b.n	80027b6 <debug_power_state+0x2a>
    } else {
        ConsolePrintf("ULP mode: DISABLED\r\n");
 80027ae:	4b40      	ldr	r3, [pc, #256]	@ (80028b0 <debug_power_state+0x124>)
 80027b0:	0018      	movs	r0, r3
 80027b2:	f7fe fdb9 	bl	8001328 <ConsolePrintf>
    }
    
    // Check Fast Wake-up mode
    if (READ_BIT(PWR->CR, PWR_CR_FWU) != 0) {
 80027b6:	4b3c      	ldr	r3, [pc, #240]	@ (80028a8 <debug_power_state+0x11c>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	2380      	movs	r3, #128	@ 0x80
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4013      	ands	r3, r2
 80027c0:	d004      	beq.n	80027cc <debug_power_state+0x40>
        ConsolePrintf("Fast Wake: ENABLED\r\n");
 80027c2:	4b3c      	ldr	r3, [pc, #240]	@ (80028b4 <debug_power_state+0x128>)
 80027c4:	0018      	movs	r0, r3
 80027c6:	f7fe fdaf 	bl	8001328 <ConsolePrintf>
 80027ca:	e003      	b.n	80027d4 <debug_power_state+0x48>
    } else {
        ConsolePrintf("Fast Wake: DISABLED\r\n");
 80027cc:	4b3a      	ldr	r3, [pc, #232]	@ (80028b8 <debug_power_state+0x12c>)
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7fe fdaa 	bl	8001328 <ConsolePrintf>
    }
    
    // Check VREFINT status
    if (READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT) != 0) {
 80027d4:	4b39      	ldr	r3, [pc, #228]	@ (80028bc <debug_power_state+0x130>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	2201      	movs	r2, #1
 80027da:	4013      	ands	r3, r2
 80027dc:	d004      	beq.n	80027e8 <debug_power_state+0x5c>
        ConsolePrintf("VREFINT: ENABLED (HIGH POWER!)\r\n");
 80027de:	4b38      	ldr	r3, [pc, #224]	@ (80028c0 <debug_power_state+0x134>)
 80027e0:	0018      	movs	r0, r3
 80027e2:	f7fe fda1 	bl	8001328 <ConsolePrintf>
 80027e6:	e003      	b.n	80027f0 <debug_power_state+0x64>
    } else {
        ConsolePrintf("VREFINT: DISABLED\r\n");
 80027e8:	4b36      	ldr	r3, [pc, #216]	@ (80028c4 <debug_power_state+0x138>)
 80027ea:	0018      	movs	r0, r3
 80027ec:	f7fe fd9c 	bl	8001328 <ConsolePrintf>
    }
    
    // Check peripheral clocks
    ConsolePrintf("I2C1 CLK: %s\r\n", __HAL_RCC_I2C1_IS_CLK_ENABLED() ? "ON" : "OFF");
 80027f0:	4b35      	ldr	r3, [pc, #212]	@ (80028c8 <debug_power_state+0x13c>)
 80027f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027f4:	2380      	movs	r3, #128	@ 0x80
 80027f6:	039b      	lsls	r3, r3, #14
 80027f8:	4013      	ands	r3, r2
 80027fa:	d001      	beq.n	8002800 <debug_power_state+0x74>
 80027fc:	4b33      	ldr	r3, [pc, #204]	@ (80028cc <debug_power_state+0x140>)
 80027fe:	e000      	b.n	8002802 <debug_power_state+0x76>
 8002800:	4b33      	ldr	r3, [pc, #204]	@ (80028d0 <debug_power_state+0x144>)
 8002802:	4a34      	ldr	r2, [pc, #208]	@ (80028d4 <debug_power_state+0x148>)
 8002804:	0019      	movs	r1, r3
 8002806:	0010      	movs	r0, r2
 8002808:	f7fe fd8e 	bl	8001328 <ConsolePrintf>
    ConsolePrintf("UART1 CLK: %s\r\n", __HAL_RCC_USART1_IS_CLK_ENABLED() ? "ON" : "OFF");
 800280c:	4b2e      	ldr	r3, [pc, #184]	@ (80028c8 <debug_power_state+0x13c>)
 800280e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002810:	2380      	movs	r3, #128	@ 0x80
 8002812:	01db      	lsls	r3, r3, #7
 8002814:	4013      	ands	r3, r2
 8002816:	d001      	beq.n	800281c <debug_power_state+0x90>
 8002818:	4b2c      	ldr	r3, [pc, #176]	@ (80028cc <debug_power_state+0x140>)
 800281a:	e000      	b.n	800281e <debug_power_state+0x92>
 800281c:	4b2c      	ldr	r3, [pc, #176]	@ (80028d0 <debug_power_state+0x144>)
 800281e:	4a2e      	ldr	r2, [pc, #184]	@ (80028d8 <debug_power_state+0x14c>)
 8002820:	0019      	movs	r1, r3
 8002822:	0010      	movs	r0, r2
 8002824:	f7fe fd80 	bl	8001328 <ConsolePrintf>
    ConsolePrintf("LPUART1 CLK: %s\r\n", __HAL_RCC_LPUART1_IS_CLK_ENABLED() ? "ON" : "OFF");
 8002828:	4b27      	ldr	r3, [pc, #156]	@ (80028c8 <debug_power_state+0x13c>)
 800282a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800282c:	2380      	movs	r3, #128	@ 0x80
 800282e:	02db      	lsls	r3, r3, #11
 8002830:	4013      	ands	r3, r2
 8002832:	d001      	beq.n	8002838 <debug_power_state+0xac>
 8002834:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <debug_power_state+0x140>)
 8002836:	e000      	b.n	800283a <debug_power_state+0xae>
 8002838:	4b25      	ldr	r3, [pc, #148]	@ (80028d0 <debug_power_state+0x144>)
 800283a:	4a28      	ldr	r2, [pc, #160]	@ (80028dc <debug_power_state+0x150>)
 800283c:	0019      	movs	r1, r3
 800283e:	0010      	movs	r0, r2
 8002840:	f7fe fd72 	bl	8001328 <ConsolePrintf>
    ConsolePrintf("ADC1 CLK: %s\r\n", __HAL_RCC_ADC1_IS_CLK_ENABLED() ? "ON" : "OFF");
 8002844:	4b20      	ldr	r3, [pc, #128]	@ (80028c8 <debug_power_state+0x13c>)
 8002846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002848:	2380      	movs	r3, #128	@ 0x80
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4013      	ands	r3, r2
 800284e:	d001      	beq.n	8002854 <debug_power_state+0xc8>
 8002850:	4b1e      	ldr	r3, [pc, #120]	@ (80028cc <debug_power_state+0x140>)
 8002852:	e000      	b.n	8002856 <debug_power_state+0xca>
 8002854:	4b1e      	ldr	r3, [pc, #120]	@ (80028d0 <debug_power_state+0x144>)
 8002856:	4a22      	ldr	r2, [pc, #136]	@ (80028e0 <debug_power_state+0x154>)
 8002858:	0019      	movs	r1, r3
 800285a:	0010      	movs	r0, r2
 800285c:	f7fe fd64 	bl	8001328 <ConsolePrintf>
    ConsolePrintf("DMA1 CLK: %s\r\n", __HAL_RCC_DMA1_IS_CLK_ENABLED() ? "ON" : "OFF");
 8002860:	4b19      	ldr	r3, [pc, #100]	@ (80028c8 <debug_power_state+0x13c>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002864:	2201      	movs	r2, #1
 8002866:	4013      	ands	r3, r2
 8002868:	d001      	beq.n	800286e <debug_power_state+0xe2>
 800286a:	4b18      	ldr	r3, [pc, #96]	@ (80028cc <debug_power_state+0x140>)
 800286c:	e000      	b.n	8002870 <debug_power_state+0xe4>
 800286e:	4b18      	ldr	r3, [pc, #96]	@ (80028d0 <debug_power_state+0x144>)
 8002870:	4a1c      	ldr	r2, [pc, #112]	@ (80028e4 <debug_power_state+0x158>)
 8002872:	0019      	movs	r1, r3
 8002874:	0010      	movs	r0, r2
 8002876:	f7fe fd57 	bl	8001328 <ConsolePrintf>
    ConsolePrintf("CRC CLK: %s\r\n", __HAL_RCC_CRC_IS_CLK_ENABLED() ? "ON" : "OFF");
 800287a:	4b13      	ldr	r3, [pc, #76]	@ (80028c8 <debug_power_state+0x13c>)
 800287c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800287e:	2380      	movs	r3, #128	@ 0x80
 8002880:	015b      	lsls	r3, r3, #5
 8002882:	4013      	ands	r3, r2
 8002884:	d001      	beq.n	800288a <debug_power_state+0xfe>
 8002886:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <debug_power_state+0x140>)
 8002888:	e000      	b.n	800288c <debug_power_state+0x100>
 800288a:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <debug_power_state+0x144>)
 800288c:	4a16      	ldr	r2, [pc, #88]	@ (80028e8 <debug_power_state+0x15c>)
 800288e:	0019      	movs	r1, r3
 8002890:	0010      	movs	r0, r2
 8002892:	f7fe fd49 	bl	8001328 <ConsolePrintf>
    
    ConsolePrintf("===================\r\n");
 8002896:	4b15      	ldr	r3, [pc, #84]	@ (80028ec <debug_power_state+0x160>)
 8002898:	0018      	movs	r0, r3
 800289a:	f7fe fd45 	bl	8001328 <ConsolePrintf>
}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	08008914 	.word	0x08008914
 80028a8:	40007000 	.word	0x40007000
 80028ac:	0800892c 	.word	0x0800892c
 80028b0:	08008940 	.word	0x08008940
 80028b4:	08008958 	.word	0x08008958
 80028b8:	08008970 	.word	0x08008970
 80028bc:	40010000 	.word	0x40010000
 80028c0:	08008988 	.word	0x08008988
 80028c4:	080089ac 	.word	0x080089ac
 80028c8:	40021000 	.word	0x40021000
 80028cc:	080089c0 	.word	0x080089c0
 80028d0:	080089c4 	.word	0x080089c4
 80028d4:	080089c8 	.word	0x080089c8
 80028d8:	080089d8 	.word	0x080089d8
 80028dc:	080089e8 	.word	0x080089e8
 80028e0:	080089fc 	.word	0x080089fc
 80028e4:	08008a0c 	.word	0x08008a0c
 80028e8:	08008a1c 	.word	0x08008a1c
 80028ec:	08008a2c 	.word	0x08008a2c

080028f0 <prepare_for_next_sleep>:
    
    ConsolePrintf("=== POST-WAKE OPTIMIZATION COMPLETE ===\r\n");
}

void prepare_for_next_sleep(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
    ConsolePrintf("=== PREPARING FOR NEXT SLEEP CYCLE ===\r\n");
 80028f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <prepare_for_next_sleep+0x40>)
 80028f6:	0018      	movs	r0, r3
 80028f8:	f7fe fd16 	bl	8001328 <ConsolePrintf>
    
    // This function should be called AFTER sensor operations and LoRaWAN transmission
    // but BEFORE the next enter_sleep_mode() call
    
    // 1. CRITICAL: Disable VREFINT that gets re-enabled by ADC operations
    HAL_ADCEx_DisableVREFINT();
 80028fc:	f000 fe40 	bl	8003580 <HAL_ADCEx_DisableVREFINT>
    HAL_ADCEx_DisableVREFINTTempSensor();
 8002900:	f000 fe4e 	bl	80035a0 <HAL_ADCEx_DisableVREFINTTempSensor>
    ConsolePrintf("VREFINT disabled for next sleep cycle\r\n");
 8002904:	4b0b      	ldr	r3, [pc, #44]	@ (8002934 <prepare_for_next_sleep+0x44>)
 8002906:	0018      	movs	r0, r3
 8002908:	f7fe fd0e 	bl	8001328 <ConsolePrintf>
    
    // 2. Force Ultra Low Power mode (may get disabled during sensor/LoRaWAN operations)
    HAL_PWREx_EnableUltraLowPower();
 800290c:	f002 fa1a 	bl	8004d44 <HAL_PWREx_EnableUltraLowPower>
    HAL_PWREx_EnableFastWakeUp();
 8002910:	f002 fa0a 	bl	8004d28 <HAL_PWREx_EnableFastWakeUp>
    ConsolePrintf("ULP mode enabled for next sleep cycle\r\n");
 8002914:	4b08      	ldr	r3, [pc, #32]	@ (8002938 <prepare_for_next_sleep+0x48>)
 8002916:	0018      	movs	r0, r3
 8002918:	f7fe fd06 	bl	8001328 <ConsolePrintf>
    
    // 3. Debug power state to verify optimizations
    debug_power_state();
 800291c:	f7ff ff36 	bl	800278c <debug_power_state>
    
    ConsolePrintf("=== READY FOR NEXT SLEEP CYCLE ===\r\n");
 8002920:	4b06      	ldr	r3, [pc, #24]	@ (800293c <prepare_for_next_sleep+0x4c>)
 8002922:	0018      	movs	r0, r3
 8002924:	f7fe fd00 	bl	8001328 <ConsolePrintf>
    
    // NOTE: Peripheral deinitialization and clock disabling will be done in enter_sleep_mode()
    // This ensures proper sequencing and avoids conflicts with GPIO configuration
}
 8002928:	46c0      	nop			@ (mov r8, r8)
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	08008b78 	.word	0x08008b78
 8002934:	08008ba4 	.word	0x08008ba4
 8002938:	08008bcc 	.word	0x08008bcc
 800293c:	08008bf4 	.word	0x08008bf4

08002940 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002940:	480d      	ldr	r0, [pc, #52]	@ (8002978 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002942:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002944:	f7fe ff80 	bl	8001848 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002948:	480c      	ldr	r0, [pc, #48]	@ (800297c <LoopForever+0x6>)
  ldr r1, =_edata
 800294a:	490d      	ldr	r1, [pc, #52]	@ (8002980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800294c:	4a0d      	ldr	r2, [pc, #52]	@ (8002984 <LoopForever+0xe>)
  movs r3, #0
 800294e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002950:	e002      	b.n	8002958 <LoopCopyDataInit>

08002952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002956:	3304      	adds	r3, #4

08002958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800295a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800295c:	d3f9      	bcc.n	8002952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800295e:	4a0a      	ldr	r2, [pc, #40]	@ (8002988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002960:	4c0a      	ldr	r4, [pc, #40]	@ (800298c <LoopForever+0x16>)
  movs r3, #0
 8002962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002964:	e001      	b.n	800296a <LoopFillZerobss>

08002966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002968:	3204      	adds	r2, #4

0800296a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800296a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800296c:	d3fb      	bcc.n	8002966 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800296e:	f004 fe09 	bl	8007584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002972:	f7fe f9dd 	bl	8000d30 <main>

08002976 <LoopForever>:

LoopForever:
    b LoopForever
 8002976:	e7fe      	b.n	8002976 <LoopForever>
   ldr   r0, =_estack
 8002978:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800297c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002980:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002984:	08008dd4 	.word	0x08008dd4
  ldr r2, =_sbss
 8002988:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800298c:	200003d0 	.word	0x200003d0

08002990 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002990:	e7fe      	b.n	8002990 <ADC1_COMP_IRQHandler>
	...

08002994 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800299a:	1dfb      	adds	r3, r7, #7
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80029a0:	4b0b      	ldr	r3, [pc, #44]	@ (80029d0 <HAL_Init+0x3c>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <HAL_Init+0x3c>)
 80029a6:	2140      	movs	r1, #64	@ 0x40
 80029a8:	430a      	orrs	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029ac:	2003      	movs	r0, #3
 80029ae:	f000 f811 	bl	80029d4 <HAL_InitTick>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d003      	beq.n	80029be <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80029b6:	1dfb      	adds	r3, r7, #7
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	e001      	b.n	80029c2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029be:	f7fe fd2f 	bl	8001420 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029c2:	1dfb      	adds	r3, r7, #7
 80029c4:	781b      	ldrb	r3, [r3, #0]
}
 80029c6:	0018      	movs	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b002      	add	sp, #8
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			@ (mov r8, r8)
 80029d0:	40022000 	.word	0x40022000

080029d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029dc:	4b14      	ldr	r3, [pc, #80]	@ (8002a30 <HAL_InitTick+0x5c>)
 80029de:	681c      	ldr	r4, [r3, #0]
 80029e0:	4b14      	ldr	r3, [pc, #80]	@ (8002a34 <HAL_InitTick+0x60>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	0019      	movs	r1, r3
 80029e6:	23fa      	movs	r3, #250	@ 0xfa
 80029e8:	0098      	lsls	r0, r3, #2
 80029ea:	f7fd fb9f 	bl	800012c <__udivsi3>
 80029ee:	0003      	movs	r3, r0
 80029f0:	0019      	movs	r1, r3
 80029f2:	0020      	movs	r0, r4
 80029f4:	f7fd fb9a 	bl	800012c <__udivsi3>
 80029f8:	0003      	movs	r3, r0
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 feb1 	bl	8003762 <HAL_SYSTICK_Config>
 8002a00:	1e03      	subs	r3, r0, #0
 8002a02:	d001      	beq.n	8002a08 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e00f      	b.n	8002a28 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d80b      	bhi.n	8002a26 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	2301      	movs	r3, #1
 8002a12:	425b      	negs	r3, r3
 8002a14:	2200      	movs	r2, #0
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 fe7e 	bl	8003718 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a1c:	4b06      	ldr	r3, [pc, #24]	@ (8002a38 <HAL_InitTick+0x64>)
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e000      	b.n	8002a28 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
}
 8002a28:	0018      	movs	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	b003      	add	sp, #12
 8002a2e:	bd90      	pop	{r4, r7, pc}
 8002a30:	20000000 	.word	0x20000000
 8002a34:	20000008 	.word	0x20000008
 8002a38:	20000004 	.word	0x20000004

08002a3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a40:	4b05      	ldr	r3, [pc, #20]	@ (8002a58 <HAL_IncTick+0x1c>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	001a      	movs	r2, r3
 8002a46:	4b05      	ldr	r3, [pc, #20]	@ (8002a5c <HAL_IncTick+0x20>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	18d2      	adds	r2, r2, r3
 8002a4c:	4b03      	ldr	r3, [pc, #12]	@ (8002a5c <HAL_IncTick+0x20>)
 8002a4e:	601a      	str	r2, [r3, #0]
}
 8002a50:	46c0      	nop			@ (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	46c0      	nop			@ (mov r8, r8)
 8002a58:	20000008 	.word	0x20000008
 8002a5c:	20000284 	.word	0x20000284

08002a60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  return uwTick;
 8002a64:	4b02      	ldr	r3, [pc, #8]	@ (8002a70 <HAL_GetTick+0x10>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	0018      	movs	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	20000284 	.word	0x20000284

08002a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a7c:	f7ff fff0 	bl	8002a60 <HAL_GetTick>
 8002a80:	0003      	movs	r3, r0
 8002a82:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	d005      	beq.n	8002a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab8 <HAL_Delay+0x44>)
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	001a      	movs	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	189b      	adds	r3, r3, r2
 8002a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a9a:	46c0      	nop			@ (mov r8, r8)
 8002a9c:	f7ff ffe0 	bl	8002a60 <HAL_GetTick>
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d8f7      	bhi.n	8002a9c <HAL_Delay+0x28>
  {
  }
}
 8002aac:	46c0      	nop			@ (mov r8, r8)
 8002aae:	46c0      	nop			@ (mov r8, r8)
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b004      	add	sp, #16
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	20000008 	.word	0x20000008

08002abc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002ac0:	4b04      	ldr	r3, [pc, #16]	@ (8002ad4 <HAL_SuspendTick+0x18>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b03      	ldr	r3, [pc, #12]	@ (8002ad4 <HAL_SuspendTick+0x18>)
 8002ac6:	2102      	movs	r1, #2
 8002ac8:	438a      	bics	r2, r1
 8002aca:	601a      	str	r2, [r3, #0]
}
 8002acc:	46c0      	nop			@ (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	e000e010 	.word	0xe000e010

08002ad8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002adc:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <HAL_ResumeTick+0x18>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b03      	ldr	r3, [pc, #12]	@ (8002af0 <HAL_ResumeTick+0x18>)
 8002ae2:	2102      	movs	r1, #2
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]
}
 8002ae8:	46c0      	nop			@ (mov r8, r8)
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	46c0      	nop			@ (mov r8, r8)
 8002af0:	e000e010 	.word	0xe000e010

08002af4 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8002af8:	4b01      	ldr	r3, [pc, #4]	@ (8002b00 <HAL_GetHalVersion+0xc>)
}
 8002afa:	0018      	movs	r0, r3
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	010a0700 	.word	0x010a0700

08002b04 <HAL_SYSCFG_VREFINT_OutputSelect>:
  *     @arg SYSCFG_VREFINT_OUT_PB1
  *     @arg SYSCFG_VREFINT_OUT_PB0_PB1
  * @retval None
  */
void HAL_SYSCFG_VREFINT_OutputSelect(uint32_t SYSCFG_Vrefint_OUTPUT)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFINT_OUT_SELECT(SYSCFG_Vrefint_OUTPUT));

  /* Set the output Vrefint pin */
  SYSCFG->CFGR3 &= ~(SYSCFG_CFGR3_VREF_OUT);
 8002b0c:	4b07      	ldr	r3, [pc, #28]	@ (8002b2c <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 8002b0e:	6a1a      	ldr	r2, [r3, #32]
 8002b10:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 8002b12:	2130      	movs	r1, #48	@ 0x30
 8002b14:	438a      	bics	r2, r1
 8002b16:	621a      	str	r2, [r3, #32]
  SYSCFG->CFGR3 |= (uint32_t)(SYSCFG_Vrefint_OUTPUT);
 8002b18:	4b04      	ldr	r3, [pc, #16]	@ (8002b2c <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 8002b1a:	6a19      	ldr	r1, [r3, #32]
 8002b1c:	4b03      	ldr	r3, [pc, #12]	@ (8002b2c <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	621a      	str	r2, [r3, #32]
}
 8002b24:	46c0      	nop			@ (mov r8, r8)
 8002b26:	46bd      	mov	sp, r7
 8002b28:	b002      	add	sp, #8
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40010000 	.word	0x40010000

08002b30 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e159      	b.n	8002df6 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10a      	bne.n	8002b60 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2250      	movs	r2, #80	@ 0x50
 8002b54:	2100      	movs	r1, #0
 8002b56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	0018      	movs	r0, r3
 8002b5c:	f7fe fc8c 	bl	8001478 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b64:	2210      	movs	r2, #16
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b10      	cmp	r3, #16
 8002b6a:	d005      	beq.n	8002b78 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2204      	movs	r2, #4
 8002b74:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002b76:	d00b      	beq.n	8002b90 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7c:	2210      	movs	r2, #16
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2250      	movs	r2, #80	@ 0x50
 8002b88:	2100      	movs	r1, #0
 8002b8a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e132      	b.n	8002df6 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b94:	4a9a      	ldr	r2, [pc, #616]	@ (8002e00 <HAL_ADC_Init+0x2d0>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	2202      	movs	r2, #2
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d108      	bne.n	8002bc0 <HAL_ADC_Init+0x90>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_Init+0x90>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <HAL_ADC_Init+0x92>
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d149      	bne.n	8002c5a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	23c0      	movs	r3, #192	@ 0xc0
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d00b      	beq.n	8002bea <HAL_ADC_Init+0xba>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	2380      	movs	r3, #128	@ 0x80
 8002bd8:	05db      	lsls	r3, r3, #23
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d005      	beq.n	8002bea <HAL_ADC_Init+0xba>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	2380      	movs	r3, #128	@ 0x80
 8002be4:	061b      	lsls	r3, r3, #24
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d111      	bne.n	8002c0e <HAL_ADC_Init+0xde>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0092      	lsls	r2, r2, #2
 8002bf6:	0892      	lsrs	r2, r2, #2
 8002bf8:	611a      	str	r2, [r3, #16]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6919      	ldr	r1, [r3, #16]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	611a      	str	r2, [r3, #16]
 8002c0c:	e014      	b.n	8002c38 <HAL_ADC_Init+0x108>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	0092      	lsls	r2, r2, #2
 8002c1a:	0892      	lsrs	r2, r2, #2
 8002c1c:	611a      	str	r2, [r3, #16]
 8002c1e:	4b79      	ldr	r3, [pc, #484]	@ (8002e04 <HAL_ADC_Init+0x2d4>)
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	4b78      	ldr	r3, [pc, #480]	@ (8002e04 <HAL_ADC_Init+0x2d4>)
 8002c24:	4978      	ldr	r1, [pc, #480]	@ (8002e08 <HAL_ADC_Init+0x2d8>)
 8002c26:	400a      	ands	r2, r1
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	4b76      	ldr	r3, [pc, #472]	@ (8002e04 <HAL_ADC_Init+0x2d4>)
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4b74      	ldr	r3, [pc, #464]	@ (8002e04 <HAL_ADC_Init+0x2d4>)
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2118      	movs	r1, #24
 8002c44:	438a      	bics	r2, r1
 8002c46:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68d9      	ldr	r1, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8002e04 <HAL_ADC_Init+0x2d4>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b69      	ldr	r3, [pc, #420]	@ (8002e04 <HAL_ADC_Init+0x2d4>)
 8002c60:	496a      	ldr	r1, [pc, #424]	@ (8002e0c <HAL_ADC_Init+0x2dc>)
 8002c62:	400a      	ands	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8002c66:	4b67      	ldr	r3, [pc, #412]	@ (8002e04 <HAL_ADC_Init+0x2d4>)
 8002c68:	6819      	ldr	r1, [r3, #0]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6e:	065a      	lsls	r2, r3, #25
 8002c70:	4b64      	ldr	r3, [pc, #400]	@ (8002e04 <HAL_ADC_Init+0x2d4>)
 8002c72:	430a      	orrs	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	2380      	movs	r3, #128	@ 0x80
 8002c7e:	055b      	lsls	r3, r3, #21
 8002c80:	4013      	ands	r3, r2
 8002c82:	d108      	bne.n	8002c96 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2180      	movs	r1, #128	@ 0x80
 8002c90:	0549      	lsls	r1, r1, #21
 8002c92:	430a      	orrs	r2, r1
 8002c94:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	495b      	ldr	r1, [pc, #364]	@ (8002e10 <HAL_ADC_Init+0x2e0>)
 8002ca2:	400a      	ands	r2, r1
 8002ca4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68d9      	ldr	r1, [r3, #12]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d101      	bne.n	8002cbc <HAL_ADC_Init+0x18c>
 8002cb8:	2304      	movs	r3, #4
 8002cba:	e000      	b.n	8002cbe <HAL_ADC_Init+0x18e>
 8002cbc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002cbe:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2020      	movs	r0, #32
 8002cc4:	5c1b      	ldrb	r3, [r3, r0]
 8002cc6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8002cc8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	202c      	movs	r0, #44	@ 0x2c
 8002cce:	5c1b      	ldrb	r3, [r3, r0]
 8002cd0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002cd2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002cd8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002ce0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002ce8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cf6:	23c2      	movs	r3, #194	@ 0xc2
 8002cf8:	33ff      	adds	r3, #255	@ 0xff
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d00b      	beq.n	8002d16 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68d9      	ldr	r1, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2221      	movs	r2, #33	@ 0x21
 8002d1a:	5c9b      	ldrb	r3, [r3, r2]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d11a      	bne.n	8002d56 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	5c9b      	ldrb	r3, [r3, r2]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2180      	movs	r1, #128	@ 0x80
 8002d36:	0249      	lsls	r1, r1, #9
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	60da      	str	r2, [r3, #12]
 8002d3c:	e00b      	b.n	8002d56 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d42:	2220      	movs	r2, #32
 8002d44:	431a      	orrs	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4e:	2201      	movs	r2, #1
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d11f      	bne.n	8002d9e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	492a      	ldr	r1, [pc, #168]	@ (8002e14 <HAL_ADC_Init+0x2e4>)
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6919      	ldr	r1, [r3, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002d7c:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8002d82:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2101      	movs	r1, #1
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	611a      	str	r2, [r3, #16]
 8002d9c:	e00e      	b.n	8002dbc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2201      	movs	r2, #1
 8002da6:	4013      	ands	r3, r2
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d107      	bne.n	8002dbc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2101      	movs	r1, #1
 8002db8:	438a      	bics	r2, r1
 8002dba:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2107      	movs	r1, #7
 8002dc8:	438a      	bics	r2, r1
 8002dca:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6959      	ldr	r1, [r3, #20]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de8:	2203      	movs	r2, #3
 8002dea:	4393      	bics	r3, r2
 8002dec:	2201      	movs	r2, #1
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	0018      	movs	r0, r3
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b002      	add	sp, #8
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	fffffefd 	.word	0xfffffefd
 8002e04:	40012708 	.word	0x40012708
 8002e08:	ffc3ffff 	.word	0xffc3ffff
 8002e0c:	fdffffff 	.word	0xfdffffff
 8002e10:	fffe0219 	.word	0xfffe0219
 8002e14:	fffffc03 	.word	0xfffffc03

08002e18 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002e18:	b5b0      	push	{r4, r5, r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e20:	230f      	movs	r3, #15
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	2200      	movs	r2, #0
 8002e26:	701a      	strb	r2, [r3, #0]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e07d      	b.n	8002f2e <HAL_ADC_DeInit+0x116>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e36:	2202      	movs	r2, #2
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002e3e:	250f      	movs	r5, #15
 8002e40:	197c      	adds	r4, r7, r5
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	0018      	movs	r0, r3
 8002e46:	f000 fb2e 	bl	80034a6 <ADC_ConversionStop>
 8002e4a:	0003      	movs	r3, r0
 8002e4c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002e4e:	197b      	adds	r3, r7, r5
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10d      	bne.n	8002e72 <HAL_ADC_DeInit+0x5a>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002e56:	197c      	adds	r4, r7, r5
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f000 fabc 	bl	80033d8 <ADC_Disable>
 8002e60:	0003      	movs	r3, r0
 8002e62:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8002e64:	197b      	adds	r3, r7, r5
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d002      	beq.n	8002e72 <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	655a      	str	r2, [r3, #84]	@ 0x54
  }


  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 8002e72:	230f      	movs	r3, #15
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d051      	beq.n	8002f20 <HAL_ADC_DeInit+0x108>
  {

    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	492c      	ldr	r1, [pc, #176]	@ (8002f38 <HAL_ADC_DeInit+0x120>)
 8002e88:	400a      	ands	r2, r1
 8002e8a:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP));


    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a2a      	ldr	r2, [pc, #168]	@ (8002f3c <HAL_ADC_DeInit+0x124>)
 8002e92:	601a      	str	r2, [r3, #0]

    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4928      	ldr	r1, [pc, #160]	@ (8002f40 <HAL_ADC_DeInit+0x128>)
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	609a      	str	r2, [r3, #8]

    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */

    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4925      	ldr	r1, [pc, #148]	@ (8002f44 <HAL_ADC_DeInit+0x12c>)
 8002eb0:	400a      	ands	r2, r1
 8002eb2:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4922      	ldr	r1, [pc, #136]	@ (8002f48 <HAL_ADC_DeInit+0x130>)
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE);


    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2107      	movs	r1, #7
 8002ed0:	438a      	bics	r2, r1
 8002ed2:	615a      	str	r2, [r3, #20]

    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6a1a      	ldr	r2, [r3, #32]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	491b      	ldr	r1, [pc, #108]	@ (8002f4c <HAL_ADC_DeInit+0x134>)
 8002ee0:	400a      	ands	r2, r1
 8002ee2:	621a      	str	r2, [r3, #32]

    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	22b4      	movs	r2, #180	@ 0xb4
 8002eea:	589a      	ldr	r2, [r3, r2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	217f      	movs	r1, #127	@ 0x7f
 8002ef2:	438a      	bics	r2, r1
 8002ef4:	21b4      	movs	r1, #180	@ 0xb4
 8002ef6:	505a      	str	r2, [r3, r1]

    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/

    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	22b4      	movs	r2, #180	@ 0xb4
 8002efe:	589a      	ldr	r2, [r3, r2]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	217f      	movs	r1, #127	@ 0x7f
 8002f06:	438a      	bics	r2, r1
 8002f08:	21b4      	movs	r1, #180	@ 0xb4
 8002f0a:	505a      	str	r2, [r3, r1]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f7fe faee 	bl	80014f0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2250      	movs	r2, #80	@ 0x50
 8002f24:	2100      	movs	r1, #0
 8002f26:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002f28:	230f      	movs	r3, #15
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	781b      	ldrb	r3, [r3, #0]
}
 8002f2e:	0018      	movs	r0, r3
 8002f30:	46bd      	mov	sp, r7
 8002f32:	b004      	add	sp, #16
 8002f34:	bdb0      	pop	{r4, r5, r7, pc}
 8002f36:	46c0      	nop			@ (mov r8, r8)
 8002f38:	fffff760 	.word	0xfffff760
 8002f3c:	0000089f 	.word	0x0000089f
 8002f40:	efffffff 	.word	0xefffffff
 8002f44:	833e0200 	.word	0x833e0200
 8002f48:	3ffffc02 	.word	0x3ffffc02
 8002f4c:	f000f000 	.word	0xf000f000

08002f50 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f58:	230f      	movs	r3, #15
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2204      	movs	r2, #4
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d138      	bne.n	8002fde <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2250      	movs	r2, #80	@ 0x50
 8002f70:	5c9b      	ldrb	r3, [r3, r2]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_ADC_Start+0x2a>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e038      	b.n	8002fec <HAL_ADC_Start+0x9c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2250      	movs	r2, #80	@ 0x50
 8002f7e:	2101      	movs	r1, #1
 8002f80:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d007      	beq.n	8002f9a <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002f8a:	230f      	movs	r3, #15
 8002f8c:	18fc      	adds	r4, r7, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f9b9 	bl	8003308 <ADC_Enable>
 8002f96:	0003      	movs	r3, r0
 8002f98:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002f9a:	230f      	movs	r3, #15
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d120      	bne.n	8002fe6 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fa8:	4a12      	ldr	r2, [pc, #72]	@ (8002ff4 <HAL_ADC_Start+0xa4>)
 8002faa:	4013      	ands	r3, r2
 8002fac:	2280      	movs	r2, #128	@ 0x80
 8002fae:	0052      	lsls	r2, r2, #1
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2250      	movs	r2, #80	@ 0x50
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	221c      	movs	r2, #28
 8002fca:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689a      	ldr	r2, [r3, #8]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2104      	movs	r1, #4
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	e003      	b.n	8002fe6 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002fde:	230f      	movs	r3, #15
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fe6:	230f      	movs	r3, #15
 8002fe8:	18fb      	adds	r3, r7, r3
 8002fea:	781b      	ldrb	r3, [r3, #0]
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b005      	add	sp, #20
 8002ff2:	bd90      	pop	{r4, r7, pc}
 8002ff4:	fffff0fe 	.word	0xfffff0fe

08002ff8 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002ff8:	b5b0      	push	{r4, r5, r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003000:	230f      	movs	r3, #15
 8003002:	18fb      	adds	r3, r7, r3
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2250      	movs	r2, #80	@ 0x50
 800300c:	5c9b      	ldrb	r3, [r3, r2]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_ADC_Stop+0x1e>
 8003012:	2302      	movs	r3, #2
 8003014:	e029      	b.n	800306a <HAL_ADC_Stop+0x72>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2250      	movs	r2, #80	@ 0x50
 800301a:	2101      	movs	r1, #1
 800301c:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800301e:	250f      	movs	r5, #15
 8003020:	197c      	adds	r4, r7, r5
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	0018      	movs	r0, r3
 8003026:	f000 fa3e 	bl	80034a6 <ADC_ConversionStop>
 800302a:	0003      	movs	r3, r0
 800302c:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800302e:	197b      	adds	r3, r7, r5
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d112      	bne.n	800305c <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003036:	197c      	adds	r4, r7, r5
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	0018      	movs	r0, r3
 800303c:	f000 f9cc 	bl	80033d8 <ADC_Disable>
 8003040:	0003      	movs	r3, r0
 8003042:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003044:	197b      	adds	r3, r7, r5
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d107      	bne.n	800305c <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003050:	4a08      	ldr	r2, [pc, #32]	@ (8003074 <HAL_ADC_Stop+0x7c>)
 8003052:	4013      	ands	r3, r2
 8003054:	2201      	movs	r2, #1
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2250      	movs	r2, #80	@ 0x50
 8003060:	2100      	movs	r1, #0
 8003062:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003064:	230f      	movs	r3, #15
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	781b      	ldrb	r3, [r3, #0]
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b004      	add	sp, #16
 8003070:	bdb0      	pop	{r4, r5, r7, pc}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	fffffefe 	.word	0xfffffefe

08003078 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	2b08      	cmp	r3, #8
 8003090:	d102      	bne.n	8003098 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003092:	2308      	movs	r3, #8
 8003094:	60fb      	str	r3, [r7, #12]
 8003096:	e014      	b.n	80030c2 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	2201      	movs	r2, #1
 80030a0:	4013      	ands	r3, r2
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d10b      	bne.n	80030be <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030aa:	2220      	movs	r2, #32
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2250      	movs	r2, #80	@ 0x50
 80030b6:	2100      	movs	r1, #0
 80030b8:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e072      	b.n	80031a4 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80030be:	230c      	movs	r3, #12
 80030c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80030c2:	f7ff fccd 	bl	8002a60 <HAL_GetTick>
 80030c6:	0003      	movs	r3, r0
 80030c8:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80030ca:	e01f      	b.n	800310c <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	3301      	adds	r3, #1
 80030d0:	d01c      	beq.n	800310c <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_ADC_PollForConversion+0x70>
 80030d8:	f7ff fcc2 	bl	8002a60 <HAL_GetTick>
 80030dc:	0002      	movs	r2, r0
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d211      	bcs.n	800310c <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	4013      	ands	r3, r2
 80030f2:	d10b      	bne.n	800310c <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f8:	2204      	movs	r2, #4
 80030fa:	431a      	orrs	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2250      	movs	r2, #80	@ 0x50
 8003104:	2100      	movs	r1, #0
 8003106:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e04b      	b.n	80031a4 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4013      	ands	r3, r2
 8003116:	d0d9      	beq.n	80030cc <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311c:	2280      	movs	r2, #128	@ 0x80
 800311e:	0092      	lsls	r2, r2, #2
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	23c0      	movs	r3, #192	@ 0xc0
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	4013      	ands	r3, r2
 8003132:	d12e      	bne.n	8003192 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2220      	movs	r2, #32
 8003138:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800313a:	2b00      	cmp	r3, #0
 800313c:	d129      	bne.n	8003192 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2208      	movs	r2, #8
 8003146:	4013      	ands	r3, r2
 8003148:	2b08      	cmp	r3, #8
 800314a:	d122      	bne.n	8003192 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2204      	movs	r2, #4
 8003154:	4013      	ands	r3, r2
 8003156:	d110      	bne.n	800317a <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	210c      	movs	r1, #12
 8003164:	438a      	bics	r2, r1
 8003166:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800316c:	4a0f      	ldr	r2, [pc, #60]	@ (80031ac <HAL_ADC_PollForConversion+0x134>)
 800316e:	4013      	ands	r3, r2
 8003170:	2201      	movs	r2, #1
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	655a      	str	r2, [r3, #84]	@ 0x54
 8003178:	e00b      	b.n	8003192 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317e:	2220      	movs	r2, #32
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800318a:	2201      	movs	r2, #1
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d103      	bne.n	80031a2 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	220c      	movs	r2, #12
 80031a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	0018      	movs	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b004      	add	sp, #16
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	fffffefe 	.word	0xfffffefe

080031b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80031be:	0018      	movs	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	b002      	add	sp, #8
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2250      	movs	r2, #80	@ 0x50
 80031d6:	5c9b      	ldrb	r3, [r3, r2]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x18>
 80031dc:	2302      	movs	r3, #2
 80031de:	e085      	b.n	80032ec <HAL_ADC_ConfigChannel+0x124>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2250      	movs	r2, #80	@ 0x50
 80031e4:	2101      	movs	r1, #1
 80031e6:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2204      	movs	r2, #4
 80031f0:	4013      	ands	r3, r2
 80031f2:	d00b      	beq.n	800320c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f8:	2220      	movs	r2, #32
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2250      	movs	r2, #80	@ 0x50
 8003204:	2100      	movs	r1, #0
 8003206:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e06f      	b.n	80032ec <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	4a38      	ldr	r2, [pc, #224]	@ (80032f4 <HAL_ADC_ConfigChannel+0x12c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d035      	beq.n	8003282 <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	035b      	lsls	r3, r3, #13
 8003222:	0b5a      	lsrs	r2, r3, #13
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	02db      	lsls	r3, r3, #11
 8003234:	4013      	ands	r3, r2
 8003236:	d009      	beq.n	800324c <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8003238:	4b2f      	ldr	r3, [pc, #188]	@ (80032f8 <HAL_ADC_ConfigChannel+0x130>)
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	4b2e      	ldr	r3, [pc, #184]	@ (80032f8 <HAL_ADC_ConfigChannel+0x130>)
 800323e:	2180      	movs	r1, #128	@ 0x80
 8003240:	0409      	lsls	r1, r1, #16
 8003242:	430a      	orrs	r2, r1
 8003244:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003246:	200a      	movs	r0, #10
 8003248:	f000 f97a 	bl	8003540 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	2380      	movs	r3, #128	@ 0x80
 8003252:	029b      	lsls	r3, r3, #10
 8003254:	4013      	ands	r3, r2
 8003256:	d006      	beq.n	8003266 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8003258:	4b27      	ldr	r3, [pc, #156]	@ (80032f8 <HAL_ADC_ConfigChannel+0x130>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4b26      	ldr	r3, [pc, #152]	@ (80032f8 <HAL_ADC_ConfigChannel+0x130>)
 800325e:	2180      	movs	r1, #128	@ 0x80
 8003260:	03c9      	lsls	r1, r1, #15
 8003262:	430a      	orrs	r2, r1
 8003264:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	@ 0x80
 800326c:	025b      	lsls	r3, r3, #9
 800326e:	4013      	ands	r3, r2
 8003270:	d037      	beq.n	80032e2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 8003272:	4b21      	ldr	r3, [pc, #132]	@ (80032f8 <HAL_ADC_ConfigChannel+0x130>)
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	4b20      	ldr	r3, [pc, #128]	@ (80032f8 <HAL_ADC_ConfigChannel+0x130>)
 8003278:	2180      	movs	r1, #128	@ 0x80
 800327a:	0449      	lsls	r1, r1, #17
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	e02f      	b.n	80032e2 <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	035b      	lsls	r3, r3, #13
 800328e:	0b5b      	lsrs	r3, r3, #13
 8003290:	43d9      	mvns	r1, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	400a      	ands	r2, r1
 8003298:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	2380      	movs	r3, #128	@ 0x80
 80032a0:	02db      	lsls	r3, r3, #11
 80032a2:	4013      	ands	r3, r2
 80032a4:	d005      	beq.n	80032b2 <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80032a6:	4b14      	ldr	r3, [pc, #80]	@ (80032f8 <HAL_ADC_ConfigChannel+0x130>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b13      	ldr	r3, [pc, #76]	@ (80032f8 <HAL_ADC_ConfigChannel+0x130>)
 80032ac:	4913      	ldr	r1, [pc, #76]	@ (80032fc <HAL_ADC_ConfigChannel+0x134>)
 80032ae:	400a      	ands	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	2380      	movs	r3, #128	@ 0x80
 80032b8:	029b      	lsls	r3, r3, #10
 80032ba:	4013      	ands	r3, r2
 80032bc:	d005      	beq.n	80032ca <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 80032be:	4b0e      	ldr	r3, [pc, #56]	@ (80032f8 <HAL_ADC_ConfigChannel+0x130>)
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4b0d      	ldr	r3, [pc, #52]	@ (80032f8 <HAL_ADC_ConfigChannel+0x130>)
 80032c4:	490e      	ldr	r1, [pc, #56]	@ (8003300 <HAL_ADC_ConfigChannel+0x138>)
 80032c6:	400a      	ands	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	2380      	movs	r3, #128	@ 0x80
 80032d0:	025b      	lsls	r3, r3, #9
 80032d2:	4013      	ands	r3, r2
 80032d4:	d005      	beq.n	80032e2 <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 80032d6:	4b08      	ldr	r3, [pc, #32]	@ (80032f8 <HAL_ADC_ConfigChannel+0x130>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	4b07      	ldr	r3, [pc, #28]	@ (80032f8 <HAL_ADC_ConfigChannel+0x130>)
 80032dc:	4909      	ldr	r1, [pc, #36]	@ (8003304 <HAL_ADC_ConfigChannel+0x13c>)
 80032de:	400a      	ands	r2, r1
 80032e0:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2250      	movs	r2, #80	@ 0x50
 80032e6:	2100      	movs	r1, #0
 80032e8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b002      	add	sp, #8
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	00001001 	.word	0x00001001
 80032f8:	40012708 	.word	0x40012708
 80032fc:	ff7fffff 	.word	0xff7fffff
 8003300:	ffbfffff 	.word	0xffbfffff
 8003304:	feffffff 	.word	0xfeffffff

08003308 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2203      	movs	r2, #3
 800331c:	4013      	ands	r3, r2
 800331e:	2b01      	cmp	r3, #1
 8003320:	d108      	bne.n	8003334 <ADC_Enable+0x2c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2201      	movs	r2, #1
 800332a:	4013      	ands	r3, r2
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <ADC_Enable+0x2c>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <ADC_Enable+0x2e>
 8003334:	2300      	movs	r3, #0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d146      	bne.n	80033c8 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a24      	ldr	r2, [pc, #144]	@ (80033d4 <ADC_Enable+0xcc>)
 8003342:	4013      	ands	r3, r2
 8003344:	d00d      	beq.n	8003362 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334a:	2210      	movs	r2, #16
 800334c:	431a      	orrs	r2, r3
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003356:	2201      	movs	r2, #1
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e033      	b.n	80033ca <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2101      	movs	r1, #1
 800336e:	430a      	orrs	r2, r1
 8003370:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8003372:	2001      	movs	r0, #1
 8003374:	f000 f8e4 	bl	8003540 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003378:	f7ff fb72 	bl	8002a60 <HAL_GetTick>
 800337c:	0003      	movs	r3, r0
 800337e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003380:	e01b      	b.n	80033ba <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003382:	f7ff fb6d 	bl	8002a60 <HAL_GetTick>
 8003386:	0002      	movs	r2, r0
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b0a      	cmp	r3, #10
 800338e:	d914      	bls.n	80033ba <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2201      	movs	r2, #1
 8003398:	4013      	ands	r3, r2
 800339a:	2b01      	cmp	r3, #1
 800339c:	d00d      	beq.n	80033ba <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	2210      	movs	r2, #16
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ae:	2201      	movs	r2, #1
 80033b0:	431a      	orrs	r2, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e007      	b.n	80033ca <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2201      	movs	r2, #1
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d1dc      	bne.n	8003382 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b004      	add	sp, #16
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	80000017 	.word	0x80000017

080033d8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2203      	movs	r2, #3
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d108      	bne.n	8003404 <ADC_Disable+0x2c>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2201      	movs	r2, #1
 80033fa:	4013      	ands	r3, r2
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <ADC_Disable+0x2c>
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <ADC_Disable+0x2e>
 8003404:	2300      	movs	r3, #0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d048      	beq.n	800349c <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2205      	movs	r2, #5
 8003412:	4013      	ands	r3, r2
 8003414:	2b01      	cmp	r3, #1
 8003416:	d110      	bne.n	800343a <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2102      	movs	r1, #2
 8003424:	430a      	orrs	r2, r1
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2203      	movs	r2, #3
 800342e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003430:	f7ff fb16 	bl	8002a60 <HAL_GetTick>
 8003434:	0003      	movs	r3, r0
 8003436:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003438:	e029      	b.n	800348e <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800343e:	2210      	movs	r2, #16
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344a:	2201      	movs	r2, #1
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e023      	b.n	800349e <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003456:	f7ff fb03 	bl	8002a60 <HAL_GetTick>
 800345a:	0002      	movs	r2, r0
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b0a      	cmp	r3, #10
 8003462:	d914      	bls.n	800348e <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	2201      	movs	r2, #1
 800346c:	4013      	ands	r3, r2
 800346e:	2b01      	cmp	r3, #1
 8003470:	d10d      	bne.n	800348e <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003476:	2210      	movs	r2, #16
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003482:	2201      	movs	r2, #1
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e007      	b.n	800349e <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2201      	movs	r2, #1
 8003496:	4013      	ands	r3, r2
 8003498:	2b01      	cmp	r3, #1
 800349a:	d0dc      	beq.n	8003456 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	0018      	movs	r0, r3
 80034a0:	46bd      	mov	sp, r7
 80034a2:	b004      	add	sp, #16
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	2204      	movs	r2, #4
 80034ba:	4013      	ands	r3, r2
 80034bc:	d03a      	beq.n	8003534 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	2204      	movs	r2, #4
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b04      	cmp	r3, #4
 80034ca:	d10d      	bne.n	80034e8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2202      	movs	r2, #2
 80034d4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 80034d6:	d107      	bne.n	80034e8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2110      	movs	r1, #16
 80034e4:	430a      	orrs	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034e8:	f7ff faba 	bl	8002a60 <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80034f0:	e01a      	b.n	8003528 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80034f2:	f7ff fab5 	bl	8002a60 <HAL_GetTick>
 80034f6:	0002      	movs	r2, r0
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b0a      	cmp	r3, #10
 80034fe:	d913      	bls.n	8003528 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2204      	movs	r2, #4
 8003508:	4013      	ands	r3, r2
 800350a:	d00d      	beq.n	8003528 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003510:	2210      	movs	r2, #16
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351c:	2201      	movs	r2, #1
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e006      	b.n	8003536 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	2204      	movs	r2, #4
 8003530:	4013      	ands	r3, r2
 8003532:	d1de      	bne.n	80034f2 <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	0018      	movs	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	b004      	add	sp, #16
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003548:	4b0b      	ldr	r3, [pc, #44]	@ (8003578 <ADC_DelayMicroSecond+0x38>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	490b      	ldr	r1, [pc, #44]	@ (800357c <ADC_DelayMicroSecond+0x3c>)
 800354e:	0018      	movs	r0, r3
 8003550:	f7fc fdec 	bl	800012c <__udivsi3>
 8003554:	0003      	movs	r3, r0
 8003556:	001a      	movs	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4353      	muls	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800355e:	e002      	b.n	8003566 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	3b01      	subs	r3, #1
 8003564:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f9      	bne.n	8003560 <ADC_DelayMicroSecond+0x20>
  }
}
 800356c:	46c0      	nop			@ (mov r8, r8)
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	46bd      	mov	sp, r7
 8003572:	b004      	add	sp, #16
 8003574:	bd80      	pop	{r7, pc}
 8003576:	46c0      	nop			@ (mov r8, r8)
 8003578:	20000000 	.word	0x20000000
 800357c:	000f4240 	.word	0x000f4240

08003580 <HAL_ADCEx_DisableVREFINT>:
  * @note This API is obsolete. This equivalent configuration is done in HAL_ADC_ConfigChannel().
          bit fields in ADC_CCR and SYSCFG_CFGR3 control the same signals to VREFINT and TempSensor buffers.
  * @retval None
  */
void HAL_ADCEx_DisableVREFINT(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* Disable the Vrefint by resetting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  CLEAR_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 8003584:	4b04      	ldr	r3, [pc, #16]	@ (8003598 <HAL_ADCEx_DisableVREFINT+0x18>)
 8003586:	6a1a      	ldr	r2, [r3, #32]
 8003588:	4b03      	ldr	r3, [pc, #12]	@ (8003598 <HAL_ADCEx_DisableVREFINT+0x18>)
 800358a:	4904      	ldr	r1, [pc, #16]	@ (800359c <HAL_ADCEx_DisableVREFINT+0x1c>)
 800358c:	400a      	ands	r2, r1
 800358e:	621a      	str	r2, [r3, #32]
}
 8003590:	46c0      	nop			@ (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	40010000 	.word	0x40010000
 800359c:	fffffeff 	.word	0xfffffeff

080035a0 <HAL_ADCEx_DisableVREFINTTempSensor>:
  * @note This API is obsolete. This equivalent configuration is done in HAL_ADC_ConfigChannel().
          bit fields in ADC_CCR and SYSCFG_CFGR3 control the same signals to VREFINT and TempSensor buffers.
  * @retval None
  */
void HAL_ADCEx_DisableVREFINTTempSensor(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Disable the Vrefint by resetting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  CLEAR_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_SENSOR_ADC);
 80035a4:	4b04      	ldr	r3, [pc, #16]	@ (80035b8 <HAL_ADCEx_DisableVREFINTTempSensor+0x18>)
 80035a6:	6a1a      	ldr	r2, [r3, #32]
 80035a8:	4b03      	ldr	r3, [pc, #12]	@ (80035b8 <HAL_ADCEx_DisableVREFINTTempSensor+0x18>)
 80035aa:	4904      	ldr	r1, [pc, #16]	@ (80035bc <HAL_ADCEx_DisableVREFINTTempSensor+0x1c>)
 80035ac:	400a      	ands	r2, r1
 80035ae:	621a      	str	r2, [r3, #32]
}
 80035b0:	46c0      	nop			@ (mov r8, r8)
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	40010000 	.word	0x40010000
 80035bc:	fffffdff 	.word	0xfffffdff

080035c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	0002      	movs	r2, r0
 80035c8:	1dfb      	adds	r3, r7, #7
 80035ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80035cc:	1dfb      	adds	r3, r7, #7
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80035d2:	d809      	bhi.n	80035e8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035d4:	1dfb      	adds	r3, r7, #7
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	001a      	movs	r2, r3
 80035da:	231f      	movs	r3, #31
 80035dc:	401a      	ands	r2, r3
 80035de:	4b04      	ldr	r3, [pc, #16]	@ (80035f0 <__NVIC_EnableIRQ+0x30>)
 80035e0:	2101      	movs	r1, #1
 80035e2:	4091      	lsls	r1, r2
 80035e4:	000a      	movs	r2, r1
 80035e6:	601a      	str	r2, [r3, #0]
  }
}
 80035e8:	46c0      	nop			@ (mov r8, r8)
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b002      	add	sp, #8
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	e000e100 	.word	0xe000e100

080035f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f4:	b590      	push	{r4, r7, lr}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	0002      	movs	r2, r0
 80035fc:	6039      	str	r1, [r7, #0]
 80035fe:	1dfb      	adds	r3, r7, #7
 8003600:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003602:	1dfb      	adds	r3, r7, #7
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	2b7f      	cmp	r3, #127	@ 0x7f
 8003608:	d828      	bhi.n	800365c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800360a:	4a2f      	ldr	r2, [pc, #188]	@ (80036c8 <__NVIC_SetPriority+0xd4>)
 800360c:	1dfb      	adds	r3, r7, #7
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	b25b      	sxtb	r3, r3
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	33c0      	adds	r3, #192	@ 0xc0
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	589b      	ldr	r3, [r3, r2]
 800361a:	1dfa      	adds	r2, r7, #7
 800361c:	7812      	ldrb	r2, [r2, #0]
 800361e:	0011      	movs	r1, r2
 8003620:	2203      	movs	r2, #3
 8003622:	400a      	ands	r2, r1
 8003624:	00d2      	lsls	r2, r2, #3
 8003626:	21ff      	movs	r1, #255	@ 0xff
 8003628:	4091      	lsls	r1, r2
 800362a:	000a      	movs	r2, r1
 800362c:	43d2      	mvns	r2, r2
 800362e:	401a      	ands	r2, r3
 8003630:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	019b      	lsls	r3, r3, #6
 8003636:	22ff      	movs	r2, #255	@ 0xff
 8003638:	401a      	ands	r2, r3
 800363a:	1dfb      	adds	r3, r7, #7
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	0018      	movs	r0, r3
 8003640:	2303      	movs	r3, #3
 8003642:	4003      	ands	r3, r0
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003648:	481f      	ldr	r0, [pc, #124]	@ (80036c8 <__NVIC_SetPriority+0xd4>)
 800364a:	1dfb      	adds	r3, r7, #7
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	b25b      	sxtb	r3, r3
 8003650:	089b      	lsrs	r3, r3, #2
 8003652:	430a      	orrs	r2, r1
 8003654:	33c0      	adds	r3, #192	@ 0xc0
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800365a:	e031      	b.n	80036c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800365c:	4a1b      	ldr	r2, [pc, #108]	@ (80036cc <__NVIC_SetPriority+0xd8>)
 800365e:	1dfb      	adds	r3, r7, #7
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	0019      	movs	r1, r3
 8003664:	230f      	movs	r3, #15
 8003666:	400b      	ands	r3, r1
 8003668:	3b08      	subs	r3, #8
 800366a:	089b      	lsrs	r3, r3, #2
 800366c:	3306      	adds	r3, #6
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	18d3      	adds	r3, r2, r3
 8003672:	3304      	adds	r3, #4
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	1dfa      	adds	r2, r7, #7
 8003678:	7812      	ldrb	r2, [r2, #0]
 800367a:	0011      	movs	r1, r2
 800367c:	2203      	movs	r2, #3
 800367e:	400a      	ands	r2, r1
 8003680:	00d2      	lsls	r2, r2, #3
 8003682:	21ff      	movs	r1, #255	@ 0xff
 8003684:	4091      	lsls	r1, r2
 8003686:	000a      	movs	r2, r1
 8003688:	43d2      	mvns	r2, r2
 800368a:	401a      	ands	r2, r3
 800368c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	019b      	lsls	r3, r3, #6
 8003692:	22ff      	movs	r2, #255	@ 0xff
 8003694:	401a      	ands	r2, r3
 8003696:	1dfb      	adds	r3, r7, #7
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	0018      	movs	r0, r3
 800369c:	2303      	movs	r3, #3
 800369e:	4003      	ands	r3, r0
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80036a4:	4809      	ldr	r0, [pc, #36]	@ (80036cc <__NVIC_SetPriority+0xd8>)
 80036a6:	1dfb      	adds	r3, r7, #7
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	001c      	movs	r4, r3
 80036ac:	230f      	movs	r3, #15
 80036ae:	4023      	ands	r3, r4
 80036b0:	3b08      	subs	r3, #8
 80036b2:	089b      	lsrs	r3, r3, #2
 80036b4:	430a      	orrs	r2, r1
 80036b6:	3306      	adds	r3, #6
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	18c3      	adds	r3, r0, r3
 80036bc:	3304      	adds	r3, #4
 80036be:	601a      	str	r2, [r3, #0]
}
 80036c0:	46c0      	nop			@ (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b003      	add	sp, #12
 80036c6:	bd90      	pop	{r4, r7, pc}
 80036c8:	e000e100 	.word	0xe000e100
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	1e5a      	subs	r2, r3, #1
 80036dc:	2380      	movs	r3, #128	@ 0x80
 80036de:	045b      	lsls	r3, r3, #17
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d301      	bcc.n	80036e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036e4:	2301      	movs	r3, #1
 80036e6:	e010      	b.n	800370a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003714 <SysTick_Config+0x44>)
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	3a01      	subs	r2, #1
 80036ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036f0:	2301      	movs	r3, #1
 80036f2:	425b      	negs	r3, r3
 80036f4:	2103      	movs	r1, #3
 80036f6:	0018      	movs	r0, r3
 80036f8:	f7ff ff7c 	bl	80035f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036fc:	4b05      	ldr	r3, [pc, #20]	@ (8003714 <SysTick_Config+0x44>)
 80036fe:	2200      	movs	r2, #0
 8003700:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003702:	4b04      	ldr	r3, [pc, #16]	@ (8003714 <SysTick_Config+0x44>)
 8003704:	2207      	movs	r2, #7
 8003706:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003708:	2300      	movs	r3, #0
}
 800370a:	0018      	movs	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	b002      	add	sp, #8
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	e000e010 	.word	0xe000e010

08003718 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	210f      	movs	r1, #15
 8003724:	187b      	adds	r3, r7, r1
 8003726:	1c02      	adds	r2, r0, #0
 8003728:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	187b      	adds	r3, r7, r1
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	b25b      	sxtb	r3, r3
 8003732:	0011      	movs	r1, r2
 8003734:	0018      	movs	r0, r3
 8003736:	f7ff ff5d 	bl	80035f4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800373a:	46c0      	nop			@ (mov r8, r8)
 800373c:	46bd      	mov	sp, r7
 800373e:	b004      	add	sp, #16
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	0002      	movs	r2, r0
 800374a:	1dfb      	adds	r3, r7, #7
 800374c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	b25b      	sxtb	r3, r3
 8003754:	0018      	movs	r0, r3
 8003756:	f7ff ff33 	bl	80035c0 <__NVIC_EnableIRQ>
}
 800375a:	46c0      	nop			@ (mov r8, r8)
 800375c:	46bd      	mov	sp, r7
 800375e:	b002      	add	sp, #8
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b082      	sub	sp, #8
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0018      	movs	r0, r3
 800376e:	f7ff ffaf 	bl	80036d0 <SysTick_Config>
 8003772:	0003      	movs	r3, r0
}
 8003774:	0018      	movs	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	b002      	add	sp, #8
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800378e:	2300      	movs	r3, #0
 8003790:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003792:	e155      	b.n	8003a40 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2101      	movs	r1, #1
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4091      	lsls	r1, r2
 800379e:	000a      	movs	r2, r1
 80037a0:	4013      	ands	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d100      	bne.n	80037ac <HAL_GPIO_Init+0x30>
 80037aa:	e146      	b.n	8003a3a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2203      	movs	r2, #3
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d005      	beq.n	80037c4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2203      	movs	r2, #3
 80037be:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d130      	bne.n	8003826 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	2203      	movs	r2, #3
 80037d0:	409a      	lsls	r2, r3
 80037d2:	0013      	movs	r3, r2
 80037d4:	43da      	mvns	r2, r3
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4013      	ands	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68da      	ldr	r2, [r3, #12]
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	409a      	lsls	r2, r3
 80037e6:	0013      	movs	r3, r2
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037fa:	2201      	movs	r2, #1
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	409a      	lsls	r2, r3
 8003800:	0013      	movs	r3, r2
 8003802:	43da      	mvns	r2, r3
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4013      	ands	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	091b      	lsrs	r3, r3, #4
 8003810:	2201      	movs	r2, #1
 8003812:	401a      	ands	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	409a      	lsls	r2, r3
 8003818:	0013      	movs	r3, r2
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2203      	movs	r2, #3
 800382c:	4013      	ands	r3, r2
 800382e:	2b03      	cmp	r3, #3
 8003830:	d017      	beq.n	8003862 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	2203      	movs	r2, #3
 800383e:	409a      	lsls	r2, r3
 8003840:	0013      	movs	r3, r2
 8003842:	43da      	mvns	r2, r3
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4013      	ands	r3, r2
 8003848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	409a      	lsls	r2, r3
 8003854:	0013      	movs	r3, r2
 8003856:	693a      	ldr	r2, [r7, #16]
 8003858:	4313      	orrs	r3, r2
 800385a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2203      	movs	r2, #3
 8003868:	4013      	ands	r3, r2
 800386a:	2b02      	cmp	r3, #2
 800386c:	d123      	bne.n	80038b6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	08da      	lsrs	r2, r3, #3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	3208      	adds	r2, #8
 8003876:	0092      	lsls	r2, r2, #2
 8003878:	58d3      	ldr	r3, [r2, r3]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2207      	movs	r2, #7
 8003880:	4013      	ands	r3, r2
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	220f      	movs	r2, #15
 8003886:	409a      	lsls	r2, r3
 8003888:	0013      	movs	r3, r2
 800388a:	43da      	mvns	r2, r3
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	4013      	ands	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	691a      	ldr	r2, [r3, #16]
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2107      	movs	r1, #7
 800389a:	400b      	ands	r3, r1
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	409a      	lsls	r2, r3
 80038a0:	0013      	movs	r3, r2
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	08da      	lsrs	r2, r3, #3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3208      	adds	r2, #8
 80038b0:	0092      	lsls	r2, r2, #2
 80038b2:	6939      	ldr	r1, [r7, #16]
 80038b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	2203      	movs	r2, #3
 80038c2:	409a      	lsls	r2, r3
 80038c4:	0013      	movs	r3, r2
 80038c6:	43da      	mvns	r2, r3
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	4013      	ands	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	2203      	movs	r2, #3
 80038d4:	401a      	ands	r2, r3
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	409a      	lsls	r2, r3
 80038dc:	0013      	movs	r3, r2
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	23c0      	movs	r3, #192	@ 0xc0
 80038f0:	029b      	lsls	r3, r3, #10
 80038f2:	4013      	ands	r3, r2
 80038f4:	d100      	bne.n	80038f8 <HAL_GPIO_Init+0x17c>
 80038f6:	e0a0      	b.n	8003a3a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038f8:	4b57      	ldr	r3, [pc, #348]	@ (8003a58 <HAL_GPIO_Init+0x2dc>)
 80038fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038fc:	4b56      	ldr	r3, [pc, #344]	@ (8003a58 <HAL_GPIO_Init+0x2dc>)
 80038fe:	2101      	movs	r1, #1
 8003900:	430a      	orrs	r2, r1
 8003902:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003904:	4a55      	ldr	r2, [pc, #340]	@ (8003a5c <HAL_GPIO_Init+0x2e0>)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	3302      	adds	r3, #2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	589b      	ldr	r3, [r3, r2]
 8003910:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2203      	movs	r2, #3
 8003916:	4013      	ands	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	220f      	movs	r2, #15
 800391c:	409a      	lsls	r2, r3
 800391e:	0013      	movs	r3, r2
 8003920:	43da      	mvns	r2, r3
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4013      	ands	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	23a0      	movs	r3, #160	@ 0xa0
 800392c:	05db      	lsls	r3, r3, #23
 800392e:	429a      	cmp	r2, r3
 8003930:	d01f      	beq.n	8003972 <HAL_GPIO_Init+0x1f6>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a4a      	ldr	r2, [pc, #296]	@ (8003a60 <HAL_GPIO_Init+0x2e4>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d019      	beq.n	800396e <HAL_GPIO_Init+0x1f2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a49      	ldr	r2, [pc, #292]	@ (8003a64 <HAL_GPIO_Init+0x2e8>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_GPIO_Init+0x1ee>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a48      	ldr	r2, [pc, #288]	@ (8003a68 <HAL_GPIO_Init+0x2ec>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00d      	beq.n	8003966 <HAL_GPIO_Init+0x1ea>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a47      	ldr	r2, [pc, #284]	@ (8003a6c <HAL_GPIO_Init+0x2f0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d007      	beq.n	8003962 <HAL_GPIO_Init+0x1e6>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a46      	ldr	r2, [pc, #280]	@ (8003a70 <HAL_GPIO_Init+0x2f4>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d101      	bne.n	800395e <HAL_GPIO_Init+0x1e2>
 800395a:	2305      	movs	r3, #5
 800395c:	e00a      	b.n	8003974 <HAL_GPIO_Init+0x1f8>
 800395e:	2306      	movs	r3, #6
 8003960:	e008      	b.n	8003974 <HAL_GPIO_Init+0x1f8>
 8003962:	2304      	movs	r3, #4
 8003964:	e006      	b.n	8003974 <HAL_GPIO_Init+0x1f8>
 8003966:	2303      	movs	r3, #3
 8003968:	e004      	b.n	8003974 <HAL_GPIO_Init+0x1f8>
 800396a:	2302      	movs	r3, #2
 800396c:	e002      	b.n	8003974 <HAL_GPIO_Init+0x1f8>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <HAL_GPIO_Init+0x1f8>
 8003972:	2300      	movs	r3, #0
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	2103      	movs	r1, #3
 8003978:	400a      	ands	r2, r1
 800397a:	0092      	lsls	r2, r2, #2
 800397c:	4093      	lsls	r3, r2
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003984:	4935      	ldr	r1, [pc, #212]	@ (8003a5c <HAL_GPIO_Init+0x2e0>)
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	089b      	lsrs	r3, r3, #2
 800398a:	3302      	adds	r3, #2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003992:	4b38      	ldr	r3, [pc, #224]	@ (8003a74 <HAL_GPIO_Init+0x2f8>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	43da      	mvns	r2, r3
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4013      	ands	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	2380      	movs	r3, #128	@ 0x80
 80039a8:	035b      	lsls	r3, r3, #13
 80039aa:	4013      	ands	r3, r2
 80039ac:	d003      	beq.n	80039b6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80039b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a74 <HAL_GPIO_Init+0x2f8>)
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80039bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003a74 <HAL_GPIO_Init+0x2f8>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	43da      	mvns	r2, r3
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4013      	ands	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	2380      	movs	r3, #128	@ 0x80
 80039d2:	039b      	lsls	r3, r3, #14
 80039d4:	4013      	ands	r3, r2
 80039d6:	d003      	beq.n	80039e0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80039e0:	4b24      	ldr	r3, [pc, #144]	@ (8003a74 <HAL_GPIO_Init+0x2f8>)
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80039e6:	4b23      	ldr	r3, [pc, #140]	@ (8003a74 <HAL_GPIO_Init+0x2f8>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	43da      	mvns	r2, r3
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685a      	ldr	r2, [r3, #4]
 80039fa:	2380      	movs	r3, #128	@ 0x80
 80039fc:	029b      	lsls	r3, r3, #10
 80039fe:	4013      	ands	r3, r2
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8003a74 <HAL_GPIO_Init+0x2f8>)
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a10:	4b18      	ldr	r3, [pc, #96]	@ (8003a74 <HAL_GPIO_Init+0x2f8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	43da      	mvns	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	2380      	movs	r3, #128	@ 0x80
 8003a26:	025b      	lsls	r3, r3, #9
 8003a28:	4013      	ands	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003a34:	4b0f      	ldr	r3, [pc, #60]	@ (8003a74 <HAL_GPIO_Init+0x2f8>)
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	40da      	lsrs	r2, r3
 8003a48:	1e13      	subs	r3, r2, #0
 8003a4a:	d000      	beq.n	8003a4e <HAL_GPIO_Init+0x2d2>
 8003a4c:	e6a2      	b.n	8003794 <HAL_GPIO_Init+0x18>
  }
}
 8003a4e:	46c0      	nop			@ (mov r8, r8)
 8003a50:	46c0      	nop			@ (mov r8, r8)
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b006      	add	sp, #24
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	40021000 	.word	0x40021000
 8003a5c:	40010000 	.word	0x40010000
 8003a60:	50000400 	.word	0x50000400
 8003a64:	50000800 	.word	0x50000800
 8003a68:	50000c00 	.word	0x50000c00
 8003a6c:	50001000 	.word	0x50001000
 8003a70:	50001c00 	.word	0x50001c00
 8003a74:	40010400 	.word	0x40010400

08003a78 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8003a8e:	e0bc      	b.n	8003c0a <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8003a90:	2201      	movs	r2, #1
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	409a      	lsls	r2, r3
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d100      	bne.n	8003aa4 <HAL_GPIO_DeInit+0x2c>
 8003aa2:	e0af      	b.n	8003c04 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8003aa4:	4a5e      	ldr	r2, [pc, #376]	@ (8003c20 <HAL_GPIO_DeInit+0x1a8>)
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	089b      	lsrs	r3, r3, #2
 8003aaa:	3302      	adds	r3, #2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	589b      	ldr	r3, [r3, r2]
 8003ab0:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	220f      	movs	r2, #15
 8003abc:	409a      	lsls	r2, r3
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	23a0      	movs	r3, #160	@ 0xa0
 8003ac8:	05db      	lsls	r3, r3, #23
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d01f      	beq.n	8003b0e <HAL_GPIO_DeInit+0x96>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a54      	ldr	r2, [pc, #336]	@ (8003c24 <HAL_GPIO_DeInit+0x1ac>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d019      	beq.n	8003b0a <HAL_GPIO_DeInit+0x92>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a53      	ldr	r2, [pc, #332]	@ (8003c28 <HAL_GPIO_DeInit+0x1b0>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <HAL_GPIO_DeInit+0x8e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a52      	ldr	r2, [pc, #328]	@ (8003c2c <HAL_GPIO_DeInit+0x1b4>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00d      	beq.n	8003b02 <HAL_GPIO_DeInit+0x8a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a51      	ldr	r2, [pc, #324]	@ (8003c30 <HAL_GPIO_DeInit+0x1b8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <HAL_GPIO_DeInit+0x86>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a50      	ldr	r2, [pc, #320]	@ (8003c34 <HAL_GPIO_DeInit+0x1bc>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d101      	bne.n	8003afa <HAL_GPIO_DeInit+0x82>
 8003af6:	2305      	movs	r3, #5
 8003af8:	e00a      	b.n	8003b10 <HAL_GPIO_DeInit+0x98>
 8003afa:	2306      	movs	r3, #6
 8003afc:	e008      	b.n	8003b10 <HAL_GPIO_DeInit+0x98>
 8003afe:	2304      	movs	r3, #4
 8003b00:	e006      	b.n	8003b10 <HAL_GPIO_DeInit+0x98>
 8003b02:	2303      	movs	r3, #3
 8003b04:	e004      	b.n	8003b10 <HAL_GPIO_DeInit+0x98>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e002      	b.n	8003b10 <HAL_GPIO_DeInit+0x98>
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <HAL_GPIO_DeInit+0x98>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	2103      	movs	r1, #3
 8003b14:	400a      	ands	r2, r1
 8003b16:	0092      	lsls	r2, r2, #2
 8003b18:	4093      	lsls	r3, r2
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d132      	bne.n	8003b86 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003b20:	4b45      	ldr	r3, [pc, #276]	@ (8003c38 <HAL_GPIO_DeInit+0x1c0>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	43d9      	mvns	r1, r3
 8003b28:	4b43      	ldr	r3, [pc, #268]	@ (8003c38 <HAL_GPIO_DeInit+0x1c0>)
 8003b2a:	400a      	ands	r2, r1
 8003b2c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003b2e:	4b42      	ldr	r3, [pc, #264]	@ (8003c38 <HAL_GPIO_DeInit+0x1c0>)
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	43d9      	mvns	r1, r3
 8003b36:	4b40      	ldr	r3, [pc, #256]	@ (8003c38 <HAL_GPIO_DeInit+0x1c0>)
 8003b38:	400a      	ands	r2, r1
 8003b3a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003b3c:	4b3e      	ldr	r3, [pc, #248]	@ (8003c38 <HAL_GPIO_DeInit+0x1c0>)
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	43d9      	mvns	r1, r3
 8003b44:	4b3c      	ldr	r3, [pc, #240]	@ (8003c38 <HAL_GPIO_DeInit+0x1c0>)
 8003b46:	400a      	ands	r2, r1
 8003b48:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003b4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c38 <HAL_GPIO_DeInit+0x1c0>)
 8003b4c:	689a      	ldr	r2, [r3, #8]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	43d9      	mvns	r1, r3
 8003b52:	4b39      	ldr	r3, [pc, #228]	@ (8003c38 <HAL_GPIO_DeInit+0x1c0>)
 8003b54:	400a      	ands	r2, r1
 8003b56:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	220f      	movs	r2, #15
 8003b62:	409a      	lsls	r2, r3
 8003b64:	0013      	movs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003b68:	4a2d      	ldr	r2, [pc, #180]	@ (8003c20 <HAL_GPIO_DeInit+0x1a8>)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	3302      	adds	r3, #2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	589a      	ldr	r2, [r3, r2]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	43d9      	mvns	r1, r3
 8003b78:	4829      	ldr	r0, [pc, #164]	@ (8003c20 <HAL_GPIO_DeInit+0x1a8>)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	400a      	ands	r2, r1
 8003b80:	3302      	adds	r3, #2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2103      	movs	r1, #3
 8003b90:	4099      	lsls	r1, r3
 8003b92:	000b      	movs	r3, r1
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	08da      	lsrs	r2, r3, #3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3208      	adds	r2, #8
 8003ba2:	0092      	lsls	r2, r2, #2
 8003ba4:	58d3      	ldr	r3, [r2, r3]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	2107      	movs	r1, #7
 8003baa:	400a      	ands	r2, r1
 8003bac:	0092      	lsls	r2, r2, #2
 8003bae:	210f      	movs	r1, #15
 8003bb0:	4091      	lsls	r1, r2
 8003bb2:	000a      	movs	r2, r1
 8003bb4:	43d1      	mvns	r1, r2
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	08d2      	lsrs	r2, r2, #3
 8003bba:	4019      	ands	r1, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3208      	adds	r2, #8
 8003bc0:	0092      	lsls	r2, r2, #2
 8003bc2:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	697a      	ldr	r2, [r7, #20]
 8003bca:	0052      	lsls	r2, r2, #1
 8003bcc:	2103      	movs	r1, #3
 8003bce:	4091      	lsls	r1, r2
 8003bd0:	000a      	movs	r2, r1
 8003bd2:	43d2      	mvns	r2, r2
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2101      	movs	r1, #1
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4091      	lsls	r1, r2
 8003be4:	000a      	movs	r2, r1
 8003be6:	43d2      	mvns	r2, r2
 8003be8:	401a      	ands	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	697a      	ldr	r2, [r7, #20]
 8003bf4:	0052      	lsls	r2, r2, #1
 8003bf6:	2103      	movs	r1, #3
 8003bf8:	4091      	lsls	r1, r2
 8003bfa:	000a      	movs	r2, r1
 8003bfc:	43d2      	mvns	r2, r2
 8003bfe:	401a      	ands	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	609a      	str	r2, [r3, #8]
    }
    position++;
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	3301      	adds	r3, #1
 8003c08:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	40da      	lsrs	r2, r3
 8003c10:	1e13      	subs	r3, r2, #0
 8003c12:	d000      	beq.n	8003c16 <HAL_GPIO_DeInit+0x19e>
 8003c14:	e73c      	b.n	8003a90 <HAL_GPIO_DeInit+0x18>
  }
}
 8003c16:	46c0      	nop			@ (mov r8, r8)
 8003c18:	46c0      	nop			@ (mov r8, r8)
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	b006      	add	sp, #24
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40010000 	.word	0x40010000
 8003c24:	50000400 	.word	0x50000400
 8003c28:	50000800 	.word	0x50000800
 8003c2c:	50000c00 	.word	0x50000c00
 8003c30:	50001000 	.word	0x50001000
 8003c34:	50001c00 	.word	0x50001c00
 8003c38:	40010400 	.word	0x40010400

08003c3c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	000a      	movs	r2, r1
 8003c46:	1cbb      	adds	r3, r7, #2
 8003c48:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	1cba      	adds	r2, r7, #2
 8003c50:	8812      	ldrh	r2, [r2, #0]
 8003c52:	4013      	ands	r3, r2
 8003c54:	d004      	beq.n	8003c60 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003c56:	230f      	movs	r3, #15
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e003      	b.n	8003c68 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c60:	230f      	movs	r3, #15
 8003c62:	18fb      	adds	r3, r7, r3
 8003c64:	2200      	movs	r2, #0
 8003c66:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003c68:	230f      	movs	r3, #15
 8003c6a:	18fb      	adds	r3, r7, r3
 8003c6c:	781b      	ldrb	r3, [r3, #0]
}
 8003c6e:	0018      	movs	r0, r3
 8003c70:	46bd      	mov	sp, r7
 8003c72:	b004      	add	sp, #16
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	0008      	movs	r0, r1
 8003c80:	0011      	movs	r1, r2
 8003c82:	1cbb      	adds	r3, r7, #2
 8003c84:	1c02      	adds	r2, r0, #0
 8003c86:	801a      	strh	r2, [r3, #0]
 8003c88:	1c7b      	adds	r3, r7, #1
 8003c8a:	1c0a      	adds	r2, r1, #0
 8003c8c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c8e:	1c7b      	adds	r3, r7, #1
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d004      	beq.n	8003ca0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c96:	1cbb      	adds	r3, r7, #2
 8003c98:	881a      	ldrh	r2, [r3, #0]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003c9e:	e003      	b.n	8003ca8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003ca0:	1cbb      	adds	r3, r7, #2
 8003ca2:	881a      	ldrh	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ca8:	46c0      	nop			@ (mov r8, r8)
 8003caa:	46bd      	mov	sp, r7
 8003cac:	b002      	add	sp, #8
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e08f      	b.n	8003de2 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2241      	movs	r2, #65	@ 0x41
 8003cc6:	5c9b      	ldrb	r3, [r3, r2]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d107      	bne.n	8003cde <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2240      	movs	r2, #64	@ 0x40
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f7fd fc29 	bl	8001530 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2241      	movs	r2, #65	@ 0x41
 8003ce2:	2124      	movs	r1, #36	@ 0x24
 8003ce4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	438a      	bics	r2, r1
 8003cf4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	493b      	ldr	r1, [pc, #236]	@ (8003dec <HAL_I2C_Init+0x13c>)
 8003d00:	400a      	ands	r2, r1
 8003d02:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4938      	ldr	r1, [pc, #224]	@ (8003df0 <HAL_I2C_Init+0x140>)
 8003d10:	400a      	ands	r2, r1
 8003d12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d108      	bne.n	8003d2e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2180      	movs	r1, #128	@ 0x80
 8003d26:	0209      	lsls	r1, r1, #8
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	e007      	b.n	8003d3e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2184      	movs	r1, #132	@ 0x84
 8003d38:	0209      	lsls	r1, r1, #8
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d109      	bne.n	8003d5a <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2180      	movs	r1, #128	@ 0x80
 8003d52:	0109      	lsls	r1, r1, #4
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
 8003d58:	e007      	b.n	8003d6a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4923      	ldr	r1, [pc, #140]	@ (8003df4 <HAL_I2C_Init+0x144>)
 8003d66:	400a      	ands	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4920      	ldr	r1, [pc, #128]	@ (8003df8 <HAL_I2C_Init+0x148>)
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	491a      	ldr	r1, [pc, #104]	@ (8003df0 <HAL_I2C_Init+0x140>)
 8003d86:	400a      	ands	r2, r1
 8003d88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69d9      	ldr	r1, [r3, #28]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1a      	ldr	r2, [r3, #32]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2241      	movs	r2, #65	@ 0x41
 8003dce:	2120      	movs	r1, #32
 8003dd0:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2242      	movs	r2, #66	@ 0x42
 8003ddc:	2100      	movs	r1, #0
 8003dde:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	0018      	movs	r0, r3
 8003de4:	46bd      	mov	sp, r7
 8003de6:	b002      	add	sp, #8
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	46c0      	nop			@ (mov r8, r8)
 8003dec:	f0ffffff 	.word	0xf0ffffff
 8003df0:	ffff7fff 	.word	0xffff7fff
 8003df4:	fffff7ff 	.word	0xfffff7ff
 8003df8:	02008000 	.word	0x02008000

08003dfc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e022      	b.n	8003e54 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2241      	movs	r2, #65	@ 0x41
 8003e12:	2124      	movs	r1, #36	@ 0x24
 8003e14:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2101      	movs	r1, #1
 8003e22:	438a      	bics	r2, r1
 8003e24:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f7fd fbc5 	bl	80015b8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2241      	movs	r2, #65	@ 0x41
 8003e38:	2100      	movs	r1, #0
 8003e3a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2242      	movs	r2, #66	@ 0x42
 8003e46:	2100      	movs	r1, #0
 8003e48:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2240      	movs	r2, #64	@ 0x40
 8003e4e:	2100      	movs	r1, #0
 8003e50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	0018      	movs	r0, r3
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b089      	sub	sp, #36	@ 0x24
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	0008      	movs	r0, r1
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	0019      	movs	r1, r3
 8003e6a:	230a      	movs	r3, #10
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	1c02      	adds	r2, r0, #0
 8003e70:	801a      	strh	r2, [r3, #0]
 8003e72:	2308      	movs	r3, #8
 8003e74:	18fb      	adds	r3, r7, r3
 8003e76:	1c0a      	adds	r2, r1, #0
 8003e78:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2241      	movs	r2, #65	@ 0x41
 8003e7e:	5c9b      	ldrb	r3, [r3, r2]
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d000      	beq.n	8003e88 <HAL_I2C_Master_Transmit+0x2c>
 8003e86:	e10a      	b.n	800409e <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2240      	movs	r2, #64	@ 0x40
 8003e8c:	5c9b      	ldrb	r3, [r3, r2]
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d101      	bne.n	8003e96 <HAL_I2C_Master_Transmit+0x3a>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e104      	b.n	80040a0 <HAL_I2C_Master_Transmit+0x244>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2240      	movs	r2, #64	@ 0x40
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e9e:	f7fe fddf 	bl	8002a60 <HAL_GetTick>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ea6:	2380      	movs	r3, #128	@ 0x80
 8003ea8:	0219      	lsls	r1, r3, #8
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	2319      	movs	r3, #25
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f000 fb22 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8003eb8:	1e03      	subs	r3, r0, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0ef      	b.n	80040a0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2241      	movs	r2, #65	@ 0x41
 8003ec4:	2121      	movs	r1, #33	@ 0x21
 8003ec6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2242      	movs	r2, #66	@ 0x42
 8003ecc:	2110      	movs	r1, #16
 8003ece:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2208      	movs	r2, #8
 8003ee0:	18ba      	adds	r2, r7, r2
 8003ee2:	8812      	ldrh	r2, [r2, #0]
 8003ee4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2bff      	cmp	r3, #255	@ 0xff
 8003ef4:	d906      	bls.n	8003f04 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	22ff      	movs	r2, #255	@ 0xff
 8003efa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003efc:	2380      	movs	r3, #128	@ 0x80
 8003efe:	045b      	lsls	r3, r3, #17
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	e007      	b.n	8003f14 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003f0e:	2380      	movs	r3, #128	@ 0x80
 8003f10:	049b      	lsls	r3, r3, #18
 8003f12:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d027      	beq.n	8003f6c <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	3301      	adds	r3, #1
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	697c      	ldr	r4, [r7, #20]
 8003f58:	230a      	movs	r3, #10
 8003f5a:	18fb      	adds	r3, r7, r3
 8003f5c:	8819      	ldrh	r1, [r3, #0]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	4b51      	ldr	r3, [pc, #324]	@ (80040a8 <HAL_I2C_Master_Transmit+0x24c>)
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	0023      	movs	r3, r4
 8003f66:	f000 fd41 	bl	80049ec <I2C_TransferConfig>
 8003f6a:	e06f      	b.n	800404c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	697c      	ldr	r4, [r7, #20]
 8003f74:	230a      	movs	r3, #10
 8003f76:	18fb      	adds	r3, r7, r3
 8003f78:	8819      	ldrh	r1, [r3, #0]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80040a8 <HAL_I2C_Master_Transmit+0x24c>)
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	0023      	movs	r3, r4
 8003f82:	f000 fd33 	bl	80049ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003f86:	e061      	b.n	800404c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	0018      	movs	r0, r3
 8003f90:	f000 fb0c 	bl	80045ac <I2C_WaitOnTXISFlagUntilTimeout>
 8003f94:	1e03      	subs	r3, r0, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e081      	b.n	80040a0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	781a      	ldrb	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d03a      	beq.n	800404c <HAL_I2C_Master_Transmit+0x1f0>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d136      	bne.n	800404c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	0013      	movs	r3, r2
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2180      	movs	r1, #128	@ 0x80
 8003fec:	f000 fa86 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8003ff0:	1e03      	subs	r3, r0, #0
 8003ff2:	d001      	beq.n	8003ff8 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e053      	b.n	80040a0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	2bff      	cmp	r3, #255	@ 0xff
 8004000:	d911      	bls.n	8004026 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	22ff      	movs	r2, #255	@ 0xff
 8004006:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400c:	b2da      	uxtb	r2, r3
 800400e:	2380      	movs	r3, #128	@ 0x80
 8004010:	045c      	lsls	r4, r3, #17
 8004012:	230a      	movs	r3, #10
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	8819      	ldrh	r1, [r3, #0]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	2300      	movs	r3, #0
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	0023      	movs	r3, r4
 8004020:	f000 fce4 	bl	80049ec <I2C_TransferConfig>
 8004024:	e012      	b.n	800404c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402a:	b29a      	uxth	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004034:	b2da      	uxtb	r2, r3
 8004036:	2380      	movs	r3, #128	@ 0x80
 8004038:	049c      	lsls	r4, r3, #18
 800403a:	230a      	movs	r3, #10
 800403c:	18fb      	adds	r3, r7, r3
 800403e:	8819      	ldrh	r1, [r3, #0]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	2300      	movs	r3, #0
 8004044:	9300      	str	r3, [sp, #0]
 8004046:	0023      	movs	r3, r4
 8004048:	f000 fcd0 	bl	80049ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	d198      	bne.n	8003f88 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	0018      	movs	r0, r3
 800405e:	f000 faeb 	bl	8004638 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004062:	1e03      	subs	r3, r0, #0
 8004064:	d001      	beq.n	800406a <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e01a      	b.n	80040a0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2220      	movs	r2, #32
 8004070:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	490b      	ldr	r1, [pc, #44]	@ (80040ac <HAL_I2C_Master_Transmit+0x250>)
 800407e:	400a      	ands	r2, r1
 8004080:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2241      	movs	r2, #65	@ 0x41
 8004086:	2120      	movs	r1, #32
 8004088:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2242      	movs	r2, #66	@ 0x42
 800408e:	2100      	movs	r1, #0
 8004090:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2240      	movs	r2, #64	@ 0x40
 8004096:	2100      	movs	r1, #0
 8004098:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	e000      	b.n	80040a0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800409e:	2302      	movs	r3, #2
  }
}
 80040a0:	0018      	movs	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b007      	add	sp, #28
 80040a6:	bd90      	pop	{r4, r7, pc}
 80040a8:	80002000 	.word	0x80002000
 80040ac:	fe00e800 	.word	0xfe00e800

080040b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80040b0:	b590      	push	{r4, r7, lr}
 80040b2:	b089      	sub	sp, #36	@ 0x24
 80040b4:	af02      	add	r7, sp, #8
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	0008      	movs	r0, r1
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	0019      	movs	r1, r3
 80040be:	230a      	movs	r3, #10
 80040c0:	18fb      	adds	r3, r7, r3
 80040c2:	1c02      	adds	r2, r0, #0
 80040c4:	801a      	strh	r2, [r3, #0]
 80040c6:	2308      	movs	r3, #8
 80040c8:	18fb      	adds	r3, r7, r3
 80040ca:	1c0a      	adds	r2, r1, #0
 80040cc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2241      	movs	r2, #65	@ 0x41
 80040d2:	5c9b      	ldrb	r3, [r3, r2]
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d000      	beq.n	80040dc <HAL_I2C_Master_Receive+0x2c>
 80040da:	e0e8      	b.n	80042ae <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2240      	movs	r2, #64	@ 0x40
 80040e0:	5c9b      	ldrb	r3, [r3, r2]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_I2C_Master_Receive+0x3a>
 80040e6:	2302      	movs	r3, #2
 80040e8:	e0e2      	b.n	80042b0 <HAL_I2C_Master_Receive+0x200>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2240      	movs	r2, #64	@ 0x40
 80040ee:	2101      	movs	r1, #1
 80040f0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040f2:	f7fe fcb5 	bl	8002a60 <HAL_GetTick>
 80040f6:	0003      	movs	r3, r0
 80040f8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040fa:	2380      	movs	r3, #128	@ 0x80
 80040fc:	0219      	lsls	r1, r3, #8
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	9300      	str	r3, [sp, #0]
 8004104:	2319      	movs	r3, #25
 8004106:	2201      	movs	r2, #1
 8004108:	f000 f9f8 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 800410c:	1e03      	subs	r3, r0, #0
 800410e:	d001      	beq.n	8004114 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0cd      	b.n	80042b0 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2241      	movs	r2, #65	@ 0x41
 8004118:	2122      	movs	r1, #34	@ 0x22
 800411a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2242      	movs	r2, #66	@ 0x42
 8004120:	2110      	movs	r1, #16
 8004122:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2208      	movs	r2, #8
 8004134:	18ba      	adds	r2, r7, r2
 8004136:	8812      	ldrh	r2, [r2, #0]
 8004138:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004144:	b29b      	uxth	r3, r3
 8004146:	2bff      	cmp	r3, #255	@ 0xff
 8004148:	d911      	bls.n	800416e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004154:	b2da      	uxtb	r2, r3
 8004156:	2380      	movs	r3, #128	@ 0x80
 8004158:	045c      	lsls	r4, r3, #17
 800415a:	230a      	movs	r3, #10
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	8819      	ldrh	r1, [r3, #0]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	4b55      	ldr	r3, [pc, #340]	@ (80042b8 <HAL_I2C_Master_Receive+0x208>)
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	0023      	movs	r3, r4
 8004168:	f000 fc40 	bl	80049ec <I2C_TransferConfig>
 800416c:	e076      	b.n	800425c <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004172:	b29a      	uxth	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417c:	b2da      	uxtb	r2, r3
 800417e:	2380      	movs	r3, #128	@ 0x80
 8004180:	049c      	lsls	r4, r3, #18
 8004182:	230a      	movs	r3, #10
 8004184:	18fb      	adds	r3, r7, r3
 8004186:	8819      	ldrh	r1, [r3, #0]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	4b4b      	ldr	r3, [pc, #300]	@ (80042b8 <HAL_I2C_Master_Receive+0x208>)
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	0023      	movs	r3, r4
 8004190:	f000 fc2c 	bl	80049ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004194:	e062      	b.n	800425c <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	0018      	movs	r0, r3
 800419e:	f000 fa8f 	bl	80046c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041a2:	1e03      	subs	r3, r0, #0
 80041a4:	d001      	beq.n	80041aa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e082      	b.n	80042b0 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041bc:	1c5a      	adds	r2, r3, #1
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d03a      	beq.n	800425c <HAL_I2C_Master_Receive+0x1ac>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d136      	bne.n	800425c <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	9300      	str	r3, [sp, #0]
 80041f6:	0013      	movs	r3, r2
 80041f8:	2200      	movs	r2, #0
 80041fa:	2180      	movs	r1, #128	@ 0x80
 80041fc:	f000 f97e 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8004200:	1e03      	subs	r3, r0, #0
 8004202:	d001      	beq.n	8004208 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e053      	b.n	80042b0 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800420c:	b29b      	uxth	r3, r3
 800420e:	2bff      	cmp	r3, #255	@ 0xff
 8004210:	d911      	bls.n	8004236 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	22ff      	movs	r2, #255	@ 0xff
 8004216:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800421c:	b2da      	uxtb	r2, r3
 800421e:	2380      	movs	r3, #128	@ 0x80
 8004220:	045c      	lsls	r4, r3, #17
 8004222:	230a      	movs	r3, #10
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	8819      	ldrh	r1, [r3, #0]
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	2300      	movs	r3, #0
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	0023      	movs	r3, r4
 8004230:	f000 fbdc 	bl	80049ec <I2C_TransferConfig>
 8004234:	e012      	b.n	800425c <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004244:	b2da      	uxtb	r2, r3
 8004246:	2380      	movs	r3, #128	@ 0x80
 8004248:	049c      	lsls	r4, r3, #18
 800424a:	230a      	movs	r3, #10
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	8819      	ldrh	r1, [r3, #0]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	2300      	movs	r3, #0
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	0023      	movs	r3, r4
 8004258:	f000 fbc8 	bl	80049ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004260:	b29b      	uxth	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d197      	bne.n	8004196 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	0018      	movs	r0, r3
 800426e:	f000 f9e3 	bl	8004638 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004272:	1e03      	subs	r3, r0, #0
 8004274:	d001      	beq.n	800427a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e01a      	b.n	80042b0 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2220      	movs	r2, #32
 8004280:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685a      	ldr	r2, [r3, #4]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	490b      	ldr	r1, [pc, #44]	@ (80042bc <HAL_I2C_Master_Receive+0x20c>)
 800428e:	400a      	ands	r2, r1
 8004290:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2241      	movs	r2, #65	@ 0x41
 8004296:	2120      	movs	r1, #32
 8004298:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2242      	movs	r2, #66	@ 0x42
 800429e:	2100      	movs	r1, #0
 80042a0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2240      	movs	r2, #64	@ 0x40
 80042a6:	2100      	movs	r1, #0
 80042a8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e000      	b.n	80042b0 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
  }
}
 80042b0:	0018      	movs	r0, r3
 80042b2:	46bd      	mov	sp, r7
 80042b4:	b007      	add	sp, #28
 80042b6:	bd90      	pop	{r4, r7, pc}
 80042b8:	80002400 	.word	0x80002400
 80042bc:	fe00e800 	.word	0xfe00e800

080042c0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b08a      	sub	sp, #40	@ 0x28
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	607a      	str	r2, [r7, #4]
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	230a      	movs	r3, #10
 80042ce:	18fb      	adds	r3, r7, r3
 80042d0:	1c0a      	adds	r2, r1, #0
 80042d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2241      	movs	r2, #65	@ 0x41
 80042dc:	5c9b      	ldrb	r3, [r3, r2]
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d000      	beq.n	80042e6 <HAL_I2C_IsDeviceReady+0x26>
 80042e4:	e0df      	b.n	80044a6 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699a      	ldr	r2, [r3, #24]
 80042ec:	2380      	movs	r3, #128	@ 0x80
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	401a      	ands	r2, r3
 80042f2:	2380      	movs	r3, #128	@ 0x80
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d101      	bne.n	80042fe <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80042fa:	2302      	movs	r3, #2
 80042fc:	e0d4      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2240      	movs	r2, #64	@ 0x40
 8004302:	5c9b      	ldrb	r3, [r3, r2]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d101      	bne.n	800430c <HAL_I2C_IsDeviceReady+0x4c>
 8004308:	2302      	movs	r3, #2
 800430a:	e0cd      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x1e8>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2240      	movs	r2, #64	@ 0x40
 8004310:	2101      	movs	r1, #1
 8004312:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2241      	movs	r2, #65	@ 0x41
 8004318:	2124      	movs	r1, #36	@ 0x24
 800431a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d107      	bne.n	800433a <HAL_I2C_IsDeviceReady+0x7a>
 800432a:	230a      	movs	r3, #10
 800432c:	18fb      	adds	r3, r7, r3
 800432e:	881b      	ldrh	r3, [r3, #0]
 8004330:	059b      	lsls	r3, r3, #22
 8004332:	0d9b      	lsrs	r3, r3, #22
 8004334:	4a5e      	ldr	r2, [pc, #376]	@ (80044b0 <HAL_I2C_IsDeviceReady+0x1f0>)
 8004336:	431a      	orrs	r2, r3
 8004338:	e006      	b.n	8004348 <HAL_I2C_IsDeviceReady+0x88>
 800433a:	230a      	movs	r3, #10
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	059b      	lsls	r3, r3, #22
 8004342:	0d9b      	lsrs	r3, r3, #22
 8004344:	4a5b      	ldr	r2, [pc, #364]	@ (80044b4 <HAL_I2C_IsDeviceReady+0x1f4>)
 8004346:	431a      	orrs	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800434e:	f7fe fb87 	bl	8002a60 <HAL_GetTick>
 8004352:	0003      	movs	r3, r0
 8004354:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2220      	movs	r2, #32
 800435e:	4013      	ands	r3, r2
 8004360:	3b20      	subs	r3, #32
 8004362:	425a      	negs	r2, r3
 8004364:	4153      	adcs	r3, r2
 8004366:	b2da      	uxtb	r2, r3
 8004368:	231f      	movs	r3, #31
 800436a:	18fb      	adds	r3, r7, r3
 800436c:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2210      	movs	r2, #16
 8004376:	4013      	ands	r3, r2
 8004378:	3b10      	subs	r3, #16
 800437a:	425a      	negs	r2, r3
 800437c:	4153      	adcs	r3, r2
 800437e:	b2da      	uxtb	r2, r3
 8004380:	231e      	movs	r3, #30
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004386:	e035      	b.n	80043f4 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	3301      	adds	r3, #1
 800438c:	d01a      	beq.n	80043c4 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800438e:	f7fe fb67 	bl	8002a60 <HAL_GetTick>
 8004392:	0002      	movs	r2, r0
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	683a      	ldr	r2, [r7, #0]
 800439a:	429a      	cmp	r2, r3
 800439c:	d302      	bcc.n	80043a4 <HAL_I2C_IsDeviceReady+0xe4>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10f      	bne.n	80043c4 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2241      	movs	r2, #65	@ 0x41
 80043a8:	2120      	movs	r1, #32
 80043aa:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b0:	2220      	movs	r2, #32
 80043b2:	431a      	orrs	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2240      	movs	r2, #64	@ 0x40
 80043bc:	2100      	movs	r1, #0
 80043be:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e071      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2220      	movs	r2, #32
 80043cc:	4013      	ands	r3, r2
 80043ce:	3b20      	subs	r3, #32
 80043d0:	425a      	negs	r2, r3
 80043d2:	4153      	adcs	r3, r2
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	231f      	movs	r3, #31
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	2210      	movs	r2, #16
 80043e4:	4013      	ands	r3, r2
 80043e6:	3b10      	subs	r3, #16
 80043e8:	425a      	negs	r2, r3
 80043ea:	4153      	adcs	r3, r2
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	231e      	movs	r3, #30
 80043f0:	18fb      	adds	r3, r7, r3
 80043f2:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80043f4:	231f      	movs	r3, #31
 80043f6:	18fb      	adds	r3, r7, r3
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d104      	bne.n	8004408 <HAL_I2C_IsDeviceReady+0x148>
 80043fe:	231e      	movs	r3, #30
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	781b      	ldrb	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d0bf      	beq.n	8004388 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	2210      	movs	r2, #16
 8004410:	4013      	ands	r3, r2
 8004412:	2b10      	cmp	r3, #16
 8004414:	d01a      	beq.n	800444c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004416:	683a      	ldr	r2, [r7, #0]
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	0013      	movs	r3, r2
 8004420:	2200      	movs	r2, #0
 8004422:	2120      	movs	r1, #32
 8004424:	f000 f86a 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 8004428:	1e03      	subs	r3, r0, #0
 800442a:	d001      	beq.n	8004430 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e03b      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2220      	movs	r2, #32
 8004436:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2241      	movs	r2, #65	@ 0x41
 800443c:	2120      	movs	r1, #32
 800443e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2240      	movs	r2, #64	@ 0x40
 8004444:	2100      	movs	r1, #0
 8004446:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004448:	2300      	movs	r3, #0
 800444a:	e02d      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	0013      	movs	r3, r2
 8004456:	2200      	movs	r2, #0
 8004458:	2120      	movs	r1, #32
 800445a:	f000 f84f 	bl	80044fc <I2C_WaitOnFlagUntilTimeout>
 800445e:	1e03      	subs	r3, r0, #0
 8004460:	d001      	beq.n	8004466 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e020      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2210      	movs	r2, #16
 800446c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2220      	movs	r2, #32
 8004474:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	3301      	adds	r3, #1
 800447a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	429a      	cmp	r2, r3
 8004482:	d900      	bls.n	8004486 <HAL_I2C_IsDeviceReady+0x1c6>
 8004484:	e74d      	b.n	8004322 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2241      	movs	r2, #65	@ 0x41
 800448a:	2120      	movs	r1, #32
 800448c:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004492:	2220      	movs	r2, #32
 8004494:	431a      	orrs	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2240      	movs	r2, #64	@ 0x40
 800449e:	2100      	movs	r1, #0
 80044a0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e000      	b.n	80044a8 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80044a6:	2302      	movs	r3, #2
  }
}
 80044a8:	0018      	movs	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b008      	add	sp, #32
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	02002000 	.word	0x02002000
 80044b4:	02002800 	.word	0x02002800

080044b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2202      	movs	r2, #2
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d103      	bne.n	80044d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	2201      	movs	r2, #1
 80044de:	4013      	ands	r3, r2
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d007      	beq.n	80044f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	699a      	ldr	r2, [r3, #24]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2101      	movs	r1, #1
 80044f0:	430a      	orrs	r2, r1
 80044f2:	619a      	str	r2, [r3, #24]
  }
}
 80044f4:	46c0      	nop			@ (mov r8, r8)
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b002      	add	sp, #8
 80044fa:	bd80      	pop	{r7, pc}

080044fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	603b      	str	r3, [r7, #0]
 8004508:	1dfb      	adds	r3, r7, #7
 800450a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800450c:	e03a      	b.n	8004584 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	6839      	ldr	r1, [r7, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	0018      	movs	r0, r3
 8004516:	f000 f971 	bl	80047fc <I2C_IsErrorOccurred>
 800451a:	1e03      	subs	r3, r0, #0
 800451c:	d001      	beq.n	8004522 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e040      	b.n	80045a4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	3301      	adds	r3, #1
 8004526:	d02d      	beq.n	8004584 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004528:	f7fe fa9a 	bl	8002a60 <HAL_GetTick>
 800452c:	0002      	movs	r2, r0
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d302      	bcc.n	800453e <I2C_WaitOnFlagUntilTimeout+0x42>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d122      	bne.n	8004584 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	4013      	ands	r3, r2
 8004548:	68ba      	ldr	r2, [r7, #8]
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	425a      	negs	r2, r3
 800454e:	4153      	adcs	r3, r2
 8004550:	b2db      	uxtb	r3, r3
 8004552:	001a      	movs	r2, r3
 8004554:	1dfb      	adds	r3, r7, #7
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d113      	bne.n	8004584 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004560:	2220      	movs	r2, #32
 8004562:	431a      	orrs	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2241      	movs	r2, #65	@ 0x41
 800456c:	2120      	movs	r1, #32
 800456e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2242      	movs	r2, #66	@ 0x42
 8004574:	2100      	movs	r1, #0
 8004576:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2240      	movs	r2, #64	@ 0x40
 800457c:	2100      	movs	r1, #0
 800457e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e00f      	b.n	80045a4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	4013      	ands	r3, r2
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	425a      	negs	r2, r3
 8004594:	4153      	adcs	r3, r2
 8004596:	b2db      	uxtb	r3, r3
 8004598:	001a      	movs	r2, r3
 800459a:	1dfb      	adds	r3, r7, #7
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d0b5      	beq.n	800450e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	0018      	movs	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	b004      	add	sp, #16
 80045aa:	bd80      	pop	{r7, pc}

080045ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80045b8:	e032      	b.n	8004620 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	0018      	movs	r0, r3
 80045c2:	f000 f91b 	bl	80047fc <I2C_IsErrorOccurred>
 80045c6:	1e03      	subs	r3, r0, #0
 80045c8:	d001      	beq.n	80045ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e030      	b.n	8004630 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	3301      	adds	r3, #1
 80045d2:	d025      	beq.n	8004620 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045d4:	f7fe fa44 	bl	8002a60 <HAL_GetTick>
 80045d8:	0002      	movs	r2, r0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	68ba      	ldr	r2, [r7, #8]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d302      	bcc.n	80045ea <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d11a      	bne.n	8004620 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	2202      	movs	r2, #2
 80045f2:	4013      	ands	r3, r2
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d013      	beq.n	8004620 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fc:	2220      	movs	r2, #32
 80045fe:	431a      	orrs	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2241      	movs	r2, #65	@ 0x41
 8004608:	2120      	movs	r1, #32
 800460a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2242      	movs	r2, #66	@ 0x42
 8004610:	2100      	movs	r1, #0
 8004612:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2240      	movs	r2, #64	@ 0x40
 8004618:	2100      	movs	r1, #0
 800461a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e007      	b.n	8004630 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2202      	movs	r2, #2
 8004628:	4013      	ands	r3, r2
 800462a:	2b02      	cmp	r3, #2
 800462c:	d1c5      	bne.n	80045ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800462e:	2300      	movs	r3, #0
}
 8004630:	0018      	movs	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	b004      	add	sp, #16
 8004636:	bd80      	pop	{r7, pc}

08004638 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004644:	e02f      	b.n	80046a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	0018      	movs	r0, r3
 800464e:	f000 f8d5 	bl	80047fc <I2C_IsErrorOccurred>
 8004652:	1e03      	subs	r3, r0, #0
 8004654:	d001      	beq.n	800465a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e02d      	b.n	80046b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465a:	f7fe fa01 	bl	8002a60 <HAL_GetTick>
 800465e:	0002      	movs	r2, r0
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	429a      	cmp	r2, r3
 8004668:	d302      	bcc.n	8004670 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d11a      	bne.n	80046a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	2220      	movs	r2, #32
 8004678:	4013      	ands	r3, r2
 800467a:	2b20      	cmp	r3, #32
 800467c:	d013      	beq.n	80046a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004682:	2220      	movs	r2, #32
 8004684:	431a      	orrs	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2241      	movs	r2, #65	@ 0x41
 800468e:	2120      	movs	r1, #32
 8004690:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2242      	movs	r2, #66	@ 0x42
 8004696:	2100      	movs	r1, #0
 8004698:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2240      	movs	r2, #64	@ 0x40
 800469e:	2100      	movs	r1, #0
 80046a0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e007      	b.n	80046b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2220      	movs	r2, #32
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d1c8      	bne.n	8004646 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	0018      	movs	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b004      	add	sp, #16
 80046bc:	bd80      	pop	{r7, pc}
	...

080046c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046cc:	2317      	movs	r3, #23
 80046ce:	18fb      	adds	r3, r7, r3
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80046d4:	e07b      	b.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	0018      	movs	r0, r3
 80046de:	f000 f88d 	bl	80047fc <I2C_IsErrorOccurred>
 80046e2:	1e03      	subs	r3, r0, #0
 80046e4:	d003      	beq.n	80046ee <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 80046e6:	2317      	movs	r3, #23
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	2201      	movs	r2, #1
 80046ec:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	2220      	movs	r2, #32
 80046f6:	4013      	ands	r3, r2
 80046f8:	2b20      	cmp	r3, #32
 80046fa:	d140      	bne.n	800477e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 80046fc:	2117      	movs	r1, #23
 80046fe:	187b      	adds	r3, r7, r1
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d13b      	bne.n	800477e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	2204      	movs	r2, #4
 800470e:	4013      	ands	r3, r2
 8004710:	2b04      	cmp	r3, #4
 8004712:	d106      	bne.n	8004722 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004718:	2b00      	cmp	r3, #0
 800471a:	d002      	beq.n	8004722 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800471c:	187b      	adds	r3, r7, r1
 800471e:	2200      	movs	r2, #0
 8004720:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	699b      	ldr	r3, [r3, #24]
 8004728:	2210      	movs	r2, #16
 800472a:	4013      	ands	r3, r2
 800472c:	2b10      	cmp	r3, #16
 800472e:	d123      	bne.n	8004778 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2210      	movs	r2, #16
 8004736:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2204      	movs	r2, #4
 800473c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2220      	movs	r2, #32
 8004744:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4929      	ldr	r1, [pc, #164]	@ (80047f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8004752:	400a      	ands	r2, r1
 8004754:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2241      	movs	r2, #65	@ 0x41
 800475a:	2120      	movs	r1, #32
 800475c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2242      	movs	r2, #66	@ 0x42
 8004762:	2100      	movs	r1, #0
 8004764:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2240      	movs	r2, #64	@ 0x40
 800476a:	2100      	movs	r1, #0
 800476c:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800476e:	2317      	movs	r3, #23
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	2201      	movs	r2, #1
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e002      	b.n	800477e <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800477e:	f7fe f96f 	bl	8002a60 <HAL_GetTick>
 8004782:	0002      	movs	r2, r0
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	429a      	cmp	r2, r3
 800478c:	d302      	bcc.n	8004794 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d11c      	bne.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8004794:	2017      	movs	r0, #23
 8004796:	183b      	adds	r3, r7, r0
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d117      	bne.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	2204      	movs	r2, #4
 80047a6:	4013      	ands	r3, r2
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d010      	beq.n	80047ce <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b0:	2220      	movs	r2, #32
 80047b2:	431a      	orrs	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2241      	movs	r2, #65	@ 0x41
 80047bc:	2120      	movs	r1, #32
 80047be:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2240      	movs	r2, #64	@ 0x40
 80047c4:	2100      	movs	r1, #0
 80047c6:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80047c8:	183b      	adds	r3, r7, r0
 80047ca:	2201      	movs	r2, #1
 80047cc:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	2204      	movs	r2, #4
 80047d6:	4013      	ands	r3, r2
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d005      	beq.n	80047e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80047dc:	2317      	movs	r3, #23
 80047de:	18fb      	adds	r3, r7, r3
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d100      	bne.n	80047e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 80047e6:	e776      	b.n	80046d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 80047e8:	2317      	movs	r3, #23
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	781b      	ldrb	r3, [r3, #0]
}
 80047ee:	0018      	movs	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	b006      	add	sp, #24
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	46c0      	nop			@ (mov r8, r8)
 80047f8:	fe00e800 	.word	0xfe00e800

080047fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08a      	sub	sp, #40	@ 0x28
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004808:	2327      	movs	r3, #39	@ 0x27
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	2210      	movs	r2, #16
 8004824:	4013      	ands	r3, r2
 8004826:	d100      	bne.n	800482a <I2C_IsErrorOccurred+0x2e>
 8004828:	e079      	b.n	800491e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2210      	movs	r2, #16
 8004830:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004832:	e057      	b.n	80048e4 <I2C_IsErrorOccurred+0xe8>
 8004834:	2227      	movs	r2, #39	@ 0x27
 8004836:	18bb      	adds	r3, r7, r2
 8004838:	18ba      	adds	r2, r7, r2
 800483a:	7812      	ldrb	r2, [r2, #0]
 800483c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	3301      	adds	r3, #1
 8004842:	d04f      	beq.n	80048e4 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004844:	f7fe f90c 	bl	8002a60 <HAL_GetTick>
 8004848:	0002      	movs	r2, r0
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	429a      	cmp	r2, r3
 8004852:	d302      	bcc.n	800485a <I2C_IsErrorOccurred+0x5e>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d144      	bne.n	80048e4 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	2380      	movs	r3, #128	@ 0x80
 8004862:	01db      	lsls	r3, r3, #7
 8004864:	4013      	ands	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004868:	2013      	movs	r0, #19
 800486a:	183b      	adds	r3, r7, r0
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	2142      	movs	r1, #66	@ 0x42
 8004870:	5c52      	ldrb	r2, [r2, r1]
 8004872:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699a      	ldr	r2, [r3, #24]
 800487a:	2380      	movs	r3, #128	@ 0x80
 800487c:	021b      	lsls	r3, r3, #8
 800487e:	401a      	ands	r2, r3
 8004880:	2380      	movs	r3, #128	@ 0x80
 8004882:	021b      	lsls	r3, r3, #8
 8004884:	429a      	cmp	r2, r3
 8004886:	d126      	bne.n	80048d6 <I2C_IsErrorOccurred+0xda>
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	2380      	movs	r3, #128	@ 0x80
 800488c:	01db      	lsls	r3, r3, #7
 800488e:	429a      	cmp	r2, r3
 8004890:	d021      	beq.n	80048d6 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004892:	183b      	adds	r3, r7, r0
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	2b20      	cmp	r3, #32
 8004898:	d01d      	beq.n	80048d6 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2180      	movs	r1, #128	@ 0x80
 80048a6:	01c9      	lsls	r1, r1, #7
 80048a8:	430a      	orrs	r2, r1
 80048aa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048ac:	f7fe f8d8 	bl	8002a60 <HAL_GetTick>
 80048b0:	0003      	movs	r3, r0
 80048b2:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048b4:	e00f      	b.n	80048d6 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048b6:	f7fe f8d3 	bl	8002a60 <HAL_GetTick>
 80048ba:	0002      	movs	r2, r0
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b19      	cmp	r3, #25
 80048c2:	d908      	bls.n	80048d6 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	2220      	movs	r2, #32
 80048c8:	4313      	orrs	r3, r2
 80048ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80048cc:	2327      	movs	r3, #39	@ 0x27
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	2201      	movs	r2, #1
 80048d2:	701a      	strb	r2, [r3, #0]

              break;
 80048d4:	e006      	b.n	80048e4 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	2220      	movs	r2, #32
 80048de:	4013      	ands	r3, r2
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d1e8      	bne.n	80048b6 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2220      	movs	r2, #32
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d004      	beq.n	80048fc <I2C_IsErrorOccurred+0x100>
 80048f2:	2327      	movs	r3, #39	@ 0x27
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d09b      	beq.n	8004834 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80048fc:	2327      	movs	r3, #39	@ 0x27
 80048fe:	18fb      	adds	r3, r7, r3
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d103      	bne.n	800490e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2220      	movs	r2, #32
 800490c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	2204      	movs	r2, #4
 8004912:	4313      	orrs	r3, r2
 8004914:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004916:	2327      	movs	r3, #39	@ 0x27
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	2201      	movs	r2, #1
 800491c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	2380      	movs	r3, #128	@ 0x80
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	4013      	ands	r3, r2
 800492e:	d00c      	beq.n	800494a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	2201      	movs	r2, #1
 8004934:	4313      	orrs	r3, r2
 8004936:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2280      	movs	r2, #128	@ 0x80
 800493e:	0052      	lsls	r2, r2, #1
 8004940:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004942:	2327      	movs	r3, #39	@ 0x27
 8004944:	18fb      	adds	r3, r7, r3
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	2380      	movs	r3, #128	@ 0x80
 800494e:	00db      	lsls	r3, r3, #3
 8004950:	4013      	ands	r3, r2
 8004952:	d00c      	beq.n	800496e <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004954:	6a3b      	ldr	r3, [r7, #32]
 8004956:	2208      	movs	r2, #8
 8004958:	4313      	orrs	r3, r2
 800495a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2280      	movs	r2, #128	@ 0x80
 8004962:	00d2      	lsls	r2, r2, #3
 8004964:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004966:	2327      	movs	r3, #39	@ 0x27
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800496e:	69ba      	ldr	r2, [r7, #24]
 8004970:	2380      	movs	r3, #128	@ 0x80
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4013      	ands	r3, r2
 8004976:	d00c      	beq.n	8004992 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	2202      	movs	r2, #2
 800497c:	4313      	orrs	r3, r2
 800497e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2280      	movs	r2, #128	@ 0x80
 8004986:	0092      	lsls	r2, r2, #2
 8004988:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800498a:	2327      	movs	r3, #39	@ 0x27
 800498c:	18fb      	adds	r3, r7, r3
 800498e:	2201      	movs	r2, #1
 8004990:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004992:	2327      	movs	r3, #39	@ 0x27
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d01d      	beq.n	80049d8 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	0018      	movs	r0, r3
 80049a0:	f7ff fd8a 	bl	80044b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	490e      	ldr	r1, [pc, #56]	@ (80049e8 <I2C_IsErrorOccurred+0x1ec>)
 80049b0:	400a      	ands	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2241      	movs	r2, #65	@ 0x41
 80049c4:	2120      	movs	r1, #32
 80049c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2242      	movs	r2, #66	@ 0x42
 80049cc:	2100      	movs	r1, #0
 80049ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2240      	movs	r2, #64	@ 0x40
 80049d4:	2100      	movs	r1, #0
 80049d6:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80049d8:	2327      	movs	r3, #39	@ 0x27
 80049da:	18fb      	adds	r3, r7, r3
 80049dc:	781b      	ldrb	r3, [r3, #0]
}
 80049de:	0018      	movs	r0, r3
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b00a      	add	sp, #40	@ 0x28
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			@ (mov r8, r8)
 80049e8:	fe00e800 	.word	0xfe00e800

080049ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80049ec:	b590      	push	{r4, r7, lr}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	0008      	movs	r0, r1
 80049f6:	0011      	movs	r1, r2
 80049f8:	607b      	str	r3, [r7, #4]
 80049fa:	240a      	movs	r4, #10
 80049fc:	193b      	adds	r3, r7, r4
 80049fe:	1c02      	adds	r2, r0, #0
 8004a00:	801a      	strh	r2, [r3, #0]
 8004a02:	2009      	movs	r0, #9
 8004a04:	183b      	adds	r3, r7, r0
 8004a06:	1c0a      	adds	r2, r1, #0
 8004a08:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a0a:	193b      	adds	r3, r7, r4
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	059b      	lsls	r3, r3, #22
 8004a10:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a12:	183b      	adds	r3, r7, r0
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	0419      	lsls	r1, r3, #16
 8004a18:	23ff      	movs	r3, #255	@ 0xff
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a1e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a26:	4313      	orrs	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	085b      	lsrs	r3, r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a36:	0d51      	lsrs	r1, r2, #21
 8004a38:	2280      	movs	r2, #128	@ 0x80
 8004a3a:	00d2      	lsls	r2, r2, #3
 8004a3c:	400a      	ands	r2, r1
 8004a3e:	4907      	ldr	r1, [pc, #28]	@ (8004a5c <I2C_TransferConfig+0x70>)
 8004a40:	430a      	orrs	r2, r1
 8004a42:	43d2      	mvns	r2, r2
 8004a44:	401a      	ands	r2, r3
 8004a46:	0011      	movs	r1, r2
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a52:	46c0      	nop			@ (mov r8, r8)
 8004a54:	46bd      	mov	sp, r7
 8004a56:	b007      	add	sp, #28
 8004a58:	bd90      	pop	{r4, r7, pc}
 8004a5a:	46c0      	nop			@ (mov r8, r8)
 8004a5c:	03ff63ff 	.word	0x03ff63ff

08004a60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2241      	movs	r2, #65	@ 0x41
 8004a6e:	5c9b      	ldrb	r3, [r3, r2]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b20      	cmp	r3, #32
 8004a74:	d138      	bne.n	8004ae8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2240      	movs	r2, #64	@ 0x40
 8004a7a:	5c9b      	ldrb	r3, [r3, r2]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e032      	b.n	8004aea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2240      	movs	r2, #64	@ 0x40
 8004a88:	2101      	movs	r1, #1
 8004a8a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2241      	movs	r2, #65	@ 0x41
 8004a90:	2124      	movs	r1, #36	@ 0x24
 8004a92:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	438a      	bics	r2, r1
 8004aa2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4911      	ldr	r1, [pc, #68]	@ (8004af4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004ab0:	400a      	ands	r2, r1
 8004ab2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6819      	ldr	r1, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	430a      	orrs	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2101      	movs	r1, #1
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2241      	movs	r2, #65	@ 0x41
 8004ad8:	2120      	movs	r1, #32
 8004ada:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2240      	movs	r2, #64	@ 0x40
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	e000      	b.n	8004aea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ae8:	2302      	movs	r3, #2
  }
}
 8004aea:	0018      	movs	r0, r3
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b002      	add	sp, #8
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	46c0      	nop			@ (mov r8, r8)
 8004af4:	ffffefff 	.word	0xffffefff

08004af8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2241      	movs	r2, #65	@ 0x41
 8004b06:	5c9b      	ldrb	r3, [r3, r2]
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b20      	cmp	r3, #32
 8004b0c:	d139      	bne.n	8004b82 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2240      	movs	r2, #64	@ 0x40
 8004b12:	5c9b      	ldrb	r3, [r3, r2]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e033      	b.n	8004b84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2240      	movs	r2, #64	@ 0x40
 8004b20:	2101      	movs	r1, #1
 8004b22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2241      	movs	r2, #65	@ 0x41
 8004b28:	2124      	movs	r1, #36	@ 0x24
 8004b2a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2101      	movs	r1, #1
 8004b38:	438a      	bics	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	4a11      	ldr	r2, [pc, #68]	@ (8004b8c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	021b      	lsls	r3, r3, #8
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2101      	movs	r1, #1
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2241      	movs	r2, #65	@ 0x41
 8004b72:	2120      	movs	r1, #32
 8004b74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2240      	movs	r2, #64	@ 0x40
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e000      	b.n	8004b84 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b82:	2302      	movs	r3, #2
  }
}
 8004b84:	0018      	movs	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	b004      	add	sp, #16
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	fffff0ff 	.word	0xfffff0ff

08004b90 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8004b98:	4b2b      	ldr	r3, [pc, #172]	@ (8004c48 <HAL_PWR_ConfigPVD+0xb8>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	22e0      	movs	r2, #224	@ 0xe0
 8004b9e:	4393      	bics	r3, r2
 8004ba0:	0019      	movs	r1, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4b28      	ldr	r3, [pc, #160]	@ (8004c48 <HAL_PWR_ConfigPVD+0xb8>)
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8004bac:	4b27      	ldr	r3, [pc, #156]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004bae:	685a      	ldr	r2, [r3, #4]
 8004bb0:	4b26      	ldr	r3, [pc, #152]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004bb2:	4927      	ldr	r1, [pc, #156]	@ (8004c50 <HAL_PWR_ConfigPVD+0xc0>)
 8004bb4:	400a      	ands	r2, r1
 8004bb6:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8004bb8:	4b24      	ldr	r3, [pc, #144]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	4b23      	ldr	r3, [pc, #140]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004bbe:	4924      	ldr	r1, [pc, #144]	@ (8004c50 <HAL_PWR_ConfigPVD+0xc0>)
 8004bc0:	400a      	ands	r2, r1
 8004bc2:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8004bc4:	4b21      	ldr	r3, [pc, #132]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	4b20      	ldr	r3, [pc, #128]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004bca:	4921      	ldr	r1, [pc, #132]	@ (8004c50 <HAL_PWR_ConfigPVD+0xc0>)
 8004bcc:	400a      	ands	r2, r1
 8004bce:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8004bd0:	4b1e      	ldr	r3, [pc, #120]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004bd6:	491e      	ldr	r1, [pc, #120]	@ (8004c50 <HAL_PWR_ConfigPVD+0xc0>)
 8004bd8:	400a      	ands	r2, r1
 8004bda:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	2380      	movs	r3, #128	@ 0x80
 8004be2:	025b      	lsls	r3, r3, #9
 8004be4:	4013      	ands	r3, r2
 8004be6:	d006      	beq.n	8004bf6 <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004be8:	4b18      	ldr	r3, [pc, #96]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b17      	ldr	r3, [pc, #92]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004bee:	2180      	movs	r1, #128	@ 0x80
 8004bf0:	0249      	lsls	r1, r1, #9
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	2380      	movs	r3, #128	@ 0x80
 8004bfc:	029b      	lsls	r3, r3, #10
 8004bfe:	4013      	ands	r3, r2
 8004c00:	d006      	beq.n	8004c10 <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8004c02:	4b12      	ldr	r3, [pc, #72]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	4b11      	ldr	r3, [pc, #68]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004c08:	2180      	movs	r1, #128	@ 0x80
 8004c0a:	0249      	lsls	r1, r1, #9
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	4013      	ands	r3, r2
 8004c18:	d006      	beq.n	8004c28 <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8004c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004c20:	2180      	movs	r1, #128	@ 0x80
 8004c22:	0249      	lsls	r1, r1, #9
 8004c24:	430a      	orrs	r2, r1
 8004c26:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	4013      	ands	r3, r2
 8004c30:	d006      	beq.n	8004c40 <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8004c32:	4b06      	ldr	r3, [pc, #24]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004c34:	68da      	ldr	r2, [r3, #12]
 8004c36:	4b05      	ldr	r3, [pc, #20]	@ (8004c4c <HAL_PWR_ConfigPVD+0xbc>)
 8004c38:	2180      	movs	r1, #128	@ 0x80
 8004c3a:	0249      	lsls	r1, r1, #9
 8004c3c:	430a      	orrs	r2, r1
 8004c3e:	60da      	str	r2, [r3, #12]
  }
}
 8004c40:	46c0      	nop			@ (mov r8, r8)
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b002      	add	sp, #8
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40007000 	.word	0x40007000
 8004c4c:	40010400 	.word	0x40010400
 8004c50:	fffeffff 	.word	0xfffeffff

08004c54 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8004c58:	4b04      	ldr	r3, [pc, #16]	@ (8004c6c <HAL_PWR_EnablePVD+0x18>)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	4b03      	ldr	r3, [pc, #12]	@ (8004c6c <HAL_PWR_EnablePVD+0x18>)
 8004c5e:	2110      	movs	r1, #16
 8004c60:	430a      	orrs	r2, r1
 8004c62:	601a      	str	r2, [r3, #0]
}
 8004c64:	46c0      	nop			@ (mov r8, r8)
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	46c0      	nop			@ (mov r8, r8)
 8004c6c:	40007000 	.word	0x40007000

08004c70 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	000a      	movs	r2, r1
 8004c7a:	1cfb      	adds	r3, r7, #3
 8004c7c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004c82:	4b25      	ldr	r3, [pc, #148]	@ (8004d18 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	2380      	movs	r3, #128	@ 0x80
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8004c8e:	4b23      	ldr	r3, [pc, #140]	@ (8004d1c <HAL_PWR_EnterSTOPMode+0xac>)
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	2201      	movs	r2, #1
 8004c94:	4013      	ands	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d008      	beq.n	8004cb0 <HAL_PWR_EnterSTOPMode+0x40>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d18 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d18 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004caa:	491d      	ldr	r1, [pc, #116]	@ (8004d20 <HAL_PWR_EnterSTOPMode+0xb0>)
 8004cac:	400a      	ands	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004cb0:	4b19      	ldr	r3, [pc, #100]	@ (8004d18 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	2203      	movs	r2, #3
 8004cba:	4393      	bics	r3, r2
 8004cbc:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8004cc6:	4b14      	ldr	r3, [pc, #80]	@ (8004d18 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004ccc:	4b15      	ldr	r3, [pc, #84]	@ (8004d24 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	4b14      	ldr	r3, [pc, #80]	@ (8004d24 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004cd2:	2104      	movs	r1, #4
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004cd8:	1cfb      	adds	r3, r7, #3
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004ce0:	bf30      	wfi
 8004ce2:	e002      	b.n	8004cea <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004ce4:	bf40      	sev
    __WFE();
 8004ce6:	bf20      	wfe
    __WFE();
 8004ce8:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004cea:	4b0e      	ldr	r3, [pc, #56]	@ (8004d24 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	4b0d      	ldr	r3, [pc, #52]	@ (8004d24 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004cf0:	2104      	movs	r1, #4
 8004cf2:	438a      	bics	r2, r1
 8004cf4:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d009      	beq.n	8004d10 <HAL_PWR_EnterSTOPMode+0xa0>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d006      	beq.n	8004d10 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8004d02:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	4b04      	ldr	r3, [pc, #16]	@ (8004d18 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004d08:	2180      	movs	r1, #128	@ 0x80
 8004d0a:	0089      	lsls	r1, r1, #2
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	601a      	str	r2, [r3, #0]
  }
}
 8004d10:	46c0      	nop			@ (mov r8, r8)
 8004d12:	46bd      	mov	sp, r7
 8004d14:	b006      	add	sp, #24
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40007000 	.word	0x40007000
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	fffffdff 	.word	0xfffffdff
 8004d24:	e000ed00 	.word	0xe000ed00

08004d28 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8004d2c:	4b04      	ldr	r3, [pc, #16]	@ (8004d40 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	4b03      	ldr	r3, [pc, #12]	@ (8004d40 <HAL_PWREx_EnableFastWakeUp+0x18>)
 8004d32:	2180      	movs	r1, #128	@ 0x80
 8004d34:	00c9      	lsls	r1, r1, #3
 8004d36:	430a      	orrs	r2, r1
 8004d38:	601a      	str	r2, [r3, #0]
}
 8004d3a:	46c0      	nop			@ (mov r8, r8)
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	40007000 	.word	0x40007000

08004d44 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8004d48:	4b04      	ldr	r3, [pc, #16]	@ (8004d5c <HAL_PWREx_EnableUltraLowPower+0x18>)
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	4b03      	ldr	r3, [pc, #12]	@ (8004d5c <HAL_PWREx_EnableUltraLowPower+0x18>)
 8004d4e:	2180      	movs	r1, #128	@ 0x80
 8004d50:	0089      	lsls	r1, r1, #2
 8004d52:	430a      	orrs	r2, r1
 8004d54:	601a      	str	r2, [r3, #0]
}
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40007000 	.word	0x40007000

08004d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d60:	b5b0      	push	{r4, r5, r7, lr}
 8004d62:	b08a      	sub	sp, #40	@ 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d102      	bne.n	8004d74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	f000 fbbf 	bl	80054f2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d74:	4bc9      	ldr	r3, [pc, #804]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	220c      	movs	r2, #12
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d7e:	4bc7      	ldr	r3, [pc, #796]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	2380      	movs	r3, #128	@ 0x80
 8004d84:	025b      	lsls	r3, r3, #9
 8004d86:	4013      	ands	r3, r2
 8004d88:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	4013      	ands	r3, r2
 8004d92:	d100      	bne.n	8004d96 <HAL_RCC_OscConfig+0x36>
 8004d94:	e07e      	b.n	8004e94 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2b08      	cmp	r3, #8
 8004d9a:	d007      	beq.n	8004dac <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	2b0c      	cmp	r3, #12
 8004da0:	d112      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x68>
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	2380      	movs	r3, #128	@ 0x80
 8004da6:	025b      	lsls	r3, r3, #9
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d10d      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	4bbb      	ldr	r3, [pc, #748]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	2380      	movs	r3, #128	@ 0x80
 8004db2:	029b      	lsls	r3, r3, #10
 8004db4:	4013      	ands	r3, r2
 8004db6:	d100      	bne.n	8004dba <HAL_RCC_OscConfig+0x5a>
 8004db8:	e06b      	b.n	8004e92 <HAL_RCC_OscConfig+0x132>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d167      	bne.n	8004e92 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f000 fb95 	bl	80054f2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685a      	ldr	r2, [r3, #4]
 8004dcc:	2380      	movs	r3, #128	@ 0x80
 8004dce:	025b      	lsls	r3, r3, #9
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d107      	bne.n	8004de4 <HAL_RCC_OscConfig+0x84>
 8004dd4:	4bb1      	ldr	r3, [pc, #708]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	4bb0      	ldr	r3, [pc, #704]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004dda:	2180      	movs	r1, #128	@ 0x80
 8004ddc:	0249      	lsls	r1, r1, #9
 8004dde:	430a      	orrs	r2, r1
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	e027      	b.n	8004e34 <HAL_RCC_OscConfig+0xd4>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	23a0      	movs	r3, #160	@ 0xa0
 8004dea:	02db      	lsls	r3, r3, #11
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d10e      	bne.n	8004e0e <HAL_RCC_OscConfig+0xae>
 8004df0:	4baa      	ldr	r3, [pc, #680]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	4ba9      	ldr	r3, [pc, #676]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004df6:	2180      	movs	r1, #128	@ 0x80
 8004df8:	02c9      	lsls	r1, r1, #11
 8004dfa:	430a      	orrs	r2, r1
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	4ba7      	ldr	r3, [pc, #668]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	4ba6      	ldr	r3, [pc, #664]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004e04:	2180      	movs	r1, #128	@ 0x80
 8004e06:	0249      	lsls	r1, r1, #9
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	e012      	b.n	8004e34 <HAL_RCC_OscConfig+0xd4>
 8004e0e:	4ba3      	ldr	r3, [pc, #652]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	4ba2      	ldr	r3, [pc, #648]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004e14:	49a2      	ldr	r1, [pc, #648]	@ (80050a0 <HAL_RCC_OscConfig+0x340>)
 8004e16:	400a      	ands	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	4ba0      	ldr	r3, [pc, #640]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	2380      	movs	r3, #128	@ 0x80
 8004e20:	025b      	lsls	r3, r3, #9
 8004e22:	4013      	ands	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4b9c      	ldr	r3, [pc, #624]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	4b9b      	ldr	r3, [pc, #620]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004e2e:	499d      	ldr	r1, [pc, #628]	@ (80050a4 <HAL_RCC_OscConfig+0x344>)
 8004e30:	400a      	ands	r2, r1
 8004e32:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d015      	beq.n	8004e68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e3c:	f7fd fe10 	bl	8002a60 <HAL_GetTick>
 8004e40:	0003      	movs	r3, r0
 8004e42:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e44:	e009      	b.n	8004e5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e46:	f7fd fe0b 	bl	8002a60 <HAL_GetTick>
 8004e4a:	0002      	movs	r2, r0
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b64      	cmp	r3, #100	@ 0x64
 8004e52:	d902      	bls.n	8004e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	f000 fb4c 	bl	80054f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e5a:	4b90      	ldr	r3, [pc, #576]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	2380      	movs	r3, #128	@ 0x80
 8004e60:	029b      	lsls	r3, r3, #10
 8004e62:	4013      	ands	r3, r2
 8004e64:	d0ef      	beq.n	8004e46 <HAL_RCC_OscConfig+0xe6>
 8004e66:	e015      	b.n	8004e94 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e68:	f7fd fdfa 	bl	8002a60 <HAL_GetTick>
 8004e6c:	0003      	movs	r3, r0
 8004e6e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e72:	f7fd fdf5 	bl	8002a60 <HAL_GetTick>
 8004e76:	0002      	movs	r2, r0
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b64      	cmp	r3, #100	@ 0x64
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e336      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004e84:	4b85      	ldr	r3, [pc, #532]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	2380      	movs	r3, #128	@ 0x80
 8004e8a:	029b      	lsls	r3, r3, #10
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	d1f0      	bne.n	8004e72 <HAL_RCC_OscConfig+0x112>
 8004e90:	e000      	b.n	8004e94 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e92:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d100      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x140>
 8004e9e:	e099      	b.n	8004fd4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	4013      	ands	r3, r2
 8004eac:	d009      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004eae:	4b7b      	ldr	r3, [pc, #492]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	4b7a      	ldr	r3, [pc, #488]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004eb4:	2120      	movs	r1, #32
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	4393      	bics	r3, r2
 8004ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d005      	beq.n	8004ed4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	2b0c      	cmp	r3, #12
 8004ecc:	d13e      	bne.n	8004f4c <HAL_RCC_OscConfig+0x1ec>
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d13b      	bne.n	8004f4c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004ed4:	4b71      	ldr	r3, [pc, #452]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2204      	movs	r2, #4
 8004eda:	4013      	ands	r3, r2
 8004edc:	d004      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x188>
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e304      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	4a6e      	ldr	r2, [pc, #440]	@ (80050a8 <HAL_RCC_OscConfig+0x348>)
 8004eee:	4013      	ands	r3, r2
 8004ef0:	0019      	movs	r1, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	021a      	lsls	r2, r3, #8
 8004ef8:	4b68      	ldr	r3, [pc, #416]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004efa:	430a      	orrs	r2, r1
 8004efc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004efe:	4b67      	ldr	r3, [pc, #412]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2209      	movs	r2, #9
 8004f04:	4393      	bics	r3, r2
 8004f06:	0019      	movs	r1, r3
 8004f08:	4b64      	ldr	r3, [pc, #400]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004f0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f10:	f000 fc42 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8004f14:	0001      	movs	r1, r0
 8004f16:	4b61      	ldr	r3, [pc, #388]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	091b      	lsrs	r3, r3, #4
 8004f1c:	220f      	movs	r2, #15
 8004f1e:	4013      	ands	r3, r2
 8004f20:	4a62      	ldr	r2, [pc, #392]	@ (80050ac <HAL_RCC_OscConfig+0x34c>)
 8004f22:	5cd3      	ldrb	r3, [r2, r3]
 8004f24:	000a      	movs	r2, r1
 8004f26:	40da      	lsrs	r2, r3
 8004f28:	4b61      	ldr	r3, [pc, #388]	@ (80050b0 <HAL_RCC_OscConfig+0x350>)
 8004f2a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004f2c:	4b61      	ldr	r3, [pc, #388]	@ (80050b4 <HAL_RCC_OscConfig+0x354>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2513      	movs	r5, #19
 8004f32:	197c      	adds	r4, r7, r5
 8004f34:	0018      	movs	r0, r3
 8004f36:	f7fd fd4d 	bl	80029d4 <HAL_InitTick>
 8004f3a:	0003      	movs	r3, r0
 8004f3c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004f3e:	197b      	adds	r3, r7, r5
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d046      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004f46:	197b      	adds	r3, r7, r5
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	e2d2      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d027      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004f52:	4b52      	ldr	r3, [pc, #328]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2209      	movs	r2, #9
 8004f58:	4393      	bics	r3, r2
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	4b4f      	ldr	r3, [pc, #316]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f60:	430a      	orrs	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f64:	f7fd fd7c 	bl	8002a60 <HAL_GetTick>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f6e:	f7fd fd77 	bl	8002a60 <HAL_GetTick>
 8004f72:	0002      	movs	r2, r0
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e2b8      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f80:	4b46      	ldr	r3, [pc, #280]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2204      	movs	r2, #4
 8004f86:	4013      	ands	r3, r2
 8004f88:	d0f1      	beq.n	8004f6e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8a:	4b44      	ldr	r3, [pc, #272]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4a46      	ldr	r2, [pc, #280]	@ (80050a8 <HAL_RCC_OscConfig+0x348>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	0019      	movs	r1, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	021a      	lsls	r2, r3, #8
 8004f9a:	4b40      	ldr	r3, [pc, #256]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004f9c:	430a      	orrs	r2, r1
 8004f9e:	605a      	str	r2, [r3, #4]
 8004fa0:	e018      	b.n	8004fd4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fa2:	4b3e      	ldr	r3, [pc, #248]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004fa8:	2101      	movs	r1, #1
 8004faa:	438a      	bics	r2, r1
 8004fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fae:	f7fd fd57 	bl	8002a60 <HAL_GetTick>
 8004fb2:	0003      	movs	r3, r0
 8004fb4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fb8:	f7fd fd52 	bl	8002a60 <HAL_GetTick>
 8004fbc:	0002      	movs	r2, r0
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e293      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004fca:	4b34      	ldr	r3, [pc, #208]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2204      	movs	r2, #4
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d1f1      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2210      	movs	r2, #16
 8004fda:	4013      	ands	r3, r2
 8004fdc:	d100      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x280>
 8004fde:	e0a2      	b.n	8005126 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d140      	bne.n	8005068 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	2380      	movs	r3, #128	@ 0x80
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4013      	ands	r3, r2
 8004ff0:	d005      	beq.n	8004ffe <HAL_RCC_OscConfig+0x29e>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e279      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ffe:	4b27      	ldr	r3, [pc, #156]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	4a2d      	ldr	r2, [pc, #180]	@ (80050b8 <HAL_RCC_OscConfig+0x358>)
 8005004:	4013      	ands	r3, r2
 8005006:	0019      	movs	r1, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800500c:	4b23      	ldr	r3, [pc, #140]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005012:	4b22      	ldr	r3, [pc, #136]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	021b      	lsls	r3, r3, #8
 8005018:	0a19      	lsrs	r1, r3, #8
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	061a      	lsls	r2, r3, #24
 8005020:	4b1e      	ldr	r3, [pc, #120]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8005022:	430a      	orrs	r2, r1
 8005024:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502a:	0b5b      	lsrs	r3, r3, #13
 800502c:	3301      	adds	r3, #1
 800502e:	2280      	movs	r2, #128	@ 0x80
 8005030:	0212      	lsls	r2, r2, #8
 8005032:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005034:	4b19      	ldr	r3, [pc, #100]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	091b      	lsrs	r3, r3, #4
 800503a:	210f      	movs	r1, #15
 800503c:	400b      	ands	r3, r1
 800503e:	491b      	ldr	r1, [pc, #108]	@ (80050ac <HAL_RCC_OscConfig+0x34c>)
 8005040:	5ccb      	ldrb	r3, [r1, r3]
 8005042:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005044:	4b1a      	ldr	r3, [pc, #104]	@ (80050b0 <HAL_RCC_OscConfig+0x350>)
 8005046:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005048:	4b1a      	ldr	r3, [pc, #104]	@ (80050b4 <HAL_RCC_OscConfig+0x354>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2513      	movs	r5, #19
 800504e:	197c      	adds	r4, r7, r5
 8005050:	0018      	movs	r0, r3
 8005052:	f7fd fcbf 	bl	80029d4 <HAL_InitTick>
 8005056:	0003      	movs	r3, r0
 8005058:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800505a:	197b      	adds	r3, r7, r5
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d061      	beq.n	8005126 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8005062:	197b      	adds	r3, r7, r5
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	e244      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	69db      	ldr	r3, [r3, #28]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d040      	beq.n	80050f2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005070:	4b0a      	ldr	r3, [pc, #40]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	4b09      	ldr	r3, [pc, #36]	@ (800509c <HAL_RCC_OscConfig+0x33c>)
 8005076:	2180      	movs	r1, #128	@ 0x80
 8005078:	0049      	lsls	r1, r1, #1
 800507a:	430a      	orrs	r2, r1
 800507c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507e:	f7fd fcef 	bl	8002a60 <HAL_GetTick>
 8005082:	0003      	movs	r3, r0
 8005084:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005086:	e019      	b.n	80050bc <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005088:	f7fd fcea 	bl	8002a60 <HAL_GetTick>
 800508c:	0002      	movs	r2, r0
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d912      	bls.n	80050bc <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e22b      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
 800509a:	46c0      	nop			@ (mov r8, r8)
 800509c:	40021000 	.word	0x40021000
 80050a0:	fffeffff 	.word	0xfffeffff
 80050a4:	fffbffff 	.word	0xfffbffff
 80050a8:	ffffe0ff 	.word	0xffffe0ff
 80050ac:	08008c24 	.word	0x08008c24
 80050b0:	20000000 	.word	0x20000000
 80050b4:	20000004 	.word	0x20000004
 80050b8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80050bc:	4bca      	ldr	r3, [pc, #808]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	2380      	movs	r3, #128	@ 0x80
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4013      	ands	r3, r2
 80050c6:	d0df      	beq.n	8005088 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050c8:	4bc7      	ldr	r3, [pc, #796]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	4ac7      	ldr	r2, [pc, #796]	@ (80053ec <HAL_RCC_OscConfig+0x68c>)
 80050ce:	4013      	ands	r3, r2
 80050d0:	0019      	movs	r1, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80050d6:	4bc4      	ldr	r3, [pc, #784]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80050d8:	430a      	orrs	r2, r1
 80050da:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050dc:	4bc2      	ldr	r3, [pc, #776]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	021b      	lsls	r3, r3, #8
 80050e2:	0a19      	lsrs	r1, r3, #8
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	061a      	lsls	r2, r3, #24
 80050ea:	4bbf      	ldr	r3, [pc, #764]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80050ec:	430a      	orrs	r2, r1
 80050ee:	605a      	str	r2, [r3, #4]
 80050f0:	e019      	b.n	8005126 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050f2:	4bbd      	ldr	r3, [pc, #756]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	4bbc      	ldr	r3, [pc, #752]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80050f8:	49bd      	ldr	r1, [pc, #756]	@ (80053f0 <HAL_RCC_OscConfig+0x690>)
 80050fa:	400a      	ands	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050fe:	f7fd fcaf 	bl	8002a60 <HAL_GetTick>
 8005102:	0003      	movs	r3, r0
 8005104:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005106:	e008      	b.n	800511a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005108:	f7fd fcaa 	bl	8002a60 <HAL_GetTick>
 800510c:	0002      	movs	r2, r0
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	1ad3      	subs	r3, r2, r3
 8005112:	2b02      	cmp	r3, #2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e1eb      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800511a:	4bb3      	ldr	r3, [pc, #716]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	2380      	movs	r3, #128	@ 0x80
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4013      	ands	r3, r2
 8005124:	d1f0      	bne.n	8005108 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2208      	movs	r2, #8
 800512c:	4013      	ands	r3, r2
 800512e:	d036      	beq.n	800519e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d019      	beq.n	800516c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005138:	4bab      	ldr	r3, [pc, #684]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800513a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800513c:	4baa      	ldr	r3, [pc, #680]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800513e:	2101      	movs	r1, #1
 8005140:	430a      	orrs	r2, r1
 8005142:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005144:	f7fd fc8c 	bl	8002a60 <HAL_GetTick>
 8005148:	0003      	movs	r3, r0
 800514a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800514e:	f7fd fc87 	bl	8002a60 <HAL_GetTick>
 8005152:	0002      	movs	r2, r0
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e1c8      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005160:	4ba1      	ldr	r3, [pc, #644]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 8005162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005164:	2202      	movs	r2, #2
 8005166:	4013      	ands	r3, r2
 8005168:	d0f1      	beq.n	800514e <HAL_RCC_OscConfig+0x3ee>
 800516a:	e018      	b.n	800519e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800516c:	4b9e      	ldr	r3, [pc, #632]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800516e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005170:	4b9d      	ldr	r3, [pc, #628]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 8005172:	2101      	movs	r1, #1
 8005174:	438a      	bics	r2, r1
 8005176:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005178:	f7fd fc72 	bl	8002a60 <HAL_GetTick>
 800517c:	0003      	movs	r3, r0
 800517e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005180:	e008      	b.n	8005194 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005182:	f7fd fc6d 	bl	8002a60 <HAL_GetTick>
 8005186:	0002      	movs	r2, r0
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e1ae      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005194:	4b94      	ldr	r3, [pc, #592]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 8005196:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005198:	2202      	movs	r2, #2
 800519a:	4013      	ands	r3, r2
 800519c:	d1f1      	bne.n	8005182 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2204      	movs	r2, #4
 80051a4:	4013      	ands	r3, r2
 80051a6:	d100      	bne.n	80051aa <HAL_RCC_OscConfig+0x44a>
 80051a8:	e0ae      	b.n	8005308 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051aa:	2023      	movs	r0, #35	@ 0x23
 80051ac:	183b      	adds	r3, r7, r0
 80051ae:	2200      	movs	r2, #0
 80051b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051b2:	4b8d      	ldr	r3, [pc, #564]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80051b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051b6:	2380      	movs	r3, #128	@ 0x80
 80051b8:	055b      	lsls	r3, r3, #21
 80051ba:	4013      	ands	r3, r2
 80051bc:	d109      	bne.n	80051d2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051be:	4b8a      	ldr	r3, [pc, #552]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80051c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051c2:	4b89      	ldr	r3, [pc, #548]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80051c4:	2180      	movs	r1, #128	@ 0x80
 80051c6:	0549      	lsls	r1, r1, #21
 80051c8:	430a      	orrs	r2, r1
 80051ca:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80051cc:	183b      	adds	r3, r7, r0
 80051ce:	2201      	movs	r2, #1
 80051d0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051d2:	4b88      	ldr	r3, [pc, #544]	@ (80053f4 <HAL_RCC_OscConfig+0x694>)
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	2380      	movs	r3, #128	@ 0x80
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	4013      	ands	r3, r2
 80051dc:	d11a      	bne.n	8005214 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051de:	4b85      	ldr	r3, [pc, #532]	@ (80053f4 <HAL_RCC_OscConfig+0x694>)
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	4b84      	ldr	r3, [pc, #528]	@ (80053f4 <HAL_RCC_OscConfig+0x694>)
 80051e4:	2180      	movs	r1, #128	@ 0x80
 80051e6:	0049      	lsls	r1, r1, #1
 80051e8:	430a      	orrs	r2, r1
 80051ea:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051ec:	f7fd fc38 	bl	8002a60 <HAL_GetTick>
 80051f0:	0003      	movs	r3, r0
 80051f2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f6:	f7fd fc33 	bl	8002a60 <HAL_GetTick>
 80051fa:	0002      	movs	r2, r0
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b64      	cmp	r3, #100	@ 0x64
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e174      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005208:	4b7a      	ldr	r3, [pc, #488]	@ (80053f4 <HAL_RCC_OscConfig+0x694>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	2380      	movs	r3, #128	@ 0x80
 800520e:	005b      	lsls	r3, r3, #1
 8005210:	4013      	ands	r3, r2
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	2380      	movs	r3, #128	@ 0x80
 800521a:	005b      	lsls	r3, r3, #1
 800521c:	429a      	cmp	r2, r3
 800521e:	d107      	bne.n	8005230 <HAL_RCC_OscConfig+0x4d0>
 8005220:	4b71      	ldr	r3, [pc, #452]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 8005222:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005224:	4b70      	ldr	r3, [pc, #448]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 8005226:	2180      	movs	r1, #128	@ 0x80
 8005228:	0049      	lsls	r1, r1, #1
 800522a:	430a      	orrs	r2, r1
 800522c:	651a      	str	r2, [r3, #80]	@ 0x50
 800522e:	e031      	b.n	8005294 <HAL_RCC_OscConfig+0x534>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d10c      	bne.n	8005252 <HAL_RCC_OscConfig+0x4f2>
 8005238:	4b6b      	ldr	r3, [pc, #428]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800523a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800523c:	4b6a      	ldr	r3, [pc, #424]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800523e:	496c      	ldr	r1, [pc, #432]	@ (80053f0 <HAL_RCC_OscConfig+0x690>)
 8005240:	400a      	ands	r2, r1
 8005242:	651a      	str	r2, [r3, #80]	@ 0x50
 8005244:	4b68      	ldr	r3, [pc, #416]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 8005246:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005248:	4b67      	ldr	r3, [pc, #412]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800524a:	496b      	ldr	r1, [pc, #428]	@ (80053f8 <HAL_RCC_OscConfig+0x698>)
 800524c:	400a      	ands	r2, r1
 800524e:	651a      	str	r2, [r3, #80]	@ 0x50
 8005250:	e020      	b.n	8005294 <HAL_RCC_OscConfig+0x534>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	23a0      	movs	r3, #160	@ 0xa0
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	429a      	cmp	r2, r3
 800525c:	d10e      	bne.n	800527c <HAL_RCC_OscConfig+0x51c>
 800525e:	4b62      	ldr	r3, [pc, #392]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 8005260:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005262:	4b61      	ldr	r3, [pc, #388]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 8005264:	2180      	movs	r1, #128	@ 0x80
 8005266:	00c9      	lsls	r1, r1, #3
 8005268:	430a      	orrs	r2, r1
 800526a:	651a      	str	r2, [r3, #80]	@ 0x50
 800526c:	4b5e      	ldr	r3, [pc, #376]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800526e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005270:	4b5d      	ldr	r3, [pc, #372]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 8005272:	2180      	movs	r1, #128	@ 0x80
 8005274:	0049      	lsls	r1, r1, #1
 8005276:	430a      	orrs	r2, r1
 8005278:	651a      	str	r2, [r3, #80]	@ 0x50
 800527a:	e00b      	b.n	8005294 <HAL_RCC_OscConfig+0x534>
 800527c:	4b5a      	ldr	r3, [pc, #360]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800527e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005280:	4b59      	ldr	r3, [pc, #356]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 8005282:	495b      	ldr	r1, [pc, #364]	@ (80053f0 <HAL_RCC_OscConfig+0x690>)
 8005284:	400a      	ands	r2, r1
 8005286:	651a      	str	r2, [r3, #80]	@ 0x50
 8005288:	4b57      	ldr	r3, [pc, #348]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800528a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800528c:	4b56      	ldr	r3, [pc, #344]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800528e:	495a      	ldr	r1, [pc, #360]	@ (80053f8 <HAL_RCC_OscConfig+0x698>)
 8005290:	400a      	ands	r2, r1
 8005292:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d015      	beq.n	80052c8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529c:	f7fd fbe0 	bl	8002a60 <HAL_GetTick>
 80052a0:	0003      	movs	r3, r0
 80052a2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052a4:	e009      	b.n	80052ba <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a6:	f7fd fbdb 	bl	8002a60 <HAL_GetTick>
 80052aa:	0002      	movs	r2, r0
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	4a52      	ldr	r2, [pc, #328]	@ (80053fc <HAL_RCC_OscConfig+0x69c>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e11b      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052ba:	4b4b      	ldr	r3, [pc, #300]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80052bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052be:	2380      	movs	r3, #128	@ 0x80
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4013      	ands	r3, r2
 80052c4:	d0ef      	beq.n	80052a6 <HAL_RCC_OscConfig+0x546>
 80052c6:	e014      	b.n	80052f2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c8:	f7fd fbca 	bl	8002a60 <HAL_GetTick>
 80052cc:	0003      	movs	r3, r0
 80052ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052d0:	e009      	b.n	80052e6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052d2:	f7fd fbc5 	bl	8002a60 <HAL_GetTick>
 80052d6:	0002      	movs	r2, r0
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	4a47      	ldr	r2, [pc, #284]	@ (80053fc <HAL_RCC_OscConfig+0x69c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e105      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80052e6:	4b40      	ldr	r3, [pc, #256]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80052e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052ea:	2380      	movs	r3, #128	@ 0x80
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	4013      	ands	r3, r2
 80052f0:	d1ef      	bne.n	80052d2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80052f2:	2323      	movs	r3, #35	@ 0x23
 80052f4:	18fb      	adds	r3, r7, r3
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d105      	bne.n	8005308 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052fc:	4b3a      	ldr	r3, [pc, #232]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80052fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005300:	4b39      	ldr	r3, [pc, #228]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 8005302:	493f      	ldr	r1, [pc, #252]	@ (8005400 <HAL_RCC_OscConfig+0x6a0>)
 8005304:	400a      	ands	r2, r1
 8005306:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2220      	movs	r2, #32
 800530e:	4013      	ands	r3, r2
 8005310:	d049      	beq.n	80053a6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d026      	beq.n	8005368 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800531a:	4b33      	ldr	r3, [pc, #204]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800531c:	689a      	ldr	r2, [r3, #8]
 800531e:	4b32      	ldr	r3, [pc, #200]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 8005320:	2101      	movs	r1, #1
 8005322:	430a      	orrs	r2, r1
 8005324:	609a      	str	r2, [r3, #8]
 8005326:	4b30      	ldr	r3, [pc, #192]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 8005328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800532a:	4b2f      	ldr	r3, [pc, #188]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800532c:	2101      	movs	r1, #1
 800532e:	430a      	orrs	r2, r1
 8005330:	635a      	str	r2, [r3, #52]	@ 0x34
 8005332:	4b34      	ldr	r3, [pc, #208]	@ (8005404 <HAL_RCC_OscConfig+0x6a4>)
 8005334:	6a1a      	ldr	r2, [r3, #32]
 8005336:	4b33      	ldr	r3, [pc, #204]	@ (8005404 <HAL_RCC_OscConfig+0x6a4>)
 8005338:	2180      	movs	r1, #128	@ 0x80
 800533a:	0189      	lsls	r1, r1, #6
 800533c:	430a      	orrs	r2, r1
 800533e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005340:	f7fd fb8e 	bl	8002a60 <HAL_GetTick>
 8005344:	0003      	movs	r3, r0
 8005346:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800534a:	f7fd fb89 	bl	8002a60 <HAL_GetTick>
 800534e:	0002      	movs	r2, r0
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e0ca      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800535c:	4b22      	ldr	r3, [pc, #136]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2202      	movs	r2, #2
 8005362:	4013      	ands	r3, r2
 8005364:	d0f1      	beq.n	800534a <HAL_RCC_OscConfig+0x5ea>
 8005366:	e01e      	b.n	80053a6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005368:	4b1f      	ldr	r3, [pc, #124]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	4b1e      	ldr	r3, [pc, #120]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800536e:	2101      	movs	r1, #1
 8005370:	438a      	bics	r2, r1
 8005372:	609a      	str	r2, [r3, #8]
 8005374:	4b23      	ldr	r3, [pc, #140]	@ (8005404 <HAL_RCC_OscConfig+0x6a4>)
 8005376:	6a1a      	ldr	r2, [r3, #32]
 8005378:	4b22      	ldr	r3, [pc, #136]	@ (8005404 <HAL_RCC_OscConfig+0x6a4>)
 800537a:	4923      	ldr	r1, [pc, #140]	@ (8005408 <HAL_RCC_OscConfig+0x6a8>)
 800537c:	400a      	ands	r2, r1
 800537e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005380:	f7fd fb6e 	bl	8002a60 <HAL_GetTick>
 8005384:	0003      	movs	r3, r0
 8005386:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005388:	e008      	b.n	800539c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800538a:	f7fd fb69 	bl	8002a60 <HAL_GetTick>
 800538e:	0002      	movs	r2, r0
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	2b02      	cmp	r3, #2
 8005396:	d901      	bls.n	800539c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8005398:	2303      	movs	r3, #3
 800539a:	e0aa      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800539c:	4b12      	ldr	r3, [pc, #72]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	2202      	movs	r2, #2
 80053a2:	4013      	ands	r3, r2
 80053a4:	d1f1      	bne.n	800538a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d100      	bne.n	80053b0 <HAL_RCC_OscConfig+0x650>
 80053ae:	e09f      	b.n	80054f0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2b0c      	cmp	r3, #12
 80053b4:	d100      	bne.n	80053b8 <HAL_RCC_OscConfig+0x658>
 80053b6:	e078      	b.n	80054aa <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d159      	bne.n	8005474 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c0:	4b09      	ldr	r3, [pc, #36]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	4b08      	ldr	r3, [pc, #32]	@ (80053e8 <HAL_RCC_OscConfig+0x688>)
 80053c6:	4911      	ldr	r1, [pc, #68]	@ (800540c <HAL_RCC_OscConfig+0x6ac>)
 80053c8:	400a      	ands	r2, r1
 80053ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053cc:	f7fd fb48 	bl	8002a60 <HAL_GetTick>
 80053d0:	0003      	movs	r3, r0
 80053d2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80053d4:	e01c      	b.n	8005410 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053d6:	f7fd fb43 	bl	8002a60 <HAL_GetTick>
 80053da:	0002      	movs	r2, r0
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d915      	bls.n	8005410 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e084      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
 80053e8:	40021000 	.word	0x40021000
 80053ec:	ffff1fff 	.word	0xffff1fff
 80053f0:	fffffeff 	.word	0xfffffeff
 80053f4:	40007000 	.word	0x40007000
 80053f8:	fffffbff 	.word	0xfffffbff
 80053fc:	00001388 	.word	0x00001388
 8005400:	efffffff 	.word	0xefffffff
 8005404:	40010000 	.word	0x40010000
 8005408:	ffffdfff 	.word	0xffffdfff
 800540c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005410:	4b3a      	ldr	r3, [pc, #232]	@ (80054fc <HAL_RCC_OscConfig+0x79c>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	2380      	movs	r3, #128	@ 0x80
 8005416:	049b      	lsls	r3, r3, #18
 8005418:	4013      	ands	r3, r2
 800541a:	d1dc      	bne.n	80053d6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800541c:	4b37      	ldr	r3, [pc, #220]	@ (80054fc <HAL_RCC_OscConfig+0x79c>)
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	4a37      	ldr	r2, [pc, #220]	@ (8005500 <HAL_RCC_OscConfig+0x7a0>)
 8005422:	4013      	ands	r3, r2
 8005424:	0019      	movs	r1, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800542e:	431a      	orrs	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005434:	431a      	orrs	r2, r3
 8005436:	4b31      	ldr	r3, [pc, #196]	@ (80054fc <HAL_RCC_OscConfig+0x79c>)
 8005438:	430a      	orrs	r2, r1
 800543a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800543c:	4b2f      	ldr	r3, [pc, #188]	@ (80054fc <HAL_RCC_OscConfig+0x79c>)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	4b2e      	ldr	r3, [pc, #184]	@ (80054fc <HAL_RCC_OscConfig+0x79c>)
 8005442:	2180      	movs	r1, #128	@ 0x80
 8005444:	0449      	lsls	r1, r1, #17
 8005446:	430a      	orrs	r2, r1
 8005448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544a:	f7fd fb09 	bl	8002a60 <HAL_GetTick>
 800544e:	0003      	movs	r3, r0
 8005450:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005454:	f7fd fb04 	bl	8002a60 <HAL_GetTick>
 8005458:	0002      	movs	r2, r0
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e045      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005466:	4b25      	ldr	r3, [pc, #148]	@ (80054fc <HAL_RCC_OscConfig+0x79c>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	2380      	movs	r3, #128	@ 0x80
 800546c:	049b      	lsls	r3, r3, #18
 800546e:	4013      	ands	r3, r2
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0x6f4>
 8005472:	e03d      	b.n	80054f0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005474:	4b21      	ldr	r3, [pc, #132]	@ (80054fc <HAL_RCC_OscConfig+0x79c>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	4b20      	ldr	r3, [pc, #128]	@ (80054fc <HAL_RCC_OscConfig+0x79c>)
 800547a:	4922      	ldr	r1, [pc, #136]	@ (8005504 <HAL_RCC_OscConfig+0x7a4>)
 800547c:	400a      	ands	r2, r1
 800547e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005480:	f7fd faee 	bl	8002a60 <HAL_GetTick>
 8005484:	0003      	movs	r3, r0
 8005486:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005488:	e008      	b.n	800549c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800548a:	f7fd fae9 	bl	8002a60 <HAL_GetTick>
 800548e:	0002      	movs	r2, r0
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	2b02      	cmp	r3, #2
 8005496:	d901      	bls.n	800549c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8005498:	2303      	movs	r3, #3
 800549a:	e02a      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800549c:	4b17      	ldr	r3, [pc, #92]	@ (80054fc <HAL_RCC_OscConfig+0x79c>)
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	2380      	movs	r3, #128	@ 0x80
 80054a2:	049b      	lsls	r3, r3, #18
 80054a4:	4013      	ands	r3, r2
 80054a6:	d1f0      	bne.n	800548a <HAL_RCC_OscConfig+0x72a>
 80054a8:	e022      	b.n	80054f0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e01d      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054b6:	4b11      	ldr	r3, [pc, #68]	@ (80054fc <HAL_RCC_OscConfig+0x79c>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054bc:	69ba      	ldr	r2, [r7, #24]
 80054be:	2380      	movs	r3, #128	@ 0x80
 80054c0:	025b      	lsls	r3, r3, #9
 80054c2:	401a      	ands	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d10f      	bne.n	80054ec <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80054cc:	69ba      	ldr	r2, [r7, #24]
 80054ce:	23f0      	movs	r3, #240	@ 0xf0
 80054d0:	039b      	lsls	r3, r3, #14
 80054d2:	401a      	ands	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d8:	429a      	cmp	r2, r3
 80054da:	d107      	bne.n	80054ec <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	23c0      	movs	r3, #192	@ 0xc0
 80054e0:	041b      	lsls	r3, r3, #16
 80054e2:	401a      	ands	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d001      	beq.n	80054f0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	0018      	movs	r0, r3
 80054f4:	46bd      	mov	sp, r7
 80054f6:	b00a      	add	sp, #40	@ 0x28
 80054f8:	bdb0      	pop	{r4, r5, r7, pc}
 80054fa:	46c0      	nop			@ (mov r8, r8)
 80054fc:	40021000 	.word	0x40021000
 8005500:	ff02ffff 	.word	0xff02ffff
 8005504:	feffffff 	.word	0xfeffffff

08005508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005508:	b5b0      	push	{r4, r5, r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e128      	b.n	800576e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800551c:	4b96      	ldr	r3, [pc, #600]	@ (8005778 <HAL_RCC_ClockConfig+0x270>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2201      	movs	r2, #1
 8005522:	4013      	ands	r3, r2
 8005524:	683a      	ldr	r2, [r7, #0]
 8005526:	429a      	cmp	r2, r3
 8005528:	d91e      	bls.n	8005568 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800552a:	4b93      	ldr	r3, [pc, #588]	@ (8005778 <HAL_RCC_ClockConfig+0x270>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2201      	movs	r2, #1
 8005530:	4393      	bics	r3, r2
 8005532:	0019      	movs	r1, r3
 8005534:	4b90      	ldr	r3, [pc, #576]	@ (8005778 <HAL_RCC_ClockConfig+0x270>)
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800553c:	f7fd fa90 	bl	8002a60 <HAL_GetTick>
 8005540:	0003      	movs	r3, r0
 8005542:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005544:	e009      	b.n	800555a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005546:	f7fd fa8b 	bl	8002a60 <HAL_GetTick>
 800554a:	0002      	movs	r2, r0
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	4a8a      	ldr	r2, [pc, #552]	@ (800577c <HAL_RCC_ClockConfig+0x274>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d901      	bls.n	800555a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e109      	b.n	800576e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800555a:	4b87      	ldr	r3, [pc, #540]	@ (8005778 <HAL_RCC_ClockConfig+0x270>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2201      	movs	r2, #1
 8005560:	4013      	ands	r3, r2
 8005562:	683a      	ldr	r2, [r7, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d1ee      	bne.n	8005546 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	2202      	movs	r2, #2
 800556e:	4013      	ands	r3, r2
 8005570:	d009      	beq.n	8005586 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005572:	4b83      	ldr	r3, [pc, #524]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	22f0      	movs	r2, #240	@ 0xf0
 8005578:	4393      	bics	r3, r2
 800557a:	0019      	movs	r1, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689a      	ldr	r2, [r3, #8]
 8005580:	4b7f      	ldr	r3, [pc, #508]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 8005582:	430a      	orrs	r2, r1
 8005584:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2201      	movs	r2, #1
 800558c:	4013      	ands	r3, r2
 800558e:	d100      	bne.n	8005592 <HAL_RCC_ClockConfig+0x8a>
 8005590:	e089      	b.n	80056a6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b02      	cmp	r3, #2
 8005598:	d107      	bne.n	80055aa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800559a:	4b79      	ldr	r3, [pc, #484]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	2380      	movs	r3, #128	@ 0x80
 80055a0:	029b      	lsls	r3, r3, #10
 80055a2:	4013      	ands	r3, r2
 80055a4:	d120      	bne.n	80055e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e0e1      	b.n	800576e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d107      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055b2:	4b73      	ldr	r3, [pc, #460]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	2380      	movs	r3, #128	@ 0x80
 80055b8:	049b      	lsls	r3, r3, #18
 80055ba:	4013      	ands	r3, r2
 80055bc:	d114      	bne.n	80055e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e0d5      	b.n	800576e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d106      	bne.n	80055d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80055ca:	4b6d      	ldr	r3, [pc, #436]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2204      	movs	r2, #4
 80055d0:	4013      	ands	r3, r2
 80055d2:	d109      	bne.n	80055e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	e0ca      	b.n	800576e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80055d8:	4b69      	ldr	r3, [pc, #420]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	2380      	movs	r3, #128	@ 0x80
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4013      	ands	r3, r2
 80055e2:	d101      	bne.n	80055e8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e0c2      	b.n	800576e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055e8:	4b65      	ldr	r3, [pc, #404]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	2203      	movs	r2, #3
 80055ee:	4393      	bics	r3, r2
 80055f0:	0019      	movs	r1, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	4b62      	ldr	r3, [pc, #392]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 80055f8:	430a      	orrs	r2, r1
 80055fa:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055fc:	f7fd fa30 	bl	8002a60 <HAL_GetTick>
 8005600:	0003      	movs	r3, r0
 8005602:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d111      	bne.n	8005630 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800560c:	e009      	b.n	8005622 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800560e:	f7fd fa27 	bl	8002a60 <HAL_GetTick>
 8005612:	0002      	movs	r2, r0
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	4a58      	ldr	r2, [pc, #352]	@ (800577c <HAL_RCC_ClockConfig+0x274>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d901      	bls.n	8005622 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e0a5      	b.n	800576e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005622:	4b57      	ldr	r3, [pc, #348]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	220c      	movs	r2, #12
 8005628:	4013      	ands	r3, r2
 800562a:	2b08      	cmp	r3, #8
 800562c:	d1ef      	bne.n	800560e <HAL_RCC_ClockConfig+0x106>
 800562e:	e03a      	b.n	80056a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b03      	cmp	r3, #3
 8005636:	d111      	bne.n	800565c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005638:	e009      	b.n	800564e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800563a:	f7fd fa11 	bl	8002a60 <HAL_GetTick>
 800563e:	0002      	movs	r2, r0
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	4a4d      	ldr	r2, [pc, #308]	@ (800577c <HAL_RCC_ClockConfig+0x274>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d901      	bls.n	800564e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e08f      	b.n	800576e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800564e:	4b4c      	ldr	r3, [pc, #304]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	220c      	movs	r2, #12
 8005654:	4013      	ands	r3, r2
 8005656:	2b0c      	cmp	r3, #12
 8005658:	d1ef      	bne.n	800563a <HAL_RCC_ClockConfig+0x132>
 800565a:	e024      	b.n	80056a6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d11b      	bne.n	800569c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005664:	e009      	b.n	800567a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005666:	f7fd f9fb 	bl	8002a60 <HAL_GetTick>
 800566a:	0002      	movs	r2, r0
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	4a42      	ldr	r2, [pc, #264]	@ (800577c <HAL_RCC_ClockConfig+0x274>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d901      	bls.n	800567a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e079      	b.n	800576e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800567a:	4b41      	ldr	r3, [pc, #260]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	220c      	movs	r2, #12
 8005680:	4013      	ands	r3, r2
 8005682:	2b04      	cmp	r3, #4
 8005684:	d1ef      	bne.n	8005666 <HAL_RCC_ClockConfig+0x15e>
 8005686:	e00e      	b.n	80056a6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005688:	f7fd f9ea 	bl	8002a60 <HAL_GetTick>
 800568c:	0002      	movs	r2, r0
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	4a3a      	ldr	r2, [pc, #232]	@ (800577c <HAL_RCC_ClockConfig+0x274>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d901      	bls.n	800569c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e068      	b.n	800576e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800569c:	4b38      	ldr	r3, [pc, #224]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	220c      	movs	r2, #12
 80056a2:	4013      	ands	r3, r2
 80056a4:	d1f0      	bne.n	8005688 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056a6:	4b34      	ldr	r3, [pc, #208]	@ (8005778 <HAL_RCC_ClockConfig+0x270>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2201      	movs	r2, #1
 80056ac:	4013      	ands	r3, r2
 80056ae:	683a      	ldr	r2, [r7, #0]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d21e      	bcs.n	80056f2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056b4:	4b30      	ldr	r3, [pc, #192]	@ (8005778 <HAL_RCC_ClockConfig+0x270>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2201      	movs	r2, #1
 80056ba:	4393      	bics	r3, r2
 80056bc:	0019      	movs	r1, r3
 80056be:	4b2e      	ldr	r3, [pc, #184]	@ (8005778 <HAL_RCC_ClockConfig+0x270>)
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056c6:	f7fd f9cb 	bl	8002a60 <HAL_GetTick>
 80056ca:	0003      	movs	r3, r0
 80056cc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ce:	e009      	b.n	80056e4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056d0:	f7fd f9c6 	bl	8002a60 <HAL_GetTick>
 80056d4:	0002      	movs	r2, r0
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	4a28      	ldr	r2, [pc, #160]	@ (800577c <HAL_RCC_ClockConfig+0x274>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e044      	b.n	800576e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056e4:	4b24      	ldr	r3, [pc, #144]	@ (8005778 <HAL_RCC_ClockConfig+0x270>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2201      	movs	r2, #1
 80056ea:	4013      	ands	r3, r2
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d1ee      	bne.n	80056d0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2204      	movs	r2, #4
 80056f8:	4013      	ands	r3, r2
 80056fa:	d009      	beq.n	8005710 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056fc:	4b20      	ldr	r3, [pc, #128]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	4a20      	ldr	r2, [pc, #128]	@ (8005784 <HAL_RCC_ClockConfig+0x27c>)
 8005702:	4013      	ands	r3, r2
 8005704:	0019      	movs	r1, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	4b1d      	ldr	r3, [pc, #116]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 800570c:	430a      	orrs	r2, r1
 800570e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2208      	movs	r2, #8
 8005716:	4013      	ands	r3, r2
 8005718:	d00a      	beq.n	8005730 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800571a:	4b19      	ldr	r3, [pc, #100]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	4a1a      	ldr	r2, [pc, #104]	@ (8005788 <HAL_RCC_ClockConfig+0x280>)
 8005720:	4013      	ands	r3, r2
 8005722:	0019      	movs	r1, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	00da      	lsls	r2, r3, #3
 800572a:	4b15      	ldr	r3, [pc, #84]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 800572c:	430a      	orrs	r2, r1
 800572e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005730:	f000 f832 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8005734:	0001      	movs	r1, r0
 8005736:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <HAL_RCC_ClockConfig+0x278>)
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	091b      	lsrs	r3, r3, #4
 800573c:	220f      	movs	r2, #15
 800573e:	4013      	ands	r3, r2
 8005740:	4a12      	ldr	r2, [pc, #72]	@ (800578c <HAL_RCC_ClockConfig+0x284>)
 8005742:	5cd3      	ldrb	r3, [r2, r3]
 8005744:	000a      	movs	r2, r1
 8005746:	40da      	lsrs	r2, r3
 8005748:	4b11      	ldr	r3, [pc, #68]	@ (8005790 <HAL_RCC_ClockConfig+0x288>)
 800574a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800574c:	4b11      	ldr	r3, [pc, #68]	@ (8005794 <HAL_RCC_ClockConfig+0x28c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	250b      	movs	r5, #11
 8005752:	197c      	adds	r4, r7, r5
 8005754:	0018      	movs	r0, r3
 8005756:	f7fd f93d 	bl	80029d4 <HAL_InitTick>
 800575a:	0003      	movs	r3, r0
 800575c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800575e:	197b      	adds	r3, r7, r5
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005766:	197b      	adds	r3, r7, r5
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	e000      	b.n	800576e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	0018      	movs	r0, r3
 8005770:	46bd      	mov	sp, r7
 8005772:	b004      	add	sp, #16
 8005774:	bdb0      	pop	{r4, r5, r7, pc}
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	40022000 	.word	0x40022000
 800577c:	00001388 	.word	0x00001388
 8005780:	40021000 	.word	0x40021000
 8005784:	fffff8ff 	.word	0xfffff8ff
 8005788:	ffffc7ff 	.word	0xffffc7ff
 800578c:	08008c24 	.word	0x08008c24
 8005790:	20000000 	.word	0x20000000
 8005794:	20000004 	.word	0x20000004

08005798 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800579e:	4b3c      	ldr	r3, [pc, #240]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	220c      	movs	r2, #12
 80057a8:	4013      	ands	r3, r2
 80057aa:	2b0c      	cmp	r3, #12
 80057ac:	d013      	beq.n	80057d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80057ae:	d85c      	bhi.n	800586a <HAL_RCC_GetSysClockFreq+0xd2>
 80057b0:	2b04      	cmp	r3, #4
 80057b2:	d002      	beq.n	80057ba <HAL_RCC_GetSysClockFreq+0x22>
 80057b4:	2b08      	cmp	r3, #8
 80057b6:	d00b      	beq.n	80057d0 <HAL_RCC_GetSysClockFreq+0x38>
 80057b8:	e057      	b.n	800586a <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80057ba:	4b35      	ldr	r3, [pc, #212]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2210      	movs	r2, #16
 80057c0:	4013      	ands	r3, r2
 80057c2:	d002      	beq.n	80057ca <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80057c4:	4b33      	ldr	r3, [pc, #204]	@ (8005894 <HAL_RCC_GetSysClockFreq+0xfc>)
 80057c6:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80057c8:	e05d      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80057ca:	4b33      	ldr	r3, [pc, #204]	@ (8005898 <HAL_RCC_GetSysClockFreq+0x100>)
 80057cc:	613b      	str	r3, [r7, #16]
      break;
 80057ce:	e05a      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80057d0:	4b32      	ldr	r3, [pc, #200]	@ (800589c <HAL_RCC_GetSysClockFreq+0x104>)
 80057d2:	613b      	str	r3, [r7, #16]
      break;
 80057d4:	e057      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	0c9b      	lsrs	r3, r3, #18
 80057da:	220f      	movs	r2, #15
 80057dc:	4013      	ands	r3, r2
 80057de:	4a30      	ldr	r2, [pc, #192]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0x108>)
 80057e0:	5cd3      	ldrb	r3, [r2, r3]
 80057e2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	0d9b      	lsrs	r3, r3, #22
 80057e8:	2203      	movs	r2, #3
 80057ea:	4013      	ands	r3, r2
 80057ec:	3301      	adds	r3, #1
 80057ee:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057f0:	4b27      	ldr	r3, [pc, #156]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xf8>)
 80057f2:	68da      	ldr	r2, [r3, #12]
 80057f4:	2380      	movs	r3, #128	@ 0x80
 80057f6:	025b      	lsls	r3, r3, #9
 80057f8:	4013      	ands	r3, r2
 80057fa:	d00f      	beq.n	800581c <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80057fc:	68b9      	ldr	r1, [r7, #8]
 80057fe:	000a      	movs	r2, r1
 8005800:	0152      	lsls	r2, r2, #5
 8005802:	1a52      	subs	r2, r2, r1
 8005804:	0193      	lsls	r3, r2, #6
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	185b      	adds	r3, r3, r1
 800580c:	025b      	lsls	r3, r3, #9
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	0018      	movs	r0, r3
 8005812:	f7fa fc8b 	bl	800012c <__udivsi3>
 8005816:	0003      	movs	r3, r0
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e023      	b.n	8005864 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800581c:	4b1c      	ldr	r3, [pc, #112]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xf8>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2210      	movs	r2, #16
 8005822:	4013      	ands	r3, r2
 8005824:	d00f      	beq.n	8005846 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	000a      	movs	r2, r1
 800582a:	0152      	lsls	r2, r2, #5
 800582c:	1a52      	subs	r2, r2, r1
 800582e:	0193      	lsls	r3, r2, #6
 8005830:	1a9b      	subs	r3, r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	185b      	adds	r3, r3, r1
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	0018      	movs	r0, r3
 800583c:	f7fa fc76 	bl	800012c <__udivsi3>
 8005840:	0003      	movs	r3, r0
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e00e      	b.n	8005864 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	000a      	movs	r2, r1
 800584a:	0152      	lsls	r2, r2, #5
 800584c:	1a52      	subs	r2, r2, r1
 800584e:	0193      	lsls	r3, r2, #6
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	185b      	adds	r3, r3, r1
 8005856:	029b      	lsls	r3, r3, #10
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	0018      	movs	r0, r3
 800585c:	f7fa fc66 	bl	800012c <__udivsi3>
 8005860:	0003      	movs	r3, r0
 8005862:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	613b      	str	r3, [r7, #16]
      break;
 8005868:	e00d      	b.n	8005886 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800586a:	4b09      	ldr	r3, [pc, #36]	@ (8005890 <HAL_RCC_GetSysClockFreq+0xf8>)
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	0b5b      	lsrs	r3, r3, #13
 8005870:	2207      	movs	r2, #7
 8005872:	4013      	ands	r3, r2
 8005874:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	3301      	adds	r3, #1
 800587a:	2280      	movs	r2, #128	@ 0x80
 800587c:	0212      	lsls	r2, r2, #8
 800587e:	409a      	lsls	r2, r3
 8005880:	0013      	movs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
      break;
 8005884:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005886:	693b      	ldr	r3, [r7, #16]
}
 8005888:	0018      	movs	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	b006      	add	sp, #24
 800588e:	bd80      	pop	{r7, pc}
 8005890:	40021000 	.word	0x40021000
 8005894:	003d0900 	.word	0x003d0900
 8005898:	00f42400 	.word	0x00f42400
 800589c:	007a1200 	.word	0x007a1200
 80058a0:	08008c3c 	.word	0x08008c3c

080058a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058a8:	4b02      	ldr	r3, [pc, #8]	@ (80058b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80058aa:	681b      	ldr	r3, [r3, #0]
}
 80058ac:	0018      	movs	r0, r3
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	46c0      	nop			@ (mov r8, r8)
 80058b4:	20000000 	.word	0x20000000

080058b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058bc:	f7ff fff2 	bl	80058a4 <HAL_RCC_GetHCLKFreq>
 80058c0:	0001      	movs	r1, r0
 80058c2:	4b06      	ldr	r3, [pc, #24]	@ (80058dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	0a1b      	lsrs	r3, r3, #8
 80058c8:	2207      	movs	r2, #7
 80058ca:	4013      	ands	r3, r2
 80058cc:	4a04      	ldr	r2, [pc, #16]	@ (80058e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80058ce:	5cd3      	ldrb	r3, [r2, r3]
 80058d0:	40d9      	lsrs	r1, r3
 80058d2:	000b      	movs	r3, r1
}
 80058d4:	0018      	movs	r0, r3
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	46c0      	nop			@ (mov r8, r8)
 80058dc:	40021000 	.word	0x40021000
 80058e0:	08008c34 	.word	0x08008c34

080058e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80058e8:	f7ff ffdc 	bl	80058a4 <HAL_RCC_GetHCLKFreq>
 80058ec:	0001      	movs	r1, r0
 80058ee:	4b06      	ldr	r3, [pc, #24]	@ (8005908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	0adb      	lsrs	r3, r3, #11
 80058f4:	2207      	movs	r2, #7
 80058f6:	4013      	ands	r3, r2
 80058f8:	4a04      	ldr	r2, [pc, #16]	@ (800590c <HAL_RCC_GetPCLK2Freq+0x28>)
 80058fa:	5cd3      	ldrb	r3, [r2, r3]
 80058fc:	40d9      	lsrs	r1, r3
 80058fe:	000b      	movs	r3, r1
}
 8005900:	0018      	movs	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	46c0      	nop			@ (mov r8, r8)
 8005908:	40021000 	.word	0x40021000
 800590c:	08008c34 	.word	0x08008c34

08005910 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b086      	sub	sp, #24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005918:	2317      	movs	r3, #23
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2220      	movs	r2, #32
 8005926:	4013      	ands	r3, r2
 8005928:	d106      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	2380      	movs	r3, #128	@ 0x80
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	4013      	ands	r3, r2
 8005934:	d100      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005936:	e104      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005938:	4bb9      	ldr	r3, [pc, #740]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800593a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800593c:	2380      	movs	r3, #128	@ 0x80
 800593e:	055b      	lsls	r3, r3, #21
 8005940:	4013      	ands	r3, r2
 8005942:	d10a      	bne.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005944:	4bb6      	ldr	r3, [pc, #728]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005946:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005948:	4bb5      	ldr	r3, [pc, #724]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800594a:	2180      	movs	r1, #128	@ 0x80
 800594c:	0549      	lsls	r1, r1, #21
 800594e:	430a      	orrs	r2, r1
 8005950:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005952:	2317      	movs	r3, #23
 8005954:	18fb      	adds	r3, r7, r3
 8005956:	2201      	movs	r2, #1
 8005958:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800595a:	4bb2      	ldr	r3, [pc, #712]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800595c:	681a      	ldr	r2, [r3, #0]
 800595e:	2380      	movs	r3, #128	@ 0x80
 8005960:	005b      	lsls	r3, r3, #1
 8005962:	4013      	ands	r3, r2
 8005964:	d11a      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005966:	4baf      	ldr	r3, [pc, #700]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	4bae      	ldr	r3, [pc, #696]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800596c:	2180      	movs	r1, #128	@ 0x80
 800596e:	0049      	lsls	r1, r1, #1
 8005970:	430a      	orrs	r2, r1
 8005972:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005974:	f7fd f874 	bl	8002a60 <HAL_GetTick>
 8005978:	0003      	movs	r3, r0
 800597a:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800597c:	e008      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597e:	f7fd f86f 	bl	8002a60 <HAL_GetTick>
 8005982:	0002      	movs	r2, r0
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b64      	cmp	r3, #100	@ 0x64
 800598a:	d901      	bls.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800598c:	2303      	movs	r3, #3
 800598e:	e143      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005990:	4ba4      	ldr	r3, [pc, #656]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	2380      	movs	r3, #128	@ 0x80
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	4013      	ands	r3, r2
 800599a:	d0f0      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800599c:	4ba0      	ldr	r3, [pc, #640]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	23c0      	movs	r3, #192	@ 0xc0
 80059a2:	039b      	lsls	r3, r3, #14
 80059a4:	4013      	ands	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	23c0      	movs	r3, #192	@ 0xc0
 80059ae:	039b      	lsls	r3, r3, #14
 80059b0:	4013      	ands	r3, r2
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d107      	bne.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	23c0      	movs	r3, #192	@ 0xc0
 80059be:	039b      	lsls	r3, r3, #14
 80059c0:	4013      	ands	r3, r2
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d013      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	23c0      	movs	r3, #192	@ 0xc0
 80059ce:	029b      	lsls	r3, r3, #10
 80059d0:	401a      	ands	r2, r3
 80059d2:	23c0      	movs	r3, #192	@ 0xc0
 80059d4:	029b      	lsls	r3, r3, #10
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d10a      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80059da:	4b91      	ldr	r3, [pc, #580]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	2380      	movs	r3, #128	@ 0x80
 80059e0:	029b      	lsls	r3, r3, #10
 80059e2:	401a      	ands	r2, r3
 80059e4:	2380      	movs	r3, #128	@ 0x80
 80059e6:	029b      	lsls	r3, r3, #10
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d101      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e113      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80059f0:	4b8b      	ldr	r3, [pc, #556]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80059f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80059f4:	23c0      	movs	r3, #192	@ 0xc0
 80059f6:	029b      	lsls	r3, r3, #10
 80059f8:	4013      	ands	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d049      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	23c0      	movs	r3, #192	@ 0xc0
 8005a08:	029b      	lsls	r3, r3, #10
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d004      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2220      	movs	r2, #32
 8005a18:	4013      	ands	r3, r2
 8005a1a:	d10d      	bne.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	23c0      	movs	r3, #192	@ 0xc0
 8005a22:	029b      	lsls	r3, r3, #10
 8005a24:	4013      	ands	r3, r2
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d034      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	2380      	movs	r3, #128	@ 0x80
 8005a32:	011b      	lsls	r3, r3, #4
 8005a34:	4013      	ands	r3, r2
 8005a36:	d02e      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005a38:	4b79      	ldr	r3, [pc, #484]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a3c:	4a7a      	ldr	r2, [pc, #488]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005a3e:	4013      	ands	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a42:	4b77      	ldr	r3, [pc, #476]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a44:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a46:	4b76      	ldr	r3, [pc, #472]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a48:	2180      	movs	r1, #128	@ 0x80
 8005a4a:	0309      	lsls	r1, r1, #12
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a50:	4b73      	ldr	r3, [pc, #460]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a54:	4b72      	ldr	r3, [pc, #456]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a56:	4975      	ldr	r1, [pc, #468]	@ (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005a58:	400a      	ands	r2, r1
 8005a5a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005a5c:	4b70      	ldr	r3, [pc, #448]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	2380      	movs	r3, #128	@ 0x80
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	4013      	ands	r3, r2
 8005a6a:	d014      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a6c:	f7fc fff8 	bl	8002a60 <HAL_GetTick>
 8005a70:	0003      	movs	r3, r0
 8005a72:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a74:	e009      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a76:	f7fc fff3 	bl	8002a60 <HAL_GetTick>
 8005a7a:	0002      	movs	r2, r0
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	4a6b      	ldr	r2, [pc, #428]	@ (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d901      	bls.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e0c6      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a8a:	4b65      	ldr	r3, [pc, #404]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005a8e:	2380      	movs	r3, #128	@ 0x80
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4013      	ands	r3, r2
 8005a94:	d0ef      	beq.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	2380      	movs	r3, #128	@ 0x80
 8005a9c:	011b      	lsls	r3, r3, #4
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	d01f      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	23c0      	movs	r3, #192	@ 0xc0
 8005aa8:	029b      	lsls	r3, r3, #10
 8005aaa:	401a      	ands	r2, r3
 8005aac:	23c0      	movs	r3, #192	@ 0xc0
 8005aae:	029b      	lsls	r3, r3, #10
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d10c      	bne.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a5e      	ldr	r2, [pc, #376]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005aba:	4013      	ands	r3, r2
 8005abc:	0019      	movs	r1, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	23c0      	movs	r3, #192	@ 0xc0
 8005ac4:	039b      	lsls	r3, r3, #14
 8005ac6:	401a      	ands	r2, r3
 8005ac8:	4b55      	ldr	r3, [pc, #340]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005aca:	430a      	orrs	r2, r1
 8005acc:	601a      	str	r2, [r3, #0]
 8005ace:	4b54      	ldr	r3, [pc, #336]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ad0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689a      	ldr	r2, [r3, #8]
 8005ad6:	23c0      	movs	r3, #192	@ 0xc0
 8005ad8:	029b      	lsls	r3, r3, #10
 8005ada:	401a      	ands	r2, r3
 8005adc:	4b50      	ldr	r3, [pc, #320]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	4013      	ands	r3, r2
 8005aea:	d01f      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	23c0      	movs	r3, #192	@ 0xc0
 8005af2:	029b      	lsls	r3, r3, #10
 8005af4:	401a      	ands	r2, r3
 8005af6:	23c0      	movs	r3, #192	@ 0xc0
 8005af8:	029b      	lsls	r3, r3, #10
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d10c      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005afe:	4b48      	ldr	r3, [pc, #288]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a4c      	ldr	r2, [pc, #304]	@ (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005b04:	4013      	ands	r3, r2
 8005b06:	0019      	movs	r1, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	23c0      	movs	r3, #192	@ 0xc0
 8005b0e:	039b      	lsls	r3, r3, #14
 8005b10:	401a      	ands	r2, r3
 8005b12:	4b43      	ldr	r3, [pc, #268]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b14:	430a      	orrs	r2, r1
 8005b16:	601a      	str	r2, [r3, #0]
 8005b18:	4b41      	ldr	r3, [pc, #260]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b1a:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	23c0      	movs	r3, #192	@ 0xc0
 8005b22:	029b      	lsls	r3, r3, #10
 8005b24:	401a      	ands	r2, r3
 8005b26:	4b3e      	ldr	r3, [pc, #248]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b2c:	2317      	movs	r3, #23
 8005b2e:	18fb      	adds	r3, r7, r3
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d105      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b36:	4b3a      	ldr	r3, [pc, #232]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b3a:	4b39      	ldr	r3, [pc, #228]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b3c:	493e      	ldr	r1, [pc, #248]	@ (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005b3e:	400a      	ands	r2, r1
 8005b40:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2201      	movs	r2, #1
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d009      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b4c:	4b34      	ldr	r3, [pc, #208]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b50:	2203      	movs	r2, #3
 8005b52:	4393      	bics	r3, r2
 8005b54:	0019      	movs	r1, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	4b31      	ldr	r3, [pc, #196]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2202      	movs	r2, #2
 8005b66:	4013      	ands	r3, r2
 8005b68:	d009      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b6a:	4b2d      	ldr	r3, [pc, #180]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b6e:	220c      	movs	r2, #12
 8005b70:	4393      	bics	r3, r2
 8005b72:	0019      	movs	r1, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691a      	ldr	r2, [r3, #16]
 8005b78:	4b29      	ldr	r3, [pc, #164]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2204      	movs	r2, #4
 8005b84:	4013      	ands	r3, r2
 8005b86:	d009      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b88:	4b25      	ldr	r3, [pc, #148]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	0019      	movs	r1, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	4b22      	ldr	r3, [pc, #136]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2208      	movs	r2, #8
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005baa:	4a25      	ldr	r2, [pc, #148]	@ (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005bac:	4013      	ands	r3, r2
 8005bae:	0019      	movs	r1, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699a      	ldr	r2, [r3, #24]
 8005bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	2380      	movs	r3, #128	@ 0x80
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	d009      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bc6:	4b16      	ldr	r3, [pc, #88]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bca:	4a17      	ldr	r2, [pc, #92]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005bcc:	4013      	ands	r3, r2
 8005bce:	0019      	movs	r1, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69da      	ldr	r2, [r3, #28]
 8005bd4:	4b12      	ldr	r3, [pc, #72]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2240      	movs	r2, #64	@ 0x40
 8005be0:	4013      	ands	r3, r2
 8005be2:	d009      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005be4:	4b0e      	ldr	r3, [pc, #56]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005be8:	4a16      	ldr	r2, [pc, #88]	@ (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005bea:	4013      	ands	r3, r2
 8005bec:	0019      	movs	r1, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2280      	movs	r2, #128	@ 0x80
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d009      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005c02:	4b07      	ldr	r3, [pc, #28]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c06:	4a10      	ldr	r2, [pc, #64]	@ (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005c08:	4013      	ands	r3, r2
 8005c0a:	0019      	movs	r1, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1a      	ldr	r2, [r3, #32]
 8005c10:	4b03      	ldr	r3, [pc, #12]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c12:	430a      	orrs	r2, r1
 8005c14:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	0018      	movs	r0, r3
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	b006      	add	sp, #24
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	40021000 	.word	0x40021000
 8005c24:	40007000 	.word	0x40007000
 8005c28:	fffcffff 	.word	0xfffcffff
 8005c2c:	fff7ffff 	.word	0xfff7ffff
 8005c30:	00001388 	.word	0x00001388
 8005c34:	ffcfffff 	.word	0xffcfffff
 8005c38:	efffffff 	.word	0xefffffff
 8005c3c:	fffff3ff 	.word	0xfffff3ff
 8005c40:	ffffcfff 	.word	0xffffcfff
 8005c44:	fbffffff 	.word	0xfbffffff
 8005c48:	fff3ffff 	.word	0xfff3ffff

08005c4c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005c4c:	b5b0      	push	{r4, r5, r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005c54:	230f      	movs	r3, #15
 8005c56:	18fb      	adds	r3, r7, r3
 8005c58:	2201      	movs	r2, #1
 8005c5a:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e088      	b.n	8005d78 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2221      	movs	r2, #33	@ 0x21
 8005c6a:	5c9b      	ldrb	r3, [r3, r2]
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d107      	bne.n	8005c82 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	2100      	movs	r1, #0
 8005c78:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	0018      	movs	r0, r3
 8005c7e:	f7fb fd6f 	bl	8001760 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2221      	movs	r2, #33	@ 0x21
 8005c86:	2102      	movs	r1, #2
 8005c88:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	2210      	movs	r2, #16
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b10      	cmp	r3, #16
 8005c96:	d05f      	beq.n	8005d58 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	22ca      	movs	r2, #202	@ 0xca
 8005c9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2253      	movs	r2, #83	@ 0x53
 8005ca6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005ca8:	250f      	movs	r5, #15
 8005caa:	197c      	adds	r4, r7, r5
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	0018      	movs	r0, r3
 8005cb0:	f000 f93e 	bl	8005f30 <RTC_EnterInitMode>
 8005cb4:	0003      	movs	r3, r0
 8005cb6:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8005cb8:	0028      	movs	r0, r5
 8005cba:	183b      	adds	r3, r7, r0
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d12c      	bne.n	8005d1c <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	492c      	ldr	r1, [pc, #176]	@ (8005d80 <HAL_RTC_Init+0x134>)
 8005cce:	400a      	ands	r2, r1
 8005cd0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6899      	ldr	r1, [r3, #8]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	68d2      	ldr	r2, [r2, #12]
 8005cf8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6919      	ldr	r1, [r3, #16]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	041a      	lsls	r2, r3, #16
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005d0e:	183c      	adds	r4, r7, r0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	0018      	movs	r0, r3
 8005d14:	f000 f950 	bl	8005fb8 <RTC_ExitInitMode>
 8005d18:	0003      	movs	r3, r0
 8005d1a:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8005d1c:	230f      	movs	r3, #15
 8005d1e:	18fb      	adds	r3, r7, r3
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d113      	bne.n	8005d4e <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2103      	movs	r1, #3
 8005d32:	438a      	bics	r2, r1
 8005d34:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	22ff      	movs	r2, #255	@ 0xff
 8005d54:	625a      	str	r2, [r3, #36]	@ 0x24
 8005d56:	e003      	b.n	8005d60 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005d58:	230f      	movs	r3, #15
 8005d5a:	18fb      	adds	r3, r7, r3
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8005d60:	230f      	movs	r3, #15
 8005d62:	18fb      	adds	r3, r7, r3
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d103      	bne.n	8005d72 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2221      	movs	r2, #33	@ 0x21
 8005d6e:	2101      	movs	r1, #1
 8005d70:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005d72:	230f      	movs	r3, #15
 8005d74:	18fb      	adds	r3, r7, r3
 8005d76:	781b      	ldrb	r3, [r3, #0]
}
 8005d78:	0018      	movs	r0, r3
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	b004      	add	sp, #16
 8005d7e:	bdb0      	pop	{r4, r5, r7, pc}
 8005d80:	ff8fffbf 	.word	0xff8fffbf

08005d84 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	045b      	lsls	r3, r3, #17
 8005da6:	0c5a      	lsrs	r2, r3, #17
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a22      	ldr	r2, [pc, #136]	@ (8005e3c <HAL_RTC_GetTime+0xb8>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	0c1b      	lsrs	r3, r3, #16
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	223f      	movs	r2, #63	@ 0x3f
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	0a1b      	lsrs	r3, r3, #8
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	227f      	movs	r2, #127	@ 0x7f
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	227f      	movs	r2, #127	@ 0x7f
 8005dde:	4013      	ands	r3, r2
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	0d9b      	lsrs	r3, r3, #22
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2201      	movs	r2, #1
 8005dee:	4013      	ands	r3, r2
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d11a      	bne.n	8005e32 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	0018      	movs	r0, r3
 8005e02:	f000 f903 	bl	800600c <RTC_Bcd2ToByte>
 8005e06:	0003      	movs	r3, r0
 8005e08:	001a      	movs	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	785b      	ldrb	r3, [r3, #1]
 8005e12:	0018      	movs	r0, r3
 8005e14:	f000 f8fa 	bl	800600c <RTC_Bcd2ToByte>
 8005e18:	0003      	movs	r3, r0
 8005e1a:	001a      	movs	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	789b      	ldrb	r3, [r3, #2]
 8005e24:	0018      	movs	r0, r3
 8005e26:	f000 f8f1 	bl	800600c <RTC_Bcd2ToByte>
 8005e2a:	0003      	movs	r3, r0
 8005e2c:	001a      	movs	r2, r3
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	0018      	movs	r0, r3
 8005e36:	46bd      	mov	sp, r7
 8005e38:	b006      	add	sp, #24
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	007f7f7f 	.word	0x007f7f7f

08005e40 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b086      	sub	sp, #24
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	4a21      	ldr	r2, [pc, #132]	@ (8005edc <HAL_RTC_GetDate+0x9c>)
 8005e58:	4013      	ands	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	0c1b      	lsrs	r3, r3, #16
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	0a1b      	lsrs	r3, r3, #8
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	221f      	movs	r2, #31
 8005e6e:	4013      	ands	r3, r2
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	223f      	movs	r2, #63	@ 0x3f
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	b2da      	uxtb	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	0b5b      	lsrs	r3, r3, #13
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2207      	movs	r2, #7
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d11a      	bne.n	8005ed0 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	78db      	ldrb	r3, [r3, #3]
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f000 f8b4 	bl	800600c <RTC_Bcd2ToByte>
 8005ea4:	0003      	movs	r3, r0
 8005ea6:	001a      	movs	r2, r3
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f000 f8ab 	bl	800600c <RTC_Bcd2ToByte>
 8005eb6:	0003      	movs	r3, r0
 8005eb8:	001a      	movs	r2, r3
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	789b      	ldrb	r3, [r3, #2]
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	f000 f8a2 	bl	800600c <RTC_Bcd2ToByte>
 8005ec8:	0003      	movs	r3, r0
 8005eca:	001a      	movs	r2, r3
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b006      	add	sp, #24
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	46c0      	nop			@ (mov r8, r8)
 8005edc:	00ffff3f 	.word	0x00ffff3f

08005ee0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a0e      	ldr	r2, [pc, #56]	@ (8005f2c <HAL_RTC_WaitForSynchro+0x4c>)
 8005ef2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ef4:	f7fc fdb4 	bl	8002a60 <HAL_GetTick>
 8005ef8:	0003      	movs	r3, r0
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005efc:	e00a      	b.n	8005f14 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005efe:	f7fc fdaf 	bl	8002a60 <HAL_GetTick>
 8005f02:	0002      	movs	r2, r0
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	1ad2      	subs	r2, r2, r3
 8005f08:	23fa      	movs	r3, #250	@ 0xfa
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d901      	bls.n	8005f14 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e006      	b.n	8005f22 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	2220      	movs	r2, #32
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	d0ee      	beq.n	8005efe <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	0018      	movs	r0, r3
 8005f24:	46bd      	mov	sp, r7
 8005f26:	b004      	add	sp, #16
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	46c0      	nop			@ (mov r8, r8)
 8005f2c:	0001ff5f 	.word	0x0001ff5f

08005f30 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3c:	230f      	movs	r3, #15
 8005f3e:	18fb      	adds	r3, r7, r3
 8005f40:	2200      	movs	r2, #0
 8005f42:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2240      	movs	r2, #64	@ 0x40
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d12c      	bne.n	8005faa <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2180      	movs	r1, #128	@ 0x80
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005f60:	f7fc fd7e 	bl	8002a60 <HAL_GetTick>
 8005f64:	0003      	movs	r3, r0
 8005f66:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f68:	e014      	b.n	8005f94 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f6a:	f7fc fd79 	bl	8002a60 <HAL_GetTick>
 8005f6e:	0002      	movs	r2, r0
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	1ad2      	subs	r2, r2, r3
 8005f74:	200f      	movs	r0, #15
 8005f76:	183b      	adds	r3, r7, r0
 8005f78:	1839      	adds	r1, r7, r0
 8005f7a:	7809      	ldrb	r1, [r1, #0]
 8005f7c:	7019      	strb	r1, [r3, #0]
 8005f7e:	23fa      	movs	r3, #250	@ 0xfa
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d906      	bls.n	8005f94 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2221      	movs	r2, #33	@ 0x21
 8005f8a:	2104      	movs	r1, #4
 8005f8c:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8005f8e:	183b      	adds	r3, r7, r0
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	2240      	movs	r2, #64	@ 0x40
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	d104      	bne.n	8005faa <RTC_EnterInitMode+0x7a>
 8005fa0:	230f      	movs	r3, #15
 8005fa2:	18fb      	adds	r3, r7, r3
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d1df      	bne.n	8005f6a <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8005faa:	230f      	movs	r3, #15
 8005fac:	18fb      	adds	r3, r7, r3
 8005fae:	781b      	ldrb	r3, [r3, #0]
}
 8005fb0:	0018      	movs	r0, r3
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	b004      	add	sp, #16
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005fb8:	b590      	push	{r4, r7, lr}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fc0:	240f      	movs	r4, #15
 8005fc2:	193b      	adds	r3, r7, r4
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2180      	movs	r1, #128	@ 0x80
 8005fd4:	438a      	bics	r2, r1
 8005fd6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	d10c      	bne.n	8005ffe <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	0018      	movs	r0, r3
 8005fe8:	f7ff ff7a 	bl	8005ee0 <HAL_RTC_WaitForSynchro>
 8005fec:	1e03      	subs	r3, r0, #0
 8005fee:	d006      	beq.n	8005ffe <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2221      	movs	r2, #33	@ 0x21
 8005ff4:	2104      	movs	r1, #4
 8005ff6:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8005ff8:	193b      	adds	r3, r7, r4
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005ffe:	230f      	movs	r3, #15
 8006000:	18fb      	adds	r3, r7, r3
 8006002:	781b      	ldrb	r3, [r3, #0]
}
 8006004:	0018      	movs	r0, r3
 8006006:	46bd      	mov	sp, r7
 8006008:	b005      	add	sp, #20
 800600a:	bd90      	pop	{r4, r7, pc}

0800600c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	0002      	movs	r2, r0
 8006014:	1dfb      	adds	r3, r7, #7
 8006016:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800601c:	1dfb      	adds	r3, r7, #7
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	091b      	lsrs	r3, r3, #4
 8006022:	b2db      	uxtb	r3, r3
 8006024:	001a      	movs	r2, r3
 8006026:	0013      	movs	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	189b      	adds	r3, r3, r2
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	b2da      	uxtb	r2, r3
 8006034:	1dfb      	adds	r3, r7, #7
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	210f      	movs	r1, #15
 800603a:	400b      	ands	r3, r1
 800603c:	b2db      	uxtb	r3, r3
 800603e:	18d3      	adds	r3, r2, r3
 8006040:	b2db      	uxtb	r3, r3
}
 8006042:	0018      	movs	r0, r3
 8006044:	46bd      	mov	sp, r7
 8006046:	b004      	add	sp, #16
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006058:	4b64      	ldr	r3, [pc, #400]	@ (80061ec <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	22fa      	movs	r2, #250	@ 0xfa
 800605e:	01d1      	lsls	r1, r2, #7
 8006060:	0018      	movs	r0, r3
 8006062:	f7fa f863 	bl	800012c <__udivsi3>
 8006066:	0003      	movs	r3, r0
 8006068:	001a      	movs	r2, r3
 800606a:	0013      	movs	r3, r2
 800606c:	015b      	lsls	r3, r3, #5
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	189b      	adds	r3, r3, r2
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2220      	movs	r2, #32
 800607c:	5c9b      	ldrb	r3, [r3, r2]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8006082:	2302      	movs	r3, #2
 8006084:	e0ad      	b.n	80061e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2220      	movs	r2, #32
 800608a:	2101      	movs	r1, #1
 800608c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2221      	movs	r2, #33	@ 0x21
 8006092:	2102      	movs	r1, #2
 8006094:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	22ca      	movs	r2, #202	@ 0xca
 800609c:	625a      	str	r2, [r3, #36]	@ 0x24
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2253      	movs	r2, #83	@ 0x53
 80060a4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	2380      	movs	r3, #128	@ 0x80
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	4013      	ands	r3, r2
 80060b2:	d019      	beq.n	80060e8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10d      	bne.n	80060dc <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	22ff      	movs	r2, #255	@ 0xff
 80060c6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2221      	movs	r2, #33	@ 0x21
 80060cc:	2103      	movs	r1, #3
 80060ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2220      	movs	r2, #32
 80060d4:	2100      	movs	r1, #0
 80060d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e082      	b.n	80061e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	2204      	movs	r2, #4
 80060e4:	4013      	ands	r3, r2
 80060e6:	d1e5      	bne.n	80060b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	493f      	ldr	r1, [pc, #252]	@ (80061f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 80060f4:	400a      	ands	r2, r1
 80060f6:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	22ff      	movs	r2, #255	@ 0xff
 8006100:	401a      	ands	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	493b      	ldr	r1, [pc, #236]	@ (80061f4 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8006108:	430a      	orrs	r2, r1
 800610a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800610c:	4b37      	ldr	r3, [pc, #220]	@ (80061ec <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	22fa      	movs	r2, #250	@ 0xfa
 8006112:	01d1      	lsls	r1, r2, #7
 8006114:	0018      	movs	r0, r3
 8006116:	f7fa f809 	bl	800012c <__udivsi3>
 800611a:	0003      	movs	r3, r0
 800611c:	001a      	movs	r2, r3
 800611e:	0013      	movs	r3, r2
 8006120:	015b      	lsls	r3, r3, #5
 8006122:	1a9b      	subs	r3, r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	189b      	adds	r3, r3, r2
 8006128:	00db      	lsls	r3, r3, #3
 800612a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	3b01      	subs	r3, #1
 8006130:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10d      	bne.n	8006154 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	22ff      	movs	r2, #255	@ 0xff
 800613e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2221      	movs	r2, #33	@ 0x21
 8006144:	2103      	movs	r1, #3
 8006146:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2220      	movs	r2, #32
 800614c:	2100      	movs	r1, #0
 800614e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e046      	b.n	80061e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2204      	movs	r2, #4
 800615c:	4013      	ands	r3, r2
 800615e:	d0e5      	beq.n	800612c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	689a      	ldr	r2, [r3, #8]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2107      	movs	r1, #7
 800616c:	438a      	bics	r2, r1
 800616e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6899      	ldr	r1, [r3, #8]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	430a      	orrs	r2, r1
 800617e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68ba      	ldr	r2, [r7, #8]
 8006186:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8006188:	4b1b      	ldr	r3, [pc, #108]	@ (80061f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	4b1a      	ldr	r3, [pc, #104]	@ (80061f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800618e:	2180      	movs	r1, #128	@ 0x80
 8006190:	0349      	lsls	r1, r1, #13
 8006192:	430a      	orrs	r2, r1
 8006194:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8006196:	4b18      	ldr	r3, [pc, #96]	@ (80061f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	4b17      	ldr	r3, [pc, #92]	@ (80061f8 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800619c:	2180      	movs	r1, #128	@ 0x80
 800619e:	0349      	lsls	r1, r1, #13
 80061a0:	430a      	orrs	r2, r1
 80061a2:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	689a      	ldr	r2, [r3, #8]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2180      	movs	r1, #128	@ 0x80
 80061b0:	01c9      	lsls	r1, r1, #7
 80061b2:	430a      	orrs	r2, r1
 80061b4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2180      	movs	r1, #128	@ 0x80
 80061c2:	00c9      	lsls	r1, r1, #3
 80061c4:	430a      	orrs	r2, r1
 80061c6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	22ff      	movs	r2, #255	@ 0xff
 80061ce:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2221      	movs	r2, #33	@ 0x21
 80061d4:	2101      	movs	r1, #1
 80061d6:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2220      	movs	r2, #32
 80061dc:	2100      	movs	r1, #0
 80061de:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	0018      	movs	r0, r3
 80061e4:	46bd      	mov	sp, r7
 80061e6:	b006      	add	sp, #24
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	46c0      	nop			@ (mov r8, r8)
 80061ec:	20000000 	.word	0x20000000
 80061f0:	fffffbff 	.word	0xfffffbff
 80061f4:	fffffb7f 	.word	0xfffffb7f
 80061f8:	40010400 	.word	0x40010400

080061fc <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2220      	movs	r2, #32
 800620c:	5c9b      	ldrb	r3, [r3, r2]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8006212:	2302      	movs	r3, #2
 8006214:	e04e      	b.n	80062b4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2220      	movs	r2, #32
 800621a:	2101      	movs	r1, #1
 800621c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2221      	movs	r2, #33	@ 0x21
 8006222:	2102      	movs	r1, #2
 8006224:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	22ca      	movs	r2, #202	@ 0xca
 800622c:	625a      	str	r2, [r3, #36]	@ 0x24
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2253      	movs	r2, #83	@ 0x53
 8006234:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	491e      	ldr	r1, [pc, #120]	@ (80062bc <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8006242:	400a      	ands	r2, r1
 8006244:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	491b      	ldr	r1, [pc, #108]	@ (80062c0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8006252:	400a      	ands	r2, r1
 8006254:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006256:	f7fc fc03 	bl	8002a60 <HAL_GetTick>
 800625a:	0003      	movs	r3, r0
 800625c:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800625e:	e016      	b.n	800628e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006260:	f7fc fbfe 	bl	8002a60 <HAL_GetTick>
 8006264:	0002      	movs	r2, r0
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	1ad2      	subs	r2, r2, r3
 800626a:	23fa      	movs	r3, #250	@ 0xfa
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	429a      	cmp	r2, r3
 8006270:	d90d      	bls.n	800628e <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	22ff      	movs	r2, #255	@ 0xff
 8006278:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2221      	movs	r2, #33	@ 0x21
 800627e:	2103      	movs	r1, #3
 8006280:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2220      	movs	r2, #32
 8006286:	2100      	movs	r1, #0
 8006288:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e012      	b.n	80062b4 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	2204      	movs	r2, #4
 8006296:	4013      	ands	r3, r2
 8006298:	d0e2      	beq.n	8006260 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	22ff      	movs	r2, #255	@ 0xff
 80062a0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2221      	movs	r2, #33	@ 0x21
 80062a6:	2101      	movs	r1, #1
 80062a8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2220      	movs	r2, #32
 80062ae:	2100      	movs	r1, #0
 80062b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062b2:	2300      	movs	r3, #0
}
 80062b4:	0018      	movs	r0, r3
 80062b6:	46bd      	mov	sp, r7
 80062b8:	b004      	add	sp, #16
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	fffffbff 	.word	0xfffffbff
 80062c0:	ffffbfff 	.word	0xffffbfff

080062c4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80062cc:	4b13      	ldr	r3, [pc, #76]	@ (800631c <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80062ce:	2280      	movs	r2, #128	@ 0x80
 80062d0:	0352      	lsls	r2, r2, #13
 80062d2:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	2380      	movs	r3, #128	@ 0x80
 80062dc:	01db      	lsls	r3, r3, #7
 80062de:	4013      	ands	r3, r2
 80062e0:	d014      	beq.n	800630c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	2380      	movs	r3, #128	@ 0x80
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	4013      	ands	r3, r2
 80062ee:	d00d      	beq.n	800630c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	22ff      	movs	r2, #255	@ 0xff
 80062f8:	401a      	ands	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4908      	ldr	r1, [pc, #32]	@ (8006320 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8006300:	430a      	orrs	r2, r1
 8006302:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	0018      	movs	r0, r3
 8006308:	f7fc f974 	bl	80025f4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2221      	movs	r2, #33	@ 0x21
 8006310:	2101      	movs	r1, #1
 8006312:	5499      	strb	r1, [r3, r2]
}
 8006314:	46c0      	nop			@ (mov r8, r8)
 8006316:	46bd      	mov	sp, r7
 8006318:	b002      	add	sp, #8
 800631a:	bd80      	pop	{r7, pc}
 800631c:	40010400 	.word	0x40010400
 8006320:	fffffb7f 	.word	0xfffffb7f

08006324 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e044      	b.n	80063c0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800633a:	2b00      	cmp	r3, #0
 800633c:	d107      	bne.n	800634e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2278      	movs	r2, #120	@ 0x78
 8006342:	2100      	movs	r1, #0
 8006344:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	0018      	movs	r0, r3
 800634a:	f7fb f95b 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2224      	movs	r2, #36	@ 0x24
 8006352:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2101      	movs	r1, #1
 8006360:	438a      	bics	r2, r1
 8006362:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	0018      	movs	r0, r3
 8006370:	f000 fc8e 	bl	8006c90 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	0018      	movs	r0, r3
 8006378:	f000 f9ec 	bl	8006754 <UART_SetConfig>
 800637c:	0003      	movs	r3, r0
 800637e:	2b01      	cmp	r3, #1
 8006380:	d101      	bne.n	8006386 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e01c      	b.n	80063c0 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	490d      	ldr	r1, [pc, #52]	@ (80063c8 <HAL_UART_Init+0xa4>)
 8006392:	400a      	ands	r2, r1
 8006394:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	212a      	movs	r1, #42	@ 0x2a
 80063a2:	438a      	bics	r2, r1
 80063a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2101      	movs	r1, #1
 80063b2:	430a      	orrs	r2, r1
 80063b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	0018      	movs	r0, r3
 80063ba:	f000 fd1d 	bl	8006df8 <UART_CheckIdleState>
 80063be:	0003      	movs	r3, r0
}
 80063c0:	0018      	movs	r0, r3
 80063c2:	46bd      	mov	sp, r7
 80063c4:	b002      	add	sp, #8
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	ffffb7ff 	.word	0xffffb7ff

080063cc <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e030      	b.n	8006440 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2224      	movs	r2, #36	@ 0x24
 80063e2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2101      	movs	r1, #1
 80063f0:	438a      	bics	r2, r1
 80063f2:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2200      	movs	r2, #0
 8006402:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2200      	movs	r2, #0
 800640a:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	0018      	movs	r0, r3
 8006410:	f7fb f96e 	bl	80016f0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2284      	movs	r2, #132	@ 0x84
 8006418:	2100      	movs	r1, #0
 800641a:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2280      	movs	r2, #128	@ 0x80
 8006426:	2100      	movs	r1, #0
 8006428:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2278      	movs	r2, #120	@ 0x78
 800643a:	2100      	movs	r1, #0
 800643c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	0018      	movs	r0, r3
 8006442:	46bd      	mov	sp, r7
 8006444:	b002      	add	sp, #8
 8006446:	bd80      	pop	{r7, pc}

08006448 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	@ 0x28
 800644c:	af02      	add	r7, sp, #8
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	603b      	str	r3, [r7, #0]
 8006454:	1dbb      	adds	r3, r7, #6
 8006456:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800645c:	2b20      	cmp	r3, #32
 800645e:	d000      	beq.n	8006462 <HAL_UART_Transmit+0x1a>
 8006460:	e08c      	b.n	800657c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d003      	beq.n	8006470 <HAL_UART_Transmit+0x28>
 8006468:	1dbb      	adds	r3, r7, #6
 800646a:	881b      	ldrh	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d101      	bne.n	8006474 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	e084      	b.n	800657e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	689a      	ldr	r2, [r3, #8]
 8006478:	2380      	movs	r3, #128	@ 0x80
 800647a:	015b      	lsls	r3, r3, #5
 800647c:	429a      	cmp	r2, r3
 800647e:	d109      	bne.n	8006494 <HAL_UART_Transmit+0x4c>
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d105      	bne.n	8006494 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2201      	movs	r2, #1
 800648c:	4013      	ands	r3, r2
 800648e:	d001      	beq.n	8006494 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e074      	b.n	800657e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2284      	movs	r2, #132	@ 0x84
 8006498:	2100      	movs	r1, #0
 800649a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2221      	movs	r2, #33	@ 0x21
 80064a0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064a2:	f7fc fadd 	bl	8002a60 <HAL_GetTick>
 80064a6:	0003      	movs	r3, r0
 80064a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	1dba      	adds	r2, r7, #6
 80064ae:	2150      	movs	r1, #80	@ 0x50
 80064b0:	8812      	ldrh	r2, [r2, #0]
 80064b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	1dba      	adds	r2, r7, #6
 80064b8:	2152      	movs	r1, #82	@ 0x52
 80064ba:	8812      	ldrh	r2, [r2, #0]
 80064bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	689a      	ldr	r2, [r3, #8]
 80064c2:	2380      	movs	r3, #128	@ 0x80
 80064c4:	015b      	lsls	r3, r3, #5
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d108      	bne.n	80064dc <HAL_UART_Transmit+0x94>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d104      	bne.n	80064dc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	e003      	b.n	80064e4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064e0:	2300      	movs	r3, #0
 80064e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064e4:	e02f      	b.n	8006546 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	9300      	str	r3, [sp, #0]
 80064ee:	0013      	movs	r3, r2
 80064f0:	2200      	movs	r2, #0
 80064f2:	2180      	movs	r1, #128	@ 0x80
 80064f4:	f000 fd28 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 80064f8:	1e03      	subs	r3, r0, #0
 80064fa:	d004      	beq.n	8006506 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2220      	movs	r2, #32
 8006500:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e03b      	b.n	800657e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10b      	bne.n	8006524 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	881b      	ldrh	r3, [r3, #0]
 8006510:	001a      	movs	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	05d2      	lsls	r2, r2, #23
 8006518:	0dd2      	lsrs	r2, r2, #23
 800651a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	3302      	adds	r3, #2
 8006520:	61bb      	str	r3, [r7, #24]
 8006522:	e007      	b.n	8006534 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	781a      	ldrb	r2, [r3, #0]
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	3301      	adds	r3, #1
 8006532:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2252      	movs	r2, #82	@ 0x52
 8006538:	5a9b      	ldrh	r3, [r3, r2]
 800653a:	b29b      	uxth	r3, r3
 800653c:	3b01      	subs	r3, #1
 800653e:	b299      	uxth	r1, r3
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2252      	movs	r2, #82	@ 0x52
 8006544:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2252      	movs	r2, #82	@ 0x52
 800654a:	5a9b      	ldrh	r3, [r3, r2]
 800654c:	b29b      	uxth	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1c9      	bne.n	80064e6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	0013      	movs	r3, r2
 800655c:	2200      	movs	r2, #0
 800655e:	2140      	movs	r1, #64	@ 0x40
 8006560:	f000 fcf2 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 8006564:	1e03      	subs	r3, r0, #0
 8006566:	d004      	beq.n	8006572 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2220      	movs	r2, #32
 800656c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e005      	b.n	800657e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2220      	movs	r2, #32
 8006576:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006578:	2300      	movs	r3, #0
 800657a:	e000      	b.n	800657e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800657c:	2302      	movs	r3, #2
  }
}
 800657e:	0018      	movs	r0, r3
 8006580:	46bd      	mov	sp, r7
 8006582:	b008      	add	sp, #32
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b08a      	sub	sp, #40	@ 0x28
 800658c:	af02      	add	r7, sp, #8
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	60b9      	str	r1, [r7, #8]
 8006592:	603b      	str	r3, [r7, #0]
 8006594:	1dbb      	adds	r3, r7, #6
 8006596:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2280      	movs	r2, #128	@ 0x80
 800659c:	589b      	ldr	r3, [r3, r2]
 800659e:	2b20      	cmp	r3, #32
 80065a0:	d000      	beq.n	80065a4 <HAL_UART_Receive+0x1c>
 80065a2:	e0d0      	b.n	8006746 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_UART_Receive+0x2a>
 80065aa:	1dbb      	adds	r3, r7, #6
 80065ac:	881b      	ldrh	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d101      	bne.n	80065b6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e0c8      	b.n	8006748 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	2380      	movs	r3, #128	@ 0x80
 80065bc:	015b      	lsls	r3, r3, #5
 80065be:	429a      	cmp	r2, r3
 80065c0:	d109      	bne.n	80065d6 <HAL_UART_Receive+0x4e>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d105      	bne.n	80065d6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2201      	movs	r2, #1
 80065ce:	4013      	ands	r3, r2
 80065d0:	d001      	beq.n	80065d6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e0b8      	b.n	8006748 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2284      	movs	r2, #132	@ 0x84
 80065da:	2100      	movs	r1, #0
 80065dc:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2280      	movs	r2, #128	@ 0x80
 80065e2:	2122      	movs	r1, #34	@ 0x22
 80065e4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ec:	f7fc fa38 	bl	8002a60 <HAL_GetTick>
 80065f0:	0003      	movs	r3, r0
 80065f2:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	1dba      	adds	r2, r7, #6
 80065f8:	2158      	movs	r1, #88	@ 0x58
 80065fa:	8812      	ldrh	r2, [r2, #0]
 80065fc:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	1dba      	adds	r2, r7, #6
 8006602:	215a      	movs	r1, #90	@ 0x5a
 8006604:	8812      	ldrh	r2, [r2, #0]
 8006606:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	2380      	movs	r3, #128	@ 0x80
 800660e:	015b      	lsls	r3, r3, #5
 8006610:	429a      	cmp	r2, r3
 8006612:	d10d      	bne.n	8006630 <HAL_UART_Receive+0xa8>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d104      	bne.n	8006626 <HAL_UART_Receive+0x9e>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	225c      	movs	r2, #92	@ 0x5c
 8006620:	494b      	ldr	r1, [pc, #300]	@ (8006750 <HAL_UART_Receive+0x1c8>)
 8006622:	5299      	strh	r1, [r3, r2]
 8006624:	e02e      	b.n	8006684 <HAL_UART_Receive+0xfc>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	225c      	movs	r2, #92	@ 0x5c
 800662a:	21ff      	movs	r1, #255	@ 0xff
 800662c:	5299      	strh	r1, [r3, r2]
 800662e:	e029      	b.n	8006684 <HAL_UART_Receive+0xfc>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10d      	bne.n	8006654 <HAL_UART_Receive+0xcc>
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <HAL_UART_Receive+0xc2>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	225c      	movs	r2, #92	@ 0x5c
 8006644:	21ff      	movs	r1, #255	@ 0xff
 8006646:	5299      	strh	r1, [r3, r2]
 8006648:	e01c      	b.n	8006684 <HAL_UART_Receive+0xfc>
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	225c      	movs	r2, #92	@ 0x5c
 800664e:	217f      	movs	r1, #127	@ 0x7f
 8006650:	5299      	strh	r1, [r3, r2]
 8006652:	e017      	b.n	8006684 <HAL_UART_Receive+0xfc>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	689a      	ldr	r2, [r3, #8]
 8006658:	2380      	movs	r3, #128	@ 0x80
 800665a:	055b      	lsls	r3, r3, #21
 800665c:	429a      	cmp	r2, r3
 800665e:	d10d      	bne.n	800667c <HAL_UART_Receive+0xf4>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d104      	bne.n	8006672 <HAL_UART_Receive+0xea>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	225c      	movs	r2, #92	@ 0x5c
 800666c:	217f      	movs	r1, #127	@ 0x7f
 800666e:	5299      	strh	r1, [r3, r2]
 8006670:	e008      	b.n	8006684 <HAL_UART_Receive+0xfc>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	225c      	movs	r2, #92	@ 0x5c
 8006676:	213f      	movs	r1, #63	@ 0x3f
 8006678:	5299      	strh	r1, [r3, r2]
 800667a:	e003      	b.n	8006684 <HAL_UART_Receive+0xfc>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	225c      	movs	r2, #92	@ 0x5c
 8006680:	2100      	movs	r1, #0
 8006682:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006684:	2312      	movs	r3, #18
 8006686:	18fb      	adds	r3, r7, r3
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	215c      	movs	r1, #92	@ 0x5c
 800668c:	5a52      	ldrh	r2, [r2, r1]
 800668e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	2380      	movs	r3, #128	@ 0x80
 8006696:	015b      	lsls	r3, r3, #5
 8006698:	429a      	cmp	r2, r3
 800669a:	d108      	bne.n	80066ae <HAL_UART_Receive+0x126>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d104      	bne.n	80066ae <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80066a4:	2300      	movs	r3, #0
 80066a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	61bb      	str	r3, [r7, #24]
 80066ac:	e003      	b.n	80066b6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066b2:	2300      	movs	r3, #0
 80066b4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80066b6:	e03a      	b.n	800672e <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	68f8      	ldr	r0, [r7, #12]
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	0013      	movs	r3, r2
 80066c2:	2200      	movs	r2, #0
 80066c4:	2120      	movs	r1, #32
 80066c6:	f000 fc3f 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 80066ca:	1e03      	subs	r3, r0, #0
 80066cc:	d005      	beq.n	80066da <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2280      	movs	r2, #128	@ 0x80
 80066d2:	2120      	movs	r1, #32
 80066d4:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e036      	b.n	8006748 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d10e      	bne.n	80066fe <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2212      	movs	r2, #18
 80066ea:	18ba      	adds	r2, r7, r2
 80066ec:	8812      	ldrh	r2, [r2, #0]
 80066ee:	4013      	ands	r3, r2
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	3302      	adds	r3, #2
 80066fa:	61bb      	str	r3, [r7, #24]
 80066fc:	e00e      	b.n	800671c <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2212      	movs	r2, #18
 8006708:	18ba      	adds	r2, r7, r2
 800670a:	8812      	ldrh	r2, [r2, #0]
 800670c:	b2d2      	uxtb	r2, r2
 800670e:	4013      	ands	r3, r2
 8006710:	b2da      	uxtb	r2, r3
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	3301      	adds	r3, #1
 800671a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	225a      	movs	r2, #90	@ 0x5a
 8006720:	5a9b      	ldrh	r3, [r3, r2]
 8006722:	b29b      	uxth	r3, r3
 8006724:	3b01      	subs	r3, #1
 8006726:	b299      	uxth	r1, r3
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	225a      	movs	r2, #90	@ 0x5a
 800672c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	225a      	movs	r2, #90	@ 0x5a
 8006732:	5a9b      	ldrh	r3, [r3, r2]
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1be      	bne.n	80066b8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2280      	movs	r2, #128	@ 0x80
 800673e:	2120      	movs	r1, #32
 8006740:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006742:	2300      	movs	r3, #0
 8006744:	e000      	b.n	8006748 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8006746:	2302      	movs	r3, #2
  }
}
 8006748:	0018      	movs	r0, r3
 800674a:	46bd      	mov	sp, r7
 800674c:	b008      	add	sp, #32
 800674e:	bd80      	pop	{r7, pc}
 8006750:	000001ff 	.word	0x000001ff

08006754 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006754:	b5b0      	push	{r4, r5, r7, lr}
 8006756:	b08e      	sub	sp, #56	@ 0x38
 8006758:	af00      	add	r7, sp, #0
 800675a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800675c:	231a      	movs	r3, #26
 800675e:	2218      	movs	r2, #24
 8006760:	189b      	adds	r3, r3, r2
 8006762:	19db      	adds	r3, r3, r7
 8006764:	2200      	movs	r2, #0
 8006766:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006768:	69fb      	ldr	r3, [r7, #28]
 800676a:	689a      	ldr	r2, [r3, #8]
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	431a      	orrs	r2, r3
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	431a      	orrs	r2, r3
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	4313      	orrs	r3, r2
 800677e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4ac3      	ldr	r2, [pc, #780]	@ (8006a94 <UART_SetConfig+0x340>)
 8006788:	4013      	ands	r3, r2
 800678a:	0019      	movs	r1, r3
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006792:	430a      	orrs	r2, r1
 8006794:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	4abe      	ldr	r2, [pc, #760]	@ (8006a98 <UART_SetConfig+0x344>)
 800679e:	4013      	ands	r3, r2
 80067a0:	0019      	movs	r1, r3
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	430a      	orrs	r2, r1
 80067ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067b4:	69fb      	ldr	r3, [r7, #28]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4ab8      	ldr	r2, [pc, #736]	@ (8006a9c <UART_SetConfig+0x348>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d004      	beq.n	80067c8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067c4:	4313      	orrs	r3, r2
 80067c6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	4ab4      	ldr	r2, [pc, #720]	@ (8006aa0 <UART_SetConfig+0x34c>)
 80067d0:	4013      	ands	r3, r2
 80067d2:	0019      	movs	r1, r3
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067da:	430a      	orrs	r2, r1
 80067dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4ab0      	ldr	r2, [pc, #704]	@ (8006aa4 <UART_SetConfig+0x350>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d131      	bne.n	800684c <UART_SetConfig+0xf8>
 80067e8:	4baf      	ldr	r3, [pc, #700]	@ (8006aa8 <UART_SetConfig+0x354>)
 80067ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ec:	2203      	movs	r2, #3
 80067ee:	4013      	ands	r3, r2
 80067f0:	2b03      	cmp	r3, #3
 80067f2:	d01d      	beq.n	8006830 <UART_SetConfig+0xdc>
 80067f4:	d823      	bhi.n	800683e <UART_SetConfig+0xea>
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d00c      	beq.n	8006814 <UART_SetConfig+0xc0>
 80067fa:	d820      	bhi.n	800683e <UART_SetConfig+0xea>
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <UART_SetConfig+0xb2>
 8006800:	2b01      	cmp	r3, #1
 8006802:	d00e      	beq.n	8006822 <UART_SetConfig+0xce>
 8006804:	e01b      	b.n	800683e <UART_SetConfig+0xea>
 8006806:	231b      	movs	r3, #27
 8006808:	2218      	movs	r2, #24
 800680a:	189b      	adds	r3, r3, r2
 800680c:	19db      	adds	r3, r3, r7
 800680e:	2201      	movs	r2, #1
 8006810:	701a      	strb	r2, [r3, #0]
 8006812:	e0b4      	b.n	800697e <UART_SetConfig+0x22a>
 8006814:	231b      	movs	r3, #27
 8006816:	2218      	movs	r2, #24
 8006818:	189b      	adds	r3, r3, r2
 800681a:	19db      	adds	r3, r3, r7
 800681c:	2202      	movs	r2, #2
 800681e:	701a      	strb	r2, [r3, #0]
 8006820:	e0ad      	b.n	800697e <UART_SetConfig+0x22a>
 8006822:	231b      	movs	r3, #27
 8006824:	2218      	movs	r2, #24
 8006826:	189b      	adds	r3, r3, r2
 8006828:	19db      	adds	r3, r3, r7
 800682a:	2204      	movs	r2, #4
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	e0a6      	b.n	800697e <UART_SetConfig+0x22a>
 8006830:	231b      	movs	r3, #27
 8006832:	2218      	movs	r2, #24
 8006834:	189b      	adds	r3, r3, r2
 8006836:	19db      	adds	r3, r3, r7
 8006838:	2208      	movs	r2, #8
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	e09f      	b.n	800697e <UART_SetConfig+0x22a>
 800683e:	231b      	movs	r3, #27
 8006840:	2218      	movs	r2, #24
 8006842:	189b      	adds	r3, r3, r2
 8006844:	19db      	adds	r3, r3, r7
 8006846:	2210      	movs	r2, #16
 8006848:	701a      	strb	r2, [r3, #0]
 800684a:	e098      	b.n	800697e <UART_SetConfig+0x22a>
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a96      	ldr	r2, [pc, #600]	@ (8006aac <UART_SetConfig+0x358>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d131      	bne.n	80068ba <UART_SetConfig+0x166>
 8006856:	4b94      	ldr	r3, [pc, #592]	@ (8006aa8 <UART_SetConfig+0x354>)
 8006858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800685a:	220c      	movs	r2, #12
 800685c:	4013      	ands	r3, r2
 800685e:	2b0c      	cmp	r3, #12
 8006860:	d01d      	beq.n	800689e <UART_SetConfig+0x14a>
 8006862:	d823      	bhi.n	80068ac <UART_SetConfig+0x158>
 8006864:	2b08      	cmp	r3, #8
 8006866:	d00c      	beq.n	8006882 <UART_SetConfig+0x12e>
 8006868:	d820      	bhi.n	80068ac <UART_SetConfig+0x158>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <UART_SetConfig+0x120>
 800686e:	2b04      	cmp	r3, #4
 8006870:	d00e      	beq.n	8006890 <UART_SetConfig+0x13c>
 8006872:	e01b      	b.n	80068ac <UART_SetConfig+0x158>
 8006874:	231b      	movs	r3, #27
 8006876:	2218      	movs	r2, #24
 8006878:	189b      	adds	r3, r3, r2
 800687a:	19db      	adds	r3, r3, r7
 800687c:	2200      	movs	r2, #0
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	e07d      	b.n	800697e <UART_SetConfig+0x22a>
 8006882:	231b      	movs	r3, #27
 8006884:	2218      	movs	r2, #24
 8006886:	189b      	adds	r3, r3, r2
 8006888:	19db      	adds	r3, r3, r7
 800688a:	2202      	movs	r2, #2
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	e076      	b.n	800697e <UART_SetConfig+0x22a>
 8006890:	231b      	movs	r3, #27
 8006892:	2218      	movs	r2, #24
 8006894:	189b      	adds	r3, r3, r2
 8006896:	19db      	adds	r3, r3, r7
 8006898:	2204      	movs	r2, #4
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	e06f      	b.n	800697e <UART_SetConfig+0x22a>
 800689e:	231b      	movs	r3, #27
 80068a0:	2218      	movs	r2, #24
 80068a2:	189b      	adds	r3, r3, r2
 80068a4:	19db      	adds	r3, r3, r7
 80068a6:	2208      	movs	r2, #8
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	e068      	b.n	800697e <UART_SetConfig+0x22a>
 80068ac:	231b      	movs	r3, #27
 80068ae:	2218      	movs	r2, #24
 80068b0:	189b      	adds	r3, r3, r2
 80068b2:	19db      	adds	r3, r3, r7
 80068b4:	2210      	movs	r2, #16
 80068b6:	701a      	strb	r2, [r3, #0]
 80068b8:	e061      	b.n	800697e <UART_SetConfig+0x22a>
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a7c      	ldr	r2, [pc, #496]	@ (8006ab0 <UART_SetConfig+0x35c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d106      	bne.n	80068d2 <UART_SetConfig+0x17e>
 80068c4:	231b      	movs	r3, #27
 80068c6:	2218      	movs	r2, #24
 80068c8:	189b      	adds	r3, r3, r2
 80068ca:	19db      	adds	r3, r3, r7
 80068cc:	2200      	movs	r2, #0
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	e055      	b.n	800697e <UART_SetConfig+0x22a>
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a77      	ldr	r2, [pc, #476]	@ (8006ab4 <UART_SetConfig+0x360>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d106      	bne.n	80068ea <UART_SetConfig+0x196>
 80068dc:	231b      	movs	r3, #27
 80068de:	2218      	movs	r2, #24
 80068e0:	189b      	adds	r3, r3, r2
 80068e2:	19db      	adds	r3, r3, r7
 80068e4:	2200      	movs	r2, #0
 80068e6:	701a      	strb	r2, [r3, #0]
 80068e8:	e049      	b.n	800697e <UART_SetConfig+0x22a>
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a6b      	ldr	r2, [pc, #428]	@ (8006a9c <UART_SetConfig+0x348>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d13e      	bne.n	8006972 <UART_SetConfig+0x21e>
 80068f4:	4b6c      	ldr	r3, [pc, #432]	@ (8006aa8 <UART_SetConfig+0x354>)
 80068f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068f8:	23c0      	movs	r3, #192	@ 0xc0
 80068fa:	011b      	lsls	r3, r3, #4
 80068fc:	4013      	ands	r3, r2
 80068fe:	22c0      	movs	r2, #192	@ 0xc0
 8006900:	0112      	lsls	r2, r2, #4
 8006902:	4293      	cmp	r3, r2
 8006904:	d027      	beq.n	8006956 <UART_SetConfig+0x202>
 8006906:	22c0      	movs	r2, #192	@ 0xc0
 8006908:	0112      	lsls	r2, r2, #4
 800690a:	4293      	cmp	r3, r2
 800690c:	d82a      	bhi.n	8006964 <UART_SetConfig+0x210>
 800690e:	2280      	movs	r2, #128	@ 0x80
 8006910:	0112      	lsls	r2, r2, #4
 8006912:	4293      	cmp	r3, r2
 8006914:	d011      	beq.n	800693a <UART_SetConfig+0x1e6>
 8006916:	2280      	movs	r2, #128	@ 0x80
 8006918:	0112      	lsls	r2, r2, #4
 800691a:	4293      	cmp	r3, r2
 800691c:	d822      	bhi.n	8006964 <UART_SetConfig+0x210>
 800691e:	2b00      	cmp	r3, #0
 8006920:	d004      	beq.n	800692c <UART_SetConfig+0x1d8>
 8006922:	2280      	movs	r2, #128	@ 0x80
 8006924:	00d2      	lsls	r2, r2, #3
 8006926:	4293      	cmp	r3, r2
 8006928:	d00e      	beq.n	8006948 <UART_SetConfig+0x1f4>
 800692a:	e01b      	b.n	8006964 <UART_SetConfig+0x210>
 800692c:	231b      	movs	r3, #27
 800692e:	2218      	movs	r2, #24
 8006930:	189b      	adds	r3, r3, r2
 8006932:	19db      	adds	r3, r3, r7
 8006934:	2200      	movs	r2, #0
 8006936:	701a      	strb	r2, [r3, #0]
 8006938:	e021      	b.n	800697e <UART_SetConfig+0x22a>
 800693a:	231b      	movs	r3, #27
 800693c:	2218      	movs	r2, #24
 800693e:	189b      	adds	r3, r3, r2
 8006940:	19db      	adds	r3, r3, r7
 8006942:	2202      	movs	r2, #2
 8006944:	701a      	strb	r2, [r3, #0]
 8006946:	e01a      	b.n	800697e <UART_SetConfig+0x22a>
 8006948:	231b      	movs	r3, #27
 800694a:	2218      	movs	r2, #24
 800694c:	189b      	adds	r3, r3, r2
 800694e:	19db      	adds	r3, r3, r7
 8006950:	2204      	movs	r2, #4
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	e013      	b.n	800697e <UART_SetConfig+0x22a>
 8006956:	231b      	movs	r3, #27
 8006958:	2218      	movs	r2, #24
 800695a:	189b      	adds	r3, r3, r2
 800695c:	19db      	adds	r3, r3, r7
 800695e:	2208      	movs	r2, #8
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	e00c      	b.n	800697e <UART_SetConfig+0x22a>
 8006964:	231b      	movs	r3, #27
 8006966:	2218      	movs	r2, #24
 8006968:	189b      	adds	r3, r3, r2
 800696a:	19db      	adds	r3, r3, r7
 800696c:	2210      	movs	r2, #16
 800696e:	701a      	strb	r2, [r3, #0]
 8006970:	e005      	b.n	800697e <UART_SetConfig+0x22a>
 8006972:	231b      	movs	r3, #27
 8006974:	2218      	movs	r2, #24
 8006976:	189b      	adds	r3, r3, r2
 8006978:	19db      	adds	r3, r3, r7
 800697a:	2210      	movs	r2, #16
 800697c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a46      	ldr	r2, [pc, #280]	@ (8006a9c <UART_SetConfig+0x348>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d000      	beq.n	800698a <UART_SetConfig+0x236>
 8006988:	e09a      	b.n	8006ac0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800698a:	231b      	movs	r3, #27
 800698c:	2218      	movs	r2, #24
 800698e:	189b      	adds	r3, r3, r2
 8006990:	19db      	adds	r3, r3, r7
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	2b08      	cmp	r3, #8
 8006996:	d01d      	beq.n	80069d4 <UART_SetConfig+0x280>
 8006998:	dc20      	bgt.n	80069dc <UART_SetConfig+0x288>
 800699a:	2b04      	cmp	r3, #4
 800699c:	d015      	beq.n	80069ca <UART_SetConfig+0x276>
 800699e:	dc1d      	bgt.n	80069dc <UART_SetConfig+0x288>
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d002      	beq.n	80069aa <UART_SetConfig+0x256>
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d005      	beq.n	80069b4 <UART_SetConfig+0x260>
 80069a8:	e018      	b.n	80069dc <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069aa:	f7fe ff85 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 80069ae:	0003      	movs	r3, r0
 80069b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80069b2:	e01c      	b.n	80069ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069b4:	4b3c      	ldr	r3, [pc, #240]	@ (8006aa8 <UART_SetConfig+0x354>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2210      	movs	r2, #16
 80069ba:	4013      	ands	r3, r2
 80069bc:	d002      	beq.n	80069c4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80069be:	4b3e      	ldr	r3, [pc, #248]	@ (8006ab8 <UART_SetConfig+0x364>)
 80069c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069c2:	e014      	b.n	80069ee <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80069c4:	4b3d      	ldr	r3, [pc, #244]	@ (8006abc <UART_SetConfig+0x368>)
 80069c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80069c8:	e011      	b.n	80069ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ca:	f7fe fee5 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 80069ce:	0003      	movs	r3, r0
 80069d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80069d2:	e00c      	b.n	80069ee <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069d4:	2380      	movs	r3, #128	@ 0x80
 80069d6:	021b      	lsls	r3, r3, #8
 80069d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80069da:	e008      	b.n	80069ee <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80069dc:	2300      	movs	r3, #0
 80069de:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80069e0:	231a      	movs	r3, #26
 80069e2:	2218      	movs	r2, #24
 80069e4:	189b      	adds	r3, r3, r2
 80069e6:	19db      	adds	r3, r3, r7
 80069e8:	2201      	movs	r2, #1
 80069ea:	701a      	strb	r2, [r3, #0]
        break;
 80069ec:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d100      	bne.n	80069f6 <UART_SetConfig+0x2a2>
 80069f4:	e133      	b.n	8006c5e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	0013      	movs	r3, r2
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	189b      	adds	r3, r3, r2
 8006a00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d305      	bcc.n	8006a12 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d906      	bls.n	8006a20 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8006a12:	231a      	movs	r3, #26
 8006a14:	2218      	movs	r2, #24
 8006a16:	189b      	adds	r3, r3, r2
 8006a18:	19db      	adds	r3, r3, r7
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	701a      	strb	r2, [r3, #0]
 8006a1e:	e11e      	b.n	8006c5e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a22:	613b      	str	r3, [r7, #16]
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	6939      	ldr	r1, [r7, #16]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	000b      	movs	r3, r1
 8006a2e:	0e1b      	lsrs	r3, r3, #24
 8006a30:	0010      	movs	r0, r2
 8006a32:	0205      	lsls	r5, r0, #8
 8006a34:	431d      	orrs	r5, r3
 8006a36:	000b      	movs	r3, r1
 8006a38:	021c      	lsls	r4, r3, #8
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	085b      	lsrs	r3, r3, #1
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	2300      	movs	r3, #0
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	68b8      	ldr	r0, [r7, #8]
 8006a48:	68f9      	ldr	r1, [r7, #12]
 8006a4a:	1900      	adds	r0, r0, r4
 8006a4c:	4169      	adcs	r1, r5
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	2300      	movs	r3, #0
 8006a56:	607b      	str	r3, [r7, #4]
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f7f9 fbf2 	bl	8000244 <__aeabi_uldivmod>
 8006a60:	0002      	movs	r2, r0
 8006a62:	000b      	movs	r3, r1
 8006a64:	0013      	movs	r3, r2
 8006a66:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a6a:	23c0      	movs	r3, #192	@ 0xc0
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d309      	bcc.n	8006a86 <UART_SetConfig+0x332>
 8006a72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a74:	2380      	movs	r3, #128	@ 0x80
 8006a76:	035b      	lsls	r3, r3, #13
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d204      	bcs.n	8006a86 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a82:	60da      	str	r2, [r3, #12]
 8006a84:	e0eb      	b.n	8006c5e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8006a86:	231a      	movs	r3, #26
 8006a88:	2218      	movs	r2, #24
 8006a8a:	189b      	adds	r3, r3, r2
 8006a8c:	19db      	adds	r3, r3, r7
 8006a8e:	2201      	movs	r2, #1
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	e0e4      	b.n	8006c5e <UART_SetConfig+0x50a>
 8006a94:	efff69f3 	.word	0xefff69f3
 8006a98:	ffffcfff 	.word	0xffffcfff
 8006a9c:	40004800 	.word	0x40004800
 8006aa0:	fffff4ff 	.word	0xfffff4ff
 8006aa4:	40013800 	.word	0x40013800
 8006aa8:	40021000 	.word	0x40021000
 8006aac:	40004400 	.word	0x40004400
 8006ab0:	40004c00 	.word	0x40004c00
 8006ab4:	40005000 	.word	0x40005000
 8006ab8:	003d0900 	.word	0x003d0900
 8006abc:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	69da      	ldr	r2, [r3, #28]
 8006ac4:	2380      	movs	r3, #128	@ 0x80
 8006ac6:	021b      	lsls	r3, r3, #8
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d000      	beq.n	8006ace <UART_SetConfig+0x37a>
 8006acc:	e070      	b.n	8006bb0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8006ace:	231b      	movs	r3, #27
 8006ad0:	2218      	movs	r2, #24
 8006ad2:	189b      	adds	r3, r3, r2
 8006ad4:	19db      	adds	r3, r3, r7
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b08      	cmp	r3, #8
 8006ada:	d822      	bhi.n	8006b22 <UART_SetConfig+0x3ce>
 8006adc:	009a      	lsls	r2, r3, #2
 8006ade:	4b67      	ldr	r3, [pc, #412]	@ (8006c7c <UART_SetConfig+0x528>)
 8006ae0:	18d3      	adds	r3, r2, r3
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae6:	f7fe fee7 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8006aea:	0003      	movs	r3, r0
 8006aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006aee:	e021      	b.n	8006b34 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006af0:	f7fe fef8 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8006af4:	0003      	movs	r3, r0
 8006af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006af8:	e01c      	b.n	8006b34 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006afa:	4b61      	ldr	r3, [pc, #388]	@ (8006c80 <UART_SetConfig+0x52c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2210      	movs	r2, #16
 8006b00:	4013      	ands	r3, r2
 8006b02:	d002      	beq.n	8006b0a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006b04:	4b5f      	ldr	r3, [pc, #380]	@ (8006c84 <UART_SetConfig+0x530>)
 8006b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b08:	e014      	b.n	8006b34 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006b0a:	4b5f      	ldr	r3, [pc, #380]	@ (8006c88 <UART_SetConfig+0x534>)
 8006b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b0e:	e011      	b.n	8006b34 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b10:	f7fe fe42 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8006b14:	0003      	movs	r3, r0
 8006b16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b18:	e00c      	b.n	8006b34 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b1a:	2380      	movs	r3, #128	@ 0x80
 8006b1c:	021b      	lsls	r3, r3, #8
 8006b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b20:	e008      	b.n	8006b34 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006b26:	231a      	movs	r3, #26
 8006b28:	2218      	movs	r2, #24
 8006b2a:	189b      	adds	r3, r3, r2
 8006b2c:	19db      	adds	r3, r3, r7
 8006b2e:	2201      	movs	r2, #1
 8006b30:	701a      	strb	r2, [r3, #0]
        break;
 8006b32:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d100      	bne.n	8006b3c <UART_SetConfig+0x3e8>
 8006b3a:	e090      	b.n	8006c5e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3e:	005a      	lsls	r2, r3, #1
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	085b      	lsrs	r3, r3, #1
 8006b46:	18d2      	adds	r2, r2, r3
 8006b48:	69fb      	ldr	r3, [r7, #28]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	0019      	movs	r1, r3
 8006b4e:	0010      	movs	r0, r2
 8006b50:	f7f9 faec 	bl	800012c <__udivsi3>
 8006b54:	0003      	movs	r3, r0
 8006b56:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5a:	2b0f      	cmp	r3, #15
 8006b5c:	d921      	bls.n	8006ba2 <UART_SetConfig+0x44e>
 8006b5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b60:	2380      	movs	r3, #128	@ 0x80
 8006b62:	025b      	lsls	r3, r3, #9
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d21c      	bcs.n	8006ba2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	200e      	movs	r0, #14
 8006b6e:	2418      	movs	r4, #24
 8006b70:	1903      	adds	r3, r0, r4
 8006b72:	19db      	adds	r3, r3, r7
 8006b74:	210f      	movs	r1, #15
 8006b76:	438a      	bics	r2, r1
 8006b78:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7c:	085b      	lsrs	r3, r3, #1
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	2207      	movs	r2, #7
 8006b82:	4013      	ands	r3, r2
 8006b84:	b299      	uxth	r1, r3
 8006b86:	1903      	adds	r3, r0, r4
 8006b88:	19db      	adds	r3, r3, r7
 8006b8a:	1902      	adds	r2, r0, r4
 8006b8c:	19d2      	adds	r2, r2, r7
 8006b8e:	8812      	ldrh	r2, [r2, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	1902      	adds	r2, r0, r4
 8006b9a:	19d2      	adds	r2, r2, r7
 8006b9c:	8812      	ldrh	r2, [r2, #0]
 8006b9e:	60da      	str	r2, [r3, #12]
 8006ba0:	e05d      	b.n	8006c5e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006ba2:	231a      	movs	r3, #26
 8006ba4:	2218      	movs	r2, #24
 8006ba6:	189b      	adds	r3, r3, r2
 8006ba8:	19db      	adds	r3, r3, r7
 8006baa:	2201      	movs	r2, #1
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	e056      	b.n	8006c5e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bb0:	231b      	movs	r3, #27
 8006bb2:	2218      	movs	r2, #24
 8006bb4:	189b      	adds	r3, r3, r2
 8006bb6:	19db      	adds	r3, r3, r7
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d822      	bhi.n	8006c04 <UART_SetConfig+0x4b0>
 8006bbe:	009a      	lsls	r2, r3, #2
 8006bc0:	4b32      	ldr	r3, [pc, #200]	@ (8006c8c <UART_SetConfig+0x538>)
 8006bc2:	18d3      	adds	r3, r2, r3
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bc8:	f7fe fe76 	bl	80058b8 <HAL_RCC_GetPCLK1Freq>
 8006bcc:	0003      	movs	r3, r0
 8006bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006bd0:	e021      	b.n	8006c16 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bd2:	f7fe fe87 	bl	80058e4 <HAL_RCC_GetPCLK2Freq>
 8006bd6:	0003      	movs	r3, r0
 8006bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006bda:	e01c      	b.n	8006c16 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bdc:	4b28      	ldr	r3, [pc, #160]	@ (8006c80 <UART_SetConfig+0x52c>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2210      	movs	r2, #16
 8006be2:	4013      	ands	r3, r2
 8006be4:	d002      	beq.n	8006bec <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006be6:	4b27      	ldr	r3, [pc, #156]	@ (8006c84 <UART_SetConfig+0x530>)
 8006be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bea:	e014      	b.n	8006c16 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006bec:	4b26      	ldr	r3, [pc, #152]	@ (8006c88 <UART_SetConfig+0x534>)
 8006bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006bf0:	e011      	b.n	8006c16 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bf2:	f7fe fdd1 	bl	8005798 <HAL_RCC_GetSysClockFreq>
 8006bf6:	0003      	movs	r3, r0
 8006bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006bfa:	e00c      	b.n	8006c16 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bfc:	2380      	movs	r3, #128	@ 0x80
 8006bfe:	021b      	lsls	r3, r3, #8
 8006c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006c02:	e008      	b.n	8006c16 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006c04:	2300      	movs	r3, #0
 8006c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006c08:	231a      	movs	r3, #26
 8006c0a:	2218      	movs	r2, #24
 8006c0c:	189b      	adds	r3, r3, r2
 8006c0e:	19db      	adds	r3, r3, r7
 8006c10:	2201      	movs	r2, #1
 8006c12:	701a      	strb	r2, [r3, #0]
        break;
 8006c14:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d020      	beq.n	8006c5e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	085a      	lsrs	r2, r3, #1
 8006c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c24:	18d2      	adds	r2, r2, r3
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	0019      	movs	r1, r3
 8006c2c:	0010      	movs	r0, r2
 8006c2e:	f7f9 fa7d 	bl	800012c <__udivsi3>
 8006c32:	0003      	movs	r3, r0
 8006c34:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c38:	2b0f      	cmp	r3, #15
 8006c3a:	d90a      	bls.n	8006c52 <UART_SetConfig+0x4fe>
 8006c3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c3e:	2380      	movs	r3, #128	@ 0x80
 8006c40:	025b      	lsls	r3, r3, #9
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d205      	bcs.n	8006c52 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	60da      	str	r2, [r3, #12]
 8006c50:	e005      	b.n	8006c5e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006c52:	231a      	movs	r3, #26
 8006c54:	2218      	movs	r2, #24
 8006c56:	189b      	adds	r3, r3, r2
 8006c58:	19db      	adds	r3, r3, r7
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	2200      	movs	r2, #0
 8006c62:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	2200      	movs	r2, #0
 8006c68:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006c6a:	231a      	movs	r3, #26
 8006c6c:	2218      	movs	r2, #24
 8006c6e:	189b      	adds	r3, r3, r2
 8006c70:	19db      	adds	r3, r3, r7
 8006c72:	781b      	ldrb	r3, [r3, #0]
}
 8006c74:	0018      	movs	r0, r3
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b00e      	add	sp, #56	@ 0x38
 8006c7a:	bdb0      	pop	{r4, r5, r7, pc}
 8006c7c:	08008c48 	.word	0x08008c48
 8006c80:	40021000 	.word	0x40021000
 8006c84:	003d0900 	.word	0x003d0900
 8006c88:	00f42400 	.word	0x00f42400
 8006c8c:	08008c6c 	.word	0x08008c6c

08006c90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9c:	2208      	movs	r2, #8
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	d00b      	beq.n	8006cba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	4a4a      	ldr	r2, [pc, #296]	@ (8006dd4 <UART_AdvFeatureConfig+0x144>)
 8006caa:	4013      	ands	r3, r2
 8006cac:	0019      	movs	r1, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	d00b      	beq.n	8006cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	4a43      	ldr	r2, [pc, #268]	@ (8006dd8 <UART_AdvFeatureConfig+0x148>)
 8006ccc:	4013      	ands	r3, r2
 8006cce:	0019      	movs	r1, r3
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	d00b      	beq.n	8006cfe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	4a3b      	ldr	r2, [pc, #236]	@ (8006ddc <UART_AdvFeatureConfig+0x14c>)
 8006cee:	4013      	ands	r3, r2
 8006cf0:	0019      	movs	r1, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d02:	2204      	movs	r2, #4
 8006d04:	4013      	ands	r3, r2
 8006d06:	d00b      	beq.n	8006d20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	4a34      	ldr	r2, [pc, #208]	@ (8006de0 <UART_AdvFeatureConfig+0x150>)
 8006d10:	4013      	ands	r3, r2
 8006d12:	0019      	movs	r1, r3
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	430a      	orrs	r2, r1
 8006d1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d24:	2210      	movs	r2, #16
 8006d26:	4013      	ands	r3, r2
 8006d28:	d00b      	beq.n	8006d42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	4a2c      	ldr	r2, [pc, #176]	@ (8006de4 <UART_AdvFeatureConfig+0x154>)
 8006d32:	4013      	ands	r3, r2
 8006d34:	0019      	movs	r1, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d46:	2220      	movs	r2, #32
 8006d48:	4013      	ands	r3, r2
 8006d4a:	d00b      	beq.n	8006d64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	4a25      	ldr	r2, [pc, #148]	@ (8006de8 <UART_AdvFeatureConfig+0x158>)
 8006d54:	4013      	ands	r3, r2
 8006d56:	0019      	movs	r1, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d68:	2240      	movs	r2, #64	@ 0x40
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	d01d      	beq.n	8006daa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	4a1d      	ldr	r2, [pc, #116]	@ (8006dec <UART_AdvFeatureConfig+0x15c>)
 8006d76:	4013      	ands	r3, r2
 8006d78:	0019      	movs	r1, r3
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d8a:	2380      	movs	r3, #128	@ 0x80
 8006d8c:	035b      	lsls	r3, r3, #13
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d10b      	bne.n	8006daa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	4a15      	ldr	r2, [pc, #84]	@ (8006df0 <UART_AdvFeatureConfig+0x160>)
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	0019      	movs	r1, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dae:	2280      	movs	r2, #128	@ 0x80
 8006db0:	4013      	ands	r3, r2
 8006db2:	d00b      	beq.n	8006dcc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	4a0e      	ldr	r2, [pc, #56]	@ (8006df4 <UART_AdvFeatureConfig+0x164>)
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	0019      	movs	r1, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	605a      	str	r2, [r3, #4]
  }
}
 8006dcc:	46c0      	nop			@ (mov r8, r8)
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	b002      	add	sp, #8
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	ffff7fff 	.word	0xffff7fff
 8006dd8:	fffdffff 	.word	0xfffdffff
 8006ddc:	fffeffff 	.word	0xfffeffff
 8006de0:	fffbffff 	.word	0xfffbffff
 8006de4:	ffffefff 	.word	0xffffefff
 8006de8:	ffffdfff 	.word	0xffffdfff
 8006dec:	ffefffff 	.word	0xffefffff
 8006df0:	ff9fffff 	.word	0xff9fffff
 8006df4:	fff7ffff 	.word	0xfff7ffff

08006df8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b092      	sub	sp, #72	@ 0x48
 8006dfc:	af02      	add	r7, sp, #8
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2284      	movs	r2, #132	@ 0x84
 8006e04:	2100      	movs	r1, #0
 8006e06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006e08:	f7fb fe2a 	bl	8002a60 <HAL_GetTick>
 8006e0c:	0003      	movs	r3, r0
 8006e0e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2208      	movs	r2, #8
 8006e18:	4013      	ands	r3, r2
 8006e1a:	2b08      	cmp	r3, #8
 8006e1c:	d12c      	bne.n	8006e78 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e20:	2280      	movs	r2, #128	@ 0x80
 8006e22:	0391      	lsls	r1, r2, #14
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	4a46      	ldr	r2, [pc, #280]	@ (8006f40 <UART_CheckIdleState+0x148>)
 8006e28:	9200      	str	r2, [sp, #0]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f000 f88c 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 8006e30:	1e03      	subs	r3, r0, #0
 8006e32:	d021      	beq.n	8006e78 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e34:	f3ef 8310 	mrs	r3, PRIMASK
 8006e38:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e3e:	2301      	movs	r3, #1
 8006e40:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e44:	f383 8810 	msr	PRIMASK, r3
}
 8006e48:	46c0      	nop			@ (mov r8, r8)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2180      	movs	r1, #128	@ 0x80
 8006e56:	438a      	bics	r2, r1
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e60:	f383 8810 	msr	PRIMASK, r3
}
 8006e64:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2220      	movs	r2, #32
 8006e6a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2278      	movs	r2, #120	@ 0x78
 8006e70:	2100      	movs	r1, #0
 8006e72:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e05f      	b.n	8006f38 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2204      	movs	r2, #4
 8006e80:	4013      	ands	r3, r2
 8006e82:	2b04      	cmp	r3, #4
 8006e84:	d146      	bne.n	8006f14 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e88:	2280      	movs	r2, #128	@ 0x80
 8006e8a:	03d1      	lsls	r1, r2, #15
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	4a2c      	ldr	r2, [pc, #176]	@ (8006f40 <UART_CheckIdleState+0x148>)
 8006e90:	9200      	str	r2, [sp, #0]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f000 f858 	bl	8006f48 <UART_WaitOnFlagUntilTimeout>
 8006e98:	1e03      	subs	r3, r0, #0
 8006e9a:	d03b      	beq.n	8006f14 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea0:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f383 8810 	msr	PRIMASK, r3
}
 8006eb0:	46c0      	nop			@ (mov r8, r8)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4921      	ldr	r1, [pc, #132]	@ (8006f44 <UART_CheckIdleState+0x14c>)
 8006ebe:	400a      	ands	r2, r1
 8006ec0:	601a      	str	r2, [r3, #0]
 8006ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f383 8810 	msr	PRIMASK, r3
}
 8006ecc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ece:	f3ef 8310 	mrs	r3, PRIMASK
 8006ed2:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ed4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ed8:	2301      	movs	r3, #1
 8006eda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	f383 8810 	msr	PRIMASK, r3
}
 8006ee2:	46c0      	nop			@ (mov r8, r8)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	689a      	ldr	r2, [r3, #8]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2101      	movs	r1, #1
 8006ef0:	438a      	bics	r2, r1
 8006ef2:	609a      	str	r2, [r3, #8]
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ef6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	f383 8810 	msr	PRIMASK, r3
}
 8006efe:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2280      	movs	r2, #128	@ 0x80
 8006f04:	2120      	movs	r1, #32
 8006f06:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2278      	movs	r2, #120	@ 0x78
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e011      	b.n	8006f38 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2220      	movs	r2, #32
 8006f18:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2280      	movs	r2, #128	@ 0x80
 8006f1e:	2120      	movs	r1, #32
 8006f20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2278      	movs	r2, #120	@ 0x78
 8006f32:	2100      	movs	r1, #0
 8006f34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	0018      	movs	r0, r3
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	b010      	add	sp, #64	@ 0x40
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	01ffffff 	.word	0x01ffffff
 8006f44:	fffffedf 	.word	0xfffffedf

08006f48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	603b      	str	r3, [r7, #0]
 8006f54:	1dfb      	adds	r3, r7, #7
 8006f56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f58:	e051      	b.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	d04e      	beq.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f60:	f7fb fd7e 	bl	8002a60 <HAL_GetTick>
 8006f64:	0002      	movs	r2, r0
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d302      	bcc.n	8006f76 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e051      	b.n	800701e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2204      	movs	r2, #4
 8006f82:	4013      	ands	r3, r2
 8006f84:	d03b      	beq.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb6>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b80      	cmp	r3, #128	@ 0x80
 8006f8a:	d038      	beq.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb6>
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	2b40      	cmp	r3, #64	@ 0x40
 8006f90:	d035      	beq.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	2208      	movs	r2, #8
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d111      	bne.n	8006fc4 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2208      	movs	r2, #8
 8006fa6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	0018      	movs	r0, r3
 8006fac:	f000 f83c 	bl	8007028 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2284      	movs	r2, #132	@ 0x84
 8006fb4:	2108      	movs	r1, #8
 8006fb6:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2278      	movs	r2, #120	@ 0x78
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e02c      	b.n	800701e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	69da      	ldr	r2, [r3, #28]
 8006fca:	2380      	movs	r3, #128	@ 0x80
 8006fcc:	011b      	lsls	r3, r3, #4
 8006fce:	401a      	ands	r2, r3
 8006fd0:	2380      	movs	r3, #128	@ 0x80
 8006fd2:	011b      	lsls	r3, r3, #4
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d112      	bne.n	8006ffe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2280      	movs	r2, #128	@ 0x80
 8006fde:	0112      	lsls	r2, r2, #4
 8006fe0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	0018      	movs	r0, r3
 8006fe6:	f000 f81f 	bl	8007028 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2284      	movs	r2, #132	@ 0x84
 8006fee:	2120      	movs	r1, #32
 8006ff0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2278      	movs	r2, #120	@ 0x78
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006ffa:	2303      	movs	r3, #3
 8006ffc:	e00f      	b.n	800701e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69db      	ldr	r3, [r3, #28]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	4013      	ands	r3, r2
 8007008:	68ba      	ldr	r2, [r7, #8]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	425a      	negs	r2, r3
 800700e:	4153      	adcs	r3, r2
 8007010:	b2db      	uxtb	r3, r3
 8007012:	001a      	movs	r2, r3
 8007014:	1dfb      	adds	r3, r7, #7
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	429a      	cmp	r2, r3
 800701a:	d09e      	beq.n	8006f5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	0018      	movs	r0, r3
 8007020:	46bd      	mov	sp, r7
 8007022:	b004      	add	sp, #16
 8007024:	bd80      	pop	{r7, pc}
	...

08007028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08e      	sub	sp, #56	@ 0x38
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007030:	f3ef 8310 	mrs	r3, PRIMASK
 8007034:	617b      	str	r3, [r7, #20]
  return(result);
 8007036:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007038:	637b      	str	r3, [r7, #52]	@ 0x34
 800703a:	2301      	movs	r3, #1
 800703c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	f383 8810 	msr	PRIMASK, r3
}
 8007044:	46c0      	nop			@ (mov r8, r8)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4926      	ldr	r1, [pc, #152]	@ (80070ec <UART_EndRxTransfer+0xc4>)
 8007052:	400a      	ands	r2, r1
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007058:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800705a:	69fb      	ldr	r3, [r7, #28]
 800705c:	f383 8810 	msr	PRIMASK, r3
}
 8007060:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007062:	f3ef 8310 	mrs	r3, PRIMASK
 8007066:	623b      	str	r3, [r7, #32]
  return(result);
 8007068:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800706a:	633b      	str	r3, [r7, #48]	@ 0x30
 800706c:	2301      	movs	r3, #1
 800706e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007072:	f383 8810 	msr	PRIMASK, r3
}
 8007076:	46c0      	nop			@ (mov r8, r8)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689a      	ldr	r2, [r3, #8]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2101      	movs	r1, #1
 8007084:	438a      	bics	r2, r1
 8007086:	609a      	str	r2, [r3, #8]
 8007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800708c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708e:	f383 8810 	msr	PRIMASK, r3
}
 8007092:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007098:	2b01      	cmp	r3, #1
 800709a:	d118      	bne.n	80070ce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800709c:	f3ef 8310 	mrs	r3, PRIMASK
 80070a0:	60bb      	str	r3, [r7, #8]
  return(result);
 80070a2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070a6:	2301      	movs	r3, #1
 80070a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f383 8810 	msr	PRIMASK, r3
}
 80070b0:	46c0      	nop			@ (mov r8, r8)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2110      	movs	r1, #16
 80070be:	438a      	bics	r2, r1
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f383 8810 	msr	PRIMASK, r3
}
 80070cc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2280      	movs	r2, #128	@ 0x80
 80070d2:	2120      	movs	r1, #32
 80070d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80070e2:	46c0      	nop			@ (mov r8, r8)
 80070e4:	46bd      	mov	sp, r7
 80070e6:	b00e      	add	sp, #56	@ 0x38
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	46c0      	nop			@ (mov r8, r8)
 80070ec:	fffffedf 	.word	0xfffffedf

080070f0 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b088      	sub	sp, #32
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	603b      	str	r3, [r7, #0]
 80070fc:	1dbb      	adds	r3, r7, #6
 80070fe:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2280      	movs	r2, #128	@ 0x80
 8007104:	589b      	ldr	r3, [r3, r2]
 8007106:	2b20      	cmp	r3, #32
 8007108:	d000      	beq.n	800710c <HAL_UARTEx_ReceiveToIdle+0x1c>
 800710a:	e109      	b.n	8007320 <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_UARTEx_ReceiveToIdle+0x2a>
 8007112:	1dbb      	adds	r3, r7, #6
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e101      	b.n	8007322 <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	2380      	movs	r3, #128	@ 0x80
 8007124:	015b      	lsls	r3, r3, #5
 8007126:	429a      	cmp	r2, r3
 8007128:	d109      	bne.n	800713e <HAL_UARTEx_ReceiveToIdle+0x4e>
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d105      	bne.n	800713e <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	2201      	movs	r2, #1
 8007136:	4013      	ands	r3, r2
 8007138:	d001      	beq.n	800713e <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e0f1      	b.n	8007322 <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2284      	movs	r2, #132	@ 0x84
 8007142:	2100      	movs	r1, #0
 8007144:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2280      	movs	r2, #128	@ 0x80
 800714a:	2122      	movs	r1, #34	@ 0x22
 800714c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2201      	movs	r2, #1
 8007152:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800715a:	f7fb fc81 	bl	8002a60 <HAL_GetTick>
 800715e:	0003      	movs	r3, r0
 8007160:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	1dba      	adds	r2, r7, #6
 8007166:	2158      	movs	r1, #88	@ 0x58
 8007168:	8812      	ldrh	r2, [r2, #0]
 800716a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	1dba      	adds	r2, r7, #6
 8007170:	215a      	movs	r1, #90	@ 0x5a
 8007172:	8812      	ldrh	r2, [r2, #0]
 8007174:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689a      	ldr	r2, [r3, #8]
 800717a:	2380      	movs	r3, #128	@ 0x80
 800717c:	015b      	lsls	r3, r3, #5
 800717e:	429a      	cmp	r2, r3
 8007180:	d10d      	bne.n	800719e <HAL_UARTEx_ReceiveToIdle+0xae>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d104      	bne.n	8007194 <HAL_UARTEx_ReceiveToIdle+0xa4>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	225c      	movs	r2, #92	@ 0x5c
 800718e:	4967      	ldr	r1, [pc, #412]	@ (800732c <HAL_UARTEx_ReceiveToIdle+0x23c>)
 8007190:	5299      	strh	r1, [r3, r2]
 8007192:	e02e      	b.n	80071f2 <HAL_UARTEx_ReceiveToIdle+0x102>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	225c      	movs	r2, #92	@ 0x5c
 8007198:	21ff      	movs	r1, #255	@ 0xff
 800719a:	5299      	strh	r1, [r3, r2]
 800719c:	e029      	b.n	80071f2 <HAL_UARTEx_ReceiveToIdle+0x102>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10d      	bne.n	80071c2 <HAL_UARTEx_ReceiveToIdle+0xd2>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <HAL_UARTEx_ReceiveToIdle+0xc8>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	225c      	movs	r2, #92	@ 0x5c
 80071b2:	21ff      	movs	r1, #255	@ 0xff
 80071b4:	5299      	strh	r1, [r3, r2]
 80071b6:	e01c      	b.n	80071f2 <HAL_UARTEx_ReceiveToIdle+0x102>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	225c      	movs	r2, #92	@ 0x5c
 80071bc:	217f      	movs	r1, #127	@ 0x7f
 80071be:	5299      	strh	r1, [r3, r2]
 80071c0:	e017      	b.n	80071f2 <HAL_UARTEx_ReceiveToIdle+0x102>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	689a      	ldr	r2, [r3, #8]
 80071c6:	2380      	movs	r3, #128	@ 0x80
 80071c8:	055b      	lsls	r3, r3, #21
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d10d      	bne.n	80071ea <HAL_UARTEx_ReceiveToIdle+0xfa>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	691b      	ldr	r3, [r3, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d104      	bne.n	80071e0 <HAL_UARTEx_ReceiveToIdle+0xf0>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	225c      	movs	r2, #92	@ 0x5c
 80071da:	217f      	movs	r1, #127	@ 0x7f
 80071dc:	5299      	strh	r1, [r3, r2]
 80071de:	e008      	b.n	80071f2 <HAL_UARTEx_ReceiveToIdle+0x102>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	225c      	movs	r2, #92	@ 0x5c
 80071e4:	213f      	movs	r1, #63	@ 0x3f
 80071e6:	5299      	strh	r1, [r3, r2]
 80071e8:	e003      	b.n	80071f2 <HAL_UARTEx_ReceiveToIdle+0x102>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	225c      	movs	r2, #92	@ 0x5c
 80071ee:	2100      	movs	r1, #0
 80071f0:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80071f2:	2312      	movs	r3, #18
 80071f4:	18fb      	adds	r3, r7, r3
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	215c      	movs	r1, #92	@ 0x5c
 80071fa:	5a52      	ldrh	r2, [r2, r1]
 80071fc:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	689a      	ldr	r2, [r3, #8]
 8007202:	2380      	movs	r3, #128	@ 0x80
 8007204:	015b      	lsls	r3, r3, #5
 8007206:	429a      	cmp	r2, r3
 8007208:	d108      	bne.n	800721c <HAL_UARTEx_ReceiveToIdle+0x12c>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d104      	bne.n	800721c <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 8007212:	2300      	movs	r3, #0
 8007214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	e003      	b.n	8007224 <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007220:	2300      	movs	r3, #0
 8007222:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2200      	movs	r2, #0
 8007228:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800722a:	e062      	b.n	80072f2 <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	2210      	movs	r2, #16
 8007234:	4013      	ands	r3, r2
 8007236:	2b10      	cmp	r3, #16
 8007238:	d110      	bne.n	800725c <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2210      	movs	r2, #16
 8007240:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d008      	beq.n	800725c <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2202      	movs	r2, #2
 800724e:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2280      	movs	r2, #128	@ 0x80
 8007254:	2120      	movs	r1, #32
 8007256:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 8007258:	2300      	movs	r3, #0
 800725a:	e062      	b.n	8007322 <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	69db      	ldr	r3, [r3, #28]
 8007262:	2220      	movs	r2, #32
 8007264:	4013      	ands	r3, r2
 8007266:	2b20      	cmp	r3, #32
 8007268:	d12f      	bne.n	80072ca <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d10e      	bne.n	800728e <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007276:	b29b      	uxth	r3, r3
 8007278:	2212      	movs	r2, #18
 800727a:	18ba      	adds	r2, r7, r2
 800727c:	8812      	ldrh	r2, [r2, #0]
 800727e:	4013      	ands	r3, r2
 8007280:	b29a      	uxth	r2, r3
 8007282:	69bb      	ldr	r3, [r7, #24]
 8007284:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	3302      	adds	r3, #2
 800728a:	61bb      	str	r3, [r7, #24]
 800728c:	e00e      	b.n	80072ac <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2212      	movs	r2, #18
 8007298:	18ba      	adds	r2, r7, r2
 800729a:	8812      	ldrh	r2, [r2, #0]
 800729c:	b2d2      	uxtb	r2, r2
 800729e:	4013      	ands	r3, r2
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 80072a6:	69fb      	ldr	r3, [r7, #28]
 80072a8:	3301      	adds	r3, #1
 80072aa:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	881b      	ldrh	r3, [r3, #0]
 80072b0:	3301      	adds	r3, #1
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	225a      	movs	r2, #90	@ 0x5a
 80072bc:	5a9b      	ldrh	r3, [r3, r2]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b299      	uxth	r1, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	225a      	movs	r2, #90	@ 0x5a
 80072c8:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80072ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072cc:	3301      	adds	r3, #1
 80072ce:	d010      	beq.n	80072f2 <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80072d0:	f7fb fbc6 	bl	8002a60 <HAL_GetTick>
 80072d4:	0002      	movs	r2, r0
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072dc:	429a      	cmp	r2, r3
 80072de:	d302      	bcc.n	80072e6 <HAL_UARTEx_ReceiveToIdle+0x1f6>
 80072e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d105      	bne.n	80072f2 <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2280      	movs	r2, #128	@ 0x80
 80072ea:	2120      	movs	r1, #32
 80072ec:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80072ee:	2303      	movs	r3, #3
 80072f0:	e017      	b.n	8007322 <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	225a      	movs	r2, #90	@ 0x5a
 80072f6:	5a9b      	ldrh	r3, [r3, r2]
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d196      	bne.n	800722c <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2258      	movs	r2, #88	@ 0x58
 8007302:	5a9a      	ldrh	r2, [r3, r2]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	215a      	movs	r1, #90	@ 0x5a
 8007308:	5a5b      	ldrh	r3, [r3, r1]
 800730a:	b29b      	uxth	r3, r3
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	b29a      	uxth	r2, r3
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2280      	movs	r2, #128	@ 0x80
 8007318:	2120      	movs	r1, #32
 800731a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800731c:	2300      	movs	r3, #0
 800731e:	e000      	b.n	8007322 <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 8007320:	2302      	movs	r3, #2
  }
}
 8007322:	0018      	movs	r0, r3
 8007324:	46bd      	mov	sp, r7
 8007326:	b008      	add	sp, #32
 8007328:	bd80      	pop	{r7, pc}
 800732a:	46c0      	nop			@ (mov r8, r8)
 800732c:	000001ff 	.word	0x000001ff

08007330 <_strtol_l.isra.0>:
 8007330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007332:	b085      	sub	sp, #20
 8007334:	0017      	movs	r7, r2
 8007336:	001e      	movs	r6, r3
 8007338:	9003      	str	r0, [sp, #12]
 800733a:	9101      	str	r1, [sp, #4]
 800733c:	2b24      	cmp	r3, #36	@ 0x24
 800733e:	d823      	bhi.n	8007388 <_strtol_l.isra.0+0x58>
 8007340:	000c      	movs	r4, r1
 8007342:	2b01      	cmp	r3, #1
 8007344:	d020      	beq.n	8007388 <_strtol_l.isra.0+0x58>
 8007346:	4b3d      	ldr	r3, [pc, #244]	@ (800743c <_strtol_l.isra.0+0x10c>)
 8007348:	2208      	movs	r2, #8
 800734a:	469c      	mov	ip, r3
 800734c:	0023      	movs	r3, r4
 800734e:	4661      	mov	r1, ip
 8007350:	781d      	ldrb	r5, [r3, #0]
 8007352:	3401      	adds	r4, #1
 8007354:	5d48      	ldrb	r0, [r1, r5]
 8007356:	0001      	movs	r1, r0
 8007358:	4011      	ands	r1, r2
 800735a:	4210      	tst	r0, r2
 800735c:	d1f6      	bne.n	800734c <_strtol_l.isra.0+0x1c>
 800735e:	2d2d      	cmp	r5, #45	@ 0x2d
 8007360:	d119      	bne.n	8007396 <_strtol_l.isra.0+0x66>
 8007362:	7825      	ldrb	r5, [r4, #0]
 8007364:	1c9c      	adds	r4, r3, #2
 8007366:	2301      	movs	r3, #1
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	2210      	movs	r2, #16
 800736c:	0033      	movs	r3, r6
 800736e:	4393      	bics	r3, r2
 8007370:	d11d      	bne.n	80073ae <_strtol_l.isra.0+0x7e>
 8007372:	2d30      	cmp	r5, #48	@ 0x30
 8007374:	d115      	bne.n	80073a2 <_strtol_l.isra.0+0x72>
 8007376:	2120      	movs	r1, #32
 8007378:	7823      	ldrb	r3, [r4, #0]
 800737a:	438b      	bics	r3, r1
 800737c:	2b58      	cmp	r3, #88	@ 0x58
 800737e:	d110      	bne.n	80073a2 <_strtol_l.isra.0+0x72>
 8007380:	7865      	ldrb	r5, [r4, #1]
 8007382:	3402      	adds	r4, #2
 8007384:	2610      	movs	r6, #16
 8007386:	e012      	b.n	80073ae <_strtol_l.isra.0+0x7e>
 8007388:	f000 f8f6 	bl	8007578 <__errno>
 800738c:	2316      	movs	r3, #22
 800738e:	6003      	str	r3, [r0, #0]
 8007390:	2000      	movs	r0, #0
 8007392:	b005      	add	sp, #20
 8007394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007396:	9100      	str	r1, [sp, #0]
 8007398:	2d2b      	cmp	r5, #43	@ 0x2b
 800739a:	d1e6      	bne.n	800736a <_strtol_l.isra.0+0x3a>
 800739c:	7825      	ldrb	r5, [r4, #0]
 800739e:	1c9c      	adds	r4, r3, #2
 80073a0:	e7e3      	b.n	800736a <_strtol_l.isra.0+0x3a>
 80073a2:	2e00      	cmp	r6, #0
 80073a4:	d1ee      	bne.n	8007384 <_strtol_l.isra.0+0x54>
 80073a6:	360a      	adds	r6, #10
 80073a8:	2d30      	cmp	r5, #48	@ 0x30
 80073aa:	d100      	bne.n	80073ae <_strtol_l.isra.0+0x7e>
 80073ac:	3e02      	subs	r6, #2
 80073ae:	4a24      	ldr	r2, [pc, #144]	@ (8007440 <_strtol_l.isra.0+0x110>)
 80073b0:	9b00      	ldr	r3, [sp, #0]
 80073b2:	4694      	mov	ip, r2
 80073b4:	4463      	add	r3, ip
 80073b6:	0031      	movs	r1, r6
 80073b8:	0018      	movs	r0, r3
 80073ba:	9302      	str	r3, [sp, #8]
 80073bc:	f7f8 ff3c 	bl	8000238 <__aeabi_uidivmod>
 80073c0:	2200      	movs	r2, #0
 80073c2:	4684      	mov	ip, r0
 80073c4:	0010      	movs	r0, r2
 80073c6:	002b      	movs	r3, r5
 80073c8:	3b30      	subs	r3, #48	@ 0x30
 80073ca:	2b09      	cmp	r3, #9
 80073cc:	d811      	bhi.n	80073f2 <_strtol_l.isra.0+0xc2>
 80073ce:	001d      	movs	r5, r3
 80073d0:	42ae      	cmp	r6, r5
 80073d2:	dd1d      	ble.n	8007410 <_strtol_l.isra.0+0xe0>
 80073d4:	1c53      	adds	r3, r2, #1
 80073d6:	d009      	beq.n	80073ec <_strtol_l.isra.0+0xbc>
 80073d8:	2201      	movs	r2, #1
 80073da:	4252      	negs	r2, r2
 80073dc:	4584      	cmp	ip, r0
 80073de:	d305      	bcc.n	80073ec <_strtol_l.isra.0+0xbc>
 80073e0:	d101      	bne.n	80073e6 <_strtol_l.isra.0+0xb6>
 80073e2:	42a9      	cmp	r1, r5
 80073e4:	db11      	blt.n	800740a <_strtol_l.isra.0+0xda>
 80073e6:	2201      	movs	r2, #1
 80073e8:	4370      	muls	r0, r6
 80073ea:	1828      	adds	r0, r5, r0
 80073ec:	7825      	ldrb	r5, [r4, #0]
 80073ee:	3401      	adds	r4, #1
 80073f0:	e7e9      	b.n	80073c6 <_strtol_l.isra.0+0x96>
 80073f2:	002b      	movs	r3, r5
 80073f4:	3b41      	subs	r3, #65	@ 0x41
 80073f6:	2b19      	cmp	r3, #25
 80073f8:	d801      	bhi.n	80073fe <_strtol_l.isra.0+0xce>
 80073fa:	3d37      	subs	r5, #55	@ 0x37
 80073fc:	e7e8      	b.n	80073d0 <_strtol_l.isra.0+0xa0>
 80073fe:	002b      	movs	r3, r5
 8007400:	3b61      	subs	r3, #97	@ 0x61
 8007402:	2b19      	cmp	r3, #25
 8007404:	d804      	bhi.n	8007410 <_strtol_l.isra.0+0xe0>
 8007406:	3d57      	subs	r5, #87	@ 0x57
 8007408:	e7e2      	b.n	80073d0 <_strtol_l.isra.0+0xa0>
 800740a:	2201      	movs	r2, #1
 800740c:	4252      	negs	r2, r2
 800740e:	e7ed      	b.n	80073ec <_strtol_l.isra.0+0xbc>
 8007410:	1c53      	adds	r3, r2, #1
 8007412:	d108      	bne.n	8007426 <_strtol_l.isra.0+0xf6>
 8007414:	2322      	movs	r3, #34	@ 0x22
 8007416:	9a03      	ldr	r2, [sp, #12]
 8007418:	9802      	ldr	r0, [sp, #8]
 800741a:	6013      	str	r3, [r2, #0]
 800741c:	2f00      	cmp	r7, #0
 800741e:	d0b8      	beq.n	8007392 <_strtol_l.isra.0+0x62>
 8007420:	1e63      	subs	r3, r4, #1
 8007422:	9301      	str	r3, [sp, #4]
 8007424:	e007      	b.n	8007436 <_strtol_l.isra.0+0x106>
 8007426:	9b00      	ldr	r3, [sp, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d000      	beq.n	800742e <_strtol_l.isra.0+0xfe>
 800742c:	4240      	negs	r0, r0
 800742e:	2f00      	cmp	r7, #0
 8007430:	d0af      	beq.n	8007392 <_strtol_l.isra.0+0x62>
 8007432:	2a00      	cmp	r2, #0
 8007434:	d1f4      	bne.n	8007420 <_strtol_l.isra.0+0xf0>
 8007436:	9b01      	ldr	r3, [sp, #4]
 8007438:	603b      	str	r3, [r7, #0]
 800743a:	e7aa      	b.n	8007392 <_strtol_l.isra.0+0x62>
 800743c:	08008c91 	.word	0x08008c91
 8007440:	7fffffff 	.word	0x7fffffff

08007444 <strtol>:
 8007444:	b510      	push	{r4, lr}
 8007446:	4c04      	ldr	r4, [pc, #16]	@ (8007458 <strtol+0x14>)
 8007448:	0013      	movs	r3, r2
 800744a:	000a      	movs	r2, r1
 800744c:	0001      	movs	r1, r0
 800744e:	6820      	ldr	r0, [r4, #0]
 8007450:	f7ff ff6e 	bl	8007330 <_strtol_l.isra.0>
 8007454:	bd10      	pop	{r4, pc}
 8007456:	46c0      	nop			@ (mov r8, r8)
 8007458:	2000000c 	.word	0x2000000c

0800745c <sniprintf>:
 800745c:	b40c      	push	{r2, r3}
 800745e:	b530      	push	{r4, r5, lr}
 8007460:	4b18      	ldr	r3, [pc, #96]	@ (80074c4 <sniprintf+0x68>)
 8007462:	000c      	movs	r4, r1
 8007464:	681d      	ldr	r5, [r3, #0]
 8007466:	b09d      	sub	sp, #116	@ 0x74
 8007468:	2900      	cmp	r1, #0
 800746a:	da08      	bge.n	800747e <sniprintf+0x22>
 800746c:	238b      	movs	r3, #139	@ 0x8b
 800746e:	2001      	movs	r0, #1
 8007470:	602b      	str	r3, [r5, #0]
 8007472:	4240      	negs	r0, r0
 8007474:	b01d      	add	sp, #116	@ 0x74
 8007476:	bc30      	pop	{r4, r5}
 8007478:	bc08      	pop	{r3}
 800747a:	b002      	add	sp, #8
 800747c:	4718      	bx	r3
 800747e:	2382      	movs	r3, #130	@ 0x82
 8007480:	466a      	mov	r2, sp
 8007482:	009b      	lsls	r3, r3, #2
 8007484:	8293      	strh	r3, [r2, #20]
 8007486:	2300      	movs	r3, #0
 8007488:	9002      	str	r0, [sp, #8]
 800748a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800748c:	9006      	str	r0, [sp, #24]
 800748e:	4299      	cmp	r1, r3
 8007490:	d000      	beq.n	8007494 <sniprintf+0x38>
 8007492:	1e4b      	subs	r3, r1, #1
 8007494:	9304      	str	r3, [sp, #16]
 8007496:	9307      	str	r3, [sp, #28]
 8007498:	2301      	movs	r3, #1
 800749a:	466a      	mov	r2, sp
 800749c:	425b      	negs	r3, r3
 800749e:	82d3      	strh	r3, [r2, #22]
 80074a0:	0028      	movs	r0, r5
 80074a2:	ab21      	add	r3, sp, #132	@ 0x84
 80074a4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80074a6:	a902      	add	r1, sp, #8
 80074a8:	9301      	str	r3, [sp, #4]
 80074aa:	f000 f9ed 	bl	8007888 <_svfiprintf_r>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	da01      	bge.n	80074b6 <sniprintf+0x5a>
 80074b2:	238b      	movs	r3, #139	@ 0x8b
 80074b4:	602b      	str	r3, [r5, #0]
 80074b6:	2c00      	cmp	r4, #0
 80074b8:	d0dc      	beq.n	8007474 <sniprintf+0x18>
 80074ba:	2200      	movs	r2, #0
 80074bc:	9b02      	ldr	r3, [sp, #8]
 80074be:	701a      	strb	r2, [r3, #0]
 80074c0:	e7d8      	b.n	8007474 <sniprintf+0x18>
 80074c2:	46c0      	nop			@ (mov r8, r8)
 80074c4:	2000000c 	.word	0x2000000c

080074c8 <_vsniprintf_r>:
 80074c8:	b530      	push	{r4, r5, lr}
 80074ca:	0005      	movs	r5, r0
 80074cc:	0014      	movs	r4, r2
 80074ce:	0008      	movs	r0, r1
 80074d0:	001a      	movs	r2, r3
 80074d2:	b09b      	sub	sp, #108	@ 0x6c
 80074d4:	2c00      	cmp	r4, #0
 80074d6:	da05      	bge.n	80074e4 <_vsniprintf_r+0x1c>
 80074d8:	238b      	movs	r3, #139	@ 0x8b
 80074da:	2001      	movs	r0, #1
 80074dc:	602b      	str	r3, [r5, #0]
 80074de:	4240      	negs	r0, r0
 80074e0:	b01b      	add	sp, #108	@ 0x6c
 80074e2:	bd30      	pop	{r4, r5, pc}
 80074e4:	2382      	movs	r3, #130	@ 0x82
 80074e6:	4669      	mov	r1, sp
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	818b      	strh	r3, [r1, #12]
 80074ec:	2100      	movs	r1, #0
 80074ee:	9000      	str	r0, [sp, #0]
 80074f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80074f2:	9004      	str	r0, [sp, #16]
 80074f4:	428c      	cmp	r4, r1
 80074f6:	d000      	beq.n	80074fa <_vsniprintf_r+0x32>
 80074f8:	1e61      	subs	r1, r4, #1
 80074fa:	2301      	movs	r3, #1
 80074fc:	9102      	str	r1, [sp, #8]
 80074fe:	9105      	str	r1, [sp, #20]
 8007500:	4669      	mov	r1, sp
 8007502:	425b      	negs	r3, r3
 8007504:	81cb      	strh	r3, [r1, #14]
 8007506:	0028      	movs	r0, r5
 8007508:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800750a:	f000 f9bd 	bl	8007888 <_svfiprintf_r>
 800750e:	1c43      	adds	r3, r0, #1
 8007510:	da01      	bge.n	8007516 <_vsniprintf_r+0x4e>
 8007512:	238b      	movs	r3, #139	@ 0x8b
 8007514:	602b      	str	r3, [r5, #0]
 8007516:	2c00      	cmp	r4, #0
 8007518:	d0e2      	beq.n	80074e0 <_vsniprintf_r+0x18>
 800751a:	2200      	movs	r2, #0
 800751c:	9b00      	ldr	r3, [sp, #0]
 800751e:	701a      	strb	r2, [r3, #0]
 8007520:	e7de      	b.n	80074e0 <_vsniprintf_r+0x18>
	...

08007524 <vsniprintf>:
 8007524:	b513      	push	{r0, r1, r4, lr}
 8007526:	4c04      	ldr	r4, [pc, #16]	@ (8007538 <vsniprintf+0x14>)
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	0013      	movs	r3, r2
 800752c:	000a      	movs	r2, r1
 800752e:	0001      	movs	r1, r0
 8007530:	6820      	ldr	r0, [r4, #0]
 8007532:	f7ff ffc9 	bl	80074c8 <_vsniprintf_r>
 8007536:	bd16      	pop	{r1, r2, r4, pc}
 8007538:	2000000c 	.word	0x2000000c

0800753c <memset>:
 800753c:	0003      	movs	r3, r0
 800753e:	1882      	adds	r2, r0, r2
 8007540:	4293      	cmp	r3, r2
 8007542:	d100      	bne.n	8007546 <memset+0xa>
 8007544:	4770      	bx	lr
 8007546:	7019      	strb	r1, [r3, #0]
 8007548:	3301      	adds	r3, #1
 800754a:	e7f9      	b.n	8007540 <memset+0x4>

0800754c <strstr>:
 800754c:	780a      	ldrb	r2, [r1, #0]
 800754e:	b530      	push	{r4, r5, lr}
 8007550:	2a00      	cmp	r2, #0
 8007552:	d10c      	bne.n	800756e <strstr+0x22>
 8007554:	bd30      	pop	{r4, r5, pc}
 8007556:	429a      	cmp	r2, r3
 8007558:	d108      	bne.n	800756c <strstr+0x20>
 800755a:	2301      	movs	r3, #1
 800755c:	5ccc      	ldrb	r4, [r1, r3]
 800755e:	2c00      	cmp	r4, #0
 8007560:	d0f8      	beq.n	8007554 <strstr+0x8>
 8007562:	5cc5      	ldrb	r5, [r0, r3]
 8007564:	42a5      	cmp	r5, r4
 8007566:	d101      	bne.n	800756c <strstr+0x20>
 8007568:	3301      	adds	r3, #1
 800756a:	e7f7      	b.n	800755c <strstr+0x10>
 800756c:	3001      	adds	r0, #1
 800756e:	7803      	ldrb	r3, [r0, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1f0      	bne.n	8007556 <strstr+0xa>
 8007574:	0018      	movs	r0, r3
 8007576:	e7ed      	b.n	8007554 <strstr+0x8>

08007578 <__errno>:
 8007578:	4b01      	ldr	r3, [pc, #4]	@ (8007580 <__errno+0x8>)
 800757a:	6818      	ldr	r0, [r3, #0]
 800757c:	4770      	bx	lr
 800757e:	46c0      	nop			@ (mov r8, r8)
 8007580:	2000000c 	.word	0x2000000c

08007584 <__libc_init_array>:
 8007584:	b570      	push	{r4, r5, r6, lr}
 8007586:	2600      	movs	r6, #0
 8007588:	4c0c      	ldr	r4, [pc, #48]	@ (80075bc <__libc_init_array+0x38>)
 800758a:	4d0d      	ldr	r5, [pc, #52]	@ (80075c0 <__libc_init_array+0x3c>)
 800758c:	1b64      	subs	r4, r4, r5
 800758e:	10a4      	asrs	r4, r4, #2
 8007590:	42a6      	cmp	r6, r4
 8007592:	d109      	bne.n	80075a8 <__libc_init_array+0x24>
 8007594:	2600      	movs	r6, #0
 8007596:	f000 fc61 	bl	8007e5c <_init>
 800759a:	4c0a      	ldr	r4, [pc, #40]	@ (80075c4 <__libc_init_array+0x40>)
 800759c:	4d0a      	ldr	r5, [pc, #40]	@ (80075c8 <__libc_init_array+0x44>)
 800759e:	1b64      	subs	r4, r4, r5
 80075a0:	10a4      	asrs	r4, r4, #2
 80075a2:	42a6      	cmp	r6, r4
 80075a4:	d105      	bne.n	80075b2 <__libc_init_array+0x2e>
 80075a6:	bd70      	pop	{r4, r5, r6, pc}
 80075a8:	00b3      	lsls	r3, r6, #2
 80075aa:	58eb      	ldr	r3, [r5, r3]
 80075ac:	4798      	blx	r3
 80075ae:	3601      	adds	r6, #1
 80075b0:	e7ee      	b.n	8007590 <__libc_init_array+0xc>
 80075b2:	00b3      	lsls	r3, r6, #2
 80075b4:	58eb      	ldr	r3, [r5, r3]
 80075b6:	4798      	blx	r3
 80075b8:	3601      	adds	r6, #1
 80075ba:	e7f2      	b.n	80075a2 <__libc_init_array+0x1e>
 80075bc:	08008dcc 	.word	0x08008dcc
 80075c0:	08008dcc 	.word	0x08008dcc
 80075c4:	08008dd0 	.word	0x08008dd0
 80075c8:	08008dcc 	.word	0x08008dcc

080075cc <__retarget_lock_acquire_recursive>:
 80075cc:	4770      	bx	lr

080075ce <__retarget_lock_release_recursive>:
 80075ce:	4770      	bx	lr

080075d0 <_free_r>:
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	0005      	movs	r5, r0
 80075d4:	1e0c      	subs	r4, r1, #0
 80075d6:	d010      	beq.n	80075fa <_free_r+0x2a>
 80075d8:	3c04      	subs	r4, #4
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	da00      	bge.n	80075e2 <_free_r+0x12>
 80075e0:	18e4      	adds	r4, r4, r3
 80075e2:	0028      	movs	r0, r5
 80075e4:	f000 f8e0 	bl	80077a8 <__malloc_lock>
 80075e8:	4a1d      	ldr	r2, [pc, #116]	@ (8007660 <_free_r+0x90>)
 80075ea:	6813      	ldr	r3, [r2, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d105      	bne.n	80075fc <_free_r+0x2c>
 80075f0:	6063      	str	r3, [r4, #4]
 80075f2:	6014      	str	r4, [r2, #0]
 80075f4:	0028      	movs	r0, r5
 80075f6:	f000 f8df 	bl	80077b8 <__malloc_unlock>
 80075fa:	bd70      	pop	{r4, r5, r6, pc}
 80075fc:	42a3      	cmp	r3, r4
 80075fe:	d908      	bls.n	8007612 <_free_r+0x42>
 8007600:	6820      	ldr	r0, [r4, #0]
 8007602:	1821      	adds	r1, r4, r0
 8007604:	428b      	cmp	r3, r1
 8007606:	d1f3      	bne.n	80075f0 <_free_r+0x20>
 8007608:	6819      	ldr	r1, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	1809      	adds	r1, r1, r0
 800760e:	6021      	str	r1, [r4, #0]
 8007610:	e7ee      	b.n	80075f0 <_free_r+0x20>
 8007612:	001a      	movs	r2, r3
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d001      	beq.n	800761e <_free_r+0x4e>
 800761a:	42a3      	cmp	r3, r4
 800761c:	d9f9      	bls.n	8007612 <_free_r+0x42>
 800761e:	6811      	ldr	r1, [r2, #0]
 8007620:	1850      	adds	r0, r2, r1
 8007622:	42a0      	cmp	r0, r4
 8007624:	d10b      	bne.n	800763e <_free_r+0x6e>
 8007626:	6820      	ldr	r0, [r4, #0]
 8007628:	1809      	adds	r1, r1, r0
 800762a:	1850      	adds	r0, r2, r1
 800762c:	6011      	str	r1, [r2, #0]
 800762e:	4283      	cmp	r3, r0
 8007630:	d1e0      	bne.n	80075f4 <_free_r+0x24>
 8007632:	6818      	ldr	r0, [r3, #0]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	1841      	adds	r1, r0, r1
 8007638:	6011      	str	r1, [r2, #0]
 800763a:	6053      	str	r3, [r2, #4]
 800763c:	e7da      	b.n	80075f4 <_free_r+0x24>
 800763e:	42a0      	cmp	r0, r4
 8007640:	d902      	bls.n	8007648 <_free_r+0x78>
 8007642:	230c      	movs	r3, #12
 8007644:	602b      	str	r3, [r5, #0]
 8007646:	e7d5      	b.n	80075f4 <_free_r+0x24>
 8007648:	6820      	ldr	r0, [r4, #0]
 800764a:	1821      	adds	r1, r4, r0
 800764c:	428b      	cmp	r3, r1
 800764e:	d103      	bne.n	8007658 <_free_r+0x88>
 8007650:	6819      	ldr	r1, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	1809      	adds	r1, r1, r0
 8007656:	6021      	str	r1, [r4, #0]
 8007658:	6063      	str	r3, [r4, #4]
 800765a:	6054      	str	r4, [r2, #4]
 800765c:	e7ca      	b.n	80075f4 <_free_r+0x24>
 800765e:	46c0      	nop			@ (mov r8, r8)
 8007660:	200003cc 	.word	0x200003cc

08007664 <sbrk_aligned>:
 8007664:	b570      	push	{r4, r5, r6, lr}
 8007666:	4e0f      	ldr	r6, [pc, #60]	@ (80076a4 <sbrk_aligned+0x40>)
 8007668:	000d      	movs	r5, r1
 800766a:	6831      	ldr	r1, [r6, #0]
 800766c:	0004      	movs	r4, r0
 800766e:	2900      	cmp	r1, #0
 8007670:	d102      	bne.n	8007678 <sbrk_aligned+0x14>
 8007672:	f000 fb95 	bl	8007da0 <_sbrk_r>
 8007676:	6030      	str	r0, [r6, #0]
 8007678:	0029      	movs	r1, r5
 800767a:	0020      	movs	r0, r4
 800767c:	f000 fb90 	bl	8007da0 <_sbrk_r>
 8007680:	1c43      	adds	r3, r0, #1
 8007682:	d103      	bne.n	800768c <sbrk_aligned+0x28>
 8007684:	2501      	movs	r5, #1
 8007686:	426d      	negs	r5, r5
 8007688:	0028      	movs	r0, r5
 800768a:	bd70      	pop	{r4, r5, r6, pc}
 800768c:	2303      	movs	r3, #3
 800768e:	1cc5      	adds	r5, r0, #3
 8007690:	439d      	bics	r5, r3
 8007692:	42a8      	cmp	r0, r5
 8007694:	d0f8      	beq.n	8007688 <sbrk_aligned+0x24>
 8007696:	1a29      	subs	r1, r5, r0
 8007698:	0020      	movs	r0, r4
 800769a:	f000 fb81 	bl	8007da0 <_sbrk_r>
 800769e:	3001      	adds	r0, #1
 80076a0:	d1f2      	bne.n	8007688 <sbrk_aligned+0x24>
 80076a2:	e7ef      	b.n	8007684 <sbrk_aligned+0x20>
 80076a4:	200003c8 	.word	0x200003c8

080076a8 <_malloc_r>:
 80076a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076aa:	2203      	movs	r2, #3
 80076ac:	1ccb      	adds	r3, r1, #3
 80076ae:	4393      	bics	r3, r2
 80076b0:	3308      	adds	r3, #8
 80076b2:	0005      	movs	r5, r0
 80076b4:	001f      	movs	r7, r3
 80076b6:	2b0c      	cmp	r3, #12
 80076b8:	d234      	bcs.n	8007724 <_malloc_r+0x7c>
 80076ba:	270c      	movs	r7, #12
 80076bc:	42b9      	cmp	r1, r7
 80076be:	d833      	bhi.n	8007728 <_malloc_r+0x80>
 80076c0:	0028      	movs	r0, r5
 80076c2:	f000 f871 	bl	80077a8 <__malloc_lock>
 80076c6:	4e37      	ldr	r6, [pc, #220]	@ (80077a4 <_malloc_r+0xfc>)
 80076c8:	6833      	ldr	r3, [r6, #0]
 80076ca:	001c      	movs	r4, r3
 80076cc:	2c00      	cmp	r4, #0
 80076ce:	d12f      	bne.n	8007730 <_malloc_r+0x88>
 80076d0:	0039      	movs	r1, r7
 80076d2:	0028      	movs	r0, r5
 80076d4:	f7ff ffc6 	bl	8007664 <sbrk_aligned>
 80076d8:	0004      	movs	r4, r0
 80076da:	1c43      	adds	r3, r0, #1
 80076dc:	d15f      	bne.n	800779e <_malloc_r+0xf6>
 80076de:	6834      	ldr	r4, [r6, #0]
 80076e0:	9400      	str	r4, [sp, #0]
 80076e2:	9b00      	ldr	r3, [sp, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d14a      	bne.n	800777e <_malloc_r+0xd6>
 80076e8:	2c00      	cmp	r4, #0
 80076ea:	d052      	beq.n	8007792 <_malloc_r+0xea>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	0028      	movs	r0, r5
 80076f0:	18e3      	adds	r3, r4, r3
 80076f2:	9900      	ldr	r1, [sp, #0]
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	f000 fb53 	bl	8007da0 <_sbrk_r>
 80076fa:	9b01      	ldr	r3, [sp, #4]
 80076fc:	4283      	cmp	r3, r0
 80076fe:	d148      	bne.n	8007792 <_malloc_r+0xea>
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	0028      	movs	r0, r5
 8007704:	1aff      	subs	r7, r7, r3
 8007706:	0039      	movs	r1, r7
 8007708:	f7ff ffac 	bl	8007664 <sbrk_aligned>
 800770c:	3001      	adds	r0, #1
 800770e:	d040      	beq.n	8007792 <_malloc_r+0xea>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	19db      	adds	r3, r3, r7
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	6833      	ldr	r3, [r6, #0]
 8007718:	685a      	ldr	r2, [r3, #4]
 800771a:	2a00      	cmp	r2, #0
 800771c:	d133      	bne.n	8007786 <_malloc_r+0xde>
 800771e:	9b00      	ldr	r3, [sp, #0]
 8007720:	6033      	str	r3, [r6, #0]
 8007722:	e019      	b.n	8007758 <_malloc_r+0xb0>
 8007724:	2b00      	cmp	r3, #0
 8007726:	dac9      	bge.n	80076bc <_malloc_r+0x14>
 8007728:	230c      	movs	r3, #12
 800772a:	602b      	str	r3, [r5, #0]
 800772c:	2000      	movs	r0, #0
 800772e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007730:	6821      	ldr	r1, [r4, #0]
 8007732:	1bc9      	subs	r1, r1, r7
 8007734:	d420      	bmi.n	8007778 <_malloc_r+0xd0>
 8007736:	290b      	cmp	r1, #11
 8007738:	d90a      	bls.n	8007750 <_malloc_r+0xa8>
 800773a:	19e2      	adds	r2, r4, r7
 800773c:	6027      	str	r7, [r4, #0]
 800773e:	42a3      	cmp	r3, r4
 8007740:	d104      	bne.n	800774c <_malloc_r+0xa4>
 8007742:	6032      	str	r2, [r6, #0]
 8007744:	6863      	ldr	r3, [r4, #4]
 8007746:	6011      	str	r1, [r2, #0]
 8007748:	6053      	str	r3, [r2, #4]
 800774a:	e005      	b.n	8007758 <_malloc_r+0xb0>
 800774c:	605a      	str	r2, [r3, #4]
 800774e:	e7f9      	b.n	8007744 <_malloc_r+0x9c>
 8007750:	6862      	ldr	r2, [r4, #4]
 8007752:	42a3      	cmp	r3, r4
 8007754:	d10e      	bne.n	8007774 <_malloc_r+0xcc>
 8007756:	6032      	str	r2, [r6, #0]
 8007758:	0028      	movs	r0, r5
 800775a:	f000 f82d 	bl	80077b8 <__malloc_unlock>
 800775e:	0020      	movs	r0, r4
 8007760:	2207      	movs	r2, #7
 8007762:	300b      	adds	r0, #11
 8007764:	1d23      	adds	r3, r4, #4
 8007766:	4390      	bics	r0, r2
 8007768:	1ac2      	subs	r2, r0, r3
 800776a:	4298      	cmp	r0, r3
 800776c:	d0df      	beq.n	800772e <_malloc_r+0x86>
 800776e:	1a1b      	subs	r3, r3, r0
 8007770:	50a3      	str	r3, [r4, r2]
 8007772:	e7dc      	b.n	800772e <_malloc_r+0x86>
 8007774:	605a      	str	r2, [r3, #4]
 8007776:	e7ef      	b.n	8007758 <_malloc_r+0xb0>
 8007778:	0023      	movs	r3, r4
 800777a:	6864      	ldr	r4, [r4, #4]
 800777c:	e7a6      	b.n	80076cc <_malloc_r+0x24>
 800777e:	9c00      	ldr	r4, [sp, #0]
 8007780:	6863      	ldr	r3, [r4, #4]
 8007782:	9300      	str	r3, [sp, #0]
 8007784:	e7ad      	b.n	80076e2 <_malloc_r+0x3a>
 8007786:	001a      	movs	r2, r3
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	42a3      	cmp	r3, r4
 800778c:	d1fb      	bne.n	8007786 <_malloc_r+0xde>
 800778e:	2300      	movs	r3, #0
 8007790:	e7da      	b.n	8007748 <_malloc_r+0xa0>
 8007792:	230c      	movs	r3, #12
 8007794:	0028      	movs	r0, r5
 8007796:	602b      	str	r3, [r5, #0]
 8007798:	f000 f80e 	bl	80077b8 <__malloc_unlock>
 800779c:	e7c6      	b.n	800772c <_malloc_r+0x84>
 800779e:	6007      	str	r7, [r0, #0]
 80077a0:	e7da      	b.n	8007758 <_malloc_r+0xb0>
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	200003cc 	.word	0x200003cc

080077a8 <__malloc_lock>:
 80077a8:	b510      	push	{r4, lr}
 80077aa:	4802      	ldr	r0, [pc, #8]	@ (80077b4 <__malloc_lock+0xc>)
 80077ac:	f7ff ff0e 	bl	80075cc <__retarget_lock_acquire_recursive>
 80077b0:	bd10      	pop	{r4, pc}
 80077b2:	46c0      	nop			@ (mov r8, r8)
 80077b4:	200003c4 	.word	0x200003c4

080077b8 <__malloc_unlock>:
 80077b8:	b510      	push	{r4, lr}
 80077ba:	4802      	ldr	r0, [pc, #8]	@ (80077c4 <__malloc_unlock+0xc>)
 80077bc:	f7ff ff07 	bl	80075ce <__retarget_lock_release_recursive>
 80077c0:	bd10      	pop	{r4, pc}
 80077c2:	46c0      	nop			@ (mov r8, r8)
 80077c4:	200003c4 	.word	0x200003c4

080077c8 <__ssputs_r>:
 80077c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80077ca:	688e      	ldr	r6, [r1, #8]
 80077cc:	b085      	sub	sp, #20
 80077ce:	001f      	movs	r7, r3
 80077d0:	000c      	movs	r4, r1
 80077d2:	680b      	ldr	r3, [r1, #0]
 80077d4:	9002      	str	r0, [sp, #8]
 80077d6:	9203      	str	r2, [sp, #12]
 80077d8:	42be      	cmp	r6, r7
 80077da:	d830      	bhi.n	800783e <__ssputs_r+0x76>
 80077dc:	210c      	movs	r1, #12
 80077de:	5e62      	ldrsh	r2, [r4, r1]
 80077e0:	2190      	movs	r1, #144	@ 0x90
 80077e2:	00c9      	lsls	r1, r1, #3
 80077e4:	420a      	tst	r2, r1
 80077e6:	d028      	beq.n	800783a <__ssputs_r+0x72>
 80077e8:	2003      	movs	r0, #3
 80077ea:	6921      	ldr	r1, [r4, #16]
 80077ec:	1a5b      	subs	r3, r3, r1
 80077ee:	9301      	str	r3, [sp, #4]
 80077f0:	6963      	ldr	r3, [r4, #20]
 80077f2:	4343      	muls	r3, r0
 80077f4:	9801      	ldr	r0, [sp, #4]
 80077f6:	0fdd      	lsrs	r5, r3, #31
 80077f8:	18ed      	adds	r5, r5, r3
 80077fa:	1c7b      	adds	r3, r7, #1
 80077fc:	181b      	adds	r3, r3, r0
 80077fe:	106d      	asrs	r5, r5, #1
 8007800:	42ab      	cmp	r3, r5
 8007802:	d900      	bls.n	8007806 <__ssputs_r+0x3e>
 8007804:	001d      	movs	r5, r3
 8007806:	0552      	lsls	r2, r2, #21
 8007808:	d528      	bpl.n	800785c <__ssputs_r+0x94>
 800780a:	0029      	movs	r1, r5
 800780c:	9802      	ldr	r0, [sp, #8]
 800780e:	f7ff ff4b 	bl	80076a8 <_malloc_r>
 8007812:	1e06      	subs	r6, r0, #0
 8007814:	d02c      	beq.n	8007870 <__ssputs_r+0xa8>
 8007816:	9a01      	ldr	r2, [sp, #4]
 8007818:	6921      	ldr	r1, [r4, #16]
 800781a:	f000 fade 	bl	8007dda <memcpy>
 800781e:	89a2      	ldrh	r2, [r4, #12]
 8007820:	4b18      	ldr	r3, [pc, #96]	@ (8007884 <__ssputs_r+0xbc>)
 8007822:	401a      	ands	r2, r3
 8007824:	2380      	movs	r3, #128	@ 0x80
 8007826:	4313      	orrs	r3, r2
 8007828:	81a3      	strh	r3, [r4, #12]
 800782a:	9b01      	ldr	r3, [sp, #4]
 800782c:	6126      	str	r6, [r4, #16]
 800782e:	18f6      	adds	r6, r6, r3
 8007830:	6026      	str	r6, [r4, #0]
 8007832:	003e      	movs	r6, r7
 8007834:	6165      	str	r5, [r4, #20]
 8007836:	1aed      	subs	r5, r5, r3
 8007838:	60a5      	str	r5, [r4, #8]
 800783a:	42be      	cmp	r6, r7
 800783c:	d900      	bls.n	8007840 <__ssputs_r+0x78>
 800783e:	003e      	movs	r6, r7
 8007840:	0032      	movs	r2, r6
 8007842:	9903      	ldr	r1, [sp, #12]
 8007844:	6820      	ldr	r0, [r4, #0]
 8007846:	f000 fa99 	bl	8007d7c <memmove>
 800784a:	2000      	movs	r0, #0
 800784c:	68a3      	ldr	r3, [r4, #8]
 800784e:	1b9b      	subs	r3, r3, r6
 8007850:	60a3      	str	r3, [r4, #8]
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	199b      	adds	r3, r3, r6
 8007856:	6023      	str	r3, [r4, #0]
 8007858:	b005      	add	sp, #20
 800785a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800785c:	002a      	movs	r2, r5
 800785e:	9802      	ldr	r0, [sp, #8]
 8007860:	f000 fac4 	bl	8007dec <_realloc_r>
 8007864:	1e06      	subs	r6, r0, #0
 8007866:	d1e0      	bne.n	800782a <__ssputs_r+0x62>
 8007868:	6921      	ldr	r1, [r4, #16]
 800786a:	9802      	ldr	r0, [sp, #8]
 800786c:	f7ff feb0 	bl	80075d0 <_free_r>
 8007870:	230c      	movs	r3, #12
 8007872:	2001      	movs	r0, #1
 8007874:	9a02      	ldr	r2, [sp, #8]
 8007876:	4240      	negs	r0, r0
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	89a2      	ldrh	r2, [r4, #12]
 800787c:	3334      	adds	r3, #52	@ 0x34
 800787e:	4313      	orrs	r3, r2
 8007880:	81a3      	strh	r3, [r4, #12]
 8007882:	e7e9      	b.n	8007858 <__ssputs_r+0x90>
 8007884:	fffffb7f 	.word	0xfffffb7f

08007888 <_svfiprintf_r>:
 8007888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800788a:	b0a1      	sub	sp, #132	@ 0x84
 800788c:	9003      	str	r0, [sp, #12]
 800788e:	001d      	movs	r5, r3
 8007890:	898b      	ldrh	r3, [r1, #12]
 8007892:	000f      	movs	r7, r1
 8007894:	0016      	movs	r6, r2
 8007896:	061b      	lsls	r3, r3, #24
 8007898:	d511      	bpl.n	80078be <_svfiprintf_r+0x36>
 800789a:	690b      	ldr	r3, [r1, #16]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d10e      	bne.n	80078be <_svfiprintf_r+0x36>
 80078a0:	2140      	movs	r1, #64	@ 0x40
 80078a2:	f7ff ff01 	bl	80076a8 <_malloc_r>
 80078a6:	6038      	str	r0, [r7, #0]
 80078a8:	6138      	str	r0, [r7, #16]
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d105      	bne.n	80078ba <_svfiprintf_r+0x32>
 80078ae:	230c      	movs	r3, #12
 80078b0:	9a03      	ldr	r2, [sp, #12]
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	2001      	movs	r0, #1
 80078b6:	4240      	negs	r0, r0
 80078b8:	e0cf      	b.n	8007a5a <_svfiprintf_r+0x1d2>
 80078ba:	2340      	movs	r3, #64	@ 0x40
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	2300      	movs	r3, #0
 80078c0:	ac08      	add	r4, sp, #32
 80078c2:	6163      	str	r3, [r4, #20]
 80078c4:	3320      	adds	r3, #32
 80078c6:	7663      	strb	r3, [r4, #25]
 80078c8:	3310      	adds	r3, #16
 80078ca:	76a3      	strb	r3, [r4, #26]
 80078cc:	9507      	str	r5, [sp, #28]
 80078ce:	0035      	movs	r5, r6
 80078d0:	782b      	ldrb	r3, [r5, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <_svfiprintf_r+0x52>
 80078d6:	2b25      	cmp	r3, #37	@ 0x25
 80078d8:	d148      	bne.n	800796c <_svfiprintf_r+0xe4>
 80078da:	1bab      	subs	r3, r5, r6
 80078dc:	9305      	str	r3, [sp, #20]
 80078de:	42b5      	cmp	r5, r6
 80078e0:	d00b      	beq.n	80078fa <_svfiprintf_r+0x72>
 80078e2:	0032      	movs	r2, r6
 80078e4:	0039      	movs	r1, r7
 80078e6:	9803      	ldr	r0, [sp, #12]
 80078e8:	f7ff ff6e 	bl	80077c8 <__ssputs_r>
 80078ec:	3001      	adds	r0, #1
 80078ee:	d100      	bne.n	80078f2 <_svfiprintf_r+0x6a>
 80078f0:	e0ae      	b.n	8007a50 <_svfiprintf_r+0x1c8>
 80078f2:	6963      	ldr	r3, [r4, #20]
 80078f4:	9a05      	ldr	r2, [sp, #20]
 80078f6:	189b      	adds	r3, r3, r2
 80078f8:	6163      	str	r3, [r4, #20]
 80078fa:	782b      	ldrb	r3, [r5, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d100      	bne.n	8007902 <_svfiprintf_r+0x7a>
 8007900:	e0a6      	b.n	8007a50 <_svfiprintf_r+0x1c8>
 8007902:	2201      	movs	r2, #1
 8007904:	2300      	movs	r3, #0
 8007906:	4252      	negs	r2, r2
 8007908:	6062      	str	r2, [r4, #4]
 800790a:	a904      	add	r1, sp, #16
 800790c:	3254      	adds	r2, #84	@ 0x54
 800790e:	1852      	adds	r2, r2, r1
 8007910:	1c6e      	adds	r6, r5, #1
 8007912:	6023      	str	r3, [r4, #0]
 8007914:	60e3      	str	r3, [r4, #12]
 8007916:	60a3      	str	r3, [r4, #8]
 8007918:	7013      	strb	r3, [r2, #0]
 800791a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800791c:	4b54      	ldr	r3, [pc, #336]	@ (8007a70 <_svfiprintf_r+0x1e8>)
 800791e:	2205      	movs	r2, #5
 8007920:	0018      	movs	r0, r3
 8007922:	7831      	ldrb	r1, [r6, #0]
 8007924:	9305      	str	r3, [sp, #20]
 8007926:	f000 fa4d 	bl	8007dc4 <memchr>
 800792a:	1c75      	adds	r5, r6, #1
 800792c:	2800      	cmp	r0, #0
 800792e:	d11f      	bne.n	8007970 <_svfiprintf_r+0xe8>
 8007930:	6822      	ldr	r2, [r4, #0]
 8007932:	06d3      	lsls	r3, r2, #27
 8007934:	d504      	bpl.n	8007940 <_svfiprintf_r+0xb8>
 8007936:	2353      	movs	r3, #83	@ 0x53
 8007938:	a904      	add	r1, sp, #16
 800793a:	185b      	adds	r3, r3, r1
 800793c:	2120      	movs	r1, #32
 800793e:	7019      	strb	r1, [r3, #0]
 8007940:	0713      	lsls	r3, r2, #28
 8007942:	d504      	bpl.n	800794e <_svfiprintf_r+0xc6>
 8007944:	2353      	movs	r3, #83	@ 0x53
 8007946:	a904      	add	r1, sp, #16
 8007948:	185b      	adds	r3, r3, r1
 800794a:	212b      	movs	r1, #43	@ 0x2b
 800794c:	7019      	strb	r1, [r3, #0]
 800794e:	7833      	ldrb	r3, [r6, #0]
 8007950:	2b2a      	cmp	r3, #42	@ 0x2a
 8007952:	d016      	beq.n	8007982 <_svfiprintf_r+0xfa>
 8007954:	0035      	movs	r5, r6
 8007956:	2100      	movs	r1, #0
 8007958:	200a      	movs	r0, #10
 800795a:	68e3      	ldr	r3, [r4, #12]
 800795c:	782a      	ldrb	r2, [r5, #0]
 800795e:	1c6e      	adds	r6, r5, #1
 8007960:	3a30      	subs	r2, #48	@ 0x30
 8007962:	2a09      	cmp	r2, #9
 8007964:	d950      	bls.n	8007a08 <_svfiprintf_r+0x180>
 8007966:	2900      	cmp	r1, #0
 8007968:	d111      	bne.n	800798e <_svfiprintf_r+0x106>
 800796a:	e017      	b.n	800799c <_svfiprintf_r+0x114>
 800796c:	3501      	adds	r5, #1
 800796e:	e7af      	b.n	80078d0 <_svfiprintf_r+0x48>
 8007970:	9b05      	ldr	r3, [sp, #20]
 8007972:	6822      	ldr	r2, [r4, #0]
 8007974:	1ac0      	subs	r0, r0, r3
 8007976:	2301      	movs	r3, #1
 8007978:	4083      	lsls	r3, r0
 800797a:	4313      	orrs	r3, r2
 800797c:	002e      	movs	r6, r5
 800797e:	6023      	str	r3, [r4, #0]
 8007980:	e7cc      	b.n	800791c <_svfiprintf_r+0x94>
 8007982:	9b07      	ldr	r3, [sp, #28]
 8007984:	1d19      	adds	r1, r3, #4
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	9107      	str	r1, [sp, #28]
 800798a:	2b00      	cmp	r3, #0
 800798c:	db01      	blt.n	8007992 <_svfiprintf_r+0x10a>
 800798e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007990:	e004      	b.n	800799c <_svfiprintf_r+0x114>
 8007992:	425b      	negs	r3, r3
 8007994:	60e3      	str	r3, [r4, #12]
 8007996:	2302      	movs	r3, #2
 8007998:	4313      	orrs	r3, r2
 800799a:	6023      	str	r3, [r4, #0]
 800799c:	782b      	ldrb	r3, [r5, #0]
 800799e:	2b2e      	cmp	r3, #46	@ 0x2e
 80079a0:	d10c      	bne.n	80079bc <_svfiprintf_r+0x134>
 80079a2:	786b      	ldrb	r3, [r5, #1]
 80079a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80079a6:	d134      	bne.n	8007a12 <_svfiprintf_r+0x18a>
 80079a8:	9b07      	ldr	r3, [sp, #28]
 80079aa:	3502      	adds	r5, #2
 80079ac:	1d1a      	adds	r2, r3, #4
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	9207      	str	r2, [sp, #28]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	da01      	bge.n	80079ba <_svfiprintf_r+0x132>
 80079b6:	2301      	movs	r3, #1
 80079b8:	425b      	negs	r3, r3
 80079ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80079bc:	4e2d      	ldr	r6, [pc, #180]	@ (8007a74 <_svfiprintf_r+0x1ec>)
 80079be:	2203      	movs	r2, #3
 80079c0:	0030      	movs	r0, r6
 80079c2:	7829      	ldrb	r1, [r5, #0]
 80079c4:	f000 f9fe 	bl	8007dc4 <memchr>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d006      	beq.n	80079da <_svfiprintf_r+0x152>
 80079cc:	2340      	movs	r3, #64	@ 0x40
 80079ce:	1b80      	subs	r0, r0, r6
 80079d0:	4083      	lsls	r3, r0
 80079d2:	6822      	ldr	r2, [r4, #0]
 80079d4:	3501      	adds	r5, #1
 80079d6:	4313      	orrs	r3, r2
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	7829      	ldrb	r1, [r5, #0]
 80079dc:	2206      	movs	r2, #6
 80079de:	4826      	ldr	r0, [pc, #152]	@ (8007a78 <_svfiprintf_r+0x1f0>)
 80079e0:	1c6e      	adds	r6, r5, #1
 80079e2:	7621      	strb	r1, [r4, #24]
 80079e4:	f000 f9ee 	bl	8007dc4 <memchr>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d038      	beq.n	8007a5e <_svfiprintf_r+0x1d6>
 80079ec:	4b23      	ldr	r3, [pc, #140]	@ (8007a7c <_svfiprintf_r+0x1f4>)
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d122      	bne.n	8007a38 <_svfiprintf_r+0x1b0>
 80079f2:	2207      	movs	r2, #7
 80079f4:	9b07      	ldr	r3, [sp, #28]
 80079f6:	3307      	adds	r3, #7
 80079f8:	4393      	bics	r3, r2
 80079fa:	3308      	adds	r3, #8
 80079fc:	9307      	str	r3, [sp, #28]
 80079fe:	6963      	ldr	r3, [r4, #20]
 8007a00:	9a04      	ldr	r2, [sp, #16]
 8007a02:	189b      	adds	r3, r3, r2
 8007a04:	6163      	str	r3, [r4, #20]
 8007a06:	e762      	b.n	80078ce <_svfiprintf_r+0x46>
 8007a08:	4343      	muls	r3, r0
 8007a0a:	0035      	movs	r5, r6
 8007a0c:	2101      	movs	r1, #1
 8007a0e:	189b      	adds	r3, r3, r2
 8007a10:	e7a4      	b.n	800795c <_svfiprintf_r+0xd4>
 8007a12:	2300      	movs	r3, #0
 8007a14:	200a      	movs	r0, #10
 8007a16:	0019      	movs	r1, r3
 8007a18:	3501      	adds	r5, #1
 8007a1a:	6063      	str	r3, [r4, #4]
 8007a1c:	782a      	ldrb	r2, [r5, #0]
 8007a1e:	1c6e      	adds	r6, r5, #1
 8007a20:	3a30      	subs	r2, #48	@ 0x30
 8007a22:	2a09      	cmp	r2, #9
 8007a24:	d903      	bls.n	8007a2e <_svfiprintf_r+0x1a6>
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d0c8      	beq.n	80079bc <_svfiprintf_r+0x134>
 8007a2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a2c:	e7c6      	b.n	80079bc <_svfiprintf_r+0x134>
 8007a2e:	4341      	muls	r1, r0
 8007a30:	0035      	movs	r5, r6
 8007a32:	2301      	movs	r3, #1
 8007a34:	1889      	adds	r1, r1, r2
 8007a36:	e7f1      	b.n	8007a1c <_svfiprintf_r+0x194>
 8007a38:	aa07      	add	r2, sp, #28
 8007a3a:	9200      	str	r2, [sp, #0]
 8007a3c:	0021      	movs	r1, r4
 8007a3e:	003a      	movs	r2, r7
 8007a40:	4b0f      	ldr	r3, [pc, #60]	@ (8007a80 <_svfiprintf_r+0x1f8>)
 8007a42:	9803      	ldr	r0, [sp, #12]
 8007a44:	e000      	b.n	8007a48 <_svfiprintf_r+0x1c0>
 8007a46:	bf00      	nop
 8007a48:	9004      	str	r0, [sp, #16]
 8007a4a:	9b04      	ldr	r3, [sp, #16]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	d1d6      	bne.n	80079fe <_svfiprintf_r+0x176>
 8007a50:	89bb      	ldrh	r3, [r7, #12]
 8007a52:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007a54:	065b      	lsls	r3, r3, #25
 8007a56:	d500      	bpl.n	8007a5a <_svfiprintf_r+0x1d2>
 8007a58:	e72c      	b.n	80078b4 <_svfiprintf_r+0x2c>
 8007a5a:	b021      	add	sp, #132	@ 0x84
 8007a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a5e:	aa07      	add	r2, sp, #28
 8007a60:	9200      	str	r2, [sp, #0]
 8007a62:	0021      	movs	r1, r4
 8007a64:	003a      	movs	r2, r7
 8007a66:	4b06      	ldr	r3, [pc, #24]	@ (8007a80 <_svfiprintf_r+0x1f8>)
 8007a68:	9803      	ldr	r0, [sp, #12]
 8007a6a:	f000 f87b 	bl	8007b64 <_printf_i>
 8007a6e:	e7eb      	b.n	8007a48 <_svfiprintf_r+0x1c0>
 8007a70:	08008d91 	.word	0x08008d91
 8007a74:	08008d97 	.word	0x08008d97
 8007a78:	08008d9b 	.word	0x08008d9b
 8007a7c:	00000000 	.word	0x00000000
 8007a80:	080077c9 	.word	0x080077c9

08007a84 <_printf_common>:
 8007a84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a86:	0016      	movs	r6, r2
 8007a88:	9301      	str	r3, [sp, #4]
 8007a8a:	688a      	ldr	r2, [r1, #8]
 8007a8c:	690b      	ldr	r3, [r1, #16]
 8007a8e:	000c      	movs	r4, r1
 8007a90:	9000      	str	r0, [sp, #0]
 8007a92:	4293      	cmp	r3, r2
 8007a94:	da00      	bge.n	8007a98 <_printf_common+0x14>
 8007a96:	0013      	movs	r3, r2
 8007a98:	0022      	movs	r2, r4
 8007a9a:	6033      	str	r3, [r6, #0]
 8007a9c:	3243      	adds	r2, #67	@ 0x43
 8007a9e:	7812      	ldrb	r2, [r2, #0]
 8007aa0:	2a00      	cmp	r2, #0
 8007aa2:	d001      	beq.n	8007aa8 <_printf_common+0x24>
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	6033      	str	r3, [r6, #0]
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	069b      	lsls	r3, r3, #26
 8007aac:	d502      	bpl.n	8007ab4 <_printf_common+0x30>
 8007aae:	6833      	ldr	r3, [r6, #0]
 8007ab0:	3302      	adds	r3, #2
 8007ab2:	6033      	str	r3, [r6, #0]
 8007ab4:	6822      	ldr	r2, [r4, #0]
 8007ab6:	2306      	movs	r3, #6
 8007ab8:	0015      	movs	r5, r2
 8007aba:	401d      	ands	r5, r3
 8007abc:	421a      	tst	r2, r3
 8007abe:	d027      	beq.n	8007b10 <_printf_common+0x8c>
 8007ac0:	0023      	movs	r3, r4
 8007ac2:	3343      	adds	r3, #67	@ 0x43
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	1e5a      	subs	r2, r3, #1
 8007ac8:	4193      	sbcs	r3, r2
 8007aca:	6822      	ldr	r2, [r4, #0]
 8007acc:	0692      	lsls	r2, r2, #26
 8007ace:	d430      	bmi.n	8007b32 <_printf_common+0xae>
 8007ad0:	0022      	movs	r2, r4
 8007ad2:	9901      	ldr	r1, [sp, #4]
 8007ad4:	9800      	ldr	r0, [sp, #0]
 8007ad6:	9d08      	ldr	r5, [sp, #32]
 8007ad8:	3243      	adds	r2, #67	@ 0x43
 8007ada:	47a8      	blx	r5
 8007adc:	3001      	adds	r0, #1
 8007ade:	d025      	beq.n	8007b2c <_printf_common+0xa8>
 8007ae0:	2206      	movs	r2, #6
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	2500      	movs	r5, #0
 8007ae6:	4013      	ands	r3, r2
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d105      	bne.n	8007af8 <_printf_common+0x74>
 8007aec:	6833      	ldr	r3, [r6, #0]
 8007aee:	68e5      	ldr	r5, [r4, #12]
 8007af0:	1aed      	subs	r5, r5, r3
 8007af2:	43eb      	mvns	r3, r5
 8007af4:	17db      	asrs	r3, r3, #31
 8007af6:	401d      	ands	r5, r3
 8007af8:	68a3      	ldr	r3, [r4, #8]
 8007afa:	6922      	ldr	r2, [r4, #16]
 8007afc:	4293      	cmp	r3, r2
 8007afe:	dd01      	ble.n	8007b04 <_printf_common+0x80>
 8007b00:	1a9b      	subs	r3, r3, r2
 8007b02:	18ed      	adds	r5, r5, r3
 8007b04:	2600      	movs	r6, #0
 8007b06:	42b5      	cmp	r5, r6
 8007b08:	d120      	bne.n	8007b4c <_printf_common+0xc8>
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	e010      	b.n	8007b30 <_printf_common+0xac>
 8007b0e:	3501      	adds	r5, #1
 8007b10:	68e3      	ldr	r3, [r4, #12]
 8007b12:	6832      	ldr	r2, [r6, #0]
 8007b14:	1a9b      	subs	r3, r3, r2
 8007b16:	42ab      	cmp	r3, r5
 8007b18:	ddd2      	ble.n	8007ac0 <_printf_common+0x3c>
 8007b1a:	0022      	movs	r2, r4
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	9901      	ldr	r1, [sp, #4]
 8007b20:	9800      	ldr	r0, [sp, #0]
 8007b22:	9f08      	ldr	r7, [sp, #32]
 8007b24:	3219      	adds	r2, #25
 8007b26:	47b8      	blx	r7
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d1f0      	bne.n	8007b0e <_printf_common+0x8a>
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	4240      	negs	r0, r0
 8007b30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007b32:	2030      	movs	r0, #48	@ 0x30
 8007b34:	18e1      	adds	r1, r4, r3
 8007b36:	3143      	adds	r1, #67	@ 0x43
 8007b38:	7008      	strb	r0, [r1, #0]
 8007b3a:	0021      	movs	r1, r4
 8007b3c:	1c5a      	adds	r2, r3, #1
 8007b3e:	3145      	adds	r1, #69	@ 0x45
 8007b40:	7809      	ldrb	r1, [r1, #0]
 8007b42:	18a2      	adds	r2, r4, r2
 8007b44:	3243      	adds	r2, #67	@ 0x43
 8007b46:	3302      	adds	r3, #2
 8007b48:	7011      	strb	r1, [r2, #0]
 8007b4a:	e7c1      	b.n	8007ad0 <_printf_common+0x4c>
 8007b4c:	0022      	movs	r2, r4
 8007b4e:	2301      	movs	r3, #1
 8007b50:	9901      	ldr	r1, [sp, #4]
 8007b52:	9800      	ldr	r0, [sp, #0]
 8007b54:	9f08      	ldr	r7, [sp, #32]
 8007b56:	321a      	adds	r2, #26
 8007b58:	47b8      	blx	r7
 8007b5a:	3001      	adds	r0, #1
 8007b5c:	d0e6      	beq.n	8007b2c <_printf_common+0xa8>
 8007b5e:	3601      	adds	r6, #1
 8007b60:	e7d1      	b.n	8007b06 <_printf_common+0x82>
	...

08007b64 <_printf_i>:
 8007b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b66:	b08b      	sub	sp, #44	@ 0x2c
 8007b68:	9206      	str	r2, [sp, #24]
 8007b6a:	000a      	movs	r2, r1
 8007b6c:	3243      	adds	r2, #67	@ 0x43
 8007b6e:	9307      	str	r3, [sp, #28]
 8007b70:	9005      	str	r0, [sp, #20]
 8007b72:	9203      	str	r2, [sp, #12]
 8007b74:	7e0a      	ldrb	r2, [r1, #24]
 8007b76:	000c      	movs	r4, r1
 8007b78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b7a:	2a78      	cmp	r2, #120	@ 0x78
 8007b7c:	d809      	bhi.n	8007b92 <_printf_i+0x2e>
 8007b7e:	2a62      	cmp	r2, #98	@ 0x62
 8007b80:	d80b      	bhi.n	8007b9a <_printf_i+0x36>
 8007b82:	2a00      	cmp	r2, #0
 8007b84:	d100      	bne.n	8007b88 <_printf_i+0x24>
 8007b86:	e0ba      	b.n	8007cfe <_printf_i+0x19a>
 8007b88:	497a      	ldr	r1, [pc, #488]	@ (8007d74 <_printf_i+0x210>)
 8007b8a:	9104      	str	r1, [sp, #16]
 8007b8c:	2a58      	cmp	r2, #88	@ 0x58
 8007b8e:	d100      	bne.n	8007b92 <_printf_i+0x2e>
 8007b90:	e08e      	b.n	8007cb0 <_printf_i+0x14c>
 8007b92:	0025      	movs	r5, r4
 8007b94:	3542      	adds	r5, #66	@ 0x42
 8007b96:	702a      	strb	r2, [r5, #0]
 8007b98:	e022      	b.n	8007be0 <_printf_i+0x7c>
 8007b9a:	0010      	movs	r0, r2
 8007b9c:	3863      	subs	r0, #99	@ 0x63
 8007b9e:	2815      	cmp	r0, #21
 8007ba0:	d8f7      	bhi.n	8007b92 <_printf_i+0x2e>
 8007ba2:	f7f8 fab9 	bl	8000118 <__gnu_thumb1_case_shi>
 8007ba6:	0016      	.short	0x0016
 8007ba8:	fff6001f 	.word	0xfff6001f
 8007bac:	fff6fff6 	.word	0xfff6fff6
 8007bb0:	001ffff6 	.word	0x001ffff6
 8007bb4:	fff6fff6 	.word	0xfff6fff6
 8007bb8:	fff6fff6 	.word	0xfff6fff6
 8007bbc:	0036009f 	.word	0x0036009f
 8007bc0:	fff6007e 	.word	0xfff6007e
 8007bc4:	00b0fff6 	.word	0x00b0fff6
 8007bc8:	0036fff6 	.word	0x0036fff6
 8007bcc:	fff6fff6 	.word	0xfff6fff6
 8007bd0:	0082      	.short	0x0082
 8007bd2:	0025      	movs	r5, r4
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	3542      	adds	r5, #66	@ 0x42
 8007bd8:	1d11      	adds	r1, r2, #4
 8007bda:	6019      	str	r1, [r3, #0]
 8007bdc:	6813      	ldr	r3, [r2, #0]
 8007bde:	702b      	strb	r3, [r5, #0]
 8007be0:	2301      	movs	r3, #1
 8007be2:	e09e      	b.n	8007d22 <_printf_i+0x1be>
 8007be4:	6818      	ldr	r0, [r3, #0]
 8007be6:	6809      	ldr	r1, [r1, #0]
 8007be8:	1d02      	adds	r2, r0, #4
 8007bea:	060d      	lsls	r5, r1, #24
 8007bec:	d50b      	bpl.n	8007c06 <_printf_i+0xa2>
 8007bee:	6806      	ldr	r6, [r0, #0]
 8007bf0:	601a      	str	r2, [r3, #0]
 8007bf2:	2e00      	cmp	r6, #0
 8007bf4:	da03      	bge.n	8007bfe <_printf_i+0x9a>
 8007bf6:	232d      	movs	r3, #45	@ 0x2d
 8007bf8:	9a03      	ldr	r2, [sp, #12]
 8007bfa:	4276      	negs	r6, r6
 8007bfc:	7013      	strb	r3, [r2, #0]
 8007bfe:	4b5d      	ldr	r3, [pc, #372]	@ (8007d74 <_printf_i+0x210>)
 8007c00:	270a      	movs	r7, #10
 8007c02:	9304      	str	r3, [sp, #16]
 8007c04:	e018      	b.n	8007c38 <_printf_i+0xd4>
 8007c06:	6806      	ldr	r6, [r0, #0]
 8007c08:	601a      	str	r2, [r3, #0]
 8007c0a:	0649      	lsls	r1, r1, #25
 8007c0c:	d5f1      	bpl.n	8007bf2 <_printf_i+0x8e>
 8007c0e:	b236      	sxth	r6, r6
 8007c10:	e7ef      	b.n	8007bf2 <_printf_i+0x8e>
 8007c12:	6808      	ldr	r0, [r1, #0]
 8007c14:	6819      	ldr	r1, [r3, #0]
 8007c16:	c940      	ldmia	r1!, {r6}
 8007c18:	0605      	lsls	r5, r0, #24
 8007c1a:	d402      	bmi.n	8007c22 <_printf_i+0xbe>
 8007c1c:	0640      	lsls	r0, r0, #25
 8007c1e:	d500      	bpl.n	8007c22 <_printf_i+0xbe>
 8007c20:	b2b6      	uxth	r6, r6
 8007c22:	6019      	str	r1, [r3, #0]
 8007c24:	4b53      	ldr	r3, [pc, #332]	@ (8007d74 <_printf_i+0x210>)
 8007c26:	270a      	movs	r7, #10
 8007c28:	9304      	str	r3, [sp, #16]
 8007c2a:	2a6f      	cmp	r2, #111	@ 0x6f
 8007c2c:	d100      	bne.n	8007c30 <_printf_i+0xcc>
 8007c2e:	3f02      	subs	r7, #2
 8007c30:	0023      	movs	r3, r4
 8007c32:	2200      	movs	r2, #0
 8007c34:	3343      	adds	r3, #67	@ 0x43
 8007c36:	701a      	strb	r2, [r3, #0]
 8007c38:	6863      	ldr	r3, [r4, #4]
 8007c3a:	60a3      	str	r3, [r4, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	db06      	blt.n	8007c4e <_printf_i+0xea>
 8007c40:	2104      	movs	r1, #4
 8007c42:	6822      	ldr	r2, [r4, #0]
 8007c44:	9d03      	ldr	r5, [sp, #12]
 8007c46:	438a      	bics	r2, r1
 8007c48:	6022      	str	r2, [r4, #0]
 8007c4a:	4333      	orrs	r3, r6
 8007c4c:	d00c      	beq.n	8007c68 <_printf_i+0x104>
 8007c4e:	9d03      	ldr	r5, [sp, #12]
 8007c50:	0030      	movs	r0, r6
 8007c52:	0039      	movs	r1, r7
 8007c54:	f7f8 faf0 	bl	8000238 <__aeabi_uidivmod>
 8007c58:	9b04      	ldr	r3, [sp, #16]
 8007c5a:	3d01      	subs	r5, #1
 8007c5c:	5c5b      	ldrb	r3, [r3, r1]
 8007c5e:	702b      	strb	r3, [r5, #0]
 8007c60:	0033      	movs	r3, r6
 8007c62:	0006      	movs	r6, r0
 8007c64:	429f      	cmp	r7, r3
 8007c66:	d9f3      	bls.n	8007c50 <_printf_i+0xec>
 8007c68:	2f08      	cmp	r7, #8
 8007c6a:	d109      	bne.n	8007c80 <_printf_i+0x11c>
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	07db      	lsls	r3, r3, #31
 8007c70:	d506      	bpl.n	8007c80 <_printf_i+0x11c>
 8007c72:	6862      	ldr	r2, [r4, #4]
 8007c74:	6923      	ldr	r3, [r4, #16]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	dc02      	bgt.n	8007c80 <_printf_i+0x11c>
 8007c7a:	2330      	movs	r3, #48	@ 0x30
 8007c7c:	3d01      	subs	r5, #1
 8007c7e:	702b      	strb	r3, [r5, #0]
 8007c80:	9b03      	ldr	r3, [sp, #12]
 8007c82:	1b5b      	subs	r3, r3, r5
 8007c84:	6123      	str	r3, [r4, #16]
 8007c86:	9b07      	ldr	r3, [sp, #28]
 8007c88:	0021      	movs	r1, r4
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	9805      	ldr	r0, [sp, #20]
 8007c8e:	9b06      	ldr	r3, [sp, #24]
 8007c90:	aa09      	add	r2, sp, #36	@ 0x24
 8007c92:	f7ff fef7 	bl	8007a84 <_printf_common>
 8007c96:	3001      	adds	r0, #1
 8007c98:	d148      	bne.n	8007d2c <_printf_i+0x1c8>
 8007c9a:	2001      	movs	r0, #1
 8007c9c:	4240      	negs	r0, r0
 8007c9e:	b00b      	add	sp, #44	@ 0x2c
 8007ca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ca2:	2220      	movs	r2, #32
 8007ca4:	6809      	ldr	r1, [r1, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	6022      	str	r2, [r4, #0]
 8007caa:	2278      	movs	r2, #120	@ 0x78
 8007cac:	4932      	ldr	r1, [pc, #200]	@ (8007d78 <_printf_i+0x214>)
 8007cae:	9104      	str	r1, [sp, #16]
 8007cb0:	0021      	movs	r1, r4
 8007cb2:	3145      	adds	r1, #69	@ 0x45
 8007cb4:	700a      	strb	r2, [r1, #0]
 8007cb6:	6819      	ldr	r1, [r3, #0]
 8007cb8:	6822      	ldr	r2, [r4, #0]
 8007cba:	c940      	ldmia	r1!, {r6}
 8007cbc:	0610      	lsls	r0, r2, #24
 8007cbe:	d402      	bmi.n	8007cc6 <_printf_i+0x162>
 8007cc0:	0650      	lsls	r0, r2, #25
 8007cc2:	d500      	bpl.n	8007cc6 <_printf_i+0x162>
 8007cc4:	b2b6      	uxth	r6, r6
 8007cc6:	6019      	str	r1, [r3, #0]
 8007cc8:	07d3      	lsls	r3, r2, #31
 8007cca:	d502      	bpl.n	8007cd2 <_printf_i+0x16e>
 8007ccc:	2320      	movs	r3, #32
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	6023      	str	r3, [r4, #0]
 8007cd2:	2e00      	cmp	r6, #0
 8007cd4:	d001      	beq.n	8007cda <_printf_i+0x176>
 8007cd6:	2710      	movs	r7, #16
 8007cd8:	e7aa      	b.n	8007c30 <_printf_i+0xcc>
 8007cda:	2220      	movs	r2, #32
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	4393      	bics	r3, r2
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	e7f8      	b.n	8007cd6 <_printf_i+0x172>
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	680d      	ldr	r5, [r1, #0]
 8007ce8:	1d10      	adds	r0, r2, #4
 8007cea:	6949      	ldr	r1, [r1, #20]
 8007cec:	6018      	str	r0, [r3, #0]
 8007cee:	6813      	ldr	r3, [r2, #0]
 8007cf0:	062e      	lsls	r6, r5, #24
 8007cf2:	d501      	bpl.n	8007cf8 <_printf_i+0x194>
 8007cf4:	6019      	str	r1, [r3, #0]
 8007cf6:	e002      	b.n	8007cfe <_printf_i+0x19a>
 8007cf8:	066d      	lsls	r5, r5, #25
 8007cfa:	d5fb      	bpl.n	8007cf4 <_printf_i+0x190>
 8007cfc:	8019      	strh	r1, [r3, #0]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	9d03      	ldr	r5, [sp, #12]
 8007d02:	6123      	str	r3, [r4, #16]
 8007d04:	e7bf      	b.n	8007c86 <_printf_i+0x122>
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	1d11      	adds	r1, r2, #4
 8007d0a:	6019      	str	r1, [r3, #0]
 8007d0c:	6815      	ldr	r5, [r2, #0]
 8007d0e:	2100      	movs	r1, #0
 8007d10:	0028      	movs	r0, r5
 8007d12:	6862      	ldr	r2, [r4, #4]
 8007d14:	f000 f856 	bl	8007dc4 <memchr>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d001      	beq.n	8007d20 <_printf_i+0x1bc>
 8007d1c:	1b40      	subs	r0, r0, r5
 8007d1e:	6060      	str	r0, [r4, #4]
 8007d20:	6863      	ldr	r3, [r4, #4]
 8007d22:	6123      	str	r3, [r4, #16]
 8007d24:	2300      	movs	r3, #0
 8007d26:	9a03      	ldr	r2, [sp, #12]
 8007d28:	7013      	strb	r3, [r2, #0]
 8007d2a:	e7ac      	b.n	8007c86 <_printf_i+0x122>
 8007d2c:	002a      	movs	r2, r5
 8007d2e:	6923      	ldr	r3, [r4, #16]
 8007d30:	9906      	ldr	r1, [sp, #24]
 8007d32:	9805      	ldr	r0, [sp, #20]
 8007d34:	9d07      	ldr	r5, [sp, #28]
 8007d36:	47a8      	blx	r5
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d0ae      	beq.n	8007c9a <_printf_i+0x136>
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	079b      	lsls	r3, r3, #30
 8007d40:	d415      	bmi.n	8007d6e <_printf_i+0x20a>
 8007d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d44:	68e0      	ldr	r0, [r4, #12]
 8007d46:	4298      	cmp	r0, r3
 8007d48:	daa9      	bge.n	8007c9e <_printf_i+0x13a>
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	e7a7      	b.n	8007c9e <_printf_i+0x13a>
 8007d4e:	0022      	movs	r2, r4
 8007d50:	2301      	movs	r3, #1
 8007d52:	9906      	ldr	r1, [sp, #24]
 8007d54:	9805      	ldr	r0, [sp, #20]
 8007d56:	9e07      	ldr	r6, [sp, #28]
 8007d58:	3219      	adds	r2, #25
 8007d5a:	47b0      	blx	r6
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d09c      	beq.n	8007c9a <_printf_i+0x136>
 8007d60:	3501      	adds	r5, #1
 8007d62:	68e3      	ldr	r3, [r4, #12]
 8007d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d66:	1a9b      	subs	r3, r3, r2
 8007d68:	42ab      	cmp	r3, r5
 8007d6a:	dcf0      	bgt.n	8007d4e <_printf_i+0x1ea>
 8007d6c:	e7e9      	b.n	8007d42 <_printf_i+0x1de>
 8007d6e:	2500      	movs	r5, #0
 8007d70:	e7f7      	b.n	8007d62 <_printf_i+0x1fe>
 8007d72:	46c0      	nop			@ (mov r8, r8)
 8007d74:	08008da2 	.word	0x08008da2
 8007d78:	08008db3 	.word	0x08008db3

08007d7c <memmove>:
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	4288      	cmp	r0, r1
 8007d80:	d902      	bls.n	8007d88 <memmove+0xc>
 8007d82:	188b      	adds	r3, r1, r2
 8007d84:	4298      	cmp	r0, r3
 8007d86:	d308      	bcc.n	8007d9a <memmove+0x1e>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d007      	beq.n	8007d9e <memmove+0x22>
 8007d8e:	5ccc      	ldrb	r4, [r1, r3]
 8007d90:	54c4      	strb	r4, [r0, r3]
 8007d92:	3301      	adds	r3, #1
 8007d94:	e7f9      	b.n	8007d8a <memmove+0xe>
 8007d96:	5c8b      	ldrb	r3, [r1, r2]
 8007d98:	5483      	strb	r3, [r0, r2]
 8007d9a:	3a01      	subs	r2, #1
 8007d9c:	d2fb      	bcs.n	8007d96 <memmove+0x1a>
 8007d9e:	bd10      	pop	{r4, pc}

08007da0 <_sbrk_r>:
 8007da0:	2300      	movs	r3, #0
 8007da2:	b570      	push	{r4, r5, r6, lr}
 8007da4:	4d06      	ldr	r5, [pc, #24]	@ (8007dc0 <_sbrk_r+0x20>)
 8007da6:	0004      	movs	r4, r0
 8007da8:	0008      	movs	r0, r1
 8007daa:	602b      	str	r3, [r5, #0]
 8007dac:	f7f9 fd16 	bl	80017dc <_sbrk>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d103      	bne.n	8007dbc <_sbrk_r+0x1c>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d000      	beq.n	8007dbc <_sbrk_r+0x1c>
 8007dba:	6023      	str	r3, [r4, #0]
 8007dbc:	bd70      	pop	{r4, r5, r6, pc}
 8007dbe:	46c0      	nop			@ (mov r8, r8)
 8007dc0:	200003c0 	.word	0x200003c0

08007dc4 <memchr>:
 8007dc4:	b2c9      	uxtb	r1, r1
 8007dc6:	1882      	adds	r2, r0, r2
 8007dc8:	4290      	cmp	r0, r2
 8007dca:	d101      	bne.n	8007dd0 <memchr+0xc>
 8007dcc:	2000      	movs	r0, #0
 8007dce:	4770      	bx	lr
 8007dd0:	7803      	ldrb	r3, [r0, #0]
 8007dd2:	428b      	cmp	r3, r1
 8007dd4:	d0fb      	beq.n	8007dce <memchr+0xa>
 8007dd6:	3001      	adds	r0, #1
 8007dd8:	e7f6      	b.n	8007dc8 <memchr+0x4>

08007dda <memcpy>:
 8007dda:	2300      	movs	r3, #0
 8007ddc:	b510      	push	{r4, lr}
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d100      	bne.n	8007de4 <memcpy+0xa>
 8007de2:	bd10      	pop	{r4, pc}
 8007de4:	5ccc      	ldrb	r4, [r1, r3]
 8007de6:	54c4      	strb	r4, [r0, r3]
 8007de8:	3301      	adds	r3, #1
 8007dea:	e7f8      	b.n	8007dde <memcpy+0x4>

08007dec <_realloc_r>:
 8007dec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007dee:	0006      	movs	r6, r0
 8007df0:	000c      	movs	r4, r1
 8007df2:	0015      	movs	r5, r2
 8007df4:	2900      	cmp	r1, #0
 8007df6:	d105      	bne.n	8007e04 <_realloc_r+0x18>
 8007df8:	0011      	movs	r1, r2
 8007dfa:	f7ff fc55 	bl	80076a8 <_malloc_r>
 8007dfe:	0004      	movs	r4, r0
 8007e00:	0020      	movs	r0, r4
 8007e02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007e04:	2a00      	cmp	r2, #0
 8007e06:	d103      	bne.n	8007e10 <_realloc_r+0x24>
 8007e08:	f7ff fbe2 	bl	80075d0 <_free_r>
 8007e0c:	002c      	movs	r4, r5
 8007e0e:	e7f7      	b.n	8007e00 <_realloc_r+0x14>
 8007e10:	f000 f81c 	bl	8007e4c <_malloc_usable_size_r>
 8007e14:	0007      	movs	r7, r0
 8007e16:	4285      	cmp	r5, r0
 8007e18:	d802      	bhi.n	8007e20 <_realloc_r+0x34>
 8007e1a:	0843      	lsrs	r3, r0, #1
 8007e1c:	42ab      	cmp	r3, r5
 8007e1e:	d3ef      	bcc.n	8007e00 <_realloc_r+0x14>
 8007e20:	0029      	movs	r1, r5
 8007e22:	0030      	movs	r0, r6
 8007e24:	f7ff fc40 	bl	80076a8 <_malloc_r>
 8007e28:	9001      	str	r0, [sp, #4]
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d101      	bne.n	8007e32 <_realloc_r+0x46>
 8007e2e:	9c01      	ldr	r4, [sp, #4]
 8007e30:	e7e6      	b.n	8007e00 <_realloc_r+0x14>
 8007e32:	002a      	movs	r2, r5
 8007e34:	42bd      	cmp	r5, r7
 8007e36:	d900      	bls.n	8007e3a <_realloc_r+0x4e>
 8007e38:	003a      	movs	r2, r7
 8007e3a:	0021      	movs	r1, r4
 8007e3c:	9801      	ldr	r0, [sp, #4]
 8007e3e:	f7ff ffcc 	bl	8007dda <memcpy>
 8007e42:	0021      	movs	r1, r4
 8007e44:	0030      	movs	r0, r6
 8007e46:	f7ff fbc3 	bl	80075d0 <_free_r>
 8007e4a:	e7f0      	b.n	8007e2e <_realloc_r+0x42>

08007e4c <_malloc_usable_size_r>:
 8007e4c:	1f0b      	subs	r3, r1, #4
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	1f18      	subs	r0, r3, #4
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	da01      	bge.n	8007e5a <_malloc_usable_size_r+0xe>
 8007e56:	580b      	ldr	r3, [r1, r0]
 8007e58:	18c0      	adds	r0, r0, r3
 8007e5a:	4770      	bx	lr

08007e5c <_init>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	46c0      	nop			@ (mov r8, r8)
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr

08007e68 <_fini>:
 8007e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6a:	46c0      	nop			@ (mov r8, r8)
 8007e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e6e:	bc08      	pop	{r3}
 8007e70:	469e      	mov	lr, r3
 8007e72:	4770      	bx	lr
