
CWH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006148  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08006208  08006208  00007208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006820  08006820  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006820  08006820  00007820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006828  08006828  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006828  08006828  00007828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800682c  0800682c  0000782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006830  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  2000005c  0800688c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0800688c  00008354  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb3d  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228b  00000000  00000000  00016bc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  00018e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a70  00000000  00000000  00019bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c47  00000000  00000000  0001a628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bfe  00000000  00000000  0003026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086072  00000000  00000000  00040e6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c6edf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003614  00000000  00000000  000c6f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000ca538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080061f0 	.word	0x080061f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080061f0 	.word	0x080061f0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 fe12 	bl	8000ecc <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 fe0d 	bl	8000ecc <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__aeabi_fdiv>:
 800041c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041e:	4646      	mov	r6, r8
 8000420:	464f      	mov	r7, r9
 8000422:	46d6      	mov	lr, sl
 8000424:	0245      	lsls	r5, r0, #9
 8000426:	b5c0      	push	{r6, r7, lr}
 8000428:	0fc3      	lsrs	r3, r0, #31
 800042a:	0047      	lsls	r7, r0, #1
 800042c:	4698      	mov	r8, r3
 800042e:	1c0e      	adds	r6, r1, #0
 8000430:	0a6d      	lsrs	r5, r5, #9
 8000432:	0e3f      	lsrs	r7, r7, #24
 8000434:	d05b      	beq.n	80004ee <__aeabi_fdiv+0xd2>
 8000436:	2fff      	cmp	r7, #255	@ 0xff
 8000438:	d021      	beq.n	800047e <__aeabi_fdiv+0x62>
 800043a:	2380      	movs	r3, #128	@ 0x80
 800043c:	00ed      	lsls	r5, r5, #3
 800043e:	04db      	lsls	r3, r3, #19
 8000440:	431d      	orrs	r5, r3
 8000442:	2300      	movs	r3, #0
 8000444:	4699      	mov	r9, r3
 8000446:	469a      	mov	sl, r3
 8000448:	3f7f      	subs	r7, #127	@ 0x7f
 800044a:	0274      	lsls	r4, r6, #9
 800044c:	0073      	lsls	r3, r6, #1
 800044e:	0a64      	lsrs	r4, r4, #9
 8000450:	0e1b      	lsrs	r3, r3, #24
 8000452:	0ff6      	lsrs	r6, r6, #31
 8000454:	2b00      	cmp	r3, #0
 8000456:	d020      	beq.n	800049a <__aeabi_fdiv+0x7e>
 8000458:	2bff      	cmp	r3, #255	@ 0xff
 800045a:	d043      	beq.n	80004e4 <__aeabi_fdiv+0xc8>
 800045c:	2280      	movs	r2, #128	@ 0x80
 800045e:	2000      	movs	r0, #0
 8000460:	00e4      	lsls	r4, r4, #3
 8000462:	04d2      	lsls	r2, r2, #19
 8000464:	4314      	orrs	r4, r2
 8000466:	3b7f      	subs	r3, #127	@ 0x7f
 8000468:	4642      	mov	r2, r8
 800046a:	1aff      	subs	r7, r7, r3
 800046c:	464b      	mov	r3, r9
 800046e:	4072      	eors	r2, r6
 8000470:	2b0f      	cmp	r3, #15
 8000472:	d900      	bls.n	8000476 <__aeabi_fdiv+0x5a>
 8000474:	e09d      	b.n	80005b2 <__aeabi_fdiv+0x196>
 8000476:	4971      	ldr	r1, [pc, #452]	@ (800063c <__aeabi_fdiv+0x220>)
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	58cb      	ldr	r3, [r1, r3]
 800047c:	469f      	mov	pc, r3
 800047e:	2d00      	cmp	r5, #0
 8000480:	d15a      	bne.n	8000538 <__aeabi_fdiv+0x11c>
 8000482:	2308      	movs	r3, #8
 8000484:	4699      	mov	r9, r3
 8000486:	3b06      	subs	r3, #6
 8000488:	0274      	lsls	r4, r6, #9
 800048a:	469a      	mov	sl, r3
 800048c:	0073      	lsls	r3, r6, #1
 800048e:	27ff      	movs	r7, #255	@ 0xff
 8000490:	0a64      	lsrs	r4, r4, #9
 8000492:	0e1b      	lsrs	r3, r3, #24
 8000494:	0ff6      	lsrs	r6, r6, #31
 8000496:	2b00      	cmp	r3, #0
 8000498:	d1de      	bne.n	8000458 <__aeabi_fdiv+0x3c>
 800049a:	2c00      	cmp	r4, #0
 800049c:	d13b      	bne.n	8000516 <__aeabi_fdiv+0xfa>
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4649      	mov	r1, r9
 80004a4:	4072      	eors	r2, r6
 80004a6:	4319      	orrs	r1, r3
 80004a8:	290e      	cmp	r1, #14
 80004aa:	d818      	bhi.n	80004de <__aeabi_fdiv+0xc2>
 80004ac:	4864      	ldr	r0, [pc, #400]	@ (8000640 <__aeabi_fdiv+0x224>)
 80004ae:	0089      	lsls	r1, r1, #2
 80004b0:	5841      	ldr	r1, [r0, r1]
 80004b2:	468f      	mov	pc, r1
 80004b4:	4653      	mov	r3, sl
 80004b6:	2b02      	cmp	r3, #2
 80004b8:	d100      	bne.n	80004bc <__aeabi_fdiv+0xa0>
 80004ba:	e0b8      	b.n	800062e <__aeabi_fdiv+0x212>
 80004bc:	2b03      	cmp	r3, #3
 80004be:	d06e      	beq.n	800059e <__aeabi_fdiv+0x182>
 80004c0:	4642      	mov	r2, r8
 80004c2:	002c      	movs	r4, r5
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d140      	bne.n	800054a <__aeabi_fdiv+0x12e>
 80004c8:	2000      	movs	r0, #0
 80004ca:	2400      	movs	r4, #0
 80004cc:	05c0      	lsls	r0, r0, #23
 80004ce:	4320      	orrs	r0, r4
 80004d0:	07d2      	lsls	r2, r2, #31
 80004d2:	4310      	orrs	r0, r2
 80004d4:	bce0      	pop	{r5, r6, r7}
 80004d6:	46ba      	mov	sl, r7
 80004d8:	46b1      	mov	r9, r6
 80004da:	46a8      	mov	r8, r5
 80004dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004de:	20ff      	movs	r0, #255	@ 0xff
 80004e0:	2400      	movs	r4, #0
 80004e2:	e7f3      	b.n	80004cc <__aeabi_fdiv+0xb0>
 80004e4:	2c00      	cmp	r4, #0
 80004e6:	d120      	bne.n	800052a <__aeabi_fdiv+0x10e>
 80004e8:	2302      	movs	r3, #2
 80004ea:	3fff      	subs	r7, #255	@ 0xff
 80004ec:	e7d8      	b.n	80004a0 <__aeabi_fdiv+0x84>
 80004ee:	2d00      	cmp	r5, #0
 80004f0:	d105      	bne.n	80004fe <__aeabi_fdiv+0xe2>
 80004f2:	2304      	movs	r3, #4
 80004f4:	4699      	mov	r9, r3
 80004f6:	3b03      	subs	r3, #3
 80004f8:	2700      	movs	r7, #0
 80004fa:	469a      	mov	sl, r3
 80004fc:	e7a5      	b.n	800044a <__aeabi_fdiv+0x2e>
 80004fe:	0028      	movs	r0, r5
 8000500:	f000 fcc6 	bl	8000e90 <__clzsi2>
 8000504:	2776      	movs	r7, #118	@ 0x76
 8000506:	1f43      	subs	r3, r0, #5
 8000508:	409d      	lsls	r5, r3
 800050a:	2300      	movs	r3, #0
 800050c:	427f      	negs	r7, r7
 800050e:	4699      	mov	r9, r3
 8000510:	469a      	mov	sl, r3
 8000512:	1a3f      	subs	r7, r7, r0
 8000514:	e799      	b.n	800044a <__aeabi_fdiv+0x2e>
 8000516:	0020      	movs	r0, r4
 8000518:	f000 fcba 	bl	8000e90 <__clzsi2>
 800051c:	1f43      	subs	r3, r0, #5
 800051e:	409c      	lsls	r4, r3
 8000520:	2376      	movs	r3, #118	@ 0x76
 8000522:	425b      	negs	r3, r3
 8000524:	1a1b      	subs	r3, r3, r0
 8000526:	2000      	movs	r0, #0
 8000528:	e79e      	b.n	8000468 <__aeabi_fdiv+0x4c>
 800052a:	2303      	movs	r3, #3
 800052c:	464a      	mov	r2, r9
 800052e:	431a      	orrs	r2, r3
 8000530:	4691      	mov	r9, r2
 8000532:	2003      	movs	r0, #3
 8000534:	33fc      	adds	r3, #252	@ 0xfc
 8000536:	e797      	b.n	8000468 <__aeabi_fdiv+0x4c>
 8000538:	230c      	movs	r3, #12
 800053a:	4699      	mov	r9, r3
 800053c:	3b09      	subs	r3, #9
 800053e:	27ff      	movs	r7, #255	@ 0xff
 8000540:	469a      	mov	sl, r3
 8000542:	e782      	b.n	800044a <__aeabi_fdiv+0x2e>
 8000544:	2803      	cmp	r0, #3
 8000546:	d02c      	beq.n	80005a2 <__aeabi_fdiv+0x186>
 8000548:	0032      	movs	r2, r6
 800054a:	0038      	movs	r0, r7
 800054c:	307f      	adds	r0, #127	@ 0x7f
 800054e:	2800      	cmp	r0, #0
 8000550:	dd47      	ble.n	80005e2 <__aeabi_fdiv+0x1c6>
 8000552:	0763      	lsls	r3, r4, #29
 8000554:	d004      	beq.n	8000560 <__aeabi_fdiv+0x144>
 8000556:	230f      	movs	r3, #15
 8000558:	4023      	ands	r3, r4
 800055a:	2b04      	cmp	r3, #4
 800055c:	d000      	beq.n	8000560 <__aeabi_fdiv+0x144>
 800055e:	3404      	adds	r4, #4
 8000560:	0123      	lsls	r3, r4, #4
 8000562:	d503      	bpl.n	800056c <__aeabi_fdiv+0x150>
 8000564:	0038      	movs	r0, r7
 8000566:	4b37      	ldr	r3, [pc, #220]	@ (8000644 <__aeabi_fdiv+0x228>)
 8000568:	3080      	adds	r0, #128	@ 0x80
 800056a:	401c      	ands	r4, r3
 800056c:	28fe      	cmp	r0, #254	@ 0xfe
 800056e:	dcb6      	bgt.n	80004de <__aeabi_fdiv+0xc2>
 8000570:	01a4      	lsls	r4, r4, #6
 8000572:	0a64      	lsrs	r4, r4, #9
 8000574:	b2c0      	uxtb	r0, r0
 8000576:	e7a9      	b.n	80004cc <__aeabi_fdiv+0xb0>
 8000578:	2480      	movs	r4, #128	@ 0x80
 800057a:	2200      	movs	r2, #0
 800057c:	20ff      	movs	r0, #255	@ 0xff
 800057e:	03e4      	lsls	r4, r4, #15
 8000580:	e7a4      	b.n	80004cc <__aeabi_fdiv+0xb0>
 8000582:	2380      	movs	r3, #128	@ 0x80
 8000584:	03db      	lsls	r3, r3, #15
 8000586:	421d      	tst	r5, r3
 8000588:	d001      	beq.n	800058e <__aeabi_fdiv+0x172>
 800058a:	421c      	tst	r4, r3
 800058c:	d00b      	beq.n	80005a6 <__aeabi_fdiv+0x18a>
 800058e:	2480      	movs	r4, #128	@ 0x80
 8000590:	03e4      	lsls	r4, r4, #15
 8000592:	432c      	orrs	r4, r5
 8000594:	0264      	lsls	r4, r4, #9
 8000596:	4642      	mov	r2, r8
 8000598:	20ff      	movs	r0, #255	@ 0xff
 800059a:	0a64      	lsrs	r4, r4, #9
 800059c:	e796      	b.n	80004cc <__aeabi_fdiv+0xb0>
 800059e:	4646      	mov	r6, r8
 80005a0:	002c      	movs	r4, r5
 80005a2:	2380      	movs	r3, #128	@ 0x80
 80005a4:	03db      	lsls	r3, r3, #15
 80005a6:	431c      	orrs	r4, r3
 80005a8:	0264      	lsls	r4, r4, #9
 80005aa:	0032      	movs	r2, r6
 80005ac:	20ff      	movs	r0, #255	@ 0xff
 80005ae:	0a64      	lsrs	r4, r4, #9
 80005b0:	e78c      	b.n	80004cc <__aeabi_fdiv+0xb0>
 80005b2:	016d      	lsls	r5, r5, #5
 80005b4:	0160      	lsls	r0, r4, #5
 80005b6:	4285      	cmp	r5, r0
 80005b8:	d22d      	bcs.n	8000616 <__aeabi_fdiv+0x1fa>
 80005ba:	231b      	movs	r3, #27
 80005bc:	2400      	movs	r4, #0
 80005be:	3f01      	subs	r7, #1
 80005c0:	2601      	movs	r6, #1
 80005c2:	0029      	movs	r1, r5
 80005c4:	0064      	lsls	r4, r4, #1
 80005c6:	006d      	lsls	r5, r5, #1
 80005c8:	2900      	cmp	r1, #0
 80005ca:	db01      	blt.n	80005d0 <__aeabi_fdiv+0x1b4>
 80005cc:	4285      	cmp	r5, r0
 80005ce:	d301      	bcc.n	80005d4 <__aeabi_fdiv+0x1b8>
 80005d0:	1a2d      	subs	r5, r5, r0
 80005d2:	4334      	orrs	r4, r6
 80005d4:	3b01      	subs	r3, #1
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1f3      	bne.n	80005c2 <__aeabi_fdiv+0x1a6>
 80005da:	1e6b      	subs	r3, r5, #1
 80005dc:	419d      	sbcs	r5, r3
 80005de:	432c      	orrs	r4, r5
 80005e0:	e7b3      	b.n	800054a <__aeabi_fdiv+0x12e>
 80005e2:	2301      	movs	r3, #1
 80005e4:	1a1b      	subs	r3, r3, r0
 80005e6:	2b1b      	cmp	r3, #27
 80005e8:	dd00      	ble.n	80005ec <__aeabi_fdiv+0x1d0>
 80005ea:	e76d      	b.n	80004c8 <__aeabi_fdiv+0xac>
 80005ec:	0021      	movs	r1, r4
 80005ee:	379e      	adds	r7, #158	@ 0x9e
 80005f0:	40d9      	lsrs	r1, r3
 80005f2:	40bc      	lsls	r4, r7
 80005f4:	000b      	movs	r3, r1
 80005f6:	1e61      	subs	r1, r4, #1
 80005f8:	418c      	sbcs	r4, r1
 80005fa:	4323      	orrs	r3, r4
 80005fc:	0759      	lsls	r1, r3, #29
 80005fe:	d004      	beq.n	800060a <__aeabi_fdiv+0x1ee>
 8000600:	210f      	movs	r1, #15
 8000602:	4019      	ands	r1, r3
 8000604:	2904      	cmp	r1, #4
 8000606:	d000      	beq.n	800060a <__aeabi_fdiv+0x1ee>
 8000608:	3304      	adds	r3, #4
 800060a:	0159      	lsls	r1, r3, #5
 800060c:	d413      	bmi.n	8000636 <__aeabi_fdiv+0x21a>
 800060e:	019b      	lsls	r3, r3, #6
 8000610:	2000      	movs	r0, #0
 8000612:	0a5c      	lsrs	r4, r3, #9
 8000614:	e75a      	b.n	80004cc <__aeabi_fdiv+0xb0>
 8000616:	231a      	movs	r3, #26
 8000618:	2401      	movs	r4, #1
 800061a:	1a2d      	subs	r5, r5, r0
 800061c:	e7d0      	b.n	80005c0 <__aeabi_fdiv+0x1a4>
 800061e:	1e98      	subs	r0, r3, #2
 8000620:	4243      	negs	r3, r0
 8000622:	4158      	adcs	r0, r3
 8000624:	4240      	negs	r0, r0
 8000626:	0032      	movs	r2, r6
 8000628:	2400      	movs	r4, #0
 800062a:	b2c0      	uxtb	r0, r0
 800062c:	e74e      	b.n	80004cc <__aeabi_fdiv+0xb0>
 800062e:	4642      	mov	r2, r8
 8000630:	20ff      	movs	r0, #255	@ 0xff
 8000632:	2400      	movs	r4, #0
 8000634:	e74a      	b.n	80004cc <__aeabi_fdiv+0xb0>
 8000636:	2001      	movs	r0, #1
 8000638:	2400      	movs	r4, #0
 800063a:	e747      	b.n	80004cc <__aeabi_fdiv+0xb0>
 800063c:	08006704 	.word	0x08006704
 8000640:	08006744 	.word	0x08006744
 8000644:	f7ffffff 	.word	0xf7ffffff

08000648 <__aeabi_fmul>:
 8000648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800064a:	464f      	mov	r7, r9
 800064c:	4646      	mov	r6, r8
 800064e:	46d6      	mov	lr, sl
 8000650:	0044      	lsls	r4, r0, #1
 8000652:	b5c0      	push	{r6, r7, lr}
 8000654:	0246      	lsls	r6, r0, #9
 8000656:	1c0f      	adds	r7, r1, #0
 8000658:	0a76      	lsrs	r6, r6, #9
 800065a:	0e24      	lsrs	r4, r4, #24
 800065c:	0fc5      	lsrs	r5, r0, #31
 800065e:	2c00      	cmp	r4, #0
 8000660:	d100      	bne.n	8000664 <__aeabi_fmul+0x1c>
 8000662:	e0da      	b.n	800081a <__aeabi_fmul+0x1d2>
 8000664:	2cff      	cmp	r4, #255	@ 0xff
 8000666:	d074      	beq.n	8000752 <__aeabi_fmul+0x10a>
 8000668:	2380      	movs	r3, #128	@ 0x80
 800066a:	00f6      	lsls	r6, r6, #3
 800066c:	04db      	lsls	r3, r3, #19
 800066e:	431e      	orrs	r6, r3
 8000670:	2300      	movs	r3, #0
 8000672:	4699      	mov	r9, r3
 8000674:	469a      	mov	sl, r3
 8000676:	3c7f      	subs	r4, #127	@ 0x7f
 8000678:	027b      	lsls	r3, r7, #9
 800067a:	0a5b      	lsrs	r3, r3, #9
 800067c:	4698      	mov	r8, r3
 800067e:	007b      	lsls	r3, r7, #1
 8000680:	0e1b      	lsrs	r3, r3, #24
 8000682:	0fff      	lsrs	r7, r7, #31
 8000684:	2b00      	cmp	r3, #0
 8000686:	d074      	beq.n	8000772 <__aeabi_fmul+0x12a>
 8000688:	2bff      	cmp	r3, #255	@ 0xff
 800068a:	d100      	bne.n	800068e <__aeabi_fmul+0x46>
 800068c:	e08e      	b.n	80007ac <__aeabi_fmul+0x164>
 800068e:	4642      	mov	r2, r8
 8000690:	2180      	movs	r1, #128	@ 0x80
 8000692:	00d2      	lsls	r2, r2, #3
 8000694:	04c9      	lsls	r1, r1, #19
 8000696:	4311      	orrs	r1, r2
 8000698:	3b7f      	subs	r3, #127	@ 0x7f
 800069a:	002a      	movs	r2, r5
 800069c:	18e4      	adds	r4, r4, r3
 800069e:	464b      	mov	r3, r9
 80006a0:	407a      	eors	r2, r7
 80006a2:	4688      	mov	r8, r1
 80006a4:	b2d2      	uxtb	r2, r2
 80006a6:	2b0a      	cmp	r3, #10
 80006a8:	dc75      	bgt.n	8000796 <__aeabi_fmul+0x14e>
 80006aa:	464b      	mov	r3, r9
 80006ac:	2000      	movs	r0, #0
 80006ae:	2b02      	cmp	r3, #2
 80006b0:	dd0f      	ble.n	80006d2 <__aeabi_fmul+0x8a>
 80006b2:	4649      	mov	r1, r9
 80006b4:	2301      	movs	r3, #1
 80006b6:	408b      	lsls	r3, r1
 80006b8:	21a6      	movs	r1, #166	@ 0xa6
 80006ba:	00c9      	lsls	r1, r1, #3
 80006bc:	420b      	tst	r3, r1
 80006be:	d169      	bne.n	8000794 <__aeabi_fmul+0x14c>
 80006c0:	2190      	movs	r1, #144	@ 0x90
 80006c2:	0089      	lsls	r1, r1, #2
 80006c4:	420b      	tst	r3, r1
 80006c6:	d000      	beq.n	80006ca <__aeabi_fmul+0x82>
 80006c8:	e100      	b.n	80008cc <__aeabi_fmul+0x284>
 80006ca:	2188      	movs	r1, #136	@ 0x88
 80006cc:	4219      	tst	r1, r3
 80006ce:	d000      	beq.n	80006d2 <__aeabi_fmul+0x8a>
 80006d0:	e0f5      	b.n	80008be <__aeabi_fmul+0x276>
 80006d2:	4641      	mov	r1, r8
 80006d4:	0409      	lsls	r1, r1, #16
 80006d6:	0c09      	lsrs	r1, r1, #16
 80006d8:	4643      	mov	r3, r8
 80006da:	0008      	movs	r0, r1
 80006dc:	0c35      	lsrs	r5, r6, #16
 80006de:	0436      	lsls	r6, r6, #16
 80006e0:	0c1b      	lsrs	r3, r3, #16
 80006e2:	0c36      	lsrs	r6, r6, #16
 80006e4:	4370      	muls	r0, r6
 80006e6:	4369      	muls	r1, r5
 80006e8:	435e      	muls	r6, r3
 80006ea:	435d      	muls	r5, r3
 80006ec:	1876      	adds	r6, r6, r1
 80006ee:	0c03      	lsrs	r3, r0, #16
 80006f0:	199b      	adds	r3, r3, r6
 80006f2:	4299      	cmp	r1, r3
 80006f4:	d903      	bls.n	80006fe <__aeabi_fmul+0xb6>
 80006f6:	2180      	movs	r1, #128	@ 0x80
 80006f8:	0249      	lsls	r1, r1, #9
 80006fa:	468c      	mov	ip, r1
 80006fc:	4465      	add	r5, ip
 80006fe:	0400      	lsls	r0, r0, #16
 8000700:	0419      	lsls	r1, r3, #16
 8000702:	0c00      	lsrs	r0, r0, #16
 8000704:	1809      	adds	r1, r1, r0
 8000706:	018e      	lsls	r6, r1, #6
 8000708:	1e70      	subs	r0, r6, #1
 800070a:	4186      	sbcs	r6, r0
 800070c:	0c1b      	lsrs	r3, r3, #16
 800070e:	0e89      	lsrs	r1, r1, #26
 8000710:	195b      	adds	r3, r3, r5
 8000712:	430e      	orrs	r6, r1
 8000714:	019b      	lsls	r3, r3, #6
 8000716:	431e      	orrs	r6, r3
 8000718:	011b      	lsls	r3, r3, #4
 800071a:	d46c      	bmi.n	80007f6 <__aeabi_fmul+0x1ae>
 800071c:	0023      	movs	r3, r4
 800071e:	337f      	adds	r3, #127	@ 0x7f
 8000720:	2b00      	cmp	r3, #0
 8000722:	dc00      	bgt.n	8000726 <__aeabi_fmul+0xde>
 8000724:	e0b1      	b.n	800088a <__aeabi_fmul+0x242>
 8000726:	0015      	movs	r5, r2
 8000728:	0771      	lsls	r1, r6, #29
 800072a:	d00b      	beq.n	8000744 <__aeabi_fmul+0xfc>
 800072c:	200f      	movs	r0, #15
 800072e:	0021      	movs	r1, r4
 8000730:	4030      	ands	r0, r6
 8000732:	2804      	cmp	r0, #4
 8000734:	d006      	beq.n	8000744 <__aeabi_fmul+0xfc>
 8000736:	3604      	adds	r6, #4
 8000738:	0132      	lsls	r2, r6, #4
 800073a:	d503      	bpl.n	8000744 <__aeabi_fmul+0xfc>
 800073c:	4b6e      	ldr	r3, [pc, #440]	@ (80008f8 <__aeabi_fmul+0x2b0>)
 800073e:	401e      	ands	r6, r3
 8000740:	000b      	movs	r3, r1
 8000742:	3380      	adds	r3, #128	@ 0x80
 8000744:	2bfe      	cmp	r3, #254	@ 0xfe
 8000746:	dd00      	ble.n	800074a <__aeabi_fmul+0x102>
 8000748:	e0bd      	b.n	80008c6 <__aeabi_fmul+0x27e>
 800074a:	01b2      	lsls	r2, r6, #6
 800074c:	0a52      	lsrs	r2, r2, #9
 800074e:	b2db      	uxtb	r3, r3
 8000750:	e048      	b.n	80007e4 <__aeabi_fmul+0x19c>
 8000752:	2e00      	cmp	r6, #0
 8000754:	d000      	beq.n	8000758 <__aeabi_fmul+0x110>
 8000756:	e092      	b.n	800087e <__aeabi_fmul+0x236>
 8000758:	2308      	movs	r3, #8
 800075a:	4699      	mov	r9, r3
 800075c:	3b06      	subs	r3, #6
 800075e:	469a      	mov	sl, r3
 8000760:	027b      	lsls	r3, r7, #9
 8000762:	0a5b      	lsrs	r3, r3, #9
 8000764:	4698      	mov	r8, r3
 8000766:	007b      	lsls	r3, r7, #1
 8000768:	24ff      	movs	r4, #255	@ 0xff
 800076a:	0e1b      	lsrs	r3, r3, #24
 800076c:	0fff      	lsrs	r7, r7, #31
 800076e:	2b00      	cmp	r3, #0
 8000770:	d18a      	bne.n	8000688 <__aeabi_fmul+0x40>
 8000772:	4642      	mov	r2, r8
 8000774:	2a00      	cmp	r2, #0
 8000776:	d164      	bne.n	8000842 <__aeabi_fmul+0x1fa>
 8000778:	4649      	mov	r1, r9
 800077a:	3201      	adds	r2, #1
 800077c:	4311      	orrs	r1, r2
 800077e:	4689      	mov	r9, r1
 8000780:	290a      	cmp	r1, #10
 8000782:	dc08      	bgt.n	8000796 <__aeabi_fmul+0x14e>
 8000784:	407d      	eors	r5, r7
 8000786:	2001      	movs	r0, #1
 8000788:	b2ea      	uxtb	r2, r5
 800078a:	2902      	cmp	r1, #2
 800078c:	dc91      	bgt.n	80006b2 <__aeabi_fmul+0x6a>
 800078e:	0015      	movs	r5, r2
 8000790:	2200      	movs	r2, #0
 8000792:	e027      	b.n	80007e4 <__aeabi_fmul+0x19c>
 8000794:	0015      	movs	r5, r2
 8000796:	4653      	mov	r3, sl
 8000798:	2b02      	cmp	r3, #2
 800079a:	d100      	bne.n	800079e <__aeabi_fmul+0x156>
 800079c:	e093      	b.n	80008c6 <__aeabi_fmul+0x27e>
 800079e:	2b03      	cmp	r3, #3
 80007a0:	d01a      	beq.n	80007d8 <__aeabi_fmul+0x190>
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d12c      	bne.n	8000800 <__aeabi_fmul+0x1b8>
 80007a6:	2300      	movs	r3, #0
 80007a8:	2200      	movs	r2, #0
 80007aa:	e01b      	b.n	80007e4 <__aeabi_fmul+0x19c>
 80007ac:	4643      	mov	r3, r8
 80007ae:	34ff      	adds	r4, #255	@ 0xff
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d055      	beq.n	8000860 <__aeabi_fmul+0x218>
 80007b4:	2103      	movs	r1, #3
 80007b6:	464b      	mov	r3, r9
 80007b8:	430b      	orrs	r3, r1
 80007ba:	0019      	movs	r1, r3
 80007bc:	2b0a      	cmp	r3, #10
 80007be:	dc00      	bgt.n	80007c2 <__aeabi_fmul+0x17a>
 80007c0:	e092      	b.n	80008e8 <__aeabi_fmul+0x2a0>
 80007c2:	2b0f      	cmp	r3, #15
 80007c4:	d000      	beq.n	80007c8 <__aeabi_fmul+0x180>
 80007c6:	e08c      	b.n	80008e2 <__aeabi_fmul+0x29a>
 80007c8:	2280      	movs	r2, #128	@ 0x80
 80007ca:	03d2      	lsls	r2, r2, #15
 80007cc:	4216      	tst	r6, r2
 80007ce:	d003      	beq.n	80007d8 <__aeabi_fmul+0x190>
 80007d0:	4643      	mov	r3, r8
 80007d2:	4213      	tst	r3, r2
 80007d4:	d100      	bne.n	80007d8 <__aeabi_fmul+0x190>
 80007d6:	e07d      	b.n	80008d4 <__aeabi_fmul+0x28c>
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	03d2      	lsls	r2, r2, #15
 80007dc:	4332      	orrs	r2, r6
 80007de:	0252      	lsls	r2, r2, #9
 80007e0:	0a52      	lsrs	r2, r2, #9
 80007e2:	23ff      	movs	r3, #255	@ 0xff
 80007e4:	05d8      	lsls	r0, r3, #23
 80007e6:	07ed      	lsls	r5, r5, #31
 80007e8:	4310      	orrs	r0, r2
 80007ea:	4328      	orrs	r0, r5
 80007ec:	bce0      	pop	{r5, r6, r7}
 80007ee:	46ba      	mov	sl, r7
 80007f0:	46b1      	mov	r9, r6
 80007f2:	46a8      	mov	r8, r5
 80007f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007f6:	2301      	movs	r3, #1
 80007f8:	0015      	movs	r5, r2
 80007fa:	0871      	lsrs	r1, r6, #1
 80007fc:	401e      	ands	r6, r3
 80007fe:	430e      	orrs	r6, r1
 8000800:	0023      	movs	r3, r4
 8000802:	3380      	adds	r3, #128	@ 0x80
 8000804:	1c61      	adds	r1, r4, #1
 8000806:	2b00      	cmp	r3, #0
 8000808:	dd41      	ble.n	800088e <__aeabi_fmul+0x246>
 800080a:	0772      	lsls	r2, r6, #29
 800080c:	d094      	beq.n	8000738 <__aeabi_fmul+0xf0>
 800080e:	220f      	movs	r2, #15
 8000810:	4032      	ands	r2, r6
 8000812:	2a04      	cmp	r2, #4
 8000814:	d000      	beq.n	8000818 <__aeabi_fmul+0x1d0>
 8000816:	e78e      	b.n	8000736 <__aeabi_fmul+0xee>
 8000818:	e78e      	b.n	8000738 <__aeabi_fmul+0xf0>
 800081a:	2e00      	cmp	r6, #0
 800081c:	d105      	bne.n	800082a <__aeabi_fmul+0x1e2>
 800081e:	2304      	movs	r3, #4
 8000820:	4699      	mov	r9, r3
 8000822:	3b03      	subs	r3, #3
 8000824:	2400      	movs	r4, #0
 8000826:	469a      	mov	sl, r3
 8000828:	e726      	b.n	8000678 <__aeabi_fmul+0x30>
 800082a:	0030      	movs	r0, r6
 800082c:	f000 fb30 	bl	8000e90 <__clzsi2>
 8000830:	2476      	movs	r4, #118	@ 0x76
 8000832:	1f43      	subs	r3, r0, #5
 8000834:	409e      	lsls	r6, r3
 8000836:	2300      	movs	r3, #0
 8000838:	4264      	negs	r4, r4
 800083a:	4699      	mov	r9, r3
 800083c:	469a      	mov	sl, r3
 800083e:	1a24      	subs	r4, r4, r0
 8000840:	e71a      	b.n	8000678 <__aeabi_fmul+0x30>
 8000842:	4640      	mov	r0, r8
 8000844:	f000 fb24 	bl	8000e90 <__clzsi2>
 8000848:	464b      	mov	r3, r9
 800084a:	1a24      	subs	r4, r4, r0
 800084c:	3c76      	subs	r4, #118	@ 0x76
 800084e:	2b0a      	cmp	r3, #10
 8000850:	dca1      	bgt.n	8000796 <__aeabi_fmul+0x14e>
 8000852:	4643      	mov	r3, r8
 8000854:	3805      	subs	r0, #5
 8000856:	4083      	lsls	r3, r0
 8000858:	407d      	eors	r5, r7
 800085a:	4698      	mov	r8, r3
 800085c:	b2ea      	uxtb	r2, r5
 800085e:	e724      	b.n	80006aa <__aeabi_fmul+0x62>
 8000860:	464a      	mov	r2, r9
 8000862:	3302      	adds	r3, #2
 8000864:	4313      	orrs	r3, r2
 8000866:	002a      	movs	r2, r5
 8000868:	407a      	eors	r2, r7
 800086a:	b2d2      	uxtb	r2, r2
 800086c:	2b0a      	cmp	r3, #10
 800086e:	dc92      	bgt.n	8000796 <__aeabi_fmul+0x14e>
 8000870:	4649      	mov	r1, r9
 8000872:	0015      	movs	r5, r2
 8000874:	2900      	cmp	r1, #0
 8000876:	d026      	beq.n	80008c6 <__aeabi_fmul+0x27e>
 8000878:	4699      	mov	r9, r3
 800087a:	2002      	movs	r0, #2
 800087c:	e719      	b.n	80006b2 <__aeabi_fmul+0x6a>
 800087e:	230c      	movs	r3, #12
 8000880:	4699      	mov	r9, r3
 8000882:	3b09      	subs	r3, #9
 8000884:	24ff      	movs	r4, #255	@ 0xff
 8000886:	469a      	mov	sl, r3
 8000888:	e6f6      	b.n	8000678 <__aeabi_fmul+0x30>
 800088a:	0015      	movs	r5, r2
 800088c:	0021      	movs	r1, r4
 800088e:	2201      	movs	r2, #1
 8000890:	1ad3      	subs	r3, r2, r3
 8000892:	2b1b      	cmp	r3, #27
 8000894:	dd00      	ble.n	8000898 <__aeabi_fmul+0x250>
 8000896:	e786      	b.n	80007a6 <__aeabi_fmul+0x15e>
 8000898:	319e      	adds	r1, #158	@ 0x9e
 800089a:	0032      	movs	r2, r6
 800089c:	408e      	lsls	r6, r1
 800089e:	40da      	lsrs	r2, r3
 80008a0:	1e73      	subs	r3, r6, #1
 80008a2:	419e      	sbcs	r6, r3
 80008a4:	4332      	orrs	r2, r6
 80008a6:	0753      	lsls	r3, r2, #29
 80008a8:	d004      	beq.n	80008b4 <__aeabi_fmul+0x26c>
 80008aa:	230f      	movs	r3, #15
 80008ac:	4013      	ands	r3, r2
 80008ae:	2b04      	cmp	r3, #4
 80008b0:	d000      	beq.n	80008b4 <__aeabi_fmul+0x26c>
 80008b2:	3204      	adds	r2, #4
 80008b4:	0153      	lsls	r3, r2, #5
 80008b6:	d510      	bpl.n	80008da <__aeabi_fmul+0x292>
 80008b8:	2301      	movs	r3, #1
 80008ba:	2200      	movs	r2, #0
 80008bc:	e792      	b.n	80007e4 <__aeabi_fmul+0x19c>
 80008be:	003d      	movs	r5, r7
 80008c0:	4646      	mov	r6, r8
 80008c2:	4682      	mov	sl, r0
 80008c4:	e767      	b.n	8000796 <__aeabi_fmul+0x14e>
 80008c6:	23ff      	movs	r3, #255	@ 0xff
 80008c8:	2200      	movs	r2, #0
 80008ca:	e78b      	b.n	80007e4 <__aeabi_fmul+0x19c>
 80008cc:	2280      	movs	r2, #128	@ 0x80
 80008ce:	2500      	movs	r5, #0
 80008d0:	03d2      	lsls	r2, r2, #15
 80008d2:	e786      	b.n	80007e2 <__aeabi_fmul+0x19a>
 80008d4:	003d      	movs	r5, r7
 80008d6:	431a      	orrs	r2, r3
 80008d8:	e783      	b.n	80007e2 <__aeabi_fmul+0x19a>
 80008da:	0192      	lsls	r2, r2, #6
 80008dc:	2300      	movs	r3, #0
 80008de:	0a52      	lsrs	r2, r2, #9
 80008e0:	e780      	b.n	80007e4 <__aeabi_fmul+0x19c>
 80008e2:	003d      	movs	r5, r7
 80008e4:	4646      	mov	r6, r8
 80008e6:	e777      	b.n	80007d8 <__aeabi_fmul+0x190>
 80008e8:	002a      	movs	r2, r5
 80008ea:	2301      	movs	r3, #1
 80008ec:	407a      	eors	r2, r7
 80008ee:	408b      	lsls	r3, r1
 80008f0:	2003      	movs	r0, #3
 80008f2:	b2d2      	uxtb	r2, r2
 80008f4:	e6e9      	b.n	80006ca <__aeabi_fmul+0x82>
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	f7ffffff 	.word	0xf7ffffff

080008fc <__aeabi_fsub>:
 80008fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fe:	4647      	mov	r7, r8
 8000900:	46ce      	mov	lr, r9
 8000902:	0243      	lsls	r3, r0, #9
 8000904:	b580      	push	{r7, lr}
 8000906:	0a5f      	lsrs	r7, r3, #9
 8000908:	099b      	lsrs	r3, r3, #6
 800090a:	0045      	lsls	r5, r0, #1
 800090c:	004a      	lsls	r2, r1, #1
 800090e:	469c      	mov	ip, r3
 8000910:	024b      	lsls	r3, r1, #9
 8000912:	0fc4      	lsrs	r4, r0, #31
 8000914:	0fce      	lsrs	r6, r1, #31
 8000916:	0e2d      	lsrs	r5, r5, #24
 8000918:	0a58      	lsrs	r0, r3, #9
 800091a:	0e12      	lsrs	r2, r2, #24
 800091c:	0999      	lsrs	r1, r3, #6
 800091e:	2aff      	cmp	r2, #255	@ 0xff
 8000920:	d06b      	beq.n	80009fa <__aeabi_fsub+0xfe>
 8000922:	2301      	movs	r3, #1
 8000924:	405e      	eors	r6, r3
 8000926:	1aab      	subs	r3, r5, r2
 8000928:	42b4      	cmp	r4, r6
 800092a:	d04b      	beq.n	80009c4 <__aeabi_fsub+0xc8>
 800092c:	2b00      	cmp	r3, #0
 800092e:	dc00      	bgt.n	8000932 <__aeabi_fsub+0x36>
 8000930:	e0ff      	b.n	8000b32 <__aeabi_fsub+0x236>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d100      	bne.n	8000938 <__aeabi_fsub+0x3c>
 8000936:	e088      	b.n	8000a4a <__aeabi_fsub+0x14e>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fsub+0x42>
 800093c:	e0ef      	b.n	8000b1e <__aeabi_fsub+0x222>
 800093e:	2280      	movs	r2, #128	@ 0x80
 8000940:	04d2      	lsls	r2, r2, #19
 8000942:	4311      	orrs	r1, r2
 8000944:	2001      	movs	r0, #1
 8000946:	2b1b      	cmp	r3, #27
 8000948:	dc08      	bgt.n	800095c <__aeabi_fsub+0x60>
 800094a:	0008      	movs	r0, r1
 800094c:	2220      	movs	r2, #32
 800094e:	40d8      	lsrs	r0, r3
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	4099      	lsls	r1, r3
 8000954:	000b      	movs	r3, r1
 8000956:	1e5a      	subs	r2, r3, #1
 8000958:	4193      	sbcs	r3, r2
 800095a:	4318      	orrs	r0, r3
 800095c:	4663      	mov	r3, ip
 800095e:	1a1b      	subs	r3, r3, r0
 8000960:	469c      	mov	ip, r3
 8000962:	4663      	mov	r3, ip
 8000964:	015b      	lsls	r3, r3, #5
 8000966:	d400      	bmi.n	800096a <__aeabi_fsub+0x6e>
 8000968:	e0cd      	b.n	8000b06 <__aeabi_fsub+0x20a>
 800096a:	4663      	mov	r3, ip
 800096c:	019f      	lsls	r7, r3, #6
 800096e:	09bf      	lsrs	r7, r7, #6
 8000970:	0038      	movs	r0, r7
 8000972:	f000 fa8d 	bl	8000e90 <__clzsi2>
 8000976:	003b      	movs	r3, r7
 8000978:	3805      	subs	r0, #5
 800097a:	4083      	lsls	r3, r0
 800097c:	4285      	cmp	r5, r0
 800097e:	dc00      	bgt.n	8000982 <__aeabi_fsub+0x86>
 8000980:	e0a2      	b.n	8000ac8 <__aeabi_fsub+0x1cc>
 8000982:	4ab7      	ldr	r2, [pc, #732]	@ (8000c60 <__aeabi_fsub+0x364>)
 8000984:	1a2d      	subs	r5, r5, r0
 8000986:	401a      	ands	r2, r3
 8000988:	4694      	mov	ip, r2
 800098a:	075a      	lsls	r2, r3, #29
 800098c:	d100      	bne.n	8000990 <__aeabi_fsub+0x94>
 800098e:	e0c3      	b.n	8000b18 <__aeabi_fsub+0x21c>
 8000990:	220f      	movs	r2, #15
 8000992:	4013      	ands	r3, r2
 8000994:	2b04      	cmp	r3, #4
 8000996:	d100      	bne.n	800099a <__aeabi_fsub+0x9e>
 8000998:	e0be      	b.n	8000b18 <__aeabi_fsub+0x21c>
 800099a:	2304      	movs	r3, #4
 800099c:	4698      	mov	r8, r3
 800099e:	44c4      	add	ip, r8
 80009a0:	4663      	mov	r3, ip
 80009a2:	015b      	lsls	r3, r3, #5
 80009a4:	d400      	bmi.n	80009a8 <__aeabi_fsub+0xac>
 80009a6:	e0b7      	b.n	8000b18 <__aeabi_fsub+0x21c>
 80009a8:	1c68      	adds	r0, r5, #1
 80009aa:	2dfe      	cmp	r5, #254	@ 0xfe
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fsub+0xb4>
 80009ae:	e0a5      	b.n	8000afc <__aeabi_fsub+0x200>
 80009b0:	20ff      	movs	r0, #255	@ 0xff
 80009b2:	2200      	movs	r2, #0
 80009b4:	05c0      	lsls	r0, r0, #23
 80009b6:	4310      	orrs	r0, r2
 80009b8:	07e4      	lsls	r4, r4, #31
 80009ba:	4320      	orrs	r0, r4
 80009bc:	bcc0      	pop	{r6, r7}
 80009be:	46b9      	mov	r9, r7
 80009c0:	46b0      	mov	r8, r6
 80009c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	dc00      	bgt.n	80009ca <__aeabi_fsub+0xce>
 80009c8:	e1eb      	b.n	8000da2 <__aeabi_fsub+0x4a6>
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d046      	beq.n	8000a5c <__aeabi_fsub+0x160>
 80009ce:	2dff      	cmp	r5, #255	@ 0xff
 80009d0:	d100      	bne.n	80009d4 <__aeabi_fsub+0xd8>
 80009d2:	e0a4      	b.n	8000b1e <__aeabi_fsub+0x222>
 80009d4:	2280      	movs	r2, #128	@ 0x80
 80009d6:	04d2      	lsls	r2, r2, #19
 80009d8:	4311      	orrs	r1, r2
 80009da:	2b1b      	cmp	r3, #27
 80009dc:	dc00      	bgt.n	80009e0 <__aeabi_fsub+0xe4>
 80009de:	e0fb      	b.n	8000bd8 <__aeabi_fsub+0x2dc>
 80009e0:	2305      	movs	r3, #5
 80009e2:	4698      	mov	r8, r3
 80009e4:	002b      	movs	r3, r5
 80009e6:	44c4      	add	ip, r8
 80009e8:	4662      	mov	r2, ip
 80009ea:	08d7      	lsrs	r7, r2, #3
 80009ec:	2bff      	cmp	r3, #255	@ 0xff
 80009ee:	d100      	bne.n	80009f2 <__aeabi_fsub+0xf6>
 80009f0:	e095      	b.n	8000b1e <__aeabi_fsub+0x222>
 80009f2:	027a      	lsls	r2, r7, #9
 80009f4:	0a52      	lsrs	r2, r2, #9
 80009f6:	b2d8      	uxtb	r0, r3
 80009f8:	e7dc      	b.n	80009b4 <__aeabi_fsub+0xb8>
 80009fa:	002b      	movs	r3, r5
 80009fc:	3bff      	subs	r3, #255	@ 0xff
 80009fe:	4699      	mov	r9, r3
 8000a00:	2900      	cmp	r1, #0
 8000a02:	d118      	bne.n	8000a36 <__aeabi_fsub+0x13a>
 8000a04:	2301      	movs	r3, #1
 8000a06:	405e      	eors	r6, r3
 8000a08:	42b4      	cmp	r4, r6
 8000a0a:	d100      	bne.n	8000a0e <__aeabi_fsub+0x112>
 8000a0c:	e0ca      	b.n	8000ba4 <__aeabi_fsub+0x2a8>
 8000a0e:	464b      	mov	r3, r9
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d02d      	beq.n	8000a70 <__aeabi_fsub+0x174>
 8000a14:	2d00      	cmp	r5, #0
 8000a16:	d000      	beq.n	8000a1a <__aeabi_fsub+0x11e>
 8000a18:	e13c      	b.n	8000c94 <__aeabi_fsub+0x398>
 8000a1a:	23ff      	movs	r3, #255	@ 0xff
 8000a1c:	4664      	mov	r4, ip
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	d100      	bne.n	8000a24 <__aeabi_fsub+0x128>
 8000a22:	e15f      	b.n	8000ce4 <__aeabi_fsub+0x3e8>
 8000a24:	1e5d      	subs	r5, r3, #1
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d100      	bne.n	8000a2c <__aeabi_fsub+0x130>
 8000a2a:	e174      	b.n	8000d16 <__aeabi_fsub+0x41a>
 8000a2c:	0034      	movs	r4, r6
 8000a2e:	2bff      	cmp	r3, #255	@ 0xff
 8000a30:	d074      	beq.n	8000b1c <__aeabi_fsub+0x220>
 8000a32:	002b      	movs	r3, r5
 8000a34:	e103      	b.n	8000c3e <__aeabi_fsub+0x342>
 8000a36:	42b4      	cmp	r4, r6
 8000a38:	d100      	bne.n	8000a3c <__aeabi_fsub+0x140>
 8000a3a:	e09c      	b.n	8000b76 <__aeabi_fsub+0x27a>
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d017      	beq.n	8000a70 <__aeabi_fsub+0x174>
 8000a40:	2d00      	cmp	r5, #0
 8000a42:	d0ea      	beq.n	8000a1a <__aeabi_fsub+0x11e>
 8000a44:	0007      	movs	r7, r0
 8000a46:	0034      	movs	r4, r6
 8000a48:	e06c      	b.n	8000b24 <__aeabi_fsub+0x228>
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d0cc      	beq.n	80009e8 <__aeabi_fsub+0xec>
 8000a4e:	1e5a      	subs	r2, r3, #1
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d02b      	beq.n	8000aac <__aeabi_fsub+0x1b0>
 8000a54:	2bff      	cmp	r3, #255	@ 0xff
 8000a56:	d062      	beq.n	8000b1e <__aeabi_fsub+0x222>
 8000a58:	0013      	movs	r3, r2
 8000a5a:	e773      	b.n	8000944 <__aeabi_fsub+0x48>
 8000a5c:	2900      	cmp	r1, #0
 8000a5e:	d0c3      	beq.n	80009e8 <__aeabi_fsub+0xec>
 8000a60:	1e5a      	subs	r2, r3, #1
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fsub+0x16c>
 8000a66:	e11e      	b.n	8000ca6 <__aeabi_fsub+0x3aa>
 8000a68:	2bff      	cmp	r3, #255	@ 0xff
 8000a6a:	d058      	beq.n	8000b1e <__aeabi_fsub+0x222>
 8000a6c:	0013      	movs	r3, r2
 8000a6e:	e7b4      	b.n	80009da <__aeabi_fsub+0xde>
 8000a70:	22fe      	movs	r2, #254	@ 0xfe
 8000a72:	1c6b      	adds	r3, r5, #1
 8000a74:	421a      	tst	r2, r3
 8000a76:	d10d      	bne.n	8000a94 <__aeabi_fsub+0x198>
 8000a78:	2d00      	cmp	r5, #0
 8000a7a:	d060      	beq.n	8000b3e <__aeabi_fsub+0x242>
 8000a7c:	4663      	mov	r3, ip
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d000      	beq.n	8000a84 <__aeabi_fsub+0x188>
 8000a82:	e120      	b.n	8000cc6 <__aeabi_fsub+0x3ca>
 8000a84:	2900      	cmp	r1, #0
 8000a86:	d000      	beq.n	8000a8a <__aeabi_fsub+0x18e>
 8000a88:	e128      	b.n	8000cdc <__aeabi_fsub+0x3e0>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	2400      	movs	r4, #0
 8000a8e:	20ff      	movs	r0, #255	@ 0xff
 8000a90:	03d2      	lsls	r2, r2, #15
 8000a92:	e78f      	b.n	80009b4 <__aeabi_fsub+0xb8>
 8000a94:	4663      	mov	r3, ip
 8000a96:	1a5f      	subs	r7, r3, r1
 8000a98:	017b      	lsls	r3, r7, #5
 8000a9a:	d500      	bpl.n	8000a9e <__aeabi_fsub+0x1a2>
 8000a9c:	e0fe      	b.n	8000c9c <__aeabi_fsub+0x3a0>
 8000a9e:	2f00      	cmp	r7, #0
 8000aa0:	d000      	beq.n	8000aa4 <__aeabi_fsub+0x1a8>
 8000aa2:	e765      	b.n	8000970 <__aeabi_fsub+0x74>
 8000aa4:	2400      	movs	r4, #0
 8000aa6:	2000      	movs	r0, #0
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	e783      	b.n	80009b4 <__aeabi_fsub+0xb8>
 8000aac:	4663      	mov	r3, ip
 8000aae:	1a59      	subs	r1, r3, r1
 8000ab0:	014b      	lsls	r3, r1, #5
 8000ab2:	d400      	bmi.n	8000ab6 <__aeabi_fsub+0x1ba>
 8000ab4:	e119      	b.n	8000cea <__aeabi_fsub+0x3ee>
 8000ab6:	018f      	lsls	r7, r1, #6
 8000ab8:	09bf      	lsrs	r7, r7, #6
 8000aba:	0038      	movs	r0, r7
 8000abc:	f000 f9e8 	bl	8000e90 <__clzsi2>
 8000ac0:	003b      	movs	r3, r7
 8000ac2:	3805      	subs	r0, #5
 8000ac4:	4083      	lsls	r3, r0
 8000ac6:	2501      	movs	r5, #1
 8000ac8:	2220      	movs	r2, #32
 8000aca:	1b40      	subs	r0, r0, r5
 8000acc:	3001      	adds	r0, #1
 8000ace:	1a12      	subs	r2, r2, r0
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	40c1      	lsrs	r1, r0
 8000ad6:	1e5a      	subs	r2, r3, #1
 8000ad8:	4193      	sbcs	r3, r2
 8000ada:	4319      	orrs	r1, r3
 8000adc:	468c      	mov	ip, r1
 8000ade:	1e0b      	subs	r3, r1, #0
 8000ae0:	d0e1      	beq.n	8000aa6 <__aeabi_fsub+0x1aa>
 8000ae2:	075b      	lsls	r3, r3, #29
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_fsub+0x1ec>
 8000ae6:	e152      	b.n	8000d8e <__aeabi_fsub+0x492>
 8000ae8:	230f      	movs	r3, #15
 8000aea:	2500      	movs	r5, #0
 8000aec:	400b      	ands	r3, r1
 8000aee:	2b04      	cmp	r3, #4
 8000af0:	d000      	beq.n	8000af4 <__aeabi_fsub+0x1f8>
 8000af2:	e752      	b.n	800099a <__aeabi_fsub+0x9e>
 8000af4:	2001      	movs	r0, #1
 8000af6:	014a      	lsls	r2, r1, #5
 8000af8:	d400      	bmi.n	8000afc <__aeabi_fsub+0x200>
 8000afa:	e092      	b.n	8000c22 <__aeabi_fsub+0x326>
 8000afc:	b2c0      	uxtb	r0, r0
 8000afe:	4663      	mov	r3, ip
 8000b00:	019a      	lsls	r2, r3, #6
 8000b02:	0a52      	lsrs	r2, r2, #9
 8000b04:	e756      	b.n	80009b4 <__aeabi_fsub+0xb8>
 8000b06:	4663      	mov	r3, ip
 8000b08:	075b      	lsls	r3, r3, #29
 8000b0a:	d005      	beq.n	8000b18 <__aeabi_fsub+0x21c>
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	4662      	mov	r2, ip
 8000b10:	4013      	ands	r3, r2
 8000b12:	2b04      	cmp	r3, #4
 8000b14:	d000      	beq.n	8000b18 <__aeabi_fsub+0x21c>
 8000b16:	e740      	b.n	800099a <__aeabi_fsub+0x9e>
 8000b18:	002b      	movs	r3, r5
 8000b1a:	e765      	b.n	80009e8 <__aeabi_fsub+0xec>
 8000b1c:	0007      	movs	r7, r0
 8000b1e:	2f00      	cmp	r7, #0
 8000b20:	d100      	bne.n	8000b24 <__aeabi_fsub+0x228>
 8000b22:	e745      	b.n	80009b0 <__aeabi_fsub+0xb4>
 8000b24:	2280      	movs	r2, #128	@ 0x80
 8000b26:	03d2      	lsls	r2, r2, #15
 8000b28:	433a      	orrs	r2, r7
 8000b2a:	0252      	lsls	r2, r2, #9
 8000b2c:	20ff      	movs	r0, #255	@ 0xff
 8000b2e:	0a52      	lsrs	r2, r2, #9
 8000b30:	e740      	b.n	80009b4 <__aeabi_fsub+0xb8>
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d179      	bne.n	8000c2a <__aeabi_fsub+0x32e>
 8000b36:	22fe      	movs	r2, #254	@ 0xfe
 8000b38:	1c6b      	adds	r3, r5, #1
 8000b3a:	421a      	tst	r2, r3
 8000b3c:	d1aa      	bne.n	8000a94 <__aeabi_fsub+0x198>
 8000b3e:	4663      	mov	r3, ip
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d100      	bne.n	8000b46 <__aeabi_fsub+0x24a>
 8000b44:	e0f5      	b.n	8000d32 <__aeabi_fsub+0x436>
 8000b46:	2900      	cmp	r1, #0
 8000b48:	d100      	bne.n	8000b4c <__aeabi_fsub+0x250>
 8000b4a:	e0d1      	b.n	8000cf0 <__aeabi_fsub+0x3f4>
 8000b4c:	1a5f      	subs	r7, r3, r1
 8000b4e:	2380      	movs	r3, #128	@ 0x80
 8000b50:	04db      	lsls	r3, r3, #19
 8000b52:	421f      	tst	r7, r3
 8000b54:	d100      	bne.n	8000b58 <__aeabi_fsub+0x25c>
 8000b56:	e10e      	b.n	8000d76 <__aeabi_fsub+0x47a>
 8000b58:	4662      	mov	r2, ip
 8000b5a:	2401      	movs	r4, #1
 8000b5c:	1a8a      	subs	r2, r1, r2
 8000b5e:	4694      	mov	ip, r2
 8000b60:	2000      	movs	r0, #0
 8000b62:	4034      	ands	r4, r6
 8000b64:	2a00      	cmp	r2, #0
 8000b66:	d100      	bne.n	8000b6a <__aeabi_fsub+0x26e>
 8000b68:	e724      	b.n	80009b4 <__aeabi_fsub+0xb8>
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	421a      	tst	r2, r3
 8000b6e:	d1c6      	bne.n	8000afe <__aeabi_fsub+0x202>
 8000b70:	2300      	movs	r3, #0
 8000b72:	08d7      	lsrs	r7, r2, #3
 8000b74:	e73d      	b.n	80009f2 <__aeabi_fsub+0xf6>
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d017      	beq.n	8000baa <__aeabi_fsub+0x2ae>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d000      	beq.n	8000b80 <__aeabi_fsub+0x284>
 8000b7e:	e0af      	b.n	8000ce0 <__aeabi_fsub+0x3e4>
 8000b80:	23ff      	movs	r3, #255	@ 0xff
 8000b82:	4665      	mov	r5, ip
 8000b84:	2d00      	cmp	r5, #0
 8000b86:	d100      	bne.n	8000b8a <__aeabi_fsub+0x28e>
 8000b88:	e0ad      	b.n	8000ce6 <__aeabi_fsub+0x3ea>
 8000b8a:	1e5e      	subs	r6, r3, #1
 8000b8c:	2b01      	cmp	r3, #1
 8000b8e:	d100      	bne.n	8000b92 <__aeabi_fsub+0x296>
 8000b90:	e089      	b.n	8000ca6 <__aeabi_fsub+0x3aa>
 8000b92:	2bff      	cmp	r3, #255	@ 0xff
 8000b94:	d0c2      	beq.n	8000b1c <__aeabi_fsub+0x220>
 8000b96:	2e1b      	cmp	r6, #27
 8000b98:	dc00      	bgt.n	8000b9c <__aeabi_fsub+0x2a0>
 8000b9a:	e0ab      	b.n	8000cf4 <__aeabi_fsub+0x3f8>
 8000b9c:	1d4b      	adds	r3, r1, #5
 8000b9e:	469c      	mov	ip, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	e721      	b.n	80009e8 <__aeabi_fsub+0xec>
 8000ba4:	464b      	mov	r3, r9
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d170      	bne.n	8000c8c <__aeabi_fsub+0x390>
 8000baa:	22fe      	movs	r2, #254	@ 0xfe
 8000bac:	1c6b      	adds	r3, r5, #1
 8000bae:	421a      	tst	r2, r3
 8000bb0:	d15e      	bne.n	8000c70 <__aeabi_fsub+0x374>
 8000bb2:	2d00      	cmp	r5, #0
 8000bb4:	d000      	beq.n	8000bb8 <__aeabi_fsub+0x2bc>
 8000bb6:	e0c3      	b.n	8000d40 <__aeabi_fsub+0x444>
 8000bb8:	4663      	mov	r3, ip
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d100      	bne.n	8000bc0 <__aeabi_fsub+0x2c4>
 8000bbe:	e0d0      	b.n	8000d62 <__aeabi_fsub+0x466>
 8000bc0:	2900      	cmp	r1, #0
 8000bc2:	d100      	bne.n	8000bc6 <__aeabi_fsub+0x2ca>
 8000bc4:	e094      	b.n	8000cf0 <__aeabi_fsub+0x3f4>
 8000bc6:	000a      	movs	r2, r1
 8000bc8:	4462      	add	r2, ip
 8000bca:	0153      	lsls	r3, r2, #5
 8000bcc:	d400      	bmi.n	8000bd0 <__aeabi_fsub+0x2d4>
 8000bce:	e0d8      	b.n	8000d82 <__aeabi_fsub+0x486>
 8000bd0:	0192      	lsls	r2, r2, #6
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	0a52      	lsrs	r2, r2, #9
 8000bd6:	e6ed      	b.n	80009b4 <__aeabi_fsub+0xb8>
 8000bd8:	0008      	movs	r0, r1
 8000bda:	2220      	movs	r2, #32
 8000bdc:	40d8      	lsrs	r0, r3
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	4099      	lsls	r1, r3
 8000be2:	000b      	movs	r3, r1
 8000be4:	1e5a      	subs	r2, r3, #1
 8000be6:	4193      	sbcs	r3, r2
 8000be8:	4303      	orrs	r3, r0
 8000bea:	449c      	add	ip, r3
 8000bec:	4663      	mov	r3, ip
 8000bee:	015b      	lsls	r3, r3, #5
 8000bf0:	d589      	bpl.n	8000b06 <__aeabi_fsub+0x20a>
 8000bf2:	3501      	adds	r5, #1
 8000bf4:	2dff      	cmp	r5, #255	@ 0xff
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_fsub+0x2fe>
 8000bf8:	e6da      	b.n	80009b0 <__aeabi_fsub+0xb4>
 8000bfa:	4662      	mov	r2, ip
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	4919      	ldr	r1, [pc, #100]	@ (8000c64 <__aeabi_fsub+0x368>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	0852      	lsrs	r2, r2, #1
 8000c04:	400a      	ands	r2, r1
 8000c06:	431a      	orrs	r2, r3
 8000c08:	0013      	movs	r3, r2
 8000c0a:	4694      	mov	ip, r2
 8000c0c:	075b      	lsls	r3, r3, #29
 8000c0e:	d004      	beq.n	8000c1a <__aeabi_fsub+0x31e>
 8000c10:	230f      	movs	r3, #15
 8000c12:	4013      	ands	r3, r2
 8000c14:	2b04      	cmp	r3, #4
 8000c16:	d000      	beq.n	8000c1a <__aeabi_fsub+0x31e>
 8000c18:	e6bf      	b.n	800099a <__aeabi_fsub+0x9e>
 8000c1a:	4663      	mov	r3, ip
 8000c1c:	015b      	lsls	r3, r3, #5
 8000c1e:	d500      	bpl.n	8000c22 <__aeabi_fsub+0x326>
 8000c20:	e6c2      	b.n	80009a8 <__aeabi_fsub+0xac>
 8000c22:	4663      	mov	r3, ip
 8000c24:	08df      	lsrs	r7, r3, #3
 8000c26:	002b      	movs	r3, r5
 8000c28:	e6e3      	b.n	80009f2 <__aeabi_fsub+0xf6>
 8000c2a:	1b53      	subs	r3, r2, r5
 8000c2c:	2d00      	cmp	r5, #0
 8000c2e:	d100      	bne.n	8000c32 <__aeabi_fsub+0x336>
 8000c30:	e6f4      	b.n	8000a1c <__aeabi_fsub+0x120>
 8000c32:	2080      	movs	r0, #128	@ 0x80
 8000c34:	4664      	mov	r4, ip
 8000c36:	04c0      	lsls	r0, r0, #19
 8000c38:	4304      	orrs	r4, r0
 8000c3a:	46a4      	mov	ip, r4
 8000c3c:	0034      	movs	r4, r6
 8000c3e:	2001      	movs	r0, #1
 8000c40:	2b1b      	cmp	r3, #27
 8000c42:	dc09      	bgt.n	8000c58 <__aeabi_fsub+0x35c>
 8000c44:	2520      	movs	r5, #32
 8000c46:	4660      	mov	r0, ip
 8000c48:	40d8      	lsrs	r0, r3
 8000c4a:	1aeb      	subs	r3, r5, r3
 8000c4c:	4665      	mov	r5, ip
 8000c4e:	409d      	lsls	r5, r3
 8000c50:	002b      	movs	r3, r5
 8000c52:	1e5d      	subs	r5, r3, #1
 8000c54:	41ab      	sbcs	r3, r5
 8000c56:	4318      	orrs	r0, r3
 8000c58:	1a0b      	subs	r3, r1, r0
 8000c5a:	469c      	mov	ip, r3
 8000c5c:	0015      	movs	r5, r2
 8000c5e:	e680      	b.n	8000962 <__aeabi_fsub+0x66>
 8000c60:	fbffffff 	.word	0xfbffffff
 8000c64:	7dffffff 	.word	0x7dffffff
 8000c68:	22fe      	movs	r2, #254	@ 0xfe
 8000c6a:	1c6b      	adds	r3, r5, #1
 8000c6c:	4213      	tst	r3, r2
 8000c6e:	d0a3      	beq.n	8000bb8 <__aeabi_fsub+0x2bc>
 8000c70:	2bff      	cmp	r3, #255	@ 0xff
 8000c72:	d100      	bne.n	8000c76 <__aeabi_fsub+0x37a>
 8000c74:	e69c      	b.n	80009b0 <__aeabi_fsub+0xb4>
 8000c76:	4461      	add	r1, ip
 8000c78:	0849      	lsrs	r1, r1, #1
 8000c7a:	074a      	lsls	r2, r1, #29
 8000c7c:	d049      	beq.n	8000d12 <__aeabi_fsub+0x416>
 8000c7e:	220f      	movs	r2, #15
 8000c80:	400a      	ands	r2, r1
 8000c82:	2a04      	cmp	r2, #4
 8000c84:	d045      	beq.n	8000d12 <__aeabi_fsub+0x416>
 8000c86:	1d0a      	adds	r2, r1, #4
 8000c88:	4694      	mov	ip, r2
 8000c8a:	e6ad      	b.n	80009e8 <__aeabi_fsub+0xec>
 8000c8c:	2d00      	cmp	r5, #0
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_fsub+0x396>
 8000c90:	e776      	b.n	8000b80 <__aeabi_fsub+0x284>
 8000c92:	e68d      	b.n	80009b0 <__aeabi_fsub+0xb4>
 8000c94:	0034      	movs	r4, r6
 8000c96:	20ff      	movs	r0, #255	@ 0xff
 8000c98:	2200      	movs	r2, #0
 8000c9a:	e68b      	b.n	80009b4 <__aeabi_fsub+0xb8>
 8000c9c:	4663      	mov	r3, ip
 8000c9e:	2401      	movs	r4, #1
 8000ca0:	1acf      	subs	r7, r1, r3
 8000ca2:	4034      	ands	r4, r6
 8000ca4:	e664      	b.n	8000970 <__aeabi_fsub+0x74>
 8000ca6:	4461      	add	r1, ip
 8000ca8:	014b      	lsls	r3, r1, #5
 8000caa:	d56d      	bpl.n	8000d88 <__aeabi_fsub+0x48c>
 8000cac:	0848      	lsrs	r0, r1, #1
 8000cae:	4944      	ldr	r1, [pc, #272]	@ (8000dc0 <__aeabi_fsub+0x4c4>)
 8000cb0:	4001      	ands	r1, r0
 8000cb2:	0743      	lsls	r3, r0, #29
 8000cb4:	d02c      	beq.n	8000d10 <__aeabi_fsub+0x414>
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	4003      	ands	r3, r0
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	d028      	beq.n	8000d10 <__aeabi_fsub+0x414>
 8000cbe:	1d0b      	adds	r3, r1, #4
 8000cc0:	469c      	mov	ip, r3
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	e690      	b.n	80009e8 <__aeabi_fsub+0xec>
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_fsub+0x3d0>
 8000cca:	e72b      	b.n	8000b24 <__aeabi_fsub+0x228>
 8000ccc:	2380      	movs	r3, #128	@ 0x80
 8000cce:	03db      	lsls	r3, r3, #15
 8000cd0:	429f      	cmp	r7, r3
 8000cd2:	d200      	bcs.n	8000cd6 <__aeabi_fsub+0x3da>
 8000cd4:	e726      	b.n	8000b24 <__aeabi_fsub+0x228>
 8000cd6:	4298      	cmp	r0, r3
 8000cd8:	d300      	bcc.n	8000cdc <__aeabi_fsub+0x3e0>
 8000cda:	e723      	b.n	8000b24 <__aeabi_fsub+0x228>
 8000cdc:	2401      	movs	r4, #1
 8000cde:	4034      	ands	r4, r6
 8000ce0:	0007      	movs	r7, r0
 8000ce2:	e71f      	b.n	8000b24 <__aeabi_fsub+0x228>
 8000ce4:	0034      	movs	r4, r6
 8000ce6:	468c      	mov	ip, r1
 8000ce8:	e67e      	b.n	80009e8 <__aeabi_fsub+0xec>
 8000cea:	2301      	movs	r3, #1
 8000cec:	08cf      	lsrs	r7, r1, #3
 8000cee:	e680      	b.n	80009f2 <__aeabi_fsub+0xf6>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	e67e      	b.n	80009f2 <__aeabi_fsub+0xf6>
 8000cf4:	2020      	movs	r0, #32
 8000cf6:	4665      	mov	r5, ip
 8000cf8:	1b80      	subs	r0, r0, r6
 8000cfa:	4085      	lsls	r5, r0
 8000cfc:	4663      	mov	r3, ip
 8000cfe:	0028      	movs	r0, r5
 8000d00:	40f3      	lsrs	r3, r6
 8000d02:	1e45      	subs	r5, r0, #1
 8000d04:	41a8      	sbcs	r0, r5
 8000d06:	4303      	orrs	r3, r0
 8000d08:	469c      	mov	ip, r3
 8000d0a:	0015      	movs	r5, r2
 8000d0c:	448c      	add	ip, r1
 8000d0e:	e76d      	b.n	8000bec <__aeabi_fsub+0x2f0>
 8000d10:	2302      	movs	r3, #2
 8000d12:	08cf      	lsrs	r7, r1, #3
 8000d14:	e66d      	b.n	80009f2 <__aeabi_fsub+0xf6>
 8000d16:	1b0f      	subs	r7, r1, r4
 8000d18:	017b      	lsls	r3, r7, #5
 8000d1a:	d528      	bpl.n	8000d6e <__aeabi_fsub+0x472>
 8000d1c:	01bf      	lsls	r7, r7, #6
 8000d1e:	09bf      	lsrs	r7, r7, #6
 8000d20:	0038      	movs	r0, r7
 8000d22:	f000 f8b5 	bl	8000e90 <__clzsi2>
 8000d26:	003b      	movs	r3, r7
 8000d28:	3805      	subs	r0, #5
 8000d2a:	4083      	lsls	r3, r0
 8000d2c:	0034      	movs	r4, r6
 8000d2e:	2501      	movs	r5, #1
 8000d30:	e6ca      	b.n	8000ac8 <__aeabi_fsub+0x1cc>
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d100      	bne.n	8000d38 <__aeabi_fsub+0x43c>
 8000d36:	e6b5      	b.n	8000aa4 <__aeabi_fsub+0x1a8>
 8000d38:	2401      	movs	r4, #1
 8000d3a:	0007      	movs	r7, r0
 8000d3c:	4034      	ands	r4, r6
 8000d3e:	e658      	b.n	80009f2 <__aeabi_fsub+0xf6>
 8000d40:	4663      	mov	r3, ip
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d100      	bne.n	8000d48 <__aeabi_fsub+0x44c>
 8000d46:	e6e9      	b.n	8000b1c <__aeabi_fsub+0x220>
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d100      	bne.n	8000d4e <__aeabi_fsub+0x452>
 8000d4c:	e6ea      	b.n	8000b24 <__aeabi_fsub+0x228>
 8000d4e:	2380      	movs	r3, #128	@ 0x80
 8000d50:	03db      	lsls	r3, r3, #15
 8000d52:	429f      	cmp	r7, r3
 8000d54:	d200      	bcs.n	8000d58 <__aeabi_fsub+0x45c>
 8000d56:	e6e5      	b.n	8000b24 <__aeabi_fsub+0x228>
 8000d58:	4298      	cmp	r0, r3
 8000d5a:	d300      	bcc.n	8000d5e <__aeabi_fsub+0x462>
 8000d5c:	e6e2      	b.n	8000b24 <__aeabi_fsub+0x228>
 8000d5e:	0007      	movs	r7, r0
 8000d60:	e6e0      	b.n	8000b24 <__aeabi_fsub+0x228>
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d100      	bne.n	8000d68 <__aeabi_fsub+0x46c>
 8000d66:	e69e      	b.n	8000aa6 <__aeabi_fsub+0x1aa>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	08cf      	lsrs	r7, r1, #3
 8000d6c:	e641      	b.n	80009f2 <__aeabi_fsub+0xf6>
 8000d6e:	0034      	movs	r4, r6
 8000d70:	2301      	movs	r3, #1
 8000d72:	08ff      	lsrs	r7, r7, #3
 8000d74:	e63d      	b.n	80009f2 <__aeabi_fsub+0xf6>
 8000d76:	2f00      	cmp	r7, #0
 8000d78:	d100      	bne.n	8000d7c <__aeabi_fsub+0x480>
 8000d7a:	e693      	b.n	8000aa4 <__aeabi_fsub+0x1a8>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	08ff      	lsrs	r7, r7, #3
 8000d80:	e637      	b.n	80009f2 <__aeabi_fsub+0xf6>
 8000d82:	2300      	movs	r3, #0
 8000d84:	08d7      	lsrs	r7, r2, #3
 8000d86:	e634      	b.n	80009f2 <__aeabi_fsub+0xf6>
 8000d88:	2301      	movs	r3, #1
 8000d8a:	08cf      	lsrs	r7, r1, #3
 8000d8c:	e631      	b.n	80009f2 <__aeabi_fsub+0xf6>
 8000d8e:	2280      	movs	r2, #128	@ 0x80
 8000d90:	000b      	movs	r3, r1
 8000d92:	04d2      	lsls	r2, r2, #19
 8000d94:	2001      	movs	r0, #1
 8000d96:	4013      	ands	r3, r2
 8000d98:	4211      	tst	r1, r2
 8000d9a:	d000      	beq.n	8000d9e <__aeabi_fsub+0x4a2>
 8000d9c:	e6ae      	b.n	8000afc <__aeabi_fsub+0x200>
 8000d9e:	08cf      	lsrs	r7, r1, #3
 8000da0:	e627      	b.n	80009f2 <__aeabi_fsub+0xf6>
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d100      	bne.n	8000da8 <__aeabi_fsub+0x4ac>
 8000da6:	e75f      	b.n	8000c68 <__aeabi_fsub+0x36c>
 8000da8:	1b56      	subs	r6, r2, r5
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d101      	bne.n	8000db2 <__aeabi_fsub+0x4b6>
 8000dae:	0033      	movs	r3, r6
 8000db0:	e6e7      	b.n	8000b82 <__aeabi_fsub+0x286>
 8000db2:	2380      	movs	r3, #128	@ 0x80
 8000db4:	4660      	mov	r0, ip
 8000db6:	04db      	lsls	r3, r3, #19
 8000db8:	4318      	orrs	r0, r3
 8000dba:	4684      	mov	ip, r0
 8000dbc:	e6eb      	b.n	8000b96 <__aeabi_fsub+0x29a>
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	7dffffff 	.word	0x7dffffff

08000dc4 <__aeabi_f2iz>:
 8000dc4:	0241      	lsls	r1, r0, #9
 8000dc6:	0042      	lsls	r2, r0, #1
 8000dc8:	0fc3      	lsrs	r3, r0, #31
 8000dca:	0a49      	lsrs	r1, r1, #9
 8000dcc:	2000      	movs	r0, #0
 8000dce:	0e12      	lsrs	r2, r2, #24
 8000dd0:	2a7e      	cmp	r2, #126	@ 0x7e
 8000dd2:	dd03      	ble.n	8000ddc <__aeabi_f2iz+0x18>
 8000dd4:	2a9d      	cmp	r2, #157	@ 0x9d
 8000dd6:	dd02      	ble.n	8000dde <__aeabi_f2iz+0x1a>
 8000dd8:	4a09      	ldr	r2, [pc, #36]	@ (8000e00 <__aeabi_f2iz+0x3c>)
 8000dda:	1898      	adds	r0, r3, r2
 8000ddc:	4770      	bx	lr
 8000dde:	2080      	movs	r0, #128	@ 0x80
 8000de0:	0400      	lsls	r0, r0, #16
 8000de2:	4301      	orrs	r1, r0
 8000de4:	2a95      	cmp	r2, #149	@ 0x95
 8000de6:	dc07      	bgt.n	8000df8 <__aeabi_f2iz+0x34>
 8000de8:	2096      	movs	r0, #150	@ 0x96
 8000dea:	1a82      	subs	r2, r0, r2
 8000dec:	40d1      	lsrs	r1, r2
 8000dee:	4248      	negs	r0, r1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d1f3      	bne.n	8000ddc <__aeabi_f2iz+0x18>
 8000df4:	0008      	movs	r0, r1
 8000df6:	e7f1      	b.n	8000ddc <__aeabi_f2iz+0x18>
 8000df8:	3a96      	subs	r2, #150	@ 0x96
 8000dfa:	4091      	lsls	r1, r2
 8000dfc:	e7f7      	b.n	8000dee <__aeabi_f2iz+0x2a>
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	7fffffff 	.word	0x7fffffff

08000e04 <__aeabi_ui2f>:
 8000e04:	b510      	push	{r4, lr}
 8000e06:	1e04      	subs	r4, r0, #0
 8000e08:	d00d      	beq.n	8000e26 <__aeabi_ui2f+0x22>
 8000e0a:	f000 f841 	bl	8000e90 <__clzsi2>
 8000e0e:	239e      	movs	r3, #158	@ 0x9e
 8000e10:	1a1b      	subs	r3, r3, r0
 8000e12:	2b96      	cmp	r3, #150	@ 0x96
 8000e14:	dc0c      	bgt.n	8000e30 <__aeabi_ui2f+0x2c>
 8000e16:	2808      	cmp	r0, #8
 8000e18:	d034      	beq.n	8000e84 <__aeabi_ui2f+0x80>
 8000e1a:	3808      	subs	r0, #8
 8000e1c:	4084      	lsls	r4, r0
 8000e1e:	0264      	lsls	r4, r4, #9
 8000e20:	0a64      	lsrs	r4, r4, #9
 8000e22:	b2d8      	uxtb	r0, r3
 8000e24:	e001      	b.n	8000e2a <__aeabi_ui2f+0x26>
 8000e26:	2000      	movs	r0, #0
 8000e28:	2400      	movs	r4, #0
 8000e2a:	05c0      	lsls	r0, r0, #23
 8000e2c:	4320      	orrs	r0, r4
 8000e2e:	bd10      	pop	{r4, pc}
 8000e30:	2b99      	cmp	r3, #153	@ 0x99
 8000e32:	dc13      	bgt.n	8000e5c <__aeabi_ui2f+0x58>
 8000e34:	1f42      	subs	r2, r0, #5
 8000e36:	4094      	lsls	r4, r2
 8000e38:	4a14      	ldr	r2, [pc, #80]	@ (8000e8c <__aeabi_ui2f+0x88>)
 8000e3a:	4022      	ands	r2, r4
 8000e3c:	0761      	lsls	r1, r4, #29
 8000e3e:	d01c      	beq.n	8000e7a <__aeabi_ui2f+0x76>
 8000e40:	210f      	movs	r1, #15
 8000e42:	4021      	ands	r1, r4
 8000e44:	2904      	cmp	r1, #4
 8000e46:	d018      	beq.n	8000e7a <__aeabi_ui2f+0x76>
 8000e48:	3204      	adds	r2, #4
 8000e4a:	08d4      	lsrs	r4, r2, #3
 8000e4c:	0152      	lsls	r2, r2, #5
 8000e4e:	d515      	bpl.n	8000e7c <__aeabi_ui2f+0x78>
 8000e50:	239f      	movs	r3, #159	@ 0x9f
 8000e52:	0264      	lsls	r4, r4, #9
 8000e54:	1a18      	subs	r0, r3, r0
 8000e56:	0a64      	lsrs	r4, r4, #9
 8000e58:	b2c0      	uxtb	r0, r0
 8000e5a:	e7e6      	b.n	8000e2a <__aeabi_ui2f+0x26>
 8000e5c:	0002      	movs	r2, r0
 8000e5e:	0021      	movs	r1, r4
 8000e60:	321b      	adds	r2, #27
 8000e62:	4091      	lsls	r1, r2
 8000e64:	000a      	movs	r2, r1
 8000e66:	1e51      	subs	r1, r2, #1
 8000e68:	418a      	sbcs	r2, r1
 8000e6a:	2105      	movs	r1, #5
 8000e6c:	1a09      	subs	r1, r1, r0
 8000e6e:	40cc      	lsrs	r4, r1
 8000e70:	4314      	orrs	r4, r2
 8000e72:	4a06      	ldr	r2, [pc, #24]	@ (8000e8c <__aeabi_ui2f+0x88>)
 8000e74:	4022      	ands	r2, r4
 8000e76:	0761      	lsls	r1, r4, #29
 8000e78:	d1e2      	bne.n	8000e40 <__aeabi_ui2f+0x3c>
 8000e7a:	08d4      	lsrs	r4, r2, #3
 8000e7c:	0264      	lsls	r4, r4, #9
 8000e7e:	0a64      	lsrs	r4, r4, #9
 8000e80:	b2d8      	uxtb	r0, r3
 8000e82:	e7d2      	b.n	8000e2a <__aeabi_ui2f+0x26>
 8000e84:	0264      	lsls	r4, r4, #9
 8000e86:	0a64      	lsrs	r4, r4, #9
 8000e88:	308e      	adds	r0, #142	@ 0x8e
 8000e8a:	e7ce      	b.n	8000e2a <__aeabi_ui2f+0x26>
 8000e8c:	fbffffff 	.word	0xfbffffff

08000e90 <__clzsi2>:
 8000e90:	211c      	movs	r1, #28
 8000e92:	2301      	movs	r3, #1
 8000e94:	041b      	lsls	r3, r3, #16
 8000e96:	4298      	cmp	r0, r3
 8000e98:	d301      	bcc.n	8000e9e <__clzsi2+0xe>
 8000e9a:	0c00      	lsrs	r0, r0, #16
 8000e9c:	3910      	subs	r1, #16
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	4298      	cmp	r0, r3
 8000ea2:	d301      	bcc.n	8000ea8 <__clzsi2+0x18>
 8000ea4:	0a00      	lsrs	r0, r0, #8
 8000ea6:	3908      	subs	r1, #8
 8000ea8:	091b      	lsrs	r3, r3, #4
 8000eaa:	4298      	cmp	r0, r3
 8000eac:	d301      	bcc.n	8000eb2 <__clzsi2+0x22>
 8000eae:	0900      	lsrs	r0, r0, #4
 8000eb0:	3904      	subs	r1, #4
 8000eb2:	a202      	add	r2, pc, #8	@ (adr r2, 8000ebc <__clzsi2+0x2c>)
 8000eb4:	5c10      	ldrb	r0, [r2, r0]
 8000eb6:	1840      	adds	r0, r0, r1
 8000eb8:	4770      	bx	lr
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	02020304 	.word	0x02020304
 8000ec0:	01010101 	.word	0x01010101
	...

08000ecc <__clzdi2>:
 8000ecc:	b510      	push	{r4, lr}
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	d103      	bne.n	8000eda <__clzdi2+0xe>
 8000ed2:	f7ff ffdd 	bl	8000e90 <__clzsi2>
 8000ed6:	3020      	adds	r0, #32
 8000ed8:	e002      	b.n	8000ee0 <__clzdi2+0x14>
 8000eda:	0008      	movs	r0, r1
 8000edc:	f7ff ffd8 	bl	8000e90 <__clzsi2>
 8000ee0:	bd10      	pop	{r4, pc}
 8000ee2:	46c0      	nop			@ (mov r8, r8)

08000ee4 <ATC_SendReceive>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int ATC_SendReceive(ATC_HandleTypeDef *lora, const char *command, uint32_t command_len, char *response, uint32_t response_size, uint32_t timeout_ms, const char *expected_response)
{
 8000ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee6:	b089      	sub	sp, #36	@ 0x24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status;

    if (lora == NULL || lora->huart == NULL || command == NULL || command_len == 0) {
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d009      	beq.n	8000f0c <ATC_SendReceive+0x28>
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <ATC_SendReceive+0x28>
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d002      	beq.n	8000f0c <ATC_SendReceive+0x28>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <ATC_SendReceive+0x2e>
        return -1; // Invalid parameters
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	425b      	negs	r3, r3
 8000f10:	e054      	b.n	8000fbc <ATC_SendReceive+0xd8>
    }

    status = HAL_UART_Transmit(lora->huart, (uint8_t *)command, command_len, timeout_ms);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6818      	ldr	r0, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	2517      	movs	r5, #23
 8000f1c:	197c      	adds	r4, r7, r5
 8000f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f20:	68b9      	ldr	r1, [r7, #8]
 8000f22:	f003 fdd7 	bl	8004ad4 <HAL_UART_Transmit>
 8000f26:	0003      	movs	r3, r0
 8000f28:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8000f2a:	197b      	adds	r3, r7, r5
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d002      	beq.n	8000f38 <ATC_SendReceive+0x54>
        return -2; // Communication error
 8000f32:	2302      	movs	r3, #2
 8000f34:	425b      	negs	r3, r3
 8000f36:	e041      	b.n	8000fbc <ATC_SendReceive+0xd8>
    }

    if (response != NULL && response_size > 0) {
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d02c      	beq.n	8000f98 <ATC_SendReceive+0xb4>
 8000f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d029      	beq.n	8000f98 <ATC_SendReceive+0xb4>
        uint16_t rx_len = 0;
 8000f44:	2514      	movs	r5, #20
 8000f46:	197b      	adds	r3, r7, r5
 8000f48:	2200      	movs	r2, #0
 8000f4a:	801a      	strh	r2, [r3, #0]
        memset(response, 0, response_size);
 8000f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	2100      	movs	r1, #0
 8000f52:	0018      	movs	r0, r3
 8000f54:	f004 fcbc 	bl	80058d0 <memset>
        status = HAL_UARTEx_ReceiveToIdle(lora->huart, (uint8_t *)response,
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6818      	ldr	r0, [r3, #0]
 8000f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	3b01      	subs	r3, #1
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	2617      	movs	r6, #23
 8000f66:	19bc      	adds	r4, r7, r6
 8000f68:	197d      	adds	r5, r7, r5
 8000f6a:	6839      	ldr	r1, [r7, #0]
 8000f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	002b      	movs	r3, r5
 8000f72:	f004 fb1d 	bl	80055b0 <HAL_UARTEx_ReceiveToIdle>
 8000f76:	0003      	movs	r3, r0
 8000f78:	7023      	strb	r3, [r4, #0]
                                          response_size - 1, &rx_len, timeout_ms);
        if (status != HAL_OK) {
 8000f7a:	19bb      	adds	r3, r7, r6
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <ATC_SendReceive+0xa4>
            return -4; // Timeout or receive error
 8000f82:	2304      	movs	r3, #4
 8000f84:	425b      	negs	r3, r3
 8000f86:	e019      	b.n	8000fbc <ATC_SendReceive+0xd8>
        }
        response[rx_len] = '\0';
 8000f88:	2314      	movs	r3, #20
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	881b      	ldrh	r3, [r3, #0]
 8000f8e:	001a      	movs	r2, r3
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	189b      	adds	r3, r3, r2
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
    }

    if (expected_response != NULL && response != NULL) {
 8000f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d00d      	beq.n	8000fba <ATC_SendReceive+0xd6>
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d00a      	beq.n	8000fba <ATC_SendReceive+0xd6>
        if (strstr(response, expected_response) == NULL) {
 8000fa4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	0011      	movs	r1, r2
 8000faa:	0018      	movs	r0, r3
 8000fac:	f004 fc98 	bl	80058e0 <strstr>
 8000fb0:	1e03      	subs	r3, r0, #0
 8000fb2:	d102      	bne.n	8000fba <ATC_SendReceive+0xd6>
            return -3; // Unexpected response
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	425b      	negs	r3, r3
 8000fb8:	e000      	b.n	8000fbc <ATC_SendReceive+0xd8>
        }
    }

    return 0; // Success
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b007      	add	sp, #28
 8000fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000fc4 <send_data_and_get_response>:
// Wrapper function to send data and get response
LoRaWAN_Error_t send_data_and_get_response(ATC_HandleTypeDef *lora, const char *data, char *response, uint32_t response_size, uint32_t timeout_ms, const char *expected_response)
{
 8000fc4:	b590      	push	{r4, r7, lr}
 8000fc6:	b08b      	sub	sp, #44	@ 0x2c
 8000fc8:	af04      	add	r7, sp, #16
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
 8000fd0:	603b      	str	r3, [r7, #0]
    if (lora == NULL || lora->huart == NULL || data == NULL || response == NULL || response_size == 0) {
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d00c      	beq.n	8000ff2 <send_data_and_get_response+0x2e>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d008      	beq.n	8000ff2 <send_data_and_get_response+0x2e>
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d005      	beq.n	8000ff2 <send_data_and_get_response+0x2e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d002      	beq.n	8000ff2 <send_data_and_get_response+0x2e>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d102      	bne.n	8000ff8 <send_data_and_get_response+0x34>
        return LORAWAN_ERROR_INVALID_PARAM;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	425b      	negs	r3, r3
 8000ff6:	e03e      	b.n	8001076 <send_data_and_get_response+0xb2>
    }

    ATC_SendReceive(lora, "AT\r\n", 4, response, response_size, timeout_ms, expected_response);
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	4921      	ldr	r1, [pc, #132]	@ (8001080 <send_data_and_get_response+0xbc>)
 8000ffc:	68f8      	ldr	r0, [r7, #12]
 8000ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001000:	9302      	str	r3, [sp, #8]
 8001002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001004:	9301      	str	r3, [sp, #4]
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	9300      	str	r3, [sp, #0]
 800100a:	0013      	movs	r3, r2
 800100c:	2204      	movs	r2, #4
 800100e:	f7ff ff69 	bl	8000ee4 <ATC_SendReceive>
    HAL_Delay(300);
 8001012:	2396      	movs	r3, #150	@ 0x96
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	0018      	movs	r0, r3
 8001018:	f000 ff7c 	bl	8001f14 <HAL_Delay>
    int result = ATC_SendReceive(lora, data, strlen(data), response, response_size, timeout_ms, expected_response);
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff f872 	bl	8000108 <strlen>
 8001024:	0004      	movs	r4, r0
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800102e:	9302      	str	r3, [sp, #8]
 8001030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	0013      	movs	r3, r2
 800103a:	0022      	movs	r2, r4
 800103c:	f7ff ff52 	bl	8000ee4 <ATC_SendReceive>
 8001040:	0003      	movs	r3, r0
 8001042:	617b      	str	r3, [r7, #20]

    if (result == -1) {
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	d102      	bne.n	8001050 <send_data_and_get_response+0x8c>
        return LORAWAN_ERROR_INVALID_PARAM;
 800104a:	2301      	movs	r3, #1
 800104c:	425b      	negs	r3, r3
 800104e:	e012      	b.n	8001076 <send_data_and_get_response+0xb2>
    } else if (result == -2) {
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	3302      	adds	r3, #2
 8001054:	d102      	bne.n	800105c <send_data_and_get_response+0x98>
        return LORAWAN_ERROR_COMMUNICATION;
 8001056:	2302      	movs	r3, #2
 8001058:	425b      	negs	r3, r3
 800105a:	e00c      	b.n	8001076 <send_data_and_get_response+0xb2>
    } else if (result == -3) {
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	3303      	adds	r3, #3
 8001060:	d102      	bne.n	8001068 <send_data_and_get_response+0xa4>
        return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 8001062:	2303      	movs	r3, #3
 8001064:	425b      	negs	r3, r3
 8001066:	e006      	b.n	8001076 <send_data_and_get_response+0xb2>
    } else if (result == -4) {
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	3304      	adds	r3, #4
 800106c:	d102      	bne.n	8001074 <send_data_and_get_response+0xb0>
        return LORAWAN_ERROR_TIMEOUT;
 800106e:	2304      	movs	r3, #4
 8001070:	425b      	negs	r3, r3
 8001072:	e000      	b.n	8001076 <send_data_and_get_response+0xb2>
    }

    return LORAWAN_ERROR_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	0018      	movs	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	b007      	add	sp, #28
 800107c:	bd90      	pop	{r4, r7, pc}
 800107e:	46c0      	nop			@ (mov r8, r8)
 8001080:	08006208 	.word	0x08006208

08001084 <join_lora_network>:
LoRaWAN_Error_t join_lora_network(ATC_HandleTypeDef *lora)
{
 8001084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001086:	b0c7      	sub	sp, #284	@ 0x11c
 8001088:	af02      	add	r7, sp, #8
 800108a:	6078      	str	r0, [r7, #4]
    char response[AT_RESPONSE_BUFFER_SIZE];
    LoRaWAN_Error_t status;

    status = send_data_and_get_response(lora, "AT+JOIN\r\n", response, AT_RESPONSE_BUFFER_SIZE, JOIN_TIMEOUT_MS, "OK");
 800108c:	2610      	movs	r6, #16
 800108e:	36ff      	adds	r6, #255	@ 0xff
 8001090:	19bc      	adds	r4, r7, r6
 8001092:	2380      	movs	r3, #128	@ 0x80
 8001094:	005d      	lsls	r5, r3, #1
 8001096:	230c      	movs	r3, #12
 8001098:	18fa      	adds	r2, r7, r3
 800109a:	4940      	ldr	r1, [pc, #256]	@ (800119c <join_lora_network+0x118>)
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	4b40      	ldr	r3, [pc, #256]	@ (80011a0 <join_lora_network+0x11c>)
 80010a0:	9301      	str	r3, [sp, #4]
 80010a2:	4b40      	ldr	r3, [pc, #256]	@ (80011a4 <join_lora_network+0x120>)
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	002b      	movs	r3, r5
 80010a8:	f7ff ff8c 	bl	8000fc4 <send_data_and_get_response>
 80010ac:	0003      	movs	r3, r0
 80010ae:	7023      	strb	r3, [r4, #0]
    if (status != LORAWAN_ERROR_OK) {
 80010b0:	19bb      	adds	r3, r7, r6
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00b      	beq.n	80010d2 <join_lora_network+0x4e>
        ConsolePrintf("Failed to send AT+JOIN: %d\r\n", status);
 80010ba:	19bb      	adds	r3, r7, r6
 80010bc:	2200      	movs	r2, #0
 80010be:	569a      	ldrsb	r2, [r3, r2]
 80010c0:	4b39      	ldr	r3, [pc, #228]	@ (80011a8 <join_lora_network+0x124>)
 80010c2:	0011      	movs	r1, r2
 80010c4:	0018      	movs	r0, r3
 80010c6:	f000 fc75 	bl	80019b4 <ConsolePrintf>
        return status;
 80010ca:	19bb      	adds	r3, r7, r6
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	e05f      	b.n	8001192 <join_lora_network+0x10e>
    }

    memset(response, 0, AT_RESPONSE_BUFFER_SIZE);
 80010d2:	2380      	movs	r3, #128	@ 0x80
 80010d4:	005a      	lsls	r2, r3, #1
 80010d6:	260c      	movs	r6, #12
 80010d8:	19bb      	adds	r3, r7, r6
 80010da:	2100      	movs	r1, #0
 80010dc:	0018      	movs	r0, r3
 80010de:	f004 fbf7 	bl	80058d0 <memset>
    uint16_t rx_len = 0;
 80010e2:	4b32      	ldr	r3, [pc, #200]	@ (80011ac <join_lora_network+0x128>)
 80010e4:	2288      	movs	r2, #136	@ 0x88
 80010e6:	0052      	lsls	r2, r2, #1
 80010e8:	189b      	adds	r3, r3, r2
 80010ea:	19db      	adds	r3, r3, r7
 80010ec:	2200      	movs	r2, #0
 80010ee:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef hal_status = HAL_UARTEx_ReceiveToIdle(lora->huart,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	2587      	movs	r5, #135	@ 0x87
 80010f6:	006d      	lsls	r5, r5, #1
 80010f8:	197c      	adds	r4, r7, r5
 80010fa:	230a      	movs	r3, #10
 80010fc:	18fb      	adds	r3, r7, r3
 80010fe:	19b9      	adds	r1, r7, r6
 8001100:	4a28      	ldr	r2, [pc, #160]	@ (80011a4 <join_lora_network+0x120>)
 8001102:	9200      	str	r2, [sp, #0]
 8001104:	22ff      	movs	r2, #255	@ 0xff
 8001106:	f004 fa53 	bl	80055b0 <HAL_UARTEx_ReceiveToIdle>
 800110a:	0003      	movs	r3, r0
 800110c:	7023      	strb	r3, [r4, #0]
                                            (uint8_t *)response,
                                            AT_RESPONSE_BUFFER_SIZE - 1,
                                            &rx_len,
                                            JOIN_TIMEOUT_MS);
    if (hal_status != HAL_OK) {
 800110e:	197b      	adds	r3, r7, r5
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d009      	beq.n	800112a <join_lora_network+0xa6>
        ConsolePrintf("Failed to receive join response: %d\r\n", hal_status);
 8001116:	197b      	adds	r3, r7, r5
 8001118:	781a      	ldrb	r2, [r3, #0]
 800111a:	4b25      	ldr	r3, [pc, #148]	@ (80011b0 <join_lora_network+0x12c>)
 800111c:	0011      	movs	r1, r2
 800111e:	0018      	movs	r0, r3
 8001120:	f000 fc48 	bl	80019b4 <ConsolePrintf>
        return LORAWAN_ERROR_TIMEOUT;
 8001124:	2304      	movs	r3, #4
 8001126:	425b      	negs	r3, r3
 8001128:	e033      	b.n	8001192 <join_lora_network+0x10e>
    }
    response[rx_len] = '\0';
 800112a:	4b20      	ldr	r3, [pc, #128]	@ (80011ac <join_lora_network+0x128>)
 800112c:	2188      	movs	r1, #136	@ 0x88
 800112e:	0049      	lsls	r1, r1, #1
 8001130:	185b      	adds	r3, r3, r1
 8001132:	19db      	adds	r3, r3, r7
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	001a      	movs	r2, r3
 8001138:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <join_lora_network+0x130>)
 800113a:	185b      	adds	r3, r3, r1
 800113c:	19db      	adds	r3, r3, r7
 800113e:	2100      	movs	r1, #0
 8001140:	5499      	strb	r1, [r3, r2]

    if (strstr(response, "JOINED") != NULL) {
 8001142:	4a1d      	ldr	r2, [pc, #116]	@ (80011b8 <join_lora_network+0x134>)
 8001144:	230c      	movs	r3, #12
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	0011      	movs	r1, r2
 800114a:	0018      	movs	r0, r3
 800114c:	f004 fbc8 	bl	80058e0 <strstr>
 8001150:	1e03      	subs	r3, r0, #0
 8001152:	d005      	beq.n	8001160 <join_lora_network+0xdc>
        ConsolePrintf("Network joined successfullyrr\r\n");
 8001154:	4b19      	ldr	r3, [pc, #100]	@ (80011bc <join_lora_network+0x138>)
 8001156:	0018      	movs	r0, r3
 8001158:	f000 fc2c 	bl	80019b4 <ConsolePrintf>
        return LORAWAN_ERROR_OK;
 800115c:	2300      	movs	r3, #0
 800115e:	e018      	b.n	8001192 <join_lora_network+0x10e>
    } else if (strstr(response, "JOIN FAILED") != NULL) {
 8001160:	4a17      	ldr	r2, [pc, #92]	@ (80011c0 <join_lora_network+0x13c>)
 8001162:	230c      	movs	r3, #12
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	0011      	movs	r1, r2
 8001168:	0018      	movs	r0, r3
 800116a:	f004 fbb9 	bl	80058e0 <strstr>
 800116e:	1e03      	subs	r3, r0, #0
 8001170:	d006      	beq.n	8001180 <join_lora_network+0xfc>
        ConsolePrintf("Failed to join network\r\n");
 8001172:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <join_lora_network+0x140>)
 8001174:	0018      	movs	r0, r3
 8001176:	f000 fc1d 	bl	80019b4 <ConsolePrintf>
        return LORAWAN_ERROR_NOT_JOINED;
 800117a:	2305      	movs	r3, #5
 800117c:	425b      	negs	r3, r3
 800117e:	e008      	b.n	8001192 <join_lora_network+0x10e>
    } else {
        ConsolePrintf("Unexpected join response: %s\r\n", response);
 8001180:	230c      	movs	r3, #12
 8001182:	18fa      	adds	r2, r7, r3
 8001184:	4b10      	ldr	r3, [pc, #64]	@ (80011c8 <join_lora_network+0x144>)
 8001186:	0011      	movs	r1, r2
 8001188:	0018      	movs	r0, r3
 800118a:	f000 fc13 	bl	80019b4 <ConsolePrintf>
        return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 800118e:	2303      	movs	r3, #3
 8001190:	425b      	negs	r3, r3
    }
}
 8001192:	0018      	movs	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	b045      	add	sp, #276	@ 0x114
 8001198:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	08006210 	.word	0x08006210
 80011a0:	0800621c 	.word	0x0800621c
 80011a4:	00002710 	.word	0x00002710
 80011a8:	08006220 	.word	0x08006220
 80011ac:	fffffefa 	.word	0xfffffefa
 80011b0:	08006240 	.word	0x08006240
 80011b4:	fffffefc 	.word	0xfffffefc
 80011b8:	08006268 	.word	0x08006268
 80011bc:	08006270 	.word	0x08006270
 80011c0:	08006290 	.word	0x08006290
 80011c4:	0800629c 	.word	0x0800629c
 80011c8:	080062b8 	.word	0x080062b8

080011cc <SHT40_Read>:




HAL_StatusTypeDef SHT40_Read(int16_t *temperature, int16_t *humidity)
{
 80011cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ce:	b08b      	sub	sp, #44	@ 0x2c
 80011d0:	af04      	add	r7, sp, #16
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6039      	str	r1, [r7, #0]
    ConsolePrintf("Starting SHT40 read operation\r\n");
 80011d6:	4b73      	ldr	r3, [pc, #460]	@ (80013a4 <SHT40_Read+0x1d8>)
 80011d8:	0018      	movs	r0, r3
 80011da:	f000 fbeb 	bl	80019b4 <ConsolePrintf>

    uint8_t tx_data[1] = {SHT40_MEASURE_HIGH_PRECISION};
 80011de:	2610      	movs	r6, #16
 80011e0:	19bb      	adds	r3, r7, r6
 80011e2:	4a71      	ldr	r2, [pc, #452]	@ (80013a8 <SHT40_Read+0x1dc>)
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	701a      	strb	r2, [r3, #0]
    uint8_t rx_data[6]; // 6 bytes: 2 temp, 1 CRC, 2 hum, 1 CRC

    // Send measurement command
    ConsolePrintf("Sending SHT40 measurement command (0x%02X)\r\n", SHT40_MEASURE_HIGH_PRECISION);
 80011e8:	4b70      	ldr	r3, [pc, #448]	@ (80013ac <SHT40_Read+0x1e0>)
 80011ea:	21fd      	movs	r1, #253	@ 0xfd
 80011ec:	0018      	movs	r0, r3
 80011ee:	f000 fbe1 	bl	80019b4 <ConsolePrintf>
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, 0x44, tx_data, 1, TIMEOUT);
 80011f2:	2517      	movs	r5, #23
 80011f4:	197c      	adds	r4, r7, r5
 80011f6:	19ba      	adds	r2, r7, r6
 80011f8:	486d      	ldr	r0, [pc, #436]	@ (80013b0 <SHT40_Read+0x1e4>)
 80011fa:	2364      	movs	r3, #100	@ 0x64
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	2144      	movs	r1, #68	@ 0x44
 8001202:	f001 faf9 	bl	80027f8 <HAL_I2C_Master_Transmit>
 8001206:	0003      	movs	r3, r0
 8001208:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 800120a:	197b      	adds	r3, r7, r5
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d009      	beq.n	8001226 <SHT40_Read+0x5a>
    {
        ConsolePrintf("SHT40 I2C transmit failed, status: %d\r\n", status);
 8001212:	197b      	adds	r3, r7, r5
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	4b67      	ldr	r3, [pc, #412]	@ (80013b4 <SHT40_Read+0x1e8>)
 8001218:	0011      	movs	r1, r2
 800121a:	0018      	movs	r0, r3
 800121c:	f000 fbca 	bl	80019b4 <ConsolePrintf>
        return status;
 8001220:	197b      	adds	r3, r7, r5
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	e0ba      	b.n	800139c <SHT40_Read+0x1d0>
    }
    ConsolePrintf("SHT40 measurement command sent\r\n");
 8001226:	4b64      	ldr	r3, [pc, #400]	@ (80013b8 <SHT40_Read+0x1ec>)
 8001228:	0018      	movs	r0, r3
 800122a:	f000 fbc3 	bl	80019b4 <ConsolePrintf>

    // Wait for measurement (~8.2ms for high precision)
    ConsolePrintf("Waiting 10ms for SHT40 measurement\r\n");
 800122e:	4b63      	ldr	r3, [pc, #396]	@ (80013bc <SHT40_Read+0x1f0>)
 8001230:	0018      	movs	r0, r3
 8001232:	f000 fbbf 	bl	80019b4 <ConsolePrintf>
    HAL_Delay(10);
 8001236:	200a      	movs	r0, #10
 8001238:	f000 fe6c 	bl	8001f14 <HAL_Delay>

    // Read 6 bytes (temp + CRC + humidity + CRC)
    ConsolePrintf("Reading 6 bytes from SHT40\r\n");
 800123c:	4b60      	ldr	r3, [pc, #384]	@ (80013c0 <SHT40_Read+0x1f4>)
 800123e:	0018      	movs	r0, r3
 8001240:	f000 fbb8 	bl	80019b4 <ConsolePrintf>
    status = HAL_I2C_Master_Receive(&hi2c1, SHT40_I2C_ADDR, rx_data, 6, TIMEOUT);
 8001244:	2517      	movs	r5, #23
 8001246:	197c      	adds	r4, r7, r5
 8001248:	2308      	movs	r3, #8
 800124a:	18fa      	adds	r2, r7, r3
 800124c:	4858      	ldr	r0, [pc, #352]	@ (80013b0 <SHT40_Read+0x1e4>)
 800124e:	2364      	movs	r3, #100	@ 0x64
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2306      	movs	r3, #6
 8001254:	2188      	movs	r1, #136	@ 0x88
 8001256:	f001 fbf9 	bl	8002a4c <HAL_I2C_Master_Receive>
 800125a:	0003      	movs	r3, r0
 800125c:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 800125e:	197b      	adds	r3, r7, r5
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d009      	beq.n	800127a <SHT40_Read+0xae>
    {
        ConsolePrintf("SHT40 I2C receive failed, status: %d\r\n", status);
 8001266:	197b      	adds	r3, r7, r5
 8001268:	781a      	ldrb	r2, [r3, #0]
 800126a:	4b56      	ldr	r3, [pc, #344]	@ (80013c4 <SHT40_Read+0x1f8>)
 800126c:	0011      	movs	r1, r2
 800126e:	0018      	movs	r0, r3
 8001270:	f000 fba0 	bl	80019b4 <ConsolePrintf>
        return status;
 8001274:	197b      	adds	r3, r7, r5
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	e090      	b.n	800139c <SHT40_Read+0x1d0>
    }
    ConsolePrintf("SHT40 data received: %02X %02X %02X %02X %02X %02X\r\n",
                  rx_data[0], rx_data[1], rx_data[2], rx_data[3], rx_data[4], rx_data[5]);
 800127a:	2008      	movs	r0, #8
 800127c:	183b      	adds	r3, r7, r0
 800127e:	781b      	ldrb	r3, [r3, #0]
    ConsolePrintf("SHT40 data received: %02X %02X %02X %02X %02X %02X\r\n",
 8001280:	001c      	movs	r4, r3
                  rx_data[0], rx_data[1], rx_data[2], rx_data[3], rx_data[4], rx_data[5]);
 8001282:	183b      	adds	r3, r7, r0
 8001284:	785b      	ldrb	r3, [r3, #1]
    ConsolePrintf("SHT40 data received: %02X %02X %02X %02X %02X %02X\r\n",
 8001286:	001d      	movs	r5, r3
                  rx_data[0], rx_data[1], rx_data[2], rx_data[3], rx_data[4], rx_data[5]);
 8001288:	183b      	adds	r3, r7, r0
 800128a:	789b      	ldrb	r3, [r3, #2]
    ConsolePrintf("SHT40 data received: %02X %02X %02X %02X %02X %02X\r\n",
 800128c:	001e      	movs	r6, r3
                  rx_data[0], rx_data[1], rx_data[2], rx_data[3], rx_data[4], rx_data[5]);
 800128e:	183b      	adds	r3, r7, r0
 8001290:	78db      	ldrb	r3, [r3, #3]
    ConsolePrintf("SHT40 data received: %02X %02X %02X %02X %02X %02X\r\n",
 8001292:	001a      	movs	r2, r3
                  rx_data[0], rx_data[1], rx_data[2], rx_data[3], rx_data[4], rx_data[5]);
 8001294:	183b      	adds	r3, r7, r0
 8001296:	791b      	ldrb	r3, [r3, #4]
    ConsolePrintf("SHT40 data received: %02X %02X %02X %02X %02X %02X\r\n",
 8001298:	0019      	movs	r1, r3
                  rx_data[0], rx_data[1], rx_data[2], rx_data[3], rx_data[4], rx_data[5]);
 800129a:	183b      	adds	r3, r7, r0
 800129c:	795b      	ldrb	r3, [r3, #5]
    ConsolePrintf("SHT40 data received: %02X %02X %02X %02X %02X %02X\r\n",
 800129e:	484a      	ldr	r0, [pc, #296]	@ (80013c8 <SHT40_Read+0x1fc>)
 80012a0:	9302      	str	r3, [sp, #8]
 80012a2:	9101      	str	r1, [sp, #4]
 80012a4:	9200      	str	r2, [sp, #0]
 80012a6:	0033      	movs	r3, r6
 80012a8:	002a      	movs	r2, r5
 80012aa:	0021      	movs	r1, r4
 80012ac:	f000 fb82 	bl	80019b4 <ConsolePrintf>

    // Convert temperature to �C*10
    uint16_t temp_raw = (rx_data[0] << 8) | rx_data[1];
 80012b0:	2408      	movs	r4, #8
 80012b2:	193b      	adds	r3, r7, r4
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	193b      	adds	r3, r7, r4
 80012be:	785b      	ldrb	r3, [r3, #1]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	2514      	movs	r5, #20
 80012c8:	197b      	adds	r3, r7, r5
 80012ca:	801a      	strh	r2, [r3, #0]
    *temperature = (int16_t)((-45.0f + 175.0f * ((float)temp_raw / 65535.0f)) * 10);
 80012cc:	197b      	adds	r3, r7, r5
 80012ce:	881b      	ldrh	r3, [r3, #0]
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff fd97 	bl	8000e04 <__aeabi_ui2f>
 80012d6:	1c03      	adds	r3, r0, #0
 80012d8:	493c      	ldr	r1, [pc, #240]	@ (80013cc <SHT40_Read+0x200>)
 80012da:	1c18      	adds	r0, r3, #0
 80012dc:	f7ff f89e 	bl	800041c <__aeabi_fdiv>
 80012e0:	1c03      	adds	r3, r0, #0
 80012e2:	493b      	ldr	r1, [pc, #236]	@ (80013d0 <SHT40_Read+0x204>)
 80012e4:	1c18      	adds	r0, r3, #0
 80012e6:	f7ff f9af 	bl	8000648 <__aeabi_fmul>
 80012ea:	1c03      	adds	r3, r0, #0
 80012ec:	4939      	ldr	r1, [pc, #228]	@ (80013d4 <SHT40_Read+0x208>)
 80012ee:	1c18      	adds	r0, r3, #0
 80012f0:	f7ff fb04 	bl	80008fc <__aeabi_fsub>
 80012f4:	1c03      	adds	r3, r0, #0
 80012f6:	4938      	ldr	r1, [pc, #224]	@ (80013d8 <SHT40_Read+0x20c>)
 80012f8:	1c18      	adds	r0, r3, #0
 80012fa:	f7ff f9a5 	bl	8000648 <__aeabi_fmul>
 80012fe:	1c03      	adds	r3, r0, #0
 8001300:	1c18      	adds	r0, r3, #0
 8001302:	f7ff fd5f 	bl	8000dc4 <__aeabi_f2iz>
 8001306:	0003      	movs	r3, r0
 8001308:	b21a      	sxth	r2, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	801a      	strh	r2, [r3, #0]
    ConsolePrintf("Raw temperature: %u, Converted: %d (0.1�C)\r\n", temp_raw, *temperature);
 800130e:	197b      	adds	r3, r7, r5
 8001310:	8819      	ldrh	r1, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	5e9b      	ldrsh	r3, [r3, r2]
 8001318:	001a      	movs	r2, r3
 800131a:	4b30      	ldr	r3, [pc, #192]	@ (80013dc <SHT40_Read+0x210>)
 800131c:	0018      	movs	r0, r3
 800131e:	f000 fb49 	bl	80019b4 <ConsolePrintf>

    // Convert humidity to %RH*10
    uint16_t hum_raw = (rx_data[3] << 8) | rx_data[4];
 8001322:	193b      	adds	r3, r7, r4
 8001324:	78db      	ldrb	r3, [r3, #3]
 8001326:	b21b      	sxth	r3, r3
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	b21a      	sxth	r2, r3
 800132c:	193b      	adds	r3, r7, r4
 800132e:	791b      	ldrb	r3, [r3, #4]
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21a      	sxth	r2, r3
 8001336:	2412      	movs	r4, #18
 8001338:	193b      	adds	r3, r7, r4
 800133a:	801a      	strh	r2, [r3, #0]
    *humidity = (int16_t)((-6.0f + 125.0f * ((float)hum_raw / 65535.0f)) * 10);
 800133c:	193b      	adds	r3, r7, r4
 800133e:	881b      	ldrh	r3, [r3, #0]
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff fd5f 	bl	8000e04 <__aeabi_ui2f>
 8001346:	1c03      	adds	r3, r0, #0
 8001348:	4920      	ldr	r1, [pc, #128]	@ (80013cc <SHT40_Read+0x200>)
 800134a:	1c18      	adds	r0, r3, #0
 800134c:	f7ff f866 	bl	800041c <__aeabi_fdiv>
 8001350:	1c03      	adds	r3, r0, #0
 8001352:	4923      	ldr	r1, [pc, #140]	@ (80013e0 <SHT40_Read+0x214>)
 8001354:	1c18      	adds	r0, r3, #0
 8001356:	f7ff f977 	bl	8000648 <__aeabi_fmul>
 800135a:	1c03      	adds	r3, r0, #0
 800135c:	4921      	ldr	r1, [pc, #132]	@ (80013e4 <SHT40_Read+0x218>)
 800135e:	1c18      	adds	r0, r3, #0
 8001360:	f7ff facc 	bl	80008fc <__aeabi_fsub>
 8001364:	1c03      	adds	r3, r0, #0
 8001366:	491c      	ldr	r1, [pc, #112]	@ (80013d8 <SHT40_Read+0x20c>)
 8001368:	1c18      	adds	r0, r3, #0
 800136a:	f7ff f96d 	bl	8000648 <__aeabi_fmul>
 800136e:	1c03      	adds	r3, r0, #0
 8001370:	1c18      	adds	r0, r3, #0
 8001372:	f7ff fd27 	bl	8000dc4 <__aeabi_f2iz>
 8001376:	0003      	movs	r3, r0
 8001378:	b21a      	sxth	r2, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	801a      	strh	r2, [r3, #0]
    ConsolePrintf("Raw humidity: %u, Converted: %d (0.1%%RH)\r\n", hum_raw, *humidity);
 800137e:	193b      	adds	r3, r7, r4
 8001380:	8819      	ldrh	r1, [r3, #0]
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2200      	movs	r2, #0
 8001386:	5e9b      	ldrsh	r3, [r3, r2]
 8001388:	001a      	movs	r2, r3
 800138a:	4b17      	ldr	r3, [pc, #92]	@ (80013e8 <SHT40_Read+0x21c>)
 800138c:	0018      	movs	r0, r3
 800138e:	f000 fb11 	bl	80019b4 <ConsolePrintf>

    // Optional: CRC check (rx_data[2] for temp, rx_data[5] for humidity)
    // Add if needed (see CRC function below)
    ConsolePrintf("SHT40 read completed successfully\r\n");
 8001392:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <SHT40_Read+0x220>)
 8001394:	0018      	movs	r0, r3
 8001396:	f000 fb0d 	bl	80019b4 <ConsolePrintf>

    return HAL_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	b007      	add	sp, #28
 80013a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013a4:	080062d8 	.word	0x080062d8
 80013a8:	0800649c 	.word	0x0800649c
 80013ac:	080062f8 	.word	0x080062f8
 80013b0:	20000078 	.word	0x20000078
 80013b4:	08006328 	.word	0x08006328
 80013b8:	08006350 	.word	0x08006350
 80013bc:	08006374 	.word	0x08006374
 80013c0:	0800639c 	.word	0x0800639c
 80013c4:	080063bc 	.word	0x080063bc
 80013c8:	080063e4 	.word	0x080063e4
 80013cc:	477fff00 	.word	0x477fff00
 80013d0:	432f0000 	.word	0x432f0000
 80013d4:	42340000 	.word	0x42340000
 80013d8:	41200000 	.word	0x41200000
 80013dc:	0800641c 	.word	0x0800641c
 80013e0:	42fa0000 	.word	0x42fa0000
 80013e4:	40c00000 	.word	0x40c00000
 80013e8:	0800644c 	.word	0x0800644c
 80013ec:	08006478 	.word	0x08006478

080013f0 <RTC_IRQHandler>:




void RTC_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
    HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80013f4:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <RTC_IRQHandler+0x14>)
 80013f6:	0018      	movs	r0, r3
 80013f8:	f003 faaa 	bl	8004950 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 80013fc:	46c0      	nop			@ (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			@ (mov r8, r8)
 8001404:	200001dc 	.word	0x200001dc

08001408 <RTC_WakeUp_Init>:

void RTC_WakeUp_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	ConsolePrintf("Starting RTC Wake-Up Timer configuration\r\n");
 800140c:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <RTC_WakeUp_Init+0x5c>)
 800140e:	0018      	movs	r0, r3
 8001410:	f000 fad0 	bl	80019b4 <ConsolePrintf>

	// Disable the Wake-Up Timer before configuring
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001414:	4b14      	ldr	r3, [pc, #80]	@ (8001468 <RTC_WakeUp_Init+0x60>)
 8001416:	0018      	movs	r0, r3
 8001418:	f003 fa36 	bl	8004888 <HAL_RTCEx_DeactivateWakeUpTimer>
	ConsolePrintf("RTC Wake-Up Timer disabled\r\n");
 800141c:	4b13      	ldr	r3, [pc, #76]	@ (800146c <RTC_WakeUp_Init+0x64>)
 800141e:	0018      	movs	r0, r3
 8001420:	f000 fac8 	bl	80019b4 <ConsolePrintf>

	// Configure Wake-Up Timer for 60 seconds using LSI (~40 kHz)
	// With AsynchPrediv = 127, SynchPrediv = 255: CK_SPRE = 40,000 / (128 * 256) = ~1.22 Hz
	// For ~60 seconds: WakeUpCounter = (60 * 1.22) - 1 = ~72
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8001424:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <RTC_WakeUp_Init+0x60>)
 8001426:	2204      	movs	r2, #4
 8001428:	213b      	movs	r1, #59	@ 0x3b
 800142a:	0018      	movs	r0, r3
 800142c:	f003 f954 	bl	80046d8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001430:	1e03      	subs	r3, r0, #0
 8001432:	d004      	beq.n	800143e <RTC_WakeUp_Init+0x36>
	{
		ConsolePrintf("RTC Wake-Up Timer Init Failed\r\n");
 8001434:	4b0e      	ldr	r3, [pc, #56]	@ (8001470 <RTC_WakeUp_Init+0x68>)
 8001436:	0018      	movs	r0, r3
 8001438:	f000 fabc 	bl	80019b4 <ConsolePrintf>
 800143c:	e003      	b.n	8001446 <RTC_WakeUp_Init+0x3e>

	}
	else
	{
		ConsolePrintf("RTC Wake-Up Timer Initialized for ~60 seconds\r\n");
 800143e:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <RTC_WakeUp_Init+0x6c>)
 8001440:	0018      	movs	r0, r3
 8001442:	f000 fab7 	bl	80019b4 <ConsolePrintf>
	}

	// Enable RTC Wake-Up interrupt in NVIC
	HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2002      	movs	r0, #2
 800144c:	f000 fe4e 	bl	80020ec <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001450:	2002      	movs	r0, #2
 8001452:	f000 fe60 	bl	8002116 <HAL_NVIC_EnableIRQ>
	ConsolePrintf("RTC Wake-Up interrupt enabled in NVIC\r\n");
 8001456:	4b08      	ldr	r3, [pc, #32]	@ (8001478 <RTC_WakeUp_Init+0x70>)
 8001458:	0018      	movs	r0, r3
 800145a:	f000 faab 	bl	80019b4 <ConsolePrintf>
}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	080064a0 	.word	0x080064a0
 8001468:	200001dc 	.word	0x200001dc
 800146c:	080064cc 	.word	0x080064cc
 8001470:	080064ec 	.word	0x080064ec
 8001474:	0800650c 	.word	0x0800650c
 8001478:	0800653c 	.word	0x0800653c

0800147c <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
    // Reconfigure system clock after wake-up
    SystemClock_Config();
 8001484:	f000 f908 	bl	8001698 <SystemClock_Config>

    // Print message
    ConsolePrintf("Woke up at %s\r\n", "1-minute interval");
 8001488:	4a04      	ldr	r2, [pc, #16]	@ (800149c <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 800148a:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 800148c:	0011      	movs	r1, r2
 800148e:	0018      	movs	r0, r3
 8001490:	f000 fa90 	bl	80019b4 <ConsolePrintf>
}
 8001494:	46c0      	nop			@ (mov r8, r8)
 8001496:	46bd      	mov	sp, r7
 8001498:	b002      	add	sp, #8
 800149a:	bd80      	pop	{r7, pc}
 800149c:	08006564 	.word	0x08006564
 80014a0:	08006578 	.word	0x08006578

080014a4 <Enter_Stop_Mode>:

void Enter_Stop_Mode(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
        ConsolePrintf("Preparing to enter Stop mode\r\n");
 80014a8:	4b12      	ldr	r3, [pc, #72]	@ (80014f4 <Enter_Stop_Mode+0x50>)
 80014aa:	0018      	movs	r0, r3
 80014ac:	f000 fa82 	bl	80019b4 <ConsolePrintf>

    // Clear Wake-Up flag
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80014b0:	4b11      	ldr	r3, [pc, #68]	@ (80014f8 <Enter_Stop_Mode+0x54>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	22ff      	movs	r2, #255	@ 0xff
 80014b8:	401a      	ands	r2, r3
 80014ba:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <Enter_Stop_Mode+0x54>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	490f      	ldr	r1, [pc, #60]	@ (80014fc <Enter_Stop_Mode+0x58>)
 80014c0:	430a      	orrs	r2, r1
 80014c2:	60da      	str	r2, [r3, #12]
    ConsolePrintf("RTC Wake-Up flag cleared\r\n");
 80014c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001500 <Enter_Stop_Mode+0x5c>)
 80014c6:	0018      	movs	r0, r3
 80014c8:	f000 fa74 	bl	80019b4 <ConsolePrintf>

    // Enter Stop mode (low-power mode)
    ConsolePrintf("Entering Stop mode\r\n");
 80014cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <Enter_Stop_Mode+0x60>)
 80014ce:	0018      	movs	r0, r3
 80014d0:	f000 fa70 	bl	80019b4 <ConsolePrintf>
    /* Suspend SysTick to prevent it from waking up the MCU immediately */
    HAL_SuspendTick();
 80014d4:	f000 fd42 	bl	8001f5c <HAL_SuspendTick>
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80014d8:	2101      	movs	r1, #1
 80014da:	2001      	movs	r0, #1
 80014dc:	f001 ff2a 	bl	8003334 <HAL_PWR_EnterSTOPMode>
    /* Resume SysTick after waking up */
    HAL_ResumeTick();
 80014e0:	f000 fd4a 	bl	8001f78 <HAL_ResumeTick>
    ConsolePrintf("Exited Stop mode\r\n");
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <Enter_Stop_Mode+0x64>)
 80014e6:	0018      	movs	r0, r3
 80014e8:	f000 fa64 	bl	80019b4 <ConsolePrintf>
}
 80014ec:	46c0      	nop			@ (mov r8, r8)
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	46c0      	nop			@ (mov r8, r8)
 80014f4:	08006588 	.word	0x08006588
 80014f8:	200001dc 	.word	0x200001dc
 80014fc:	fffffb7f 	.word	0xfffffb7f
 8001500:	080065a8 	.word	0x080065a8
 8001504:	080065c4 	.word	0x080065c4
 8001508:	080065dc 	.word	0x080065dc

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b09e      	sub	sp, #120	@ 0x78
 8001510:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001512:	f000 fc8f 	bl	8001e34 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(10000);
 8001516:	4b50      	ldr	r3, [pc, #320]	@ (8001658 <main+0x14c>)
 8001518:	0018      	movs	r0, r3
 800151a:	f000 fcfb 	bl	8001f14 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151e:	f000 f8bb 	bl	8001698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001522:	f000 fa03 	bl	800192c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001526:	f000 f92f 	bl	8001788 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800152a:	f000 f99f 	bl	800186c <MX_USART1_UART_Init>
  MX_RTC_Init();
 800152e:	f000 f9d3 	bl	80018d8 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8001532:	f000 f969 	bl	8001808 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RTC_WakeUp_Init();
 8001536:	f7ff ff67 	bl	8001408 <RTC_WakeUp_Init>

  join_lora_network(&lora);
 800153a:	4b48      	ldr	r3, [pc, #288]	@ (800165c <main+0x150>)
 800153c:	0018      	movs	r0, r3
 800153e:	f7ff fda1 	bl	8001084 <join_lora_network>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ConsolePrintf("Entering main loop\r\n");
 8001542:	4b47      	ldr	r3, [pc, #284]	@ (8001660 <main+0x154>)
 8001544:	0018      	movs	r0, r3
 8001546:	f000 fa35 	bl	80019b4 <ConsolePrintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ConsolePrintf("Going to sleep...\r\n");
 800154a:	4b46      	ldr	r3, [pc, #280]	@ (8001664 <main+0x158>)
 800154c:	0018      	movs	r0, r3
 800154e:	f000 fa31 	bl	80019b4 <ConsolePrintf>

	  		HAL_I2C_DeInit(&hi2c1);
 8001552:	4b45      	ldr	r3, [pc, #276]	@ (8001668 <main+0x15c>)
 8001554:	0018      	movs	r0, r3
 8001556:	f001 f91f 	bl	8002798 <HAL_I2C_DeInit>
	  		HAL_UART_DeInit(&huart1);
 800155a:	4b44      	ldr	r3, [pc, #272]	@ (800166c <main+0x160>)
 800155c:	0018      	movs	r0, r3
 800155e:	f003 fa7b 	bl	8004a58 <HAL_UART_DeInit>
	  		// De-init LPUART1 (LoRaWAN UART)
	  		HAL_UART_DeInit(&hlpuart1);
 8001562:	4b43      	ldr	r3, [pc, #268]	@ (8001670 <main+0x164>)
 8001564:	0018      	movs	r0, r3
 8001566:	f003 fa77 	bl	8004a58 <HAL_UART_DeInit>

	  		// Disable LPUART wake-up from Stop mode
	  		__HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_RXNE); // Disable RXNE interrupt
 800156a:	4b41      	ldr	r3, [pc, #260]	@ (8001670 <main+0x164>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4b3f      	ldr	r3, [pc, #252]	@ (8001670 <main+0x164>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2120      	movs	r1, #32
 8001576:	438a      	bics	r2, r1
 8001578:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_IDLE); // Disable IDLE interrupt
 800157a:	4b3d      	ldr	r3, [pc, #244]	@ (8001670 <main+0x164>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b3b      	ldr	r3, [pc, #236]	@ (8001670 <main+0x164>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2110      	movs	r1, #16
 8001586:	438a      	bics	r2, r1
 8001588:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 800158a:	4b39      	ldr	r3, [pc, #228]	@ (8001670 <main+0x164>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2230      	movs	r2, #48	@ 0x30
 8001590:	621a      	str	r2, [r3, #32]

	  		__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE); // Disable RXNE interrupt
 8001592:	4b36      	ldr	r3, [pc, #216]	@ (800166c <main+0x160>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b34      	ldr	r3, [pc, #208]	@ (800166c <main+0x160>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2120      	movs	r1, #32
 800159e:	438a      	bics	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE); // Disable IDLE interrupt
 80015a2:	4b32      	ldr	r3, [pc, #200]	@ (800166c <main+0x160>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b30      	ldr	r3, [pc, #192]	@ (800166c <main+0x160>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2110      	movs	r1, #16
 80015ae:	438a      	bics	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 80015b2:	4b2e      	ldr	r3, [pc, #184]	@ (800166c <main+0x160>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2230      	movs	r2, #48	@ 0x30
 80015b8:	621a      	str	r2, [r3, #32]


	  		// Enter Stop mode
	  		Enter_Stop_Mode();  // Wakes up via RTC interrupt
 80015ba:	f7ff ff73 	bl	80014a4 <Enter_Stop_Mode>

	  		// === Code resumes after wake-up ===
	  		ConsolePrintf("Resumed after wake-up\r\n");
 80015be:	4b2d      	ldr	r3, [pc, #180]	@ (8001674 <main+0x168>)
 80015c0:	0018      	movs	r0, r3
 80015c2:	f000 f9f7 	bl	80019b4 <ConsolePrintf>

	  		// Reconfigure clocks
	  		SystemClock_Config();
 80015c6:	f000 f867 	bl	8001698 <SystemClock_Config>
	  		ConsolePrintf("System clock reconfigured\r\n");
 80015ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001678 <main+0x16c>)
 80015cc:	0018      	movs	r0, r3
 80015ce:	f000 f9f1 	bl	80019b4 <ConsolePrintf>

	  		// Reinit UART
	  		MX_USART1_UART_Init();
 80015d2:	f000 f94b 	bl	800186c <MX_USART1_UART_Init>
	  		ConsolePrintf("UART reinitialized\r\n");
 80015d6:	4b29      	ldr	r3, [pc, #164]	@ (800167c <main+0x170>)
 80015d8:	0018      	movs	r0, r3
 80015da:	f000 f9eb 	bl	80019b4 <ConsolePrintf>

	  		MX_LPUART1_UART_Init();
 80015de:	f000 f913 	bl	8001808 <MX_LPUART1_UART_Init>
	  		ConsolePrintf("LPUART1 (lora) reinitialized\r\n");
 80015e2:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <main+0x174>)
 80015e4:	0018      	movs	r0, r3
 80015e6:	f000 f9e5 	bl	80019b4 <ConsolePrintf>

	  		// Reinit WakeUp timer (MUST be outside the callback!)
	  		RTC_WakeUp_Init();
 80015ea:	f7ff ff0d 	bl	8001408 <RTC_WakeUp_Init>
	  		ConsolePrintf("RTC Wake-Up Timer reinitialized\r\n");
 80015ee:	4b25      	ldr	r3, [pc, #148]	@ (8001684 <main+0x178>)
 80015f0:	0018      	movs	r0, r3
 80015f2:	f000 f9df 	bl	80019b4 <ConsolePrintf>

	  		int16_t t = 0;
 80015f6:	2166      	movs	r1, #102	@ 0x66
 80015f8:	187b      	adds	r3, r7, r1
 80015fa:	2200      	movs	r2, #0
 80015fc:	801a      	strh	r2, [r3, #0]
	  		int16_t h = 0;
 80015fe:	2064      	movs	r0, #100	@ 0x64
 8001600:	183b      	adds	r3, r7, r0
 8001602:	2200      	movs	r2, #0
 8001604:	801a      	strh	r2, [r3, #0]
	  		SHT40_Read(t,h);
 8001606:	187b      	adds	r3, r7, r1
 8001608:	2200      	movs	r2, #0
 800160a:	5e9b      	ldrsh	r3, [r3, r2]
 800160c:	001a      	movs	r2, r3
 800160e:	183b      	adds	r3, r7, r0
 8001610:	2100      	movs	r1, #0
 8001612:	5e5b      	ldrsh	r3, [r3, r1]
 8001614:	0019      	movs	r1, r3
 8001616:	0010      	movs	r0, r2
 8001618:	f7ff fdd8 	bl	80011cc <SHT40_Read>
            char response[32];
            ATC_SendReceive(&lora, "AT\r\n", strlen("AT\r\n"), response, sizeof(response), 5000, "OK");
 800161c:	1d3a      	adds	r2, r7, #4
 800161e:	491a      	ldr	r1, [pc, #104]	@ (8001688 <main+0x17c>)
 8001620:	480e      	ldr	r0, [pc, #56]	@ (800165c <main+0x150>)
 8001622:	4b1a      	ldr	r3, [pc, #104]	@ (800168c <main+0x180>)
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <main+0x184>)
 8001628:	9301      	str	r3, [sp, #4]
 800162a:	2320      	movs	r3, #32
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	0013      	movs	r3, r2
 8001630:	2204      	movs	r2, #4
 8001632:	f7ff fc57 	bl	8000ee4 <ATC_SendReceive>
            char response2[64];
            ATC_SendReceive(&lora, "AT+SEND \"AA\"\r\n", strlen("AT+SEND \"AA\"\r\n"), response2, sizeof(response2), 5000, "OK");
 8001636:	2324      	movs	r3, #36	@ 0x24
 8001638:	18fa      	adds	r2, r7, r3
 800163a:	4916      	ldr	r1, [pc, #88]	@ (8001694 <main+0x188>)
 800163c:	4807      	ldr	r0, [pc, #28]	@ (800165c <main+0x150>)
 800163e:	4b13      	ldr	r3, [pc, #76]	@ (800168c <main+0x180>)
 8001640:	9302      	str	r3, [sp, #8]
 8001642:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <main+0x184>)
 8001644:	9301      	str	r3, [sp, #4]
 8001646:	2340      	movs	r3, #64	@ 0x40
 8001648:	9300      	str	r3, [sp, #0]
 800164a:	0013      	movs	r3, r2
 800164c:	220e      	movs	r2, #14
 800164e:	f7ff fc49 	bl	8000ee4 <ATC_SendReceive>
	  		__NOP();
 8001652:	46c0      	nop			@ (mov r8, r8)
  {
 8001654:	46c0      	nop			@ (mov r8, r8)
 8001656:	e778      	b.n	800154a <main+0x3e>
 8001658:	00002710 	.word	0x00002710
 800165c:	20000200 	.word	0x20000200
 8001660:	080065f0 	.word	0x080065f0
 8001664:	08006608 	.word	0x08006608
 8001668:	20000078 	.word	0x20000078
 800166c:	20000154 	.word	0x20000154
 8001670:	200000cc 	.word	0x200000cc
 8001674:	0800661c 	.word	0x0800661c
 8001678:	08006634 	.word	0x08006634
 800167c:	08006650 	.word	0x08006650
 8001680:	08006668 	.word	0x08006668
 8001684:	08006688 	.word	0x08006688
 8001688:	08006208 	.word	0x08006208
 800168c:	0800621c 	.word	0x0800621c
 8001690:	00001388 	.word	0x00001388
 8001694:	080066ac 	.word	0x080066ac

08001698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b09f      	sub	sp, #124	@ 0x7c
 800169c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169e:	2440      	movs	r4, #64	@ 0x40
 80016a0:	193b      	adds	r3, r7, r4
 80016a2:	0018      	movs	r0, r3
 80016a4:	2338      	movs	r3, #56	@ 0x38
 80016a6:	001a      	movs	r2, r3
 80016a8:	2100      	movs	r1, #0
 80016aa:	f004 f911 	bl	80058d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ae:	232c      	movs	r3, #44	@ 0x2c
 80016b0:	18fb      	adds	r3, r7, r3
 80016b2:	0018      	movs	r0, r3
 80016b4:	2314      	movs	r3, #20
 80016b6:	001a      	movs	r2, r3
 80016b8:	2100      	movs	r1, #0
 80016ba:	f004 f909 	bl	80058d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	0018      	movs	r0, r3
 80016c2:	2328      	movs	r3, #40	@ 0x28
 80016c4:	001a      	movs	r2, r3
 80016c6:	2100      	movs	r1, #0
 80016c8:	f004 f902 	bl	80058d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <SystemClock_Config+0xe8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a2c      	ldr	r2, [pc, #176]	@ (8001784 <SystemClock_Config+0xec>)
 80016d2:	401a      	ands	r2, r3
 80016d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <SystemClock_Config+0xe8>)
 80016d6:	2180      	movs	r1, #128	@ 0x80
 80016d8:	0109      	lsls	r1, r1, #4
 80016da:	430a      	orrs	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80016de:	0021      	movs	r1, r4
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2218      	movs	r2, #24
 80016e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	2201      	movs	r2, #1
 80016ea:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2201      	movs	r2, #1
 80016f0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	22a0      	movs	r2, #160	@ 0xa0
 80016fc:	0212      	lsls	r2, r2, #8
 80016fe:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001700:	187b      	adds	r3, r7, r1
 8001702:	2200      	movs	r2, #0
 8001704:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001706:	187b      	adds	r3, r7, r1
 8001708:	0018      	movs	r0, r3
 800170a:	f001 fe6f 	bl	80033ec <HAL_RCC_OscConfig>
 800170e:	1e03      	subs	r3, r0, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001712:	f000 f9c5 	bl	8001aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001716:	212c      	movs	r1, #44	@ 0x2c
 8001718:	187b      	adds	r3, r7, r1
 800171a:	220f      	movs	r2, #15
 800171c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800171e:	187b      	adds	r3, r7, r1
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001724:	187b      	adds	r3, r7, r1
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800172a:	187b      	adds	r3, r7, r1
 800172c:	2200      	movs	r2, #0
 800172e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001730:	187b      	adds	r3, r7, r1
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001736:	187b      	adds	r3, r7, r1
 8001738:	2100      	movs	r1, #0
 800173a:	0018      	movs	r0, r3
 800173c:	f002 fa2a 	bl	8003b94 <HAL_RCC_ClockConfig>
 8001740:	1e03      	subs	r3, r0, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001744:	f000 f9ac 	bl	8001aa0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	222d      	movs	r2, #45	@ 0x2d
 800174c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2200      	movs	r2, #0
 8001752:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2280      	movs	r2, #128	@ 0x80
 8001764:	0292      	lsls	r2, r2, #10
 8001766:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	0018      	movs	r0, r3
 800176c:	f002 fc16 	bl	8003f9c <HAL_RCCEx_PeriphCLKConfig>
 8001770:	1e03      	subs	r3, r0, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001774:	f000 f994 	bl	8001aa0 <Error_Handler>
  }
}
 8001778:	46c0      	nop			@ (mov r8, r8)
 800177a:	46bd      	mov	sp, r7
 800177c:	b01f      	add	sp, #124	@ 0x7c
 800177e:	bd90      	pop	{r4, r7, pc}
 8001780:	40007000 	.word	0x40007000
 8001784:	ffffe7ff 	.word	0xffffe7ff

08001788 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800178c:	4b1c      	ldr	r3, [pc, #112]	@ (8001800 <MX_I2C1_Init+0x78>)
 800178e:	4a1d      	ldr	r2, [pc, #116]	@ (8001804 <MX_I2C1_Init+0x7c>)
 8001790:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8001792:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <MX_I2C1_Init+0x78>)
 8001794:	22c1      	movs	r2, #193	@ 0xc1
 8001796:	00d2      	lsls	r2, r2, #3
 8001798:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800179a:	4b19      	ldr	r3, [pc, #100]	@ (8001800 <MX_I2C1_Init+0x78>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a0:	4b17      	ldr	r3, [pc, #92]	@ (8001800 <MX_I2C1_Init+0x78>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a6:	4b16      	ldr	r3, [pc, #88]	@ (8001800 <MX_I2C1_Init+0x78>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017ac:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <MX_I2C1_Init+0x78>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017b2:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <MX_I2C1_Init+0x78>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b8:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <MX_I2C1_Init+0x78>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <MX_I2C1_Init+0x78>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <MX_I2C1_Init+0x78>)
 80017c6:	0018      	movs	r0, r3
 80017c8:	f000 ff40 	bl	800264c <HAL_I2C_Init>
 80017cc:	1e03      	subs	r3, r0, #0
 80017ce:	d001      	beq.n	80017d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017d0:	f000 f966 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001800 <MX_I2C1_Init+0x78>)
 80017d6:	2100      	movs	r1, #0
 80017d8:	0018      	movs	r0, r3
 80017da:	f001 fd13 	bl	8003204 <HAL_I2CEx_ConfigAnalogFilter>
 80017de:	1e03      	subs	r3, r0, #0
 80017e0:	d001      	beq.n	80017e6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80017e2:	f000 f95d 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <MX_I2C1_Init+0x78>)
 80017e8:	2100      	movs	r1, #0
 80017ea:	0018      	movs	r0, r3
 80017ec:	f001 fd56 	bl	800329c <HAL_I2CEx_ConfigDigitalFilter>
 80017f0:	1e03      	subs	r3, r0, #0
 80017f2:	d001      	beq.n	80017f8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80017f4:	f000 f954 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017f8:	46c0      	nop			@ (mov r8, r8)
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			@ (mov r8, r8)
 8001800:	20000078 	.word	0x20000078
 8001804:	40005400 	.word	0x40005400

08001808 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800180c:	4b14      	ldr	r3, [pc, #80]	@ (8001860 <MX_LPUART1_UART_Init+0x58>)
 800180e:	4a15      	ldr	r2, [pc, #84]	@ (8001864 <MX_LPUART1_UART_Init+0x5c>)
 8001810:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001812:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <MX_LPUART1_UART_Init+0x58>)
 8001814:	22e1      	movs	r2, #225	@ 0xe1
 8001816:	0252      	lsls	r2, r2, #9
 8001818:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800181a:	4b11      	ldr	r3, [pc, #68]	@ (8001860 <MX_LPUART1_UART_Init+0x58>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001820:	4b0f      	ldr	r3, [pc, #60]	@ (8001860 <MX_LPUART1_UART_Init+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001826:	4b0e      	ldr	r3, [pc, #56]	@ (8001860 <MX_LPUART1_UART_Init+0x58>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800182c:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <MX_LPUART1_UART_Init+0x58>)
 800182e:	220c      	movs	r2, #12
 8001830:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001832:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <MX_LPUART1_UART_Init+0x58>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001838:	4b09      	ldr	r3, [pc, #36]	@ (8001860 <MX_LPUART1_UART_Init+0x58>)
 800183a:	2200      	movs	r2, #0
 800183c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800183e:	4b08      	ldr	r3, [pc, #32]	@ (8001860 <MX_LPUART1_UART_Init+0x58>)
 8001840:	2200      	movs	r2, #0
 8001842:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <MX_LPUART1_UART_Init+0x58>)
 8001846:	0018      	movs	r0, r3
 8001848:	f003 f8b2 	bl	80049b0 <HAL_UART_Init>
 800184c:	1e03      	subs	r3, r0, #0
 800184e:	d001      	beq.n	8001854 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001850:	f000 f926 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  lora.huart = &hlpuart1;
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <MX_LPUART1_UART_Init+0x60>)
 8001856:	4a02      	ldr	r2, [pc, #8]	@ (8001860 <MX_LPUART1_UART_Init+0x58>)
 8001858:	601a      	str	r2, [r3, #0]
  /* USER CODE END LPUART1_Init 2 */

}
 800185a:	46c0      	nop			@ (mov r8, r8)
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	200000cc 	.word	0x200000cc
 8001864:	40004800 	.word	0x40004800
 8001868:	20000200 	.word	0x20000200

0800186c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001870:	4b16      	ldr	r3, [pc, #88]	@ (80018cc <MX_USART1_UART_Init+0x60>)
 8001872:	4a17      	ldr	r2, [pc, #92]	@ (80018d0 <MX_USART1_UART_Init+0x64>)
 8001874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001876:	4b15      	ldr	r3, [pc, #84]	@ (80018cc <MX_USART1_UART_Init+0x60>)
 8001878:	22e1      	movs	r2, #225	@ 0xe1
 800187a:	0252      	lsls	r2, r2, #9
 800187c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <MX_USART1_UART_Init+0x60>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <MX_USART1_UART_Init+0x60>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <MX_USART1_UART_Init+0x60>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001890:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <MX_USART1_UART_Init+0x60>)
 8001892:	220c      	movs	r2, #12
 8001894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <MX_USART1_UART_Init+0x60>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	4b0b      	ldr	r3, [pc, #44]	@ (80018cc <MX_USART1_UART_Init+0x60>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <MX_USART1_UART_Init+0x60>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <MX_USART1_UART_Init+0x60>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ae:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <MX_USART1_UART_Init+0x60>)
 80018b0:	0018      	movs	r0, r3
 80018b2:	f003 f87d 	bl	80049b0 <HAL_UART_Init>
 80018b6:	1e03      	subs	r3, r0, #0
 80018b8:	d001      	beq.n	80018be <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80018ba:	f000 f8f1 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  ConsolePrintf("USART1 (DBG) Cnfigured\r\n");
 80018be:	4b05      	ldr	r3, [pc, #20]	@ (80018d4 <MX_USART1_UART_Init+0x68>)
 80018c0:	0018      	movs	r0, r3
 80018c2:	f000 f877 	bl	80019b4 <ConsolePrintf>
  /* USER CODE END USART1_Init 2 */

}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000154 	.word	0x20000154
 80018d0:	40013800 	.word	0x40013800
 80018d4:	080066bc 	.word	0x080066bc

080018d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018dc:	4b11      	ldr	r3, [pc, #68]	@ (8001924 <MX_RTC_Init+0x4c>)
 80018de:	4a12      	ldr	r2, [pc, #72]	@ (8001928 <MX_RTC_Init+0x50>)
 80018e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <MX_RTC_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <MX_RTC_Init+0x4c>)
 80018ea:	227f      	movs	r2, #127	@ 0x7f
 80018ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001924 <MX_RTC_Init+0x4c>)
 80018f0:	22ff      	movs	r2, #255	@ 0xff
 80018f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <MX_RTC_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <MX_RTC_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <MX_RTC_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001906:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <MX_RTC_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800190c:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <MX_RTC_Init+0x4c>)
 800190e:	0018      	movs	r0, r3
 8001910:	f002 fce2 	bl	80042d8 <HAL_RTC_Init>
 8001914:	1e03      	subs	r3, r0, #0
 8001916:	d001      	beq.n	800191c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001918:	f000 f8c2 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800191c:	46c0      	nop			@ (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			@ (mov r8, r8)
 8001924:	200001dc 	.word	0x200001dc
 8001928:	40002800 	.word	0x40002800

0800192c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800192c:	b590      	push	{r4, r7, lr}
 800192e:	b089      	sub	sp, #36	@ 0x24
 8001930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001932:	240c      	movs	r4, #12
 8001934:	193b      	adds	r3, r7, r4
 8001936:	0018      	movs	r0, r3
 8001938:	2314      	movs	r3, #20
 800193a:	001a      	movs	r2, r3
 800193c:	2100      	movs	r1, #0
 800193e:	f003 ffc7 	bl	80058d0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001942:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <MX_GPIO_Init+0x80>)
 8001944:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <MX_GPIO_Init+0x80>)
 8001948:	2101      	movs	r1, #1
 800194a:	430a      	orrs	r2, r1
 800194c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800194e:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <MX_GPIO_Init+0x80>)
 8001950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001952:	2201      	movs	r2, #1
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
 8001958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <MX_GPIO_Init+0x80>)
 800195c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800195e:	4b13      	ldr	r3, [pc, #76]	@ (80019ac <MX_GPIO_Init+0x80>)
 8001960:	2102      	movs	r1, #2
 8001962:	430a      	orrs	r2, r1
 8001964:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <MX_GPIO_Init+0x80>)
 8001968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800196a:	2202      	movs	r2, #2
 800196c:	4013      	ands	r3, r2
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001972:	4b0f      	ldr	r3, [pc, #60]	@ (80019b0 <MX_GPIO_Init+0x84>)
 8001974:	2201      	movs	r2, #1
 8001976:	2120      	movs	r1, #32
 8001978:	0018      	movs	r0, r3
 800197a:	f000 fe49 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800197e:	0021      	movs	r1, r4
 8001980:	187b      	adds	r3, r7, r1
 8001982:	2220      	movs	r2, #32
 8001984:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	187b      	adds	r3, r7, r1
 8001988:	2201      	movs	r2, #1
 800198a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	187b      	adds	r3, r7, r1
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	187b      	adds	r3, r7, r1
 8001994:	2200      	movs	r2, #0
 8001996:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001998:	187b      	adds	r3, r7, r1
 800199a:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <MX_GPIO_Init+0x84>)
 800199c:	0019      	movs	r1, r3
 800199e:	0010      	movs	r0, r2
 80019a0:	f000 fbd6 	bl	8002150 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019a4:	46c0      	nop			@ (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b009      	add	sp, #36	@ 0x24
 80019aa:	bd90      	pop	{r4, r7, pc}
 80019ac:	40021000 	.word	0x40021000
 80019b0:	50000400 	.word	0x50000400

080019b4 <ConsolePrintf>:

/* USER CODE BEGIN 4 */
void ConsolePrintf(const char *format, ...)
{
 80019b4:	b40f      	push	{r0, r1, r2, r3}
 80019b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019b8:	b0df      	sub	sp, #380	@ 0x17c
 80019ba:	af06      	add	r7, sp, #24
    char final_buffer[160]; // Combined buffer (timestamp + message)

    // Get time and date from RTC
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;
    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80019bc:	2308      	movs	r3, #8
 80019be:	18f9      	adds	r1, r7, r3
 80019c0:	4b31      	ldr	r3, [pc, #196]	@ (8001a88 <ConsolePrintf+0xd4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	0018      	movs	r0, r3
 80019c6:	f002 fd23 	bl	8004410 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80019ca:	231c      	movs	r3, #28
 80019cc:	18f9      	adds	r1, r7, r3
 80019ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001a88 <ConsolePrintf+0xd4>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	0018      	movs	r0, r3
 80019d4:	f002 fd7a 	bl	80044cc <HAL_RTC_GetDate>

    // Format timestamp as [YYYY-MM-DD HH:MM:SS]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
             date.Year, date.Month, date.Date,
 80019d8:	4b2c      	ldr	r3, [pc, #176]	@ (8001a8c <ConsolePrintf+0xd8>)
 80019da:	22b0      	movs	r2, #176	@ 0xb0
 80019dc:	0052      	lsls	r2, r2, #1
 80019de:	189b      	adds	r3, r3, r2
 80019e0:	19db      	adds	r3, r3, r7
 80019e2:	78db      	ldrb	r3, [r3, #3]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80019e4:	469c      	mov	ip, r3
             date.Year, date.Month, date.Date,
 80019e6:	4b29      	ldr	r3, [pc, #164]	@ (8001a8c <ConsolePrintf+0xd8>)
 80019e8:	189b      	adds	r3, r3, r2
 80019ea:	19db      	adds	r3, r3, r7
 80019ec:	785b      	ldrb	r3, [r3, #1]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80019ee:	0019      	movs	r1, r3
             date.Year, date.Month, date.Date,
 80019f0:	4b26      	ldr	r3, [pc, #152]	@ (8001a8c <ConsolePrintf+0xd8>)
 80019f2:	189b      	adds	r3, r3, r2
 80019f4:	19db      	adds	r3, r3, r7
 80019f6:	789b      	ldrb	r3, [r3, #2]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 80019f8:	001c      	movs	r4, r3
             time.Hours, time.Minutes, time.Seconds);
 80019fa:	4b25      	ldr	r3, [pc, #148]	@ (8001a90 <ConsolePrintf+0xdc>)
 80019fc:	189b      	adds	r3, r3, r2
 80019fe:	19db      	adds	r3, r3, r7
 8001a00:	781b      	ldrb	r3, [r3, #0]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001a02:	001d      	movs	r5, r3
             time.Hours, time.Minutes, time.Seconds);
 8001a04:	4b22      	ldr	r3, [pc, #136]	@ (8001a90 <ConsolePrintf+0xdc>)
 8001a06:	189b      	adds	r3, r3, r2
 8001a08:	19db      	adds	r3, r3, r7
 8001a0a:	785b      	ldrb	r3, [r3, #1]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001a0c:	001e      	movs	r6, r3
             time.Hours, time.Minutes, time.Seconds);
 8001a0e:	4b20      	ldr	r3, [pc, #128]	@ (8001a90 <ConsolePrintf+0xdc>)
 8001a10:	189b      	adds	r3, r3, r2
 8001a12:	19db      	adds	r3, r3, r7
 8001a14:	789b      	ldrb	r3, [r3, #2]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001a16:	4a1f      	ldr	r2, [pc, #124]	@ (8001a94 <ConsolePrintf+0xe0>)
 8001a18:	20c0      	movs	r0, #192	@ 0xc0
 8001a1a:	1838      	adds	r0, r7, r0
 8001a1c:	9304      	str	r3, [sp, #16]
 8001a1e:	9603      	str	r6, [sp, #12]
 8001a20:	9502      	str	r5, [sp, #8]
 8001a22:	9401      	str	r4, [sp, #4]
 8001a24:	9100      	str	r1, [sp, #0]
 8001a26:	4663      	mov	r3, ip
 8001a28:	2120      	movs	r1, #32
 8001a2a:	f003 fee1 	bl	80057f0 <sniprintf>

    // Format the original message
    va_list args;
    va_start(args, format);
 8001a2e:	23be      	movs	r3, #190	@ 0xbe
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	22bc      	movs	r2, #188	@ 0xbc
 8001a3a:	0052      	lsls	r2, r2, #1
 8001a3c:	18ba      	adds	r2, r7, r2
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	25e0      	movs	r5, #224	@ 0xe0
 8001a42:	1978      	adds	r0, r7, r5
 8001a44:	2180      	movs	r1, #128	@ 0x80
 8001a46:	f003 ff37 	bl	80058b8 <vsniprintf>
    va_end(args);

    // Combine timestamp and message
    snprintf(final_buffer, sizeof(final_buffer), "%s%s", timestamp_buffer, buffer);
 8001a4a:	20c0      	movs	r0, #192	@ 0xc0
 8001a4c:	1839      	adds	r1, r7, r0
 8001a4e:	4a12      	ldr	r2, [pc, #72]	@ (8001a98 <ConsolePrintf+0xe4>)
 8001a50:	2420      	movs	r4, #32
 8001a52:	1938      	adds	r0, r7, r4
 8001a54:	197b      	adds	r3, r7, r5
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	000b      	movs	r3, r1
 8001a5a:	21a0      	movs	r1, #160	@ 0xa0
 8001a5c:	f003 fec8 	bl	80057f0 <sniprintf>

    // Transmit the combined message
    HAL_UART_Transmit(&huart1, (uint8_t *)final_buffer, strlen(final_buffer), HAL_MAX_DELAY);
 8001a60:	193b      	adds	r3, r7, r4
 8001a62:	0018      	movs	r0, r3
 8001a64:	f7fe fb50 	bl	8000108 <strlen>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	b29a      	uxth	r2, r3
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	425b      	negs	r3, r3
 8001a70:	1939      	adds	r1, r7, r4
 8001a72:	480a      	ldr	r0, [pc, #40]	@ (8001a9c <ConsolePrintf+0xe8>)
 8001a74:	f003 f82e 	bl	8004ad4 <HAL_UART_Transmit>
}
 8001a78:	46c0      	nop			@ (mov r8, r8)
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	b059      	add	sp, #356	@ 0x164
 8001a7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a80:	bc08      	pop	{r3}
 8001a82:	b004      	add	sp, #16
 8001a84:	4718      	bx	r3
 8001a86:	46c0      	nop			@ (mov r8, r8)
 8001a88:	200001dc 	.word	0x200001dc
 8001a8c:	fffffebc 	.word	0xfffffebc
 8001a90:	fffffea8 	.word	0xfffffea8
 8001a94:	080066d8 	.word	0x080066d8
 8001a98:	080066fc 	.word	0x080066fc
 8001a9c:	20000154 	.word	0x20000154

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	46c0      	nop			@ (mov r8, r8)
 8001aaa:	e7fd      	b.n	8001aa8 <Error_Handler+0x8>

08001aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab0:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <HAL_MspInit+0x24>)
 8001ab2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <HAL_MspInit+0x24>)
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abc:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <HAL_MspInit+0x24>)
 8001abe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ac0:	4b03      	ldr	r3, [pc, #12]	@ (8001ad0 <HAL_MspInit+0x24>)
 8001ac2:	2180      	movs	r1, #128	@ 0x80
 8001ac4:	0549      	lsls	r1, r1, #21
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	46c0      	nop			@ (mov r8, r8)
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40021000 	.word	0x40021000

08001ad4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b089      	sub	sp, #36	@ 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	240c      	movs	r4, #12
 8001ade:	193b      	adds	r3, r7, r4
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	2314      	movs	r3, #20
 8001ae4:	001a      	movs	r2, r3
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	f003 fef2 	bl	80058d0 <memset>
  if(hi2c->Instance==I2C1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a17      	ldr	r2, [pc, #92]	@ (8001b50 <HAL_I2C_MspInit+0x7c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d128      	bne.n	8001b48 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <HAL_I2C_MspInit+0x80>)
 8001af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001afa:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <HAL_I2C_MspInit+0x80>)
 8001afc:	2102      	movs	r1, #2
 8001afe:	430a      	orrs	r2, r1
 8001b00:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b02:	4b14      	ldr	r3, [pc, #80]	@ (8001b54 <HAL_I2C_MspInit+0x80>)
 8001b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b06:	2202      	movs	r2, #2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b0e:	0021      	movs	r1, r4
 8001b10:	187b      	adds	r3, r7, r1
 8001b12:	22c0      	movs	r2, #192	@ 0xc0
 8001b14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b16:	187b      	adds	r3, r7, r1
 8001b18:	2212      	movs	r2, #18
 8001b1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	187b      	adds	r3, r7, r1
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b22:	187b      	adds	r3, r7, r1
 8001b24:	2203      	movs	r2, #3
 8001b26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	4a09      	ldr	r2, [pc, #36]	@ (8001b58 <HAL_I2C_MspInit+0x84>)
 8001b32:	0019      	movs	r1, r3
 8001b34:	0010      	movs	r0, r2
 8001b36:	f000 fb0b 	bl	8002150 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_I2C_MspInit+0x80>)
 8001b3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b3e:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_I2C_MspInit+0x80>)
 8001b40:	2180      	movs	r1, #128	@ 0x80
 8001b42:	0389      	lsls	r1, r1, #14
 8001b44:	430a      	orrs	r2, r1
 8001b46:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b48:	46c0      	nop			@ (mov r8, r8)
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b009      	add	sp, #36	@ 0x24
 8001b4e:	bd90      	pop	{r4, r7, pc}
 8001b50:	40005400 	.word	0x40005400
 8001b54:	40021000 	.word	0x40021000
 8001b58:	50000400 	.word	0x50000400

08001b5c <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0b      	ldr	r2, [pc, #44]	@ (8001b98 <HAL_I2C_MspDeInit+0x3c>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d10f      	bne.n	8001b8e <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_I2C_MspDeInit+0x40>)
 8001b70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b72:	4b0a      	ldr	r3, [pc, #40]	@ (8001b9c <HAL_I2C_MspDeInit+0x40>)
 8001b74:	490a      	ldr	r1, [pc, #40]	@ (8001ba0 <HAL_I2C_MspDeInit+0x44>)
 8001b76:	400a      	ands	r2, r1
 8001b78:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8001b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba4 <HAL_I2C_MspDeInit+0x48>)
 8001b7c:	2140      	movs	r1, #64	@ 0x40
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f000 fc64 	bl	800244c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001b84:	4b07      	ldr	r3, [pc, #28]	@ (8001ba4 <HAL_I2C_MspDeInit+0x48>)
 8001b86:	2180      	movs	r1, #128	@ 0x80
 8001b88:	0018      	movs	r0, r3
 8001b8a:	f000 fc5f 	bl	800244c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001b8e:	46c0      	nop			@ (mov r8, r8)
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b002      	add	sp, #8
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	46c0      	nop			@ (mov r8, r8)
 8001b98:	40005400 	.word	0x40005400
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	ffdfffff 	.word	0xffdfffff
 8001ba4:	50000400 	.word	0x50000400

08001ba8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b08b      	sub	sp, #44	@ 0x2c
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	2414      	movs	r4, #20
 8001bb2:	193b      	adds	r3, r7, r4
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	2314      	movs	r3, #20
 8001bb8:	001a      	movs	r2, r3
 8001bba:	2100      	movs	r1, #0
 8001bbc:	f003 fe88 	bl	80058d0 <memset>
  if(huart->Instance==LPUART1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a30      	ldr	r2, [pc, #192]	@ (8001c88 <HAL_UART_MspInit+0xe0>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d12a      	bne.n	8001c20 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001bca:	4b30      	ldr	r3, [pc, #192]	@ (8001c8c <HAL_UART_MspInit+0xe4>)
 8001bcc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001bce:	4b2f      	ldr	r3, [pc, #188]	@ (8001c8c <HAL_UART_MspInit+0xe4>)
 8001bd0:	2180      	movs	r1, #128	@ 0x80
 8001bd2:	02c9      	lsls	r1, r1, #11
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c8c <HAL_UART_MspInit+0xe4>)
 8001bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c8c <HAL_UART_MspInit+0xe4>)
 8001bde:	2101      	movs	r1, #1
 8001be0:	430a      	orrs	r2, r1
 8001be2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001be4:	4b29      	ldr	r3, [pc, #164]	@ (8001c8c <HAL_UART_MspInit+0xe4>)
 8001be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be8:	2201      	movs	r2, #1
 8001bea:	4013      	ands	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bf0:	0021      	movs	r1, r4
 8001bf2:	187b      	adds	r3, r7, r1
 8001bf4:	220c      	movs	r2, #12
 8001bf6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf8:	187b      	adds	r3, r7, r1
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfe:	187b      	adds	r3, r7, r1
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c04:	187b      	adds	r3, r7, r1
 8001c06:	2203      	movs	r2, #3
 8001c08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001c0a:	187b      	adds	r3, r7, r1
 8001c0c:	2206      	movs	r2, #6
 8001c0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	187a      	adds	r2, r7, r1
 8001c12:	23a0      	movs	r3, #160	@ 0xa0
 8001c14:	05db      	lsls	r3, r3, #23
 8001c16:	0011      	movs	r1, r2
 8001c18:	0018      	movs	r0, r3
 8001c1a:	f000 fa99 	bl	8002150 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c1e:	e02f      	b.n	8001c80 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART1)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a1a      	ldr	r2, [pc, #104]	@ (8001c90 <HAL_UART_MspInit+0xe8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d12a      	bne.n	8001c80 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c2a:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <HAL_UART_MspInit+0xe4>)
 8001c2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c2e:	4b17      	ldr	r3, [pc, #92]	@ (8001c8c <HAL_UART_MspInit+0xe4>)
 8001c30:	2180      	movs	r1, #128	@ 0x80
 8001c32:	01c9      	lsls	r1, r1, #7
 8001c34:	430a      	orrs	r2, r1
 8001c36:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <HAL_UART_MspInit+0xe4>)
 8001c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <HAL_UART_MspInit+0xe4>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	430a      	orrs	r2, r1
 8001c42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <HAL_UART_MspInit+0xe4>)
 8001c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c50:	2114      	movs	r1, #20
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	22c0      	movs	r2, #192	@ 0xc0
 8001c56:	00d2      	lsls	r2, r2, #3
 8001c58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	187b      	adds	r3, r7, r1
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	187b      	adds	r3, r7, r1
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	187b      	adds	r3, r7, r1
 8001c68:	2203      	movs	r2, #3
 8001c6a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001c6c:	187b      	adds	r3, r7, r1
 8001c6e:	2204      	movs	r2, #4
 8001c70:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	187a      	adds	r2, r7, r1
 8001c74:	23a0      	movs	r3, #160	@ 0xa0
 8001c76:	05db      	lsls	r3, r3, #23
 8001c78:	0011      	movs	r1, r2
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f000 fa68 	bl	8002150 <HAL_GPIO_Init>
}
 8001c80:	46c0      	nop			@ (mov r8, r8)
 8001c82:	46bd      	mov	sp, r7
 8001c84:	b00b      	add	sp, #44	@ 0x2c
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	40004800 	.word	0x40004800
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	40013800 	.word	0x40013800

08001c94 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a13      	ldr	r2, [pc, #76]	@ (8001cf0 <HAL_UART_MspDeInit+0x5c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d10c      	bne.n	8001cc0 <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN LPUART1_MspDeInit 0 */

    /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8001ca6:	4b13      	ldr	r3, [pc, #76]	@ (8001cf4 <HAL_UART_MspDeInit+0x60>)
 8001ca8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001caa:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <HAL_UART_MspDeInit+0x60>)
 8001cac:	4912      	ldr	r1, [pc, #72]	@ (8001cf8 <HAL_UART_MspDeInit+0x64>)
 8001cae:	400a      	ands	r2, r1
 8001cb0:	639a      	str	r2, [r3, #56]	@ 0x38

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001cb2:	23a0      	movs	r3, #160	@ 0xa0
 8001cb4:	05db      	lsls	r3, r3, #23
 8001cb6:	210c      	movs	r1, #12
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f000 fbc7 	bl	800244c <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 8001cbe:	e012      	b.n	8001ce6 <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART1)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cfc <HAL_UART_MspDeInit+0x68>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d10d      	bne.n	8001ce6 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART1_CLK_DISABLE();
 8001cca:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf4 <HAL_UART_MspDeInit+0x60>)
 8001ccc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cce:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <HAL_UART_MspDeInit+0x60>)
 8001cd0:	490b      	ldr	r1, [pc, #44]	@ (8001d00 <HAL_UART_MspDeInit+0x6c>)
 8001cd2:	400a      	ands	r2, r1
 8001cd4:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001cd6:	23c0      	movs	r3, #192	@ 0xc0
 8001cd8:	00da      	lsls	r2, r3, #3
 8001cda:	23a0      	movs	r3, #160	@ 0xa0
 8001cdc:	05db      	lsls	r3, r3, #23
 8001cde:	0011      	movs	r1, r2
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	f000 fbb3 	bl	800244c <HAL_GPIO_DeInit>
}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b002      	add	sp, #8
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	46c0      	nop			@ (mov r8, r8)
 8001cf0:	40004800 	.word	0x40004800
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	fffbffff 	.word	0xfffbffff
 8001cfc:	40013800 	.word	0x40013800
 8001d00:	ffffbfff 	.word	0xffffbfff

08001d04 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a06      	ldr	r2, [pc, #24]	@ (8001d2c <HAL_RTC_MspInit+0x28>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d106      	bne.n	8001d24 <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d16:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_RTC_MspInit+0x2c>)
 8001d18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d1a:	4b05      	ldr	r3, [pc, #20]	@ (8001d30 <HAL_RTC_MspInit+0x2c>)
 8001d1c:	2180      	movs	r1, #128	@ 0x80
 8001d1e:	02c9      	lsls	r1, r1, #11
 8001d20:	430a      	orrs	r2, r1
 8001d22:	651a      	str	r2, [r3, #80]	@ 0x50

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001d24:	46c0      	nop			@ (mov r8, r8)
 8001d26:	46bd      	mov	sp, r7
 8001d28:	b002      	add	sp, #8
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40002800 	.word	0x40002800
 8001d30:	40021000 	.word	0x40021000

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d38:	46c0      	nop			@ (mov r8, r8)
 8001d3a:	e7fd      	b.n	8001d38 <NMI_Handler+0x4>

08001d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d40:	46c0      	nop			@ (mov r8, r8)
 8001d42:	e7fd      	b.n	8001d40 <HardFault_Handler+0x4>

08001d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d48:	46c0      	nop			@ (mov r8, r8)
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d52:	46c0      	nop			@ (mov r8, r8)
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d5c:	f000 f8be 	bl	8001edc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d60:	46c0      	nop			@ (mov r8, r8)
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <_sbrk>:
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <_sbrk+0x5c>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <_sbrk+0x60>)
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <_sbrk+0x22>
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <_sbrk+0x64>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	@ (8001dd0 <_sbrk+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	18d3      	adds	r3, r2, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d207      	bcs.n	8001da8 <_sbrk+0x40>
 8001d98:	f003 fdb8 	bl	800590c <__errno>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	220c      	movs	r2, #12
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	e009      	b.n	8001dbc <_sbrk+0x54>
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	18d2      	adds	r2, r2, r3
 8001db6:	4b05      	ldr	r3, [pc, #20]	@ (8001dcc <_sbrk+0x64>)
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	0018      	movs	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	b006      	add	sp, #24
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20005000 	.word	0x20005000
 8001dc8:	00000400 	.word	0x00000400
 8001dcc:	20000204 	.word	0x20000204
 8001dd0:	20000358 	.word	0x20000358

08001dd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dd8:	46c0      	nop			@ (mov r8, r8)
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001de0:	480d      	ldr	r0, [pc, #52]	@ (8001e18 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001de2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001de4:	f7ff fff6 	bl	8001dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de8:	480c      	ldr	r0, [pc, #48]	@ (8001e1c <LoopForever+0x6>)
  ldr r1, =_edata
 8001dea:	490d      	ldr	r1, [pc, #52]	@ (8001e20 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dec:	4a0d      	ldr	r2, [pc, #52]	@ (8001e24 <LoopForever+0xe>)
  movs r3, #0
 8001dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df0:	e002      	b.n	8001df8 <LoopCopyDataInit>

08001df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df6:	3304      	adds	r3, #4

08001df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dfc:	d3f9      	bcc.n	8001df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8001e28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e00:	4c0a      	ldr	r4, [pc, #40]	@ (8001e2c <LoopForever+0x16>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e04:	e001      	b.n	8001e0a <LoopFillZerobss>

08001e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e08:	3204      	adds	r2, #4

08001e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e0c:	d3fb      	bcc.n	8001e06 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001e0e:	f003 fd83 	bl	8005918 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e12:	f7ff fb7b 	bl	800150c <main>

08001e16 <LoopForever>:

LoopForever:
    b LoopForever
 8001e16:	e7fe      	b.n	8001e16 <LoopForever>
   ldr   r0, =_estack
 8001e18:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e20:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001e24:	08006830 	.word	0x08006830
  ldr r2, =_sbss
 8001e28:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001e2c:	20000354 	.word	0x20000354

08001e30 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e30:	e7fe      	b.n	8001e30 <ADC1_COMP_IRQHandler>
	...

08001e34 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e3a:	1dfb      	adds	r3, r7, #7
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001e40:	4b0b      	ldr	r3, [pc, #44]	@ (8001e70 <HAL_Init+0x3c>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <HAL_Init+0x3c>)
 8001e46:	2140      	movs	r1, #64	@ 0x40
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 f811 	bl	8001e74 <HAL_InitTick>
 8001e52:	1e03      	subs	r3, r0, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001e56:	1dfb      	adds	r3, r7, #7
 8001e58:	2201      	movs	r2, #1
 8001e5a:	701a      	strb	r2, [r3, #0]
 8001e5c:	e001      	b.n	8001e62 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e5e:	f7ff fe25 	bl	8001aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e62:	1dfb      	adds	r3, r7, #7
 8001e64:	781b      	ldrb	r3, [r3, #0]
}
 8001e66:	0018      	movs	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b002      	add	sp, #8
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	40022000 	.word	0x40022000

08001e74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e74:	b590      	push	{r4, r7, lr}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e7c:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <HAL_InitTick+0x5c>)
 8001e7e:	681c      	ldr	r4, [r3, #0]
 8001e80:	4b14      	ldr	r3, [pc, #80]	@ (8001ed4 <HAL_InitTick+0x60>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	0019      	movs	r1, r3
 8001e86:	23fa      	movs	r3, #250	@ 0xfa
 8001e88:	0098      	lsls	r0, r3, #2
 8001e8a:	f7fe f94f 	bl	800012c <__udivsi3>
 8001e8e:	0003      	movs	r3, r0
 8001e90:	0019      	movs	r1, r3
 8001e92:	0020      	movs	r0, r4
 8001e94:	f7fe f94a 	bl	800012c <__udivsi3>
 8001e98:	0003      	movs	r3, r0
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 f94b 	bl	8002136 <HAL_SYSTICK_Config>
 8001ea0:	1e03      	subs	r3, r0, #0
 8001ea2:	d001      	beq.n	8001ea8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e00f      	b.n	8001ec8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d80b      	bhi.n	8001ec6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eae:	6879      	ldr	r1, [r7, #4]
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	425b      	negs	r3, r3
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f000 f918 	bl	80020ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_InitTick+0x64>)
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	e000      	b.n	8001ec8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
}
 8001ec8:	0018      	movs	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	b003      	add	sp, #12
 8001ece:	bd90      	pop	{r4, r7, pc}
 8001ed0:	20000000 	.word	0x20000000
 8001ed4:	20000008 	.word	0x20000008
 8001ed8:	20000004 	.word	0x20000004

08001edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee0:	4b05      	ldr	r3, [pc, #20]	@ (8001ef8 <HAL_IncTick+0x1c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	001a      	movs	r2, r3
 8001ee6:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <HAL_IncTick+0x20>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	18d2      	adds	r2, r2, r3
 8001eec:	4b03      	ldr	r3, [pc, #12]	@ (8001efc <HAL_IncTick+0x20>)
 8001eee:	601a      	str	r2, [r3, #0]
}
 8001ef0:	46c0      	nop			@ (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	20000208 	.word	0x20000208

08001f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  return uwTick;
 8001f04:	4b02      	ldr	r3, [pc, #8]	@ (8001f10 <HAL_GetTick+0x10>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	0018      	movs	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	46c0      	nop			@ (mov r8, r8)
 8001f10:	20000208 	.word	0x20000208

08001f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff fff0 	bl	8001f00 <HAL_GetTick>
 8001f20:	0003      	movs	r3, r0
 8001f22:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	d005      	beq.n	8001f3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <HAL_Delay+0x44>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	001a      	movs	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	189b      	adds	r3, r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	f7ff ffe0 	bl	8001f00 <HAL_GetTick>
 8001f40:	0002      	movs	r2, r0
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d8f7      	bhi.n	8001f3c <HAL_Delay+0x28>
  {
  }
}
 8001f4c:	46c0      	nop			@ (mov r8, r8)
 8001f4e:	46c0      	nop			@ (mov r8, r8)
 8001f50:	46bd      	mov	sp, r7
 8001f52:	b004      	add	sp, #16
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	46c0      	nop			@ (mov r8, r8)
 8001f58:	20000008 	.word	0x20000008

08001f5c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <HAL_SuspendTick+0x18>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <HAL_SuspendTick+0x18>)
 8001f66:	2102      	movs	r1, #2
 8001f68:	438a      	bics	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]
}
 8001f6c:	46c0      	nop			@ (mov r8, r8)
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	e000e010 	.word	0xe000e010

08001f78 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001f7c:	4b04      	ldr	r3, [pc, #16]	@ (8001f90 <HAL_ResumeTick+0x18>)
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	4b03      	ldr	r3, [pc, #12]	@ (8001f90 <HAL_ResumeTick+0x18>)
 8001f82:	2102      	movs	r1, #2
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
}
 8001f88:	46c0      	nop			@ (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			@ (mov r8, r8)
 8001f90:	e000e010 	.word	0xe000e010

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	1dfb      	adds	r3, r7, #7
 8001f9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fa6:	d809      	bhi.n	8001fbc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa8:	1dfb      	adds	r3, r7, #7
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	001a      	movs	r2, r3
 8001fae:	231f      	movs	r3, #31
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <__NVIC_EnableIRQ+0x30>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	4091      	lsls	r1, r2
 8001fb8:	000a      	movs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
  }
}
 8001fbc:	46c0      	nop			@ (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b002      	add	sp, #8
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	0002      	movs	r2, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b7f      	cmp	r3, #127	@ 0x7f
 8001fdc:	d828      	bhi.n	8002030 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fde:	4a2f      	ldr	r2, [pc, #188]	@ (800209c <__NVIC_SetPriority+0xd4>)
 8001fe0:	1dfb      	adds	r3, r7, #7
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b25b      	sxtb	r3, r3
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	33c0      	adds	r3, #192	@ 0xc0
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	589b      	ldr	r3, [r3, r2]
 8001fee:	1dfa      	adds	r2, r7, #7
 8001ff0:	7812      	ldrb	r2, [r2, #0]
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	00d2      	lsls	r2, r2, #3
 8001ffa:	21ff      	movs	r1, #255	@ 0xff
 8001ffc:	4091      	lsls	r1, r2
 8001ffe:	000a      	movs	r2, r1
 8002000:	43d2      	mvns	r2, r2
 8002002:	401a      	ands	r2, r3
 8002004:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	019b      	lsls	r3, r3, #6
 800200a:	22ff      	movs	r2, #255	@ 0xff
 800200c:	401a      	ands	r2, r3
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	0018      	movs	r0, r3
 8002014:	2303      	movs	r3, #3
 8002016:	4003      	ands	r3, r0
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800201c:	481f      	ldr	r0, [pc, #124]	@ (800209c <__NVIC_SetPriority+0xd4>)
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b25b      	sxtb	r3, r3
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	430a      	orrs	r2, r1
 8002028:	33c0      	adds	r3, #192	@ 0xc0
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800202e:	e031      	b.n	8002094 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002030:	4a1b      	ldr	r2, [pc, #108]	@ (80020a0 <__NVIC_SetPriority+0xd8>)
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	0019      	movs	r1, r3
 8002038:	230f      	movs	r3, #15
 800203a:	400b      	ands	r3, r1
 800203c:	3b08      	subs	r3, #8
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3306      	adds	r3, #6
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	18d3      	adds	r3, r2, r3
 8002046:	3304      	adds	r3, #4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	1dfa      	adds	r2, r7, #7
 800204c:	7812      	ldrb	r2, [r2, #0]
 800204e:	0011      	movs	r1, r2
 8002050:	2203      	movs	r2, #3
 8002052:	400a      	ands	r2, r1
 8002054:	00d2      	lsls	r2, r2, #3
 8002056:	21ff      	movs	r1, #255	@ 0xff
 8002058:	4091      	lsls	r1, r2
 800205a:	000a      	movs	r2, r1
 800205c:	43d2      	mvns	r2, r2
 800205e:	401a      	ands	r2, r3
 8002060:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	019b      	lsls	r3, r3, #6
 8002066:	22ff      	movs	r2, #255	@ 0xff
 8002068:	401a      	ands	r2, r3
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	0018      	movs	r0, r3
 8002070:	2303      	movs	r3, #3
 8002072:	4003      	ands	r3, r0
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002078:	4809      	ldr	r0, [pc, #36]	@ (80020a0 <__NVIC_SetPriority+0xd8>)
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	001c      	movs	r4, r3
 8002080:	230f      	movs	r3, #15
 8002082:	4023      	ands	r3, r4
 8002084:	3b08      	subs	r3, #8
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	430a      	orrs	r2, r1
 800208a:	3306      	adds	r3, #6
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	18c3      	adds	r3, r0, r3
 8002090:	3304      	adds	r3, #4
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	46c0      	nop			@ (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b003      	add	sp, #12
 800209a:	bd90      	pop	{r4, r7, pc}
 800209c:	e000e100 	.word	0xe000e100
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	1e5a      	subs	r2, r3, #1
 80020b0:	2380      	movs	r3, #128	@ 0x80
 80020b2:	045b      	lsls	r3, r3, #17
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d301      	bcc.n	80020bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b8:	2301      	movs	r3, #1
 80020ba:	e010      	b.n	80020de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020bc:	4b0a      	ldr	r3, [pc, #40]	@ (80020e8 <SysTick_Config+0x44>)
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	3a01      	subs	r2, #1
 80020c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c4:	2301      	movs	r3, #1
 80020c6:	425b      	negs	r3, r3
 80020c8:	2103      	movs	r1, #3
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7ff ff7c 	bl	8001fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d0:	4b05      	ldr	r3, [pc, #20]	@ (80020e8 <SysTick_Config+0x44>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d6:	4b04      	ldr	r3, [pc, #16]	@ (80020e8 <SysTick_Config+0x44>)
 80020d8:	2207      	movs	r2, #7
 80020da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020dc:	2300      	movs	r3, #0
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b002      	add	sp, #8
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	e000e010 	.word	0xe000e010

080020ec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	210f      	movs	r1, #15
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	1c02      	adds	r2, r0, #0
 80020fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	187b      	adds	r3, r7, r1
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b25b      	sxtb	r3, r3
 8002106:	0011      	movs	r1, r2
 8002108:	0018      	movs	r0, r3
 800210a:	f7ff ff5d 	bl	8001fc8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800210e:	46c0      	nop			@ (mov r8, r8)
 8002110:	46bd      	mov	sp, r7
 8002112:	b004      	add	sp, #16
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	0002      	movs	r2, r0
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002122:	1dfb      	adds	r3, r7, #7
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b25b      	sxtb	r3, r3
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff ff33 	bl	8001f94 <__NVIC_EnableIRQ>
}
 800212e:	46c0      	nop			@ (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b002      	add	sp, #8
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff ffaf 	bl	80020a4 <SysTick_Config>
 8002146:	0003      	movs	r3, r0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002166:	e155      	b.n	8002414 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2101      	movs	r1, #1
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	4091      	lsls	r1, r2
 8002172:	000a      	movs	r2, r1
 8002174:	4013      	ands	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d100      	bne.n	8002180 <HAL_GPIO_Init+0x30>
 800217e:	e146      	b.n	800240e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	2203      	movs	r2, #3
 8002186:	4013      	ands	r3, r2
 8002188:	2b01      	cmp	r3, #1
 800218a:	d005      	beq.n	8002198 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2203      	movs	r2, #3
 8002192:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002194:	2b02      	cmp	r3, #2
 8002196:	d130      	bne.n	80021fa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	2203      	movs	r2, #3
 80021a4:	409a      	lsls	r2, r3
 80021a6:	0013      	movs	r3, r2
 80021a8:	43da      	mvns	r2, r3
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	409a      	lsls	r2, r3
 80021ba:	0013      	movs	r3, r2
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	4313      	orrs	r3, r2
 80021c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ce:	2201      	movs	r2, #1
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
 80021d4:	0013      	movs	r3, r2
 80021d6:	43da      	mvns	r2, r3
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4013      	ands	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	2201      	movs	r2, #1
 80021e6:	401a      	ands	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	409a      	lsls	r2, r3
 80021ec:	0013      	movs	r3, r2
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2203      	movs	r2, #3
 8002200:	4013      	ands	r3, r2
 8002202:	2b03      	cmp	r3, #3
 8002204:	d017      	beq.n	8002236 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	409a      	lsls	r2, r3
 8002214:	0013      	movs	r3, r2
 8002216:	43da      	mvns	r2, r3
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	409a      	lsls	r2, r3
 8002228:	0013      	movs	r3, r2
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2203      	movs	r2, #3
 800223c:	4013      	ands	r3, r2
 800223e:	2b02      	cmp	r3, #2
 8002240:	d123      	bne.n	800228a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	08da      	lsrs	r2, r3, #3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3208      	adds	r2, #8
 800224a:	0092      	lsls	r2, r2, #2
 800224c:	58d3      	ldr	r3, [r2, r3]
 800224e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	2207      	movs	r2, #7
 8002254:	4013      	ands	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	220f      	movs	r2, #15
 800225a:	409a      	lsls	r2, r3
 800225c:	0013      	movs	r3, r2
 800225e:	43da      	mvns	r2, r3
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	691a      	ldr	r2, [r3, #16]
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2107      	movs	r1, #7
 800226e:	400b      	ands	r3, r1
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	409a      	lsls	r2, r3
 8002274:	0013      	movs	r3, r2
 8002276:	693a      	ldr	r2, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	08da      	lsrs	r2, r3, #3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3208      	adds	r2, #8
 8002284:	0092      	lsls	r2, r2, #2
 8002286:	6939      	ldr	r1, [r7, #16]
 8002288:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	409a      	lsls	r2, r3
 8002298:	0013      	movs	r3, r2
 800229a:	43da      	mvns	r2, r3
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2203      	movs	r2, #3
 80022a8:	401a      	ands	r2, r3
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	409a      	lsls	r2, r3
 80022b0:	0013      	movs	r3, r2
 80022b2:	693a      	ldr	r2, [r7, #16]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	693a      	ldr	r2, [r7, #16]
 80022bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	23c0      	movs	r3, #192	@ 0xc0
 80022c4:	029b      	lsls	r3, r3, #10
 80022c6:	4013      	ands	r3, r2
 80022c8:	d100      	bne.n	80022cc <HAL_GPIO_Init+0x17c>
 80022ca:	e0a0      	b.n	800240e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022cc:	4b57      	ldr	r3, [pc, #348]	@ (800242c <HAL_GPIO_Init+0x2dc>)
 80022ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022d0:	4b56      	ldr	r3, [pc, #344]	@ (800242c <HAL_GPIO_Init+0x2dc>)
 80022d2:	2101      	movs	r1, #1
 80022d4:	430a      	orrs	r2, r1
 80022d6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80022d8:	4a55      	ldr	r2, [pc, #340]	@ (8002430 <HAL_GPIO_Init+0x2e0>)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3302      	adds	r3, #2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	589b      	ldr	r3, [r3, r2]
 80022e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2203      	movs	r2, #3
 80022ea:	4013      	ands	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	409a      	lsls	r2, r3
 80022f2:	0013      	movs	r3, r2
 80022f4:	43da      	mvns	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	4013      	ands	r3, r2
 80022fa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	23a0      	movs	r3, #160	@ 0xa0
 8002300:	05db      	lsls	r3, r3, #23
 8002302:	429a      	cmp	r2, r3
 8002304:	d01f      	beq.n	8002346 <HAL_GPIO_Init+0x1f6>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a4a      	ldr	r2, [pc, #296]	@ (8002434 <HAL_GPIO_Init+0x2e4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d019      	beq.n	8002342 <HAL_GPIO_Init+0x1f2>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a49      	ldr	r2, [pc, #292]	@ (8002438 <HAL_GPIO_Init+0x2e8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_GPIO_Init+0x1ee>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a48      	ldr	r2, [pc, #288]	@ (800243c <HAL_GPIO_Init+0x2ec>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00d      	beq.n	800233a <HAL_GPIO_Init+0x1ea>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a47      	ldr	r2, [pc, #284]	@ (8002440 <HAL_GPIO_Init+0x2f0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <HAL_GPIO_Init+0x1e6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a46      	ldr	r2, [pc, #280]	@ (8002444 <HAL_GPIO_Init+0x2f4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_GPIO_Init+0x1e2>
 800232e:	2305      	movs	r3, #5
 8002330:	e00a      	b.n	8002348 <HAL_GPIO_Init+0x1f8>
 8002332:	2306      	movs	r3, #6
 8002334:	e008      	b.n	8002348 <HAL_GPIO_Init+0x1f8>
 8002336:	2304      	movs	r3, #4
 8002338:	e006      	b.n	8002348 <HAL_GPIO_Init+0x1f8>
 800233a:	2303      	movs	r3, #3
 800233c:	e004      	b.n	8002348 <HAL_GPIO_Init+0x1f8>
 800233e:	2302      	movs	r3, #2
 8002340:	e002      	b.n	8002348 <HAL_GPIO_Init+0x1f8>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_GPIO_Init+0x1f8>
 8002346:	2300      	movs	r3, #0
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	2103      	movs	r1, #3
 800234c:	400a      	ands	r2, r1
 800234e:	0092      	lsls	r2, r2, #2
 8002350:	4093      	lsls	r3, r2
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002358:	4935      	ldr	r1, [pc, #212]	@ (8002430 <HAL_GPIO_Init+0x2e0>)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	3302      	adds	r3, #2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002366:	4b38      	ldr	r3, [pc, #224]	@ (8002448 <HAL_GPIO_Init+0x2f8>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	43da      	mvns	r2, r3
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4013      	ands	r3, r2
 8002374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	2380      	movs	r3, #128	@ 0x80
 800237c:	035b      	lsls	r3, r3, #13
 800237e:	4013      	ands	r3, r2
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800238a:	4b2f      	ldr	r3, [pc, #188]	@ (8002448 <HAL_GPIO_Init+0x2f8>)
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002390:	4b2d      	ldr	r3, [pc, #180]	@ (8002448 <HAL_GPIO_Init+0x2f8>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	43da      	mvns	r2, r3
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	2380      	movs	r3, #128	@ 0x80
 80023a6:	039b      	lsls	r3, r3, #14
 80023a8:	4013      	ands	r3, r2
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023b4:	4b24      	ldr	r3, [pc, #144]	@ (8002448 <HAL_GPIO_Init+0x2f8>)
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80023ba:	4b23      	ldr	r3, [pc, #140]	@ (8002448 <HAL_GPIO_Init+0x2f8>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	43da      	mvns	r2, r3
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4013      	ands	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	2380      	movs	r3, #128	@ 0x80
 80023d0:	029b      	lsls	r3, r3, #10
 80023d2:	4013      	ands	r3, r2
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023de:	4b1a      	ldr	r3, [pc, #104]	@ (8002448 <HAL_GPIO_Init+0x2f8>)
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023e4:	4b18      	ldr	r3, [pc, #96]	@ (8002448 <HAL_GPIO_Init+0x2f8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	43da      	mvns	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	025b      	lsls	r3, r3, #9
 80023fc:	4013      	ands	r3, r2
 80023fe:	d003      	beq.n	8002408 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002408:	4b0f      	ldr	r3, [pc, #60]	@ (8002448 <HAL_GPIO_Init+0x2f8>)
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	3301      	adds	r3, #1
 8002412:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	40da      	lsrs	r2, r3
 800241c:	1e13      	subs	r3, r2, #0
 800241e:	d000      	beq.n	8002422 <HAL_GPIO_Init+0x2d2>
 8002420:	e6a2      	b.n	8002168 <HAL_GPIO_Init+0x18>
  }
}
 8002422:	46c0      	nop			@ (mov r8, r8)
 8002424:	46c0      	nop			@ (mov r8, r8)
 8002426:	46bd      	mov	sp, r7
 8002428:	b006      	add	sp, #24
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	40010000 	.word	0x40010000
 8002434:	50000400 	.word	0x50000400
 8002438:	50000800 	.word	0x50000800
 800243c:	50000c00 	.word	0x50000c00
 8002440:	50001000 	.word	0x50001000
 8002444:	50001c00 	.word	0x50001c00
 8002448:	40010400 	.word	0x40010400

0800244c <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8002462:	e0bc      	b.n	80025de <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8002464:	2201      	movs	r2, #1
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	409a      	lsls	r2, r3
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	4013      	ands	r3, r2
 800246e:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d100      	bne.n	8002478 <HAL_GPIO_DeInit+0x2c>
 8002476:	e0af      	b.n	80025d8 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002478:	4a5e      	ldr	r2, [pc, #376]	@ (80025f4 <HAL_GPIO_DeInit+0x1a8>)
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	089b      	lsrs	r3, r3, #2
 800247e:	3302      	adds	r3, #2
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	589b      	ldr	r3, [r3, r2]
 8002484:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2203      	movs	r2, #3
 800248a:	4013      	ands	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	220f      	movs	r2, #15
 8002490:	409a      	lsls	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	4013      	ands	r3, r2
 8002496:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	23a0      	movs	r3, #160	@ 0xa0
 800249c:	05db      	lsls	r3, r3, #23
 800249e:	429a      	cmp	r2, r3
 80024a0:	d01f      	beq.n	80024e2 <HAL_GPIO_DeInit+0x96>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a54      	ldr	r2, [pc, #336]	@ (80025f8 <HAL_GPIO_DeInit+0x1ac>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d019      	beq.n	80024de <HAL_GPIO_DeInit+0x92>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a53      	ldr	r2, [pc, #332]	@ (80025fc <HAL_GPIO_DeInit+0x1b0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d013      	beq.n	80024da <HAL_GPIO_DeInit+0x8e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a52      	ldr	r2, [pc, #328]	@ (8002600 <HAL_GPIO_DeInit+0x1b4>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d00d      	beq.n	80024d6 <HAL_GPIO_DeInit+0x8a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a51      	ldr	r2, [pc, #324]	@ (8002604 <HAL_GPIO_DeInit+0x1b8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d007      	beq.n	80024d2 <HAL_GPIO_DeInit+0x86>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a50      	ldr	r2, [pc, #320]	@ (8002608 <HAL_GPIO_DeInit+0x1bc>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d101      	bne.n	80024ce <HAL_GPIO_DeInit+0x82>
 80024ca:	2305      	movs	r3, #5
 80024cc:	e00a      	b.n	80024e4 <HAL_GPIO_DeInit+0x98>
 80024ce:	2306      	movs	r3, #6
 80024d0:	e008      	b.n	80024e4 <HAL_GPIO_DeInit+0x98>
 80024d2:	2304      	movs	r3, #4
 80024d4:	e006      	b.n	80024e4 <HAL_GPIO_DeInit+0x98>
 80024d6:	2303      	movs	r3, #3
 80024d8:	e004      	b.n	80024e4 <HAL_GPIO_DeInit+0x98>
 80024da:	2302      	movs	r3, #2
 80024dc:	e002      	b.n	80024e4 <HAL_GPIO_DeInit+0x98>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <HAL_GPIO_DeInit+0x98>
 80024e2:	2300      	movs	r3, #0
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	2103      	movs	r1, #3
 80024e8:	400a      	ands	r2, r1
 80024ea:	0092      	lsls	r2, r2, #2
 80024ec:	4093      	lsls	r3, r2
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d132      	bne.n	800255a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80024f4:	4b45      	ldr	r3, [pc, #276]	@ (800260c <HAL_GPIO_DeInit+0x1c0>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	43d9      	mvns	r1, r3
 80024fc:	4b43      	ldr	r3, [pc, #268]	@ (800260c <HAL_GPIO_DeInit+0x1c0>)
 80024fe:	400a      	ands	r2, r1
 8002500:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002502:	4b42      	ldr	r3, [pc, #264]	@ (800260c <HAL_GPIO_DeInit+0x1c0>)
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	43d9      	mvns	r1, r3
 800250a:	4b40      	ldr	r3, [pc, #256]	@ (800260c <HAL_GPIO_DeInit+0x1c0>)
 800250c:	400a      	ands	r2, r1
 800250e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002510:	4b3e      	ldr	r3, [pc, #248]	@ (800260c <HAL_GPIO_DeInit+0x1c0>)
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	43d9      	mvns	r1, r3
 8002518:	4b3c      	ldr	r3, [pc, #240]	@ (800260c <HAL_GPIO_DeInit+0x1c0>)
 800251a:	400a      	ands	r2, r1
 800251c:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800251e:	4b3b      	ldr	r3, [pc, #236]	@ (800260c <HAL_GPIO_DeInit+0x1c0>)
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	43d9      	mvns	r1, r3
 8002526:	4b39      	ldr	r3, [pc, #228]	@ (800260c <HAL_GPIO_DeInit+0x1c0>)
 8002528:	400a      	ands	r2, r1
 800252a:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	2203      	movs	r2, #3
 8002530:	4013      	ands	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	220f      	movs	r2, #15
 8002536:	409a      	lsls	r2, r3
 8002538:	0013      	movs	r3, r2
 800253a:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800253c:	4a2d      	ldr	r2, [pc, #180]	@ (80025f4 <HAL_GPIO_DeInit+0x1a8>)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	589a      	ldr	r2, [r3, r2]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	43d9      	mvns	r1, r3
 800254c:	4829      	ldr	r0, [pc, #164]	@ (80025f4 <HAL_GPIO_DeInit+0x1a8>)
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	089b      	lsrs	r3, r3, #2
 8002552:	400a      	ands	r2, r1
 8002554:	3302      	adds	r3, #2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	2103      	movs	r1, #3
 8002564:	4099      	lsls	r1, r3
 8002566:	000b      	movs	r3, r1
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	08da      	lsrs	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3208      	adds	r2, #8
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	58d3      	ldr	r3, [r2, r3]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	2107      	movs	r1, #7
 800257e:	400a      	ands	r2, r1
 8002580:	0092      	lsls	r2, r2, #2
 8002582:	210f      	movs	r1, #15
 8002584:	4091      	lsls	r1, r2
 8002586:	000a      	movs	r2, r1
 8002588:	43d1      	mvns	r1, r2
 800258a:	697a      	ldr	r2, [r7, #20]
 800258c:	08d2      	lsrs	r2, r2, #3
 800258e:	4019      	ands	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3208      	adds	r2, #8
 8002594:	0092      	lsls	r2, r2, #2
 8002596:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	697a      	ldr	r2, [r7, #20]
 800259e:	0052      	lsls	r2, r2, #1
 80025a0:	2103      	movs	r1, #3
 80025a2:	4091      	lsls	r1, r2
 80025a4:	000a      	movs	r2, r1
 80025a6:	43d2      	mvns	r2, r2
 80025a8:	401a      	ands	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2101      	movs	r1, #1
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	4091      	lsls	r1, r2
 80025b8:	000a      	movs	r2, r1
 80025ba:	43d2      	mvns	r2, r2
 80025bc:	401a      	ands	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	0052      	lsls	r2, r2, #1
 80025ca:	2103      	movs	r1, #3
 80025cc:	4091      	lsls	r1, r2
 80025ce:	000a      	movs	r2, r1
 80025d0:	43d2      	mvns	r2, r2
 80025d2:	401a      	ands	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	609a      	str	r2, [r3, #8]
    }
    position++;
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	3301      	adds	r3, #1
 80025dc:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	40da      	lsrs	r2, r3
 80025e4:	1e13      	subs	r3, r2, #0
 80025e6:	d000      	beq.n	80025ea <HAL_GPIO_DeInit+0x19e>
 80025e8:	e73c      	b.n	8002464 <HAL_GPIO_DeInit+0x18>
  }
}
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	46c0      	nop			@ (mov r8, r8)
 80025ee:	46bd      	mov	sp, r7
 80025f0:	b006      	add	sp, #24
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40010000 	.word	0x40010000
 80025f8:	50000400 	.word	0x50000400
 80025fc:	50000800 	.word	0x50000800
 8002600:	50000c00 	.word	0x50000c00
 8002604:	50001000 	.word	0x50001000
 8002608:	50001c00 	.word	0x50001c00
 800260c:	40010400 	.word	0x40010400

08002610 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	0008      	movs	r0, r1
 800261a:	0011      	movs	r1, r2
 800261c:	1cbb      	adds	r3, r7, #2
 800261e:	1c02      	adds	r2, r0, #0
 8002620:	801a      	strh	r2, [r3, #0]
 8002622:	1c7b      	adds	r3, r7, #1
 8002624:	1c0a      	adds	r2, r1, #0
 8002626:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002628:	1c7b      	adds	r3, r7, #1
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002630:	1cbb      	adds	r3, r7, #2
 8002632:	881a      	ldrh	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002638:	e003      	b.n	8002642 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800263a:	1cbb      	adds	r3, r7, #2
 800263c:	881a      	ldrh	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	46bd      	mov	sp, r7
 8002646:	b002      	add	sp, #8
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e08f      	b.n	800277e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2241      	movs	r2, #65	@ 0x41
 8002662:	5c9b      	ldrb	r3, [r3, r2]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d107      	bne.n	800267a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2240      	movs	r2, #64	@ 0x40
 800266e:	2100      	movs	r1, #0
 8002670:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	0018      	movs	r0, r3
 8002676:	f7ff fa2d 	bl	8001ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2241      	movs	r2, #65	@ 0x41
 800267e:	2124      	movs	r1, #36	@ 0x24
 8002680:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2101      	movs	r1, #1
 800268e:	438a      	bics	r2, r1
 8002690:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	493b      	ldr	r1, [pc, #236]	@ (8002788 <HAL_I2C_Init+0x13c>)
 800269c:	400a      	ands	r2, r1
 800269e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4938      	ldr	r1, [pc, #224]	@ (800278c <HAL_I2C_Init+0x140>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d108      	bne.n	80026ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2180      	movs	r1, #128	@ 0x80
 80026c2:	0209      	lsls	r1, r1, #8
 80026c4:	430a      	orrs	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
 80026c8:	e007      	b.n	80026da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2184      	movs	r1, #132	@ 0x84
 80026d4:	0209      	lsls	r1, r1, #8
 80026d6:	430a      	orrs	r2, r1
 80026d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d109      	bne.n	80026f6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2180      	movs	r1, #128	@ 0x80
 80026ee:	0109      	lsls	r1, r1, #4
 80026f0:	430a      	orrs	r2, r1
 80026f2:	605a      	str	r2, [r3, #4]
 80026f4:	e007      	b.n	8002706 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4923      	ldr	r1, [pc, #140]	@ (8002790 <HAL_I2C_Init+0x144>)
 8002702:	400a      	ands	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4920      	ldr	r1, [pc, #128]	@ (8002794 <HAL_I2C_Init+0x148>)
 8002712:	430a      	orrs	r2, r1
 8002714:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	491a      	ldr	r1, [pc, #104]	@ (800278c <HAL_I2C_Init+0x140>)
 8002722:	400a      	ands	r2, r1
 8002724:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	431a      	orrs	r2, r3
 8002730:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69d9      	ldr	r1, [r3, #28]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1a      	ldr	r2, [r3, #32]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2101      	movs	r1, #1
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2241      	movs	r2, #65	@ 0x41
 800276a:	2120      	movs	r1, #32
 800276c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2242      	movs	r2, #66	@ 0x42
 8002778:	2100      	movs	r1, #0
 800277a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	0018      	movs	r0, r3
 8002780:	46bd      	mov	sp, r7
 8002782:	b002      	add	sp, #8
 8002784:	bd80      	pop	{r7, pc}
 8002786:	46c0      	nop			@ (mov r8, r8)
 8002788:	f0ffffff 	.word	0xf0ffffff
 800278c:	ffff7fff 	.word	0xffff7fff
 8002790:	fffff7ff 	.word	0xfffff7ff
 8002794:	02008000 	.word	0x02008000

08002798 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e022      	b.n	80027f0 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2241      	movs	r2, #65	@ 0x41
 80027ae:	2124      	movs	r1, #36	@ 0x24
 80027b0:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2101      	movs	r1, #1
 80027be:	438a      	bics	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	0018      	movs	r0, r3
 80027c6:	f7ff f9c9 	bl	8001b5c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2241      	movs	r2, #65	@ 0x41
 80027d4:	2100      	movs	r1, #0
 80027d6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2242      	movs	r2, #66	@ 0x42
 80027e2:	2100      	movs	r1, #0
 80027e4:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2240      	movs	r2, #64	@ 0x40
 80027ea:	2100      	movs	r1, #0
 80027ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	0018      	movs	r0, r3
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b089      	sub	sp, #36	@ 0x24
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	0008      	movs	r0, r1
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	0019      	movs	r1, r3
 8002806:	230a      	movs	r3, #10
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	1c02      	adds	r2, r0, #0
 800280c:	801a      	strh	r2, [r3, #0]
 800280e:	2308      	movs	r3, #8
 8002810:	18fb      	adds	r3, r7, r3
 8002812:	1c0a      	adds	r2, r1, #0
 8002814:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2241      	movs	r2, #65	@ 0x41
 800281a:	5c9b      	ldrb	r3, [r3, r2]
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b20      	cmp	r3, #32
 8002820:	d000      	beq.n	8002824 <HAL_I2C_Master_Transmit+0x2c>
 8002822:	e10a      	b.n	8002a3a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2240      	movs	r2, #64	@ 0x40
 8002828:	5c9b      	ldrb	r3, [r3, r2]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_I2C_Master_Transmit+0x3a>
 800282e:	2302      	movs	r3, #2
 8002830:	e104      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x244>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2240      	movs	r2, #64	@ 0x40
 8002836:	2101      	movs	r1, #1
 8002838:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800283a:	f7ff fb61 	bl	8001f00 <HAL_GetTick>
 800283e:	0003      	movs	r3, r0
 8002840:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002842:	2380      	movs	r3, #128	@ 0x80
 8002844:	0219      	lsls	r1, r3, #8
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	2319      	movs	r3, #25
 800284e:	2201      	movs	r2, #1
 8002850:	f000 fa26 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 8002854:	1e03      	subs	r3, r0, #0
 8002856:	d001      	beq.n	800285c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0ef      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2241      	movs	r2, #65	@ 0x41
 8002860:	2121      	movs	r1, #33	@ 0x21
 8002862:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2242      	movs	r2, #66	@ 0x42
 8002868:	2110      	movs	r1, #16
 800286a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2208      	movs	r2, #8
 800287c:	18ba      	adds	r2, r7, r2
 800287e:	8812      	ldrh	r2, [r2, #0]
 8002880:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2200      	movs	r2, #0
 8002886:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	2bff      	cmp	r3, #255	@ 0xff
 8002890:	d906      	bls.n	80028a0 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	22ff      	movs	r2, #255	@ 0xff
 8002896:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002898:	2380      	movs	r3, #128	@ 0x80
 800289a:	045b      	lsls	r3, r3, #17
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	e007      	b.n	80028b0 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	049b      	lsls	r3, r3, #18
 80028ae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d027      	beq.n	8002908 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	781a      	ldrb	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	1c5a      	adds	r2, r3, #1
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	3b01      	subs	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e0:	3b01      	subs	r3, #1
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	b2da      	uxtb	r2, r3
 80028f2:	697c      	ldr	r4, [r7, #20]
 80028f4:	230a      	movs	r3, #10
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	8819      	ldrh	r1, [r3, #0]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	4b51      	ldr	r3, [pc, #324]	@ (8002a44 <HAL_I2C_Master_Transmit+0x24c>)
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	0023      	movs	r3, r4
 8002902:	f000 fc45 	bl	8003190 <I2C_TransferConfig>
 8002906:	e06f      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800290c:	b2da      	uxtb	r2, r3
 800290e:	697c      	ldr	r4, [r7, #20]
 8002910:	230a      	movs	r3, #10
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	8819      	ldrh	r1, [r3, #0]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	4b4a      	ldr	r3, [pc, #296]	@ (8002a44 <HAL_I2C_Master_Transmit+0x24c>)
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	0023      	movs	r3, r4
 800291e:	f000 fc37 	bl	8003190 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002922:	e061      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	0018      	movs	r0, r3
 800292c:	f000 fa10 	bl	8002d50 <I2C_WaitOnTXISFlagUntilTimeout>
 8002930:	1e03      	subs	r3, r0, #0
 8002932:	d001      	beq.n	8002938 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e081      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293c:	781a      	ldrb	r2, [r3, #0]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002952:	b29b      	uxth	r3, r3
 8002954:	3b01      	subs	r3, #1
 8002956:	b29a      	uxth	r2, r3
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d03a      	beq.n	80029e8 <HAL_I2C_Master_Transmit+0x1f0>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002976:	2b00      	cmp	r3, #0
 8002978:	d136      	bne.n	80029e8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800297a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	0013      	movs	r3, r2
 8002984:	2200      	movs	r2, #0
 8002986:	2180      	movs	r1, #128	@ 0x80
 8002988:	f000 f98a 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 800298c:	1e03      	subs	r3, r0, #0
 800298e:	d001      	beq.n	8002994 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e053      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	2bff      	cmp	r3, #255	@ 0xff
 800299c:	d911      	bls.n	80029c2 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	22ff      	movs	r2, #255	@ 0xff
 80029a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	2380      	movs	r3, #128	@ 0x80
 80029ac:	045c      	lsls	r4, r3, #17
 80029ae:	230a      	movs	r3, #10
 80029b0:	18fb      	adds	r3, r7, r3
 80029b2:	8819      	ldrh	r1, [r3, #0]
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	2300      	movs	r3, #0
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	0023      	movs	r3, r4
 80029bc:	f000 fbe8 	bl	8003190 <I2C_TransferConfig>
 80029c0:	e012      	b.n	80029e8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d0:	b2da      	uxtb	r2, r3
 80029d2:	2380      	movs	r3, #128	@ 0x80
 80029d4:	049c      	lsls	r4, r3, #18
 80029d6:	230a      	movs	r3, #10
 80029d8:	18fb      	adds	r3, r7, r3
 80029da:	8819      	ldrh	r1, [r3, #0]
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	2300      	movs	r3, #0
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	0023      	movs	r3, r4
 80029e4:	f000 fbd4 	bl	8003190 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d198      	bne.n	8002924 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	0018      	movs	r0, r3
 80029fa:	f000 f9ef 	bl	8002ddc <I2C_WaitOnSTOPFlagUntilTimeout>
 80029fe:	1e03      	subs	r3, r0, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e01a      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	490b      	ldr	r1, [pc, #44]	@ (8002a48 <HAL_I2C_Master_Transmit+0x250>)
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2241      	movs	r2, #65	@ 0x41
 8002a22:	2120      	movs	r1, #32
 8002a24:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2242      	movs	r2, #66	@ 0x42
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2240      	movs	r2, #64	@ 0x40
 8002a32:	2100      	movs	r1, #0
 8002a34:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e000      	b.n	8002a3c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
  }
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	b007      	add	sp, #28
 8002a42:	bd90      	pop	{r4, r7, pc}
 8002a44:	80002000 	.word	0x80002000
 8002a48:	fe00e800 	.word	0xfe00e800

08002a4c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002a4c:	b590      	push	{r4, r7, lr}
 8002a4e:	b089      	sub	sp, #36	@ 0x24
 8002a50:	af02      	add	r7, sp, #8
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	0008      	movs	r0, r1
 8002a56:	607a      	str	r2, [r7, #4]
 8002a58:	0019      	movs	r1, r3
 8002a5a:	230a      	movs	r3, #10
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	1c02      	adds	r2, r0, #0
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	2308      	movs	r3, #8
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	1c0a      	adds	r2, r1, #0
 8002a68:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2241      	movs	r2, #65	@ 0x41
 8002a6e:	5c9b      	ldrb	r3, [r3, r2]
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d000      	beq.n	8002a78 <HAL_I2C_Master_Receive+0x2c>
 8002a76:	e0e8      	b.n	8002c4a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2240      	movs	r2, #64	@ 0x40
 8002a7c:	5c9b      	ldrb	r3, [r3, r2]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_I2C_Master_Receive+0x3a>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e0e2      	b.n	8002c4c <HAL_I2C_Master_Receive+0x200>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2240      	movs	r2, #64	@ 0x40
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a8e:	f7ff fa37 	bl	8001f00 <HAL_GetTick>
 8002a92:	0003      	movs	r3, r0
 8002a94:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a96:	2380      	movs	r3, #128	@ 0x80
 8002a98:	0219      	lsls	r1, r3, #8
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	2319      	movs	r3, #25
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f000 f8fc 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 8002aa8:	1e03      	subs	r3, r0, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e0cd      	b.n	8002c4c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2241      	movs	r2, #65	@ 0x41
 8002ab4:	2122      	movs	r1, #34	@ 0x22
 8002ab6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2242      	movs	r2, #66	@ 0x42
 8002abc:	2110      	movs	r1, #16
 8002abe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2208      	movs	r2, #8
 8002ad0:	18ba      	adds	r2, r7, r2
 8002ad2:	8812      	ldrh	r2, [r2, #0]
 8002ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	2bff      	cmp	r3, #255	@ 0xff
 8002ae4:	d911      	bls.n	8002b0a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	2380      	movs	r3, #128	@ 0x80
 8002af4:	045c      	lsls	r4, r3, #17
 8002af6:	230a      	movs	r3, #10
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	8819      	ldrh	r1, [r3, #0]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	4b55      	ldr	r3, [pc, #340]	@ (8002c54 <HAL_I2C_Master_Receive+0x208>)
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	0023      	movs	r3, r4
 8002b04:	f000 fb44 	bl	8003190 <I2C_TransferConfig>
 8002b08:	e076      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	2380      	movs	r3, #128	@ 0x80
 8002b1c:	049c      	lsls	r4, r3, #18
 8002b1e:	230a      	movs	r3, #10
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	8819      	ldrh	r1, [r3, #0]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	4b4b      	ldr	r3, [pc, #300]	@ (8002c54 <HAL_I2C_Master_Receive+0x208>)
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	0023      	movs	r3, r4
 8002b2c:	f000 fb30 	bl	8003190 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002b30:	e062      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f000 f993 	bl	8002e64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b3e:	1e03      	subs	r3, r0, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e082      	b.n	8002c4c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d03a      	beq.n	8002bf8 <HAL_I2C_Master_Receive+0x1ac>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d136      	bne.n	8002bf8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	0013      	movs	r3, r2
 8002b94:	2200      	movs	r2, #0
 8002b96:	2180      	movs	r1, #128	@ 0x80
 8002b98:	f000 f882 	bl	8002ca0 <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	1e03      	subs	r3, r0, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e053      	b.n	8002c4c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2bff      	cmp	r3, #255	@ 0xff
 8002bac:	d911      	bls.n	8002bd2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	22ff      	movs	r2, #255	@ 0xff
 8002bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb8:	b2da      	uxtb	r2, r3
 8002bba:	2380      	movs	r3, #128	@ 0x80
 8002bbc:	045c      	lsls	r4, r3, #17
 8002bbe:	230a      	movs	r3, #10
 8002bc0:	18fb      	adds	r3, r7, r3
 8002bc2:	8819      	ldrh	r1, [r3, #0]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	0023      	movs	r3, r4
 8002bcc:	f000 fae0 	bl	8003190 <I2C_TransferConfig>
 8002bd0:	e012      	b.n	8002bf8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	2380      	movs	r3, #128	@ 0x80
 8002be4:	049c      	lsls	r4, r3, #18
 8002be6:	230a      	movs	r3, #10
 8002be8:	18fb      	adds	r3, r7, r3
 8002bea:	8819      	ldrh	r1, [r3, #0]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	0023      	movs	r3, r4
 8002bf4:	f000 facc 	bl	8003190 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d197      	bne.n	8002b32 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f000 f8e7 	bl	8002ddc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c0e:	1e03      	subs	r3, r0, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e01a      	b.n	8002c4c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	490b      	ldr	r1, [pc, #44]	@ (8002c58 <HAL_I2C_Master_Receive+0x20c>)
 8002c2a:	400a      	ands	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2241      	movs	r2, #65	@ 0x41
 8002c32:	2120      	movs	r1, #32
 8002c34:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2242      	movs	r2, #66	@ 0x42
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2240      	movs	r2, #64	@ 0x40
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002c46:	2300      	movs	r3, #0
 8002c48:	e000      	b.n	8002c4c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002c4a:	2302      	movs	r3, #2
  }
}
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b007      	add	sp, #28
 8002c52:	bd90      	pop	{r4, r7, pc}
 8002c54:	80002400 	.word	0x80002400
 8002c58:	fe00e800 	.word	0xfe00e800

08002c5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699b      	ldr	r3, [r3, #24]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d103      	bne.n	8002c7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2200      	movs	r2, #0
 8002c78:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	2201      	movs	r2, #1
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d007      	beq.n	8002c98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	699a      	ldr	r2, [r3, #24]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2101      	movs	r1, #1
 8002c94:	430a      	orrs	r2, r1
 8002c96:	619a      	str	r2, [r3, #24]
  }
}
 8002c98:	46c0      	nop			@ (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	b002      	add	sp, #8
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	1dfb      	adds	r3, r7, #7
 8002cae:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cb0:	e03a      	b.n	8002d28 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	6839      	ldr	r1, [r7, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f000 f971 	bl	8002fa0 <I2C_IsErrorOccurred>
 8002cbe:	1e03      	subs	r3, r0, #0
 8002cc0:	d001      	beq.n	8002cc6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e040      	b.n	8002d48 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	d02d      	beq.n	8002d28 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ccc:	f7ff f918 	bl	8001f00 <HAL_GetTick>
 8002cd0:	0002      	movs	r2, r0
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d302      	bcc.n	8002ce2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d122      	bne.n	8002d28 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	68ba      	ldr	r2, [r7, #8]
 8002cea:	4013      	ands	r3, r2
 8002cec:	68ba      	ldr	r2, [r7, #8]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	425a      	negs	r2, r3
 8002cf2:	4153      	adcs	r3, r2
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	001a      	movs	r2, r3
 8002cf8:	1dfb      	adds	r3, r7, #7
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d113      	bne.n	8002d28 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d04:	2220      	movs	r2, #32
 8002d06:	431a      	orrs	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2241      	movs	r2, #65	@ 0x41
 8002d10:	2120      	movs	r1, #32
 8002d12:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2242      	movs	r2, #66	@ 0x42
 8002d18:	2100      	movs	r1, #0
 8002d1a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2240      	movs	r2, #64	@ 0x40
 8002d20:	2100      	movs	r1, #0
 8002d22:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e00f      	b.n	8002d48 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	4013      	ands	r3, r2
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	425a      	negs	r2, r3
 8002d38:	4153      	adcs	r3, r2
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	1dfb      	adds	r3, r7, #7
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d0b5      	beq.n	8002cb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	0018      	movs	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b004      	add	sp, #16
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d5c:	e032      	b.n	8002dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	0018      	movs	r0, r3
 8002d66:	f000 f91b 	bl	8002fa0 <I2C_IsErrorOccurred>
 8002d6a:	1e03      	subs	r3, r0, #0
 8002d6c:	d001      	beq.n	8002d72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e030      	b.n	8002dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	3301      	adds	r3, #1
 8002d76:	d025      	beq.n	8002dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d78:	f7ff f8c2 	bl	8001f00 <HAL_GetTick>
 8002d7c:	0002      	movs	r2, r0
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d302      	bcc.n	8002d8e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d11a      	bne.n	8002dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	2202      	movs	r2, #2
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d013      	beq.n	8002dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002da0:	2220      	movs	r2, #32
 8002da2:	431a      	orrs	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2241      	movs	r2, #65	@ 0x41
 8002dac:	2120      	movs	r1, #32
 8002dae:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2242      	movs	r2, #66	@ 0x42
 8002db4:	2100      	movs	r1, #0
 8002db6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2240      	movs	r2, #64	@ 0x40
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e007      	b.n	8002dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d1c5      	bne.n	8002d5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b004      	add	sp, #16
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002de8:	e02f      	b.n	8002e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	68b9      	ldr	r1, [r7, #8]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	0018      	movs	r0, r3
 8002df2:	f000 f8d5 	bl	8002fa0 <I2C_IsErrorOccurred>
 8002df6:	1e03      	subs	r3, r0, #0
 8002df8:	d001      	beq.n	8002dfe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e02d      	b.n	8002e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dfe:	f7ff f87f 	bl	8001f00 <HAL_GetTick>
 8002e02:	0002      	movs	r2, r0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d302      	bcc.n	8002e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d11a      	bne.n	8002e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d013      	beq.n	8002e4a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e26:	2220      	movs	r2, #32
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2241      	movs	r2, #65	@ 0x41
 8002e32:	2120      	movs	r1, #32
 8002e34:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2242      	movs	r2, #66	@ 0x42
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2240      	movs	r2, #64	@ 0x40
 8002e42:	2100      	movs	r1, #0
 8002e44:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e007      	b.n	8002e5a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	2220      	movs	r2, #32
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	d1c8      	bne.n	8002dea <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b004      	add	sp, #16
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e70:	2317      	movs	r3, #23
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	2200      	movs	r2, #0
 8002e76:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002e78:	e07b      	b.n	8002f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	0018      	movs	r0, r3
 8002e82:	f000 f88d 	bl	8002fa0 <I2C_IsErrorOccurred>
 8002e86:	1e03      	subs	r3, r0, #0
 8002e88:	d003      	beq.n	8002e92 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002e8a:	2317      	movs	r3, #23
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2220      	movs	r2, #32
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d140      	bne.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002ea0:	2117      	movs	r1, #23
 8002ea2:	187b      	adds	r3, r7, r1
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d13b      	bne.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b04      	cmp	r3, #4
 8002eb6:	d106      	bne.n	8002ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d002      	beq.n	8002ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002ec0:	187b      	adds	r3, r7, r1
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	2210      	movs	r2, #16
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b10      	cmp	r3, #16
 8002ed2:	d123      	bne.n	8002f1c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2210      	movs	r2, #16
 8002eda:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2204      	movs	r2, #4
 8002ee0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4929      	ldr	r1, [pc, #164]	@ (8002f9c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8002ef6:	400a      	ands	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2241      	movs	r2, #65	@ 0x41
 8002efe:	2120      	movs	r1, #32
 8002f00:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2242      	movs	r2, #66	@ 0x42
 8002f06:	2100      	movs	r1, #0
 8002f08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2240      	movs	r2, #64	@ 0x40
 8002f0e:	2100      	movs	r1, #0
 8002f10:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002f12:	2317      	movs	r3, #23
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]
 8002f1a:	e002      	b.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002f22:	f7fe ffed 	bl	8001f00 <HAL_GetTick>
 8002f26:	0002      	movs	r2, r0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d11c      	bne.n	8002f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002f38:	2017      	movs	r0, #23
 8002f3a:	183b      	adds	r3, r7, r0
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d117      	bne.n	8002f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2204      	movs	r2, #4
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d010      	beq.n	8002f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f54:	2220      	movs	r2, #32
 8002f56:	431a      	orrs	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2241      	movs	r2, #65	@ 0x41
 8002f60:	2120      	movs	r1, #32
 8002f62:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2240      	movs	r2, #64	@ 0x40
 8002f68:	2100      	movs	r1, #0
 8002f6a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002f6c:	183b      	adds	r3, r7, r0
 8002f6e:	2201      	movs	r2, #1
 8002f70:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2204      	movs	r2, #4
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d005      	beq.n	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002f80:	2317      	movs	r3, #23
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d100      	bne.n	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002f8a:	e776      	b.n	8002e7a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002f8c:	2317      	movs	r3, #23
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	781b      	ldrb	r3, [r3, #0]
}
 8002f92:	0018      	movs	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	b006      	add	sp, #24
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	fe00e800 	.word	0xfe00e800

08002fa0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b08a      	sub	sp, #40	@ 0x28
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fac:	2327      	movs	r3, #39	@ 0x27
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	2210      	movs	r2, #16
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d100      	bne.n	8002fce <I2C_IsErrorOccurred+0x2e>
 8002fcc:	e079      	b.n	80030c2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2210      	movs	r2, #16
 8002fd4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002fd6:	e057      	b.n	8003088 <I2C_IsErrorOccurred+0xe8>
 8002fd8:	2227      	movs	r2, #39	@ 0x27
 8002fda:	18bb      	adds	r3, r7, r2
 8002fdc:	18ba      	adds	r2, r7, r2
 8002fde:	7812      	ldrb	r2, [r2, #0]
 8002fe0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	d04f      	beq.n	8003088 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fe8:	f7fe ff8a 	bl	8001f00 <HAL_GetTick>
 8002fec:	0002      	movs	r2, r0
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d302      	bcc.n	8002ffe <I2C_IsErrorOccurred+0x5e>
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d144      	bne.n	8003088 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	2380      	movs	r3, #128	@ 0x80
 8003006:	01db      	lsls	r3, r3, #7
 8003008:	4013      	ands	r3, r2
 800300a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800300c:	2013      	movs	r0, #19
 800300e:	183b      	adds	r3, r7, r0
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	2142      	movs	r1, #66	@ 0x42
 8003014:	5c52      	ldrb	r2, [r2, r1]
 8003016:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	699a      	ldr	r2, [r3, #24]
 800301e:	2380      	movs	r3, #128	@ 0x80
 8003020:	021b      	lsls	r3, r3, #8
 8003022:	401a      	ands	r2, r3
 8003024:	2380      	movs	r3, #128	@ 0x80
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	429a      	cmp	r2, r3
 800302a:	d126      	bne.n	800307a <I2C_IsErrorOccurred+0xda>
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	2380      	movs	r3, #128	@ 0x80
 8003030:	01db      	lsls	r3, r3, #7
 8003032:	429a      	cmp	r2, r3
 8003034:	d021      	beq.n	800307a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003036:	183b      	adds	r3, r7, r0
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b20      	cmp	r3, #32
 800303c:	d01d      	beq.n	800307a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2180      	movs	r1, #128	@ 0x80
 800304a:	01c9      	lsls	r1, r1, #7
 800304c:	430a      	orrs	r2, r1
 800304e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003050:	f7fe ff56 	bl	8001f00 <HAL_GetTick>
 8003054:	0003      	movs	r3, r0
 8003056:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003058:	e00f      	b.n	800307a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800305a:	f7fe ff51 	bl	8001f00 <HAL_GetTick>
 800305e:	0002      	movs	r2, r0
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	2b19      	cmp	r3, #25
 8003066:	d908      	bls.n	800307a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	2220      	movs	r2, #32
 800306c:	4313      	orrs	r3, r2
 800306e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003070:	2327      	movs	r3, #39	@ 0x27
 8003072:	18fb      	adds	r3, r7, r3
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]

              break;
 8003078:	e006      	b.n	8003088 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	2220      	movs	r2, #32
 8003082:	4013      	ands	r3, r2
 8003084:	2b20      	cmp	r3, #32
 8003086:	d1e8      	bne.n	800305a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	2220      	movs	r2, #32
 8003090:	4013      	ands	r3, r2
 8003092:	2b20      	cmp	r3, #32
 8003094:	d004      	beq.n	80030a0 <I2C_IsErrorOccurred+0x100>
 8003096:	2327      	movs	r3, #39	@ 0x27
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d09b      	beq.n	8002fd8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030a0:	2327      	movs	r3, #39	@ 0x27
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2220      	movs	r2, #32
 80030b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030b2:	6a3b      	ldr	r3, [r7, #32]
 80030b4:	2204      	movs	r2, #4
 80030b6:	4313      	orrs	r3, r2
 80030b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030ba:	2327      	movs	r3, #39	@ 0x27
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	2380      	movs	r3, #128	@ 0x80
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4013      	ands	r3, r2
 80030d2:	d00c      	beq.n	80030ee <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	2201      	movs	r2, #1
 80030d8:	4313      	orrs	r3, r2
 80030da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2280      	movs	r2, #128	@ 0x80
 80030e2:	0052      	lsls	r2, r2, #1
 80030e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030e6:	2327      	movs	r3, #39	@ 0x27
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	2201      	movs	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	2380      	movs	r3, #128	@ 0x80
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	4013      	ands	r3, r2
 80030f6:	d00c      	beq.n	8003112 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	2208      	movs	r2, #8
 80030fc:	4313      	orrs	r3, r2
 80030fe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2280      	movs	r2, #128	@ 0x80
 8003106:	00d2      	lsls	r2, r2, #3
 8003108:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800310a:	2327      	movs	r3, #39	@ 0x27
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	2380      	movs	r3, #128	@ 0x80
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4013      	ands	r3, r2
 800311a:	d00c      	beq.n	8003136 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800311c:	6a3b      	ldr	r3, [r7, #32]
 800311e:	2202      	movs	r2, #2
 8003120:	4313      	orrs	r3, r2
 8003122:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2280      	movs	r2, #128	@ 0x80
 800312a:	0092      	lsls	r2, r2, #2
 800312c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800312e:	2327      	movs	r3, #39	@ 0x27
 8003130:	18fb      	adds	r3, r7, r3
 8003132:	2201      	movs	r2, #1
 8003134:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003136:	2327      	movs	r3, #39	@ 0x27
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d01d      	beq.n	800317c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	0018      	movs	r0, r3
 8003144:	f7ff fd8a 	bl	8002c5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	490e      	ldr	r1, [pc, #56]	@ (800318c <I2C_IsErrorOccurred+0x1ec>)
 8003154:	400a      	ands	r2, r1
 8003156:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	431a      	orrs	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2241      	movs	r2, #65	@ 0x41
 8003168:	2120      	movs	r1, #32
 800316a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2242      	movs	r2, #66	@ 0x42
 8003170:	2100      	movs	r1, #0
 8003172:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2240      	movs	r2, #64	@ 0x40
 8003178:	2100      	movs	r1, #0
 800317a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800317c:	2327      	movs	r3, #39	@ 0x27
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	781b      	ldrb	r3, [r3, #0]
}
 8003182:	0018      	movs	r0, r3
 8003184:	46bd      	mov	sp, r7
 8003186:	b00a      	add	sp, #40	@ 0x28
 8003188:	bd80      	pop	{r7, pc}
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	fe00e800 	.word	0xfe00e800

08003190 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	0008      	movs	r0, r1
 800319a:	0011      	movs	r1, r2
 800319c:	607b      	str	r3, [r7, #4]
 800319e:	240a      	movs	r4, #10
 80031a0:	193b      	adds	r3, r7, r4
 80031a2:	1c02      	adds	r2, r0, #0
 80031a4:	801a      	strh	r2, [r3, #0]
 80031a6:	2009      	movs	r0, #9
 80031a8:	183b      	adds	r3, r7, r0
 80031aa:	1c0a      	adds	r2, r1, #0
 80031ac:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031ae:	193b      	adds	r3, r7, r4
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	059b      	lsls	r3, r3, #22
 80031b4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031b6:	183b      	adds	r3, r7, r0
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	0419      	lsls	r1, r3, #16
 80031bc:	23ff      	movs	r3, #255	@ 0xff
 80031be:	041b      	lsls	r3, r3, #16
 80031c0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031c2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ca:	4313      	orrs	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	085b      	lsrs	r3, r3, #1
 80031d0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031da:	0d51      	lsrs	r1, r2, #21
 80031dc:	2280      	movs	r2, #128	@ 0x80
 80031de:	00d2      	lsls	r2, r2, #3
 80031e0:	400a      	ands	r2, r1
 80031e2:	4907      	ldr	r1, [pc, #28]	@ (8003200 <I2C_TransferConfig+0x70>)
 80031e4:	430a      	orrs	r2, r1
 80031e6:	43d2      	mvns	r2, r2
 80031e8:	401a      	ands	r2, r3
 80031ea:	0011      	movs	r1, r2
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b007      	add	sp, #28
 80031fc:	bd90      	pop	{r4, r7, pc}
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	03ff63ff 	.word	0x03ff63ff

08003204 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2241      	movs	r2, #65	@ 0x41
 8003212:	5c9b      	ldrb	r3, [r3, r2]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b20      	cmp	r3, #32
 8003218:	d138      	bne.n	800328c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2240      	movs	r2, #64	@ 0x40
 800321e:	5c9b      	ldrb	r3, [r3, r2]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003224:	2302      	movs	r3, #2
 8003226:	e032      	b.n	800328e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2240      	movs	r2, #64	@ 0x40
 800322c:	2101      	movs	r1, #1
 800322e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2241      	movs	r2, #65	@ 0x41
 8003234:	2124      	movs	r1, #36	@ 0x24
 8003236:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2101      	movs	r1, #1
 8003244:	438a      	bics	r2, r1
 8003246:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4911      	ldr	r1, [pc, #68]	@ (8003298 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003254:	400a      	ands	r2, r1
 8003256:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6819      	ldr	r1, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	683a      	ldr	r2, [r7, #0]
 8003264:	430a      	orrs	r2, r1
 8003266:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2101      	movs	r1, #1
 8003274:	430a      	orrs	r2, r1
 8003276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2241      	movs	r2, #65	@ 0x41
 800327c:	2120      	movs	r1, #32
 800327e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2240      	movs	r2, #64	@ 0x40
 8003284:	2100      	movs	r1, #0
 8003286:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	e000      	b.n	800328e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800328c:	2302      	movs	r3, #2
  }
}
 800328e:	0018      	movs	r0, r3
 8003290:	46bd      	mov	sp, r7
 8003292:	b002      	add	sp, #8
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			@ (mov r8, r8)
 8003298:	ffffefff 	.word	0xffffefff

0800329c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2241      	movs	r2, #65	@ 0x41
 80032aa:	5c9b      	ldrb	r3, [r3, r2]
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d139      	bne.n	8003326 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2240      	movs	r2, #64	@ 0x40
 80032b6:	5c9b      	ldrb	r3, [r3, r2]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032bc:	2302      	movs	r3, #2
 80032be:	e033      	b.n	8003328 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2240      	movs	r2, #64	@ 0x40
 80032c4:	2101      	movs	r1, #1
 80032c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2241      	movs	r2, #65	@ 0x41
 80032cc:	2124      	movs	r1, #36	@ 0x24
 80032ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2101      	movs	r1, #1
 80032dc:	438a      	bics	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a11      	ldr	r2, [pc, #68]	@ (8003330 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80032ec:	4013      	ands	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	021b      	lsls	r3, r3, #8
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	2101      	movs	r1, #1
 800330e:	430a      	orrs	r2, r1
 8003310:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2241      	movs	r2, #65	@ 0x41
 8003316:	2120      	movs	r1, #32
 8003318:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2240      	movs	r2, #64	@ 0x40
 800331e:	2100      	movs	r1, #0
 8003320:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
  }
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b004      	add	sp, #16
 800332e:	bd80      	pop	{r7, pc}
 8003330:	fffff0ff 	.word	0xfffff0ff

08003334 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	000a      	movs	r2, r1
 800333e:	1cfb      	adds	r3, r7, #3
 8003340:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003346:	4b25      	ldr	r3, [pc, #148]	@ (80033dc <HAL_PWR_EnterSTOPMode+0xa8>)
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	2380      	movs	r3, #128	@ 0x80
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003352:	4b23      	ldr	r3, [pc, #140]	@ (80033e0 <HAL_PWR_EnterSTOPMode+0xac>)
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	2201      	movs	r2, #1
 8003358:	4013      	ands	r3, r2
 800335a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d008      	beq.n	8003374 <HAL_PWR_EnterSTOPMode+0x40>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003368:	4b1c      	ldr	r3, [pc, #112]	@ (80033dc <HAL_PWR_EnterSTOPMode+0xa8>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b1b      	ldr	r3, [pc, #108]	@ (80033dc <HAL_PWR_EnterSTOPMode+0xa8>)
 800336e:	491d      	ldr	r1, [pc, #116]	@ (80033e4 <HAL_PWR_EnterSTOPMode+0xb0>)
 8003370:	400a      	ands	r2, r1
 8003372:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003374:	4b19      	ldr	r3, [pc, #100]	@ (80033dc <HAL_PWR_EnterSTOPMode+0xa8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2203      	movs	r2, #3
 800337e:	4393      	bics	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800338a:	4b14      	ldr	r3, [pc, #80]	@ (80033dc <HAL_PWR_EnterSTOPMode+0xa8>)
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003390:	4b15      	ldr	r3, [pc, #84]	@ (80033e8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	4b14      	ldr	r3, [pc, #80]	@ (80033e8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003396:	2104      	movs	r1, #4
 8003398:	430a      	orrs	r2, r1
 800339a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800339c:	1cfb      	adds	r3, r7, #3
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80033a4:	bf30      	wfi
 80033a6:	e002      	b.n	80033ae <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80033a8:	bf40      	sev
    __WFE();
 80033aa:	bf20      	wfe
    __WFE();
 80033ac:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <HAL_PWR_EnterSTOPMode+0xb4>)
 80033b0:	691a      	ldr	r2, [r3, #16]
 80033b2:	4b0d      	ldr	r3, [pc, #52]	@ (80033e8 <HAL_PWR_EnterSTOPMode+0xb4>)
 80033b4:	2104      	movs	r1, #4
 80033b6:	438a      	bics	r2, r1
 80033b8:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d009      	beq.n	80033d4 <HAL_PWR_EnterSTOPMode+0xa0>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80033c6:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <HAL_PWR_EnterSTOPMode+0xa8>)
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	4b04      	ldr	r3, [pc, #16]	@ (80033dc <HAL_PWR_EnterSTOPMode+0xa8>)
 80033cc:	2180      	movs	r1, #128	@ 0x80
 80033ce:	0089      	lsls	r1, r1, #2
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
  }
}
 80033d4:	46c0      	nop			@ (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b006      	add	sp, #24
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40007000 	.word	0x40007000
 80033e0:	40010000 	.word	0x40010000
 80033e4:	fffffdff 	.word	0xfffffdff
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033ec:	b5b0      	push	{r4, r5, r7, lr}
 80033ee:	b08a      	sub	sp, #40	@ 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d102      	bne.n	8003400 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f000 fbbf 	bl	8003b7e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003400:	4bc9      	ldr	r3, [pc, #804]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	220c      	movs	r2, #12
 8003406:	4013      	ands	r3, r2
 8003408:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800340a:	4bc7      	ldr	r3, [pc, #796]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	2380      	movs	r3, #128	@ 0x80
 8003410:	025b      	lsls	r3, r3, #9
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2201      	movs	r2, #1
 800341c:	4013      	ands	r3, r2
 800341e:	d100      	bne.n	8003422 <HAL_RCC_OscConfig+0x36>
 8003420:	e07e      	b.n	8003520 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	2b08      	cmp	r3, #8
 8003426:	d007      	beq.n	8003438 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	2b0c      	cmp	r3, #12
 800342c:	d112      	bne.n	8003454 <HAL_RCC_OscConfig+0x68>
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	2380      	movs	r3, #128	@ 0x80
 8003432:	025b      	lsls	r3, r3, #9
 8003434:	429a      	cmp	r2, r3
 8003436:	d10d      	bne.n	8003454 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003438:	4bbb      	ldr	r3, [pc, #748]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	2380      	movs	r3, #128	@ 0x80
 800343e:	029b      	lsls	r3, r3, #10
 8003440:	4013      	ands	r3, r2
 8003442:	d100      	bne.n	8003446 <HAL_RCC_OscConfig+0x5a>
 8003444:	e06b      	b.n	800351e <HAL_RCC_OscConfig+0x132>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d167      	bne.n	800351e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	f000 fb95 	bl	8003b7e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	2380      	movs	r3, #128	@ 0x80
 800345a:	025b      	lsls	r3, r3, #9
 800345c:	429a      	cmp	r2, r3
 800345e:	d107      	bne.n	8003470 <HAL_RCC_OscConfig+0x84>
 8003460:	4bb1      	ldr	r3, [pc, #708]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	4bb0      	ldr	r3, [pc, #704]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003466:	2180      	movs	r1, #128	@ 0x80
 8003468:	0249      	lsls	r1, r1, #9
 800346a:	430a      	orrs	r2, r1
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	e027      	b.n	80034c0 <HAL_RCC_OscConfig+0xd4>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	685a      	ldr	r2, [r3, #4]
 8003474:	23a0      	movs	r3, #160	@ 0xa0
 8003476:	02db      	lsls	r3, r3, #11
 8003478:	429a      	cmp	r2, r3
 800347a:	d10e      	bne.n	800349a <HAL_RCC_OscConfig+0xae>
 800347c:	4baa      	ldr	r3, [pc, #680]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	4ba9      	ldr	r3, [pc, #676]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003482:	2180      	movs	r1, #128	@ 0x80
 8003484:	02c9      	lsls	r1, r1, #11
 8003486:	430a      	orrs	r2, r1
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	4ba7      	ldr	r3, [pc, #668]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	4ba6      	ldr	r3, [pc, #664]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003490:	2180      	movs	r1, #128	@ 0x80
 8003492:	0249      	lsls	r1, r1, #9
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	e012      	b.n	80034c0 <HAL_RCC_OscConfig+0xd4>
 800349a:	4ba3      	ldr	r3, [pc, #652]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4ba2      	ldr	r3, [pc, #648]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 80034a0:	49a2      	ldr	r1, [pc, #648]	@ (800372c <HAL_RCC_OscConfig+0x340>)
 80034a2:	400a      	ands	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	4ba0      	ldr	r3, [pc, #640]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	2380      	movs	r3, #128	@ 0x80
 80034ac:	025b      	lsls	r3, r3, #9
 80034ae:	4013      	ands	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	4b9c      	ldr	r3, [pc, #624]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b9b      	ldr	r3, [pc, #620]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 80034ba:	499d      	ldr	r1, [pc, #628]	@ (8003730 <HAL_RCC_OscConfig+0x344>)
 80034bc:	400a      	ands	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d015      	beq.n	80034f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c8:	f7fe fd1a 	bl	8001f00 <HAL_GetTick>
 80034cc:	0003      	movs	r3, r0
 80034ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034d0:	e009      	b.n	80034e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d2:	f7fe fd15 	bl	8001f00 <HAL_GetTick>
 80034d6:	0002      	movs	r2, r0
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b64      	cmp	r3, #100	@ 0x64
 80034de:	d902      	bls.n	80034e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	f000 fb4c 	bl	8003b7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80034e6:	4b90      	ldr	r3, [pc, #576]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	2380      	movs	r3, #128	@ 0x80
 80034ec:	029b      	lsls	r3, r3, #10
 80034ee:	4013      	ands	r3, r2
 80034f0:	d0ef      	beq.n	80034d2 <HAL_RCC_OscConfig+0xe6>
 80034f2:	e015      	b.n	8003520 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe fd04 	bl	8001f00 <HAL_GetTick>
 80034f8:	0003      	movs	r3, r0
 80034fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034fe:	f7fe fcff 	bl	8001f00 <HAL_GetTick>
 8003502:	0002      	movs	r2, r0
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b64      	cmp	r3, #100	@ 0x64
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e336      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003510:	4b85      	ldr	r3, [pc, #532]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	@ 0x80
 8003516:	029b      	lsls	r3, r3, #10
 8003518:	4013      	ands	r3, r2
 800351a:	d1f0      	bne.n	80034fe <HAL_RCC_OscConfig+0x112>
 800351c:	e000      	b.n	8003520 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2202      	movs	r2, #2
 8003526:	4013      	ands	r3, r2
 8003528:	d100      	bne.n	800352c <HAL_RCC_OscConfig+0x140>
 800352a:	e099      	b.n	8003660 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003534:	2220      	movs	r2, #32
 8003536:	4013      	ands	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800353a:	4b7b      	ldr	r3, [pc, #492]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	4b7a      	ldr	r3, [pc, #488]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003540:	2120      	movs	r1, #32
 8003542:	430a      	orrs	r2, r1
 8003544:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	2220      	movs	r2, #32
 800354a:	4393      	bics	r3, r2
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d005      	beq.n	8003560 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b0c      	cmp	r3, #12
 8003558:	d13e      	bne.n	80035d8 <HAL_RCC_OscConfig+0x1ec>
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d13b      	bne.n	80035d8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003560:	4b71      	ldr	r3, [pc, #452]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2204      	movs	r2, #4
 8003566:	4013      	ands	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_RCC_OscConfig+0x188>
 800356a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356c:	2b00      	cmp	r3, #0
 800356e:	d101      	bne.n	8003574 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e304      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003574:	4b6c      	ldr	r3, [pc, #432]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a6e      	ldr	r2, [pc, #440]	@ (8003734 <HAL_RCC_OscConfig+0x348>)
 800357a:	4013      	ands	r3, r2
 800357c:	0019      	movs	r1, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	021a      	lsls	r2, r3, #8
 8003584:	4b68      	ldr	r3, [pc, #416]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800358a:	4b67      	ldr	r3, [pc, #412]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2209      	movs	r2, #9
 8003590:	4393      	bics	r3, r2
 8003592:	0019      	movs	r1, r3
 8003594:	4b64      	ldr	r3, [pc, #400]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003598:	430a      	orrs	r2, r1
 800359a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800359c:	f000 fc42 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 80035a0:	0001      	movs	r1, r0
 80035a2:	4b61      	ldr	r3, [pc, #388]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	220f      	movs	r2, #15
 80035aa:	4013      	ands	r3, r2
 80035ac:	4a62      	ldr	r2, [pc, #392]	@ (8003738 <HAL_RCC_OscConfig+0x34c>)
 80035ae:	5cd3      	ldrb	r3, [r2, r3]
 80035b0:	000a      	movs	r2, r1
 80035b2:	40da      	lsrs	r2, r3
 80035b4:	4b61      	ldr	r3, [pc, #388]	@ (800373c <HAL_RCC_OscConfig+0x350>)
 80035b6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80035b8:	4b61      	ldr	r3, [pc, #388]	@ (8003740 <HAL_RCC_OscConfig+0x354>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2513      	movs	r5, #19
 80035be:	197c      	adds	r4, r7, r5
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7fe fc57 	bl	8001e74 <HAL_InitTick>
 80035c6:	0003      	movs	r3, r0
 80035c8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80035ca:	197b      	adds	r3, r7, r5
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d046      	beq.n	8003660 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80035d2:	197b      	adds	r3, r7, r5
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	e2d2      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d027      	beq.n	800362e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80035de:	4b52      	ldr	r3, [pc, #328]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2209      	movs	r2, #9
 80035e4:	4393      	bics	r3, r2
 80035e6:	0019      	movs	r1, r3
 80035e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 80035ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035ec:	430a      	orrs	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fe fc86 	bl	8001f00 <HAL_GetTick>
 80035f4:	0003      	movs	r3, r0
 80035f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035f8:	e008      	b.n	800360c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035fa:	f7fe fc81 	bl	8001f00 <HAL_GetTick>
 80035fe:	0002      	movs	r2, r0
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d901      	bls.n	800360c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e2b8      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800360c:	4b46      	ldr	r3, [pc, #280]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2204      	movs	r2, #4
 8003612:	4013      	ands	r3, r2
 8003614:	d0f1      	beq.n	80035fa <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003616:	4b44      	ldr	r3, [pc, #272]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4a46      	ldr	r2, [pc, #280]	@ (8003734 <HAL_RCC_OscConfig+0x348>)
 800361c:	4013      	ands	r3, r2
 800361e:	0019      	movs	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	021a      	lsls	r2, r3, #8
 8003626:	4b40      	ldr	r3, [pc, #256]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]
 800362c:	e018      	b.n	8003660 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362e:	4b3e      	ldr	r3, [pc, #248]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	4b3d      	ldr	r3, [pc, #244]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003634:	2101      	movs	r1, #1
 8003636:	438a      	bics	r2, r1
 8003638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363a:	f7fe fc61 	bl	8001f00 <HAL_GetTick>
 800363e:	0003      	movs	r3, r0
 8003640:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003644:	f7fe fc5c 	bl	8001f00 <HAL_GetTick>
 8003648:	0002      	movs	r2, r0
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e293      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003656:	4b34      	ldr	r3, [pc, #208]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2204      	movs	r2, #4
 800365c:	4013      	ands	r3, r2
 800365e:	d1f1      	bne.n	8003644 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2210      	movs	r2, #16
 8003666:	4013      	ands	r3, r2
 8003668:	d100      	bne.n	800366c <HAL_RCC_OscConfig+0x280>
 800366a:	e0a2      	b.n	80037b2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d140      	bne.n	80036f4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003672:	4b2d      	ldr	r3, [pc, #180]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	2380      	movs	r3, #128	@ 0x80
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4013      	ands	r3, r2
 800367c:	d005      	beq.n	800368a <HAL_RCC_OscConfig+0x29e>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e279      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800368a:	4b27      	ldr	r3, [pc, #156]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4a2d      	ldr	r2, [pc, #180]	@ (8003744 <HAL_RCC_OscConfig+0x358>)
 8003690:	4013      	ands	r3, r2
 8003692:	0019      	movs	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003698:	4b23      	ldr	r3, [pc, #140]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800369e:	4b22      	ldr	r3, [pc, #136]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	021b      	lsls	r3, r3, #8
 80036a4:	0a19      	lsrs	r1, r3, #8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	061a      	lsls	r2, r3, #24
 80036ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b6:	0b5b      	lsrs	r3, r3, #13
 80036b8:	3301      	adds	r3, #1
 80036ba:	2280      	movs	r2, #128	@ 0x80
 80036bc:	0212      	lsls	r2, r2, #8
 80036be:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80036c0:	4b19      	ldr	r3, [pc, #100]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	091b      	lsrs	r3, r3, #4
 80036c6:	210f      	movs	r1, #15
 80036c8:	400b      	ands	r3, r1
 80036ca:	491b      	ldr	r1, [pc, #108]	@ (8003738 <HAL_RCC_OscConfig+0x34c>)
 80036cc:	5ccb      	ldrb	r3, [r1, r3]
 80036ce:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80036d0:	4b1a      	ldr	r3, [pc, #104]	@ (800373c <HAL_RCC_OscConfig+0x350>)
 80036d2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80036d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003740 <HAL_RCC_OscConfig+0x354>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2513      	movs	r5, #19
 80036da:	197c      	adds	r4, r7, r5
 80036dc:	0018      	movs	r0, r3
 80036de:	f7fe fbc9 	bl	8001e74 <HAL_InitTick>
 80036e2:	0003      	movs	r3, r0
 80036e4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80036e6:	197b      	adds	r3, r7, r5
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d061      	beq.n	80037b2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80036ee:	197b      	adds	r3, r7, r5
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	e244      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d040      	beq.n	800377e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <HAL_RCC_OscConfig+0x33c>)
 8003702:	2180      	movs	r1, #128	@ 0x80
 8003704:	0049      	lsls	r1, r1, #1
 8003706:	430a      	orrs	r2, r1
 8003708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fe fbf9 	bl	8001f00 <HAL_GetTick>
 800370e:	0003      	movs	r3, r0
 8003710:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003712:	e019      	b.n	8003748 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003714:	f7fe fbf4 	bl	8001f00 <HAL_GetTick>
 8003718:	0002      	movs	r2, r0
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d912      	bls.n	8003748 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e22b      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	40021000 	.word	0x40021000
 800372c:	fffeffff 	.word	0xfffeffff
 8003730:	fffbffff 	.word	0xfffbffff
 8003734:	ffffe0ff 	.word	0xffffe0ff
 8003738:	08006780 	.word	0x08006780
 800373c:	20000000 	.word	0x20000000
 8003740:	20000004 	.word	0x20000004
 8003744:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003748:	4bca      	ldr	r3, [pc, #808]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	2380      	movs	r3, #128	@ 0x80
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4013      	ands	r3, r2
 8003752:	d0df      	beq.n	8003714 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003754:	4bc7      	ldr	r3, [pc, #796]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	4ac7      	ldr	r2, [pc, #796]	@ (8003a78 <HAL_RCC_OscConfig+0x68c>)
 800375a:	4013      	ands	r3, r2
 800375c:	0019      	movs	r1, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003762:	4bc4      	ldr	r3, [pc, #784]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 8003764:	430a      	orrs	r2, r1
 8003766:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003768:	4bc2      	ldr	r3, [pc, #776]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	021b      	lsls	r3, r3, #8
 800376e:	0a19      	lsrs	r1, r3, #8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	061a      	lsls	r2, r3, #24
 8003776:	4bbf      	ldr	r3, [pc, #764]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 8003778:	430a      	orrs	r2, r1
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	e019      	b.n	80037b2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800377e:	4bbd      	ldr	r3, [pc, #756]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4bbc      	ldr	r3, [pc, #752]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 8003784:	49bd      	ldr	r1, [pc, #756]	@ (8003a7c <HAL_RCC_OscConfig+0x690>)
 8003786:	400a      	ands	r2, r1
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378a:	f7fe fbb9 	bl	8001f00 <HAL_GetTick>
 800378e:	0003      	movs	r3, r0
 8003790:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003794:	f7fe fbb4 	bl	8001f00 <HAL_GetTick>
 8003798:	0002      	movs	r2, r0
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e1eb      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80037a6:	4bb3      	ldr	r3, [pc, #716]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	2380      	movs	r3, #128	@ 0x80
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4013      	ands	r3, r2
 80037b0:	d1f0      	bne.n	8003794 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2208      	movs	r2, #8
 80037b8:	4013      	ands	r3, r2
 80037ba:	d036      	beq.n	800382a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d019      	beq.n	80037f8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c4:	4bab      	ldr	r3, [pc, #684]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80037c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037c8:	4baa      	ldr	r3, [pc, #680]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80037ca:	2101      	movs	r1, #1
 80037cc:	430a      	orrs	r2, r1
 80037ce:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d0:	f7fe fb96 	bl	8001f00 <HAL_GetTick>
 80037d4:	0003      	movs	r3, r0
 80037d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037da:	f7fe fb91 	bl	8001f00 <HAL_GetTick>
 80037de:	0002      	movs	r2, r0
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e1c8      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037ec:	4ba1      	ldr	r3, [pc, #644]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80037ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f0:	2202      	movs	r2, #2
 80037f2:	4013      	ands	r3, r2
 80037f4:	d0f1      	beq.n	80037da <HAL_RCC_OscConfig+0x3ee>
 80037f6:	e018      	b.n	800382a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f8:	4b9e      	ldr	r3, [pc, #632]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80037fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80037fc:	4b9d      	ldr	r3, [pc, #628]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80037fe:	2101      	movs	r1, #1
 8003800:	438a      	bics	r2, r1
 8003802:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003804:	f7fe fb7c 	bl	8001f00 <HAL_GetTick>
 8003808:	0003      	movs	r3, r0
 800380a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800380e:	f7fe fb77 	bl	8001f00 <HAL_GetTick>
 8003812:	0002      	movs	r2, r0
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e1ae      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003820:	4b94      	ldr	r3, [pc, #592]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 8003822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003824:	2202      	movs	r2, #2
 8003826:	4013      	ands	r3, r2
 8003828:	d1f1      	bne.n	800380e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2204      	movs	r2, #4
 8003830:	4013      	ands	r3, r2
 8003832:	d100      	bne.n	8003836 <HAL_RCC_OscConfig+0x44a>
 8003834:	e0ae      	b.n	8003994 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003836:	2023      	movs	r0, #35	@ 0x23
 8003838:	183b      	adds	r3, r7, r0
 800383a:	2200      	movs	r2, #0
 800383c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b8d      	ldr	r3, [pc, #564]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 8003840:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003842:	2380      	movs	r3, #128	@ 0x80
 8003844:	055b      	lsls	r3, r3, #21
 8003846:	4013      	ands	r3, r2
 8003848:	d109      	bne.n	800385e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	4b8a      	ldr	r3, [pc, #552]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 800384c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800384e:	4b89      	ldr	r3, [pc, #548]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 8003850:	2180      	movs	r1, #128	@ 0x80
 8003852:	0549      	lsls	r1, r1, #21
 8003854:	430a      	orrs	r2, r1
 8003856:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003858:	183b      	adds	r3, r7, r0
 800385a:	2201      	movs	r2, #1
 800385c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385e:	4b88      	ldr	r3, [pc, #544]	@ (8003a80 <HAL_RCC_OscConfig+0x694>)
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	2380      	movs	r3, #128	@ 0x80
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	4013      	ands	r3, r2
 8003868:	d11a      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800386a:	4b85      	ldr	r3, [pc, #532]	@ (8003a80 <HAL_RCC_OscConfig+0x694>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4b84      	ldr	r3, [pc, #528]	@ (8003a80 <HAL_RCC_OscConfig+0x694>)
 8003870:	2180      	movs	r1, #128	@ 0x80
 8003872:	0049      	lsls	r1, r1, #1
 8003874:	430a      	orrs	r2, r1
 8003876:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003878:	f7fe fb42 	bl	8001f00 <HAL_GetTick>
 800387c:	0003      	movs	r3, r0
 800387e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003882:	f7fe fb3d 	bl	8001f00 <HAL_GetTick>
 8003886:	0002      	movs	r2, r0
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b64      	cmp	r3, #100	@ 0x64
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e174      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003894:	4b7a      	ldr	r3, [pc, #488]	@ (8003a80 <HAL_RCC_OscConfig+0x694>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2380      	movs	r3, #128	@ 0x80
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4013      	ands	r3, r2
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689a      	ldr	r2, [r3, #8]
 80038a4:	2380      	movs	r3, #128	@ 0x80
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d107      	bne.n	80038bc <HAL_RCC_OscConfig+0x4d0>
 80038ac:	4b71      	ldr	r3, [pc, #452]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80038ae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038b0:	4b70      	ldr	r3, [pc, #448]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80038b2:	2180      	movs	r1, #128	@ 0x80
 80038b4:	0049      	lsls	r1, r1, #1
 80038b6:	430a      	orrs	r2, r1
 80038b8:	651a      	str	r2, [r3, #80]	@ 0x50
 80038ba:	e031      	b.n	8003920 <HAL_RCC_OscConfig+0x534>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10c      	bne.n	80038de <HAL_RCC_OscConfig+0x4f2>
 80038c4:	4b6b      	ldr	r3, [pc, #428]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80038c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80038ca:	496c      	ldr	r1, [pc, #432]	@ (8003a7c <HAL_RCC_OscConfig+0x690>)
 80038cc:	400a      	ands	r2, r1
 80038ce:	651a      	str	r2, [r3, #80]	@ 0x50
 80038d0:	4b68      	ldr	r3, [pc, #416]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80038d2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038d4:	4b67      	ldr	r3, [pc, #412]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80038d6:	496b      	ldr	r1, [pc, #428]	@ (8003a84 <HAL_RCC_OscConfig+0x698>)
 80038d8:	400a      	ands	r2, r1
 80038da:	651a      	str	r2, [r3, #80]	@ 0x50
 80038dc:	e020      	b.n	8003920 <HAL_RCC_OscConfig+0x534>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	23a0      	movs	r3, #160	@ 0xa0
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d10e      	bne.n	8003908 <HAL_RCC_OscConfig+0x51c>
 80038ea:	4b62      	ldr	r3, [pc, #392]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80038ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038ee:	4b61      	ldr	r3, [pc, #388]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80038f0:	2180      	movs	r1, #128	@ 0x80
 80038f2:	00c9      	lsls	r1, r1, #3
 80038f4:	430a      	orrs	r2, r1
 80038f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80038f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80038fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80038fc:	4b5d      	ldr	r3, [pc, #372]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80038fe:	2180      	movs	r1, #128	@ 0x80
 8003900:	0049      	lsls	r1, r1, #1
 8003902:	430a      	orrs	r2, r1
 8003904:	651a      	str	r2, [r3, #80]	@ 0x50
 8003906:	e00b      	b.n	8003920 <HAL_RCC_OscConfig+0x534>
 8003908:	4b5a      	ldr	r3, [pc, #360]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 800390a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800390c:	4b59      	ldr	r3, [pc, #356]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 800390e:	495b      	ldr	r1, [pc, #364]	@ (8003a7c <HAL_RCC_OscConfig+0x690>)
 8003910:	400a      	ands	r2, r1
 8003912:	651a      	str	r2, [r3, #80]	@ 0x50
 8003914:	4b57      	ldr	r3, [pc, #348]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 8003916:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003918:	4b56      	ldr	r3, [pc, #344]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 800391a:	495a      	ldr	r1, [pc, #360]	@ (8003a84 <HAL_RCC_OscConfig+0x698>)
 800391c:	400a      	ands	r2, r1
 800391e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d015      	beq.n	8003954 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003928:	f7fe faea 	bl	8001f00 <HAL_GetTick>
 800392c:	0003      	movs	r3, r0
 800392e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003930:	e009      	b.n	8003946 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003932:	f7fe fae5 	bl	8001f00 <HAL_GetTick>
 8003936:	0002      	movs	r2, r0
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	4a52      	ldr	r2, [pc, #328]	@ (8003a88 <HAL_RCC_OscConfig+0x69c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e11b      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003946:	4b4b      	ldr	r3, [pc, #300]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 8003948:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800394a:	2380      	movs	r3, #128	@ 0x80
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4013      	ands	r3, r2
 8003950:	d0ef      	beq.n	8003932 <HAL_RCC_OscConfig+0x546>
 8003952:	e014      	b.n	800397e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003954:	f7fe fad4 	bl	8001f00 <HAL_GetTick>
 8003958:	0003      	movs	r3, r0
 800395a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800395c:	e009      	b.n	8003972 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800395e:	f7fe facf 	bl	8001f00 <HAL_GetTick>
 8003962:	0002      	movs	r2, r0
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	4a47      	ldr	r2, [pc, #284]	@ (8003a88 <HAL_RCC_OscConfig+0x69c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e105      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003972:	4b40      	ldr	r3, [pc, #256]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 8003974:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003976:	2380      	movs	r3, #128	@ 0x80
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4013      	ands	r3, r2
 800397c:	d1ef      	bne.n	800395e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800397e:	2323      	movs	r3, #35	@ 0x23
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d105      	bne.n	8003994 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003988:	4b3a      	ldr	r3, [pc, #232]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 800398a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800398c:	4b39      	ldr	r3, [pc, #228]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 800398e:	493f      	ldr	r1, [pc, #252]	@ (8003a8c <HAL_RCC_OscConfig+0x6a0>)
 8003990:	400a      	ands	r2, r1
 8003992:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2220      	movs	r2, #32
 800399a:	4013      	ands	r3, r2
 800399c:	d049      	beq.n	8003a32 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d026      	beq.n	80039f4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80039a6:	4b33      	ldr	r3, [pc, #204]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	4b32      	ldr	r3, [pc, #200]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80039ac:	2101      	movs	r1, #1
 80039ae:	430a      	orrs	r2, r1
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	4b30      	ldr	r3, [pc, #192]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80039b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80039b8:	2101      	movs	r1, #1
 80039ba:	430a      	orrs	r2, r1
 80039bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80039be:	4b34      	ldr	r3, [pc, #208]	@ (8003a90 <HAL_RCC_OscConfig+0x6a4>)
 80039c0:	6a1a      	ldr	r2, [r3, #32]
 80039c2:	4b33      	ldr	r3, [pc, #204]	@ (8003a90 <HAL_RCC_OscConfig+0x6a4>)
 80039c4:	2180      	movs	r1, #128	@ 0x80
 80039c6:	0189      	lsls	r1, r1, #6
 80039c8:	430a      	orrs	r2, r1
 80039ca:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7fe fa98 	bl	8001f00 <HAL_GetTick>
 80039d0:	0003      	movs	r3, r0
 80039d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039d4:	e008      	b.n	80039e8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039d6:	f7fe fa93 	bl	8001f00 <HAL_GetTick>
 80039da:	0002      	movs	r2, r0
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d901      	bls.n	80039e8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e0ca      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80039e8:	4b22      	ldr	r3, [pc, #136]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2202      	movs	r2, #2
 80039ee:	4013      	ands	r3, r2
 80039f0:	d0f1      	beq.n	80039d6 <HAL_RCC_OscConfig+0x5ea>
 80039f2:	e01e      	b.n	8003a32 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80039f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 80039fa:	2101      	movs	r1, #1
 80039fc:	438a      	bics	r2, r1
 80039fe:	609a      	str	r2, [r3, #8]
 8003a00:	4b23      	ldr	r3, [pc, #140]	@ (8003a90 <HAL_RCC_OscConfig+0x6a4>)
 8003a02:	6a1a      	ldr	r2, [r3, #32]
 8003a04:	4b22      	ldr	r3, [pc, #136]	@ (8003a90 <HAL_RCC_OscConfig+0x6a4>)
 8003a06:	4923      	ldr	r1, [pc, #140]	@ (8003a94 <HAL_RCC_OscConfig+0x6a8>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fa78 	bl	8001f00 <HAL_GetTick>
 8003a10:	0003      	movs	r3, r0
 8003a12:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a16:	f7fe fa73 	bl	8001f00 <HAL_GetTick>
 8003a1a:	0002      	movs	r2, r0
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e0aa      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a28:	4b12      	ldr	r3, [pc, #72]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	4013      	ands	r3, r2
 8003a30:	d1f1      	bne.n	8003a16 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d100      	bne.n	8003a3c <HAL_RCC_OscConfig+0x650>
 8003a3a:	e09f      	b.n	8003b7c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b0c      	cmp	r3, #12
 8003a40:	d100      	bne.n	8003a44 <HAL_RCC_OscConfig+0x658>
 8003a42:	e078      	b.n	8003b36 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d159      	bne.n	8003b00 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a4c:	4b09      	ldr	r3, [pc, #36]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b08      	ldr	r3, [pc, #32]	@ (8003a74 <HAL_RCC_OscConfig+0x688>)
 8003a52:	4911      	ldr	r1, [pc, #68]	@ (8003a98 <HAL_RCC_OscConfig+0x6ac>)
 8003a54:	400a      	ands	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fe fa52 	bl	8001f00 <HAL_GetTick>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003a60:	e01c      	b.n	8003a9c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a62:	f7fe fa4d 	bl	8001f00 <HAL_GetTick>
 8003a66:	0002      	movs	r2, r0
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d915      	bls.n	8003a9c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e084      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
 8003a74:	40021000 	.word	0x40021000
 8003a78:	ffff1fff 	.word	0xffff1fff
 8003a7c:	fffffeff 	.word	0xfffffeff
 8003a80:	40007000 	.word	0x40007000
 8003a84:	fffffbff 	.word	0xfffffbff
 8003a88:	00001388 	.word	0x00001388
 8003a8c:	efffffff 	.word	0xefffffff
 8003a90:	40010000 	.word	0x40010000
 8003a94:	ffffdfff 	.word	0xffffdfff
 8003a98:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8003b88 <HAL_RCC_OscConfig+0x79c>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	2380      	movs	r3, #128	@ 0x80
 8003aa2:	049b      	lsls	r3, r3, #18
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d1dc      	bne.n	8003a62 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aa8:	4b37      	ldr	r3, [pc, #220]	@ (8003b88 <HAL_RCC_OscConfig+0x79c>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4a37      	ldr	r2, [pc, #220]	@ (8003b8c <HAL_RCC_OscConfig+0x7a0>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ac0:	431a      	orrs	r2, r3
 8003ac2:	4b31      	ldr	r3, [pc, #196]	@ (8003b88 <HAL_RCC_OscConfig+0x79c>)
 8003ac4:	430a      	orrs	r2, r1
 8003ac6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8003b88 <HAL_RCC_OscConfig+0x79c>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4b2e      	ldr	r3, [pc, #184]	@ (8003b88 <HAL_RCC_OscConfig+0x79c>)
 8003ace:	2180      	movs	r1, #128	@ 0x80
 8003ad0:	0449      	lsls	r1, r1, #17
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad6:	f7fe fa13 	bl	8001f00 <HAL_GetTick>
 8003ada:	0003      	movs	r3, r0
 8003adc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003ade:	e008      	b.n	8003af2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae0:	f7fe fa0e 	bl	8001f00 <HAL_GetTick>
 8003ae4:	0002      	movs	r2, r0
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d901      	bls.n	8003af2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003aee:	2303      	movs	r3, #3
 8003af0:	e045      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003af2:	4b25      	ldr	r3, [pc, #148]	@ (8003b88 <HAL_RCC_OscConfig+0x79c>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	2380      	movs	r3, #128	@ 0x80
 8003af8:	049b      	lsls	r3, r3, #18
 8003afa:	4013      	ands	r3, r2
 8003afc:	d0f0      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x6f4>
 8003afe:	e03d      	b.n	8003b7c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b00:	4b21      	ldr	r3, [pc, #132]	@ (8003b88 <HAL_RCC_OscConfig+0x79c>)
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	4b20      	ldr	r3, [pc, #128]	@ (8003b88 <HAL_RCC_OscConfig+0x79c>)
 8003b06:	4922      	ldr	r1, [pc, #136]	@ (8003b90 <HAL_RCC_OscConfig+0x7a4>)
 8003b08:	400a      	ands	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0c:	f7fe f9f8 	bl	8001f00 <HAL_GetTick>
 8003b10:	0003      	movs	r3, r0
 8003b12:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b16:	f7fe f9f3 	bl	8001f00 <HAL_GetTick>
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e02a      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b28:	4b17      	ldr	r3, [pc, #92]	@ (8003b88 <HAL_RCC_OscConfig+0x79c>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	2380      	movs	r3, #128	@ 0x80
 8003b2e:	049b      	lsls	r3, r3, #18
 8003b30:	4013      	ands	r3, r2
 8003b32:	d1f0      	bne.n	8003b16 <HAL_RCC_OscConfig+0x72a>
 8003b34:	e022      	b.n	8003b7c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e01d      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b42:	4b11      	ldr	r3, [pc, #68]	@ (8003b88 <HAL_RCC_OscConfig+0x79c>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	2380      	movs	r3, #128	@ 0x80
 8003b4c:	025b      	lsls	r3, r3, #9
 8003b4e:	401a      	ands	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d10f      	bne.n	8003b78 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b58:	69ba      	ldr	r2, [r7, #24]
 8003b5a:	23f0      	movs	r3, #240	@ 0xf0
 8003b5c:	039b      	lsls	r3, r3, #14
 8003b5e:	401a      	ands	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d107      	bne.n	8003b78 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	23c0      	movs	r3, #192	@ 0xc0
 8003b6c:	041b      	lsls	r3, r3, #16
 8003b6e:	401a      	ands	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	0018      	movs	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b00a      	add	sp, #40	@ 0x28
 8003b84:	bdb0      	pop	{r4, r5, r7, pc}
 8003b86:	46c0      	nop			@ (mov r8, r8)
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	ff02ffff 	.word	0xff02ffff
 8003b90:	feffffff 	.word	0xfeffffff

08003b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b94:	b5b0      	push	{r4, r5, r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e128      	b.n	8003dfa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ba8:	4b96      	ldr	r3, [pc, #600]	@ (8003e04 <HAL_RCC_ClockConfig+0x270>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2201      	movs	r2, #1
 8003bae:	4013      	ands	r3, r2
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d91e      	bls.n	8003bf4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bb6:	4b93      	ldr	r3, [pc, #588]	@ (8003e04 <HAL_RCC_ClockConfig+0x270>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	4393      	bics	r3, r2
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	4b90      	ldr	r3, [pc, #576]	@ (8003e04 <HAL_RCC_ClockConfig+0x270>)
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003bc8:	f7fe f99a 	bl	8001f00 <HAL_GetTick>
 8003bcc:	0003      	movs	r3, r0
 8003bce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd0:	e009      	b.n	8003be6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd2:	f7fe f995 	bl	8001f00 <HAL_GetTick>
 8003bd6:	0002      	movs	r2, r0
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	4a8a      	ldr	r2, [pc, #552]	@ (8003e08 <HAL_RCC_ClockConfig+0x274>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e109      	b.n	8003dfa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be6:	4b87      	ldr	r3, [pc, #540]	@ (8003e04 <HAL_RCC_ClockConfig+0x270>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2201      	movs	r2, #1
 8003bec:	4013      	ands	r3, r2
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d1ee      	bne.n	8003bd2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2202      	movs	r2, #2
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d009      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfe:	4b83      	ldr	r3, [pc, #524]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	22f0      	movs	r2, #240	@ 0xf0
 8003c04:	4393      	bics	r3, r2
 8003c06:	0019      	movs	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	4b7f      	ldr	r3, [pc, #508]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2201      	movs	r2, #1
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d100      	bne.n	8003c1e <HAL_RCC_ClockConfig+0x8a>
 8003c1c:	e089      	b.n	8003d32 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d107      	bne.n	8003c36 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c26:	4b79      	ldr	r3, [pc, #484]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	2380      	movs	r3, #128	@ 0x80
 8003c2c:	029b      	lsls	r3, r3, #10
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d120      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e0e1      	b.n	8003dfa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c3e:	4b73      	ldr	r3, [pc, #460]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	2380      	movs	r3, #128	@ 0x80
 8003c44:	049b      	lsls	r3, r3, #18
 8003c46:	4013      	ands	r3, r2
 8003c48:	d114      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e0d5      	b.n	8003dfa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d106      	bne.n	8003c64 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c56:	4b6d      	ldr	r3, [pc, #436]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2204      	movs	r2, #4
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d109      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e0ca      	b.n	8003dfa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003c64:	4b69      	ldr	r3, [pc, #420]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	2380      	movs	r3, #128	@ 0x80
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	d101      	bne.n	8003c74 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0c2      	b.n	8003dfa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c74:	4b65      	ldr	r3, [pc, #404]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	2203      	movs	r2, #3
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	4b62      	ldr	r3, [pc, #392]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003c84:	430a      	orrs	r2, r1
 8003c86:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c88:	f7fe f93a 	bl	8001f00 <HAL_GetTick>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d111      	bne.n	8003cbc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c98:	e009      	b.n	8003cae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c9a:	f7fe f931 	bl	8001f00 <HAL_GetTick>
 8003c9e:	0002      	movs	r2, r0
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	4a58      	ldr	r2, [pc, #352]	@ (8003e08 <HAL_RCC_ClockConfig+0x274>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e0a5      	b.n	8003dfa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cae:	4b57      	ldr	r3, [pc, #348]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	220c      	movs	r2, #12
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d1ef      	bne.n	8003c9a <HAL_RCC_ClockConfig+0x106>
 8003cba:	e03a      	b.n	8003d32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d111      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cc4:	e009      	b.n	8003cda <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc6:	f7fe f91b 	bl	8001f00 <HAL_GetTick>
 8003cca:	0002      	movs	r2, r0
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	4a4d      	ldr	r2, [pc, #308]	@ (8003e08 <HAL_RCC_ClockConfig+0x274>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e08f      	b.n	8003dfa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cda:	4b4c      	ldr	r3, [pc, #304]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	220c      	movs	r2, #12
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d1ef      	bne.n	8003cc6 <HAL_RCC_ClockConfig+0x132>
 8003ce6:	e024      	b.n	8003d32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d11b      	bne.n	8003d28 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cf0:	e009      	b.n	8003d06 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cf2:	f7fe f905 	bl	8001f00 <HAL_GetTick>
 8003cf6:	0002      	movs	r2, r0
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	4a42      	ldr	r2, [pc, #264]	@ (8003e08 <HAL_RCC_ClockConfig+0x274>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e079      	b.n	8003dfa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d06:	4b41      	ldr	r3, [pc, #260]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	220c      	movs	r2, #12
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d1ef      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0x15e>
 8003d12:	e00e      	b.n	8003d32 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7fe f8f4 	bl	8001f00 <HAL_GetTick>
 8003d18:	0002      	movs	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	4a3a      	ldr	r2, [pc, #232]	@ (8003e08 <HAL_RCC_ClockConfig+0x274>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e068      	b.n	8003dfa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d28:	4b38      	ldr	r3, [pc, #224]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	220c      	movs	r2, #12
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d1f0      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d32:	4b34      	ldr	r3, [pc, #208]	@ (8003e04 <HAL_RCC_ClockConfig+0x270>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2201      	movs	r2, #1
 8003d38:	4013      	ands	r3, r2
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d21e      	bcs.n	8003d7e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d40:	4b30      	ldr	r3, [pc, #192]	@ (8003e04 <HAL_RCC_ClockConfig+0x270>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2201      	movs	r2, #1
 8003d46:	4393      	bics	r3, r2
 8003d48:	0019      	movs	r1, r3
 8003d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003e04 <HAL_RCC_ClockConfig+0x270>)
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003d52:	f7fe f8d5 	bl	8001f00 <HAL_GetTick>
 8003d56:	0003      	movs	r3, r0
 8003d58:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d5a:	e009      	b.n	8003d70 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d5c:	f7fe f8d0 	bl	8001f00 <HAL_GetTick>
 8003d60:	0002      	movs	r2, r0
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	4a28      	ldr	r2, [pc, #160]	@ (8003e08 <HAL_RCC_ClockConfig+0x274>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d901      	bls.n	8003d70 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e044      	b.n	8003dfa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d70:	4b24      	ldr	r3, [pc, #144]	@ (8003e04 <HAL_RCC_ClockConfig+0x270>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2201      	movs	r2, #1
 8003d76:	4013      	ands	r3, r2
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d1ee      	bne.n	8003d5c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2204      	movs	r2, #4
 8003d84:	4013      	ands	r3, r2
 8003d86:	d009      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d88:	4b20      	ldr	r3, [pc, #128]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a20      	ldr	r2, [pc, #128]	@ (8003e10 <HAL_RCC_ClockConfig+0x27c>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	0019      	movs	r1, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	4b1d      	ldr	r3, [pc, #116]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2208      	movs	r2, #8
 8003da2:	4013      	ands	r3, r2
 8003da4:	d00a      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003da6:	4b19      	ldr	r3, [pc, #100]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	4a1a      	ldr	r2, [pc, #104]	@ (8003e14 <HAL_RCC_ClockConfig+0x280>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	0019      	movs	r1, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	00da      	lsls	r2, r3, #3
 8003db6:	4b15      	ldr	r3, [pc, #84]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003db8:	430a      	orrs	r2, r1
 8003dba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dbc:	f000 f832 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8003dc0:	0001      	movs	r1, r0
 8003dc2:	4b12      	ldr	r3, [pc, #72]	@ (8003e0c <HAL_RCC_ClockConfig+0x278>)
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	091b      	lsrs	r3, r3, #4
 8003dc8:	220f      	movs	r2, #15
 8003dca:	4013      	ands	r3, r2
 8003dcc:	4a12      	ldr	r2, [pc, #72]	@ (8003e18 <HAL_RCC_ClockConfig+0x284>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	000a      	movs	r2, r1
 8003dd2:	40da      	lsrs	r2, r3
 8003dd4:	4b11      	ldr	r3, [pc, #68]	@ (8003e1c <HAL_RCC_ClockConfig+0x288>)
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003dd8:	4b11      	ldr	r3, [pc, #68]	@ (8003e20 <HAL_RCC_ClockConfig+0x28c>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	250b      	movs	r5, #11
 8003dde:	197c      	adds	r4, r7, r5
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7fe f847 	bl	8001e74 <HAL_InitTick>
 8003de6:	0003      	movs	r3, r0
 8003de8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003dea:	197b      	adds	r3, r7, r5
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003df2:	197b      	adds	r3, r7, r5
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	b004      	add	sp, #16
 8003e00:	bdb0      	pop	{r4, r5, r7, pc}
 8003e02:	46c0      	nop			@ (mov r8, r8)
 8003e04:	40022000 	.word	0x40022000
 8003e08:	00001388 	.word	0x00001388
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	fffff8ff 	.word	0xfffff8ff
 8003e14:	ffffc7ff 	.word	0xffffc7ff
 8003e18:	08006780 	.word	0x08006780
 8003e1c:	20000000 	.word	0x20000000
 8003e20:	20000004 	.word	0x20000004

08003e24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003e2a:	4b3c      	ldr	r3, [pc, #240]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	220c      	movs	r2, #12
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b0c      	cmp	r3, #12
 8003e38:	d013      	beq.n	8003e62 <HAL_RCC_GetSysClockFreq+0x3e>
 8003e3a:	d85c      	bhi.n	8003ef6 <HAL_RCC_GetSysClockFreq+0xd2>
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d002      	beq.n	8003e46 <HAL_RCC_GetSysClockFreq+0x22>
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d00b      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0x38>
 8003e44:	e057      	b.n	8003ef6 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003e46:	4b35      	ldr	r3, [pc, #212]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2210      	movs	r2, #16
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d002      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003e50:	4b33      	ldr	r3, [pc, #204]	@ (8003f20 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003e52:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003e54:	e05d      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003e56:	4b33      	ldr	r3, [pc, #204]	@ (8003f24 <HAL_RCC_GetSysClockFreq+0x100>)
 8003e58:	613b      	str	r3, [r7, #16]
      break;
 8003e5a:	e05a      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e5c:	4b32      	ldr	r3, [pc, #200]	@ (8003f28 <HAL_RCC_GetSysClockFreq+0x104>)
 8003e5e:	613b      	str	r3, [r7, #16]
      break;
 8003e60:	e057      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	0c9b      	lsrs	r3, r3, #18
 8003e66:	220f      	movs	r2, #15
 8003e68:	4013      	ands	r3, r2
 8003e6a:	4a30      	ldr	r2, [pc, #192]	@ (8003f2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6c:	5cd3      	ldrb	r3, [r2, r3]
 8003e6e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	0d9b      	lsrs	r3, r3, #22
 8003e74:	2203      	movs	r2, #3
 8003e76:	4013      	ands	r3, r2
 8003e78:	3301      	adds	r3, #1
 8003e7a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e7c:	4b27      	ldr	r3, [pc, #156]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003e7e:	68da      	ldr	r2, [r3, #12]
 8003e80:	2380      	movs	r3, #128	@ 0x80
 8003e82:	025b      	lsls	r3, r3, #9
 8003e84:	4013      	ands	r3, r2
 8003e86:	d00f      	beq.n	8003ea8 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	000a      	movs	r2, r1
 8003e8c:	0152      	lsls	r2, r2, #5
 8003e8e:	1a52      	subs	r2, r2, r1
 8003e90:	0193      	lsls	r3, r2, #6
 8003e92:	1a9b      	subs	r3, r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	185b      	adds	r3, r3, r1
 8003e98:	025b      	lsls	r3, r3, #9
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f7fc f945 	bl	800012c <__udivsi3>
 8003ea2:	0003      	movs	r3, r0
 8003ea4:	617b      	str	r3, [r7, #20]
 8003ea6:	e023      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003ea8:	4b1c      	ldr	r3, [pc, #112]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2210      	movs	r2, #16
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d00f      	beq.n	8003ed2 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	000a      	movs	r2, r1
 8003eb6:	0152      	lsls	r2, r2, #5
 8003eb8:	1a52      	subs	r2, r2, r1
 8003eba:	0193      	lsls	r3, r2, #6
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	00db      	lsls	r3, r3, #3
 8003ec0:	185b      	adds	r3, r3, r1
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	f7fc f930 	bl	800012c <__udivsi3>
 8003ecc:	0003      	movs	r3, r0
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	e00e      	b.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003ed2:	68b9      	ldr	r1, [r7, #8]
 8003ed4:	000a      	movs	r2, r1
 8003ed6:	0152      	lsls	r2, r2, #5
 8003ed8:	1a52      	subs	r2, r2, r1
 8003eda:	0193      	lsls	r3, r2, #6
 8003edc:	1a9b      	subs	r3, r3, r2
 8003ede:	00db      	lsls	r3, r3, #3
 8003ee0:	185b      	adds	r3, r3, r1
 8003ee2:	029b      	lsls	r3, r3, #10
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7fc f920 	bl	800012c <__udivsi3>
 8003eec:	0003      	movs	r3, r0
 8003eee:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	613b      	str	r3, [r7, #16]
      break;
 8003ef4:	e00d      	b.n	8003f12 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ef6:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	0b5b      	lsrs	r3, r3, #13
 8003efc:	2207      	movs	r2, #7
 8003efe:	4013      	ands	r3, r2
 8003f00:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	3301      	adds	r3, #1
 8003f06:	2280      	movs	r2, #128	@ 0x80
 8003f08:	0212      	lsls	r2, r2, #8
 8003f0a:	409a      	lsls	r2, r3
 8003f0c:	0013      	movs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]
      break;
 8003f10:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003f12:	693b      	ldr	r3, [r7, #16]
}
 8003f14:	0018      	movs	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b006      	add	sp, #24
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	003d0900 	.word	0x003d0900
 8003f24:	00f42400 	.word	0x00f42400
 8003f28:	007a1200 	.word	0x007a1200
 8003f2c:	08006798 	.word	0x08006798

08003f30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f34:	4b02      	ldr	r3, [pc, #8]	@ (8003f40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f36:	681b      	ldr	r3, [r3, #0]
}
 8003f38:	0018      	movs	r0, r3
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	20000000 	.word	0x20000000

08003f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f48:	f7ff fff2 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003f4c:	0001      	movs	r1, r0
 8003f4e:	4b06      	ldr	r3, [pc, #24]	@ (8003f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	2207      	movs	r2, #7
 8003f56:	4013      	ands	r3, r2
 8003f58:	4a04      	ldr	r2, [pc, #16]	@ (8003f6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f5a:	5cd3      	ldrb	r3, [r2, r3]
 8003f5c:	40d9      	lsrs	r1, r3
 8003f5e:	000b      	movs	r3, r1
}
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	46c0      	nop			@ (mov r8, r8)
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	08006790 	.word	0x08006790

08003f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f74:	f7ff ffdc 	bl	8003f30 <HAL_RCC_GetHCLKFreq>
 8003f78:	0001      	movs	r1, r0
 8003f7a:	4b06      	ldr	r3, [pc, #24]	@ (8003f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	0adb      	lsrs	r3, r3, #11
 8003f80:	2207      	movs	r2, #7
 8003f82:	4013      	ands	r3, r2
 8003f84:	4a04      	ldr	r2, [pc, #16]	@ (8003f98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f86:	5cd3      	ldrb	r3, [r2, r3]
 8003f88:	40d9      	lsrs	r1, r3
 8003f8a:	000b      	movs	r3, r1
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			@ (mov r8, r8)
 8003f94:	40021000 	.word	0x40021000
 8003f98:	08006790 	.word	0x08006790

08003f9c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003fa4:	2317      	movs	r3, #23
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d106      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	2380      	movs	r3, #128	@ 0x80
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d100      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003fc2:	e104      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc4:	4bb9      	ldr	r3, [pc, #740]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fc8:	2380      	movs	r3, #128	@ 0x80
 8003fca:	055b      	lsls	r3, r3, #21
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d10a      	bne.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fd0:	4bb6      	ldr	r3, [pc, #728]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fd4:	4bb5      	ldr	r3, [pc, #724]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003fd6:	2180      	movs	r1, #128	@ 0x80
 8003fd8:	0549      	lsls	r1, r1, #21
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003fde:	2317      	movs	r3, #23
 8003fe0:	18fb      	adds	r3, r7, r3
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe6:	4bb2      	ldr	r3, [pc, #712]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	2380      	movs	r3, #128	@ 0x80
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d11a      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ff2:	4baf      	ldr	r3, [pc, #700]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4bae      	ldr	r3, [pc, #696]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003ff8:	2180      	movs	r1, #128	@ 0x80
 8003ffa:	0049      	lsls	r1, r1, #1
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004000:	f7fd ff7e 	bl	8001f00 <HAL_GetTick>
 8004004:	0003      	movs	r3, r0
 8004006:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004008:	e008      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800400a:	f7fd ff79 	bl	8001f00 <HAL_GetTick>
 800400e:	0002      	movs	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b64      	cmp	r3, #100	@ 0x64
 8004016:	d901      	bls.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e143      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800401c:	4ba4      	ldr	r3, [pc, #656]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	2380      	movs	r3, #128	@ 0x80
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4013      	ands	r3, r2
 8004026:	d0f0      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004028:	4ba0      	ldr	r3, [pc, #640]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	23c0      	movs	r3, #192	@ 0xc0
 800402e:	039b      	lsls	r3, r3, #14
 8004030:	4013      	ands	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685a      	ldr	r2, [r3, #4]
 8004038:	23c0      	movs	r3, #192	@ 0xc0
 800403a:	039b      	lsls	r3, r3, #14
 800403c:	4013      	ands	r3, r2
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	429a      	cmp	r2, r3
 8004042:	d107      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	23c0      	movs	r3, #192	@ 0xc0
 800404a:	039b      	lsls	r3, r3, #14
 800404c:	4013      	ands	r3, r2
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	429a      	cmp	r2, r3
 8004052:	d013      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	23c0      	movs	r3, #192	@ 0xc0
 800405a:	029b      	lsls	r3, r3, #10
 800405c:	401a      	ands	r2, r3
 800405e:	23c0      	movs	r3, #192	@ 0xc0
 8004060:	029b      	lsls	r3, r3, #10
 8004062:	429a      	cmp	r2, r3
 8004064:	d10a      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004066:	4b91      	ldr	r3, [pc, #580]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	2380      	movs	r3, #128	@ 0x80
 800406c:	029b      	lsls	r3, r3, #10
 800406e:	401a      	ands	r2, r3
 8004070:	2380      	movs	r3, #128	@ 0x80
 8004072:	029b      	lsls	r3, r3, #10
 8004074:	429a      	cmp	r2, r3
 8004076:	d101      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e113      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800407c:	4b8b      	ldr	r3, [pc, #556]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800407e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004080:	23c0      	movs	r3, #192	@ 0xc0
 8004082:	029b      	lsls	r3, r3, #10
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d049      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685a      	ldr	r2, [r3, #4]
 8004092:	23c0      	movs	r3, #192	@ 0xc0
 8004094:	029b      	lsls	r3, r3, #10
 8004096:	4013      	ands	r3, r2
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	429a      	cmp	r2, r3
 800409c:	d004      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2220      	movs	r2, #32
 80040a4:	4013      	ands	r3, r2
 80040a6:	d10d      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	23c0      	movs	r3, #192	@ 0xc0
 80040ae:	029b      	lsls	r3, r3, #10
 80040b0:	4013      	ands	r3, r2
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d034      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	2380      	movs	r3, #128	@ 0x80
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	4013      	ands	r3, r2
 80040c2:	d02e      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80040c4:	4b79      	ldr	r3, [pc, #484]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c8:	4a7a      	ldr	r2, [pc, #488]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040ce:	4b77      	ldr	r3, [pc, #476]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040d2:	4b76      	ldr	r3, [pc, #472]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040d4:	2180      	movs	r1, #128	@ 0x80
 80040d6:	0309      	lsls	r1, r1, #12
 80040d8:	430a      	orrs	r2, r1
 80040da:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040dc:	4b73      	ldr	r3, [pc, #460]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80040e0:	4b72      	ldr	r3, [pc, #456]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040e2:	4975      	ldr	r1, [pc, #468]	@ (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80040e4:	400a      	ands	r2, r1
 80040e6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80040e8:	4b70      	ldr	r3, [pc, #448]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	2380      	movs	r3, #128	@ 0x80
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	4013      	ands	r3, r2
 80040f6:	d014      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f8:	f7fd ff02 	bl	8001f00 <HAL_GetTick>
 80040fc:	0003      	movs	r3, r0
 80040fe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004100:	e009      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fd fefd 	bl	8001f00 <HAL_GetTick>
 8004106:	0002      	movs	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	4a6b      	ldr	r2, [pc, #428]	@ (80042bc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e0c6      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004116:	4b65      	ldr	r3, [pc, #404]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004118:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800411a:	2380      	movs	r3, #128	@ 0x80
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4013      	ands	r3, r2
 8004120:	d0ef      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	2380      	movs	r3, #128	@ 0x80
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	4013      	ands	r3, r2
 800412c:	d01f      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	23c0      	movs	r3, #192	@ 0xc0
 8004134:	029b      	lsls	r3, r3, #10
 8004136:	401a      	ands	r2, r3
 8004138:	23c0      	movs	r3, #192	@ 0xc0
 800413a:	029b      	lsls	r3, r3, #10
 800413c:	429a      	cmp	r2, r3
 800413e:	d10c      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004140:	4b5a      	ldr	r3, [pc, #360]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a5e      	ldr	r2, [pc, #376]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004146:	4013      	ands	r3, r2
 8004148:	0019      	movs	r1, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	23c0      	movs	r3, #192	@ 0xc0
 8004150:	039b      	lsls	r3, r3, #14
 8004152:	401a      	ands	r2, r3
 8004154:	4b55      	ldr	r3, [pc, #340]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004156:	430a      	orrs	r2, r1
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	4b54      	ldr	r3, [pc, #336]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800415c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	23c0      	movs	r3, #192	@ 0xc0
 8004164:	029b      	lsls	r3, r3, #10
 8004166:	401a      	ands	r2, r3
 8004168:	4b50      	ldr	r3, [pc, #320]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800416a:	430a      	orrs	r2, r1
 800416c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2220      	movs	r2, #32
 8004174:	4013      	ands	r3, r2
 8004176:	d01f      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	23c0      	movs	r3, #192	@ 0xc0
 800417e:	029b      	lsls	r3, r3, #10
 8004180:	401a      	ands	r2, r3
 8004182:	23c0      	movs	r3, #192	@ 0xc0
 8004184:	029b      	lsls	r3, r3, #10
 8004186:	429a      	cmp	r2, r3
 8004188:	d10c      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 800418a:	4b48      	ldr	r3, [pc, #288]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a4c      	ldr	r2, [pc, #304]	@ (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004190:	4013      	ands	r3, r2
 8004192:	0019      	movs	r1, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	23c0      	movs	r3, #192	@ 0xc0
 800419a:	039b      	lsls	r3, r3, #14
 800419c:	401a      	ands	r2, r3
 800419e:	4b43      	ldr	r3, [pc, #268]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041a0:	430a      	orrs	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	4b41      	ldr	r3, [pc, #260]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041a6:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	23c0      	movs	r3, #192	@ 0xc0
 80041ae:	029b      	lsls	r3, r3, #10
 80041b0:	401a      	ands	r2, r3
 80041b2:	4b3e      	ldr	r3, [pc, #248]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041b4:	430a      	orrs	r2, r1
 80041b6:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041b8:	2317      	movs	r3, #23
 80041ba:	18fb      	adds	r3, r7, r3
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d105      	bne.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c2:	4b3a      	ldr	r3, [pc, #232]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041c6:	4b39      	ldr	r3, [pc, #228]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041c8:	493e      	ldr	r1, [pc, #248]	@ (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80041ca:	400a      	ands	r2, r1
 80041cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2201      	movs	r2, #1
 80041d4:	4013      	ands	r3, r2
 80041d6:	d009      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041d8:	4b34      	ldr	r3, [pc, #208]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041dc:	2203      	movs	r2, #3
 80041de:	4393      	bics	r3, r2
 80041e0:	0019      	movs	r1, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	4b31      	ldr	r3, [pc, #196]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041e8:	430a      	orrs	r2, r1
 80041ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2202      	movs	r2, #2
 80041f2:	4013      	ands	r3, r2
 80041f4:	d009      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041f6:	4b2d      	ldr	r3, [pc, #180]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80041f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041fa:	220c      	movs	r2, #12
 80041fc:	4393      	bics	r3, r2
 80041fe:	0019      	movs	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	4b29      	ldr	r3, [pc, #164]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004206:	430a      	orrs	r2, r1
 8004208:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2204      	movs	r2, #4
 8004210:	4013      	ands	r3, r2
 8004212:	d009      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004214:	4b25      	ldr	r3, [pc, #148]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004218:	4a2b      	ldr	r2, [pc, #172]	@ (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 800421a:	4013      	ands	r3, r2
 800421c:	0019      	movs	r1, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	695a      	ldr	r2, [r3, #20]
 8004222:	4b22      	ldr	r3, [pc, #136]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004224:	430a      	orrs	r2, r1
 8004226:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2208      	movs	r2, #8
 800422e:	4013      	ands	r3, r2
 8004230:	d009      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004232:	4b1e      	ldr	r3, [pc, #120]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004236:	4a25      	ldr	r2, [pc, #148]	@ (80042cc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004238:	4013      	ands	r3, r2
 800423a:	0019      	movs	r1, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699a      	ldr	r2, [r3, #24]
 8004240:	4b1a      	ldr	r3, [pc, #104]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004242:	430a      	orrs	r2, r1
 8004244:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	2380      	movs	r3, #128	@ 0x80
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	4013      	ands	r3, r2
 8004250:	d009      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004252:	4b16      	ldr	r3, [pc, #88]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004256:	4a17      	ldr	r2, [pc, #92]	@ (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004258:	4013      	ands	r3, r2
 800425a:	0019      	movs	r1, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	4b12      	ldr	r3, [pc, #72]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004262:	430a      	orrs	r2, r1
 8004264:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2240      	movs	r2, #64	@ 0x40
 800426c:	4013      	ands	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004270:	4b0e      	ldr	r3, [pc, #56]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004274:	4a16      	ldr	r2, [pc, #88]	@ (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004276:	4013      	ands	r3, r2
 8004278:	0019      	movs	r1, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800427e:	4b0b      	ldr	r3, [pc, #44]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004280:	430a      	orrs	r2, r1
 8004282:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2280      	movs	r2, #128	@ 0x80
 800428a:	4013      	ands	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800428e:	4b07      	ldr	r3, [pc, #28]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004292:	4a10      	ldr	r2, [pc, #64]	@ (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004294:	4013      	ands	r3, r2
 8004296:	0019      	movs	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a1a      	ldr	r2, [r3, #32]
 800429c:	4b03      	ldr	r3, [pc, #12]	@ (80042ac <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800429e:	430a      	orrs	r2, r1
 80042a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b006      	add	sp, #24
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40007000 	.word	0x40007000
 80042b4:	fffcffff 	.word	0xfffcffff
 80042b8:	fff7ffff 	.word	0xfff7ffff
 80042bc:	00001388 	.word	0x00001388
 80042c0:	ffcfffff 	.word	0xffcfffff
 80042c4:	efffffff 	.word	0xefffffff
 80042c8:	fffff3ff 	.word	0xfffff3ff
 80042cc:	ffffcfff 	.word	0xffffcfff
 80042d0:	fbffffff 	.word	0xfbffffff
 80042d4:	fff3ffff 	.word	0xfff3ffff

080042d8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80042d8:	b5b0      	push	{r4, r5, r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042e0:	230f      	movs	r3, #15
 80042e2:	18fb      	adds	r3, r7, r3
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e088      	b.n	8004404 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2221      	movs	r2, #33	@ 0x21
 80042f6:	5c9b      	ldrb	r3, [r3, r2]
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d107      	bne.n	800430e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2220      	movs	r2, #32
 8004302:	2100      	movs	r1, #0
 8004304:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	0018      	movs	r0, r3
 800430a:	f7fd fcfb 	bl	8001d04 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2221      	movs	r2, #33	@ 0x21
 8004312:	2102      	movs	r1, #2
 8004314:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2210      	movs	r2, #16
 800431e:	4013      	ands	r3, r2
 8004320:	2b10      	cmp	r3, #16
 8004322:	d05f      	beq.n	80043e4 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	22ca      	movs	r2, #202	@ 0xca
 800432a:	625a      	str	r2, [r3, #36]	@ 0x24
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2253      	movs	r2, #83	@ 0x53
 8004332:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004334:	250f      	movs	r5, #15
 8004336:	197c      	adds	r4, r7, r5
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	0018      	movs	r0, r3
 800433c:	f000 f93e 	bl	80045bc <RTC_EnterInitMode>
 8004340:	0003      	movs	r3, r0
 8004342:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8004344:	0028      	movs	r0, r5
 8004346:	183b      	adds	r3, r7, r0
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d12c      	bne.n	80043a8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	492c      	ldr	r1, [pc, #176]	@ (800440c <HAL_RTC_Init+0x134>)
 800435a:	400a      	ands	r2, r1
 800435c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6899      	ldr	r1, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	68d2      	ldr	r2, [r2, #12]
 8004384:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6919      	ldr	r1, [r3, #16]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	041a      	lsls	r2, r3, #16
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800439a:	183c      	adds	r4, r7, r0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	0018      	movs	r0, r3
 80043a0:	f000 f950 	bl	8004644 <RTC_ExitInitMode>
 80043a4:	0003      	movs	r3, r0
 80043a6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80043a8:	230f      	movs	r3, #15
 80043aa:	18fb      	adds	r3, r7, r3
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d113      	bne.n	80043da <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2103      	movs	r1, #3
 80043be:	438a      	bics	r2, r1
 80043c0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	431a      	orrs	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	22ff      	movs	r2, #255	@ 0xff
 80043e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80043e2:	e003      	b.n	80043ec <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80043e4:	230f      	movs	r3, #15
 80043e6:	18fb      	adds	r3, r7, r3
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 80043ec:	230f      	movs	r3, #15
 80043ee:	18fb      	adds	r3, r7, r3
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d103      	bne.n	80043fe <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2221      	movs	r2, #33	@ 0x21
 80043fa:	2101      	movs	r1, #1
 80043fc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80043fe:	230f      	movs	r3, #15
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	781b      	ldrb	r3, [r3, #0]
}
 8004404:	0018      	movs	r0, r3
 8004406:	46bd      	mov	sp, r7
 8004408:	b004      	add	sp, #16
 800440a:	bdb0      	pop	{r4, r5, r7, pc}
 800440c:	ff8fffbf 	.word	0xff8fffbf

08004410 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	045b      	lsls	r3, r3, #17
 8004432:	0c5a      	lsrs	r2, r3, #17
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a22      	ldr	r2, [pc, #136]	@ (80044c8 <HAL_RTC_GetTime+0xb8>)
 8004440:	4013      	ands	r3, r2
 8004442:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	0c1b      	lsrs	r3, r3, #16
 8004448:	b2db      	uxtb	r3, r3
 800444a:	223f      	movs	r2, #63	@ 0x3f
 800444c:	4013      	ands	r3, r2
 800444e:	b2da      	uxtb	r2, r3
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	0a1b      	lsrs	r3, r3, #8
 8004458:	b2db      	uxtb	r3, r3
 800445a:	227f      	movs	r2, #127	@ 0x7f
 800445c:	4013      	ands	r3, r2
 800445e:	b2da      	uxtb	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	227f      	movs	r2, #127	@ 0x7f
 800446a:	4013      	ands	r3, r2
 800446c:	b2da      	uxtb	r2, r3
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	0d9b      	lsrs	r3, r3, #22
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2201      	movs	r2, #1
 800447a:	4013      	ands	r3, r2
 800447c:	b2da      	uxtb	r2, r3
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d11a      	bne.n	80044be <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	0018      	movs	r0, r3
 800448e:	f000 f903 	bl	8004698 <RTC_Bcd2ToByte>
 8004492:	0003      	movs	r3, r0
 8004494:	001a      	movs	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	785b      	ldrb	r3, [r3, #1]
 800449e:	0018      	movs	r0, r3
 80044a0:	f000 f8fa 	bl	8004698 <RTC_Bcd2ToByte>
 80044a4:	0003      	movs	r3, r0
 80044a6:	001a      	movs	r2, r3
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	789b      	ldrb	r3, [r3, #2]
 80044b0:	0018      	movs	r0, r3
 80044b2:	f000 f8f1 	bl	8004698 <RTC_Bcd2ToByte>
 80044b6:	0003      	movs	r3, r0
 80044b8:	001a      	movs	r2, r3
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	0018      	movs	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b006      	add	sp, #24
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	007f7f7f 	.word	0x007f7f7f

080044cc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	4a21      	ldr	r2, [pc, #132]	@ (8004568 <HAL_RTC_GetDate+0x9c>)
 80044e4:	4013      	ands	r3, r2
 80044e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	0a1b      	lsrs	r3, r3, #8
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	221f      	movs	r2, #31
 80044fa:	4013      	ands	r3, r2
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	223f      	movs	r2, #63	@ 0x3f
 8004508:	4013      	ands	r3, r2
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	0b5b      	lsrs	r3, r3, #13
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2207      	movs	r2, #7
 8004518:	4013      	ands	r3, r2
 800451a:	b2da      	uxtb	r2, r3
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d11a      	bne.n	800455c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	78db      	ldrb	r3, [r3, #3]
 800452a:	0018      	movs	r0, r3
 800452c:	f000 f8b4 	bl	8004698 <RTC_Bcd2ToByte>
 8004530:	0003      	movs	r3, r0
 8004532:	001a      	movs	r2, r3
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	785b      	ldrb	r3, [r3, #1]
 800453c:	0018      	movs	r0, r3
 800453e:	f000 f8ab 	bl	8004698 <RTC_Bcd2ToByte>
 8004542:	0003      	movs	r3, r0
 8004544:	001a      	movs	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	789b      	ldrb	r3, [r3, #2]
 800454e:	0018      	movs	r0, r3
 8004550:	f000 f8a2 	bl	8004698 <RTC_Bcd2ToByte>
 8004554:	0003      	movs	r3, r0
 8004556:	001a      	movs	r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	0018      	movs	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	b006      	add	sp, #24
 8004564:	bd80      	pop	{r7, pc}
 8004566:	46c0      	nop			@ (mov r8, r8)
 8004568:	00ffff3f 	.word	0x00ffff3f

0800456c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a0e      	ldr	r2, [pc, #56]	@ (80045b8 <HAL_RTC_WaitForSynchro+0x4c>)
 800457e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004580:	f7fd fcbe 	bl	8001f00 <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004588:	e00a      	b.n	80045a0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800458a:	f7fd fcb9 	bl	8001f00 <HAL_GetTick>
 800458e:	0002      	movs	r2, r0
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1ad2      	subs	r2, r2, r3
 8004594:	23fa      	movs	r3, #250	@ 0xfa
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	429a      	cmp	r2, r3
 800459a:	d901      	bls.n	80045a0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800459c:	2303      	movs	r3, #3
 800459e:	e006      	b.n	80045ae <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2220      	movs	r2, #32
 80045a8:	4013      	ands	r3, r2
 80045aa:	d0ee      	beq.n	800458a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	0018      	movs	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	b004      	add	sp, #16
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	46c0      	nop			@ (mov r8, r8)
 80045b8:	0001ff5f 	.word	0x0001ff5f

080045bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80045c8:	230f      	movs	r3, #15
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	2240      	movs	r2, #64	@ 0x40
 80045d8:	4013      	ands	r3, r2
 80045da:	d12c      	bne.n	8004636 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2180      	movs	r1, #128	@ 0x80
 80045e8:	430a      	orrs	r2, r1
 80045ea:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80045ec:	f7fd fc88 	bl	8001f00 <HAL_GetTick>
 80045f0:	0003      	movs	r3, r0
 80045f2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80045f4:	e014      	b.n	8004620 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80045f6:	f7fd fc83 	bl	8001f00 <HAL_GetTick>
 80045fa:	0002      	movs	r2, r0
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	1ad2      	subs	r2, r2, r3
 8004600:	200f      	movs	r0, #15
 8004602:	183b      	adds	r3, r7, r0
 8004604:	1839      	adds	r1, r7, r0
 8004606:	7809      	ldrb	r1, [r1, #0]
 8004608:	7019      	strb	r1, [r3, #0]
 800460a:	23fa      	movs	r3, #250	@ 0xfa
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	429a      	cmp	r2, r3
 8004610:	d906      	bls.n	8004620 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2221      	movs	r2, #33	@ 0x21
 8004616:	2104      	movs	r1, #4
 8004618:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800461a:	183b      	adds	r3, r7, r0
 800461c:	2201      	movs	r2, #1
 800461e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	2240      	movs	r2, #64	@ 0x40
 8004628:	4013      	ands	r3, r2
 800462a:	d104      	bne.n	8004636 <RTC_EnterInitMode+0x7a>
 800462c:	230f      	movs	r3, #15
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d1df      	bne.n	80045f6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004636:	230f      	movs	r3, #15
 8004638:	18fb      	adds	r3, r7, r3
 800463a:	781b      	ldrb	r3, [r3, #0]
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	b004      	add	sp, #16
 8004642:	bd80      	pop	{r7, pc}

08004644 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004644:	b590      	push	{r4, r7, lr}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800464c:	240f      	movs	r4, #15
 800464e:	193b      	adds	r3, r7, r4
 8004650:	2200      	movs	r2, #0
 8004652:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2180      	movs	r1, #128	@ 0x80
 8004660:	438a      	bics	r2, r1
 8004662:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2220      	movs	r2, #32
 800466c:	4013      	ands	r3, r2
 800466e:	d10c      	bne.n	800468a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	0018      	movs	r0, r3
 8004674:	f7ff ff7a 	bl	800456c <HAL_RTC_WaitForSynchro>
 8004678:	1e03      	subs	r3, r0, #0
 800467a:	d006      	beq.n	800468a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2221      	movs	r2, #33	@ 0x21
 8004680:	2104      	movs	r1, #4
 8004682:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004684:	193b      	adds	r3, r7, r4
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800468a:	230f      	movs	r3, #15
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	781b      	ldrb	r3, [r3, #0]
}
 8004690:	0018      	movs	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	b005      	add	sp, #20
 8004696:	bd90      	pop	{r4, r7, pc}

08004698 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	0002      	movs	r2, r0
 80046a0:	1dfb      	adds	r3, r7, #7
 80046a2:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 80046a4:	2300      	movs	r3, #0
 80046a6:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80046a8:	1dfb      	adds	r3, r7, #7
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	001a      	movs	r2, r3
 80046b2:	0013      	movs	r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	189b      	adds	r3, r3, r2
 80046b8:	005b      	lsls	r3, r3, #1
 80046ba:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	1dfb      	adds	r3, r7, #7
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	210f      	movs	r1, #15
 80046c6:	400b      	ands	r3, r1
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	18d3      	adds	r3, r2, r3
 80046cc:	b2db      	uxtb	r3, r3
}
 80046ce:	0018      	movs	r0, r3
 80046d0:	46bd      	mov	sp, r7
 80046d2:	b004      	add	sp, #16
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80046e4:	4b64      	ldr	r3, [pc, #400]	@ (8004878 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	22fa      	movs	r2, #250	@ 0xfa
 80046ea:	01d1      	lsls	r1, r2, #7
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7fb fd1d 	bl	800012c <__udivsi3>
 80046f2:	0003      	movs	r3, r0
 80046f4:	001a      	movs	r2, r3
 80046f6:	0013      	movs	r3, r2
 80046f8:	015b      	lsls	r3, r3, #5
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	189b      	adds	r3, r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	5c9b      	ldrb	r3, [r3, r2]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 800470e:	2302      	movs	r3, #2
 8004710:	e0ad      	b.n	800486e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2220      	movs	r2, #32
 8004716:	2101      	movs	r1, #1
 8004718:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2221      	movs	r2, #33	@ 0x21
 800471e:	2102      	movs	r1, #2
 8004720:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	22ca      	movs	r2, #202	@ 0xca
 8004728:	625a      	str	r2, [r3, #36]	@ 0x24
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	2253      	movs	r2, #83	@ 0x53
 8004730:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689a      	ldr	r2, [r3, #8]
 8004738:	2380      	movs	r3, #128	@ 0x80
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4013      	ands	r3, r2
 800473e:	d019      	beq.n	8004774 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	3b01      	subs	r3, #1
 8004744:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10d      	bne.n	8004768 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	22ff      	movs	r2, #255	@ 0xff
 8004752:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2221      	movs	r2, #33	@ 0x21
 8004758:	2103      	movs	r1, #3
 800475a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	2100      	movs	r1, #0
 8004762:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e082      	b.n	800486e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	2204      	movs	r2, #4
 8004770:	4013      	ands	r3, r2
 8004772:	d1e5      	bne.n	8004740 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	689a      	ldr	r2, [r3, #8]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	493f      	ldr	r1, [pc, #252]	@ (800487c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8004780:	400a      	ands	r2, r1
 8004782:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	22ff      	movs	r2, #255	@ 0xff
 800478c:	401a      	ands	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	493b      	ldr	r1, [pc, #236]	@ (8004880 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004794:	430a      	orrs	r2, r1
 8004796:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004798:	4b37      	ldr	r3, [pc, #220]	@ (8004878 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	22fa      	movs	r2, #250	@ 0xfa
 800479e:	01d1      	lsls	r1, r2, #7
 80047a0:	0018      	movs	r0, r3
 80047a2:	f7fb fcc3 	bl	800012c <__udivsi3>
 80047a6:	0003      	movs	r3, r0
 80047a8:	001a      	movs	r2, r3
 80047aa:	0013      	movs	r3, r2
 80047ac:	015b      	lsls	r3, r3, #5
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	189b      	adds	r3, r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10d      	bne.n	80047e0 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	22ff      	movs	r2, #255	@ 0xff
 80047ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2221      	movs	r2, #33	@ 0x21
 80047d0:	2103      	movs	r1, #3
 80047d2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	2100      	movs	r1, #0
 80047da:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e046      	b.n	800486e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	2204      	movs	r2, #4
 80047e8:	4013      	ands	r3, r2
 80047ea:	d0e5      	beq.n	80047b8 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2107      	movs	r1, #7
 80047f8:	438a      	bics	r2, r1
 80047fa:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6899      	ldr	r1, [r3, #8]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	430a      	orrs	r2, r1
 800480a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8004814:	4b1b      	ldr	r3, [pc, #108]	@ (8004884 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	4b1a      	ldr	r3, [pc, #104]	@ (8004884 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800481a:	2180      	movs	r1, #128	@ 0x80
 800481c:	0349      	lsls	r1, r1, #13
 800481e:	430a      	orrs	r2, r1
 8004820:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8004822:	4b18      	ldr	r3, [pc, #96]	@ (8004884 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	4b17      	ldr	r3, [pc, #92]	@ (8004884 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8004828:	2180      	movs	r1, #128	@ 0x80
 800482a:	0349      	lsls	r1, r1, #13
 800482c:	430a      	orrs	r2, r1
 800482e:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2180      	movs	r1, #128	@ 0x80
 800483c:	01c9      	lsls	r1, r1, #7
 800483e:	430a      	orrs	r2, r1
 8004840:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2180      	movs	r1, #128	@ 0x80
 800484e:	00c9      	lsls	r1, r1, #3
 8004850:	430a      	orrs	r2, r1
 8004852:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	22ff      	movs	r2, #255	@ 0xff
 800485a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2221      	movs	r2, #33	@ 0x21
 8004860:	2101      	movs	r1, #1
 8004862:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2220      	movs	r2, #32
 8004868:	2100      	movs	r1, #0
 800486a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	0018      	movs	r0, r3
 8004870:	46bd      	mov	sp, r7
 8004872:	b006      	add	sp, #24
 8004874:	bd80      	pop	{r7, pc}
 8004876:	46c0      	nop			@ (mov r8, r8)
 8004878:	20000000 	.word	0x20000000
 800487c:	fffffbff 	.word	0xfffffbff
 8004880:	fffffb7f 	.word	0xfffffb7f
 8004884:	40010400 	.word	0x40010400

08004888 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	5c9b      	ldrb	r3, [r3, r2]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d101      	bne.n	80048a2 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 800489e:	2302      	movs	r3, #2
 80048a0:	e04e      	b.n	8004940 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2220      	movs	r2, #32
 80048a6:	2101      	movs	r1, #1
 80048a8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2221      	movs	r2, #33	@ 0x21
 80048ae:	2102      	movs	r1, #2
 80048b0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	22ca      	movs	r2, #202	@ 0xca
 80048b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2253      	movs	r2, #83	@ 0x53
 80048c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	491e      	ldr	r1, [pc, #120]	@ (8004948 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 80048ce:	400a      	ands	r2, r1
 80048d0:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	491b      	ldr	r1, [pc, #108]	@ (800494c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 80048de:	400a      	ands	r2, r1
 80048e0:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048e2:	f7fd fb0d 	bl	8001f00 <HAL_GetTick>
 80048e6:	0003      	movs	r3, r0
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80048ea:	e016      	b.n	800491a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80048ec:	f7fd fb08 	bl	8001f00 <HAL_GetTick>
 80048f0:	0002      	movs	r2, r0
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	1ad2      	subs	r2, r2, r3
 80048f6:	23fa      	movs	r3, #250	@ 0xfa
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d90d      	bls.n	800491a <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	22ff      	movs	r2, #255	@ 0xff
 8004904:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2221      	movs	r2, #33	@ 0x21
 800490a:	2103      	movs	r1, #3
 800490c:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	2100      	movs	r1, #0
 8004914:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e012      	b.n	8004940 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	2204      	movs	r2, #4
 8004922:	4013      	ands	r3, r2
 8004924:	d0e2      	beq.n	80048ec <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	22ff      	movs	r2, #255	@ 0xff
 800492c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2221      	movs	r2, #33	@ 0x21
 8004932:	2101      	movs	r1, #1
 8004934:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	2100      	movs	r1, #0
 800493c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800493e:	2300      	movs	r3, #0
}
 8004940:	0018      	movs	r0, r3
 8004942:	46bd      	mov	sp, r7
 8004944:	b004      	add	sp, #16
 8004946:	bd80      	pop	{r7, pc}
 8004948:	fffffbff 	.word	0xfffffbff
 800494c:	ffffbfff 	.word	0xffffbfff

08004950 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004958:	4b13      	ldr	r3, [pc, #76]	@ (80049a8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 800495a:	2280      	movs	r2, #128	@ 0x80
 800495c:	0352      	lsls	r2, r2, #13
 800495e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	2380      	movs	r3, #128	@ 0x80
 8004968:	01db      	lsls	r3, r3, #7
 800496a:	4013      	ands	r3, r2
 800496c:	d014      	beq.n	8004998 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	2380      	movs	r3, #128	@ 0x80
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	4013      	ands	r3, r2
 800497a:	d00d      	beq.n	8004998 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	22ff      	movs	r2, #255	@ 0xff
 8004984:	401a      	ands	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4908      	ldr	r1, [pc, #32]	@ (80049ac <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 800498c:	430a      	orrs	r2, r1
 800498e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	0018      	movs	r0, r3
 8004994:	f7fc fd72 	bl	800147c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2221      	movs	r2, #33	@ 0x21
 800499c:	2101      	movs	r1, #1
 800499e:	5499      	strb	r1, [r3, r2]
}
 80049a0:	46c0      	nop			@ (mov r8, r8)
 80049a2:	46bd      	mov	sp, r7
 80049a4:	b002      	add	sp, #8
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40010400 	.word	0x40010400
 80049ac:	fffffb7f 	.word	0xfffffb7f

080049b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e044      	b.n	8004a4c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d107      	bne.n	80049da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2278      	movs	r2, #120	@ 0x78
 80049ce:	2100      	movs	r1, #0
 80049d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	0018      	movs	r0, r3
 80049d6:	f7fd f8e7 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2224      	movs	r2, #36	@ 0x24
 80049de:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2101      	movs	r1, #1
 80049ec:	438a      	bics	r2, r1
 80049ee:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	0018      	movs	r0, r3
 80049fc:	f000 fba8 	bl	8005150 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	0018      	movs	r0, r3
 8004a04:	f000 f906 	bl	8004c14 <UART_SetConfig>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e01c      	b.n	8004a4c <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	685a      	ldr	r2, [r3, #4]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	490d      	ldr	r1, [pc, #52]	@ (8004a54 <HAL_UART_Init+0xa4>)
 8004a1e:	400a      	ands	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	212a      	movs	r1, #42	@ 0x2a
 8004a2e:	438a      	bics	r2, r1
 8004a30:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	430a      	orrs	r2, r1
 8004a40:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	0018      	movs	r0, r3
 8004a46:	f000 fc37 	bl	80052b8 <UART_CheckIdleState>
 8004a4a:	0003      	movs	r3, r0
}
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	b002      	add	sp, #8
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	ffffb7ff 	.word	0xffffb7ff

08004a58 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e030      	b.n	8004acc <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2224      	movs	r2, #36	@ 0x24
 8004a6e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	438a      	bics	r2, r1
 8004a7e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2200      	movs	r2, #0
 8004a96:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	0018      	movs	r0, r3
 8004a9c:	f7fd f8fa 	bl	8001c94 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2284      	movs	r2, #132	@ 0x84
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2280      	movs	r2, #128	@ 0x80
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2278      	movs	r2, #120	@ 0x78
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	0018      	movs	r0, r3
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	b002      	add	sp, #8
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	@ 0x28
 8004ad8:	af02      	add	r7, sp, #8
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	1dbb      	adds	r3, r7, #6
 8004ae2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ae8:	2b20      	cmp	r3, #32
 8004aea:	d000      	beq.n	8004aee <HAL_UART_Transmit+0x1a>
 8004aec:	e08c      	b.n	8004c08 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_UART_Transmit+0x28>
 8004af4:	1dbb      	adds	r3, r7, #6
 8004af6:	881b      	ldrh	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e084      	b.n	8004c0a <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	689a      	ldr	r2, [r3, #8]
 8004b04:	2380      	movs	r3, #128	@ 0x80
 8004b06:	015b      	lsls	r3, r3, #5
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d109      	bne.n	8004b20 <HAL_UART_Transmit+0x4c>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d105      	bne.n	8004b20 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	2201      	movs	r2, #1
 8004b18:	4013      	ands	r3, r2
 8004b1a:	d001      	beq.n	8004b20 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e074      	b.n	8004c0a <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2284      	movs	r2, #132	@ 0x84
 8004b24:	2100      	movs	r1, #0
 8004b26:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2221      	movs	r2, #33	@ 0x21
 8004b2c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b2e:	f7fd f9e7 	bl	8001f00 <HAL_GetTick>
 8004b32:	0003      	movs	r3, r0
 8004b34:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	1dba      	adds	r2, r7, #6
 8004b3a:	2150      	movs	r1, #80	@ 0x50
 8004b3c:	8812      	ldrh	r2, [r2, #0]
 8004b3e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	1dba      	adds	r2, r7, #6
 8004b44:	2152      	movs	r1, #82	@ 0x52
 8004b46:	8812      	ldrh	r2, [r2, #0]
 8004b48:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	689a      	ldr	r2, [r3, #8]
 8004b4e:	2380      	movs	r3, #128	@ 0x80
 8004b50:	015b      	lsls	r3, r3, #5
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d108      	bne.n	8004b68 <HAL_UART_Transmit+0x94>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d104      	bne.n	8004b68 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	e003      	b.n	8004b70 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b70:	e02f      	b.n	8004bd2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	0013      	movs	r3, r2
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2180      	movs	r1, #128	@ 0x80
 8004b80:	f000 fc42 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 8004b84:	1e03      	subs	r3, r0, #0
 8004b86:	d004      	beq.n	8004b92 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e03b      	b.n	8004c0a <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10b      	bne.n	8004bb0 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	001a      	movs	r2, r3
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	05d2      	lsls	r2, r2, #23
 8004ba4:	0dd2      	lsrs	r2, r2, #23
 8004ba6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ba8:	69bb      	ldr	r3, [r7, #24]
 8004baa:	3302      	adds	r3, #2
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	e007      	b.n	8004bc0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	781a      	ldrb	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2252      	movs	r2, #82	@ 0x52
 8004bc4:	5a9b      	ldrh	r3, [r3, r2]
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b299      	uxth	r1, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2252      	movs	r2, #82	@ 0x52
 8004bd0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2252      	movs	r2, #82	@ 0x52
 8004bd6:	5a9b      	ldrh	r3, [r3, r2]
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1c9      	bne.n	8004b72 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	0013      	movs	r3, r2
 8004be8:	2200      	movs	r2, #0
 8004bea:	2140      	movs	r1, #64	@ 0x40
 8004bec:	f000 fc0c 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 8004bf0:	1e03      	subs	r3, r0, #0
 8004bf2:	d004      	beq.n	8004bfe <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e005      	b.n	8004c0a <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2220      	movs	r2, #32
 8004c02:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	e000      	b.n	8004c0a <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8004c08:	2302      	movs	r3, #2
  }
}
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b008      	add	sp, #32
 8004c10:	bd80      	pop	{r7, pc}
	...

08004c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c14:	b5b0      	push	{r4, r5, r7, lr}
 8004c16:	b08e      	sub	sp, #56	@ 0x38
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c1c:	231a      	movs	r3, #26
 8004c1e:	2218      	movs	r2, #24
 8004c20:	189b      	adds	r3, r3, r2
 8004c22:	19db      	adds	r3, r3, r7
 8004c24:	2200      	movs	r2, #0
 8004c26:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	431a      	orrs	r2, r3
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	69db      	ldr	r3, [r3, #28]
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4ac3      	ldr	r2, [pc, #780]	@ (8004f54 <UART_SetConfig+0x340>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	0019      	movs	r1, r3
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c52:	430a      	orrs	r2, r1
 8004c54:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	4abe      	ldr	r2, [pc, #760]	@ (8004f58 <UART_SetConfig+0x344>)
 8004c5e:	4013      	ands	r3, r2
 8004c60:	0019      	movs	r1, r3
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4ab8      	ldr	r2, [pc, #736]	@ (8004f5c <UART_SetConfig+0x348>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c84:	4313      	orrs	r3, r2
 8004c86:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	4ab4      	ldr	r2, [pc, #720]	@ (8004f60 <UART_SetConfig+0x34c>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	0019      	movs	r1, r3
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4ab0      	ldr	r2, [pc, #704]	@ (8004f64 <UART_SetConfig+0x350>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d131      	bne.n	8004d0c <UART_SetConfig+0xf8>
 8004ca8:	4baf      	ldr	r3, [pc, #700]	@ (8004f68 <UART_SetConfig+0x354>)
 8004caa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cac:	2203      	movs	r2, #3
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b03      	cmp	r3, #3
 8004cb2:	d01d      	beq.n	8004cf0 <UART_SetConfig+0xdc>
 8004cb4:	d823      	bhi.n	8004cfe <UART_SetConfig+0xea>
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d00c      	beq.n	8004cd4 <UART_SetConfig+0xc0>
 8004cba:	d820      	bhi.n	8004cfe <UART_SetConfig+0xea>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <UART_SetConfig+0xb2>
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d00e      	beq.n	8004ce2 <UART_SetConfig+0xce>
 8004cc4:	e01b      	b.n	8004cfe <UART_SetConfig+0xea>
 8004cc6:	231b      	movs	r3, #27
 8004cc8:	2218      	movs	r2, #24
 8004cca:	189b      	adds	r3, r3, r2
 8004ccc:	19db      	adds	r3, r3, r7
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	e0b4      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004cd4:	231b      	movs	r3, #27
 8004cd6:	2218      	movs	r2, #24
 8004cd8:	189b      	adds	r3, r3, r2
 8004cda:	19db      	adds	r3, r3, r7
 8004cdc:	2202      	movs	r2, #2
 8004cde:	701a      	strb	r2, [r3, #0]
 8004ce0:	e0ad      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004ce2:	231b      	movs	r3, #27
 8004ce4:	2218      	movs	r2, #24
 8004ce6:	189b      	adds	r3, r3, r2
 8004ce8:	19db      	adds	r3, r3, r7
 8004cea:	2204      	movs	r2, #4
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	e0a6      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004cf0:	231b      	movs	r3, #27
 8004cf2:	2218      	movs	r2, #24
 8004cf4:	189b      	adds	r3, r3, r2
 8004cf6:	19db      	adds	r3, r3, r7
 8004cf8:	2208      	movs	r2, #8
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	e09f      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004cfe:	231b      	movs	r3, #27
 8004d00:	2218      	movs	r2, #24
 8004d02:	189b      	adds	r3, r3, r2
 8004d04:	19db      	adds	r3, r3, r7
 8004d06:	2210      	movs	r2, #16
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	e098      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a96      	ldr	r2, [pc, #600]	@ (8004f6c <UART_SetConfig+0x358>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d131      	bne.n	8004d7a <UART_SetConfig+0x166>
 8004d16:	4b94      	ldr	r3, [pc, #592]	@ (8004f68 <UART_SetConfig+0x354>)
 8004d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d1a:	220c      	movs	r2, #12
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2b0c      	cmp	r3, #12
 8004d20:	d01d      	beq.n	8004d5e <UART_SetConfig+0x14a>
 8004d22:	d823      	bhi.n	8004d6c <UART_SetConfig+0x158>
 8004d24:	2b08      	cmp	r3, #8
 8004d26:	d00c      	beq.n	8004d42 <UART_SetConfig+0x12e>
 8004d28:	d820      	bhi.n	8004d6c <UART_SetConfig+0x158>
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <UART_SetConfig+0x120>
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d00e      	beq.n	8004d50 <UART_SetConfig+0x13c>
 8004d32:	e01b      	b.n	8004d6c <UART_SetConfig+0x158>
 8004d34:	231b      	movs	r3, #27
 8004d36:	2218      	movs	r2, #24
 8004d38:	189b      	adds	r3, r3, r2
 8004d3a:	19db      	adds	r3, r3, r7
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	701a      	strb	r2, [r3, #0]
 8004d40:	e07d      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004d42:	231b      	movs	r3, #27
 8004d44:	2218      	movs	r2, #24
 8004d46:	189b      	adds	r3, r3, r2
 8004d48:	19db      	adds	r3, r3, r7
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	e076      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004d50:	231b      	movs	r3, #27
 8004d52:	2218      	movs	r2, #24
 8004d54:	189b      	adds	r3, r3, r2
 8004d56:	19db      	adds	r3, r3, r7
 8004d58:	2204      	movs	r2, #4
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	e06f      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004d5e:	231b      	movs	r3, #27
 8004d60:	2218      	movs	r2, #24
 8004d62:	189b      	adds	r3, r3, r2
 8004d64:	19db      	adds	r3, r3, r7
 8004d66:	2208      	movs	r2, #8
 8004d68:	701a      	strb	r2, [r3, #0]
 8004d6a:	e068      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004d6c:	231b      	movs	r3, #27
 8004d6e:	2218      	movs	r2, #24
 8004d70:	189b      	adds	r3, r3, r2
 8004d72:	19db      	adds	r3, r3, r7
 8004d74:	2210      	movs	r2, #16
 8004d76:	701a      	strb	r2, [r3, #0]
 8004d78:	e061      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a7c      	ldr	r2, [pc, #496]	@ (8004f70 <UART_SetConfig+0x35c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d106      	bne.n	8004d92 <UART_SetConfig+0x17e>
 8004d84:	231b      	movs	r3, #27
 8004d86:	2218      	movs	r2, #24
 8004d88:	189b      	adds	r3, r3, r2
 8004d8a:	19db      	adds	r3, r3, r7
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	701a      	strb	r2, [r3, #0]
 8004d90:	e055      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a77      	ldr	r2, [pc, #476]	@ (8004f74 <UART_SetConfig+0x360>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d106      	bne.n	8004daa <UART_SetConfig+0x196>
 8004d9c:	231b      	movs	r3, #27
 8004d9e:	2218      	movs	r2, #24
 8004da0:	189b      	adds	r3, r3, r2
 8004da2:	19db      	adds	r3, r3, r7
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	e049      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a6b      	ldr	r2, [pc, #428]	@ (8004f5c <UART_SetConfig+0x348>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d13e      	bne.n	8004e32 <UART_SetConfig+0x21e>
 8004db4:	4b6c      	ldr	r3, [pc, #432]	@ (8004f68 <UART_SetConfig+0x354>)
 8004db6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004db8:	23c0      	movs	r3, #192	@ 0xc0
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	22c0      	movs	r2, #192	@ 0xc0
 8004dc0:	0112      	lsls	r2, r2, #4
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d027      	beq.n	8004e16 <UART_SetConfig+0x202>
 8004dc6:	22c0      	movs	r2, #192	@ 0xc0
 8004dc8:	0112      	lsls	r2, r2, #4
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d82a      	bhi.n	8004e24 <UART_SetConfig+0x210>
 8004dce:	2280      	movs	r2, #128	@ 0x80
 8004dd0:	0112      	lsls	r2, r2, #4
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d011      	beq.n	8004dfa <UART_SetConfig+0x1e6>
 8004dd6:	2280      	movs	r2, #128	@ 0x80
 8004dd8:	0112      	lsls	r2, r2, #4
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d822      	bhi.n	8004e24 <UART_SetConfig+0x210>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d004      	beq.n	8004dec <UART_SetConfig+0x1d8>
 8004de2:	2280      	movs	r2, #128	@ 0x80
 8004de4:	00d2      	lsls	r2, r2, #3
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00e      	beq.n	8004e08 <UART_SetConfig+0x1f4>
 8004dea:	e01b      	b.n	8004e24 <UART_SetConfig+0x210>
 8004dec:	231b      	movs	r3, #27
 8004dee:	2218      	movs	r2, #24
 8004df0:	189b      	adds	r3, r3, r2
 8004df2:	19db      	adds	r3, r3, r7
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
 8004df8:	e021      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004dfa:	231b      	movs	r3, #27
 8004dfc:	2218      	movs	r2, #24
 8004dfe:	189b      	adds	r3, r3, r2
 8004e00:	19db      	adds	r3, r3, r7
 8004e02:	2202      	movs	r2, #2
 8004e04:	701a      	strb	r2, [r3, #0]
 8004e06:	e01a      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004e08:	231b      	movs	r3, #27
 8004e0a:	2218      	movs	r2, #24
 8004e0c:	189b      	adds	r3, r3, r2
 8004e0e:	19db      	adds	r3, r3, r7
 8004e10:	2204      	movs	r2, #4
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	e013      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004e16:	231b      	movs	r3, #27
 8004e18:	2218      	movs	r2, #24
 8004e1a:	189b      	adds	r3, r3, r2
 8004e1c:	19db      	adds	r3, r3, r7
 8004e1e:	2208      	movs	r2, #8
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	e00c      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004e24:	231b      	movs	r3, #27
 8004e26:	2218      	movs	r2, #24
 8004e28:	189b      	adds	r3, r3, r2
 8004e2a:	19db      	adds	r3, r3, r7
 8004e2c:	2210      	movs	r2, #16
 8004e2e:	701a      	strb	r2, [r3, #0]
 8004e30:	e005      	b.n	8004e3e <UART_SetConfig+0x22a>
 8004e32:	231b      	movs	r3, #27
 8004e34:	2218      	movs	r2, #24
 8004e36:	189b      	adds	r3, r3, r2
 8004e38:	19db      	adds	r3, r3, r7
 8004e3a:	2210      	movs	r2, #16
 8004e3c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a46      	ldr	r2, [pc, #280]	@ (8004f5c <UART_SetConfig+0x348>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d000      	beq.n	8004e4a <UART_SetConfig+0x236>
 8004e48:	e09a      	b.n	8004f80 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e4a:	231b      	movs	r3, #27
 8004e4c:	2218      	movs	r2, #24
 8004e4e:	189b      	adds	r3, r3, r2
 8004e50:	19db      	adds	r3, r3, r7
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d01d      	beq.n	8004e94 <UART_SetConfig+0x280>
 8004e58:	dc20      	bgt.n	8004e9c <UART_SetConfig+0x288>
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d015      	beq.n	8004e8a <UART_SetConfig+0x276>
 8004e5e:	dc1d      	bgt.n	8004e9c <UART_SetConfig+0x288>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <UART_SetConfig+0x256>
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d005      	beq.n	8004e74 <UART_SetConfig+0x260>
 8004e68:	e018      	b.n	8004e9c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e6a:	f7ff f86b 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 8004e6e:	0003      	movs	r3, r0
 8004e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e72:	e01c      	b.n	8004eae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e74:	4b3c      	ldr	r3, [pc, #240]	@ (8004f68 <UART_SetConfig+0x354>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2210      	movs	r2, #16
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	d002      	beq.n	8004e84 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004e7e:	4b3e      	ldr	r3, [pc, #248]	@ (8004f78 <UART_SetConfig+0x364>)
 8004e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e82:	e014      	b.n	8004eae <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004e84:	4b3d      	ldr	r3, [pc, #244]	@ (8004f7c <UART_SetConfig+0x368>)
 8004e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e88:	e011      	b.n	8004eae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e8a:	f7fe ffcb 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8004e8e:	0003      	movs	r3, r0
 8004e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e92:	e00c      	b.n	8004eae <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e94:	2380      	movs	r3, #128	@ 0x80
 8004e96:	021b      	lsls	r3, r3, #8
 8004e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004e9a:	e008      	b.n	8004eae <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004ea0:	231a      	movs	r3, #26
 8004ea2:	2218      	movs	r2, #24
 8004ea4:	189b      	adds	r3, r3, r2
 8004ea6:	19db      	adds	r3, r3, r7
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	701a      	strb	r2, [r3, #0]
        break;
 8004eac:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d100      	bne.n	8004eb6 <UART_SetConfig+0x2a2>
 8004eb4:	e133      	b.n	800511e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	685a      	ldr	r2, [r3, #4]
 8004eba:	0013      	movs	r3, r2
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	189b      	adds	r3, r3, r2
 8004ec0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d305      	bcc.n	8004ed2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004ecc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d906      	bls.n	8004ee0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004ed2:	231a      	movs	r3, #26
 8004ed4:	2218      	movs	r2, #24
 8004ed6:	189b      	adds	r3, r3, r2
 8004ed8:	19db      	adds	r3, r3, r7
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]
 8004ede:	e11e      	b.n	800511e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	6939      	ldr	r1, [r7, #16]
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	000b      	movs	r3, r1
 8004eee:	0e1b      	lsrs	r3, r3, #24
 8004ef0:	0010      	movs	r0, r2
 8004ef2:	0205      	lsls	r5, r0, #8
 8004ef4:	431d      	orrs	r5, r3
 8004ef6:	000b      	movs	r3, r1
 8004ef8:	021c      	lsls	r4, r3, #8
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	68b8      	ldr	r0, [r7, #8]
 8004f08:	68f9      	ldr	r1, [r7, #12]
 8004f0a:	1900      	adds	r0, r0, r4
 8004f0c:	4169      	adcs	r1, r5
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	603b      	str	r3, [r7, #0]
 8004f14:	2300      	movs	r3, #0
 8004f16:	607b      	str	r3, [r7, #4]
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f7fb f992 	bl	8000244 <__aeabi_uldivmod>
 8004f20:	0002      	movs	r2, r0
 8004f22:	000b      	movs	r3, r1
 8004f24:	0013      	movs	r3, r2
 8004f26:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f2a:	23c0      	movs	r3, #192	@ 0xc0
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d309      	bcc.n	8004f46 <UART_SetConfig+0x332>
 8004f32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f34:	2380      	movs	r3, #128	@ 0x80
 8004f36:	035b      	lsls	r3, r3, #13
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d204      	bcs.n	8004f46 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f42:	60da      	str	r2, [r3, #12]
 8004f44:	e0eb      	b.n	800511e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004f46:	231a      	movs	r3, #26
 8004f48:	2218      	movs	r2, #24
 8004f4a:	189b      	adds	r3, r3, r2
 8004f4c:	19db      	adds	r3, r3, r7
 8004f4e:	2201      	movs	r2, #1
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	e0e4      	b.n	800511e <UART_SetConfig+0x50a>
 8004f54:	efff69f3 	.word	0xefff69f3
 8004f58:	ffffcfff 	.word	0xffffcfff
 8004f5c:	40004800 	.word	0x40004800
 8004f60:	fffff4ff 	.word	0xfffff4ff
 8004f64:	40013800 	.word	0x40013800
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	40004400 	.word	0x40004400
 8004f70:	40004c00 	.word	0x40004c00
 8004f74:	40005000 	.word	0x40005000
 8004f78:	003d0900 	.word	0x003d0900
 8004f7c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	2380      	movs	r3, #128	@ 0x80
 8004f86:	021b      	lsls	r3, r3, #8
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d000      	beq.n	8004f8e <UART_SetConfig+0x37a>
 8004f8c:	e070      	b.n	8005070 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004f8e:	231b      	movs	r3, #27
 8004f90:	2218      	movs	r2, #24
 8004f92:	189b      	adds	r3, r3, r2
 8004f94:	19db      	adds	r3, r3, r7
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d822      	bhi.n	8004fe2 <UART_SetConfig+0x3ce>
 8004f9c:	009a      	lsls	r2, r3, #2
 8004f9e:	4b67      	ldr	r3, [pc, #412]	@ (800513c <UART_SetConfig+0x528>)
 8004fa0:	18d3      	adds	r3, r2, r3
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa6:	f7fe ffcd 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 8004faa:	0003      	movs	r3, r0
 8004fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fae:	e021      	b.n	8004ff4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb0:	f7fe ffde 	bl	8003f70 <HAL_RCC_GetPCLK2Freq>
 8004fb4:	0003      	movs	r3, r0
 8004fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fb8:	e01c      	b.n	8004ff4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fba:	4b61      	ldr	r3, [pc, #388]	@ (8005140 <UART_SetConfig+0x52c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d002      	beq.n	8004fca <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004fc4:	4b5f      	ldr	r3, [pc, #380]	@ (8005144 <UART_SetConfig+0x530>)
 8004fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fc8:	e014      	b.n	8004ff4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004fca:	4b5f      	ldr	r3, [pc, #380]	@ (8005148 <UART_SetConfig+0x534>)
 8004fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fce:	e011      	b.n	8004ff4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fd0:	f7fe ff28 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 8004fd4:	0003      	movs	r3, r0
 8004fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fd8:	e00c      	b.n	8004ff4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fda:	2380      	movs	r3, #128	@ 0x80
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004fe0:	e008      	b.n	8004ff4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004fe6:	231a      	movs	r3, #26
 8004fe8:	2218      	movs	r2, #24
 8004fea:	189b      	adds	r3, r3, r2
 8004fec:	19db      	adds	r3, r3, r7
 8004fee:	2201      	movs	r2, #1
 8004ff0:	701a      	strb	r2, [r3, #0]
        break;
 8004ff2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d100      	bne.n	8004ffc <UART_SetConfig+0x3e8>
 8004ffa:	e090      	b.n	800511e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ffe:	005a      	lsls	r2, r3, #1
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	085b      	lsrs	r3, r3, #1
 8005006:	18d2      	adds	r2, r2, r3
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	0019      	movs	r1, r3
 800500e:	0010      	movs	r0, r2
 8005010:	f7fb f88c 	bl	800012c <__udivsi3>
 8005014:	0003      	movs	r3, r0
 8005016:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501a:	2b0f      	cmp	r3, #15
 800501c:	d921      	bls.n	8005062 <UART_SetConfig+0x44e>
 800501e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005020:	2380      	movs	r3, #128	@ 0x80
 8005022:	025b      	lsls	r3, r3, #9
 8005024:	429a      	cmp	r2, r3
 8005026:	d21c      	bcs.n	8005062 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800502a:	b29a      	uxth	r2, r3
 800502c:	200e      	movs	r0, #14
 800502e:	2418      	movs	r4, #24
 8005030:	1903      	adds	r3, r0, r4
 8005032:	19db      	adds	r3, r3, r7
 8005034:	210f      	movs	r1, #15
 8005036:	438a      	bics	r2, r1
 8005038:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800503a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503c:	085b      	lsrs	r3, r3, #1
 800503e:	b29b      	uxth	r3, r3
 8005040:	2207      	movs	r2, #7
 8005042:	4013      	ands	r3, r2
 8005044:	b299      	uxth	r1, r3
 8005046:	1903      	adds	r3, r0, r4
 8005048:	19db      	adds	r3, r3, r7
 800504a:	1902      	adds	r2, r0, r4
 800504c:	19d2      	adds	r2, r2, r7
 800504e:	8812      	ldrh	r2, [r2, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	1902      	adds	r2, r0, r4
 800505a:	19d2      	adds	r2, r2, r7
 800505c:	8812      	ldrh	r2, [r2, #0]
 800505e:	60da      	str	r2, [r3, #12]
 8005060:	e05d      	b.n	800511e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005062:	231a      	movs	r3, #26
 8005064:	2218      	movs	r2, #24
 8005066:	189b      	adds	r3, r3, r2
 8005068:	19db      	adds	r3, r3, r7
 800506a:	2201      	movs	r2, #1
 800506c:	701a      	strb	r2, [r3, #0]
 800506e:	e056      	b.n	800511e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005070:	231b      	movs	r3, #27
 8005072:	2218      	movs	r2, #24
 8005074:	189b      	adds	r3, r3, r2
 8005076:	19db      	adds	r3, r3, r7
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b08      	cmp	r3, #8
 800507c:	d822      	bhi.n	80050c4 <UART_SetConfig+0x4b0>
 800507e:	009a      	lsls	r2, r3, #2
 8005080:	4b32      	ldr	r3, [pc, #200]	@ (800514c <UART_SetConfig+0x538>)
 8005082:	18d3      	adds	r3, r2, r3
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005088:	f7fe ff5c 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 800508c:	0003      	movs	r3, r0
 800508e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005090:	e021      	b.n	80050d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005092:	f7fe ff6d 	bl	8003f70 <HAL_RCC_GetPCLK2Freq>
 8005096:	0003      	movs	r3, r0
 8005098:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800509a:	e01c      	b.n	80050d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800509c:	4b28      	ldr	r3, [pc, #160]	@ (8005140 <UART_SetConfig+0x52c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2210      	movs	r2, #16
 80050a2:	4013      	ands	r3, r2
 80050a4:	d002      	beq.n	80050ac <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80050a6:	4b27      	ldr	r3, [pc, #156]	@ (8005144 <UART_SetConfig+0x530>)
 80050a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050aa:	e014      	b.n	80050d6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80050ac:	4b26      	ldr	r3, [pc, #152]	@ (8005148 <UART_SetConfig+0x534>)
 80050ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80050b0:	e011      	b.n	80050d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050b2:	f7fe feb7 	bl	8003e24 <HAL_RCC_GetSysClockFreq>
 80050b6:	0003      	movs	r3, r0
 80050b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80050ba:	e00c      	b.n	80050d6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050bc:	2380      	movs	r3, #128	@ 0x80
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80050c2:	e008      	b.n	80050d6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80050c4:	2300      	movs	r3, #0
 80050c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80050c8:	231a      	movs	r3, #26
 80050ca:	2218      	movs	r2, #24
 80050cc:	189b      	adds	r3, r3, r2
 80050ce:	19db      	adds	r3, r3, r7
 80050d0:	2201      	movs	r2, #1
 80050d2:	701a      	strb	r2, [r3, #0]
        break;
 80050d4:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80050d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d020      	beq.n	800511e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	085a      	lsrs	r2, r3, #1
 80050e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e4:	18d2      	adds	r2, r2, r3
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	0019      	movs	r1, r3
 80050ec:	0010      	movs	r0, r2
 80050ee:	f7fb f81d 	bl	800012c <__udivsi3>
 80050f2:	0003      	movs	r3, r0
 80050f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f8:	2b0f      	cmp	r3, #15
 80050fa:	d90a      	bls.n	8005112 <UART_SetConfig+0x4fe>
 80050fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80050fe:	2380      	movs	r3, #128	@ 0x80
 8005100:	025b      	lsls	r3, r3, #9
 8005102:	429a      	cmp	r2, r3
 8005104:	d205      	bcs.n	8005112 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005108:	b29a      	uxth	r2, r3
 800510a:	69fb      	ldr	r3, [r7, #28]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60da      	str	r2, [r3, #12]
 8005110:	e005      	b.n	800511e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005112:	231a      	movs	r3, #26
 8005114:	2218      	movs	r2, #24
 8005116:	189b      	adds	r3, r3, r2
 8005118:	19db      	adds	r3, r3, r7
 800511a:	2201      	movs	r2, #1
 800511c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	2200      	movs	r2, #0
 8005122:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	2200      	movs	r2, #0
 8005128:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800512a:	231a      	movs	r3, #26
 800512c:	2218      	movs	r2, #24
 800512e:	189b      	adds	r3, r3, r2
 8005130:	19db      	adds	r3, r3, r7
 8005132:	781b      	ldrb	r3, [r3, #0]
}
 8005134:	0018      	movs	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	b00e      	add	sp, #56	@ 0x38
 800513a:	bdb0      	pop	{r4, r5, r7, pc}
 800513c:	080067a4 	.word	0x080067a4
 8005140:	40021000 	.word	0x40021000
 8005144:	003d0900 	.word	0x003d0900
 8005148:	00f42400 	.word	0x00f42400
 800514c:	080067c8 	.word	0x080067c8

08005150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515c:	2208      	movs	r2, #8
 800515e:	4013      	ands	r3, r2
 8005160:	d00b      	beq.n	800517a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	4a4a      	ldr	r2, [pc, #296]	@ (8005294 <UART_AdvFeatureConfig+0x144>)
 800516a:	4013      	ands	r3, r2
 800516c:	0019      	movs	r1, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517e:	2201      	movs	r2, #1
 8005180:	4013      	ands	r3, r2
 8005182:	d00b      	beq.n	800519c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	4a43      	ldr	r2, [pc, #268]	@ (8005298 <UART_AdvFeatureConfig+0x148>)
 800518c:	4013      	ands	r3, r2
 800518e:	0019      	movs	r1, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a0:	2202      	movs	r2, #2
 80051a2:	4013      	ands	r3, r2
 80051a4:	d00b      	beq.n	80051be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	4a3b      	ldr	r2, [pc, #236]	@ (800529c <UART_AdvFeatureConfig+0x14c>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	0019      	movs	r1, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	2204      	movs	r2, #4
 80051c4:	4013      	ands	r3, r2
 80051c6:	d00b      	beq.n	80051e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	4a34      	ldr	r2, [pc, #208]	@ (80052a0 <UART_AdvFeatureConfig+0x150>)
 80051d0:	4013      	ands	r3, r2
 80051d2:	0019      	movs	r1, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e4:	2210      	movs	r2, #16
 80051e6:	4013      	ands	r3, r2
 80051e8:	d00b      	beq.n	8005202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	4a2c      	ldr	r2, [pc, #176]	@ (80052a4 <UART_AdvFeatureConfig+0x154>)
 80051f2:	4013      	ands	r3, r2
 80051f4:	0019      	movs	r1, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	2220      	movs	r2, #32
 8005208:	4013      	ands	r3, r2
 800520a:	d00b      	beq.n	8005224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	4a25      	ldr	r2, [pc, #148]	@ (80052a8 <UART_AdvFeatureConfig+0x158>)
 8005214:	4013      	ands	r3, r2
 8005216:	0019      	movs	r1, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005228:	2240      	movs	r2, #64	@ 0x40
 800522a:	4013      	ands	r3, r2
 800522c:	d01d      	beq.n	800526a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	4a1d      	ldr	r2, [pc, #116]	@ (80052ac <UART_AdvFeatureConfig+0x15c>)
 8005236:	4013      	ands	r3, r2
 8005238:	0019      	movs	r1, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800524a:	2380      	movs	r3, #128	@ 0x80
 800524c:	035b      	lsls	r3, r3, #13
 800524e:	429a      	cmp	r2, r3
 8005250:	d10b      	bne.n	800526a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	4a15      	ldr	r2, [pc, #84]	@ (80052b0 <UART_AdvFeatureConfig+0x160>)
 800525a:	4013      	ands	r3, r2
 800525c:	0019      	movs	r1, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526e:	2280      	movs	r2, #128	@ 0x80
 8005270:	4013      	ands	r3, r2
 8005272:	d00b      	beq.n	800528c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	4a0e      	ldr	r2, [pc, #56]	@ (80052b4 <UART_AdvFeatureConfig+0x164>)
 800527c:	4013      	ands	r3, r2
 800527e:	0019      	movs	r1, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	605a      	str	r2, [r3, #4]
  }
}
 800528c:	46c0      	nop			@ (mov r8, r8)
 800528e:	46bd      	mov	sp, r7
 8005290:	b002      	add	sp, #8
 8005292:	bd80      	pop	{r7, pc}
 8005294:	ffff7fff 	.word	0xffff7fff
 8005298:	fffdffff 	.word	0xfffdffff
 800529c:	fffeffff 	.word	0xfffeffff
 80052a0:	fffbffff 	.word	0xfffbffff
 80052a4:	ffffefff 	.word	0xffffefff
 80052a8:	ffffdfff 	.word	0xffffdfff
 80052ac:	ffefffff 	.word	0xffefffff
 80052b0:	ff9fffff 	.word	0xff9fffff
 80052b4:	fff7ffff 	.word	0xfff7ffff

080052b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b092      	sub	sp, #72	@ 0x48
 80052bc:	af02      	add	r7, sp, #8
 80052be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2284      	movs	r2, #132	@ 0x84
 80052c4:	2100      	movs	r1, #0
 80052c6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052c8:	f7fc fe1a 	bl	8001f00 <HAL_GetTick>
 80052cc:	0003      	movs	r3, r0
 80052ce:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2208      	movs	r2, #8
 80052d8:	4013      	ands	r3, r2
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d12c      	bne.n	8005338 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052e0:	2280      	movs	r2, #128	@ 0x80
 80052e2:	0391      	lsls	r1, r2, #14
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	4a46      	ldr	r2, [pc, #280]	@ (8005400 <UART_CheckIdleState+0x148>)
 80052e8:	9200      	str	r2, [sp, #0]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f000 f88c 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 80052f0:	1e03      	subs	r3, r0, #0
 80052f2:	d021      	beq.n	8005338 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f4:	f3ef 8310 	mrs	r3, PRIMASK
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80052fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80052fe:	2301      	movs	r3, #1
 8005300:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005304:	f383 8810 	msr	PRIMASK, r3
}
 8005308:	46c0      	nop			@ (mov r8, r8)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2180      	movs	r1, #128	@ 0x80
 8005316:	438a      	bics	r2, r1
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005320:	f383 8810 	msr	PRIMASK, r3
}
 8005324:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2278      	movs	r2, #120	@ 0x78
 8005330:	2100      	movs	r1, #0
 8005332:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e05f      	b.n	80053f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2204      	movs	r2, #4
 8005340:	4013      	ands	r3, r2
 8005342:	2b04      	cmp	r3, #4
 8005344:	d146      	bne.n	80053d4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005348:	2280      	movs	r2, #128	@ 0x80
 800534a:	03d1      	lsls	r1, r2, #15
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	4a2c      	ldr	r2, [pc, #176]	@ (8005400 <UART_CheckIdleState+0x148>)
 8005350:	9200      	str	r2, [sp, #0]
 8005352:	2200      	movs	r2, #0
 8005354:	f000 f858 	bl	8005408 <UART_WaitOnFlagUntilTimeout>
 8005358:	1e03      	subs	r3, r0, #0
 800535a:	d03b      	beq.n	80053d4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800535c:	f3ef 8310 	mrs	r3, PRIMASK
 8005360:	60fb      	str	r3, [r7, #12]
  return(result);
 8005362:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005364:	637b      	str	r3, [r7, #52]	@ 0x34
 8005366:	2301      	movs	r3, #1
 8005368:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f383 8810 	msr	PRIMASK, r3
}
 8005370:	46c0      	nop			@ (mov r8, r8)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4921      	ldr	r1, [pc, #132]	@ (8005404 <UART_CheckIdleState+0x14c>)
 800537e:	400a      	ands	r2, r1
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005384:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f383 8810 	msr	PRIMASK, r3
}
 800538c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800538e:	f3ef 8310 	mrs	r3, PRIMASK
 8005392:	61bb      	str	r3, [r7, #24]
  return(result);
 8005394:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005396:	633b      	str	r3, [r7, #48]	@ 0x30
 8005398:	2301      	movs	r3, #1
 800539a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	f383 8810 	msr	PRIMASK, r3
}
 80053a2:	46c0      	nop			@ (mov r8, r8)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2101      	movs	r1, #1
 80053b0:	438a      	bics	r2, r1
 80053b2:	609a      	str	r2, [r3, #8]
 80053b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	f383 8810 	msr	PRIMASK, r3
}
 80053be:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2280      	movs	r2, #128	@ 0x80
 80053c4:	2120      	movs	r1, #32
 80053c6:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2278      	movs	r2, #120	@ 0x78
 80053cc:	2100      	movs	r1, #0
 80053ce:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e011      	b.n	80053f8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2220      	movs	r2, #32
 80053d8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2280      	movs	r2, #128	@ 0x80
 80053de:	2120      	movs	r1, #32
 80053e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2278      	movs	r2, #120	@ 0x78
 80053f2:	2100      	movs	r1, #0
 80053f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	0018      	movs	r0, r3
 80053fa:	46bd      	mov	sp, r7
 80053fc:	b010      	add	sp, #64	@ 0x40
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	01ffffff 	.word	0x01ffffff
 8005404:	fffffedf 	.word	0xfffffedf

08005408 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	1dfb      	adds	r3, r7, #7
 8005416:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005418:	e051      	b.n	80054be <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	3301      	adds	r3, #1
 800541e:	d04e      	beq.n	80054be <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005420:	f7fc fd6e 	bl	8001f00 <HAL_GetTick>
 8005424:	0002      	movs	r2, r0
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	429a      	cmp	r2, r3
 800542e:	d302      	bcc.n	8005436 <UART_WaitOnFlagUntilTimeout+0x2e>
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e051      	b.n	80054de <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2204      	movs	r2, #4
 8005442:	4013      	ands	r3, r2
 8005444:	d03b      	beq.n	80054be <UART_WaitOnFlagUntilTimeout+0xb6>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	2b80      	cmp	r3, #128	@ 0x80
 800544a:	d038      	beq.n	80054be <UART_WaitOnFlagUntilTimeout+0xb6>
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	2b40      	cmp	r3, #64	@ 0x40
 8005450:	d035      	beq.n	80054be <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69db      	ldr	r3, [r3, #28]
 8005458:	2208      	movs	r2, #8
 800545a:	4013      	ands	r3, r2
 800545c:	2b08      	cmp	r3, #8
 800545e:	d111      	bne.n	8005484 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2208      	movs	r2, #8
 8005466:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	0018      	movs	r0, r3
 800546c:	f000 f83c 	bl	80054e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2284      	movs	r2, #132	@ 0x84
 8005474:	2108      	movs	r1, #8
 8005476:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2278      	movs	r2, #120	@ 0x78
 800547c:	2100      	movs	r1, #0
 800547e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e02c      	b.n	80054de <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	69da      	ldr	r2, [r3, #28]
 800548a:	2380      	movs	r3, #128	@ 0x80
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	401a      	ands	r2, r3
 8005490:	2380      	movs	r3, #128	@ 0x80
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	429a      	cmp	r2, r3
 8005496:	d112      	bne.n	80054be <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2280      	movs	r2, #128	@ 0x80
 800549e:	0112      	lsls	r2, r2, #4
 80054a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	0018      	movs	r0, r3
 80054a6:	f000 f81f 	bl	80054e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2284      	movs	r2, #132	@ 0x84
 80054ae:	2120      	movs	r1, #32
 80054b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2278      	movs	r2, #120	@ 0x78
 80054b6:	2100      	movs	r1, #0
 80054b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e00f      	b.n	80054de <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	4013      	ands	r3, r2
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	425a      	negs	r2, r3
 80054ce:	4153      	adcs	r3, r2
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	001a      	movs	r2, r3
 80054d4:	1dfb      	adds	r3, r7, #7
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d09e      	beq.n	800541a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	b004      	add	sp, #16
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08e      	sub	sp, #56	@ 0x38
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f0:	f3ef 8310 	mrs	r3, PRIMASK
 80054f4:	617b      	str	r3, [r7, #20]
  return(result);
 80054f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80054fa:	2301      	movs	r3, #1
 80054fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	f383 8810 	msr	PRIMASK, r3
}
 8005504:	46c0      	nop			@ (mov r8, r8)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4926      	ldr	r1, [pc, #152]	@ (80055ac <UART_EndRxTransfer+0xc4>)
 8005512:	400a      	ands	r2, r1
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005518:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f383 8810 	msr	PRIMASK, r3
}
 8005520:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005522:	f3ef 8310 	mrs	r3, PRIMASK
 8005526:	623b      	str	r3, [r7, #32]
  return(result);
 8005528:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800552a:	633b      	str	r3, [r7, #48]	@ 0x30
 800552c:	2301      	movs	r3, #1
 800552e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	f383 8810 	msr	PRIMASK, r3
}
 8005536:	46c0      	nop			@ (mov r8, r8)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2101      	movs	r1, #1
 8005544:	438a      	bics	r2, r1
 8005546:	609a      	str	r2, [r3, #8]
 8005548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800554a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554e:	f383 8810 	msr	PRIMASK, r3
}
 8005552:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005558:	2b01      	cmp	r3, #1
 800555a:	d118      	bne.n	800558e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800555c:	f3ef 8310 	mrs	r3, PRIMASK
 8005560:	60bb      	str	r3, [r7, #8]
  return(result);
 8005562:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005564:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005566:	2301      	movs	r3, #1
 8005568:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f383 8810 	msr	PRIMASK, r3
}
 8005570:	46c0      	nop			@ (mov r8, r8)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2110      	movs	r1, #16
 800557e:	438a      	bics	r2, r1
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005584:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f383 8810 	msr	PRIMASK, r3
}
 800558c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2280      	movs	r2, #128	@ 0x80
 8005592:	2120      	movs	r1, #32
 8005594:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80055a2:	46c0      	nop			@ (mov r8, r8)
 80055a4:	46bd      	mov	sp, r7
 80055a6:	b00e      	add	sp, #56	@ 0x38
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	46c0      	nop			@ (mov r8, r8)
 80055ac:	fffffedf 	.word	0xfffffedf

080055b0 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b088      	sub	sp, #32
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	1dbb      	adds	r3, r7, #6
 80055be:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2280      	movs	r2, #128	@ 0x80
 80055c4:	589b      	ldr	r3, [r3, r2]
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	d000      	beq.n	80055cc <HAL_UARTEx_ReceiveToIdle+0x1c>
 80055ca:	e109      	b.n	80057e0 <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_UARTEx_ReceiveToIdle+0x2a>
 80055d2:	1dbb      	adds	r3, r7, #6
 80055d4:	881b      	ldrh	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e101      	b.n	80057e2 <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	2380      	movs	r3, #128	@ 0x80
 80055e4:	015b      	lsls	r3, r3, #5
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d109      	bne.n	80055fe <HAL_UARTEx_ReceiveToIdle+0x4e>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d105      	bne.n	80055fe <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	2201      	movs	r2, #1
 80055f6:	4013      	ands	r3, r2
 80055f8:	d001      	beq.n	80055fe <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e0f1      	b.n	80057e2 <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2284      	movs	r2, #132	@ 0x84
 8005602:	2100      	movs	r1, #0
 8005604:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2280      	movs	r2, #128	@ 0x80
 800560a:	2122      	movs	r1, #34	@ 0x22
 800560c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2201      	movs	r2, #1
 8005612:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800561a:	f7fc fc71 	bl	8001f00 <HAL_GetTick>
 800561e:	0003      	movs	r3, r0
 8005620:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	1dba      	adds	r2, r7, #6
 8005626:	2158      	movs	r1, #88	@ 0x58
 8005628:	8812      	ldrh	r2, [r2, #0]
 800562a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	1dba      	adds	r2, r7, #6
 8005630:	215a      	movs	r1, #90	@ 0x5a
 8005632:	8812      	ldrh	r2, [r2, #0]
 8005634:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	689a      	ldr	r2, [r3, #8]
 800563a:	2380      	movs	r3, #128	@ 0x80
 800563c:	015b      	lsls	r3, r3, #5
 800563e:	429a      	cmp	r2, r3
 8005640:	d10d      	bne.n	800565e <HAL_UARTEx_ReceiveToIdle+0xae>
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	691b      	ldr	r3, [r3, #16]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d104      	bne.n	8005654 <HAL_UARTEx_ReceiveToIdle+0xa4>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	225c      	movs	r2, #92	@ 0x5c
 800564e:	4967      	ldr	r1, [pc, #412]	@ (80057ec <HAL_UARTEx_ReceiveToIdle+0x23c>)
 8005650:	5299      	strh	r1, [r3, r2]
 8005652:	e02e      	b.n	80056b2 <HAL_UARTEx_ReceiveToIdle+0x102>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	225c      	movs	r2, #92	@ 0x5c
 8005658:	21ff      	movs	r1, #255	@ 0xff
 800565a:	5299      	strh	r1, [r3, r2]
 800565c:	e029      	b.n	80056b2 <HAL_UARTEx_ReceiveToIdle+0x102>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10d      	bne.n	8005682 <HAL_UARTEx_ReceiveToIdle+0xd2>
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d104      	bne.n	8005678 <HAL_UARTEx_ReceiveToIdle+0xc8>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	225c      	movs	r2, #92	@ 0x5c
 8005672:	21ff      	movs	r1, #255	@ 0xff
 8005674:	5299      	strh	r1, [r3, r2]
 8005676:	e01c      	b.n	80056b2 <HAL_UARTEx_ReceiveToIdle+0x102>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	225c      	movs	r2, #92	@ 0x5c
 800567c:	217f      	movs	r1, #127	@ 0x7f
 800567e:	5299      	strh	r1, [r3, r2]
 8005680:	e017      	b.n	80056b2 <HAL_UARTEx_ReceiveToIdle+0x102>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	2380      	movs	r3, #128	@ 0x80
 8005688:	055b      	lsls	r3, r3, #21
 800568a:	429a      	cmp	r2, r3
 800568c:	d10d      	bne.n	80056aa <HAL_UARTEx_ReceiveToIdle+0xfa>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d104      	bne.n	80056a0 <HAL_UARTEx_ReceiveToIdle+0xf0>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	225c      	movs	r2, #92	@ 0x5c
 800569a:	217f      	movs	r1, #127	@ 0x7f
 800569c:	5299      	strh	r1, [r3, r2]
 800569e:	e008      	b.n	80056b2 <HAL_UARTEx_ReceiveToIdle+0x102>
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	225c      	movs	r2, #92	@ 0x5c
 80056a4:	213f      	movs	r1, #63	@ 0x3f
 80056a6:	5299      	strh	r1, [r3, r2]
 80056a8:	e003      	b.n	80056b2 <HAL_UARTEx_ReceiveToIdle+0x102>
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	225c      	movs	r2, #92	@ 0x5c
 80056ae:	2100      	movs	r1, #0
 80056b0:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80056b2:	2312      	movs	r3, #18
 80056b4:	18fb      	adds	r3, r7, r3
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	215c      	movs	r1, #92	@ 0x5c
 80056ba:	5a52      	ldrh	r2, [r2, r1]
 80056bc:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689a      	ldr	r2, [r3, #8]
 80056c2:	2380      	movs	r3, #128	@ 0x80
 80056c4:	015b      	lsls	r3, r3, #5
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d108      	bne.n	80056dc <HAL_UARTEx_ReceiveToIdle+0x12c>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d104      	bne.n	80056dc <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	e003      	b.n	80056e4 <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	2200      	movs	r2, #0
 80056e8:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80056ea:	e062      	b.n	80057b2 <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	2210      	movs	r2, #16
 80056f4:	4013      	ands	r3, r2
 80056f6:	2b10      	cmp	r3, #16
 80056f8:	d110      	bne.n	800571c <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2210      	movs	r2, #16
 8005700:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d008      	beq.n	800571c <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2202      	movs	r2, #2
 800570e:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2280      	movs	r2, #128	@ 0x80
 8005714:	2120      	movs	r1, #32
 8005716:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	e062      	b.n	80057e2 <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	2220      	movs	r2, #32
 8005724:	4013      	ands	r3, r2
 8005726:	2b20      	cmp	r3, #32
 8005728:	d12f      	bne.n	800578a <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d10e      	bne.n	800574e <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	b29b      	uxth	r3, r3
 8005738:	2212      	movs	r2, #18
 800573a:	18ba      	adds	r2, r7, r2
 800573c:	8812      	ldrh	r2, [r2, #0]
 800573e:	4013      	ands	r3, r2
 8005740:	b29a      	uxth	r2, r3
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	3302      	adds	r3, #2
 800574a:	61bb      	str	r3, [r7, #24]
 800574c:	e00e      	b.n	800576c <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2212      	movs	r2, #18
 8005758:	18ba      	adds	r2, r7, r2
 800575a:	8812      	ldrh	r2, [r2, #0]
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	4013      	ands	r3, r2
 8005760:	b2da      	uxtb	r2, r3
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	3301      	adds	r3, #1
 800576a:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	881b      	ldrh	r3, [r3, #0]
 8005770:	3301      	adds	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	225a      	movs	r2, #90	@ 0x5a
 800577c:	5a9b      	ldrh	r3, [r3, r2]
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b299      	uxth	r1, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	225a      	movs	r2, #90	@ 0x5a
 8005788:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800578a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800578c:	3301      	adds	r3, #1
 800578e:	d010      	beq.n	80057b2 <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005790:	f7fc fbb6 	bl	8001f00 <HAL_GetTick>
 8005794:	0002      	movs	r2, r0
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800579c:	429a      	cmp	r2, r3
 800579e:	d302      	bcc.n	80057a6 <HAL_UARTEx_ReceiveToIdle+0x1f6>
 80057a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d105      	bne.n	80057b2 <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2280      	movs	r2, #128	@ 0x80
 80057aa:	2120      	movs	r1, #32
 80057ac:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e017      	b.n	80057e2 <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	225a      	movs	r2, #90	@ 0x5a
 80057b6:	5a9b      	ldrh	r3, [r3, r2]
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d196      	bne.n	80056ec <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2258      	movs	r2, #88	@ 0x58
 80057c2:	5a9a      	ldrh	r2, [r3, r2]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	215a      	movs	r1, #90	@ 0x5a
 80057c8:	5a5b      	ldrh	r3, [r3, r1]
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2280      	movs	r2, #128	@ 0x80
 80057d8:	2120      	movs	r1, #32
 80057da:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	e000      	b.n	80057e2 <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 80057e0:	2302      	movs	r3, #2
  }
}
 80057e2:	0018      	movs	r0, r3
 80057e4:	46bd      	mov	sp, r7
 80057e6:	b008      	add	sp, #32
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	000001ff 	.word	0x000001ff

080057f0 <sniprintf>:
 80057f0:	b40c      	push	{r2, r3}
 80057f2:	b530      	push	{r4, r5, lr}
 80057f4:	4b18      	ldr	r3, [pc, #96]	@ (8005858 <sniprintf+0x68>)
 80057f6:	000c      	movs	r4, r1
 80057f8:	681d      	ldr	r5, [r3, #0]
 80057fa:	b09d      	sub	sp, #116	@ 0x74
 80057fc:	2900      	cmp	r1, #0
 80057fe:	da08      	bge.n	8005812 <sniprintf+0x22>
 8005800:	238b      	movs	r3, #139	@ 0x8b
 8005802:	2001      	movs	r0, #1
 8005804:	602b      	str	r3, [r5, #0]
 8005806:	4240      	negs	r0, r0
 8005808:	b01d      	add	sp, #116	@ 0x74
 800580a:	bc30      	pop	{r4, r5}
 800580c:	bc08      	pop	{r3}
 800580e:	b002      	add	sp, #8
 8005810:	4718      	bx	r3
 8005812:	2382      	movs	r3, #130	@ 0x82
 8005814:	466a      	mov	r2, sp
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	8293      	strh	r3, [r2, #20]
 800581a:	2300      	movs	r3, #0
 800581c:	9002      	str	r0, [sp, #8]
 800581e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005820:	9006      	str	r0, [sp, #24]
 8005822:	4299      	cmp	r1, r3
 8005824:	d000      	beq.n	8005828 <sniprintf+0x38>
 8005826:	1e4b      	subs	r3, r1, #1
 8005828:	9304      	str	r3, [sp, #16]
 800582a:	9307      	str	r3, [sp, #28]
 800582c:	2301      	movs	r3, #1
 800582e:	466a      	mov	r2, sp
 8005830:	425b      	negs	r3, r3
 8005832:	82d3      	strh	r3, [r2, #22]
 8005834:	0028      	movs	r0, r5
 8005836:	ab21      	add	r3, sp, #132	@ 0x84
 8005838:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800583a:	a902      	add	r1, sp, #8
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	f000 f9ed 	bl	8005c1c <_svfiprintf_r>
 8005842:	1c43      	adds	r3, r0, #1
 8005844:	da01      	bge.n	800584a <sniprintf+0x5a>
 8005846:	238b      	movs	r3, #139	@ 0x8b
 8005848:	602b      	str	r3, [r5, #0]
 800584a:	2c00      	cmp	r4, #0
 800584c:	d0dc      	beq.n	8005808 <sniprintf+0x18>
 800584e:	2200      	movs	r2, #0
 8005850:	9b02      	ldr	r3, [sp, #8]
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	e7d8      	b.n	8005808 <sniprintf+0x18>
 8005856:	46c0      	nop			@ (mov r8, r8)
 8005858:	2000000c 	.word	0x2000000c

0800585c <_vsniprintf_r>:
 800585c:	b530      	push	{r4, r5, lr}
 800585e:	0005      	movs	r5, r0
 8005860:	0014      	movs	r4, r2
 8005862:	0008      	movs	r0, r1
 8005864:	001a      	movs	r2, r3
 8005866:	b09b      	sub	sp, #108	@ 0x6c
 8005868:	2c00      	cmp	r4, #0
 800586a:	da05      	bge.n	8005878 <_vsniprintf_r+0x1c>
 800586c:	238b      	movs	r3, #139	@ 0x8b
 800586e:	2001      	movs	r0, #1
 8005870:	602b      	str	r3, [r5, #0]
 8005872:	4240      	negs	r0, r0
 8005874:	b01b      	add	sp, #108	@ 0x6c
 8005876:	bd30      	pop	{r4, r5, pc}
 8005878:	2382      	movs	r3, #130	@ 0x82
 800587a:	4669      	mov	r1, sp
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	818b      	strh	r3, [r1, #12]
 8005880:	2100      	movs	r1, #0
 8005882:	9000      	str	r0, [sp, #0]
 8005884:	9119      	str	r1, [sp, #100]	@ 0x64
 8005886:	9004      	str	r0, [sp, #16]
 8005888:	428c      	cmp	r4, r1
 800588a:	d000      	beq.n	800588e <_vsniprintf_r+0x32>
 800588c:	1e61      	subs	r1, r4, #1
 800588e:	2301      	movs	r3, #1
 8005890:	9102      	str	r1, [sp, #8]
 8005892:	9105      	str	r1, [sp, #20]
 8005894:	4669      	mov	r1, sp
 8005896:	425b      	negs	r3, r3
 8005898:	81cb      	strh	r3, [r1, #14]
 800589a:	0028      	movs	r0, r5
 800589c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800589e:	f000 f9bd 	bl	8005c1c <_svfiprintf_r>
 80058a2:	1c43      	adds	r3, r0, #1
 80058a4:	da01      	bge.n	80058aa <_vsniprintf_r+0x4e>
 80058a6:	238b      	movs	r3, #139	@ 0x8b
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	2c00      	cmp	r4, #0
 80058ac:	d0e2      	beq.n	8005874 <_vsniprintf_r+0x18>
 80058ae:	2200      	movs	r2, #0
 80058b0:	9b00      	ldr	r3, [sp, #0]
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	e7de      	b.n	8005874 <_vsniprintf_r+0x18>
	...

080058b8 <vsniprintf>:
 80058b8:	b513      	push	{r0, r1, r4, lr}
 80058ba:	4c04      	ldr	r4, [pc, #16]	@ (80058cc <vsniprintf+0x14>)
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	0013      	movs	r3, r2
 80058c0:	000a      	movs	r2, r1
 80058c2:	0001      	movs	r1, r0
 80058c4:	6820      	ldr	r0, [r4, #0]
 80058c6:	f7ff ffc9 	bl	800585c <_vsniprintf_r>
 80058ca:	bd16      	pop	{r1, r2, r4, pc}
 80058cc:	2000000c 	.word	0x2000000c

080058d0 <memset>:
 80058d0:	0003      	movs	r3, r0
 80058d2:	1882      	adds	r2, r0, r2
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d100      	bne.n	80058da <memset+0xa>
 80058d8:	4770      	bx	lr
 80058da:	7019      	strb	r1, [r3, #0]
 80058dc:	3301      	adds	r3, #1
 80058de:	e7f9      	b.n	80058d4 <memset+0x4>

080058e0 <strstr>:
 80058e0:	780a      	ldrb	r2, [r1, #0]
 80058e2:	b530      	push	{r4, r5, lr}
 80058e4:	2a00      	cmp	r2, #0
 80058e6:	d10c      	bne.n	8005902 <strstr+0x22>
 80058e8:	bd30      	pop	{r4, r5, pc}
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d108      	bne.n	8005900 <strstr+0x20>
 80058ee:	2301      	movs	r3, #1
 80058f0:	5ccc      	ldrb	r4, [r1, r3]
 80058f2:	2c00      	cmp	r4, #0
 80058f4:	d0f8      	beq.n	80058e8 <strstr+0x8>
 80058f6:	5cc5      	ldrb	r5, [r0, r3]
 80058f8:	42a5      	cmp	r5, r4
 80058fa:	d101      	bne.n	8005900 <strstr+0x20>
 80058fc:	3301      	adds	r3, #1
 80058fe:	e7f7      	b.n	80058f0 <strstr+0x10>
 8005900:	3001      	adds	r0, #1
 8005902:	7803      	ldrb	r3, [r0, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d1f0      	bne.n	80058ea <strstr+0xa>
 8005908:	0018      	movs	r0, r3
 800590a:	e7ed      	b.n	80058e8 <strstr+0x8>

0800590c <__errno>:
 800590c:	4b01      	ldr	r3, [pc, #4]	@ (8005914 <__errno+0x8>)
 800590e:	6818      	ldr	r0, [r3, #0]
 8005910:	4770      	bx	lr
 8005912:	46c0      	nop			@ (mov r8, r8)
 8005914:	2000000c 	.word	0x2000000c

08005918 <__libc_init_array>:
 8005918:	b570      	push	{r4, r5, r6, lr}
 800591a:	2600      	movs	r6, #0
 800591c:	4c0c      	ldr	r4, [pc, #48]	@ (8005950 <__libc_init_array+0x38>)
 800591e:	4d0d      	ldr	r5, [pc, #52]	@ (8005954 <__libc_init_array+0x3c>)
 8005920:	1b64      	subs	r4, r4, r5
 8005922:	10a4      	asrs	r4, r4, #2
 8005924:	42a6      	cmp	r6, r4
 8005926:	d109      	bne.n	800593c <__libc_init_array+0x24>
 8005928:	2600      	movs	r6, #0
 800592a:	f000 fc61 	bl	80061f0 <_init>
 800592e:	4c0a      	ldr	r4, [pc, #40]	@ (8005958 <__libc_init_array+0x40>)
 8005930:	4d0a      	ldr	r5, [pc, #40]	@ (800595c <__libc_init_array+0x44>)
 8005932:	1b64      	subs	r4, r4, r5
 8005934:	10a4      	asrs	r4, r4, #2
 8005936:	42a6      	cmp	r6, r4
 8005938:	d105      	bne.n	8005946 <__libc_init_array+0x2e>
 800593a:	bd70      	pop	{r4, r5, r6, pc}
 800593c:	00b3      	lsls	r3, r6, #2
 800593e:	58eb      	ldr	r3, [r5, r3]
 8005940:	4798      	blx	r3
 8005942:	3601      	adds	r6, #1
 8005944:	e7ee      	b.n	8005924 <__libc_init_array+0xc>
 8005946:	00b3      	lsls	r3, r6, #2
 8005948:	58eb      	ldr	r3, [r5, r3]
 800594a:	4798      	blx	r3
 800594c:	3601      	adds	r6, #1
 800594e:	e7f2      	b.n	8005936 <__libc_init_array+0x1e>
 8005950:	08006828 	.word	0x08006828
 8005954:	08006828 	.word	0x08006828
 8005958:	0800682c 	.word	0x0800682c
 800595c:	08006828 	.word	0x08006828

08005960 <__retarget_lock_acquire_recursive>:
 8005960:	4770      	bx	lr

08005962 <__retarget_lock_release_recursive>:
 8005962:	4770      	bx	lr

08005964 <_free_r>:
 8005964:	b570      	push	{r4, r5, r6, lr}
 8005966:	0005      	movs	r5, r0
 8005968:	1e0c      	subs	r4, r1, #0
 800596a:	d010      	beq.n	800598e <_free_r+0x2a>
 800596c:	3c04      	subs	r4, #4
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	da00      	bge.n	8005976 <_free_r+0x12>
 8005974:	18e4      	adds	r4, r4, r3
 8005976:	0028      	movs	r0, r5
 8005978:	f000 f8e0 	bl	8005b3c <__malloc_lock>
 800597c:	4a1d      	ldr	r2, [pc, #116]	@ (80059f4 <_free_r+0x90>)
 800597e:	6813      	ldr	r3, [r2, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d105      	bne.n	8005990 <_free_r+0x2c>
 8005984:	6063      	str	r3, [r4, #4]
 8005986:	6014      	str	r4, [r2, #0]
 8005988:	0028      	movs	r0, r5
 800598a:	f000 f8df 	bl	8005b4c <__malloc_unlock>
 800598e:	bd70      	pop	{r4, r5, r6, pc}
 8005990:	42a3      	cmp	r3, r4
 8005992:	d908      	bls.n	80059a6 <_free_r+0x42>
 8005994:	6820      	ldr	r0, [r4, #0]
 8005996:	1821      	adds	r1, r4, r0
 8005998:	428b      	cmp	r3, r1
 800599a:	d1f3      	bne.n	8005984 <_free_r+0x20>
 800599c:	6819      	ldr	r1, [r3, #0]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	1809      	adds	r1, r1, r0
 80059a2:	6021      	str	r1, [r4, #0]
 80059a4:	e7ee      	b.n	8005984 <_free_r+0x20>
 80059a6:	001a      	movs	r2, r3
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d001      	beq.n	80059b2 <_free_r+0x4e>
 80059ae:	42a3      	cmp	r3, r4
 80059b0:	d9f9      	bls.n	80059a6 <_free_r+0x42>
 80059b2:	6811      	ldr	r1, [r2, #0]
 80059b4:	1850      	adds	r0, r2, r1
 80059b6:	42a0      	cmp	r0, r4
 80059b8:	d10b      	bne.n	80059d2 <_free_r+0x6e>
 80059ba:	6820      	ldr	r0, [r4, #0]
 80059bc:	1809      	adds	r1, r1, r0
 80059be:	1850      	adds	r0, r2, r1
 80059c0:	6011      	str	r1, [r2, #0]
 80059c2:	4283      	cmp	r3, r0
 80059c4:	d1e0      	bne.n	8005988 <_free_r+0x24>
 80059c6:	6818      	ldr	r0, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	1841      	adds	r1, r0, r1
 80059cc:	6011      	str	r1, [r2, #0]
 80059ce:	6053      	str	r3, [r2, #4]
 80059d0:	e7da      	b.n	8005988 <_free_r+0x24>
 80059d2:	42a0      	cmp	r0, r4
 80059d4:	d902      	bls.n	80059dc <_free_r+0x78>
 80059d6:	230c      	movs	r3, #12
 80059d8:	602b      	str	r3, [r5, #0]
 80059da:	e7d5      	b.n	8005988 <_free_r+0x24>
 80059dc:	6820      	ldr	r0, [r4, #0]
 80059de:	1821      	adds	r1, r4, r0
 80059e0:	428b      	cmp	r3, r1
 80059e2:	d103      	bne.n	80059ec <_free_r+0x88>
 80059e4:	6819      	ldr	r1, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	1809      	adds	r1, r1, r0
 80059ea:	6021      	str	r1, [r4, #0]
 80059ec:	6063      	str	r3, [r4, #4]
 80059ee:	6054      	str	r4, [r2, #4]
 80059f0:	e7ca      	b.n	8005988 <_free_r+0x24>
 80059f2:	46c0      	nop			@ (mov r8, r8)
 80059f4:	20000350 	.word	0x20000350

080059f8 <sbrk_aligned>:
 80059f8:	b570      	push	{r4, r5, r6, lr}
 80059fa:	4e0f      	ldr	r6, [pc, #60]	@ (8005a38 <sbrk_aligned+0x40>)
 80059fc:	000d      	movs	r5, r1
 80059fe:	6831      	ldr	r1, [r6, #0]
 8005a00:	0004      	movs	r4, r0
 8005a02:	2900      	cmp	r1, #0
 8005a04:	d102      	bne.n	8005a0c <sbrk_aligned+0x14>
 8005a06:	f000 fb95 	bl	8006134 <_sbrk_r>
 8005a0a:	6030      	str	r0, [r6, #0]
 8005a0c:	0029      	movs	r1, r5
 8005a0e:	0020      	movs	r0, r4
 8005a10:	f000 fb90 	bl	8006134 <_sbrk_r>
 8005a14:	1c43      	adds	r3, r0, #1
 8005a16:	d103      	bne.n	8005a20 <sbrk_aligned+0x28>
 8005a18:	2501      	movs	r5, #1
 8005a1a:	426d      	negs	r5, r5
 8005a1c:	0028      	movs	r0, r5
 8005a1e:	bd70      	pop	{r4, r5, r6, pc}
 8005a20:	2303      	movs	r3, #3
 8005a22:	1cc5      	adds	r5, r0, #3
 8005a24:	439d      	bics	r5, r3
 8005a26:	42a8      	cmp	r0, r5
 8005a28:	d0f8      	beq.n	8005a1c <sbrk_aligned+0x24>
 8005a2a:	1a29      	subs	r1, r5, r0
 8005a2c:	0020      	movs	r0, r4
 8005a2e:	f000 fb81 	bl	8006134 <_sbrk_r>
 8005a32:	3001      	adds	r0, #1
 8005a34:	d1f2      	bne.n	8005a1c <sbrk_aligned+0x24>
 8005a36:	e7ef      	b.n	8005a18 <sbrk_aligned+0x20>
 8005a38:	2000034c 	.word	0x2000034c

08005a3c <_malloc_r>:
 8005a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a3e:	2203      	movs	r2, #3
 8005a40:	1ccb      	adds	r3, r1, #3
 8005a42:	4393      	bics	r3, r2
 8005a44:	3308      	adds	r3, #8
 8005a46:	0005      	movs	r5, r0
 8005a48:	001f      	movs	r7, r3
 8005a4a:	2b0c      	cmp	r3, #12
 8005a4c:	d234      	bcs.n	8005ab8 <_malloc_r+0x7c>
 8005a4e:	270c      	movs	r7, #12
 8005a50:	42b9      	cmp	r1, r7
 8005a52:	d833      	bhi.n	8005abc <_malloc_r+0x80>
 8005a54:	0028      	movs	r0, r5
 8005a56:	f000 f871 	bl	8005b3c <__malloc_lock>
 8005a5a:	4e37      	ldr	r6, [pc, #220]	@ (8005b38 <_malloc_r+0xfc>)
 8005a5c:	6833      	ldr	r3, [r6, #0]
 8005a5e:	001c      	movs	r4, r3
 8005a60:	2c00      	cmp	r4, #0
 8005a62:	d12f      	bne.n	8005ac4 <_malloc_r+0x88>
 8005a64:	0039      	movs	r1, r7
 8005a66:	0028      	movs	r0, r5
 8005a68:	f7ff ffc6 	bl	80059f8 <sbrk_aligned>
 8005a6c:	0004      	movs	r4, r0
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	d15f      	bne.n	8005b32 <_malloc_r+0xf6>
 8005a72:	6834      	ldr	r4, [r6, #0]
 8005a74:	9400      	str	r4, [sp, #0]
 8005a76:	9b00      	ldr	r3, [sp, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d14a      	bne.n	8005b12 <_malloc_r+0xd6>
 8005a7c:	2c00      	cmp	r4, #0
 8005a7e:	d052      	beq.n	8005b26 <_malloc_r+0xea>
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	0028      	movs	r0, r5
 8005a84:	18e3      	adds	r3, r4, r3
 8005a86:	9900      	ldr	r1, [sp, #0]
 8005a88:	9301      	str	r3, [sp, #4]
 8005a8a:	f000 fb53 	bl	8006134 <_sbrk_r>
 8005a8e:	9b01      	ldr	r3, [sp, #4]
 8005a90:	4283      	cmp	r3, r0
 8005a92:	d148      	bne.n	8005b26 <_malloc_r+0xea>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	0028      	movs	r0, r5
 8005a98:	1aff      	subs	r7, r7, r3
 8005a9a:	0039      	movs	r1, r7
 8005a9c:	f7ff ffac 	bl	80059f8 <sbrk_aligned>
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d040      	beq.n	8005b26 <_malloc_r+0xea>
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	19db      	adds	r3, r3, r7
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	6833      	ldr	r3, [r6, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	2a00      	cmp	r2, #0
 8005ab0:	d133      	bne.n	8005b1a <_malloc_r+0xde>
 8005ab2:	9b00      	ldr	r3, [sp, #0]
 8005ab4:	6033      	str	r3, [r6, #0]
 8005ab6:	e019      	b.n	8005aec <_malloc_r+0xb0>
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	dac9      	bge.n	8005a50 <_malloc_r+0x14>
 8005abc:	230c      	movs	r3, #12
 8005abe:	602b      	str	r3, [r5, #0]
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ac4:	6821      	ldr	r1, [r4, #0]
 8005ac6:	1bc9      	subs	r1, r1, r7
 8005ac8:	d420      	bmi.n	8005b0c <_malloc_r+0xd0>
 8005aca:	290b      	cmp	r1, #11
 8005acc:	d90a      	bls.n	8005ae4 <_malloc_r+0xa8>
 8005ace:	19e2      	adds	r2, r4, r7
 8005ad0:	6027      	str	r7, [r4, #0]
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	d104      	bne.n	8005ae0 <_malloc_r+0xa4>
 8005ad6:	6032      	str	r2, [r6, #0]
 8005ad8:	6863      	ldr	r3, [r4, #4]
 8005ada:	6011      	str	r1, [r2, #0]
 8005adc:	6053      	str	r3, [r2, #4]
 8005ade:	e005      	b.n	8005aec <_malloc_r+0xb0>
 8005ae0:	605a      	str	r2, [r3, #4]
 8005ae2:	e7f9      	b.n	8005ad8 <_malloc_r+0x9c>
 8005ae4:	6862      	ldr	r2, [r4, #4]
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	d10e      	bne.n	8005b08 <_malloc_r+0xcc>
 8005aea:	6032      	str	r2, [r6, #0]
 8005aec:	0028      	movs	r0, r5
 8005aee:	f000 f82d 	bl	8005b4c <__malloc_unlock>
 8005af2:	0020      	movs	r0, r4
 8005af4:	2207      	movs	r2, #7
 8005af6:	300b      	adds	r0, #11
 8005af8:	1d23      	adds	r3, r4, #4
 8005afa:	4390      	bics	r0, r2
 8005afc:	1ac2      	subs	r2, r0, r3
 8005afe:	4298      	cmp	r0, r3
 8005b00:	d0df      	beq.n	8005ac2 <_malloc_r+0x86>
 8005b02:	1a1b      	subs	r3, r3, r0
 8005b04:	50a3      	str	r3, [r4, r2]
 8005b06:	e7dc      	b.n	8005ac2 <_malloc_r+0x86>
 8005b08:	605a      	str	r2, [r3, #4]
 8005b0a:	e7ef      	b.n	8005aec <_malloc_r+0xb0>
 8005b0c:	0023      	movs	r3, r4
 8005b0e:	6864      	ldr	r4, [r4, #4]
 8005b10:	e7a6      	b.n	8005a60 <_malloc_r+0x24>
 8005b12:	9c00      	ldr	r4, [sp, #0]
 8005b14:	6863      	ldr	r3, [r4, #4]
 8005b16:	9300      	str	r3, [sp, #0]
 8005b18:	e7ad      	b.n	8005a76 <_malloc_r+0x3a>
 8005b1a:	001a      	movs	r2, r3
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	42a3      	cmp	r3, r4
 8005b20:	d1fb      	bne.n	8005b1a <_malloc_r+0xde>
 8005b22:	2300      	movs	r3, #0
 8005b24:	e7da      	b.n	8005adc <_malloc_r+0xa0>
 8005b26:	230c      	movs	r3, #12
 8005b28:	0028      	movs	r0, r5
 8005b2a:	602b      	str	r3, [r5, #0]
 8005b2c:	f000 f80e 	bl	8005b4c <__malloc_unlock>
 8005b30:	e7c6      	b.n	8005ac0 <_malloc_r+0x84>
 8005b32:	6007      	str	r7, [r0, #0]
 8005b34:	e7da      	b.n	8005aec <_malloc_r+0xb0>
 8005b36:	46c0      	nop			@ (mov r8, r8)
 8005b38:	20000350 	.word	0x20000350

08005b3c <__malloc_lock>:
 8005b3c:	b510      	push	{r4, lr}
 8005b3e:	4802      	ldr	r0, [pc, #8]	@ (8005b48 <__malloc_lock+0xc>)
 8005b40:	f7ff ff0e 	bl	8005960 <__retarget_lock_acquire_recursive>
 8005b44:	bd10      	pop	{r4, pc}
 8005b46:	46c0      	nop			@ (mov r8, r8)
 8005b48:	20000348 	.word	0x20000348

08005b4c <__malloc_unlock>:
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	4802      	ldr	r0, [pc, #8]	@ (8005b58 <__malloc_unlock+0xc>)
 8005b50:	f7ff ff07 	bl	8005962 <__retarget_lock_release_recursive>
 8005b54:	bd10      	pop	{r4, pc}
 8005b56:	46c0      	nop			@ (mov r8, r8)
 8005b58:	20000348 	.word	0x20000348

08005b5c <__ssputs_r>:
 8005b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b5e:	688e      	ldr	r6, [r1, #8]
 8005b60:	b085      	sub	sp, #20
 8005b62:	001f      	movs	r7, r3
 8005b64:	000c      	movs	r4, r1
 8005b66:	680b      	ldr	r3, [r1, #0]
 8005b68:	9002      	str	r0, [sp, #8]
 8005b6a:	9203      	str	r2, [sp, #12]
 8005b6c:	42be      	cmp	r6, r7
 8005b6e:	d830      	bhi.n	8005bd2 <__ssputs_r+0x76>
 8005b70:	210c      	movs	r1, #12
 8005b72:	5e62      	ldrsh	r2, [r4, r1]
 8005b74:	2190      	movs	r1, #144	@ 0x90
 8005b76:	00c9      	lsls	r1, r1, #3
 8005b78:	420a      	tst	r2, r1
 8005b7a:	d028      	beq.n	8005bce <__ssputs_r+0x72>
 8005b7c:	2003      	movs	r0, #3
 8005b7e:	6921      	ldr	r1, [r4, #16]
 8005b80:	1a5b      	subs	r3, r3, r1
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	6963      	ldr	r3, [r4, #20]
 8005b86:	4343      	muls	r3, r0
 8005b88:	9801      	ldr	r0, [sp, #4]
 8005b8a:	0fdd      	lsrs	r5, r3, #31
 8005b8c:	18ed      	adds	r5, r5, r3
 8005b8e:	1c7b      	adds	r3, r7, #1
 8005b90:	181b      	adds	r3, r3, r0
 8005b92:	106d      	asrs	r5, r5, #1
 8005b94:	42ab      	cmp	r3, r5
 8005b96:	d900      	bls.n	8005b9a <__ssputs_r+0x3e>
 8005b98:	001d      	movs	r5, r3
 8005b9a:	0552      	lsls	r2, r2, #21
 8005b9c:	d528      	bpl.n	8005bf0 <__ssputs_r+0x94>
 8005b9e:	0029      	movs	r1, r5
 8005ba0:	9802      	ldr	r0, [sp, #8]
 8005ba2:	f7ff ff4b 	bl	8005a3c <_malloc_r>
 8005ba6:	1e06      	subs	r6, r0, #0
 8005ba8:	d02c      	beq.n	8005c04 <__ssputs_r+0xa8>
 8005baa:	9a01      	ldr	r2, [sp, #4]
 8005bac:	6921      	ldr	r1, [r4, #16]
 8005bae:	f000 fade 	bl	800616e <memcpy>
 8005bb2:	89a2      	ldrh	r2, [r4, #12]
 8005bb4:	4b18      	ldr	r3, [pc, #96]	@ (8005c18 <__ssputs_r+0xbc>)
 8005bb6:	401a      	ands	r2, r3
 8005bb8:	2380      	movs	r3, #128	@ 0x80
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	81a3      	strh	r3, [r4, #12]
 8005bbe:	9b01      	ldr	r3, [sp, #4]
 8005bc0:	6126      	str	r6, [r4, #16]
 8005bc2:	18f6      	adds	r6, r6, r3
 8005bc4:	6026      	str	r6, [r4, #0]
 8005bc6:	003e      	movs	r6, r7
 8005bc8:	6165      	str	r5, [r4, #20]
 8005bca:	1aed      	subs	r5, r5, r3
 8005bcc:	60a5      	str	r5, [r4, #8]
 8005bce:	42be      	cmp	r6, r7
 8005bd0:	d900      	bls.n	8005bd4 <__ssputs_r+0x78>
 8005bd2:	003e      	movs	r6, r7
 8005bd4:	0032      	movs	r2, r6
 8005bd6:	9903      	ldr	r1, [sp, #12]
 8005bd8:	6820      	ldr	r0, [r4, #0]
 8005bda:	f000 fa99 	bl	8006110 <memmove>
 8005bde:	2000      	movs	r0, #0
 8005be0:	68a3      	ldr	r3, [r4, #8]
 8005be2:	1b9b      	subs	r3, r3, r6
 8005be4:	60a3      	str	r3, [r4, #8]
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	199b      	adds	r3, r3, r6
 8005bea:	6023      	str	r3, [r4, #0]
 8005bec:	b005      	add	sp, #20
 8005bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bf0:	002a      	movs	r2, r5
 8005bf2:	9802      	ldr	r0, [sp, #8]
 8005bf4:	f000 fac4 	bl	8006180 <_realloc_r>
 8005bf8:	1e06      	subs	r6, r0, #0
 8005bfa:	d1e0      	bne.n	8005bbe <__ssputs_r+0x62>
 8005bfc:	6921      	ldr	r1, [r4, #16]
 8005bfe:	9802      	ldr	r0, [sp, #8]
 8005c00:	f7ff feb0 	bl	8005964 <_free_r>
 8005c04:	230c      	movs	r3, #12
 8005c06:	2001      	movs	r0, #1
 8005c08:	9a02      	ldr	r2, [sp, #8]
 8005c0a:	4240      	negs	r0, r0
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	89a2      	ldrh	r2, [r4, #12]
 8005c10:	3334      	adds	r3, #52	@ 0x34
 8005c12:	4313      	orrs	r3, r2
 8005c14:	81a3      	strh	r3, [r4, #12]
 8005c16:	e7e9      	b.n	8005bec <__ssputs_r+0x90>
 8005c18:	fffffb7f 	.word	0xfffffb7f

08005c1c <_svfiprintf_r>:
 8005c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c1e:	b0a1      	sub	sp, #132	@ 0x84
 8005c20:	9003      	str	r0, [sp, #12]
 8005c22:	001d      	movs	r5, r3
 8005c24:	898b      	ldrh	r3, [r1, #12]
 8005c26:	000f      	movs	r7, r1
 8005c28:	0016      	movs	r6, r2
 8005c2a:	061b      	lsls	r3, r3, #24
 8005c2c:	d511      	bpl.n	8005c52 <_svfiprintf_r+0x36>
 8005c2e:	690b      	ldr	r3, [r1, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10e      	bne.n	8005c52 <_svfiprintf_r+0x36>
 8005c34:	2140      	movs	r1, #64	@ 0x40
 8005c36:	f7ff ff01 	bl	8005a3c <_malloc_r>
 8005c3a:	6038      	str	r0, [r7, #0]
 8005c3c:	6138      	str	r0, [r7, #16]
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d105      	bne.n	8005c4e <_svfiprintf_r+0x32>
 8005c42:	230c      	movs	r3, #12
 8005c44:	9a03      	ldr	r2, [sp, #12]
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	2001      	movs	r0, #1
 8005c4a:	4240      	negs	r0, r0
 8005c4c:	e0cf      	b.n	8005dee <_svfiprintf_r+0x1d2>
 8005c4e:	2340      	movs	r3, #64	@ 0x40
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	2300      	movs	r3, #0
 8005c54:	ac08      	add	r4, sp, #32
 8005c56:	6163      	str	r3, [r4, #20]
 8005c58:	3320      	adds	r3, #32
 8005c5a:	7663      	strb	r3, [r4, #25]
 8005c5c:	3310      	adds	r3, #16
 8005c5e:	76a3      	strb	r3, [r4, #26]
 8005c60:	9507      	str	r5, [sp, #28]
 8005c62:	0035      	movs	r5, r6
 8005c64:	782b      	ldrb	r3, [r5, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <_svfiprintf_r+0x52>
 8005c6a:	2b25      	cmp	r3, #37	@ 0x25
 8005c6c:	d148      	bne.n	8005d00 <_svfiprintf_r+0xe4>
 8005c6e:	1bab      	subs	r3, r5, r6
 8005c70:	9305      	str	r3, [sp, #20]
 8005c72:	42b5      	cmp	r5, r6
 8005c74:	d00b      	beq.n	8005c8e <_svfiprintf_r+0x72>
 8005c76:	0032      	movs	r2, r6
 8005c78:	0039      	movs	r1, r7
 8005c7a:	9803      	ldr	r0, [sp, #12]
 8005c7c:	f7ff ff6e 	bl	8005b5c <__ssputs_r>
 8005c80:	3001      	adds	r0, #1
 8005c82:	d100      	bne.n	8005c86 <_svfiprintf_r+0x6a>
 8005c84:	e0ae      	b.n	8005de4 <_svfiprintf_r+0x1c8>
 8005c86:	6963      	ldr	r3, [r4, #20]
 8005c88:	9a05      	ldr	r2, [sp, #20]
 8005c8a:	189b      	adds	r3, r3, r2
 8005c8c:	6163      	str	r3, [r4, #20]
 8005c8e:	782b      	ldrb	r3, [r5, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d100      	bne.n	8005c96 <_svfiprintf_r+0x7a>
 8005c94:	e0a6      	b.n	8005de4 <_svfiprintf_r+0x1c8>
 8005c96:	2201      	movs	r2, #1
 8005c98:	2300      	movs	r3, #0
 8005c9a:	4252      	negs	r2, r2
 8005c9c:	6062      	str	r2, [r4, #4]
 8005c9e:	a904      	add	r1, sp, #16
 8005ca0:	3254      	adds	r2, #84	@ 0x54
 8005ca2:	1852      	adds	r2, r2, r1
 8005ca4:	1c6e      	adds	r6, r5, #1
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	60e3      	str	r3, [r4, #12]
 8005caa:	60a3      	str	r3, [r4, #8]
 8005cac:	7013      	strb	r3, [r2, #0]
 8005cae:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005cb0:	4b54      	ldr	r3, [pc, #336]	@ (8005e04 <_svfiprintf_r+0x1e8>)
 8005cb2:	2205      	movs	r2, #5
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	7831      	ldrb	r1, [r6, #0]
 8005cb8:	9305      	str	r3, [sp, #20]
 8005cba:	f000 fa4d 	bl	8006158 <memchr>
 8005cbe:	1c75      	adds	r5, r6, #1
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d11f      	bne.n	8005d04 <_svfiprintf_r+0xe8>
 8005cc4:	6822      	ldr	r2, [r4, #0]
 8005cc6:	06d3      	lsls	r3, r2, #27
 8005cc8:	d504      	bpl.n	8005cd4 <_svfiprintf_r+0xb8>
 8005cca:	2353      	movs	r3, #83	@ 0x53
 8005ccc:	a904      	add	r1, sp, #16
 8005cce:	185b      	adds	r3, r3, r1
 8005cd0:	2120      	movs	r1, #32
 8005cd2:	7019      	strb	r1, [r3, #0]
 8005cd4:	0713      	lsls	r3, r2, #28
 8005cd6:	d504      	bpl.n	8005ce2 <_svfiprintf_r+0xc6>
 8005cd8:	2353      	movs	r3, #83	@ 0x53
 8005cda:	a904      	add	r1, sp, #16
 8005cdc:	185b      	adds	r3, r3, r1
 8005cde:	212b      	movs	r1, #43	@ 0x2b
 8005ce0:	7019      	strb	r1, [r3, #0]
 8005ce2:	7833      	ldrb	r3, [r6, #0]
 8005ce4:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ce6:	d016      	beq.n	8005d16 <_svfiprintf_r+0xfa>
 8005ce8:	0035      	movs	r5, r6
 8005cea:	2100      	movs	r1, #0
 8005cec:	200a      	movs	r0, #10
 8005cee:	68e3      	ldr	r3, [r4, #12]
 8005cf0:	782a      	ldrb	r2, [r5, #0]
 8005cf2:	1c6e      	adds	r6, r5, #1
 8005cf4:	3a30      	subs	r2, #48	@ 0x30
 8005cf6:	2a09      	cmp	r2, #9
 8005cf8:	d950      	bls.n	8005d9c <_svfiprintf_r+0x180>
 8005cfa:	2900      	cmp	r1, #0
 8005cfc:	d111      	bne.n	8005d22 <_svfiprintf_r+0x106>
 8005cfe:	e017      	b.n	8005d30 <_svfiprintf_r+0x114>
 8005d00:	3501      	adds	r5, #1
 8005d02:	e7af      	b.n	8005c64 <_svfiprintf_r+0x48>
 8005d04:	9b05      	ldr	r3, [sp, #20]
 8005d06:	6822      	ldr	r2, [r4, #0]
 8005d08:	1ac0      	subs	r0, r0, r3
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	4083      	lsls	r3, r0
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	002e      	movs	r6, r5
 8005d12:	6023      	str	r3, [r4, #0]
 8005d14:	e7cc      	b.n	8005cb0 <_svfiprintf_r+0x94>
 8005d16:	9b07      	ldr	r3, [sp, #28]
 8005d18:	1d19      	adds	r1, r3, #4
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	9107      	str	r1, [sp, #28]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	db01      	blt.n	8005d26 <_svfiprintf_r+0x10a>
 8005d22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d24:	e004      	b.n	8005d30 <_svfiprintf_r+0x114>
 8005d26:	425b      	negs	r3, r3
 8005d28:	60e3      	str	r3, [r4, #12]
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	782b      	ldrb	r3, [r5, #0]
 8005d32:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d34:	d10c      	bne.n	8005d50 <_svfiprintf_r+0x134>
 8005d36:	786b      	ldrb	r3, [r5, #1]
 8005d38:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d3a:	d134      	bne.n	8005da6 <_svfiprintf_r+0x18a>
 8005d3c:	9b07      	ldr	r3, [sp, #28]
 8005d3e:	3502      	adds	r5, #2
 8005d40:	1d1a      	adds	r2, r3, #4
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	9207      	str	r2, [sp, #28]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	da01      	bge.n	8005d4e <_svfiprintf_r+0x132>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	425b      	negs	r3, r3
 8005d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d50:	4e2d      	ldr	r6, [pc, #180]	@ (8005e08 <_svfiprintf_r+0x1ec>)
 8005d52:	2203      	movs	r2, #3
 8005d54:	0030      	movs	r0, r6
 8005d56:	7829      	ldrb	r1, [r5, #0]
 8005d58:	f000 f9fe 	bl	8006158 <memchr>
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d006      	beq.n	8005d6e <_svfiprintf_r+0x152>
 8005d60:	2340      	movs	r3, #64	@ 0x40
 8005d62:	1b80      	subs	r0, r0, r6
 8005d64:	4083      	lsls	r3, r0
 8005d66:	6822      	ldr	r2, [r4, #0]
 8005d68:	3501      	adds	r5, #1
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	6023      	str	r3, [r4, #0]
 8005d6e:	7829      	ldrb	r1, [r5, #0]
 8005d70:	2206      	movs	r2, #6
 8005d72:	4826      	ldr	r0, [pc, #152]	@ (8005e0c <_svfiprintf_r+0x1f0>)
 8005d74:	1c6e      	adds	r6, r5, #1
 8005d76:	7621      	strb	r1, [r4, #24]
 8005d78:	f000 f9ee 	bl	8006158 <memchr>
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d038      	beq.n	8005df2 <_svfiprintf_r+0x1d6>
 8005d80:	4b23      	ldr	r3, [pc, #140]	@ (8005e10 <_svfiprintf_r+0x1f4>)
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d122      	bne.n	8005dcc <_svfiprintf_r+0x1b0>
 8005d86:	2207      	movs	r2, #7
 8005d88:	9b07      	ldr	r3, [sp, #28]
 8005d8a:	3307      	adds	r3, #7
 8005d8c:	4393      	bics	r3, r2
 8005d8e:	3308      	adds	r3, #8
 8005d90:	9307      	str	r3, [sp, #28]
 8005d92:	6963      	ldr	r3, [r4, #20]
 8005d94:	9a04      	ldr	r2, [sp, #16]
 8005d96:	189b      	adds	r3, r3, r2
 8005d98:	6163      	str	r3, [r4, #20]
 8005d9a:	e762      	b.n	8005c62 <_svfiprintf_r+0x46>
 8005d9c:	4343      	muls	r3, r0
 8005d9e:	0035      	movs	r5, r6
 8005da0:	2101      	movs	r1, #1
 8005da2:	189b      	adds	r3, r3, r2
 8005da4:	e7a4      	b.n	8005cf0 <_svfiprintf_r+0xd4>
 8005da6:	2300      	movs	r3, #0
 8005da8:	200a      	movs	r0, #10
 8005daa:	0019      	movs	r1, r3
 8005dac:	3501      	adds	r5, #1
 8005dae:	6063      	str	r3, [r4, #4]
 8005db0:	782a      	ldrb	r2, [r5, #0]
 8005db2:	1c6e      	adds	r6, r5, #1
 8005db4:	3a30      	subs	r2, #48	@ 0x30
 8005db6:	2a09      	cmp	r2, #9
 8005db8:	d903      	bls.n	8005dc2 <_svfiprintf_r+0x1a6>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0c8      	beq.n	8005d50 <_svfiprintf_r+0x134>
 8005dbe:	9109      	str	r1, [sp, #36]	@ 0x24
 8005dc0:	e7c6      	b.n	8005d50 <_svfiprintf_r+0x134>
 8005dc2:	4341      	muls	r1, r0
 8005dc4:	0035      	movs	r5, r6
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	1889      	adds	r1, r1, r2
 8005dca:	e7f1      	b.n	8005db0 <_svfiprintf_r+0x194>
 8005dcc:	aa07      	add	r2, sp, #28
 8005dce:	9200      	str	r2, [sp, #0]
 8005dd0:	0021      	movs	r1, r4
 8005dd2:	003a      	movs	r2, r7
 8005dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005e14 <_svfiprintf_r+0x1f8>)
 8005dd6:	9803      	ldr	r0, [sp, #12]
 8005dd8:	e000      	b.n	8005ddc <_svfiprintf_r+0x1c0>
 8005dda:	bf00      	nop
 8005ddc:	9004      	str	r0, [sp, #16]
 8005dde:	9b04      	ldr	r3, [sp, #16]
 8005de0:	3301      	adds	r3, #1
 8005de2:	d1d6      	bne.n	8005d92 <_svfiprintf_r+0x176>
 8005de4:	89bb      	ldrh	r3, [r7, #12]
 8005de6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005de8:	065b      	lsls	r3, r3, #25
 8005dea:	d500      	bpl.n	8005dee <_svfiprintf_r+0x1d2>
 8005dec:	e72c      	b.n	8005c48 <_svfiprintf_r+0x2c>
 8005dee:	b021      	add	sp, #132	@ 0x84
 8005df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005df2:	aa07      	add	r2, sp, #28
 8005df4:	9200      	str	r2, [sp, #0]
 8005df6:	0021      	movs	r1, r4
 8005df8:	003a      	movs	r2, r7
 8005dfa:	4b06      	ldr	r3, [pc, #24]	@ (8005e14 <_svfiprintf_r+0x1f8>)
 8005dfc:	9803      	ldr	r0, [sp, #12]
 8005dfe:	f000 f87b 	bl	8005ef8 <_printf_i>
 8005e02:	e7eb      	b.n	8005ddc <_svfiprintf_r+0x1c0>
 8005e04:	080067ec 	.word	0x080067ec
 8005e08:	080067f2 	.word	0x080067f2
 8005e0c:	080067f6 	.word	0x080067f6
 8005e10:	00000000 	.word	0x00000000
 8005e14:	08005b5d 	.word	0x08005b5d

08005e18 <_printf_common>:
 8005e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e1a:	0016      	movs	r6, r2
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	688a      	ldr	r2, [r1, #8]
 8005e20:	690b      	ldr	r3, [r1, #16]
 8005e22:	000c      	movs	r4, r1
 8005e24:	9000      	str	r0, [sp, #0]
 8005e26:	4293      	cmp	r3, r2
 8005e28:	da00      	bge.n	8005e2c <_printf_common+0x14>
 8005e2a:	0013      	movs	r3, r2
 8005e2c:	0022      	movs	r2, r4
 8005e2e:	6033      	str	r3, [r6, #0]
 8005e30:	3243      	adds	r2, #67	@ 0x43
 8005e32:	7812      	ldrb	r2, [r2, #0]
 8005e34:	2a00      	cmp	r2, #0
 8005e36:	d001      	beq.n	8005e3c <_printf_common+0x24>
 8005e38:	3301      	adds	r3, #1
 8005e3a:	6033      	str	r3, [r6, #0]
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	069b      	lsls	r3, r3, #26
 8005e40:	d502      	bpl.n	8005e48 <_printf_common+0x30>
 8005e42:	6833      	ldr	r3, [r6, #0]
 8005e44:	3302      	adds	r3, #2
 8005e46:	6033      	str	r3, [r6, #0]
 8005e48:	6822      	ldr	r2, [r4, #0]
 8005e4a:	2306      	movs	r3, #6
 8005e4c:	0015      	movs	r5, r2
 8005e4e:	401d      	ands	r5, r3
 8005e50:	421a      	tst	r2, r3
 8005e52:	d027      	beq.n	8005ea4 <_printf_common+0x8c>
 8005e54:	0023      	movs	r3, r4
 8005e56:	3343      	adds	r3, #67	@ 0x43
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	1e5a      	subs	r2, r3, #1
 8005e5c:	4193      	sbcs	r3, r2
 8005e5e:	6822      	ldr	r2, [r4, #0]
 8005e60:	0692      	lsls	r2, r2, #26
 8005e62:	d430      	bmi.n	8005ec6 <_printf_common+0xae>
 8005e64:	0022      	movs	r2, r4
 8005e66:	9901      	ldr	r1, [sp, #4]
 8005e68:	9800      	ldr	r0, [sp, #0]
 8005e6a:	9d08      	ldr	r5, [sp, #32]
 8005e6c:	3243      	adds	r2, #67	@ 0x43
 8005e6e:	47a8      	blx	r5
 8005e70:	3001      	adds	r0, #1
 8005e72:	d025      	beq.n	8005ec0 <_printf_common+0xa8>
 8005e74:	2206      	movs	r2, #6
 8005e76:	6823      	ldr	r3, [r4, #0]
 8005e78:	2500      	movs	r5, #0
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	2b04      	cmp	r3, #4
 8005e7e:	d105      	bne.n	8005e8c <_printf_common+0x74>
 8005e80:	6833      	ldr	r3, [r6, #0]
 8005e82:	68e5      	ldr	r5, [r4, #12]
 8005e84:	1aed      	subs	r5, r5, r3
 8005e86:	43eb      	mvns	r3, r5
 8005e88:	17db      	asrs	r3, r3, #31
 8005e8a:	401d      	ands	r5, r3
 8005e8c:	68a3      	ldr	r3, [r4, #8]
 8005e8e:	6922      	ldr	r2, [r4, #16]
 8005e90:	4293      	cmp	r3, r2
 8005e92:	dd01      	ble.n	8005e98 <_printf_common+0x80>
 8005e94:	1a9b      	subs	r3, r3, r2
 8005e96:	18ed      	adds	r5, r5, r3
 8005e98:	2600      	movs	r6, #0
 8005e9a:	42b5      	cmp	r5, r6
 8005e9c:	d120      	bne.n	8005ee0 <_printf_common+0xc8>
 8005e9e:	2000      	movs	r0, #0
 8005ea0:	e010      	b.n	8005ec4 <_printf_common+0xac>
 8005ea2:	3501      	adds	r5, #1
 8005ea4:	68e3      	ldr	r3, [r4, #12]
 8005ea6:	6832      	ldr	r2, [r6, #0]
 8005ea8:	1a9b      	subs	r3, r3, r2
 8005eaa:	42ab      	cmp	r3, r5
 8005eac:	ddd2      	ble.n	8005e54 <_printf_common+0x3c>
 8005eae:	0022      	movs	r2, r4
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	9901      	ldr	r1, [sp, #4]
 8005eb4:	9800      	ldr	r0, [sp, #0]
 8005eb6:	9f08      	ldr	r7, [sp, #32]
 8005eb8:	3219      	adds	r2, #25
 8005eba:	47b8      	blx	r7
 8005ebc:	3001      	adds	r0, #1
 8005ebe:	d1f0      	bne.n	8005ea2 <_printf_common+0x8a>
 8005ec0:	2001      	movs	r0, #1
 8005ec2:	4240      	negs	r0, r0
 8005ec4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ec6:	2030      	movs	r0, #48	@ 0x30
 8005ec8:	18e1      	adds	r1, r4, r3
 8005eca:	3143      	adds	r1, #67	@ 0x43
 8005ecc:	7008      	strb	r0, [r1, #0]
 8005ece:	0021      	movs	r1, r4
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	3145      	adds	r1, #69	@ 0x45
 8005ed4:	7809      	ldrb	r1, [r1, #0]
 8005ed6:	18a2      	adds	r2, r4, r2
 8005ed8:	3243      	adds	r2, #67	@ 0x43
 8005eda:	3302      	adds	r3, #2
 8005edc:	7011      	strb	r1, [r2, #0]
 8005ede:	e7c1      	b.n	8005e64 <_printf_common+0x4c>
 8005ee0:	0022      	movs	r2, r4
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	9901      	ldr	r1, [sp, #4]
 8005ee6:	9800      	ldr	r0, [sp, #0]
 8005ee8:	9f08      	ldr	r7, [sp, #32]
 8005eea:	321a      	adds	r2, #26
 8005eec:	47b8      	blx	r7
 8005eee:	3001      	adds	r0, #1
 8005ef0:	d0e6      	beq.n	8005ec0 <_printf_common+0xa8>
 8005ef2:	3601      	adds	r6, #1
 8005ef4:	e7d1      	b.n	8005e9a <_printf_common+0x82>
	...

08005ef8 <_printf_i>:
 8005ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efa:	b08b      	sub	sp, #44	@ 0x2c
 8005efc:	9206      	str	r2, [sp, #24]
 8005efe:	000a      	movs	r2, r1
 8005f00:	3243      	adds	r2, #67	@ 0x43
 8005f02:	9307      	str	r3, [sp, #28]
 8005f04:	9005      	str	r0, [sp, #20]
 8005f06:	9203      	str	r2, [sp, #12]
 8005f08:	7e0a      	ldrb	r2, [r1, #24]
 8005f0a:	000c      	movs	r4, r1
 8005f0c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f0e:	2a78      	cmp	r2, #120	@ 0x78
 8005f10:	d809      	bhi.n	8005f26 <_printf_i+0x2e>
 8005f12:	2a62      	cmp	r2, #98	@ 0x62
 8005f14:	d80b      	bhi.n	8005f2e <_printf_i+0x36>
 8005f16:	2a00      	cmp	r2, #0
 8005f18:	d100      	bne.n	8005f1c <_printf_i+0x24>
 8005f1a:	e0ba      	b.n	8006092 <_printf_i+0x19a>
 8005f1c:	497a      	ldr	r1, [pc, #488]	@ (8006108 <_printf_i+0x210>)
 8005f1e:	9104      	str	r1, [sp, #16]
 8005f20:	2a58      	cmp	r2, #88	@ 0x58
 8005f22:	d100      	bne.n	8005f26 <_printf_i+0x2e>
 8005f24:	e08e      	b.n	8006044 <_printf_i+0x14c>
 8005f26:	0025      	movs	r5, r4
 8005f28:	3542      	adds	r5, #66	@ 0x42
 8005f2a:	702a      	strb	r2, [r5, #0]
 8005f2c:	e022      	b.n	8005f74 <_printf_i+0x7c>
 8005f2e:	0010      	movs	r0, r2
 8005f30:	3863      	subs	r0, #99	@ 0x63
 8005f32:	2815      	cmp	r0, #21
 8005f34:	d8f7      	bhi.n	8005f26 <_printf_i+0x2e>
 8005f36:	f7fa f8ef 	bl	8000118 <__gnu_thumb1_case_shi>
 8005f3a:	0016      	.short	0x0016
 8005f3c:	fff6001f 	.word	0xfff6001f
 8005f40:	fff6fff6 	.word	0xfff6fff6
 8005f44:	001ffff6 	.word	0x001ffff6
 8005f48:	fff6fff6 	.word	0xfff6fff6
 8005f4c:	fff6fff6 	.word	0xfff6fff6
 8005f50:	0036009f 	.word	0x0036009f
 8005f54:	fff6007e 	.word	0xfff6007e
 8005f58:	00b0fff6 	.word	0x00b0fff6
 8005f5c:	0036fff6 	.word	0x0036fff6
 8005f60:	fff6fff6 	.word	0xfff6fff6
 8005f64:	0082      	.short	0x0082
 8005f66:	0025      	movs	r5, r4
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	3542      	adds	r5, #66	@ 0x42
 8005f6c:	1d11      	adds	r1, r2, #4
 8005f6e:	6019      	str	r1, [r3, #0]
 8005f70:	6813      	ldr	r3, [r2, #0]
 8005f72:	702b      	strb	r3, [r5, #0]
 8005f74:	2301      	movs	r3, #1
 8005f76:	e09e      	b.n	80060b6 <_printf_i+0x1be>
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	6809      	ldr	r1, [r1, #0]
 8005f7c:	1d02      	adds	r2, r0, #4
 8005f7e:	060d      	lsls	r5, r1, #24
 8005f80:	d50b      	bpl.n	8005f9a <_printf_i+0xa2>
 8005f82:	6806      	ldr	r6, [r0, #0]
 8005f84:	601a      	str	r2, [r3, #0]
 8005f86:	2e00      	cmp	r6, #0
 8005f88:	da03      	bge.n	8005f92 <_printf_i+0x9a>
 8005f8a:	232d      	movs	r3, #45	@ 0x2d
 8005f8c:	9a03      	ldr	r2, [sp, #12]
 8005f8e:	4276      	negs	r6, r6
 8005f90:	7013      	strb	r3, [r2, #0]
 8005f92:	4b5d      	ldr	r3, [pc, #372]	@ (8006108 <_printf_i+0x210>)
 8005f94:	270a      	movs	r7, #10
 8005f96:	9304      	str	r3, [sp, #16]
 8005f98:	e018      	b.n	8005fcc <_printf_i+0xd4>
 8005f9a:	6806      	ldr	r6, [r0, #0]
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	0649      	lsls	r1, r1, #25
 8005fa0:	d5f1      	bpl.n	8005f86 <_printf_i+0x8e>
 8005fa2:	b236      	sxth	r6, r6
 8005fa4:	e7ef      	b.n	8005f86 <_printf_i+0x8e>
 8005fa6:	6808      	ldr	r0, [r1, #0]
 8005fa8:	6819      	ldr	r1, [r3, #0]
 8005faa:	c940      	ldmia	r1!, {r6}
 8005fac:	0605      	lsls	r5, r0, #24
 8005fae:	d402      	bmi.n	8005fb6 <_printf_i+0xbe>
 8005fb0:	0640      	lsls	r0, r0, #25
 8005fb2:	d500      	bpl.n	8005fb6 <_printf_i+0xbe>
 8005fb4:	b2b6      	uxth	r6, r6
 8005fb6:	6019      	str	r1, [r3, #0]
 8005fb8:	4b53      	ldr	r3, [pc, #332]	@ (8006108 <_printf_i+0x210>)
 8005fba:	270a      	movs	r7, #10
 8005fbc:	9304      	str	r3, [sp, #16]
 8005fbe:	2a6f      	cmp	r2, #111	@ 0x6f
 8005fc0:	d100      	bne.n	8005fc4 <_printf_i+0xcc>
 8005fc2:	3f02      	subs	r7, #2
 8005fc4:	0023      	movs	r3, r4
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	3343      	adds	r3, #67	@ 0x43
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	6863      	ldr	r3, [r4, #4]
 8005fce:	60a3      	str	r3, [r4, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	db06      	blt.n	8005fe2 <_printf_i+0xea>
 8005fd4:	2104      	movs	r1, #4
 8005fd6:	6822      	ldr	r2, [r4, #0]
 8005fd8:	9d03      	ldr	r5, [sp, #12]
 8005fda:	438a      	bics	r2, r1
 8005fdc:	6022      	str	r2, [r4, #0]
 8005fde:	4333      	orrs	r3, r6
 8005fe0:	d00c      	beq.n	8005ffc <_printf_i+0x104>
 8005fe2:	9d03      	ldr	r5, [sp, #12]
 8005fe4:	0030      	movs	r0, r6
 8005fe6:	0039      	movs	r1, r7
 8005fe8:	f7fa f926 	bl	8000238 <__aeabi_uidivmod>
 8005fec:	9b04      	ldr	r3, [sp, #16]
 8005fee:	3d01      	subs	r5, #1
 8005ff0:	5c5b      	ldrb	r3, [r3, r1]
 8005ff2:	702b      	strb	r3, [r5, #0]
 8005ff4:	0033      	movs	r3, r6
 8005ff6:	0006      	movs	r6, r0
 8005ff8:	429f      	cmp	r7, r3
 8005ffa:	d9f3      	bls.n	8005fe4 <_printf_i+0xec>
 8005ffc:	2f08      	cmp	r7, #8
 8005ffe:	d109      	bne.n	8006014 <_printf_i+0x11c>
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	07db      	lsls	r3, r3, #31
 8006004:	d506      	bpl.n	8006014 <_printf_i+0x11c>
 8006006:	6862      	ldr	r2, [r4, #4]
 8006008:	6923      	ldr	r3, [r4, #16]
 800600a:	429a      	cmp	r2, r3
 800600c:	dc02      	bgt.n	8006014 <_printf_i+0x11c>
 800600e:	2330      	movs	r3, #48	@ 0x30
 8006010:	3d01      	subs	r5, #1
 8006012:	702b      	strb	r3, [r5, #0]
 8006014:	9b03      	ldr	r3, [sp, #12]
 8006016:	1b5b      	subs	r3, r3, r5
 8006018:	6123      	str	r3, [r4, #16]
 800601a:	9b07      	ldr	r3, [sp, #28]
 800601c:	0021      	movs	r1, r4
 800601e:	9300      	str	r3, [sp, #0]
 8006020:	9805      	ldr	r0, [sp, #20]
 8006022:	9b06      	ldr	r3, [sp, #24]
 8006024:	aa09      	add	r2, sp, #36	@ 0x24
 8006026:	f7ff fef7 	bl	8005e18 <_printf_common>
 800602a:	3001      	adds	r0, #1
 800602c:	d148      	bne.n	80060c0 <_printf_i+0x1c8>
 800602e:	2001      	movs	r0, #1
 8006030:	4240      	negs	r0, r0
 8006032:	b00b      	add	sp, #44	@ 0x2c
 8006034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006036:	2220      	movs	r2, #32
 8006038:	6809      	ldr	r1, [r1, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	6022      	str	r2, [r4, #0]
 800603e:	2278      	movs	r2, #120	@ 0x78
 8006040:	4932      	ldr	r1, [pc, #200]	@ (800610c <_printf_i+0x214>)
 8006042:	9104      	str	r1, [sp, #16]
 8006044:	0021      	movs	r1, r4
 8006046:	3145      	adds	r1, #69	@ 0x45
 8006048:	700a      	strb	r2, [r1, #0]
 800604a:	6819      	ldr	r1, [r3, #0]
 800604c:	6822      	ldr	r2, [r4, #0]
 800604e:	c940      	ldmia	r1!, {r6}
 8006050:	0610      	lsls	r0, r2, #24
 8006052:	d402      	bmi.n	800605a <_printf_i+0x162>
 8006054:	0650      	lsls	r0, r2, #25
 8006056:	d500      	bpl.n	800605a <_printf_i+0x162>
 8006058:	b2b6      	uxth	r6, r6
 800605a:	6019      	str	r1, [r3, #0]
 800605c:	07d3      	lsls	r3, r2, #31
 800605e:	d502      	bpl.n	8006066 <_printf_i+0x16e>
 8006060:	2320      	movs	r3, #32
 8006062:	4313      	orrs	r3, r2
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	2e00      	cmp	r6, #0
 8006068:	d001      	beq.n	800606e <_printf_i+0x176>
 800606a:	2710      	movs	r7, #16
 800606c:	e7aa      	b.n	8005fc4 <_printf_i+0xcc>
 800606e:	2220      	movs	r2, #32
 8006070:	6823      	ldr	r3, [r4, #0]
 8006072:	4393      	bics	r3, r2
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	e7f8      	b.n	800606a <_printf_i+0x172>
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	680d      	ldr	r5, [r1, #0]
 800607c:	1d10      	adds	r0, r2, #4
 800607e:	6949      	ldr	r1, [r1, #20]
 8006080:	6018      	str	r0, [r3, #0]
 8006082:	6813      	ldr	r3, [r2, #0]
 8006084:	062e      	lsls	r6, r5, #24
 8006086:	d501      	bpl.n	800608c <_printf_i+0x194>
 8006088:	6019      	str	r1, [r3, #0]
 800608a:	e002      	b.n	8006092 <_printf_i+0x19a>
 800608c:	066d      	lsls	r5, r5, #25
 800608e:	d5fb      	bpl.n	8006088 <_printf_i+0x190>
 8006090:	8019      	strh	r1, [r3, #0]
 8006092:	2300      	movs	r3, #0
 8006094:	9d03      	ldr	r5, [sp, #12]
 8006096:	6123      	str	r3, [r4, #16]
 8006098:	e7bf      	b.n	800601a <_printf_i+0x122>
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	1d11      	adds	r1, r2, #4
 800609e:	6019      	str	r1, [r3, #0]
 80060a0:	6815      	ldr	r5, [r2, #0]
 80060a2:	2100      	movs	r1, #0
 80060a4:	0028      	movs	r0, r5
 80060a6:	6862      	ldr	r2, [r4, #4]
 80060a8:	f000 f856 	bl	8006158 <memchr>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d001      	beq.n	80060b4 <_printf_i+0x1bc>
 80060b0:	1b40      	subs	r0, r0, r5
 80060b2:	6060      	str	r0, [r4, #4]
 80060b4:	6863      	ldr	r3, [r4, #4]
 80060b6:	6123      	str	r3, [r4, #16]
 80060b8:	2300      	movs	r3, #0
 80060ba:	9a03      	ldr	r2, [sp, #12]
 80060bc:	7013      	strb	r3, [r2, #0]
 80060be:	e7ac      	b.n	800601a <_printf_i+0x122>
 80060c0:	002a      	movs	r2, r5
 80060c2:	6923      	ldr	r3, [r4, #16]
 80060c4:	9906      	ldr	r1, [sp, #24]
 80060c6:	9805      	ldr	r0, [sp, #20]
 80060c8:	9d07      	ldr	r5, [sp, #28]
 80060ca:	47a8      	blx	r5
 80060cc:	3001      	adds	r0, #1
 80060ce:	d0ae      	beq.n	800602e <_printf_i+0x136>
 80060d0:	6823      	ldr	r3, [r4, #0]
 80060d2:	079b      	lsls	r3, r3, #30
 80060d4:	d415      	bmi.n	8006102 <_printf_i+0x20a>
 80060d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d8:	68e0      	ldr	r0, [r4, #12]
 80060da:	4298      	cmp	r0, r3
 80060dc:	daa9      	bge.n	8006032 <_printf_i+0x13a>
 80060de:	0018      	movs	r0, r3
 80060e0:	e7a7      	b.n	8006032 <_printf_i+0x13a>
 80060e2:	0022      	movs	r2, r4
 80060e4:	2301      	movs	r3, #1
 80060e6:	9906      	ldr	r1, [sp, #24]
 80060e8:	9805      	ldr	r0, [sp, #20]
 80060ea:	9e07      	ldr	r6, [sp, #28]
 80060ec:	3219      	adds	r2, #25
 80060ee:	47b0      	blx	r6
 80060f0:	3001      	adds	r0, #1
 80060f2:	d09c      	beq.n	800602e <_printf_i+0x136>
 80060f4:	3501      	adds	r5, #1
 80060f6:	68e3      	ldr	r3, [r4, #12]
 80060f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80060fa:	1a9b      	subs	r3, r3, r2
 80060fc:	42ab      	cmp	r3, r5
 80060fe:	dcf0      	bgt.n	80060e2 <_printf_i+0x1ea>
 8006100:	e7e9      	b.n	80060d6 <_printf_i+0x1de>
 8006102:	2500      	movs	r5, #0
 8006104:	e7f7      	b.n	80060f6 <_printf_i+0x1fe>
 8006106:	46c0      	nop			@ (mov r8, r8)
 8006108:	080067fd 	.word	0x080067fd
 800610c:	0800680e 	.word	0x0800680e

08006110 <memmove>:
 8006110:	b510      	push	{r4, lr}
 8006112:	4288      	cmp	r0, r1
 8006114:	d902      	bls.n	800611c <memmove+0xc>
 8006116:	188b      	adds	r3, r1, r2
 8006118:	4298      	cmp	r0, r3
 800611a:	d308      	bcc.n	800612e <memmove+0x1e>
 800611c:	2300      	movs	r3, #0
 800611e:	429a      	cmp	r2, r3
 8006120:	d007      	beq.n	8006132 <memmove+0x22>
 8006122:	5ccc      	ldrb	r4, [r1, r3]
 8006124:	54c4      	strb	r4, [r0, r3]
 8006126:	3301      	adds	r3, #1
 8006128:	e7f9      	b.n	800611e <memmove+0xe>
 800612a:	5c8b      	ldrb	r3, [r1, r2]
 800612c:	5483      	strb	r3, [r0, r2]
 800612e:	3a01      	subs	r2, #1
 8006130:	d2fb      	bcs.n	800612a <memmove+0x1a>
 8006132:	bd10      	pop	{r4, pc}

08006134 <_sbrk_r>:
 8006134:	2300      	movs	r3, #0
 8006136:	b570      	push	{r4, r5, r6, lr}
 8006138:	4d06      	ldr	r5, [pc, #24]	@ (8006154 <_sbrk_r+0x20>)
 800613a:	0004      	movs	r4, r0
 800613c:	0008      	movs	r0, r1
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	f7fb fe12 	bl	8001d68 <_sbrk>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d103      	bne.n	8006150 <_sbrk_r+0x1c>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d000      	beq.n	8006150 <_sbrk_r+0x1c>
 800614e:	6023      	str	r3, [r4, #0]
 8006150:	bd70      	pop	{r4, r5, r6, pc}
 8006152:	46c0      	nop			@ (mov r8, r8)
 8006154:	20000344 	.word	0x20000344

08006158 <memchr>:
 8006158:	b2c9      	uxtb	r1, r1
 800615a:	1882      	adds	r2, r0, r2
 800615c:	4290      	cmp	r0, r2
 800615e:	d101      	bne.n	8006164 <memchr+0xc>
 8006160:	2000      	movs	r0, #0
 8006162:	4770      	bx	lr
 8006164:	7803      	ldrb	r3, [r0, #0]
 8006166:	428b      	cmp	r3, r1
 8006168:	d0fb      	beq.n	8006162 <memchr+0xa>
 800616a:	3001      	adds	r0, #1
 800616c:	e7f6      	b.n	800615c <memchr+0x4>

0800616e <memcpy>:
 800616e:	2300      	movs	r3, #0
 8006170:	b510      	push	{r4, lr}
 8006172:	429a      	cmp	r2, r3
 8006174:	d100      	bne.n	8006178 <memcpy+0xa>
 8006176:	bd10      	pop	{r4, pc}
 8006178:	5ccc      	ldrb	r4, [r1, r3]
 800617a:	54c4      	strb	r4, [r0, r3]
 800617c:	3301      	adds	r3, #1
 800617e:	e7f8      	b.n	8006172 <memcpy+0x4>

08006180 <_realloc_r>:
 8006180:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006182:	0006      	movs	r6, r0
 8006184:	000c      	movs	r4, r1
 8006186:	0015      	movs	r5, r2
 8006188:	2900      	cmp	r1, #0
 800618a:	d105      	bne.n	8006198 <_realloc_r+0x18>
 800618c:	0011      	movs	r1, r2
 800618e:	f7ff fc55 	bl	8005a3c <_malloc_r>
 8006192:	0004      	movs	r4, r0
 8006194:	0020      	movs	r0, r4
 8006196:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006198:	2a00      	cmp	r2, #0
 800619a:	d103      	bne.n	80061a4 <_realloc_r+0x24>
 800619c:	f7ff fbe2 	bl	8005964 <_free_r>
 80061a0:	002c      	movs	r4, r5
 80061a2:	e7f7      	b.n	8006194 <_realloc_r+0x14>
 80061a4:	f000 f81c 	bl	80061e0 <_malloc_usable_size_r>
 80061a8:	0007      	movs	r7, r0
 80061aa:	4285      	cmp	r5, r0
 80061ac:	d802      	bhi.n	80061b4 <_realloc_r+0x34>
 80061ae:	0843      	lsrs	r3, r0, #1
 80061b0:	42ab      	cmp	r3, r5
 80061b2:	d3ef      	bcc.n	8006194 <_realloc_r+0x14>
 80061b4:	0029      	movs	r1, r5
 80061b6:	0030      	movs	r0, r6
 80061b8:	f7ff fc40 	bl	8005a3c <_malloc_r>
 80061bc:	9001      	str	r0, [sp, #4]
 80061be:	2800      	cmp	r0, #0
 80061c0:	d101      	bne.n	80061c6 <_realloc_r+0x46>
 80061c2:	9c01      	ldr	r4, [sp, #4]
 80061c4:	e7e6      	b.n	8006194 <_realloc_r+0x14>
 80061c6:	002a      	movs	r2, r5
 80061c8:	42bd      	cmp	r5, r7
 80061ca:	d900      	bls.n	80061ce <_realloc_r+0x4e>
 80061cc:	003a      	movs	r2, r7
 80061ce:	0021      	movs	r1, r4
 80061d0:	9801      	ldr	r0, [sp, #4]
 80061d2:	f7ff ffcc 	bl	800616e <memcpy>
 80061d6:	0021      	movs	r1, r4
 80061d8:	0030      	movs	r0, r6
 80061da:	f7ff fbc3 	bl	8005964 <_free_r>
 80061de:	e7f0      	b.n	80061c2 <_realloc_r+0x42>

080061e0 <_malloc_usable_size_r>:
 80061e0:	1f0b      	subs	r3, r1, #4
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	1f18      	subs	r0, r3, #4
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	da01      	bge.n	80061ee <_malloc_usable_size_r+0xe>
 80061ea:	580b      	ldr	r3, [r1, r0]
 80061ec:	18c0      	adds	r0, r0, r3
 80061ee:	4770      	bx	lr

080061f0 <_init>:
 80061f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f2:	46c0      	nop			@ (mov r8, r8)
 80061f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f6:	bc08      	pop	{r3}
 80061f8:	469e      	mov	lr, r3
 80061fa:	4770      	bx	lr

080061fc <_fini>:
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fe:	46c0      	nop			@ (mov r8, r8)
 8006200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006202:	bc08      	pop	{r3}
 8006204:	469e      	mov	lr, r3
 8006206:	4770      	bx	lr
