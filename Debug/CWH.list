
CWH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d0c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08005dcc  08005dcc  00006dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061a8  080061a8  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080061a8  080061a8  000071a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061b0  080061b0  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061b0  080061b0  000071b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061b4  080061b4  000071b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080061b8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000005c  08006214  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  08006214  00008368  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b9e  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b05  00000000  00000000  00018c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  0001b728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf0  00000000  00000000  0001c698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000151b6  00000000  00000000  0001d288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013741  00000000  00000000  0003243e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086c54  00000000  00000000  00045b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc7d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf8  00000000  00000000  000cc818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000d0410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005db4 	.word	0x08005db4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08005db4 	.word	0x08005db4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <ATC_SendReceive>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int ATC_SendReceive(ATC_HandleTypeDef *lora, const char *command, uint32_t command_len, char *response, uint32_t response_size, uint32_t timeout_ms, const char *expected_response)
{
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b089      	sub	sp, #36	@ 0x24
 8000474:	af02      	add	r7, sp, #8
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
 800047c:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status;

    if (lora == NULL || lora->huart == NULL || command == NULL || command_len == 0) {
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d009      	beq.n	8000498 <ATC_SendReceive+0x28>
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d005      	beq.n	8000498 <ATC_SendReceive+0x28>
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <ATC_SendReceive+0x28>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d102      	bne.n	800049e <ATC_SendReceive+0x2e>
        return -1; // Invalid parameters
 8000498:	2301      	movs	r3, #1
 800049a:	425b      	negs	r3, r3
 800049c:	e05b      	b.n	8000556 <ATC_SendReceive+0xe6>
    }

    HAL_UART_Transmit(lora->huart,  (uint8_t *)"AT\r\n", 4, 200); // Do this to prevent WAKE annoyance
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	6818      	ldr	r0, [r3, #0]
 80004a2:	492f      	ldr	r1, [pc, #188]	@ (8000560 <ATC_SendReceive+0xf0>)
 80004a4:	23c8      	movs	r3, #200	@ 0xc8
 80004a6:	2204      	movs	r2, #4
 80004a8:	f004 f8f4 	bl	8004694 <HAL_UART_Transmit>

    status = HAL_UART_Transmit(lora->huart, (uint8_t *)command, command_len, timeout_ms);
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	6818      	ldr	r0, [r3, #0]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	b29a      	uxth	r2, r3
 80004b4:	2517      	movs	r5, #23
 80004b6:	197c      	adds	r4, r7, r5
 80004b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004ba:	68b9      	ldr	r1, [r7, #8]
 80004bc:	f004 f8ea 	bl	8004694 <HAL_UART_Transmit>
 80004c0:	0003      	movs	r3, r0
 80004c2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80004c4:	197b      	adds	r3, r7, r5
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d002      	beq.n	80004d2 <ATC_SendReceive+0x62>
        return -2; // Communication error
 80004cc:	2302      	movs	r3, #2
 80004ce:	425b      	negs	r3, r3
 80004d0:	e041      	b.n	8000556 <ATC_SendReceive+0xe6>
    }

    if (response != NULL && response_size > 0) {
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d02c      	beq.n	8000532 <ATC_SendReceive+0xc2>
 80004d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d029      	beq.n	8000532 <ATC_SendReceive+0xc2>
        uint16_t rx_len = 0;
 80004de:	2514      	movs	r5, #20
 80004e0:	197b      	adds	r3, r7, r5
 80004e2:	2200      	movs	r2, #0
 80004e4:	801a      	strh	r2, [r3, #0]
        memset(response, 0, response_size);
 80004e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	2100      	movs	r1, #0
 80004ec:	0018      	movs	r0, r3
 80004ee:	f004 ffcf 	bl	8005490 <memset>
        status = HAL_UARTEx_ReceiveToIdle(lora->huart, (uint8_t *)response,
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	6818      	ldr	r0, [r3, #0]
 80004f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	3b01      	subs	r3, #1
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	2617      	movs	r6, #23
 8000500:	19bc      	adds	r4, r7, r6
 8000502:	197d      	adds	r5, r7, r5
 8000504:	6839      	ldr	r1, [r7, #0]
 8000506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	002b      	movs	r3, r5
 800050c:	f004 fe30 	bl	8005170 <HAL_UARTEx_ReceiveToIdle>
 8000510:	0003      	movs	r3, r0
 8000512:	7023      	strb	r3, [r4, #0]
                                          response_size - 1, &rx_len, timeout_ms);
        if (status != HAL_OK) {
 8000514:	19bb      	adds	r3, r7, r6
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <ATC_SendReceive+0xb2>
            return -4; // Timeout or receive error
 800051c:	2304      	movs	r3, #4
 800051e:	425b      	negs	r3, r3
 8000520:	e019      	b.n	8000556 <ATC_SendReceive+0xe6>
        }
        response[rx_len] = '\0';
 8000522:	2314      	movs	r3, #20
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	881b      	ldrh	r3, [r3, #0]
 8000528:	001a      	movs	r2, r3
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	189b      	adds	r3, r3, r2
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
    }

    if (expected_response != NULL && response != NULL) {
 8000532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000534:	2b00      	cmp	r3, #0
 8000536:	d00d      	beq.n	8000554 <ATC_SendReceive+0xe4>
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d00a      	beq.n	8000554 <ATC_SendReceive+0xe4>
        if (strstr(response, expected_response) == NULL) {
 800053e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	0011      	movs	r1, r2
 8000544:	0018      	movs	r0, r3
 8000546:	f004 ffab 	bl	80054a0 <strstr>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d102      	bne.n	8000554 <ATC_SendReceive+0xe4>
            return -3; // Unexpected response
 800054e:	2303      	movs	r3, #3
 8000550:	425b      	negs	r3, r3
 8000552:	e000      	b.n	8000556 <ATC_SendReceive+0xe6>
        }
    }

    return 0; // Success
 8000554:	2300      	movs	r3, #0
}
 8000556:	0018      	movs	r0, r3
 8000558:	46bd      	mov	sp, r7
 800055a:	b007      	add	sp, #28
 800055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	08005dcc 	.word	0x08005dcc

08000564 <send_data_and_get_response>:
// Wrapper function to send data and get response
LoRaWAN_Error_t send_data_and_get_response(ATC_HandleTypeDef *lora, const char *data, char *response, uint32_t response_size, uint32_t timeout_ms, const char *expected_response)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b08b      	sub	sp, #44	@ 0x2c
 8000568:	af04      	add	r7, sp, #16
 800056a:	60f8      	str	r0, [r7, #12]
 800056c:	60b9      	str	r1, [r7, #8]
 800056e:	607a      	str	r2, [r7, #4]
 8000570:	603b      	str	r3, [r7, #0]
    if (lora == NULL || lora->huart == NULL || data == NULL || response == NULL || response_size == 0) {
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d00c      	beq.n	8000592 <send_data_and_get_response+0x2e>
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d008      	beq.n	8000592 <send_data_and_get_response+0x2e>
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d005      	beq.n	8000592 <send_data_and_get_response+0x2e>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <send_data_and_get_response+0x2e>
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d102      	bne.n	8000598 <send_data_and_get_response+0x34>
        return LORAWAN_ERROR_INVALID_PARAM;
 8000592:	2301      	movs	r3, #1
 8000594:	425b      	negs	r3, r3
 8000596:	e03e      	b.n	8000616 <send_data_and_get_response+0xb2>
    }

    ATC_SendReceive(lora, "AT\r\n", 4, response, response_size, timeout_ms, expected_response);
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4921      	ldr	r1, [pc, #132]	@ (8000620 <send_data_and_get_response+0xbc>)
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005a0:	9302      	str	r3, [sp, #8]
 80005a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005a4:	9301      	str	r3, [sp, #4]
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	9300      	str	r3, [sp, #0]
 80005aa:	0013      	movs	r3, r2
 80005ac:	2204      	movs	r2, #4
 80005ae:	f7ff ff5f 	bl	8000470 <ATC_SendReceive>
    HAL_Delay(300);
 80005b2:	2396      	movs	r3, #150	@ 0x96
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 f988 	bl	80018cc <HAL_Delay>
    int result = ATC_SendReceive(lora, data, strlen(data), response, response_size, timeout_ms, expected_response);
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff fda2 	bl	8000108 <strlen>
 80005c4:	0004      	movs	r4, r0
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	68b9      	ldr	r1, [r7, #8]
 80005ca:	68f8      	ldr	r0, [r7, #12]
 80005cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005ce:	9302      	str	r3, [sp, #8]
 80005d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005d2:	9301      	str	r3, [sp, #4]
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	0013      	movs	r3, r2
 80005da:	0022      	movs	r2, r4
 80005dc:	f7ff ff48 	bl	8000470 <ATC_SendReceive>
 80005e0:	0003      	movs	r3, r0
 80005e2:	617b      	str	r3, [r7, #20]

    if (result == -1) {
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	3301      	adds	r3, #1
 80005e8:	d102      	bne.n	80005f0 <send_data_and_get_response+0x8c>
        return LORAWAN_ERROR_INVALID_PARAM;
 80005ea:	2301      	movs	r3, #1
 80005ec:	425b      	negs	r3, r3
 80005ee:	e012      	b.n	8000616 <send_data_and_get_response+0xb2>
    } else if (result == -2) {
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	3302      	adds	r3, #2
 80005f4:	d102      	bne.n	80005fc <send_data_and_get_response+0x98>
        return LORAWAN_ERROR_COMMUNICATION;
 80005f6:	2302      	movs	r3, #2
 80005f8:	425b      	negs	r3, r3
 80005fa:	e00c      	b.n	8000616 <send_data_and_get_response+0xb2>
    } else if (result == -3) {
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	3303      	adds	r3, #3
 8000600:	d102      	bne.n	8000608 <send_data_and_get_response+0xa4>
        return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 8000602:	2303      	movs	r3, #3
 8000604:	425b      	negs	r3, r3
 8000606:	e006      	b.n	8000616 <send_data_and_get_response+0xb2>
    } else if (result == -4) {
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	3304      	adds	r3, #4
 800060c:	d102      	bne.n	8000614 <send_data_and_get_response+0xb0>
        return LORAWAN_ERROR_TIMEOUT;
 800060e:	2304      	movs	r3, #4
 8000610:	425b      	negs	r3, r3
 8000612:	e000      	b.n	8000616 <send_data_and_get_response+0xb2>
    }

    return LORAWAN_ERROR_OK;
 8000614:	2300      	movs	r3, #0
}
 8000616:	0018      	movs	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	b007      	add	sp, #28
 800061c:	bd90      	pop	{r4, r7, pc}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	08005dcc 	.word	0x08005dcc

08000624 <join_lora_network>:
LoRaWAN_Error_t join_lora_network(ATC_HandleTypeDef *lora)
{
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	b0c7      	sub	sp, #284	@ 0x11c
 8000628:	af02      	add	r7, sp, #8
 800062a:	6078      	str	r0, [r7, #4]
    char response[AT_RESPONSE_BUFFER_SIZE];
    LoRaWAN_Error_t status;

    status = send_data_and_get_response(lora, "AT+JOIN\r\n", response, AT_RESPONSE_BUFFER_SIZE, JOIN_TIMEOUT_MS, "OK");
 800062c:	2610      	movs	r6, #16
 800062e:	36ff      	adds	r6, #255	@ 0xff
 8000630:	19bc      	adds	r4, r7, r6
 8000632:	2380      	movs	r3, #128	@ 0x80
 8000634:	005d      	lsls	r5, r3, #1
 8000636:	230c      	movs	r3, #12
 8000638:	18fa      	adds	r2, r7, r3
 800063a:	4940      	ldr	r1, [pc, #256]	@ (800073c <join_lora_network+0x118>)
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	4b40      	ldr	r3, [pc, #256]	@ (8000740 <join_lora_network+0x11c>)
 8000640:	9301      	str	r3, [sp, #4]
 8000642:	4b40      	ldr	r3, [pc, #256]	@ (8000744 <join_lora_network+0x120>)
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	002b      	movs	r3, r5
 8000648:	f7ff ff8c 	bl	8000564 <send_data_and_get_response>
 800064c:	0003      	movs	r3, r0
 800064e:	7023      	strb	r3, [r4, #0]
    if (status != LORAWAN_ERROR_OK) {
 8000650:	19bb      	adds	r3, r7, r6
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b25b      	sxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d00b      	beq.n	8000672 <join_lora_network+0x4e>
        ConsolePrintf("Failed to send AT+JOIN: %d\r\n", status);
 800065a:	19bb      	adds	r3, r7, r6
 800065c:	2200      	movs	r2, #0
 800065e:	569a      	ldrsb	r2, [r3, r2]
 8000660:	4b39      	ldr	r3, [pc, #228]	@ (8000748 <join_lora_network+0x124>)
 8000662:	0011      	movs	r1, r2
 8000664:	0018      	movs	r0, r3
 8000666:	f000 fb4d 	bl	8000d04 <ConsolePrintf>
        return status;
 800066a:	19bb      	adds	r3, r7, r6
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	b25b      	sxtb	r3, r3
 8000670:	e05f      	b.n	8000732 <join_lora_network+0x10e>
    }

    memset(response, 0, AT_RESPONSE_BUFFER_SIZE);
 8000672:	2380      	movs	r3, #128	@ 0x80
 8000674:	005a      	lsls	r2, r3, #1
 8000676:	260c      	movs	r6, #12
 8000678:	19bb      	adds	r3, r7, r6
 800067a:	2100      	movs	r1, #0
 800067c:	0018      	movs	r0, r3
 800067e:	f004 ff07 	bl	8005490 <memset>
    uint16_t rx_len = 0;
 8000682:	4b32      	ldr	r3, [pc, #200]	@ (800074c <join_lora_network+0x128>)
 8000684:	2288      	movs	r2, #136	@ 0x88
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	189b      	adds	r3, r3, r2
 800068a:	19db      	adds	r3, r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef hal_status = HAL_UARTEx_ReceiveToIdle(lora->huart,
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6818      	ldr	r0, [r3, #0]
 8000694:	2587      	movs	r5, #135	@ 0x87
 8000696:	006d      	lsls	r5, r5, #1
 8000698:	197c      	adds	r4, r7, r5
 800069a:	230a      	movs	r3, #10
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	19b9      	adds	r1, r7, r6
 80006a0:	4a28      	ldr	r2, [pc, #160]	@ (8000744 <join_lora_network+0x120>)
 80006a2:	9200      	str	r2, [sp, #0]
 80006a4:	22ff      	movs	r2, #255	@ 0xff
 80006a6:	f004 fd63 	bl	8005170 <HAL_UARTEx_ReceiveToIdle>
 80006aa:	0003      	movs	r3, r0
 80006ac:	7023      	strb	r3, [r4, #0]
                                            (uint8_t *)response,
                                            AT_RESPONSE_BUFFER_SIZE - 1,
                                            &rx_len,
                                            JOIN_TIMEOUT_MS);
    if (hal_status != HAL_OK) {
 80006ae:	197b      	adds	r3, r7, r5
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d009      	beq.n	80006ca <join_lora_network+0xa6>
        ConsolePrintf("Failed to receive join response: %d\r\n", hal_status);
 80006b6:	197b      	adds	r3, r7, r5
 80006b8:	781a      	ldrb	r2, [r3, #0]
 80006ba:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <join_lora_network+0x12c>)
 80006bc:	0011      	movs	r1, r2
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 fb20 	bl	8000d04 <ConsolePrintf>
        return LORAWAN_ERROR_TIMEOUT;
 80006c4:	2304      	movs	r3, #4
 80006c6:	425b      	negs	r3, r3
 80006c8:	e033      	b.n	8000732 <join_lora_network+0x10e>
    }
    response[rx_len] = '\0';
 80006ca:	4b20      	ldr	r3, [pc, #128]	@ (800074c <join_lora_network+0x128>)
 80006cc:	2188      	movs	r1, #136	@ 0x88
 80006ce:	0049      	lsls	r1, r1, #1
 80006d0:	185b      	adds	r3, r3, r1
 80006d2:	19db      	adds	r3, r3, r7
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	001a      	movs	r2, r3
 80006d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <join_lora_network+0x130>)
 80006da:	185b      	adds	r3, r3, r1
 80006dc:	19db      	adds	r3, r3, r7
 80006de:	2100      	movs	r1, #0
 80006e0:	5499      	strb	r1, [r3, r2]

    if (strstr(response, "JOINED") != NULL) {
 80006e2:	4a1d      	ldr	r2, [pc, #116]	@ (8000758 <join_lora_network+0x134>)
 80006e4:	230c      	movs	r3, #12
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	0011      	movs	r1, r2
 80006ea:	0018      	movs	r0, r3
 80006ec:	f004 fed8 	bl	80054a0 <strstr>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d005      	beq.n	8000700 <join_lora_network+0xdc>
        ConsolePrintf("Network joined successfullyrr\r\n");
 80006f4:	4b19      	ldr	r3, [pc, #100]	@ (800075c <join_lora_network+0x138>)
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 fb04 	bl	8000d04 <ConsolePrintf>
        return LORAWAN_ERROR_OK;
 80006fc:	2300      	movs	r3, #0
 80006fe:	e018      	b.n	8000732 <join_lora_network+0x10e>
    } else if (strstr(response, "JOIN FAILED") != NULL) {
 8000700:	4a17      	ldr	r2, [pc, #92]	@ (8000760 <join_lora_network+0x13c>)
 8000702:	230c      	movs	r3, #12
 8000704:	18fb      	adds	r3, r7, r3
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f004 fec9 	bl	80054a0 <strstr>
 800070e:	1e03      	subs	r3, r0, #0
 8000710:	d006      	beq.n	8000720 <join_lora_network+0xfc>
        ConsolePrintf("Failed to join network\r\n");
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <join_lora_network+0x140>)
 8000714:	0018      	movs	r0, r3
 8000716:	f000 faf5 	bl	8000d04 <ConsolePrintf>
        return LORAWAN_ERROR_NOT_JOINED;
 800071a:	2305      	movs	r3, #5
 800071c:	425b      	negs	r3, r3
 800071e:	e008      	b.n	8000732 <join_lora_network+0x10e>
    } else {
        ConsolePrintf("Unexpected join response: %s\r\n", response);
 8000720:	230c      	movs	r3, #12
 8000722:	18fa      	adds	r2, r7, r3
 8000724:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <join_lora_network+0x144>)
 8000726:	0011      	movs	r1, r2
 8000728:	0018      	movs	r0, r3
 800072a:	f000 faeb 	bl	8000d04 <ConsolePrintf>
        return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 800072e:	2303      	movs	r3, #3
 8000730:	425b      	negs	r3, r3
    }
}
 8000732:	0018      	movs	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	b045      	add	sp, #276	@ 0x114
 8000738:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	08005dd4 	.word	0x08005dd4
 8000740:	08005de0 	.word	0x08005de0
 8000744:	00002710 	.word	0x00002710
 8000748:	08005de4 	.word	0x08005de4
 800074c:	fffffefa 	.word	0xfffffefa
 8000750:	08005e04 	.word	0x08005e04
 8000754:	fffffefc 	.word	0xfffffefc
 8000758:	08005e2c 	.word	0x08005e2c
 800075c:	08005e34 	.word	0x08005e34
 8000760:	08005e54 	.word	0x08005e54
 8000764:	08005e60 	.word	0x08005e60
 8000768:	08005e7c 	.word	0x08005e7c

0800076c <RTC_IRQHandler>:




void RTC_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
    HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000770:	4b03      	ldr	r3, [pc, #12]	@ (8000780 <RTC_IRQHandler+0x14>)
 8000772:	0018      	movs	r0, r3
 8000774:	f003 fecc 	bl	8004510 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 8000778:	46c0      	nop			@ (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	200001dc 	.word	0x200001dc

08000784 <RTC_WakeUp_Init>:

void RTC_WakeUp_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	ConsolePrintf("Starting RTC Wake-Up Timer configuration\r\n");
 8000788:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <RTC_WakeUp_Init+0x5c>)
 800078a:	0018      	movs	r0, r3
 800078c:	f000 faba 	bl	8000d04 <ConsolePrintf>

	// Disable the Wake-Up Timer before configuring
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000790:	4b14      	ldr	r3, [pc, #80]	@ (80007e4 <RTC_WakeUp_Init+0x60>)
 8000792:	0018      	movs	r0, r3
 8000794:	f003 fe58 	bl	8004448 <HAL_RTCEx_DeactivateWakeUpTimer>
	ConsolePrintf("RTC Wake-Up Timer disabled\r\n");
 8000798:	4b13      	ldr	r3, [pc, #76]	@ (80007e8 <RTC_WakeUp_Init+0x64>)
 800079a:	0018      	movs	r0, r3
 800079c:	f000 fab2 	bl	8000d04 <ConsolePrintf>

	// Configure Wake-Up Timer for 60 seconds using LSI (~40 kHz)
	// With AsynchPrediv = 127, SynchPrediv = 255: CK_SPRE = 40,000 / (128 * 256) = ~1.22 Hz
	// For ~60 seconds: WakeUpCounter = (60 * 1.22) - 1 = ~72
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80007a0:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <RTC_WakeUp_Init+0x60>)
 80007a2:	2204      	movs	r2, #4
 80007a4:	213b      	movs	r1, #59	@ 0x3b
 80007a6:	0018      	movs	r0, r3
 80007a8:	f003 fd76 	bl	8004298 <HAL_RTCEx_SetWakeUpTimer_IT>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d004      	beq.n	80007ba <RTC_WakeUp_Init+0x36>
	{
		ConsolePrintf("RTC Wake-Up Timer Init Failed\r\n");
 80007b0:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <RTC_WakeUp_Init+0x68>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 faa6 	bl	8000d04 <ConsolePrintf>
 80007b8:	e003      	b.n	80007c2 <RTC_WakeUp_Init+0x3e>

	}
	else
	{
		ConsolePrintf("RTC Wake-Up Timer Initialized for ~60 seconds\r\n");
 80007ba:	4b0d      	ldr	r3, [pc, #52]	@ (80007f0 <RTC_WakeUp_Init+0x6c>)
 80007bc:	0018      	movs	r0, r3
 80007be:	f000 faa1 	bl	8000d04 <ConsolePrintf>
	}

	// Enable RTC Wake-Up interrupt in NVIC
	HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	2002      	movs	r0, #2
 80007c8:	f001 f974 	bl	8001ab4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_IRQn);
 80007cc:	2002      	movs	r0, #2
 80007ce:	f001 f986 	bl	8001ade <HAL_NVIC_EnableIRQ>
	ConsolePrintf("RTC Wake-Up interrupt enabled in NVIC\r\n");
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <RTC_WakeUp_Init+0x70>)
 80007d4:	0018      	movs	r0, r3
 80007d6:	f000 fa95 	bl	8000d04 <ConsolePrintf>
}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	08005e9c 	.word	0x08005e9c
 80007e4:	200001dc 	.word	0x200001dc
 80007e8:	08005ec8 	.word	0x08005ec8
 80007ec:	08005ee8 	.word	0x08005ee8
 80007f0:	08005f08 	.word	0x08005f08
 80007f4:	08005f38 	.word	0x08005f38

080007f8 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
    // Reconfigure system clock after wake-up
    SystemClock_Config();
 8000800:	f000 f8f2 	bl	80009e8 <SystemClock_Config>

    // Print message
    ConsolePrintf("Woke up at %s\r\n", "1-minute interval");
 8000804:	4a04      	ldr	r2, [pc, #16]	@ (8000818 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 8000806:	4b05      	ldr	r3, [pc, #20]	@ (800081c <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8000808:	0011      	movs	r1, r2
 800080a:	0018      	movs	r0, r3
 800080c:	f000 fa7a 	bl	8000d04 <ConsolePrintf>
}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b002      	add	sp, #8
 8000816:	bd80      	pop	{r7, pc}
 8000818:	08005f60 	.word	0x08005f60
 800081c:	08005f74 	.word	0x08005f74

08000820 <Enter_Stop_Mode>:

void Enter_Stop_Mode(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
        ConsolePrintf("Preparing to enter Stop mode\r\n");
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <Enter_Stop_Mode+0x50>)
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fa6c 	bl	8000d04 <ConsolePrintf>

    // Clear Wake-Up flag
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <Enter_Stop_Mode+0x54>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	68db      	ldr	r3, [r3, #12]
 8000832:	22ff      	movs	r2, #255	@ 0xff
 8000834:	401a      	ands	r2, r3
 8000836:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <Enter_Stop_Mode+0x54>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	490f      	ldr	r1, [pc, #60]	@ (8000878 <Enter_Stop_Mode+0x58>)
 800083c:	430a      	orrs	r2, r1
 800083e:	60da      	str	r2, [r3, #12]
    ConsolePrintf("RTC Wake-Up flag cleared\r\n");
 8000840:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <Enter_Stop_Mode+0x5c>)
 8000842:	0018      	movs	r0, r3
 8000844:	f000 fa5e 	bl	8000d04 <ConsolePrintf>

    // Enter Stop mode (low-power mode)
    ConsolePrintf("Entering Stop mode\r\n");
 8000848:	4b0d      	ldr	r3, [pc, #52]	@ (8000880 <Enter_Stop_Mode+0x60>)
 800084a:	0018      	movs	r0, r3
 800084c:	f000 fa5a 	bl	8000d04 <ConsolePrintf>
    /* Suspend SysTick to prevent it from waking up the MCU immediately */
    HAL_SuspendTick();
 8000850:	f001 f860 	bl	8001914 <HAL_SuspendTick>
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000854:	2101      	movs	r1, #1
 8000856:	2001      	movs	r0, #1
 8000858:	f002 fb4c 	bl	8002ef4 <HAL_PWR_EnterSTOPMode>
    /* Resume SysTick after waking up */
    HAL_ResumeTick();
 800085c:	f001 f868 	bl	8001930 <HAL_ResumeTick>
    ConsolePrintf("Exited Stop mode\r\n");
 8000860:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <Enter_Stop_Mode+0x64>)
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fa4e 	bl	8000d04 <ConsolePrintf>
}
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	08005f84 	.word	0x08005f84
 8000874:	200001dc 	.word	0x200001dc
 8000878:	fffffb7f 	.word	0xfffffb7f
 800087c:	08005fa4 	.word	0x08005fa4
 8000880:	08005fc0 	.word	0x08005fc0
 8000884:	08005fd8 	.word	0x08005fd8

08000888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800088e:	f000 ffad 	bl	80017ec <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(10000);
 8000892:	4b47      	ldr	r3, [pc, #284]	@ (80009b0 <main+0x128>)
 8000894:	0018      	movs	r0, r3
 8000896:	f001 f819 	bl	80018cc <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089a:	f000 f8a5 	bl	80009e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800089e:	f000 f9ed 	bl	8000c7c <MX_GPIO_Init>
  MX_I2C1_Init();
 80008a2:	f000 f919 	bl	8000ad8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80008a6:	f000 f989 	bl	8000bbc <MX_USART1_UART_Init>
  MX_RTC_Init();
 80008aa:	f000 f9bd 	bl	8000c28 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80008ae:	f000 f953 	bl	8000b58 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  RTC_WakeUp_Init();
 80008b2:	f7ff ff67 	bl	8000784 <RTC_WakeUp_Init>

  /* Scan the I2C bus and read sensors once at startup */
  scan_i2c_bus();
 80008b6:	f000 fc3b 	bl	8001130 <scan_i2c_bus>
  sensor_init_and_read();
 80008ba:	f000 fc77 	bl	80011ac <sensor_init_and_read>

  join_lora_network(&lora);
 80008be:	4b3d      	ldr	r3, [pc, #244]	@ (80009b4 <main+0x12c>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f7ff feaf 	bl	8000624 <join_lora_network>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ConsolePrintf("Entering main loop\r\n");
 80008c6:	4b3c      	ldr	r3, [pc, #240]	@ (80009b8 <main+0x130>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f000 fa1b 	bl	8000d04 <ConsolePrintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ConsolePrintf("Going to sleep...\r\n");
 80008ce:	4b3b      	ldr	r3, [pc, #236]	@ (80009bc <main+0x134>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 fa17 	bl	8000d04 <ConsolePrintf>

	  		HAL_I2C_DeInit(&hi2c1);
 80008d6:	4b3a      	ldr	r3, [pc, #232]	@ (80009c0 <main+0x138>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f001 fc41 	bl	8002160 <HAL_I2C_DeInit>
	  		HAL_UART_DeInit(&huart1);
 80008de:	4b39      	ldr	r3, [pc, #228]	@ (80009c4 <main+0x13c>)
 80008e0:	0018      	movs	r0, r3
 80008e2:	f003 fe99 	bl	8004618 <HAL_UART_DeInit>
	  		// De-init LPUART1 (LoRaWAN UART)
	  		HAL_UART_DeInit(&hlpuart1);
 80008e6:	4b38      	ldr	r3, [pc, #224]	@ (80009c8 <main+0x140>)
 80008e8:	0018      	movs	r0, r3
 80008ea:	f003 fe95 	bl	8004618 <HAL_UART_DeInit>

	  		// Disable LPUART wake-up from Stop mode
	  		__HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_RXNE); // Disable RXNE interrupt
 80008ee:	4b36      	ldr	r3, [pc, #216]	@ (80009c8 <main+0x140>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b34      	ldr	r3, [pc, #208]	@ (80009c8 <main+0x140>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2120      	movs	r1, #32
 80008fa:	438a      	bics	r2, r1
 80008fc:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_IDLE); // Disable IDLE interrupt
 80008fe:	4b32      	ldr	r3, [pc, #200]	@ (80009c8 <main+0x140>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b30      	ldr	r3, [pc, #192]	@ (80009c8 <main+0x140>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2110      	movs	r1, #16
 800090a:	438a      	bics	r2, r1
 800090c:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 800090e:	4b2e      	ldr	r3, [pc, #184]	@ (80009c8 <main+0x140>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2230      	movs	r2, #48	@ 0x30
 8000914:	621a      	str	r2, [r3, #32]

	  		__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE); // Disable RXNE interrupt
 8000916:	4b2b      	ldr	r3, [pc, #172]	@ (80009c4 <main+0x13c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b29      	ldr	r3, [pc, #164]	@ (80009c4 <main+0x13c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2120      	movs	r1, #32
 8000922:	438a      	bics	r2, r1
 8000924:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE); // Disable IDLE interrupt
 8000926:	4b27      	ldr	r3, [pc, #156]	@ (80009c4 <main+0x13c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b25      	ldr	r3, [pc, #148]	@ (80009c4 <main+0x13c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2110      	movs	r1, #16
 8000932:	438a      	bics	r2, r1
 8000934:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 8000936:	4b23      	ldr	r3, [pc, #140]	@ (80009c4 <main+0x13c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2230      	movs	r2, #48	@ 0x30
 800093c:	621a      	str	r2, [r3, #32]


	  		// Enter Stop mode
	  		Enter_Stop_Mode();  // Wakes up via RTC interrupt
 800093e:	f7ff ff6f 	bl	8000820 <Enter_Stop_Mode>

	  		// === Code resumes after wake-up ===
	  		ConsolePrintf("Resumed after wake-up\r\n");
 8000942:	4b22      	ldr	r3, [pc, #136]	@ (80009cc <main+0x144>)
 8000944:	0018      	movs	r0, r3
 8000946:	f000 f9dd 	bl	8000d04 <ConsolePrintf>

                        // Reconfigure clocks
                        SystemClock_Config();
 800094a:	f000 f84d 	bl	80009e8 <SystemClock_Config>
                        ConsolePrintf("System clock reconfigured\r\n");
 800094e:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <main+0x148>)
 8000950:	0018      	movs	r0, r3
 8000952:	f000 f9d7 	bl	8000d04 <ConsolePrintf>

                        // Reinit I2C peripheral
                        MX_I2C1_Init();
 8000956:	f000 f8bf 	bl	8000ad8 <MX_I2C1_Init>
                        ConsolePrintf("I2C1 reinitialized\r\n");
 800095a:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <main+0x14c>)
 800095c:	0018      	movs	r0, r3
 800095e:	f000 f9d1 	bl	8000d04 <ConsolePrintf>

                        // Reinit UART
                        MX_USART1_UART_Init();
 8000962:	f000 f92b 	bl	8000bbc <MX_USART1_UART_Init>
                        ConsolePrintf("UART reinitialized\r\n");
 8000966:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <main+0x150>)
 8000968:	0018      	movs	r0, r3
 800096a:	f000 f9cb 	bl	8000d04 <ConsolePrintf>

	  		MX_LPUART1_UART_Init();
 800096e:	f000 f8f3 	bl	8000b58 <MX_LPUART1_UART_Init>
	  		ConsolePrintf("LPUART1 (lora) reinitialized\r\n");
 8000972:	4b1a      	ldr	r3, [pc, #104]	@ (80009dc <main+0x154>)
 8000974:	0018      	movs	r0, r3
 8000976:	f000 f9c5 	bl	8000d04 <ConsolePrintf>

	  		// Reinit WakeUp timer (MUST be outside the callback!)
	  		RTC_WakeUp_Init();
 800097a:	f7ff ff03 	bl	8000784 <RTC_WakeUp_Init>
	  		ConsolePrintf("RTC Wake-Up Timer reinitialized\r\n");
 800097e:	4b18      	ldr	r3, [pc, #96]	@ (80009e0 <main+0x158>)
 8000980:	0018      	movs	r0, r3
 8000982:	f000 f9bf 	bl	8000d04 <ConsolePrintf>

	  		HAL_GPIO_WritePin(I2C_ENABLE_PIN_GPIO_Port, I2C_ENABLE_PIN_Pin, GPIO_PIN_SET);
 8000986:	4b17      	ldr	r3, [pc, #92]	@ (80009e4 <main+0x15c>)
 8000988:	2201      	movs	r2, #1
 800098a:	2120      	movs	r1, #32
 800098c:	0018      	movs	r0, r3
 800098e:	f001 fb23 	bl	8001fd8 <HAL_GPIO_WritePin>
	  		scan_i2c_bus();
 8000992:	f000 fbcd 	bl	8001130 <scan_i2c_bus>
	  		int i2c_response = sensor_init_and_read();
 8000996:	f000 fc09 	bl	80011ac <sensor_init_and_read>
 800099a:	0003      	movs	r3, r0
 800099c:	607b      	str	r3, [r7, #4]
	  		HAL_GPIO_WritePin(I2C_ENABLE_PIN_GPIO_Port, I2C_ENABLE_PIN_Pin, GPIO_PIN_RESET);
 800099e:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <main+0x15c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	2120      	movs	r1, #32
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 fb17 	bl	8001fd8 <HAL_GPIO_WritePin>

//            char response[32];
//            ATC_SendReceive(&lora, "AT\r\n", strlen("AT\r\n"), response, sizeof(response), 5000, "OK");
//            char response2[64];
//            ATC_SendReceive(&lora, "AT+SEND \"AA\"\r\n", strlen("AT+SEND \"AA\"\r\n"), response2, sizeof(response2), 5000, "OK");
	  		__NOP();
 80009aa:	46c0      	nop			@ (mov r8, r8)
  {
 80009ac:	46c0      	nop			@ (mov r8, r8)
 80009ae:	e78e      	b.n	80008ce <main+0x46>
 80009b0:	00002710 	.word	0x00002710
 80009b4:	20000200 	.word	0x20000200
 80009b8:	08005fec 	.word	0x08005fec
 80009bc:	08006004 	.word	0x08006004
 80009c0:	20000078 	.word	0x20000078
 80009c4:	20000154 	.word	0x20000154
 80009c8:	200000cc 	.word	0x200000cc
 80009cc:	08006018 	.word	0x08006018
 80009d0:	08006030 	.word	0x08006030
 80009d4:	0800604c 	.word	0x0800604c
 80009d8:	08006064 	.word	0x08006064
 80009dc:	0800607c 	.word	0x0800607c
 80009e0:	0800609c 	.word	0x0800609c
 80009e4:	50000400 	.word	0x50000400

080009e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b09f      	sub	sp, #124	@ 0x7c
 80009ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ee:	2440      	movs	r4, #64	@ 0x40
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	0018      	movs	r0, r3
 80009f4:	2338      	movs	r3, #56	@ 0x38
 80009f6:	001a      	movs	r2, r3
 80009f8:	2100      	movs	r1, #0
 80009fa:	f004 fd49 	bl	8005490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009fe:	232c      	movs	r3, #44	@ 0x2c
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	0018      	movs	r0, r3
 8000a04:	2314      	movs	r3, #20
 8000a06:	001a      	movs	r2, r3
 8000a08:	2100      	movs	r1, #0
 8000a0a:	f004 fd41 	bl	8005490 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	0018      	movs	r0, r3
 8000a12:	2328      	movs	r3, #40	@ 0x28
 8000a14:	001a      	movs	r2, r3
 8000a16:	2100      	movs	r1, #0
 8000a18:	f004 fd3a 	bl	8005490 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <SystemClock_Config+0xe8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a2c      	ldr	r2, [pc, #176]	@ (8000ad4 <SystemClock_Config+0xec>)
 8000a22:	401a      	ands	r2, r3
 8000a24:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad0 <SystemClock_Config+0xe8>)
 8000a26:	2180      	movs	r1, #128	@ 0x80
 8000a28:	0109      	lsls	r1, r1, #4
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000a2e:	0021      	movs	r1, r4
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2218      	movs	r2, #24
 8000a34:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2201      	movs	r2, #1
 8000a3a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2201      	movs	r2, #1
 8000a40:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	22a0      	movs	r2, #160	@ 0xa0
 8000a4c:	0212      	lsls	r2, r2, #8
 8000a4e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2200      	movs	r2, #0
 8000a54:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f002 faa7 	bl	8002fac <HAL_RCC_OscConfig>
 8000a5e:	1e03      	subs	r3, r0, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000a62:	f000 f9c5 	bl	8000df0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a66:	212c      	movs	r1, #44	@ 0x2c
 8000a68:	187b      	adds	r3, r7, r1
 8000a6a:	220f      	movs	r2, #15
 8000a6c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a6e:	187b      	adds	r3, r7, r1
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a74:	187b      	adds	r3, r7, r1
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a86:	187b      	adds	r3, r7, r1
 8000a88:	2100      	movs	r1, #0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f002 fe62 	bl	8003754 <HAL_RCC_ClockConfig>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a94:	f000 f9ac 	bl	8000df0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	222d      	movs	r2, #45	@ 0x2d
 8000a9c:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2280      	movs	r2, #128	@ 0x80
 8000ab4:	0292      	lsls	r2, r2, #10
 8000ab6:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	0018      	movs	r0, r3
 8000abc:	f003 f84e 	bl	8003b5c <HAL_RCCEx_PeriphCLKConfig>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000ac4:	f000 f994 	bl	8000df0 <Error_Handler>
  }
}
 8000ac8:	46c0      	nop			@ (mov r8, r8)
 8000aca:	46bd      	mov	sp, r7
 8000acc:	b01f      	add	sp, #124	@ 0x7c
 8000ace:	bd90      	pop	{r4, r7, pc}
 8000ad0:	40007000 	.word	0x40007000
 8000ad4:	ffffe7ff 	.word	0xffffe7ff

08000ad8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000adc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b50 <MX_I2C1_Init+0x78>)
 8000ade:	4a1d      	ldr	r2, [pc, #116]	@ (8000b54 <MX_I2C1_Init+0x7c>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <MX_I2C1_Init+0x78>)
 8000ae4:	22c1      	movs	r2, #193	@ 0xc1
 8000ae6:	00d2      	lsls	r2, r2, #3
 8000ae8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aea:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <MX_I2C1_Init+0x78>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000af0:	4b17      	ldr	r3, [pc, #92]	@ (8000b50 <MX_I2C1_Init+0x78>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af6:	4b16      	ldr	r3, [pc, #88]	@ (8000b50 <MX_I2C1_Init+0x78>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000afc:	4b14      	ldr	r3, [pc, #80]	@ (8000b50 <MX_I2C1_Init+0x78>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b02:	4b13      	ldr	r3, [pc, #76]	@ (8000b50 <MX_I2C1_Init+0x78>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b08:	4b11      	ldr	r3, [pc, #68]	@ (8000b50 <MX_I2C1_Init+0x78>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0e:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <MX_I2C1_Init+0x78>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b14:	4b0e      	ldr	r3, [pc, #56]	@ (8000b50 <MX_I2C1_Init+0x78>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f001 fa7c 	bl	8002014 <HAL_I2C_Init>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b20:	f000 f966 	bl	8000df0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b24:	4b0a      	ldr	r3, [pc, #40]	@ (8000b50 <MX_I2C1_Init+0x78>)
 8000b26:	2100      	movs	r1, #0
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f002 f94b 	bl	8002dc4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d001      	beq.n	8000b36 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000b32:	f000 f95d 	bl	8000df0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <MX_I2C1_Init+0x78>)
 8000b38:	2100      	movs	r1, #0
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f002 f98e 	bl	8002e5c <HAL_I2CEx_ConfigDigitalFilter>
 8000b40:	1e03      	subs	r3, r0, #0
 8000b42:	d001      	beq.n	8000b48 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b44:	f000 f954 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			@ (mov r8, r8)
 8000b50:	20000078 	.word	0x20000078
 8000b54:	40005400 	.word	0x40005400

08000b58 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	@ (8000bb0 <MX_LPUART1_UART_Init+0x58>)
 8000b5e:	4a15      	ldr	r2, [pc, #84]	@ (8000bb4 <MX_LPUART1_UART_Init+0x5c>)
 8000b60:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b62:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <MX_LPUART1_UART_Init+0x58>)
 8000b64:	22e1      	movs	r2, #225	@ 0xe1
 8000b66:	0252      	lsls	r2, r2, #9
 8000b68:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	@ (8000bb0 <MX_LPUART1_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb0 <MX_LPUART1_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <MX_LPUART1_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <MX_LPUART1_UART_Init+0x58>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <MX_LPUART1_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b88:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <MX_LPUART1_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8e:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <MX_LPUART1_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b94:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <MX_LPUART1_UART_Init+0x58>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f003 fcea 	bl	8004570 <HAL_UART_Init>
 8000b9c:	1e03      	subs	r3, r0, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000ba0:	f000 f926 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  lora.huart = &hlpuart1;
 8000ba4:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <MX_LPUART1_UART_Init+0x60>)
 8000ba6:	4a02      	ldr	r2, [pc, #8]	@ (8000bb0 <MX_LPUART1_UART_Init+0x58>)
 8000ba8:	601a      	str	r2, [r3, #0]
  /* USER CODE END LPUART1_Init 2 */

}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	200000cc 	.word	0x200000cc
 8000bb4:	40004800 	.word	0x40004800
 8000bb8:	20000200 	.word	0x20000200

08000bbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc0:	4b16      	ldr	r3, [pc, #88]	@ (8000c1c <MX_USART1_UART_Init+0x60>)
 8000bc2:	4a17      	ldr	r2, [pc, #92]	@ (8000c20 <MX_USART1_UART_Init+0x64>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <MX_USART1_UART_Init+0x60>)
 8000bc8:	22e1      	movs	r2, #225	@ 0xe1
 8000bca:	0252      	lsls	r2, r2, #9
 8000bcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_USART1_UART_Init+0x60>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_USART1_UART_Init+0x60>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <MX_USART1_UART_Init+0x60>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_USART1_UART_Init+0x60>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <MX_USART1_UART_Init+0x60>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <MX_USART1_UART_Init+0x60>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c1c <MX_USART1_UART_Init+0x60>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf8:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <MX_USART1_UART_Init+0x60>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bfe:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <MX_USART1_UART_Init+0x60>)
 8000c00:	0018      	movs	r0, r3
 8000c02:	f003 fcb5 	bl	8004570 <HAL_UART_Init>
 8000c06:	1e03      	subs	r3, r0, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c0a:	f000 f8f1 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  ConsolePrintf("USART1 (DBG) Cnfigured\r\n");
 8000c0e:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <MX_USART1_UART_Init+0x68>)
 8000c10:	0018      	movs	r0, r3
 8000c12:	f000 f877 	bl	8000d04 <ConsolePrintf>
  /* USER CODE END USART1_Init 2 */

}
 8000c16:	46c0      	nop			@ (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000154 	.word	0x20000154
 8000c20:	40013800 	.word	0x40013800
 8000c24:	080060c0 	.word	0x080060c0

08000c28 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <MX_RTC_Init+0x4c>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	@ (8000c78 <MX_RTC_Init+0x50>)
 8000c30:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <MX_RTC_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c38:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <MX_RTC_Init+0x4c>)
 8000c3a:	227f      	movs	r2, #127	@ 0x7f
 8000c3c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000c74 <MX_RTC_Init+0x4c>)
 8000c40:	22ff      	movs	r2, #255	@ 0xff
 8000c42:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c44:	4b0b      	ldr	r3, [pc, #44]	@ (8000c74 <MX_RTC_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <MX_RTC_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c50:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <MX_RTC_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c56:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <MX_RTC_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <MX_RTC_Init+0x4c>)
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f003 f91a 	bl	8003e98 <HAL_RTC_Init>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d001      	beq.n	8000c6c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000c68:	f000 f8c2 	bl	8000df0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c6c:	46c0      	nop			@ (mov r8, r8)
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			@ (mov r8, r8)
 8000c74:	200001dc 	.word	0x200001dc
 8000c78:	40002800 	.word	0x40002800

08000c7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b089      	sub	sp, #36	@ 0x24
 8000c80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c82:	240c      	movs	r4, #12
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	0018      	movs	r0, r3
 8000c88:	2314      	movs	r3, #20
 8000c8a:	001a      	movs	r2, r3
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f004 fbff 	bl	8005490 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <MX_GPIO_Init+0x80>)
 8000c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c96:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <MX_GPIO_Init+0x80>)
 8000c98:	2101      	movs	r1, #1
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c9e:	4b17      	ldr	r3, [pc, #92]	@ (8000cfc <MX_GPIO_Init+0x80>)
 8000ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <MX_GPIO_Init+0x80>)
 8000cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cae:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <MX_GPIO_Init+0x80>)
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cb6:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <MX_GPIO_Init+0x80>)
 8000cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cba:	2202      	movs	r2, #2
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_PIN_GPIO_Port, I2C_ENABLE_PIN_Pin, GPIO_PIN_SET);
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d00 <MX_GPIO_Init+0x84>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2120      	movs	r1, #32
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f001 f985 	bl	8001fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : I2C_ENABLE_PIN_Pin */
  GPIO_InitStruct.Pin = I2C_ENABLE_PIN_Pin;
 8000cce:	0021      	movs	r1, r4
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2201      	movs	r2, #1
 8000cda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_ENABLE_PIN_GPIO_Port, &GPIO_InitStruct);
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <MX_GPIO_Init+0x84>)
 8000cec:	0019      	movs	r1, r3
 8000cee:	0010      	movs	r0, r2
 8000cf0:	f000 ff12 	bl	8001b18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b009      	add	sp, #36	@ 0x24
 8000cfa:	bd90      	pop	{r4, r7, pc}
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	50000400 	.word	0x50000400

08000d04 <ConsolePrintf>:

/* USER CODE BEGIN 4 */
void ConsolePrintf(const char *format, ...)
{
 8000d04:	b40f      	push	{r0, r1, r2, r3}
 8000d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d08:	b0df      	sub	sp, #380	@ 0x17c
 8000d0a:	af06      	add	r7, sp, #24
    char final_buffer[160]; // Combined buffer (timestamp + message)

    // Get time and date from RTC
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;
    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000d0c:	2308      	movs	r3, #8
 8000d0e:	18f9      	adds	r1, r7, r3
 8000d10:	4b31      	ldr	r3, [pc, #196]	@ (8000dd8 <ConsolePrintf+0xd4>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	0018      	movs	r0, r3
 8000d16:	f003 f95b 	bl	8003fd0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000d1a:	231c      	movs	r3, #28
 8000d1c:	18f9      	adds	r1, r7, r3
 8000d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd8 <ConsolePrintf+0xd4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	0018      	movs	r0, r3
 8000d24:	f003 f9b2 	bl	800408c <HAL_RTC_GetDate>

    // Format timestamp as [YYYY-MM-DD HH:MM:SS]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
             date.Year, date.Month, date.Date,
 8000d28:	4b2c      	ldr	r3, [pc, #176]	@ (8000ddc <ConsolePrintf+0xd8>)
 8000d2a:	22b0      	movs	r2, #176	@ 0xb0
 8000d2c:	0052      	lsls	r2, r2, #1
 8000d2e:	189b      	adds	r3, r3, r2
 8000d30:	19db      	adds	r3, r3, r7
 8000d32:	78db      	ldrb	r3, [r3, #3]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000d34:	469c      	mov	ip, r3
             date.Year, date.Month, date.Date,
 8000d36:	4b29      	ldr	r3, [pc, #164]	@ (8000ddc <ConsolePrintf+0xd8>)
 8000d38:	189b      	adds	r3, r3, r2
 8000d3a:	19db      	adds	r3, r3, r7
 8000d3c:	785b      	ldrb	r3, [r3, #1]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000d3e:	0019      	movs	r1, r3
             date.Year, date.Month, date.Date,
 8000d40:	4b26      	ldr	r3, [pc, #152]	@ (8000ddc <ConsolePrintf+0xd8>)
 8000d42:	189b      	adds	r3, r3, r2
 8000d44:	19db      	adds	r3, r3, r7
 8000d46:	789b      	ldrb	r3, [r3, #2]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000d48:	001c      	movs	r4, r3
             time.Hours, time.Minutes, time.Seconds);
 8000d4a:	4b25      	ldr	r3, [pc, #148]	@ (8000de0 <ConsolePrintf+0xdc>)
 8000d4c:	189b      	adds	r3, r3, r2
 8000d4e:	19db      	adds	r3, r3, r7
 8000d50:	781b      	ldrb	r3, [r3, #0]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000d52:	001d      	movs	r5, r3
             time.Hours, time.Minutes, time.Seconds);
 8000d54:	4b22      	ldr	r3, [pc, #136]	@ (8000de0 <ConsolePrintf+0xdc>)
 8000d56:	189b      	adds	r3, r3, r2
 8000d58:	19db      	adds	r3, r3, r7
 8000d5a:	785b      	ldrb	r3, [r3, #1]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000d5c:	001e      	movs	r6, r3
             time.Hours, time.Minutes, time.Seconds);
 8000d5e:	4b20      	ldr	r3, [pc, #128]	@ (8000de0 <ConsolePrintf+0xdc>)
 8000d60:	189b      	adds	r3, r3, r2
 8000d62:	19db      	adds	r3, r3, r7
 8000d64:	789b      	ldrb	r3, [r3, #2]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000d66:	4a1f      	ldr	r2, [pc, #124]	@ (8000de4 <ConsolePrintf+0xe0>)
 8000d68:	20c0      	movs	r0, #192	@ 0xc0
 8000d6a:	1838      	adds	r0, r7, r0
 8000d6c:	9304      	str	r3, [sp, #16]
 8000d6e:	9603      	str	r6, [sp, #12]
 8000d70:	9502      	str	r5, [sp, #8]
 8000d72:	9401      	str	r4, [sp, #4]
 8000d74:	9100      	str	r1, [sp, #0]
 8000d76:	4663      	mov	r3, ip
 8000d78:	2120      	movs	r1, #32
 8000d7a:	f004 fb19 	bl	80053b0 <sniprintf>

    // Format the original message
    va_list args;
    va_start(args, format);
 8000d7e:	23be      	movs	r3, #190	@ 0xbe
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	22bc      	movs	r2, #188	@ 0xbc
 8000d8a:	0052      	lsls	r2, r2, #1
 8000d8c:	18ba      	adds	r2, r7, r2
 8000d8e:	6812      	ldr	r2, [r2, #0]
 8000d90:	25e0      	movs	r5, #224	@ 0xe0
 8000d92:	1978      	adds	r0, r7, r5
 8000d94:	2180      	movs	r1, #128	@ 0x80
 8000d96:	f004 fb6f 	bl	8005478 <vsniprintf>
    va_end(args);

    // Combine timestamp and message
    snprintf(final_buffer, sizeof(final_buffer), "%s%s", timestamp_buffer, buffer);
 8000d9a:	20c0      	movs	r0, #192	@ 0xc0
 8000d9c:	1839      	adds	r1, r7, r0
 8000d9e:	4a12      	ldr	r2, [pc, #72]	@ (8000de8 <ConsolePrintf+0xe4>)
 8000da0:	2420      	movs	r4, #32
 8000da2:	1938      	adds	r0, r7, r4
 8000da4:	197b      	adds	r3, r7, r5
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	000b      	movs	r3, r1
 8000daa:	21a0      	movs	r1, #160	@ 0xa0
 8000dac:	f004 fb00 	bl	80053b0 <sniprintf>

    // Transmit the combined message
    HAL_UART_Transmit(&huart1, (uint8_t *)final_buffer, strlen(final_buffer), HAL_MAX_DELAY);
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	0018      	movs	r0, r3
 8000db4:	f7ff f9a8 	bl	8000108 <strlen>
 8000db8:	0003      	movs	r3, r0
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	425b      	negs	r3, r3
 8000dc0:	1939      	adds	r1, r7, r4
 8000dc2:	480a      	ldr	r0, [pc, #40]	@ (8000dec <ConsolePrintf+0xe8>)
 8000dc4:	f003 fc66 	bl	8004694 <HAL_UART_Transmit>
}
 8000dc8:	46c0      	nop			@ (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b059      	add	sp, #356	@ 0x164
 8000dce:	bcf0      	pop	{r4, r5, r6, r7}
 8000dd0:	bc08      	pop	{r3}
 8000dd2:	b004      	add	sp, #16
 8000dd4:	4718      	bx	r3
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	200001dc 	.word	0x200001dc
 8000ddc:	fffffebc 	.word	0xfffffebc
 8000de0:	fffffea8 	.word	0xfffffea8
 8000de4:	080060dc 	.word	0x080060dc
 8000de8:	08006100 	.word	0x08006100
 8000dec:	20000154 	.word	0x20000154

08000df0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df4:	b672      	cpsid	i
}
 8000df6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	e7fd      	b.n	8000df8 <Error_Handler+0x8>

08000dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e00:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <HAL_MspInit+0x24>)
 8000e02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_MspInit+0x24>)
 8000e06:	2101      	movs	r1, #1
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0c:	4b04      	ldr	r3, [pc, #16]	@ (8000e20 <HAL_MspInit+0x24>)
 8000e0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e10:	4b03      	ldr	r3, [pc, #12]	@ (8000e20 <HAL_MspInit+0x24>)
 8000e12:	2180      	movs	r1, #128	@ 0x80
 8000e14:	0549      	lsls	r1, r1, #21
 8000e16:	430a      	orrs	r2, r1
 8000e18:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40021000 	.word	0x40021000

08000e24 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b089      	sub	sp, #36	@ 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	240c      	movs	r4, #12
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	0018      	movs	r0, r3
 8000e32:	2314      	movs	r3, #20
 8000e34:	001a      	movs	r2, r3
 8000e36:	2100      	movs	r1, #0
 8000e38:	f004 fb2a 	bl	8005490 <memset>
  if(hi2c->Instance==I2C1)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a17      	ldr	r2, [pc, #92]	@ (8000ea0 <HAL_I2C_MspInit+0x7c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d128      	bne.n	8000e98 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e46:	4b17      	ldr	r3, [pc, #92]	@ (8000ea4 <HAL_I2C_MspInit+0x80>)
 8000e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <HAL_I2C_MspInit+0x80>)
 8000e4c:	2102      	movs	r1, #2
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e52:	4b14      	ldr	r3, [pc, #80]	@ (8000ea4 <HAL_I2C_MspInit+0x80>)
 8000e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e56:	2202      	movs	r2, #2
 8000e58:	4013      	ands	r3, r2
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e5e:	0021      	movs	r1, r4
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	22c0      	movs	r2, #192	@ 0xc0
 8000e64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2212      	movs	r2, #18
 8000e6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2203      	movs	r2, #3
 8000e76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	4a09      	ldr	r2, [pc, #36]	@ (8000ea8 <HAL_I2C_MspInit+0x84>)
 8000e82:	0019      	movs	r1, r3
 8000e84:	0010      	movs	r0, r2
 8000e86:	f000 fe47 	bl	8001b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_I2C_MspInit+0x80>)
 8000e8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <HAL_I2C_MspInit+0x80>)
 8000e90:	2180      	movs	r1, #128	@ 0x80
 8000e92:	0389      	lsls	r1, r1, #14
 8000e94:	430a      	orrs	r2, r1
 8000e96:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e98:	46c0      	nop			@ (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b009      	add	sp, #36	@ 0x24
 8000e9e:	bd90      	pop	{r4, r7, pc}
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	50000400 	.word	0x50000400

08000eac <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ee8 <HAL_I2C_MspDeInit+0x3c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d10f      	bne.n	8000ede <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8000eec <HAL_I2C_MspDeInit+0x40>)
 8000ec0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <HAL_I2C_MspDeInit+0x40>)
 8000ec4:	490a      	ldr	r1, [pc, #40]	@ (8000ef0 <HAL_I2C_MspDeInit+0x44>)
 8000ec6:	400a      	ands	r2, r1
 8000ec8:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_I2C_MspDeInit+0x48>)
 8000ecc:	2140      	movs	r1, #64	@ 0x40
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 ffa0 	bl	8001e14 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000ed4:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <HAL_I2C_MspDeInit+0x48>)
 8000ed6:	2180      	movs	r1, #128	@ 0x80
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f000 ff9b 	bl	8001e14 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000ede:	46c0      	nop			@ (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	b002      	add	sp, #8
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	40005400 	.word	0x40005400
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	ffdfffff 	.word	0xffdfffff
 8000ef4:	50000400 	.word	0x50000400

08000ef8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b08b      	sub	sp, #44	@ 0x2c
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	2414      	movs	r4, #20
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	0018      	movs	r0, r3
 8000f06:	2314      	movs	r3, #20
 8000f08:	001a      	movs	r2, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	f004 fac0 	bl	8005490 <memset>
  if(huart->Instance==LPUART1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a30      	ldr	r2, [pc, #192]	@ (8000fd8 <HAL_UART_MspInit+0xe0>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d12a      	bne.n	8000f70 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000f1a:	4b30      	ldr	r3, [pc, #192]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f1e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f20:	2180      	movs	r1, #128	@ 0x80
 8000f22:	02c9      	lsls	r1, r1, #11
 8000f24:	430a      	orrs	r2, r1
 8000f26:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f28:	4b2c      	ldr	r3, [pc, #176]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f2e:	2101      	movs	r1, #1
 8000f30:	430a      	orrs	r2, r1
 8000f32:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f34:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f40:	0021      	movs	r1, r4
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	220c      	movs	r2, #12
 8000f46:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f54:	187b      	adds	r3, r7, r1
 8000f56:	2203      	movs	r2, #3
 8000f58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000f5a:	187b      	adds	r3, r7, r1
 8000f5c:	2206      	movs	r2, #6
 8000f5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	187a      	adds	r2, r7, r1
 8000f62:	23a0      	movs	r3, #160	@ 0xa0
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	0011      	movs	r1, r2
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f000 fdd5 	bl	8001b18 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f6e:	e02f      	b.n	8000fd0 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a1a      	ldr	r2, [pc, #104]	@ (8000fe0 <HAL_UART_MspInit+0xe8>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d12a      	bne.n	8000fd0 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f80:	2180      	movs	r1, #128	@ 0x80
 8000f82:	01c9      	lsls	r1, r1, #7
 8000f84:	430a      	orrs	r2, r1
 8000f86:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f8e:	2101      	movs	r1, #1
 8000f90:	430a      	orrs	r2, r1
 8000f92:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f94:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <HAL_UART_MspInit+0xe4>)
 8000f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f98:	2201      	movs	r2, #1
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fa0:	2114      	movs	r1, #20
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	22c0      	movs	r2, #192	@ 0xc0
 8000fa6:	00d2      	lsls	r2, r2, #3
 8000fa8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2202      	movs	r2, #2
 8000fae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	187a      	adds	r2, r7, r1
 8000fc4:	23a0      	movs	r3, #160	@ 0xa0
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	0011      	movs	r1, r2
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 fda4 	bl	8001b18 <HAL_GPIO_Init>
}
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b00b      	add	sp, #44	@ 0x2c
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	40004800 	.word	0x40004800
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40013800 	.word	0x40013800

08000fe4 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a13      	ldr	r2, [pc, #76]	@ (8001040 <HAL_UART_MspDeInit+0x5c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d10c      	bne.n	8001010 <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN LPUART1_MspDeInit 0 */

    /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <HAL_UART_MspDeInit+0x60>)
 8000ff8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_UART_MspDeInit+0x60>)
 8000ffc:	4912      	ldr	r1, [pc, #72]	@ (8001048 <HAL_UART_MspDeInit+0x64>)
 8000ffe:	400a      	ands	r2, r1
 8001000:	639a      	str	r2, [r3, #56]	@ 0x38

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001002:	23a0      	movs	r3, #160	@ 0xa0
 8001004:	05db      	lsls	r3, r3, #23
 8001006:	210c      	movs	r1, #12
 8001008:	0018      	movs	r0, r3
 800100a:	f000 ff03 	bl	8001e14 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800100e:	e012      	b.n	8001036 <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0d      	ldr	r2, [pc, #52]	@ (800104c <HAL_UART_MspDeInit+0x68>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10d      	bne.n	8001036 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART1_CLK_DISABLE();
 800101a:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <HAL_UART_MspDeInit+0x60>)
 800101c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800101e:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <HAL_UART_MspDeInit+0x60>)
 8001020:	490b      	ldr	r1, [pc, #44]	@ (8001050 <HAL_UART_MspDeInit+0x6c>)
 8001022:	400a      	ands	r2, r1
 8001024:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001026:	23c0      	movs	r3, #192	@ 0xc0
 8001028:	00da      	lsls	r2, r3, #3
 800102a:	23a0      	movs	r3, #160	@ 0xa0
 800102c:	05db      	lsls	r3, r3, #23
 800102e:	0011      	movs	r1, r2
 8001030:	0018      	movs	r0, r3
 8001032:	f000 feef 	bl	8001e14 <HAL_GPIO_DeInit>
}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	46bd      	mov	sp, r7
 800103a:	b002      	add	sp, #8
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	40004800 	.word	0x40004800
 8001044:	40021000 	.word	0x40021000
 8001048:	fffbffff 	.word	0xfffbffff
 800104c:	40013800 	.word	0x40013800
 8001050:	ffffbfff 	.word	0xffffbfff

08001054 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a06      	ldr	r2, [pc, #24]	@ (800107c <HAL_RTC_MspInit+0x28>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d106      	bne.n	8001074 <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001066:	4b06      	ldr	r3, [pc, #24]	@ (8001080 <HAL_RTC_MspInit+0x2c>)
 8001068:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800106a:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <HAL_RTC_MspInit+0x2c>)
 800106c:	2180      	movs	r1, #128	@ 0x80
 800106e:	02c9      	lsls	r1, r1, #11
 8001070:	430a      	orrs	r2, r1
 8001072:	651a      	str	r2, [r3, #80]	@ 0x50

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001074:	46c0      	nop			@ (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b002      	add	sp, #8
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40002800 	.word	0x40002800
 8001080:	40021000 	.word	0x40021000

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	e7fd      	b.n	8001088 <NMI_Handler+0x4>

0800108c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001090:	46c0      	nop			@ (mov r8, r8)
 8001092:	e7fd      	b.n	8001090 <HardFault_Handler+0x4>

08001094 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010a2:	46c0      	nop			@ (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 fbf2 	bl	8001894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <_sbrk>:
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	4a14      	ldr	r2, [pc, #80]	@ (8001114 <_sbrk+0x5c>)
 80010c2:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <_sbrk+0x60>)
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	4b13      	ldr	r3, [pc, #76]	@ (800111c <_sbrk+0x64>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d102      	bne.n	80010da <_sbrk+0x22>
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <_sbrk+0x64>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	@ (8001120 <_sbrk+0x68>)
 80010d8:	601a      	str	r2, [r3, #0]
 80010da:	4b10      	ldr	r3, [pc, #64]	@ (800111c <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	18d3      	adds	r3, r2, r3
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d207      	bcs.n	80010f8 <_sbrk+0x40>
 80010e8:	f004 f9f0 	bl	80054cc <__errno>
 80010ec:	0003      	movs	r3, r0
 80010ee:	220c      	movs	r2, #12
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	2301      	movs	r3, #1
 80010f4:	425b      	negs	r3, r3
 80010f6:	e009      	b.n	800110c <_sbrk+0x54>
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	4b07      	ldr	r3, [pc, #28]	@ (800111c <_sbrk+0x64>)
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	18d2      	adds	r2, r2, r3
 8001106:	4b05      	ldr	r3, [pc, #20]	@ (800111c <_sbrk+0x64>)
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	b006      	add	sp, #24
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20005000 	.word	0x20005000
 8001118:	00000400 	.word	0x00000400
 800111c:	20000204 	.word	0x20000204
 8001120:	20000368 	.word	0x20000368

08001124 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <scan_i2c_bus>:
uint16_t temp_ticks_2 = 0;
uint16_t hum_ticks_2 = 0;
int16_t error = 0;

void scan_i2c_bus(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
    has_sensor_1 = false;
 8001136:	4b1a      	ldr	r3, [pc, #104]	@ (80011a0 <scan_i2c_bus+0x70>)
 8001138:	2200      	movs	r2, #0
 800113a:	701a      	strb	r2, [r3, #0]
    has_sensor_2 = false;
 800113c:	4b19      	ldr	r3, [pc, #100]	@ (80011a4 <scan_i2c_bus+0x74>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]

    uint8_t addr;
    HAL_Delay(100);
 8001142:	2064      	movs	r0, #100	@ 0x64
 8001144:	f000 fbc2 	bl	80018cc <HAL_Delay>

    for (addr = 3; addr < 0x78; addr++) {
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	2203      	movs	r2, #3
 800114c:	701a      	strb	r2, [r3, #0]
 800114e:	e01e      	b.n	800118e <scan_i2c_bus+0x5e>
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK) {
 8001150:	1dfb      	adds	r3, r7, #7
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	b29b      	uxth	r3, r3
 8001156:	18db      	adds	r3, r3, r3
 8001158:	b299      	uxth	r1, r3
 800115a:	4813      	ldr	r0, [pc, #76]	@ (80011a8 <scan_i2c_bus+0x78>)
 800115c:	230a      	movs	r3, #10
 800115e:	2201      	movs	r2, #1
 8001160:	f001 fa60 	bl	8002624 <HAL_I2C_IsDeviceReady>
 8001164:	1e03      	subs	r3, r0, #0
 8001166:	d10d      	bne.n	8001184 <scan_i2c_bus+0x54>
            if (addr == 0x44)
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b44      	cmp	r3, #68	@ 0x44
 800116e:	d102      	bne.n	8001176 <scan_i2c_bus+0x46>
                has_sensor_1 = true;
 8001170:	4b0b      	ldr	r3, [pc, #44]	@ (80011a0 <scan_i2c_bus+0x70>)
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
            if (addr == 0x46)
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b46      	cmp	r3, #70	@ 0x46
 800117c:	d102      	bne.n	8001184 <scan_i2c_bus+0x54>
                has_sensor_2 = true;
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <scan_i2c_bus+0x74>)
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]
    for (addr = 3; addr < 0x78; addr++) {
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	781a      	ldrb	r2, [r3, #0]
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	3201      	adds	r2, #1
 800118c:	701a      	strb	r2, [r3, #0]
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b77      	cmp	r3, #119	@ 0x77
 8001194:	d9dc      	bls.n	8001150 <scan_i2c_bus+0x20>
        }
    }
}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	46c0      	nop			@ (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b002      	add	sp, #8
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000208 	.word	0x20000208
 80011a4:	20000209 	.word	0x20000209
 80011a8:	20000078 	.word	0x20000078

080011ac <sensor_init_and_read>:

int sensor_init_and_read(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
    if (!has_sensor_1 && !has_sensor_2) {
 80011b0:	4b39      	ldr	r3, [pc, #228]	@ (8001298 <sensor_init_and_read+0xec>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2201      	movs	r2, #1
 80011b6:	4053      	eors	r3, r2
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d009      	beq.n	80011d2 <sensor_init_and_read+0x26>
 80011be:	4b37      	ldr	r3, [pc, #220]	@ (800129c <sensor_init_and_read+0xf0>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2201      	movs	r2, #1
 80011c4:	4053      	eors	r3, r2
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <sensor_init_and_read+0x26>
        return -200;
 80011cc:	23c8      	movs	r3, #200	@ 0xc8
 80011ce:	425b      	negs	r3, r3
 80011d0:	e05f      	b.n	8001292 <sensor_init_and_read+0xe6>
    }

    error = NO_ERROR;
 80011d2:	4b33      	ldr	r3, [pc, #204]	@ (80012a0 <sensor_init_and_read+0xf4>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	801a      	strh	r2, [r3, #0]

    if (has_sensor_1)
 80011d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001298 <sensor_init_and_read+0xec>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d015      	beq.n	800120c <sensor_init_and_read+0x60>
    {
        sht4x_init(SHT43_I2C_ADDR_44);
 80011e0:	2044      	movs	r0, #68	@ 0x44
 80011e2:	f000 fa29 	bl	8001638 <sht4x_init>
        sht4x_soft_reset();
 80011e6:	f000 fa9b 	bl	8001720 <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 80011ea:	4b2e      	ldr	r3, [pc, #184]	@ (80012a4 <sensor_init_and_read+0xf8>)
 80011ec:	0018      	movs	r0, r3
 80011ee:	f000 f9f9 	bl	80015e4 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT43_I2C_ADDR_44);
 80011f2:	2044      	movs	r0, #68	@ 0x44
 80011f4:	f000 fa20 	bl	8001638 <sht4x_init>
        error = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 80011f8:	4a2b      	ldr	r2, [pc, #172]	@ (80012a8 <sensor_init_and_read+0xfc>)
 80011fa:	4b2c      	ldr	r3, [pc, #176]	@ (80012ac <sensor_init_and_read+0x100>)
 80011fc:	0011      	movs	r1, r2
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 fa2a 	bl	8001658 <sht4x_measure_high_precision_ticks>
 8001204:	0003      	movs	r3, r0
 8001206:	001a      	movs	r2, r3
 8001208:	4b25      	ldr	r3, [pc, #148]	@ (80012a0 <sensor_init_and_read+0xf4>)
 800120a:	801a      	strh	r2, [r3, #0]
    }

    if (error)
 800120c:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <sensor_init_and_read+0xf4>)
 800120e:	2200      	movs	r2, #0
 8001210:	5e9b      	ldrsh	r3, [r3, r2]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <sensor_init_and_read+0x70>
    {
            return -200;
 8001216:	23c8      	movs	r3, #200	@ 0xc8
 8001218:	425b      	negs	r3, r3
 800121a:	e03a      	b.n	8001292 <sensor_init_and_read+0xe6>
    }

    if (has_sensor_2)
 800121c:	4b1f      	ldr	r3, [pc, #124]	@ (800129c <sensor_init_and_read+0xf0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d015      	beq.n	8001250 <sensor_init_and_read+0xa4>
    {
        sht4x_init(SHT40_I2C_ADDR_46);
 8001224:	2046      	movs	r0, #70	@ 0x46
 8001226:	f000 fa07 	bl	8001638 <sht4x_init>
        sht4x_soft_reset();
 800122a:	f000 fa79 	bl	8001720 <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 800122e:	4b1d      	ldr	r3, [pc, #116]	@ (80012a4 <sensor_init_and_read+0xf8>)
 8001230:	0018      	movs	r0, r3
 8001232:	f000 f9d7 	bl	80015e4 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT40_I2C_ADDR_46);
 8001236:	2046      	movs	r0, #70	@ 0x46
 8001238:	f000 f9fe 	bl	8001638 <sht4x_init>
        error = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 800123c:	4a1c      	ldr	r2, [pc, #112]	@ (80012b0 <sensor_init_and_read+0x104>)
 800123e:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <sensor_init_and_read+0x108>)
 8001240:	0011      	movs	r1, r2
 8001242:	0018      	movs	r0, r3
 8001244:	f000 fa08 	bl	8001658 <sht4x_measure_high_precision_ticks>
 8001248:	0003      	movs	r3, r0
 800124a:	001a      	movs	r2, r3
 800124c:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <sensor_init_and_read+0xf4>)
 800124e:	801a      	strh	r2, [r3, #0]
    }

    if (error)
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <sensor_init_and_read+0xf4>)
 8001252:	2200      	movs	r2, #0
 8001254:	5e9b      	ldrsh	r3, [r3, r2]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d002      	beq.n	8001260 <sensor_init_and_read+0xb4>
    {
        return -200;
 800125a:	23c8      	movs	r3, #200	@ 0xc8
 800125c:	425b      	negs	r3, r3
 800125e:	e018      	b.n	8001292 <sensor_init_and_read+0xe6>
    }

    // Correct so no negative numbers may ever be returned
    temp_ticks_1 = (temp_ticks_1 / 100) + 55;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <sensor_init_and_read+0x100>)
 8001262:	881b      	ldrh	r3, [r3, #0]
 8001264:	2164      	movs	r1, #100	@ 0x64
 8001266:	0018      	movs	r0, r3
 8001268:	f7fe ff60 	bl	800012c <__udivsi3>
 800126c:	0003      	movs	r3, r0
 800126e:	b29b      	uxth	r3, r3
 8001270:	3337      	adds	r3, #55	@ 0x37
 8001272:	b29a      	uxth	r2, r3
 8001274:	4b0d      	ldr	r3, [pc, #52]	@ (80012ac <sensor_init_and_read+0x100>)
 8001276:	801a      	strh	r2, [r3, #0]
    temp_ticks_2 = (temp_ticks_2 / 100) + 55;
 8001278:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <sensor_init_and_read+0x108>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	2164      	movs	r1, #100	@ 0x64
 800127e:	0018      	movs	r0, r3
 8001280:	f7fe ff54 	bl	800012c <__udivsi3>
 8001284:	0003      	movs	r3, r0
 8001286:	b29b      	uxth	r3, r3
 8001288:	3337      	adds	r3, #55	@ 0x37
 800128a:	b29a      	uxth	r2, r3
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <sensor_init_and_read+0x108>)
 800128e:	801a      	strh	r2, [r3, #0]

    // if the value is still less than -55 (as it is less than 0 now) something is very wrong
    // lets just return too cold here and error out
    if (temp_ticks_1 < 0 || temp_ticks_2 < 0) return -255;

    return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	0018      	movs	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000208 	.word	0x20000208
 800129c:	20000209 	.word	0x20000209
 80012a0:	20000212 	.word	0x20000212
 80012a4:	00002710 	.word	0x00002710
 80012a8:	2000020c 	.word	0x2000020c
 80012ac:	2000020a 	.word	0x2000020a
 80012b0:	20000210 	.word	0x20000210
 80012b4:	2000020e 	.word	0x2000020e

080012b8 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b21b      	sxth	r3, r3
 80012c6:	021b      	lsls	r3, r3, #8
 80012c8:	b21a      	sxth	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3301      	adds	r3, #1
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b21b      	sxth	r3, r3
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b21b      	sxth	r3, r3
 80012d6:	b29b      	uxth	r3, r3
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b002      	add	sp, #8
 80012de:	bd80      	pop	{r7, pc}

080012e0 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	000a      	movs	r2, r1
 80012ea:	1cbb      	adds	r3, r7, #2
 80012ec:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80012ee:	230d      	movs	r3, #13
 80012f0:	18fb      	adds	r3, r7, r3
 80012f2:	22ff      	movs	r2, #255	@ 0xff
 80012f4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80012f6:	230e      	movs	r3, #14
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	2200      	movs	r2, #0
 80012fc:	801a      	strh	r2, [r3, #0]
 80012fe:	e038      	b.n	8001372 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8001300:	230e      	movs	r3, #14
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	18d3      	adds	r3, r2, r3
 800130a:	7819      	ldrb	r1, [r3, #0]
 800130c:	220d      	movs	r2, #13
 800130e:	18bb      	adds	r3, r7, r2
 8001310:	18ba      	adds	r2, r7, r2
 8001312:	7812      	ldrb	r2, [r2, #0]
 8001314:	404a      	eors	r2, r1
 8001316:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001318:	230c      	movs	r3, #12
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	2208      	movs	r2, #8
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	e01c      	b.n	800135c <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 8001322:	210d      	movs	r1, #13
 8001324:	187b      	adds	r3, r7, r1
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	b25b      	sxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	da0a      	bge.n	8001344 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800132e:	187b      	adds	r3, r7, r1
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	b25b      	sxtb	r3, r3
 8001334:	18db      	adds	r3, r3, r3
 8001336:	b25b      	sxtb	r3, r3
 8001338:	2231      	movs	r2, #49	@ 0x31
 800133a:	4053      	eors	r3, r2
 800133c:	b25a      	sxtb	r2, r3
 800133e:	187b      	adds	r3, r7, r1
 8001340:	701a      	strb	r2, [r3, #0]
 8001342:	e005      	b.n	8001350 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8001344:	230d      	movs	r3, #13
 8001346:	18fa      	adds	r2, r7, r3
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	18db      	adds	r3, r3, r3
 800134e:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001350:	220c      	movs	r2, #12
 8001352:	18bb      	adds	r3, r7, r2
 8001354:	18ba      	adds	r2, r7, r2
 8001356:	7812      	ldrb	r2, [r2, #0]
 8001358:	3a01      	subs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
 800135c:	230c      	movs	r3, #12
 800135e:	18fb      	adds	r3, r7, r3
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1dd      	bne.n	8001322 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001366:	220e      	movs	r2, #14
 8001368:	18bb      	adds	r3, r7, r2
 800136a:	18ba      	adds	r2, r7, r2
 800136c:	8812      	ldrh	r2, [r2, #0]
 800136e:	3201      	adds	r2, #1
 8001370:	801a      	strh	r2, [r3, #0]
 8001372:	230e      	movs	r3, #14
 8001374:	18fa      	adds	r2, r7, r3
 8001376:	1cbb      	adds	r3, r7, #2
 8001378:	8812      	ldrh	r2, [r2, #0]
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3bf      	bcc.n	8001300 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8001380:	230d      	movs	r3, #13
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	781b      	ldrb	r3, [r3, #0]
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b004      	add	sp, #16
 800138c:	bd80      	pop	{r7, pc}

0800138e <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
 8001396:	0008      	movs	r0, r1
 8001398:	0011      	movs	r1, r2
 800139a:	1cbb      	adds	r3, r7, #2
 800139c:	1c02      	adds	r2, r0, #0
 800139e:	801a      	strh	r2, [r3, #0]
 80013a0:	1c7b      	adds	r3, r7, #1
 80013a2:	1c0a      	adds	r2, r1, #0
 80013a4:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 80013a6:	1cbb      	adds	r3, r7, #2
 80013a8:	881a      	ldrh	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	0011      	movs	r1, r2
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7ff ff96 	bl	80012e0 <sensirion_i2c_generate_crc>
 80013b4:	0003      	movs	r3, r0
 80013b6:	001a      	movs	r2, r3
 80013b8:	1c7b      	adds	r3, r7, #1
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4293      	cmp	r3, r2
 80013be:	d001      	beq.n	80013c4 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e000      	b.n	80013c6 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	0018      	movs	r0, r3
 80013c8:	46bd      	mov	sp, r7
 80013ca:	b002      	add	sp, #8
 80013cc:	bd80      	pop	{r7, pc}

080013ce <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	0008      	movs	r0, r1
 80013d8:	0011      	movs	r1, r2
 80013da:	1cbb      	adds	r3, r7, #2
 80013dc:	1c02      	adds	r2, r0, #0
 80013de:	801a      	strh	r2, [r3, #0]
 80013e0:	1c7b      	adds	r3, r7, #1
 80013e2:	1c0a      	adds	r2, r1, #0
 80013e4:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 80013e6:	1cbb      	adds	r3, r7, #2
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	1cba      	adds	r2, r7, #2
 80013ec:	1c59      	adds	r1, r3, #1
 80013ee:	8011      	strh	r1, [r2, #0]
 80013f0:	001a      	movs	r2, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	189b      	adds	r3, r3, r2
 80013f6:	1c7a      	adds	r2, r7, #1
 80013f8:	7812      	ldrb	r2, [r2, #0]
 80013fa:	701a      	strb	r2, [r3, #0]
    return offset;
 80013fc:	1cbb      	adds	r3, r7, #2
 80013fe:	881b      	ldrh	r3, [r3, #0]
}
 8001400:	0018      	movs	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	b002      	add	sp, #8
 8001406:	bd80      	pop	{r7, pc}

08001408 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6039      	str	r1, [r7, #0]
 8001410:	0011      	movs	r1, r2
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	1c02      	adds	r2, r0, #0
 8001416:	701a      	strb	r2, [r3, #0]
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	1c0a      	adds	r2, r1, #0
 800141c:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	6839      	ldr	r1, [r7, #0]
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	0018      	movs	r0, r3
 800142c:	f000 f8b8 	bl	80015a0 <sensirion_i2c_hal_write>
 8001430:	0003      	movs	r3, r0
}
 8001432:	0018      	movs	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	b002      	add	sp, #8
 8001438:	bd80      	pop	{r7, pc}

0800143a <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800143a:	b5b0      	push	{r4, r5, r7, lr}
 800143c:	b084      	sub	sp, #16
 800143e:	af00      	add	r7, sp, #0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	0011      	movs	r1, r2
 8001444:	1dfb      	adds	r3, r7, #7
 8001446:	1c02      	adds	r2, r0, #0
 8001448:	701a      	strb	r2, [r3, #0]
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	1c0a      	adds	r2, r1, #0
 800144e:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	881b      	ldrh	r3, [r3, #0]
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	b29b      	uxth	r3, r3
 8001458:	220a      	movs	r2, #10
 800145a:	18ba      	adds	r2, r7, r2
 800145c:	1c19      	adds	r1, r3, #0
 800145e:	1c0b      	adds	r3, r1, #0
 8001460:	18db      	adds	r3, r3, r3
 8001462:	185b      	adds	r3, r3, r1
 8001464:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	881b      	ldrh	r3, [r3, #0]
 800146a:	2201      	movs	r2, #1
 800146c:	4013      	ands	r3, r2
 800146e:	b29b      	uxth	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8001474:	2304      	movs	r3, #4
 8001476:	e06c      	b.n	8001552 <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8001478:	230a      	movs	r3, #10
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	6839      	ldr	r1, [r7, #0]
 8001482:	1dfb      	adds	r3, r7, #7
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	0018      	movs	r0, r3
 8001488:	f000 f868 	bl	800155c <sensirion_i2c_hal_read>
 800148c:	0003      	movs	r3, r0
 800148e:	001a      	movs	r2, r3
 8001490:	2108      	movs	r1, #8
 8001492:	187b      	adds	r3, r7, r1
 8001494:	801a      	strh	r2, [r3, #0]
    if (error) {
 8001496:	000a      	movs	r2, r1
 8001498:	18bb      	adds	r3, r7, r2
 800149a:	2100      	movs	r1, #0
 800149c:	5e5b      	ldrsh	r3, [r3, r1]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <sensirion_i2c_read_data_inplace+0x70>
        return error;
 80014a2:	18bb      	adds	r3, r7, r2
 80014a4:	2200      	movs	r2, #0
 80014a6:	5e9b      	ldrsh	r3, [r3, r2]
 80014a8:	e053      	b.n	8001552 <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80014aa:	230e      	movs	r3, #14
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	2200      	movs	r2, #0
 80014b0:	801a      	strh	r2, [r3, #0]
 80014b2:	230c      	movs	r3, #12
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	2200      	movs	r2, #0
 80014b8:	801a      	strh	r2, [r3, #0]
 80014ba:	e041      	b.n	8001540 <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80014bc:	210e      	movs	r1, #14
 80014be:	187b      	adds	r3, r7, r1
 80014c0:	881b      	ldrh	r3, [r3, #0]
 80014c2:	683a      	ldr	r2, [r7, #0]
 80014c4:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 80014c6:	187b      	adds	r3, r7, r1
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	3302      	adds	r3, #2
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	001a      	movs	r2, r3
 80014d4:	2102      	movs	r1, #2
 80014d6:	f7ff ff5a 	bl	800138e <sensirion_i2c_check_crc>
 80014da:	0003      	movs	r3, r0
 80014dc:	001a      	movs	r2, r3
 80014de:	2108      	movs	r1, #8
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	801a      	strh	r2, [r3, #0]
        if (error) {
 80014e4:	000a      	movs	r2, r1
 80014e6:	18bb      	adds	r3, r7, r2
 80014e8:	2100      	movs	r1, #0
 80014ea:	5e5b      	ldrsh	r3, [r3, r1]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 80014f0:	18bb      	adds	r3, r7, r2
 80014f2:	2200      	movs	r2, #0
 80014f4:	5e9b      	ldrsh	r3, [r3, r2]
 80014f6:	e02c      	b.n	8001552 <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 80014f8:	240e      	movs	r4, #14
 80014fa:	193b      	adds	r3, r7, r4
 80014fc:	881b      	ldrh	r3, [r3, #0]
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	18d2      	adds	r2, r2, r3
 8001502:	250c      	movs	r5, #12
 8001504:	197b      	adds	r3, r7, r5
 8001506:	881b      	ldrh	r3, [r3, #0]
 8001508:	1979      	adds	r1, r7, r5
 800150a:	1c58      	adds	r0, r3, #1
 800150c:	8008      	strh	r0, [r1, #0]
 800150e:	0019      	movs	r1, r3
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	185b      	adds	r3, r3, r1
 8001514:	7812      	ldrb	r2, [r2, #0]
 8001516:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8001518:	193b      	adds	r3, r7, r4
 800151a:	881b      	ldrh	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	18d2      	adds	r2, r2, r3
 8001522:	197b      	adds	r3, r7, r5
 8001524:	881b      	ldrh	r3, [r3, #0]
 8001526:	1979      	adds	r1, r7, r5
 8001528:	1c58      	adds	r0, r3, #1
 800152a:	8008      	strh	r0, [r1, #0]
 800152c:	0019      	movs	r1, r3
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	185b      	adds	r3, r3, r1
 8001532:	7812      	ldrb	r2, [r2, #0]
 8001534:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001536:	193b      	adds	r3, r7, r4
 8001538:	193a      	adds	r2, r7, r4
 800153a:	8812      	ldrh	r2, [r2, #0]
 800153c:	3203      	adds	r2, #3
 800153e:	801a      	strh	r2, [r3, #0]
 8001540:	230e      	movs	r3, #14
 8001542:	18fa      	adds	r2, r7, r3
 8001544:	230a      	movs	r3, #10
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	8812      	ldrh	r2, [r2, #0]
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	429a      	cmp	r2, r3
 800154e:	d3b5      	bcc.n	80014bc <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 8001550:	2300      	movs	r3, #0
}
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b004      	add	sp, #16
 8001558:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800155c <sensirion_i2c_hal_read>:

void sensirion_i2c_hal_free(void) {
    /* nothing to free */
}

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b085      	sub	sp, #20
 8001560:	af02      	add	r7, sp, #8
 8001562:	6039      	str	r1, [r7, #0]
 8001564:	0011      	movs	r1, r2
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	1c02      	adds	r2, r0, #0
 800156a:	701a      	strb	r2, [r3, #0]
 800156c:	1dbb      	adds	r3, r7, #6
 800156e:	1c0a      	adds	r2, r1, #0
 8001570:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1), data, count, 100);
 8001572:	1dfb      	adds	r3, r7, #7
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	18db      	adds	r3, r3, r3
 800157a:	b299      	uxth	r1, r3
 800157c:	1dbb      	adds	r3, r7, #6
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	b29b      	uxth	r3, r3
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	4805      	ldr	r0, [pc, #20]	@ (800159c <sensirion_i2c_hal_read+0x40>)
 8001586:	2464      	movs	r4, #100	@ 0x64
 8001588:	9400      	str	r4, [sp, #0]
 800158a:	f000 ff43 	bl	8002414 <HAL_I2C_Master_Receive>
 800158e:	0003      	movs	r3, r0
 8001590:	b25b      	sxtb	r3, r3
}
 8001592:	0018      	movs	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	b003      	add	sp, #12
 8001598:	bd90      	pop	{r4, r7, pc}
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	20000078 	.word	0x20000078

080015a0 <sensirion_i2c_hal_write>:

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint8_t count) {
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	6039      	str	r1, [r7, #0]
 80015a8:	0011      	movs	r1, r2
 80015aa:	1dfb      	adds	r3, r7, #7
 80015ac:	1c02      	adds	r2, r0, #0
 80015ae:	701a      	strb	r2, [r3, #0]
 80015b0:	1dbb      	adds	r3, r7, #6
 80015b2:	1c0a      	adds	r2, r1, #0
 80015b4:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	18db      	adds	r3, r3, r3
 80015be:	b299      	uxth	r1, r3
 80015c0:	1dbb      	adds	r3, r7, #6
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	4805      	ldr	r0, [pc, #20]	@ (80015e0 <sensirion_i2c_hal_write+0x40>)
 80015ca:	2464      	movs	r4, #100	@ 0x64
 80015cc:	9400      	str	r4, [sp, #0]
 80015ce:	f000 fdf7 	bl	80021c0 <HAL_I2C_Master_Transmit>
 80015d2:	0003      	movs	r3, r0
 80015d4:	b25b      	sxtb	r3, r3
}
 80015d6:	0018      	movs	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	b003      	add	sp, #12
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	46c0      	nop			@ (mov r8, r8)
 80015e0:	20000078 	.word	0x20000078

080015e4 <sensirion_i2c_hal_sleep_usec>:

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	22fa      	movs	r2, #250	@ 0xfa
 80015f0:	0091      	lsls	r1, r2, #2
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7fe fd9a 	bl	800012c <__udivsi3>
 80015f8:	0003      	movs	r3, r0
 80015fa:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	22fa      	movs	r2, #250	@ 0xfa
 8001600:	0091      	lsls	r1, r2, #2
 8001602:	0018      	movs	r0, r3
 8001604:	f7fe fe18 	bl	8000238 <__aeabi_uidivmod>
 8001608:	1e0b      	subs	r3, r1, #0
 800160a:	d002      	beq.n	8001612 <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3301      	adds	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_GetHalVersion() < 0x01010100) {
 8001612:	f000 f99b 	bl	800194c <HAL_GetHalVersion>
 8001616:	0003      	movs	r3, r0
 8001618:	4a06      	ldr	r2, [pc, #24]	@ (8001634 <sensirion_i2c_hal_sleep_usec+0x50>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d802      	bhi.n	8001624 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	3301      	adds	r3, #1
 8001622:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	0018      	movs	r0, r3
 8001628:	f000 f950 	bl	80018cc <HAL_Delay>
}
 800162c:	46c0      	nop			@ (mov r8, r8)
 800162e:	46bd      	mov	sp, r7
 8001630:	b004      	add	sp, #16
 8001632:	bd80      	pop	{r7, pc}
 8001634:	010100ff 	.word	0x010100ff

08001638 <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	0002      	movs	r2, r0
 8001640:	1dfb      	adds	r3, r7, #7
 8001642:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 8001644:	4b03      	ldr	r3, [pc, #12]	@ (8001654 <sht4x_init+0x1c>)
 8001646:	1dfa      	adds	r2, r7, #7
 8001648:	7812      	ldrb	r2, [r2, #0]
 800164a:	701a      	strb	r2, [r3, #0]
}
 800164c:	46c0      	nop			@ (mov r8, r8)
 800164e:	46bd      	mov	sp, r7
 8001650:	b002      	add	sp, #8
 8001652:	bd80      	pop	{r7, pc}
 8001654:	2000021a 	.word	0x2000021a

08001658 <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 8001658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 8001662:	2516      	movs	r5, #22
 8001664:	197b      	adds	r3, r7, r5
 8001666:	2200      	movs	r2, #0
 8001668:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 800166a:	4b2a      	ldr	r3, [pc, #168]	@ (8001714 <sht4x_measure_high_precision_ticks+0xbc>)
 800166c:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 800166e:	260e      	movs	r6, #14
 8001670:	19bb      	adds	r3, r7, r6
 8001672:	2200      	movs	r2, #0
 8001674:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 8001676:	19bc      	adds	r4, r7, r6
 8001678:	19bb      	adds	r3, r7, r6
 800167a:	8819      	ldrh	r1, [r3, #0]
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	22fd      	movs	r2, #253	@ 0xfd
 8001680:	0018      	movs	r0, r3
 8001682:	f7ff fea4 	bl	80013ce <sensirion_i2c_add_command8_to_buffer>
 8001686:	0003      	movs	r3, r0
 8001688:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 800168a:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <sht4x_measure_high_precision_ticks+0xc0>)
 800168c:	7818      	ldrb	r0, [r3, #0]
 800168e:	197c      	adds	r4, r7, r5
 8001690:	19bb      	adds	r3, r7, r6
 8001692:	881a      	ldrh	r2, [r3, #0]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	0019      	movs	r1, r3
 8001698:	f7ff feb6 	bl	8001408 <sensirion_i2c_write_data>
 800169c:	0003      	movs	r3, r0
 800169e:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 80016a0:	197b      	adds	r3, r7, r5
 80016a2:	2200      	movs	r2, #0
 80016a4:	5e9b      	ldrsh	r3, [r3, r2]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 80016aa:	197b      	adds	r3, r7, r5
 80016ac:	2200      	movs	r2, #0
 80016ae:	5e9b      	ldrsh	r3, [r3, r2]
 80016b0:	e02c      	b.n	800170c <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80016b2:	4b1a      	ldr	r3, [pc, #104]	@ (800171c <sht4x_measure_high_precision_ticks+0xc4>)
 80016b4:	0018      	movs	r0, r3
 80016b6:	f7ff ff95 	bl	80015e4 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 80016ba:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <sht4x_measure_high_precision_ticks+0xc0>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2516      	movs	r5, #22
 80016c0:	197c      	adds	r4, r7, r5
 80016c2:	6939      	ldr	r1, [r7, #16]
 80016c4:	2204      	movs	r2, #4
 80016c6:	0018      	movs	r0, r3
 80016c8:	f7ff feb7 	bl	800143a <sensirion_i2c_read_data_inplace>
 80016cc:	0003      	movs	r3, r0
 80016ce:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 80016d0:	197b      	adds	r3, r7, r5
 80016d2:	2200      	movs	r2, #0
 80016d4:	5e9b      	ldrsh	r3, [r3, r2]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 80016da:	197b      	adds	r3, r7, r5
 80016dc:	2200      	movs	r2, #0
 80016de:	5e9b      	ldrsh	r3, [r3, r2]
 80016e0:	e014      	b.n	800170c <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	0018      	movs	r0, r3
 80016e6:	f7ff fde7 	bl	80012b8 <sensirion_common_bytes_to_uint16_t>
 80016ea:	0003      	movs	r3, r0
 80016ec:	001a      	movs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	3302      	adds	r3, #2
 80016f6:	0018      	movs	r0, r3
 80016f8:	f7ff fdde 	bl	80012b8 <sensirion_common_bytes_to_uint16_t>
 80016fc:	0003      	movs	r3, r0
 80016fe:	001a      	movs	r2, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	801a      	strh	r2, [r3, #0]
    return local_error;
 8001704:	2316      	movs	r3, #22
 8001706:	18fb      	adds	r3, r7, r3
 8001708:	2200      	movs	r2, #0
 800170a:	5e9b      	ldrsh	r3, [r3, r2]
}
 800170c:	0018      	movs	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	b007      	add	sp, #28
 8001712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001714:	20000214 	.word	0x20000214
 8001718:	2000021a 	.word	0x2000021a
 800171c:	00002710 	.word	0x00002710

08001720 <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 8001720:	b5b0      	push	{r4, r5, r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8001726:	250e      	movs	r5, #14
 8001728:	197b      	adds	r3, r7, r5
 800172a:	2200      	movs	r2, #0
 800172c:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 800172e:	4b17      	ldr	r3, [pc, #92]	@ (800178c <sht4x_soft_reset+0x6c>)
 8001730:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 8001732:	1dbb      	adds	r3, r7, #6
 8001734:	2200      	movs	r2, #0
 8001736:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 8001738:	1dbc      	adds	r4, r7, #6
 800173a:	1dbb      	adds	r3, r7, #6
 800173c:	8819      	ldrh	r1, [r3, #0]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	2294      	movs	r2, #148	@ 0x94
 8001742:	0018      	movs	r0, r3
 8001744:	f7ff fe43 	bl	80013ce <sensirion_i2c_add_command8_to_buffer>
 8001748:	0003      	movs	r3, r0
 800174a:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 800174c:	4b10      	ldr	r3, [pc, #64]	@ (8001790 <sht4x_soft_reset+0x70>)
 800174e:	7818      	ldrb	r0, [r3, #0]
 8001750:	197c      	adds	r4, r7, r5
 8001752:	1dbb      	adds	r3, r7, #6
 8001754:	881a      	ldrh	r2, [r3, #0]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	0019      	movs	r1, r3
 800175a:	f7ff fe55 	bl	8001408 <sensirion_i2c_write_data>
 800175e:	0003      	movs	r3, r0
 8001760:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001762:	197b      	adds	r3, r7, r5
 8001764:	2200      	movs	r2, #0
 8001766:	5e9b      	ldrsh	r3, [r3, r2]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <sht4x_soft_reset+0x54>
        return local_error;
 800176c:	197b      	adds	r3, r7, r5
 800176e:	2200      	movs	r2, #0
 8001770:	5e9b      	ldrsh	r3, [r3, r2]
 8001772:	e007      	b.n	8001784 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8001774:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <sht4x_soft_reset+0x74>)
 8001776:	0018      	movs	r0, r3
 8001778:	f7ff ff34 	bl	80015e4 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 800177c:	230e      	movs	r3, #14
 800177e:	18fb      	adds	r3, r7, r3
 8001780:	2200      	movs	r2, #0
 8001782:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001784:	0018      	movs	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	b004      	add	sp, #16
 800178a:	bdb0      	pop	{r4, r5, r7, pc}
 800178c:	20000214 	.word	0x20000214
 8001790:	2000021a 	.word	0x2000021a
 8001794:	00002710 	.word	0x00002710

08001798 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001798:	480d      	ldr	r0, [pc, #52]	@ (80017d0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800179a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800179c:	f7ff fcc2 	bl	8001124 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a0:	480c      	ldr	r0, [pc, #48]	@ (80017d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80017a2:	490d      	ldr	r1, [pc, #52]	@ (80017d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017a4:	4a0d      	ldr	r2, [pc, #52]	@ (80017dc <LoopForever+0xe>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a8:	e002      	b.n	80017b0 <LoopCopyDataInit>

080017aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ae:	3304      	adds	r3, #4

080017b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b4:	d3f9      	bcc.n	80017aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b6:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017b8:	4c0a      	ldr	r4, [pc, #40]	@ (80017e4 <LoopForever+0x16>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017bc:	e001      	b.n	80017c2 <LoopFillZerobss>

080017be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c0:	3204      	adds	r2, #4

080017c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c4:	d3fb      	bcc.n	80017be <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80017c6:	f003 fe87 	bl	80054d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017ca:	f7ff f85d 	bl	8000888 <main>

080017ce <LoopForever>:

LoopForever:
    b LoopForever
 80017ce:	e7fe      	b.n	80017ce <LoopForever>
   ldr   r0, =_estack
 80017d0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80017d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80017dc:	080061b8 	.word	0x080061b8
  ldr r2, =_sbss
 80017e0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80017e4:	20000368 	.word	0x20000368

080017e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e8:	e7fe      	b.n	80017e8 <ADC1_COMP_IRQHandler>
	...

080017ec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017f2:	1dfb      	adds	r3, r7, #7
 80017f4:	2200      	movs	r2, #0
 80017f6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <HAL_Init+0x3c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_Init+0x3c>)
 80017fe:	2140      	movs	r1, #64	@ 0x40
 8001800:	430a      	orrs	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001804:	2003      	movs	r0, #3
 8001806:	f000 f811 	bl	800182c <HAL_InitTick>
 800180a:	1e03      	subs	r3, r0, #0
 800180c:	d003      	beq.n	8001816 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	2201      	movs	r2, #1
 8001812:	701a      	strb	r2, [r3, #0]
 8001814:	e001      	b.n	800181a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001816:	f7ff faf1 	bl	8000dfc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	781b      	ldrb	r3, [r3, #0]
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	40022000 	.word	0x40022000

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001834:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <HAL_InitTick+0x5c>)
 8001836:	681c      	ldr	r4, [r3, #0]
 8001838:	4b14      	ldr	r3, [pc, #80]	@ (800188c <HAL_InitTick+0x60>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	0019      	movs	r1, r3
 800183e:	23fa      	movs	r3, #250	@ 0xfa
 8001840:	0098      	lsls	r0, r3, #2
 8001842:	f7fe fc73 	bl	800012c <__udivsi3>
 8001846:	0003      	movs	r3, r0
 8001848:	0019      	movs	r1, r3
 800184a:	0020      	movs	r0, r4
 800184c:	f7fe fc6e 	bl	800012c <__udivsi3>
 8001850:	0003      	movs	r3, r0
 8001852:	0018      	movs	r0, r3
 8001854:	f000 f953 	bl	8001afe <HAL_SYSTICK_Config>
 8001858:	1e03      	subs	r3, r0, #0
 800185a:	d001      	beq.n	8001860 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e00f      	b.n	8001880 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d80b      	bhi.n	800187e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	2301      	movs	r3, #1
 800186a:	425b      	negs	r3, r3
 800186c:	2200      	movs	r2, #0
 800186e:	0018      	movs	r0, r3
 8001870:	f000 f920 	bl	8001ab4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_InitTick+0x64>)
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800187a:	2300      	movs	r3, #0
 800187c:	e000      	b.n	8001880 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	b003      	add	sp, #12
 8001886:	bd90      	pop	{r4, r7, pc}
 8001888:	20000000 	.word	0x20000000
 800188c:	20000008 	.word	0x20000008
 8001890:	20000004 	.word	0x20000004

08001894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001898:	4b05      	ldr	r3, [pc, #20]	@ (80018b0 <HAL_IncTick+0x1c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	001a      	movs	r2, r3
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <HAL_IncTick+0x20>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	18d2      	adds	r2, r2, r3
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_IncTick+0x20>)
 80018a6:	601a      	str	r2, [r3, #0]
}
 80018a8:	46c0      	nop			@ (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			@ (mov r8, r8)
 80018b0:	20000008 	.word	0x20000008
 80018b4:	2000021c 	.word	0x2000021c

080018b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  return uwTick;
 80018bc:	4b02      	ldr	r3, [pc, #8]	@ (80018c8 <HAL_GetTick+0x10>)
 80018be:	681b      	ldr	r3, [r3, #0]
}
 80018c0:	0018      	movs	r0, r3
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	46c0      	nop			@ (mov r8, r8)
 80018c8:	2000021c 	.word	0x2000021c

080018cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff fff0 	bl	80018b8 <HAL_GetTick>
 80018d8:	0003      	movs	r3, r0
 80018da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	d005      	beq.n	80018f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <HAL_Delay+0x44>)
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	001a      	movs	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	189b      	adds	r3, r3, r2
 80018f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	f7ff ffe0 	bl	80018b8 <HAL_GetTick>
 80018f8:	0002      	movs	r2, r0
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8f7      	bhi.n	80018f4 <HAL_Delay+0x28>
  {
  }
}
 8001904:	46c0      	nop			@ (mov r8, r8)
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	46bd      	mov	sp, r7
 800190a:	b004      	add	sp, #16
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	20000008 	.word	0x20000008

08001914 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <HAL_SuspendTick+0x18>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b03      	ldr	r3, [pc, #12]	@ (800192c <HAL_SuspendTick+0x18>)
 800191e:	2102      	movs	r1, #2
 8001920:	438a      	bics	r2, r1
 8001922:	601a      	str	r2, [r3, #0]
}
 8001924:	46c0      	nop			@ (mov r8, r8)
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001934:	4b04      	ldr	r3, [pc, #16]	@ (8001948 <HAL_ResumeTick+0x18>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b03      	ldr	r3, [pc, #12]	@ (8001948 <HAL_ResumeTick+0x18>)
 800193a:	2102      	movs	r1, #2
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	46c0      	nop			@ (mov r8, r8)
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	46c0      	nop			@ (mov r8, r8)
 8001948:	e000e010 	.word	0xe000e010

0800194c <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8001950:	4b01      	ldr	r3, [pc, #4]	@ (8001958 <HAL_GetHalVersion+0xc>)
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	010a0700 	.word	0x010a0700

0800195c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	0002      	movs	r2, r0
 8001964:	1dfb      	adds	r3, r7, #7
 8001966:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001968:	1dfb      	adds	r3, r7, #7
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b7f      	cmp	r3, #127	@ 0x7f
 800196e:	d809      	bhi.n	8001984 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001970:	1dfb      	adds	r3, r7, #7
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	001a      	movs	r2, r3
 8001976:	231f      	movs	r3, #31
 8001978:	401a      	ands	r2, r3
 800197a:	4b04      	ldr	r3, [pc, #16]	@ (800198c <__NVIC_EnableIRQ+0x30>)
 800197c:	2101      	movs	r1, #1
 800197e:	4091      	lsls	r1, r2
 8001980:	000a      	movs	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
  }
}
 8001984:	46c0      	nop			@ (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b002      	add	sp, #8
 800198a:	bd80      	pop	{r7, pc}
 800198c:	e000e100 	.word	0xe000e100

08001990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001990:	b590      	push	{r4, r7, lr}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	0002      	movs	r2, r0
 8001998:	6039      	str	r1, [r7, #0]
 800199a:	1dfb      	adds	r3, r7, #7
 800199c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80019a4:	d828      	bhi.n	80019f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019a6:	4a2f      	ldr	r2, [pc, #188]	@ (8001a64 <__NVIC_SetPriority+0xd4>)
 80019a8:	1dfb      	adds	r3, r7, #7
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	33c0      	adds	r3, #192	@ 0xc0
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	589b      	ldr	r3, [r3, r2]
 80019b6:	1dfa      	adds	r2, r7, #7
 80019b8:	7812      	ldrb	r2, [r2, #0]
 80019ba:	0011      	movs	r1, r2
 80019bc:	2203      	movs	r2, #3
 80019be:	400a      	ands	r2, r1
 80019c0:	00d2      	lsls	r2, r2, #3
 80019c2:	21ff      	movs	r1, #255	@ 0xff
 80019c4:	4091      	lsls	r1, r2
 80019c6:	000a      	movs	r2, r1
 80019c8:	43d2      	mvns	r2, r2
 80019ca:	401a      	ands	r2, r3
 80019cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	019b      	lsls	r3, r3, #6
 80019d2:	22ff      	movs	r2, #255	@ 0xff
 80019d4:	401a      	ands	r2, r3
 80019d6:	1dfb      	adds	r3, r7, #7
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	0018      	movs	r0, r3
 80019dc:	2303      	movs	r3, #3
 80019de:	4003      	ands	r3, r0
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019e4:	481f      	ldr	r0, [pc, #124]	@ (8001a64 <__NVIC_SetPriority+0xd4>)
 80019e6:	1dfb      	adds	r3, r7, #7
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	430a      	orrs	r2, r1
 80019f0:	33c0      	adds	r3, #192	@ 0xc0
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80019f6:	e031      	b.n	8001a5c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80019f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001a68 <__NVIC_SetPriority+0xd8>)
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	0019      	movs	r1, r3
 8001a00:	230f      	movs	r3, #15
 8001a02:	400b      	ands	r3, r1
 8001a04:	3b08      	subs	r3, #8
 8001a06:	089b      	lsrs	r3, r3, #2
 8001a08:	3306      	adds	r3, #6
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	18d3      	adds	r3, r2, r3
 8001a0e:	3304      	adds	r3, #4
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	1dfa      	adds	r2, r7, #7
 8001a14:	7812      	ldrb	r2, [r2, #0]
 8001a16:	0011      	movs	r1, r2
 8001a18:	2203      	movs	r2, #3
 8001a1a:	400a      	ands	r2, r1
 8001a1c:	00d2      	lsls	r2, r2, #3
 8001a1e:	21ff      	movs	r1, #255	@ 0xff
 8001a20:	4091      	lsls	r1, r2
 8001a22:	000a      	movs	r2, r1
 8001a24:	43d2      	mvns	r2, r2
 8001a26:	401a      	ands	r2, r3
 8001a28:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	019b      	lsls	r3, r3, #6
 8001a2e:	22ff      	movs	r2, #255	@ 0xff
 8001a30:	401a      	ands	r2, r3
 8001a32:	1dfb      	adds	r3, r7, #7
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	0018      	movs	r0, r3
 8001a38:	2303      	movs	r3, #3
 8001a3a:	4003      	ands	r3, r0
 8001a3c:	00db      	lsls	r3, r3, #3
 8001a3e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a40:	4809      	ldr	r0, [pc, #36]	@ (8001a68 <__NVIC_SetPriority+0xd8>)
 8001a42:	1dfb      	adds	r3, r7, #7
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	001c      	movs	r4, r3
 8001a48:	230f      	movs	r3, #15
 8001a4a:	4023      	ands	r3, r4
 8001a4c:	3b08      	subs	r3, #8
 8001a4e:	089b      	lsrs	r3, r3, #2
 8001a50:	430a      	orrs	r2, r1
 8001a52:	3306      	adds	r3, #6
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	18c3      	adds	r3, r0, r3
 8001a58:	3304      	adds	r3, #4
 8001a5a:	601a      	str	r2, [r3, #0]
}
 8001a5c:	46c0      	nop			@ (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b003      	add	sp, #12
 8001a62:	bd90      	pop	{r4, r7, pc}
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	1e5a      	subs	r2, r3, #1
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	045b      	lsls	r3, r3, #17
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d301      	bcc.n	8001a84 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a80:	2301      	movs	r3, #1
 8001a82:	e010      	b.n	8001aa6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a84:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab0 <SysTick_Config+0x44>)
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	3a01      	subs	r2, #1
 8001a8a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	425b      	negs	r3, r3
 8001a90:	2103      	movs	r1, #3
 8001a92:	0018      	movs	r0, r3
 8001a94:	f7ff ff7c 	bl	8001990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <SysTick_Config+0x44>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a9e:	4b04      	ldr	r3, [pc, #16]	@ (8001ab0 <SysTick_Config+0x44>)
 8001aa0:	2207      	movs	r2, #7
 8001aa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	b002      	add	sp, #8
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	e000e010 	.word	0xe000e010

08001ab4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60b9      	str	r1, [r7, #8]
 8001abc:	607a      	str	r2, [r7, #4]
 8001abe:	210f      	movs	r1, #15
 8001ac0:	187b      	adds	r3, r7, r1
 8001ac2:	1c02      	adds	r2, r0, #0
 8001ac4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	187b      	adds	r3, r7, r1
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b25b      	sxtb	r3, r3
 8001ace:	0011      	movs	r1, r2
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7ff ff5d 	bl	8001990 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	b004      	add	sp, #16
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	1dfb      	adds	r3, r7, #7
 8001ae8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aea:	1dfb      	adds	r3, r7, #7
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	b25b      	sxtb	r3, r3
 8001af0:	0018      	movs	r0, r3
 8001af2:	f7ff ff33 	bl	800195c <__NVIC_EnableIRQ>
}
 8001af6:	46c0      	nop			@ (mov r8, r8)
 8001af8:	46bd      	mov	sp, r7
 8001afa:	b002      	add	sp, #8
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff ffaf 	bl	8001a6c <SysTick_Config>
 8001b0e:	0003      	movs	r3, r0
}
 8001b10:	0018      	movs	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b2e:	e155      	b.n	8001ddc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4091      	lsls	r1, r2
 8001b3a:	000a      	movs	r2, r1
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d100      	bne.n	8001b48 <HAL_GPIO_Init+0x30>
 8001b46:	e146      	b.n	8001dd6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	4013      	ands	r3, r2
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d005      	beq.n	8001b60 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	2203      	movs	r2, #3
 8001b5a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d130      	bne.n	8001bc2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	0013      	movs	r3, r2
 8001b70:	43da      	mvns	r2, r3
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	409a      	lsls	r2, r3
 8001b82:	0013      	movs	r3, r2
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b96:	2201      	movs	r2, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
 8001b9c:	0013      	movs	r3, r2
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	2201      	movs	r2, #1
 8001bae:	401a      	ands	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	4013      	ands	r3, r2
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d017      	beq.n	8001bfe <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	2203      	movs	r2, #3
 8001bda:	409a      	lsls	r2, r3
 8001bdc:	0013      	movs	r3, r2
 8001bde:	43da      	mvns	r2, r3
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	0013      	movs	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2203      	movs	r2, #3
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d123      	bne.n	8001c52 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	58d3      	ldr	r3, [r2, r3]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	409a      	lsls	r2, r3
 8001c24:	0013      	movs	r3, r2
 8001c26:	43da      	mvns	r2, r3
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	2107      	movs	r1, #7
 8001c36:	400b      	ands	r3, r1
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	0092      	lsls	r2, r2, #2
 8001c4e:	6939      	ldr	r1, [r7, #16]
 8001c50:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	409a      	lsls	r2, r3
 8001c60:	0013      	movs	r3, r2
 8001c62:	43da      	mvns	r2, r3
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2203      	movs	r2, #3
 8001c70:	401a      	ands	r2, r3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	409a      	lsls	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	23c0      	movs	r3, #192	@ 0xc0
 8001c8c:	029b      	lsls	r3, r3, #10
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d100      	bne.n	8001c94 <HAL_GPIO_Init+0x17c>
 8001c92:	e0a0      	b.n	8001dd6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c94:	4b57      	ldr	r3, [pc, #348]	@ (8001df4 <HAL_GPIO_Init+0x2dc>)
 8001c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c98:	4b56      	ldr	r3, [pc, #344]	@ (8001df4 <HAL_GPIO_Init+0x2dc>)
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca0:	4a55      	ldr	r2, [pc, #340]	@ (8001df8 <HAL_GPIO_Init+0x2e0>)
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	089b      	lsrs	r3, r3, #2
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	589b      	ldr	r3, [r3, r2]
 8001cac:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	0013      	movs	r3, r2
 8001cbc:	43da      	mvns	r2, r3
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	23a0      	movs	r3, #160	@ 0xa0
 8001cc8:	05db      	lsls	r3, r3, #23
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d01f      	beq.n	8001d0e <HAL_GPIO_Init+0x1f6>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4a      	ldr	r2, [pc, #296]	@ (8001dfc <HAL_GPIO_Init+0x2e4>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d019      	beq.n	8001d0a <HAL_GPIO_Init+0x1f2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a49      	ldr	r2, [pc, #292]	@ (8001e00 <HAL_GPIO_Init+0x2e8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_GPIO_Init+0x1ee>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a48      	ldr	r2, [pc, #288]	@ (8001e04 <HAL_GPIO_Init+0x2ec>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d00d      	beq.n	8001d02 <HAL_GPIO_Init+0x1ea>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a47      	ldr	r2, [pc, #284]	@ (8001e08 <HAL_GPIO_Init+0x2f0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d007      	beq.n	8001cfe <HAL_GPIO_Init+0x1e6>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a46      	ldr	r2, [pc, #280]	@ (8001e0c <HAL_GPIO_Init+0x2f4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d101      	bne.n	8001cfa <HAL_GPIO_Init+0x1e2>
 8001cf6:	2305      	movs	r3, #5
 8001cf8:	e00a      	b.n	8001d10 <HAL_GPIO_Init+0x1f8>
 8001cfa:	2306      	movs	r3, #6
 8001cfc:	e008      	b.n	8001d10 <HAL_GPIO_Init+0x1f8>
 8001cfe:	2304      	movs	r3, #4
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x1f8>
 8001d02:	2303      	movs	r3, #3
 8001d04:	e004      	b.n	8001d10 <HAL_GPIO_Init+0x1f8>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e002      	b.n	8001d10 <HAL_GPIO_Init+0x1f8>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_GPIO_Init+0x1f8>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	2103      	movs	r1, #3
 8001d14:	400a      	ands	r2, r1
 8001d16:	0092      	lsls	r2, r2, #2
 8001d18:	4093      	lsls	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d20:	4935      	ldr	r1, [pc, #212]	@ (8001df8 <HAL_GPIO_Init+0x2e0>)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	089b      	lsrs	r3, r3, #2
 8001d26:	3302      	adds	r3, #2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d2e:	4b38      	ldr	r3, [pc, #224]	@ (8001e10 <HAL_GPIO_Init+0x2f8>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43da      	mvns	r2, r3
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	2380      	movs	r3, #128	@ 0x80
 8001d44:	035b      	lsls	r3, r3, #13
 8001d46:	4013      	ands	r3, r2
 8001d48:	d003      	beq.n	8001d52 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d52:	4b2f      	ldr	r3, [pc, #188]	@ (8001e10 <HAL_GPIO_Init+0x2f8>)
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001d58:	4b2d      	ldr	r3, [pc, #180]	@ (8001e10 <HAL_GPIO_Init+0x2f8>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43da      	mvns	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	4013      	ands	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	2380      	movs	r3, #128	@ 0x80
 8001d6e:	039b      	lsls	r3, r3, #14
 8001d70:	4013      	ands	r3, r2
 8001d72:	d003      	beq.n	8001d7c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d7c:	4b24      	ldr	r3, [pc, #144]	@ (8001e10 <HAL_GPIO_Init+0x2f8>)
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001d82:	4b23      	ldr	r3, [pc, #140]	@ (8001e10 <HAL_GPIO_Init+0x2f8>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4013      	ands	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	2380      	movs	r3, #128	@ 0x80
 8001d98:	029b      	lsls	r3, r3, #10
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <HAL_GPIO_Init+0x2f8>)
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dac:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <HAL_GPIO_Init+0x2f8>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	43da      	mvns	r2, r3
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4013      	ands	r3, r2
 8001dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	025b      	lsls	r3, r3, #9
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d003      	beq.n	8001dd0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001dd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <HAL_GPIO_Init+0x2f8>)
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	40da      	lsrs	r2, r3
 8001de4:	1e13      	subs	r3, r2, #0
 8001de6:	d000      	beq.n	8001dea <HAL_GPIO_Init+0x2d2>
 8001de8:	e6a2      	b.n	8001b30 <HAL_GPIO_Init+0x18>
  }
}
 8001dea:	46c0      	nop			@ (mov r8, r8)
 8001dec:	46c0      	nop			@ (mov r8, r8)
 8001dee:	46bd      	mov	sp, r7
 8001df0:	b006      	add	sp, #24
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	50000400 	.word	0x50000400
 8001e00:	50000800 	.word	0x50000800
 8001e04:	50000c00 	.word	0x50000c00
 8001e08:	50001000 	.word	0x50001000
 8001e0c:	50001c00 	.word	0x50001c00
 8001e10:	40010400 	.word	0x40010400

08001e14 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8001e2a:	e0bc      	b.n	8001fa6 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	409a      	lsls	r2, r3
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	4013      	ands	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d100      	bne.n	8001e40 <HAL_GPIO_DeInit+0x2c>
 8001e3e:	e0af      	b.n	8001fa0 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8001e40:	4a5e      	ldr	r2, [pc, #376]	@ (8001fbc <HAL_GPIO_DeInit+0x1a8>)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	3302      	adds	r3, #2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	589b      	ldr	r3, [r3, r2]
 8001e4c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	2203      	movs	r2, #3
 8001e52:	4013      	ands	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	409a      	lsls	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	23a0      	movs	r3, #160	@ 0xa0
 8001e64:	05db      	lsls	r3, r3, #23
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d01f      	beq.n	8001eaa <HAL_GPIO_DeInit+0x96>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a54      	ldr	r2, [pc, #336]	@ (8001fc0 <HAL_GPIO_DeInit+0x1ac>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d019      	beq.n	8001ea6 <HAL_GPIO_DeInit+0x92>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a53      	ldr	r2, [pc, #332]	@ (8001fc4 <HAL_GPIO_DeInit+0x1b0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_DeInit+0x8e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a52      	ldr	r2, [pc, #328]	@ (8001fc8 <HAL_GPIO_DeInit+0x1b4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00d      	beq.n	8001e9e <HAL_GPIO_DeInit+0x8a>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a51      	ldr	r2, [pc, #324]	@ (8001fcc <HAL_GPIO_DeInit+0x1b8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <HAL_GPIO_DeInit+0x86>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a50      	ldr	r2, [pc, #320]	@ (8001fd0 <HAL_GPIO_DeInit+0x1bc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_GPIO_DeInit+0x82>
 8001e92:	2305      	movs	r3, #5
 8001e94:	e00a      	b.n	8001eac <HAL_GPIO_DeInit+0x98>
 8001e96:	2306      	movs	r3, #6
 8001e98:	e008      	b.n	8001eac <HAL_GPIO_DeInit+0x98>
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_DeInit+0x98>
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e004      	b.n	8001eac <HAL_GPIO_DeInit+0x98>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_DeInit+0x98>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_DeInit+0x98>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	2103      	movs	r1, #3
 8001eb0:	400a      	ands	r2, r1
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	4093      	lsls	r3, r2
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d132      	bne.n	8001f22 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001ebc:	4b45      	ldr	r3, [pc, #276]	@ (8001fd4 <HAL_GPIO_DeInit+0x1c0>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43d9      	mvns	r1, r3
 8001ec4:	4b43      	ldr	r3, [pc, #268]	@ (8001fd4 <HAL_GPIO_DeInit+0x1c0>)
 8001ec6:	400a      	ands	r2, r1
 8001ec8:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001eca:	4b42      	ldr	r3, [pc, #264]	@ (8001fd4 <HAL_GPIO_DeInit+0x1c0>)
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43d9      	mvns	r1, r3
 8001ed2:	4b40      	ldr	r3, [pc, #256]	@ (8001fd4 <HAL_GPIO_DeInit+0x1c0>)
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001ed8:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd4 <HAL_GPIO_DeInit+0x1c0>)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8001fd4 <HAL_GPIO_DeInit+0x1c0>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001ee6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fd4 <HAL_GPIO_DeInit+0x1c0>)
 8001ee8:	689a      	ldr	r2, [r3, #8]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43d9      	mvns	r1, r3
 8001eee:	4b39      	ldr	r3, [pc, #228]	@ (8001fd4 <HAL_GPIO_DeInit+0x1c0>)
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	4013      	ands	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	409a      	lsls	r2, r3
 8001f00:	0013      	movs	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001f04:	4a2d      	ldr	r2, [pc, #180]	@ (8001fbc <HAL_GPIO_DeInit+0x1a8>)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	589a      	ldr	r2, [r3, r2]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	4829      	ldr	r0, [pc, #164]	@ (8001fbc <HAL_GPIO_DeInit+0x1a8>)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	400a      	ands	r2, r1
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2103      	movs	r1, #3
 8001f2c:	4099      	lsls	r1, r3
 8001f2e:	000b      	movs	r3, r1
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	08da      	lsrs	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3208      	adds	r2, #8
 8001f3e:	0092      	lsls	r2, r2, #2
 8001f40:	58d3      	ldr	r3, [r2, r3]
 8001f42:	697a      	ldr	r2, [r7, #20]
 8001f44:	2107      	movs	r1, #7
 8001f46:	400a      	ands	r2, r1
 8001f48:	0092      	lsls	r2, r2, #2
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	4091      	lsls	r1, r2
 8001f4e:	000a      	movs	r2, r1
 8001f50:	43d1      	mvns	r1, r2
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	08d2      	lsrs	r2, r2, #3
 8001f56:	4019      	ands	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	0092      	lsls	r2, r2, #2
 8001f5e:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	0052      	lsls	r2, r2, #1
 8001f68:	2103      	movs	r1, #3
 8001f6a:	4091      	lsls	r1, r2
 8001f6c:	000a      	movs	r2, r1
 8001f6e:	43d2      	mvns	r2, r2
 8001f70:	401a      	ands	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	4091      	lsls	r1, r2
 8001f80:	000a      	movs	r2, r1
 8001f82:	43d2      	mvns	r2, r2
 8001f84:	401a      	ands	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	0052      	lsls	r2, r2, #1
 8001f92:	2103      	movs	r1, #3
 8001f94:	4091      	lsls	r1, r2
 8001f96:	000a      	movs	r2, r1
 8001f98:	43d2      	mvns	r2, r2
 8001f9a:	401a      	ands	r2, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
    }
    position++;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	40da      	lsrs	r2, r3
 8001fac:	1e13      	subs	r3, r2, #0
 8001fae:	d000      	beq.n	8001fb2 <HAL_GPIO_DeInit+0x19e>
 8001fb0:	e73c      	b.n	8001e2c <HAL_GPIO_DeInit+0x18>
  }
}
 8001fb2:	46c0      	nop			@ (mov r8, r8)
 8001fb4:	46c0      	nop			@ (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b006      	add	sp, #24
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40010000 	.word	0x40010000
 8001fc0:	50000400 	.word	0x50000400
 8001fc4:	50000800 	.word	0x50000800
 8001fc8:	50000c00 	.word	0x50000c00
 8001fcc:	50001000 	.word	0x50001000
 8001fd0:	50001c00 	.word	0x50001c00
 8001fd4:	40010400 	.word	0x40010400

08001fd8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	0008      	movs	r0, r1
 8001fe2:	0011      	movs	r1, r2
 8001fe4:	1cbb      	adds	r3, r7, #2
 8001fe6:	1c02      	adds	r2, r0, #0
 8001fe8:	801a      	strh	r2, [r3, #0]
 8001fea:	1c7b      	adds	r3, r7, #1
 8001fec:	1c0a      	adds	r2, r1, #0
 8001fee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ff0:	1c7b      	adds	r3, r7, #1
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d004      	beq.n	8002002 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ff8:	1cbb      	adds	r3, r7, #2
 8001ffa:	881a      	ldrh	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002000:	e003      	b.n	800200a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002002:	1cbb      	adds	r3, r7, #2
 8002004:	881a      	ldrh	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800200a:	46c0      	nop			@ (mov r8, r8)
 800200c:	46bd      	mov	sp, r7
 800200e:	b002      	add	sp, #8
 8002010:	bd80      	pop	{r7, pc}
	...

08002014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e08f      	b.n	8002146 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2241      	movs	r2, #65	@ 0x41
 800202a:	5c9b      	ldrb	r3, [r3, r2]
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d107      	bne.n	8002042 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2240      	movs	r2, #64	@ 0x40
 8002036:	2100      	movs	r1, #0
 8002038:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	0018      	movs	r0, r3
 800203e:	f7fe fef1 	bl	8000e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2241      	movs	r2, #65	@ 0x41
 8002046:	2124      	movs	r1, #36	@ 0x24
 8002048:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	438a      	bics	r2, r1
 8002058:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	493b      	ldr	r1, [pc, #236]	@ (8002150 <HAL_I2C_Init+0x13c>)
 8002064:	400a      	ands	r2, r1
 8002066:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4938      	ldr	r1, [pc, #224]	@ (8002154 <HAL_I2C_Init+0x140>)
 8002074:	400a      	ands	r2, r1
 8002076:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d108      	bne.n	8002092 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2180      	movs	r1, #128	@ 0x80
 800208a:	0209      	lsls	r1, r1, #8
 800208c:	430a      	orrs	r2, r1
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	e007      	b.n	80020a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2184      	movs	r1, #132	@ 0x84
 800209c:	0209      	lsls	r1, r1, #8
 800209e:	430a      	orrs	r2, r1
 80020a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d109      	bne.n	80020be <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2180      	movs	r1, #128	@ 0x80
 80020b6:	0109      	lsls	r1, r1, #4
 80020b8:	430a      	orrs	r2, r1
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	e007      	b.n	80020ce <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4923      	ldr	r1, [pc, #140]	@ (8002158 <HAL_I2C_Init+0x144>)
 80020ca:	400a      	ands	r2, r1
 80020cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4920      	ldr	r1, [pc, #128]	@ (800215c <HAL_I2C_Init+0x148>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	491a      	ldr	r1, [pc, #104]	@ (8002154 <HAL_I2C_Init+0x140>)
 80020ea:	400a      	ands	r2, r1
 80020ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691a      	ldr	r2, [r3, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69d9      	ldr	r1, [r3, #28]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a1a      	ldr	r2, [r3, #32]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2101      	movs	r1, #1
 8002124:	430a      	orrs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2241      	movs	r2, #65	@ 0x41
 8002132:	2120      	movs	r1, #32
 8002134:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2242      	movs	r2, #66	@ 0x42
 8002140:	2100      	movs	r1, #0
 8002142:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	0018      	movs	r0, r3
 8002148:	46bd      	mov	sp, r7
 800214a:	b002      	add	sp, #8
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	f0ffffff 	.word	0xf0ffffff
 8002154:	ffff7fff 	.word	0xffff7fff
 8002158:	fffff7ff 	.word	0xfffff7ff
 800215c:	02008000 	.word	0x02008000

08002160 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e022      	b.n	80021b8 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2241      	movs	r2, #65	@ 0x41
 8002176:	2124      	movs	r1, #36	@ 0x24
 8002178:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2101      	movs	r1, #1
 8002186:	438a      	bics	r2, r1
 8002188:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	0018      	movs	r0, r3
 800218e:	f7fe fe8d 	bl	8000eac <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2241      	movs	r2, #65	@ 0x41
 800219c:	2100      	movs	r1, #0
 800219e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2242      	movs	r2, #66	@ 0x42
 80021aa:	2100      	movs	r1, #0
 80021ac:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2240      	movs	r2, #64	@ 0x40
 80021b2:	2100      	movs	r1, #0
 80021b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	0018      	movs	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	b002      	add	sp, #8
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b089      	sub	sp, #36	@ 0x24
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	0008      	movs	r0, r1
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	0019      	movs	r1, r3
 80021ce:	230a      	movs	r3, #10
 80021d0:	18fb      	adds	r3, r7, r3
 80021d2:	1c02      	adds	r2, r0, #0
 80021d4:	801a      	strh	r2, [r3, #0]
 80021d6:	2308      	movs	r3, #8
 80021d8:	18fb      	adds	r3, r7, r3
 80021da:	1c0a      	adds	r2, r1, #0
 80021dc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2241      	movs	r2, #65	@ 0x41
 80021e2:	5c9b      	ldrb	r3, [r3, r2]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	d000      	beq.n	80021ec <HAL_I2C_Master_Transmit+0x2c>
 80021ea:	e10a      	b.n	8002402 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2240      	movs	r2, #64	@ 0x40
 80021f0:	5c9b      	ldrb	r3, [r3, r2]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_I2C_Master_Transmit+0x3a>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e104      	b.n	8002404 <HAL_I2C_Master_Transmit+0x244>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2240      	movs	r2, #64	@ 0x40
 80021fe:	2101      	movs	r1, #1
 8002200:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002202:	f7ff fb59 	bl	80018b8 <HAL_GetTick>
 8002206:	0003      	movs	r3, r0
 8002208:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800220a:	2380      	movs	r3, #128	@ 0x80
 800220c:	0219      	lsls	r1, r3, #8
 800220e:	68f8      	ldr	r0, [r7, #12]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2319      	movs	r3, #25
 8002216:	2201      	movs	r2, #1
 8002218:	f000 fb22 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 800221c:	1e03      	subs	r3, r0, #0
 800221e:	d001      	beq.n	8002224 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0ef      	b.n	8002404 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2241      	movs	r2, #65	@ 0x41
 8002228:	2121      	movs	r1, #33	@ 0x21
 800222a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2242      	movs	r2, #66	@ 0x42
 8002230:	2110      	movs	r1, #16
 8002232:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2208      	movs	r2, #8
 8002244:	18ba      	adds	r2, r7, r2
 8002246:	8812      	ldrh	r2, [r2, #0]
 8002248:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002254:	b29b      	uxth	r3, r3
 8002256:	2bff      	cmp	r3, #255	@ 0xff
 8002258:	d906      	bls.n	8002268 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	22ff      	movs	r2, #255	@ 0xff
 800225e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002260:	2380      	movs	r3, #128	@ 0x80
 8002262:	045b      	lsls	r3, r3, #17
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	e007      	b.n	8002278 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002272:	2380      	movs	r3, #128	@ 0x80
 8002274:	049b      	lsls	r3, r3, #18
 8002276:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800227c:	2b00      	cmp	r3, #0
 800227e:	d027      	beq.n	80022d0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	781a      	ldrb	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	3301      	adds	r3, #1
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	697c      	ldr	r4, [r7, #20]
 80022bc:	230a      	movs	r3, #10
 80022be:	18fb      	adds	r3, r7, r3
 80022c0:	8819      	ldrh	r1, [r3, #0]
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	4b51      	ldr	r3, [pc, #324]	@ (800240c <HAL_I2C_Master_Transmit+0x24c>)
 80022c6:	9300      	str	r3, [sp, #0]
 80022c8:	0023      	movs	r3, r4
 80022ca:	f000 fd41 	bl	8002d50 <I2C_TransferConfig>
 80022ce:	e06f      	b.n	80023b0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	697c      	ldr	r4, [r7, #20]
 80022d8:	230a      	movs	r3, #10
 80022da:	18fb      	adds	r3, r7, r3
 80022dc:	8819      	ldrh	r1, [r3, #0]
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	4b4a      	ldr	r3, [pc, #296]	@ (800240c <HAL_I2C_Master_Transmit+0x24c>)
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	0023      	movs	r3, r4
 80022e6:	f000 fd33 	bl	8002d50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80022ea:	e061      	b.n	80023b0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 fb0c 	bl	8002910 <I2C_WaitOnTXISFlagUntilTimeout>
 80022f8:	1e03      	subs	r3, r0, #0
 80022fa:	d001      	beq.n	8002300 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e081      	b.n	8002404 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	781a      	ldrb	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002334:	b29b      	uxth	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d03a      	beq.n	80023b0 <HAL_I2C_Master_Transmit+0x1f0>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233e:	2b00      	cmp	r3, #0
 8002340:	d136      	bne.n	80023b0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002342:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	0013      	movs	r3, r2
 800234c:	2200      	movs	r2, #0
 800234e:	2180      	movs	r1, #128	@ 0x80
 8002350:	f000 fa86 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 8002354:	1e03      	subs	r3, r0, #0
 8002356:	d001      	beq.n	800235c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e053      	b.n	8002404 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002360:	b29b      	uxth	r3, r3
 8002362:	2bff      	cmp	r3, #255	@ 0xff
 8002364:	d911      	bls.n	800238a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	22ff      	movs	r2, #255	@ 0xff
 800236a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002370:	b2da      	uxtb	r2, r3
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	045c      	lsls	r4, r3, #17
 8002376:	230a      	movs	r3, #10
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	8819      	ldrh	r1, [r3, #0]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	2300      	movs	r3, #0
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	0023      	movs	r3, r4
 8002384:	f000 fce4 	bl	8002d50 <I2C_TransferConfig>
 8002388:	e012      	b.n	80023b0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002398:	b2da      	uxtb	r2, r3
 800239a:	2380      	movs	r3, #128	@ 0x80
 800239c:	049c      	lsls	r4, r3, #18
 800239e:	230a      	movs	r3, #10
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	8819      	ldrh	r1, [r3, #0]
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	2300      	movs	r3, #0
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	0023      	movs	r3, r4
 80023ac:	f000 fcd0 	bl	8002d50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d198      	bne.n	80022ec <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 faeb 	bl	800299c <I2C_WaitOnSTOPFlagUntilTimeout>
 80023c6:	1e03      	subs	r3, r0, #0
 80023c8:	d001      	beq.n	80023ce <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e01a      	b.n	8002404 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2220      	movs	r2, #32
 80023d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	490b      	ldr	r1, [pc, #44]	@ (8002410 <HAL_I2C_Master_Transmit+0x250>)
 80023e2:	400a      	ands	r2, r1
 80023e4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2241      	movs	r2, #65	@ 0x41
 80023ea:	2120      	movs	r1, #32
 80023ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2242      	movs	r2, #66	@ 0x42
 80023f2:	2100      	movs	r1, #0
 80023f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2240      	movs	r2, #64	@ 0x40
 80023fa:	2100      	movs	r1, #0
 80023fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80023fe:	2300      	movs	r3, #0
 8002400:	e000      	b.n	8002404 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8002402:	2302      	movs	r3, #2
  }
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b007      	add	sp, #28
 800240a:	bd90      	pop	{r4, r7, pc}
 800240c:	80002000 	.word	0x80002000
 8002410:	fe00e800 	.word	0xfe00e800

08002414 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002414:	b590      	push	{r4, r7, lr}
 8002416:	b089      	sub	sp, #36	@ 0x24
 8002418:	af02      	add	r7, sp, #8
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	0008      	movs	r0, r1
 800241e:	607a      	str	r2, [r7, #4]
 8002420:	0019      	movs	r1, r3
 8002422:	230a      	movs	r3, #10
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	1c02      	adds	r2, r0, #0
 8002428:	801a      	strh	r2, [r3, #0]
 800242a:	2308      	movs	r3, #8
 800242c:	18fb      	adds	r3, r7, r3
 800242e:	1c0a      	adds	r2, r1, #0
 8002430:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2241      	movs	r2, #65	@ 0x41
 8002436:	5c9b      	ldrb	r3, [r3, r2]
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b20      	cmp	r3, #32
 800243c:	d000      	beq.n	8002440 <HAL_I2C_Master_Receive+0x2c>
 800243e:	e0e8      	b.n	8002612 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2240      	movs	r2, #64	@ 0x40
 8002444:	5c9b      	ldrb	r3, [r3, r2]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d101      	bne.n	800244e <HAL_I2C_Master_Receive+0x3a>
 800244a:	2302      	movs	r3, #2
 800244c:	e0e2      	b.n	8002614 <HAL_I2C_Master_Receive+0x200>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2240      	movs	r2, #64	@ 0x40
 8002452:	2101      	movs	r1, #1
 8002454:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002456:	f7ff fa2f 	bl	80018b8 <HAL_GetTick>
 800245a:	0003      	movs	r3, r0
 800245c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800245e:	2380      	movs	r3, #128	@ 0x80
 8002460:	0219      	lsls	r1, r3, #8
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2319      	movs	r3, #25
 800246a:	2201      	movs	r2, #1
 800246c:	f000 f9f8 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 8002470:	1e03      	subs	r3, r0, #0
 8002472:	d001      	beq.n	8002478 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0cd      	b.n	8002614 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2241      	movs	r2, #65	@ 0x41
 800247c:	2122      	movs	r1, #34	@ 0x22
 800247e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2242      	movs	r2, #66	@ 0x42
 8002484:	2110      	movs	r1, #16
 8002486:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2208      	movs	r2, #8
 8002498:	18ba      	adds	r2, r7, r2
 800249a:	8812      	ldrh	r2, [r2, #0]
 800249c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2200      	movs	r2, #0
 80024a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	2bff      	cmp	r3, #255	@ 0xff
 80024ac:	d911      	bls.n	80024d2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b8:	b2da      	uxtb	r2, r3
 80024ba:	2380      	movs	r3, #128	@ 0x80
 80024bc:	045c      	lsls	r4, r3, #17
 80024be:	230a      	movs	r3, #10
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	8819      	ldrh	r1, [r3, #0]
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	4b55      	ldr	r3, [pc, #340]	@ (800261c <HAL_I2C_Master_Receive+0x208>)
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	0023      	movs	r3, r4
 80024cc:	f000 fc40 	bl	8002d50 <I2C_TransferConfig>
 80024d0:	e076      	b.n	80025c0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	2380      	movs	r3, #128	@ 0x80
 80024e4:	049c      	lsls	r4, r3, #18
 80024e6:	230a      	movs	r3, #10
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	8819      	ldrh	r1, [r3, #0]
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	4b4b      	ldr	r3, [pc, #300]	@ (800261c <HAL_I2C_Master_Receive+0x208>)
 80024f0:	9300      	str	r3, [sp, #0]
 80024f2:	0023      	movs	r3, r4
 80024f4:	f000 fc2c 	bl	8002d50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80024f8:	e062      	b.n	80025c0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	0018      	movs	r0, r3
 8002502:	f000 fa8f 	bl	8002a24 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d001      	beq.n	800250e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e082      	b.n	8002614 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d03a      	beq.n	80025c0 <HAL_I2C_Master_Receive+0x1ac>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254e:	2b00      	cmp	r3, #0
 8002550:	d136      	bne.n	80025c0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002552:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	0013      	movs	r3, r2
 800255c:	2200      	movs	r2, #0
 800255e:	2180      	movs	r1, #128	@ 0x80
 8002560:	f000 f97e 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 8002564:	1e03      	subs	r3, r0, #0
 8002566:	d001      	beq.n	800256c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e053      	b.n	8002614 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	2bff      	cmp	r3, #255	@ 0xff
 8002574:	d911      	bls.n	800259a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	22ff      	movs	r2, #255	@ 0xff
 800257a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002580:	b2da      	uxtb	r2, r3
 8002582:	2380      	movs	r3, #128	@ 0x80
 8002584:	045c      	lsls	r4, r3, #17
 8002586:	230a      	movs	r3, #10
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	8819      	ldrh	r1, [r3, #0]
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	2300      	movs	r3, #0
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	0023      	movs	r3, r4
 8002594:	f000 fbdc 	bl	8002d50 <I2C_TransferConfig>
 8002598:	e012      	b.n	80025c0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	2380      	movs	r3, #128	@ 0x80
 80025ac:	049c      	lsls	r4, r3, #18
 80025ae:	230a      	movs	r3, #10
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	8819      	ldrh	r1, [r3, #0]
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	2300      	movs	r3, #0
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	0023      	movs	r3, r4
 80025bc:	f000 fbc8 	bl	8002d50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d197      	bne.n	80024fa <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 f9e3 	bl	800299c <I2C_WaitOnSTOPFlagUntilTimeout>
 80025d6:	1e03      	subs	r3, r0, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e01a      	b.n	8002614 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2220      	movs	r2, #32
 80025e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685a      	ldr	r2, [r3, #4]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	490b      	ldr	r1, [pc, #44]	@ (8002620 <HAL_I2C_Master_Receive+0x20c>)
 80025f2:	400a      	ands	r2, r1
 80025f4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2241      	movs	r2, #65	@ 0x41
 80025fa:	2120      	movs	r1, #32
 80025fc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2242      	movs	r2, #66	@ 0x42
 8002602:	2100      	movs	r1, #0
 8002604:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2240      	movs	r2, #64	@ 0x40
 800260a:	2100      	movs	r1, #0
 800260c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800260e:	2300      	movs	r3, #0
 8002610:	e000      	b.n	8002614 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002612:	2302      	movs	r3, #2
  }
}
 8002614:	0018      	movs	r0, r3
 8002616:	46bd      	mov	sp, r7
 8002618:	b007      	add	sp, #28
 800261a:	bd90      	pop	{r4, r7, pc}
 800261c:	80002400 	.word	0x80002400
 8002620:	fe00e800 	.word	0xfe00e800

08002624 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	@ 0x28
 8002628:	af02      	add	r7, sp, #8
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	230a      	movs	r3, #10
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	1c0a      	adds	r2, r1, #0
 8002636:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2241      	movs	r2, #65	@ 0x41
 8002640:	5c9b      	ldrb	r3, [r3, r2]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b20      	cmp	r3, #32
 8002646:	d000      	beq.n	800264a <HAL_I2C_IsDeviceReady+0x26>
 8002648:	e0df      	b.n	800280a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699a      	ldr	r2, [r3, #24]
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	401a      	ands	r2, r3
 8002656:	2380      	movs	r3, #128	@ 0x80
 8002658:	021b      	lsls	r3, r3, #8
 800265a:	429a      	cmp	r2, r3
 800265c:	d101      	bne.n	8002662 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800265e:	2302      	movs	r3, #2
 8002660:	e0d4      	b.n	800280c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2240      	movs	r2, #64	@ 0x40
 8002666:	5c9b      	ldrb	r3, [r3, r2]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_I2C_IsDeviceReady+0x4c>
 800266c:	2302      	movs	r3, #2
 800266e:	e0cd      	b.n	800280c <HAL_I2C_IsDeviceReady+0x1e8>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2240      	movs	r2, #64	@ 0x40
 8002674:	2101      	movs	r1, #1
 8002676:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2241      	movs	r2, #65	@ 0x41
 800267c:	2124      	movs	r1, #36	@ 0x24
 800267e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_I2C_IsDeviceReady+0x7a>
 800268e:	230a      	movs	r3, #10
 8002690:	18fb      	adds	r3, r7, r3
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	059b      	lsls	r3, r3, #22
 8002696:	0d9b      	lsrs	r3, r3, #22
 8002698:	4a5e      	ldr	r2, [pc, #376]	@ (8002814 <HAL_I2C_IsDeviceReady+0x1f0>)
 800269a:	431a      	orrs	r2, r3
 800269c:	e006      	b.n	80026ac <HAL_I2C_IsDeviceReady+0x88>
 800269e:	230a      	movs	r3, #10
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	881b      	ldrh	r3, [r3, #0]
 80026a4:	059b      	lsls	r3, r3, #22
 80026a6:	0d9b      	lsrs	r3, r3, #22
 80026a8:	4a5b      	ldr	r2, [pc, #364]	@ (8002818 <HAL_I2C_IsDeviceReady+0x1f4>)
 80026aa:	431a      	orrs	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80026b2:	f7ff f901 	bl	80018b8 <HAL_GetTick>
 80026b6:	0003      	movs	r3, r0
 80026b8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	2220      	movs	r2, #32
 80026c2:	4013      	ands	r3, r2
 80026c4:	3b20      	subs	r3, #32
 80026c6:	425a      	negs	r2, r3
 80026c8:	4153      	adcs	r3, r2
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	231f      	movs	r3, #31
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2210      	movs	r2, #16
 80026da:	4013      	ands	r3, r2
 80026dc:	3b10      	subs	r3, #16
 80026de:	425a      	negs	r2, r3
 80026e0:	4153      	adcs	r3, r2
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	231e      	movs	r3, #30
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80026ea:	e035      	b.n	8002758 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	d01a      	beq.n	8002728 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80026f2:	f7ff f8e1 	bl	80018b8 <HAL_GetTick>
 80026f6:	0002      	movs	r2, r0
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d302      	bcc.n	8002708 <HAL_I2C_IsDeviceReady+0xe4>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d10f      	bne.n	8002728 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2241      	movs	r2, #65	@ 0x41
 800270c:	2120      	movs	r1, #32
 800270e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002714:	2220      	movs	r2, #32
 8002716:	431a      	orrs	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2240      	movs	r2, #64	@ 0x40
 8002720:	2100      	movs	r1, #0
 8002722:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e071      	b.n	800280c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2220      	movs	r2, #32
 8002730:	4013      	ands	r3, r2
 8002732:	3b20      	subs	r3, #32
 8002734:	425a      	negs	r2, r3
 8002736:	4153      	adcs	r3, r2
 8002738:	b2da      	uxtb	r2, r3
 800273a:	231f      	movs	r3, #31
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	2210      	movs	r2, #16
 8002748:	4013      	ands	r3, r2
 800274a:	3b10      	subs	r3, #16
 800274c:	425a      	negs	r2, r3
 800274e:	4153      	adcs	r3, r2
 8002750:	b2da      	uxtb	r2, r3
 8002752:	231e      	movs	r3, #30
 8002754:	18fb      	adds	r3, r7, r3
 8002756:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002758:	231f      	movs	r3, #31
 800275a:	18fb      	adds	r3, r7, r3
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d104      	bne.n	800276c <HAL_I2C_IsDeviceReady+0x148>
 8002762:	231e      	movs	r3, #30
 8002764:	18fb      	adds	r3, r7, r3
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0bf      	beq.n	80026ec <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2210      	movs	r2, #16
 8002774:	4013      	ands	r3, r2
 8002776:	2b10      	cmp	r3, #16
 8002778:	d01a      	beq.n	80027b0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800277a:	683a      	ldr	r2, [r7, #0]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	0013      	movs	r3, r2
 8002784:	2200      	movs	r2, #0
 8002786:	2120      	movs	r1, #32
 8002788:	f000 f86a 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 800278c:	1e03      	subs	r3, r0, #0
 800278e:	d001      	beq.n	8002794 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e03b      	b.n	800280c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2220      	movs	r2, #32
 800279a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2241      	movs	r2, #65	@ 0x41
 80027a0:	2120      	movs	r1, #32
 80027a2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2240      	movs	r2, #64	@ 0x40
 80027a8:	2100      	movs	r1, #0
 80027aa:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	e02d      	b.n	800280c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	9300      	str	r3, [sp, #0]
 80027b8:	0013      	movs	r3, r2
 80027ba:	2200      	movs	r2, #0
 80027bc:	2120      	movs	r1, #32
 80027be:	f000 f84f 	bl	8002860 <I2C_WaitOnFlagUntilTimeout>
 80027c2:	1e03      	subs	r3, r0, #0
 80027c4:	d001      	beq.n	80027ca <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e020      	b.n	800280c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2210      	movs	r2, #16
 80027d0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2220      	movs	r2, #32
 80027d8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	3301      	adds	r3, #1
 80027de:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d900      	bls.n	80027ea <HAL_I2C_IsDeviceReady+0x1c6>
 80027e8:	e74d      	b.n	8002686 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2241      	movs	r2, #65	@ 0x41
 80027ee:	2120      	movs	r1, #32
 80027f0:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f6:	2220      	movs	r2, #32
 80027f8:	431a      	orrs	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2240      	movs	r2, #64	@ 0x40
 8002802:	2100      	movs	r1, #0
 8002804:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800280a:	2302      	movs	r3, #2
  }
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	b008      	add	sp, #32
 8002812:	bd80      	pop	{r7, pc}
 8002814:	02002000 	.word	0x02002000
 8002818:	02002800 	.word	0x02002800

0800281c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2202      	movs	r2, #2
 800282c:	4013      	ands	r3, r2
 800282e:	2b02      	cmp	r3, #2
 8002830:	d103      	bne.n	800283a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2200      	movs	r2, #0
 8002838:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	2201      	movs	r2, #1
 8002842:	4013      	ands	r3, r2
 8002844:	2b01      	cmp	r3, #1
 8002846:	d007      	beq.n	8002858 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699a      	ldr	r2, [r3, #24]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2101      	movs	r1, #1
 8002854:	430a      	orrs	r2, r1
 8002856:	619a      	str	r2, [r3, #24]
  }
}
 8002858:	46c0      	nop			@ (mov r8, r8)
 800285a:	46bd      	mov	sp, r7
 800285c:	b002      	add	sp, #8
 800285e:	bd80      	pop	{r7, pc}

08002860 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	1dfb      	adds	r3, r7, #7
 800286e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002870:	e03a      	b.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	0018      	movs	r0, r3
 800287a:	f000 f971 	bl	8002b60 <I2C_IsErrorOccurred>
 800287e:	1e03      	subs	r3, r0, #0
 8002880:	d001      	beq.n	8002886 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e040      	b.n	8002908 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	3301      	adds	r3, #1
 800288a:	d02d      	beq.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288c:	f7ff f814 	bl	80018b8 <HAL_GetTick>
 8002890:	0002      	movs	r2, r0
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d302      	bcc.n	80028a2 <I2C_WaitOnFlagUntilTimeout+0x42>
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d122      	bne.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	4013      	ands	r3, r2
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	425a      	negs	r2, r3
 80028b2:	4153      	adcs	r3, r2
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	001a      	movs	r2, r3
 80028b8:	1dfb      	adds	r3, r7, #7
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d113      	bne.n	80028e8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c4:	2220      	movs	r2, #32
 80028c6:	431a      	orrs	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2241      	movs	r2, #65	@ 0x41
 80028d0:	2120      	movs	r1, #32
 80028d2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2242      	movs	r2, #66	@ 0x42
 80028d8:	2100      	movs	r1, #0
 80028da:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2240      	movs	r2, #64	@ 0x40
 80028e0:	2100      	movs	r1, #0
 80028e2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e00f      	b.n	8002908 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	4013      	ands	r3, r2
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	425a      	negs	r2, r3
 80028f8:	4153      	adcs	r3, r2
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	001a      	movs	r2, r3
 80028fe:	1dfb      	adds	r3, r7, #7
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d0b5      	beq.n	8002872 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	0018      	movs	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	b004      	add	sp, #16
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800291c:	e032      	b.n	8002984 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	0018      	movs	r0, r3
 8002926:	f000 f91b 	bl	8002b60 <I2C_IsErrorOccurred>
 800292a:	1e03      	subs	r3, r0, #0
 800292c:	d001      	beq.n	8002932 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e030      	b.n	8002994 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	3301      	adds	r3, #1
 8002936:	d025      	beq.n	8002984 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002938:	f7fe ffbe 	bl	80018b8 <HAL_GetTick>
 800293c:	0002      	movs	r2, r0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	429a      	cmp	r2, r3
 8002946:	d302      	bcc.n	800294e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d11a      	bne.n	8002984 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	2202      	movs	r2, #2
 8002956:	4013      	ands	r3, r2
 8002958:	2b02      	cmp	r3, #2
 800295a:	d013      	beq.n	8002984 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002960:	2220      	movs	r2, #32
 8002962:	431a      	orrs	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2241      	movs	r2, #65	@ 0x41
 800296c:	2120      	movs	r1, #32
 800296e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2242      	movs	r2, #66	@ 0x42
 8002974:	2100      	movs	r1, #0
 8002976:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2240      	movs	r2, #64	@ 0x40
 800297c:	2100      	movs	r1, #0
 800297e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e007      	b.n	8002994 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2202      	movs	r2, #2
 800298c:	4013      	ands	r3, r2
 800298e:	2b02      	cmp	r3, #2
 8002990:	d1c5      	bne.n	800291e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	0018      	movs	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	b004      	add	sp, #16
 800299a:	bd80      	pop	{r7, pc}

0800299c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029a8:	e02f      	b.n	8002a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	0018      	movs	r0, r3
 80029b2:	f000 f8d5 	bl	8002b60 <I2C_IsErrorOccurred>
 80029b6:	1e03      	subs	r3, r0, #0
 80029b8:	d001      	beq.n	80029be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e02d      	b.n	8002a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029be:	f7fe ff7b 	bl	80018b8 <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d302      	bcc.n	80029d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d11a      	bne.n	8002a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2220      	movs	r2, #32
 80029dc:	4013      	ands	r3, r2
 80029de:	2b20      	cmp	r3, #32
 80029e0:	d013      	beq.n	8002a0a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e6:	2220      	movs	r2, #32
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2241      	movs	r2, #65	@ 0x41
 80029f2:	2120      	movs	r1, #32
 80029f4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2242      	movs	r2, #66	@ 0x42
 80029fa:	2100      	movs	r1, #0
 80029fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2240      	movs	r2, #64	@ 0x40
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e007      	b.n	8002a1a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	2220      	movs	r2, #32
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d1c8      	bne.n	80029aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b004      	add	sp, #16
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a30:	2317      	movs	r3, #23
 8002a32:	18fb      	adds	r3, r7, r3
 8002a34:	2200      	movs	r2, #0
 8002a36:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002a38:	e07b      	b.n	8002b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68b9      	ldr	r1, [r7, #8]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f000 f88d 	bl	8002b60 <I2C_IsErrorOccurred>
 8002a46:	1e03      	subs	r3, r0, #0
 8002a48:	d003      	beq.n	8002a52 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8002a4a:	2317      	movs	r3, #23
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	2201      	movs	r2, #1
 8002a50:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d140      	bne.n	8002ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8002a60:	2117      	movs	r1, #23
 8002a62:	187b      	adds	r3, r7, r1
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d13b      	bne.n	8002ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2204      	movs	r2, #4
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d106      	bne.n	8002a86 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002a80:	187b      	adds	r3, r7, r1
 8002a82:	2200      	movs	r2, #0
 8002a84:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	2210      	movs	r2, #16
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2b10      	cmp	r3, #16
 8002a92:	d123      	bne.n	8002adc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2210      	movs	r2, #16
 8002a9a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4929      	ldr	r1, [pc, #164]	@ (8002b5c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2241      	movs	r2, #65	@ 0x41
 8002abe:	2120      	movs	r1, #32
 8002ac0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2242      	movs	r2, #66	@ 0x42
 8002ac6:	2100      	movs	r1, #0
 8002ac8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2240      	movs	r2, #64	@ 0x40
 8002ace:	2100      	movs	r1, #0
 8002ad0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002ad2:	2317      	movs	r3, #23
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
 8002ada:	e002      	b.n	8002ae2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002ae2:	f7fe fee9 	bl	80018b8 <HAL_GetTick>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d302      	bcc.n	8002af8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d11c      	bne.n	8002b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8002af8:	2017      	movs	r0, #23
 8002afa:	183b      	adds	r3, r7, r0
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d117      	bne.n	8002b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2204      	movs	r2, #4
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d010      	beq.n	8002b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b14:	2220      	movs	r2, #32
 8002b16:	431a      	orrs	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2241      	movs	r2, #65	@ 0x41
 8002b20:	2120      	movs	r1, #32
 8002b22:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2240      	movs	r2, #64	@ 0x40
 8002b28:	2100      	movs	r1, #0
 8002b2a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8002b2c:	183b      	adds	r3, r7, r0
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d005      	beq.n	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002b40:	2317      	movs	r3, #23
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d100      	bne.n	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8002b4a:	e776      	b.n	8002a3a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8002b4c:	2317      	movs	r3, #23
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	781b      	ldrb	r3, [r3, #0]
}
 8002b52:	0018      	movs	r0, r3
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b006      	add	sp, #24
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			@ (mov r8, r8)
 8002b5c:	fe00e800 	.word	0xfe00e800

08002b60 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	@ 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6c:	2327      	movs	r3, #39	@ 0x27
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	2200      	movs	r2, #0
 8002b72:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	2210      	movs	r2, #16
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d100      	bne.n	8002b8e <I2C_IsErrorOccurred+0x2e>
 8002b8c:	e079      	b.n	8002c82 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2210      	movs	r2, #16
 8002b94:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b96:	e057      	b.n	8002c48 <I2C_IsErrorOccurred+0xe8>
 8002b98:	2227      	movs	r2, #39	@ 0x27
 8002b9a:	18bb      	adds	r3, r7, r2
 8002b9c:	18ba      	adds	r2, r7, r2
 8002b9e:	7812      	ldrb	r2, [r2, #0]
 8002ba0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	d04f      	beq.n	8002c48 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ba8:	f7fe fe86 	bl	80018b8 <HAL_GetTick>
 8002bac:	0002      	movs	r2, r0
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d302      	bcc.n	8002bbe <I2C_IsErrorOccurred+0x5e>
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d144      	bne.n	8002c48 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	2380      	movs	r3, #128	@ 0x80
 8002bc6:	01db      	lsls	r3, r3, #7
 8002bc8:	4013      	ands	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002bcc:	2013      	movs	r0, #19
 8002bce:	183b      	adds	r3, r7, r0
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	2142      	movs	r1, #66	@ 0x42
 8002bd4:	5c52      	ldrb	r2, [r2, r1]
 8002bd6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	2380      	movs	r3, #128	@ 0x80
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	401a      	ands	r2, r3
 8002be4:	2380      	movs	r3, #128	@ 0x80
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d126      	bne.n	8002c3a <I2C_IsErrorOccurred+0xda>
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	01db      	lsls	r3, r3, #7
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d021      	beq.n	8002c3a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8002bf6:	183b      	adds	r3, r7, r0
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d01d      	beq.n	8002c3a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	01c9      	lsls	r1, r1, #7
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002c10:	f7fe fe52 	bl	80018b8 <HAL_GetTick>
 8002c14:	0003      	movs	r3, r0
 8002c16:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c18:	e00f      	b.n	8002c3a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002c1a:	f7fe fe4d 	bl	80018b8 <HAL_GetTick>
 8002c1e:	0002      	movs	r2, r0
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	2b19      	cmp	r3, #25
 8002c26:	d908      	bls.n	8002c3a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	2220      	movs	r2, #32
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002c30:	2327      	movs	r3, #39	@ 0x27
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]

              break;
 8002c38:	e006      	b.n	8002c48 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2220      	movs	r2, #32
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d1e8      	bne.n	8002c1a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	2220      	movs	r2, #32
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d004      	beq.n	8002c60 <I2C_IsErrorOccurred+0x100>
 8002c56:	2327      	movs	r3, #39	@ 0x27
 8002c58:	18fb      	adds	r3, r7, r3
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d09b      	beq.n	8002b98 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002c60:	2327      	movs	r3, #39	@ 0x27
 8002c62:	18fb      	adds	r3, r7, r3
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d103      	bne.n	8002c72 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	2204      	movs	r2, #4
 8002c76:	4313      	orrs	r3, r2
 8002c78:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c7a:	2327      	movs	r3, #39	@ 0x27
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	699b      	ldr	r3, [r3, #24]
 8002c88:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	2380      	movs	r3, #128	@ 0x80
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	4013      	ands	r3, r2
 8002c92:	d00c      	beq.n	8002cae <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	2201      	movs	r2, #1
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2280      	movs	r2, #128	@ 0x80
 8002ca2:	0052      	lsls	r2, r2, #1
 8002ca4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ca6:	2327      	movs	r3, #39	@ 0x27
 8002ca8:	18fb      	adds	r3, r7, r3
 8002caa:	2201      	movs	r2, #1
 8002cac:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	2380      	movs	r3, #128	@ 0x80
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d00c      	beq.n	8002cd2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002cb8:	6a3b      	ldr	r3, [r7, #32]
 8002cba:	2208      	movs	r2, #8
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2280      	movs	r2, #128	@ 0x80
 8002cc6:	00d2      	lsls	r2, r2, #3
 8002cc8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cca:	2327      	movs	r3, #39	@ 0x27
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d00c      	beq.n	8002cf6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2280      	movs	r2, #128	@ 0x80
 8002cea:	0092      	lsls	r2, r2, #2
 8002cec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002cee:	2327      	movs	r3, #39	@ 0x27
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002cf6:	2327      	movs	r3, #39	@ 0x27
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01d      	beq.n	8002d3c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	0018      	movs	r0, r3
 8002d04:	f7ff fd8a 	bl	800281c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	490e      	ldr	r1, [pc, #56]	@ (8002d4c <I2C_IsErrorOccurred+0x1ec>)
 8002d14:	400a      	ands	r2, r1
 8002d16:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d1c:	6a3b      	ldr	r3, [r7, #32]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2241      	movs	r2, #65	@ 0x41
 8002d28:	2120      	movs	r1, #32
 8002d2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2242      	movs	r2, #66	@ 0x42
 8002d30:	2100      	movs	r1, #0
 8002d32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2240      	movs	r2, #64	@ 0x40
 8002d38:	2100      	movs	r1, #0
 8002d3a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002d3c:	2327      	movs	r3, #39	@ 0x27
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	781b      	ldrb	r3, [r3, #0]
}
 8002d42:	0018      	movs	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b00a      	add	sp, #40	@ 0x28
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			@ (mov r8, r8)
 8002d4c:	fe00e800 	.word	0xfe00e800

08002d50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002d50:	b590      	push	{r4, r7, lr}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	0008      	movs	r0, r1
 8002d5a:	0011      	movs	r1, r2
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	240a      	movs	r4, #10
 8002d60:	193b      	adds	r3, r7, r4
 8002d62:	1c02      	adds	r2, r0, #0
 8002d64:	801a      	strh	r2, [r3, #0]
 8002d66:	2009      	movs	r0, #9
 8002d68:	183b      	adds	r3, r7, r0
 8002d6a:	1c0a      	adds	r2, r1, #0
 8002d6c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d6e:	193b      	adds	r3, r7, r4
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	059b      	lsls	r3, r3, #22
 8002d74:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d76:	183b      	adds	r3, r7, r0
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	0419      	lsls	r1, r3, #16
 8002d7c:	23ff      	movs	r3, #255	@ 0xff
 8002d7e:	041b      	lsls	r3, r3, #16
 8002d80:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d82:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	085b      	lsrs	r3, r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002d9a:	0d51      	lsrs	r1, r2, #21
 8002d9c:	2280      	movs	r2, #128	@ 0x80
 8002d9e:	00d2      	lsls	r2, r2, #3
 8002da0:	400a      	ands	r2, r1
 8002da2:	4907      	ldr	r1, [pc, #28]	@ (8002dc0 <I2C_TransferConfig+0x70>)
 8002da4:	430a      	orrs	r2, r1
 8002da6:	43d2      	mvns	r2, r2
 8002da8:	401a      	ands	r2, r3
 8002daa:	0011      	movs	r1, r2
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002db6:	46c0      	nop			@ (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b007      	add	sp, #28
 8002dbc:	bd90      	pop	{r4, r7, pc}
 8002dbe:	46c0      	nop			@ (mov r8, r8)
 8002dc0:	03ff63ff 	.word	0x03ff63ff

08002dc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2241      	movs	r2, #65	@ 0x41
 8002dd2:	5c9b      	ldrb	r3, [r3, r2]
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b20      	cmp	r3, #32
 8002dd8:	d138      	bne.n	8002e4c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2240      	movs	r2, #64	@ 0x40
 8002dde:	5c9b      	ldrb	r3, [r3, r2]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e032      	b.n	8002e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2240      	movs	r2, #64	@ 0x40
 8002dec:	2101      	movs	r1, #1
 8002dee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2241      	movs	r2, #65	@ 0x41
 8002df4:	2124      	movs	r1, #36	@ 0x24
 8002df6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2101      	movs	r1, #1
 8002e04:	438a      	bics	r2, r1
 8002e06:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4911      	ldr	r1, [pc, #68]	@ (8002e58 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002e14:	400a      	ands	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6819      	ldr	r1, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2101      	movs	r1, #1
 8002e34:	430a      	orrs	r2, r1
 8002e36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2241      	movs	r2, #65	@ 0x41
 8002e3c:	2120      	movs	r1, #32
 8002e3e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2240      	movs	r2, #64	@ 0x40
 8002e44:	2100      	movs	r1, #0
 8002e46:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	e000      	b.n	8002e4e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e4c:	2302      	movs	r3, #2
  }
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b002      	add	sp, #8
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	ffffefff 	.word	0xffffefff

08002e5c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2241      	movs	r2, #65	@ 0x41
 8002e6a:	5c9b      	ldrb	r3, [r3, r2]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d139      	bne.n	8002ee6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2240      	movs	r2, #64	@ 0x40
 8002e76:	5c9b      	ldrb	r3, [r3, r2]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e033      	b.n	8002ee8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2240      	movs	r2, #64	@ 0x40
 8002e84:	2101      	movs	r1, #1
 8002e86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2241      	movs	r2, #65	@ 0x41
 8002e8c:	2124      	movs	r1, #36	@ 0x24
 8002e8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	438a      	bics	r2, r1
 8002e9e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a11      	ldr	r2, [pc, #68]	@ (8002ef0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002eac:	4013      	ands	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	021b      	lsls	r3, r3, #8
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2101      	movs	r1, #1
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2241      	movs	r2, #65	@ 0x41
 8002ed6:	2120      	movs	r1, #32
 8002ed8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2240      	movs	r2, #64	@ 0x40
 8002ede:	2100      	movs	r1, #0
 8002ee0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e000      	b.n	8002ee8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ee6:	2302      	movs	r3, #2
  }
}
 8002ee8:	0018      	movs	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	b004      	add	sp, #16
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	fffff0ff 	.word	0xfffff0ff

08002ef4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	000a      	movs	r2, r1
 8002efe:	1cfb      	adds	r3, r7, #3
 8002f00:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8002f06:	4b25      	ldr	r3, [pc, #148]	@ (8002f9c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	2380      	movs	r3, #128	@ 0x80
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8002f12:	4b23      	ldr	r3, [pc, #140]	@ (8002fa0 <HAL_PWR_EnterSTOPMode+0xac>)
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	2201      	movs	r2, #1
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d008      	beq.n	8002f34 <HAL_PWR_EnterSTOPMode+0x40>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d005      	beq.n	8002f34 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8002f28:	4b1c      	ldr	r3, [pc, #112]	@ (8002f9c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f9c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002f2e:	491d      	ldr	r1, [pc, #116]	@ (8002fa4 <HAL_PWR_EnterSTOPMode+0xb0>)
 8002f30:	400a      	ands	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8002f34:	4b19      	ldr	r3, [pc, #100]	@ (8002f9c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	4393      	bics	r3, r2
 8002f40:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8002f4a:	4b14      	ldr	r3, [pc, #80]	@ (8002f9c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002f50:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	4b14      	ldr	r3, [pc, #80]	@ (8002fa8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002f56:	2104      	movs	r1, #4
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8002f5c:	1cfb      	adds	r3, r7, #3
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002f64:	bf30      	wfi
 8002f66:	e002      	b.n	8002f6e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002f68:	bf40      	sev
    __WFE();
 8002f6a:	bf20      	wfe
    __WFE();
 8002f6c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa8 <HAL_PWR_EnterSTOPMode+0xb4>)
 8002f74:	2104      	movs	r1, #4
 8002f76:	438a      	bics	r2, r1
 8002f78:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d009      	beq.n	8002f94 <HAL_PWR_EnterSTOPMode+0xa0>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d006      	beq.n	8002f94 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8002f86:	4b05      	ldr	r3, [pc, #20]	@ (8002f9c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	4b04      	ldr	r3, [pc, #16]	@ (8002f9c <HAL_PWR_EnterSTOPMode+0xa8>)
 8002f8c:	2180      	movs	r1, #128	@ 0x80
 8002f8e:	0089      	lsls	r1, r1, #2
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]
  }
}
 8002f94:	46c0      	nop			@ (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b006      	add	sp, #24
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40007000 	.word	0x40007000
 8002fa0:	40010000 	.word	0x40010000
 8002fa4:	fffffdff 	.word	0xfffffdff
 8002fa8:	e000ed00 	.word	0xe000ed00

08002fac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fac:	b5b0      	push	{r4, r5, r7, lr}
 8002fae:	b08a      	sub	sp, #40	@ 0x28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d102      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	f000 fbbf 	bl	800373e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc0:	4bc9      	ldr	r3, [pc, #804]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	220c      	movs	r2, #12
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fca:	4bc7      	ldr	r3, [pc, #796]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	2380      	movs	r3, #128	@ 0x80
 8002fd0:	025b      	lsls	r3, r3, #9
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d100      	bne.n	8002fe2 <HAL_RCC_OscConfig+0x36>
 8002fe0:	e07e      	b.n	80030e0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d007      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b0c      	cmp	r3, #12
 8002fec:	d112      	bne.n	8003014 <HAL_RCC_OscConfig+0x68>
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	2380      	movs	r3, #128	@ 0x80
 8002ff2:	025b      	lsls	r3, r3, #9
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d10d      	bne.n	8003014 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff8:	4bbb      	ldr	r3, [pc, #748]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	2380      	movs	r3, #128	@ 0x80
 8002ffe:	029b      	lsls	r3, r3, #10
 8003000:	4013      	ands	r3, r2
 8003002:	d100      	bne.n	8003006 <HAL_RCC_OscConfig+0x5a>
 8003004:	e06b      	b.n	80030de <HAL_RCC_OscConfig+0x132>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d167      	bne.n	80030de <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	f000 fb95 	bl	800373e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	2380      	movs	r3, #128	@ 0x80
 800301a:	025b      	lsls	r3, r3, #9
 800301c:	429a      	cmp	r2, r3
 800301e:	d107      	bne.n	8003030 <HAL_RCC_OscConfig+0x84>
 8003020:	4bb1      	ldr	r3, [pc, #708]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4bb0      	ldr	r3, [pc, #704]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003026:	2180      	movs	r1, #128	@ 0x80
 8003028:	0249      	lsls	r1, r1, #9
 800302a:	430a      	orrs	r2, r1
 800302c:	601a      	str	r2, [r3, #0]
 800302e:	e027      	b.n	8003080 <HAL_RCC_OscConfig+0xd4>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	23a0      	movs	r3, #160	@ 0xa0
 8003036:	02db      	lsls	r3, r3, #11
 8003038:	429a      	cmp	r2, r3
 800303a:	d10e      	bne.n	800305a <HAL_RCC_OscConfig+0xae>
 800303c:	4baa      	ldr	r3, [pc, #680]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4ba9      	ldr	r3, [pc, #676]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003042:	2180      	movs	r1, #128	@ 0x80
 8003044:	02c9      	lsls	r1, r1, #11
 8003046:	430a      	orrs	r2, r1
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	4ba7      	ldr	r3, [pc, #668]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4ba6      	ldr	r3, [pc, #664]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003050:	2180      	movs	r1, #128	@ 0x80
 8003052:	0249      	lsls	r1, r1, #9
 8003054:	430a      	orrs	r2, r1
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	e012      	b.n	8003080 <HAL_RCC_OscConfig+0xd4>
 800305a:	4ba3      	ldr	r3, [pc, #652]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4ba2      	ldr	r3, [pc, #648]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003060:	49a2      	ldr	r1, [pc, #648]	@ (80032ec <HAL_RCC_OscConfig+0x340>)
 8003062:	400a      	ands	r2, r1
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	4ba0      	ldr	r3, [pc, #640]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	2380      	movs	r3, #128	@ 0x80
 800306c:	025b      	lsls	r3, r3, #9
 800306e:	4013      	ands	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	4b9c      	ldr	r3, [pc, #624]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4b9b      	ldr	r3, [pc, #620]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 800307a:	499d      	ldr	r1, [pc, #628]	@ (80032f0 <HAL_RCC_OscConfig+0x344>)
 800307c:	400a      	ands	r2, r1
 800307e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d015      	beq.n	80030b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe fc16 	bl	80018b8 <HAL_GetTick>
 800308c:	0003      	movs	r3, r0
 800308e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003090:	e009      	b.n	80030a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003092:	f7fe fc11 	bl	80018b8 <HAL_GetTick>
 8003096:	0002      	movs	r2, r0
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b64      	cmp	r3, #100	@ 0x64
 800309e:	d902      	bls.n	80030a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	f000 fb4c 	bl	800373e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030a6:	4b90      	ldr	r3, [pc, #576]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	2380      	movs	r3, #128	@ 0x80
 80030ac:	029b      	lsls	r3, r3, #10
 80030ae:	4013      	ands	r3, r2
 80030b0:	d0ef      	beq.n	8003092 <HAL_RCC_OscConfig+0xe6>
 80030b2:	e015      	b.n	80030e0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7fe fc00 	bl	80018b8 <HAL_GetTick>
 80030b8:	0003      	movs	r3, r0
 80030ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030be:	f7fe fbfb 	bl	80018b8 <HAL_GetTick>
 80030c2:	0002      	movs	r2, r0
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b64      	cmp	r3, #100	@ 0x64
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e336      	b.n	800373e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030d0:	4b85      	ldr	r3, [pc, #532]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	2380      	movs	r3, #128	@ 0x80
 80030d6:	029b      	lsls	r3, r3, #10
 80030d8:	4013      	ands	r3, r2
 80030da:	d1f0      	bne.n	80030be <HAL_RCC_OscConfig+0x112>
 80030dc:	e000      	b.n	80030e0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030de:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2202      	movs	r2, #2
 80030e6:	4013      	ands	r3, r2
 80030e8:	d100      	bne.n	80030ec <HAL_RCC_OscConfig+0x140>
 80030ea:	e099      	b.n	8003220 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	2220      	movs	r2, #32
 80030f6:	4013      	ands	r3, r2
 80030f8:	d009      	beq.n	800310e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80030fa:	4b7b      	ldr	r3, [pc, #492]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b7a      	ldr	r3, [pc, #488]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003100:	2120      	movs	r1, #32
 8003102:	430a      	orrs	r2, r1
 8003104:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	2220      	movs	r2, #32
 800310a:	4393      	bics	r3, r2
 800310c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	2b04      	cmp	r3, #4
 8003112:	d005      	beq.n	8003120 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b0c      	cmp	r3, #12
 8003118:	d13e      	bne.n	8003198 <HAL_RCC_OscConfig+0x1ec>
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d13b      	bne.n	8003198 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003120:	4b71      	ldr	r3, [pc, #452]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2204      	movs	r2, #4
 8003126:	4013      	ands	r3, r2
 8003128:	d004      	beq.n	8003134 <HAL_RCC_OscConfig+0x188>
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	2b00      	cmp	r3, #0
 800312e:	d101      	bne.n	8003134 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e304      	b.n	800373e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003134:	4b6c      	ldr	r3, [pc, #432]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4a6e      	ldr	r2, [pc, #440]	@ (80032f4 <HAL_RCC_OscConfig+0x348>)
 800313a:	4013      	ands	r3, r2
 800313c:	0019      	movs	r1, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	021a      	lsls	r2, r3, #8
 8003144:	4b68      	ldr	r3, [pc, #416]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003146:	430a      	orrs	r2, r1
 8003148:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800314a:	4b67      	ldr	r3, [pc, #412]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2209      	movs	r2, #9
 8003150:	4393      	bics	r3, r2
 8003152:	0019      	movs	r1, r3
 8003154:	4b64      	ldr	r3, [pc, #400]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003158:	430a      	orrs	r2, r1
 800315a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800315c:	f000 fc42 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8003160:	0001      	movs	r1, r0
 8003162:	4b61      	ldr	r3, [pc, #388]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	091b      	lsrs	r3, r3, #4
 8003168:	220f      	movs	r2, #15
 800316a:	4013      	ands	r3, r2
 800316c:	4a62      	ldr	r2, [pc, #392]	@ (80032f8 <HAL_RCC_OscConfig+0x34c>)
 800316e:	5cd3      	ldrb	r3, [r2, r3]
 8003170:	000a      	movs	r2, r1
 8003172:	40da      	lsrs	r2, r3
 8003174:	4b61      	ldr	r3, [pc, #388]	@ (80032fc <HAL_RCC_OscConfig+0x350>)
 8003176:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003178:	4b61      	ldr	r3, [pc, #388]	@ (8003300 <HAL_RCC_OscConfig+0x354>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2513      	movs	r5, #19
 800317e:	197c      	adds	r4, r7, r5
 8003180:	0018      	movs	r0, r3
 8003182:	f7fe fb53 	bl	800182c <HAL_InitTick>
 8003186:	0003      	movs	r3, r0
 8003188:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800318a:	197b      	adds	r3, r7, r5
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d046      	beq.n	8003220 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003192:	197b      	adds	r3, r7, r5
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	e2d2      	b.n	800373e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800319a:	2b00      	cmp	r3, #0
 800319c:	d027      	beq.n	80031ee <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800319e:	4b52      	ldr	r3, [pc, #328]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2209      	movs	r2, #9
 80031a4:	4393      	bics	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	4b4f      	ldr	r3, [pc, #316]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 80031aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ac:	430a      	orrs	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fe fb82 	bl	80018b8 <HAL_GetTick>
 80031b4:	0003      	movs	r3, r0
 80031b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ba:	f7fe fb7d 	bl	80018b8 <HAL_GetTick>
 80031be:	0002      	movs	r2, r0
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e2b8      	b.n	800373e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031cc:	4b46      	ldr	r3, [pc, #280]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2204      	movs	r2, #4
 80031d2:	4013      	ands	r3, r2
 80031d4:	d0f1      	beq.n	80031ba <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d6:	4b44      	ldr	r3, [pc, #272]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	4a46      	ldr	r2, [pc, #280]	@ (80032f4 <HAL_RCC_OscConfig+0x348>)
 80031dc:	4013      	ands	r3, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	021a      	lsls	r2, r3, #8
 80031e6:	4b40      	ldr	r3, [pc, #256]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
 80031ec:	e018      	b.n	8003220 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ee:	4b3e      	ldr	r3, [pc, #248]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4b3d      	ldr	r3, [pc, #244]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 80031f4:	2101      	movs	r1, #1
 80031f6:	438a      	bics	r2, r1
 80031f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fa:	f7fe fb5d 	bl	80018b8 <HAL_GetTick>
 80031fe:	0003      	movs	r3, r0
 8003200:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003204:	f7fe fb58 	bl	80018b8 <HAL_GetTick>
 8003208:	0002      	movs	r2, r0
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e293      	b.n	800373e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003216:	4b34      	ldr	r3, [pc, #208]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2204      	movs	r2, #4
 800321c:	4013      	ands	r3, r2
 800321e:	d1f1      	bne.n	8003204 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2210      	movs	r2, #16
 8003226:	4013      	ands	r3, r2
 8003228:	d100      	bne.n	800322c <HAL_RCC_OscConfig+0x280>
 800322a:	e0a2      	b.n	8003372 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d140      	bne.n	80032b4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003232:	4b2d      	ldr	r3, [pc, #180]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	2380      	movs	r3, #128	@ 0x80
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4013      	ands	r3, r2
 800323c:	d005      	beq.n	800324a <HAL_RCC_OscConfig+0x29e>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e279      	b.n	800373e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800324a:	4b27      	ldr	r3, [pc, #156]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4a2d      	ldr	r2, [pc, #180]	@ (8003304 <HAL_RCC_OscConfig+0x358>)
 8003250:	4013      	ands	r3, r2
 8003252:	0019      	movs	r1, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003258:	4b23      	ldr	r3, [pc, #140]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800325e:	4b22      	ldr	r3, [pc, #136]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	021b      	lsls	r3, r3, #8
 8003264:	0a19      	lsrs	r1, r3, #8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	061a      	lsls	r2, r3, #24
 800326c:	4b1e      	ldr	r3, [pc, #120]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 800326e:	430a      	orrs	r2, r1
 8003270:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003276:	0b5b      	lsrs	r3, r3, #13
 8003278:	3301      	adds	r3, #1
 800327a:	2280      	movs	r2, #128	@ 0x80
 800327c:	0212      	lsls	r2, r2, #8
 800327e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003280:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	210f      	movs	r1, #15
 8003288:	400b      	ands	r3, r1
 800328a:	491b      	ldr	r1, [pc, #108]	@ (80032f8 <HAL_RCC_OscConfig+0x34c>)
 800328c:	5ccb      	ldrb	r3, [r1, r3]
 800328e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003290:	4b1a      	ldr	r3, [pc, #104]	@ (80032fc <HAL_RCC_OscConfig+0x350>)
 8003292:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003294:	4b1a      	ldr	r3, [pc, #104]	@ (8003300 <HAL_RCC_OscConfig+0x354>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2513      	movs	r5, #19
 800329a:	197c      	adds	r4, r7, r5
 800329c:	0018      	movs	r0, r3
 800329e:	f7fe fac5 	bl	800182c <HAL_InitTick>
 80032a2:	0003      	movs	r3, r0
 80032a4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80032a6:	197b      	adds	r3, r7, r5
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d061      	beq.n	8003372 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80032ae:	197b      	adds	r3, r7, r5
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	e244      	b.n	800373e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d040      	beq.n	800333e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032bc:	4b0a      	ldr	r3, [pc, #40]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b09      	ldr	r3, [pc, #36]	@ (80032e8 <HAL_RCC_OscConfig+0x33c>)
 80032c2:	2180      	movs	r1, #128	@ 0x80
 80032c4:	0049      	lsls	r1, r1, #1
 80032c6:	430a      	orrs	r2, r1
 80032c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ca:	f7fe faf5 	bl	80018b8 <HAL_GetTick>
 80032ce:	0003      	movs	r3, r0
 80032d0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032d2:	e019      	b.n	8003308 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032d4:	f7fe faf0 	bl	80018b8 <HAL_GetTick>
 80032d8:	0002      	movs	r2, r0
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d912      	bls.n	8003308 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e22b      	b.n	800373e <HAL_RCC_OscConfig+0x792>
 80032e6:	46c0      	nop			@ (mov r8, r8)
 80032e8:	40021000 	.word	0x40021000
 80032ec:	fffeffff 	.word	0xfffeffff
 80032f0:	fffbffff 	.word	0xfffbffff
 80032f4:	ffffe0ff 	.word	0xffffe0ff
 80032f8:	08006108 	.word	0x08006108
 80032fc:	20000000 	.word	0x20000000
 8003300:	20000004 	.word	0x20000004
 8003304:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003308:	4bca      	ldr	r3, [pc, #808]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	2380      	movs	r3, #128	@ 0x80
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4013      	ands	r3, r2
 8003312:	d0df      	beq.n	80032d4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003314:	4bc7      	ldr	r3, [pc, #796]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	4ac7      	ldr	r2, [pc, #796]	@ (8003638 <HAL_RCC_OscConfig+0x68c>)
 800331a:	4013      	ands	r3, r2
 800331c:	0019      	movs	r1, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003322:	4bc4      	ldr	r3, [pc, #784]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003324:	430a      	orrs	r2, r1
 8003326:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003328:	4bc2      	ldr	r3, [pc, #776]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	021b      	lsls	r3, r3, #8
 800332e:	0a19      	lsrs	r1, r3, #8
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	061a      	lsls	r2, r3, #24
 8003336:	4bbf      	ldr	r3, [pc, #764]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
 800333c:	e019      	b.n	8003372 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800333e:	4bbd      	ldr	r3, [pc, #756]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	4bbc      	ldr	r3, [pc, #752]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003344:	49bd      	ldr	r1, [pc, #756]	@ (800363c <HAL_RCC_OscConfig+0x690>)
 8003346:	400a      	ands	r2, r1
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fe fab5 	bl	80018b8 <HAL_GetTick>
 800334e:	0003      	movs	r3, r0
 8003350:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003354:	f7fe fab0 	bl	80018b8 <HAL_GetTick>
 8003358:	0002      	movs	r2, r0
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e1eb      	b.n	800373e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003366:	4bb3      	ldr	r3, [pc, #716]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4013      	ands	r3, r2
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2208      	movs	r2, #8
 8003378:	4013      	ands	r3, r2
 800337a:	d036      	beq.n	80033ea <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d019      	beq.n	80033b8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003384:	4bab      	ldr	r3, [pc, #684]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003386:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003388:	4baa      	ldr	r3, [pc, #680]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 800338a:	2101      	movs	r1, #1
 800338c:	430a      	orrs	r2, r1
 800338e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003390:	f7fe fa92 	bl	80018b8 <HAL_GetTick>
 8003394:	0003      	movs	r3, r0
 8003396:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339a:	f7fe fa8d 	bl	80018b8 <HAL_GetTick>
 800339e:	0002      	movs	r2, r0
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e1c8      	b.n	800373e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033ac:	4ba1      	ldr	r3, [pc, #644]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80033ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b0:	2202      	movs	r2, #2
 80033b2:	4013      	ands	r3, r2
 80033b4:	d0f1      	beq.n	800339a <HAL_RCC_OscConfig+0x3ee>
 80033b6:	e018      	b.n	80033ea <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033b8:	4b9e      	ldr	r3, [pc, #632]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80033ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033bc:	4b9d      	ldr	r3, [pc, #628]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80033be:	2101      	movs	r1, #1
 80033c0:	438a      	bics	r2, r1
 80033c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c4:	f7fe fa78 	bl	80018b8 <HAL_GetTick>
 80033c8:	0003      	movs	r3, r0
 80033ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033cc:	e008      	b.n	80033e0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ce:	f7fe fa73 	bl	80018b8 <HAL_GetTick>
 80033d2:	0002      	movs	r2, r0
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d901      	bls.n	80033e0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e1ae      	b.n	800373e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033e0:	4b94      	ldr	r3, [pc, #592]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80033e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033e4:	2202      	movs	r2, #2
 80033e6:	4013      	ands	r3, r2
 80033e8:	d1f1      	bne.n	80033ce <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2204      	movs	r2, #4
 80033f0:	4013      	ands	r3, r2
 80033f2:	d100      	bne.n	80033f6 <HAL_RCC_OscConfig+0x44a>
 80033f4:	e0ae      	b.n	8003554 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033f6:	2023      	movs	r0, #35	@ 0x23
 80033f8:	183b      	adds	r3, r7, r0
 80033fa:	2200      	movs	r2, #0
 80033fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003402:	2380      	movs	r3, #128	@ 0x80
 8003404:	055b      	lsls	r3, r3, #21
 8003406:	4013      	ands	r3, r2
 8003408:	d109      	bne.n	800341e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800340a:	4b8a      	ldr	r3, [pc, #552]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 800340c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800340e:	4b89      	ldr	r3, [pc, #548]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003410:	2180      	movs	r1, #128	@ 0x80
 8003412:	0549      	lsls	r1, r1, #21
 8003414:	430a      	orrs	r2, r1
 8003416:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003418:	183b      	adds	r3, r7, r0
 800341a:	2201      	movs	r2, #1
 800341c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	4b88      	ldr	r3, [pc, #544]	@ (8003640 <HAL_RCC_OscConfig+0x694>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	2380      	movs	r3, #128	@ 0x80
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4013      	ands	r3, r2
 8003428:	d11a      	bne.n	8003460 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342a:	4b85      	ldr	r3, [pc, #532]	@ (8003640 <HAL_RCC_OscConfig+0x694>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	4b84      	ldr	r3, [pc, #528]	@ (8003640 <HAL_RCC_OscConfig+0x694>)
 8003430:	2180      	movs	r1, #128	@ 0x80
 8003432:	0049      	lsls	r1, r1, #1
 8003434:	430a      	orrs	r2, r1
 8003436:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003438:	f7fe fa3e 	bl	80018b8 <HAL_GetTick>
 800343c:	0003      	movs	r3, r0
 800343e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003442:	f7fe fa39 	bl	80018b8 <HAL_GetTick>
 8003446:	0002      	movs	r2, r0
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b64      	cmp	r3, #100	@ 0x64
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e174      	b.n	800373e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003454:	4b7a      	ldr	r3, [pc, #488]	@ (8003640 <HAL_RCC_OscConfig+0x694>)
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	2380      	movs	r3, #128	@ 0x80
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	4013      	ands	r3, r2
 800345e:	d0f0      	beq.n	8003442 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	2380      	movs	r3, #128	@ 0x80
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	429a      	cmp	r2, r3
 800346a:	d107      	bne.n	800347c <HAL_RCC_OscConfig+0x4d0>
 800346c:	4b71      	ldr	r3, [pc, #452]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 800346e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003470:	4b70      	ldr	r3, [pc, #448]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003472:	2180      	movs	r1, #128	@ 0x80
 8003474:	0049      	lsls	r1, r1, #1
 8003476:	430a      	orrs	r2, r1
 8003478:	651a      	str	r2, [r3, #80]	@ 0x50
 800347a:	e031      	b.n	80034e0 <HAL_RCC_OscConfig+0x534>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d10c      	bne.n	800349e <HAL_RCC_OscConfig+0x4f2>
 8003484:	4b6b      	ldr	r3, [pc, #428]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003486:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003488:	4b6a      	ldr	r3, [pc, #424]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 800348a:	496c      	ldr	r1, [pc, #432]	@ (800363c <HAL_RCC_OscConfig+0x690>)
 800348c:	400a      	ands	r2, r1
 800348e:	651a      	str	r2, [r3, #80]	@ 0x50
 8003490:	4b68      	ldr	r3, [pc, #416]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003492:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003494:	4b67      	ldr	r3, [pc, #412]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003496:	496b      	ldr	r1, [pc, #428]	@ (8003644 <HAL_RCC_OscConfig+0x698>)
 8003498:	400a      	ands	r2, r1
 800349a:	651a      	str	r2, [r3, #80]	@ 0x50
 800349c:	e020      	b.n	80034e0 <HAL_RCC_OscConfig+0x534>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	23a0      	movs	r3, #160	@ 0xa0
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d10e      	bne.n	80034c8 <HAL_RCC_OscConfig+0x51c>
 80034aa:	4b62      	ldr	r3, [pc, #392]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80034ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034ae:	4b61      	ldr	r3, [pc, #388]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80034b0:	2180      	movs	r1, #128	@ 0x80
 80034b2:	00c9      	lsls	r1, r1, #3
 80034b4:	430a      	orrs	r2, r1
 80034b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80034b8:	4b5e      	ldr	r3, [pc, #376]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80034ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034bc:	4b5d      	ldr	r3, [pc, #372]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80034be:	2180      	movs	r1, #128	@ 0x80
 80034c0:	0049      	lsls	r1, r1, #1
 80034c2:	430a      	orrs	r2, r1
 80034c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0x534>
 80034c8:	4b5a      	ldr	r3, [pc, #360]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80034ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034cc:	4b59      	ldr	r3, [pc, #356]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80034ce:	495b      	ldr	r1, [pc, #364]	@ (800363c <HAL_RCC_OscConfig+0x690>)
 80034d0:	400a      	ands	r2, r1
 80034d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80034d4:	4b57      	ldr	r3, [pc, #348]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80034d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80034d8:	4b56      	ldr	r3, [pc, #344]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80034da:	495a      	ldr	r1, [pc, #360]	@ (8003644 <HAL_RCC_OscConfig+0x698>)
 80034dc:	400a      	ands	r2, r1
 80034de:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d015      	beq.n	8003514 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e8:	f7fe f9e6 	bl	80018b8 <HAL_GetTick>
 80034ec:	0003      	movs	r3, r0
 80034ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80034f0:	e009      	b.n	8003506 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f2:	f7fe f9e1 	bl	80018b8 <HAL_GetTick>
 80034f6:	0002      	movs	r2, r0
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	4a52      	ldr	r2, [pc, #328]	@ (8003648 <HAL_RCC_OscConfig+0x69c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e11b      	b.n	800373e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003506:	4b4b      	ldr	r3, [pc, #300]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003508:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800350a:	2380      	movs	r3, #128	@ 0x80
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4013      	ands	r3, r2
 8003510:	d0ef      	beq.n	80034f2 <HAL_RCC_OscConfig+0x546>
 8003512:	e014      	b.n	800353e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003514:	f7fe f9d0 	bl	80018b8 <HAL_GetTick>
 8003518:	0003      	movs	r3, r0
 800351a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800351c:	e009      	b.n	8003532 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351e:	f7fe f9cb 	bl	80018b8 <HAL_GetTick>
 8003522:	0002      	movs	r2, r0
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	4a47      	ldr	r2, [pc, #284]	@ (8003648 <HAL_RCC_OscConfig+0x69c>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e105      	b.n	800373e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003532:	4b40      	ldr	r3, [pc, #256]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003534:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003536:	2380      	movs	r3, #128	@ 0x80
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4013      	ands	r3, r2
 800353c:	d1ef      	bne.n	800351e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800353e:	2323      	movs	r3, #35	@ 0x23
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003548:	4b3a      	ldr	r3, [pc, #232]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 800354a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800354c:	4b39      	ldr	r3, [pc, #228]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 800354e:	493f      	ldr	r1, [pc, #252]	@ (800364c <HAL_RCC_OscConfig+0x6a0>)
 8003550:	400a      	ands	r2, r1
 8003552:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2220      	movs	r2, #32
 800355a:	4013      	ands	r3, r2
 800355c:	d049      	beq.n	80035f2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d026      	beq.n	80035b4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003566:	4b33      	ldr	r3, [pc, #204]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	4b32      	ldr	r3, [pc, #200]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 800356c:	2101      	movs	r1, #1
 800356e:	430a      	orrs	r2, r1
 8003570:	609a      	str	r2, [r3, #8]
 8003572:	4b30      	ldr	r3, [pc, #192]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003576:	4b2f      	ldr	r3, [pc, #188]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003578:	2101      	movs	r1, #1
 800357a:	430a      	orrs	r2, r1
 800357c:	635a      	str	r2, [r3, #52]	@ 0x34
 800357e:	4b34      	ldr	r3, [pc, #208]	@ (8003650 <HAL_RCC_OscConfig+0x6a4>)
 8003580:	6a1a      	ldr	r2, [r3, #32]
 8003582:	4b33      	ldr	r3, [pc, #204]	@ (8003650 <HAL_RCC_OscConfig+0x6a4>)
 8003584:	2180      	movs	r1, #128	@ 0x80
 8003586:	0189      	lsls	r1, r1, #6
 8003588:	430a      	orrs	r2, r1
 800358a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe f994 	bl	80018b8 <HAL_GetTick>
 8003590:	0003      	movs	r3, r0
 8003592:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003596:	f7fe f98f 	bl	80018b8 <HAL_GetTick>
 800359a:	0002      	movs	r2, r0
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e0ca      	b.n	800373e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80035a8:	4b22      	ldr	r3, [pc, #136]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2202      	movs	r2, #2
 80035ae:	4013      	ands	r3, r2
 80035b0:	d0f1      	beq.n	8003596 <HAL_RCC_OscConfig+0x5ea>
 80035b2:	e01e      	b.n	80035f2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80035b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80035ba:	2101      	movs	r1, #1
 80035bc:	438a      	bics	r2, r1
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	4b23      	ldr	r3, [pc, #140]	@ (8003650 <HAL_RCC_OscConfig+0x6a4>)
 80035c2:	6a1a      	ldr	r2, [r3, #32]
 80035c4:	4b22      	ldr	r3, [pc, #136]	@ (8003650 <HAL_RCC_OscConfig+0x6a4>)
 80035c6:	4923      	ldr	r1, [pc, #140]	@ (8003654 <HAL_RCC_OscConfig+0x6a8>)
 80035c8:	400a      	ands	r2, r1
 80035ca:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7fe f974 	bl	80018b8 <HAL_GetTick>
 80035d0:	0003      	movs	r3, r0
 80035d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035d4:	e008      	b.n	80035e8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035d6:	f7fe f96f 	bl	80018b8 <HAL_GetTick>
 80035da:	0002      	movs	r2, r0
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e0aa      	b.n	800373e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80035e8:	4b12      	ldr	r3, [pc, #72]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2202      	movs	r2, #2
 80035ee:	4013      	ands	r3, r2
 80035f0:	d1f1      	bne.n	80035d6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d100      	bne.n	80035fc <HAL_RCC_OscConfig+0x650>
 80035fa:	e09f      	b.n	800373c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d100      	bne.n	8003604 <HAL_RCC_OscConfig+0x658>
 8003602:	e078      	b.n	80036f6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003608:	2b02      	cmp	r3, #2
 800360a:	d159      	bne.n	80036c0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360c:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b08      	ldr	r3, [pc, #32]	@ (8003634 <HAL_RCC_OscConfig+0x688>)
 8003612:	4911      	ldr	r1, [pc, #68]	@ (8003658 <HAL_RCC_OscConfig+0x6ac>)
 8003614:	400a      	ands	r2, r1
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fe f94e 	bl	80018b8 <HAL_GetTick>
 800361c:	0003      	movs	r3, r0
 800361e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003620:	e01c      	b.n	800365c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003622:	f7fe f949 	bl	80018b8 <HAL_GetTick>
 8003626:	0002      	movs	r2, r0
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d915      	bls.n	800365c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e084      	b.n	800373e <HAL_RCC_OscConfig+0x792>
 8003634:	40021000 	.word	0x40021000
 8003638:	ffff1fff 	.word	0xffff1fff
 800363c:	fffffeff 	.word	0xfffffeff
 8003640:	40007000 	.word	0x40007000
 8003644:	fffffbff 	.word	0xfffffbff
 8003648:	00001388 	.word	0x00001388
 800364c:	efffffff 	.word	0xefffffff
 8003650:	40010000 	.word	0x40010000
 8003654:	ffffdfff 	.word	0xffffdfff
 8003658:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800365c:	4b3a      	ldr	r3, [pc, #232]	@ (8003748 <HAL_RCC_OscConfig+0x79c>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	2380      	movs	r3, #128	@ 0x80
 8003662:	049b      	lsls	r3, r3, #18
 8003664:	4013      	ands	r3, r2
 8003666:	d1dc      	bne.n	8003622 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003668:	4b37      	ldr	r3, [pc, #220]	@ (8003748 <HAL_RCC_OscConfig+0x79c>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4a37      	ldr	r2, [pc, #220]	@ (800374c <HAL_RCC_OscConfig+0x7a0>)
 800366e:	4013      	ands	r3, r2
 8003670:	0019      	movs	r1, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003680:	431a      	orrs	r2, r3
 8003682:	4b31      	ldr	r3, [pc, #196]	@ (8003748 <HAL_RCC_OscConfig+0x79c>)
 8003684:	430a      	orrs	r2, r1
 8003686:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003688:	4b2f      	ldr	r3, [pc, #188]	@ (8003748 <HAL_RCC_OscConfig+0x79c>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b2e      	ldr	r3, [pc, #184]	@ (8003748 <HAL_RCC_OscConfig+0x79c>)
 800368e:	2180      	movs	r1, #128	@ 0x80
 8003690:	0449      	lsls	r1, r1, #17
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003696:	f7fe f90f 	bl	80018b8 <HAL_GetTick>
 800369a:	0003      	movs	r3, r0
 800369c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fe f90a 	bl	80018b8 <HAL_GetTick>
 80036a4:	0002      	movs	r2, r0
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e045      	b.n	800373e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80036b2:	4b25      	ldr	r3, [pc, #148]	@ (8003748 <HAL_RCC_OscConfig+0x79c>)
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	2380      	movs	r3, #128	@ 0x80
 80036b8:	049b      	lsls	r3, r3, #18
 80036ba:	4013      	ands	r3, r2
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0x6f4>
 80036be:	e03d      	b.n	800373c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c0:	4b21      	ldr	r3, [pc, #132]	@ (8003748 <HAL_RCC_OscConfig+0x79c>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	4b20      	ldr	r3, [pc, #128]	@ (8003748 <HAL_RCC_OscConfig+0x79c>)
 80036c6:	4922      	ldr	r1, [pc, #136]	@ (8003750 <HAL_RCC_OscConfig+0x7a4>)
 80036c8:	400a      	ands	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fe f8f4 	bl	80018b8 <HAL_GetTick>
 80036d0:	0003      	movs	r3, r0
 80036d2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036d4:	e008      	b.n	80036e8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fe f8ef 	bl	80018b8 <HAL_GetTick>
 80036da:	0002      	movs	r2, r0
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e02a      	b.n	800373e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80036e8:	4b17      	ldr	r3, [pc, #92]	@ (8003748 <HAL_RCC_OscConfig+0x79c>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	2380      	movs	r3, #128	@ 0x80
 80036ee:	049b      	lsls	r3, r3, #18
 80036f0:	4013      	ands	r3, r2
 80036f2:	d1f0      	bne.n	80036d6 <HAL_RCC_OscConfig+0x72a>
 80036f4:	e022      	b.n	800373c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e01d      	b.n	800373e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003702:	4b11      	ldr	r3, [pc, #68]	@ (8003748 <HAL_RCC_OscConfig+0x79c>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	2380      	movs	r3, #128	@ 0x80
 800370c:	025b      	lsls	r3, r3, #9
 800370e:	401a      	ands	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	429a      	cmp	r2, r3
 8003716:	d10f      	bne.n	8003738 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	23f0      	movs	r3, #240	@ 0xf0
 800371c:	039b      	lsls	r3, r3, #14
 800371e:	401a      	ands	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d107      	bne.n	8003738 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	23c0      	movs	r3, #192	@ 0xc0
 800372c:	041b      	lsls	r3, r3, #16
 800372e:	401a      	ands	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	0018      	movs	r0, r3
 8003740:	46bd      	mov	sp, r7
 8003742:	b00a      	add	sp, #40	@ 0x28
 8003744:	bdb0      	pop	{r4, r5, r7, pc}
 8003746:	46c0      	nop			@ (mov r8, r8)
 8003748:	40021000 	.word	0x40021000
 800374c:	ff02ffff 	.word	0xff02ffff
 8003750:	feffffff 	.word	0xfeffffff

08003754 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003754:	b5b0      	push	{r4, r5, r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e128      	b.n	80039ba <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003768:	4b96      	ldr	r3, [pc, #600]	@ (80039c4 <HAL_RCC_ClockConfig+0x270>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2201      	movs	r2, #1
 800376e:	4013      	ands	r3, r2
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	429a      	cmp	r2, r3
 8003774:	d91e      	bls.n	80037b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003776:	4b93      	ldr	r3, [pc, #588]	@ (80039c4 <HAL_RCC_ClockConfig+0x270>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2201      	movs	r2, #1
 800377c:	4393      	bics	r3, r2
 800377e:	0019      	movs	r1, r3
 8003780:	4b90      	ldr	r3, [pc, #576]	@ (80039c4 <HAL_RCC_ClockConfig+0x270>)
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003788:	f7fe f896 	bl	80018b8 <HAL_GetTick>
 800378c:	0003      	movs	r3, r0
 800378e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003790:	e009      	b.n	80037a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003792:	f7fe f891 	bl	80018b8 <HAL_GetTick>
 8003796:	0002      	movs	r2, r0
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	4a8a      	ldr	r2, [pc, #552]	@ (80039c8 <HAL_RCC_ClockConfig+0x274>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e109      	b.n	80039ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b87      	ldr	r3, [pc, #540]	@ (80039c4 <HAL_RCC_ClockConfig+0x270>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2201      	movs	r2, #1
 80037ac:	4013      	ands	r3, r2
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d1ee      	bne.n	8003792 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2202      	movs	r2, #2
 80037ba:	4013      	ands	r3, r2
 80037bc:	d009      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037be:	4b83      	ldr	r3, [pc, #524]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	22f0      	movs	r2, #240	@ 0xf0
 80037c4:	4393      	bics	r3, r2
 80037c6:	0019      	movs	r1, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	4b7f      	ldr	r3, [pc, #508]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 80037ce:	430a      	orrs	r2, r1
 80037d0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2201      	movs	r2, #1
 80037d8:	4013      	ands	r3, r2
 80037da:	d100      	bne.n	80037de <HAL_RCC_ClockConfig+0x8a>
 80037dc:	e089      	b.n	80038f2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037e6:	4b79      	ldr	r3, [pc, #484]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	2380      	movs	r3, #128	@ 0x80
 80037ec:	029b      	lsls	r3, r3, #10
 80037ee:	4013      	ands	r3, r2
 80037f0:	d120      	bne.n	8003834 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e0e1      	b.n	80039ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	d107      	bne.n	800380e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037fe:	4b73      	ldr	r3, [pc, #460]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	2380      	movs	r3, #128	@ 0x80
 8003804:	049b      	lsls	r3, r3, #18
 8003806:	4013      	ands	r3, r2
 8003808:	d114      	bne.n	8003834 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e0d5      	b.n	80039ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d106      	bne.n	8003824 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003816:	4b6d      	ldr	r3, [pc, #436]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2204      	movs	r2, #4
 800381c:	4013      	ands	r3, r2
 800381e:	d109      	bne.n	8003834 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0ca      	b.n	80039ba <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003824:	4b69      	ldr	r3, [pc, #420]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	2380      	movs	r3, #128	@ 0x80
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4013      	ands	r3, r2
 800382e:	d101      	bne.n	8003834 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0c2      	b.n	80039ba <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003834:	4b65      	ldr	r3, [pc, #404]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	2203      	movs	r2, #3
 800383a:	4393      	bics	r3, r2
 800383c:	0019      	movs	r1, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	4b62      	ldr	r3, [pc, #392]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 8003844:	430a      	orrs	r2, r1
 8003846:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003848:	f7fe f836 	bl	80018b8 <HAL_GetTick>
 800384c:	0003      	movs	r3, r0
 800384e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d111      	bne.n	800387c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003858:	e009      	b.n	800386e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385a:	f7fe f82d 	bl	80018b8 <HAL_GetTick>
 800385e:	0002      	movs	r2, r0
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	4a58      	ldr	r2, [pc, #352]	@ (80039c8 <HAL_RCC_ClockConfig+0x274>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e0a5      	b.n	80039ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800386e:	4b57      	ldr	r3, [pc, #348]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	220c      	movs	r2, #12
 8003874:	4013      	ands	r3, r2
 8003876:	2b08      	cmp	r3, #8
 8003878:	d1ef      	bne.n	800385a <HAL_RCC_ClockConfig+0x106>
 800387a:	e03a      	b.n	80038f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d111      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003884:	e009      	b.n	800389a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003886:	f7fe f817 	bl	80018b8 <HAL_GetTick>
 800388a:	0002      	movs	r2, r0
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	4a4d      	ldr	r2, [pc, #308]	@ (80039c8 <HAL_RCC_ClockConfig+0x274>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e08f      	b.n	80039ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800389a:	4b4c      	ldr	r3, [pc, #304]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	220c      	movs	r2, #12
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b0c      	cmp	r3, #12
 80038a4:	d1ef      	bne.n	8003886 <HAL_RCC_ClockConfig+0x132>
 80038a6:	e024      	b.n	80038f2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d11b      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80038b0:	e009      	b.n	80038c6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b2:	f7fe f801 	bl	80018b8 <HAL_GetTick>
 80038b6:	0002      	movs	r2, r0
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	4a42      	ldr	r2, [pc, #264]	@ (80039c8 <HAL_RCC_ClockConfig+0x274>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e079      	b.n	80039ba <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80038c6:	4b41      	ldr	r3, [pc, #260]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	220c      	movs	r2, #12
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d1ef      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x15e>
 80038d2:	e00e      	b.n	80038f2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d4:	f7fd fff0 	bl	80018b8 <HAL_GetTick>
 80038d8:	0002      	movs	r2, r0
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	4a3a      	ldr	r2, [pc, #232]	@ (80039c8 <HAL_RCC_ClockConfig+0x274>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e068      	b.n	80039ba <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80038e8:	4b38      	ldr	r3, [pc, #224]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	220c      	movs	r2, #12
 80038ee:	4013      	ands	r3, r2
 80038f0:	d1f0      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038f2:	4b34      	ldr	r3, [pc, #208]	@ (80039c4 <HAL_RCC_ClockConfig+0x270>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2201      	movs	r2, #1
 80038f8:	4013      	ands	r3, r2
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d21e      	bcs.n	800393e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003900:	4b30      	ldr	r3, [pc, #192]	@ (80039c4 <HAL_RCC_ClockConfig+0x270>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2201      	movs	r2, #1
 8003906:	4393      	bics	r3, r2
 8003908:	0019      	movs	r1, r3
 800390a:	4b2e      	ldr	r3, [pc, #184]	@ (80039c4 <HAL_RCC_ClockConfig+0x270>)
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003912:	f7fd ffd1 	bl	80018b8 <HAL_GetTick>
 8003916:	0003      	movs	r3, r0
 8003918:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	e009      	b.n	8003930 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800391c:	f7fd ffcc 	bl	80018b8 <HAL_GetTick>
 8003920:	0002      	movs	r2, r0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	4a28      	ldr	r2, [pc, #160]	@ (80039c8 <HAL_RCC_ClockConfig+0x274>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d901      	bls.n	8003930 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e044      	b.n	80039ba <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003930:	4b24      	ldr	r3, [pc, #144]	@ (80039c4 <HAL_RCC_ClockConfig+0x270>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2201      	movs	r2, #1
 8003936:	4013      	ands	r3, r2
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d1ee      	bne.n	800391c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2204      	movs	r2, #4
 8003944:	4013      	ands	r3, r2
 8003946:	d009      	beq.n	800395c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003948:	4b20      	ldr	r3, [pc, #128]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a20      	ldr	r2, [pc, #128]	@ (80039d0 <HAL_RCC_ClockConfig+0x27c>)
 800394e:	4013      	ands	r3, r2
 8003950:	0019      	movs	r1, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	4b1d      	ldr	r3, [pc, #116]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 8003958:	430a      	orrs	r2, r1
 800395a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2208      	movs	r2, #8
 8003962:	4013      	ands	r3, r2
 8003964:	d00a      	beq.n	800397c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003966:	4b19      	ldr	r3, [pc, #100]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	4a1a      	ldr	r2, [pc, #104]	@ (80039d4 <HAL_RCC_ClockConfig+0x280>)
 800396c:	4013      	ands	r3, r2
 800396e:	0019      	movs	r1, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	00da      	lsls	r2, r3, #3
 8003976:	4b15      	ldr	r3, [pc, #84]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 8003978:	430a      	orrs	r2, r1
 800397a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800397c:	f000 f832 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8003980:	0001      	movs	r1, r0
 8003982:	4b12      	ldr	r3, [pc, #72]	@ (80039cc <HAL_RCC_ClockConfig+0x278>)
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	091b      	lsrs	r3, r3, #4
 8003988:	220f      	movs	r2, #15
 800398a:	4013      	ands	r3, r2
 800398c:	4a12      	ldr	r2, [pc, #72]	@ (80039d8 <HAL_RCC_ClockConfig+0x284>)
 800398e:	5cd3      	ldrb	r3, [r2, r3]
 8003990:	000a      	movs	r2, r1
 8003992:	40da      	lsrs	r2, r3
 8003994:	4b11      	ldr	r3, [pc, #68]	@ (80039dc <HAL_RCC_ClockConfig+0x288>)
 8003996:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003998:	4b11      	ldr	r3, [pc, #68]	@ (80039e0 <HAL_RCC_ClockConfig+0x28c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	250b      	movs	r5, #11
 800399e:	197c      	adds	r4, r7, r5
 80039a0:	0018      	movs	r0, r3
 80039a2:	f7fd ff43 	bl	800182c <HAL_InitTick>
 80039a6:	0003      	movs	r3, r0
 80039a8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80039aa:	197b      	adds	r3, r7, r5
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80039b2:	197b      	adds	r3, r7, r5
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	e000      	b.n	80039ba <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	0018      	movs	r0, r3
 80039bc:	46bd      	mov	sp, r7
 80039be:	b004      	add	sp, #16
 80039c0:	bdb0      	pop	{r4, r5, r7, pc}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	40022000 	.word	0x40022000
 80039c8:	00001388 	.word	0x00001388
 80039cc:	40021000 	.word	0x40021000
 80039d0:	fffff8ff 	.word	0xfffff8ff
 80039d4:	ffffc7ff 	.word	0xffffc7ff
 80039d8:	08006108 	.word	0x08006108
 80039dc:	20000000 	.word	0x20000000
 80039e0:	20000004 	.word	0x20000004

080039e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80039ea:	4b3c      	ldr	r3, [pc, #240]	@ (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	220c      	movs	r2, #12
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b0c      	cmp	r3, #12
 80039f8:	d013      	beq.n	8003a22 <HAL_RCC_GetSysClockFreq+0x3e>
 80039fa:	d85c      	bhi.n	8003ab6 <HAL_RCC_GetSysClockFreq+0xd2>
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d002      	beq.n	8003a06 <HAL_RCC_GetSysClockFreq+0x22>
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d00b      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x38>
 8003a04:	e057      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a06:	4b35      	ldr	r3, [pc, #212]	@ (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2210      	movs	r2, #16
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d002      	beq.n	8003a16 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003a10:	4b33      	ldr	r3, [pc, #204]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a12:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003a14:	e05d      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003a16:	4b33      	ldr	r3, [pc, #204]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a18:	613b      	str	r3, [r7, #16]
      break;
 8003a1a:	e05a      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a1c:	4b32      	ldr	r3, [pc, #200]	@ (8003ae8 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a1e:	613b      	str	r3, [r7, #16]
      break;
 8003a20:	e057      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	0c9b      	lsrs	r3, r3, #18
 8003a26:	220f      	movs	r2, #15
 8003a28:	4013      	ands	r3, r2
 8003a2a:	4a30      	ldr	r2, [pc, #192]	@ (8003aec <HAL_RCC_GetSysClockFreq+0x108>)
 8003a2c:	5cd3      	ldrb	r3, [r2, r3]
 8003a2e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	0d9b      	lsrs	r3, r3, #22
 8003a34:	2203      	movs	r2, #3
 8003a36:	4013      	ands	r3, r2
 8003a38:	3301      	adds	r3, #1
 8003a3a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a3c:	4b27      	ldr	r3, [pc, #156]	@ (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	2380      	movs	r3, #128	@ 0x80
 8003a42:	025b      	lsls	r3, r3, #9
 8003a44:	4013      	ands	r3, r2
 8003a46:	d00f      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	000a      	movs	r2, r1
 8003a4c:	0152      	lsls	r2, r2, #5
 8003a4e:	1a52      	subs	r2, r2, r1
 8003a50:	0193      	lsls	r3, r2, #6
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	185b      	adds	r3, r3, r1
 8003a58:	025b      	lsls	r3, r3, #9
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f7fc fb65 	bl	800012c <__udivsi3>
 8003a62:	0003      	movs	r3, r0
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	e023      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003a68:	4b1c      	ldr	r3, [pc, #112]	@ (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2210      	movs	r2, #16
 8003a6e:	4013      	ands	r3, r2
 8003a70:	d00f      	beq.n	8003a92 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8003a72:	68b9      	ldr	r1, [r7, #8]
 8003a74:	000a      	movs	r2, r1
 8003a76:	0152      	lsls	r2, r2, #5
 8003a78:	1a52      	subs	r2, r2, r1
 8003a7a:	0193      	lsls	r3, r2, #6
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	185b      	adds	r3, r3, r1
 8003a82:	021b      	lsls	r3, r3, #8
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	0018      	movs	r0, r3
 8003a88:	f7fc fb50 	bl	800012c <__udivsi3>
 8003a8c:	0003      	movs	r3, r0
 8003a8e:	617b      	str	r3, [r7, #20]
 8003a90:	e00e      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	000a      	movs	r2, r1
 8003a96:	0152      	lsls	r2, r2, #5
 8003a98:	1a52      	subs	r2, r2, r1
 8003a9a:	0193      	lsls	r3, r2, #6
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	185b      	adds	r3, r3, r1
 8003aa2:	029b      	lsls	r3, r3, #10
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f7fc fb40 	bl	800012c <__udivsi3>
 8003aac:	0003      	movs	r3, r0
 8003aae:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	613b      	str	r3, [r7, #16]
      break;
 8003ab4:	e00d      	b.n	8003ad2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003ab6:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	0b5b      	lsrs	r3, r3, #13
 8003abc:	2207      	movs	r2, #7
 8003abe:	4013      	ands	r3, r2
 8003ac0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	2280      	movs	r2, #128	@ 0x80
 8003ac8:	0212      	lsls	r2, r2, #8
 8003aca:	409a      	lsls	r2, r3
 8003acc:	0013      	movs	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
      break;
 8003ad0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003ad2:	693b      	ldr	r3, [r7, #16]
}
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	b006      	add	sp, #24
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40021000 	.word	0x40021000
 8003ae0:	003d0900 	.word	0x003d0900
 8003ae4:	00f42400 	.word	0x00f42400
 8003ae8:	007a1200 	.word	0x007a1200
 8003aec:	08006120 	.word	0x08006120

08003af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af4:	4b02      	ldr	r3, [pc, #8]	@ (8003b00 <HAL_RCC_GetHCLKFreq+0x10>)
 8003af6:	681b      	ldr	r3, [r3, #0]
}
 8003af8:	0018      	movs	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			@ (mov r8, r8)
 8003b00:	20000000 	.word	0x20000000

08003b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b08:	f7ff fff2 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8003b0c:	0001      	movs	r1, r0
 8003b0e:	4b06      	ldr	r3, [pc, #24]	@ (8003b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	0a1b      	lsrs	r3, r3, #8
 8003b14:	2207      	movs	r2, #7
 8003b16:	4013      	ands	r3, r2
 8003b18:	4a04      	ldr	r2, [pc, #16]	@ (8003b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b1a:	5cd3      	ldrb	r3, [r2, r3]
 8003b1c:	40d9      	lsrs	r1, r3
 8003b1e:	000b      	movs	r3, r1
}
 8003b20:	0018      	movs	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	46c0      	nop			@ (mov r8, r8)
 8003b28:	40021000 	.word	0x40021000
 8003b2c:	08006118 	.word	0x08006118

08003b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b34:	f7ff ffdc 	bl	8003af0 <HAL_RCC_GetHCLKFreq>
 8003b38:	0001      	movs	r1, r0
 8003b3a:	4b06      	ldr	r3, [pc, #24]	@ (8003b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	0adb      	lsrs	r3, r3, #11
 8003b40:	2207      	movs	r2, #7
 8003b42:	4013      	ands	r3, r2
 8003b44:	4a04      	ldr	r2, [pc, #16]	@ (8003b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b46:	5cd3      	ldrb	r3, [r2, r3]
 8003b48:	40d9      	lsrs	r1, r3
 8003b4a:	000b      	movs	r3, r1
}
 8003b4c:	0018      	movs	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	46c0      	nop			@ (mov r8, r8)
 8003b54:	40021000 	.word	0x40021000
 8003b58:	08006118 	.word	0x08006118

08003b5c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003b64:	2317      	movs	r3, #23
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2220      	movs	r2, #32
 8003b72:	4013      	ands	r3, r2
 8003b74:	d106      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	2380      	movs	r3, #128	@ 0x80
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d100      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003b82:	e104      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b84:	4bb9      	ldr	r3, [pc, #740]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	055b      	lsls	r3, r3, #21
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d10a      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b90:	4bb6      	ldr	r3, [pc, #728]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b94:	4bb5      	ldr	r3, [pc, #724]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b96:	2180      	movs	r1, #128	@ 0x80
 8003b98:	0549      	lsls	r1, r1, #21
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003b9e:	2317      	movs	r3, #23
 8003ba0:	18fb      	adds	r3, r7, r3
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba6:	4bb2      	ldr	r3, [pc, #712]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	2380      	movs	r3, #128	@ 0x80
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4013      	ands	r3, r2
 8003bb0:	d11a      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bb2:	4baf      	ldr	r3, [pc, #700]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4bae      	ldr	r3, [pc, #696]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003bb8:	2180      	movs	r1, #128	@ 0x80
 8003bba:	0049      	lsls	r1, r1, #1
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bc0:	f7fd fe7a 	bl	80018b8 <HAL_GetTick>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc8:	e008      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bca:	f7fd fe75 	bl	80018b8 <HAL_GetTick>
 8003bce:	0002      	movs	r2, r0
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b64      	cmp	r3, #100	@ 0x64
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e143      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bdc:	4ba4      	ldr	r3, [pc, #656]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	2380      	movs	r3, #128	@ 0x80
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	4013      	ands	r3, r2
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003be8:	4ba0      	ldr	r3, [pc, #640]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	23c0      	movs	r3, #192	@ 0xc0
 8003bee:	039b      	lsls	r3, r3, #14
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	23c0      	movs	r3, #192	@ 0xc0
 8003bfa:	039b      	lsls	r3, r3, #14
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d107      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	23c0      	movs	r3, #192	@ 0xc0
 8003c0a:	039b      	lsls	r3, r3, #14
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d013      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	23c0      	movs	r3, #192	@ 0xc0
 8003c1a:	029b      	lsls	r3, r3, #10
 8003c1c:	401a      	ands	r2, r3
 8003c1e:	23c0      	movs	r3, #192	@ 0xc0
 8003c20:	029b      	lsls	r3, r3, #10
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d10a      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003c26:	4b91      	ldr	r3, [pc, #580]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	2380      	movs	r3, #128	@ 0x80
 8003c2c:	029b      	lsls	r3, r3, #10
 8003c2e:	401a      	ands	r2, r3
 8003c30:	2380      	movs	r3, #128	@ 0x80
 8003c32:	029b      	lsls	r3, r3, #10
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d101      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e113      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003c3c:	4b8b      	ldr	r3, [pc, #556]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c40:	23c0      	movs	r3, #192	@ 0xc0
 8003c42:	029b      	lsls	r3, r3, #10
 8003c44:	4013      	ands	r3, r2
 8003c46:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d049      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	23c0      	movs	r3, #192	@ 0xc0
 8003c54:	029b      	lsls	r3, r3, #10
 8003c56:	4013      	ands	r3, r2
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d004      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2220      	movs	r2, #32
 8003c64:	4013      	ands	r3, r2
 8003c66:	d10d      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	23c0      	movs	r3, #192	@ 0xc0
 8003c6e:	029b      	lsls	r3, r3, #10
 8003c70:	4013      	ands	r3, r2
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d034      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	2380      	movs	r3, #128	@ 0x80
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	4013      	ands	r3, r2
 8003c82:	d02e      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003c84:	4b79      	ldr	r3, [pc, #484]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c88:	4a7a      	ldr	r2, [pc, #488]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c8e:	4b77      	ldr	r3, [pc, #476]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c90:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003c92:	4b76      	ldr	r3, [pc, #472]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c94:	2180      	movs	r1, #128	@ 0x80
 8003c96:	0309      	lsls	r1, r1, #12
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c9c:	4b73      	ldr	r3, [pc, #460]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003ca0:	4b72      	ldr	r3, [pc, #456]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ca2:	4975      	ldr	r1, [pc, #468]	@ (8003e78 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003ca4:	400a      	ands	r2, r1
 8003ca6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003ca8:	4b70      	ldr	r3, [pc, #448]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	2380      	movs	r3, #128	@ 0x80
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d014      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb8:	f7fd fdfe 	bl	80018b8 <HAL_GetTick>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cc0:	e009      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc2:	f7fd fdf9 	bl	80018b8 <HAL_GetTick>
 8003cc6:	0002      	movs	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8003e7c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0c6      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cd6:	4b65      	ldr	r3, [pc, #404]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003cda:	2380      	movs	r3, #128	@ 0x80
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d0ef      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	2380      	movs	r3, #128	@ 0x80
 8003ce8:	011b      	lsls	r3, r3, #4
 8003cea:	4013      	ands	r3, r2
 8003cec:	d01f      	beq.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	23c0      	movs	r3, #192	@ 0xc0
 8003cf4:	029b      	lsls	r3, r3, #10
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	23c0      	movs	r3, #192	@ 0xc0
 8003cfa:	029b      	lsls	r3, r3, #10
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d10c      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003d00:	4b5a      	ldr	r3, [pc, #360]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a5e      	ldr	r2, [pc, #376]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	0019      	movs	r1, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689a      	ldr	r2, [r3, #8]
 8003d0e:	23c0      	movs	r3, #192	@ 0xc0
 8003d10:	039b      	lsls	r3, r3, #14
 8003d12:	401a      	ands	r2, r3
 8003d14:	4b55      	ldr	r3, [pc, #340]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d16:	430a      	orrs	r2, r1
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	4b54      	ldr	r3, [pc, #336]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d1c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	23c0      	movs	r3, #192	@ 0xc0
 8003d24:	029b      	lsls	r3, r3, #10
 8003d26:	401a      	ands	r2, r3
 8003d28:	4b50      	ldr	r3, [pc, #320]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2220      	movs	r2, #32
 8003d34:	4013      	ands	r3, r2
 8003d36:	d01f      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	23c0      	movs	r3, #192	@ 0xc0
 8003d3e:	029b      	lsls	r3, r3, #10
 8003d40:	401a      	ands	r2, r3
 8003d42:	23c0      	movs	r3, #192	@ 0xc0
 8003d44:	029b      	lsls	r3, r3, #10
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d10c      	bne.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003d4a:	4b48      	ldr	r3, [pc, #288]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8003e80 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003d50:	4013      	ands	r3, r2
 8003d52:	0019      	movs	r1, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	23c0      	movs	r3, #192	@ 0xc0
 8003d5a:	039b      	lsls	r3, r3, #14
 8003d5c:	401a      	ands	r2, r3
 8003d5e:	4b43      	ldr	r3, [pc, #268]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d60:	430a      	orrs	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	4b41      	ldr	r3, [pc, #260]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d66:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	23c0      	movs	r3, #192	@ 0xc0
 8003d6e:	029b      	lsls	r3, r3, #10
 8003d70:	401a      	ands	r2, r3
 8003d72:	4b3e      	ldr	r3, [pc, #248]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d74:	430a      	orrs	r2, r1
 8003d76:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d78:	2317      	movs	r3, #23
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d105      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d82:	4b3a      	ldr	r3, [pc, #232]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d86:	4b39      	ldr	r3, [pc, #228]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d88:	493e      	ldr	r1, [pc, #248]	@ (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003d8a:	400a      	ands	r2, r1
 8003d8c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2201      	movs	r2, #1
 8003d94:	4013      	ands	r3, r2
 8003d96:	d009      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d98:	4b34      	ldr	r3, [pc, #208]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d9c:	2203      	movs	r2, #3
 8003d9e:	4393      	bics	r3, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	4b31      	ldr	r3, [pc, #196]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003da8:	430a      	orrs	r2, r1
 8003daa:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2202      	movs	r2, #2
 8003db2:	4013      	ands	r3, r2
 8003db4:	d009      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003db6:	4b2d      	ldr	r3, [pc, #180]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dba:	220c      	movs	r2, #12
 8003dbc:	4393      	bics	r3, r2
 8003dbe:	0019      	movs	r1, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	4b29      	ldr	r3, [pc, #164]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2204      	movs	r2, #4
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d009      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dd4:	4b25      	ldr	r3, [pc, #148]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003dd8:	4a2b      	ldr	r2, [pc, #172]	@ (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	0019      	movs	r1, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	4b22      	ldr	r3, [pc, #136]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003de4:	430a      	orrs	r2, r1
 8003de6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2208      	movs	r2, #8
 8003dee:	4013      	ands	r3, r2
 8003df0:	d009      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003df2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003df6:	4a25      	ldr	r2, [pc, #148]	@ (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003df8:	4013      	ands	r3, r2
 8003dfa:	0019      	movs	r1, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699a      	ldr	r2, [r3, #24]
 8003e00:	4b1a      	ldr	r3, [pc, #104]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e02:	430a      	orrs	r2, r1
 8003e04:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	2380      	movs	r3, #128	@ 0x80
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d009      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e12:	4b16      	ldr	r3, [pc, #88]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e16:	4a17      	ldr	r2, [pc, #92]	@ (8003e74 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	4b12      	ldr	r3, [pc, #72]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e22:	430a      	orrs	r2, r1
 8003e24:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2240      	movs	r2, #64	@ 0x40
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d009      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e30:	4b0e      	ldr	r3, [pc, #56]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e34:	4a16      	ldr	r2, [pc, #88]	@ (8003e90 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	0019      	movs	r1, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e40:	430a      	orrs	r2, r1
 8003e42:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2280      	movs	r2, #128	@ 0x80
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003e4e:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e52:	4a10      	ldr	r2, [pc, #64]	@ (8003e94 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	0019      	movs	r1, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1a      	ldr	r2, [r3, #32]
 8003e5c:	4b03      	ldr	r3, [pc, #12]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	0018      	movs	r0, r3
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b006      	add	sp, #24
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	40007000 	.word	0x40007000
 8003e74:	fffcffff 	.word	0xfffcffff
 8003e78:	fff7ffff 	.word	0xfff7ffff
 8003e7c:	00001388 	.word	0x00001388
 8003e80:	ffcfffff 	.word	0xffcfffff
 8003e84:	efffffff 	.word	0xefffffff
 8003e88:	fffff3ff 	.word	0xfffff3ff
 8003e8c:	ffffcfff 	.word	0xffffcfff
 8003e90:	fbffffff 	.word	0xfbffffff
 8003e94:	fff3ffff 	.word	0xfff3ffff

08003e98 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e98:	b5b0      	push	{r4, r5, r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ea0:	230f      	movs	r3, #15
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e088      	b.n	8003fc4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2221      	movs	r2, #33	@ 0x21
 8003eb6:	5c9b      	ldrb	r3, [r3, r2]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d107      	bne.n	8003ece <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	0018      	movs	r0, r3
 8003eca:	f7fd f8c3 	bl	8001054 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2221      	movs	r2, #33	@ 0x21
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	2210      	movs	r2, #16
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d05f      	beq.n	8003fa4 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	22ca      	movs	r2, #202	@ 0xca
 8003eea:	625a      	str	r2, [r3, #36]	@ 0x24
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	2253      	movs	r2, #83	@ 0x53
 8003ef2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003ef4:	250f      	movs	r5, #15
 8003ef6:	197c      	adds	r4, r7, r5
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	0018      	movs	r0, r3
 8003efc:	f000 f93e 	bl	800417c <RTC_EnterInitMode>
 8003f00:	0003      	movs	r3, r0
 8003f02:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8003f04:	0028      	movs	r0, r5
 8003f06:	183b      	adds	r3, r7, r0
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d12c      	bne.n	8003f68 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	492c      	ldr	r1, [pc, #176]	@ (8003fcc <HAL_RTC_Init+0x134>)
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6899      	ldr	r1, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	431a      	orrs	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	68d2      	ldr	r2, [r2, #12]
 8003f44:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6919      	ldr	r1, [r3, #16]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	041a      	lsls	r2, r3, #16
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003f5a:	183c      	adds	r4, r7, r0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f000 f950 	bl	8004204 <RTC_ExitInitMode>
 8003f64:	0003      	movs	r3, r0
 8003f66:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8003f68:	230f      	movs	r3, #15
 8003f6a:	18fb      	adds	r3, r7, r3
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d113      	bne.n	8003f9a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2103      	movs	r1, #3
 8003f7e:	438a      	bics	r2, r1
 8003f80:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	430a      	orrs	r2, r1
 8003f98:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	22ff      	movs	r2, #255	@ 0xff
 8003fa0:	625a      	str	r2, [r3, #36]	@ 0x24
 8003fa2:	e003      	b.n	8003fac <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003fa4:	230f      	movs	r3, #15
 8003fa6:	18fb      	adds	r3, r7, r3
 8003fa8:	2200      	movs	r2, #0
 8003faa:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8003fac:	230f      	movs	r3, #15
 8003fae:	18fb      	adds	r3, r7, r3
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d103      	bne.n	8003fbe <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2221      	movs	r2, #33	@ 0x21
 8003fba:	2101      	movs	r1, #1
 8003fbc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003fbe:	230f      	movs	r3, #15
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	781b      	ldrb	r3, [r3, #0]
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b004      	add	sp, #16
 8003fca:	bdb0      	pop	{r4, r5, r7, pc}
 8003fcc:	ff8fffbf 	.word	0xff8fffbf

08003fd0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	045b      	lsls	r3, r3, #17
 8003ff2:	0c5a      	lsrs	r2, r3, #17
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a22      	ldr	r2, [pc, #136]	@ (8004088 <HAL_RTC_GetTime+0xb8>)
 8004000:	4013      	ands	r3, r2
 8004002:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	0c1b      	lsrs	r3, r3, #16
 8004008:	b2db      	uxtb	r3, r3
 800400a:	223f      	movs	r2, #63	@ 0x3f
 800400c:	4013      	ands	r3, r2
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	b2db      	uxtb	r3, r3
 800401a:	227f      	movs	r2, #127	@ 0x7f
 800401c:	4013      	ands	r3, r2
 800401e:	b2da      	uxtb	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	227f      	movs	r2, #127	@ 0x7f
 800402a:	4013      	ands	r3, r2
 800402c:	b2da      	uxtb	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	0d9b      	lsrs	r3, r3, #22
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2201      	movs	r2, #1
 800403a:	4013      	ands	r3, r2
 800403c:	b2da      	uxtb	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d11a      	bne.n	800407e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	0018      	movs	r0, r3
 800404e:	f000 f903 	bl	8004258 <RTC_Bcd2ToByte>
 8004052:	0003      	movs	r3, r0
 8004054:	001a      	movs	r2, r3
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	785b      	ldrb	r3, [r3, #1]
 800405e:	0018      	movs	r0, r3
 8004060:	f000 f8fa 	bl	8004258 <RTC_Bcd2ToByte>
 8004064:	0003      	movs	r3, r0
 8004066:	001a      	movs	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	789b      	ldrb	r3, [r3, #2]
 8004070:	0018      	movs	r0, r3
 8004072:	f000 f8f1 	bl	8004258 <RTC_Bcd2ToByte>
 8004076:	0003      	movs	r3, r0
 8004078:	001a      	movs	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	0018      	movs	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	b006      	add	sp, #24
 8004086:	bd80      	pop	{r7, pc}
 8004088:	007f7f7f 	.word	0x007f7f7f

0800408c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4a21      	ldr	r2, [pc, #132]	@ (8004128 <HAL_RTC_GetDate+0x9c>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	0c1b      	lsrs	r3, r3, #16
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	0a1b      	lsrs	r3, r3, #8
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	221f      	movs	r2, #31
 80040ba:	4013      	ands	r3, r2
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	223f      	movs	r2, #63	@ 0x3f
 80040c8:	4013      	ands	r3, r2
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	0b5b      	lsrs	r3, r3, #13
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2207      	movs	r2, #7
 80040d8:	4013      	ands	r3, r2
 80040da:	b2da      	uxtb	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d11a      	bne.n	800411c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	78db      	ldrb	r3, [r3, #3]
 80040ea:	0018      	movs	r0, r3
 80040ec:	f000 f8b4 	bl	8004258 <RTC_Bcd2ToByte>
 80040f0:	0003      	movs	r3, r0
 80040f2:	001a      	movs	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	785b      	ldrb	r3, [r3, #1]
 80040fc:	0018      	movs	r0, r3
 80040fe:	f000 f8ab 	bl	8004258 <RTC_Bcd2ToByte>
 8004102:	0003      	movs	r3, r0
 8004104:	001a      	movs	r2, r3
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	789b      	ldrb	r3, [r3, #2]
 800410e:	0018      	movs	r0, r3
 8004110:	f000 f8a2 	bl	8004258 <RTC_Bcd2ToByte>
 8004114:	0003      	movs	r3, r0
 8004116:	001a      	movs	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	0018      	movs	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	b006      	add	sp, #24
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	00ffff3f 	.word	0x00ffff3f

0800412c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0e      	ldr	r2, [pc, #56]	@ (8004178 <HAL_RTC_WaitForSynchro+0x4c>)
 800413e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004140:	f7fd fbba 	bl	80018b8 <HAL_GetTick>
 8004144:	0003      	movs	r3, r0
 8004146:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004148:	e00a      	b.n	8004160 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800414a:	f7fd fbb5 	bl	80018b8 <HAL_GetTick>
 800414e:	0002      	movs	r2, r0
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1ad2      	subs	r2, r2, r3
 8004154:	23fa      	movs	r3, #250	@ 0xfa
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	429a      	cmp	r2, r3
 800415a:	d901      	bls.n	8004160 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e006      	b.n	800416e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2220      	movs	r2, #32
 8004168:	4013      	ands	r3, r2
 800416a:	d0ee      	beq.n	800414a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	0018      	movs	r0, r3
 8004170:	46bd      	mov	sp, r7
 8004172:	b004      	add	sp, #16
 8004174:	bd80      	pop	{r7, pc}
 8004176:	46c0      	nop			@ (mov r8, r8)
 8004178:	0001ff5f 	.word	0x0001ff5f

0800417c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004188:	230f      	movs	r3, #15
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	2240      	movs	r2, #64	@ 0x40
 8004198:	4013      	ands	r3, r2
 800419a:	d12c      	bne.n	80041f6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2180      	movs	r1, #128	@ 0x80
 80041a8:	430a      	orrs	r2, r1
 80041aa:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041ac:	f7fd fb84 	bl	80018b8 <HAL_GetTick>
 80041b0:	0003      	movs	r3, r0
 80041b2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80041b4:	e014      	b.n	80041e0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041b6:	f7fd fb7f 	bl	80018b8 <HAL_GetTick>
 80041ba:	0002      	movs	r2, r0
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	1ad2      	subs	r2, r2, r3
 80041c0:	200f      	movs	r0, #15
 80041c2:	183b      	adds	r3, r7, r0
 80041c4:	1839      	adds	r1, r7, r0
 80041c6:	7809      	ldrb	r1, [r1, #0]
 80041c8:	7019      	strb	r1, [r3, #0]
 80041ca:	23fa      	movs	r3, #250	@ 0xfa
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d906      	bls.n	80041e0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2221      	movs	r2, #33	@ 0x21
 80041d6:	2104      	movs	r1, #4
 80041d8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80041da:	183b      	adds	r3, r7, r0
 80041dc:	2201      	movs	r2, #1
 80041de:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	2240      	movs	r2, #64	@ 0x40
 80041e8:	4013      	ands	r3, r2
 80041ea:	d104      	bne.n	80041f6 <RTC_EnterInitMode+0x7a>
 80041ec:	230f      	movs	r3, #15
 80041ee:	18fb      	adds	r3, r7, r3
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d1df      	bne.n	80041b6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80041f6:	230f      	movs	r3, #15
 80041f8:	18fb      	adds	r3, r7, r3
 80041fa:	781b      	ldrb	r3, [r3, #0]
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	b004      	add	sp, #16
 8004202:	bd80      	pop	{r7, pc}

08004204 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004204:	b590      	push	{r4, r7, lr}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800420c:	240f      	movs	r4, #15
 800420e:	193b      	adds	r3, r7, r4
 8004210:	2200      	movs	r2, #0
 8004212:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68da      	ldr	r2, [r3, #12]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2180      	movs	r1, #128	@ 0x80
 8004220:	438a      	bics	r2, r1
 8004222:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	2220      	movs	r2, #32
 800422c:	4013      	ands	r3, r2
 800422e:	d10c      	bne.n	800424a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	0018      	movs	r0, r3
 8004234:	f7ff ff7a 	bl	800412c <HAL_RTC_WaitForSynchro>
 8004238:	1e03      	subs	r3, r0, #0
 800423a:	d006      	beq.n	800424a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2221      	movs	r2, #33	@ 0x21
 8004240:	2104      	movs	r1, #4
 8004242:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8004244:	193b      	adds	r3, r7, r4
 8004246:	2201      	movs	r2, #1
 8004248:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800424a:	230f      	movs	r3, #15
 800424c:	18fb      	adds	r3, r7, r3
 800424e:	781b      	ldrb	r3, [r3, #0]
}
 8004250:	0018      	movs	r0, r3
 8004252:	46bd      	mov	sp, r7
 8004254:	b005      	add	sp, #20
 8004256:	bd90      	pop	{r4, r7, pc}

08004258 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	0002      	movs	r2, r0
 8004260:	1dfb      	adds	r3, r7, #7
 8004262:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8004264:	2300      	movs	r3, #0
 8004266:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004268:	1dfb      	adds	r3, r7, #7
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	091b      	lsrs	r3, r3, #4
 800426e:	b2db      	uxtb	r3, r3
 8004270:	001a      	movs	r2, r3
 8004272:	0013      	movs	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	189b      	adds	r3, r3, r2
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	1dfb      	adds	r3, r7, #7
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	210f      	movs	r1, #15
 8004286:	400b      	ands	r3, r1
 8004288:	b2db      	uxtb	r3, r3
 800428a:	18d3      	adds	r3, r2, r3
 800428c:	b2db      	uxtb	r3, r3
}
 800428e:	0018      	movs	r0, r3
 8004290:	46bd      	mov	sp, r7
 8004292:	b004      	add	sp, #16
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80042a4:	4b64      	ldr	r3, [pc, #400]	@ (8004438 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	22fa      	movs	r2, #250	@ 0xfa
 80042aa:	01d1      	lsls	r1, r2, #7
 80042ac:	0018      	movs	r0, r3
 80042ae:	f7fb ff3d 	bl	800012c <__udivsi3>
 80042b2:	0003      	movs	r3, r0
 80042b4:	001a      	movs	r2, r3
 80042b6:	0013      	movs	r3, r2
 80042b8:	015b      	lsls	r3, r3, #5
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	189b      	adds	r3, r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	5c9b      	ldrb	r3, [r3, r2]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e0ad      	b.n	800442e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2220      	movs	r2, #32
 80042d6:	2101      	movs	r1, #1
 80042d8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2221      	movs	r2, #33	@ 0x21
 80042de:	2102      	movs	r1, #2
 80042e0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	22ca      	movs	r2, #202	@ 0xca
 80042e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2253      	movs	r2, #83	@ 0x53
 80042f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	689a      	ldr	r2, [r3, #8]
 80042f8:	2380      	movs	r3, #128	@ 0x80
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	4013      	ands	r3, r2
 80042fe:	d019      	beq.n	8004334 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	3b01      	subs	r3, #1
 8004304:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10d      	bne.n	8004328 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	22ff      	movs	r2, #255	@ 0xff
 8004312:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2221      	movs	r2, #33	@ 0x21
 8004318:	2103      	movs	r1, #3
 800431a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	2100      	movs	r1, #0
 8004322:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e082      	b.n	800442e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	2204      	movs	r2, #4
 8004330:	4013      	ands	r3, r2
 8004332:	d1e5      	bne.n	8004300 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	493f      	ldr	r1, [pc, #252]	@ (800443c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8004340:	400a      	ands	r2, r1
 8004342:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	22ff      	movs	r2, #255	@ 0xff
 800434c:	401a      	ands	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	493b      	ldr	r1, [pc, #236]	@ (8004440 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8004354:	430a      	orrs	r2, r1
 8004356:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8004358:	4b37      	ldr	r3, [pc, #220]	@ (8004438 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	22fa      	movs	r2, #250	@ 0xfa
 800435e:	01d1      	lsls	r1, r2, #7
 8004360:	0018      	movs	r0, r3
 8004362:	f7fb fee3 	bl	800012c <__udivsi3>
 8004366:	0003      	movs	r3, r0
 8004368:	001a      	movs	r2, r3
 800436a:	0013      	movs	r3, r2
 800436c:	015b      	lsls	r3, r3, #5
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	189b      	adds	r3, r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	3b01      	subs	r3, #1
 800437c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10d      	bne.n	80043a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	22ff      	movs	r2, #255	@ 0xff
 800438a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2221      	movs	r2, #33	@ 0x21
 8004390:	2103      	movs	r1, #3
 8004392:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2220      	movs	r2, #32
 8004398:	2100      	movs	r1, #0
 800439a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e046      	b.n	800442e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	2204      	movs	r2, #4
 80043a8:	4013      	ands	r3, r2
 80043aa:	d0e5      	beq.n	8004378 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689a      	ldr	r2, [r3, #8]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	2107      	movs	r1, #7
 80043b8:	438a      	bics	r2, r1
 80043ba:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6899      	ldr	r1, [r3, #8]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80043d4:	4b1b      	ldr	r3, [pc, #108]	@ (8004444 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80043da:	2180      	movs	r1, #128	@ 0x80
 80043dc:	0349      	lsls	r1, r1, #13
 80043de:	430a      	orrs	r2, r1
 80043e0:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80043e2:	4b18      	ldr	r3, [pc, #96]	@ (8004444 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80043e4:	689a      	ldr	r2, [r3, #8]
 80043e6:	4b17      	ldr	r3, [pc, #92]	@ (8004444 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80043e8:	2180      	movs	r1, #128	@ 0x80
 80043ea:	0349      	lsls	r1, r1, #13
 80043ec:	430a      	orrs	r2, r1
 80043ee:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2180      	movs	r1, #128	@ 0x80
 80043fc:	01c9      	lsls	r1, r1, #7
 80043fe:	430a      	orrs	r2, r1
 8004400:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2180      	movs	r1, #128	@ 0x80
 800440e:	00c9      	lsls	r1, r1, #3
 8004410:	430a      	orrs	r2, r1
 8004412:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	22ff      	movs	r2, #255	@ 0xff
 800441a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2221      	movs	r2, #33	@ 0x21
 8004420:	2101      	movs	r1, #1
 8004422:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	2100      	movs	r1, #0
 800442a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800442c:	2300      	movs	r3, #0
}
 800442e:	0018      	movs	r0, r3
 8004430:	46bd      	mov	sp, r7
 8004432:	b006      	add	sp, #24
 8004434:	bd80      	pop	{r7, pc}
 8004436:	46c0      	nop			@ (mov r8, r8)
 8004438:	20000000 	.word	0x20000000
 800443c:	fffffbff 	.word	0xfffffbff
 8004440:	fffffb7f 	.word	0xfffffb7f
 8004444:	40010400 	.word	0x40010400

08004448 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	5c9b      	ldrb	r3, [r3, r2]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 800445e:	2302      	movs	r3, #2
 8004460:	e04e      	b.n	8004500 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2220      	movs	r2, #32
 8004466:	2101      	movs	r1, #1
 8004468:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2221      	movs	r2, #33	@ 0x21
 800446e:	2102      	movs	r1, #2
 8004470:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	22ca      	movs	r2, #202	@ 0xca
 8004478:	625a      	str	r2, [r3, #36]	@ 0x24
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2253      	movs	r2, #83	@ 0x53
 8004480:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689a      	ldr	r2, [r3, #8]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	491e      	ldr	r1, [pc, #120]	@ (8004508 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 800448e:	400a      	ands	r2, r1
 8004490:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	491b      	ldr	r1, [pc, #108]	@ (800450c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 800449e:	400a      	ands	r2, r1
 80044a0:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044a2:	f7fd fa09 	bl	80018b8 <HAL_GetTick>
 80044a6:	0003      	movs	r3, r0
 80044a8:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80044aa:	e016      	b.n	80044da <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044ac:	f7fd fa04 	bl	80018b8 <HAL_GetTick>
 80044b0:	0002      	movs	r2, r0
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	1ad2      	subs	r2, r2, r3
 80044b6:	23fa      	movs	r3, #250	@ 0xfa
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d90d      	bls.n	80044da <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	22ff      	movs	r2, #255	@ 0xff
 80044c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2221      	movs	r2, #33	@ 0x21
 80044ca:	2103      	movs	r1, #3
 80044cc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2220      	movs	r2, #32
 80044d2:	2100      	movs	r1, #0
 80044d4:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e012      	b.n	8004500 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	2204      	movs	r2, #4
 80044e2:	4013      	ands	r3, r2
 80044e4:	d0e2      	beq.n	80044ac <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	22ff      	movs	r2, #255	@ 0xff
 80044ec:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2221      	movs	r2, #33	@ 0x21
 80044f2:	2101      	movs	r1, #1
 80044f4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	2100      	movs	r1, #0
 80044fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	b004      	add	sp, #16
 8004506:	bd80      	pop	{r7, pc}
 8004508:	fffffbff 	.word	0xfffffbff
 800450c:	ffffbfff 	.word	0xffffbfff

08004510 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8004518:	4b13      	ldr	r3, [pc, #76]	@ (8004568 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 800451a:	2280      	movs	r2, #128	@ 0x80
 800451c:	0352      	lsls	r2, r2, #13
 800451e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689a      	ldr	r2, [r3, #8]
 8004526:	2380      	movs	r3, #128	@ 0x80
 8004528:	01db      	lsls	r3, r3, #7
 800452a:	4013      	ands	r3, r2
 800452c:	d014      	beq.n	8004558 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68da      	ldr	r2, [r3, #12]
 8004534:	2380      	movs	r3, #128	@ 0x80
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	4013      	ands	r3, r2
 800453a:	d00d      	beq.n	8004558 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	22ff      	movs	r2, #255	@ 0xff
 8004544:	401a      	ands	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4908      	ldr	r1, [pc, #32]	@ (800456c <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 800454c:	430a      	orrs	r2, r1
 800454e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0018      	movs	r0, r3
 8004554:	f7fc f950 	bl	80007f8 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2221      	movs	r2, #33	@ 0x21
 800455c:	2101      	movs	r1, #1
 800455e:	5499      	strb	r1, [r3, r2]
}
 8004560:	46c0      	nop			@ (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b002      	add	sp, #8
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40010400 	.word	0x40010400
 800456c:	fffffb7f 	.word	0xfffffb7f

08004570 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d101      	bne.n	8004582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e044      	b.n	800460c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004586:	2b00      	cmp	r3, #0
 8004588:	d107      	bne.n	800459a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2278      	movs	r2, #120	@ 0x78
 800458e:	2100      	movs	r1, #0
 8004590:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	0018      	movs	r0, r3
 8004596:	f7fc fcaf 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2224      	movs	r2, #36	@ 0x24
 800459e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2101      	movs	r1, #1
 80045ac:	438a      	bics	r2, r1
 80045ae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	0018      	movs	r0, r3
 80045bc:	f000 fba8 	bl	8004d10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	0018      	movs	r0, r3
 80045c4:	f000 f906 	bl	80047d4 <UART_SetConfig>
 80045c8:	0003      	movs	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d101      	bne.n	80045d2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e01c      	b.n	800460c <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685a      	ldr	r2, [r3, #4]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	490d      	ldr	r1, [pc, #52]	@ (8004614 <HAL_UART_Init+0xa4>)
 80045de:	400a      	ands	r2, r1
 80045e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	212a      	movs	r1, #42	@ 0x2a
 80045ee:	438a      	bics	r2, r1
 80045f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2101      	movs	r1, #1
 80045fe:	430a      	orrs	r2, r1
 8004600:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	0018      	movs	r0, r3
 8004606:	f000 fc37 	bl	8004e78 <UART_CheckIdleState>
 800460a:	0003      	movs	r3, r0
}
 800460c:	0018      	movs	r0, r3
 800460e:	46bd      	mov	sp, r7
 8004610:	b002      	add	sp, #8
 8004612:	bd80      	pop	{r7, pc}
 8004614:	ffffb7ff 	.word	0xffffb7ff

08004618 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e030      	b.n	800468c <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2224      	movs	r2, #36	@ 0x24
 800462e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2101      	movs	r1, #1
 800463c:	438a      	bics	r2, r1
 800463e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2200      	movs	r2, #0
 8004646:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2200      	movs	r2, #0
 800464e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2200      	movs	r2, #0
 8004656:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	0018      	movs	r0, r3
 800465c:	f7fc fcc2 	bl	8000fe4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2284      	movs	r2, #132	@ 0x84
 8004664:	2100      	movs	r1, #0
 8004666:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2280      	movs	r2, #128	@ 0x80
 8004672:	2100      	movs	r1, #0
 8004674:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2278      	movs	r2, #120	@ 0x78
 8004686:	2100      	movs	r1, #0
 8004688:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	0018      	movs	r0, r3
 800468e:	46bd      	mov	sp, r7
 8004690:	b002      	add	sp, #8
 8004692:	bd80      	pop	{r7, pc}

08004694 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	@ 0x28
 8004698:	af02      	add	r7, sp, #8
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	1dbb      	adds	r3, r7, #6
 80046a2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d000      	beq.n	80046ae <HAL_UART_Transmit+0x1a>
 80046ac:	e08c      	b.n	80047c8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <HAL_UART_Transmit+0x28>
 80046b4:	1dbb      	adds	r3, r7, #6
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e084      	b.n	80047ca <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	2380      	movs	r3, #128	@ 0x80
 80046c6:	015b      	lsls	r3, r3, #5
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d109      	bne.n	80046e0 <HAL_UART_Transmit+0x4c>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d105      	bne.n	80046e0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2201      	movs	r2, #1
 80046d8:	4013      	ands	r3, r2
 80046da:	d001      	beq.n	80046e0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e074      	b.n	80047ca <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2284      	movs	r2, #132	@ 0x84
 80046e4:	2100      	movs	r1, #0
 80046e6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2221      	movs	r2, #33	@ 0x21
 80046ec:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ee:	f7fd f8e3 	bl	80018b8 <HAL_GetTick>
 80046f2:	0003      	movs	r3, r0
 80046f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	1dba      	adds	r2, r7, #6
 80046fa:	2150      	movs	r1, #80	@ 0x50
 80046fc:	8812      	ldrh	r2, [r2, #0]
 80046fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	1dba      	adds	r2, r7, #6
 8004704:	2152      	movs	r1, #82	@ 0x52
 8004706:	8812      	ldrh	r2, [r2, #0]
 8004708:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	2380      	movs	r3, #128	@ 0x80
 8004710:	015b      	lsls	r3, r3, #5
 8004712:	429a      	cmp	r2, r3
 8004714:	d108      	bne.n	8004728 <HAL_UART_Transmit+0x94>
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d104      	bne.n	8004728 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800471e:	2300      	movs	r3, #0
 8004720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	e003      	b.n	8004730 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800472c:	2300      	movs	r3, #0
 800472e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004730:	e02f      	b.n	8004792 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	0013      	movs	r3, r2
 800473c:	2200      	movs	r2, #0
 800473e:	2180      	movs	r1, #128	@ 0x80
 8004740:	f000 fc42 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 8004744:	1e03      	subs	r3, r0, #0
 8004746:	d004      	beq.n	8004752 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2220      	movs	r2, #32
 800474c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e03b      	b.n	80047ca <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10b      	bne.n	8004770 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	001a      	movs	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	05d2      	lsls	r2, r2, #23
 8004764:	0dd2      	lsrs	r2, r2, #23
 8004766:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	3302      	adds	r3, #2
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	e007      	b.n	8004780 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	781a      	ldrb	r2, [r3, #0]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3301      	adds	r3, #1
 800477e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2252      	movs	r2, #82	@ 0x52
 8004784:	5a9b      	ldrh	r3, [r3, r2]
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b299      	uxth	r1, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2252      	movs	r2, #82	@ 0x52
 8004790:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2252      	movs	r2, #82	@ 0x52
 8004796:	5a9b      	ldrh	r3, [r3, r2]
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1c9      	bne.n	8004732 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	9300      	str	r3, [sp, #0]
 80047a6:	0013      	movs	r3, r2
 80047a8:	2200      	movs	r2, #0
 80047aa:	2140      	movs	r1, #64	@ 0x40
 80047ac:	f000 fc0c 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 80047b0:	1e03      	subs	r3, r0, #0
 80047b2:	d004      	beq.n	80047be <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2220      	movs	r2, #32
 80047b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e005      	b.n	80047ca <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	e000      	b.n	80047ca <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80047c8:	2302      	movs	r3, #2
  }
}
 80047ca:	0018      	movs	r0, r3
 80047cc:	46bd      	mov	sp, r7
 80047ce:	b008      	add	sp, #32
 80047d0:	bd80      	pop	{r7, pc}
	...

080047d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d4:	b5b0      	push	{r4, r5, r7, lr}
 80047d6:	b08e      	sub	sp, #56	@ 0x38
 80047d8:	af00      	add	r7, sp, #0
 80047da:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047dc:	231a      	movs	r3, #26
 80047de:	2218      	movs	r2, #24
 80047e0:	189b      	adds	r3, r3, r2
 80047e2:	19db      	adds	r3, r3, r7
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	431a      	orrs	r2, r3
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	695b      	ldr	r3, [r3, #20]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4ac3      	ldr	r2, [pc, #780]	@ (8004b14 <UART_SetConfig+0x340>)
 8004808:	4013      	ands	r3, r2
 800480a:	0019      	movs	r1, r3
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004812:	430a      	orrs	r2, r1
 8004814:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	4abe      	ldr	r2, [pc, #760]	@ (8004b18 <UART_SetConfig+0x344>)
 800481e:	4013      	ands	r3, r2
 8004820:	0019      	movs	r1, r3
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4ab8      	ldr	r2, [pc, #736]	@ (8004b1c <UART_SetConfig+0x348>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d004      	beq.n	8004848 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004844:	4313      	orrs	r3, r2
 8004846:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	4ab4      	ldr	r2, [pc, #720]	@ (8004b20 <UART_SetConfig+0x34c>)
 8004850:	4013      	ands	r3, r2
 8004852:	0019      	movs	r1, r3
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800485a:	430a      	orrs	r2, r1
 800485c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4ab0      	ldr	r2, [pc, #704]	@ (8004b24 <UART_SetConfig+0x350>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d131      	bne.n	80048cc <UART_SetConfig+0xf8>
 8004868:	4baf      	ldr	r3, [pc, #700]	@ (8004b28 <UART_SetConfig+0x354>)
 800486a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800486c:	2203      	movs	r2, #3
 800486e:	4013      	ands	r3, r2
 8004870:	2b03      	cmp	r3, #3
 8004872:	d01d      	beq.n	80048b0 <UART_SetConfig+0xdc>
 8004874:	d823      	bhi.n	80048be <UART_SetConfig+0xea>
 8004876:	2b02      	cmp	r3, #2
 8004878:	d00c      	beq.n	8004894 <UART_SetConfig+0xc0>
 800487a:	d820      	bhi.n	80048be <UART_SetConfig+0xea>
 800487c:	2b00      	cmp	r3, #0
 800487e:	d002      	beq.n	8004886 <UART_SetConfig+0xb2>
 8004880:	2b01      	cmp	r3, #1
 8004882:	d00e      	beq.n	80048a2 <UART_SetConfig+0xce>
 8004884:	e01b      	b.n	80048be <UART_SetConfig+0xea>
 8004886:	231b      	movs	r3, #27
 8004888:	2218      	movs	r2, #24
 800488a:	189b      	adds	r3, r3, r2
 800488c:	19db      	adds	r3, r3, r7
 800488e:	2201      	movs	r2, #1
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e0b4      	b.n	80049fe <UART_SetConfig+0x22a>
 8004894:	231b      	movs	r3, #27
 8004896:	2218      	movs	r2, #24
 8004898:	189b      	adds	r3, r3, r2
 800489a:	19db      	adds	r3, r3, r7
 800489c:	2202      	movs	r2, #2
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	e0ad      	b.n	80049fe <UART_SetConfig+0x22a>
 80048a2:	231b      	movs	r3, #27
 80048a4:	2218      	movs	r2, #24
 80048a6:	189b      	adds	r3, r3, r2
 80048a8:	19db      	adds	r3, r3, r7
 80048aa:	2204      	movs	r2, #4
 80048ac:	701a      	strb	r2, [r3, #0]
 80048ae:	e0a6      	b.n	80049fe <UART_SetConfig+0x22a>
 80048b0:	231b      	movs	r3, #27
 80048b2:	2218      	movs	r2, #24
 80048b4:	189b      	adds	r3, r3, r2
 80048b6:	19db      	adds	r3, r3, r7
 80048b8:	2208      	movs	r2, #8
 80048ba:	701a      	strb	r2, [r3, #0]
 80048bc:	e09f      	b.n	80049fe <UART_SetConfig+0x22a>
 80048be:	231b      	movs	r3, #27
 80048c0:	2218      	movs	r2, #24
 80048c2:	189b      	adds	r3, r3, r2
 80048c4:	19db      	adds	r3, r3, r7
 80048c6:	2210      	movs	r2, #16
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	e098      	b.n	80049fe <UART_SetConfig+0x22a>
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a96      	ldr	r2, [pc, #600]	@ (8004b2c <UART_SetConfig+0x358>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d131      	bne.n	800493a <UART_SetConfig+0x166>
 80048d6:	4b94      	ldr	r3, [pc, #592]	@ (8004b28 <UART_SetConfig+0x354>)
 80048d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048da:	220c      	movs	r2, #12
 80048dc:	4013      	ands	r3, r2
 80048de:	2b0c      	cmp	r3, #12
 80048e0:	d01d      	beq.n	800491e <UART_SetConfig+0x14a>
 80048e2:	d823      	bhi.n	800492c <UART_SetConfig+0x158>
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d00c      	beq.n	8004902 <UART_SetConfig+0x12e>
 80048e8:	d820      	bhi.n	800492c <UART_SetConfig+0x158>
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d002      	beq.n	80048f4 <UART_SetConfig+0x120>
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d00e      	beq.n	8004910 <UART_SetConfig+0x13c>
 80048f2:	e01b      	b.n	800492c <UART_SetConfig+0x158>
 80048f4:	231b      	movs	r3, #27
 80048f6:	2218      	movs	r2, #24
 80048f8:	189b      	adds	r3, r3, r2
 80048fa:	19db      	adds	r3, r3, r7
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	e07d      	b.n	80049fe <UART_SetConfig+0x22a>
 8004902:	231b      	movs	r3, #27
 8004904:	2218      	movs	r2, #24
 8004906:	189b      	adds	r3, r3, r2
 8004908:	19db      	adds	r3, r3, r7
 800490a:	2202      	movs	r2, #2
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	e076      	b.n	80049fe <UART_SetConfig+0x22a>
 8004910:	231b      	movs	r3, #27
 8004912:	2218      	movs	r2, #24
 8004914:	189b      	adds	r3, r3, r2
 8004916:	19db      	adds	r3, r3, r7
 8004918:	2204      	movs	r2, #4
 800491a:	701a      	strb	r2, [r3, #0]
 800491c:	e06f      	b.n	80049fe <UART_SetConfig+0x22a>
 800491e:	231b      	movs	r3, #27
 8004920:	2218      	movs	r2, #24
 8004922:	189b      	adds	r3, r3, r2
 8004924:	19db      	adds	r3, r3, r7
 8004926:	2208      	movs	r2, #8
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	e068      	b.n	80049fe <UART_SetConfig+0x22a>
 800492c:	231b      	movs	r3, #27
 800492e:	2218      	movs	r2, #24
 8004930:	189b      	adds	r3, r3, r2
 8004932:	19db      	adds	r3, r3, r7
 8004934:	2210      	movs	r2, #16
 8004936:	701a      	strb	r2, [r3, #0]
 8004938:	e061      	b.n	80049fe <UART_SetConfig+0x22a>
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b30 <UART_SetConfig+0x35c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d106      	bne.n	8004952 <UART_SetConfig+0x17e>
 8004944:	231b      	movs	r3, #27
 8004946:	2218      	movs	r2, #24
 8004948:	189b      	adds	r3, r3, r2
 800494a:	19db      	adds	r3, r3, r7
 800494c:	2200      	movs	r2, #0
 800494e:	701a      	strb	r2, [r3, #0]
 8004950:	e055      	b.n	80049fe <UART_SetConfig+0x22a>
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a77      	ldr	r2, [pc, #476]	@ (8004b34 <UART_SetConfig+0x360>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d106      	bne.n	800496a <UART_SetConfig+0x196>
 800495c:	231b      	movs	r3, #27
 800495e:	2218      	movs	r2, #24
 8004960:	189b      	adds	r3, r3, r2
 8004962:	19db      	adds	r3, r3, r7
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]
 8004968:	e049      	b.n	80049fe <UART_SetConfig+0x22a>
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a6b      	ldr	r2, [pc, #428]	@ (8004b1c <UART_SetConfig+0x348>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d13e      	bne.n	80049f2 <UART_SetConfig+0x21e>
 8004974:	4b6c      	ldr	r3, [pc, #432]	@ (8004b28 <UART_SetConfig+0x354>)
 8004976:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004978:	23c0      	movs	r3, #192	@ 0xc0
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	4013      	ands	r3, r2
 800497e:	22c0      	movs	r2, #192	@ 0xc0
 8004980:	0112      	lsls	r2, r2, #4
 8004982:	4293      	cmp	r3, r2
 8004984:	d027      	beq.n	80049d6 <UART_SetConfig+0x202>
 8004986:	22c0      	movs	r2, #192	@ 0xc0
 8004988:	0112      	lsls	r2, r2, #4
 800498a:	4293      	cmp	r3, r2
 800498c:	d82a      	bhi.n	80049e4 <UART_SetConfig+0x210>
 800498e:	2280      	movs	r2, #128	@ 0x80
 8004990:	0112      	lsls	r2, r2, #4
 8004992:	4293      	cmp	r3, r2
 8004994:	d011      	beq.n	80049ba <UART_SetConfig+0x1e6>
 8004996:	2280      	movs	r2, #128	@ 0x80
 8004998:	0112      	lsls	r2, r2, #4
 800499a:	4293      	cmp	r3, r2
 800499c:	d822      	bhi.n	80049e4 <UART_SetConfig+0x210>
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <UART_SetConfig+0x1d8>
 80049a2:	2280      	movs	r2, #128	@ 0x80
 80049a4:	00d2      	lsls	r2, r2, #3
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d00e      	beq.n	80049c8 <UART_SetConfig+0x1f4>
 80049aa:	e01b      	b.n	80049e4 <UART_SetConfig+0x210>
 80049ac:	231b      	movs	r3, #27
 80049ae:	2218      	movs	r2, #24
 80049b0:	189b      	adds	r3, r3, r2
 80049b2:	19db      	adds	r3, r3, r7
 80049b4:	2200      	movs	r2, #0
 80049b6:	701a      	strb	r2, [r3, #0]
 80049b8:	e021      	b.n	80049fe <UART_SetConfig+0x22a>
 80049ba:	231b      	movs	r3, #27
 80049bc:	2218      	movs	r2, #24
 80049be:	189b      	adds	r3, r3, r2
 80049c0:	19db      	adds	r3, r3, r7
 80049c2:	2202      	movs	r2, #2
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	e01a      	b.n	80049fe <UART_SetConfig+0x22a>
 80049c8:	231b      	movs	r3, #27
 80049ca:	2218      	movs	r2, #24
 80049cc:	189b      	adds	r3, r3, r2
 80049ce:	19db      	adds	r3, r3, r7
 80049d0:	2204      	movs	r2, #4
 80049d2:	701a      	strb	r2, [r3, #0]
 80049d4:	e013      	b.n	80049fe <UART_SetConfig+0x22a>
 80049d6:	231b      	movs	r3, #27
 80049d8:	2218      	movs	r2, #24
 80049da:	189b      	adds	r3, r3, r2
 80049dc:	19db      	adds	r3, r3, r7
 80049de:	2208      	movs	r2, #8
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	e00c      	b.n	80049fe <UART_SetConfig+0x22a>
 80049e4:	231b      	movs	r3, #27
 80049e6:	2218      	movs	r2, #24
 80049e8:	189b      	adds	r3, r3, r2
 80049ea:	19db      	adds	r3, r3, r7
 80049ec:	2210      	movs	r2, #16
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	e005      	b.n	80049fe <UART_SetConfig+0x22a>
 80049f2:	231b      	movs	r3, #27
 80049f4:	2218      	movs	r2, #24
 80049f6:	189b      	adds	r3, r3, r2
 80049f8:	19db      	adds	r3, r3, r7
 80049fa:	2210      	movs	r2, #16
 80049fc:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a46      	ldr	r2, [pc, #280]	@ (8004b1c <UART_SetConfig+0x348>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d000      	beq.n	8004a0a <UART_SetConfig+0x236>
 8004a08:	e09a      	b.n	8004b40 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a0a:	231b      	movs	r3, #27
 8004a0c:	2218      	movs	r2, #24
 8004a0e:	189b      	adds	r3, r3, r2
 8004a10:	19db      	adds	r3, r3, r7
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d01d      	beq.n	8004a54 <UART_SetConfig+0x280>
 8004a18:	dc20      	bgt.n	8004a5c <UART_SetConfig+0x288>
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d015      	beq.n	8004a4a <UART_SetConfig+0x276>
 8004a1e:	dc1d      	bgt.n	8004a5c <UART_SetConfig+0x288>
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <UART_SetConfig+0x256>
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d005      	beq.n	8004a34 <UART_SetConfig+0x260>
 8004a28:	e018      	b.n	8004a5c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a2a:	f7ff f86b 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 8004a2e:	0003      	movs	r3, r0
 8004a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a32:	e01c      	b.n	8004a6e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a34:	4b3c      	ldr	r3, [pc, #240]	@ (8004b28 <UART_SetConfig+0x354>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2210      	movs	r2, #16
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d002      	beq.n	8004a44 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004a3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b38 <UART_SetConfig+0x364>)
 8004a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a42:	e014      	b.n	8004a6e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004a44:	4b3d      	ldr	r3, [pc, #244]	@ (8004b3c <UART_SetConfig+0x368>)
 8004a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a48:	e011      	b.n	8004a6e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a4a:	f7fe ffcb 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a52:	e00c      	b.n	8004a6e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a54:	2380      	movs	r3, #128	@ 0x80
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004a5a:	e008      	b.n	8004a6e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004a60:	231a      	movs	r3, #26
 8004a62:	2218      	movs	r2, #24
 8004a64:	189b      	adds	r3, r3, r2
 8004a66:	19db      	adds	r3, r3, r7
 8004a68:	2201      	movs	r2, #1
 8004a6a:	701a      	strb	r2, [r3, #0]
        break;
 8004a6c:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d100      	bne.n	8004a76 <UART_SetConfig+0x2a2>
 8004a74:	e133      	b.n	8004cde <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	0013      	movs	r3, r2
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	189b      	adds	r3, r3, r2
 8004a80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d305      	bcc.n	8004a92 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004a8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d906      	bls.n	8004aa0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004a92:	231a      	movs	r3, #26
 8004a94:	2218      	movs	r2, #24
 8004a96:	189b      	adds	r3, r3, r2
 8004a98:	19db      	adds	r3, r3, r7
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	701a      	strb	r2, [r3, #0]
 8004a9e:	e11e      	b.n	8004cde <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	6939      	ldr	r1, [r7, #16]
 8004aaa:	697a      	ldr	r2, [r7, #20]
 8004aac:	000b      	movs	r3, r1
 8004aae:	0e1b      	lsrs	r3, r3, #24
 8004ab0:	0010      	movs	r0, r2
 8004ab2:	0205      	lsls	r5, r0, #8
 8004ab4:	431d      	orrs	r5, r3
 8004ab6:	000b      	movs	r3, r1
 8004ab8:	021c      	lsls	r4, r3, #8
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	085b      	lsrs	r3, r3, #1
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	68b8      	ldr	r0, [r7, #8]
 8004ac8:	68f9      	ldr	r1, [r7, #12]
 8004aca:	1900      	adds	r0, r0, r4
 8004acc:	4169      	adcs	r1, r5
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	607b      	str	r3, [r7, #4]
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f7fb fbb2 	bl	8000244 <__aeabi_uldivmod>
 8004ae0:	0002      	movs	r2, r0
 8004ae2:	000b      	movs	r3, r1
 8004ae4:	0013      	movs	r3, r2
 8004ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ae8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004aea:	23c0      	movs	r3, #192	@ 0xc0
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d309      	bcc.n	8004b06 <UART_SetConfig+0x332>
 8004af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004af4:	2380      	movs	r3, #128	@ 0x80
 8004af6:	035b      	lsls	r3, r3, #13
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d204      	bcs.n	8004b06 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b02:	60da      	str	r2, [r3, #12]
 8004b04:	e0eb      	b.n	8004cde <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004b06:	231a      	movs	r3, #26
 8004b08:	2218      	movs	r2, #24
 8004b0a:	189b      	adds	r3, r3, r2
 8004b0c:	19db      	adds	r3, r3, r7
 8004b0e:	2201      	movs	r2, #1
 8004b10:	701a      	strb	r2, [r3, #0]
 8004b12:	e0e4      	b.n	8004cde <UART_SetConfig+0x50a>
 8004b14:	efff69f3 	.word	0xefff69f3
 8004b18:	ffffcfff 	.word	0xffffcfff
 8004b1c:	40004800 	.word	0x40004800
 8004b20:	fffff4ff 	.word	0xfffff4ff
 8004b24:	40013800 	.word	0x40013800
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	40004400 	.word	0x40004400
 8004b30:	40004c00 	.word	0x40004c00
 8004b34:	40005000 	.word	0x40005000
 8004b38:	003d0900 	.word	0x003d0900
 8004b3c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	2380      	movs	r3, #128	@ 0x80
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d000      	beq.n	8004b4e <UART_SetConfig+0x37a>
 8004b4c:	e070      	b.n	8004c30 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004b4e:	231b      	movs	r3, #27
 8004b50:	2218      	movs	r2, #24
 8004b52:	189b      	adds	r3, r3, r2
 8004b54:	19db      	adds	r3, r3, r7
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2b08      	cmp	r3, #8
 8004b5a:	d822      	bhi.n	8004ba2 <UART_SetConfig+0x3ce>
 8004b5c:	009a      	lsls	r2, r3, #2
 8004b5e:	4b67      	ldr	r3, [pc, #412]	@ (8004cfc <UART_SetConfig+0x528>)
 8004b60:	18d3      	adds	r3, r2, r3
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b66:	f7fe ffcd 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 8004b6a:	0003      	movs	r3, r0
 8004b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b6e:	e021      	b.n	8004bb4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b70:	f7fe ffde 	bl	8003b30 <HAL_RCC_GetPCLK2Freq>
 8004b74:	0003      	movs	r3, r0
 8004b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b78:	e01c      	b.n	8004bb4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b7a:	4b61      	ldr	r3, [pc, #388]	@ (8004d00 <UART_SetConfig+0x52c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2210      	movs	r2, #16
 8004b80:	4013      	ands	r3, r2
 8004b82:	d002      	beq.n	8004b8a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004b84:	4b5f      	ldr	r3, [pc, #380]	@ (8004d04 <UART_SetConfig+0x530>)
 8004b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b88:	e014      	b.n	8004bb4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8004d08 <UART_SetConfig+0x534>)
 8004b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b8e:	e011      	b.n	8004bb4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b90:	f7fe ff28 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8004b94:	0003      	movs	r3, r0
 8004b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004b98:	e00c      	b.n	8004bb4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b9a:	2380      	movs	r3, #128	@ 0x80
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004ba0:	e008      	b.n	8004bb4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004ba6:	231a      	movs	r3, #26
 8004ba8:	2218      	movs	r2, #24
 8004baa:	189b      	adds	r3, r3, r2
 8004bac:	19db      	adds	r3, r3, r7
 8004bae:	2201      	movs	r2, #1
 8004bb0:	701a      	strb	r2, [r3, #0]
        break;
 8004bb2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d100      	bne.n	8004bbc <UART_SetConfig+0x3e8>
 8004bba:	e090      	b.n	8004cde <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004bbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bbe:	005a      	lsls	r2, r3, #1
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	18d2      	adds	r2, r2, r3
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	0019      	movs	r1, r3
 8004bce:	0010      	movs	r0, r2
 8004bd0:	f7fb faac 	bl	800012c <__udivsi3>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bda:	2b0f      	cmp	r3, #15
 8004bdc:	d921      	bls.n	8004c22 <UART_SetConfig+0x44e>
 8004bde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004be0:	2380      	movs	r3, #128	@ 0x80
 8004be2:	025b      	lsls	r3, r3, #9
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d21c      	bcs.n	8004c22 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	200e      	movs	r0, #14
 8004bee:	2418      	movs	r4, #24
 8004bf0:	1903      	adds	r3, r0, r4
 8004bf2:	19db      	adds	r3, r3, r7
 8004bf4:	210f      	movs	r1, #15
 8004bf6:	438a      	bics	r2, r1
 8004bf8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfc:	085b      	lsrs	r3, r3, #1
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	2207      	movs	r2, #7
 8004c02:	4013      	ands	r3, r2
 8004c04:	b299      	uxth	r1, r3
 8004c06:	1903      	adds	r3, r0, r4
 8004c08:	19db      	adds	r3, r3, r7
 8004c0a:	1902      	adds	r2, r0, r4
 8004c0c:	19d2      	adds	r2, r2, r7
 8004c0e:	8812      	ldrh	r2, [r2, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	1902      	adds	r2, r0, r4
 8004c1a:	19d2      	adds	r2, r2, r7
 8004c1c:	8812      	ldrh	r2, [r2, #0]
 8004c1e:	60da      	str	r2, [r3, #12]
 8004c20:	e05d      	b.n	8004cde <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004c22:	231a      	movs	r3, #26
 8004c24:	2218      	movs	r2, #24
 8004c26:	189b      	adds	r3, r3, r2
 8004c28:	19db      	adds	r3, r3, r7
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	e056      	b.n	8004cde <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c30:	231b      	movs	r3, #27
 8004c32:	2218      	movs	r2, #24
 8004c34:	189b      	adds	r3, r3, r2
 8004c36:	19db      	adds	r3, r3, r7
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	2b08      	cmp	r3, #8
 8004c3c:	d822      	bhi.n	8004c84 <UART_SetConfig+0x4b0>
 8004c3e:	009a      	lsls	r2, r3, #2
 8004c40:	4b32      	ldr	r3, [pc, #200]	@ (8004d0c <UART_SetConfig+0x538>)
 8004c42:	18d3      	adds	r3, r2, r3
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c48:	f7fe ff5c 	bl	8003b04 <HAL_RCC_GetPCLK1Freq>
 8004c4c:	0003      	movs	r3, r0
 8004c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c50:	e021      	b.n	8004c96 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c52:	f7fe ff6d 	bl	8003b30 <HAL_RCC_GetPCLK2Freq>
 8004c56:	0003      	movs	r3, r0
 8004c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c5a:	e01c      	b.n	8004c96 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c5c:	4b28      	ldr	r3, [pc, #160]	@ (8004d00 <UART_SetConfig+0x52c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2210      	movs	r2, #16
 8004c62:	4013      	ands	r3, r2
 8004c64:	d002      	beq.n	8004c6c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004c66:	4b27      	ldr	r3, [pc, #156]	@ (8004d04 <UART_SetConfig+0x530>)
 8004c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c6a:	e014      	b.n	8004c96 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004c6c:	4b26      	ldr	r3, [pc, #152]	@ (8004d08 <UART_SetConfig+0x534>)
 8004c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c70:	e011      	b.n	8004c96 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c72:	f7fe feb7 	bl	80039e4 <HAL_RCC_GetSysClockFreq>
 8004c76:	0003      	movs	r3, r0
 8004c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c7a:	e00c      	b.n	8004c96 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7c:	2380      	movs	r3, #128	@ 0x80
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004c82:	e008      	b.n	8004c96 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004c88:	231a      	movs	r3, #26
 8004c8a:	2218      	movs	r2, #24
 8004c8c:	189b      	adds	r3, r3, r2
 8004c8e:	19db      	adds	r3, r3, r7
 8004c90:	2201      	movs	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]
        break;
 8004c94:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d020      	beq.n	8004cde <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	085a      	lsrs	r2, r3, #1
 8004ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca4:	18d2      	adds	r2, r2, r3
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	0019      	movs	r1, r3
 8004cac:	0010      	movs	r0, r2
 8004cae:	f7fb fa3d 	bl	800012c <__udivsi3>
 8004cb2:	0003      	movs	r3, r0
 8004cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb8:	2b0f      	cmp	r3, #15
 8004cba:	d90a      	bls.n	8004cd2 <UART_SetConfig+0x4fe>
 8004cbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cbe:	2380      	movs	r3, #128	@ 0x80
 8004cc0:	025b      	lsls	r3, r3, #9
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d205      	bcs.n	8004cd2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	60da      	str	r2, [r3, #12]
 8004cd0:	e005      	b.n	8004cde <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd2:	231a      	movs	r3, #26
 8004cd4:	2218      	movs	r2, #24
 8004cd6:	189b      	adds	r3, r3, r2
 8004cd8:	19db      	adds	r3, r3, r7
 8004cda:	2201      	movs	r2, #1
 8004cdc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004cea:	231a      	movs	r3, #26
 8004cec:	2218      	movs	r2, #24
 8004cee:	189b      	adds	r3, r3, r2
 8004cf0:	19db      	adds	r3, r3, r7
 8004cf2:	781b      	ldrb	r3, [r3, #0]
}
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b00e      	add	sp, #56	@ 0x38
 8004cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8004cfc:	0800612c 	.word	0x0800612c
 8004d00:	40021000 	.word	0x40021000
 8004d04:	003d0900 	.word	0x003d0900
 8004d08:	00f42400 	.word	0x00f42400
 8004d0c:	08006150 	.word	0x08006150

08004d10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	2208      	movs	r2, #8
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d00b      	beq.n	8004d3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a4a      	ldr	r2, [pc, #296]	@ (8004e54 <UART_AdvFeatureConfig+0x144>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	0019      	movs	r1, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3e:	2201      	movs	r2, #1
 8004d40:	4013      	ands	r3, r2
 8004d42:	d00b      	beq.n	8004d5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4a43      	ldr	r2, [pc, #268]	@ (8004e58 <UART_AdvFeatureConfig+0x148>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	0019      	movs	r1, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	2202      	movs	r2, #2
 8004d62:	4013      	ands	r3, r2
 8004d64:	d00b      	beq.n	8004d7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4a3b      	ldr	r2, [pc, #236]	@ (8004e5c <UART_AdvFeatureConfig+0x14c>)
 8004d6e:	4013      	ands	r3, r2
 8004d70:	0019      	movs	r1, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d82:	2204      	movs	r2, #4
 8004d84:	4013      	ands	r3, r2
 8004d86:	d00b      	beq.n	8004da0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	4a34      	ldr	r2, [pc, #208]	@ (8004e60 <UART_AdvFeatureConfig+0x150>)
 8004d90:	4013      	ands	r3, r2
 8004d92:	0019      	movs	r1, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da4:	2210      	movs	r2, #16
 8004da6:	4013      	ands	r3, r2
 8004da8:	d00b      	beq.n	8004dc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4a2c      	ldr	r2, [pc, #176]	@ (8004e64 <UART_AdvFeatureConfig+0x154>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	0019      	movs	r1, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc6:	2220      	movs	r2, #32
 8004dc8:	4013      	ands	r3, r2
 8004dca:	d00b      	beq.n	8004de4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	4a25      	ldr	r2, [pc, #148]	@ (8004e68 <UART_AdvFeatureConfig+0x158>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	0019      	movs	r1, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de8:	2240      	movs	r2, #64	@ 0x40
 8004dea:	4013      	ands	r3, r2
 8004dec:	d01d      	beq.n	8004e2a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e6c <UART_AdvFeatureConfig+0x15c>)
 8004df6:	4013      	ands	r3, r2
 8004df8:	0019      	movs	r1, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e0a:	2380      	movs	r3, #128	@ 0x80
 8004e0c:	035b      	lsls	r3, r3, #13
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d10b      	bne.n	8004e2a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4a15      	ldr	r2, [pc, #84]	@ (8004e70 <UART_AdvFeatureConfig+0x160>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	0019      	movs	r1, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2e:	2280      	movs	r2, #128	@ 0x80
 8004e30:	4013      	ands	r3, r2
 8004e32:	d00b      	beq.n	8004e4c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8004e74 <UART_AdvFeatureConfig+0x164>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	0019      	movs	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	605a      	str	r2, [r3, #4]
  }
}
 8004e4c:	46c0      	nop			@ (mov r8, r8)
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	b002      	add	sp, #8
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	ffff7fff 	.word	0xffff7fff
 8004e58:	fffdffff 	.word	0xfffdffff
 8004e5c:	fffeffff 	.word	0xfffeffff
 8004e60:	fffbffff 	.word	0xfffbffff
 8004e64:	ffffefff 	.word	0xffffefff
 8004e68:	ffffdfff 	.word	0xffffdfff
 8004e6c:	ffefffff 	.word	0xffefffff
 8004e70:	ff9fffff 	.word	0xff9fffff
 8004e74:	fff7ffff 	.word	0xfff7ffff

08004e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b092      	sub	sp, #72	@ 0x48
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2284      	movs	r2, #132	@ 0x84
 8004e84:	2100      	movs	r1, #0
 8004e86:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e88:	f7fc fd16 	bl	80018b8 <HAL_GetTick>
 8004e8c:	0003      	movs	r3, r0
 8004e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2208      	movs	r2, #8
 8004e98:	4013      	ands	r3, r2
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d12c      	bne.n	8004ef8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea0:	2280      	movs	r2, #128	@ 0x80
 8004ea2:	0391      	lsls	r1, r2, #14
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	4a46      	ldr	r2, [pc, #280]	@ (8004fc0 <UART_CheckIdleState+0x148>)
 8004ea8:	9200      	str	r2, [sp, #0]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f000 f88c 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 8004eb0:	1e03      	subs	r3, r0, #0
 8004eb2:	d021      	beq.n	8004ef8 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eb4:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec4:	f383 8810 	msr	PRIMASK, r3
}
 8004ec8:	46c0      	nop			@ (mov r8, r8)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2180      	movs	r1, #128	@ 0x80
 8004ed6:	438a      	bics	r2, r1
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee0:	f383 8810 	msr	PRIMASK, r3
}
 8004ee4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2278      	movs	r2, #120	@ 0x78
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e05f      	b.n	8004fb8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2204      	movs	r2, #4
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b04      	cmp	r3, #4
 8004f04:	d146      	bne.n	8004f94 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f08:	2280      	movs	r2, #128	@ 0x80
 8004f0a:	03d1      	lsls	r1, r2, #15
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	4a2c      	ldr	r2, [pc, #176]	@ (8004fc0 <UART_CheckIdleState+0x148>)
 8004f10:	9200      	str	r2, [sp, #0]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f000 f858 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 8004f18:	1e03      	subs	r3, r0, #0
 8004f1a:	d03b      	beq.n	8004f94 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004f20:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f22:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f24:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f26:	2301      	movs	r3, #1
 8004f28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f383 8810 	msr	PRIMASK, r3
}
 8004f30:	46c0      	nop			@ (mov r8, r8)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4921      	ldr	r1, [pc, #132]	@ (8004fc4 <UART_CheckIdleState+0x14c>)
 8004f3e:	400a      	ands	r2, r1
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f383 8810 	msr	PRIMASK, r3
}
 8004f4c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f52:	61bb      	str	r3, [r7, #24]
  return(result);
 8004f54:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f56:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f58:	2301      	movs	r3, #1
 8004f5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f383 8810 	msr	PRIMASK, r3
}
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689a      	ldr	r2, [r3, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2101      	movs	r1, #1
 8004f70:	438a      	bics	r2, r1
 8004f72:	609a      	str	r2, [r3, #8]
 8004f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	f383 8810 	msr	PRIMASK, r3
}
 8004f7e:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2280      	movs	r2, #128	@ 0x80
 8004f84:	2120      	movs	r1, #32
 8004f86:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2278      	movs	r2, #120	@ 0x78
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f90:	2303      	movs	r3, #3
 8004f92:	e011      	b.n	8004fb8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2220      	movs	r2, #32
 8004f98:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2280      	movs	r2, #128	@ 0x80
 8004f9e:	2120      	movs	r1, #32
 8004fa0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2278      	movs	r2, #120	@ 0x78
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	0018      	movs	r0, r3
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	b010      	add	sp, #64	@ 0x40
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	01ffffff 	.word	0x01ffffff
 8004fc4:	fffffedf 	.word	0xfffffedf

08004fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	1dfb      	adds	r3, r7, #7
 8004fd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd8:	e051      	b.n	800507e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	d04e      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe0:	f7fc fc6a 	bl	80018b8 <HAL_GetTick>
 8004fe4:	0002      	movs	r2, r0
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d302      	bcc.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e051      	b.n	800509e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2204      	movs	r2, #4
 8005002:	4013      	ands	r3, r2
 8005004:	d03b      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0xb6>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b80      	cmp	r3, #128	@ 0x80
 800500a:	d038      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0xb6>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b40      	cmp	r3, #64	@ 0x40
 8005010:	d035      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	2208      	movs	r2, #8
 800501a:	4013      	ands	r3, r2
 800501c:	2b08      	cmp	r3, #8
 800501e:	d111      	bne.n	8005044 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2208      	movs	r2, #8
 8005026:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	0018      	movs	r0, r3
 800502c:	f000 f83c 	bl	80050a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2284      	movs	r2, #132	@ 0x84
 8005034:	2108      	movs	r1, #8
 8005036:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2278      	movs	r2, #120	@ 0x78
 800503c:	2100      	movs	r1, #0
 800503e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e02c      	b.n	800509e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	69da      	ldr	r2, [r3, #28]
 800504a:	2380      	movs	r3, #128	@ 0x80
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	401a      	ands	r2, r3
 8005050:	2380      	movs	r3, #128	@ 0x80
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	429a      	cmp	r2, r3
 8005056:	d112      	bne.n	800507e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2280      	movs	r2, #128	@ 0x80
 800505e:	0112      	lsls	r2, r2, #4
 8005060:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	0018      	movs	r0, r3
 8005066:	f000 f81f 	bl	80050a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2284      	movs	r2, #132	@ 0x84
 800506e:	2120      	movs	r1, #32
 8005070:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2278      	movs	r2, #120	@ 0x78
 8005076:	2100      	movs	r1, #0
 8005078:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e00f      	b.n	800509e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	4013      	ands	r3, r2
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	425a      	negs	r2, r3
 800508e:	4153      	adcs	r3, r2
 8005090:	b2db      	uxtb	r3, r3
 8005092:	001a      	movs	r2, r3
 8005094:	1dfb      	adds	r3, r7, #7
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d09e      	beq.n	8004fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	0018      	movs	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	b004      	add	sp, #16
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08e      	sub	sp, #56	@ 0x38
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b0:	f3ef 8310 	mrs	r3, PRIMASK
 80050b4:	617b      	str	r3, [r7, #20]
  return(result);
 80050b6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ba:	2301      	movs	r3, #1
 80050bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	f383 8810 	msr	PRIMASK, r3
}
 80050c4:	46c0      	nop			@ (mov r8, r8)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4926      	ldr	r1, [pc, #152]	@ (800516c <UART_EndRxTransfer+0xc4>)
 80050d2:	400a      	ands	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	f383 8810 	msr	PRIMASK, r3
}
 80050e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050e2:	f3ef 8310 	mrs	r3, PRIMASK
 80050e6:	623b      	str	r3, [r7, #32]
  return(result);
 80050e8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80050ec:	2301      	movs	r3, #1
 80050ee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	f383 8810 	msr	PRIMASK, r3
}
 80050f6:	46c0      	nop			@ (mov r8, r8)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689a      	ldr	r2, [r3, #8]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2101      	movs	r1, #1
 8005104:	438a      	bics	r2, r1
 8005106:	609a      	str	r2, [r3, #8]
 8005108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800510a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800510c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510e:	f383 8810 	msr	PRIMASK, r3
}
 8005112:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005118:	2b01      	cmp	r3, #1
 800511a:	d118      	bne.n	800514e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800511c:	f3ef 8310 	mrs	r3, PRIMASK
 8005120:	60bb      	str	r3, [r7, #8]
  return(result);
 8005122:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005126:	2301      	movs	r3, #1
 8005128:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f383 8810 	msr	PRIMASK, r3
}
 8005130:	46c0      	nop			@ (mov r8, r8)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2110      	movs	r1, #16
 800513e:	438a      	bics	r2, r1
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005144:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f383 8810 	msr	PRIMASK, r3
}
 800514c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2280      	movs	r2, #128	@ 0x80
 8005152:	2120      	movs	r1, #32
 8005154:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005162:	46c0      	nop			@ (mov r8, r8)
 8005164:	46bd      	mov	sp, r7
 8005166:	b00e      	add	sp, #56	@ 0x38
 8005168:	bd80      	pop	{r7, pc}
 800516a:	46c0      	nop			@ (mov r8, r8)
 800516c:	fffffedf 	.word	0xfffffedf

08005170 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	603b      	str	r3, [r7, #0]
 800517c:	1dbb      	adds	r3, r7, #6
 800517e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	2280      	movs	r2, #128	@ 0x80
 8005184:	589b      	ldr	r3, [r3, r2]
 8005186:	2b20      	cmp	r3, #32
 8005188:	d000      	beq.n	800518c <HAL_UARTEx_ReceiveToIdle+0x1c>
 800518a:	e109      	b.n	80053a0 <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_UARTEx_ReceiveToIdle+0x2a>
 8005192:	1dbb      	adds	r3, r7, #6
 8005194:	881b      	ldrh	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e101      	b.n	80053a2 <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	2380      	movs	r3, #128	@ 0x80
 80051a4:	015b      	lsls	r3, r3, #5
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d109      	bne.n	80051be <HAL_UARTEx_ReceiveToIdle+0x4e>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d105      	bne.n	80051be <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2201      	movs	r2, #1
 80051b6:	4013      	ands	r3, r2
 80051b8:	d001      	beq.n	80051be <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 80051ba:	2301      	movs	r3, #1
 80051bc:	e0f1      	b.n	80053a2 <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2284      	movs	r2, #132	@ 0x84
 80051c2:	2100      	movs	r1, #0
 80051c4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2280      	movs	r2, #128	@ 0x80
 80051ca:	2122      	movs	r1, #34	@ 0x22
 80051cc:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051da:	f7fc fb6d 	bl	80018b8 <HAL_GetTick>
 80051de:	0003      	movs	r3, r0
 80051e0:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	1dba      	adds	r2, r7, #6
 80051e6:	2158      	movs	r1, #88	@ 0x58
 80051e8:	8812      	ldrh	r2, [r2, #0]
 80051ea:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	1dba      	adds	r2, r7, #6
 80051f0:	215a      	movs	r1, #90	@ 0x5a
 80051f2:	8812      	ldrh	r2, [r2, #0]
 80051f4:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689a      	ldr	r2, [r3, #8]
 80051fa:	2380      	movs	r3, #128	@ 0x80
 80051fc:	015b      	lsls	r3, r3, #5
 80051fe:	429a      	cmp	r2, r3
 8005200:	d10d      	bne.n	800521e <HAL_UARTEx_ReceiveToIdle+0xae>
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d104      	bne.n	8005214 <HAL_UARTEx_ReceiveToIdle+0xa4>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	225c      	movs	r2, #92	@ 0x5c
 800520e:	4967      	ldr	r1, [pc, #412]	@ (80053ac <HAL_UARTEx_ReceiveToIdle+0x23c>)
 8005210:	5299      	strh	r1, [r3, r2]
 8005212:	e02e      	b.n	8005272 <HAL_UARTEx_ReceiveToIdle+0x102>
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	225c      	movs	r2, #92	@ 0x5c
 8005218:	21ff      	movs	r1, #255	@ 0xff
 800521a:	5299      	strh	r1, [r3, r2]
 800521c:	e029      	b.n	8005272 <HAL_UARTEx_ReceiveToIdle+0x102>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10d      	bne.n	8005242 <HAL_UARTEx_ReceiveToIdle+0xd2>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d104      	bne.n	8005238 <HAL_UARTEx_ReceiveToIdle+0xc8>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	225c      	movs	r2, #92	@ 0x5c
 8005232:	21ff      	movs	r1, #255	@ 0xff
 8005234:	5299      	strh	r1, [r3, r2]
 8005236:	e01c      	b.n	8005272 <HAL_UARTEx_ReceiveToIdle+0x102>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	225c      	movs	r2, #92	@ 0x5c
 800523c:	217f      	movs	r1, #127	@ 0x7f
 800523e:	5299      	strh	r1, [r3, r2]
 8005240:	e017      	b.n	8005272 <HAL_UARTEx_ReceiveToIdle+0x102>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689a      	ldr	r2, [r3, #8]
 8005246:	2380      	movs	r3, #128	@ 0x80
 8005248:	055b      	lsls	r3, r3, #21
 800524a:	429a      	cmp	r2, r3
 800524c:	d10d      	bne.n	800526a <HAL_UARTEx_ReceiveToIdle+0xfa>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d104      	bne.n	8005260 <HAL_UARTEx_ReceiveToIdle+0xf0>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	225c      	movs	r2, #92	@ 0x5c
 800525a:	217f      	movs	r1, #127	@ 0x7f
 800525c:	5299      	strh	r1, [r3, r2]
 800525e:	e008      	b.n	8005272 <HAL_UARTEx_ReceiveToIdle+0x102>
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	225c      	movs	r2, #92	@ 0x5c
 8005264:	213f      	movs	r1, #63	@ 0x3f
 8005266:	5299      	strh	r1, [r3, r2]
 8005268:	e003      	b.n	8005272 <HAL_UARTEx_ReceiveToIdle+0x102>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	225c      	movs	r2, #92	@ 0x5c
 800526e:	2100      	movs	r1, #0
 8005270:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005272:	2312      	movs	r3, #18
 8005274:	18fb      	adds	r3, r7, r3
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	215c      	movs	r1, #92	@ 0x5c
 800527a:	5a52      	ldrh	r2, [r2, r1]
 800527c:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689a      	ldr	r2, [r3, #8]
 8005282:	2380      	movs	r3, #128	@ 0x80
 8005284:	015b      	lsls	r3, r3, #5
 8005286:	429a      	cmp	r2, r3
 8005288:	d108      	bne.n	800529c <HAL_UARTEx_ReceiveToIdle+0x12c>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e003      	b.n	80052a4 <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80052aa:	e062      	b.n	8005372 <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69db      	ldr	r3, [r3, #28]
 80052b2:	2210      	movs	r2, #16
 80052b4:	4013      	ands	r3, r2
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d110      	bne.n	80052dc <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2210      	movs	r2, #16
 80052c0:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d008      	beq.n	80052dc <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2202      	movs	r2, #2
 80052ce:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2280      	movs	r2, #128	@ 0x80
 80052d4:	2120      	movs	r1, #32
 80052d6:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e062      	b.n	80053a2 <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	2220      	movs	r2, #32
 80052e4:	4013      	ands	r3, r2
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d12f      	bne.n	800534a <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10e      	bne.n	800530e <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	2212      	movs	r2, #18
 80052fa:	18ba      	adds	r2, r7, r2
 80052fc:	8812      	ldrh	r2, [r2, #0]
 80052fe:	4013      	ands	r3, r2
 8005300:	b29a      	uxth	r2, r3
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	3302      	adds	r3, #2
 800530a:	61bb      	str	r3, [r7, #24]
 800530c:	e00e      	b.n	800532c <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2212      	movs	r2, #18
 8005318:	18ba      	adds	r2, r7, r2
 800531a:	8812      	ldrh	r2, [r2, #0]
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	4013      	ands	r3, r2
 8005320:	b2da      	uxtb	r2, r3
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3301      	adds	r3, #1
 800532a:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	881b      	ldrh	r3, [r3, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	225a      	movs	r2, #90	@ 0x5a
 800533c:	5a9b      	ldrh	r3, [r3, r2]
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b299      	uxth	r1, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	225a      	movs	r2, #90	@ 0x5a
 8005348:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800534a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534c:	3301      	adds	r3, #1
 800534e:	d010      	beq.n	8005372 <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005350:	f7fc fab2 	bl	80018b8 <HAL_GetTick>
 8005354:	0002      	movs	r2, r0
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800535c:	429a      	cmp	r2, r3
 800535e:	d302      	bcc.n	8005366 <HAL_UARTEx_ReceiveToIdle+0x1f6>
 8005360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005362:	2b00      	cmp	r3, #0
 8005364:	d105      	bne.n	8005372 <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2280      	movs	r2, #128	@ 0x80
 800536a:	2120      	movs	r1, #32
 800536c:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800536e:	2303      	movs	r3, #3
 8005370:	e017      	b.n	80053a2 <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	225a      	movs	r2, #90	@ 0x5a
 8005376:	5a9b      	ldrh	r3, [r3, r2]
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d196      	bne.n	80052ac <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2258      	movs	r2, #88	@ 0x58
 8005382:	5a9a      	ldrh	r2, [r3, r2]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	215a      	movs	r1, #90	@ 0x5a
 8005388:	5a5b      	ldrh	r3, [r3, r1]
 800538a:	b29b      	uxth	r3, r3
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	b29a      	uxth	r2, r3
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2280      	movs	r2, #128	@ 0x80
 8005398:	2120      	movs	r1, #32
 800539a:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	e000      	b.n	80053a2 <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 80053a0:	2302      	movs	r3, #2
  }
}
 80053a2:	0018      	movs	r0, r3
 80053a4:	46bd      	mov	sp, r7
 80053a6:	b008      	add	sp, #32
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	46c0      	nop			@ (mov r8, r8)
 80053ac:	000001ff 	.word	0x000001ff

080053b0 <sniprintf>:
 80053b0:	b40c      	push	{r2, r3}
 80053b2:	b530      	push	{r4, r5, lr}
 80053b4:	4b18      	ldr	r3, [pc, #96]	@ (8005418 <sniprintf+0x68>)
 80053b6:	000c      	movs	r4, r1
 80053b8:	681d      	ldr	r5, [r3, #0]
 80053ba:	b09d      	sub	sp, #116	@ 0x74
 80053bc:	2900      	cmp	r1, #0
 80053be:	da08      	bge.n	80053d2 <sniprintf+0x22>
 80053c0:	238b      	movs	r3, #139	@ 0x8b
 80053c2:	2001      	movs	r0, #1
 80053c4:	602b      	str	r3, [r5, #0]
 80053c6:	4240      	negs	r0, r0
 80053c8:	b01d      	add	sp, #116	@ 0x74
 80053ca:	bc30      	pop	{r4, r5}
 80053cc:	bc08      	pop	{r3}
 80053ce:	b002      	add	sp, #8
 80053d0:	4718      	bx	r3
 80053d2:	2382      	movs	r3, #130	@ 0x82
 80053d4:	466a      	mov	r2, sp
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	8293      	strh	r3, [r2, #20]
 80053da:	2300      	movs	r3, #0
 80053dc:	9002      	str	r0, [sp, #8]
 80053de:	931b      	str	r3, [sp, #108]	@ 0x6c
 80053e0:	9006      	str	r0, [sp, #24]
 80053e2:	4299      	cmp	r1, r3
 80053e4:	d000      	beq.n	80053e8 <sniprintf+0x38>
 80053e6:	1e4b      	subs	r3, r1, #1
 80053e8:	9304      	str	r3, [sp, #16]
 80053ea:	9307      	str	r3, [sp, #28]
 80053ec:	2301      	movs	r3, #1
 80053ee:	466a      	mov	r2, sp
 80053f0:	425b      	negs	r3, r3
 80053f2:	82d3      	strh	r3, [r2, #22]
 80053f4:	0028      	movs	r0, r5
 80053f6:	ab21      	add	r3, sp, #132	@ 0x84
 80053f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80053fa:	a902      	add	r1, sp, #8
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	f000 f9f7 	bl	80057f0 <_svfiprintf_r>
 8005402:	1c43      	adds	r3, r0, #1
 8005404:	da01      	bge.n	800540a <sniprintf+0x5a>
 8005406:	238b      	movs	r3, #139	@ 0x8b
 8005408:	602b      	str	r3, [r5, #0]
 800540a:	2c00      	cmp	r4, #0
 800540c:	d0dc      	beq.n	80053c8 <sniprintf+0x18>
 800540e:	2200      	movs	r2, #0
 8005410:	9b02      	ldr	r3, [sp, #8]
 8005412:	701a      	strb	r2, [r3, #0]
 8005414:	e7d8      	b.n	80053c8 <sniprintf+0x18>
 8005416:	46c0      	nop			@ (mov r8, r8)
 8005418:	2000000c 	.word	0x2000000c

0800541c <_vsniprintf_r>:
 800541c:	b530      	push	{r4, r5, lr}
 800541e:	0005      	movs	r5, r0
 8005420:	0014      	movs	r4, r2
 8005422:	0008      	movs	r0, r1
 8005424:	001a      	movs	r2, r3
 8005426:	b09b      	sub	sp, #108	@ 0x6c
 8005428:	2c00      	cmp	r4, #0
 800542a:	da05      	bge.n	8005438 <_vsniprintf_r+0x1c>
 800542c:	238b      	movs	r3, #139	@ 0x8b
 800542e:	2001      	movs	r0, #1
 8005430:	602b      	str	r3, [r5, #0]
 8005432:	4240      	negs	r0, r0
 8005434:	b01b      	add	sp, #108	@ 0x6c
 8005436:	bd30      	pop	{r4, r5, pc}
 8005438:	2382      	movs	r3, #130	@ 0x82
 800543a:	4669      	mov	r1, sp
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	818b      	strh	r3, [r1, #12]
 8005440:	2100      	movs	r1, #0
 8005442:	9000      	str	r0, [sp, #0]
 8005444:	9119      	str	r1, [sp, #100]	@ 0x64
 8005446:	9004      	str	r0, [sp, #16]
 8005448:	428c      	cmp	r4, r1
 800544a:	d000      	beq.n	800544e <_vsniprintf_r+0x32>
 800544c:	1e61      	subs	r1, r4, #1
 800544e:	2301      	movs	r3, #1
 8005450:	9102      	str	r1, [sp, #8]
 8005452:	9105      	str	r1, [sp, #20]
 8005454:	4669      	mov	r1, sp
 8005456:	425b      	negs	r3, r3
 8005458:	81cb      	strh	r3, [r1, #14]
 800545a:	0028      	movs	r0, r5
 800545c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800545e:	f000 f9c7 	bl	80057f0 <_svfiprintf_r>
 8005462:	1c43      	adds	r3, r0, #1
 8005464:	da01      	bge.n	800546a <_vsniprintf_r+0x4e>
 8005466:	238b      	movs	r3, #139	@ 0x8b
 8005468:	602b      	str	r3, [r5, #0]
 800546a:	2c00      	cmp	r4, #0
 800546c:	d0e2      	beq.n	8005434 <_vsniprintf_r+0x18>
 800546e:	2200      	movs	r2, #0
 8005470:	9b00      	ldr	r3, [sp, #0]
 8005472:	701a      	strb	r2, [r3, #0]
 8005474:	e7de      	b.n	8005434 <_vsniprintf_r+0x18>
	...

08005478 <vsniprintf>:
 8005478:	b513      	push	{r0, r1, r4, lr}
 800547a:	4c04      	ldr	r4, [pc, #16]	@ (800548c <vsniprintf+0x14>)
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	0013      	movs	r3, r2
 8005480:	000a      	movs	r2, r1
 8005482:	0001      	movs	r1, r0
 8005484:	6820      	ldr	r0, [r4, #0]
 8005486:	f7ff ffc9 	bl	800541c <_vsniprintf_r>
 800548a:	bd16      	pop	{r1, r2, r4, pc}
 800548c:	2000000c 	.word	0x2000000c

08005490 <memset>:
 8005490:	0003      	movs	r3, r0
 8005492:	1882      	adds	r2, r0, r2
 8005494:	4293      	cmp	r3, r2
 8005496:	d100      	bne.n	800549a <memset+0xa>
 8005498:	4770      	bx	lr
 800549a:	7019      	strb	r1, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	e7f9      	b.n	8005494 <memset+0x4>

080054a0 <strstr>:
 80054a0:	780a      	ldrb	r2, [r1, #0]
 80054a2:	b530      	push	{r4, r5, lr}
 80054a4:	2a00      	cmp	r2, #0
 80054a6:	d10c      	bne.n	80054c2 <strstr+0x22>
 80054a8:	bd30      	pop	{r4, r5, pc}
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d108      	bne.n	80054c0 <strstr+0x20>
 80054ae:	2301      	movs	r3, #1
 80054b0:	5ccc      	ldrb	r4, [r1, r3]
 80054b2:	2c00      	cmp	r4, #0
 80054b4:	d0f8      	beq.n	80054a8 <strstr+0x8>
 80054b6:	5cc5      	ldrb	r5, [r0, r3]
 80054b8:	42a5      	cmp	r5, r4
 80054ba:	d101      	bne.n	80054c0 <strstr+0x20>
 80054bc:	3301      	adds	r3, #1
 80054be:	e7f7      	b.n	80054b0 <strstr+0x10>
 80054c0:	3001      	adds	r0, #1
 80054c2:	7803      	ldrb	r3, [r0, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1f0      	bne.n	80054aa <strstr+0xa>
 80054c8:	0018      	movs	r0, r3
 80054ca:	e7ed      	b.n	80054a8 <strstr+0x8>

080054cc <__errno>:
 80054cc:	4b01      	ldr	r3, [pc, #4]	@ (80054d4 <__errno+0x8>)
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	4770      	bx	lr
 80054d2:	46c0      	nop			@ (mov r8, r8)
 80054d4:	2000000c 	.word	0x2000000c

080054d8 <__libc_init_array>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	2600      	movs	r6, #0
 80054dc:	4c0c      	ldr	r4, [pc, #48]	@ (8005510 <__libc_init_array+0x38>)
 80054de:	4d0d      	ldr	r5, [pc, #52]	@ (8005514 <__libc_init_array+0x3c>)
 80054e0:	1b64      	subs	r4, r4, r5
 80054e2:	10a4      	asrs	r4, r4, #2
 80054e4:	42a6      	cmp	r6, r4
 80054e6:	d109      	bne.n	80054fc <__libc_init_array+0x24>
 80054e8:	2600      	movs	r6, #0
 80054ea:	f000 fc63 	bl	8005db4 <_init>
 80054ee:	4c0a      	ldr	r4, [pc, #40]	@ (8005518 <__libc_init_array+0x40>)
 80054f0:	4d0a      	ldr	r5, [pc, #40]	@ (800551c <__libc_init_array+0x44>)
 80054f2:	1b64      	subs	r4, r4, r5
 80054f4:	10a4      	asrs	r4, r4, #2
 80054f6:	42a6      	cmp	r6, r4
 80054f8:	d105      	bne.n	8005506 <__libc_init_array+0x2e>
 80054fa:	bd70      	pop	{r4, r5, r6, pc}
 80054fc:	00b3      	lsls	r3, r6, #2
 80054fe:	58eb      	ldr	r3, [r5, r3]
 8005500:	4798      	blx	r3
 8005502:	3601      	adds	r6, #1
 8005504:	e7ee      	b.n	80054e4 <__libc_init_array+0xc>
 8005506:	00b3      	lsls	r3, r6, #2
 8005508:	58eb      	ldr	r3, [r5, r3]
 800550a:	4798      	blx	r3
 800550c:	3601      	adds	r6, #1
 800550e:	e7f2      	b.n	80054f6 <__libc_init_array+0x1e>
 8005510:	080061b0 	.word	0x080061b0
 8005514:	080061b0 	.word	0x080061b0
 8005518:	080061b4 	.word	0x080061b4
 800551c:	080061b0 	.word	0x080061b0

08005520 <__retarget_lock_acquire_recursive>:
 8005520:	4770      	bx	lr

08005522 <__retarget_lock_release_recursive>:
 8005522:	4770      	bx	lr

08005524 <memcpy>:
 8005524:	2300      	movs	r3, #0
 8005526:	b510      	push	{r4, lr}
 8005528:	429a      	cmp	r2, r3
 800552a:	d100      	bne.n	800552e <memcpy+0xa>
 800552c:	bd10      	pop	{r4, pc}
 800552e:	5ccc      	ldrb	r4, [r1, r3]
 8005530:	54c4      	strb	r4, [r0, r3]
 8005532:	3301      	adds	r3, #1
 8005534:	e7f8      	b.n	8005528 <memcpy+0x4>
	...

08005538 <_free_r>:
 8005538:	b570      	push	{r4, r5, r6, lr}
 800553a:	0005      	movs	r5, r0
 800553c:	1e0c      	subs	r4, r1, #0
 800553e:	d010      	beq.n	8005562 <_free_r+0x2a>
 8005540:	3c04      	subs	r4, #4
 8005542:	6823      	ldr	r3, [r4, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	da00      	bge.n	800554a <_free_r+0x12>
 8005548:	18e4      	adds	r4, r4, r3
 800554a:	0028      	movs	r0, r5
 800554c:	f000 f8e0 	bl	8005710 <__malloc_lock>
 8005550:	4a1d      	ldr	r2, [pc, #116]	@ (80055c8 <_free_r+0x90>)
 8005552:	6813      	ldr	r3, [r2, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d105      	bne.n	8005564 <_free_r+0x2c>
 8005558:	6063      	str	r3, [r4, #4]
 800555a:	6014      	str	r4, [r2, #0]
 800555c:	0028      	movs	r0, r5
 800555e:	f000 f8df 	bl	8005720 <__malloc_unlock>
 8005562:	bd70      	pop	{r4, r5, r6, pc}
 8005564:	42a3      	cmp	r3, r4
 8005566:	d908      	bls.n	800557a <_free_r+0x42>
 8005568:	6820      	ldr	r0, [r4, #0]
 800556a:	1821      	adds	r1, r4, r0
 800556c:	428b      	cmp	r3, r1
 800556e:	d1f3      	bne.n	8005558 <_free_r+0x20>
 8005570:	6819      	ldr	r1, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	1809      	adds	r1, r1, r0
 8005576:	6021      	str	r1, [r4, #0]
 8005578:	e7ee      	b.n	8005558 <_free_r+0x20>
 800557a:	001a      	movs	r2, r3
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <_free_r+0x4e>
 8005582:	42a3      	cmp	r3, r4
 8005584:	d9f9      	bls.n	800557a <_free_r+0x42>
 8005586:	6811      	ldr	r1, [r2, #0]
 8005588:	1850      	adds	r0, r2, r1
 800558a:	42a0      	cmp	r0, r4
 800558c:	d10b      	bne.n	80055a6 <_free_r+0x6e>
 800558e:	6820      	ldr	r0, [r4, #0]
 8005590:	1809      	adds	r1, r1, r0
 8005592:	1850      	adds	r0, r2, r1
 8005594:	6011      	str	r1, [r2, #0]
 8005596:	4283      	cmp	r3, r0
 8005598:	d1e0      	bne.n	800555c <_free_r+0x24>
 800559a:	6818      	ldr	r0, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	1841      	adds	r1, r0, r1
 80055a0:	6011      	str	r1, [r2, #0]
 80055a2:	6053      	str	r3, [r2, #4]
 80055a4:	e7da      	b.n	800555c <_free_r+0x24>
 80055a6:	42a0      	cmp	r0, r4
 80055a8:	d902      	bls.n	80055b0 <_free_r+0x78>
 80055aa:	230c      	movs	r3, #12
 80055ac:	602b      	str	r3, [r5, #0]
 80055ae:	e7d5      	b.n	800555c <_free_r+0x24>
 80055b0:	6820      	ldr	r0, [r4, #0]
 80055b2:	1821      	adds	r1, r4, r0
 80055b4:	428b      	cmp	r3, r1
 80055b6:	d103      	bne.n	80055c0 <_free_r+0x88>
 80055b8:	6819      	ldr	r1, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	1809      	adds	r1, r1, r0
 80055be:	6021      	str	r1, [r4, #0]
 80055c0:	6063      	str	r3, [r4, #4]
 80055c2:	6054      	str	r4, [r2, #4]
 80055c4:	e7ca      	b.n	800555c <_free_r+0x24>
 80055c6:	46c0      	nop			@ (mov r8, r8)
 80055c8:	20000364 	.word	0x20000364

080055cc <sbrk_aligned>:
 80055cc:	b570      	push	{r4, r5, r6, lr}
 80055ce:	4e0f      	ldr	r6, [pc, #60]	@ (800560c <sbrk_aligned+0x40>)
 80055d0:	000d      	movs	r5, r1
 80055d2:	6831      	ldr	r1, [r6, #0]
 80055d4:	0004      	movs	r4, r0
 80055d6:	2900      	cmp	r1, #0
 80055d8:	d102      	bne.n	80055e0 <sbrk_aligned+0x14>
 80055da:	f000 fb95 	bl	8005d08 <_sbrk_r>
 80055de:	6030      	str	r0, [r6, #0]
 80055e0:	0029      	movs	r1, r5
 80055e2:	0020      	movs	r0, r4
 80055e4:	f000 fb90 	bl	8005d08 <_sbrk_r>
 80055e8:	1c43      	adds	r3, r0, #1
 80055ea:	d103      	bne.n	80055f4 <sbrk_aligned+0x28>
 80055ec:	2501      	movs	r5, #1
 80055ee:	426d      	negs	r5, r5
 80055f0:	0028      	movs	r0, r5
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	2303      	movs	r3, #3
 80055f6:	1cc5      	adds	r5, r0, #3
 80055f8:	439d      	bics	r5, r3
 80055fa:	42a8      	cmp	r0, r5
 80055fc:	d0f8      	beq.n	80055f0 <sbrk_aligned+0x24>
 80055fe:	1a29      	subs	r1, r5, r0
 8005600:	0020      	movs	r0, r4
 8005602:	f000 fb81 	bl	8005d08 <_sbrk_r>
 8005606:	3001      	adds	r0, #1
 8005608:	d1f2      	bne.n	80055f0 <sbrk_aligned+0x24>
 800560a:	e7ef      	b.n	80055ec <sbrk_aligned+0x20>
 800560c:	20000360 	.word	0x20000360

08005610 <_malloc_r>:
 8005610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005612:	2203      	movs	r2, #3
 8005614:	1ccb      	adds	r3, r1, #3
 8005616:	4393      	bics	r3, r2
 8005618:	3308      	adds	r3, #8
 800561a:	0005      	movs	r5, r0
 800561c:	001f      	movs	r7, r3
 800561e:	2b0c      	cmp	r3, #12
 8005620:	d234      	bcs.n	800568c <_malloc_r+0x7c>
 8005622:	270c      	movs	r7, #12
 8005624:	42b9      	cmp	r1, r7
 8005626:	d833      	bhi.n	8005690 <_malloc_r+0x80>
 8005628:	0028      	movs	r0, r5
 800562a:	f000 f871 	bl	8005710 <__malloc_lock>
 800562e:	4e37      	ldr	r6, [pc, #220]	@ (800570c <_malloc_r+0xfc>)
 8005630:	6833      	ldr	r3, [r6, #0]
 8005632:	001c      	movs	r4, r3
 8005634:	2c00      	cmp	r4, #0
 8005636:	d12f      	bne.n	8005698 <_malloc_r+0x88>
 8005638:	0039      	movs	r1, r7
 800563a:	0028      	movs	r0, r5
 800563c:	f7ff ffc6 	bl	80055cc <sbrk_aligned>
 8005640:	0004      	movs	r4, r0
 8005642:	1c43      	adds	r3, r0, #1
 8005644:	d15f      	bne.n	8005706 <_malloc_r+0xf6>
 8005646:	6834      	ldr	r4, [r6, #0]
 8005648:	9400      	str	r4, [sp, #0]
 800564a:	9b00      	ldr	r3, [sp, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d14a      	bne.n	80056e6 <_malloc_r+0xd6>
 8005650:	2c00      	cmp	r4, #0
 8005652:	d052      	beq.n	80056fa <_malloc_r+0xea>
 8005654:	6823      	ldr	r3, [r4, #0]
 8005656:	0028      	movs	r0, r5
 8005658:	18e3      	adds	r3, r4, r3
 800565a:	9900      	ldr	r1, [sp, #0]
 800565c:	9301      	str	r3, [sp, #4]
 800565e:	f000 fb53 	bl	8005d08 <_sbrk_r>
 8005662:	9b01      	ldr	r3, [sp, #4]
 8005664:	4283      	cmp	r3, r0
 8005666:	d148      	bne.n	80056fa <_malloc_r+0xea>
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	0028      	movs	r0, r5
 800566c:	1aff      	subs	r7, r7, r3
 800566e:	0039      	movs	r1, r7
 8005670:	f7ff ffac 	bl	80055cc <sbrk_aligned>
 8005674:	3001      	adds	r0, #1
 8005676:	d040      	beq.n	80056fa <_malloc_r+0xea>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	19db      	adds	r3, r3, r7
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	6833      	ldr	r3, [r6, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	2a00      	cmp	r2, #0
 8005684:	d133      	bne.n	80056ee <_malloc_r+0xde>
 8005686:	9b00      	ldr	r3, [sp, #0]
 8005688:	6033      	str	r3, [r6, #0]
 800568a:	e019      	b.n	80056c0 <_malloc_r+0xb0>
 800568c:	2b00      	cmp	r3, #0
 800568e:	dac9      	bge.n	8005624 <_malloc_r+0x14>
 8005690:	230c      	movs	r3, #12
 8005692:	602b      	str	r3, [r5, #0]
 8005694:	2000      	movs	r0, #0
 8005696:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005698:	6821      	ldr	r1, [r4, #0]
 800569a:	1bc9      	subs	r1, r1, r7
 800569c:	d420      	bmi.n	80056e0 <_malloc_r+0xd0>
 800569e:	290b      	cmp	r1, #11
 80056a0:	d90a      	bls.n	80056b8 <_malloc_r+0xa8>
 80056a2:	19e2      	adds	r2, r4, r7
 80056a4:	6027      	str	r7, [r4, #0]
 80056a6:	42a3      	cmp	r3, r4
 80056a8:	d104      	bne.n	80056b4 <_malloc_r+0xa4>
 80056aa:	6032      	str	r2, [r6, #0]
 80056ac:	6863      	ldr	r3, [r4, #4]
 80056ae:	6011      	str	r1, [r2, #0]
 80056b0:	6053      	str	r3, [r2, #4]
 80056b2:	e005      	b.n	80056c0 <_malloc_r+0xb0>
 80056b4:	605a      	str	r2, [r3, #4]
 80056b6:	e7f9      	b.n	80056ac <_malloc_r+0x9c>
 80056b8:	6862      	ldr	r2, [r4, #4]
 80056ba:	42a3      	cmp	r3, r4
 80056bc:	d10e      	bne.n	80056dc <_malloc_r+0xcc>
 80056be:	6032      	str	r2, [r6, #0]
 80056c0:	0028      	movs	r0, r5
 80056c2:	f000 f82d 	bl	8005720 <__malloc_unlock>
 80056c6:	0020      	movs	r0, r4
 80056c8:	2207      	movs	r2, #7
 80056ca:	300b      	adds	r0, #11
 80056cc:	1d23      	adds	r3, r4, #4
 80056ce:	4390      	bics	r0, r2
 80056d0:	1ac2      	subs	r2, r0, r3
 80056d2:	4298      	cmp	r0, r3
 80056d4:	d0df      	beq.n	8005696 <_malloc_r+0x86>
 80056d6:	1a1b      	subs	r3, r3, r0
 80056d8:	50a3      	str	r3, [r4, r2]
 80056da:	e7dc      	b.n	8005696 <_malloc_r+0x86>
 80056dc:	605a      	str	r2, [r3, #4]
 80056de:	e7ef      	b.n	80056c0 <_malloc_r+0xb0>
 80056e0:	0023      	movs	r3, r4
 80056e2:	6864      	ldr	r4, [r4, #4]
 80056e4:	e7a6      	b.n	8005634 <_malloc_r+0x24>
 80056e6:	9c00      	ldr	r4, [sp, #0]
 80056e8:	6863      	ldr	r3, [r4, #4]
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	e7ad      	b.n	800564a <_malloc_r+0x3a>
 80056ee:	001a      	movs	r2, r3
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	42a3      	cmp	r3, r4
 80056f4:	d1fb      	bne.n	80056ee <_malloc_r+0xde>
 80056f6:	2300      	movs	r3, #0
 80056f8:	e7da      	b.n	80056b0 <_malloc_r+0xa0>
 80056fa:	230c      	movs	r3, #12
 80056fc:	0028      	movs	r0, r5
 80056fe:	602b      	str	r3, [r5, #0]
 8005700:	f000 f80e 	bl	8005720 <__malloc_unlock>
 8005704:	e7c6      	b.n	8005694 <_malloc_r+0x84>
 8005706:	6007      	str	r7, [r0, #0]
 8005708:	e7da      	b.n	80056c0 <_malloc_r+0xb0>
 800570a:	46c0      	nop			@ (mov r8, r8)
 800570c:	20000364 	.word	0x20000364

08005710 <__malloc_lock>:
 8005710:	b510      	push	{r4, lr}
 8005712:	4802      	ldr	r0, [pc, #8]	@ (800571c <__malloc_lock+0xc>)
 8005714:	f7ff ff04 	bl	8005520 <__retarget_lock_acquire_recursive>
 8005718:	bd10      	pop	{r4, pc}
 800571a:	46c0      	nop			@ (mov r8, r8)
 800571c:	2000035c 	.word	0x2000035c

08005720 <__malloc_unlock>:
 8005720:	b510      	push	{r4, lr}
 8005722:	4802      	ldr	r0, [pc, #8]	@ (800572c <__malloc_unlock+0xc>)
 8005724:	f7ff fefd 	bl	8005522 <__retarget_lock_release_recursive>
 8005728:	bd10      	pop	{r4, pc}
 800572a:	46c0      	nop			@ (mov r8, r8)
 800572c:	2000035c 	.word	0x2000035c

08005730 <__ssputs_r>:
 8005730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005732:	688e      	ldr	r6, [r1, #8]
 8005734:	b085      	sub	sp, #20
 8005736:	001f      	movs	r7, r3
 8005738:	000c      	movs	r4, r1
 800573a:	680b      	ldr	r3, [r1, #0]
 800573c:	9002      	str	r0, [sp, #8]
 800573e:	9203      	str	r2, [sp, #12]
 8005740:	42be      	cmp	r6, r7
 8005742:	d830      	bhi.n	80057a6 <__ssputs_r+0x76>
 8005744:	210c      	movs	r1, #12
 8005746:	5e62      	ldrsh	r2, [r4, r1]
 8005748:	2190      	movs	r1, #144	@ 0x90
 800574a:	00c9      	lsls	r1, r1, #3
 800574c:	420a      	tst	r2, r1
 800574e:	d028      	beq.n	80057a2 <__ssputs_r+0x72>
 8005750:	2003      	movs	r0, #3
 8005752:	6921      	ldr	r1, [r4, #16]
 8005754:	1a5b      	subs	r3, r3, r1
 8005756:	9301      	str	r3, [sp, #4]
 8005758:	6963      	ldr	r3, [r4, #20]
 800575a:	4343      	muls	r3, r0
 800575c:	9801      	ldr	r0, [sp, #4]
 800575e:	0fdd      	lsrs	r5, r3, #31
 8005760:	18ed      	adds	r5, r5, r3
 8005762:	1c7b      	adds	r3, r7, #1
 8005764:	181b      	adds	r3, r3, r0
 8005766:	106d      	asrs	r5, r5, #1
 8005768:	42ab      	cmp	r3, r5
 800576a:	d900      	bls.n	800576e <__ssputs_r+0x3e>
 800576c:	001d      	movs	r5, r3
 800576e:	0552      	lsls	r2, r2, #21
 8005770:	d528      	bpl.n	80057c4 <__ssputs_r+0x94>
 8005772:	0029      	movs	r1, r5
 8005774:	9802      	ldr	r0, [sp, #8]
 8005776:	f7ff ff4b 	bl	8005610 <_malloc_r>
 800577a:	1e06      	subs	r6, r0, #0
 800577c:	d02c      	beq.n	80057d8 <__ssputs_r+0xa8>
 800577e:	9a01      	ldr	r2, [sp, #4]
 8005780:	6921      	ldr	r1, [r4, #16]
 8005782:	f7ff fecf 	bl	8005524 <memcpy>
 8005786:	89a2      	ldrh	r2, [r4, #12]
 8005788:	4b18      	ldr	r3, [pc, #96]	@ (80057ec <__ssputs_r+0xbc>)
 800578a:	401a      	ands	r2, r3
 800578c:	2380      	movs	r3, #128	@ 0x80
 800578e:	4313      	orrs	r3, r2
 8005790:	81a3      	strh	r3, [r4, #12]
 8005792:	9b01      	ldr	r3, [sp, #4]
 8005794:	6126      	str	r6, [r4, #16]
 8005796:	18f6      	adds	r6, r6, r3
 8005798:	6026      	str	r6, [r4, #0]
 800579a:	003e      	movs	r6, r7
 800579c:	6165      	str	r5, [r4, #20]
 800579e:	1aed      	subs	r5, r5, r3
 80057a0:	60a5      	str	r5, [r4, #8]
 80057a2:	42be      	cmp	r6, r7
 80057a4:	d900      	bls.n	80057a8 <__ssputs_r+0x78>
 80057a6:	003e      	movs	r6, r7
 80057a8:	0032      	movs	r2, r6
 80057aa:	9903      	ldr	r1, [sp, #12]
 80057ac:	6820      	ldr	r0, [r4, #0]
 80057ae:	f000 fa99 	bl	8005ce4 <memmove>
 80057b2:	2000      	movs	r0, #0
 80057b4:	68a3      	ldr	r3, [r4, #8]
 80057b6:	1b9b      	subs	r3, r3, r6
 80057b8:	60a3      	str	r3, [r4, #8]
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	199b      	adds	r3, r3, r6
 80057be:	6023      	str	r3, [r4, #0]
 80057c0:	b005      	add	sp, #20
 80057c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057c4:	002a      	movs	r2, r5
 80057c6:	9802      	ldr	r0, [sp, #8]
 80057c8:	f000 fabb 	bl	8005d42 <_realloc_r>
 80057cc:	1e06      	subs	r6, r0, #0
 80057ce:	d1e0      	bne.n	8005792 <__ssputs_r+0x62>
 80057d0:	6921      	ldr	r1, [r4, #16]
 80057d2:	9802      	ldr	r0, [sp, #8]
 80057d4:	f7ff feb0 	bl	8005538 <_free_r>
 80057d8:	230c      	movs	r3, #12
 80057da:	2001      	movs	r0, #1
 80057dc:	9a02      	ldr	r2, [sp, #8]
 80057de:	4240      	negs	r0, r0
 80057e0:	6013      	str	r3, [r2, #0]
 80057e2:	89a2      	ldrh	r2, [r4, #12]
 80057e4:	3334      	adds	r3, #52	@ 0x34
 80057e6:	4313      	orrs	r3, r2
 80057e8:	81a3      	strh	r3, [r4, #12]
 80057ea:	e7e9      	b.n	80057c0 <__ssputs_r+0x90>
 80057ec:	fffffb7f 	.word	0xfffffb7f

080057f0 <_svfiprintf_r>:
 80057f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057f2:	b0a1      	sub	sp, #132	@ 0x84
 80057f4:	9003      	str	r0, [sp, #12]
 80057f6:	001d      	movs	r5, r3
 80057f8:	898b      	ldrh	r3, [r1, #12]
 80057fa:	000f      	movs	r7, r1
 80057fc:	0016      	movs	r6, r2
 80057fe:	061b      	lsls	r3, r3, #24
 8005800:	d511      	bpl.n	8005826 <_svfiprintf_r+0x36>
 8005802:	690b      	ldr	r3, [r1, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10e      	bne.n	8005826 <_svfiprintf_r+0x36>
 8005808:	2140      	movs	r1, #64	@ 0x40
 800580a:	f7ff ff01 	bl	8005610 <_malloc_r>
 800580e:	6038      	str	r0, [r7, #0]
 8005810:	6138      	str	r0, [r7, #16]
 8005812:	2800      	cmp	r0, #0
 8005814:	d105      	bne.n	8005822 <_svfiprintf_r+0x32>
 8005816:	230c      	movs	r3, #12
 8005818:	9a03      	ldr	r2, [sp, #12]
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	2001      	movs	r0, #1
 800581e:	4240      	negs	r0, r0
 8005820:	e0cf      	b.n	80059c2 <_svfiprintf_r+0x1d2>
 8005822:	2340      	movs	r3, #64	@ 0x40
 8005824:	617b      	str	r3, [r7, #20]
 8005826:	2300      	movs	r3, #0
 8005828:	ac08      	add	r4, sp, #32
 800582a:	6163      	str	r3, [r4, #20]
 800582c:	3320      	adds	r3, #32
 800582e:	7663      	strb	r3, [r4, #25]
 8005830:	3310      	adds	r3, #16
 8005832:	76a3      	strb	r3, [r4, #26]
 8005834:	9507      	str	r5, [sp, #28]
 8005836:	0035      	movs	r5, r6
 8005838:	782b      	ldrb	r3, [r5, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d001      	beq.n	8005842 <_svfiprintf_r+0x52>
 800583e:	2b25      	cmp	r3, #37	@ 0x25
 8005840:	d148      	bne.n	80058d4 <_svfiprintf_r+0xe4>
 8005842:	1bab      	subs	r3, r5, r6
 8005844:	9305      	str	r3, [sp, #20]
 8005846:	42b5      	cmp	r5, r6
 8005848:	d00b      	beq.n	8005862 <_svfiprintf_r+0x72>
 800584a:	0032      	movs	r2, r6
 800584c:	0039      	movs	r1, r7
 800584e:	9803      	ldr	r0, [sp, #12]
 8005850:	f7ff ff6e 	bl	8005730 <__ssputs_r>
 8005854:	3001      	adds	r0, #1
 8005856:	d100      	bne.n	800585a <_svfiprintf_r+0x6a>
 8005858:	e0ae      	b.n	80059b8 <_svfiprintf_r+0x1c8>
 800585a:	6963      	ldr	r3, [r4, #20]
 800585c:	9a05      	ldr	r2, [sp, #20]
 800585e:	189b      	adds	r3, r3, r2
 8005860:	6163      	str	r3, [r4, #20]
 8005862:	782b      	ldrb	r3, [r5, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d100      	bne.n	800586a <_svfiprintf_r+0x7a>
 8005868:	e0a6      	b.n	80059b8 <_svfiprintf_r+0x1c8>
 800586a:	2201      	movs	r2, #1
 800586c:	2300      	movs	r3, #0
 800586e:	4252      	negs	r2, r2
 8005870:	6062      	str	r2, [r4, #4]
 8005872:	a904      	add	r1, sp, #16
 8005874:	3254      	adds	r2, #84	@ 0x54
 8005876:	1852      	adds	r2, r2, r1
 8005878:	1c6e      	adds	r6, r5, #1
 800587a:	6023      	str	r3, [r4, #0]
 800587c:	60e3      	str	r3, [r4, #12]
 800587e:	60a3      	str	r3, [r4, #8]
 8005880:	7013      	strb	r3, [r2, #0]
 8005882:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005884:	4b54      	ldr	r3, [pc, #336]	@ (80059d8 <_svfiprintf_r+0x1e8>)
 8005886:	2205      	movs	r2, #5
 8005888:	0018      	movs	r0, r3
 800588a:	7831      	ldrb	r1, [r6, #0]
 800588c:	9305      	str	r3, [sp, #20]
 800588e:	f000 fa4d 	bl	8005d2c <memchr>
 8005892:	1c75      	adds	r5, r6, #1
 8005894:	2800      	cmp	r0, #0
 8005896:	d11f      	bne.n	80058d8 <_svfiprintf_r+0xe8>
 8005898:	6822      	ldr	r2, [r4, #0]
 800589a:	06d3      	lsls	r3, r2, #27
 800589c:	d504      	bpl.n	80058a8 <_svfiprintf_r+0xb8>
 800589e:	2353      	movs	r3, #83	@ 0x53
 80058a0:	a904      	add	r1, sp, #16
 80058a2:	185b      	adds	r3, r3, r1
 80058a4:	2120      	movs	r1, #32
 80058a6:	7019      	strb	r1, [r3, #0]
 80058a8:	0713      	lsls	r3, r2, #28
 80058aa:	d504      	bpl.n	80058b6 <_svfiprintf_r+0xc6>
 80058ac:	2353      	movs	r3, #83	@ 0x53
 80058ae:	a904      	add	r1, sp, #16
 80058b0:	185b      	adds	r3, r3, r1
 80058b2:	212b      	movs	r1, #43	@ 0x2b
 80058b4:	7019      	strb	r1, [r3, #0]
 80058b6:	7833      	ldrb	r3, [r6, #0]
 80058b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80058ba:	d016      	beq.n	80058ea <_svfiprintf_r+0xfa>
 80058bc:	0035      	movs	r5, r6
 80058be:	2100      	movs	r1, #0
 80058c0:	200a      	movs	r0, #10
 80058c2:	68e3      	ldr	r3, [r4, #12]
 80058c4:	782a      	ldrb	r2, [r5, #0]
 80058c6:	1c6e      	adds	r6, r5, #1
 80058c8:	3a30      	subs	r2, #48	@ 0x30
 80058ca:	2a09      	cmp	r2, #9
 80058cc:	d950      	bls.n	8005970 <_svfiprintf_r+0x180>
 80058ce:	2900      	cmp	r1, #0
 80058d0:	d111      	bne.n	80058f6 <_svfiprintf_r+0x106>
 80058d2:	e017      	b.n	8005904 <_svfiprintf_r+0x114>
 80058d4:	3501      	adds	r5, #1
 80058d6:	e7af      	b.n	8005838 <_svfiprintf_r+0x48>
 80058d8:	9b05      	ldr	r3, [sp, #20]
 80058da:	6822      	ldr	r2, [r4, #0]
 80058dc:	1ac0      	subs	r0, r0, r3
 80058de:	2301      	movs	r3, #1
 80058e0:	4083      	lsls	r3, r0
 80058e2:	4313      	orrs	r3, r2
 80058e4:	002e      	movs	r6, r5
 80058e6:	6023      	str	r3, [r4, #0]
 80058e8:	e7cc      	b.n	8005884 <_svfiprintf_r+0x94>
 80058ea:	9b07      	ldr	r3, [sp, #28]
 80058ec:	1d19      	adds	r1, r3, #4
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	9107      	str	r1, [sp, #28]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	db01      	blt.n	80058fa <_svfiprintf_r+0x10a>
 80058f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058f8:	e004      	b.n	8005904 <_svfiprintf_r+0x114>
 80058fa:	425b      	negs	r3, r3
 80058fc:	60e3      	str	r3, [r4, #12]
 80058fe:	2302      	movs	r3, #2
 8005900:	4313      	orrs	r3, r2
 8005902:	6023      	str	r3, [r4, #0]
 8005904:	782b      	ldrb	r3, [r5, #0]
 8005906:	2b2e      	cmp	r3, #46	@ 0x2e
 8005908:	d10c      	bne.n	8005924 <_svfiprintf_r+0x134>
 800590a:	786b      	ldrb	r3, [r5, #1]
 800590c:	2b2a      	cmp	r3, #42	@ 0x2a
 800590e:	d134      	bne.n	800597a <_svfiprintf_r+0x18a>
 8005910:	9b07      	ldr	r3, [sp, #28]
 8005912:	3502      	adds	r5, #2
 8005914:	1d1a      	adds	r2, r3, #4
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	9207      	str	r2, [sp, #28]
 800591a:	2b00      	cmp	r3, #0
 800591c:	da01      	bge.n	8005922 <_svfiprintf_r+0x132>
 800591e:	2301      	movs	r3, #1
 8005920:	425b      	negs	r3, r3
 8005922:	9309      	str	r3, [sp, #36]	@ 0x24
 8005924:	4e2d      	ldr	r6, [pc, #180]	@ (80059dc <_svfiprintf_r+0x1ec>)
 8005926:	2203      	movs	r2, #3
 8005928:	0030      	movs	r0, r6
 800592a:	7829      	ldrb	r1, [r5, #0]
 800592c:	f000 f9fe 	bl	8005d2c <memchr>
 8005930:	2800      	cmp	r0, #0
 8005932:	d006      	beq.n	8005942 <_svfiprintf_r+0x152>
 8005934:	2340      	movs	r3, #64	@ 0x40
 8005936:	1b80      	subs	r0, r0, r6
 8005938:	4083      	lsls	r3, r0
 800593a:	6822      	ldr	r2, [r4, #0]
 800593c:	3501      	adds	r5, #1
 800593e:	4313      	orrs	r3, r2
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	7829      	ldrb	r1, [r5, #0]
 8005944:	2206      	movs	r2, #6
 8005946:	4826      	ldr	r0, [pc, #152]	@ (80059e0 <_svfiprintf_r+0x1f0>)
 8005948:	1c6e      	adds	r6, r5, #1
 800594a:	7621      	strb	r1, [r4, #24]
 800594c:	f000 f9ee 	bl	8005d2c <memchr>
 8005950:	2800      	cmp	r0, #0
 8005952:	d038      	beq.n	80059c6 <_svfiprintf_r+0x1d6>
 8005954:	4b23      	ldr	r3, [pc, #140]	@ (80059e4 <_svfiprintf_r+0x1f4>)
 8005956:	2b00      	cmp	r3, #0
 8005958:	d122      	bne.n	80059a0 <_svfiprintf_r+0x1b0>
 800595a:	2207      	movs	r2, #7
 800595c:	9b07      	ldr	r3, [sp, #28]
 800595e:	3307      	adds	r3, #7
 8005960:	4393      	bics	r3, r2
 8005962:	3308      	adds	r3, #8
 8005964:	9307      	str	r3, [sp, #28]
 8005966:	6963      	ldr	r3, [r4, #20]
 8005968:	9a04      	ldr	r2, [sp, #16]
 800596a:	189b      	adds	r3, r3, r2
 800596c:	6163      	str	r3, [r4, #20]
 800596e:	e762      	b.n	8005836 <_svfiprintf_r+0x46>
 8005970:	4343      	muls	r3, r0
 8005972:	0035      	movs	r5, r6
 8005974:	2101      	movs	r1, #1
 8005976:	189b      	adds	r3, r3, r2
 8005978:	e7a4      	b.n	80058c4 <_svfiprintf_r+0xd4>
 800597a:	2300      	movs	r3, #0
 800597c:	200a      	movs	r0, #10
 800597e:	0019      	movs	r1, r3
 8005980:	3501      	adds	r5, #1
 8005982:	6063      	str	r3, [r4, #4]
 8005984:	782a      	ldrb	r2, [r5, #0]
 8005986:	1c6e      	adds	r6, r5, #1
 8005988:	3a30      	subs	r2, #48	@ 0x30
 800598a:	2a09      	cmp	r2, #9
 800598c:	d903      	bls.n	8005996 <_svfiprintf_r+0x1a6>
 800598e:	2b00      	cmp	r3, #0
 8005990:	d0c8      	beq.n	8005924 <_svfiprintf_r+0x134>
 8005992:	9109      	str	r1, [sp, #36]	@ 0x24
 8005994:	e7c6      	b.n	8005924 <_svfiprintf_r+0x134>
 8005996:	4341      	muls	r1, r0
 8005998:	0035      	movs	r5, r6
 800599a:	2301      	movs	r3, #1
 800599c:	1889      	adds	r1, r1, r2
 800599e:	e7f1      	b.n	8005984 <_svfiprintf_r+0x194>
 80059a0:	aa07      	add	r2, sp, #28
 80059a2:	9200      	str	r2, [sp, #0]
 80059a4:	0021      	movs	r1, r4
 80059a6:	003a      	movs	r2, r7
 80059a8:	4b0f      	ldr	r3, [pc, #60]	@ (80059e8 <_svfiprintf_r+0x1f8>)
 80059aa:	9803      	ldr	r0, [sp, #12]
 80059ac:	e000      	b.n	80059b0 <_svfiprintf_r+0x1c0>
 80059ae:	bf00      	nop
 80059b0:	9004      	str	r0, [sp, #16]
 80059b2:	9b04      	ldr	r3, [sp, #16]
 80059b4:	3301      	adds	r3, #1
 80059b6:	d1d6      	bne.n	8005966 <_svfiprintf_r+0x176>
 80059b8:	89bb      	ldrh	r3, [r7, #12]
 80059ba:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80059bc:	065b      	lsls	r3, r3, #25
 80059be:	d500      	bpl.n	80059c2 <_svfiprintf_r+0x1d2>
 80059c0:	e72c      	b.n	800581c <_svfiprintf_r+0x2c>
 80059c2:	b021      	add	sp, #132	@ 0x84
 80059c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c6:	aa07      	add	r2, sp, #28
 80059c8:	9200      	str	r2, [sp, #0]
 80059ca:	0021      	movs	r1, r4
 80059cc:	003a      	movs	r2, r7
 80059ce:	4b06      	ldr	r3, [pc, #24]	@ (80059e8 <_svfiprintf_r+0x1f8>)
 80059d0:	9803      	ldr	r0, [sp, #12]
 80059d2:	f000 f87b 	bl	8005acc <_printf_i>
 80059d6:	e7eb      	b.n	80059b0 <_svfiprintf_r+0x1c0>
 80059d8:	08006174 	.word	0x08006174
 80059dc:	0800617a 	.word	0x0800617a
 80059e0:	0800617e 	.word	0x0800617e
 80059e4:	00000000 	.word	0x00000000
 80059e8:	08005731 	.word	0x08005731

080059ec <_printf_common>:
 80059ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ee:	0016      	movs	r6, r2
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	688a      	ldr	r2, [r1, #8]
 80059f4:	690b      	ldr	r3, [r1, #16]
 80059f6:	000c      	movs	r4, r1
 80059f8:	9000      	str	r0, [sp, #0]
 80059fa:	4293      	cmp	r3, r2
 80059fc:	da00      	bge.n	8005a00 <_printf_common+0x14>
 80059fe:	0013      	movs	r3, r2
 8005a00:	0022      	movs	r2, r4
 8005a02:	6033      	str	r3, [r6, #0]
 8005a04:	3243      	adds	r2, #67	@ 0x43
 8005a06:	7812      	ldrb	r2, [r2, #0]
 8005a08:	2a00      	cmp	r2, #0
 8005a0a:	d001      	beq.n	8005a10 <_printf_common+0x24>
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	6033      	str	r3, [r6, #0]
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	069b      	lsls	r3, r3, #26
 8005a14:	d502      	bpl.n	8005a1c <_printf_common+0x30>
 8005a16:	6833      	ldr	r3, [r6, #0]
 8005a18:	3302      	adds	r3, #2
 8005a1a:	6033      	str	r3, [r6, #0]
 8005a1c:	6822      	ldr	r2, [r4, #0]
 8005a1e:	2306      	movs	r3, #6
 8005a20:	0015      	movs	r5, r2
 8005a22:	401d      	ands	r5, r3
 8005a24:	421a      	tst	r2, r3
 8005a26:	d027      	beq.n	8005a78 <_printf_common+0x8c>
 8005a28:	0023      	movs	r3, r4
 8005a2a:	3343      	adds	r3, #67	@ 0x43
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	1e5a      	subs	r2, r3, #1
 8005a30:	4193      	sbcs	r3, r2
 8005a32:	6822      	ldr	r2, [r4, #0]
 8005a34:	0692      	lsls	r2, r2, #26
 8005a36:	d430      	bmi.n	8005a9a <_printf_common+0xae>
 8005a38:	0022      	movs	r2, r4
 8005a3a:	9901      	ldr	r1, [sp, #4]
 8005a3c:	9800      	ldr	r0, [sp, #0]
 8005a3e:	9d08      	ldr	r5, [sp, #32]
 8005a40:	3243      	adds	r2, #67	@ 0x43
 8005a42:	47a8      	blx	r5
 8005a44:	3001      	adds	r0, #1
 8005a46:	d025      	beq.n	8005a94 <_printf_common+0xa8>
 8005a48:	2206      	movs	r2, #6
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	2500      	movs	r5, #0
 8005a4e:	4013      	ands	r3, r2
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d105      	bne.n	8005a60 <_printf_common+0x74>
 8005a54:	6833      	ldr	r3, [r6, #0]
 8005a56:	68e5      	ldr	r5, [r4, #12]
 8005a58:	1aed      	subs	r5, r5, r3
 8005a5a:	43eb      	mvns	r3, r5
 8005a5c:	17db      	asrs	r3, r3, #31
 8005a5e:	401d      	ands	r5, r3
 8005a60:	68a3      	ldr	r3, [r4, #8]
 8005a62:	6922      	ldr	r2, [r4, #16]
 8005a64:	4293      	cmp	r3, r2
 8005a66:	dd01      	ble.n	8005a6c <_printf_common+0x80>
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	18ed      	adds	r5, r5, r3
 8005a6c:	2600      	movs	r6, #0
 8005a6e:	42b5      	cmp	r5, r6
 8005a70:	d120      	bne.n	8005ab4 <_printf_common+0xc8>
 8005a72:	2000      	movs	r0, #0
 8005a74:	e010      	b.n	8005a98 <_printf_common+0xac>
 8005a76:	3501      	adds	r5, #1
 8005a78:	68e3      	ldr	r3, [r4, #12]
 8005a7a:	6832      	ldr	r2, [r6, #0]
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	42ab      	cmp	r3, r5
 8005a80:	ddd2      	ble.n	8005a28 <_printf_common+0x3c>
 8005a82:	0022      	movs	r2, r4
 8005a84:	2301      	movs	r3, #1
 8005a86:	9901      	ldr	r1, [sp, #4]
 8005a88:	9800      	ldr	r0, [sp, #0]
 8005a8a:	9f08      	ldr	r7, [sp, #32]
 8005a8c:	3219      	adds	r2, #25
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	d1f0      	bne.n	8005a76 <_printf_common+0x8a>
 8005a94:	2001      	movs	r0, #1
 8005a96:	4240      	negs	r0, r0
 8005a98:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a9a:	2030      	movs	r0, #48	@ 0x30
 8005a9c:	18e1      	adds	r1, r4, r3
 8005a9e:	3143      	adds	r1, #67	@ 0x43
 8005aa0:	7008      	strb	r0, [r1, #0]
 8005aa2:	0021      	movs	r1, r4
 8005aa4:	1c5a      	adds	r2, r3, #1
 8005aa6:	3145      	adds	r1, #69	@ 0x45
 8005aa8:	7809      	ldrb	r1, [r1, #0]
 8005aaa:	18a2      	adds	r2, r4, r2
 8005aac:	3243      	adds	r2, #67	@ 0x43
 8005aae:	3302      	adds	r3, #2
 8005ab0:	7011      	strb	r1, [r2, #0]
 8005ab2:	e7c1      	b.n	8005a38 <_printf_common+0x4c>
 8005ab4:	0022      	movs	r2, r4
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	9901      	ldr	r1, [sp, #4]
 8005aba:	9800      	ldr	r0, [sp, #0]
 8005abc:	9f08      	ldr	r7, [sp, #32]
 8005abe:	321a      	adds	r2, #26
 8005ac0:	47b8      	blx	r7
 8005ac2:	3001      	adds	r0, #1
 8005ac4:	d0e6      	beq.n	8005a94 <_printf_common+0xa8>
 8005ac6:	3601      	adds	r6, #1
 8005ac8:	e7d1      	b.n	8005a6e <_printf_common+0x82>
	...

08005acc <_printf_i>:
 8005acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ace:	b08b      	sub	sp, #44	@ 0x2c
 8005ad0:	9206      	str	r2, [sp, #24]
 8005ad2:	000a      	movs	r2, r1
 8005ad4:	3243      	adds	r2, #67	@ 0x43
 8005ad6:	9307      	str	r3, [sp, #28]
 8005ad8:	9005      	str	r0, [sp, #20]
 8005ada:	9203      	str	r2, [sp, #12]
 8005adc:	7e0a      	ldrb	r2, [r1, #24]
 8005ade:	000c      	movs	r4, r1
 8005ae0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005ae2:	2a78      	cmp	r2, #120	@ 0x78
 8005ae4:	d809      	bhi.n	8005afa <_printf_i+0x2e>
 8005ae6:	2a62      	cmp	r2, #98	@ 0x62
 8005ae8:	d80b      	bhi.n	8005b02 <_printf_i+0x36>
 8005aea:	2a00      	cmp	r2, #0
 8005aec:	d100      	bne.n	8005af0 <_printf_i+0x24>
 8005aee:	e0ba      	b.n	8005c66 <_printf_i+0x19a>
 8005af0:	497a      	ldr	r1, [pc, #488]	@ (8005cdc <_printf_i+0x210>)
 8005af2:	9104      	str	r1, [sp, #16]
 8005af4:	2a58      	cmp	r2, #88	@ 0x58
 8005af6:	d100      	bne.n	8005afa <_printf_i+0x2e>
 8005af8:	e08e      	b.n	8005c18 <_printf_i+0x14c>
 8005afa:	0025      	movs	r5, r4
 8005afc:	3542      	adds	r5, #66	@ 0x42
 8005afe:	702a      	strb	r2, [r5, #0]
 8005b00:	e022      	b.n	8005b48 <_printf_i+0x7c>
 8005b02:	0010      	movs	r0, r2
 8005b04:	3863      	subs	r0, #99	@ 0x63
 8005b06:	2815      	cmp	r0, #21
 8005b08:	d8f7      	bhi.n	8005afa <_printf_i+0x2e>
 8005b0a:	f7fa fb05 	bl	8000118 <__gnu_thumb1_case_shi>
 8005b0e:	0016      	.short	0x0016
 8005b10:	fff6001f 	.word	0xfff6001f
 8005b14:	fff6fff6 	.word	0xfff6fff6
 8005b18:	001ffff6 	.word	0x001ffff6
 8005b1c:	fff6fff6 	.word	0xfff6fff6
 8005b20:	fff6fff6 	.word	0xfff6fff6
 8005b24:	0036009f 	.word	0x0036009f
 8005b28:	fff6007e 	.word	0xfff6007e
 8005b2c:	00b0fff6 	.word	0x00b0fff6
 8005b30:	0036fff6 	.word	0x0036fff6
 8005b34:	fff6fff6 	.word	0xfff6fff6
 8005b38:	0082      	.short	0x0082
 8005b3a:	0025      	movs	r5, r4
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	3542      	adds	r5, #66	@ 0x42
 8005b40:	1d11      	adds	r1, r2, #4
 8005b42:	6019      	str	r1, [r3, #0]
 8005b44:	6813      	ldr	r3, [r2, #0]
 8005b46:	702b      	strb	r3, [r5, #0]
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e09e      	b.n	8005c8a <_printf_i+0x1be>
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	6809      	ldr	r1, [r1, #0]
 8005b50:	1d02      	adds	r2, r0, #4
 8005b52:	060d      	lsls	r5, r1, #24
 8005b54:	d50b      	bpl.n	8005b6e <_printf_i+0xa2>
 8005b56:	6806      	ldr	r6, [r0, #0]
 8005b58:	601a      	str	r2, [r3, #0]
 8005b5a:	2e00      	cmp	r6, #0
 8005b5c:	da03      	bge.n	8005b66 <_printf_i+0x9a>
 8005b5e:	232d      	movs	r3, #45	@ 0x2d
 8005b60:	9a03      	ldr	r2, [sp, #12]
 8005b62:	4276      	negs	r6, r6
 8005b64:	7013      	strb	r3, [r2, #0]
 8005b66:	4b5d      	ldr	r3, [pc, #372]	@ (8005cdc <_printf_i+0x210>)
 8005b68:	270a      	movs	r7, #10
 8005b6a:	9304      	str	r3, [sp, #16]
 8005b6c:	e018      	b.n	8005ba0 <_printf_i+0xd4>
 8005b6e:	6806      	ldr	r6, [r0, #0]
 8005b70:	601a      	str	r2, [r3, #0]
 8005b72:	0649      	lsls	r1, r1, #25
 8005b74:	d5f1      	bpl.n	8005b5a <_printf_i+0x8e>
 8005b76:	b236      	sxth	r6, r6
 8005b78:	e7ef      	b.n	8005b5a <_printf_i+0x8e>
 8005b7a:	6808      	ldr	r0, [r1, #0]
 8005b7c:	6819      	ldr	r1, [r3, #0]
 8005b7e:	c940      	ldmia	r1!, {r6}
 8005b80:	0605      	lsls	r5, r0, #24
 8005b82:	d402      	bmi.n	8005b8a <_printf_i+0xbe>
 8005b84:	0640      	lsls	r0, r0, #25
 8005b86:	d500      	bpl.n	8005b8a <_printf_i+0xbe>
 8005b88:	b2b6      	uxth	r6, r6
 8005b8a:	6019      	str	r1, [r3, #0]
 8005b8c:	4b53      	ldr	r3, [pc, #332]	@ (8005cdc <_printf_i+0x210>)
 8005b8e:	270a      	movs	r7, #10
 8005b90:	9304      	str	r3, [sp, #16]
 8005b92:	2a6f      	cmp	r2, #111	@ 0x6f
 8005b94:	d100      	bne.n	8005b98 <_printf_i+0xcc>
 8005b96:	3f02      	subs	r7, #2
 8005b98:	0023      	movs	r3, r4
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	3343      	adds	r3, #67	@ 0x43
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	6863      	ldr	r3, [r4, #4]
 8005ba2:	60a3      	str	r3, [r4, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	db06      	blt.n	8005bb6 <_printf_i+0xea>
 8005ba8:	2104      	movs	r1, #4
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	9d03      	ldr	r5, [sp, #12]
 8005bae:	438a      	bics	r2, r1
 8005bb0:	6022      	str	r2, [r4, #0]
 8005bb2:	4333      	orrs	r3, r6
 8005bb4:	d00c      	beq.n	8005bd0 <_printf_i+0x104>
 8005bb6:	9d03      	ldr	r5, [sp, #12]
 8005bb8:	0030      	movs	r0, r6
 8005bba:	0039      	movs	r1, r7
 8005bbc:	f7fa fb3c 	bl	8000238 <__aeabi_uidivmod>
 8005bc0:	9b04      	ldr	r3, [sp, #16]
 8005bc2:	3d01      	subs	r5, #1
 8005bc4:	5c5b      	ldrb	r3, [r3, r1]
 8005bc6:	702b      	strb	r3, [r5, #0]
 8005bc8:	0033      	movs	r3, r6
 8005bca:	0006      	movs	r6, r0
 8005bcc:	429f      	cmp	r7, r3
 8005bce:	d9f3      	bls.n	8005bb8 <_printf_i+0xec>
 8005bd0:	2f08      	cmp	r7, #8
 8005bd2:	d109      	bne.n	8005be8 <_printf_i+0x11c>
 8005bd4:	6823      	ldr	r3, [r4, #0]
 8005bd6:	07db      	lsls	r3, r3, #31
 8005bd8:	d506      	bpl.n	8005be8 <_printf_i+0x11c>
 8005bda:	6862      	ldr	r2, [r4, #4]
 8005bdc:	6923      	ldr	r3, [r4, #16]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	dc02      	bgt.n	8005be8 <_printf_i+0x11c>
 8005be2:	2330      	movs	r3, #48	@ 0x30
 8005be4:	3d01      	subs	r5, #1
 8005be6:	702b      	strb	r3, [r5, #0]
 8005be8:	9b03      	ldr	r3, [sp, #12]
 8005bea:	1b5b      	subs	r3, r3, r5
 8005bec:	6123      	str	r3, [r4, #16]
 8005bee:	9b07      	ldr	r3, [sp, #28]
 8005bf0:	0021      	movs	r1, r4
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	9805      	ldr	r0, [sp, #20]
 8005bf6:	9b06      	ldr	r3, [sp, #24]
 8005bf8:	aa09      	add	r2, sp, #36	@ 0x24
 8005bfa:	f7ff fef7 	bl	80059ec <_printf_common>
 8005bfe:	3001      	adds	r0, #1
 8005c00:	d148      	bne.n	8005c94 <_printf_i+0x1c8>
 8005c02:	2001      	movs	r0, #1
 8005c04:	4240      	negs	r0, r0
 8005c06:	b00b      	add	sp, #44	@ 0x2c
 8005c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	6809      	ldr	r1, [r1, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	6022      	str	r2, [r4, #0]
 8005c12:	2278      	movs	r2, #120	@ 0x78
 8005c14:	4932      	ldr	r1, [pc, #200]	@ (8005ce0 <_printf_i+0x214>)
 8005c16:	9104      	str	r1, [sp, #16]
 8005c18:	0021      	movs	r1, r4
 8005c1a:	3145      	adds	r1, #69	@ 0x45
 8005c1c:	700a      	strb	r2, [r1, #0]
 8005c1e:	6819      	ldr	r1, [r3, #0]
 8005c20:	6822      	ldr	r2, [r4, #0]
 8005c22:	c940      	ldmia	r1!, {r6}
 8005c24:	0610      	lsls	r0, r2, #24
 8005c26:	d402      	bmi.n	8005c2e <_printf_i+0x162>
 8005c28:	0650      	lsls	r0, r2, #25
 8005c2a:	d500      	bpl.n	8005c2e <_printf_i+0x162>
 8005c2c:	b2b6      	uxth	r6, r6
 8005c2e:	6019      	str	r1, [r3, #0]
 8005c30:	07d3      	lsls	r3, r2, #31
 8005c32:	d502      	bpl.n	8005c3a <_printf_i+0x16e>
 8005c34:	2320      	movs	r3, #32
 8005c36:	4313      	orrs	r3, r2
 8005c38:	6023      	str	r3, [r4, #0]
 8005c3a:	2e00      	cmp	r6, #0
 8005c3c:	d001      	beq.n	8005c42 <_printf_i+0x176>
 8005c3e:	2710      	movs	r7, #16
 8005c40:	e7aa      	b.n	8005b98 <_printf_i+0xcc>
 8005c42:	2220      	movs	r2, #32
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	4393      	bics	r3, r2
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	e7f8      	b.n	8005c3e <_printf_i+0x172>
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	680d      	ldr	r5, [r1, #0]
 8005c50:	1d10      	adds	r0, r2, #4
 8005c52:	6949      	ldr	r1, [r1, #20]
 8005c54:	6018      	str	r0, [r3, #0]
 8005c56:	6813      	ldr	r3, [r2, #0]
 8005c58:	062e      	lsls	r6, r5, #24
 8005c5a:	d501      	bpl.n	8005c60 <_printf_i+0x194>
 8005c5c:	6019      	str	r1, [r3, #0]
 8005c5e:	e002      	b.n	8005c66 <_printf_i+0x19a>
 8005c60:	066d      	lsls	r5, r5, #25
 8005c62:	d5fb      	bpl.n	8005c5c <_printf_i+0x190>
 8005c64:	8019      	strh	r1, [r3, #0]
 8005c66:	2300      	movs	r3, #0
 8005c68:	9d03      	ldr	r5, [sp, #12]
 8005c6a:	6123      	str	r3, [r4, #16]
 8005c6c:	e7bf      	b.n	8005bee <_printf_i+0x122>
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	1d11      	adds	r1, r2, #4
 8005c72:	6019      	str	r1, [r3, #0]
 8005c74:	6815      	ldr	r5, [r2, #0]
 8005c76:	2100      	movs	r1, #0
 8005c78:	0028      	movs	r0, r5
 8005c7a:	6862      	ldr	r2, [r4, #4]
 8005c7c:	f000 f856 	bl	8005d2c <memchr>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d001      	beq.n	8005c88 <_printf_i+0x1bc>
 8005c84:	1b40      	subs	r0, r0, r5
 8005c86:	6060      	str	r0, [r4, #4]
 8005c88:	6863      	ldr	r3, [r4, #4]
 8005c8a:	6123      	str	r3, [r4, #16]
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	9a03      	ldr	r2, [sp, #12]
 8005c90:	7013      	strb	r3, [r2, #0]
 8005c92:	e7ac      	b.n	8005bee <_printf_i+0x122>
 8005c94:	002a      	movs	r2, r5
 8005c96:	6923      	ldr	r3, [r4, #16]
 8005c98:	9906      	ldr	r1, [sp, #24]
 8005c9a:	9805      	ldr	r0, [sp, #20]
 8005c9c:	9d07      	ldr	r5, [sp, #28]
 8005c9e:	47a8      	blx	r5
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d0ae      	beq.n	8005c02 <_printf_i+0x136>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	079b      	lsls	r3, r3, #30
 8005ca8:	d415      	bmi.n	8005cd6 <_printf_i+0x20a>
 8005caa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cac:	68e0      	ldr	r0, [r4, #12]
 8005cae:	4298      	cmp	r0, r3
 8005cb0:	daa9      	bge.n	8005c06 <_printf_i+0x13a>
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	e7a7      	b.n	8005c06 <_printf_i+0x13a>
 8005cb6:	0022      	movs	r2, r4
 8005cb8:	2301      	movs	r3, #1
 8005cba:	9906      	ldr	r1, [sp, #24]
 8005cbc:	9805      	ldr	r0, [sp, #20]
 8005cbe:	9e07      	ldr	r6, [sp, #28]
 8005cc0:	3219      	adds	r2, #25
 8005cc2:	47b0      	blx	r6
 8005cc4:	3001      	adds	r0, #1
 8005cc6:	d09c      	beq.n	8005c02 <_printf_i+0x136>
 8005cc8:	3501      	adds	r5, #1
 8005cca:	68e3      	ldr	r3, [r4, #12]
 8005ccc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cce:	1a9b      	subs	r3, r3, r2
 8005cd0:	42ab      	cmp	r3, r5
 8005cd2:	dcf0      	bgt.n	8005cb6 <_printf_i+0x1ea>
 8005cd4:	e7e9      	b.n	8005caa <_printf_i+0x1de>
 8005cd6:	2500      	movs	r5, #0
 8005cd8:	e7f7      	b.n	8005cca <_printf_i+0x1fe>
 8005cda:	46c0      	nop			@ (mov r8, r8)
 8005cdc:	08006185 	.word	0x08006185
 8005ce0:	08006196 	.word	0x08006196

08005ce4 <memmove>:
 8005ce4:	b510      	push	{r4, lr}
 8005ce6:	4288      	cmp	r0, r1
 8005ce8:	d902      	bls.n	8005cf0 <memmove+0xc>
 8005cea:	188b      	adds	r3, r1, r2
 8005cec:	4298      	cmp	r0, r3
 8005cee:	d308      	bcc.n	8005d02 <memmove+0x1e>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d007      	beq.n	8005d06 <memmove+0x22>
 8005cf6:	5ccc      	ldrb	r4, [r1, r3]
 8005cf8:	54c4      	strb	r4, [r0, r3]
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	e7f9      	b.n	8005cf2 <memmove+0xe>
 8005cfe:	5c8b      	ldrb	r3, [r1, r2]
 8005d00:	5483      	strb	r3, [r0, r2]
 8005d02:	3a01      	subs	r2, #1
 8005d04:	d2fb      	bcs.n	8005cfe <memmove+0x1a>
 8005d06:	bd10      	pop	{r4, pc}

08005d08 <_sbrk_r>:
 8005d08:	2300      	movs	r3, #0
 8005d0a:	b570      	push	{r4, r5, r6, lr}
 8005d0c:	4d06      	ldr	r5, [pc, #24]	@ (8005d28 <_sbrk_r+0x20>)
 8005d0e:	0004      	movs	r4, r0
 8005d10:	0008      	movs	r0, r1
 8005d12:	602b      	str	r3, [r5, #0]
 8005d14:	f7fb f9d0 	bl	80010b8 <_sbrk>
 8005d18:	1c43      	adds	r3, r0, #1
 8005d1a:	d103      	bne.n	8005d24 <_sbrk_r+0x1c>
 8005d1c:	682b      	ldr	r3, [r5, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d000      	beq.n	8005d24 <_sbrk_r+0x1c>
 8005d22:	6023      	str	r3, [r4, #0]
 8005d24:	bd70      	pop	{r4, r5, r6, pc}
 8005d26:	46c0      	nop			@ (mov r8, r8)
 8005d28:	20000358 	.word	0x20000358

08005d2c <memchr>:
 8005d2c:	b2c9      	uxtb	r1, r1
 8005d2e:	1882      	adds	r2, r0, r2
 8005d30:	4290      	cmp	r0, r2
 8005d32:	d101      	bne.n	8005d38 <memchr+0xc>
 8005d34:	2000      	movs	r0, #0
 8005d36:	4770      	bx	lr
 8005d38:	7803      	ldrb	r3, [r0, #0]
 8005d3a:	428b      	cmp	r3, r1
 8005d3c:	d0fb      	beq.n	8005d36 <memchr+0xa>
 8005d3e:	3001      	adds	r0, #1
 8005d40:	e7f6      	b.n	8005d30 <memchr+0x4>

08005d42 <_realloc_r>:
 8005d42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d44:	0006      	movs	r6, r0
 8005d46:	000c      	movs	r4, r1
 8005d48:	0015      	movs	r5, r2
 8005d4a:	2900      	cmp	r1, #0
 8005d4c:	d105      	bne.n	8005d5a <_realloc_r+0x18>
 8005d4e:	0011      	movs	r1, r2
 8005d50:	f7ff fc5e 	bl	8005610 <_malloc_r>
 8005d54:	0004      	movs	r4, r0
 8005d56:	0020      	movs	r0, r4
 8005d58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d5a:	2a00      	cmp	r2, #0
 8005d5c:	d103      	bne.n	8005d66 <_realloc_r+0x24>
 8005d5e:	f7ff fbeb 	bl	8005538 <_free_r>
 8005d62:	002c      	movs	r4, r5
 8005d64:	e7f7      	b.n	8005d56 <_realloc_r+0x14>
 8005d66:	f000 f81c 	bl	8005da2 <_malloc_usable_size_r>
 8005d6a:	0007      	movs	r7, r0
 8005d6c:	4285      	cmp	r5, r0
 8005d6e:	d802      	bhi.n	8005d76 <_realloc_r+0x34>
 8005d70:	0843      	lsrs	r3, r0, #1
 8005d72:	42ab      	cmp	r3, r5
 8005d74:	d3ef      	bcc.n	8005d56 <_realloc_r+0x14>
 8005d76:	0029      	movs	r1, r5
 8005d78:	0030      	movs	r0, r6
 8005d7a:	f7ff fc49 	bl	8005610 <_malloc_r>
 8005d7e:	9001      	str	r0, [sp, #4]
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d101      	bne.n	8005d88 <_realloc_r+0x46>
 8005d84:	9c01      	ldr	r4, [sp, #4]
 8005d86:	e7e6      	b.n	8005d56 <_realloc_r+0x14>
 8005d88:	002a      	movs	r2, r5
 8005d8a:	42bd      	cmp	r5, r7
 8005d8c:	d900      	bls.n	8005d90 <_realloc_r+0x4e>
 8005d8e:	003a      	movs	r2, r7
 8005d90:	0021      	movs	r1, r4
 8005d92:	9801      	ldr	r0, [sp, #4]
 8005d94:	f7ff fbc6 	bl	8005524 <memcpy>
 8005d98:	0021      	movs	r1, r4
 8005d9a:	0030      	movs	r0, r6
 8005d9c:	f7ff fbcc 	bl	8005538 <_free_r>
 8005da0:	e7f0      	b.n	8005d84 <_realloc_r+0x42>

08005da2 <_malloc_usable_size_r>:
 8005da2:	1f0b      	subs	r3, r1, #4
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	1f18      	subs	r0, r3, #4
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	da01      	bge.n	8005db0 <_malloc_usable_size_r+0xe>
 8005dac:	580b      	ldr	r3, [r1, r0]
 8005dae:	18c0      	adds	r0, r0, r3
 8005db0:	4770      	bx	lr
	...

08005db4 <_init>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	46c0      	nop			@ (mov r8, r8)
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr

08005dc0 <_fini>:
 8005dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc2:	46c0      	nop			@ (mov r8, r8)
 8005dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dc6:	bc08      	pop	{r3}
 8005dc8:	469e      	mov	lr, r3
 8005dca:	4770      	bx	lr
