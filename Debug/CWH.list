
CWH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a44  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08004b04  08004b04  00005b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ec8  08004ec8  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004ec8  08004ec8  00005ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ed0  08004ed0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ed0  08004ed0  00005ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ed4  08004ed4  00005ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004ed8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000005c  08004f34  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08004f34  00006350  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e9d9  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022ac  00000000  00000000  00014a5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00016d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a69  00000000  00000000  00017a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015c47  00000000  00000000  000184d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b41  00000000  00000000  0002e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086022  00000000  00000000  0003ec61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4c83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003500  00000000  00000000  000c4cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000c81c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004aec 	.word	0x08004aec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08004aec 	.word	0x08004aec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <ATC_SendReceive>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int ATC_SendReceive(ATC_HandleTypeDef *lora, const char *command, uint32_t command_len, char *response, uint32_t response_size, uint32_t timeout_ms, const char *expected_response)
{
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b089      	sub	sp, #36	@ 0x24
 8000474:	af02      	add	r7, sp, #8
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
 800047c:	603b      	str	r3, [r7, #0]
    HAL_StatusTypeDef status;

    if (lora == NULL || lora->huart == NULL || command == NULL || command_len == 0) {
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d009      	beq.n	8000498 <ATC_SendReceive+0x28>
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d005      	beq.n	8000498 <ATC_SendReceive+0x28>
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <ATC_SendReceive+0x28>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d102      	bne.n	800049e <ATC_SendReceive+0x2e>
        return -1; // Invalid parameters
 8000498:	2301      	movs	r3, #1
 800049a:	425b      	negs	r3, r3
 800049c:	e054      	b.n	8000548 <ATC_SendReceive+0xd8>
    }

    status = HAL_UART_Transmit(lora->huart, (uint8_t *)command, command_len, timeout_ms);
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	6818      	ldr	r0, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	2517      	movs	r5, #23
 80004a8:	197c      	adds	r4, r7, r5
 80004aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004ac:	68b9      	ldr	r1, [r7, #8]
 80004ae:	f002 ff8f 	bl	80033d0 <HAL_UART_Transmit>
 80004b2:	0003      	movs	r3, r0
 80004b4:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80004b6:	197b      	adds	r3, r7, r5
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d002      	beq.n	80004c4 <ATC_SendReceive+0x54>
        return -2; // Communication error
 80004be:	2302      	movs	r3, #2
 80004c0:	425b      	negs	r3, r3
 80004c2:	e041      	b.n	8000548 <ATC_SendReceive+0xd8>
    }

    if (response != NULL && response_size > 0) {
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d02c      	beq.n	8000524 <ATC_SendReceive+0xb4>
 80004ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d029      	beq.n	8000524 <ATC_SendReceive+0xb4>
        uint16_t rx_len = 0;
 80004d0:	2514      	movs	r5, #20
 80004d2:	197b      	adds	r3, r7, r5
 80004d4:	2200      	movs	r2, #0
 80004d6:	801a      	strh	r2, [r3, #0]
        memset(response, 0, response_size);
 80004d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	2100      	movs	r1, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f003 fe74 	bl	80041cc <memset>
        status = HAL_UARTEx_ReceiveToIdle(lora->huart, (uint8_t *)response,
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	6818      	ldr	r0, [r3, #0]
 80004e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	3b01      	subs	r3, #1
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	2617      	movs	r6, #23
 80004f2:	19bc      	adds	r4, r7, r6
 80004f4:	197d      	adds	r5, r7, r5
 80004f6:	6839      	ldr	r1, [r7, #0]
 80004f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	002b      	movs	r3, r5
 80004fe:	f003 fcd5 	bl	8003eac <HAL_UARTEx_ReceiveToIdle>
 8000502:	0003      	movs	r3, r0
 8000504:	7023      	strb	r3, [r4, #0]
                                          response_size - 1, &rx_len, timeout_ms);
        if (status != HAL_OK) {
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d002      	beq.n	8000514 <ATC_SendReceive+0xa4>
            return -4; // Timeout or receive error
 800050e:	2304      	movs	r3, #4
 8000510:	425b      	negs	r3, r3
 8000512:	e019      	b.n	8000548 <ATC_SendReceive+0xd8>
        }
        response[rx_len] = '\0';
 8000514:	2314      	movs	r3, #20
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	001a      	movs	r2, r3
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	189b      	adds	r3, r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
    }

    if (expected_response != NULL && response != NULL) {
 8000524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000526:	2b00      	cmp	r3, #0
 8000528:	d00d      	beq.n	8000546 <ATC_SendReceive+0xd6>
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00a      	beq.n	8000546 <ATC_SendReceive+0xd6>
        if (strstr(response, expected_response) == NULL) {
 8000530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	0011      	movs	r1, r2
 8000536:	0018      	movs	r0, r3
 8000538:	f003 fe50 	bl	80041dc <strstr>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d102      	bne.n	8000546 <ATC_SendReceive+0xd6>
            return -3; // Unexpected response
 8000540:	2303      	movs	r3, #3
 8000542:	425b      	negs	r3, r3
 8000544:	e000      	b.n	8000548 <ATC_SendReceive+0xd8>
        }
    }

    return 0; // Success
 8000546:	2300      	movs	r3, #0
}
 8000548:	0018      	movs	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	b007      	add	sp, #28
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000550 <send_data_and_get_response>:
// Wrapper function to send data and get response
LoRaWAN_Error_t send_data_and_get_response(ATC_HandleTypeDef *lora, const char *data, char *response, uint32_t response_size, uint32_t timeout_ms, const char *expected_response)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b08b      	sub	sp, #44	@ 0x2c
 8000554:	af04      	add	r7, sp, #16
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
 800055c:	603b      	str	r3, [r7, #0]
    if (lora == NULL || lora->huart == NULL || data == NULL || response == NULL || response_size == 0) {
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00c      	beq.n	800057e <send_data_and_get_response+0x2e>
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d008      	beq.n	800057e <send_data_and_get_response+0x2e>
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <send_data_and_get_response+0x2e>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d002      	beq.n	800057e <send_data_and_get_response+0x2e>
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d102      	bne.n	8000584 <send_data_and_get_response+0x34>
        return LORAWAN_ERROR_INVALID_PARAM;
 800057e:	2301      	movs	r3, #1
 8000580:	425b      	negs	r3, r3
 8000582:	e042      	b.n	800060a <send_data_and_get_response+0xba>
    }

    ATC_SendReceive(lora, "AT\r\n", strlen(4), response, response_size, timeout_ms, expected_response);
 8000584:	2004      	movs	r0, #4
 8000586:	f7ff fdbf 	bl	8000108 <strlen>
 800058a:	0004      	movs	r4, r0
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	4921      	ldr	r1, [pc, #132]	@ (8000614 <send_data_and_get_response+0xc4>)
 8000590:	68f8      	ldr	r0, [r7, #12]
 8000592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000594:	9302      	str	r3, [sp, #8]
 8000596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000598:	9301      	str	r3, [sp, #4]
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	9300      	str	r3, [sp, #0]
 800059e:	0013      	movs	r3, r2
 80005a0:	0022      	movs	r2, r4
 80005a2:	f7ff ff65 	bl	8000470 <ATC_SendReceive>
    HAL_Delay(300);
 80005a6:	2396      	movs	r3, #150	@ 0x96
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 fe36 	bl	800121c <HAL_Delay>
    int result = ATC_SendReceive(lora, data, strlen(data), response, response_size, timeout_ms, expected_response);
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	0018      	movs	r0, r3
 80005b4:	f7ff fda8 	bl	8000108 <strlen>
 80005b8:	0004      	movs	r4, r0
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	68b9      	ldr	r1, [r7, #8]
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005c2:	9302      	str	r3, [sp, #8]
 80005c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	0013      	movs	r3, r2
 80005ce:	0022      	movs	r2, r4
 80005d0:	f7ff ff4e 	bl	8000470 <ATC_SendReceive>
 80005d4:	0003      	movs	r3, r0
 80005d6:	617b      	str	r3, [r7, #20]

    if (result == -1) {
 80005d8:	697b      	ldr	r3, [r7, #20]
 80005da:	3301      	adds	r3, #1
 80005dc:	d102      	bne.n	80005e4 <send_data_and_get_response+0x94>
        return LORAWAN_ERROR_INVALID_PARAM;
 80005de:	2301      	movs	r3, #1
 80005e0:	425b      	negs	r3, r3
 80005e2:	e012      	b.n	800060a <send_data_and_get_response+0xba>
    } else if (result == -2) {
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	3302      	adds	r3, #2
 80005e8:	d102      	bne.n	80005f0 <send_data_and_get_response+0xa0>
        return LORAWAN_ERROR_COMMUNICATION;
 80005ea:	2302      	movs	r3, #2
 80005ec:	425b      	negs	r3, r3
 80005ee:	e00c      	b.n	800060a <send_data_and_get_response+0xba>
    } else if (result == -3) {
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	3303      	adds	r3, #3
 80005f4:	d102      	bne.n	80005fc <send_data_and_get_response+0xac>
        return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 80005f6:	2303      	movs	r3, #3
 80005f8:	425b      	negs	r3, r3
 80005fa:	e006      	b.n	800060a <send_data_and_get_response+0xba>
    } else if (result == -4) {
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	3304      	adds	r3, #4
 8000600:	d102      	bne.n	8000608 <send_data_and_get_response+0xb8>
        return LORAWAN_ERROR_TIMEOUT;
 8000602:	2304      	movs	r3, #4
 8000604:	425b      	negs	r3, r3
 8000606:	e000      	b.n	800060a <send_data_and_get_response+0xba>
    }

    return LORAWAN_ERROR_OK;
 8000608:	2300      	movs	r3, #0
}
 800060a:	0018      	movs	r0, r3
 800060c:	46bd      	mov	sp, r7
 800060e:	b007      	add	sp, #28
 8000610:	bd90      	pop	{r4, r7, pc}
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	08004b04 	.word	0x08004b04

08000618 <join_lora_network>:
LoRaWAN_Error_t join_lora_network(ATC_HandleTypeDef *lora)
{
 8000618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800061a:	b0c7      	sub	sp, #284	@ 0x11c
 800061c:	af02      	add	r7, sp, #8
 800061e:	6078      	str	r0, [r7, #4]
    char response[AT_RESPONSE_BUFFER_SIZE];
    LoRaWAN_Error_t status;

    status = send_data_and_get_response(lora, "AT+JOIN\r\n", response, AT_RESPONSE_BUFFER_SIZE, JOIN_TIMEOUT_MS, "OK");
 8000620:	2610      	movs	r6, #16
 8000622:	36ff      	adds	r6, #255	@ 0xff
 8000624:	19bc      	adds	r4, r7, r6
 8000626:	2380      	movs	r3, #128	@ 0x80
 8000628:	005d      	lsls	r5, r3, #1
 800062a:	230c      	movs	r3, #12
 800062c:	18fa      	adds	r2, r7, r3
 800062e:	4940      	ldr	r1, [pc, #256]	@ (8000730 <join_lora_network+0x118>)
 8000630:	6878      	ldr	r0, [r7, #4]
 8000632:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <join_lora_network+0x11c>)
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	4b40      	ldr	r3, [pc, #256]	@ (8000738 <join_lora_network+0x120>)
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	002b      	movs	r3, r5
 800063c:	f7ff ff88 	bl	8000550 <send_data_and_get_response>
 8000640:	0003      	movs	r3, r0
 8000642:	7023      	strb	r3, [r4, #0]
    if (status != LORAWAN_ERROR_OK) {
 8000644:	19bb      	adds	r3, r7, r6
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	b25b      	sxtb	r3, r3
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00b      	beq.n	8000666 <join_lora_network+0x4e>
        ConsolePrintf("Failed to send AT+JOIN: %d\r\n", status);
 800064e:	19bb      	adds	r3, r7, r6
 8000650:	2200      	movs	r2, #0
 8000652:	569a      	ldrsb	r2, [r3, r2]
 8000654:	4b39      	ldr	r3, [pc, #228]	@ (800073c <join_lora_network+0x124>)
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f000 fb2f 	bl	8000cbc <ConsolePrintf>
        return status;
 800065e:	19bb      	adds	r3, r7, r6
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	b25b      	sxtb	r3, r3
 8000664:	e05f      	b.n	8000726 <join_lora_network+0x10e>
    }

    memset(response, 0, AT_RESPONSE_BUFFER_SIZE);
 8000666:	2380      	movs	r3, #128	@ 0x80
 8000668:	005a      	lsls	r2, r3, #1
 800066a:	260c      	movs	r6, #12
 800066c:	19bb      	adds	r3, r7, r6
 800066e:	2100      	movs	r1, #0
 8000670:	0018      	movs	r0, r3
 8000672:	f003 fdab 	bl	80041cc <memset>
    uint16_t rx_len = 0;
 8000676:	4b32      	ldr	r3, [pc, #200]	@ (8000740 <join_lora_network+0x128>)
 8000678:	2288      	movs	r2, #136	@ 0x88
 800067a:	0052      	lsls	r2, r2, #1
 800067c:	189b      	adds	r3, r3, r2
 800067e:	19db      	adds	r3, r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef hal_status = HAL_UARTEx_ReceiveToIdle(lora->huart,
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	6818      	ldr	r0, [r3, #0]
 8000688:	2587      	movs	r5, #135	@ 0x87
 800068a:	006d      	lsls	r5, r5, #1
 800068c:	197c      	adds	r4, r7, r5
 800068e:	230a      	movs	r3, #10
 8000690:	18fb      	adds	r3, r7, r3
 8000692:	19b9      	adds	r1, r7, r6
 8000694:	4a28      	ldr	r2, [pc, #160]	@ (8000738 <join_lora_network+0x120>)
 8000696:	9200      	str	r2, [sp, #0]
 8000698:	22ff      	movs	r2, #255	@ 0xff
 800069a:	f003 fc07 	bl	8003eac <HAL_UARTEx_ReceiveToIdle>
 800069e:	0003      	movs	r3, r0
 80006a0:	7023      	strb	r3, [r4, #0]
                                            (uint8_t *)response,
                                            AT_RESPONSE_BUFFER_SIZE - 1,
                                            &rx_len,
                                            JOIN_TIMEOUT_MS);
    if (hal_status != HAL_OK) {
 80006a2:	197b      	adds	r3, r7, r5
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d009      	beq.n	80006be <join_lora_network+0xa6>
        ConsolePrintf("Failed to receive join response: %d\r\n", hal_status);
 80006aa:	197b      	adds	r3, r7, r5
 80006ac:	781a      	ldrb	r2, [r3, #0]
 80006ae:	4b25      	ldr	r3, [pc, #148]	@ (8000744 <join_lora_network+0x12c>)
 80006b0:	0011      	movs	r1, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fb02 	bl	8000cbc <ConsolePrintf>
        return LORAWAN_ERROR_TIMEOUT;
 80006b8:	2304      	movs	r3, #4
 80006ba:	425b      	negs	r3, r3
 80006bc:	e033      	b.n	8000726 <join_lora_network+0x10e>
    }
    response[rx_len] = '\0';
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <join_lora_network+0x128>)
 80006c0:	2188      	movs	r1, #136	@ 0x88
 80006c2:	0049      	lsls	r1, r1, #1
 80006c4:	185b      	adds	r3, r3, r1
 80006c6:	19db      	adds	r3, r3, r7
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	001a      	movs	r2, r3
 80006cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <join_lora_network+0x130>)
 80006ce:	185b      	adds	r3, r3, r1
 80006d0:	19db      	adds	r3, r3, r7
 80006d2:	2100      	movs	r1, #0
 80006d4:	5499      	strb	r1, [r3, r2]

    if (strstr(response, "JOINED") != NULL) {
 80006d6:	4a1d      	ldr	r2, [pc, #116]	@ (800074c <join_lora_network+0x134>)
 80006d8:	230c      	movs	r3, #12
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f003 fd7c 	bl	80041dc <strstr>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d005      	beq.n	80006f4 <join_lora_network+0xdc>
        ConsolePrintf("Network joined successfullyrr\r\n");
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <join_lora_network+0x138>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fae6 	bl	8000cbc <ConsolePrintf>
        return LORAWAN_ERROR_OK;
 80006f0:	2300      	movs	r3, #0
 80006f2:	e018      	b.n	8000726 <join_lora_network+0x10e>
    } else if (strstr(response, "JOIN FAILED") != NULL) {
 80006f4:	4a17      	ldr	r2, [pc, #92]	@ (8000754 <join_lora_network+0x13c>)
 80006f6:	230c      	movs	r3, #12
 80006f8:	18fb      	adds	r3, r7, r3
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f003 fd6d 	bl	80041dc <strstr>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d006      	beq.n	8000714 <join_lora_network+0xfc>
        ConsolePrintf("Failed to join network\r\n");
 8000706:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <join_lora_network+0x140>)
 8000708:	0018      	movs	r0, r3
 800070a:	f000 fad7 	bl	8000cbc <ConsolePrintf>
        return LORAWAN_ERROR_NOT_JOINED;
 800070e:	2305      	movs	r3, #5
 8000710:	425b      	negs	r3, r3
 8000712:	e008      	b.n	8000726 <join_lora_network+0x10e>
    } else {
        ConsolePrintf("Unexpected join response: %s\r\n", response);
 8000714:	230c      	movs	r3, #12
 8000716:	18fa      	adds	r2, r7, r3
 8000718:	4b10      	ldr	r3, [pc, #64]	@ (800075c <join_lora_network+0x144>)
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f000 facd 	bl	8000cbc <ConsolePrintf>
        return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 8000722:	2303      	movs	r3, #3
 8000724:	425b      	negs	r3, r3
    }
}
 8000726:	0018      	movs	r0, r3
 8000728:	46bd      	mov	sp, r7
 800072a:	b045      	add	sp, #276	@ 0x114
 800072c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800072e:	46c0      	nop			@ (mov r8, r8)
 8000730:	08004b0c 	.word	0x08004b0c
 8000734:	08004b18 	.word	0x08004b18
 8000738:	00002710 	.word	0x00002710
 800073c:	08004b1c 	.word	0x08004b1c
 8000740:	fffffefa 	.word	0xfffffefa
 8000744:	08004b3c 	.word	0x08004b3c
 8000748:	fffffefc 	.word	0xfffffefc
 800074c:	08004b64 	.word	0x08004b64
 8000750:	08004b6c 	.word	0x08004b6c
 8000754:	08004b8c 	.word	0x08004b8c
 8000758:	08004b98 	.word	0x08004b98
 800075c:	08004bb4 	.word	0x08004bb4

08000760 <RTC_IRQHandler>:




void RTC_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000764:	4b03      	ldr	r3, [pc, #12]	@ (8000774 <RTC_IRQHandler+0x14>)
 8000766:	0018      	movs	r0, r3
 8000768:	f002 fd70 	bl	800324c <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 800076c:	46c0      	nop			@ (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	200000cc 	.word	0x200000cc

08000778 <RTC_WakeUp_Init>:

void RTC_WakeUp_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
	ConsolePrintf("Starting RTC Wake-Up Timer configuration\r\n");
 800077c:	4b15      	ldr	r3, [pc, #84]	@ (80007d4 <RTC_WakeUp_Init+0x5c>)
 800077e:	0018      	movs	r0, r3
 8000780:	f000 fa9c 	bl	8000cbc <ConsolePrintf>

	// Disable the Wake-Up Timer before configuring
	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <RTC_WakeUp_Init+0x60>)
 8000786:	0018      	movs	r0, r3
 8000788:	f002 fcfc 	bl	8003184 <HAL_RTCEx_DeactivateWakeUpTimer>
	ConsolePrintf("RTC Wake-Up Timer disabled\r\n");
 800078c:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <RTC_WakeUp_Init+0x64>)
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fa94 	bl	8000cbc <ConsolePrintf>

	// Configure Wake-Up Timer for 60 seconds using LSI (~40 kHz)
	// With AsynchPrediv = 127, SynchPrediv = 255: CK_SPRE = 40,000 / (128 * 256) = ~1.22 Hz
	// For ~60 seconds: WakeUpCounter = (60 * 1.22) - 1 = ~72
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000794:	4b10      	ldr	r3, [pc, #64]	@ (80007d8 <RTC_WakeUp_Init+0x60>)
 8000796:	2204      	movs	r2, #4
 8000798:	213b      	movs	r1, #59	@ 0x3b
 800079a:	0018      	movs	r0, r3
 800079c:	f002 fc1a 	bl	8002fd4 <HAL_RTCEx_SetWakeUpTimer_IT>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d004      	beq.n	80007ae <RTC_WakeUp_Init+0x36>
	{
		ConsolePrintf("RTC Wake-Up Timer Init Failed\r\n");
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <RTC_WakeUp_Init+0x68>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 fa88 	bl	8000cbc <ConsolePrintf>
 80007ac:	e003      	b.n	80007b6 <RTC_WakeUp_Init+0x3e>

	}
	else
	{
		ConsolePrintf("RTC Wake-Up Timer Initialized for ~60 seconds\r\n");
 80007ae:	4b0d      	ldr	r3, [pc, #52]	@ (80007e4 <RTC_WakeUp_Init+0x6c>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 fa83 	bl	8000cbc <ConsolePrintf>
	}

	// Enable RTC Wake-Up interrupt in NVIC
	HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	2002      	movs	r0, #2
 80007bc:	f000 fe1a 	bl	80013f4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(RTC_IRQn);
 80007c0:	2002      	movs	r0, #2
 80007c2:	f000 fe2c 	bl	800141e <HAL_NVIC_EnableIRQ>
	ConsolePrintf("RTC Wake-Up interrupt enabled in NVIC\r\n");
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <RTC_WakeUp_Init+0x70>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fa77 	bl	8000cbc <ConsolePrintf>
}
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	08004bd4 	.word	0x08004bd4
 80007d8:	200000cc 	.word	0x200000cc
 80007dc:	08004c00 	.word	0x08004c00
 80007e0:	08004c20 	.word	0x08004c20
 80007e4:	08004c40 	.word	0x08004c40
 80007e8:	08004c70 	.word	0x08004c70

080007ec <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
    // Reconfigure system clock after wake-up
    SystemClock_Config();
 80007f4:	f000 f8d6 	bl	80009a4 <SystemClock_Config>

    // Print message
    ConsolePrintf("Woke up at %s\r\n", "1-minute interval");
 80007f8:	4a04      	ldr	r2, [pc, #16]	@ (800080c <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 80007fa:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 80007fc:	0011      	movs	r1, r2
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 fa5c 	bl	8000cbc <ConsolePrintf>
}
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b002      	add	sp, #8
 800080a:	bd80      	pop	{r7, pc}
 800080c:	08004c98 	.word	0x08004c98
 8000810:	08004cac 	.word	0x08004cac

08000814 <Enter_Stop_Mode>:

void Enter_Stop_Mode(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
        ConsolePrintf("Preparing to enter Stop mode\r\n");
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <Enter_Stop_Mode+0x50>)
 800081a:	0018      	movs	r0, r3
 800081c:	f000 fa4e 	bl	8000cbc <ConsolePrintf>

    // Clear Wake-Up flag
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8000820:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <Enter_Stop_Mode+0x54>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	22ff      	movs	r2, #255	@ 0xff
 8000828:	401a      	ands	r2, r3
 800082a:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <Enter_Stop_Mode+0x54>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	490f      	ldr	r1, [pc, #60]	@ (800086c <Enter_Stop_Mode+0x58>)
 8000830:	430a      	orrs	r2, r1
 8000832:	60da      	str	r2, [r3, #12]
    ConsolePrintf("RTC Wake-Up flag cleared\r\n");
 8000834:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <Enter_Stop_Mode+0x5c>)
 8000836:	0018      	movs	r0, r3
 8000838:	f000 fa40 	bl	8000cbc <ConsolePrintf>

    // Enter Stop mode (low-power mode)
    ConsolePrintf("Entering Stop mode\r\n");
 800083c:	4b0d      	ldr	r3, [pc, #52]	@ (8000874 <Enter_Stop_Mode+0x60>)
 800083e:	0018      	movs	r0, r3
 8000840:	f000 fa3c 	bl	8000cbc <ConsolePrintf>
    /* Suspend SysTick to prevent it from waking up the MCU immediately */
    HAL_SuspendTick();
 8000844:	f000 fd0e 	bl	8001264 <HAL_SuspendTick>
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000848:	2101      	movs	r1, #1
 800084a:	2001      	movs	r0, #1
 800084c:	f001 f9f0 	bl	8001c30 <HAL_PWR_EnterSTOPMode>
    /* Resume SysTick after waking up */
    HAL_ResumeTick();
 8000850:	f000 fd16 	bl	8001280 <HAL_ResumeTick>
    ConsolePrintf("Exited Stop mode\r\n");
 8000854:	4b08      	ldr	r3, [pc, #32]	@ (8000878 <Enter_Stop_Mode+0x64>)
 8000856:	0018      	movs	r0, r3
 8000858:	f000 fa30 	bl	8000cbc <ConsolePrintf>
}
 800085c:	46c0      	nop			@ (mov r8, r8)
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	08004cbc 	.word	0x08004cbc
 8000868:	200000cc 	.word	0x200000cc
 800086c:	fffffb7f 	.word	0xfffffb7f
 8000870:	08004cdc 	.word	0x08004cdc
 8000874:	08004cf8 	.word	0x08004cf8
 8000878:	08004d10 	.word	0x08004d10

0800087c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000882:	f000 fc5b 	bl	800113c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(10000);
 8000886:	4b3c      	ldr	r3, [pc, #240]	@ (8000978 <main+0xfc>)
 8000888:	0018      	movs	r0, r3
 800088a:	f000 fcc7 	bl	800121c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800088e:	f000 f889 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000892:	f000 f9cf 	bl	8000c34 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000896:	f000 f8fd 	bl	8000a94 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800089a:	f000 f965 	bl	8000b68 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800089e:	f000 f939 	bl	8000b14 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80008a2:	f000 f997 	bl	8000bd4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  RTC_WakeUp_Init();
 80008a6:	f7ff ff67 	bl	8000778 <RTC_WakeUp_Init>

  ATC_HandleTypeDef lora;
  lora.huart = &huart2;
 80008aa:	4b34      	ldr	r3, [pc, #208]	@ (800097c <main+0x100>)
 80008ac:	607b      	str	r3, [r7, #4]

  join_lora_network(&lora);
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	0018      	movs	r0, r3
 80008b2:	f7ff feb1 	bl	8000618 <join_lora_network>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ConsolePrintf("Entering main loop\r\n");
 80008b6:	4b32      	ldr	r3, [pc, #200]	@ (8000980 <main+0x104>)
 80008b8:	0018      	movs	r0, r3
 80008ba:	f000 f9ff 	bl	8000cbc <ConsolePrintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ConsolePrintf("Going to sleep...\r\n");
 80008be:	4b31      	ldr	r3, [pc, #196]	@ (8000984 <main+0x108>)
 80008c0:	0018      	movs	r0, r3
 80008c2:	f000 f9fb 	bl	8000cbc <ConsolePrintf>

	  		HAL_I2C_DeInit(&hi2c1);
 80008c6:	4b30      	ldr	r3, [pc, #192]	@ (8000988 <main+0x10c>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f001 f8e9 	bl	8001aa0 <HAL_I2C_DeInit>
	  		HAL_UART_DeInit(&huart1);
 80008ce:	4b2f      	ldr	r3, [pc, #188]	@ (800098c <main+0x110>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f002 fd3f 	bl	8003354 <HAL_UART_DeInit>
	  		// De-init LPUART1 (LoRaWAN UART)
	  		HAL_UART_DeInit(&huart2);
 80008d6:	4b29      	ldr	r3, [pc, #164]	@ (800097c <main+0x100>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f002 fd3b 	bl	8003354 <HAL_UART_DeInit>

	  		// Disable LPUART wake-up from Stop mode
	  		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE); // Disable RXNE interrupt
 80008de:	4b27      	ldr	r3, [pc, #156]	@ (800097c <main+0x100>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b25      	ldr	r3, [pc, #148]	@ (800097c <main+0x100>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2120      	movs	r1, #32
 80008ea:	438a      	bics	r2, r1
 80008ec:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_DISABLE_IT(&huart2, UART_IT_IDLE); // Disable IDLE interrupt
 80008ee:	4b23      	ldr	r3, [pc, #140]	@ (800097c <main+0x100>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b21      	ldr	r3, [pc, #132]	@ (800097c <main+0x100>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2110      	movs	r1, #16
 80008fa:	438a      	bics	r2, r1
 80008fc:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_CLEAR_FLAG(&huart2, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 80008fe:	4b1f      	ldr	r3, [pc, #124]	@ (800097c <main+0x100>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	2230      	movs	r2, #48	@ 0x30
 8000904:	621a      	str	r2, [r3, #32]

	  		__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE); // Disable RXNE interrupt
 8000906:	4b21      	ldr	r3, [pc, #132]	@ (800098c <main+0x110>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <main+0x110>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2120      	movs	r1, #32
 8000912:	438a      	bics	r2, r1
 8000914:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE); // Disable IDLE interrupt
 8000916:	4b1d      	ldr	r3, [pc, #116]	@ (800098c <main+0x110>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <main+0x110>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2110      	movs	r1, #16
 8000922:	438a      	bics	r2, r1
 8000924:	601a      	str	r2, [r3, #0]
	  		__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 8000926:	4b19      	ldr	r3, [pc, #100]	@ (800098c <main+0x110>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2230      	movs	r2, #48	@ 0x30
 800092c:	621a      	str	r2, [r3, #32]


	  		// Enter Stop mode
	  		Enter_Stop_Mode();  // Wakes up via RTC interrupt
 800092e:	f7ff ff71 	bl	8000814 <Enter_Stop_Mode>

	  		// === Code resumes after wake-up ===
	  		ConsolePrintf("Resumed after wake-up\r\n");
 8000932:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <main+0x114>)
 8000934:	0018      	movs	r0, r3
 8000936:	f000 f9c1 	bl	8000cbc <ConsolePrintf>

	  		// Reconfigure clocks
	  		SystemClock_Config();
 800093a:	f000 f833 	bl	80009a4 <SystemClock_Config>
	  		ConsolePrintf("System clock reconfigured\r\n");
 800093e:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <main+0x118>)
 8000940:	0018      	movs	r0, r3
 8000942:	f000 f9bb 	bl	8000cbc <ConsolePrintf>

	  		// Reinit UART
	  		MX_USART1_UART_Init();
 8000946:	f000 f90f 	bl	8000b68 <MX_USART1_UART_Init>
	  		ConsolePrintf("UART reinitialized\r\n");
 800094a:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <main+0x11c>)
 800094c:	0018      	movs	r0, r3
 800094e:	f000 f9b5 	bl	8000cbc <ConsolePrintf>

	  		MX_USART2_UART_Init();
 8000952:	f000 f93f 	bl	8000bd4 <MX_USART2_UART_Init>
	  		ConsolePrintf("LPUART1 (lora) reinitialized\r\n");
 8000956:	4b11      	ldr	r3, [pc, #68]	@ (800099c <main+0x120>)
 8000958:	0018      	movs	r0, r3
 800095a:	f000 f9af 	bl	8000cbc <ConsolePrintf>

	  		// Reinit WakeUp timer (MUST be outside the callback!)
	  		RTC_WakeUp_Init();
 800095e:	f7ff ff0b 	bl	8000778 <RTC_WakeUp_Init>
	  		ConsolePrintf("RTC Wake-Up Timer reinitialized\r\n");
 8000962:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <main+0x124>)
 8000964:	0018      	movs	r0, r3
 8000966:	f000 f9a9 	bl	8000cbc <ConsolePrintf>
	  		join_lora_network(&lora);
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff fe53 	bl	8000618 <join_lora_network>
	  ConsolePrintf("Going to sleep...\r\n");
 8000972:	46c0      	nop			@ (mov r8, r8)
 8000974:	e7a3      	b.n	80008be <main+0x42>
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	00002710 	.word	0x00002710
 800097c:	20000178 	.word	0x20000178
 8000980:	08004d24 	.word	0x08004d24
 8000984:	08004d3c 	.word	0x08004d3c
 8000988:	20000078 	.word	0x20000078
 800098c:	200000f0 	.word	0x200000f0
 8000990:	08004d50 	.word	0x08004d50
 8000994:	08004d68 	.word	0x08004d68
 8000998:	08004d84 	.word	0x08004d84
 800099c:	08004d9c 	.word	0x08004d9c
 80009a0:	08004dbc 	.word	0x08004dbc

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b09f      	sub	sp, #124	@ 0x7c
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	2440      	movs	r4, #64	@ 0x40
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	0018      	movs	r0, r3
 80009b0:	2338      	movs	r3, #56	@ 0x38
 80009b2:	001a      	movs	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	f003 fc09 	bl	80041cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ba:	232c      	movs	r3, #44	@ 0x2c
 80009bc:	18fb      	adds	r3, r7, r3
 80009be:	0018      	movs	r0, r3
 80009c0:	2314      	movs	r3, #20
 80009c2:	001a      	movs	r2, r3
 80009c4:	2100      	movs	r1, #0
 80009c6:	f003 fc01 	bl	80041cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	0018      	movs	r0, r3
 80009ce:	2328      	movs	r3, #40	@ 0x28
 80009d0:	001a      	movs	r2, r3
 80009d2:	2100      	movs	r1, #0
 80009d4:	f003 fbfa 	bl	80041cc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d8:	4b2c      	ldr	r3, [pc, #176]	@ (8000a8c <SystemClock_Config+0xe8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a2c      	ldr	r2, [pc, #176]	@ (8000a90 <SystemClock_Config+0xec>)
 80009de:	401a      	ands	r2, r3
 80009e0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a8c <SystemClock_Config+0xe8>)
 80009e2:	2180      	movs	r1, #128	@ 0x80
 80009e4:	0109      	lsls	r1, r1, #4
 80009e6:	430a      	orrs	r2, r1
 80009e8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80009ea:	0021      	movs	r1, r4
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2218      	movs	r2, #24
 80009f0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2201      	movs	r2, #1
 80009f6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2201      	movs	r2, #1
 80009fc:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	22a0      	movs	r2, #160	@ 0xa0
 8000a08:	0212      	lsls	r2, r2, #8
 8000a0a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	0018      	movs	r0, r3
 8000a16:	f001 f967 	bl	8001ce8 <HAL_RCC_OscConfig>
 8000a1a:	1e03      	subs	r3, r0, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000a1e:	f000 f9c3 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	212c      	movs	r1, #44	@ 0x2c
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	220f      	movs	r2, #15
 8000a28:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a36:	187b      	adds	r3, r7, r1
 8000a38:	2200      	movs	r2, #0
 8000a3a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2100      	movs	r1, #0
 8000a46:	0018      	movs	r0, r3
 8000a48:	f001 fd22 	bl	8002490 <HAL_RCC_ClockConfig>
 8000a4c:	1e03      	subs	r3, r0, #0
 8000a4e:	d001      	beq.n	8000a54 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a50:	f000 f9aa 	bl	8000da8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	222b      	movs	r2, #43	@ 0x2b
 8000a58:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a5a:	1d3b      	adds	r3, r7, #4
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a66:	1d3b      	adds	r3, r7, #4
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2280      	movs	r2, #128	@ 0x80
 8000a70:	0292      	lsls	r2, r2, #10
 8000a72:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	0018      	movs	r0, r3
 8000a78:	f001 ff0e 	bl	8002898 <HAL_RCCEx_PeriphCLKConfig>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000a80:	f000 f992 	bl	8000da8 <Error_Handler>
  }
}
 8000a84:	46c0      	nop			@ (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b01f      	add	sp, #124	@ 0x7c
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	40007000 	.word	0x40007000
 8000a90:	ffffe7ff 	.word	0xffffe7ff

08000a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	@ (8000b0c <MX_I2C1_Init+0x78>)
 8000a9a:	4a1d      	ldr	r2, [pc, #116]	@ (8000b10 <MX_I2C1_Init+0x7c>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b0c <MX_I2C1_Init+0x78>)
 8000aa0:	22c1      	movs	r2, #193	@ 0xc1
 8000aa2:	00d2      	lsls	r2, r2, #3
 8000aa4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	@ (8000b0c <MX_I2C1_Init+0x78>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aac:	4b17      	ldr	r3, [pc, #92]	@ (8000b0c <MX_I2C1_Init+0x78>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	@ (8000b0c <MX_I2C1_Init+0x78>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	@ (8000b0c <MX_I2C1_Init+0x78>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000abe:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <MX_I2C1_Init+0x78>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <MX_I2C1_Init+0x78>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <MX_I2C1_Init+0x78>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	@ (8000b0c <MX_I2C1_Init+0x78>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 ff3e 	bl	8001954 <HAL_I2C_Init>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000adc:	f000 f964 	bl	8000da8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <MX_I2C1_Init+0x78>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f001 f80b 	bl	8001b00 <HAL_I2CEx_ConfigAnalogFilter>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000aee:	f000 f95b 	bl	8000da8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <MX_I2C1_Init+0x78>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f001 f84e 	bl	8001b98 <HAL_I2CEx_ConfigDigitalFilter>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b00:	f000 f952 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b04:	46c0      	nop			@ (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	20000078 	.word	0x20000078
 8000b10:	40005400 	.word	0x40005400

08000b14 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b18:	4b11      	ldr	r3, [pc, #68]	@ (8000b60 <MX_RTC_Init+0x4c>)
 8000b1a:	4a12      	ldr	r2, [pc, #72]	@ (8000b64 <MX_RTC_Init+0x50>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000b1e:	4b10      	ldr	r3, [pc, #64]	@ (8000b60 <MX_RTC_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b24:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <MX_RTC_Init+0x4c>)
 8000b26:	227f      	movs	r2, #127	@ 0x7f
 8000b28:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b60 <MX_RTC_Init+0x4c>)
 8000b2c:	22ff      	movs	r2, #255	@ 0xff
 8000b2e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b30:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <MX_RTC_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000b36:	4b0a      	ldr	r3, [pc, #40]	@ (8000b60 <MX_RTC_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b3c:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <MX_RTC_Init+0x4c>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b42:	4b07      	ldr	r3, [pc, #28]	@ (8000b60 <MX_RTC_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b48:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <MX_RTC_Init+0x4c>)
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f002 f842 	bl	8002bd4 <HAL_RTC_Init>
 8000b50:	1e03      	subs	r3, r0, #0
 8000b52:	d001      	beq.n	8000b58 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000b54:	f000 f928 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b58:	46c0      	nop			@ (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	200000cc 	.word	0x200000cc
 8000b64:	40002800 	.word	0x40002800

08000b68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b6c:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <MX_USART1_UART_Init+0x60>)
 8000b6e:	4a17      	ldr	r2, [pc, #92]	@ (8000bcc <MX_USART1_UART_Init+0x64>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b72:	4b15      	ldr	r3, [pc, #84]	@ (8000bc8 <MX_USART1_UART_Init+0x60>)
 8000b74:	22e1      	movs	r2, #225	@ 0xe1
 8000b76:	0252      	lsls	r2, r2, #9
 8000b78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <MX_USART1_UART_Init+0x60>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <MX_USART1_UART_Init+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <MX_USART1_UART_Init+0x60>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc8 <MX_USART1_UART_Init+0x60>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <MX_USART1_UART_Init+0x60>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <MX_USART1_UART_Init+0x60>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <MX_USART1_UART_Init+0x60>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <MX_USART1_UART_Init+0x60>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000baa:	4b07      	ldr	r3, [pc, #28]	@ (8000bc8 <MX_USART1_UART_Init+0x60>)
 8000bac:	0018      	movs	r0, r3
 8000bae:	f002 fb7d 	bl	80032ac <HAL_UART_Init>
 8000bb2:	1e03      	subs	r3, r0, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bb6:	f000 f8f7 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  ConsolePrintf("USART1 (DBG) Cnfigured\r\n");
 8000bba:	4b05      	ldr	r3, [pc, #20]	@ (8000bd0 <MX_USART1_UART_Init+0x68>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 f87d 	bl	8000cbc <ConsolePrintf>
  /* USER CODE END USART1_Init 2 */

}
 8000bc2:	46c0      	nop			@ (mov r8, r8)
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	200000f0 	.word	0x200000f0
 8000bcc:	40013800 	.word	0x40013800
 8000bd0:	08004de0 	.word	0x08004de0

08000bd4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bda:	4a15      	ldr	r2, [pc, #84]	@ (8000c30 <MX_USART2_UART_Init+0x5c>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <MX_USART2_UART_Init+0x58>)
 8000be0:	22e1      	movs	r2, #225	@ 0xe1
 8000be2:	0252      	lsls	r2, r2, #9
 8000be4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <MX_USART2_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <MX_USART2_UART_Init+0x58>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c10:	4b06      	ldr	r3, [pc, #24]	@ (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c16:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <MX_USART2_UART_Init+0x58>)
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f002 fb47 	bl	80032ac <HAL_UART_Init>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c22:	f000 f8c1 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000178 	.word	0x20000178
 8000c30:	40004400 	.word	0x40004400

08000c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3a:	240c      	movs	r4, #12
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	0018      	movs	r0, r3
 8000c40:	2314      	movs	r3, #20
 8000c42:	001a      	movs	r2, r3
 8000c44:	2100      	movs	r1, #0
 8000c46:	f003 fac1 	bl	80041cc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <MX_GPIO_Init+0x80>)
 8000c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c4e:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <MX_GPIO_Init+0x80>)
 8000c50:	2101      	movs	r1, #1
 8000c52:	430a      	orrs	r2, r1
 8000c54:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c56:	4b17      	ldr	r3, [pc, #92]	@ (8000cb4 <MX_GPIO_Init+0x80>)
 8000c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <MX_GPIO_Init+0x80>)
 8000c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c66:	4b13      	ldr	r3, [pc, #76]	@ (8000cb4 <MX_GPIO_Init+0x80>)
 8000c68:	2102      	movs	r1, #2
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <MX_GPIO_Init+0x80>)
 8000c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c72:	2202      	movs	r2, #2
 8000c74:	4013      	ands	r3, r2
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <MX_GPIO_Init+0x84>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	2120      	movs	r1, #32
 8000c80:	0018      	movs	r0, r3
 8000c82:	f000 fe49 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c86:	0021      	movs	r1, r4
 8000c88:	187b      	adds	r3, r7, r1
 8000c8a:	2220      	movs	r2, #32
 8000c8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2201      	movs	r2, #1
 8000c92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <MX_GPIO_Init+0x84>)
 8000ca4:	0019      	movs	r1, r3
 8000ca6:	0010      	movs	r0, r2
 8000ca8:	f000 fbd6 	bl	8001458 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b009      	add	sp, #36	@ 0x24
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	50000400 	.word	0x50000400

08000cbc <ConsolePrintf>:

/* USER CODE BEGIN 4 */
void ConsolePrintf(const char *format, ...)
{
 8000cbc:	b40f      	push	{r0, r1, r2, r3}
 8000cbe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cc0:	b0df      	sub	sp, #380	@ 0x17c
 8000cc2:	af06      	add	r7, sp, #24
    char final_buffer[160]; // Combined buffer (timestamp + message)

    // Get time and date from RTC
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;
    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000cc4:	2308      	movs	r3, #8
 8000cc6:	18f9      	adds	r1, r7, r3
 8000cc8:	4b31      	ldr	r3, [pc, #196]	@ (8000d90 <ConsolePrintf+0xd4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f002 f81d 	bl	8002d0c <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000cd2:	231c      	movs	r3, #28
 8000cd4:	18f9      	adds	r1, r7, r3
 8000cd6:	4b2e      	ldr	r3, [pc, #184]	@ (8000d90 <ConsolePrintf+0xd4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	0018      	movs	r0, r3
 8000cdc:	f002 f874 	bl	8002dc8 <HAL_RTC_GetDate>

    // Format timestamp as [YYYY-MM-DD HH:MM:SS]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
             date.Year, date.Month, date.Date,
 8000ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8000d94 <ConsolePrintf+0xd8>)
 8000ce2:	22b0      	movs	r2, #176	@ 0xb0
 8000ce4:	0052      	lsls	r2, r2, #1
 8000ce6:	189b      	adds	r3, r3, r2
 8000ce8:	19db      	adds	r3, r3, r7
 8000cea:	78db      	ldrb	r3, [r3, #3]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000cec:	469c      	mov	ip, r3
             date.Year, date.Month, date.Date,
 8000cee:	4b29      	ldr	r3, [pc, #164]	@ (8000d94 <ConsolePrintf+0xd8>)
 8000cf0:	189b      	adds	r3, r3, r2
 8000cf2:	19db      	adds	r3, r3, r7
 8000cf4:	785b      	ldrb	r3, [r3, #1]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000cf6:	0019      	movs	r1, r3
             date.Year, date.Month, date.Date,
 8000cf8:	4b26      	ldr	r3, [pc, #152]	@ (8000d94 <ConsolePrintf+0xd8>)
 8000cfa:	189b      	adds	r3, r3, r2
 8000cfc:	19db      	adds	r3, r3, r7
 8000cfe:	789b      	ldrb	r3, [r3, #2]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000d00:	001c      	movs	r4, r3
             time.Hours, time.Minutes, time.Seconds);
 8000d02:	4b25      	ldr	r3, [pc, #148]	@ (8000d98 <ConsolePrintf+0xdc>)
 8000d04:	189b      	adds	r3, r3, r2
 8000d06:	19db      	adds	r3, r3, r7
 8000d08:	781b      	ldrb	r3, [r3, #0]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000d0a:	001d      	movs	r5, r3
             time.Hours, time.Minutes, time.Seconds);
 8000d0c:	4b22      	ldr	r3, [pc, #136]	@ (8000d98 <ConsolePrintf+0xdc>)
 8000d0e:	189b      	adds	r3, r3, r2
 8000d10:	19db      	adds	r3, r3, r7
 8000d12:	785b      	ldrb	r3, [r3, #1]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000d14:	001e      	movs	r6, r3
             time.Hours, time.Minutes, time.Seconds);
 8000d16:	4b20      	ldr	r3, [pc, #128]	@ (8000d98 <ConsolePrintf+0xdc>)
 8000d18:	189b      	adds	r3, r3, r2
 8000d1a:	19db      	adds	r3, r3, r7
 8000d1c:	789b      	ldrb	r3, [r3, #2]
    snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8000d1e:	4a1f      	ldr	r2, [pc, #124]	@ (8000d9c <ConsolePrintf+0xe0>)
 8000d20:	20c0      	movs	r0, #192	@ 0xc0
 8000d22:	1838      	adds	r0, r7, r0
 8000d24:	9304      	str	r3, [sp, #16]
 8000d26:	9603      	str	r6, [sp, #12]
 8000d28:	9502      	str	r5, [sp, #8]
 8000d2a:	9401      	str	r4, [sp, #4]
 8000d2c:	9100      	str	r1, [sp, #0]
 8000d2e:	4663      	mov	r3, ip
 8000d30:	2120      	movs	r1, #32
 8000d32:	f003 f9db 	bl	80040ec <sniprintf>

    // Format the original message
    va_list args;
    va_start(args, format);
 8000d36:	23be      	movs	r3, #190	@ 0xbe
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	22bc      	movs	r2, #188	@ 0xbc
 8000d42:	0052      	lsls	r2, r2, #1
 8000d44:	18ba      	adds	r2, r7, r2
 8000d46:	6812      	ldr	r2, [r2, #0]
 8000d48:	25e0      	movs	r5, #224	@ 0xe0
 8000d4a:	1978      	adds	r0, r7, r5
 8000d4c:	2180      	movs	r1, #128	@ 0x80
 8000d4e:	f003 fa31 	bl	80041b4 <vsniprintf>
    va_end(args);

    // Combine timestamp and message
    snprintf(final_buffer, sizeof(final_buffer), "%s%s", timestamp_buffer, buffer);
 8000d52:	20c0      	movs	r0, #192	@ 0xc0
 8000d54:	1839      	adds	r1, r7, r0
 8000d56:	4a12      	ldr	r2, [pc, #72]	@ (8000da0 <ConsolePrintf+0xe4>)
 8000d58:	2420      	movs	r4, #32
 8000d5a:	1938      	adds	r0, r7, r4
 8000d5c:	197b      	adds	r3, r7, r5
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	000b      	movs	r3, r1
 8000d62:	21a0      	movs	r1, #160	@ 0xa0
 8000d64:	f003 f9c2 	bl	80040ec <sniprintf>

    // Transmit the combined message
    HAL_UART_Transmit(&huart1, (uint8_t *)final_buffer, strlen(final_buffer), HAL_MAX_DELAY);
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff f9cc 	bl	8000108 <strlen>
 8000d70:	0003      	movs	r3, r0
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	2301      	movs	r3, #1
 8000d76:	425b      	negs	r3, r3
 8000d78:	1939      	adds	r1, r7, r4
 8000d7a:	480a      	ldr	r0, [pc, #40]	@ (8000da4 <ConsolePrintf+0xe8>)
 8000d7c:	f002 fb28 	bl	80033d0 <HAL_UART_Transmit>
}
 8000d80:	46c0      	nop			@ (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b059      	add	sp, #356	@ 0x164
 8000d86:	bcf0      	pop	{r4, r5, r6, r7}
 8000d88:	bc08      	pop	{r3}
 8000d8a:	b004      	add	sp, #16
 8000d8c:	4718      	bx	r3
 8000d8e:	46c0      	nop			@ (mov r8, r8)
 8000d90:	200000cc 	.word	0x200000cc
 8000d94:	fffffebc 	.word	0xfffffebc
 8000d98:	fffffea8 	.word	0xfffffea8
 8000d9c:	08004dfc 	.word	0x08004dfc
 8000da0:	08004e20 	.word	0x08004e20
 8000da4:	200000f0 	.word	0x200000f0

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	46c0      	nop			@ (mov r8, r8)
 8000db2:	e7fd      	b.n	8000db0 <Error_Handler+0x8>

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000db8:	4b07      	ldr	r3, [pc, #28]	@ (8000dd8 <HAL_MspInit+0x24>)
 8000dba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_MspInit+0x24>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc4:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <HAL_MspInit+0x24>)
 8000dc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <HAL_MspInit+0x24>)
 8000dca:	2180      	movs	r1, #128	@ 0x80
 8000dcc:	0549      	lsls	r1, r1, #21
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b089      	sub	sp, #36	@ 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	240c      	movs	r4, #12
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	0018      	movs	r0, r3
 8000dea:	2314      	movs	r3, #20
 8000dec:	001a      	movs	r2, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	f003 f9ec 	bl	80041cc <memset>
  if(hi2c->Instance==I2C1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <HAL_I2C_MspInit+0x7c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d128      	bne.n	8000e50 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b17      	ldr	r3, [pc, #92]	@ (8000e5c <HAL_I2C_MspInit+0x80>)
 8000e00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e02:	4b16      	ldr	r3, [pc, #88]	@ (8000e5c <HAL_I2C_MspInit+0x80>)
 8000e04:	2102      	movs	r1, #2
 8000e06:	430a      	orrs	r2, r1
 8000e08:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e0a:	4b14      	ldr	r3, [pc, #80]	@ (8000e5c <HAL_I2C_MspInit+0x80>)
 8000e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e0e:	2202      	movs	r2, #2
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e16:	0021      	movs	r1, r4
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	22c0      	movs	r2, #192	@ 0xc0
 8000e1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e1e:	187b      	adds	r3, r7, r1
 8000e20:	2212      	movs	r2, #18
 8000e22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2201      	movs	r2, #1
 8000e34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	4a09      	ldr	r2, [pc, #36]	@ (8000e60 <HAL_I2C_MspInit+0x84>)
 8000e3a:	0019      	movs	r1, r3
 8000e3c:	0010      	movs	r0, r2
 8000e3e:	f000 fb0b 	bl	8001458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <HAL_I2C_MspInit+0x80>)
 8000e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e46:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <HAL_I2C_MspInit+0x80>)
 8000e48:	2180      	movs	r1, #128	@ 0x80
 8000e4a:	0389      	lsls	r1, r1, #14
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b009      	add	sp, #36	@ 0x24
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	40005400 	.word	0x40005400
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	50000400 	.word	0x50000400

08000e64 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea0 <HAL_I2C_MspDeInit+0x3c>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d10f      	bne.n	8000e96 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000e76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <HAL_I2C_MspDeInit+0x40>)
 8000e78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_I2C_MspDeInit+0x40>)
 8000e7c:	490a      	ldr	r1, [pc, #40]	@ (8000ea8 <HAL_I2C_MspDeInit+0x44>)
 8000e7e:	400a      	ands	r2, r1
 8000e80:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000e82:	4b0a      	ldr	r3, [pc, #40]	@ (8000eac <HAL_I2C_MspDeInit+0x48>)
 8000e84:	2140      	movs	r1, #64	@ 0x40
 8000e86:	0018      	movs	r0, r3
 8000e88:	f000 fc64 	bl	8001754 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8000e8c:	4b07      	ldr	r3, [pc, #28]	@ (8000eac <HAL_I2C_MspDeInit+0x48>)
 8000e8e:	2180      	movs	r1, #128	@ 0x80
 8000e90:	0018      	movs	r0, r3
 8000e92:	f000 fc5f 	bl	8001754 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8000e96:	46c0      	nop			@ (mov r8, r8)
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b002      	add	sp, #8
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	46c0      	nop			@ (mov r8, r8)
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	ffdfffff 	.word	0xffdfffff
 8000eac:	50000400 	.word	0x50000400

08000eb0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a06      	ldr	r2, [pc, #24]	@ (8000ed8 <HAL_RTC_MspInit+0x28>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d106      	bne.n	8000ed0 <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_RTC_MspInit+0x2c>)
 8000ec4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000ec6:	4b05      	ldr	r3, [pc, #20]	@ (8000edc <HAL_RTC_MspInit+0x2c>)
 8000ec8:	2180      	movs	r1, #128	@ 0x80
 8000eca:	02c9      	lsls	r1, r1, #11
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	651a      	str	r2, [r3, #80]	@ 0x50

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000ed0:	46c0      	nop			@ (mov r8, r8)
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40002800 	.word	0x40002800
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b08b      	sub	sp, #44	@ 0x2c
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	2414      	movs	r4, #20
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	0018      	movs	r0, r3
 8000eee:	2314      	movs	r3, #20
 8000ef0:	001a      	movs	r2, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	f003 f96a 	bl	80041cc <memset>
  if(huart->Instance==USART1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a30      	ldr	r2, [pc, #192]	@ (8000fc0 <HAL_UART_MspInit+0xe0>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d12b      	bne.n	8000f5a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f02:	4b30      	ldr	r3, [pc, #192]	@ (8000fc4 <HAL_UART_MspInit+0xe4>)
 8000f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f06:	4b2f      	ldr	r3, [pc, #188]	@ (8000fc4 <HAL_UART_MspInit+0xe4>)
 8000f08:	2180      	movs	r1, #128	@ 0x80
 8000f0a:	01c9      	lsls	r1, r1, #7
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc4 <HAL_UART_MspInit+0xe4>)
 8000f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f14:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc4 <HAL_UART_MspInit+0xe4>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f1c:	4b29      	ldr	r3, [pc, #164]	@ (8000fc4 <HAL_UART_MspInit+0xe4>)
 8000f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f20:	2201      	movs	r2, #1
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f28:	193b      	adds	r3, r7, r4
 8000f2a:	22c0      	movs	r2, #192	@ 0xc0
 8000f2c:	00d2      	lsls	r2, r2, #3
 8000f2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	0021      	movs	r1, r4
 8000f32:	187b      	adds	r3, r7, r1
 8000f34:	2202      	movs	r2, #2
 8000f36:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	187b      	adds	r3, r7, r1
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	2203      	movs	r2, #3
 8000f42:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	2204      	movs	r2, #4
 8000f48:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f4a:	187a      	adds	r2, r7, r1
 8000f4c:	23a0      	movs	r3, #160	@ 0xa0
 8000f4e:	05db      	lsls	r3, r3, #23
 8000f50:	0011      	movs	r1, r2
 8000f52:	0018      	movs	r0, r3
 8000f54:	f000 fa80 	bl	8001458 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f58:	e02e      	b.n	8000fb8 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART2)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc8 <HAL_UART_MspInit+0xe8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d129      	bne.n	8000fb8 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f64:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <HAL_UART_MspInit+0xe4>)
 8000f66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000f68:	4b16      	ldr	r3, [pc, #88]	@ (8000fc4 <HAL_UART_MspInit+0xe4>)
 8000f6a:	2180      	movs	r1, #128	@ 0x80
 8000f6c:	0289      	lsls	r1, r1, #10
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b14      	ldr	r3, [pc, #80]	@ (8000fc4 <HAL_UART_MspInit+0xe4>)
 8000f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f76:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <HAL_UART_MspInit+0xe4>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	430a      	orrs	r2, r1
 8000f7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <HAL_UART_MspInit+0xe4>)
 8000f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f82:	2201      	movs	r2, #1
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f8a:	2114      	movs	r1, #20
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2202      	movs	r2, #2
 8000f96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	187a      	adds	r2, r7, r1
 8000fac:	23a0      	movs	r3, #160	@ 0xa0
 8000fae:	05db      	lsls	r3, r3, #23
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f000 fa50 	bl	8001458 <HAL_GPIO_Init>
}
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b00b      	add	sp, #44	@ 0x2c
 8000fbe:	bd90      	pop	{r4, r7, pc}
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40004400 	.word	0x40004400

08000fcc <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a13      	ldr	r2, [pc, #76]	@ (8001028 <HAL_UART_MspDeInit+0x5c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d10e      	bne.n	8000ffc <HAL_UART_MspDeInit+0x30>
  {
    /* USER CODE BEGIN USART1_MspDeInit 0 */

    /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8000fde:	4b13      	ldr	r3, [pc, #76]	@ (800102c <HAL_UART_MspDeInit+0x60>)
 8000fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fe2:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_UART_MspDeInit+0x60>)
 8000fe4:	4912      	ldr	r1, [pc, #72]	@ (8001030 <HAL_UART_MspDeInit+0x64>)
 8000fe6:	400a      	ands	r2, r1
 8000fe8:	635a      	str	r2, [r3, #52]	@ 0x34

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8000fea:	23c0      	movs	r3, #192	@ 0xc0
 8000fec:	00da      	lsls	r2, r3, #3
 8000fee:	23a0      	movs	r3, #160	@ 0xa0
 8000ff0:	05db      	lsls	r3, r3, #23
 8000ff2:	0011      	movs	r1, r2
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	f000 fbad 	bl	8001754 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000ffa:	e010      	b.n	800101e <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART2)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0c      	ldr	r2, [pc, #48]	@ (8001034 <HAL_UART_MspDeInit+0x68>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d10b      	bne.n	800101e <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART2_CLK_DISABLE();
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <HAL_UART_MspDeInit+0x60>)
 8001008:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800100a:	4b08      	ldr	r3, [pc, #32]	@ (800102c <HAL_UART_MspDeInit+0x60>)
 800100c:	490a      	ldr	r1, [pc, #40]	@ (8001038 <HAL_UART_MspDeInit+0x6c>)
 800100e:	400a      	ands	r2, r1
 8001010:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001012:	23a0      	movs	r3, #160	@ 0xa0
 8001014:	05db      	lsls	r3, r3, #23
 8001016:	210c      	movs	r1, #12
 8001018:	0018      	movs	r0, r3
 800101a:	f000 fb9b 	bl	8001754 <HAL_GPIO_DeInit>
}
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	b002      	add	sp, #8
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	40013800 	.word	0x40013800
 800102c:	40021000 	.word	0x40021000
 8001030:	ffffbfff 	.word	0xffffbfff
 8001034:	40004400 	.word	0x40004400
 8001038:	fffdffff 	.word	0xfffdffff

0800103c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001040:	46c0      	nop			@ (mov r8, r8)
 8001042:	e7fd      	b.n	8001040 <NMI_Handler+0x4>

08001044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	e7fd      	b.n	8001048 <HardFault_Handler+0x4>

0800104c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001050:	46c0      	nop			@ (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001064:	f000 f8be 	bl	80011e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001068:	46c0      	nop			@ (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <_sbrk>:
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <_sbrk+0x5c>)
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <_sbrk+0x60>)
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <_sbrk+0x64>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d102      	bne.n	8001092 <_sbrk+0x22>
 800108c:	4b11      	ldr	r3, [pc, #68]	@ (80010d4 <_sbrk+0x64>)
 800108e:	4a12      	ldr	r2, [pc, #72]	@ (80010d8 <_sbrk+0x68>)
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	18d3      	adds	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	429a      	cmp	r2, r3
 800109e:	d207      	bcs.n	80010b0 <_sbrk+0x40>
 80010a0:	f003 f8b2 	bl	8004208 <__errno>
 80010a4:	0003      	movs	r3, r0
 80010a6:	220c      	movs	r2, #12
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	2301      	movs	r3, #1
 80010ac:	425b      	negs	r3, r3
 80010ae:	e009      	b.n	80010c4 <_sbrk+0x54>
 80010b0:	4b08      	ldr	r3, [pc, #32]	@ (80010d4 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	18d2      	adds	r2, r2, r3
 80010be:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <_sbrk+0x64>)
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b006      	add	sp, #24
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20005000 	.word	0x20005000
 80010d0:	00000400 	.word	0x00000400
 80010d4:	20000200 	.word	0x20000200
 80010d8:	20000350 	.word	0x20000350

080010dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80010e8:	480d      	ldr	r0, [pc, #52]	@ (8001120 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80010ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010ec:	f7ff fff6 	bl	80010dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f0:	480c      	ldr	r0, [pc, #48]	@ (8001124 <LoopForever+0x6>)
  ldr r1, =_edata
 80010f2:	490d      	ldr	r1, [pc, #52]	@ (8001128 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f4:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <LoopForever+0xe>)
  movs r3, #0
 80010f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f8:	e002      	b.n	8001100 <LoopCopyDataInit>

080010fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fe:	3304      	adds	r3, #4

08001100 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001100:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001102:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001104:	d3f9      	bcc.n	80010fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001106:	4a0a      	ldr	r2, [pc, #40]	@ (8001130 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001108:	4c0a      	ldr	r4, [pc, #40]	@ (8001134 <LoopForever+0x16>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800110c:	e001      	b.n	8001112 <LoopFillZerobss>

0800110e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001110:	3204      	adds	r2, #4

08001112 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001112:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001114:	d3fb      	bcc.n	800110e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001116:	f003 f87d 	bl	8004214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111a:	f7ff fbaf 	bl	800087c <main>

0800111e <LoopForever>:

LoopForever:
    b LoopForever
 800111e:	e7fe      	b.n	800111e <LoopForever>
   ldr   r0, =_estack
 8001120:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001128:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800112c:	08004ed8 	.word	0x08004ed8
  ldr r2, =_sbss
 8001130:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001134:	20000350 	.word	0x20000350

08001138 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001138:	e7fe      	b.n	8001138 <ADC1_COMP_IRQHandler>
	...

0800113c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001148:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <HAL_Init+0x3c>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <HAL_Init+0x3c>)
 800114e:	2140      	movs	r1, #64	@ 0x40
 8001150:	430a      	orrs	r2, r1
 8001152:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f811 	bl	800117c <HAL_InitTick>
 800115a:	1e03      	subs	r3, r0, #0
 800115c:	d003      	beq.n	8001166 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800115e:	1dfb      	adds	r3, r7, #7
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e001      	b.n	800116a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001166:	f7ff fe25 	bl	8000db4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800116a:	1dfb      	adds	r3, r7, #7
 800116c:	781b      	ldrb	r3, [r3, #0]
}
 800116e:	0018      	movs	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	b002      	add	sp, #8
 8001174:	bd80      	pop	{r7, pc}
 8001176:	46c0      	nop			@ (mov r8, r8)
 8001178:	40022000 	.word	0x40022000

0800117c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001184:	4b14      	ldr	r3, [pc, #80]	@ (80011d8 <HAL_InitTick+0x5c>)
 8001186:	681c      	ldr	r4, [r3, #0]
 8001188:	4b14      	ldr	r3, [pc, #80]	@ (80011dc <HAL_InitTick+0x60>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	0019      	movs	r1, r3
 800118e:	23fa      	movs	r3, #250	@ 0xfa
 8001190:	0098      	lsls	r0, r3, #2
 8001192:	f7fe ffcb 	bl	800012c <__udivsi3>
 8001196:	0003      	movs	r3, r0
 8001198:	0019      	movs	r1, r3
 800119a:	0020      	movs	r0, r4
 800119c:	f7fe ffc6 	bl	800012c <__udivsi3>
 80011a0:	0003      	movs	r3, r0
 80011a2:	0018      	movs	r0, r3
 80011a4:	f000 f94b 	bl	800143e <HAL_SYSTICK_Config>
 80011a8:	1e03      	subs	r3, r0, #0
 80011aa:	d001      	beq.n	80011b0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e00f      	b.n	80011d0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d80b      	bhi.n	80011ce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	2301      	movs	r3, #1
 80011ba:	425b      	negs	r3, r3
 80011bc:	2200      	movs	r2, #0
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 f918 	bl	80013f4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_InitTick+0x64>)
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	e000      	b.n	80011d0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b003      	add	sp, #12
 80011d6:	bd90      	pop	{r4, r7, pc}
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000008 	.word	0x20000008
 80011e0:	20000004 	.word	0x20000004

080011e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <HAL_IncTick+0x1c>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	001a      	movs	r2, r3
 80011ee:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <HAL_IncTick+0x20>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	18d2      	adds	r2, r2, r3
 80011f4:	4b03      	ldr	r3, [pc, #12]	@ (8001204 <HAL_IncTick+0x20>)
 80011f6:	601a      	str	r2, [r3, #0]
}
 80011f8:	46c0      	nop			@ (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	20000008 	.word	0x20000008
 8001204:	20000204 	.word	0x20000204

08001208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  return uwTick;
 800120c:	4b02      	ldr	r3, [pc, #8]	@ (8001218 <HAL_GetTick+0x10>)
 800120e:	681b      	ldr	r3, [r3, #0]
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	20000204 	.word	0x20000204

0800121c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001224:	f7ff fff0 	bl	8001208 <HAL_GetTick>
 8001228:	0003      	movs	r3, r0
 800122a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3301      	adds	r3, #1
 8001234:	d005      	beq.n	8001242 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <HAL_Delay+0x44>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	001a      	movs	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	189b      	adds	r3, r3, r2
 8001240:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	f7ff ffe0 	bl	8001208 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	429a      	cmp	r2, r3
 8001252:	d8f7      	bhi.n	8001244 <HAL_Delay+0x28>
  {
  }
}
 8001254:	46c0      	nop			@ (mov r8, r8)
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bd80      	pop	{r7, pc}
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	20000008 	.word	0x20000008

08001264 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001268:	4b04      	ldr	r3, [pc, #16]	@ (800127c <HAL_SuspendTick+0x18>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <HAL_SuspendTick+0x18>)
 800126e:	2102      	movs	r1, #2
 8001270:	438a      	bics	r2, r1
 8001272:	601a      	str	r2, [r3, #0]
}
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	46c0      	nop			@ (mov r8, r8)
 800127c:	e000e010 	.word	0xe000e010

08001280 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <HAL_ResumeTick+0x18>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b03      	ldr	r3, [pc, #12]	@ (8001298 <HAL_ResumeTick+0x18>)
 800128a:	2102      	movs	r1, #2
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
}
 8001290:	46c0      	nop			@ (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	e000e010 	.word	0xe000e010

0800129c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	0002      	movs	r2, r0
 80012a4:	1dfb      	adds	r3, r7, #7
 80012a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	1dfb      	adds	r3, r7, #7
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80012ae:	d809      	bhi.n	80012c4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	001a      	movs	r2, r3
 80012b6:	231f      	movs	r3, #31
 80012b8:	401a      	ands	r2, r3
 80012ba:	4b04      	ldr	r3, [pc, #16]	@ (80012cc <__NVIC_EnableIRQ+0x30>)
 80012bc:	2101      	movs	r1, #1
 80012be:	4091      	lsls	r1, r2
 80012c0:	000a      	movs	r2, r1
 80012c2:	601a      	str	r2, [r3, #0]
  }
}
 80012c4:	46c0      	nop			@ (mov r8, r8)
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	0002      	movs	r2, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80012e4:	d828      	bhi.n	8001338 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e6:	4a2f      	ldr	r2, [pc, #188]	@ (80013a4 <__NVIC_SetPriority+0xd4>)
 80012e8:	1dfb      	adds	r3, r7, #7
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b25b      	sxtb	r3, r3
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	33c0      	adds	r3, #192	@ 0xc0
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	589b      	ldr	r3, [r3, r2]
 80012f6:	1dfa      	adds	r2, r7, #7
 80012f8:	7812      	ldrb	r2, [r2, #0]
 80012fa:	0011      	movs	r1, r2
 80012fc:	2203      	movs	r2, #3
 80012fe:	400a      	ands	r2, r1
 8001300:	00d2      	lsls	r2, r2, #3
 8001302:	21ff      	movs	r1, #255	@ 0xff
 8001304:	4091      	lsls	r1, r2
 8001306:	000a      	movs	r2, r1
 8001308:	43d2      	mvns	r2, r2
 800130a:	401a      	ands	r2, r3
 800130c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	019b      	lsls	r3, r3, #6
 8001312:	22ff      	movs	r2, #255	@ 0xff
 8001314:	401a      	ands	r2, r3
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	0018      	movs	r0, r3
 800131c:	2303      	movs	r3, #3
 800131e:	4003      	ands	r3, r0
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001324:	481f      	ldr	r0, [pc, #124]	@ (80013a4 <__NVIC_SetPriority+0xd4>)
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b25b      	sxtb	r3, r3
 800132c:	089b      	lsrs	r3, r3, #2
 800132e:	430a      	orrs	r2, r1
 8001330:	33c0      	adds	r3, #192	@ 0xc0
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001336:	e031      	b.n	800139c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001338:	4a1b      	ldr	r2, [pc, #108]	@ (80013a8 <__NVIC_SetPriority+0xd8>)
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	0019      	movs	r1, r3
 8001340:	230f      	movs	r3, #15
 8001342:	400b      	ands	r3, r1
 8001344:	3b08      	subs	r3, #8
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	3306      	adds	r3, #6
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	18d3      	adds	r3, r2, r3
 800134e:	3304      	adds	r3, #4
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	1dfa      	adds	r2, r7, #7
 8001354:	7812      	ldrb	r2, [r2, #0]
 8001356:	0011      	movs	r1, r2
 8001358:	2203      	movs	r2, #3
 800135a:	400a      	ands	r2, r1
 800135c:	00d2      	lsls	r2, r2, #3
 800135e:	21ff      	movs	r1, #255	@ 0xff
 8001360:	4091      	lsls	r1, r2
 8001362:	000a      	movs	r2, r1
 8001364:	43d2      	mvns	r2, r2
 8001366:	401a      	ands	r2, r3
 8001368:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	019b      	lsls	r3, r3, #6
 800136e:	22ff      	movs	r2, #255	@ 0xff
 8001370:	401a      	ands	r2, r3
 8001372:	1dfb      	adds	r3, r7, #7
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	0018      	movs	r0, r3
 8001378:	2303      	movs	r3, #3
 800137a:	4003      	ands	r3, r0
 800137c:	00db      	lsls	r3, r3, #3
 800137e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001380:	4809      	ldr	r0, [pc, #36]	@ (80013a8 <__NVIC_SetPriority+0xd8>)
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	001c      	movs	r4, r3
 8001388:	230f      	movs	r3, #15
 800138a:	4023      	ands	r3, r4
 800138c:	3b08      	subs	r3, #8
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	430a      	orrs	r2, r1
 8001392:	3306      	adds	r3, #6
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	18c3      	adds	r3, r0, r3
 8001398:	3304      	adds	r3, #4
 800139a:	601a      	str	r2, [r3, #0]
}
 800139c:	46c0      	nop			@ (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b003      	add	sp, #12
 80013a2:	bd90      	pop	{r4, r7, pc}
 80013a4:	e000e100 	.word	0xe000e100
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	1e5a      	subs	r2, r3, #1
 80013b8:	2380      	movs	r3, #128	@ 0x80
 80013ba:	045b      	lsls	r3, r3, #17
 80013bc:	429a      	cmp	r2, r3
 80013be:	d301      	bcc.n	80013c4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c0:	2301      	movs	r3, #1
 80013c2:	e010      	b.n	80013e6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c4:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <SysTick_Config+0x44>)
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	3a01      	subs	r2, #1
 80013ca:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013cc:	2301      	movs	r3, #1
 80013ce:	425b      	negs	r3, r3
 80013d0:	2103      	movs	r1, #3
 80013d2:	0018      	movs	r0, r3
 80013d4:	f7ff ff7c 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d8:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <SysTick_Config+0x44>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013de:	4b04      	ldr	r3, [pc, #16]	@ (80013f0 <SysTick_Config+0x44>)
 80013e0:	2207      	movs	r2, #7
 80013e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	0018      	movs	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	b002      	add	sp, #8
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	e000e010 	.word	0xe000e010

080013f4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	210f      	movs	r1, #15
 8001400:	187b      	adds	r3, r7, r1
 8001402:	1c02      	adds	r2, r0, #0
 8001404:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001406:	68ba      	ldr	r2, [r7, #8]
 8001408:	187b      	adds	r3, r7, r1
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b25b      	sxtb	r3, r3
 800140e:	0011      	movs	r1, r2
 8001410:	0018      	movs	r0, r3
 8001412:	f7ff ff5d 	bl	80012d0 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001416:	46c0      	nop			@ (mov r8, r8)
 8001418:	46bd      	mov	sp, r7
 800141a:	b004      	add	sp, #16
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	0002      	movs	r2, r0
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	b25b      	sxtb	r3, r3
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff ff33 	bl	800129c <__NVIC_EnableIRQ>
}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	46bd      	mov	sp, r7
 800143a:	b002      	add	sp, #8
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b082      	sub	sp, #8
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff ffaf 	bl	80013ac <SysTick_Config>
 800144e:	0003      	movs	r3, r0
}
 8001450:	0018      	movs	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	b002      	add	sp, #8
 8001456:	bd80      	pop	{r7, pc}

08001458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800146a:	2300      	movs	r3, #0
 800146c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800146e:	e155      	b.n	800171c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2101      	movs	r1, #1
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4091      	lsls	r1, r2
 800147a:	000a      	movs	r2, r1
 800147c:	4013      	ands	r3, r2
 800147e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d100      	bne.n	8001488 <HAL_GPIO_Init+0x30>
 8001486:	e146      	b.n	8001716 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2203      	movs	r2, #3
 800148e:	4013      	ands	r3, r2
 8001490:	2b01      	cmp	r3, #1
 8001492:	d005      	beq.n	80014a0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2203      	movs	r2, #3
 800149a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800149c:	2b02      	cmp	r3, #2
 800149e:	d130      	bne.n	8001502 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	409a      	lsls	r2, r3
 80014ae:	0013      	movs	r3, r2
 80014b0:	43da      	mvns	r2, r3
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	409a      	lsls	r2, r3
 80014c2:	0013      	movs	r3, r2
 80014c4:	693a      	ldr	r2, [r7, #16]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014d6:	2201      	movs	r2, #1
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
 80014dc:	0013      	movs	r3, r2
 80014de:	43da      	mvns	r2, r3
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	2201      	movs	r2, #1
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2203      	movs	r2, #3
 8001508:	4013      	ands	r3, r2
 800150a:	2b03      	cmp	r3, #3
 800150c:	d017      	beq.n	800153e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	2203      	movs	r2, #3
 800151a:	409a      	lsls	r2, r3
 800151c:	0013      	movs	r3, r2
 800151e:	43da      	mvns	r2, r3
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	409a      	lsls	r2, r3
 8001530:	0013      	movs	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	2203      	movs	r2, #3
 8001544:	4013      	ands	r3, r2
 8001546:	2b02      	cmp	r3, #2
 8001548:	d123      	bne.n	8001592 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	08da      	lsrs	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3208      	adds	r2, #8
 8001552:	0092      	lsls	r2, r2, #2
 8001554:	58d3      	ldr	r3, [r2, r3]
 8001556:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2207      	movs	r2, #7
 800155c:	4013      	ands	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	220f      	movs	r2, #15
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	43da      	mvns	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2107      	movs	r1, #7
 8001576:	400b      	ands	r3, r1
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	409a      	lsls	r2, r3
 800157c:	0013      	movs	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	08da      	lsrs	r2, r3, #3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3208      	adds	r2, #8
 800158c:	0092      	lsls	r2, r2, #2
 800158e:	6939      	ldr	r1, [r7, #16]
 8001590:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	2203      	movs	r2, #3
 800159e:	409a      	lsls	r2, r3
 80015a0:	0013      	movs	r3, r2
 80015a2:	43da      	mvns	r2, r3
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4013      	ands	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2203      	movs	r2, #3
 80015b0:	401a      	ands	r2, r3
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	409a      	lsls	r2, r3
 80015b8:	0013      	movs	r3, r2
 80015ba:	693a      	ldr	r2, [r7, #16]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	23c0      	movs	r3, #192	@ 0xc0
 80015cc:	029b      	lsls	r3, r3, #10
 80015ce:	4013      	ands	r3, r2
 80015d0:	d100      	bne.n	80015d4 <HAL_GPIO_Init+0x17c>
 80015d2:	e0a0      	b.n	8001716 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d4:	4b57      	ldr	r3, [pc, #348]	@ (8001734 <HAL_GPIO_Init+0x2dc>)
 80015d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015d8:	4b56      	ldr	r3, [pc, #344]	@ (8001734 <HAL_GPIO_Init+0x2dc>)
 80015da:	2101      	movs	r1, #1
 80015dc:	430a      	orrs	r2, r1
 80015de:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e0:	4a55      	ldr	r2, [pc, #340]	@ (8001738 <HAL_GPIO_Init+0x2e0>)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	589b      	ldr	r3, [r3, r2]
 80015ec:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2203      	movs	r2, #3
 80015f2:	4013      	ands	r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	220f      	movs	r2, #15
 80015f8:	409a      	lsls	r2, r3
 80015fa:	0013      	movs	r3, r2
 80015fc:	43da      	mvns	r2, r3
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4013      	ands	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	23a0      	movs	r3, #160	@ 0xa0
 8001608:	05db      	lsls	r3, r3, #23
 800160a:	429a      	cmp	r2, r3
 800160c:	d01f      	beq.n	800164e <HAL_GPIO_Init+0x1f6>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4a      	ldr	r2, [pc, #296]	@ (800173c <HAL_GPIO_Init+0x2e4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d019      	beq.n	800164a <HAL_GPIO_Init+0x1f2>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a49      	ldr	r2, [pc, #292]	@ (8001740 <HAL_GPIO_Init+0x2e8>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d013      	beq.n	8001646 <HAL_GPIO_Init+0x1ee>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a48      	ldr	r2, [pc, #288]	@ (8001744 <HAL_GPIO_Init+0x2ec>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00d      	beq.n	8001642 <HAL_GPIO_Init+0x1ea>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a47      	ldr	r2, [pc, #284]	@ (8001748 <HAL_GPIO_Init+0x2f0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d007      	beq.n	800163e <HAL_GPIO_Init+0x1e6>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a46      	ldr	r2, [pc, #280]	@ (800174c <HAL_GPIO_Init+0x2f4>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_GPIO_Init+0x1e2>
 8001636:	2305      	movs	r3, #5
 8001638:	e00a      	b.n	8001650 <HAL_GPIO_Init+0x1f8>
 800163a:	2306      	movs	r3, #6
 800163c:	e008      	b.n	8001650 <HAL_GPIO_Init+0x1f8>
 800163e:	2304      	movs	r3, #4
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x1f8>
 8001642:	2303      	movs	r3, #3
 8001644:	e004      	b.n	8001650 <HAL_GPIO_Init+0x1f8>
 8001646:	2302      	movs	r3, #2
 8001648:	e002      	b.n	8001650 <HAL_GPIO_Init+0x1f8>
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_GPIO_Init+0x1f8>
 800164e:	2300      	movs	r3, #0
 8001650:	697a      	ldr	r2, [r7, #20]
 8001652:	2103      	movs	r1, #3
 8001654:	400a      	ands	r2, r1
 8001656:	0092      	lsls	r2, r2, #2
 8001658:	4093      	lsls	r3, r2
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001660:	4935      	ldr	r1, [pc, #212]	@ (8001738 <HAL_GPIO_Init+0x2e0>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166e:	4b38      	ldr	r3, [pc, #224]	@ (8001750 <HAL_GPIO_Init+0x2f8>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43da      	mvns	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	2380      	movs	r3, #128	@ 0x80
 8001684:	035b      	lsls	r3, r3, #13
 8001686:	4013      	ands	r3, r2
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001692:	4b2f      	ldr	r3, [pc, #188]	@ (8001750 <HAL_GPIO_Init+0x2f8>)
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001698:	4b2d      	ldr	r3, [pc, #180]	@ (8001750 <HAL_GPIO_Init+0x2f8>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43da      	mvns	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	039b      	lsls	r3, r3, #14
 80016b0:	4013      	ands	r3, r2
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <HAL_GPIO_Init+0x2f8>)
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80016c2:	4b23      	ldr	r3, [pc, #140]	@ (8001750 <HAL_GPIO_Init+0x2f8>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	43da      	mvns	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	4013      	ands	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685a      	ldr	r2, [r3, #4]
 80016d6:	2380      	movs	r3, #128	@ 0x80
 80016d8:	029b      	lsls	r3, r3, #10
 80016da:	4013      	ands	r3, r2
 80016dc:	d003      	beq.n	80016e6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80016e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001750 <HAL_GPIO_Init+0x2f8>)
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ec:	4b18      	ldr	r3, [pc, #96]	@ (8001750 <HAL_GPIO_Init+0x2f8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	43da      	mvns	r2, r3
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685a      	ldr	r2, [r3, #4]
 8001700:	2380      	movs	r3, #128	@ 0x80
 8001702:	025b      	lsls	r3, r3, #9
 8001704:	4013      	ands	r3, r2
 8001706:	d003      	beq.n	8001710 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001710:	4b0f      	ldr	r3, [pc, #60]	@ (8001750 <HAL_GPIO_Init+0x2f8>)
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	40da      	lsrs	r2, r3
 8001724:	1e13      	subs	r3, r2, #0
 8001726:	d000      	beq.n	800172a <HAL_GPIO_Init+0x2d2>
 8001728:	e6a2      	b.n	8001470 <HAL_GPIO_Init+0x18>
  }
}
 800172a:	46c0      	nop			@ (mov r8, r8)
 800172c:	46c0      	nop			@ (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	b006      	add	sp, #24
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	50000400 	.word	0x50000400
 8001740:	50000800 	.word	0x50000800
 8001744:	50000c00 	.word	0x50000c00
 8001748:	50001000 	.word	0x50001000
 800174c:	50001c00 	.word	0x50001c00
 8001750:	40010400 	.word	0x40010400

08001754 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800176a:	e0bc      	b.n	80018e6 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800176c:	2201      	movs	r2, #1
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	409a      	lsls	r2, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d100      	bne.n	8001780 <HAL_GPIO_DeInit+0x2c>
 800177e:	e0af      	b.n	80018e0 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8001780:	4a5e      	ldr	r2, [pc, #376]	@ (80018fc <HAL_GPIO_DeInit+0x1a8>)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	3302      	adds	r3, #2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	589b      	ldr	r3, [r3, r2]
 800178c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2203      	movs	r2, #3
 8001792:	4013      	ands	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	220f      	movs	r2, #15
 8001798:	409a      	lsls	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	23a0      	movs	r3, #160	@ 0xa0
 80017a4:	05db      	lsls	r3, r3, #23
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d01f      	beq.n	80017ea <HAL_GPIO_DeInit+0x96>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a54      	ldr	r2, [pc, #336]	@ (8001900 <HAL_GPIO_DeInit+0x1ac>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d019      	beq.n	80017e6 <HAL_GPIO_DeInit+0x92>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a53      	ldr	r2, [pc, #332]	@ (8001904 <HAL_GPIO_DeInit+0x1b0>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d013      	beq.n	80017e2 <HAL_GPIO_DeInit+0x8e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a52      	ldr	r2, [pc, #328]	@ (8001908 <HAL_GPIO_DeInit+0x1b4>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d00d      	beq.n	80017de <HAL_GPIO_DeInit+0x8a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a51      	ldr	r2, [pc, #324]	@ (800190c <HAL_GPIO_DeInit+0x1b8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d007      	beq.n	80017da <HAL_GPIO_DeInit+0x86>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a50      	ldr	r2, [pc, #320]	@ (8001910 <HAL_GPIO_DeInit+0x1bc>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d101      	bne.n	80017d6 <HAL_GPIO_DeInit+0x82>
 80017d2:	2305      	movs	r3, #5
 80017d4:	e00a      	b.n	80017ec <HAL_GPIO_DeInit+0x98>
 80017d6:	2306      	movs	r3, #6
 80017d8:	e008      	b.n	80017ec <HAL_GPIO_DeInit+0x98>
 80017da:	2304      	movs	r3, #4
 80017dc:	e006      	b.n	80017ec <HAL_GPIO_DeInit+0x98>
 80017de:	2303      	movs	r3, #3
 80017e0:	e004      	b.n	80017ec <HAL_GPIO_DeInit+0x98>
 80017e2:	2302      	movs	r3, #2
 80017e4:	e002      	b.n	80017ec <HAL_GPIO_DeInit+0x98>
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <HAL_GPIO_DeInit+0x98>
 80017ea:	2300      	movs	r3, #0
 80017ec:	697a      	ldr	r2, [r7, #20]
 80017ee:	2103      	movs	r1, #3
 80017f0:	400a      	ands	r2, r1
 80017f2:	0092      	lsls	r2, r2, #2
 80017f4:	4093      	lsls	r3, r2
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d132      	bne.n	8001862 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80017fc:	4b45      	ldr	r3, [pc, #276]	@ (8001914 <HAL_GPIO_DeInit+0x1c0>)
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	43d9      	mvns	r1, r3
 8001804:	4b43      	ldr	r3, [pc, #268]	@ (8001914 <HAL_GPIO_DeInit+0x1c0>)
 8001806:	400a      	ands	r2, r1
 8001808:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800180a:	4b42      	ldr	r3, [pc, #264]	@ (8001914 <HAL_GPIO_DeInit+0x1c0>)
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	43d9      	mvns	r1, r3
 8001812:	4b40      	ldr	r3, [pc, #256]	@ (8001914 <HAL_GPIO_DeInit+0x1c0>)
 8001814:	400a      	ands	r2, r1
 8001816:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001818:	4b3e      	ldr	r3, [pc, #248]	@ (8001914 <HAL_GPIO_DeInit+0x1c0>)
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	43d9      	mvns	r1, r3
 8001820:	4b3c      	ldr	r3, [pc, #240]	@ (8001914 <HAL_GPIO_DeInit+0x1c0>)
 8001822:	400a      	ands	r2, r1
 8001824:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001826:	4b3b      	ldr	r3, [pc, #236]	@ (8001914 <HAL_GPIO_DeInit+0x1c0>)
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	43d9      	mvns	r1, r3
 800182e:	4b39      	ldr	r3, [pc, #228]	@ (8001914 <HAL_GPIO_DeInit+0x1c0>)
 8001830:	400a      	ands	r2, r1
 8001832:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2203      	movs	r2, #3
 8001838:	4013      	ands	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	409a      	lsls	r2, r3
 8001840:	0013      	movs	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001844:	4a2d      	ldr	r2, [pc, #180]	@ (80018fc <HAL_GPIO_DeInit+0x1a8>)
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	089b      	lsrs	r3, r3, #2
 800184a:	3302      	adds	r3, #2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	589a      	ldr	r2, [r3, r2]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43d9      	mvns	r1, r3
 8001854:	4829      	ldr	r0, [pc, #164]	@ (80018fc <HAL_GPIO_DeInit+0x1a8>)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	089b      	lsrs	r3, r3, #2
 800185a:	400a      	ands	r2, r1
 800185c:	3302      	adds	r3, #2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2103      	movs	r1, #3
 800186c:	4099      	lsls	r1, r3
 800186e:	000b      	movs	r3, r1
 8001870:	431a      	orrs	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3208      	adds	r2, #8
 800187e:	0092      	lsls	r2, r2, #2
 8001880:	58d3      	ldr	r3, [r2, r3]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	2107      	movs	r1, #7
 8001886:	400a      	ands	r2, r1
 8001888:	0092      	lsls	r2, r2, #2
 800188a:	210f      	movs	r1, #15
 800188c:	4091      	lsls	r1, r2
 800188e:	000a      	movs	r2, r1
 8001890:	43d1      	mvns	r1, r2
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	08d2      	lsrs	r2, r2, #3
 8001896:	4019      	ands	r1, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3208      	adds	r2, #8
 800189c:	0092      	lsls	r2, r2, #2
 800189e:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	0052      	lsls	r2, r2, #1
 80018a8:	2103      	movs	r1, #3
 80018aa:	4091      	lsls	r1, r2
 80018ac:	000a      	movs	r2, r1
 80018ae:	43d2      	mvns	r2, r2
 80018b0:	401a      	ands	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2101      	movs	r1, #1
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	4091      	lsls	r1, r2
 80018c0:	000a      	movs	r2, r1
 80018c2:	43d2      	mvns	r2, r2
 80018c4:	401a      	ands	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	0052      	lsls	r2, r2, #1
 80018d2:	2103      	movs	r1, #3
 80018d4:	4091      	lsls	r1, r2
 80018d6:	000a      	movs	r2, r1
 80018d8:	43d2      	mvns	r2, r2
 80018da:	401a      	ands	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	609a      	str	r2, [r3, #8]
    }
    position++;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	3301      	adds	r3, #1
 80018e4:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	40da      	lsrs	r2, r3
 80018ec:	1e13      	subs	r3, r2, #0
 80018ee:	d000      	beq.n	80018f2 <HAL_GPIO_DeInit+0x19e>
 80018f0:	e73c      	b.n	800176c <HAL_GPIO_DeInit+0x18>
  }
}
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	46c0      	nop			@ (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b006      	add	sp, #24
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40010000 	.word	0x40010000
 8001900:	50000400 	.word	0x50000400
 8001904:	50000800 	.word	0x50000800
 8001908:	50000c00 	.word	0x50000c00
 800190c:	50001000 	.word	0x50001000
 8001910:	50001c00 	.word	0x50001c00
 8001914:	40010400 	.word	0x40010400

08001918 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	0008      	movs	r0, r1
 8001922:	0011      	movs	r1, r2
 8001924:	1cbb      	adds	r3, r7, #2
 8001926:	1c02      	adds	r2, r0, #0
 8001928:	801a      	strh	r2, [r3, #0]
 800192a:	1c7b      	adds	r3, r7, #1
 800192c:	1c0a      	adds	r2, r1, #0
 800192e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001930:	1c7b      	adds	r3, r7, #1
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d004      	beq.n	8001942 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001938:	1cbb      	adds	r3, r7, #2
 800193a:	881a      	ldrh	r2, [r3, #0]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001940:	e003      	b.n	800194a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001942:	1cbb      	adds	r3, r7, #2
 8001944:	881a      	ldrh	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800194a:	46c0      	nop			@ (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	b002      	add	sp, #8
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e08f      	b.n	8001a86 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2241      	movs	r2, #65	@ 0x41
 800196a:	5c9b      	ldrb	r3, [r3, r2]
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b00      	cmp	r3, #0
 8001970:	d107      	bne.n	8001982 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2240      	movs	r2, #64	@ 0x40
 8001976:	2100      	movs	r1, #0
 8001978:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	0018      	movs	r0, r3
 800197e:	f7ff fa2d 	bl	8000ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2241      	movs	r2, #65	@ 0x41
 8001986:	2124      	movs	r1, #36	@ 0x24
 8001988:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2101      	movs	r1, #1
 8001996:	438a      	bics	r2, r1
 8001998:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	493b      	ldr	r1, [pc, #236]	@ (8001a90 <HAL_I2C_Init+0x13c>)
 80019a4:	400a      	ands	r2, r1
 80019a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4938      	ldr	r1, [pc, #224]	@ (8001a94 <HAL_I2C_Init+0x140>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d108      	bne.n	80019d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2180      	movs	r1, #128	@ 0x80
 80019ca:	0209      	lsls	r1, r1, #8
 80019cc:	430a      	orrs	r2, r1
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	e007      	b.n	80019e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2184      	movs	r1, #132	@ 0x84
 80019dc:	0209      	lsls	r1, r1, #8
 80019de:	430a      	orrs	r2, r1
 80019e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d109      	bne.n	80019fe <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2180      	movs	r1, #128	@ 0x80
 80019f6:	0109      	lsls	r1, r1, #4
 80019f8:	430a      	orrs	r2, r1
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	e007      	b.n	8001a0e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4923      	ldr	r1, [pc, #140]	@ (8001a98 <HAL_I2C_Init+0x144>)
 8001a0a:	400a      	ands	r2, r1
 8001a0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4920      	ldr	r1, [pc, #128]	@ (8001a9c <HAL_I2C_Init+0x148>)
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	491a      	ldr	r1, [pc, #104]	@ (8001a94 <HAL_I2C_Init+0x140>)
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	69d9      	ldr	r1, [r3, #28]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1a      	ldr	r2, [r3, #32]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	430a      	orrs	r2, r1
 8001a56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2101      	movs	r1, #1
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2241      	movs	r2, #65	@ 0x41
 8001a72:	2120      	movs	r1, #32
 8001a74:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2242      	movs	r2, #66	@ 0x42
 8001a80:	2100      	movs	r1, #0
 8001a82:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	0018      	movs	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b002      	add	sp, #8
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	f0ffffff 	.word	0xf0ffffff
 8001a94:	ffff7fff 	.word	0xffff7fff
 8001a98:	fffff7ff 	.word	0xfffff7ff
 8001a9c:	02008000 	.word	0x02008000

08001aa0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e022      	b.n	8001af8 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2241      	movs	r2, #65	@ 0x41
 8001ab6:	2124      	movs	r1, #36	@ 0x24
 8001ab8:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	438a      	bics	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f7ff f9c9 	bl	8000e64 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2241      	movs	r2, #65	@ 0x41
 8001adc:	2100      	movs	r1, #0
 8001ade:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2242      	movs	r2, #66	@ 0x42
 8001aea:	2100      	movs	r1, #0
 8001aec:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2240      	movs	r2, #64	@ 0x40
 8001af2:	2100      	movs	r1, #0
 8001af4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	0018      	movs	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b002      	add	sp, #8
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2241      	movs	r2, #65	@ 0x41
 8001b0e:	5c9b      	ldrb	r3, [r3, r2]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b20      	cmp	r3, #32
 8001b14:	d138      	bne.n	8001b88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2240      	movs	r2, #64	@ 0x40
 8001b1a:	5c9b      	ldrb	r3, [r3, r2]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e032      	b.n	8001b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2240      	movs	r2, #64	@ 0x40
 8001b28:	2101      	movs	r1, #1
 8001b2a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2241      	movs	r2, #65	@ 0x41
 8001b30:	2124      	movs	r1, #36	@ 0x24
 8001b32:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	2101      	movs	r1, #1
 8001b40:	438a      	bics	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4911      	ldr	r1, [pc, #68]	@ (8001b94 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001b50:	400a      	ands	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	6819      	ldr	r1, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	430a      	orrs	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2101      	movs	r1, #1
 8001b70:	430a      	orrs	r2, r1
 8001b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2241      	movs	r2, #65	@ 0x41
 8001b78:	2120      	movs	r1, #32
 8001b7a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2240      	movs	r2, #64	@ 0x40
 8001b80:	2100      	movs	r1, #0
 8001b82:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e000      	b.n	8001b8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b88:	2302      	movs	r3, #2
  }
}
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	b002      	add	sp, #8
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	ffffefff 	.word	0xffffefff

08001b98 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2241      	movs	r2, #65	@ 0x41
 8001ba6:	5c9b      	ldrb	r3, [r3, r2]
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d139      	bne.n	8001c22 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2240      	movs	r2, #64	@ 0x40
 8001bb2:	5c9b      	ldrb	r3, [r3, r2]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e033      	b.n	8001c24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2240      	movs	r2, #64	@ 0x40
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2241      	movs	r2, #65	@ 0x41
 8001bc8:	2124      	movs	r1, #36	@ 0x24
 8001bca:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	438a      	bics	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4a11      	ldr	r2, [pc, #68]	@ (8001c2c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	021b      	lsls	r3, r3, #8
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2241      	movs	r2, #65	@ 0x41
 8001c12:	2120      	movs	r1, #32
 8001c14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2240      	movs	r2, #64	@ 0x40
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	e000      	b.n	8001c24 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c22:	2302      	movs	r3, #2
  }
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b004      	add	sp, #16
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	fffff0ff 	.word	0xfffff0ff

08001c30 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	000a      	movs	r2, r1
 8001c3a:	1cfb      	adds	r3, r7, #3
 8001c3c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8001c42:	4b25      	ldr	r3, [pc, #148]	@ (8001cd8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	2380      	movs	r3, #128	@ 0x80
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8001c4e:	4b23      	ldr	r3, [pc, #140]	@ (8001cdc <HAL_PWR_EnterSTOPMode+0xac>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	2201      	movs	r2, #1
 8001c54:	4013      	ands	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d008      	beq.n	8001c70 <HAL_PWR_EnterSTOPMode+0x40>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001c64:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001c6a:	491d      	ldr	r1, [pc, #116]	@ (8001ce0 <HAL_PWR_EnterSTOPMode+0xb0>)
 8001c6c:	400a      	ands	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8001c70:	4b19      	ldr	r3, [pc, #100]	@ (8001cd8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2203      	movs	r2, #3
 8001c7a:	4393      	bics	r3, r2
 8001c7c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001c86:	4b14      	ldr	r3, [pc, #80]	@ (8001cd8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001c8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001c8e:	691a      	ldr	r2, [r3, #16]
 8001c90:	4b14      	ldr	r3, [pc, #80]	@ (8001ce4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001c92:	2104      	movs	r1, #4
 8001c94:	430a      	orrs	r2, r1
 8001c96:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001c98:	1cfb      	adds	r3, r7, #3
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d101      	bne.n	8001ca4 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001ca0:	bf30      	wfi
 8001ca2:	e002      	b.n	8001caa <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001ca4:	bf40      	sev
    __WFE();
 8001ca6:	bf20      	wfe
    __WFE();
 8001ca8:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001caa:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <HAL_PWR_EnterSTOPMode+0xb4>)
 8001cb0:	2104      	movs	r1, #4
 8001cb2:	438a      	bics	r2, r1
 8001cb4:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d009      	beq.n	8001cd0 <HAL_PWR_EnterSTOPMode+0xa0>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8001cc2:	4b05      	ldr	r3, [pc, #20]	@ (8001cd8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001cc8:	2180      	movs	r1, #128	@ 0x80
 8001cca:	0089      	lsls	r1, r1, #2
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
  }
}
 8001cd0:	46c0      	nop			@ (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b006      	add	sp, #24
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	fffffdff 	.word	0xfffffdff
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ce8:	b5b0      	push	{r4, r5, r7, lr}
 8001cea:	b08a      	sub	sp, #40	@ 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	f000 fbbf 	bl	800247a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cfc:	4bc9      	ldr	r3, [pc, #804]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	220c      	movs	r2, #12
 8001d02:	4013      	ands	r3, r2
 8001d04:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d06:	4bc7      	ldr	r3, [pc, #796]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	2380      	movs	r3, #128	@ 0x80
 8001d0c:	025b      	lsls	r3, r3, #9
 8001d0e:	4013      	ands	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2201      	movs	r2, #1
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d100      	bne.n	8001d1e <HAL_RCC_OscConfig+0x36>
 8001d1c:	e07e      	b.n	8001e1c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d007      	beq.n	8001d34 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d112      	bne.n	8001d50 <HAL_RCC_OscConfig+0x68>
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	025b      	lsls	r3, r3, #9
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d10d      	bne.n	8001d50 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	4bbb      	ldr	r3, [pc, #748]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	@ 0x80
 8001d3a:	029b      	lsls	r3, r3, #10
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d100      	bne.n	8001d42 <HAL_RCC_OscConfig+0x5a>
 8001d40:	e06b      	b.n	8001e1a <HAL_RCC_OscConfig+0x132>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d167      	bne.n	8001e1a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	f000 fb95 	bl	800247a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	2380      	movs	r3, #128	@ 0x80
 8001d56:	025b      	lsls	r3, r3, #9
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_OscConfig+0x84>
 8001d5c:	4bb1      	ldr	r3, [pc, #708]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4bb0      	ldr	r3, [pc, #704]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001d62:	2180      	movs	r1, #128	@ 0x80
 8001d64:	0249      	lsls	r1, r1, #9
 8001d66:	430a      	orrs	r2, r1
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e027      	b.n	8001dbc <HAL_RCC_OscConfig+0xd4>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685a      	ldr	r2, [r3, #4]
 8001d70:	23a0      	movs	r3, #160	@ 0xa0
 8001d72:	02db      	lsls	r3, r3, #11
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d10e      	bne.n	8001d96 <HAL_RCC_OscConfig+0xae>
 8001d78:	4baa      	ldr	r3, [pc, #680]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4ba9      	ldr	r3, [pc, #676]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001d7e:	2180      	movs	r1, #128	@ 0x80
 8001d80:	02c9      	lsls	r1, r1, #11
 8001d82:	430a      	orrs	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	4ba7      	ldr	r3, [pc, #668]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	4ba6      	ldr	r3, [pc, #664]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001d8c:	2180      	movs	r1, #128	@ 0x80
 8001d8e:	0249      	lsls	r1, r1, #9
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e012      	b.n	8001dbc <HAL_RCC_OscConfig+0xd4>
 8001d96:	4ba3      	ldr	r3, [pc, #652]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	4ba2      	ldr	r3, [pc, #648]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001d9c:	49a2      	ldr	r1, [pc, #648]	@ (8002028 <HAL_RCC_OscConfig+0x340>)
 8001d9e:	400a      	ands	r2, r1
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	4ba0      	ldr	r3, [pc, #640]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	2380      	movs	r3, #128	@ 0x80
 8001da8:	025b      	lsls	r3, r3, #9
 8001daa:	4013      	ands	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	4b9c      	ldr	r3, [pc, #624]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b9b      	ldr	r3, [pc, #620]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001db6:	499d      	ldr	r1, [pc, #628]	@ (800202c <HAL_RCC_OscConfig+0x344>)
 8001db8:	400a      	ands	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d015      	beq.n	8001df0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7ff fa20 	bl	8001208 <HAL_GetTick>
 8001dc8:	0003      	movs	r3, r0
 8001dca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dcc:	e009      	b.n	8001de2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dce:	f7ff fa1b 	bl	8001208 <HAL_GetTick>
 8001dd2:	0002      	movs	r2, r0
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	@ 0x64
 8001dda:	d902      	bls.n	8001de2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	f000 fb4c 	bl	800247a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001de2:	4b90      	ldr	r3, [pc, #576]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	2380      	movs	r3, #128	@ 0x80
 8001de8:	029b      	lsls	r3, r3, #10
 8001dea:	4013      	ands	r3, r2
 8001dec:	d0ef      	beq.n	8001dce <HAL_RCC_OscConfig+0xe6>
 8001dee:	e015      	b.n	8001e1c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fa0a 	bl	8001208 <HAL_GetTick>
 8001df4:	0003      	movs	r3, r0
 8001df6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dfa:	f7ff fa05 	bl	8001208 <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b64      	cmp	r3, #100	@ 0x64
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e336      	b.n	800247a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e0c:	4b85      	ldr	r3, [pc, #532]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	@ 0x80
 8001e12:	029b      	lsls	r3, r3, #10
 8001e14:	4013      	ands	r3, r2
 8001e16:	d1f0      	bne.n	8001dfa <HAL_RCC_OscConfig+0x112>
 8001e18:	e000      	b.n	8001e1c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2202      	movs	r2, #2
 8001e22:	4013      	ands	r3, r2
 8001e24:	d100      	bne.n	8001e28 <HAL_RCC_OscConfig+0x140>
 8001e26:	e099      	b.n	8001f5c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	2220      	movs	r2, #32
 8001e32:	4013      	ands	r3, r2
 8001e34:	d009      	beq.n	8001e4a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001e36:	4b7b      	ldr	r3, [pc, #492]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001e3c:	2120      	movs	r1, #32
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	2220      	movs	r2, #32
 8001e46:	4393      	bics	r3, r2
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	2b0c      	cmp	r3, #12
 8001e54:	d13e      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x1ec>
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d13b      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001e5c:	4b71      	ldr	r3, [pc, #452]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2204      	movs	r2, #4
 8001e62:	4013      	ands	r3, r2
 8001e64:	d004      	beq.n	8001e70 <HAL_RCC_OscConfig+0x188>
 8001e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e304      	b.n	800247a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e70:	4b6c      	ldr	r3, [pc, #432]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	4a6e      	ldr	r2, [pc, #440]	@ (8002030 <HAL_RCC_OscConfig+0x348>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	0019      	movs	r1, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	021a      	lsls	r2, r3, #8
 8001e80:	4b68      	ldr	r3, [pc, #416]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001e82:	430a      	orrs	r2, r1
 8001e84:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e86:	4b67      	ldr	r3, [pc, #412]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2209      	movs	r2, #9
 8001e8c:	4393      	bics	r3, r2
 8001e8e:	0019      	movs	r1, r3
 8001e90:	4b64      	ldr	r3, [pc, #400]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001e92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e94:	430a      	orrs	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e98:	f000 fc42 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 8001e9c:	0001      	movs	r1, r0
 8001e9e:	4b61      	ldr	r3, [pc, #388]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	091b      	lsrs	r3, r3, #4
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	4a62      	ldr	r2, [pc, #392]	@ (8002034 <HAL_RCC_OscConfig+0x34c>)
 8001eaa:	5cd3      	ldrb	r3, [r2, r3]
 8001eac:	000a      	movs	r2, r1
 8001eae:	40da      	lsrs	r2, r3
 8001eb0:	4b61      	ldr	r3, [pc, #388]	@ (8002038 <HAL_RCC_OscConfig+0x350>)
 8001eb2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001eb4:	4b61      	ldr	r3, [pc, #388]	@ (800203c <HAL_RCC_OscConfig+0x354>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2513      	movs	r5, #19
 8001eba:	197c      	adds	r4, r7, r5
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7ff f95d 	bl	800117c <HAL_InitTick>
 8001ec2:	0003      	movs	r3, r0
 8001ec4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001ec6:	197b      	adds	r3, r7, r5
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d046      	beq.n	8001f5c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8001ece:	197b      	adds	r3, r7, r5
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	e2d2      	b.n	800247a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d027      	beq.n	8001f2a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001eda:	4b52      	ldr	r3, [pc, #328]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	2209      	movs	r2, #9
 8001ee0:	4393      	bics	r3, r2
 8001ee2:	0019      	movs	r1, r3
 8001ee4:	4b4f      	ldr	r3, [pc, #316]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001ee6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7ff f98c 	bl	8001208 <HAL_GetTick>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ef6:	f7ff f987 	bl	8001208 <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e2b8      	b.n	800247a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f08:	4b46      	ldr	r3, [pc, #280]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d0f1      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	4b44      	ldr	r3, [pc, #272]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	4a46      	ldr	r2, [pc, #280]	@ (8002030 <HAL_RCC_OscConfig+0x348>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	0019      	movs	r1, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	021a      	lsls	r2, r3, #8
 8001f22:	4b40      	ldr	r3, [pc, #256]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001f24:	430a      	orrs	r2, r1
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	e018      	b.n	8001f5c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f2a:	4b3e      	ldr	r3, [pc, #248]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b3d      	ldr	r3, [pc, #244]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001f30:	2101      	movs	r1, #1
 8001f32:	438a      	bics	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f36:	f7ff f967 	bl	8001208 <HAL_GetTick>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f40:	f7ff f962 	bl	8001208 <HAL_GetTick>
 8001f44:	0002      	movs	r2, r0
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e293      	b.n	800247a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f52:	4b34      	ldr	r3, [pc, #208]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2204      	movs	r2, #4
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d1f1      	bne.n	8001f40 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2210      	movs	r2, #16
 8001f62:	4013      	ands	r3, r2
 8001f64:	d100      	bne.n	8001f68 <HAL_RCC_OscConfig+0x280>
 8001f66:	e0a2      	b.n	80020ae <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d140      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f6e:	4b2d      	ldr	r3, [pc, #180]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	2380      	movs	r3, #128	@ 0x80
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4013      	ands	r3, r2
 8001f78:	d005      	beq.n	8001f86 <HAL_RCC_OscConfig+0x29e>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e279      	b.n	800247a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f86:	4b27      	ldr	r3, [pc, #156]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8002040 <HAL_RCC_OscConfig+0x358>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f94:	4b23      	ldr	r3, [pc, #140]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001f96:	430a      	orrs	r2, r1
 8001f98:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f9a:	4b22      	ldr	r3, [pc, #136]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	0a19      	lsrs	r1, r3, #8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a1b      	ldr	r3, [r3, #32]
 8001fa6:	061a      	lsls	r2, r3, #24
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001faa:	430a      	orrs	r2, r1
 8001fac:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb2:	0b5b      	lsrs	r3, r3, #13
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	2280      	movs	r2, #128	@ 0x80
 8001fb8:	0212      	lsls	r2, r2, #8
 8001fba:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001fbc:	4b19      	ldr	r3, [pc, #100]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	091b      	lsrs	r3, r3, #4
 8001fc2:	210f      	movs	r1, #15
 8001fc4:	400b      	ands	r3, r1
 8001fc6:	491b      	ldr	r1, [pc, #108]	@ (8002034 <HAL_RCC_OscConfig+0x34c>)
 8001fc8:	5ccb      	ldrb	r3, [r1, r3]
 8001fca:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	@ (8002038 <HAL_RCC_OscConfig+0x350>)
 8001fce:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <HAL_RCC_OscConfig+0x354>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2513      	movs	r5, #19
 8001fd6:	197c      	adds	r4, r7, r5
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff f8cf 	bl	800117c <HAL_InitTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001fe2:	197b      	adds	r3, r7, r5
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d061      	beq.n	80020ae <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001fea:	197b      	adds	r3, r7, r5
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	e244      	b.n	800247a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69db      	ldr	r3, [r3, #28]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d040      	beq.n	800207a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b09      	ldr	r3, [pc, #36]	@ (8002024 <HAL_RCC_OscConfig+0x33c>)
 8001ffe:	2180      	movs	r1, #128	@ 0x80
 8002000:	0049      	lsls	r1, r1, #1
 8002002:	430a      	orrs	r2, r1
 8002004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002006:	f7ff f8ff 	bl	8001208 <HAL_GetTick>
 800200a:	0003      	movs	r3, r0
 800200c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800200e:	e019      	b.n	8002044 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002010:	f7ff f8fa 	bl	8001208 <HAL_GetTick>
 8002014:	0002      	movs	r2, r0
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d912      	bls.n	8002044 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e22b      	b.n	800247a <HAL_RCC_OscConfig+0x792>
 8002022:	46c0      	nop			@ (mov r8, r8)
 8002024:	40021000 	.word	0x40021000
 8002028:	fffeffff 	.word	0xfffeffff
 800202c:	fffbffff 	.word	0xfffbffff
 8002030:	ffffe0ff 	.word	0xffffe0ff
 8002034:	08004e28 	.word	0x08004e28
 8002038:	20000000 	.word	0x20000000
 800203c:	20000004 	.word	0x20000004
 8002040:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002044:	4bca      	ldr	r3, [pc, #808]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4013      	ands	r3, r2
 800204e:	d0df      	beq.n	8002010 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002050:	4bc7      	ldr	r3, [pc, #796]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4ac7      	ldr	r2, [pc, #796]	@ (8002374 <HAL_RCC_OscConfig+0x68c>)
 8002056:	4013      	ands	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800205e:	4bc4      	ldr	r3, [pc, #784]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 8002060:	430a      	orrs	r2, r1
 8002062:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002064:	4bc2      	ldr	r3, [pc, #776]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	021b      	lsls	r3, r3, #8
 800206a:	0a19      	lsrs	r1, r3, #8
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	061a      	lsls	r2, r3, #24
 8002072:	4bbf      	ldr	r3, [pc, #764]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 8002074:	430a      	orrs	r2, r1
 8002076:	605a      	str	r2, [r3, #4]
 8002078:	e019      	b.n	80020ae <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800207a:	4bbd      	ldr	r3, [pc, #756]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4bbc      	ldr	r3, [pc, #752]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 8002080:	49bd      	ldr	r1, [pc, #756]	@ (8002378 <HAL_RCC_OscConfig+0x690>)
 8002082:	400a      	ands	r2, r1
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7ff f8bf 	bl	8001208 <HAL_GetTick>
 800208a:	0003      	movs	r3, r0
 800208c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002090:	f7ff f8ba 	bl	8001208 <HAL_GetTick>
 8002094:	0002      	movs	r2, r0
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e1eb      	b.n	800247a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80020a2:	4bb3      	ldr	r3, [pc, #716]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	2380      	movs	r3, #128	@ 0x80
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4013      	ands	r3, r2
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2208      	movs	r2, #8
 80020b4:	4013      	ands	r3, r2
 80020b6:	d036      	beq.n	8002126 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	695b      	ldr	r3, [r3, #20]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d019      	beq.n	80020f4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c0:	4bab      	ldr	r3, [pc, #684]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80020c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020c4:	4baa      	ldr	r3, [pc, #680]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80020c6:	2101      	movs	r1, #1
 80020c8:	430a      	orrs	r2, r1
 80020ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020cc:	f7ff f89c 	bl	8001208 <HAL_GetTick>
 80020d0:	0003      	movs	r3, r0
 80020d2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020d6:	f7ff f897 	bl	8001208 <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e1c8      	b.n	800247a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80020e8:	4ba1      	ldr	r3, [pc, #644]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80020ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ec:	2202      	movs	r2, #2
 80020ee:	4013      	ands	r3, r2
 80020f0:	d0f1      	beq.n	80020d6 <HAL_RCC_OscConfig+0x3ee>
 80020f2:	e018      	b.n	8002126 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f4:	4b9e      	ldr	r3, [pc, #632]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80020f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80020f8:	4b9d      	ldr	r3, [pc, #628]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	438a      	bics	r2, r1
 80020fe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7ff f882 	bl	8001208 <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800210a:	f7ff f87d 	bl	8001208 <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e1ae      	b.n	800247a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800211c:	4b94      	ldr	r3, [pc, #592]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 800211e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002120:	2202      	movs	r2, #2
 8002122:	4013      	ands	r3, r2
 8002124:	d1f1      	bne.n	800210a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2204      	movs	r2, #4
 800212c:	4013      	ands	r3, r2
 800212e:	d100      	bne.n	8002132 <HAL_RCC_OscConfig+0x44a>
 8002130:	e0ae      	b.n	8002290 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002132:	2023      	movs	r0, #35	@ 0x23
 8002134:	183b      	adds	r3, r7, r0
 8002136:	2200      	movs	r2, #0
 8002138:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213a:	4b8d      	ldr	r3, [pc, #564]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 800213c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800213e:	2380      	movs	r3, #128	@ 0x80
 8002140:	055b      	lsls	r3, r3, #21
 8002142:	4013      	ands	r3, r2
 8002144:	d109      	bne.n	800215a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	4b8a      	ldr	r3, [pc, #552]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 8002148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800214a:	4b89      	ldr	r3, [pc, #548]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 800214c:	2180      	movs	r1, #128	@ 0x80
 800214e:	0549      	lsls	r1, r1, #21
 8002150:	430a      	orrs	r2, r1
 8002152:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002154:	183b      	adds	r3, r7, r0
 8002156:	2201      	movs	r2, #1
 8002158:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800215a:	4b88      	ldr	r3, [pc, #544]	@ (800237c <HAL_RCC_OscConfig+0x694>)
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	2380      	movs	r3, #128	@ 0x80
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	4013      	ands	r3, r2
 8002164:	d11a      	bne.n	800219c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002166:	4b85      	ldr	r3, [pc, #532]	@ (800237c <HAL_RCC_OscConfig+0x694>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4b84      	ldr	r3, [pc, #528]	@ (800237c <HAL_RCC_OscConfig+0x694>)
 800216c:	2180      	movs	r1, #128	@ 0x80
 800216e:	0049      	lsls	r1, r1, #1
 8002170:	430a      	orrs	r2, r1
 8002172:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002174:	f7ff f848 	bl	8001208 <HAL_GetTick>
 8002178:	0003      	movs	r3, r0
 800217a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800217e:	f7ff f843 	bl	8001208 <HAL_GetTick>
 8002182:	0002      	movs	r2, r0
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b64      	cmp	r3, #100	@ 0x64
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e174      	b.n	800247a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002190:	4b7a      	ldr	r3, [pc, #488]	@ (800237c <HAL_RCC_OscConfig+0x694>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2380      	movs	r3, #128	@ 0x80
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4013      	ands	r3, r2
 800219a:	d0f0      	beq.n	800217e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d107      	bne.n	80021b8 <HAL_RCC_OscConfig+0x4d0>
 80021a8:	4b71      	ldr	r3, [pc, #452]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80021aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021ac:	4b70      	ldr	r3, [pc, #448]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80021ae:	2180      	movs	r1, #128	@ 0x80
 80021b0:	0049      	lsls	r1, r1, #1
 80021b2:	430a      	orrs	r2, r1
 80021b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80021b6:	e031      	b.n	800221c <HAL_RCC_OscConfig+0x534>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10c      	bne.n	80021da <HAL_RCC_OscConfig+0x4f2>
 80021c0:	4b6b      	ldr	r3, [pc, #428]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80021c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021c4:	4b6a      	ldr	r3, [pc, #424]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80021c6:	496c      	ldr	r1, [pc, #432]	@ (8002378 <HAL_RCC_OscConfig+0x690>)
 80021c8:	400a      	ands	r2, r1
 80021ca:	651a      	str	r2, [r3, #80]	@ 0x50
 80021cc:	4b68      	ldr	r3, [pc, #416]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80021ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021d0:	4b67      	ldr	r3, [pc, #412]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80021d2:	496b      	ldr	r1, [pc, #428]	@ (8002380 <HAL_RCC_OscConfig+0x698>)
 80021d4:	400a      	ands	r2, r1
 80021d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80021d8:	e020      	b.n	800221c <HAL_RCC_OscConfig+0x534>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	23a0      	movs	r3, #160	@ 0xa0
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d10e      	bne.n	8002204 <HAL_RCC_OscConfig+0x51c>
 80021e6:	4b62      	ldr	r3, [pc, #392]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80021e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021ea:	4b61      	ldr	r3, [pc, #388]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80021ec:	2180      	movs	r1, #128	@ 0x80
 80021ee:	00c9      	lsls	r1, r1, #3
 80021f0:	430a      	orrs	r2, r1
 80021f2:	651a      	str	r2, [r3, #80]	@ 0x50
 80021f4:	4b5e      	ldr	r3, [pc, #376]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80021f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80021f8:	4b5d      	ldr	r3, [pc, #372]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80021fa:	2180      	movs	r1, #128	@ 0x80
 80021fc:	0049      	lsls	r1, r1, #1
 80021fe:	430a      	orrs	r2, r1
 8002200:	651a      	str	r2, [r3, #80]	@ 0x50
 8002202:	e00b      	b.n	800221c <HAL_RCC_OscConfig+0x534>
 8002204:	4b5a      	ldr	r3, [pc, #360]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 8002206:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002208:	4b59      	ldr	r3, [pc, #356]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 800220a:	495b      	ldr	r1, [pc, #364]	@ (8002378 <HAL_RCC_OscConfig+0x690>)
 800220c:	400a      	ands	r2, r1
 800220e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002210:	4b57      	ldr	r3, [pc, #348]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 8002212:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002214:	4b56      	ldr	r3, [pc, #344]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 8002216:	495a      	ldr	r1, [pc, #360]	@ (8002380 <HAL_RCC_OscConfig+0x698>)
 8002218:	400a      	ands	r2, r1
 800221a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d015      	beq.n	8002250 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002224:	f7fe fff0 	bl	8001208 <HAL_GetTick>
 8002228:	0003      	movs	r3, r0
 800222a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800222c:	e009      	b.n	8002242 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7fe ffeb 	bl	8001208 <HAL_GetTick>
 8002232:	0002      	movs	r2, r0
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	4a52      	ldr	r2, [pc, #328]	@ (8002384 <HAL_RCC_OscConfig+0x69c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e11b      	b.n	800247a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002242:	4b4b      	ldr	r3, [pc, #300]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 8002244:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002246:	2380      	movs	r3, #128	@ 0x80
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	4013      	ands	r3, r2
 800224c:	d0ef      	beq.n	800222e <HAL_RCC_OscConfig+0x546>
 800224e:	e014      	b.n	800227a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002250:	f7fe ffda 	bl	8001208 <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002258:	e009      	b.n	800226e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7fe ffd5 	bl	8001208 <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	4a47      	ldr	r2, [pc, #284]	@ (8002384 <HAL_RCC_OscConfig+0x69c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e105      	b.n	800247a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800226e:	4b40      	ldr	r3, [pc, #256]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 8002270:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002272:	2380      	movs	r3, #128	@ 0x80
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4013      	ands	r3, r2
 8002278:	d1ef      	bne.n	800225a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800227a:	2323      	movs	r3, #35	@ 0x23
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d105      	bne.n	8002290 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002284:	4b3a      	ldr	r3, [pc, #232]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 8002286:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002288:	4b39      	ldr	r3, [pc, #228]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 800228a:	493f      	ldr	r1, [pc, #252]	@ (8002388 <HAL_RCC_OscConfig+0x6a0>)
 800228c:	400a      	ands	r2, r1
 800228e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2220      	movs	r2, #32
 8002296:	4013      	ands	r3, r2
 8002298:	d049      	beq.n	800232e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d026      	beq.n	80022f0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80022a2:	4b33      	ldr	r3, [pc, #204]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4b32      	ldr	r3, [pc, #200]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80022a8:	2101      	movs	r1, #1
 80022aa:	430a      	orrs	r2, r1
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	4b30      	ldr	r3, [pc, #192]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80022b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022b2:	4b2f      	ldr	r3, [pc, #188]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80022b4:	2101      	movs	r1, #1
 80022b6:	430a      	orrs	r2, r1
 80022b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80022ba:	4b34      	ldr	r3, [pc, #208]	@ (800238c <HAL_RCC_OscConfig+0x6a4>)
 80022bc:	6a1a      	ldr	r2, [r3, #32]
 80022be:	4b33      	ldr	r3, [pc, #204]	@ (800238c <HAL_RCC_OscConfig+0x6a4>)
 80022c0:	2180      	movs	r1, #128	@ 0x80
 80022c2:	0189      	lsls	r1, r1, #6
 80022c4:	430a      	orrs	r2, r1
 80022c6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7fe ff9e 	bl	8001208 <HAL_GetTick>
 80022cc:	0003      	movs	r3, r0
 80022ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022d2:	f7fe ff99 	bl	8001208 <HAL_GetTick>
 80022d6:	0002      	movs	r2, r0
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e0ca      	b.n	800247a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022e4:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2202      	movs	r2, #2
 80022ea:	4013      	ands	r3, r2
 80022ec:	d0f1      	beq.n	80022d2 <HAL_RCC_OscConfig+0x5ea>
 80022ee:	e01e      	b.n	800232e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80022f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	4b1e      	ldr	r3, [pc, #120]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 80022f6:	2101      	movs	r1, #1
 80022f8:	438a      	bics	r2, r1
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	4b23      	ldr	r3, [pc, #140]	@ (800238c <HAL_RCC_OscConfig+0x6a4>)
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	4b22      	ldr	r3, [pc, #136]	@ (800238c <HAL_RCC_OscConfig+0x6a4>)
 8002302:	4923      	ldr	r1, [pc, #140]	@ (8002390 <HAL_RCC_OscConfig+0x6a8>)
 8002304:	400a      	ands	r2, r1
 8002306:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7fe ff7e 	bl	8001208 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002312:	f7fe ff79 	bl	8001208 <HAL_GetTick>
 8002316:	0002      	movs	r2, r0
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e0aa      	b.n	800247a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002324:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	2202      	movs	r2, #2
 800232a:	4013      	ands	r3, r2
 800232c:	d1f1      	bne.n	8002312 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002332:	2b00      	cmp	r3, #0
 8002334:	d100      	bne.n	8002338 <HAL_RCC_OscConfig+0x650>
 8002336:	e09f      	b.n	8002478 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b0c      	cmp	r3, #12
 800233c:	d100      	bne.n	8002340 <HAL_RCC_OscConfig+0x658>
 800233e:	e078      	b.n	8002432 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002344:	2b02      	cmp	r3, #2
 8002346:	d159      	bne.n	80023fc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002348:	4b09      	ldr	r3, [pc, #36]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b08      	ldr	r3, [pc, #32]	@ (8002370 <HAL_RCC_OscConfig+0x688>)
 800234e:	4911      	ldr	r1, [pc, #68]	@ (8002394 <HAL_RCC_OscConfig+0x6ac>)
 8002350:	400a      	ands	r2, r1
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7fe ff58 	bl	8001208 <HAL_GetTick>
 8002358:	0003      	movs	r3, r0
 800235a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800235c:	e01c      	b.n	8002398 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800235e:	f7fe ff53 	bl	8001208 <HAL_GetTick>
 8002362:	0002      	movs	r2, r0
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d915      	bls.n	8002398 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e084      	b.n	800247a <HAL_RCC_OscConfig+0x792>
 8002370:	40021000 	.word	0x40021000
 8002374:	ffff1fff 	.word	0xffff1fff
 8002378:	fffffeff 	.word	0xfffffeff
 800237c:	40007000 	.word	0x40007000
 8002380:	fffffbff 	.word	0xfffffbff
 8002384:	00001388 	.word	0x00001388
 8002388:	efffffff 	.word	0xefffffff
 800238c:	40010000 	.word	0x40010000
 8002390:	ffffdfff 	.word	0xffffdfff
 8002394:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002398:	4b3a      	ldr	r3, [pc, #232]	@ (8002484 <HAL_RCC_OscConfig+0x79c>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2380      	movs	r3, #128	@ 0x80
 800239e:	049b      	lsls	r3, r3, #18
 80023a0:	4013      	ands	r3, r2
 80023a2:	d1dc      	bne.n	800235e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023a4:	4b37      	ldr	r3, [pc, #220]	@ (8002484 <HAL_RCC_OscConfig+0x79c>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4a37      	ldr	r2, [pc, #220]	@ (8002488 <HAL_RCC_OscConfig+0x7a0>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	0019      	movs	r1, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	431a      	orrs	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023bc:	431a      	orrs	r2, r3
 80023be:	4b31      	ldr	r3, [pc, #196]	@ (8002484 <HAL_RCC_OscConfig+0x79c>)
 80023c0:	430a      	orrs	r2, r1
 80023c2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002484 <HAL_RCC_OscConfig+0x79c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002484 <HAL_RCC_OscConfig+0x79c>)
 80023ca:	2180      	movs	r1, #128	@ 0x80
 80023cc:	0449      	lsls	r1, r1, #17
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d2:	f7fe ff19 	bl	8001208 <HAL_GetTick>
 80023d6:	0003      	movs	r3, r0
 80023d8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023dc:	f7fe ff14 	bl	8001208 <HAL_GetTick>
 80023e0:	0002      	movs	r2, r0
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e045      	b.n	800247a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023ee:	4b25      	ldr	r3, [pc, #148]	@ (8002484 <HAL_RCC_OscConfig+0x79c>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	2380      	movs	r3, #128	@ 0x80
 80023f4:	049b      	lsls	r3, r3, #18
 80023f6:	4013      	ands	r3, r2
 80023f8:	d0f0      	beq.n	80023dc <HAL_RCC_OscConfig+0x6f4>
 80023fa:	e03d      	b.n	8002478 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fc:	4b21      	ldr	r3, [pc, #132]	@ (8002484 <HAL_RCC_OscConfig+0x79c>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b20      	ldr	r3, [pc, #128]	@ (8002484 <HAL_RCC_OscConfig+0x79c>)
 8002402:	4922      	ldr	r1, [pc, #136]	@ (800248c <HAL_RCC_OscConfig+0x7a4>)
 8002404:	400a      	ands	r2, r1
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fefe 	bl	8001208 <HAL_GetTick>
 800240c:	0003      	movs	r3, r0
 800240e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002412:	f7fe fef9 	bl	8001208 <HAL_GetTick>
 8002416:	0002      	movs	r2, r0
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e02a      	b.n	800247a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002424:	4b17      	ldr	r3, [pc, #92]	@ (8002484 <HAL_RCC_OscConfig+0x79c>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	2380      	movs	r3, #128	@ 0x80
 800242a:	049b      	lsls	r3, r3, #18
 800242c:	4013      	ands	r3, r2
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x72a>
 8002430:	e022      	b.n	8002478 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e01d      	b.n	800247a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800243e:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <HAL_RCC_OscConfig+0x79c>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	2380      	movs	r3, #128	@ 0x80
 8002448:	025b      	lsls	r3, r3, #9
 800244a:	401a      	ands	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002450:	429a      	cmp	r2, r3
 8002452:	d10f      	bne.n	8002474 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	23f0      	movs	r3, #240	@ 0xf0
 8002458:	039b      	lsls	r3, r3, #14
 800245a:	401a      	ands	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002460:	429a      	cmp	r2, r3
 8002462:	d107      	bne.n	8002474 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	23c0      	movs	r3, #192	@ 0xc0
 8002468:	041b      	lsls	r3, r3, #16
 800246a:	401a      	ands	r2, r3
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e000      	b.n	800247a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b00a      	add	sp, #40	@ 0x28
 8002480:	bdb0      	pop	{r4, r5, r7, pc}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	40021000 	.word	0x40021000
 8002488:	ff02ffff 	.word	0xff02ffff
 800248c:	feffffff 	.word	0xfeffffff

08002490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b5b0      	push	{r4, r5, r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e128      	b.n	80026f6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b96      	ldr	r3, [pc, #600]	@ (8002700 <HAL_RCC_ClockConfig+0x270>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2201      	movs	r2, #1
 80024aa:	4013      	ands	r3, r2
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d91e      	bls.n	80024f0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b93      	ldr	r3, [pc, #588]	@ (8002700 <HAL_RCC_ClockConfig+0x270>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2201      	movs	r2, #1
 80024b8:	4393      	bics	r3, r2
 80024ba:	0019      	movs	r1, r3
 80024bc:	4b90      	ldr	r3, [pc, #576]	@ (8002700 <HAL_RCC_ClockConfig+0x270>)
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	430a      	orrs	r2, r1
 80024c2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80024c4:	f7fe fea0 	bl	8001208 <HAL_GetTick>
 80024c8:	0003      	movs	r3, r0
 80024ca:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024cc:	e009      	b.n	80024e2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ce:	f7fe fe9b 	bl	8001208 <HAL_GetTick>
 80024d2:	0002      	movs	r2, r0
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	4a8a      	ldr	r2, [pc, #552]	@ (8002704 <HAL_RCC_ClockConfig+0x274>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e109      	b.n	80026f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e2:	4b87      	ldr	r3, [pc, #540]	@ (8002700 <HAL_RCC_ClockConfig+0x270>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2201      	movs	r2, #1
 80024e8:	4013      	ands	r3, r2
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d1ee      	bne.n	80024ce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2202      	movs	r2, #2
 80024f6:	4013      	ands	r3, r2
 80024f8:	d009      	beq.n	800250e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024fa:	4b83      	ldr	r3, [pc, #524]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	22f0      	movs	r2, #240	@ 0xf0
 8002500:	4393      	bics	r3, r2
 8002502:	0019      	movs	r1, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	4b7f      	ldr	r3, [pc, #508]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 800250a:	430a      	orrs	r2, r1
 800250c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2201      	movs	r2, #1
 8002514:	4013      	ands	r3, r2
 8002516:	d100      	bne.n	800251a <HAL_RCC_ClockConfig+0x8a>
 8002518:	e089      	b.n	800262e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002522:	4b79      	ldr	r3, [pc, #484]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	2380      	movs	r3, #128	@ 0x80
 8002528:	029b      	lsls	r3, r3, #10
 800252a:	4013      	ands	r3, r2
 800252c:	d120      	bne.n	8002570 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0e1      	b.n	80026f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b03      	cmp	r3, #3
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800253a:	4b73      	ldr	r3, [pc, #460]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	2380      	movs	r3, #128	@ 0x80
 8002540:	049b      	lsls	r3, r3, #18
 8002542:	4013      	ands	r3, r2
 8002544:	d114      	bne.n	8002570 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0d5      	b.n	80026f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	2b01      	cmp	r3, #1
 8002550:	d106      	bne.n	8002560 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002552:	4b6d      	ldr	r3, [pc, #436]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2204      	movs	r2, #4
 8002558:	4013      	ands	r3, r2
 800255a:	d109      	bne.n	8002570 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0ca      	b.n	80026f6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002560:	4b69      	ldr	r3, [pc, #420]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2380      	movs	r3, #128	@ 0x80
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4013      	ands	r3, r2
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0c2      	b.n	80026f6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002570:	4b65      	ldr	r3, [pc, #404]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2203      	movs	r2, #3
 8002576:	4393      	bics	r3, r2
 8002578:	0019      	movs	r1, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	4b62      	ldr	r3, [pc, #392]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 8002580:	430a      	orrs	r2, r1
 8002582:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002584:	f7fe fe40 	bl	8001208 <HAL_GetTick>
 8002588:	0003      	movs	r3, r0
 800258a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d111      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002594:	e009      	b.n	80025aa <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002596:	f7fe fe37 	bl	8001208 <HAL_GetTick>
 800259a:	0002      	movs	r2, r0
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	4a58      	ldr	r2, [pc, #352]	@ (8002704 <HAL_RCC_ClockConfig+0x274>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e0a5      	b.n	80026f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80025aa:	4b57      	ldr	r3, [pc, #348]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	220c      	movs	r2, #12
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d1ef      	bne.n	8002596 <HAL_RCC_ClockConfig+0x106>
 80025b6:	e03a      	b.n	800262e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d111      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c0:	e009      	b.n	80025d6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c2:	f7fe fe21 	bl	8001208 <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002704 <HAL_RCC_ClockConfig+0x274>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e08f      	b.n	80026f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	220c      	movs	r2, #12
 80025dc:	4013      	ands	r3, r2
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d1ef      	bne.n	80025c2 <HAL_RCC_ClockConfig+0x132>
 80025e2:	e024      	b.n	800262e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d11b      	bne.n	8002624 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80025ec:	e009      	b.n	8002602 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025ee:	f7fe fe0b 	bl	8001208 <HAL_GetTick>
 80025f2:	0002      	movs	r2, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	4a42      	ldr	r2, [pc, #264]	@ (8002704 <HAL_RCC_ClockConfig+0x274>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e079      	b.n	80026f6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002602:	4b41      	ldr	r3, [pc, #260]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	220c      	movs	r2, #12
 8002608:	4013      	ands	r3, r2
 800260a:	2b04      	cmp	r3, #4
 800260c:	d1ef      	bne.n	80025ee <HAL_RCC_ClockConfig+0x15e>
 800260e:	e00e      	b.n	800262e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002610:	f7fe fdfa 	bl	8001208 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	4a3a      	ldr	r2, [pc, #232]	@ (8002704 <HAL_RCC_ClockConfig+0x274>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d901      	bls.n	8002624 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e068      	b.n	80026f6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002624:	4b38      	ldr	r3, [pc, #224]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	220c      	movs	r2, #12
 800262a:	4013      	ands	r3, r2
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800262e:	4b34      	ldr	r3, [pc, #208]	@ (8002700 <HAL_RCC_ClockConfig+0x270>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2201      	movs	r2, #1
 8002634:	4013      	ands	r3, r2
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d21e      	bcs.n	800267a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263c:	4b30      	ldr	r3, [pc, #192]	@ (8002700 <HAL_RCC_ClockConfig+0x270>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2201      	movs	r2, #1
 8002642:	4393      	bics	r3, r2
 8002644:	0019      	movs	r1, r3
 8002646:	4b2e      	ldr	r3, [pc, #184]	@ (8002700 <HAL_RCC_ClockConfig+0x270>)
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800264e:	f7fe fddb 	bl	8001208 <HAL_GetTick>
 8002652:	0003      	movs	r3, r0
 8002654:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002656:	e009      	b.n	800266c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002658:	f7fe fdd6 	bl	8001208 <HAL_GetTick>
 800265c:	0002      	movs	r2, r0
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	4a28      	ldr	r2, [pc, #160]	@ (8002704 <HAL_RCC_ClockConfig+0x274>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e044      	b.n	80026f6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800266c:	4b24      	ldr	r3, [pc, #144]	@ (8002700 <HAL_RCC_ClockConfig+0x270>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2201      	movs	r2, #1
 8002672:	4013      	ands	r3, r2
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d1ee      	bne.n	8002658 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2204      	movs	r2, #4
 8002680:	4013      	ands	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002684:	4b20      	ldr	r3, [pc, #128]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4a20      	ldr	r2, [pc, #128]	@ (800270c <HAL_RCC_ClockConfig+0x27c>)
 800268a:	4013      	ands	r3, r2
 800268c:	0019      	movs	r1, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	4b1d      	ldr	r3, [pc, #116]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 8002694:	430a      	orrs	r2, r1
 8002696:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2208      	movs	r2, #8
 800269e:	4013      	ands	r3, r2
 80026a0:	d00a      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026a2:	4b19      	ldr	r3, [pc, #100]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002710 <HAL_RCC_ClockConfig+0x280>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	0019      	movs	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	00da      	lsls	r2, r3, #3
 80026b2:	4b15      	ldr	r3, [pc, #84]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 80026b4:	430a      	orrs	r2, r1
 80026b6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026b8:	f000 f832 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 80026bc:	0001      	movs	r1, r0
 80026be:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <HAL_RCC_ClockConfig+0x278>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	091b      	lsrs	r3, r3, #4
 80026c4:	220f      	movs	r2, #15
 80026c6:	4013      	ands	r3, r2
 80026c8:	4a12      	ldr	r2, [pc, #72]	@ (8002714 <HAL_RCC_ClockConfig+0x284>)
 80026ca:	5cd3      	ldrb	r3, [r2, r3]
 80026cc:	000a      	movs	r2, r1
 80026ce:	40da      	lsrs	r2, r3
 80026d0:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <HAL_RCC_ClockConfig+0x288>)
 80026d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80026d4:	4b11      	ldr	r3, [pc, #68]	@ (800271c <HAL_RCC_ClockConfig+0x28c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	250b      	movs	r5, #11
 80026da:	197c      	adds	r4, r7, r5
 80026dc:	0018      	movs	r0, r3
 80026de:	f7fe fd4d 	bl	800117c <HAL_InitTick>
 80026e2:	0003      	movs	r3, r0
 80026e4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80026e6:	197b      	adds	r3, r7, r5
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80026ee:	197b      	adds	r3, r7, r5
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	0018      	movs	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b004      	add	sp, #16
 80026fc:	bdb0      	pop	{r4, r5, r7, pc}
 80026fe:	46c0      	nop			@ (mov r8, r8)
 8002700:	40022000 	.word	0x40022000
 8002704:	00001388 	.word	0x00001388
 8002708:	40021000 	.word	0x40021000
 800270c:	fffff8ff 	.word	0xfffff8ff
 8002710:	ffffc7ff 	.word	0xffffc7ff
 8002714:	08004e28 	.word	0x08004e28
 8002718:	20000000 	.word	0x20000000
 800271c:	20000004 	.word	0x20000004

08002720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002726:	4b3c      	ldr	r3, [pc, #240]	@ (8002818 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	220c      	movs	r2, #12
 8002730:	4013      	ands	r3, r2
 8002732:	2b0c      	cmp	r3, #12
 8002734:	d013      	beq.n	800275e <HAL_RCC_GetSysClockFreq+0x3e>
 8002736:	d85c      	bhi.n	80027f2 <HAL_RCC_GetSysClockFreq+0xd2>
 8002738:	2b04      	cmp	r3, #4
 800273a:	d002      	beq.n	8002742 <HAL_RCC_GetSysClockFreq+0x22>
 800273c:	2b08      	cmp	r3, #8
 800273e:	d00b      	beq.n	8002758 <HAL_RCC_GetSysClockFreq+0x38>
 8002740:	e057      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002742:	4b35      	ldr	r3, [pc, #212]	@ (8002818 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2210      	movs	r2, #16
 8002748:	4013      	ands	r3, r2
 800274a:	d002      	beq.n	8002752 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800274c:	4b33      	ldr	r3, [pc, #204]	@ (800281c <HAL_RCC_GetSysClockFreq+0xfc>)
 800274e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002750:	e05d      	b.n	800280e <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8002752:	4b33      	ldr	r3, [pc, #204]	@ (8002820 <HAL_RCC_GetSysClockFreq+0x100>)
 8002754:	613b      	str	r3, [r7, #16]
      break;
 8002756:	e05a      	b.n	800280e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002758:	4b32      	ldr	r3, [pc, #200]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x104>)
 800275a:	613b      	str	r3, [r7, #16]
      break;
 800275c:	e057      	b.n	800280e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	0c9b      	lsrs	r3, r3, #18
 8002762:	220f      	movs	r2, #15
 8002764:	4013      	ands	r3, r2
 8002766:	4a30      	ldr	r2, [pc, #192]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x108>)
 8002768:	5cd3      	ldrb	r3, [r2, r3]
 800276a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	0d9b      	lsrs	r3, r3, #22
 8002770:	2203      	movs	r2, #3
 8002772:	4013      	ands	r3, r2
 8002774:	3301      	adds	r3, #1
 8002776:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002778:	4b27      	ldr	r3, [pc, #156]	@ (8002818 <HAL_RCC_GetSysClockFreq+0xf8>)
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	2380      	movs	r3, #128	@ 0x80
 800277e:	025b      	lsls	r3, r3, #9
 8002780:	4013      	ands	r3, r2
 8002782:	d00f      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	000a      	movs	r2, r1
 8002788:	0152      	lsls	r2, r2, #5
 800278a:	1a52      	subs	r2, r2, r1
 800278c:	0193      	lsls	r3, r2, #6
 800278e:	1a9b      	subs	r3, r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	185b      	adds	r3, r3, r1
 8002794:	025b      	lsls	r3, r3, #9
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	0018      	movs	r0, r3
 800279a:	f7fd fcc7 	bl	800012c <__udivsi3>
 800279e:	0003      	movs	r3, r0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e023      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80027a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002818 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2210      	movs	r2, #16
 80027aa:	4013      	ands	r3, r2
 80027ac:	d00f      	beq.n	80027ce <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	000a      	movs	r2, r1
 80027b2:	0152      	lsls	r2, r2, #5
 80027b4:	1a52      	subs	r2, r2, r1
 80027b6:	0193      	lsls	r3, r2, #6
 80027b8:	1a9b      	subs	r3, r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	185b      	adds	r3, r3, r1
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	0018      	movs	r0, r3
 80027c4:	f7fd fcb2 	bl	800012c <__udivsi3>
 80027c8:	0003      	movs	r3, r0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	e00e      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	000a      	movs	r2, r1
 80027d2:	0152      	lsls	r2, r2, #5
 80027d4:	1a52      	subs	r2, r2, r1
 80027d6:	0193      	lsls	r3, r2, #6
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	185b      	adds	r3, r3, r1
 80027de:	029b      	lsls	r3, r3, #10
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	0018      	movs	r0, r3
 80027e4:	f7fd fca2 	bl	800012c <__udivsi3>
 80027e8:	0003      	movs	r3, r0
 80027ea:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	613b      	str	r3, [r7, #16]
      break;
 80027f0:	e00d      	b.n	800280e <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80027f2:	4b09      	ldr	r3, [pc, #36]	@ (8002818 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	0b5b      	lsrs	r3, r3, #13
 80027f8:	2207      	movs	r2, #7
 80027fa:	4013      	ands	r3, r2
 80027fc:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	2280      	movs	r2, #128	@ 0x80
 8002804:	0212      	lsls	r2, r2, #8
 8002806:	409a      	lsls	r2, r3
 8002808:	0013      	movs	r3, r2
 800280a:	613b      	str	r3, [r7, #16]
      break;
 800280c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800280e:	693b      	ldr	r3, [r7, #16]
}
 8002810:	0018      	movs	r0, r3
 8002812:	46bd      	mov	sp, r7
 8002814:	b006      	add	sp, #24
 8002816:	bd80      	pop	{r7, pc}
 8002818:	40021000 	.word	0x40021000
 800281c:	003d0900 	.word	0x003d0900
 8002820:	00f42400 	.word	0x00f42400
 8002824:	007a1200 	.word	0x007a1200
 8002828:	08004e40 	.word	0x08004e40

0800282c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002830:	4b02      	ldr	r3, [pc, #8]	@ (800283c <HAL_RCC_GetHCLKFreq+0x10>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	20000000 	.word	0x20000000

08002840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002844:	f7ff fff2 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002848:	0001      	movs	r1, r0
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <HAL_RCC_GetPCLK1Freq+0x24>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	0a1b      	lsrs	r3, r3, #8
 8002850:	2207      	movs	r2, #7
 8002852:	4013      	ands	r3, r2
 8002854:	4a04      	ldr	r2, [pc, #16]	@ (8002868 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002856:	5cd3      	ldrb	r3, [r2, r3]
 8002858:	40d9      	lsrs	r1, r3
 800285a:	000b      	movs	r3, r1
}
 800285c:	0018      	movs	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	46c0      	nop			@ (mov r8, r8)
 8002864:	40021000 	.word	0x40021000
 8002868:	08004e38 	.word	0x08004e38

0800286c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002870:	f7ff ffdc 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002874:	0001      	movs	r1, r0
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	0adb      	lsrs	r3, r3, #11
 800287c:	2207      	movs	r2, #7
 800287e:	4013      	ands	r3, r2
 8002880:	4a04      	ldr	r2, [pc, #16]	@ (8002894 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	40d9      	lsrs	r1, r3
 8002886:	000b      	movs	r3, r1
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	40021000 	.word	0x40021000
 8002894:	08004e38 	.word	0x08004e38

08002898 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80028a0:	2317      	movs	r3, #23
 80028a2:	18fb      	adds	r3, r7, r3
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2220      	movs	r2, #32
 80028ae:	4013      	ands	r3, r2
 80028b0:	d106      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	2380      	movs	r3, #128	@ 0x80
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	4013      	ands	r3, r2
 80028bc:	d100      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80028be:	e104      	b.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028c0:	4bb9      	ldr	r3, [pc, #740]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028c4:	2380      	movs	r3, #128	@ 0x80
 80028c6:	055b      	lsls	r3, r3, #21
 80028c8:	4013      	ands	r3, r2
 80028ca:	d10a      	bne.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028cc:	4bb6      	ldr	r3, [pc, #728]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028d0:	4bb5      	ldr	r3, [pc, #724]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80028d2:	2180      	movs	r1, #128	@ 0x80
 80028d4:	0549      	lsls	r1, r1, #21
 80028d6:	430a      	orrs	r2, r1
 80028d8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80028da:	2317      	movs	r3, #23
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	2201      	movs	r2, #1
 80028e0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e2:	4bb2      	ldr	r3, [pc, #712]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	2380      	movs	r3, #128	@ 0x80
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4013      	ands	r3, r2
 80028ec:	d11a      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ee:	4baf      	ldr	r3, [pc, #700]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4bae      	ldr	r3, [pc, #696]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80028f4:	2180      	movs	r1, #128	@ 0x80
 80028f6:	0049      	lsls	r1, r1, #1
 80028f8:	430a      	orrs	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028fc:	f7fe fc84 	bl	8001208 <HAL_GetTick>
 8002900:	0003      	movs	r3, r0
 8002902:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	e008      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002906:	f7fe fc7f 	bl	8001208 <HAL_GetTick>
 800290a:	0002      	movs	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	2b64      	cmp	r3, #100	@ 0x64
 8002912:	d901      	bls.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e143      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002918:	4ba4      	ldr	r3, [pc, #656]	@ (8002bac <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	2380      	movs	r3, #128	@ 0x80
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	4013      	ands	r3, r2
 8002922:	d0f0      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002924:	4ba0      	ldr	r3, [pc, #640]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	23c0      	movs	r3, #192	@ 0xc0
 800292a:	039b      	lsls	r3, r3, #14
 800292c:	4013      	ands	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685a      	ldr	r2, [r3, #4]
 8002934:	23c0      	movs	r3, #192	@ 0xc0
 8002936:	039b      	lsls	r3, r3, #14
 8002938:	4013      	ands	r3, r2
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	429a      	cmp	r2, r3
 800293e:	d107      	bne.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	23c0      	movs	r3, #192	@ 0xc0
 8002946:	039b      	lsls	r3, r3, #14
 8002948:	4013      	ands	r3, r2
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	429a      	cmp	r2, r3
 800294e:	d013      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	23c0      	movs	r3, #192	@ 0xc0
 8002956:	029b      	lsls	r3, r3, #10
 8002958:	401a      	ands	r2, r3
 800295a:	23c0      	movs	r3, #192	@ 0xc0
 800295c:	029b      	lsls	r3, r3, #10
 800295e:	429a      	cmp	r2, r3
 8002960:	d10a      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002962:	4b91      	ldr	r3, [pc, #580]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	2380      	movs	r3, #128	@ 0x80
 8002968:	029b      	lsls	r3, r3, #10
 800296a:	401a      	ands	r2, r3
 800296c:	2380      	movs	r3, #128	@ 0x80
 800296e:	029b      	lsls	r3, r3, #10
 8002970:	429a      	cmp	r2, r3
 8002972:	d101      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e113      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002978:	4b8b      	ldr	r3, [pc, #556]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800297a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800297c:	23c0      	movs	r3, #192	@ 0xc0
 800297e:	029b      	lsls	r3, r3, #10
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d049      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	23c0      	movs	r3, #192	@ 0xc0
 8002990:	029b      	lsls	r3, r3, #10
 8002992:	4013      	ands	r3, r2
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	429a      	cmp	r2, r3
 8002998:	d004      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2220      	movs	r2, #32
 80029a0:	4013      	ands	r3, r2
 80029a2:	d10d      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	23c0      	movs	r3, #192	@ 0xc0
 80029aa:	029b      	lsls	r3, r3, #10
 80029ac:	4013      	ands	r3, r2
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d034      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	2380      	movs	r3, #128	@ 0x80
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	4013      	ands	r3, r2
 80029be:	d02e      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80029c0:	4b79      	ldr	r3, [pc, #484]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029c4:	4a7a      	ldr	r2, [pc, #488]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029ca:	4b77      	ldr	r3, [pc, #476]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029ce:	4b76      	ldr	r3, [pc, #472]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029d0:	2180      	movs	r1, #128	@ 0x80
 80029d2:	0309      	lsls	r1, r1, #12
 80029d4:	430a      	orrs	r2, r1
 80029d6:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029d8:	4b73      	ldr	r3, [pc, #460]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80029dc:	4b72      	ldr	r3, [pc, #456]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029de:	4975      	ldr	r1, [pc, #468]	@ (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80029e0:	400a      	ands	r2, r1
 80029e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80029e4:	4b70      	ldr	r3, [pc, #448]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	2380      	movs	r3, #128	@ 0x80
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4013      	ands	r3, r2
 80029f2:	d014      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fc08 	bl	8001208 <HAL_GetTick>
 80029f8:	0003      	movs	r3, r0
 80029fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029fc:	e009      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fe fc03 	bl	8001208 <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	4a6b      	ldr	r2, [pc, #428]	@ (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0c6      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a12:	4b65      	ldr	r3, [pc, #404]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a16:	2380      	movs	r3, #128	@ 0x80
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d0ef      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	@ 0x80
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	4013      	ands	r3, r2
 8002a28:	d01f      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	23c0      	movs	r3, #192	@ 0xc0
 8002a30:	029b      	lsls	r3, r3, #10
 8002a32:	401a      	ands	r2, r3
 8002a34:	23c0      	movs	r3, #192	@ 0xc0
 8002a36:	029b      	lsls	r3, r3, #10
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d10c      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002a3c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a5e      	ldr	r2, [pc, #376]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	23c0      	movs	r3, #192	@ 0xc0
 8002a4c:	039b      	lsls	r3, r3, #14
 8002a4e:	401a      	ands	r2, r3
 8002a50:	4b55      	ldr	r3, [pc, #340]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	4b54      	ldr	r3, [pc, #336]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a58:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	23c0      	movs	r3, #192	@ 0xc0
 8002a60:	029b      	lsls	r3, r3, #10
 8002a62:	401a      	ands	r2, r3
 8002a64:	4b50      	ldr	r3, [pc, #320]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a66:	430a      	orrs	r2, r1
 8002a68:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	4013      	ands	r3, r2
 8002a72:	d01f      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	23c0      	movs	r3, #192	@ 0xc0
 8002a7a:	029b      	lsls	r3, r3, #10
 8002a7c:	401a      	ands	r2, r3
 8002a7e:	23c0      	movs	r3, #192	@ 0xc0
 8002a80:	029b      	lsls	r3, r3, #10
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d10c      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002a86:	4b48      	ldr	r3, [pc, #288]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a4c      	ldr	r2, [pc, #304]	@ (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	0019      	movs	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	23c0      	movs	r3, #192	@ 0xc0
 8002a96:	039b      	lsls	r3, r3, #14
 8002a98:	401a      	ands	r2, r3
 8002a9a:	4b43      	ldr	r3, [pc, #268]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	4b41      	ldr	r3, [pc, #260]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002aa2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	23c0      	movs	r3, #192	@ 0xc0
 8002aaa:	029b      	lsls	r3, r3, #10
 8002aac:	401a      	ands	r2, r3
 8002aae:	4b3e      	ldr	r3, [pc, #248]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ab4:	2317      	movs	r3, #23
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d105      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002abe:	4b3a      	ldr	r3, [pc, #232]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ac0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ac2:	4b39      	ldr	r3, [pc, #228]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ac4:	493e      	ldr	r1, [pc, #248]	@ (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002ac6:	400a      	ands	r2, r1
 8002ac8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	d009      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ad4:	4b34      	ldr	r3, [pc, #208]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad8:	2203      	movs	r2, #3
 8002ada:	4393      	bics	r3, r2
 8002adc:	0019      	movs	r1, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	4b31      	ldr	r3, [pc, #196]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2202      	movs	r2, #2
 8002aee:	4013      	ands	r3, r2
 8002af0:	d009      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002af2:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af6:	220c      	movs	r2, #12
 8002af8:	4393      	bics	r3, r2
 8002afa:	0019      	movs	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	4b29      	ldr	r3, [pc, #164]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b02:	430a      	orrs	r2, r1
 8002b04:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2204      	movs	r2, #4
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	d009      	beq.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b10:	4b25      	ldr	r3, [pc, #148]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b14:	4a2b      	ldr	r2, [pc, #172]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002b16:	4013      	ands	r3, r2
 8002b18:	0019      	movs	r1, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695a      	ldr	r2, [r3, #20]
 8002b1e:	4b22      	ldr	r3, [pc, #136]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b20:	430a      	orrs	r2, r1
 8002b22:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2208      	movs	r2, #8
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d009      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b32:	4a25      	ldr	r2, [pc, #148]	@ (8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	0019      	movs	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	2380      	movs	r3, #128	@ 0x80
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b4e:	4b16      	ldr	r3, [pc, #88]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b52:	4a17      	ldr	r2, [pc, #92]	@ (8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002b54:	4013      	ands	r3, r2
 8002b56:	0019      	movs	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69da      	ldr	r2, [r3, #28]
 8002b5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2240      	movs	r2, #64	@ 0x40
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d009      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b70:	4a16      	ldr	r2, [pc, #88]	@ (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	0019      	movs	r1, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2280      	movs	r2, #128	@ 0x80
 8002b86:	4013      	ands	r3, r2
 8002b88:	d009      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002b8a:	4b07      	ldr	r3, [pc, #28]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8e:	4a10      	ldr	r2, [pc, #64]	@ (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a1a      	ldr	r2, [r3, #32]
 8002b98:	4b03      	ldr	r3, [pc, #12]	@ (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b006      	add	sp, #24
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	fffcffff 	.word	0xfffcffff
 8002bb4:	fff7ffff 	.word	0xfff7ffff
 8002bb8:	00001388 	.word	0x00001388
 8002bbc:	ffcfffff 	.word	0xffcfffff
 8002bc0:	efffffff 	.word	0xefffffff
 8002bc4:	fffff3ff 	.word	0xfffff3ff
 8002bc8:	ffffcfff 	.word	0xffffcfff
 8002bcc:	fbffffff 	.word	0xfbffffff
 8002bd0:	fff3ffff 	.word	0xfff3ffff

08002bd4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002bd4:	b5b0      	push	{r4, r5, r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bdc:	230f      	movs	r3, #15
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e088      	b.n	8002d00 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2221      	movs	r2, #33	@ 0x21
 8002bf2:	5c9b      	ldrb	r3, [r3, r2]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d107      	bne.n	8002c0a <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	2100      	movs	r1, #0
 8002c00:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0018      	movs	r0, r3
 8002c06:	f7fe f953 	bl	8000eb0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2221      	movs	r2, #33	@ 0x21
 8002c0e:	2102      	movs	r1, #2
 8002c10:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2210      	movs	r2, #16
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d05f      	beq.n	8002ce0 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	22ca      	movs	r2, #202	@ 0xca
 8002c26:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2253      	movs	r2, #83	@ 0x53
 8002c2e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002c30:	250f      	movs	r5, #15
 8002c32:	197c      	adds	r4, r7, r5
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	0018      	movs	r0, r3
 8002c38:	f000 f93e 	bl	8002eb8 <RTC_EnterInitMode>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002c40:	0028      	movs	r0, r5
 8002c42:	183b      	adds	r3, r7, r0
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d12c      	bne.n	8002ca4 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	492c      	ldr	r1, [pc, #176]	@ (8002d08 <HAL_RTC_Init+0x134>)
 8002c56:	400a      	ands	r2, r1
 8002c58:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	6899      	ldr	r1, [r3, #8]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	699b      	ldr	r3, [r3, #24]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68d2      	ldr	r2, [r2, #12]
 8002c80:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6919      	ldr	r1, [r3, #16]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	041a      	lsls	r2, r3, #16
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002c96:	183c      	adds	r4, r7, r0
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	0018      	movs	r0, r3
 8002c9c:	f000 f950 	bl	8002f40 <RTC_ExitInitMode>
 8002ca0:	0003      	movs	r3, r0
 8002ca2:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8002ca4:	230f      	movs	r3, #15
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d113      	bne.n	8002cd6 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2103      	movs	r1, #3
 8002cba:	438a      	bics	r2, r1
 8002cbc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69da      	ldr	r2, [r3, #28]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	431a      	orrs	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	22ff      	movs	r2, #255	@ 0xff
 8002cdc:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cde:	e003      	b.n	8002ce8 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002ce0:	230f      	movs	r3, #15
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8002ce8:	230f      	movs	r3, #15
 8002cea:	18fb      	adds	r3, r7, r3
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d103      	bne.n	8002cfa <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2221      	movs	r2, #33	@ 0x21
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002cfa:	230f      	movs	r3, #15
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	781b      	ldrb	r3, [r3, #0]
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b004      	add	sp, #16
 8002d06:	bdb0      	pop	{r4, r5, r7, pc}
 8002d08:	ff8fffbf 	.word	0xff8fffbf

08002d0c <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	045b      	lsls	r3, r3, #17
 8002d2e:	0c5a      	lsrs	r2, r3, #17
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a22      	ldr	r2, [pc, #136]	@ (8002dc4 <HAL_RTC_GetTime+0xb8>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	0c1b      	lsrs	r3, r3, #16
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	223f      	movs	r2, #63	@ 0x3f
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	0a1b      	lsrs	r3, r3, #8
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	227f      	movs	r2, #127	@ 0x7f
 8002d58:	4013      	ands	r3, r2
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	227f      	movs	r2, #127	@ 0x7f
 8002d66:	4013      	ands	r3, r2
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	0d9b      	lsrs	r3, r3, #22
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2201      	movs	r2, #1
 8002d76:	4013      	ands	r3, r2
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d11a      	bne.n	8002dba <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f000 f903 	bl	8002f94 <RTC_Bcd2ToByte>
 8002d8e:	0003      	movs	r3, r0
 8002d90:	001a      	movs	r2, r3
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	785b      	ldrb	r3, [r3, #1]
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 f8fa 	bl	8002f94 <RTC_Bcd2ToByte>
 8002da0:	0003      	movs	r3, r0
 8002da2:	001a      	movs	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	789b      	ldrb	r3, [r3, #2]
 8002dac:	0018      	movs	r0, r3
 8002dae:	f000 f8f1 	bl	8002f94 <RTC_Bcd2ToByte>
 8002db2:	0003      	movs	r3, r0
 8002db4:	001a      	movs	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b006      	add	sp, #24
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	007f7f7f 	.word	0x007f7f7f

08002dc8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4a21      	ldr	r2, [pc, #132]	@ (8002e64 <HAL_RTC_GetDate+0x9c>)
 8002de0:	4013      	ands	r3, r2
 8002de2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	0c1b      	lsrs	r3, r3, #16
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	221f      	movs	r2, #31
 8002df6:	4013      	ands	r3, r2
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	223f      	movs	r2, #63	@ 0x3f
 8002e04:	4013      	ands	r3, r2
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	0b5b      	lsrs	r3, r3, #13
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2207      	movs	r2, #7
 8002e14:	4013      	ands	r3, r2
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d11a      	bne.n	8002e58 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	78db      	ldrb	r3, [r3, #3]
 8002e26:	0018      	movs	r0, r3
 8002e28:	f000 f8b4 	bl	8002f94 <RTC_Bcd2ToByte>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	001a      	movs	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	785b      	ldrb	r3, [r3, #1]
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f000 f8ab 	bl	8002f94 <RTC_Bcd2ToByte>
 8002e3e:	0003      	movs	r3, r0
 8002e40:	001a      	movs	r2, r3
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	789b      	ldrb	r3, [r3, #2]
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f000 f8a2 	bl	8002f94 <RTC_Bcd2ToByte>
 8002e50:	0003      	movs	r3, r0
 8002e52:	001a      	movs	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b006      	add	sp, #24
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			@ (mov r8, r8)
 8002e64:	00ffff3f 	.word	0x00ffff3f

08002e68 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb4 <HAL_RTC_WaitForSynchro+0x4c>)
 8002e7a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e7c:	f7fe f9c4 	bl	8001208 <HAL_GetTick>
 8002e80:	0003      	movs	r3, r0
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e84:	e00a      	b.n	8002e9c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e86:	f7fe f9bf 	bl	8001208 <HAL_GetTick>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1ad2      	subs	r2, r2, r3
 8002e90:	23fa      	movs	r3, #250	@ 0xfa
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d901      	bls.n	8002e9c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e006      	b.n	8002eaa <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d0ee      	beq.n	8002e86 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b004      	add	sp, #16
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			@ (mov r8, r8)
 8002eb4:	0001ff5f 	.word	0x0001ff5f

08002eb8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec4:	230f      	movs	r3, #15
 8002ec6:	18fb      	adds	r3, r7, r3
 8002ec8:	2200      	movs	r2, #0
 8002eca:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	2240      	movs	r2, #64	@ 0x40
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	d12c      	bne.n	8002f32 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2180      	movs	r1, #128	@ 0x80
 8002ee4:	430a      	orrs	r2, r1
 8002ee6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002ee8:	f7fe f98e 	bl	8001208 <HAL_GetTick>
 8002eec:	0003      	movs	r3, r0
 8002eee:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002ef0:	e014      	b.n	8002f1c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ef2:	f7fe f989 	bl	8001208 <HAL_GetTick>
 8002ef6:	0002      	movs	r2, r0
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	1ad2      	subs	r2, r2, r3
 8002efc:	200f      	movs	r0, #15
 8002efe:	183b      	adds	r3, r7, r0
 8002f00:	1839      	adds	r1, r7, r0
 8002f02:	7809      	ldrb	r1, [r1, #0]
 8002f04:	7019      	strb	r1, [r3, #0]
 8002f06:	23fa      	movs	r3, #250	@ 0xfa
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d906      	bls.n	8002f1c <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2221      	movs	r2, #33	@ 0x21
 8002f12:	2104      	movs	r1, #4
 8002f14:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8002f16:	183b      	adds	r3, r7, r0
 8002f18:	2201      	movs	r2, #1
 8002f1a:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	2240      	movs	r2, #64	@ 0x40
 8002f24:	4013      	ands	r3, r2
 8002f26:	d104      	bne.n	8002f32 <RTC_EnterInitMode+0x7a>
 8002f28:	230f      	movs	r3, #15
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d1df      	bne.n	8002ef2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8002f32:	230f      	movs	r3, #15
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	781b      	ldrb	r3, [r3, #0]
}
 8002f38:	0018      	movs	r0, r3
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b004      	add	sp, #16
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f48:	240f      	movs	r4, #15
 8002f4a:	193b      	adds	r3, r7, r4
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2180      	movs	r1, #128	@ 0x80
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	2220      	movs	r2, #32
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d10c      	bne.n	8002f86 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	0018      	movs	r0, r3
 8002f70:	f7ff ff7a 	bl	8002e68 <HAL_RTC_WaitForSynchro>
 8002f74:	1e03      	subs	r3, r0, #0
 8002f76:	d006      	beq.n	8002f86 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2221      	movs	r2, #33	@ 0x21
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002f80:	193b      	adds	r3, r7, r4
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8002f86:	230f      	movs	r3, #15
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	781b      	ldrb	r3, [r3, #0]
}
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b005      	add	sp, #20
 8002f92:	bd90      	pop	{r4, r7, pc}

08002f94 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	0002      	movs	r2, r0
 8002f9c:	1dfb      	adds	r3, r7, #7
 8002f9e:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002fa4:	1dfb      	adds	r3, r7, #7
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	091b      	lsrs	r3, r3, #4
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	001a      	movs	r2, r3
 8002fae:	0013      	movs	r3, r2
 8002fb0:	009b      	lsls	r3, r3, #2
 8002fb2:	189b      	adds	r3, r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	1dfb      	adds	r3, r7, #7
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	210f      	movs	r1, #15
 8002fc2:	400b      	ands	r3, r1
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	18d3      	adds	r3, r2, r3
 8002fc8:	b2db      	uxtb	r3, r3
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b004      	add	sp, #16
 8002fd0:	bd80      	pop	{r7, pc}
	...

08002fd4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002fe0:	4b64      	ldr	r3, [pc, #400]	@ (8003174 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	22fa      	movs	r2, #250	@ 0xfa
 8002fe6:	01d1      	lsls	r1, r2, #7
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f7fd f89f 	bl	800012c <__udivsi3>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	001a      	movs	r2, r3
 8002ff2:	0013      	movs	r3, r2
 8002ff4:	015b      	lsls	r3, r3, #5
 8002ff6:	1a9b      	subs	r3, r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	189b      	adds	r3, r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	5c9b      	ldrb	r3, [r3, r2]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 800300a:	2302      	movs	r3, #2
 800300c:	e0ad      	b.n	800316a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2221      	movs	r2, #33	@ 0x21
 800301a:	2102      	movs	r1, #2
 800301c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	22ca      	movs	r2, #202	@ 0xca
 8003024:	625a      	str	r2, [r3, #36]	@ 0x24
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2253      	movs	r2, #83	@ 0x53
 800302c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	2380      	movs	r3, #128	@ 0x80
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4013      	ands	r3, r2
 800303a:	d019      	beq.n	8003070 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	3b01      	subs	r3, #1
 8003040:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10d      	bne.n	8003064 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	22ff      	movs	r2, #255	@ 0xff
 800304e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2221      	movs	r2, #33	@ 0x21
 8003054:	2103      	movs	r1, #3
 8003056:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	2100      	movs	r1, #0
 800305e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e082      	b.n	800316a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	2204      	movs	r2, #4
 800306c:	4013      	ands	r3, r2
 800306e:	d1e5      	bne.n	800303c <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	493f      	ldr	r1, [pc, #252]	@ (8003178 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 800307c:	400a      	ands	r2, r1
 800307e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	22ff      	movs	r2, #255	@ 0xff
 8003088:	401a      	ands	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	493b      	ldr	r1, [pc, #236]	@ (800317c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8003090:	430a      	orrs	r2, r1
 8003092:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8003094:	4b37      	ldr	r3, [pc, #220]	@ (8003174 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	22fa      	movs	r2, #250	@ 0xfa
 800309a:	01d1      	lsls	r1, r2, #7
 800309c:	0018      	movs	r0, r3
 800309e:	f7fd f845 	bl	800012c <__udivsi3>
 80030a2:	0003      	movs	r3, r0
 80030a4:	001a      	movs	r2, r3
 80030a6:	0013      	movs	r3, r2
 80030a8:	015b      	lsls	r3, r3, #5
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	189b      	adds	r3, r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10d      	bne.n	80030dc <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	22ff      	movs	r2, #255	@ 0xff
 80030c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2221      	movs	r2, #33	@ 0x21
 80030cc:	2103      	movs	r1, #3
 80030ce:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	2100      	movs	r1, #0
 80030d6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e046      	b.n	800316a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2204      	movs	r2, #4
 80030e4:	4013      	ands	r3, r2
 80030e6:	d0e5      	beq.n	80030b4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2107      	movs	r1, #7
 80030f4:	438a      	bics	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6899      	ldr	r1, [r3, #8]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	430a      	orrs	r2, r1
 8003106:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8003110:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4b1a      	ldr	r3, [pc, #104]	@ (8003180 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003116:	2180      	movs	r1, #128	@ 0x80
 8003118:	0349      	lsls	r1, r1, #13
 800311a:	430a      	orrs	r2, r1
 800311c:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800311e:	4b18      	ldr	r3, [pc, #96]	@ (8003180 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	4b17      	ldr	r3, [pc, #92]	@ (8003180 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 8003124:	2180      	movs	r1, #128	@ 0x80
 8003126:	0349      	lsls	r1, r1, #13
 8003128:	430a      	orrs	r2, r1
 800312a:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2180      	movs	r1, #128	@ 0x80
 8003138:	01c9      	lsls	r1, r1, #7
 800313a:	430a      	orrs	r2, r1
 800313c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2180      	movs	r1, #128	@ 0x80
 800314a:	00c9      	lsls	r1, r1, #3
 800314c:	430a      	orrs	r2, r1
 800314e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	22ff      	movs	r2, #255	@ 0xff
 8003156:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2221      	movs	r2, #33	@ 0x21
 800315c:	2101      	movs	r1, #1
 800315e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	2100      	movs	r1, #0
 8003166:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	0018      	movs	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	b006      	add	sp, #24
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	20000000 	.word	0x20000000
 8003178:	fffffbff 	.word	0xfffffbff
 800317c:	fffffb7f 	.word	0xfffffb7f
 8003180:	40010400 	.word	0x40010400

08003184 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	5c9b      	ldrb	r3, [r3, r2]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 800319a:	2302      	movs	r3, #2
 800319c:	e04e      	b.n	800323c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	2101      	movs	r1, #1
 80031a4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2221      	movs	r2, #33	@ 0x21
 80031aa:	2102      	movs	r1, #2
 80031ac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	22ca      	movs	r2, #202	@ 0xca
 80031b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2253      	movs	r2, #83	@ 0x53
 80031bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	491e      	ldr	r1, [pc, #120]	@ (8003244 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 80031ca:	400a      	ands	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	491b      	ldr	r1, [pc, #108]	@ (8003248 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 80031da:	400a      	ands	r2, r1
 80031dc:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031de:	f7fe f813 	bl	8001208 <HAL_GetTick>
 80031e2:	0003      	movs	r3, r0
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80031e6:	e016      	b.n	8003216 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031e8:	f7fe f80e 	bl	8001208 <HAL_GetTick>
 80031ec:	0002      	movs	r2, r0
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1ad2      	subs	r2, r2, r3
 80031f2:	23fa      	movs	r3, #250	@ 0xfa
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d90d      	bls.n	8003216 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	22ff      	movs	r2, #255	@ 0xff
 8003200:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2221      	movs	r2, #33	@ 0x21
 8003206:	2103      	movs	r1, #3
 8003208:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2220      	movs	r2, #32
 800320e:	2100      	movs	r1, #0
 8003210:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e012      	b.n	800323c <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2204      	movs	r2, #4
 800321e:	4013      	ands	r3, r2
 8003220:	d0e2      	beq.n	80031e8 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	22ff      	movs	r2, #255	@ 0xff
 8003228:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2221      	movs	r2, #33	@ 0x21
 800322e:	2101      	movs	r1, #1
 8003230:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	2100      	movs	r1, #0
 8003238:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	0018      	movs	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	b004      	add	sp, #16
 8003242:	bd80      	pop	{r7, pc}
 8003244:	fffffbff 	.word	0xfffffbff
 8003248:	ffffbfff 	.word	0xffffbfff

0800324c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8003254:	4b13      	ldr	r3, [pc, #76]	@ (80032a4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8003256:	2280      	movs	r2, #128	@ 0x80
 8003258:	0352      	lsls	r2, r2, #13
 800325a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	2380      	movs	r3, #128	@ 0x80
 8003264:	01db      	lsls	r3, r3, #7
 8003266:	4013      	ands	r3, r2
 8003268:	d014      	beq.n	8003294 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	2380      	movs	r3, #128	@ 0x80
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	4013      	ands	r3, r2
 8003276:	d00d      	beq.n	8003294 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	22ff      	movs	r2, #255	@ 0xff
 8003280:	401a      	ands	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4908      	ldr	r1, [pc, #32]	@ (80032a8 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8003288:	430a      	orrs	r2, r1
 800328a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	0018      	movs	r0, r3
 8003290:	f7fd faac 	bl	80007ec <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2221      	movs	r2, #33	@ 0x21
 8003298:	2101      	movs	r1, #1
 800329a:	5499      	strb	r1, [r3, r2]
}
 800329c:	46c0      	nop			@ (mov r8, r8)
 800329e:	46bd      	mov	sp, r7
 80032a0:	b002      	add	sp, #8
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40010400 	.word	0x40010400
 80032a8:	fffffb7f 	.word	0xfffffb7f

080032ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e044      	b.n	8003348 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d107      	bne.n	80032d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2278      	movs	r2, #120	@ 0x78
 80032ca:	2100      	movs	r1, #0
 80032cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7fd fe05 	bl	8000ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2224      	movs	r2, #36	@ 0x24
 80032da:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2101      	movs	r1, #1
 80032e8:	438a      	bics	r2, r1
 80032ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	0018      	movs	r0, r3
 80032f8:	f000 fba8 	bl	8003a4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	0018      	movs	r0, r3
 8003300:	f000 f906 	bl	8003510 <UART_SetConfig>
 8003304:	0003      	movs	r3, r0
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e01c      	b.n	8003348 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	490d      	ldr	r1, [pc, #52]	@ (8003350 <HAL_UART_Init+0xa4>)
 800331a:	400a      	ands	r2, r1
 800331c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	212a      	movs	r1, #42	@ 0x2a
 800332a:	438a      	bics	r2, r1
 800332c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2101      	movs	r1, #1
 800333a:	430a      	orrs	r2, r1
 800333c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	0018      	movs	r0, r3
 8003342:	f000 fc37 	bl	8003bb4 <UART_CheckIdleState>
 8003346:	0003      	movs	r3, r0
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	b002      	add	sp, #8
 800334e:	bd80      	pop	{r7, pc}
 8003350:	ffffb7ff 	.word	0xffffb7ff

08003354 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e030      	b.n	80033c8 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2224      	movs	r2, #36	@ 0x24
 800336a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2101      	movs	r1, #1
 8003378:	438a      	bics	r2, r1
 800337a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2200      	movs	r2, #0
 800338a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	0018      	movs	r0, r3
 8003398:	f7fd fe18 	bl	8000fcc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2284      	movs	r2, #132	@ 0x84
 80033a0:	2100      	movs	r1, #0
 80033a2:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2280      	movs	r2, #128	@ 0x80
 80033ae:	2100      	movs	r1, #0
 80033b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2278      	movs	r2, #120	@ 0x78
 80033c2:	2100      	movs	r1, #0
 80033c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	0018      	movs	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b002      	add	sp, #8
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	@ 0x28
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	1dbb      	adds	r3, r7, #6
 80033de:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d000      	beq.n	80033ea <HAL_UART_Transmit+0x1a>
 80033e8:	e08c      	b.n	8003504 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_UART_Transmit+0x28>
 80033f0:	1dbb      	adds	r3, r7, #6
 80033f2:	881b      	ldrh	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e084      	b.n	8003506 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	2380      	movs	r3, #128	@ 0x80
 8003402:	015b      	lsls	r3, r3, #5
 8003404:	429a      	cmp	r2, r3
 8003406:	d109      	bne.n	800341c <HAL_UART_Transmit+0x4c>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d105      	bne.n	800341c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2201      	movs	r2, #1
 8003414:	4013      	ands	r3, r2
 8003416:	d001      	beq.n	800341c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e074      	b.n	8003506 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2284      	movs	r2, #132	@ 0x84
 8003420:	2100      	movs	r1, #0
 8003422:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2221      	movs	r2, #33	@ 0x21
 8003428:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800342a:	f7fd feed 	bl	8001208 <HAL_GetTick>
 800342e:	0003      	movs	r3, r0
 8003430:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	1dba      	adds	r2, r7, #6
 8003436:	2150      	movs	r1, #80	@ 0x50
 8003438:	8812      	ldrh	r2, [r2, #0]
 800343a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1dba      	adds	r2, r7, #6
 8003440:	2152      	movs	r1, #82	@ 0x52
 8003442:	8812      	ldrh	r2, [r2, #0]
 8003444:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	2380      	movs	r3, #128	@ 0x80
 800344c:	015b      	lsls	r3, r3, #5
 800344e:	429a      	cmp	r2, r3
 8003450:	d108      	bne.n	8003464 <HAL_UART_Transmit+0x94>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d104      	bne.n	8003464 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	e003      	b.n	800346c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800346c:	e02f      	b.n	80034ce <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	9300      	str	r3, [sp, #0]
 8003476:	0013      	movs	r3, r2
 8003478:	2200      	movs	r2, #0
 800347a:	2180      	movs	r1, #128	@ 0x80
 800347c:	f000 fc42 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 8003480:	1e03      	subs	r3, r0, #0
 8003482:	d004      	beq.n	800348e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e03b      	b.n	8003506 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10b      	bne.n	80034ac <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	001a      	movs	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	05d2      	lsls	r2, r2, #23
 80034a0:	0dd2      	lsrs	r2, r2, #23
 80034a2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	3302      	adds	r3, #2
 80034a8:	61bb      	str	r3, [r7, #24]
 80034aa:	e007      	b.n	80034bc <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	781a      	ldrb	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3301      	adds	r3, #1
 80034ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2252      	movs	r2, #82	@ 0x52
 80034c0:	5a9b      	ldrh	r3, [r3, r2]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b299      	uxth	r1, r3
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2252      	movs	r2, #82	@ 0x52
 80034cc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2252      	movs	r2, #82	@ 0x52
 80034d2:	5a9b      	ldrh	r3, [r3, r2]
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1c9      	bne.n	800346e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	9300      	str	r3, [sp, #0]
 80034e2:	0013      	movs	r3, r2
 80034e4:	2200      	movs	r2, #0
 80034e6:	2140      	movs	r1, #64	@ 0x40
 80034e8:	f000 fc0c 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 80034ec:	1e03      	subs	r3, r0, #0
 80034ee:	d004      	beq.n	80034fa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2220      	movs	r2, #32
 80034f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e005      	b.n	8003506 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
  }
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	b008      	add	sp, #32
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003510:	b5b0      	push	{r4, r5, r7, lr}
 8003512:	b08e      	sub	sp, #56	@ 0x38
 8003514:	af00      	add	r7, sp, #0
 8003516:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003518:	231a      	movs	r3, #26
 800351a:	2218      	movs	r2, #24
 800351c:	189b      	adds	r3, r3, r2
 800351e:	19db      	adds	r3, r3, r7
 8003520:	2200      	movs	r2, #0
 8003522:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	431a      	orrs	r2, r3
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	431a      	orrs	r2, r3
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	4313      	orrs	r3, r2
 800353a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4ac3      	ldr	r2, [pc, #780]	@ (8003850 <UART_SetConfig+0x340>)
 8003544:	4013      	ands	r3, r2
 8003546:	0019      	movs	r1, r3
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800354e:	430a      	orrs	r2, r1
 8003550:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4abe      	ldr	r2, [pc, #760]	@ (8003854 <UART_SetConfig+0x344>)
 800355a:	4013      	ands	r3, r2
 800355c:	0019      	movs	r1, r3
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	68da      	ldr	r2, [r3, #12]
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4ab8      	ldr	r2, [pc, #736]	@ (8003858 <UART_SetConfig+0x348>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d004      	beq.n	8003584 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003580:	4313      	orrs	r3, r2
 8003582:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	4ab4      	ldr	r2, [pc, #720]	@ (800385c <UART_SetConfig+0x34c>)
 800358c:	4013      	ands	r3, r2
 800358e:	0019      	movs	r1, r3
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003596:	430a      	orrs	r2, r1
 8003598:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4ab0      	ldr	r2, [pc, #704]	@ (8003860 <UART_SetConfig+0x350>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d131      	bne.n	8003608 <UART_SetConfig+0xf8>
 80035a4:	4baf      	ldr	r3, [pc, #700]	@ (8003864 <UART_SetConfig+0x354>)
 80035a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a8:	2203      	movs	r2, #3
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b03      	cmp	r3, #3
 80035ae:	d01d      	beq.n	80035ec <UART_SetConfig+0xdc>
 80035b0:	d823      	bhi.n	80035fa <UART_SetConfig+0xea>
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d00c      	beq.n	80035d0 <UART_SetConfig+0xc0>
 80035b6:	d820      	bhi.n	80035fa <UART_SetConfig+0xea>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d002      	beq.n	80035c2 <UART_SetConfig+0xb2>
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d00e      	beq.n	80035de <UART_SetConfig+0xce>
 80035c0:	e01b      	b.n	80035fa <UART_SetConfig+0xea>
 80035c2:	231b      	movs	r3, #27
 80035c4:	2218      	movs	r2, #24
 80035c6:	189b      	adds	r3, r3, r2
 80035c8:	19db      	adds	r3, r3, r7
 80035ca:	2201      	movs	r2, #1
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	e0b4      	b.n	800373a <UART_SetConfig+0x22a>
 80035d0:	231b      	movs	r3, #27
 80035d2:	2218      	movs	r2, #24
 80035d4:	189b      	adds	r3, r3, r2
 80035d6:	19db      	adds	r3, r3, r7
 80035d8:	2202      	movs	r2, #2
 80035da:	701a      	strb	r2, [r3, #0]
 80035dc:	e0ad      	b.n	800373a <UART_SetConfig+0x22a>
 80035de:	231b      	movs	r3, #27
 80035e0:	2218      	movs	r2, #24
 80035e2:	189b      	adds	r3, r3, r2
 80035e4:	19db      	adds	r3, r3, r7
 80035e6:	2204      	movs	r2, #4
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	e0a6      	b.n	800373a <UART_SetConfig+0x22a>
 80035ec:	231b      	movs	r3, #27
 80035ee:	2218      	movs	r2, #24
 80035f0:	189b      	adds	r3, r3, r2
 80035f2:	19db      	adds	r3, r3, r7
 80035f4:	2208      	movs	r2, #8
 80035f6:	701a      	strb	r2, [r3, #0]
 80035f8:	e09f      	b.n	800373a <UART_SetConfig+0x22a>
 80035fa:	231b      	movs	r3, #27
 80035fc:	2218      	movs	r2, #24
 80035fe:	189b      	adds	r3, r3, r2
 8003600:	19db      	adds	r3, r3, r7
 8003602:	2210      	movs	r2, #16
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	e098      	b.n	800373a <UART_SetConfig+0x22a>
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a96      	ldr	r2, [pc, #600]	@ (8003868 <UART_SetConfig+0x358>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d131      	bne.n	8003676 <UART_SetConfig+0x166>
 8003612:	4b94      	ldr	r3, [pc, #592]	@ (8003864 <UART_SetConfig+0x354>)
 8003614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003616:	220c      	movs	r2, #12
 8003618:	4013      	ands	r3, r2
 800361a:	2b0c      	cmp	r3, #12
 800361c:	d01d      	beq.n	800365a <UART_SetConfig+0x14a>
 800361e:	d823      	bhi.n	8003668 <UART_SetConfig+0x158>
 8003620:	2b08      	cmp	r3, #8
 8003622:	d00c      	beq.n	800363e <UART_SetConfig+0x12e>
 8003624:	d820      	bhi.n	8003668 <UART_SetConfig+0x158>
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <UART_SetConfig+0x120>
 800362a:	2b04      	cmp	r3, #4
 800362c:	d00e      	beq.n	800364c <UART_SetConfig+0x13c>
 800362e:	e01b      	b.n	8003668 <UART_SetConfig+0x158>
 8003630:	231b      	movs	r3, #27
 8003632:	2218      	movs	r2, #24
 8003634:	189b      	adds	r3, r3, r2
 8003636:	19db      	adds	r3, r3, r7
 8003638:	2200      	movs	r2, #0
 800363a:	701a      	strb	r2, [r3, #0]
 800363c:	e07d      	b.n	800373a <UART_SetConfig+0x22a>
 800363e:	231b      	movs	r3, #27
 8003640:	2218      	movs	r2, #24
 8003642:	189b      	adds	r3, r3, r2
 8003644:	19db      	adds	r3, r3, r7
 8003646:	2202      	movs	r2, #2
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	e076      	b.n	800373a <UART_SetConfig+0x22a>
 800364c:	231b      	movs	r3, #27
 800364e:	2218      	movs	r2, #24
 8003650:	189b      	adds	r3, r3, r2
 8003652:	19db      	adds	r3, r3, r7
 8003654:	2204      	movs	r2, #4
 8003656:	701a      	strb	r2, [r3, #0]
 8003658:	e06f      	b.n	800373a <UART_SetConfig+0x22a>
 800365a:	231b      	movs	r3, #27
 800365c:	2218      	movs	r2, #24
 800365e:	189b      	adds	r3, r3, r2
 8003660:	19db      	adds	r3, r3, r7
 8003662:	2208      	movs	r2, #8
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e068      	b.n	800373a <UART_SetConfig+0x22a>
 8003668:	231b      	movs	r3, #27
 800366a:	2218      	movs	r2, #24
 800366c:	189b      	adds	r3, r3, r2
 800366e:	19db      	adds	r3, r3, r7
 8003670:	2210      	movs	r2, #16
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	e061      	b.n	800373a <UART_SetConfig+0x22a>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a7c      	ldr	r2, [pc, #496]	@ (800386c <UART_SetConfig+0x35c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d106      	bne.n	800368e <UART_SetConfig+0x17e>
 8003680:	231b      	movs	r3, #27
 8003682:	2218      	movs	r2, #24
 8003684:	189b      	adds	r3, r3, r2
 8003686:	19db      	adds	r3, r3, r7
 8003688:	2200      	movs	r2, #0
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	e055      	b.n	800373a <UART_SetConfig+0x22a>
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a77      	ldr	r2, [pc, #476]	@ (8003870 <UART_SetConfig+0x360>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d106      	bne.n	80036a6 <UART_SetConfig+0x196>
 8003698:	231b      	movs	r3, #27
 800369a:	2218      	movs	r2, #24
 800369c:	189b      	adds	r3, r3, r2
 800369e:	19db      	adds	r3, r3, r7
 80036a0:	2200      	movs	r2, #0
 80036a2:	701a      	strb	r2, [r3, #0]
 80036a4:	e049      	b.n	800373a <UART_SetConfig+0x22a>
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a6b      	ldr	r2, [pc, #428]	@ (8003858 <UART_SetConfig+0x348>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d13e      	bne.n	800372e <UART_SetConfig+0x21e>
 80036b0:	4b6c      	ldr	r3, [pc, #432]	@ (8003864 <UART_SetConfig+0x354>)
 80036b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036b4:	23c0      	movs	r3, #192	@ 0xc0
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	4013      	ands	r3, r2
 80036ba:	22c0      	movs	r2, #192	@ 0xc0
 80036bc:	0112      	lsls	r2, r2, #4
 80036be:	4293      	cmp	r3, r2
 80036c0:	d027      	beq.n	8003712 <UART_SetConfig+0x202>
 80036c2:	22c0      	movs	r2, #192	@ 0xc0
 80036c4:	0112      	lsls	r2, r2, #4
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d82a      	bhi.n	8003720 <UART_SetConfig+0x210>
 80036ca:	2280      	movs	r2, #128	@ 0x80
 80036cc:	0112      	lsls	r2, r2, #4
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d011      	beq.n	80036f6 <UART_SetConfig+0x1e6>
 80036d2:	2280      	movs	r2, #128	@ 0x80
 80036d4:	0112      	lsls	r2, r2, #4
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d822      	bhi.n	8003720 <UART_SetConfig+0x210>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <UART_SetConfig+0x1d8>
 80036de:	2280      	movs	r2, #128	@ 0x80
 80036e0:	00d2      	lsls	r2, r2, #3
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00e      	beq.n	8003704 <UART_SetConfig+0x1f4>
 80036e6:	e01b      	b.n	8003720 <UART_SetConfig+0x210>
 80036e8:	231b      	movs	r3, #27
 80036ea:	2218      	movs	r2, #24
 80036ec:	189b      	adds	r3, r3, r2
 80036ee:	19db      	adds	r3, r3, r7
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
 80036f4:	e021      	b.n	800373a <UART_SetConfig+0x22a>
 80036f6:	231b      	movs	r3, #27
 80036f8:	2218      	movs	r2, #24
 80036fa:	189b      	adds	r3, r3, r2
 80036fc:	19db      	adds	r3, r3, r7
 80036fe:	2202      	movs	r2, #2
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	e01a      	b.n	800373a <UART_SetConfig+0x22a>
 8003704:	231b      	movs	r3, #27
 8003706:	2218      	movs	r2, #24
 8003708:	189b      	adds	r3, r3, r2
 800370a:	19db      	adds	r3, r3, r7
 800370c:	2204      	movs	r2, #4
 800370e:	701a      	strb	r2, [r3, #0]
 8003710:	e013      	b.n	800373a <UART_SetConfig+0x22a>
 8003712:	231b      	movs	r3, #27
 8003714:	2218      	movs	r2, #24
 8003716:	189b      	adds	r3, r3, r2
 8003718:	19db      	adds	r3, r3, r7
 800371a:	2208      	movs	r2, #8
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e00c      	b.n	800373a <UART_SetConfig+0x22a>
 8003720:	231b      	movs	r3, #27
 8003722:	2218      	movs	r2, #24
 8003724:	189b      	adds	r3, r3, r2
 8003726:	19db      	adds	r3, r3, r7
 8003728:	2210      	movs	r2, #16
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	e005      	b.n	800373a <UART_SetConfig+0x22a>
 800372e:	231b      	movs	r3, #27
 8003730:	2218      	movs	r2, #24
 8003732:	189b      	adds	r3, r3, r2
 8003734:	19db      	adds	r3, r3, r7
 8003736:	2210      	movs	r2, #16
 8003738:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a46      	ldr	r2, [pc, #280]	@ (8003858 <UART_SetConfig+0x348>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d000      	beq.n	8003746 <UART_SetConfig+0x236>
 8003744:	e09a      	b.n	800387c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003746:	231b      	movs	r3, #27
 8003748:	2218      	movs	r2, #24
 800374a:	189b      	adds	r3, r3, r2
 800374c:	19db      	adds	r3, r3, r7
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2b08      	cmp	r3, #8
 8003752:	d01d      	beq.n	8003790 <UART_SetConfig+0x280>
 8003754:	dc20      	bgt.n	8003798 <UART_SetConfig+0x288>
 8003756:	2b04      	cmp	r3, #4
 8003758:	d015      	beq.n	8003786 <UART_SetConfig+0x276>
 800375a:	dc1d      	bgt.n	8003798 <UART_SetConfig+0x288>
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <UART_SetConfig+0x256>
 8003760:	2b02      	cmp	r3, #2
 8003762:	d005      	beq.n	8003770 <UART_SetConfig+0x260>
 8003764:	e018      	b.n	8003798 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003766:	f7ff f86b 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 800376a:	0003      	movs	r3, r0
 800376c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800376e:	e01c      	b.n	80037aa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003770:	4b3c      	ldr	r3, [pc, #240]	@ (8003864 <UART_SetConfig+0x354>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2210      	movs	r2, #16
 8003776:	4013      	ands	r3, r2
 8003778:	d002      	beq.n	8003780 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800377a:	4b3e      	ldr	r3, [pc, #248]	@ (8003874 <UART_SetConfig+0x364>)
 800377c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800377e:	e014      	b.n	80037aa <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003780:	4b3d      	ldr	r3, [pc, #244]	@ (8003878 <UART_SetConfig+0x368>)
 8003782:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003784:	e011      	b.n	80037aa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003786:	f7fe ffcb 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 800378a:	0003      	movs	r3, r0
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800378e:	e00c      	b.n	80037aa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003790:	2380      	movs	r3, #128	@ 0x80
 8003792:	021b      	lsls	r3, r3, #8
 8003794:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003796:	e008      	b.n	80037aa <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003798:	2300      	movs	r3, #0
 800379a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800379c:	231a      	movs	r3, #26
 800379e:	2218      	movs	r2, #24
 80037a0:	189b      	adds	r3, r3, r2
 80037a2:	19db      	adds	r3, r3, r7
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
        break;
 80037a8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d100      	bne.n	80037b2 <UART_SetConfig+0x2a2>
 80037b0:	e133      	b.n	8003a1a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	0013      	movs	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	189b      	adds	r3, r3, r2
 80037bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037be:	429a      	cmp	r2, r3
 80037c0:	d305      	bcc.n	80037ce <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d906      	bls.n	80037dc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80037ce:	231a      	movs	r3, #26
 80037d0:	2218      	movs	r2, #24
 80037d2:	189b      	adds	r3, r3, r2
 80037d4:	19db      	adds	r3, r3, r7
 80037d6:	2201      	movs	r2, #1
 80037d8:	701a      	strb	r2, [r3, #0]
 80037da:	e11e      	b.n	8003a1a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	6939      	ldr	r1, [r7, #16]
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	000b      	movs	r3, r1
 80037ea:	0e1b      	lsrs	r3, r3, #24
 80037ec:	0010      	movs	r0, r2
 80037ee:	0205      	lsls	r5, r0, #8
 80037f0:	431d      	orrs	r5, r3
 80037f2:	000b      	movs	r3, r1
 80037f4:	021c      	lsls	r4, r3, #8
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	085b      	lsrs	r3, r3, #1
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	68b8      	ldr	r0, [r7, #8]
 8003804:	68f9      	ldr	r1, [r7, #12]
 8003806:	1900      	adds	r0, r0, r4
 8003808:	4169      	adcs	r1, r5
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	2300      	movs	r3, #0
 8003812:	607b      	str	r3, [r7, #4]
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f7fc fd14 	bl	8000244 <__aeabi_uldivmod>
 800381c:	0002      	movs	r2, r0
 800381e:	000b      	movs	r3, r1
 8003820:	0013      	movs	r3, r2
 8003822:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003824:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003826:	23c0      	movs	r3, #192	@ 0xc0
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	429a      	cmp	r2, r3
 800382c:	d309      	bcc.n	8003842 <UART_SetConfig+0x332>
 800382e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003830:	2380      	movs	r3, #128	@ 0x80
 8003832:	035b      	lsls	r3, r3, #13
 8003834:	429a      	cmp	r2, r3
 8003836:	d204      	bcs.n	8003842 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800383e:	60da      	str	r2, [r3, #12]
 8003840:	e0eb      	b.n	8003a1a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8003842:	231a      	movs	r3, #26
 8003844:	2218      	movs	r2, #24
 8003846:	189b      	adds	r3, r3, r2
 8003848:	19db      	adds	r3, r3, r7
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	e0e4      	b.n	8003a1a <UART_SetConfig+0x50a>
 8003850:	efff69f3 	.word	0xefff69f3
 8003854:	ffffcfff 	.word	0xffffcfff
 8003858:	40004800 	.word	0x40004800
 800385c:	fffff4ff 	.word	0xfffff4ff
 8003860:	40013800 	.word	0x40013800
 8003864:	40021000 	.word	0x40021000
 8003868:	40004400 	.word	0x40004400
 800386c:	40004c00 	.word	0x40004c00
 8003870:	40005000 	.word	0x40005000
 8003874:	003d0900 	.word	0x003d0900
 8003878:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	69da      	ldr	r2, [r3, #28]
 8003880:	2380      	movs	r3, #128	@ 0x80
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	429a      	cmp	r2, r3
 8003886:	d000      	beq.n	800388a <UART_SetConfig+0x37a>
 8003888:	e070      	b.n	800396c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800388a:	231b      	movs	r3, #27
 800388c:	2218      	movs	r2, #24
 800388e:	189b      	adds	r3, r3, r2
 8003890:	19db      	adds	r3, r3, r7
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b08      	cmp	r3, #8
 8003896:	d822      	bhi.n	80038de <UART_SetConfig+0x3ce>
 8003898:	009a      	lsls	r2, r3, #2
 800389a:	4b67      	ldr	r3, [pc, #412]	@ (8003a38 <UART_SetConfig+0x528>)
 800389c:	18d3      	adds	r3, r2, r3
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a2:	f7fe ffcd 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 80038a6:	0003      	movs	r3, r0
 80038a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80038aa:	e021      	b.n	80038f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038ac:	f7fe ffde 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 80038b0:	0003      	movs	r3, r0
 80038b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80038b4:	e01c      	b.n	80038f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038b6:	4b61      	ldr	r3, [pc, #388]	@ (8003a3c <UART_SetConfig+0x52c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2210      	movs	r2, #16
 80038bc:	4013      	ands	r3, r2
 80038be:	d002      	beq.n	80038c6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80038c0:	4b5f      	ldr	r3, [pc, #380]	@ (8003a40 <UART_SetConfig+0x530>)
 80038c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80038c4:	e014      	b.n	80038f0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80038c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003a44 <UART_SetConfig+0x534>)
 80038c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80038ca:	e011      	b.n	80038f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038cc:	f7fe ff28 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 80038d0:	0003      	movs	r3, r0
 80038d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80038d4:	e00c      	b.n	80038f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d6:	2380      	movs	r3, #128	@ 0x80
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80038dc:	e008      	b.n	80038f0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80038e2:	231a      	movs	r3, #26
 80038e4:	2218      	movs	r2, #24
 80038e6:	189b      	adds	r3, r3, r2
 80038e8:	19db      	adds	r3, r3, r7
 80038ea:	2201      	movs	r2, #1
 80038ec:	701a      	strb	r2, [r3, #0]
        break;
 80038ee:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d100      	bne.n	80038f8 <UART_SetConfig+0x3e8>
 80038f6:	e090      	b.n	8003a1a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038fa:	005a      	lsls	r2, r3, #1
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	18d2      	adds	r2, r2, r3
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	0019      	movs	r1, r3
 800390a:	0010      	movs	r0, r2
 800390c:	f7fc fc0e 	bl	800012c <__udivsi3>
 8003910:	0003      	movs	r3, r0
 8003912:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003916:	2b0f      	cmp	r3, #15
 8003918:	d921      	bls.n	800395e <UART_SetConfig+0x44e>
 800391a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800391c:	2380      	movs	r3, #128	@ 0x80
 800391e:	025b      	lsls	r3, r3, #9
 8003920:	429a      	cmp	r2, r3
 8003922:	d21c      	bcs.n	800395e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003926:	b29a      	uxth	r2, r3
 8003928:	200e      	movs	r0, #14
 800392a:	2418      	movs	r4, #24
 800392c:	1903      	adds	r3, r0, r4
 800392e:	19db      	adds	r3, r3, r7
 8003930:	210f      	movs	r1, #15
 8003932:	438a      	bics	r2, r1
 8003934:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003938:	085b      	lsrs	r3, r3, #1
 800393a:	b29b      	uxth	r3, r3
 800393c:	2207      	movs	r2, #7
 800393e:	4013      	ands	r3, r2
 8003940:	b299      	uxth	r1, r3
 8003942:	1903      	adds	r3, r0, r4
 8003944:	19db      	adds	r3, r3, r7
 8003946:	1902      	adds	r2, r0, r4
 8003948:	19d2      	adds	r2, r2, r7
 800394a:	8812      	ldrh	r2, [r2, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	1902      	adds	r2, r0, r4
 8003956:	19d2      	adds	r2, r2, r7
 8003958:	8812      	ldrh	r2, [r2, #0]
 800395a:	60da      	str	r2, [r3, #12]
 800395c:	e05d      	b.n	8003a1a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800395e:	231a      	movs	r3, #26
 8003960:	2218      	movs	r2, #24
 8003962:	189b      	adds	r3, r3, r2
 8003964:	19db      	adds	r3, r3, r7
 8003966:	2201      	movs	r2, #1
 8003968:	701a      	strb	r2, [r3, #0]
 800396a:	e056      	b.n	8003a1a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800396c:	231b      	movs	r3, #27
 800396e:	2218      	movs	r2, #24
 8003970:	189b      	adds	r3, r3, r2
 8003972:	19db      	adds	r3, r3, r7
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b08      	cmp	r3, #8
 8003978:	d822      	bhi.n	80039c0 <UART_SetConfig+0x4b0>
 800397a:	009a      	lsls	r2, r3, #2
 800397c:	4b32      	ldr	r3, [pc, #200]	@ (8003a48 <UART_SetConfig+0x538>)
 800397e:	18d3      	adds	r3, r2, r3
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003984:	f7fe ff5c 	bl	8002840 <HAL_RCC_GetPCLK1Freq>
 8003988:	0003      	movs	r3, r0
 800398a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800398c:	e021      	b.n	80039d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800398e:	f7fe ff6d 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 8003992:	0003      	movs	r3, r0
 8003994:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003996:	e01c      	b.n	80039d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003998:	4b28      	ldr	r3, [pc, #160]	@ (8003a3c <UART_SetConfig+0x52c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2210      	movs	r2, #16
 800399e:	4013      	ands	r3, r2
 80039a0:	d002      	beq.n	80039a8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80039a2:	4b27      	ldr	r3, [pc, #156]	@ (8003a40 <UART_SetConfig+0x530>)
 80039a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80039a6:	e014      	b.n	80039d2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80039a8:	4b26      	ldr	r3, [pc, #152]	@ (8003a44 <UART_SetConfig+0x534>)
 80039aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039ac:	e011      	b.n	80039d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ae:	f7fe feb7 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 80039b2:	0003      	movs	r3, r0
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039b6:	e00c      	b.n	80039d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039b8:	2380      	movs	r3, #128	@ 0x80
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80039be:	e008      	b.n	80039d2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80039c4:	231a      	movs	r3, #26
 80039c6:	2218      	movs	r2, #24
 80039c8:	189b      	adds	r3, r3, r2
 80039ca:	19db      	adds	r3, r3, r7
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
        break;
 80039d0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80039d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d020      	beq.n	8003a1a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	085a      	lsrs	r2, r3, #1
 80039de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039e0:	18d2      	adds	r2, r2, r3
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	0019      	movs	r1, r3
 80039e8:	0010      	movs	r0, r2
 80039ea:	f7fc fb9f 	bl	800012c <__udivsi3>
 80039ee:	0003      	movs	r3, r0
 80039f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f4:	2b0f      	cmp	r3, #15
 80039f6:	d90a      	bls.n	8003a0e <UART_SetConfig+0x4fe>
 80039f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039fa:	2380      	movs	r3, #128	@ 0x80
 80039fc:	025b      	lsls	r3, r3, #9
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d205      	bcs.n	8003a0e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60da      	str	r2, [r3, #12]
 8003a0c:	e005      	b.n	8003a1a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003a0e:	231a      	movs	r3, #26
 8003a10:	2218      	movs	r2, #24
 8003a12:	189b      	adds	r3, r3, r2
 8003a14:	19db      	adds	r3, r3, r7
 8003a16:	2201      	movs	r2, #1
 8003a18:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2200      	movs	r2, #0
 8003a24:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003a26:	231a      	movs	r3, #26
 8003a28:	2218      	movs	r2, #24
 8003a2a:	189b      	adds	r3, r3, r2
 8003a2c:	19db      	adds	r3, r3, r7
 8003a2e:	781b      	ldrb	r3, [r3, #0]
}
 8003a30:	0018      	movs	r0, r3
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b00e      	add	sp, #56	@ 0x38
 8003a36:	bdb0      	pop	{r4, r5, r7, pc}
 8003a38:	08004e4c 	.word	0x08004e4c
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	003d0900 	.word	0x003d0900
 8003a44:	00f42400 	.word	0x00f42400
 8003a48:	08004e70 	.word	0x08004e70

08003a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a58:	2208      	movs	r2, #8
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	d00b      	beq.n	8003a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4a4a      	ldr	r2, [pc, #296]	@ (8003b90 <UART_AdvFeatureConfig+0x144>)
 8003a66:	4013      	ands	r3, r2
 8003a68:	0019      	movs	r1, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d00b      	beq.n	8003a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4a43      	ldr	r2, [pc, #268]	@ (8003b94 <UART_AdvFeatureConfig+0x148>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	0019      	movs	r1, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	2202      	movs	r2, #2
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d00b      	beq.n	8003aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4a3b      	ldr	r2, [pc, #236]	@ (8003b98 <UART_AdvFeatureConfig+0x14c>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	0019      	movs	r1, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003abe:	2204      	movs	r2, #4
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d00b      	beq.n	8003adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4a34      	ldr	r2, [pc, #208]	@ (8003b9c <UART_AdvFeatureConfig+0x150>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	0019      	movs	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	2210      	movs	r2, #16
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba0 <UART_AdvFeatureConfig+0x154>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	0019      	movs	r1, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	2220      	movs	r2, #32
 8003b04:	4013      	ands	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	4a25      	ldr	r2, [pc, #148]	@ (8003ba4 <UART_AdvFeatureConfig+0x158>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	0019      	movs	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	2240      	movs	r2, #64	@ 0x40
 8003b26:	4013      	ands	r3, r2
 8003b28:	d01d      	beq.n	8003b66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a1d      	ldr	r2, [pc, #116]	@ (8003ba8 <UART_AdvFeatureConfig+0x15c>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	0019      	movs	r1, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b46:	2380      	movs	r3, #128	@ 0x80
 8003b48:	035b      	lsls	r3, r3, #13
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d10b      	bne.n	8003b66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	4a15      	ldr	r2, [pc, #84]	@ (8003bac <UART_AdvFeatureConfig+0x160>)
 8003b56:	4013      	ands	r3, r2
 8003b58:	0019      	movs	r1, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b6a:	2280      	movs	r2, #128	@ 0x80
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d00b      	beq.n	8003b88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	4a0e      	ldr	r2, [pc, #56]	@ (8003bb0 <UART_AdvFeatureConfig+0x164>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	0019      	movs	r1, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	605a      	str	r2, [r3, #4]
  }
}
 8003b88:	46c0      	nop			@ (mov r8, r8)
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	b002      	add	sp, #8
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	ffff7fff 	.word	0xffff7fff
 8003b94:	fffdffff 	.word	0xfffdffff
 8003b98:	fffeffff 	.word	0xfffeffff
 8003b9c:	fffbffff 	.word	0xfffbffff
 8003ba0:	ffffefff 	.word	0xffffefff
 8003ba4:	ffffdfff 	.word	0xffffdfff
 8003ba8:	ffefffff 	.word	0xffefffff
 8003bac:	ff9fffff 	.word	0xff9fffff
 8003bb0:	fff7ffff 	.word	0xfff7ffff

08003bb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b092      	sub	sp, #72	@ 0x48
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2284      	movs	r2, #132	@ 0x84
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bc4:	f7fd fb20 	bl	8001208 <HAL_GetTick>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d12c      	bne.n	8003c34 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bdc:	2280      	movs	r2, #128	@ 0x80
 8003bde:	0391      	lsls	r1, r2, #14
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	4a46      	ldr	r2, [pc, #280]	@ (8003cfc <UART_CheckIdleState+0x148>)
 8003be4:	9200      	str	r2, [sp, #0]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f000 f88c 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 8003bec:	1e03      	subs	r3, r0, #0
 8003bee:	d021      	beq.n	8003c34 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c00:	f383 8810 	msr	PRIMASK, r3
}
 8003c04:	46c0      	nop			@ (mov r8, r8)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2180      	movs	r1, #128	@ 0x80
 8003c12:	438a      	bics	r2, r1
 8003c14:	601a      	str	r2, [r3, #0]
 8003c16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1c:	f383 8810 	msr	PRIMASK, r3
}
 8003c20:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2220      	movs	r2, #32
 8003c26:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2278      	movs	r2, #120	@ 0x78
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e05f      	b.n	8003cf4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d146      	bne.n	8003cd0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c44:	2280      	movs	r2, #128	@ 0x80
 8003c46:	03d1      	lsls	r1, r2, #15
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	4a2c      	ldr	r2, [pc, #176]	@ (8003cfc <UART_CheckIdleState+0x148>)
 8003c4c:	9200      	str	r2, [sp, #0]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f000 f858 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 8003c54:	1e03      	subs	r3, r0, #0
 8003c56:	d03b      	beq.n	8003cd0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c58:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c62:	2301      	movs	r3, #1
 8003c64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f383 8810 	msr	PRIMASK, r3
}
 8003c6c:	46c0      	nop			@ (mov r8, r8)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4921      	ldr	r1, [pc, #132]	@ (8003d00 <UART_CheckIdleState+0x14c>)
 8003c7a:	400a      	ands	r2, r1
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f383 8810 	msr	PRIMASK, r3
}
 8003c88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c90:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c92:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c94:	2301      	movs	r3, #1
 8003c96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	f383 8810 	msr	PRIMASK, r3
}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689a      	ldr	r2, [r3, #8]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2101      	movs	r1, #1
 8003cac:	438a      	bics	r2, r1
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	f383 8810 	msr	PRIMASK, r3
}
 8003cba:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2280      	movs	r2, #128	@ 0x80
 8003cc0:	2120      	movs	r1, #32
 8003cc2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2278      	movs	r2, #120	@ 0x78
 8003cc8:	2100      	movs	r1, #0
 8003cca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	e011      	b.n	8003cf4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2280      	movs	r2, #128	@ 0x80
 8003cda:	2120      	movs	r1, #32
 8003cdc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2278      	movs	r2, #120	@ 0x78
 8003cee:	2100      	movs	r1, #0
 8003cf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	b010      	add	sp, #64	@ 0x40
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	01ffffff 	.word	0x01ffffff
 8003d00:	fffffedf 	.word	0xfffffedf

08003d04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	1dfb      	adds	r3, r7, #7
 8003d12:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d14:	e051      	b.n	8003dba <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	3301      	adds	r3, #1
 8003d1a:	d04e      	beq.n	8003dba <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1c:	f7fd fa74 	bl	8001208 <HAL_GetTick>
 8003d20:	0002      	movs	r2, r0
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d302      	bcc.n	8003d32 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d101      	bne.n	8003d36 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e051      	b.n	8003dda <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d03b      	beq.n	8003dba <UART_WaitOnFlagUntilTimeout+0xb6>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b80      	cmp	r3, #128	@ 0x80
 8003d46:	d038      	beq.n	8003dba <UART_WaitOnFlagUntilTimeout+0xb6>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b40      	cmp	r3, #64	@ 0x40
 8003d4c:	d035      	beq.n	8003dba <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	69db      	ldr	r3, [r3, #28]
 8003d54:	2208      	movs	r2, #8
 8003d56:	4013      	ands	r3, r2
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d111      	bne.n	8003d80 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2208      	movs	r2, #8
 8003d62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	0018      	movs	r0, r3
 8003d68:	f000 f83c 	bl	8003de4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2284      	movs	r2, #132	@ 0x84
 8003d70:	2108      	movs	r1, #8
 8003d72:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2278      	movs	r2, #120	@ 0x78
 8003d78:	2100      	movs	r1, #0
 8003d7a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e02c      	b.n	8003dda <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	69da      	ldr	r2, [r3, #28]
 8003d86:	2380      	movs	r3, #128	@ 0x80
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	401a      	ands	r2, r3
 8003d8c:	2380      	movs	r3, #128	@ 0x80
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d112      	bne.n	8003dba <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2280      	movs	r2, #128	@ 0x80
 8003d9a:	0112      	lsls	r2, r2, #4
 8003d9c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f000 f81f 	bl	8003de4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2284      	movs	r2, #132	@ 0x84
 8003daa:	2120      	movs	r1, #32
 8003dac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2278      	movs	r2, #120	@ 0x78
 8003db2:	2100      	movs	r1, #0
 8003db4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e00f      	b.n	8003dda <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	425a      	negs	r2, r3
 8003dca:	4153      	adcs	r3, r2
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	001a      	movs	r2, r3
 8003dd0:	1dfb      	adds	r3, r7, #7
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d09e      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	0018      	movs	r0, r3
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	b004      	add	sp, #16
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08e      	sub	sp, #56	@ 0x38
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dec:	f3ef 8310 	mrs	r3, PRIMASK
 8003df0:	617b      	str	r3, [r7, #20]
  return(result);
 8003df2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003df6:	2301      	movs	r3, #1
 8003df8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	f383 8810 	msr	PRIMASK, r3
}
 8003e00:	46c0      	nop			@ (mov r8, r8)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4926      	ldr	r1, [pc, #152]	@ (8003ea8 <UART_EndRxTransfer+0xc4>)
 8003e0e:	400a      	ands	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f383 8810 	msr	PRIMASK, r3
}
 8003e1c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e1e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e22:	623b      	str	r3, [r7, #32]
  return(result);
 8003e24:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e26:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e28:	2301      	movs	r3, #1
 8003e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2e:	f383 8810 	msr	PRIMASK, r3
}
 8003e32:	46c0      	nop			@ (mov r8, r8)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2101      	movs	r1, #1
 8003e40:	438a      	bics	r2, r1
 8003e42:	609a      	str	r2, [r3, #8]
 8003e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4a:	f383 8810 	msr	PRIMASK, r3
}
 8003e4e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d118      	bne.n	8003e8a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e58:	f3ef 8310 	mrs	r3, PRIMASK
 8003e5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e5e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e62:	2301      	movs	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f383 8810 	msr	PRIMASK, r3
}
 8003e6c:	46c0      	nop			@ (mov r8, r8)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2110      	movs	r1, #16
 8003e7a:	438a      	bics	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]
 8003e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	f383 8810 	msr	PRIMASK, r3
}
 8003e88:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2280      	movs	r2, #128	@ 0x80
 8003e8e:	2120      	movs	r1, #32
 8003e90:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b00e      	add	sp, #56	@ 0x38
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	46c0      	nop			@ (mov r8, r8)
 8003ea8:	fffffedf 	.word	0xfffffedf

08003eac <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	1dbb      	adds	r3, r7, #6
 8003eba:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2280      	movs	r2, #128	@ 0x80
 8003ec0:	589b      	ldr	r3, [r3, r2]
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d000      	beq.n	8003ec8 <HAL_UARTEx_ReceiveToIdle+0x1c>
 8003ec6:	e109      	b.n	80040dc <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_UARTEx_ReceiveToIdle+0x2a>
 8003ece:	1dbb      	adds	r3, r7, #6
 8003ed0:	881b      	ldrh	r3, [r3, #0]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e101      	b.n	80040de <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	2380      	movs	r3, #128	@ 0x80
 8003ee0:	015b      	lsls	r3, r3, #5
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d109      	bne.n	8003efa <HAL_UARTEx_ReceiveToIdle+0x4e>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d105      	bne.n	8003efa <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	d001      	beq.n	8003efa <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e0f1      	b.n	80040de <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2284      	movs	r2, #132	@ 0x84
 8003efe:	2100      	movs	r1, #0
 8003f00:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2280      	movs	r2, #128	@ 0x80
 8003f06:	2122      	movs	r1, #34	@ 0x22
 8003f08:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f16:	f7fd f977 	bl	8001208 <HAL_GetTick>
 8003f1a:	0003      	movs	r3, r0
 8003f1c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1dba      	adds	r2, r7, #6
 8003f22:	2158      	movs	r1, #88	@ 0x58
 8003f24:	8812      	ldrh	r2, [r2, #0]
 8003f26:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1dba      	adds	r2, r7, #6
 8003f2c:	215a      	movs	r1, #90	@ 0x5a
 8003f2e:	8812      	ldrh	r2, [r2, #0]
 8003f30:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	689a      	ldr	r2, [r3, #8]
 8003f36:	2380      	movs	r3, #128	@ 0x80
 8003f38:	015b      	lsls	r3, r3, #5
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d10d      	bne.n	8003f5a <HAL_UARTEx_ReceiveToIdle+0xae>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d104      	bne.n	8003f50 <HAL_UARTEx_ReceiveToIdle+0xa4>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	225c      	movs	r2, #92	@ 0x5c
 8003f4a:	4967      	ldr	r1, [pc, #412]	@ (80040e8 <HAL_UARTEx_ReceiveToIdle+0x23c>)
 8003f4c:	5299      	strh	r1, [r3, r2]
 8003f4e:	e02e      	b.n	8003fae <HAL_UARTEx_ReceiveToIdle+0x102>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	225c      	movs	r2, #92	@ 0x5c
 8003f54:	21ff      	movs	r1, #255	@ 0xff
 8003f56:	5299      	strh	r1, [r3, r2]
 8003f58:	e029      	b.n	8003fae <HAL_UARTEx_ReceiveToIdle+0x102>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10d      	bne.n	8003f7e <HAL_UARTEx_ReceiveToIdle+0xd2>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d104      	bne.n	8003f74 <HAL_UARTEx_ReceiveToIdle+0xc8>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	225c      	movs	r2, #92	@ 0x5c
 8003f6e:	21ff      	movs	r1, #255	@ 0xff
 8003f70:	5299      	strh	r1, [r3, r2]
 8003f72:	e01c      	b.n	8003fae <HAL_UARTEx_ReceiveToIdle+0x102>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	225c      	movs	r2, #92	@ 0x5c
 8003f78:	217f      	movs	r1, #127	@ 0x7f
 8003f7a:	5299      	strh	r1, [r3, r2]
 8003f7c:	e017      	b.n	8003fae <HAL_UARTEx_ReceiveToIdle+0x102>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	2380      	movs	r3, #128	@ 0x80
 8003f84:	055b      	lsls	r3, r3, #21
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d10d      	bne.n	8003fa6 <HAL_UARTEx_ReceiveToIdle+0xfa>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d104      	bne.n	8003f9c <HAL_UARTEx_ReceiveToIdle+0xf0>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	225c      	movs	r2, #92	@ 0x5c
 8003f96:	217f      	movs	r1, #127	@ 0x7f
 8003f98:	5299      	strh	r1, [r3, r2]
 8003f9a:	e008      	b.n	8003fae <HAL_UARTEx_ReceiveToIdle+0x102>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	225c      	movs	r2, #92	@ 0x5c
 8003fa0:	213f      	movs	r1, #63	@ 0x3f
 8003fa2:	5299      	strh	r1, [r3, r2]
 8003fa4:	e003      	b.n	8003fae <HAL_UARTEx_ReceiveToIdle+0x102>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	225c      	movs	r2, #92	@ 0x5c
 8003faa:	2100      	movs	r1, #0
 8003fac:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8003fae:	2312      	movs	r3, #18
 8003fb0:	18fb      	adds	r3, r7, r3
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	215c      	movs	r1, #92	@ 0x5c
 8003fb6:	5a52      	ldrh	r2, [r2, r1]
 8003fb8:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	2380      	movs	r3, #128	@ 0x80
 8003fc0:	015b      	lsls	r3, r3, #5
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d108      	bne.n	8003fd8 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d104      	bne.n	8003fd8 <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	61bb      	str	r3, [r7, #24]
 8003fd6:	e003      	b.n	8003fe0 <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003fe6:	e062      	b.n	80040ae <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	2210      	movs	r2, #16
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	2b10      	cmp	r3, #16
 8003ff4:	d110      	bne.n	8004018 <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2210      	movs	r2, #16
 8003ffc:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2202      	movs	r2, #2
 800400a:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2280      	movs	r2, #128	@ 0x80
 8004010:	2120      	movs	r1, #32
 8004012:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	e062      	b.n	80040de <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	2220      	movs	r2, #32
 8004020:	4013      	ands	r3, r2
 8004022:	2b20      	cmp	r3, #32
 8004024:	d12f      	bne.n	8004086 <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10e      	bne.n	800404a <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	b29b      	uxth	r3, r3
 8004034:	2212      	movs	r2, #18
 8004036:	18ba      	adds	r2, r7, r2
 8004038:	8812      	ldrh	r2, [r2, #0]
 800403a:	4013      	ands	r3, r2
 800403c:	b29a      	uxth	r2, r3
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	3302      	adds	r3, #2
 8004046:	61bb      	str	r3, [r7, #24]
 8004048:	e00e      	b.n	8004068 <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2212      	movs	r2, #18
 8004054:	18ba      	adds	r2, r7, r2
 8004056:	8812      	ldrh	r2, [r2, #0]
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	4013      	ands	r3, r2
 800405c:	b2da      	uxtb	r2, r3
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3301      	adds	r3, #1
 8004066:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	881b      	ldrh	r3, [r3, #0]
 800406c:	3301      	adds	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	225a      	movs	r2, #90	@ 0x5a
 8004078:	5a9b      	ldrh	r3, [r3, r2]
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b299      	uxth	r1, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	225a      	movs	r2, #90	@ 0x5a
 8004084:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004088:	3301      	adds	r3, #1
 800408a:	d010      	beq.n	80040ae <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800408c:	f7fd f8bc 	bl	8001208 <HAL_GetTick>
 8004090:	0002      	movs	r2, r0
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004098:	429a      	cmp	r2, r3
 800409a:	d302      	bcc.n	80040a2 <HAL_UARTEx_ReceiveToIdle+0x1f6>
 800409c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d105      	bne.n	80040ae <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2280      	movs	r2, #128	@ 0x80
 80040a6:	2120      	movs	r1, #32
 80040a8:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e017      	b.n	80040de <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	225a      	movs	r2, #90	@ 0x5a
 80040b2:	5a9b      	ldrh	r3, [r3, r2]
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d196      	bne.n	8003fe8 <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2258      	movs	r2, #88	@ 0x58
 80040be:	5a9a      	ldrh	r2, [r3, r2]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	215a      	movs	r1, #90	@ 0x5a
 80040c4:	5a5b      	ldrh	r3, [r3, r1]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2280      	movs	r2, #128	@ 0x80
 80040d4:	2120      	movs	r1, #32
 80040d6:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	0018      	movs	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b008      	add	sp, #32
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	46c0      	nop			@ (mov r8, r8)
 80040e8:	000001ff 	.word	0x000001ff

080040ec <sniprintf>:
 80040ec:	b40c      	push	{r2, r3}
 80040ee:	b530      	push	{r4, r5, lr}
 80040f0:	4b18      	ldr	r3, [pc, #96]	@ (8004154 <sniprintf+0x68>)
 80040f2:	000c      	movs	r4, r1
 80040f4:	681d      	ldr	r5, [r3, #0]
 80040f6:	b09d      	sub	sp, #116	@ 0x74
 80040f8:	2900      	cmp	r1, #0
 80040fa:	da08      	bge.n	800410e <sniprintf+0x22>
 80040fc:	238b      	movs	r3, #139	@ 0x8b
 80040fe:	2001      	movs	r0, #1
 8004100:	602b      	str	r3, [r5, #0]
 8004102:	4240      	negs	r0, r0
 8004104:	b01d      	add	sp, #116	@ 0x74
 8004106:	bc30      	pop	{r4, r5}
 8004108:	bc08      	pop	{r3}
 800410a:	b002      	add	sp, #8
 800410c:	4718      	bx	r3
 800410e:	2382      	movs	r3, #130	@ 0x82
 8004110:	466a      	mov	r2, sp
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	8293      	strh	r3, [r2, #20]
 8004116:	2300      	movs	r3, #0
 8004118:	9002      	str	r0, [sp, #8]
 800411a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800411c:	9006      	str	r0, [sp, #24]
 800411e:	4299      	cmp	r1, r3
 8004120:	d000      	beq.n	8004124 <sniprintf+0x38>
 8004122:	1e4b      	subs	r3, r1, #1
 8004124:	9304      	str	r3, [sp, #16]
 8004126:	9307      	str	r3, [sp, #28]
 8004128:	2301      	movs	r3, #1
 800412a:	466a      	mov	r2, sp
 800412c:	425b      	negs	r3, r3
 800412e:	82d3      	strh	r3, [r2, #22]
 8004130:	0028      	movs	r0, r5
 8004132:	ab21      	add	r3, sp, #132	@ 0x84
 8004134:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004136:	a902      	add	r1, sp, #8
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	f000 f9ed 	bl	8004518 <_svfiprintf_r>
 800413e:	1c43      	adds	r3, r0, #1
 8004140:	da01      	bge.n	8004146 <sniprintf+0x5a>
 8004142:	238b      	movs	r3, #139	@ 0x8b
 8004144:	602b      	str	r3, [r5, #0]
 8004146:	2c00      	cmp	r4, #0
 8004148:	d0dc      	beq.n	8004104 <sniprintf+0x18>
 800414a:	2200      	movs	r2, #0
 800414c:	9b02      	ldr	r3, [sp, #8]
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	e7d8      	b.n	8004104 <sniprintf+0x18>
 8004152:	46c0      	nop			@ (mov r8, r8)
 8004154:	2000000c 	.word	0x2000000c

08004158 <_vsniprintf_r>:
 8004158:	b530      	push	{r4, r5, lr}
 800415a:	0005      	movs	r5, r0
 800415c:	0014      	movs	r4, r2
 800415e:	0008      	movs	r0, r1
 8004160:	001a      	movs	r2, r3
 8004162:	b09b      	sub	sp, #108	@ 0x6c
 8004164:	2c00      	cmp	r4, #0
 8004166:	da05      	bge.n	8004174 <_vsniprintf_r+0x1c>
 8004168:	238b      	movs	r3, #139	@ 0x8b
 800416a:	2001      	movs	r0, #1
 800416c:	602b      	str	r3, [r5, #0]
 800416e:	4240      	negs	r0, r0
 8004170:	b01b      	add	sp, #108	@ 0x6c
 8004172:	bd30      	pop	{r4, r5, pc}
 8004174:	2382      	movs	r3, #130	@ 0x82
 8004176:	4669      	mov	r1, sp
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	818b      	strh	r3, [r1, #12]
 800417c:	2100      	movs	r1, #0
 800417e:	9000      	str	r0, [sp, #0]
 8004180:	9119      	str	r1, [sp, #100]	@ 0x64
 8004182:	9004      	str	r0, [sp, #16]
 8004184:	428c      	cmp	r4, r1
 8004186:	d000      	beq.n	800418a <_vsniprintf_r+0x32>
 8004188:	1e61      	subs	r1, r4, #1
 800418a:	2301      	movs	r3, #1
 800418c:	9102      	str	r1, [sp, #8]
 800418e:	9105      	str	r1, [sp, #20]
 8004190:	4669      	mov	r1, sp
 8004192:	425b      	negs	r3, r3
 8004194:	81cb      	strh	r3, [r1, #14]
 8004196:	0028      	movs	r0, r5
 8004198:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800419a:	f000 f9bd 	bl	8004518 <_svfiprintf_r>
 800419e:	1c43      	adds	r3, r0, #1
 80041a0:	da01      	bge.n	80041a6 <_vsniprintf_r+0x4e>
 80041a2:	238b      	movs	r3, #139	@ 0x8b
 80041a4:	602b      	str	r3, [r5, #0]
 80041a6:	2c00      	cmp	r4, #0
 80041a8:	d0e2      	beq.n	8004170 <_vsniprintf_r+0x18>
 80041aa:	2200      	movs	r2, #0
 80041ac:	9b00      	ldr	r3, [sp, #0]
 80041ae:	701a      	strb	r2, [r3, #0]
 80041b0:	e7de      	b.n	8004170 <_vsniprintf_r+0x18>
	...

080041b4 <vsniprintf>:
 80041b4:	b513      	push	{r0, r1, r4, lr}
 80041b6:	4c04      	ldr	r4, [pc, #16]	@ (80041c8 <vsniprintf+0x14>)
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	0013      	movs	r3, r2
 80041bc:	000a      	movs	r2, r1
 80041be:	0001      	movs	r1, r0
 80041c0:	6820      	ldr	r0, [r4, #0]
 80041c2:	f7ff ffc9 	bl	8004158 <_vsniprintf_r>
 80041c6:	bd16      	pop	{r1, r2, r4, pc}
 80041c8:	2000000c 	.word	0x2000000c

080041cc <memset>:
 80041cc:	0003      	movs	r3, r0
 80041ce:	1882      	adds	r2, r0, r2
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d100      	bne.n	80041d6 <memset+0xa>
 80041d4:	4770      	bx	lr
 80041d6:	7019      	strb	r1, [r3, #0]
 80041d8:	3301      	adds	r3, #1
 80041da:	e7f9      	b.n	80041d0 <memset+0x4>

080041dc <strstr>:
 80041dc:	780a      	ldrb	r2, [r1, #0]
 80041de:	b530      	push	{r4, r5, lr}
 80041e0:	2a00      	cmp	r2, #0
 80041e2:	d10c      	bne.n	80041fe <strstr+0x22>
 80041e4:	bd30      	pop	{r4, r5, pc}
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d108      	bne.n	80041fc <strstr+0x20>
 80041ea:	2301      	movs	r3, #1
 80041ec:	5ccc      	ldrb	r4, [r1, r3]
 80041ee:	2c00      	cmp	r4, #0
 80041f0:	d0f8      	beq.n	80041e4 <strstr+0x8>
 80041f2:	5cc5      	ldrb	r5, [r0, r3]
 80041f4:	42a5      	cmp	r5, r4
 80041f6:	d101      	bne.n	80041fc <strstr+0x20>
 80041f8:	3301      	adds	r3, #1
 80041fa:	e7f7      	b.n	80041ec <strstr+0x10>
 80041fc:	3001      	adds	r0, #1
 80041fe:	7803      	ldrb	r3, [r0, #0]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1f0      	bne.n	80041e6 <strstr+0xa>
 8004204:	0018      	movs	r0, r3
 8004206:	e7ed      	b.n	80041e4 <strstr+0x8>

08004208 <__errno>:
 8004208:	4b01      	ldr	r3, [pc, #4]	@ (8004210 <__errno+0x8>)
 800420a:	6818      	ldr	r0, [r3, #0]
 800420c:	4770      	bx	lr
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	2000000c 	.word	0x2000000c

08004214 <__libc_init_array>:
 8004214:	b570      	push	{r4, r5, r6, lr}
 8004216:	2600      	movs	r6, #0
 8004218:	4c0c      	ldr	r4, [pc, #48]	@ (800424c <__libc_init_array+0x38>)
 800421a:	4d0d      	ldr	r5, [pc, #52]	@ (8004250 <__libc_init_array+0x3c>)
 800421c:	1b64      	subs	r4, r4, r5
 800421e:	10a4      	asrs	r4, r4, #2
 8004220:	42a6      	cmp	r6, r4
 8004222:	d109      	bne.n	8004238 <__libc_init_array+0x24>
 8004224:	2600      	movs	r6, #0
 8004226:	f000 fc61 	bl	8004aec <_init>
 800422a:	4c0a      	ldr	r4, [pc, #40]	@ (8004254 <__libc_init_array+0x40>)
 800422c:	4d0a      	ldr	r5, [pc, #40]	@ (8004258 <__libc_init_array+0x44>)
 800422e:	1b64      	subs	r4, r4, r5
 8004230:	10a4      	asrs	r4, r4, #2
 8004232:	42a6      	cmp	r6, r4
 8004234:	d105      	bne.n	8004242 <__libc_init_array+0x2e>
 8004236:	bd70      	pop	{r4, r5, r6, pc}
 8004238:	00b3      	lsls	r3, r6, #2
 800423a:	58eb      	ldr	r3, [r5, r3]
 800423c:	4798      	blx	r3
 800423e:	3601      	adds	r6, #1
 8004240:	e7ee      	b.n	8004220 <__libc_init_array+0xc>
 8004242:	00b3      	lsls	r3, r6, #2
 8004244:	58eb      	ldr	r3, [r5, r3]
 8004246:	4798      	blx	r3
 8004248:	3601      	adds	r6, #1
 800424a:	e7f2      	b.n	8004232 <__libc_init_array+0x1e>
 800424c:	08004ed0 	.word	0x08004ed0
 8004250:	08004ed0 	.word	0x08004ed0
 8004254:	08004ed4 	.word	0x08004ed4
 8004258:	08004ed0 	.word	0x08004ed0

0800425c <__retarget_lock_acquire_recursive>:
 800425c:	4770      	bx	lr

0800425e <__retarget_lock_release_recursive>:
 800425e:	4770      	bx	lr

08004260 <_free_r>:
 8004260:	b570      	push	{r4, r5, r6, lr}
 8004262:	0005      	movs	r5, r0
 8004264:	1e0c      	subs	r4, r1, #0
 8004266:	d010      	beq.n	800428a <_free_r+0x2a>
 8004268:	3c04      	subs	r4, #4
 800426a:	6823      	ldr	r3, [r4, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	da00      	bge.n	8004272 <_free_r+0x12>
 8004270:	18e4      	adds	r4, r4, r3
 8004272:	0028      	movs	r0, r5
 8004274:	f000 f8e0 	bl	8004438 <__malloc_lock>
 8004278:	4a1d      	ldr	r2, [pc, #116]	@ (80042f0 <_free_r+0x90>)
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d105      	bne.n	800428c <_free_r+0x2c>
 8004280:	6063      	str	r3, [r4, #4]
 8004282:	6014      	str	r4, [r2, #0]
 8004284:	0028      	movs	r0, r5
 8004286:	f000 f8df 	bl	8004448 <__malloc_unlock>
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	42a3      	cmp	r3, r4
 800428e:	d908      	bls.n	80042a2 <_free_r+0x42>
 8004290:	6820      	ldr	r0, [r4, #0]
 8004292:	1821      	adds	r1, r4, r0
 8004294:	428b      	cmp	r3, r1
 8004296:	d1f3      	bne.n	8004280 <_free_r+0x20>
 8004298:	6819      	ldr	r1, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	1809      	adds	r1, r1, r0
 800429e:	6021      	str	r1, [r4, #0]
 80042a0:	e7ee      	b.n	8004280 <_free_r+0x20>
 80042a2:	001a      	movs	r2, r3
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <_free_r+0x4e>
 80042aa:	42a3      	cmp	r3, r4
 80042ac:	d9f9      	bls.n	80042a2 <_free_r+0x42>
 80042ae:	6811      	ldr	r1, [r2, #0]
 80042b0:	1850      	adds	r0, r2, r1
 80042b2:	42a0      	cmp	r0, r4
 80042b4:	d10b      	bne.n	80042ce <_free_r+0x6e>
 80042b6:	6820      	ldr	r0, [r4, #0]
 80042b8:	1809      	adds	r1, r1, r0
 80042ba:	1850      	adds	r0, r2, r1
 80042bc:	6011      	str	r1, [r2, #0]
 80042be:	4283      	cmp	r3, r0
 80042c0:	d1e0      	bne.n	8004284 <_free_r+0x24>
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	1841      	adds	r1, r0, r1
 80042c8:	6011      	str	r1, [r2, #0]
 80042ca:	6053      	str	r3, [r2, #4]
 80042cc:	e7da      	b.n	8004284 <_free_r+0x24>
 80042ce:	42a0      	cmp	r0, r4
 80042d0:	d902      	bls.n	80042d8 <_free_r+0x78>
 80042d2:	230c      	movs	r3, #12
 80042d4:	602b      	str	r3, [r5, #0]
 80042d6:	e7d5      	b.n	8004284 <_free_r+0x24>
 80042d8:	6820      	ldr	r0, [r4, #0]
 80042da:	1821      	adds	r1, r4, r0
 80042dc:	428b      	cmp	r3, r1
 80042de:	d103      	bne.n	80042e8 <_free_r+0x88>
 80042e0:	6819      	ldr	r1, [r3, #0]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	1809      	adds	r1, r1, r0
 80042e6:	6021      	str	r1, [r4, #0]
 80042e8:	6063      	str	r3, [r4, #4]
 80042ea:	6054      	str	r4, [r2, #4]
 80042ec:	e7ca      	b.n	8004284 <_free_r+0x24>
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	2000034c 	.word	0x2000034c

080042f4 <sbrk_aligned>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	4e0f      	ldr	r6, [pc, #60]	@ (8004334 <sbrk_aligned+0x40>)
 80042f8:	000d      	movs	r5, r1
 80042fa:	6831      	ldr	r1, [r6, #0]
 80042fc:	0004      	movs	r4, r0
 80042fe:	2900      	cmp	r1, #0
 8004300:	d102      	bne.n	8004308 <sbrk_aligned+0x14>
 8004302:	f000 fb95 	bl	8004a30 <_sbrk_r>
 8004306:	6030      	str	r0, [r6, #0]
 8004308:	0029      	movs	r1, r5
 800430a:	0020      	movs	r0, r4
 800430c:	f000 fb90 	bl	8004a30 <_sbrk_r>
 8004310:	1c43      	adds	r3, r0, #1
 8004312:	d103      	bne.n	800431c <sbrk_aligned+0x28>
 8004314:	2501      	movs	r5, #1
 8004316:	426d      	negs	r5, r5
 8004318:	0028      	movs	r0, r5
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	2303      	movs	r3, #3
 800431e:	1cc5      	adds	r5, r0, #3
 8004320:	439d      	bics	r5, r3
 8004322:	42a8      	cmp	r0, r5
 8004324:	d0f8      	beq.n	8004318 <sbrk_aligned+0x24>
 8004326:	1a29      	subs	r1, r5, r0
 8004328:	0020      	movs	r0, r4
 800432a:	f000 fb81 	bl	8004a30 <_sbrk_r>
 800432e:	3001      	adds	r0, #1
 8004330:	d1f2      	bne.n	8004318 <sbrk_aligned+0x24>
 8004332:	e7ef      	b.n	8004314 <sbrk_aligned+0x20>
 8004334:	20000348 	.word	0x20000348

08004338 <_malloc_r>:
 8004338:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800433a:	2203      	movs	r2, #3
 800433c:	1ccb      	adds	r3, r1, #3
 800433e:	4393      	bics	r3, r2
 8004340:	3308      	adds	r3, #8
 8004342:	0005      	movs	r5, r0
 8004344:	001f      	movs	r7, r3
 8004346:	2b0c      	cmp	r3, #12
 8004348:	d234      	bcs.n	80043b4 <_malloc_r+0x7c>
 800434a:	270c      	movs	r7, #12
 800434c:	42b9      	cmp	r1, r7
 800434e:	d833      	bhi.n	80043b8 <_malloc_r+0x80>
 8004350:	0028      	movs	r0, r5
 8004352:	f000 f871 	bl	8004438 <__malloc_lock>
 8004356:	4e37      	ldr	r6, [pc, #220]	@ (8004434 <_malloc_r+0xfc>)
 8004358:	6833      	ldr	r3, [r6, #0]
 800435a:	001c      	movs	r4, r3
 800435c:	2c00      	cmp	r4, #0
 800435e:	d12f      	bne.n	80043c0 <_malloc_r+0x88>
 8004360:	0039      	movs	r1, r7
 8004362:	0028      	movs	r0, r5
 8004364:	f7ff ffc6 	bl	80042f4 <sbrk_aligned>
 8004368:	0004      	movs	r4, r0
 800436a:	1c43      	adds	r3, r0, #1
 800436c:	d15f      	bne.n	800442e <_malloc_r+0xf6>
 800436e:	6834      	ldr	r4, [r6, #0]
 8004370:	9400      	str	r4, [sp, #0]
 8004372:	9b00      	ldr	r3, [sp, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d14a      	bne.n	800440e <_malloc_r+0xd6>
 8004378:	2c00      	cmp	r4, #0
 800437a:	d052      	beq.n	8004422 <_malloc_r+0xea>
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	0028      	movs	r0, r5
 8004380:	18e3      	adds	r3, r4, r3
 8004382:	9900      	ldr	r1, [sp, #0]
 8004384:	9301      	str	r3, [sp, #4]
 8004386:	f000 fb53 	bl	8004a30 <_sbrk_r>
 800438a:	9b01      	ldr	r3, [sp, #4]
 800438c:	4283      	cmp	r3, r0
 800438e:	d148      	bne.n	8004422 <_malloc_r+0xea>
 8004390:	6823      	ldr	r3, [r4, #0]
 8004392:	0028      	movs	r0, r5
 8004394:	1aff      	subs	r7, r7, r3
 8004396:	0039      	movs	r1, r7
 8004398:	f7ff ffac 	bl	80042f4 <sbrk_aligned>
 800439c:	3001      	adds	r0, #1
 800439e:	d040      	beq.n	8004422 <_malloc_r+0xea>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	19db      	adds	r3, r3, r7
 80043a4:	6023      	str	r3, [r4, #0]
 80043a6:	6833      	ldr	r3, [r6, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	2a00      	cmp	r2, #0
 80043ac:	d133      	bne.n	8004416 <_malloc_r+0xde>
 80043ae:	9b00      	ldr	r3, [sp, #0]
 80043b0:	6033      	str	r3, [r6, #0]
 80043b2:	e019      	b.n	80043e8 <_malloc_r+0xb0>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	dac9      	bge.n	800434c <_malloc_r+0x14>
 80043b8:	230c      	movs	r3, #12
 80043ba:	602b      	str	r3, [r5, #0]
 80043bc:	2000      	movs	r0, #0
 80043be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043c0:	6821      	ldr	r1, [r4, #0]
 80043c2:	1bc9      	subs	r1, r1, r7
 80043c4:	d420      	bmi.n	8004408 <_malloc_r+0xd0>
 80043c6:	290b      	cmp	r1, #11
 80043c8:	d90a      	bls.n	80043e0 <_malloc_r+0xa8>
 80043ca:	19e2      	adds	r2, r4, r7
 80043cc:	6027      	str	r7, [r4, #0]
 80043ce:	42a3      	cmp	r3, r4
 80043d0:	d104      	bne.n	80043dc <_malloc_r+0xa4>
 80043d2:	6032      	str	r2, [r6, #0]
 80043d4:	6863      	ldr	r3, [r4, #4]
 80043d6:	6011      	str	r1, [r2, #0]
 80043d8:	6053      	str	r3, [r2, #4]
 80043da:	e005      	b.n	80043e8 <_malloc_r+0xb0>
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	e7f9      	b.n	80043d4 <_malloc_r+0x9c>
 80043e0:	6862      	ldr	r2, [r4, #4]
 80043e2:	42a3      	cmp	r3, r4
 80043e4:	d10e      	bne.n	8004404 <_malloc_r+0xcc>
 80043e6:	6032      	str	r2, [r6, #0]
 80043e8:	0028      	movs	r0, r5
 80043ea:	f000 f82d 	bl	8004448 <__malloc_unlock>
 80043ee:	0020      	movs	r0, r4
 80043f0:	2207      	movs	r2, #7
 80043f2:	300b      	adds	r0, #11
 80043f4:	1d23      	adds	r3, r4, #4
 80043f6:	4390      	bics	r0, r2
 80043f8:	1ac2      	subs	r2, r0, r3
 80043fa:	4298      	cmp	r0, r3
 80043fc:	d0df      	beq.n	80043be <_malloc_r+0x86>
 80043fe:	1a1b      	subs	r3, r3, r0
 8004400:	50a3      	str	r3, [r4, r2]
 8004402:	e7dc      	b.n	80043be <_malloc_r+0x86>
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	e7ef      	b.n	80043e8 <_malloc_r+0xb0>
 8004408:	0023      	movs	r3, r4
 800440a:	6864      	ldr	r4, [r4, #4]
 800440c:	e7a6      	b.n	800435c <_malloc_r+0x24>
 800440e:	9c00      	ldr	r4, [sp, #0]
 8004410:	6863      	ldr	r3, [r4, #4]
 8004412:	9300      	str	r3, [sp, #0]
 8004414:	e7ad      	b.n	8004372 <_malloc_r+0x3a>
 8004416:	001a      	movs	r2, r3
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	42a3      	cmp	r3, r4
 800441c:	d1fb      	bne.n	8004416 <_malloc_r+0xde>
 800441e:	2300      	movs	r3, #0
 8004420:	e7da      	b.n	80043d8 <_malloc_r+0xa0>
 8004422:	230c      	movs	r3, #12
 8004424:	0028      	movs	r0, r5
 8004426:	602b      	str	r3, [r5, #0]
 8004428:	f000 f80e 	bl	8004448 <__malloc_unlock>
 800442c:	e7c6      	b.n	80043bc <_malloc_r+0x84>
 800442e:	6007      	str	r7, [r0, #0]
 8004430:	e7da      	b.n	80043e8 <_malloc_r+0xb0>
 8004432:	46c0      	nop			@ (mov r8, r8)
 8004434:	2000034c 	.word	0x2000034c

08004438 <__malloc_lock>:
 8004438:	b510      	push	{r4, lr}
 800443a:	4802      	ldr	r0, [pc, #8]	@ (8004444 <__malloc_lock+0xc>)
 800443c:	f7ff ff0e 	bl	800425c <__retarget_lock_acquire_recursive>
 8004440:	bd10      	pop	{r4, pc}
 8004442:	46c0      	nop			@ (mov r8, r8)
 8004444:	20000344 	.word	0x20000344

08004448 <__malloc_unlock>:
 8004448:	b510      	push	{r4, lr}
 800444a:	4802      	ldr	r0, [pc, #8]	@ (8004454 <__malloc_unlock+0xc>)
 800444c:	f7ff ff07 	bl	800425e <__retarget_lock_release_recursive>
 8004450:	bd10      	pop	{r4, pc}
 8004452:	46c0      	nop			@ (mov r8, r8)
 8004454:	20000344 	.word	0x20000344

08004458 <__ssputs_r>:
 8004458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800445a:	688e      	ldr	r6, [r1, #8]
 800445c:	b085      	sub	sp, #20
 800445e:	001f      	movs	r7, r3
 8004460:	000c      	movs	r4, r1
 8004462:	680b      	ldr	r3, [r1, #0]
 8004464:	9002      	str	r0, [sp, #8]
 8004466:	9203      	str	r2, [sp, #12]
 8004468:	42be      	cmp	r6, r7
 800446a:	d830      	bhi.n	80044ce <__ssputs_r+0x76>
 800446c:	210c      	movs	r1, #12
 800446e:	5e62      	ldrsh	r2, [r4, r1]
 8004470:	2190      	movs	r1, #144	@ 0x90
 8004472:	00c9      	lsls	r1, r1, #3
 8004474:	420a      	tst	r2, r1
 8004476:	d028      	beq.n	80044ca <__ssputs_r+0x72>
 8004478:	2003      	movs	r0, #3
 800447a:	6921      	ldr	r1, [r4, #16]
 800447c:	1a5b      	subs	r3, r3, r1
 800447e:	9301      	str	r3, [sp, #4]
 8004480:	6963      	ldr	r3, [r4, #20]
 8004482:	4343      	muls	r3, r0
 8004484:	9801      	ldr	r0, [sp, #4]
 8004486:	0fdd      	lsrs	r5, r3, #31
 8004488:	18ed      	adds	r5, r5, r3
 800448a:	1c7b      	adds	r3, r7, #1
 800448c:	181b      	adds	r3, r3, r0
 800448e:	106d      	asrs	r5, r5, #1
 8004490:	42ab      	cmp	r3, r5
 8004492:	d900      	bls.n	8004496 <__ssputs_r+0x3e>
 8004494:	001d      	movs	r5, r3
 8004496:	0552      	lsls	r2, r2, #21
 8004498:	d528      	bpl.n	80044ec <__ssputs_r+0x94>
 800449a:	0029      	movs	r1, r5
 800449c:	9802      	ldr	r0, [sp, #8]
 800449e:	f7ff ff4b 	bl	8004338 <_malloc_r>
 80044a2:	1e06      	subs	r6, r0, #0
 80044a4:	d02c      	beq.n	8004500 <__ssputs_r+0xa8>
 80044a6:	9a01      	ldr	r2, [sp, #4]
 80044a8:	6921      	ldr	r1, [r4, #16]
 80044aa:	f000 fade 	bl	8004a6a <memcpy>
 80044ae:	89a2      	ldrh	r2, [r4, #12]
 80044b0:	4b18      	ldr	r3, [pc, #96]	@ (8004514 <__ssputs_r+0xbc>)
 80044b2:	401a      	ands	r2, r3
 80044b4:	2380      	movs	r3, #128	@ 0x80
 80044b6:	4313      	orrs	r3, r2
 80044b8:	81a3      	strh	r3, [r4, #12]
 80044ba:	9b01      	ldr	r3, [sp, #4]
 80044bc:	6126      	str	r6, [r4, #16]
 80044be:	18f6      	adds	r6, r6, r3
 80044c0:	6026      	str	r6, [r4, #0]
 80044c2:	003e      	movs	r6, r7
 80044c4:	6165      	str	r5, [r4, #20]
 80044c6:	1aed      	subs	r5, r5, r3
 80044c8:	60a5      	str	r5, [r4, #8]
 80044ca:	42be      	cmp	r6, r7
 80044cc:	d900      	bls.n	80044d0 <__ssputs_r+0x78>
 80044ce:	003e      	movs	r6, r7
 80044d0:	0032      	movs	r2, r6
 80044d2:	9903      	ldr	r1, [sp, #12]
 80044d4:	6820      	ldr	r0, [r4, #0]
 80044d6:	f000 fa99 	bl	8004a0c <memmove>
 80044da:	2000      	movs	r0, #0
 80044dc:	68a3      	ldr	r3, [r4, #8]
 80044de:	1b9b      	subs	r3, r3, r6
 80044e0:	60a3      	str	r3, [r4, #8]
 80044e2:	6823      	ldr	r3, [r4, #0]
 80044e4:	199b      	adds	r3, r3, r6
 80044e6:	6023      	str	r3, [r4, #0]
 80044e8:	b005      	add	sp, #20
 80044ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044ec:	002a      	movs	r2, r5
 80044ee:	9802      	ldr	r0, [sp, #8]
 80044f0:	f000 fac4 	bl	8004a7c <_realloc_r>
 80044f4:	1e06      	subs	r6, r0, #0
 80044f6:	d1e0      	bne.n	80044ba <__ssputs_r+0x62>
 80044f8:	6921      	ldr	r1, [r4, #16]
 80044fa:	9802      	ldr	r0, [sp, #8]
 80044fc:	f7ff feb0 	bl	8004260 <_free_r>
 8004500:	230c      	movs	r3, #12
 8004502:	2001      	movs	r0, #1
 8004504:	9a02      	ldr	r2, [sp, #8]
 8004506:	4240      	negs	r0, r0
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	89a2      	ldrh	r2, [r4, #12]
 800450c:	3334      	adds	r3, #52	@ 0x34
 800450e:	4313      	orrs	r3, r2
 8004510:	81a3      	strh	r3, [r4, #12]
 8004512:	e7e9      	b.n	80044e8 <__ssputs_r+0x90>
 8004514:	fffffb7f 	.word	0xfffffb7f

08004518 <_svfiprintf_r>:
 8004518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451a:	b0a1      	sub	sp, #132	@ 0x84
 800451c:	9003      	str	r0, [sp, #12]
 800451e:	001d      	movs	r5, r3
 8004520:	898b      	ldrh	r3, [r1, #12]
 8004522:	000f      	movs	r7, r1
 8004524:	0016      	movs	r6, r2
 8004526:	061b      	lsls	r3, r3, #24
 8004528:	d511      	bpl.n	800454e <_svfiprintf_r+0x36>
 800452a:	690b      	ldr	r3, [r1, #16]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10e      	bne.n	800454e <_svfiprintf_r+0x36>
 8004530:	2140      	movs	r1, #64	@ 0x40
 8004532:	f7ff ff01 	bl	8004338 <_malloc_r>
 8004536:	6038      	str	r0, [r7, #0]
 8004538:	6138      	str	r0, [r7, #16]
 800453a:	2800      	cmp	r0, #0
 800453c:	d105      	bne.n	800454a <_svfiprintf_r+0x32>
 800453e:	230c      	movs	r3, #12
 8004540:	9a03      	ldr	r2, [sp, #12]
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	2001      	movs	r0, #1
 8004546:	4240      	negs	r0, r0
 8004548:	e0cf      	b.n	80046ea <_svfiprintf_r+0x1d2>
 800454a:	2340      	movs	r3, #64	@ 0x40
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	2300      	movs	r3, #0
 8004550:	ac08      	add	r4, sp, #32
 8004552:	6163      	str	r3, [r4, #20]
 8004554:	3320      	adds	r3, #32
 8004556:	7663      	strb	r3, [r4, #25]
 8004558:	3310      	adds	r3, #16
 800455a:	76a3      	strb	r3, [r4, #26]
 800455c:	9507      	str	r5, [sp, #28]
 800455e:	0035      	movs	r5, r6
 8004560:	782b      	ldrb	r3, [r5, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <_svfiprintf_r+0x52>
 8004566:	2b25      	cmp	r3, #37	@ 0x25
 8004568:	d148      	bne.n	80045fc <_svfiprintf_r+0xe4>
 800456a:	1bab      	subs	r3, r5, r6
 800456c:	9305      	str	r3, [sp, #20]
 800456e:	42b5      	cmp	r5, r6
 8004570:	d00b      	beq.n	800458a <_svfiprintf_r+0x72>
 8004572:	0032      	movs	r2, r6
 8004574:	0039      	movs	r1, r7
 8004576:	9803      	ldr	r0, [sp, #12]
 8004578:	f7ff ff6e 	bl	8004458 <__ssputs_r>
 800457c:	3001      	adds	r0, #1
 800457e:	d100      	bne.n	8004582 <_svfiprintf_r+0x6a>
 8004580:	e0ae      	b.n	80046e0 <_svfiprintf_r+0x1c8>
 8004582:	6963      	ldr	r3, [r4, #20]
 8004584:	9a05      	ldr	r2, [sp, #20]
 8004586:	189b      	adds	r3, r3, r2
 8004588:	6163      	str	r3, [r4, #20]
 800458a:	782b      	ldrb	r3, [r5, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d100      	bne.n	8004592 <_svfiprintf_r+0x7a>
 8004590:	e0a6      	b.n	80046e0 <_svfiprintf_r+0x1c8>
 8004592:	2201      	movs	r2, #1
 8004594:	2300      	movs	r3, #0
 8004596:	4252      	negs	r2, r2
 8004598:	6062      	str	r2, [r4, #4]
 800459a:	a904      	add	r1, sp, #16
 800459c:	3254      	adds	r2, #84	@ 0x54
 800459e:	1852      	adds	r2, r2, r1
 80045a0:	1c6e      	adds	r6, r5, #1
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	60e3      	str	r3, [r4, #12]
 80045a6:	60a3      	str	r3, [r4, #8]
 80045a8:	7013      	strb	r3, [r2, #0]
 80045aa:	65a3      	str	r3, [r4, #88]	@ 0x58
 80045ac:	4b54      	ldr	r3, [pc, #336]	@ (8004700 <_svfiprintf_r+0x1e8>)
 80045ae:	2205      	movs	r2, #5
 80045b0:	0018      	movs	r0, r3
 80045b2:	7831      	ldrb	r1, [r6, #0]
 80045b4:	9305      	str	r3, [sp, #20]
 80045b6:	f000 fa4d 	bl	8004a54 <memchr>
 80045ba:	1c75      	adds	r5, r6, #1
 80045bc:	2800      	cmp	r0, #0
 80045be:	d11f      	bne.n	8004600 <_svfiprintf_r+0xe8>
 80045c0:	6822      	ldr	r2, [r4, #0]
 80045c2:	06d3      	lsls	r3, r2, #27
 80045c4:	d504      	bpl.n	80045d0 <_svfiprintf_r+0xb8>
 80045c6:	2353      	movs	r3, #83	@ 0x53
 80045c8:	a904      	add	r1, sp, #16
 80045ca:	185b      	adds	r3, r3, r1
 80045cc:	2120      	movs	r1, #32
 80045ce:	7019      	strb	r1, [r3, #0]
 80045d0:	0713      	lsls	r3, r2, #28
 80045d2:	d504      	bpl.n	80045de <_svfiprintf_r+0xc6>
 80045d4:	2353      	movs	r3, #83	@ 0x53
 80045d6:	a904      	add	r1, sp, #16
 80045d8:	185b      	adds	r3, r3, r1
 80045da:	212b      	movs	r1, #43	@ 0x2b
 80045dc:	7019      	strb	r1, [r3, #0]
 80045de:	7833      	ldrb	r3, [r6, #0]
 80045e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80045e2:	d016      	beq.n	8004612 <_svfiprintf_r+0xfa>
 80045e4:	0035      	movs	r5, r6
 80045e6:	2100      	movs	r1, #0
 80045e8:	200a      	movs	r0, #10
 80045ea:	68e3      	ldr	r3, [r4, #12]
 80045ec:	782a      	ldrb	r2, [r5, #0]
 80045ee:	1c6e      	adds	r6, r5, #1
 80045f0:	3a30      	subs	r2, #48	@ 0x30
 80045f2:	2a09      	cmp	r2, #9
 80045f4:	d950      	bls.n	8004698 <_svfiprintf_r+0x180>
 80045f6:	2900      	cmp	r1, #0
 80045f8:	d111      	bne.n	800461e <_svfiprintf_r+0x106>
 80045fa:	e017      	b.n	800462c <_svfiprintf_r+0x114>
 80045fc:	3501      	adds	r5, #1
 80045fe:	e7af      	b.n	8004560 <_svfiprintf_r+0x48>
 8004600:	9b05      	ldr	r3, [sp, #20]
 8004602:	6822      	ldr	r2, [r4, #0]
 8004604:	1ac0      	subs	r0, r0, r3
 8004606:	2301      	movs	r3, #1
 8004608:	4083      	lsls	r3, r0
 800460a:	4313      	orrs	r3, r2
 800460c:	002e      	movs	r6, r5
 800460e:	6023      	str	r3, [r4, #0]
 8004610:	e7cc      	b.n	80045ac <_svfiprintf_r+0x94>
 8004612:	9b07      	ldr	r3, [sp, #28]
 8004614:	1d19      	adds	r1, r3, #4
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	9107      	str	r1, [sp, #28]
 800461a:	2b00      	cmp	r3, #0
 800461c:	db01      	blt.n	8004622 <_svfiprintf_r+0x10a>
 800461e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004620:	e004      	b.n	800462c <_svfiprintf_r+0x114>
 8004622:	425b      	negs	r3, r3
 8004624:	60e3      	str	r3, [r4, #12]
 8004626:	2302      	movs	r3, #2
 8004628:	4313      	orrs	r3, r2
 800462a:	6023      	str	r3, [r4, #0]
 800462c:	782b      	ldrb	r3, [r5, #0]
 800462e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004630:	d10c      	bne.n	800464c <_svfiprintf_r+0x134>
 8004632:	786b      	ldrb	r3, [r5, #1]
 8004634:	2b2a      	cmp	r3, #42	@ 0x2a
 8004636:	d134      	bne.n	80046a2 <_svfiprintf_r+0x18a>
 8004638:	9b07      	ldr	r3, [sp, #28]
 800463a:	3502      	adds	r5, #2
 800463c:	1d1a      	adds	r2, r3, #4
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	9207      	str	r2, [sp, #28]
 8004642:	2b00      	cmp	r3, #0
 8004644:	da01      	bge.n	800464a <_svfiprintf_r+0x132>
 8004646:	2301      	movs	r3, #1
 8004648:	425b      	negs	r3, r3
 800464a:	9309      	str	r3, [sp, #36]	@ 0x24
 800464c:	4e2d      	ldr	r6, [pc, #180]	@ (8004704 <_svfiprintf_r+0x1ec>)
 800464e:	2203      	movs	r2, #3
 8004650:	0030      	movs	r0, r6
 8004652:	7829      	ldrb	r1, [r5, #0]
 8004654:	f000 f9fe 	bl	8004a54 <memchr>
 8004658:	2800      	cmp	r0, #0
 800465a:	d006      	beq.n	800466a <_svfiprintf_r+0x152>
 800465c:	2340      	movs	r3, #64	@ 0x40
 800465e:	1b80      	subs	r0, r0, r6
 8004660:	4083      	lsls	r3, r0
 8004662:	6822      	ldr	r2, [r4, #0]
 8004664:	3501      	adds	r5, #1
 8004666:	4313      	orrs	r3, r2
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	7829      	ldrb	r1, [r5, #0]
 800466c:	2206      	movs	r2, #6
 800466e:	4826      	ldr	r0, [pc, #152]	@ (8004708 <_svfiprintf_r+0x1f0>)
 8004670:	1c6e      	adds	r6, r5, #1
 8004672:	7621      	strb	r1, [r4, #24]
 8004674:	f000 f9ee 	bl	8004a54 <memchr>
 8004678:	2800      	cmp	r0, #0
 800467a:	d038      	beq.n	80046ee <_svfiprintf_r+0x1d6>
 800467c:	4b23      	ldr	r3, [pc, #140]	@ (800470c <_svfiprintf_r+0x1f4>)
 800467e:	2b00      	cmp	r3, #0
 8004680:	d122      	bne.n	80046c8 <_svfiprintf_r+0x1b0>
 8004682:	2207      	movs	r2, #7
 8004684:	9b07      	ldr	r3, [sp, #28]
 8004686:	3307      	adds	r3, #7
 8004688:	4393      	bics	r3, r2
 800468a:	3308      	adds	r3, #8
 800468c:	9307      	str	r3, [sp, #28]
 800468e:	6963      	ldr	r3, [r4, #20]
 8004690:	9a04      	ldr	r2, [sp, #16]
 8004692:	189b      	adds	r3, r3, r2
 8004694:	6163      	str	r3, [r4, #20]
 8004696:	e762      	b.n	800455e <_svfiprintf_r+0x46>
 8004698:	4343      	muls	r3, r0
 800469a:	0035      	movs	r5, r6
 800469c:	2101      	movs	r1, #1
 800469e:	189b      	adds	r3, r3, r2
 80046a0:	e7a4      	b.n	80045ec <_svfiprintf_r+0xd4>
 80046a2:	2300      	movs	r3, #0
 80046a4:	200a      	movs	r0, #10
 80046a6:	0019      	movs	r1, r3
 80046a8:	3501      	adds	r5, #1
 80046aa:	6063      	str	r3, [r4, #4]
 80046ac:	782a      	ldrb	r2, [r5, #0]
 80046ae:	1c6e      	adds	r6, r5, #1
 80046b0:	3a30      	subs	r2, #48	@ 0x30
 80046b2:	2a09      	cmp	r2, #9
 80046b4:	d903      	bls.n	80046be <_svfiprintf_r+0x1a6>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d0c8      	beq.n	800464c <_svfiprintf_r+0x134>
 80046ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80046bc:	e7c6      	b.n	800464c <_svfiprintf_r+0x134>
 80046be:	4341      	muls	r1, r0
 80046c0:	0035      	movs	r5, r6
 80046c2:	2301      	movs	r3, #1
 80046c4:	1889      	adds	r1, r1, r2
 80046c6:	e7f1      	b.n	80046ac <_svfiprintf_r+0x194>
 80046c8:	aa07      	add	r2, sp, #28
 80046ca:	9200      	str	r2, [sp, #0]
 80046cc:	0021      	movs	r1, r4
 80046ce:	003a      	movs	r2, r7
 80046d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004710 <_svfiprintf_r+0x1f8>)
 80046d2:	9803      	ldr	r0, [sp, #12]
 80046d4:	e000      	b.n	80046d8 <_svfiprintf_r+0x1c0>
 80046d6:	bf00      	nop
 80046d8:	9004      	str	r0, [sp, #16]
 80046da:	9b04      	ldr	r3, [sp, #16]
 80046dc:	3301      	adds	r3, #1
 80046de:	d1d6      	bne.n	800468e <_svfiprintf_r+0x176>
 80046e0:	89bb      	ldrh	r3, [r7, #12]
 80046e2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80046e4:	065b      	lsls	r3, r3, #25
 80046e6:	d500      	bpl.n	80046ea <_svfiprintf_r+0x1d2>
 80046e8:	e72c      	b.n	8004544 <_svfiprintf_r+0x2c>
 80046ea:	b021      	add	sp, #132	@ 0x84
 80046ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046ee:	aa07      	add	r2, sp, #28
 80046f0:	9200      	str	r2, [sp, #0]
 80046f2:	0021      	movs	r1, r4
 80046f4:	003a      	movs	r2, r7
 80046f6:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <_svfiprintf_r+0x1f8>)
 80046f8:	9803      	ldr	r0, [sp, #12]
 80046fa:	f000 f87b 	bl	80047f4 <_printf_i>
 80046fe:	e7eb      	b.n	80046d8 <_svfiprintf_r+0x1c0>
 8004700:	08004e94 	.word	0x08004e94
 8004704:	08004e9a 	.word	0x08004e9a
 8004708:	08004e9e 	.word	0x08004e9e
 800470c:	00000000 	.word	0x00000000
 8004710:	08004459 	.word	0x08004459

08004714 <_printf_common>:
 8004714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004716:	0016      	movs	r6, r2
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	688a      	ldr	r2, [r1, #8]
 800471c:	690b      	ldr	r3, [r1, #16]
 800471e:	000c      	movs	r4, r1
 8004720:	9000      	str	r0, [sp, #0]
 8004722:	4293      	cmp	r3, r2
 8004724:	da00      	bge.n	8004728 <_printf_common+0x14>
 8004726:	0013      	movs	r3, r2
 8004728:	0022      	movs	r2, r4
 800472a:	6033      	str	r3, [r6, #0]
 800472c:	3243      	adds	r2, #67	@ 0x43
 800472e:	7812      	ldrb	r2, [r2, #0]
 8004730:	2a00      	cmp	r2, #0
 8004732:	d001      	beq.n	8004738 <_printf_common+0x24>
 8004734:	3301      	adds	r3, #1
 8004736:	6033      	str	r3, [r6, #0]
 8004738:	6823      	ldr	r3, [r4, #0]
 800473a:	069b      	lsls	r3, r3, #26
 800473c:	d502      	bpl.n	8004744 <_printf_common+0x30>
 800473e:	6833      	ldr	r3, [r6, #0]
 8004740:	3302      	adds	r3, #2
 8004742:	6033      	str	r3, [r6, #0]
 8004744:	6822      	ldr	r2, [r4, #0]
 8004746:	2306      	movs	r3, #6
 8004748:	0015      	movs	r5, r2
 800474a:	401d      	ands	r5, r3
 800474c:	421a      	tst	r2, r3
 800474e:	d027      	beq.n	80047a0 <_printf_common+0x8c>
 8004750:	0023      	movs	r3, r4
 8004752:	3343      	adds	r3, #67	@ 0x43
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	1e5a      	subs	r2, r3, #1
 8004758:	4193      	sbcs	r3, r2
 800475a:	6822      	ldr	r2, [r4, #0]
 800475c:	0692      	lsls	r2, r2, #26
 800475e:	d430      	bmi.n	80047c2 <_printf_common+0xae>
 8004760:	0022      	movs	r2, r4
 8004762:	9901      	ldr	r1, [sp, #4]
 8004764:	9800      	ldr	r0, [sp, #0]
 8004766:	9d08      	ldr	r5, [sp, #32]
 8004768:	3243      	adds	r2, #67	@ 0x43
 800476a:	47a8      	blx	r5
 800476c:	3001      	adds	r0, #1
 800476e:	d025      	beq.n	80047bc <_printf_common+0xa8>
 8004770:	2206      	movs	r2, #6
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	2500      	movs	r5, #0
 8004776:	4013      	ands	r3, r2
 8004778:	2b04      	cmp	r3, #4
 800477a:	d105      	bne.n	8004788 <_printf_common+0x74>
 800477c:	6833      	ldr	r3, [r6, #0]
 800477e:	68e5      	ldr	r5, [r4, #12]
 8004780:	1aed      	subs	r5, r5, r3
 8004782:	43eb      	mvns	r3, r5
 8004784:	17db      	asrs	r3, r3, #31
 8004786:	401d      	ands	r5, r3
 8004788:	68a3      	ldr	r3, [r4, #8]
 800478a:	6922      	ldr	r2, [r4, #16]
 800478c:	4293      	cmp	r3, r2
 800478e:	dd01      	ble.n	8004794 <_printf_common+0x80>
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	18ed      	adds	r5, r5, r3
 8004794:	2600      	movs	r6, #0
 8004796:	42b5      	cmp	r5, r6
 8004798:	d120      	bne.n	80047dc <_printf_common+0xc8>
 800479a:	2000      	movs	r0, #0
 800479c:	e010      	b.n	80047c0 <_printf_common+0xac>
 800479e:	3501      	adds	r5, #1
 80047a0:	68e3      	ldr	r3, [r4, #12]
 80047a2:	6832      	ldr	r2, [r6, #0]
 80047a4:	1a9b      	subs	r3, r3, r2
 80047a6:	42ab      	cmp	r3, r5
 80047a8:	ddd2      	ble.n	8004750 <_printf_common+0x3c>
 80047aa:	0022      	movs	r2, r4
 80047ac:	2301      	movs	r3, #1
 80047ae:	9901      	ldr	r1, [sp, #4]
 80047b0:	9800      	ldr	r0, [sp, #0]
 80047b2:	9f08      	ldr	r7, [sp, #32]
 80047b4:	3219      	adds	r2, #25
 80047b6:	47b8      	blx	r7
 80047b8:	3001      	adds	r0, #1
 80047ba:	d1f0      	bne.n	800479e <_printf_common+0x8a>
 80047bc:	2001      	movs	r0, #1
 80047be:	4240      	negs	r0, r0
 80047c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80047c2:	2030      	movs	r0, #48	@ 0x30
 80047c4:	18e1      	adds	r1, r4, r3
 80047c6:	3143      	adds	r1, #67	@ 0x43
 80047c8:	7008      	strb	r0, [r1, #0]
 80047ca:	0021      	movs	r1, r4
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	3145      	adds	r1, #69	@ 0x45
 80047d0:	7809      	ldrb	r1, [r1, #0]
 80047d2:	18a2      	adds	r2, r4, r2
 80047d4:	3243      	adds	r2, #67	@ 0x43
 80047d6:	3302      	adds	r3, #2
 80047d8:	7011      	strb	r1, [r2, #0]
 80047da:	e7c1      	b.n	8004760 <_printf_common+0x4c>
 80047dc:	0022      	movs	r2, r4
 80047de:	2301      	movs	r3, #1
 80047e0:	9901      	ldr	r1, [sp, #4]
 80047e2:	9800      	ldr	r0, [sp, #0]
 80047e4:	9f08      	ldr	r7, [sp, #32]
 80047e6:	321a      	adds	r2, #26
 80047e8:	47b8      	blx	r7
 80047ea:	3001      	adds	r0, #1
 80047ec:	d0e6      	beq.n	80047bc <_printf_common+0xa8>
 80047ee:	3601      	adds	r6, #1
 80047f0:	e7d1      	b.n	8004796 <_printf_common+0x82>
	...

080047f4 <_printf_i>:
 80047f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047f6:	b08b      	sub	sp, #44	@ 0x2c
 80047f8:	9206      	str	r2, [sp, #24]
 80047fa:	000a      	movs	r2, r1
 80047fc:	3243      	adds	r2, #67	@ 0x43
 80047fe:	9307      	str	r3, [sp, #28]
 8004800:	9005      	str	r0, [sp, #20]
 8004802:	9203      	str	r2, [sp, #12]
 8004804:	7e0a      	ldrb	r2, [r1, #24]
 8004806:	000c      	movs	r4, r1
 8004808:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800480a:	2a78      	cmp	r2, #120	@ 0x78
 800480c:	d809      	bhi.n	8004822 <_printf_i+0x2e>
 800480e:	2a62      	cmp	r2, #98	@ 0x62
 8004810:	d80b      	bhi.n	800482a <_printf_i+0x36>
 8004812:	2a00      	cmp	r2, #0
 8004814:	d100      	bne.n	8004818 <_printf_i+0x24>
 8004816:	e0ba      	b.n	800498e <_printf_i+0x19a>
 8004818:	497a      	ldr	r1, [pc, #488]	@ (8004a04 <_printf_i+0x210>)
 800481a:	9104      	str	r1, [sp, #16]
 800481c:	2a58      	cmp	r2, #88	@ 0x58
 800481e:	d100      	bne.n	8004822 <_printf_i+0x2e>
 8004820:	e08e      	b.n	8004940 <_printf_i+0x14c>
 8004822:	0025      	movs	r5, r4
 8004824:	3542      	adds	r5, #66	@ 0x42
 8004826:	702a      	strb	r2, [r5, #0]
 8004828:	e022      	b.n	8004870 <_printf_i+0x7c>
 800482a:	0010      	movs	r0, r2
 800482c:	3863      	subs	r0, #99	@ 0x63
 800482e:	2815      	cmp	r0, #21
 8004830:	d8f7      	bhi.n	8004822 <_printf_i+0x2e>
 8004832:	f7fb fc71 	bl	8000118 <__gnu_thumb1_case_shi>
 8004836:	0016      	.short	0x0016
 8004838:	fff6001f 	.word	0xfff6001f
 800483c:	fff6fff6 	.word	0xfff6fff6
 8004840:	001ffff6 	.word	0x001ffff6
 8004844:	fff6fff6 	.word	0xfff6fff6
 8004848:	fff6fff6 	.word	0xfff6fff6
 800484c:	0036009f 	.word	0x0036009f
 8004850:	fff6007e 	.word	0xfff6007e
 8004854:	00b0fff6 	.word	0x00b0fff6
 8004858:	0036fff6 	.word	0x0036fff6
 800485c:	fff6fff6 	.word	0xfff6fff6
 8004860:	0082      	.short	0x0082
 8004862:	0025      	movs	r5, r4
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	3542      	adds	r5, #66	@ 0x42
 8004868:	1d11      	adds	r1, r2, #4
 800486a:	6019      	str	r1, [r3, #0]
 800486c:	6813      	ldr	r3, [r2, #0]
 800486e:	702b      	strb	r3, [r5, #0]
 8004870:	2301      	movs	r3, #1
 8004872:	e09e      	b.n	80049b2 <_printf_i+0x1be>
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	6809      	ldr	r1, [r1, #0]
 8004878:	1d02      	adds	r2, r0, #4
 800487a:	060d      	lsls	r5, r1, #24
 800487c:	d50b      	bpl.n	8004896 <_printf_i+0xa2>
 800487e:	6806      	ldr	r6, [r0, #0]
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	2e00      	cmp	r6, #0
 8004884:	da03      	bge.n	800488e <_printf_i+0x9a>
 8004886:	232d      	movs	r3, #45	@ 0x2d
 8004888:	9a03      	ldr	r2, [sp, #12]
 800488a:	4276      	negs	r6, r6
 800488c:	7013      	strb	r3, [r2, #0]
 800488e:	4b5d      	ldr	r3, [pc, #372]	@ (8004a04 <_printf_i+0x210>)
 8004890:	270a      	movs	r7, #10
 8004892:	9304      	str	r3, [sp, #16]
 8004894:	e018      	b.n	80048c8 <_printf_i+0xd4>
 8004896:	6806      	ldr	r6, [r0, #0]
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	0649      	lsls	r1, r1, #25
 800489c:	d5f1      	bpl.n	8004882 <_printf_i+0x8e>
 800489e:	b236      	sxth	r6, r6
 80048a0:	e7ef      	b.n	8004882 <_printf_i+0x8e>
 80048a2:	6808      	ldr	r0, [r1, #0]
 80048a4:	6819      	ldr	r1, [r3, #0]
 80048a6:	c940      	ldmia	r1!, {r6}
 80048a8:	0605      	lsls	r5, r0, #24
 80048aa:	d402      	bmi.n	80048b2 <_printf_i+0xbe>
 80048ac:	0640      	lsls	r0, r0, #25
 80048ae:	d500      	bpl.n	80048b2 <_printf_i+0xbe>
 80048b0:	b2b6      	uxth	r6, r6
 80048b2:	6019      	str	r1, [r3, #0]
 80048b4:	4b53      	ldr	r3, [pc, #332]	@ (8004a04 <_printf_i+0x210>)
 80048b6:	270a      	movs	r7, #10
 80048b8:	9304      	str	r3, [sp, #16]
 80048ba:	2a6f      	cmp	r2, #111	@ 0x6f
 80048bc:	d100      	bne.n	80048c0 <_printf_i+0xcc>
 80048be:	3f02      	subs	r7, #2
 80048c0:	0023      	movs	r3, r4
 80048c2:	2200      	movs	r2, #0
 80048c4:	3343      	adds	r3, #67	@ 0x43
 80048c6:	701a      	strb	r2, [r3, #0]
 80048c8:	6863      	ldr	r3, [r4, #4]
 80048ca:	60a3      	str	r3, [r4, #8]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	db06      	blt.n	80048de <_printf_i+0xea>
 80048d0:	2104      	movs	r1, #4
 80048d2:	6822      	ldr	r2, [r4, #0]
 80048d4:	9d03      	ldr	r5, [sp, #12]
 80048d6:	438a      	bics	r2, r1
 80048d8:	6022      	str	r2, [r4, #0]
 80048da:	4333      	orrs	r3, r6
 80048dc:	d00c      	beq.n	80048f8 <_printf_i+0x104>
 80048de:	9d03      	ldr	r5, [sp, #12]
 80048e0:	0030      	movs	r0, r6
 80048e2:	0039      	movs	r1, r7
 80048e4:	f7fb fca8 	bl	8000238 <__aeabi_uidivmod>
 80048e8:	9b04      	ldr	r3, [sp, #16]
 80048ea:	3d01      	subs	r5, #1
 80048ec:	5c5b      	ldrb	r3, [r3, r1]
 80048ee:	702b      	strb	r3, [r5, #0]
 80048f0:	0033      	movs	r3, r6
 80048f2:	0006      	movs	r6, r0
 80048f4:	429f      	cmp	r7, r3
 80048f6:	d9f3      	bls.n	80048e0 <_printf_i+0xec>
 80048f8:	2f08      	cmp	r7, #8
 80048fa:	d109      	bne.n	8004910 <_printf_i+0x11c>
 80048fc:	6823      	ldr	r3, [r4, #0]
 80048fe:	07db      	lsls	r3, r3, #31
 8004900:	d506      	bpl.n	8004910 <_printf_i+0x11c>
 8004902:	6862      	ldr	r2, [r4, #4]
 8004904:	6923      	ldr	r3, [r4, #16]
 8004906:	429a      	cmp	r2, r3
 8004908:	dc02      	bgt.n	8004910 <_printf_i+0x11c>
 800490a:	2330      	movs	r3, #48	@ 0x30
 800490c:	3d01      	subs	r5, #1
 800490e:	702b      	strb	r3, [r5, #0]
 8004910:	9b03      	ldr	r3, [sp, #12]
 8004912:	1b5b      	subs	r3, r3, r5
 8004914:	6123      	str	r3, [r4, #16]
 8004916:	9b07      	ldr	r3, [sp, #28]
 8004918:	0021      	movs	r1, r4
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	9805      	ldr	r0, [sp, #20]
 800491e:	9b06      	ldr	r3, [sp, #24]
 8004920:	aa09      	add	r2, sp, #36	@ 0x24
 8004922:	f7ff fef7 	bl	8004714 <_printf_common>
 8004926:	3001      	adds	r0, #1
 8004928:	d148      	bne.n	80049bc <_printf_i+0x1c8>
 800492a:	2001      	movs	r0, #1
 800492c:	4240      	negs	r0, r0
 800492e:	b00b      	add	sp, #44	@ 0x2c
 8004930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004932:	2220      	movs	r2, #32
 8004934:	6809      	ldr	r1, [r1, #0]
 8004936:	430a      	orrs	r2, r1
 8004938:	6022      	str	r2, [r4, #0]
 800493a:	2278      	movs	r2, #120	@ 0x78
 800493c:	4932      	ldr	r1, [pc, #200]	@ (8004a08 <_printf_i+0x214>)
 800493e:	9104      	str	r1, [sp, #16]
 8004940:	0021      	movs	r1, r4
 8004942:	3145      	adds	r1, #69	@ 0x45
 8004944:	700a      	strb	r2, [r1, #0]
 8004946:	6819      	ldr	r1, [r3, #0]
 8004948:	6822      	ldr	r2, [r4, #0]
 800494a:	c940      	ldmia	r1!, {r6}
 800494c:	0610      	lsls	r0, r2, #24
 800494e:	d402      	bmi.n	8004956 <_printf_i+0x162>
 8004950:	0650      	lsls	r0, r2, #25
 8004952:	d500      	bpl.n	8004956 <_printf_i+0x162>
 8004954:	b2b6      	uxth	r6, r6
 8004956:	6019      	str	r1, [r3, #0]
 8004958:	07d3      	lsls	r3, r2, #31
 800495a:	d502      	bpl.n	8004962 <_printf_i+0x16e>
 800495c:	2320      	movs	r3, #32
 800495e:	4313      	orrs	r3, r2
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	2e00      	cmp	r6, #0
 8004964:	d001      	beq.n	800496a <_printf_i+0x176>
 8004966:	2710      	movs	r7, #16
 8004968:	e7aa      	b.n	80048c0 <_printf_i+0xcc>
 800496a:	2220      	movs	r2, #32
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	4393      	bics	r3, r2
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	e7f8      	b.n	8004966 <_printf_i+0x172>
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	680d      	ldr	r5, [r1, #0]
 8004978:	1d10      	adds	r0, r2, #4
 800497a:	6949      	ldr	r1, [r1, #20]
 800497c:	6018      	str	r0, [r3, #0]
 800497e:	6813      	ldr	r3, [r2, #0]
 8004980:	062e      	lsls	r6, r5, #24
 8004982:	d501      	bpl.n	8004988 <_printf_i+0x194>
 8004984:	6019      	str	r1, [r3, #0]
 8004986:	e002      	b.n	800498e <_printf_i+0x19a>
 8004988:	066d      	lsls	r5, r5, #25
 800498a:	d5fb      	bpl.n	8004984 <_printf_i+0x190>
 800498c:	8019      	strh	r1, [r3, #0]
 800498e:	2300      	movs	r3, #0
 8004990:	9d03      	ldr	r5, [sp, #12]
 8004992:	6123      	str	r3, [r4, #16]
 8004994:	e7bf      	b.n	8004916 <_printf_i+0x122>
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	1d11      	adds	r1, r2, #4
 800499a:	6019      	str	r1, [r3, #0]
 800499c:	6815      	ldr	r5, [r2, #0]
 800499e:	2100      	movs	r1, #0
 80049a0:	0028      	movs	r0, r5
 80049a2:	6862      	ldr	r2, [r4, #4]
 80049a4:	f000 f856 	bl	8004a54 <memchr>
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d001      	beq.n	80049b0 <_printf_i+0x1bc>
 80049ac:	1b40      	subs	r0, r0, r5
 80049ae:	6060      	str	r0, [r4, #4]
 80049b0:	6863      	ldr	r3, [r4, #4]
 80049b2:	6123      	str	r3, [r4, #16]
 80049b4:	2300      	movs	r3, #0
 80049b6:	9a03      	ldr	r2, [sp, #12]
 80049b8:	7013      	strb	r3, [r2, #0]
 80049ba:	e7ac      	b.n	8004916 <_printf_i+0x122>
 80049bc:	002a      	movs	r2, r5
 80049be:	6923      	ldr	r3, [r4, #16]
 80049c0:	9906      	ldr	r1, [sp, #24]
 80049c2:	9805      	ldr	r0, [sp, #20]
 80049c4:	9d07      	ldr	r5, [sp, #28]
 80049c6:	47a8      	blx	r5
 80049c8:	3001      	adds	r0, #1
 80049ca:	d0ae      	beq.n	800492a <_printf_i+0x136>
 80049cc:	6823      	ldr	r3, [r4, #0]
 80049ce:	079b      	lsls	r3, r3, #30
 80049d0:	d415      	bmi.n	80049fe <_printf_i+0x20a>
 80049d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049d4:	68e0      	ldr	r0, [r4, #12]
 80049d6:	4298      	cmp	r0, r3
 80049d8:	daa9      	bge.n	800492e <_printf_i+0x13a>
 80049da:	0018      	movs	r0, r3
 80049dc:	e7a7      	b.n	800492e <_printf_i+0x13a>
 80049de:	0022      	movs	r2, r4
 80049e0:	2301      	movs	r3, #1
 80049e2:	9906      	ldr	r1, [sp, #24]
 80049e4:	9805      	ldr	r0, [sp, #20]
 80049e6:	9e07      	ldr	r6, [sp, #28]
 80049e8:	3219      	adds	r2, #25
 80049ea:	47b0      	blx	r6
 80049ec:	3001      	adds	r0, #1
 80049ee:	d09c      	beq.n	800492a <_printf_i+0x136>
 80049f0:	3501      	adds	r5, #1
 80049f2:	68e3      	ldr	r3, [r4, #12]
 80049f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049f6:	1a9b      	subs	r3, r3, r2
 80049f8:	42ab      	cmp	r3, r5
 80049fa:	dcf0      	bgt.n	80049de <_printf_i+0x1ea>
 80049fc:	e7e9      	b.n	80049d2 <_printf_i+0x1de>
 80049fe:	2500      	movs	r5, #0
 8004a00:	e7f7      	b.n	80049f2 <_printf_i+0x1fe>
 8004a02:	46c0      	nop			@ (mov r8, r8)
 8004a04:	08004ea5 	.word	0x08004ea5
 8004a08:	08004eb6 	.word	0x08004eb6

08004a0c <memmove>:
 8004a0c:	b510      	push	{r4, lr}
 8004a0e:	4288      	cmp	r0, r1
 8004a10:	d902      	bls.n	8004a18 <memmove+0xc>
 8004a12:	188b      	adds	r3, r1, r2
 8004a14:	4298      	cmp	r0, r3
 8004a16:	d308      	bcc.n	8004a2a <memmove+0x1e>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d007      	beq.n	8004a2e <memmove+0x22>
 8004a1e:	5ccc      	ldrb	r4, [r1, r3]
 8004a20:	54c4      	strb	r4, [r0, r3]
 8004a22:	3301      	adds	r3, #1
 8004a24:	e7f9      	b.n	8004a1a <memmove+0xe>
 8004a26:	5c8b      	ldrb	r3, [r1, r2]
 8004a28:	5483      	strb	r3, [r0, r2]
 8004a2a:	3a01      	subs	r2, #1
 8004a2c:	d2fb      	bcs.n	8004a26 <memmove+0x1a>
 8004a2e:	bd10      	pop	{r4, pc}

08004a30 <_sbrk_r>:
 8004a30:	2300      	movs	r3, #0
 8004a32:	b570      	push	{r4, r5, r6, lr}
 8004a34:	4d06      	ldr	r5, [pc, #24]	@ (8004a50 <_sbrk_r+0x20>)
 8004a36:	0004      	movs	r4, r0
 8004a38:	0008      	movs	r0, r1
 8004a3a:	602b      	str	r3, [r5, #0]
 8004a3c:	f7fc fb18 	bl	8001070 <_sbrk>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d103      	bne.n	8004a4c <_sbrk_r+0x1c>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d000      	beq.n	8004a4c <_sbrk_r+0x1c>
 8004a4a:	6023      	str	r3, [r4, #0]
 8004a4c:	bd70      	pop	{r4, r5, r6, pc}
 8004a4e:	46c0      	nop			@ (mov r8, r8)
 8004a50:	20000340 	.word	0x20000340

08004a54 <memchr>:
 8004a54:	b2c9      	uxtb	r1, r1
 8004a56:	1882      	adds	r2, r0, r2
 8004a58:	4290      	cmp	r0, r2
 8004a5a:	d101      	bne.n	8004a60 <memchr+0xc>
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	4770      	bx	lr
 8004a60:	7803      	ldrb	r3, [r0, #0]
 8004a62:	428b      	cmp	r3, r1
 8004a64:	d0fb      	beq.n	8004a5e <memchr+0xa>
 8004a66:	3001      	adds	r0, #1
 8004a68:	e7f6      	b.n	8004a58 <memchr+0x4>

08004a6a <memcpy>:
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d100      	bne.n	8004a74 <memcpy+0xa>
 8004a72:	bd10      	pop	{r4, pc}
 8004a74:	5ccc      	ldrb	r4, [r1, r3]
 8004a76:	54c4      	strb	r4, [r0, r3]
 8004a78:	3301      	adds	r3, #1
 8004a7a:	e7f8      	b.n	8004a6e <memcpy+0x4>

08004a7c <_realloc_r>:
 8004a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a7e:	0006      	movs	r6, r0
 8004a80:	000c      	movs	r4, r1
 8004a82:	0015      	movs	r5, r2
 8004a84:	2900      	cmp	r1, #0
 8004a86:	d105      	bne.n	8004a94 <_realloc_r+0x18>
 8004a88:	0011      	movs	r1, r2
 8004a8a:	f7ff fc55 	bl	8004338 <_malloc_r>
 8004a8e:	0004      	movs	r4, r0
 8004a90:	0020      	movs	r0, r4
 8004a92:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a94:	2a00      	cmp	r2, #0
 8004a96:	d103      	bne.n	8004aa0 <_realloc_r+0x24>
 8004a98:	f7ff fbe2 	bl	8004260 <_free_r>
 8004a9c:	002c      	movs	r4, r5
 8004a9e:	e7f7      	b.n	8004a90 <_realloc_r+0x14>
 8004aa0:	f000 f81c 	bl	8004adc <_malloc_usable_size_r>
 8004aa4:	0007      	movs	r7, r0
 8004aa6:	4285      	cmp	r5, r0
 8004aa8:	d802      	bhi.n	8004ab0 <_realloc_r+0x34>
 8004aaa:	0843      	lsrs	r3, r0, #1
 8004aac:	42ab      	cmp	r3, r5
 8004aae:	d3ef      	bcc.n	8004a90 <_realloc_r+0x14>
 8004ab0:	0029      	movs	r1, r5
 8004ab2:	0030      	movs	r0, r6
 8004ab4:	f7ff fc40 	bl	8004338 <_malloc_r>
 8004ab8:	9001      	str	r0, [sp, #4]
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d101      	bne.n	8004ac2 <_realloc_r+0x46>
 8004abe:	9c01      	ldr	r4, [sp, #4]
 8004ac0:	e7e6      	b.n	8004a90 <_realloc_r+0x14>
 8004ac2:	002a      	movs	r2, r5
 8004ac4:	42bd      	cmp	r5, r7
 8004ac6:	d900      	bls.n	8004aca <_realloc_r+0x4e>
 8004ac8:	003a      	movs	r2, r7
 8004aca:	0021      	movs	r1, r4
 8004acc:	9801      	ldr	r0, [sp, #4]
 8004ace:	f7ff ffcc 	bl	8004a6a <memcpy>
 8004ad2:	0021      	movs	r1, r4
 8004ad4:	0030      	movs	r0, r6
 8004ad6:	f7ff fbc3 	bl	8004260 <_free_r>
 8004ada:	e7f0      	b.n	8004abe <_realloc_r+0x42>

08004adc <_malloc_usable_size_r>:
 8004adc:	1f0b      	subs	r3, r1, #4
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	1f18      	subs	r0, r3, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	da01      	bge.n	8004aea <_malloc_usable_size_r+0xe>
 8004ae6:	580b      	ldr	r3, [r1, r0]
 8004ae8:	18c0      	adds	r0, r0, r3
 8004aea:	4770      	bx	lr

08004aec <_init>:
 8004aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aee:	46c0      	nop			@ (mov r8, r8)
 8004af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004af2:	bc08      	pop	{r3}
 8004af4:	469e      	mov	lr, r3
 8004af6:	4770      	bx	lr

08004af8 <_fini>:
 8004af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004afa:	46c0      	nop			@ (mov r8, r8)
 8004afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004afe:	bc08      	pop	{r3}
 8004b00:	469e      	mov	lr, r3
 8004b02:	4770      	bx	lr
