
CWH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c38  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000438  08007cf8  08007cf8  00008cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008130  08008130  0000a05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008130  08008130  00009130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008138  08008138  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008138  08008138  00009138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800813c  0800813c  0000913c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008140  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  2000005c  0800819c  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  0800819c  0000a3c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001317d  00000000  00000000  0000a084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003165  00000000  00000000  0001d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e0  00000000  00000000  00020368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d0b  00000000  00000000  00021448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178d4  00000000  00000000  00022153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015da7  00000000  00000000  00039a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008aeeb  00000000  00000000  0004f7ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da6b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004304  00000000  00000000  000da6fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000dea00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007ce0 	.word	0x08007ce0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08007ce0 	.word	0x08007ce0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_cfrcmple>:
 8000244:	4684      	mov	ip, r0
 8000246:	0008      	movs	r0, r1
 8000248:	4661      	mov	r1, ip
 800024a:	e7ff      	b.n	800024c <__aeabi_cfcmpeq>

0800024c <__aeabi_cfcmpeq>:
 800024c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800024e:	f000 fcaf 	bl	8000bb0 <__lesf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	d401      	bmi.n	800025a <__aeabi_cfcmpeq+0xe>
 8000256:	2100      	movs	r1, #0
 8000258:	42c8      	cmn	r0, r1
 800025a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800025c <__aeabi_fcmpeq>:
 800025c:	b510      	push	{r4, lr}
 800025e:	f000 fc37 	bl	8000ad0 <__eqsf2>
 8000262:	4240      	negs	r0, r0
 8000264:	3001      	adds	r0, #1
 8000266:	bd10      	pop	{r4, pc}

08000268 <__aeabi_fcmplt>:
 8000268:	b510      	push	{r4, lr}
 800026a:	f000 fca1 	bl	8000bb0 <__lesf2>
 800026e:	2800      	cmp	r0, #0
 8000270:	db01      	blt.n	8000276 <__aeabi_fcmplt+0xe>
 8000272:	2000      	movs	r0, #0
 8000274:	bd10      	pop	{r4, pc}
 8000276:	2001      	movs	r0, #1
 8000278:	bd10      	pop	{r4, pc}
 800027a:	46c0      	nop			@ (mov r8, r8)

0800027c <__aeabi_fcmple>:
 800027c:	b510      	push	{r4, lr}
 800027e:	f000 fc97 	bl	8000bb0 <__lesf2>
 8000282:	2800      	cmp	r0, #0
 8000284:	dd01      	ble.n	800028a <__aeabi_fcmple+0xe>
 8000286:	2000      	movs	r0, #0
 8000288:	bd10      	pop	{r4, pc}
 800028a:	2001      	movs	r0, #1
 800028c:	bd10      	pop	{r4, pc}
 800028e:	46c0      	nop			@ (mov r8, r8)

08000290 <__aeabi_fcmpgt>:
 8000290:	b510      	push	{r4, lr}
 8000292:	f000 fc45 	bl	8000b20 <__gesf2>
 8000296:	2800      	cmp	r0, #0
 8000298:	dc01      	bgt.n	800029e <__aeabi_fcmpgt+0xe>
 800029a:	2000      	movs	r0, #0
 800029c:	bd10      	pop	{r4, pc}
 800029e:	2001      	movs	r0, #1
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	46c0      	nop			@ (mov r8, r8)

080002a4 <__aeabi_fcmpge>:
 80002a4:	b510      	push	{r4, lr}
 80002a6:	f000 fc3b 	bl	8000b20 <__gesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	da01      	bge.n	80002b2 <__aeabi_fcmpge+0xe>
 80002ae:	2000      	movs	r0, #0
 80002b0:	bd10      	pop	{r4, pc}
 80002b2:	2001      	movs	r0, #1
 80002b4:	bd10      	pop	{r4, pc}
 80002b6:	46c0      	nop			@ (mov r8, r8)

080002b8 <__aeabi_uldivmod>:
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d111      	bne.n	80002e0 <__aeabi_uldivmod+0x28>
 80002bc:	2a00      	cmp	r2, #0
 80002be:	d10f      	bne.n	80002e0 <__aeabi_uldivmod+0x28>
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d100      	bne.n	80002c6 <__aeabi_uldivmod+0xe>
 80002c4:	2800      	cmp	r0, #0
 80002c6:	d002      	beq.n	80002ce <__aeabi_uldivmod+0x16>
 80002c8:	2100      	movs	r1, #0
 80002ca:	43c9      	mvns	r1, r1
 80002cc:	0008      	movs	r0, r1
 80002ce:	b407      	push	{r0, r1, r2}
 80002d0:	4802      	ldr	r0, [pc, #8]	@ (80002dc <__aeabi_uldivmod+0x24>)
 80002d2:	a102      	add	r1, pc, #8	@ (adr r1, 80002dc <__aeabi_uldivmod+0x24>)
 80002d4:	1840      	adds	r0, r0, r1
 80002d6:	9002      	str	r0, [sp, #8]
 80002d8:	bd03      	pop	{r0, r1, pc}
 80002da:	46c0      	nop			@ (mov r8, r8)
 80002dc:	ffffff65 	.word	0xffffff65
 80002e0:	b403      	push	{r0, r1}
 80002e2:	4668      	mov	r0, sp
 80002e4:	b501      	push	{r0, lr}
 80002e6:	9802      	ldr	r0, [sp, #8]
 80002e8:	f000 f81e 	bl	8000328 <__udivmoddi4>
 80002ec:	9b01      	ldr	r3, [sp, #4]
 80002ee:	469e      	mov	lr, r3
 80002f0:	b002      	add	sp, #8
 80002f2:	bc0c      	pop	{r2, r3}
 80002f4:	4770      	bx	lr
 80002f6:	46c0      	nop			@ (mov r8, r8)

080002f8 <__aeabi_f2uiz>:
 80002f8:	219e      	movs	r1, #158	@ 0x9e
 80002fa:	b510      	push	{r4, lr}
 80002fc:	05c9      	lsls	r1, r1, #23
 80002fe:	1c04      	adds	r4, r0, #0
 8000300:	f7ff ffd0 	bl	80002a4 <__aeabi_fcmpge>
 8000304:	2800      	cmp	r0, #0
 8000306:	d103      	bne.n	8000310 <__aeabi_f2uiz+0x18>
 8000308:	1c20      	adds	r0, r4, #0
 800030a:	f001 f857 	bl	80013bc <__aeabi_f2iz>
 800030e:	bd10      	pop	{r4, pc}
 8000310:	219e      	movs	r1, #158	@ 0x9e
 8000312:	1c20      	adds	r0, r4, #0
 8000314:	05c9      	lsls	r1, r1, #23
 8000316:	f000 fded 	bl	8000ef4 <__aeabi_fsub>
 800031a:	f001 f84f 	bl	80013bc <__aeabi_f2iz>
 800031e:	2380      	movs	r3, #128	@ 0x80
 8000320:	061b      	lsls	r3, r3, #24
 8000322:	469c      	mov	ip, r3
 8000324:	4460      	add	r0, ip
 8000326:	e7f2      	b.n	800030e <__aeabi_f2uiz+0x16>

08000328 <__udivmoddi4>:
 8000328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800032a:	4657      	mov	r7, sl
 800032c:	464e      	mov	r6, r9
 800032e:	4645      	mov	r5, r8
 8000330:	46de      	mov	lr, fp
 8000332:	b5e0      	push	{r5, r6, r7, lr}
 8000334:	0004      	movs	r4, r0
 8000336:	000d      	movs	r5, r1
 8000338:	4692      	mov	sl, r2
 800033a:	4699      	mov	r9, r3
 800033c:	b083      	sub	sp, #12
 800033e:	428b      	cmp	r3, r1
 8000340:	d830      	bhi.n	80003a4 <__udivmoddi4+0x7c>
 8000342:	d02d      	beq.n	80003a0 <__udivmoddi4+0x78>
 8000344:	4649      	mov	r1, r9
 8000346:	4650      	mov	r0, sl
 8000348:	f001 f8bc 	bl	80014c4 <__clzdi2>
 800034c:	0029      	movs	r1, r5
 800034e:	0006      	movs	r6, r0
 8000350:	0020      	movs	r0, r4
 8000352:	f001 f8b7 	bl	80014c4 <__clzdi2>
 8000356:	1a33      	subs	r3, r6, r0
 8000358:	4698      	mov	r8, r3
 800035a:	3b20      	subs	r3, #32
 800035c:	d434      	bmi.n	80003c8 <__udivmoddi4+0xa0>
 800035e:	469b      	mov	fp, r3
 8000360:	4653      	mov	r3, sl
 8000362:	465a      	mov	r2, fp
 8000364:	4093      	lsls	r3, r2
 8000366:	4642      	mov	r2, r8
 8000368:	001f      	movs	r7, r3
 800036a:	4653      	mov	r3, sl
 800036c:	4093      	lsls	r3, r2
 800036e:	001e      	movs	r6, r3
 8000370:	42af      	cmp	r7, r5
 8000372:	d83b      	bhi.n	80003ec <__udivmoddi4+0xc4>
 8000374:	42af      	cmp	r7, r5
 8000376:	d100      	bne.n	800037a <__udivmoddi4+0x52>
 8000378:	e079      	b.n	800046e <__udivmoddi4+0x146>
 800037a:	465b      	mov	r3, fp
 800037c:	1ba4      	subs	r4, r4, r6
 800037e:	41bd      	sbcs	r5, r7
 8000380:	2b00      	cmp	r3, #0
 8000382:	da00      	bge.n	8000386 <__udivmoddi4+0x5e>
 8000384:	e076      	b.n	8000474 <__udivmoddi4+0x14c>
 8000386:	2200      	movs	r2, #0
 8000388:	2300      	movs	r3, #0
 800038a:	9200      	str	r2, [sp, #0]
 800038c:	9301      	str	r3, [sp, #4]
 800038e:	2301      	movs	r3, #1
 8000390:	465a      	mov	r2, fp
 8000392:	4093      	lsls	r3, r2
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	2301      	movs	r3, #1
 8000398:	4642      	mov	r2, r8
 800039a:	4093      	lsls	r3, r2
 800039c:	9300      	str	r3, [sp, #0]
 800039e:	e029      	b.n	80003f4 <__udivmoddi4+0xcc>
 80003a0:	4282      	cmp	r2, r0
 80003a2:	d9cf      	bls.n	8000344 <__udivmoddi4+0x1c>
 80003a4:	2200      	movs	r2, #0
 80003a6:	2300      	movs	r3, #0
 80003a8:	9200      	str	r2, [sp, #0]
 80003aa:	9301      	str	r3, [sp, #4]
 80003ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <__udivmoddi4+0x8e>
 80003b2:	601c      	str	r4, [r3, #0]
 80003b4:	605d      	str	r5, [r3, #4]
 80003b6:	9800      	ldr	r0, [sp, #0]
 80003b8:	9901      	ldr	r1, [sp, #4]
 80003ba:	b003      	add	sp, #12
 80003bc:	bcf0      	pop	{r4, r5, r6, r7}
 80003be:	46bb      	mov	fp, r7
 80003c0:	46b2      	mov	sl, r6
 80003c2:	46a9      	mov	r9, r5
 80003c4:	46a0      	mov	r8, r4
 80003c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c8:	4642      	mov	r2, r8
 80003ca:	469b      	mov	fp, r3
 80003cc:	2320      	movs	r3, #32
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	4652      	mov	r2, sl
 80003d2:	40da      	lsrs	r2, r3
 80003d4:	4641      	mov	r1, r8
 80003d6:	0013      	movs	r3, r2
 80003d8:	464a      	mov	r2, r9
 80003da:	408a      	lsls	r2, r1
 80003dc:	0017      	movs	r7, r2
 80003de:	4642      	mov	r2, r8
 80003e0:	431f      	orrs	r7, r3
 80003e2:	4653      	mov	r3, sl
 80003e4:	4093      	lsls	r3, r2
 80003e6:	001e      	movs	r6, r3
 80003e8:	42af      	cmp	r7, r5
 80003ea:	d9c3      	bls.n	8000374 <__udivmoddi4+0x4c>
 80003ec:	2200      	movs	r2, #0
 80003ee:	2300      	movs	r3, #0
 80003f0:	9200      	str	r2, [sp, #0]
 80003f2:	9301      	str	r3, [sp, #4]
 80003f4:	4643      	mov	r3, r8
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0d8      	beq.n	80003ac <__udivmoddi4+0x84>
 80003fa:	07fb      	lsls	r3, r7, #31
 80003fc:	0872      	lsrs	r2, r6, #1
 80003fe:	431a      	orrs	r2, r3
 8000400:	4646      	mov	r6, r8
 8000402:	087b      	lsrs	r3, r7, #1
 8000404:	e00e      	b.n	8000424 <__udivmoddi4+0xfc>
 8000406:	42ab      	cmp	r3, r5
 8000408:	d101      	bne.n	800040e <__udivmoddi4+0xe6>
 800040a:	42a2      	cmp	r2, r4
 800040c:	d80c      	bhi.n	8000428 <__udivmoddi4+0x100>
 800040e:	1aa4      	subs	r4, r4, r2
 8000410:	419d      	sbcs	r5, r3
 8000412:	2001      	movs	r0, #1
 8000414:	1924      	adds	r4, r4, r4
 8000416:	416d      	adcs	r5, r5
 8000418:	2100      	movs	r1, #0
 800041a:	3e01      	subs	r6, #1
 800041c:	1824      	adds	r4, r4, r0
 800041e:	414d      	adcs	r5, r1
 8000420:	2e00      	cmp	r6, #0
 8000422:	d006      	beq.n	8000432 <__udivmoddi4+0x10a>
 8000424:	42ab      	cmp	r3, r5
 8000426:	d9ee      	bls.n	8000406 <__udivmoddi4+0xde>
 8000428:	3e01      	subs	r6, #1
 800042a:	1924      	adds	r4, r4, r4
 800042c:	416d      	adcs	r5, r5
 800042e:	2e00      	cmp	r6, #0
 8000430:	d1f8      	bne.n	8000424 <__udivmoddi4+0xfc>
 8000432:	9800      	ldr	r0, [sp, #0]
 8000434:	9901      	ldr	r1, [sp, #4]
 8000436:	465b      	mov	r3, fp
 8000438:	1900      	adds	r0, r0, r4
 800043a:	4169      	adcs	r1, r5
 800043c:	2b00      	cmp	r3, #0
 800043e:	db24      	blt.n	800048a <__udivmoddi4+0x162>
 8000440:	002b      	movs	r3, r5
 8000442:	465a      	mov	r2, fp
 8000444:	4644      	mov	r4, r8
 8000446:	40d3      	lsrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	db2a      	blt.n	80004ac <__udivmoddi4+0x184>
 8000456:	0026      	movs	r6, r4
 8000458:	409e      	lsls	r6, r3
 800045a:	0033      	movs	r3, r6
 800045c:	0026      	movs	r6, r4
 800045e:	4647      	mov	r7, r8
 8000460:	40be      	lsls	r6, r7
 8000462:	0032      	movs	r2, r6
 8000464:	1a80      	subs	r0, r0, r2
 8000466:	4199      	sbcs	r1, r3
 8000468:	9000      	str	r0, [sp, #0]
 800046a:	9101      	str	r1, [sp, #4]
 800046c:	e79e      	b.n	80003ac <__udivmoddi4+0x84>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d8bc      	bhi.n	80003ec <__udivmoddi4+0xc4>
 8000472:	e782      	b.n	800037a <__udivmoddi4+0x52>
 8000474:	4642      	mov	r2, r8
 8000476:	2320      	movs	r3, #32
 8000478:	2100      	movs	r1, #0
 800047a:	1a9b      	subs	r3, r3, r2
 800047c:	2200      	movs	r2, #0
 800047e:	9100      	str	r1, [sp, #0]
 8000480:	9201      	str	r2, [sp, #4]
 8000482:	2201      	movs	r2, #1
 8000484:	40da      	lsrs	r2, r3
 8000486:	9201      	str	r2, [sp, #4]
 8000488:	e785      	b.n	8000396 <__udivmoddi4+0x6e>
 800048a:	4642      	mov	r2, r8
 800048c:	2320      	movs	r3, #32
 800048e:	1a9b      	subs	r3, r3, r2
 8000490:	002a      	movs	r2, r5
 8000492:	4646      	mov	r6, r8
 8000494:	409a      	lsls	r2, r3
 8000496:	0023      	movs	r3, r4
 8000498:	40f3      	lsrs	r3, r6
 800049a:	4644      	mov	r4, r8
 800049c:	4313      	orrs	r3, r2
 800049e:	002a      	movs	r2, r5
 80004a0:	40e2      	lsrs	r2, r4
 80004a2:	001c      	movs	r4, r3
 80004a4:	465b      	mov	r3, fp
 80004a6:	0015      	movs	r5, r2
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	dad4      	bge.n	8000456 <__udivmoddi4+0x12e>
 80004ac:	4642      	mov	r2, r8
 80004ae:	002f      	movs	r7, r5
 80004b0:	2320      	movs	r3, #32
 80004b2:	0026      	movs	r6, r4
 80004b4:	4097      	lsls	r7, r2
 80004b6:	1a9b      	subs	r3, r3, r2
 80004b8:	40de      	lsrs	r6, r3
 80004ba:	003b      	movs	r3, r7
 80004bc:	4333      	orrs	r3, r6
 80004be:	e7cd      	b.n	800045c <__udivmoddi4+0x134>

080004c0 <__aeabi_fadd>:
 80004c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004c2:	024b      	lsls	r3, r1, #9
 80004c4:	0a5a      	lsrs	r2, r3, #9
 80004c6:	4694      	mov	ip, r2
 80004c8:	004a      	lsls	r2, r1, #1
 80004ca:	0fc9      	lsrs	r1, r1, #31
 80004cc:	46ce      	mov	lr, r9
 80004ce:	4647      	mov	r7, r8
 80004d0:	4689      	mov	r9, r1
 80004d2:	0045      	lsls	r5, r0, #1
 80004d4:	0246      	lsls	r6, r0, #9
 80004d6:	0e2d      	lsrs	r5, r5, #24
 80004d8:	0e12      	lsrs	r2, r2, #24
 80004da:	b580      	push	{r7, lr}
 80004dc:	0999      	lsrs	r1, r3, #6
 80004de:	0a77      	lsrs	r7, r6, #9
 80004e0:	0fc4      	lsrs	r4, r0, #31
 80004e2:	09b6      	lsrs	r6, r6, #6
 80004e4:	1aab      	subs	r3, r5, r2
 80004e6:	454c      	cmp	r4, r9
 80004e8:	d020      	beq.n	800052c <__aeabi_fadd+0x6c>
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	dd0c      	ble.n	8000508 <__aeabi_fadd+0x48>
 80004ee:	2a00      	cmp	r2, #0
 80004f0:	d134      	bne.n	800055c <__aeabi_fadd+0x9c>
 80004f2:	2900      	cmp	r1, #0
 80004f4:	d02a      	beq.n	800054c <__aeabi_fadd+0x8c>
 80004f6:	1e5a      	subs	r2, r3, #1
 80004f8:	2b01      	cmp	r3, #1
 80004fa:	d100      	bne.n	80004fe <__aeabi_fadd+0x3e>
 80004fc:	e08f      	b.n	800061e <__aeabi_fadd+0x15e>
 80004fe:	2bff      	cmp	r3, #255	@ 0xff
 8000500:	d100      	bne.n	8000504 <__aeabi_fadd+0x44>
 8000502:	e0cd      	b.n	80006a0 <__aeabi_fadd+0x1e0>
 8000504:	0013      	movs	r3, r2
 8000506:	e02f      	b.n	8000568 <__aeabi_fadd+0xa8>
 8000508:	2b00      	cmp	r3, #0
 800050a:	d060      	beq.n	80005ce <__aeabi_fadd+0x10e>
 800050c:	1b53      	subs	r3, r2, r5
 800050e:	2d00      	cmp	r5, #0
 8000510:	d000      	beq.n	8000514 <__aeabi_fadd+0x54>
 8000512:	e0ee      	b.n	80006f2 <__aeabi_fadd+0x232>
 8000514:	2e00      	cmp	r6, #0
 8000516:	d100      	bne.n	800051a <__aeabi_fadd+0x5a>
 8000518:	e13e      	b.n	8000798 <__aeabi_fadd+0x2d8>
 800051a:	1e5c      	subs	r4, r3, #1
 800051c:	2b01      	cmp	r3, #1
 800051e:	d100      	bne.n	8000522 <__aeabi_fadd+0x62>
 8000520:	e16b      	b.n	80007fa <__aeabi_fadd+0x33a>
 8000522:	2bff      	cmp	r3, #255	@ 0xff
 8000524:	d100      	bne.n	8000528 <__aeabi_fadd+0x68>
 8000526:	e0b9      	b.n	800069c <__aeabi_fadd+0x1dc>
 8000528:	0023      	movs	r3, r4
 800052a:	e0e7      	b.n	80006fc <__aeabi_fadd+0x23c>
 800052c:	2b00      	cmp	r3, #0
 800052e:	dc00      	bgt.n	8000532 <__aeabi_fadd+0x72>
 8000530:	e0a4      	b.n	800067c <__aeabi_fadd+0x1bc>
 8000532:	2a00      	cmp	r2, #0
 8000534:	d069      	beq.n	800060a <__aeabi_fadd+0x14a>
 8000536:	2dff      	cmp	r5, #255	@ 0xff
 8000538:	d100      	bne.n	800053c <__aeabi_fadd+0x7c>
 800053a:	e0b1      	b.n	80006a0 <__aeabi_fadd+0x1e0>
 800053c:	2280      	movs	r2, #128	@ 0x80
 800053e:	04d2      	lsls	r2, r2, #19
 8000540:	4311      	orrs	r1, r2
 8000542:	2b1b      	cmp	r3, #27
 8000544:	dc00      	bgt.n	8000548 <__aeabi_fadd+0x88>
 8000546:	e0e9      	b.n	800071c <__aeabi_fadd+0x25c>
 8000548:	002b      	movs	r3, r5
 800054a:	3605      	adds	r6, #5
 800054c:	08f7      	lsrs	r7, r6, #3
 800054e:	2bff      	cmp	r3, #255	@ 0xff
 8000550:	d100      	bne.n	8000554 <__aeabi_fadd+0x94>
 8000552:	e0a5      	b.n	80006a0 <__aeabi_fadd+0x1e0>
 8000554:	027a      	lsls	r2, r7, #9
 8000556:	0a52      	lsrs	r2, r2, #9
 8000558:	b2d8      	uxtb	r0, r3
 800055a:	e030      	b.n	80005be <__aeabi_fadd+0xfe>
 800055c:	2dff      	cmp	r5, #255	@ 0xff
 800055e:	d100      	bne.n	8000562 <__aeabi_fadd+0xa2>
 8000560:	e09e      	b.n	80006a0 <__aeabi_fadd+0x1e0>
 8000562:	2280      	movs	r2, #128	@ 0x80
 8000564:	04d2      	lsls	r2, r2, #19
 8000566:	4311      	orrs	r1, r2
 8000568:	2001      	movs	r0, #1
 800056a:	2b1b      	cmp	r3, #27
 800056c:	dc08      	bgt.n	8000580 <__aeabi_fadd+0xc0>
 800056e:	0008      	movs	r0, r1
 8000570:	2220      	movs	r2, #32
 8000572:	40d8      	lsrs	r0, r3
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	4099      	lsls	r1, r3
 8000578:	000b      	movs	r3, r1
 800057a:	1e5a      	subs	r2, r3, #1
 800057c:	4193      	sbcs	r3, r2
 800057e:	4318      	orrs	r0, r3
 8000580:	1a36      	subs	r6, r6, r0
 8000582:	0173      	lsls	r3, r6, #5
 8000584:	d400      	bmi.n	8000588 <__aeabi_fadd+0xc8>
 8000586:	e071      	b.n	800066c <__aeabi_fadd+0x1ac>
 8000588:	01b6      	lsls	r6, r6, #6
 800058a:	09b7      	lsrs	r7, r6, #6
 800058c:	0038      	movs	r0, r7
 800058e:	f000 ff7b 	bl	8001488 <__clzsi2>
 8000592:	003b      	movs	r3, r7
 8000594:	3805      	subs	r0, #5
 8000596:	4083      	lsls	r3, r0
 8000598:	4285      	cmp	r5, r0
 800059a:	dd4d      	ble.n	8000638 <__aeabi_fadd+0x178>
 800059c:	4eb4      	ldr	r6, [pc, #720]	@ (8000870 <__aeabi_fadd+0x3b0>)
 800059e:	1a2d      	subs	r5, r5, r0
 80005a0:	401e      	ands	r6, r3
 80005a2:	075a      	lsls	r2, r3, #29
 80005a4:	d068      	beq.n	8000678 <__aeabi_fadd+0x1b8>
 80005a6:	220f      	movs	r2, #15
 80005a8:	4013      	ands	r3, r2
 80005aa:	2b04      	cmp	r3, #4
 80005ac:	d064      	beq.n	8000678 <__aeabi_fadd+0x1b8>
 80005ae:	3604      	adds	r6, #4
 80005b0:	0173      	lsls	r3, r6, #5
 80005b2:	d561      	bpl.n	8000678 <__aeabi_fadd+0x1b8>
 80005b4:	1c68      	adds	r0, r5, #1
 80005b6:	2dfe      	cmp	r5, #254	@ 0xfe
 80005b8:	d154      	bne.n	8000664 <__aeabi_fadd+0x1a4>
 80005ba:	20ff      	movs	r0, #255	@ 0xff
 80005bc:	2200      	movs	r2, #0
 80005be:	05c0      	lsls	r0, r0, #23
 80005c0:	4310      	orrs	r0, r2
 80005c2:	07e4      	lsls	r4, r4, #31
 80005c4:	4320      	orrs	r0, r4
 80005c6:	bcc0      	pop	{r6, r7}
 80005c8:	46b9      	mov	r9, r7
 80005ca:	46b0      	mov	r8, r6
 80005cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80005ce:	22fe      	movs	r2, #254	@ 0xfe
 80005d0:	4690      	mov	r8, r2
 80005d2:	1c68      	adds	r0, r5, #1
 80005d4:	0002      	movs	r2, r0
 80005d6:	4640      	mov	r0, r8
 80005d8:	4210      	tst	r0, r2
 80005da:	d16b      	bne.n	80006b4 <__aeabi_fadd+0x1f4>
 80005dc:	2d00      	cmp	r5, #0
 80005de:	d000      	beq.n	80005e2 <__aeabi_fadd+0x122>
 80005e0:	e0dd      	b.n	800079e <__aeabi_fadd+0x2de>
 80005e2:	2e00      	cmp	r6, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fadd+0x128>
 80005e6:	e102      	b.n	80007ee <__aeabi_fadd+0x32e>
 80005e8:	2900      	cmp	r1, #0
 80005ea:	d0b3      	beq.n	8000554 <__aeabi_fadd+0x94>
 80005ec:	2280      	movs	r2, #128	@ 0x80
 80005ee:	1a77      	subs	r7, r6, r1
 80005f0:	04d2      	lsls	r2, r2, #19
 80005f2:	4217      	tst	r7, r2
 80005f4:	d100      	bne.n	80005f8 <__aeabi_fadd+0x138>
 80005f6:	e136      	b.n	8000866 <__aeabi_fadd+0x3a6>
 80005f8:	464c      	mov	r4, r9
 80005fa:	1b8e      	subs	r6, r1, r6
 80005fc:	d061      	beq.n	80006c2 <__aeabi_fadd+0x202>
 80005fe:	2001      	movs	r0, #1
 8000600:	4216      	tst	r6, r2
 8000602:	d130      	bne.n	8000666 <__aeabi_fadd+0x1a6>
 8000604:	2300      	movs	r3, #0
 8000606:	08f7      	lsrs	r7, r6, #3
 8000608:	e7a4      	b.n	8000554 <__aeabi_fadd+0x94>
 800060a:	2900      	cmp	r1, #0
 800060c:	d09e      	beq.n	800054c <__aeabi_fadd+0x8c>
 800060e:	1e5a      	subs	r2, r3, #1
 8000610:	2b01      	cmp	r3, #1
 8000612:	d100      	bne.n	8000616 <__aeabi_fadd+0x156>
 8000614:	e0ca      	b.n	80007ac <__aeabi_fadd+0x2ec>
 8000616:	2bff      	cmp	r3, #255	@ 0xff
 8000618:	d042      	beq.n	80006a0 <__aeabi_fadd+0x1e0>
 800061a:	0013      	movs	r3, r2
 800061c:	e791      	b.n	8000542 <__aeabi_fadd+0x82>
 800061e:	1a71      	subs	r1, r6, r1
 8000620:	014b      	lsls	r3, r1, #5
 8000622:	d400      	bmi.n	8000626 <__aeabi_fadd+0x166>
 8000624:	e0d1      	b.n	80007ca <__aeabi_fadd+0x30a>
 8000626:	018f      	lsls	r7, r1, #6
 8000628:	09bf      	lsrs	r7, r7, #6
 800062a:	0038      	movs	r0, r7
 800062c:	f000 ff2c 	bl	8001488 <__clzsi2>
 8000630:	003b      	movs	r3, r7
 8000632:	3805      	subs	r0, #5
 8000634:	4083      	lsls	r3, r0
 8000636:	2501      	movs	r5, #1
 8000638:	2220      	movs	r2, #32
 800063a:	1b40      	subs	r0, r0, r5
 800063c:	3001      	adds	r0, #1
 800063e:	1a12      	subs	r2, r2, r0
 8000640:	001e      	movs	r6, r3
 8000642:	4093      	lsls	r3, r2
 8000644:	40c6      	lsrs	r6, r0
 8000646:	1e5a      	subs	r2, r3, #1
 8000648:	4193      	sbcs	r3, r2
 800064a:	431e      	orrs	r6, r3
 800064c:	d039      	beq.n	80006c2 <__aeabi_fadd+0x202>
 800064e:	0773      	lsls	r3, r6, #29
 8000650:	d100      	bne.n	8000654 <__aeabi_fadd+0x194>
 8000652:	e11b      	b.n	800088c <__aeabi_fadd+0x3cc>
 8000654:	230f      	movs	r3, #15
 8000656:	2500      	movs	r5, #0
 8000658:	4033      	ands	r3, r6
 800065a:	2b04      	cmp	r3, #4
 800065c:	d1a7      	bne.n	80005ae <__aeabi_fadd+0xee>
 800065e:	2001      	movs	r0, #1
 8000660:	0172      	lsls	r2, r6, #5
 8000662:	d57c      	bpl.n	800075e <__aeabi_fadd+0x29e>
 8000664:	b2c0      	uxtb	r0, r0
 8000666:	01b2      	lsls	r2, r6, #6
 8000668:	0a52      	lsrs	r2, r2, #9
 800066a:	e7a8      	b.n	80005be <__aeabi_fadd+0xfe>
 800066c:	0773      	lsls	r3, r6, #29
 800066e:	d003      	beq.n	8000678 <__aeabi_fadd+0x1b8>
 8000670:	230f      	movs	r3, #15
 8000672:	4033      	ands	r3, r6
 8000674:	2b04      	cmp	r3, #4
 8000676:	d19a      	bne.n	80005ae <__aeabi_fadd+0xee>
 8000678:	002b      	movs	r3, r5
 800067a:	e767      	b.n	800054c <__aeabi_fadd+0x8c>
 800067c:	2b00      	cmp	r3, #0
 800067e:	d023      	beq.n	80006c8 <__aeabi_fadd+0x208>
 8000680:	1b53      	subs	r3, r2, r5
 8000682:	2d00      	cmp	r5, #0
 8000684:	d17b      	bne.n	800077e <__aeabi_fadd+0x2be>
 8000686:	2e00      	cmp	r6, #0
 8000688:	d100      	bne.n	800068c <__aeabi_fadd+0x1cc>
 800068a:	e086      	b.n	800079a <__aeabi_fadd+0x2da>
 800068c:	1e5d      	subs	r5, r3, #1
 800068e:	2b01      	cmp	r3, #1
 8000690:	d100      	bne.n	8000694 <__aeabi_fadd+0x1d4>
 8000692:	e08b      	b.n	80007ac <__aeabi_fadd+0x2ec>
 8000694:	2bff      	cmp	r3, #255	@ 0xff
 8000696:	d002      	beq.n	800069e <__aeabi_fadd+0x1de>
 8000698:	002b      	movs	r3, r5
 800069a:	e075      	b.n	8000788 <__aeabi_fadd+0x2c8>
 800069c:	464c      	mov	r4, r9
 800069e:	4667      	mov	r7, ip
 80006a0:	2f00      	cmp	r7, #0
 80006a2:	d100      	bne.n	80006a6 <__aeabi_fadd+0x1e6>
 80006a4:	e789      	b.n	80005ba <__aeabi_fadd+0xfa>
 80006a6:	2280      	movs	r2, #128	@ 0x80
 80006a8:	03d2      	lsls	r2, r2, #15
 80006aa:	433a      	orrs	r2, r7
 80006ac:	0252      	lsls	r2, r2, #9
 80006ae:	20ff      	movs	r0, #255	@ 0xff
 80006b0:	0a52      	lsrs	r2, r2, #9
 80006b2:	e784      	b.n	80005be <__aeabi_fadd+0xfe>
 80006b4:	1a77      	subs	r7, r6, r1
 80006b6:	017b      	lsls	r3, r7, #5
 80006b8:	d46b      	bmi.n	8000792 <__aeabi_fadd+0x2d2>
 80006ba:	2f00      	cmp	r7, #0
 80006bc:	d000      	beq.n	80006c0 <__aeabi_fadd+0x200>
 80006be:	e765      	b.n	800058c <__aeabi_fadd+0xcc>
 80006c0:	2400      	movs	r4, #0
 80006c2:	2000      	movs	r0, #0
 80006c4:	2200      	movs	r2, #0
 80006c6:	e77a      	b.n	80005be <__aeabi_fadd+0xfe>
 80006c8:	22fe      	movs	r2, #254	@ 0xfe
 80006ca:	1c6b      	adds	r3, r5, #1
 80006cc:	421a      	tst	r2, r3
 80006ce:	d149      	bne.n	8000764 <__aeabi_fadd+0x2a4>
 80006d0:	2d00      	cmp	r5, #0
 80006d2:	d000      	beq.n	80006d6 <__aeabi_fadd+0x216>
 80006d4:	e09f      	b.n	8000816 <__aeabi_fadd+0x356>
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d100      	bne.n	80006dc <__aeabi_fadd+0x21c>
 80006da:	e0ba      	b.n	8000852 <__aeabi_fadd+0x392>
 80006dc:	2900      	cmp	r1, #0
 80006de:	d100      	bne.n	80006e2 <__aeabi_fadd+0x222>
 80006e0:	e0cf      	b.n	8000882 <__aeabi_fadd+0x3c2>
 80006e2:	1872      	adds	r2, r6, r1
 80006e4:	0153      	lsls	r3, r2, #5
 80006e6:	d400      	bmi.n	80006ea <__aeabi_fadd+0x22a>
 80006e8:	e0cd      	b.n	8000886 <__aeabi_fadd+0x3c6>
 80006ea:	0192      	lsls	r2, r2, #6
 80006ec:	2001      	movs	r0, #1
 80006ee:	0a52      	lsrs	r2, r2, #9
 80006f0:	e765      	b.n	80005be <__aeabi_fadd+0xfe>
 80006f2:	2aff      	cmp	r2, #255	@ 0xff
 80006f4:	d0d2      	beq.n	800069c <__aeabi_fadd+0x1dc>
 80006f6:	2080      	movs	r0, #128	@ 0x80
 80006f8:	04c0      	lsls	r0, r0, #19
 80006fa:	4306      	orrs	r6, r0
 80006fc:	2001      	movs	r0, #1
 80006fe:	2b1b      	cmp	r3, #27
 8000700:	dc08      	bgt.n	8000714 <__aeabi_fadd+0x254>
 8000702:	0030      	movs	r0, r6
 8000704:	2420      	movs	r4, #32
 8000706:	40d8      	lsrs	r0, r3
 8000708:	1ae3      	subs	r3, r4, r3
 800070a:	409e      	lsls	r6, r3
 800070c:	0033      	movs	r3, r6
 800070e:	1e5c      	subs	r4, r3, #1
 8000710:	41a3      	sbcs	r3, r4
 8000712:	4318      	orrs	r0, r3
 8000714:	464c      	mov	r4, r9
 8000716:	0015      	movs	r5, r2
 8000718:	1a0e      	subs	r6, r1, r0
 800071a:	e732      	b.n	8000582 <__aeabi_fadd+0xc2>
 800071c:	0008      	movs	r0, r1
 800071e:	2220      	movs	r2, #32
 8000720:	40d8      	lsrs	r0, r3
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	4099      	lsls	r1, r3
 8000726:	000b      	movs	r3, r1
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	4193      	sbcs	r3, r2
 800072c:	4303      	orrs	r3, r0
 800072e:	18f6      	adds	r6, r6, r3
 8000730:	0173      	lsls	r3, r6, #5
 8000732:	d59b      	bpl.n	800066c <__aeabi_fadd+0x1ac>
 8000734:	3501      	adds	r5, #1
 8000736:	2dff      	cmp	r5, #255	@ 0xff
 8000738:	d100      	bne.n	800073c <__aeabi_fadd+0x27c>
 800073a:	e73e      	b.n	80005ba <__aeabi_fadd+0xfa>
 800073c:	2301      	movs	r3, #1
 800073e:	494d      	ldr	r1, [pc, #308]	@ (8000874 <__aeabi_fadd+0x3b4>)
 8000740:	0872      	lsrs	r2, r6, #1
 8000742:	4033      	ands	r3, r6
 8000744:	400a      	ands	r2, r1
 8000746:	431a      	orrs	r2, r3
 8000748:	0016      	movs	r6, r2
 800074a:	0753      	lsls	r3, r2, #29
 800074c:	d004      	beq.n	8000758 <__aeabi_fadd+0x298>
 800074e:	230f      	movs	r3, #15
 8000750:	4013      	ands	r3, r2
 8000752:	2b04      	cmp	r3, #4
 8000754:	d000      	beq.n	8000758 <__aeabi_fadd+0x298>
 8000756:	e72a      	b.n	80005ae <__aeabi_fadd+0xee>
 8000758:	0173      	lsls	r3, r6, #5
 800075a:	d500      	bpl.n	800075e <__aeabi_fadd+0x29e>
 800075c:	e72a      	b.n	80005b4 <__aeabi_fadd+0xf4>
 800075e:	002b      	movs	r3, r5
 8000760:	08f7      	lsrs	r7, r6, #3
 8000762:	e6f7      	b.n	8000554 <__aeabi_fadd+0x94>
 8000764:	2bff      	cmp	r3, #255	@ 0xff
 8000766:	d100      	bne.n	800076a <__aeabi_fadd+0x2aa>
 8000768:	e727      	b.n	80005ba <__aeabi_fadd+0xfa>
 800076a:	1871      	adds	r1, r6, r1
 800076c:	0849      	lsrs	r1, r1, #1
 800076e:	074a      	lsls	r2, r1, #29
 8000770:	d02f      	beq.n	80007d2 <__aeabi_fadd+0x312>
 8000772:	220f      	movs	r2, #15
 8000774:	400a      	ands	r2, r1
 8000776:	2a04      	cmp	r2, #4
 8000778:	d02b      	beq.n	80007d2 <__aeabi_fadd+0x312>
 800077a:	1d0e      	adds	r6, r1, #4
 800077c:	e6e6      	b.n	800054c <__aeabi_fadd+0x8c>
 800077e:	2aff      	cmp	r2, #255	@ 0xff
 8000780:	d08d      	beq.n	800069e <__aeabi_fadd+0x1de>
 8000782:	2080      	movs	r0, #128	@ 0x80
 8000784:	04c0      	lsls	r0, r0, #19
 8000786:	4306      	orrs	r6, r0
 8000788:	2b1b      	cmp	r3, #27
 800078a:	dd24      	ble.n	80007d6 <__aeabi_fadd+0x316>
 800078c:	0013      	movs	r3, r2
 800078e:	1d4e      	adds	r6, r1, #5
 8000790:	e6dc      	b.n	800054c <__aeabi_fadd+0x8c>
 8000792:	464c      	mov	r4, r9
 8000794:	1b8f      	subs	r7, r1, r6
 8000796:	e6f9      	b.n	800058c <__aeabi_fadd+0xcc>
 8000798:	464c      	mov	r4, r9
 800079a:	000e      	movs	r6, r1
 800079c:	e6d6      	b.n	800054c <__aeabi_fadd+0x8c>
 800079e:	2e00      	cmp	r6, #0
 80007a0:	d149      	bne.n	8000836 <__aeabi_fadd+0x376>
 80007a2:	2900      	cmp	r1, #0
 80007a4:	d068      	beq.n	8000878 <__aeabi_fadd+0x3b8>
 80007a6:	4667      	mov	r7, ip
 80007a8:	464c      	mov	r4, r9
 80007aa:	e77c      	b.n	80006a6 <__aeabi_fadd+0x1e6>
 80007ac:	1870      	adds	r0, r6, r1
 80007ae:	0143      	lsls	r3, r0, #5
 80007b0:	d574      	bpl.n	800089c <__aeabi_fadd+0x3dc>
 80007b2:	4930      	ldr	r1, [pc, #192]	@ (8000874 <__aeabi_fadd+0x3b4>)
 80007b4:	0840      	lsrs	r0, r0, #1
 80007b6:	4001      	ands	r1, r0
 80007b8:	0743      	lsls	r3, r0, #29
 80007ba:	d009      	beq.n	80007d0 <__aeabi_fadd+0x310>
 80007bc:	230f      	movs	r3, #15
 80007be:	4003      	ands	r3, r0
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d005      	beq.n	80007d0 <__aeabi_fadd+0x310>
 80007c4:	2302      	movs	r3, #2
 80007c6:	1d0e      	adds	r6, r1, #4
 80007c8:	e6c0      	b.n	800054c <__aeabi_fadd+0x8c>
 80007ca:	2301      	movs	r3, #1
 80007cc:	08cf      	lsrs	r7, r1, #3
 80007ce:	e6c1      	b.n	8000554 <__aeabi_fadd+0x94>
 80007d0:	2302      	movs	r3, #2
 80007d2:	08cf      	lsrs	r7, r1, #3
 80007d4:	e6be      	b.n	8000554 <__aeabi_fadd+0x94>
 80007d6:	2520      	movs	r5, #32
 80007d8:	0030      	movs	r0, r6
 80007da:	40d8      	lsrs	r0, r3
 80007dc:	1aeb      	subs	r3, r5, r3
 80007de:	409e      	lsls	r6, r3
 80007e0:	0033      	movs	r3, r6
 80007e2:	1e5d      	subs	r5, r3, #1
 80007e4:	41ab      	sbcs	r3, r5
 80007e6:	4303      	orrs	r3, r0
 80007e8:	0015      	movs	r5, r2
 80007ea:	185e      	adds	r6, r3, r1
 80007ec:	e7a0      	b.n	8000730 <__aeabi_fadd+0x270>
 80007ee:	2900      	cmp	r1, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x334>
 80007f2:	e765      	b.n	80006c0 <__aeabi_fadd+0x200>
 80007f4:	464c      	mov	r4, r9
 80007f6:	4667      	mov	r7, ip
 80007f8:	e6ac      	b.n	8000554 <__aeabi_fadd+0x94>
 80007fa:	1b8f      	subs	r7, r1, r6
 80007fc:	017b      	lsls	r3, r7, #5
 80007fe:	d52e      	bpl.n	800085e <__aeabi_fadd+0x39e>
 8000800:	01bf      	lsls	r7, r7, #6
 8000802:	09bf      	lsrs	r7, r7, #6
 8000804:	0038      	movs	r0, r7
 8000806:	f000 fe3f 	bl	8001488 <__clzsi2>
 800080a:	003b      	movs	r3, r7
 800080c:	3805      	subs	r0, #5
 800080e:	4083      	lsls	r3, r0
 8000810:	464c      	mov	r4, r9
 8000812:	3501      	adds	r5, #1
 8000814:	e710      	b.n	8000638 <__aeabi_fadd+0x178>
 8000816:	2e00      	cmp	r6, #0
 8000818:	d100      	bne.n	800081c <__aeabi_fadd+0x35c>
 800081a:	e740      	b.n	800069e <__aeabi_fadd+0x1de>
 800081c:	2900      	cmp	r1, #0
 800081e:	d100      	bne.n	8000822 <__aeabi_fadd+0x362>
 8000820:	e741      	b.n	80006a6 <__aeabi_fadd+0x1e6>
 8000822:	2380      	movs	r3, #128	@ 0x80
 8000824:	03db      	lsls	r3, r3, #15
 8000826:	429f      	cmp	r7, r3
 8000828:	d200      	bcs.n	800082c <__aeabi_fadd+0x36c>
 800082a:	e73c      	b.n	80006a6 <__aeabi_fadd+0x1e6>
 800082c:	459c      	cmp	ip, r3
 800082e:	d300      	bcc.n	8000832 <__aeabi_fadd+0x372>
 8000830:	e739      	b.n	80006a6 <__aeabi_fadd+0x1e6>
 8000832:	4667      	mov	r7, ip
 8000834:	e737      	b.n	80006a6 <__aeabi_fadd+0x1e6>
 8000836:	2900      	cmp	r1, #0
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x37c>
 800083a:	e734      	b.n	80006a6 <__aeabi_fadd+0x1e6>
 800083c:	2380      	movs	r3, #128	@ 0x80
 800083e:	03db      	lsls	r3, r3, #15
 8000840:	429f      	cmp	r7, r3
 8000842:	d200      	bcs.n	8000846 <__aeabi_fadd+0x386>
 8000844:	e72f      	b.n	80006a6 <__aeabi_fadd+0x1e6>
 8000846:	459c      	cmp	ip, r3
 8000848:	d300      	bcc.n	800084c <__aeabi_fadd+0x38c>
 800084a:	e72c      	b.n	80006a6 <__aeabi_fadd+0x1e6>
 800084c:	464c      	mov	r4, r9
 800084e:	4667      	mov	r7, ip
 8000850:	e729      	b.n	80006a6 <__aeabi_fadd+0x1e6>
 8000852:	2900      	cmp	r1, #0
 8000854:	d100      	bne.n	8000858 <__aeabi_fadd+0x398>
 8000856:	e734      	b.n	80006c2 <__aeabi_fadd+0x202>
 8000858:	2300      	movs	r3, #0
 800085a:	08cf      	lsrs	r7, r1, #3
 800085c:	e67a      	b.n	8000554 <__aeabi_fadd+0x94>
 800085e:	464c      	mov	r4, r9
 8000860:	2301      	movs	r3, #1
 8000862:	08ff      	lsrs	r7, r7, #3
 8000864:	e676      	b.n	8000554 <__aeabi_fadd+0x94>
 8000866:	2f00      	cmp	r7, #0
 8000868:	d100      	bne.n	800086c <__aeabi_fadd+0x3ac>
 800086a:	e729      	b.n	80006c0 <__aeabi_fadd+0x200>
 800086c:	08ff      	lsrs	r7, r7, #3
 800086e:	e671      	b.n	8000554 <__aeabi_fadd+0x94>
 8000870:	fbffffff 	.word	0xfbffffff
 8000874:	7dffffff 	.word	0x7dffffff
 8000878:	2280      	movs	r2, #128	@ 0x80
 800087a:	2400      	movs	r4, #0
 800087c:	20ff      	movs	r0, #255	@ 0xff
 800087e:	03d2      	lsls	r2, r2, #15
 8000880:	e69d      	b.n	80005be <__aeabi_fadd+0xfe>
 8000882:	2300      	movs	r3, #0
 8000884:	e666      	b.n	8000554 <__aeabi_fadd+0x94>
 8000886:	2300      	movs	r3, #0
 8000888:	08d7      	lsrs	r7, r2, #3
 800088a:	e663      	b.n	8000554 <__aeabi_fadd+0x94>
 800088c:	2001      	movs	r0, #1
 800088e:	0172      	lsls	r2, r6, #5
 8000890:	d500      	bpl.n	8000894 <__aeabi_fadd+0x3d4>
 8000892:	e6e7      	b.n	8000664 <__aeabi_fadd+0x1a4>
 8000894:	0031      	movs	r1, r6
 8000896:	2300      	movs	r3, #0
 8000898:	08cf      	lsrs	r7, r1, #3
 800089a:	e65b      	b.n	8000554 <__aeabi_fadd+0x94>
 800089c:	2301      	movs	r3, #1
 800089e:	08c7      	lsrs	r7, r0, #3
 80008a0:	e658      	b.n	8000554 <__aeabi_fadd+0x94>
 80008a2:	46c0      	nop			@ (mov r8, r8)

080008a4 <__aeabi_fdiv>:
 80008a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008a6:	4646      	mov	r6, r8
 80008a8:	464f      	mov	r7, r9
 80008aa:	46d6      	mov	lr, sl
 80008ac:	0245      	lsls	r5, r0, #9
 80008ae:	b5c0      	push	{r6, r7, lr}
 80008b0:	0fc3      	lsrs	r3, r0, #31
 80008b2:	0047      	lsls	r7, r0, #1
 80008b4:	4698      	mov	r8, r3
 80008b6:	1c0e      	adds	r6, r1, #0
 80008b8:	0a6d      	lsrs	r5, r5, #9
 80008ba:	0e3f      	lsrs	r7, r7, #24
 80008bc:	d05b      	beq.n	8000976 <__aeabi_fdiv+0xd2>
 80008be:	2fff      	cmp	r7, #255	@ 0xff
 80008c0:	d021      	beq.n	8000906 <__aeabi_fdiv+0x62>
 80008c2:	2380      	movs	r3, #128	@ 0x80
 80008c4:	00ed      	lsls	r5, r5, #3
 80008c6:	04db      	lsls	r3, r3, #19
 80008c8:	431d      	orrs	r5, r3
 80008ca:	2300      	movs	r3, #0
 80008cc:	4699      	mov	r9, r3
 80008ce:	469a      	mov	sl, r3
 80008d0:	3f7f      	subs	r7, #127	@ 0x7f
 80008d2:	0274      	lsls	r4, r6, #9
 80008d4:	0073      	lsls	r3, r6, #1
 80008d6:	0a64      	lsrs	r4, r4, #9
 80008d8:	0e1b      	lsrs	r3, r3, #24
 80008da:	0ff6      	lsrs	r6, r6, #31
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d020      	beq.n	8000922 <__aeabi_fdiv+0x7e>
 80008e0:	2bff      	cmp	r3, #255	@ 0xff
 80008e2:	d043      	beq.n	800096c <__aeabi_fdiv+0xc8>
 80008e4:	2280      	movs	r2, #128	@ 0x80
 80008e6:	2000      	movs	r0, #0
 80008e8:	00e4      	lsls	r4, r4, #3
 80008ea:	04d2      	lsls	r2, r2, #19
 80008ec:	4314      	orrs	r4, r2
 80008ee:	3b7f      	subs	r3, #127	@ 0x7f
 80008f0:	4642      	mov	r2, r8
 80008f2:	1aff      	subs	r7, r7, r3
 80008f4:	464b      	mov	r3, r9
 80008f6:	4072      	eors	r2, r6
 80008f8:	2b0f      	cmp	r3, #15
 80008fa:	d900      	bls.n	80008fe <__aeabi_fdiv+0x5a>
 80008fc:	e09d      	b.n	8000a3a <__aeabi_fdiv+0x196>
 80008fe:	4971      	ldr	r1, [pc, #452]	@ (8000ac4 <__aeabi_fdiv+0x220>)
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	58cb      	ldr	r3, [r1, r3]
 8000904:	469f      	mov	pc, r3
 8000906:	2d00      	cmp	r5, #0
 8000908:	d15a      	bne.n	80009c0 <__aeabi_fdiv+0x11c>
 800090a:	2308      	movs	r3, #8
 800090c:	4699      	mov	r9, r3
 800090e:	3b06      	subs	r3, #6
 8000910:	0274      	lsls	r4, r6, #9
 8000912:	469a      	mov	sl, r3
 8000914:	0073      	lsls	r3, r6, #1
 8000916:	27ff      	movs	r7, #255	@ 0xff
 8000918:	0a64      	lsrs	r4, r4, #9
 800091a:	0e1b      	lsrs	r3, r3, #24
 800091c:	0ff6      	lsrs	r6, r6, #31
 800091e:	2b00      	cmp	r3, #0
 8000920:	d1de      	bne.n	80008e0 <__aeabi_fdiv+0x3c>
 8000922:	2c00      	cmp	r4, #0
 8000924:	d13b      	bne.n	800099e <__aeabi_fdiv+0xfa>
 8000926:	2301      	movs	r3, #1
 8000928:	4642      	mov	r2, r8
 800092a:	4649      	mov	r1, r9
 800092c:	4072      	eors	r2, r6
 800092e:	4319      	orrs	r1, r3
 8000930:	290e      	cmp	r1, #14
 8000932:	d818      	bhi.n	8000966 <__aeabi_fdiv+0xc2>
 8000934:	4864      	ldr	r0, [pc, #400]	@ (8000ac8 <__aeabi_fdiv+0x224>)
 8000936:	0089      	lsls	r1, r1, #2
 8000938:	5841      	ldr	r1, [r0, r1]
 800093a:	468f      	mov	pc, r1
 800093c:	4653      	mov	r3, sl
 800093e:	2b02      	cmp	r3, #2
 8000940:	d100      	bne.n	8000944 <__aeabi_fdiv+0xa0>
 8000942:	e0b8      	b.n	8000ab6 <__aeabi_fdiv+0x212>
 8000944:	2b03      	cmp	r3, #3
 8000946:	d06e      	beq.n	8000a26 <__aeabi_fdiv+0x182>
 8000948:	4642      	mov	r2, r8
 800094a:	002c      	movs	r4, r5
 800094c:	2b01      	cmp	r3, #1
 800094e:	d140      	bne.n	80009d2 <__aeabi_fdiv+0x12e>
 8000950:	2000      	movs	r0, #0
 8000952:	2400      	movs	r4, #0
 8000954:	05c0      	lsls	r0, r0, #23
 8000956:	4320      	orrs	r0, r4
 8000958:	07d2      	lsls	r2, r2, #31
 800095a:	4310      	orrs	r0, r2
 800095c:	bce0      	pop	{r5, r6, r7}
 800095e:	46ba      	mov	sl, r7
 8000960:	46b1      	mov	r9, r6
 8000962:	46a8      	mov	r8, r5
 8000964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000966:	20ff      	movs	r0, #255	@ 0xff
 8000968:	2400      	movs	r4, #0
 800096a:	e7f3      	b.n	8000954 <__aeabi_fdiv+0xb0>
 800096c:	2c00      	cmp	r4, #0
 800096e:	d120      	bne.n	80009b2 <__aeabi_fdiv+0x10e>
 8000970:	2302      	movs	r3, #2
 8000972:	3fff      	subs	r7, #255	@ 0xff
 8000974:	e7d8      	b.n	8000928 <__aeabi_fdiv+0x84>
 8000976:	2d00      	cmp	r5, #0
 8000978:	d105      	bne.n	8000986 <__aeabi_fdiv+0xe2>
 800097a:	2304      	movs	r3, #4
 800097c:	4699      	mov	r9, r3
 800097e:	3b03      	subs	r3, #3
 8000980:	2700      	movs	r7, #0
 8000982:	469a      	mov	sl, r3
 8000984:	e7a5      	b.n	80008d2 <__aeabi_fdiv+0x2e>
 8000986:	0028      	movs	r0, r5
 8000988:	f000 fd7e 	bl	8001488 <__clzsi2>
 800098c:	2776      	movs	r7, #118	@ 0x76
 800098e:	1f43      	subs	r3, r0, #5
 8000990:	409d      	lsls	r5, r3
 8000992:	2300      	movs	r3, #0
 8000994:	427f      	negs	r7, r7
 8000996:	4699      	mov	r9, r3
 8000998:	469a      	mov	sl, r3
 800099a:	1a3f      	subs	r7, r7, r0
 800099c:	e799      	b.n	80008d2 <__aeabi_fdiv+0x2e>
 800099e:	0020      	movs	r0, r4
 80009a0:	f000 fd72 	bl	8001488 <__clzsi2>
 80009a4:	1f43      	subs	r3, r0, #5
 80009a6:	409c      	lsls	r4, r3
 80009a8:	2376      	movs	r3, #118	@ 0x76
 80009aa:	425b      	negs	r3, r3
 80009ac:	1a1b      	subs	r3, r3, r0
 80009ae:	2000      	movs	r0, #0
 80009b0:	e79e      	b.n	80008f0 <__aeabi_fdiv+0x4c>
 80009b2:	2303      	movs	r3, #3
 80009b4:	464a      	mov	r2, r9
 80009b6:	431a      	orrs	r2, r3
 80009b8:	4691      	mov	r9, r2
 80009ba:	2003      	movs	r0, #3
 80009bc:	33fc      	adds	r3, #252	@ 0xfc
 80009be:	e797      	b.n	80008f0 <__aeabi_fdiv+0x4c>
 80009c0:	230c      	movs	r3, #12
 80009c2:	4699      	mov	r9, r3
 80009c4:	3b09      	subs	r3, #9
 80009c6:	27ff      	movs	r7, #255	@ 0xff
 80009c8:	469a      	mov	sl, r3
 80009ca:	e782      	b.n	80008d2 <__aeabi_fdiv+0x2e>
 80009cc:	2803      	cmp	r0, #3
 80009ce:	d02c      	beq.n	8000a2a <__aeabi_fdiv+0x186>
 80009d0:	0032      	movs	r2, r6
 80009d2:	0038      	movs	r0, r7
 80009d4:	307f      	adds	r0, #127	@ 0x7f
 80009d6:	2800      	cmp	r0, #0
 80009d8:	dd47      	ble.n	8000a6a <__aeabi_fdiv+0x1c6>
 80009da:	0763      	lsls	r3, r4, #29
 80009dc:	d004      	beq.n	80009e8 <__aeabi_fdiv+0x144>
 80009de:	230f      	movs	r3, #15
 80009e0:	4023      	ands	r3, r4
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	d000      	beq.n	80009e8 <__aeabi_fdiv+0x144>
 80009e6:	3404      	adds	r4, #4
 80009e8:	0123      	lsls	r3, r4, #4
 80009ea:	d503      	bpl.n	80009f4 <__aeabi_fdiv+0x150>
 80009ec:	0038      	movs	r0, r7
 80009ee:	4b37      	ldr	r3, [pc, #220]	@ (8000acc <__aeabi_fdiv+0x228>)
 80009f0:	3080      	adds	r0, #128	@ 0x80
 80009f2:	401c      	ands	r4, r3
 80009f4:	28fe      	cmp	r0, #254	@ 0xfe
 80009f6:	dcb6      	bgt.n	8000966 <__aeabi_fdiv+0xc2>
 80009f8:	01a4      	lsls	r4, r4, #6
 80009fa:	0a64      	lsrs	r4, r4, #9
 80009fc:	b2c0      	uxtb	r0, r0
 80009fe:	e7a9      	b.n	8000954 <__aeabi_fdiv+0xb0>
 8000a00:	2480      	movs	r4, #128	@ 0x80
 8000a02:	2200      	movs	r2, #0
 8000a04:	20ff      	movs	r0, #255	@ 0xff
 8000a06:	03e4      	lsls	r4, r4, #15
 8000a08:	e7a4      	b.n	8000954 <__aeabi_fdiv+0xb0>
 8000a0a:	2380      	movs	r3, #128	@ 0x80
 8000a0c:	03db      	lsls	r3, r3, #15
 8000a0e:	421d      	tst	r5, r3
 8000a10:	d001      	beq.n	8000a16 <__aeabi_fdiv+0x172>
 8000a12:	421c      	tst	r4, r3
 8000a14:	d00b      	beq.n	8000a2e <__aeabi_fdiv+0x18a>
 8000a16:	2480      	movs	r4, #128	@ 0x80
 8000a18:	03e4      	lsls	r4, r4, #15
 8000a1a:	432c      	orrs	r4, r5
 8000a1c:	0264      	lsls	r4, r4, #9
 8000a1e:	4642      	mov	r2, r8
 8000a20:	20ff      	movs	r0, #255	@ 0xff
 8000a22:	0a64      	lsrs	r4, r4, #9
 8000a24:	e796      	b.n	8000954 <__aeabi_fdiv+0xb0>
 8000a26:	4646      	mov	r6, r8
 8000a28:	002c      	movs	r4, r5
 8000a2a:	2380      	movs	r3, #128	@ 0x80
 8000a2c:	03db      	lsls	r3, r3, #15
 8000a2e:	431c      	orrs	r4, r3
 8000a30:	0264      	lsls	r4, r4, #9
 8000a32:	0032      	movs	r2, r6
 8000a34:	20ff      	movs	r0, #255	@ 0xff
 8000a36:	0a64      	lsrs	r4, r4, #9
 8000a38:	e78c      	b.n	8000954 <__aeabi_fdiv+0xb0>
 8000a3a:	016d      	lsls	r5, r5, #5
 8000a3c:	0160      	lsls	r0, r4, #5
 8000a3e:	4285      	cmp	r5, r0
 8000a40:	d22d      	bcs.n	8000a9e <__aeabi_fdiv+0x1fa>
 8000a42:	231b      	movs	r3, #27
 8000a44:	2400      	movs	r4, #0
 8000a46:	3f01      	subs	r7, #1
 8000a48:	2601      	movs	r6, #1
 8000a4a:	0029      	movs	r1, r5
 8000a4c:	0064      	lsls	r4, r4, #1
 8000a4e:	006d      	lsls	r5, r5, #1
 8000a50:	2900      	cmp	r1, #0
 8000a52:	db01      	blt.n	8000a58 <__aeabi_fdiv+0x1b4>
 8000a54:	4285      	cmp	r5, r0
 8000a56:	d301      	bcc.n	8000a5c <__aeabi_fdiv+0x1b8>
 8000a58:	1a2d      	subs	r5, r5, r0
 8000a5a:	4334      	orrs	r4, r6
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d1f3      	bne.n	8000a4a <__aeabi_fdiv+0x1a6>
 8000a62:	1e6b      	subs	r3, r5, #1
 8000a64:	419d      	sbcs	r5, r3
 8000a66:	432c      	orrs	r4, r5
 8000a68:	e7b3      	b.n	80009d2 <__aeabi_fdiv+0x12e>
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	1a1b      	subs	r3, r3, r0
 8000a6e:	2b1b      	cmp	r3, #27
 8000a70:	dd00      	ble.n	8000a74 <__aeabi_fdiv+0x1d0>
 8000a72:	e76d      	b.n	8000950 <__aeabi_fdiv+0xac>
 8000a74:	0021      	movs	r1, r4
 8000a76:	379e      	adds	r7, #158	@ 0x9e
 8000a78:	40d9      	lsrs	r1, r3
 8000a7a:	40bc      	lsls	r4, r7
 8000a7c:	000b      	movs	r3, r1
 8000a7e:	1e61      	subs	r1, r4, #1
 8000a80:	418c      	sbcs	r4, r1
 8000a82:	4323      	orrs	r3, r4
 8000a84:	0759      	lsls	r1, r3, #29
 8000a86:	d004      	beq.n	8000a92 <__aeabi_fdiv+0x1ee>
 8000a88:	210f      	movs	r1, #15
 8000a8a:	4019      	ands	r1, r3
 8000a8c:	2904      	cmp	r1, #4
 8000a8e:	d000      	beq.n	8000a92 <__aeabi_fdiv+0x1ee>
 8000a90:	3304      	adds	r3, #4
 8000a92:	0159      	lsls	r1, r3, #5
 8000a94:	d413      	bmi.n	8000abe <__aeabi_fdiv+0x21a>
 8000a96:	019b      	lsls	r3, r3, #6
 8000a98:	2000      	movs	r0, #0
 8000a9a:	0a5c      	lsrs	r4, r3, #9
 8000a9c:	e75a      	b.n	8000954 <__aeabi_fdiv+0xb0>
 8000a9e:	231a      	movs	r3, #26
 8000aa0:	2401      	movs	r4, #1
 8000aa2:	1a2d      	subs	r5, r5, r0
 8000aa4:	e7d0      	b.n	8000a48 <__aeabi_fdiv+0x1a4>
 8000aa6:	1e98      	subs	r0, r3, #2
 8000aa8:	4243      	negs	r3, r0
 8000aaa:	4158      	adcs	r0, r3
 8000aac:	4240      	negs	r0, r0
 8000aae:	0032      	movs	r2, r6
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	b2c0      	uxtb	r0, r0
 8000ab4:	e74e      	b.n	8000954 <__aeabi_fdiv+0xb0>
 8000ab6:	4642      	mov	r2, r8
 8000ab8:	20ff      	movs	r0, #255	@ 0xff
 8000aba:	2400      	movs	r4, #0
 8000abc:	e74a      	b.n	8000954 <__aeabi_fdiv+0xb0>
 8000abe:	2001      	movs	r0, #1
 8000ac0:	2400      	movs	r4, #0
 8000ac2:	e747      	b.n	8000954 <__aeabi_fdiv+0xb0>
 8000ac4:	08008014 	.word	0x08008014
 8000ac8:	08008054 	.word	0x08008054
 8000acc:	f7ffffff 	.word	0xf7ffffff

08000ad0 <__eqsf2>:
 8000ad0:	b570      	push	{r4, r5, r6, lr}
 8000ad2:	0042      	lsls	r2, r0, #1
 8000ad4:	024e      	lsls	r6, r1, #9
 8000ad6:	004c      	lsls	r4, r1, #1
 8000ad8:	0245      	lsls	r5, r0, #9
 8000ada:	0a6d      	lsrs	r5, r5, #9
 8000adc:	0e12      	lsrs	r2, r2, #24
 8000ade:	0fc3      	lsrs	r3, r0, #31
 8000ae0:	0a76      	lsrs	r6, r6, #9
 8000ae2:	0e24      	lsrs	r4, r4, #24
 8000ae4:	0fc9      	lsrs	r1, r1, #31
 8000ae6:	2aff      	cmp	r2, #255	@ 0xff
 8000ae8:	d010      	beq.n	8000b0c <__eqsf2+0x3c>
 8000aea:	2cff      	cmp	r4, #255	@ 0xff
 8000aec:	d00c      	beq.n	8000b08 <__eqsf2+0x38>
 8000aee:	2001      	movs	r0, #1
 8000af0:	42a2      	cmp	r2, r4
 8000af2:	d10a      	bne.n	8000b0a <__eqsf2+0x3a>
 8000af4:	42b5      	cmp	r5, r6
 8000af6:	d108      	bne.n	8000b0a <__eqsf2+0x3a>
 8000af8:	428b      	cmp	r3, r1
 8000afa:	d00f      	beq.n	8000b1c <__eqsf2+0x4c>
 8000afc:	2a00      	cmp	r2, #0
 8000afe:	d104      	bne.n	8000b0a <__eqsf2+0x3a>
 8000b00:	0028      	movs	r0, r5
 8000b02:	1e43      	subs	r3, r0, #1
 8000b04:	4198      	sbcs	r0, r3
 8000b06:	e000      	b.n	8000b0a <__eqsf2+0x3a>
 8000b08:	2001      	movs	r0, #1
 8000b0a:	bd70      	pop	{r4, r5, r6, pc}
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	2cff      	cmp	r4, #255	@ 0xff
 8000b10:	d1fb      	bne.n	8000b0a <__eqsf2+0x3a>
 8000b12:	4335      	orrs	r5, r6
 8000b14:	d1f9      	bne.n	8000b0a <__eqsf2+0x3a>
 8000b16:	404b      	eors	r3, r1
 8000b18:	0018      	movs	r0, r3
 8000b1a:	e7f6      	b.n	8000b0a <__eqsf2+0x3a>
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	e7f4      	b.n	8000b0a <__eqsf2+0x3a>

08000b20 <__gesf2>:
 8000b20:	b530      	push	{r4, r5, lr}
 8000b22:	0042      	lsls	r2, r0, #1
 8000b24:	0244      	lsls	r4, r0, #9
 8000b26:	024d      	lsls	r5, r1, #9
 8000b28:	0fc3      	lsrs	r3, r0, #31
 8000b2a:	0048      	lsls	r0, r1, #1
 8000b2c:	0a64      	lsrs	r4, r4, #9
 8000b2e:	0e12      	lsrs	r2, r2, #24
 8000b30:	0a6d      	lsrs	r5, r5, #9
 8000b32:	0e00      	lsrs	r0, r0, #24
 8000b34:	0fc9      	lsrs	r1, r1, #31
 8000b36:	2aff      	cmp	r2, #255	@ 0xff
 8000b38:	d018      	beq.n	8000b6c <__gesf2+0x4c>
 8000b3a:	28ff      	cmp	r0, #255	@ 0xff
 8000b3c:	d00a      	beq.n	8000b54 <__gesf2+0x34>
 8000b3e:	2a00      	cmp	r2, #0
 8000b40:	d11e      	bne.n	8000b80 <__gesf2+0x60>
 8000b42:	2800      	cmp	r0, #0
 8000b44:	d10a      	bne.n	8000b5c <__gesf2+0x3c>
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d029      	beq.n	8000b9e <__gesf2+0x7e>
 8000b4a:	2c00      	cmp	r4, #0
 8000b4c:	d12d      	bne.n	8000baa <__gesf2+0x8a>
 8000b4e:	0048      	lsls	r0, r1, #1
 8000b50:	3801      	subs	r0, #1
 8000b52:	bd30      	pop	{r4, r5, pc}
 8000b54:	2d00      	cmp	r5, #0
 8000b56:	d125      	bne.n	8000ba4 <__gesf2+0x84>
 8000b58:	2a00      	cmp	r2, #0
 8000b5a:	d101      	bne.n	8000b60 <__gesf2+0x40>
 8000b5c:	2c00      	cmp	r4, #0
 8000b5e:	d0f6      	beq.n	8000b4e <__gesf2+0x2e>
 8000b60:	428b      	cmp	r3, r1
 8000b62:	d019      	beq.n	8000b98 <__gesf2+0x78>
 8000b64:	2001      	movs	r0, #1
 8000b66:	425b      	negs	r3, r3
 8000b68:	4318      	orrs	r0, r3
 8000b6a:	e7f2      	b.n	8000b52 <__gesf2+0x32>
 8000b6c:	2c00      	cmp	r4, #0
 8000b6e:	d119      	bne.n	8000ba4 <__gesf2+0x84>
 8000b70:	28ff      	cmp	r0, #255	@ 0xff
 8000b72:	d1f7      	bne.n	8000b64 <__gesf2+0x44>
 8000b74:	2d00      	cmp	r5, #0
 8000b76:	d115      	bne.n	8000ba4 <__gesf2+0x84>
 8000b78:	2000      	movs	r0, #0
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	d1f2      	bne.n	8000b64 <__gesf2+0x44>
 8000b7e:	e7e8      	b.n	8000b52 <__gesf2+0x32>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d0ef      	beq.n	8000b64 <__gesf2+0x44>
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d1ed      	bne.n	8000b64 <__gesf2+0x44>
 8000b88:	4282      	cmp	r2, r0
 8000b8a:	dceb      	bgt.n	8000b64 <__gesf2+0x44>
 8000b8c:	db04      	blt.n	8000b98 <__gesf2+0x78>
 8000b8e:	42ac      	cmp	r4, r5
 8000b90:	d8e8      	bhi.n	8000b64 <__gesf2+0x44>
 8000b92:	2000      	movs	r0, #0
 8000b94:	42ac      	cmp	r4, r5
 8000b96:	d2dc      	bcs.n	8000b52 <__gesf2+0x32>
 8000b98:	0058      	lsls	r0, r3, #1
 8000b9a:	3801      	subs	r0, #1
 8000b9c:	e7d9      	b.n	8000b52 <__gesf2+0x32>
 8000b9e:	2c00      	cmp	r4, #0
 8000ba0:	d0d7      	beq.n	8000b52 <__gesf2+0x32>
 8000ba2:	e7df      	b.n	8000b64 <__gesf2+0x44>
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	4240      	negs	r0, r0
 8000ba8:	e7d3      	b.n	8000b52 <__gesf2+0x32>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d1da      	bne.n	8000b64 <__gesf2+0x44>
 8000bae:	e7ee      	b.n	8000b8e <__gesf2+0x6e>

08000bb0 <__lesf2>:
 8000bb0:	b530      	push	{r4, r5, lr}
 8000bb2:	0042      	lsls	r2, r0, #1
 8000bb4:	0244      	lsls	r4, r0, #9
 8000bb6:	024d      	lsls	r5, r1, #9
 8000bb8:	0fc3      	lsrs	r3, r0, #31
 8000bba:	0048      	lsls	r0, r1, #1
 8000bbc:	0a64      	lsrs	r4, r4, #9
 8000bbe:	0e12      	lsrs	r2, r2, #24
 8000bc0:	0a6d      	lsrs	r5, r5, #9
 8000bc2:	0e00      	lsrs	r0, r0, #24
 8000bc4:	0fc9      	lsrs	r1, r1, #31
 8000bc6:	2aff      	cmp	r2, #255	@ 0xff
 8000bc8:	d017      	beq.n	8000bfa <__lesf2+0x4a>
 8000bca:	28ff      	cmp	r0, #255	@ 0xff
 8000bcc:	d00a      	beq.n	8000be4 <__lesf2+0x34>
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d11b      	bne.n	8000c0a <__lesf2+0x5a>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	d10a      	bne.n	8000bec <__lesf2+0x3c>
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d01d      	beq.n	8000c16 <__lesf2+0x66>
 8000bda:	2c00      	cmp	r4, #0
 8000bdc:	d12d      	bne.n	8000c3a <__lesf2+0x8a>
 8000bde:	0048      	lsls	r0, r1, #1
 8000be0:	3801      	subs	r0, #1
 8000be2:	e011      	b.n	8000c08 <__lesf2+0x58>
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d10e      	bne.n	8000c06 <__lesf2+0x56>
 8000be8:	2a00      	cmp	r2, #0
 8000bea:	d101      	bne.n	8000bf0 <__lesf2+0x40>
 8000bec:	2c00      	cmp	r4, #0
 8000bee:	d0f6      	beq.n	8000bde <__lesf2+0x2e>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d10c      	bne.n	8000c0e <__lesf2+0x5e>
 8000bf4:	0058      	lsls	r0, r3, #1
 8000bf6:	3801      	subs	r0, #1
 8000bf8:	e006      	b.n	8000c08 <__lesf2+0x58>
 8000bfa:	2c00      	cmp	r4, #0
 8000bfc:	d103      	bne.n	8000c06 <__lesf2+0x56>
 8000bfe:	28ff      	cmp	r0, #255	@ 0xff
 8000c00:	d105      	bne.n	8000c0e <__lesf2+0x5e>
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	d015      	beq.n	8000c32 <__lesf2+0x82>
 8000c06:	2002      	movs	r0, #2
 8000c08:	bd30      	pop	{r4, r5, pc}
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d106      	bne.n	8000c1c <__lesf2+0x6c>
 8000c0e:	2001      	movs	r0, #1
 8000c10:	425b      	negs	r3, r3
 8000c12:	4318      	orrs	r0, r3
 8000c14:	e7f8      	b.n	8000c08 <__lesf2+0x58>
 8000c16:	2c00      	cmp	r4, #0
 8000c18:	d0f6      	beq.n	8000c08 <__lesf2+0x58>
 8000c1a:	e7f8      	b.n	8000c0e <__lesf2+0x5e>
 8000c1c:	428b      	cmp	r3, r1
 8000c1e:	d1f6      	bne.n	8000c0e <__lesf2+0x5e>
 8000c20:	4282      	cmp	r2, r0
 8000c22:	dcf4      	bgt.n	8000c0e <__lesf2+0x5e>
 8000c24:	dbe6      	blt.n	8000bf4 <__lesf2+0x44>
 8000c26:	42ac      	cmp	r4, r5
 8000c28:	d8f1      	bhi.n	8000c0e <__lesf2+0x5e>
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	42ac      	cmp	r4, r5
 8000c2e:	d2eb      	bcs.n	8000c08 <__lesf2+0x58>
 8000c30:	e7e0      	b.n	8000bf4 <__lesf2+0x44>
 8000c32:	2000      	movs	r0, #0
 8000c34:	428b      	cmp	r3, r1
 8000c36:	d1ea      	bne.n	8000c0e <__lesf2+0x5e>
 8000c38:	e7e6      	b.n	8000c08 <__lesf2+0x58>
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d1e7      	bne.n	8000c0e <__lesf2+0x5e>
 8000c3e:	e7f2      	b.n	8000c26 <__lesf2+0x76>

08000c40 <__aeabi_fmul>:
 8000c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c42:	464f      	mov	r7, r9
 8000c44:	4646      	mov	r6, r8
 8000c46:	46d6      	mov	lr, sl
 8000c48:	0044      	lsls	r4, r0, #1
 8000c4a:	b5c0      	push	{r6, r7, lr}
 8000c4c:	0246      	lsls	r6, r0, #9
 8000c4e:	1c0f      	adds	r7, r1, #0
 8000c50:	0a76      	lsrs	r6, r6, #9
 8000c52:	0e24      	lsrs	r4, r4, #24
 8000c54:	0fc5      	lsrs	r5, r0, #31
 8000c56:	2c00      	cmp	r4, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fmul+0x1c>
 8000c5a:	e0da      	b.n	8000e12 <__aeabi_fmul+0x1d2>
 8000c5c:	2cff      	cmp	r4, #255	@ 0xff
 8000c5e:	d074      	beq.n	8000d4a <__aeabi_fmul+0x10a>
 8000c60:	2380      	movs	r3, #128	@ 0x80
 8000c62:	00f6      	lsls	r6, r6, #3
 8000c64:	04db      	lsls	r3, r3, #19
 8000c66:	431e      	orrs	r6, r3
 8000c68:	2300      	movs	r3, #0
 8000c6a:	4699      	mov	r9, r3
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	3c7f      	subs	r4, #127	@ 0x7f
 8000c70:	027b      	lsls	r3, r7, #9
 8000c72:	0a5b      	lsrs	r3, r3, #9
 8000c74:	4698      	mov	r8, r3
 8000c76:	007b      	lsls	r3, r7, #1
 8000c78:	0e1b      	lsrs	r3, r3, #24
 8000c7a:	0fff      	lsrs	r7, r7, #31
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d074      	beq.n	8000d6a <__aeabi_fmul+0x12a>
 8000c80:	2bff      	cmp	r3, #255	@ 0xff
 8000c82:	d100      	bne.n	8000c86 <__aeabi_fmul+0x46>
 8000c84:	e08e      	b.n	8000da4 <__aeabi_fmul+0x164>
 8000c86:	4642      	mov	r2, r8
 8000c88:	2180      	movs	r1, #128	@ 0x80
 8000c8a:	00d2      	lsls	r2, r2, #3
 8000c8c:	04c9      	lsls	r1, r1, #19
 8000c8e:	4311      	orrs	r1, r2
 8000c90:	3b7f      	subs	r3, #127	@ 0x7f
 8000c92:	002a      	movs	r2, r5
 8000c94:	18e4      	adds	r4, r4, r3
 8000c96:	464b      	mov	r3, r9
 8000c98:	407a      	eors	r2, r7
 8000c9a:	4688      	mov	r8, r1
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	2b0a      	cmp	r3, #10
 8000ca0:	dc75      	bgt.n	8000d8e <__aeabi_fmul+0x14e>
 8000ca2:	464b      	mov	r3, r9
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	2b02      	cmp	r3, #2
 8000ca8:	dd0f      	ble.n	8000cca <__aeabi_fmul+0x8a>
 8000caa:	4649      	mov	r1, r9
 8000cac:	2301      	movs	r3, #1
 8000cae:	408b      	lsls	r3, r1
 8000cb0:	21a6      	movs	r1, #166	@ 0xa6
 8000cb2:	00c9      	lsls	r1, r1, #3
 8000cb4:	420b      	tst	r3, r1
 8000cb6:	d169      	bne.n	8000d8c <__aeabi_fmul+0x14c>
 8000cb8:	2190      	movs	r1, #144	@ 0x90
 8000cba:	0089      	lsls	r1, r1, #2
 8000cbc:	420b      	tst	r3, r1
 8000cbe:	d000      	beq.n	8000cc2 <__aeabi_fmul+0x82>
 8000cc0:	e100      	b.n	8000ec4 <__aeabi_fmul+0x284>
 8000cc2:	2188      	movs	r1, #136	@ 0x88
 8000cc4:	4219      	tst	r1, r3
 8000cc6:	d000      	beq.n	8000cca <__aeabi_fmul+0x8a>
 8000cc8:	e0f5      	b.n	8000eb6 <__aeabi_fmul+0x276>
 8000cca:	4641      	mov	r1, r8
 8000ccc:	0409      	lsls	r1, r1, #16
 8000cce:	0c09      	lsrs	r1, r1, #16
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	0008      	movs	r0, r1
 8000cd4:	0c35      	lsrs	r5, r6, #16
 8000cd6:	0436      	lsls	r6, r6, #16
 8000cd8:	0c1b      	lsrs	r3, r3, #16
 8000cda:	0c36      	lsrs	r6, r6, #16
 8000cdc:	4370      	muls	r0, r6
 8000cde:	4369      	muls	r1, r5
 8000ce0:	435e      	muls	r6, r3
 8000ce2:	435d      	muls	r5, r3
 8000ce4:	1876      	adds	r6, r6, r1
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	199b      	adds	r3, r3, r6
 8000cea:	4299      	cmp	r1, r3
 8000cec:	d903      	bls.n	8000cf6 <__aeabi_fmul+0xb6>
 8000cee:	2180      	movs	r1, #128	@ 0x80
 8000cf0:	0249      	lsls	r1, r1, #9
 8000cf2:	468c      	mov	ip, r1
 8000cf4:	4465      	add	r5, ip
 8000cf6:	0400      	lsls	r0, r0, #16
 8000cf8:	0419      	lsls	r1, r3, #16
 8000cfa:	0c00      	lsrs	r0, r0, #16
 8000cfc:	1809      	adds	r1, r1, r0
 8000cfe:	018e      	lsls	r6, r1, #6
 8000d00:	1e70      	subs	r0, r6, #1
 8000d02:	4186      	sbcs	r6, r0
 8000d04:	0c1b      	lsrs	r3, r3, #16
 8000d06:	0e89      	lsrs	r1, r1, #26
 8000d08:	195b      	adds	r3, r3, r5
 8000d0a:	430e      	orrs	r6, r1
 8000d0c:	019b      	lsls	r3, r3, #6
 8000d0e:	431e      	orrs	r6, r3
 8000d10:	011b      	lsls	r3, r3, #4
 8000d12:	d46c      	bmi.n	8000dee <__aeabi_fmul+0x1ae>
 8000d14:	0023      	movs	r3, r4
 8000d16:	337f      	adds	r3, #127	@ 0x7f
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	dc00      	bgt.n	8000d1e <__aeabi_fmul+0xde>
 8000d1c:	e0b1      	b.n	8000e82 <__aeabi_fmul+0x242>
 8000d1e:	0015      	movs	r5, r2
 8000d20:	0771      	lsls	r1, r6, #29
 8000d22:	d00b      	beq.n	8000d3c <__aeabi_fmul+0xfc>
 8000d24:	200f      	movs	r0, #15
 8000d26:	0021      	movs	r1, r4
 8000d28:	4030      	ands	r0, r6
 8000d2a:	2804      	cmp	r0, #4
 8000d2c:	d006      	beq.n	8000d3c <__aeabi_fmul+0xfc>
 8000d2e:	3604      	adds	r6, #4
 8000d30:	0132      	lsls	r2, r6, #4
 8000d32:	d503      	bpl.n	8000d3c <__aeabi_fmul+0xfc>
 8000d34:	4b6e      	ldr	r3, [pc, #440]	@ (8000ef0 <__aeabi_fmul+0x2b0>)
 8000d36:	401e      	ands	r6, r3
 8000d38:	000b      	movs	r3, r1
 8000d3a:	3380      	adds	r3, #128	@ 0x80
 8000d3c:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d3e:	dd00      	ble.n	8000d42 <__aeabi_fmul+0x102>
 8000d40:	e0bd      	b.n	8000ebe <__aeabi_fmul+0x27e>
 8000d42:	01b2      	lsls	r2, r6, #6
 8000d44:	0a52      	lsrs	r2, r2, #9
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	e048      	b.n	8000ddc <__aeabi_fmul+0x19c>
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d000      	beq.n	8000d50 <__aeabi_fmul+0x110>
 8000d4e:	e092      	b.n	8000e76 <__aeabi_fmul+0x236>
 8000d50:	2308      	movs	r3, #8
 8000d52:	4699      	mov	r9, r3
 8000d54:	3b06      	subs	r3, #6
 8000d56:	469a      	mov	sl, r3
 8000d58:	027b      	lsls	r3, r7, #9
 8000d5a:	0a5b      	lsrs	r3, r3, #9
 8000d5c:	4698      	mov	r8, r3
 8000d5e:	007b      	lsls	r3, r7, #1
 8000d60:	24ff      	movs	r4, #255	@ 0xff
 8000d62:	0e1b      	lsrs	r3, r3, #24
 8000d64:	0fff      	lsrs	r7, r7, #31
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d18a      	bne.n	8000c80 <__aeabi_fmul+0x40>
 8000d6a:	4642      	mov	r2, r8
 8000d6c:	2a00      	cmp	r2, #0
 8000d6e:	d164      	bne.n	8000e3a <__aeabi_fmul+0x1fa>
 8000d70:	4649      	mov	r1, r9
 8000d72:	3201      	adds	r2, #1
 8000d74:	4311      	orrs	r1, r2
 8000d76:	4689      	mov	r9, r1
 8000d78:	290a      	cmp	r1, #10
 8000d7a:	dc08      	bgt.n	8000d8e <__aeabi_fmul+0x14e>
 8000d7c:	407d      	eors	r5, r7
 8000d7e:	2001      	movs	r0, #1
 8000d80:	b2ea      	uxtb	r2, r5
 8000d82:	2902      	cmp	r1, #2
 8000d84:	dc91      	bgt.n	8000caa <__aeabi_fmul+0x6a>
 8000d86:	0015      	movs	r5, r2
 8000d88:	2200      	movs	r2, #0
 8000d8a:	e027      	b.n	8000ddc <__aeabi_fmul+0x19c>
 8000d8c:	0015      	movs	r5, r2
 8000d8e:	4653      	mov	r3, sl
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d100      	bne.n	8000d96 <__aeabi_fmul+0x156>
 8000d94:	e093      	b.n	8000ebe <__aeabi_fmul+0x27e>
 8000d96:	2b03      	cmp	r3, #3
 8000d98:	d01a      	beq.n	8000dd0 <__aeabi_fmul+0x190>
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d12c      	bne.n	8000df8 <__aeabi_fmul+0x1b8>
 8000d9e:	2300      	movs	r3, #0
 8000da0:	2200      	movs	r2, #0
 8000da2:	e01b      	b.n	8000ddc <__aeabi_fmul+0x19c>
 8000da4:	4643      	mov	r3, r8
 8000da6:	34ff      	adds	r4, #255	@ 0xff
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d055      	beq.n	8000e58 <__aeabi_fmul+0x218>
 8000dac:	2103      	movs	r1, #3
 8000dae:	464b      	mov	r3, r9
 8000db0:	430b      	orrs	r3, r1
 8000db2:	0019      	movs	r1, r3
 8000db4:	2b0a      	cmp	r3, #10
 8000db6:	dc00      	bgt.n	8000dba <__aeabi_fmul+0x17a>
 8000db8:	e092      	b.n	8000ee0 <__aeabi_fmul+0x2a0>
 8000dba:	2b0f      	cmp	r3, #15
 8000dbc:	d000      	beq.n	8000dc0 <__aeabi_fmul+0x180>
 8000dbe:	e08c      	b.n	8000eda <__aeabi_fmul+0x29a>
 8000dc0:	2280      	movs	r2, #128	@ 0x80
 8000dc2:	03d2      	lsls	r2, r2, #15
 8000dc4:	4216      	tst	r6, r2
 8000dc6:	d003      	beq.n	8000dd0 <__aeabi_fmul+0x190>
 8000dc8:	4643      	mov	r3, r8
 8000dca:	4213      	tst	r3, r2
 8000dcc:	d100      	bne.n	8000dd0 <__aeabi_fmul+0x190>
 8000dce:	e07d      	b.n	8000ecc <__aeabi_fmul+0x28c>
 8000dd0:	2280      	movs	r2, #128	@ 0x80
 8000dd2:	03d2      	lsls	r2, r2, #15
 8000dd4:	4332      	orrs	r2, r6
 8000dd6:	0252      	lsls	r2, r2, #9
 8000dd8:	0a52      	lsrs	r2, r2, #9
 8000dda:	23ff      	movs	r3, #255	@ 0xff
 8000ddc:	05d8      	lsls	r0, r3, #23
 8000dde:	07ed      	lsls	r5, r5, #31
 8000de0:	4310      	orrs	r0, r2
 8000de2:	4328      	orrs	r0, r5
 8000de4:	bce0      	pop	{r5, r6, r7}
 8000de6:	46ba      	mov	sl, r7
 8000de8:	46b1      	mov	r9, r6
 8000dea:	46a8      	mov	r8, r5
 8000dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dee:	2301      	movs	r3, #1
 8000df0:	0015      	movs	r5, r2
 8000df2:	0871      	lsrs	r1, r6, #1
 8000df4:	401e      	ands	r6, r3
 8000df6:	430e      	orrs	r6, r1
 8000df8:	0023      	movs	r3, r4
 8000dfa:	3380      	adds	r3, #128	@ 0x80
 8000dfc:	1c61      	adds	r1, r4, #1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	dd41      	ble.n	8000e86 <__aeabi_fmul+0x246>
 8000e02:	0772      	lsls	r2, r6, #29
 8000e04:	d094      	beq.n	8000d30 <__aeabi_fmul+0xf0>
 8000e06:	220f      	movs	r2, #15
 8000e08:	4032      	ands	r2, r6
 8000e0a:	2a04      	cmp	r2, #4
 8000e0c:	d000      	beq.n	8000e10 <__aeabi_fmul+0x1d0>
 8000e0e:	e78e      	b.n	8000d2e <__aeabi_fmul+0xee>
 8000e10:	e78e      	b.n	8000d30 <__aeabi_fmul+0xf0>
 8000e12:	2e00      	cmp	r6, #0
 8000e14:	d105      	bne.n	8000e22 <__aeabi_fmul+0x1e2>
 8000e16:	2304      	movs	r3, #4
 8000e18:	4699      	mov	r9, r3
 8000e1a:	3b03      	subs	r3, #3
 8000e1c:	2400      	movs	r4, #0
 8000e1e:	469a      	mov	sl, r3
 8000e20:	e726      	b.n	8000c70 <__aeabi_fmul+0x30>
 8000e22:	0030      	movs	r0, r6
 8000e24:	f000 fb30 	bl	8001488 <__clzsi2>
 8000e28:	2476      	movs	r4, #118	@ 0x76
 8000e2a:	1f43      	subs	r3, r0, #5
 8000e2c:	409e      	lsls	r6, r3
 8000e2e:	2300      	movs	r3, #0
 8000e30:	4264      	negs	r4, r4
 8000e32:	4699      	mov	r9, r3
 8000e34:	469a      	mov	sl, r3
 8000e36:	1a24      	subs	r4, r4, r0
 8000e38:	e71a      	b.n	8000c70 <__aeabi_fmul+0x30>
 8000e3a:	4640      	mov	r0, r8
 8000e3c:	f000 fb24 	bl	8001488 <__clzsi2>
 8000e40:	464b      	mov	r3, r9
 8000e42:	1a24      	subs	r4, r4, r0
 8000e44:	3c76      	subs	r4, #118	@ 0x76
 8000e46:	2b0a      	cmp	r3, #10
 8000e48:	dca1      	bgt.n	8000d8e <__aeabi_fmul+0x14e>
 8000e4a:	4643      	mov	r3, r8
 8000e4c:	3805      	subs	r0, #5
 8000e4e:	4083      	lsls	r3, r0
 8000e50:	407d      	eors	r5, r7
 8000e52:	4698      	mov	r8, r3
 8000e54:	b2ea      	uxtb	r2, r5
 8000e56:	e724      	b.n	8000ca2 <__aeabi_fmul+0x62>
 8000e58:	464a      	mov	r2, r9
 8000e5a:	3302      	adds	r3, #2
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	002a      	movs	r2, r5
 8000e60:	407a      	eors	r2, r7
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	2b0a      	cmp	r3, #10
 8000e66:	dc92      	bgt.n	8000d8e <__aeabi_fmul+0x14e>
 8000e68:	4649      	mov	r1, r9
 8000e6a:	0015      	movs	r5, r2
 8000e6c:	2900      	cmp	r1, #0
 8000e6e:	d026      	beq.n	8000ebe <__aeabi_fmul+0x27e>
 8000e70:	4699      	mov	r9, r3
 8000e72:	2002      	movs	r0, #2
 8000e74:	e719      	b.n	8000caa <__aeabi_fmul+0x6a>
 8000e76:	230c      	movs	r3, #12
 8000e78:	4699      	mov	r9, r3
 8000e7a:	3b09      	subs	r3, #9
 8000e7c:	24ff      	movs	r4, #255	@ 0xff
 8000e7e:	469a      	mov	sl, r3
 8000e80:	e6f6      	b.n	8000c70 <__aeabi_fmul+0x30>
 8000e82:	0015      	movs	r5, r2
 8000e84:	0021      	movs	r1, r4
 8000e86:	2201      	movs	r2, #1
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b1b      	cmp	r3, #27
 8000e8c:	dd00      	ble.n	8000e90 <__aeabi_fmul+0x250>
 8000e8e:	e786      	b.n	8000d9e <__aeabi_fmul+0x15e>
 8000e90:	319e      	adds	r1, #158	@ 0x9e
 8000e92:	0032      	movs	r2, r6
 8000e94:	408e      	lsls	r6, r1
 8000e96:	40da      	lsrs	r2, r3
 8000e98:	1e73      	subs	r3, r6, #1
 8000e9a:	419e      	sbcs	r6, r3
 8000e9c:	4332      	orrs	r2, r6
 8000e9e:	0753      	lsls	r3, r2, #29
 8000ea0:	d004      	beq.n	8000eac <__aeabi_fmul+0x26c>
 8000ea2:	230f      	movs	r3, #15
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d000      	beq.n	8000eac <__aeabi_fmul+0x26c>
 8000eaa:	3204      	adds	r2, #4
 8000eac:	0153      	lsls	r3, r2, #5
 8000eae:	d510      	bpl.n	8000ed2 <__aeabi_fmul+0x292>
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	e792      	b.n	8000ddc <__aeabi_fmul+0x19c>
 8000eb6:	003d      	movs	r5, r7
 8000eb8:	4646      	mov	r6, r8
 8000eba:	4682      	mov	sl, r0
 8000ebc:	e767      	b.n	8000d8e <__aeabi_fmul+0x14e>
 8000ebe:	23ff      	movs	r3, #255	@ 0xff
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	e78b      	b.n	8000ddc <__aeabi_fmul+0x19c>
 8000ec4:	2280      	movs	r2, #128	@ 0x80
 8000ec6:	2500      	movs	r5, #0
 8000ec8:	03d2      	lsls	r2, r2, #15
 8000eca:	e786      	b.n	8000dda <__aeabi_fmul+0x19a>
 8000ecc:	003d      	movs	r5, r7
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	e783      	b.n	8000dda <__aeabi_fmul+0x19a>
 8000ed2:	0192      	lsls	r2, r2, #6
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	0a52      	lsrs	r2, r2, #9
 8000ed8:	e780      	b.n	8000ddc <__aeabi_fmul+0x19c>
 8000eda:	003d      	movs	r5, r7
 8000edc:	4646      	mov	r6, r8
 8000ede:	e777      	b.n	8000dd0 <__aeabi_fmul+0x190>
 8000ee0:	002a      	movs	r2, r5
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	407a      	eors	r2, r7
 8000ee6:	408b      	lsls	r3, r1
 8000ee8:	2003      	movs	r0, #3
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	e6e9      	b.n	8000cc2 <__aeabi_fmul+0x82>
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	f7ffffff 	.word	0xf7ffffff

08000ef4 <__aeabi_fsub>:
 8000ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ef6:	4647      	mov	r7, r8
 8000ef8:	46ce      	mov	lr, r9
 8000efa:	0243      	lsls	r3, r0, #9
 8000efc:	b580      	push	{r7, lr}
 8000efe:	0a5f      	lsrs	r7, r3, #9
 8000f00:	099b      	lsrs	r3, r3, #6
 8000f02:	0045      	lsls	r5, r0, #1
 8000f04:	004a      	lsls	r2, r1, #1
 8000f06:	469c      	mov	ip, r3
 8000f08:	024b      	lsls	r3, r1, #9
 8000f0a:	0fc4      	lsrs	r4, r0, #31
 8000f0c:	0fce      	lsrs	r6, r1, #31
 8000f0e:	0e2d      	lsrs	r5, r5, #24
 8000f10:	0a58      	lsrs	r0, r3, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0999      	lsrs	r1, r3, #6
 8000f16:	2aff      	cmp	r2, #255	@ 0xff
 8000f18:	d06b      	beq.n	8000ff2 <__aeabi_fsub+0xfe>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	405e      	eors	r6, r3
 8000f1e:	1aab      	subs	r3, r5, r2
 8000f20:	42b4      	cmp	r4, r6
 8000f22:	d04b      	beq.n	8000fbc <__aeabi_fsub+0xc8>
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_fsub+0x36>
 8000f28:	e0ff      	b.n	800112a <__aeabi_fsub+0x236>
 8000f2a:	2a00      	cmp	r2, #0
 8000f2c:	d100      	bne.n	8000f30 <__aeabi_fsub+0x3c>
 8000f2e:	e088      	b.n	8001042 <__aeabi_fsub+0x14e>
 8000f30:	2dff      	cmp	r5, #255	@ 0xff
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x42>
 8000f34:	e0ef      	b.n	8001116 <__aeabi_fsub+0x222>
 8000f36:	2280      	movs	r2, #128	@ 0x80
 8000f38:	04d2      	lsls	r2, r2, #19
 8000f3a:	4311      	orrs	r1, r2
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	2b1b      	cmp	r3, #27
 8000f40:	dc08      	bgt.n	8000f54 <__aeabi_fsub+0x60>
 8000f42:	0008      	movs	r0, r1
 8000f44:	2220      	movs	r2, #32
 8000f46:	40d8      	lsrs	r0, r3
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	4099      	lsls	r1, r3
 8000f4c:	000b      	movs	r3, r1
 8000f4e:	1e5a      	subs	r2, r3, #1
 8000f50:	4193      	sbcs	r3, r2
 8000f52:	4318      	orrs	r0, r3
 8000f54:	4663      	mov	r3, ip
 8000f56:	1a1b      	subs	r3, r3, r0
 8000f58:	469c      	mov	ip, r3
 8000f5a:	4663      	mov	r3, ip
 8000f5c:	015b      	lsls	r3, r3, #5
 8000f5e:	d400      	bmi.n	8000f62 <__aeabi_fsub+0x6e>
 8000f60:	e0cd      	b.n	80010fe <__aeabi_fsub+0x20a>
 8000f62:	4663      	mov	r3, ip
 8000f64:	019f      	lsls	r7, r3, #6
 8000f66:	09bf      	lsrs	r7, r7, #6
 8000f68:	0038      	movs	r0, r7
 8000f6a:	f000 fa8d 	bl	8001488 <__clzsi2>
 8000f6e:	003b      	movs	r3, r7
 8000f70:	3805      	subs	r0, #5
 8000f72:	4083      	lsls	r3, r0
 8000f74:	4285      	cmp	r5, r0
 8000f76:	dc00      	bgt.n	8000f7a <__aeabi_fsub+0x86>
 8000f78:	e0a2      	b.n	80010c0 <__aeabi_fsub+0x1cc>
 8000f7a:	4ab7      	ldr	r2, [pc, #732]	@ (8001258 <__aeabi_fsub+0x364>)
 8000f7c:	1a2d      	subs	r5, r5, r0
 8000f7e:	401a      	ands	r2, r3
 8000f80:	4694      	mov	ip, r2
 8000f82:	075a      	lsls	r2, r3, #29
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0x94>
 8000f86:	e0c3      	b.n	8001110 <__aeabi_fsub+0x21c>
 8000f88:	220f      	movs	r2, #15
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d100      	bne.n	8000f92 <__aeabi_fsub+0x9e>
 8000f90:	e0be      	b.n	8001110 <__aeabi_fsub+0x21c>
 8000f92:	2304      	movs	r3, #4
 8000f94:	4698      	mov	r8, r3
 8000f96:	44c4      	add	ip, r8
 8000f98:	4663      	mov	r3, ip
 8000f9a:	015b      	lsls	r3, r3, #5
 8000f9c:	d400      	bmi.n	8000fa0 <__aeabi_fsub+0xac>
 8000f9e:	e0b7      	b.n	8001110 <__aeabi_fsub+0x21c>
 8000fa0:	1c68      	adds	r0, r5, #1
 8000fa2:	2dfe      	cmp	r5, #254	@ 0xfe
 8000fa4:	d000      	beq.n	8000fa8 <__aeabi_fsub+0xb4>
 8000fa6:	e0a5      	b.n	80010f4 <__aeabi_fsub+0x200>
 8000fa8:	20ff      	movs	r0, #255	@ 0xff
 8000faa:	2200      	movs	r2, #0
 8000fac:	05c0      	lsls	r0, r0, #23
 8000fae:	4310      	orrs	r0, r2
 8000fb0:	07e4      	lsls	r4, r4, #31
 8000fb2:	4320      	orrs	r0, r4
 8000fb4:	bcc0      	pop	{r6, r7}
 8000fb6:	46b9      	mov	r9, r7
 8000fb8:	46b0      	mov	r8, r6
 8000fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	dc00      	bgt.n	8000fc2 <__aeabi_fsub+0xce>
 8000fc0:	e1eb      	b.n	800139a <__aeabi_fsub+0x4a6>
 8000fc2:	2a00      	cmp	r2, #0
 8000fc4:	d046      	beq.n	8001054 <__aeabi_fsub+0x160>
 8000fc6:	2dff      	cmp	r5, #255	@ 0xff
 8000fc8:	d100      	bne.n	8000fcc <__aeabi_fsub+0xd8>
 8000fca:	e0a4      	b.n	8001116 <__aeabi_fsub+0x222>
 8000fcc:	2280      	movs	r2, #128	@ 0x80
 8000fce:	04d2      	lsls	r2, r2, #19
 8000fd0:	4311      	orrs	r1, r2
 8000fd2:	2b1b      	cmp	r3, #27
 8000fd4:	dc00      	bgt.n	8000fd8 <__aeabi_fsub+0xe4>
 8000fd6:	e0fb      	b.n	80011d0 <__aeabi_fsub+0x2dc>
 8000fd8:	2305      	movs	r3, #5
 8000fda:	4698      	mov	r8, r3
 8000fdc:	002b      	movs	r3, r5
 8000fde:	44c4      	add	ip, r8
 8000fe0:	4662      	mov	r2, ip
 8000fe2:	08d7      	lsrs	r7, r2, #3
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d100      	bne.n	8000fea <__aeabi_fsub+0xf6>
 8000fe8:	e095      	b.n	8001116 <__aeabi_fsub+0x222>
 8000fea:	027a      	lsls	r2, r7, #9
 8000fec:	0a52      	lsrs	r2, r2, #9
 8000fee:	b2d8      	uxtb	r0, r3
 8000ff0:	e7dc      	b.n	8000fac <__aeabi_fsub+0xb8>
 8000ff2:	002b      	movs	r3, r5
 8000ff4:	3bff      	subs	r3, #255	@ 0xff
 8000ff6:	4699      	mov	r9, r3
 8000ff8:	2900      	cmp	r1, #0
 8000ffa:	d118      	bne.n	800102e <__aeabi_fsub+0x13a>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	405e      	eors	r6, r3
 8001000:	42b4      	cmp	r4, r6
 8001002:	d100      	bne.n	8001006 <__aeabi_fsub+0x112>
 8001004:	e0ca      	b.n	800119c <__aeabi_fsub+0x2a8>
 8001006:	464b      	mov	r3, r9
 8001008:	2b00      	cmp	r3, #0
 800100a:	d02d      	beq.n	8001068 <__aeabi_fsub+0x174>
 800100c:	2d00      	cmp	r5, #0
 800100e:	d000      	beq.n	8001012 <__aeabi_fsub+0x11e>
 8001010:	e13c      	b.n	800128c <__aeabi_fsub+0x398>
 8001012:	23ff      	movs	r3, #255	@ 0xff
 8001014:	4664      	mov	r4, ip
 8001016:	2c00      	cmp	r4, #0
 8001018:	d100      	bne.n	800101c <__aeabi_fsub+0x128>
 800101a:	e15f      	b.n	80012dc <__aeabi_fsub+0x3e8>
 800101c:	1e5d      	subs	r5, r3, #1
 800101e:	2b01      	cmp	r3, #1
 8001020:	d100      	bne.n	8001024 <__aeabi_fsub+0x130>
 8001022:	e174      	b.n	800130e <__aeabi_fsub+0x41a>
 8001024:	0034      	movs	r4, r6
 8001026:	2bff      	cmp	r3, #255	@ 0xff
 8001028:	d074      	beq.n	8001114 <__aeabi_fsub+0x220>
 800102a:	002b      	movs	r3, r5
 800102c:	e103      	b.n	8001236 <__aeabi_fsub+0x342>
 800102e:	42b4      	cmp	r4, r6
 8001030:	d100      	bne.n	8001034 <__aeabi_fsub+0x140>
 8001032:	e09c      	b.n	800116e <__aeabi_fsub+0x27a>
 8001034:	2b00      	cmp	r3, #0
 8001036:	d017      	beq.n	8001068 <__aeabi_fsub+0x174>
 8001038:	2d00      	cmp	r5, #0
 800103a:	d0ea      	beq.n	8001012 <__aeabi_fsub+0x11e>
 800103c:	0007      	movs	r7, r0
 800103e:	0034      	movs	r4, r6
 8001040:	e06c      	b.n	800111c <__aeabi_fsub+0x228>
 8001042:	2900      	cmp	r1, #0
 8001044:	d0cc      	beq.n	8000fe0 <__aeabi_fsub+0xec>
 8001046:	1e5a      	subs	r2, r3, #1
 8001048:	2b01      	cmp	r3, #1
 800104a:	d02b      	beq.n	80010a4 <__aeabi_fsub+0x1b0>
 800104c:	2bff      	cmp	r3, #255	@ 0xff
 800104e:	d062      	beq.n	8001116 <__aeabi_fsub+0x222>
 8001050:	0013      	movs	r3, r2
 8001052:	e773      	b.n	8000f3c <__aeabi_fsub+0x48>
 8001054:	2900      	cmp	r1, #0
 8001056:	d0c3      	beq.n	8000fe0 <__aeabi_fsub+0xec>
 8001058:	1e5a      	subs	r2, r3, #1
 800105a:	2b01      	cmp	r3, #1
 800105c:	d100      	bne.n	8001060 <__aeabi_fsub+0x16c>
 800105e:	e11e      	b.n	800129e <__aeabi_fsub+0x3aa>
 8001060:	2bff      	cmp	r3, #255	@ 0xff
 8001062:	d058      	beq.n	8001116 <__aeabi_fsub+0x222>
 8001064:	0013      	movs	r3, r2
 8001066:	e7b4      	b.n	8000fd2 <__aeabi_fsub+0xde>
 8001068:	22fe      	movs	r2, #254	@ 0xfe
 800106a:	1c6b      	adds	r3, r5, #1
 800106c:	421a      	tst	r2, r3
 800106e:	d10d      	bne.n	800108c <__aeabi_fsub+0x198>
 8001070:	2d00      	cmp	r5, #0
 8001072:	d060      	beq.n	8001136 <__aeabi_fsub+0x242>
 8001074:	4663      	mov	r3, ip
 8001076:	2b00      	cmp	r3, #0
 8001078:	d000      	beq.n	800107c <__aeabi_fsub+0x188>
 800107a:	e120      	b.n	80012be <__aeabi_fsub+0x3ca>
 800107c:	2900      	cmp	r1, #0
 800107e:	d000      	beq.n	8001082 <__aeabi_fsub+0x18e>
 8001080:	e128      	b.n	80012d4 <__aeabi_fsub+0x3e0>
 8001082:	2280      	movs	r2, #128	@ 0x80
 8001084:	2400      	movs	r4, #0
 8001086:	20ff      	movs	r0, #255	@ 0xff
 8001088:	03d2      	lsls	r2, r2, #15
 800108a:	e78f      	b.n	8000fac <__aeabi_fsub+0xb8>
 800108c:	4663      	mov	r3, ip
 800108e:	1a5f      	subs	r7, r3, r1
 8001090:	017b      	lsls	r3, r7, #5
 8001092:	d500      	bpl.n	8001096 <__aeabi_fsub+0x1a2>
 8001094:	e0fe      	b.n	8001294 <__aeabi_fsub+0x3a0>
 8001096:	2f00      	cmp	r7, #0
 8001098:	d000      	beq.n	800109c <__aeabi_fsub+0x1a8>
 800109a:	e765      	b.n	8000f68 <__aeabi_fsub+0x74>
 800109c:	2400      	movs	r4, #0
 800109e:	2000      	movs	r0, #0
 80010a0:	2200      	movs	r2, #0
 80010a2:	e783      	b.n	8000fac <__aeabi_fsub+0xb8>
 80010a4:	4663      	mov	r3, ip
 80010a6:	1a59      	subs	r1, r3, r1
 80010a8:	014b      	lsls	r3, r1, #5
 80010aa:	d400      	bmi.n	80010ae <__aeabi_fsub+0x1ba>
 80010ac:	e119      	b.n	80012e2 <__aeabi_fsub+0x3ee>
 80010ae:	018f      	lsls	r7, r1, #6
 80010b0:	09bf      	lsrs	r7, r7, #6
 80010b2:	0038      	movs	r0, r7
 80010b4:	f000 f9e8 	bl	8001488 <__clzsi2>
 80010b8:	003b      	movs	r3, r7
 80010ba:	3805      	subs	r0, #5
 80010bc:	4083      	lsls	r3, r0
 80010be:	2501      	movs	r5, #1
 80010c0:	2220      	movs	r2, #32
 80010c2:	1b40      	subs	r0, r0, r5
 80010c4:	3001      	adds	r0, #1
 80010c6:	1a12      	subs	r2, r2, r0
 80010c8:	0019      	movs	r1, r3
 80010ca:	4093      	lsls	r3, r2
 80010cc:	40c1      	lsrs	r1, r0
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	4193      	sbcs	r3, r2
 80010d2:	4319      	orrs	r1, r3
 80010d4:	468c      	mov	ip, r1
 80010d6:	1e0b      	subs	r3, r1, #0
 80010d8:	d0e1      	beq.n	800109e <__aeabi_fsub+0x1aa>
 80010da:	075b      	lsls	r3, r3, #29
 80010dc:	d100      	bne.n	80010e0 <__aeabi_fsub+0x1ec>
 80010de:	e152      	b.n	8001386 <__aeabi_fsub+0x492>
 80010e0:	230f      	movs	r3, #15
 80010e2:	2500      	movs	r5, #0
 80010e4:	400b      	ands	r3, r1
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	d000      	beq.n	80010ec <__aeabi_fsub+0x1f8>
 80010ea:	e752      	b.n	8000f92 <__aeabi_fsub+0x9e>
 80010ec:	2001      	movs	r0, #1
 80010ee:	014a      	lsls	r2, r1, #5
 80010f0:	d400      	bmi.n	80010f4 <__aeabi_fsub+0x200>
 80010f2:	e092      	b.n	800121a <__aeabi_fsub+0x326>
 80010f4:	b2c0      	uxtb	r0, r0
 80010f6:	4663      	mov	r3, ip
 80010f8:	019a      	lsls	r2, r3, #6
 80010fa:	0a52      	lsrs	r2, r2, #9
 80010fc:	e756      	b.n	8000fac <__aeabi_fsub+0xb8>
 80010fe:	4663      	mov	r3, ip
 8001100:	075b      	lsls	r3, r3, #29
 8001102:	d005      	beq.n	8001110 <__aeabi_fsub+0x21c>
 8001104:	230f      	movs	r3, #15
 8001106:	4662      	mov	r2, ip
 8001108:	4013      	ands	r3, r2
 800110a:	2b04      	cmp	r3, #4
 800110c:	d000      	beq.n	8001110 <__aeabi_fsub+0x21c>
 800110e:	e740      	b.n	8000f92 <__aeabi_fsub+0x9e>
 8001110:	002b      	movs	r3, r5
 8001112:	e765      	b.n	8000fe0 <__aeabi_fsub+0xec>
 8001114:	0007      	movs	r7, r0
 8001116:	2f00      	cmp	r7, #0
 8001118:	d100      	bne.n	800111c <__aeabi_fsub+0x228>
 800111a:	e745      	b.n	8000fa8 <__aeabi_fsub+0xb4>
 800111c:	2280      	movs	r2, #128	@ 0x80
 800111e:	03d2      	lsls	r2, r2, #15
 8001120:	433a      	orrs	r2, r7
 8001122:	0252      	lsls	r2, r2, #9
 8001124:	20ff      	movs	r0, #255	@ 0xff
 8001126:	0a52      	lsrs	r2, r2, #9
 8001128:	e740      	b.n	8000fac <__aeabi_fsub+0xb8>
 800112a:	2b00      	cmp	r3, #0
 800112c:	d179      	bne.n	8001222 <__aeabi_fsub+0x32e>
 800112e:	22fe      	movs	r2, #254	@ 0xfe
 8001130:	1c6b      	adds	r3, r5, #1
 8001132:	421a      	tst	r2, r3
 8001134:	d1aa      	bne.n	800108c <__aeabi_fsub+0x198>
 8001136:	4663      	mov	r3, ip
 8001138:	2b00      	cmp	r3, #0
 800113a:	d100      	bne.n	800113e <__aeabi_fsub+0x24a>
 800113c:	e0f5      	b.n	800132a <__aeabi_fsub+0x436>
 800113e:	2900      	cmp	r1, #0
 8001140:	d100      	bne.n	8001144 <__aeabi_fsub+0x250>
 8001142:	e0d1      	b.n	80012e8 <__aeabi_fsub+0x3f4>
 8001144:	1a5f      	subs	r7, r3, r1
 8001146:	2380      	movs	r3, #128	@ 0x80
 8001148:	04db      	lsls	r3, r3, #19
 800114a:	421f      	tst	r7, r3
 800114c:	d100      	bne.n	8001150 <__aeabi_fsub+0x25c>
 800114e:	e10e      	b.n	800136e <__aeabi_fsub+0x47a>
 8001150:	4662      	mov	r2, ip
 8001152:	2401      	movs	r4, #1
 8001154:	1a8a      	subs	r2, r1, r2
 8001156:	4694      	mov	ip, r2
 8001158:	2000      	movs	r0, #0
 800115a:	4034      	ands	r4, r6
 800115c:	2a00      	cmp	r2, #0
 800115e:	d100      	bne.n	8001162 <__aeabi_fsub+0x26e>
 8001160:	e724      	b.n	8000fac <__aeabi_fsub+0xb8>
 8001162:	2001      	movs	r0, #1
 8001164:	421a      	tst	r2, r3
 8001166:	d1c6      	bne.n	80010f6 <__aeabi_fsub+0x202>
 8001168:	2300      	movs	r3, #0
 800116a:	08d7      	lsrs	r7, r2, #3
 800116c:	e73d      	b.n	8000fea <__aeabi_fsub+0xf6>
 800116e:	2b00      	cmp	r3, #0
 8001170:	d017      	beq.n	80011a2 <__aeabi_fsub+0x2ae>
 8001172:	2d00      	cmp	r5, #0
 8001174:	d000      	beq.n	8001178 <__aeabi_fsub+0x284>
 8001176:	e0af      	b.n	80012d8 <__aeabi_fsub+0x3e4>
 8001178:	23ff      	movs	r3, #255	@ 0xff
 800117a:	4665      	mov	r5, ip
 800117c:	2d00      	cmp	r5, #0
 800117e:	d100      	bne.n	8001182 <__aeabi_fsub+0x28e>
 8001180:	e0ad      	b.n	80012de <__aeabi_fsub+0x3ea>
 8001182:	1e5e      	subs	r6, r3, #1
 8001184:	2b01      	cmp	r3, #1
 8001186:	d100      	bne.n	800118a <__aeabi_fsub+0x296>
 8001188:	e089      	b.n	800129e <__aeabi_fsub+0x3aa>
 800118a:	2bff      	cmp	r3, #255	@ 0xff
 800118c:	d0c2      	beq.n	8001114 <__aeabi_fsub+0x220>
 800118e:	2e1b      	cmp	r6, #27
 8001190:	dc00      	bgt.n	8001194 <__aeabi_fsub+0x2a0>
 8001192:	e0ab      	b.n	80012ec <__aeabi_fsub+0x3f8>
 8001194:	1d4b      	adds	r3, r1, #5
 8001196:	469c      	mov	ip, r3
 8001198:	0013      	movs	r3, r2
 800119a:	e721      	b.n	8000fe0 <__aeabi_fsub+0xec>
 800119c:	464b      	mov	r3, r9
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d170      	bne.n	8001284 <__aeabi_fsub+0x390>
 80011a2:	22fe      	movs	r2, #254	@ 0xfe
 80011a4:	1c6b      	adds	r3, r5, #1
 80011a6:	421a      	tst	r2, r3
 80011a8:	d15e      	bne.n	8001268 <__aeabi_fsub+0x374>
 80011aa:	2d00      	cmp	r5, #0
 80011ac:	d000      	beq.n	80011b0 <__aeabi_fsub+0x2bc>
 80011ae:	e0c3      	b.n	8001338 <__aeabi_fsub+0x444>
 80011b0:	4663      	mov	r3, ip
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d100      	bne.n	80011b8 <__aeabi_fsub+0x2c4>
 80011b6:	e0d0      	b.n	800135a <__aeabi_fsub+0x466>
 80011b8:	2900      	cmp	r1, #0
 80011ba:	d100      	bne.n	80011be <__aeabi_fsub+0x2ca>
 80011bc:	e094      	b.n	80012e8 <__aeabi_fsub+0x3f4>
 80011be:	000a      	movs	r2, r1
 80011c0:	4462      	add	r2, ip
 80011c2:	0153      	lsls	r3, r2, #5
 80011c4:	d400      	bmi.n	80011c8 <__aeabi_fsub+0x2d4>
 80011c6:	e0d8      	b.n	800137a <__aeabi_fsub+0x486>
 80011c8:	0192      	lsls	r2, r2, #6
 80011ca:	2001      	movs	r0, #1
 80011cc:	0a52      	lsrs	r2, r2, #9
 80011ce:	e6ed      	b.n	8000fac <__aeabi_fsub+0xb8>
 80011d0:	0008      	movs	r0, r1
 80011d2:	2220      	movs	r2, #32
 80011d4:	40d8      	lsrs	r0, r3
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	4099      	lsls	r1, r3
 80011da:	000b      	movs	r3, r1
 80011dc:	1e5a      	subs	r2, r3, #1
 80011de:	4193      	sbcs	r3, r2
 80011e0:	4303      	orrs	r3, r0
 80011e2:	449c      	add	ip, r3
 80011e4:	4663      	mov	r3, ip
 80011e6:	015b      	lsls	r3, r3, #5
 80011e8:	d589      	bpl.n	80010fe <__aeabi_fsub+0x20a>
 80011ea:	3501      	adds	r5, #1
 80011ec:	2dff      	cmp	r5, #255	@ 0xff
 80011ee:	d100      	bne.n	80011f2 <__aeabi_fsub+0x2fe>
 80011f0:	e6da      	b.n	8000fa8 <__aeabi_fsub+0xb4>
 80011f2:	4662      	mov	r2, ip
 80011f4:	2301      	movs	r3, #1
 80011f6:	4919      	ldr	r1, [pc, #100]	@ (800125c <__aeabi_fsub+0x368>)
 80011f8:	4013      	ands	r3, r2
 80011fa:	0852      	lsrs	r2, r2, #1
 80011fc:	400a      	ands	r2, r1
 80011fe:	431a      	orrs	r2, r3
 8001200:	0013      	movs	r3, r2
 8001202:	4694      	mov	ip, r2
 8001204:	075b      	lsls	r3, r3, #29
 8001206:	d004      	beq.n	8001212 <__aeabi_fsub+0x31e>
 8001208:	230f      	movs	r3, #15
 800120a:	4013      	ands	r3, r2
 800120c:	2b04      	cmp	r3, #4
 800120e:	d000      	beq.n	8001212 <__aeabi_fsub+0x31e>
 8001210:	e6bf      	b.n	8000f92 <__aeabi_fsub+0x9e>
 8001212:	4663      	mov	r3, ip
 8001214:	015b      	lsls	r3, r3, #5
 8001216:	d500      	bpl.n	800121a <__aeabi_fsub+0x326>
 8001218:	e6c2      	b.n	8000fa0 <__aeabi_fsub+0xac>
 800121a:	4663      	mov	r3, ip
 800121c:	08df      	lsrs	r7, r3, #3
 800121e:	002b      	movs	r3, r5
 8001220:	e6e3      	b.n	8000fea <__aeabi_fsub+0xf6>
 8001222:	1b53      	subs	r3, r2, r5
 8001224:	2d00      	cmp	r5, #0
 8001226:	d100      	bne.n	800122a <__aeabi_fsub+0x336>
 8001228:	e6f4      	b.n	8001014 <__aeabi_fsub+0x120>
 800122a:	2080      	movs	r0, #128	@ 0x80
 800122c:	4664      	mov	r4, ip
 800122e:	04c0      	lsls	r0, r0, #19
 8001230:	4304      	orrs	r4, r0
 8001232:	46a4      	mov	ip, r4
 8001234:	0034      	movs	r4, r6
 8001236:	2001      	movs	r0, #1
 8001238:	2b1b      	cmp	r3, #27
 800123a:	dc09      	bgt.n	8001250 <__aeabi_fsub+0x35c>
 800123c:	2520      	movs	r5, #32
 800123e:	4660      	mov	r0, ip
 8001240:	40d8      	lsrs	r0, r3
 8001242:	1aeb      	subs	r3, r5, r3
 8001244:	4665      	mov	r5, ip
 8001246:	409d      	lsls	r5, r3
 8001248:	002b      	movs	r3, r5
 800124a:	1e5d      	subs	r5, r3, #1
 800124c:	41ab      	sbcs	r3, r5
 800124e:	4318      	orrs	r0, r3
 8001250:	1a0b      	subs	r3, r1, r0
 8001252:	469c      	mov	ip, r3
 8001254:	0015      	movs	r5, r2
 8001256:	e680      	b.n	8000f5a <__aeabi_fsub+0x66>
 8001258:	fbffffff 	.word	0xfbffffff
 800125c:	7dffffff 	.word	0x7dffffff
 8001260:	22fe      	movs	r2, #254	@ 0xfe
 8001262:	1c6b      	adds	r3, r5, #1
 8001264:	4213      	tst	r3, r2
 8001266:	d0a3      	beq.n	80011b0 <__aeabi_fsub+0x2bc>
 8001268:	2bff      	cmp	r3, #255	@ 0xff
 800126a:	d100      	bne.n	800126e <__aeabi_fsub+0x37a>
 800126c:	e69c      	b.n	8000fa8 <__aeabi_fsub+0xb4>
 800126e:	4461      	add	r1, ip
 8001270:	0849      	lsrs	r1, r1, #1
 8001272:	074a      	lsls	r2, r1, #29
 8001274:	d049      	beq.n	800130a <__aeabi_fsub+0x416>
 8001276:	220f      	movs	r2, #15
 8001278:	400a      	ands	r2, r1
 800127a:	2a04      	cmp	r2, #4
 800127c:	d045      	beq.n	800130a <__aeabi_fsub+0x416>
 800127e:	1d0a      	adds	r2, r1, #4
 8001280:	4694      	mov	ip, r2
 8001282:	e6ad      	b.n	8000fe0 <__aeabi_fsub+0xec>
 8001284:	2d00      	cmp	r5, #0
 8001286:	d100      	bne.n	800128a <__aeabi_fsub+0x396>
 8001288:	e776      	b.n	8001178 <__aeabi_fsub+0x284>
 800128a:	e68d      	b.n	8000fa8 <__aeabi_fsub+0xb4>
 800128c:	0034      	movs	r4, r6
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2200      	movs	r2, #0
 8001292:	e68b      	b.n	8000fac <__aeabi_fsub+0xb8>
 8001294:	4663      	mov	r3, ip
 8001296:	2401      	movs	r4, #1
 8001298:	1acf      	subs	r7, r1, r3
 800129a:	4034      	ands	r4, r6
 800129c:	e664      	b.n	8000f68 <__aeabi_fsub+0x74>
 800129e:	4461      	add	r1, ip
 80012a0:	014b      	lsls	r3, r1, #5
 80012a2:	d56d      	bpl.n	8001380 <__aeabi_fsub+0x48c>
 80012a4:	0848      	lsrs	r0, r1, #1
 80012a6:	4944      	ldr	r1, [pc, #272]	@ (80013b8 <__aeabi_fsub+0x4c4>)
 80012a8:	4001      	ands	r1, r0
 80012aa:	0743      	lsls	r3, r0, #29
 80012ac:	d02c      	beq.n	8001308 <__aeabi_fsub+0x414>
 80012ae:	230f      	movs	r3, #15
 80012b0:	4003      	ands	r3, r0
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d028      	beq.n	8001308 <__aeabi_fsub+0x414>
 80012b6:	1d0b      	adds	r3, r1, #4
 80012b8:	469c      	mov	ip, r3
 80012ba:	2302      	movs	r3, #2
 80012bc:	e690      	b.n	8000fe0 <__aeabi_fsub+0xec>
 80012be:	2900      	cmp	r1, #0
 80012c0:	d100      	bne.n	80012c4 <__aeabi_fsub+0x3d0>
 80012c2:	e72b      	b.n	800111c <__aeabi_fsub+0x228>
 80012c4:	2380      	movs	r3, #128	@ 0x80
 80012c6:	03db      	lsls	r3, r3, #15
 80012c8:	429f      	cmp	r7, r3
 80012ca:	d200      	bcs.n	80012ce <__aeabi_fsub+0x3da>
 80012cc:	e726      	b.n	800111c <__aeabi_fsub+0x228>
 80012ce:	4298      	cmp	r0, r3
 80012d0:	d300      	bcc.n	80012d4 <__aeabi_fsub+0x3e0>
 80012d2:	e723      	b.n	800111c <__aeabi_fsub+0x228>
 80012d4:	2401      	movs	r4, #1
 80012d6:	4034      	ands	r4, r6
 80012d8:	0007      	movs	r7, r0
 80012da:	e71f      	b.n	800111c <__aeabi_fsub+0x228>
 80012dc:	0034      	movs	r4, r6
 80012de:	468c      	mov	ip, r1
 80012e0:	e67e      	b.n	8000fe0 <__aeabi_fsub+0xec>
 80012e2:	2301      	movs	r3, #1
 80012e4:	08cf      	lsrs	r7, r1, #3
 80012e6:	e680      	b.n	8000fea <__aeabi_fsub+0xf6>
 80012e8:	2300      	movs	r3, #0
 80012ea:	e67e      	b.n	8000fea <__aeabi_fsub+0xf6>
 80012ec:	2020      	movs	r0, #32
 80012ee:	4665      	mov	r5, ip
 80012f0:	1b80      	subs	r0, r0, r6
 80012f2:	4085      	lsls	r5, r0
 80012f4:	4663      	mov	r3, ip
 80012f6:	0028      	movs	r0, r5
 80012f8:	40f3      	lsrs	r3, r6
 80012fa:	1e45      	subs	r5, r0, #1
 80012fc:	41a8      	sbcs	r0, r5
 80012fe:	4303      	orrs	r3, r0
 8001300:	469c      	mov	ip, r3
 8001302:	0015      	movs	r5, r2
 8001304:	448c      	add	ip, r1
 8001306:	e76d      	b.n	80011e4 <__aeabi_fsub+0x2f0>
 8001308:	2302      	movs	r3, #2
 800130a:	08cf      	lsrs	r7, r1, #3
 800130c:	e66d      	b.n	8000fea <__aeabi_fsub+0xf6>
 800130e:	1b0f      	subs	r7, r1, r4
 8001310:	017b      	lsls	r3, r7, #5
 8001312:	d528      	bpl.n	8001366 <__aeabi_fsub+0x472>
 8001314:	01bf      	lsls	r7, r7, #6
 8001316:	09bf      	lsrs	r7, r7, #6
 8001318:	0038      	movs	r0, r7
 800131a:	f000 f8b5 	bl	8001488 <__clzsi2>
 800131e:	003b      	movs	r3, r7
 8001320:	3805      	subs	r0, #5
 8001322:	4083      	lsls	r3, r0
 8001324:	0034      	movs	r4, r6
 8001326:	2501      	movs	r5, #1
 8001328:	e6ca      	b.n	80010c0 <__aeabi_fsub+0x1cc>
 800132a:	2900      	cmp	r1, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x43c>
 800132e:	e6b5      	b.n	800109c <__aeabi_fsub+0x1a8>
 8001330:	2401      	movs	r4, #1
 8001332:	0007      	movs	r7, r0
 8001334:	4034      	ands	r4, r6
 8001336:	e658      	b.n	8000fea <__aeabi_fsub+0xf6>
 8001338:	4663      	mov	r3, ip
 800133a:	2b00      	cmp	r3, #0
 800133c:	d100      	bne.n	8001340 <__aeabi_fsub+0x44c>
 800133e:	e6e9      	b.n	8001114 <__aeabi_fsub+0x220>
 8001340:	2900      	cmp	r1, #0
 8001342:	d100      	bne.n	8001346 <__aeabi_fsub+0x452>
 8001344:	e6ea      	b.n	800111c <__aeabi_fsub+0x228>
 8001346:	2380      	movs	r3, #128	@ 0x80
 8001348:	03db      	lsls	r3, r3, #15
 800134a:	429f      	cmp	r7, r3
 800134c:	d200      	bcs.n	8001350 <__aeabi_fsub+0x45c>
 800134e:	e6e5      	b.n	800111c <__aeabi_fsub+0x228>
 8001350:	4298      	cmp	r0, r3
 8001352:	d300      	bcc.n	8001356 <__aeabi_fsub+0x462>
 8001354:	e6e2      	b.n	800111c <__aeabi_fsub+0x228>
 8001356:	0007      	movs	r7, r0
 8001358:	e6e0      	b.n	800111c <__aeabi_fsub+0x228>
 800135a:	2900      	cmp	r1, #0
 800135c:	d100      	bne.n	8001360 <__aeabi_fsub+0x46c>
 800135e:	e69e      	b.n	800109e <__aeabi_fsub+0x1aa>
 8001360:	2300      	movs	r3, #0
 8001362:	08cf      	lsrs	r7, r1, #3
 8001364:	e641      	b.n	8000fea <__aeabi_fsub+0xf6>
 8001366:	0034      	movs	r4, r6
 8001368:	2301      	movs	r3, #1
 800136a:	08ff      	lsrs	r7, r7, #3
 800136c:	e63d      	b.n	8000fea <__aeabi_fsub+0xf6>
 800136e:	2f00      	cmp	r7, #0
 8001370:	d100      	bne.n	8001374 <__aeabi_fsub+0x480>
 8001372:	e693      	b.n	800109c <__aeabi_fsub+0x1a8>
 8001374:	2300      	movs	r3, #0
 8001376:	08ff      	lsrs	r7, r7, #3
 8001378:	e637      	b.n	8000fea <__aeabi_fsub+0xf6>
 800137a:	2300      	movs	r3, #0
 800137c:	08d7      	lsrs	r7, r2, #3
 800137e:	e634      	b.n	8000fea <__aeabi_fsub+0xf6>
 8001380:	2301      	movs	r3, #1
 8001382:	08cf      	lsrs	r7, r1, #3
 8001384:	e631      	b.n	8000fea <__aeabi_fsub+0xf6>
 8001386:	2280      	movs	r2, #128	@ 0x80
 8001388:	000b      	movs	r3, r1
 800138a:	04d2      	lsls	r2, r2, #19
 800138c:	2001      	movs	r0, #1
 800138e:	4013      	ands	r3, r2
 8001390:	4211      	tst	r1, r2
 8001392:	d000      	beq.n	8001396 <__aeabi_fsub+0x4a2>
 8001394:	e6ae      	b.n	80010f4 <__aeabi_fsub+0x200>
 8001396:	08cf      	lsrs	r7, r1, #3
 8001398:	e627      	b.n	8000fea <__aeabi_fsub+0xf6>
 800139a:	2b00      	cmp	r3, #0
 800139c:	d100      	bne.n	80013a0 <__aeabi_fsub+0x4ac>
 800139e:	e75f      	b.n	8001260 <__aeabi_fsub+0x36c>
 80013a0:	1b56      	subs	r6, r2, r5
 80013a2:	2d00      	cmp	r5, #0
 80013a4:	d101      	bne.n	80013aa <__aeabi_fsub+0x4b6>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6e7      	b.n	800117a <__aeabi_fsub+0x286>
 80013aa:	2380      	movs	r3, #128	@ 0x80
 80013ac:	4660      	mov	r0, ip
 80013ae:	04db      	lsls	r3, r3, #19
 80013b0:	4318      	orrs	r0, r3
 80013b2:	4684      	mov	ip, r0
 80013b4:	e6eb      	b.n	800118e <__aeabi_fsub+0x29a>
 80013b6:	46c0      	nop			@ (mov r8, r8)
 80013b8:	7dffffff 	.word	0x7dffffff

080013bc <__aeabi_f2iz>:
 80013bc:	0241      	lsls	r1, r0, #9
 80013be:	0042      	lsls	r2, r0, #1
 80013c0:	0fc3      	lsrs	r3, r0, #31
 80013c2:	0a49      	lsrs	r1, r1, #9
 80013c4:	2000      	movs	r0, #0
 80013c6:	0e12      	lsrs	r2, r2, #24
 80013c8:	2a7e      	cmp	r2, #126	@ 0x7e
 80013ca:	dd03      	ble.n	80013d4 <__aeabi_f2iz+0x18>
 80013cc:	2a9d      	cmp	r2, #157	@ 0x9d
 80013ce:	dd02      	ble.n	80013d6 <__aeabi_f2iz+0x1a>
 80013d0:	4a09      	ldr	r2, [pc, #36]	@ (80013f8 <__aeabi_f2iz+0x3c>)
 80013d2:	1898      	adds	r0, r3, r2
 80013d4:	4770      	bx	lr
 80013d6:	2080      	movs	r0, #128	@ 0x80
 80013d8:	0400      	lsls	r0, r0, #16
 80013da:	4301      	orrs	r1, r0
 80013dc:	2a95      	cmp	r2, #149	@ 0x95
 80013de:	dc07      	bgt.n	80013f0 <__aeabi_f2iz+0x34>
 80013e0:	2096      	movs	r0, #150	@ 0x96
 80013e2:	1a82      	subs	r2, r0, r2
 80013e4:	40d1      	lsrs	r1, r2
 80013e6:	4248      	negs	r0, r1
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d1f3      	bne.n	80013d4 <__aeabi_f2iz+0x18>
 80013ec:	0008      	movs	r0, r1
 80013ee:	e7f1      	b.n	80013d4 <__aeabi_f2iz+0x18>
 80013f0:	3a96      	subs	r2, #150	@ 0x96
 80013f2:	4091      	lsls	r1, r2
 80013f4:	e7f7      	b.n	80013e6 <__aeabi_f2iz+0x2a>
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	7fffffff 	.word	0x7fffffff

080013fc <__aeabi_ui2f>:
 80013fc:	b510      	push	{r4, lr}
 80013fe:	1e04      	subs	r4, r0, #0
 8001400:	d00d      	beq.n	800141e <__aeabi_ui2f+0x22>
 8001402:	f000 f841 	bl	8001488 <__clzsi2>
 8001406:	239e      	movs	r3, #158	@ 0x9e
 8001408:	1a1b      	subs	r3, r3, r0
 800140a:	2b96      	cmp	r3, #150	@ 0x96
 800140c:	dc0c      	bgt.n	8001428 <__aeabi_ui2f+0x2c>
 800140e:	2808      	cmp	r0, #8
 8001410:	d034      	beq.n	800147c <__aeabi_ui2f+0x80>
 8001412:	3808      	subs	r0, #8
 8001414:	4084      	lsls	r4, r0
 8001416:	0264      	lsls	r4, r4, #9
 8001418:	0a64      	lsrs	r4, r4, #9
 800141a:	b2d8      	uxtb	r0, r3
 800141c:	e001      	b.n	8001422 <__aeabi_ui2f+0x26>
 800141e:	2000      	movs	r0, #0
 8001420:	2400      	movs	r4, #0
 8001422:	05c0      	lsls	r0, r0, #23
 8001424:	4320      	orrs	r0, r4
 8001426:	bd10      	pop	{r4, pc}
 8001428:	2b99      	cmp	r3, #153	@ 0x99
 800142a:	dc13      	bgt.n	8001454 <__aeabi_ui2f+0x58>
 800142c:	1f42      	subs	r2, r0, #5
 800142e:	4094      	lsls	r4, r2
 8001430:	4a14      	ldr	r2, [pc, #80]	@ (8001484 <__aeabi_ui2f+0x88>)
 8001432:	4022      	ands	r2, r4
 8001434:	0761      	lsls	r1, r4, #29
 8001436:	d01c      	beq.n	8001472 <__aeabi_ui2f+0x76>
 8001438:	210f      	movs	r1, #15
 800143a:	4021      	ands	r1, r4
 800143c:	2904      	cmp	r1, #4
 800143e:	d018      	beq.n	8001472 <__aeabi_ui2f+0x76>
 8001440:	3204      	adds	r2, #4
 8001442:	08d4      	lsrs	r4, r2, #3
 8001444:	0152      	lsls	r2, r2, #5
 8001446:	d515      	bpl.n	8001474 <__aeabi_ui2f+0x78>
 8001448:	239f      	movs	r3, #159	@ 0x9f
 800144a:	0264      	lsls	r4, r4, #9
 800144c:	1a18      	subs	r0, r3, r0
 800144e:	0a64      	lsrs	r4, r4, #9
 8001450:	b2c0      	uxtb	r0, r0
 8001452:	e7e6      	b.n	8001422 <__aeabi_ui2f+0x26>
 8001454:	0002      	movs	r2, r0
 8001456:	0021      	movs	r1, r4
 8001458:	321b      	adds	r2, #27
 800145a:	4091      	lsls	r1, r2
 800145c:	000a      	movs	r2, r1
 800145e:	1e51      	subs	r1, r2, #1
 8001460:	418a      	sbcs	r2, r1
 8001462:	2105      	movs	r1, #5
 8001464:	1a09      	subs	r1, r1, r0
 8001466:	40cc      	lsrs	r4, r1
 8001468:	4314      	orrs	r4, r2
 800146a:	4a06      	ldr	r2, [pc, #24]	@ (8001484 <__aeabi_ui2f+0x88>)
 800146c:	4022      	ands	r2, r4
 800146e:	0761      	lsls	r1, r4, #29
 8001470:	d1e2      	bne.n	8001438 <__aeabi_ui2f+0x3c>
 8001472:	08d4      	lsrs	r4, r2, #3
 8001474:	0264      	lsls	r4, r4, #9
 8001476:	0a64      	lsrs	r4, r4, #9
 8001478:	b2d8      	uxtb	r0, r3
 800147a:	e7d2      	b.n	8001422 <__aeabi_ui2f+0x26>
 800147c:	0264      	lsls	r4, r4, #9
 800147e:	0a64      	lsrs	r4, r4, #9
 8001480:	308e      	adds	r0, #142	@ 0x8e
 8001482:	e7ce      	b.n	8001422 <__aeabi_ui2f+0x26>
 8001484:	fbffffff 	.word	0xfbffffff

08001488 <__clzsi2>:
 8001488:	211c      	movs	r1, #28
 800148a:	2301      	movs	r3, #1
 800148c:	041b      	lsls	r3, r3, #16
 800148e:	4298      	cmp	r0, r3
 8001490:	d301      	bcc.n	8001496 <__clzsi2+0xe>
 8001492:	0c00      	lsrs	r0, r0, #16
 8001494:	3910      	subs	r1, #16
 8001496:	0a1b      	lsrs	r3, r3, #8
 8001498:	4298      	cmp	r0, r3
 800149a:	d301      	bcc.n	80014a0 <__clzsi2+0x18>
 800149c:	0a00      	lsrs	r0, r0, #8
 800149e:	3908      	subs	r1, #8
 80014a0:	091b      	lsrs	r3, r3, #4
 80014a2:	4298      	cmp	r0, r3
 80014a4:	d301      	bcc.n	80014aa <__clzsi2+0x22>
 80014a6:	0900      	lsrs	r0, r0, #4
 80014a8:	3904      	subs	r1, #4
 80014aa:	a202      	add	r2, pc, #8	@ (adr r2, 80014b4 <__clzsi2+0x2c>)
 80014ac:	5c10      	ldrb	r0, [r2, r0]
 80014ae:	1840      	adds	r0, r0, r1
 80014b0:	4770      	bx	lr
 80014b2:	46c0      	nop			@ (mov r8, r8)
 80014b4:	02020304 	.word	0x02020304
 80014b8:	01010101 	.word	0x01010101
	...

080014c4 <__clzdi2>:
 80014c4:	b510      	push	{r4, lr}
 80014c6:	2900      	cmp	r1, #0
 80014c8:	d103      	bne.n	80014d2 <__clzdi2+0xe>
 80014ca:	f7ff ffdd 	bl	8001488 <__clzsi2>
 80014ce:	3020      	adds	r0, #32
 80014d0:	e002      	b.n	80014d8 <__clzdi2+0x14>
 80014d2:	0008      	movs	r0, r1
 80014d4:	f7ff ffd8 	bl	8001488 <__clzsi2>
 80014d8:	bd10      	pop	{r4, pc}
 80014da:	46c0      	nop			@ (mov r8, r8)

080014dc <ATC_SendReceive>:
#include "lorawan.h"
#include <string.h>
#include <stdio.h>

static int ATC_SendReceive(ATC_HandleTypeDef *lora, const char *command, uint32_t command_len, char *response, uint32_t response_size, uint32_t timeout_ms, const char *expected_response)
{
 80014dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014de:	b089      	sub	sp, #36	@ 0x24
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
 80014e8:	603b      	str	r3, [r7, #0]
    if (lora == NULL || lora->huart == NULL || command == NULL || command_len == 0) {
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d009      	beq.n	8001504 <ATC_SendReceive+0x28>
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <ATC_SendReceive+0x28>
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <ATC_SendReceive+0x28>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <ATC_SendReceive+0x2e>
        return -1;
 8001504:	2301      	movs	r3, #1
 8001506:	425b      	negs	r3, r3
 8001508:	e054      	b.n	80015b4 <ATC_SendReceive+0xd8>
    }

    HAL_StatusTypeDef status = HAL_UART_Transmit(lora->huart, (uint8_t *)command, command_len, timeout_ms);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	6818      	ldr	r0, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	b29a      	uxth	r2, r3
 8001512:	2517      	movs	r5, #23
 8001514:	197c      	adds	r4, r7, r5
 8001516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001518:	68b9      	ldr	r1, [r7, #8]
 800151a:	f005 f831 	bl	8006580 <HAL_UART_Transmit>
 800151e:	0003      	movs	r3, r0
 8001520:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8001522:	197b      	adds	r3, r7, r5
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <ATC_SendReceive+0x54>
        return -2;
 800152a:	2302      	movs	r3, #2
 800152c:	425b      	negs	r3, r3
 800152e:	e041      	b.n	80015b4 <ATC_SendReceive+0xd8>
    }

    if (response != NULL && response_size > 0) {
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d02c      	beq.n	8001590 <ATC_SendReceive+0xb4>
 8001536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001538:	2b00      	cmp	r3, #0
 800153a:	d029      	beq.n	8001590 <ATC_SendReceive+0xb4>
        uint16_t rx_len = 0;
 800153c:	2514      	movs	r5, #20
 800153e:	197b      	adds	r3, r7, r5
 8001540:	2200      	movs	r2, #0
 8001542:	801a      	strh	r2, [r3, #0]
        memset(response, 0, response_size);
 8001544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	2100      	movs	r1, #0
 800154a:	0018      	movs	r0, r3
 800154c:	f005 ff38 	bl	80073c0 <memset>
        status = HAL_UARTEx_ReceiveToIdle(lora->huart, (uint8_t *)response, response_size - 1, &rx_len, timeout_ms);
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	6818      	ldr	r0, [r3, #0]
 8001554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001556:	b29b      	uxth	r3, r3
 8001558:	3b01      	subs	r3, #1
 800155a:	b29a      	uxth	r2, r3
 800155c:	2617      	movs	r6, #23
 800155e:	19bc      	adds	r4, r7, r6
 8001560:	197d      	adds	r5, r7, r5
 8001562:	6839      	ldr	r1, [r7, #0]
 8001564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	002b      	movs	r3, r5
 800156a:	f005 fd77 	bl	800705c <HAL_UARTEx_ReceiveToIdle>
 800156e:	0003      	movs	r3, r0
 8001570:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK) {
 8001572:	19bb      	adds	r3, r7, r6
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d002      	beq.n	8001580 <ATC_SendReceive+0xa4>
            return -4;
 800157a:	2304      	movs	r3, #4
 800157c:	425b      	negs	r3, r3
 800157e:	e019      	b.n	80015b4 <ATC_SendReceive+0xd8>
        }
        response[rx_len] = '\0';
 8001580:	2314      	movs	r3, #20
 8001582:	18fb      	adds	r3, r7, r3
 8001584:	881b      	ldrh	r3, [r3, #0]
 8001586:	001a      	movs	r2, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	189b      	adds	r3, r3, r2
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
    }

    if (expected_response && response) {
 8001590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00d      	beq.n	80015b2 <ATC_SendReceive+0xd6>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00a      	beq.n	80015b2 <ATC_SendReceive+0xd6>
        if (!strstr(response, expected_response)) {
 800159c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	0011      	movs	r1, r2
 80015a2:	0018      	movs	r0, r3
 80015a4:	f005 ff14 	bl	80073d0 <strstr>
 80015a8:	1e03      	subs	r3, r0, #0
 80015aa:	d102      	bne.n	80015b2 <ATC_SendReceive+0xd6>
            return -3;
 80015ac:	2303      	movs	r3, #3
 80015ae:	425b      	negs	r3, r3
 80015b0:	e000      	b.n	80015b4 <ATC_SendReceive+0xd8>
        }
    }

    return 0;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	0018      	movs	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	b007      	add	sp, #28
 80015ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080015bc <send_data_and_get_response>:

LoRaWAN_Error_t send_data_and_get_response(ATC_HandleTypeDef *lora, const char *data, char *response, uint32_t response_size, uint32_t timeout_ms, const char *expected_response)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b08b      	sub	sp, #44	@ 0x2c
 80015c0:	af04      	add	r7, sp, #16
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
    if (!lora || !lora->huart || !data || !response || response_size == 0) {
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d00c      	beq.n	80015ea <send_data_and_get_response+0x2e>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d008      	beq.n	80015ea <send_data_and_get_response+0x2e>
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <send_data_and_get_response+0x2e>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d002      	beq.n	80015ea <send_data_and_get_response+0x2e>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d102      	bne.n	80015f0 <send_data_and_get_response+0x34>
        return LORAWAN_ERROR_INVALID_PARAM;
 80015ea:	2301      	movs	r3, #1
 80015ec:	425b      	negs	r3, r3
 80015ee:	e03e      	b.n	800166e <send_data_and_get_response+0xb2>
    }

    ATC_SendReceive(lora, "AT\r\n", 4, response, response_size, timeout_ms, expected_response);
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	4921      	ldr	r1, [pc, #132]	@ (8001678 <send_data_and_get_response+0xbc>)
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f8:	9302      	str	r3, [sp, #8]
 80015fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	0013      	movs	r3, r2
 8001604:	2204      	movs	r2, #4
 8001606:	f7ff ff69 	bl	80014dc <ATC_SendReceive>
    HAL_Delay(300);
 800160a:	2396      	movs	r3, #150	@ 0x96
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	0018      	movs	r0, r3
 8001610:	f001 fc34 	bl	8002e7c <HAL_Delay>
    int result = ATC_SendReceive(lora, data, strlen(data), response, response_size, timeout_ms, expected_response);
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	0018      	movs	r0, r3
 8001618:	f7fe fd76 	bl	8000108 <strlen>
 800161c:	0004      	movs	r4, r0
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	0013      	movs	r3, r2
 8001632:	0022      	movs	r2, r4
 8001634:	f7ff ff52 	bl	80014dc <ATC_SendReceive>
 8001638:	0003      	movs	r3, r0
 800163a:	617b      	str	r3, [r7, #20]

    if (result == -1) {
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3301      	adds	r3, #1
 8001640:	d102      	bne.n	8001648 <send_data_and_get_response+0x8c>
        return LORAWAN_ERROR_INVALID_PARAM;
 8001642:	2301      	movs	r3, #1
 8001644:	425b      	negs	r3, r3
 8001646:	e012      	b.n	800166e <send_data_and_get_response+0xb2>
    } else if (result == -2) {
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	3302      	adds	r3, #2
 800164c:	d102      	bne.n	8001654 <send_data_and_get_response+0x98>
        return LORAWAN_ERROR_COMMUNICATION;
 800164e:	2302      	movs	r3, #2
 8001650:	425b      	negs	r3, r3
 8001652:	e00c      	b.n	800166e <send_data_and_get_response+0xb2>
    } else if (result == -3) {
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	3303      	adds	r3, #3
 8001658:	d102      	bne.n	8001660 <send_data_and_get_response+0xa4>
        return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 800165a:	2303      	movs	r3, #3
 800165c:	425b      	negs	r3, r3
 800165e:	e006      	b.n	800166e <send_data_and_get_response+0xb2>
    } else if (result == -4) {
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	3304      	adds	r3, #4
 8001664:	d102      	bne.n	800166c <send_data_and_get_response+0xb0>
        return LORAWAN_ERROR_TIMEOUT;
 8001666:	2304      	movs	r3, #4
 8001668:	425b      	negs	r3, r3
 800166a:	e000      	b.n	800166e <send_data_and_get_response+0xb2>
    }

    return LORAWAN_ERROR_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b007      	add	sp, #28
 8001674:	bd90      	pop	{r4, r7, pc}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	08007cf8 	.word	0x08007cf8

0800167c <LoRaWAN_Join>:

LoRaWAN_Error_t LoRaWAN_Join(ATC_HandleTypeDef *lora)
{
 800167c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800167e:	b0c7      	sub	sp, #284	@ 0x11c
 8001680:	af02      	add	r7, sp, #8
 8001682:	6078      	str	r0, [r7, #4]
    char response[256];
    LoRaWAN_Error_t status = send_data_and_get_response(lora, "AT+JOIN\r\n", response, sizeof(response), 10000, "OK");
 8001684:	2610      	movs	r6, #16
 8001686:	36ff      	adds	r6, #255	@ 0xff
 8001688:	19bc      	adds	r4, r7, r6
 800168a:	2380      	movs	r3, #128	@ 0x80
 800168c:	005d      	lsls	r5, r3, #1
 800168e:	230c      	movs	r3, #12
 8001690:	18fa      	adds	r2, r7, r3
 8001692:	4931      	ldr	r1, [pc, #196]	@ (8001758 <LoRaWAN_Join+0xdc>)
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	4b31      	ldr	r3, [pc, #196]	@ (800175c <LoRaWAN_Join+0xe0>)
 8001698:	9301      	str	r3, [sp, #4]
 800169a:	4b31      	ldr	r3, [pc, #196]	@ (8001760 <LoRaWAN_Join+0xe4>)
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	002b      	movs	r3, r5
 80016a0:	f7ff ff8c 	bl	80015bc <send_data_and_get_response>
 80016a4:	0003      	movs	r3, r0
 80016a6:	7023      	strb	r3, [r4, #0]
    if (status != LORAWAN_ERROR_OK) {
 80016a8:	19bb      	adds	r3, r7, r6
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <LoRaWAN_Join+0x3e>
        return status;
 80016b2:	19bb      	adds	r3, r7, r6
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	e049      	b.n	800174e <LoRaWAN_Join+0xd2>
    }

    memset(response, 0, sizeof(response));
 80016ba:	2380      	movs	r3, #128	@ 0x80
 80016bc:	005a      	lsls	r2, r3, #1
 80016be:	250c      	movs	r5, #12
 80016c0:	197b      	adds	r3, r7, r5
 80016c2:	2100      	movs	r1, #0
 80016c4:	0018      	movs	r0, r3
 80016c6:	f005 fe7b 	bl	80073c0 <memset>
    uint16_t rx_len = 0;
 80016ca:	4b26      	ldr	r3, [pc, #152]	@ (8001764 <LoRaWAN_Join+0xe8>)
 80016cc:	2288      	movs	r2, #136	@ 0x88
 80016ce:	0052      	lsls	r2, r2, #1
 80016d0:	189b      	adds	r3, r3, r2
 80016d2:	19db      	adds	r3, r3, r7
 80016d4:	2200      	movs	r2, #0
 80016d6:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef hal_status = HAL_UARTEx_ReceiveToIdle(lora->huart, (uint8_t *)response, sizeof(response) - 1, &rx_len, 10000);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	2687      	movs	r6, #135	@ 0x87
 80016de:	0076      	lsls	r6, r6, #1
 80016e0:	19bc      	adds	r4, r7, r6
 80016e2:	230a      	movs	r3, #10
 80016e4:	18fb      	adds	r3, r7, r3
 80016e6:	1979      	adds	r1, r7, r5
 80016e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001760 <LoRaWAN_Join+0xe4>)
 80016ea:	9200      	str	r2, [sp, #0]
 80016ec:	22ff      	movs	r2, #255	@ 0xff
 80016ee:	f005 fcb5 	bl	800705c <HAL_UARTEx_ReceiveToIdle>
 80016f2:	0003      	movs	r3, r0
 80016f4:	7023      	strb	r3, [r4, #0]
    if (hal_status != HAL_OK) {
 80016f6:	19bb      	adds	r3, r7, r6
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <LoRaWAN_Join+0x88>
        return LORAWAN_ERROR_TIMEOUT;
 80016fe:	2304      	movs	r3, #4
 8001700:	425b      	negs	r3, r3
 8001702:	e024      	b.n	800174e <LoRaWAN_Join+0xd2>
    }
    response[rx_len] = '\0';
 8001704:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <LoRaWAN_Join+0xe8>)
 8001706:	2188      	movs	r1, #136	@ 0x88
 8001708:	0049      	lsls	r1, r1, #1
 800170a:	185b      	adds	r3, r3, r1
 800170c:	19db      	adds	r3, r3, r7
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	001a      	movs	r2, r3
 8001712:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <LoRaWAN_Join+0xec>)
 8001714:	185b      	adds	r3, r3, r1
 8001716:	19db      	adds	r3, r3, r7
 8001718:	2100      	movs	r1, #0
 800171a:	5499      	strb	r1, [r3, r2]

    if (strstr(response, "JOINED")) {
 800171c:	4a13      	ldr	r2, [pc, #76]	@ (800176c <LoRaWAN_Join+0xf0>)
 800171e:	230c      	movs	r3, #12
 8001720:	18fb      	adds	r3, r7, r3
 8001722:	0011      	movs	r1, r2
 8001724:	0018      	movs	r0, r3
 8001726:	f005 fe53 	bl	80073d0 <strstr>
 800172a:	1e03      	subs	r3, r0, #0
 800172c:	d001      	beq.n	8001732 <LoRaWAN_Join+0xb6>
        return LORAWAN_ERROR_OK;
 800172e:	2300      	movs	r3, #0
 8001730:	e00d      	b.n	800174e <LoRaWAN_Join+0xd2>
    } else if (strstr(response, "JOIN FAILED")) {
 8001732:	4a0f      	ldr	r2, [pc, #60]	@ (8001770 <LoRaWAN_Join+0xf4>)
 8001734:	230c      	movs	r3, #12
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	0011      	movs	r1, r2
 800173a:	0018      	movs	r0, r3
 800173c:	f005 fe48 	bl	80073d0 <strstr>
 8001740:	1e03      	subs	r3, r0, #0
 8001742:	d002      	beq.n	800174a <LoRaWAN_Join+0xce>
        return LORAWAN_ERROR_NOT_JOINED;
 8001744:	2305      	movs	r3, #5
 8001746:	425b      	negs	r3, r3
 8001748:	e001      	b.n	800174e <LoRaWAN_Join+0xd2>
    }
    return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 800174a:	2303      	movs	r3, #3
 800174c:	425b      	negs	r3, r3
}
 800174e:	0018      	movs	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	b045      	add	sp, #276	@ 0x114
 8001754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001756:	46c0      	nop			@ (mov r8, r8)
 8001758:	08007d00 	.word	0x08007d00
 800175c:	08007d0c 	.word	0x08007d0c
 8001760:	00002710 	.word	0x00002710
 8001764:	fffffefa 	.word	0xfffffefa
 8001768:	fffffefc 	.word	0xfffffefc
 800176c:	08007d10 	.word	0x08007d10
 8001770:	08007d18 	.word	0x08007d18

08001774 <LoRaWAN_SendHex>:

LoRaWAN_Error_t LoRaWAN_SendHex(ATC_HandleTypeDef *lora, const uint8_t *payload, size_t length)
{
 8001774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001776:	b0ab      	sub	sp, #172	@ 0xac
 8001778:	af02      	add	r7, sp, #8
 800177a:	6478      	str	r0, [r7, #68]	@ 0x44
 800177c:	6439      	str	r1, [r7, #64]	@ 0x40
 800177e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001780:	466b      	mov	r3, sp
 8001782:	001e      	movs	r6, r3
    if (!lora || !lora->huart || !payload || length == 0) {
 8001784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001786:	2b00      	cmp	r3, #0
 8001788:	d009      	beq.n	800179e <LoRaWAN_SendHex+0x2a>
 800178a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <LoRaWAN_SendHex+0x2a>
 8001792:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001794:	2b00      	cmp	r3, #0
 8001796:	d002      	beq.n	800179e <LoRaWAN_SendHex+0x2a>
 8001798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <LoRaWAN_SendHex+0x30>
        return LORAWAN_ERROR_INVALID_PARAM;
 800179e:	2301      	movs	r3, #1
 80017a0:	425b      	negs	r3, r3
 80017a2:	e0a8      	b.n	80018f6 <LoRaWAN_SendHex+0x182>
    }

    char hex[length * 2 + 1];
 80017a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	0013      	movs	r3, r2
 80017ac:	3b01      	subs	r3, #1
 80017ae:	2198      	movs	r1, #152	@ 0x98
 80017b0:	1879      	adds	r1, r7, r1
 80017b2:	600b      	str	r3, [r1, #0]
 80017b4:	61ba      	str	r2, [r7, #24]
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	69b8      	ldr	r0, [r7, #24]
 80017bc:	69f9      	ldr	r1, [r7, #28]
 80017be:	0003      	movs	r3, r0
 80017c0:	0f5b      	lsrs	r3, r3, #29
 80017c2:	469c      	mov	ip, r3
 80017c4:	000b      	movs	r3, r1
 80017c6:	00dd      	lsls	r5, r3, #3
 80017c8:	4663      	mov	r3, ip
 80017ca:	431d      	orrs	r5, r3
 80017cc:	0003      	movs	r3, r0
 80017ce:	00dc      	lsls	r4, r3, #3
 80017d0:	613a      	str	r2, [r7, #16]
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	6938      	ldr	r0, [r7, #16]
 80017d8:	6979      	ldr	r1, [r7, #20]
 80017da:	0003      	movs	r3, r0
 80017dc:	0f5b      	lsrs	r3, r3, #29
 80017de:	000c      	movs	r4, r1
 80017e0:	00e4      	lsls	r4, r4, #3
 80017e2:	637c      	str	r4, [r7, #52]	@ 0x34
 80017e4:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 80017e6:	431c      	orrs	r4, r3
 80017e8:	637c      	str	r4, [r7, #52]	@ 0x34
 80017ea:	0003      	movs	r3, r0
 80017ec:	00db      	lsls	r3, r3, #3
 80017ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80017f0:	1dd3      	adds	r3, r2, #7
 80017f2:	08db      	lsrs	r3, r3, #3
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	466a      	mov	r2, sp
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	469d      	mov	sp, r3
 80017fc:	ab02      	add	r3, sp, #8
 80017fe:	3300      	adds	r3, #0
 8001800:	2294      	movs	r2, #148	@ 0x94
 8001802:	18ba      	adds	r2, r7, r2
 8001804:	6013      	str	r3, [r2, #0]
    for (size_t i = 0; i < length; ++i) {
 8001806:	2300      	movs	r3, #0
 8001808:	229c      	movs	r2, #156	@ 0x9c
 800180a:	18ba      	adds	r2, r7, r2
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e019      	b.n	8001844 <LoRaWAN_SendHex+0xd0>
        sprintf(&hex[i * 2], "%02X", payload[i]);
 8001810:	239c      	movs	r3, #156	@ 0x9c
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	2294      	movs	r2, #148	@ 0x94
 800181a:	18ba      	adds	r2, r7, r2
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	18d0      	adds	r0, r2, r3
 8001820:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001822:	239c      	movs	r3, #156	@ 0x9c
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	18d3      	adds	r3, r2, r3
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	001a      	movs	r2, r3
 800182e:	4b34      	ldr	r3, [pc, #208]	@ (8001900 <LoRaWAN_SendHex+0x18c>)
 8001830:	0019      	movs	r1, r3
 8001832:	f005 fd69 	bl	8007308 <siprintf>
    for (size_t i = 0; i < length; ++i) {
 8001836:	239c      	movs	r3, #156	@ 0x9c
 8001838:	18fb      	adds	r3, r7, r3
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	229c      	movs	r2, #156	@ 0x9c
 8001840:	18ba      	adds	r2, r7, r2
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	239c      	movs	r3, #156	@ 0x9c
 8001846:	18fb      	adds	r3, r7, r3
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800184c:	429a      	cmp	r2, r3
 800184e:	d3df      	bcc.n	8001810 <LoRaWAN_SendHex+0x9c>
    }
    hex[length * 2] = '\0';
 8001850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2294      	movs	r2, #148	@ 0x94
 8001856:	18ba      	adds	r2, r7, r2
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	2100      	movs	r1, #0
 800185c:	54d1      	strb	r1, [r2, r3]

    char command[length * 2 + 12];
 800185e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001860:	3306      	adds	r3, #6
 8001862:	0059      	lsls	r1, r3, #1
 8001864:	000b      	movs	r3, r1
 8001866:	3b01      	subs	r3, #1
 8001868:	2290      	movs	r2, #144	@ 0x90
 800186a:	18ba      	adds	r2, r7, r2
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68bc      	ldr	r4, [r7, #8]
 8001876:	68fd      	ldr	r5, [r7, #12]
 8001878:	0023      	movs	r3, r4
 800187a:	0f5b      	lsrs	r3, r3, #29
 800187c:	002a      	movs	r2, r5
 800187e:	00d2      	lsls	r2, r2, #3
 8001880:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001884:	431a      	orrs	r2, r3
 8001886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001888:	0023      	movs	r3, r4
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800188e:	6039      	str	r1, [r7, #0]
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	683c      	ldr	r4, [r7, #0]
 8001896:	687d      	ldr	r5, [r7, #4]
 8001898:	0023      	movs	r3, r4
 800189a:	0f5b      	lsrs	r3, r3, #29
 800189c:	002a      	movs	r2, r5
 800189e:	00d2      	lsls	r2, r2, #3
 80018a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80018a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018a4:	431a      	orrs	r2, r3
 80018a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80018a8:	0023      	movs	r3, r4
 80018aa:	00db      	lsls	r3, r3, #3
 80018ac:	623b      	str	r3, [r7, #32]
 80018ae:	1dcb      	adds	r3, r1, #7
 80018b0:	08db      	lsrs	r3, r3, #3
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	466a      	mov	r2, sp
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	469d      	mov	sp, r3
 80018ba:	ab02      	add	r3, sp, #8
 80018bc:	3300      	adds	r3, #0
 80018be:	228c      	movs	r2, #140	@ 0x8c
 80018c0:	18ba      	adds	r2, r7, r2
 80018c2:	6013      	str	r3, [r2, #0]
    snprintf(command, sizeof(command), "AT+SEND \"%s\"\r\n", hex);
 80018c4:	2394      	movs	r3, #148	@ 0x94
 80018c6:	18fb      	adds	r3, r7, r3
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001904 <LoRaWAN_SendHex+0x190>)
 80018cc:	208c      	movs	r0, #140	@ 0x8c
 80018ce:	1838      	adds	r0, r7, r0
 80018d0:	6800      	ldr	r0, [r0, #0]
 80018d2:	f005 fce3 	bl	800729c <sniprintf>

    char response[64];
    return send_data_and_get_response(lora, command, response, sizeof(response), 5000, "OK");
 80018d6:	2314      	movs	r3, #20
 80018d8:	2238      	movs	r2, #56	@ 0x38
 80018da:	189b      	adds	r3, r3, r2
 80018dc:	19da      	adds	r2, r3, r7
 80018de:	238c      	movs	r3, #140	@ 0x8c
 80018e0:	18fb      	adds	r3, r7, r3
 80018e2:	6819      	ldr	r1, [r3, #0]
 80018e4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80018e6:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <LoRaWAN_SendHex+0x194>)
 80018e8:	9301      	str	r3, [sp, #4]
 80018ea:	4b08      	ldr	r3, [pc, #32]	@ (800190c <LoRaWAN_SendHex+0x198>)
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2340      	movs	r3, #64	@ 0x40
 80018f0:	f7ff fe64 	bl	80015bc <send_data_and_get_response>
 80018f4:	0003      	movs	r3, r0
 80018f6:	46b5      	mov	sp, r6
}
 80018f8:	0018      	movs	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b029      	add	sp, #164	@ 0xa4
 80018fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001900:	08007d24 	.word	0x08007d24
 8001904:	08007d2c 	.word	0x08007d2c
 8001908:	08007d0c 	.word	0x08007d0c
 800190c:	00001388 	.word	0x00001388

08001910 <ReadBatteryVoltage>:
#define ADC_RESOLUTION         4095.0f   // 12‑bit: 0…4095
#define VOLTAGE_DIVIDER_RATIO  2.0f      // two 1 MΩ resistors in divider
#define VBAT_SETTLE_DELAY_MS   10U

float ReadBatteryVoltage(void)
{
 8001910:	b5b0      	push	{r4, r5, r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;
    uint32_t raw;

    // 1) Enable the divider
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_SET);
 8001916:	4b2a      	ldr	r3, [pc, #168]	@ (80019c0 <ReadBatteryVoltage+0xb0>)
 8001918:	2201      	movs	r2, #1
 800191a:	2101      	movs	r1, #1
 800191c:	0018      	movs	r0, r3
 800191e:	f002 fad1 	bl	8003ec4 <HAL_GPIO_WritePin>

    // 2) Wait for the divider node to settle
    HAL_Delay(VBAT_SETTLE_DELAY_MS);
 8001922:	200a      	movs	r0, #10
 8001924:	f001 faaa 	bl	8002e7c <HAL_Delay>

    // 3) Start ADC conversion on your handle 'hadc'
    status = HAL_ADC_Start(&hadc);
 8001928:	250f      	movs	r5, #15
 800192a:	197c      	adds	r4, r7, r5
 800192c:	4b25      	ldr	r3, [pc, #148]	@ (80019c4 <ReadBatteryVoltage+0xb4>)
 800192e:	0018      	movs	r0, r3
 8001930:	f001 fd12 	bl	8003358 <HAL_ADC_Start>
 8001934:	0003      	movs	r3, r0
 8001936:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) goto fail;
 8001938:	197b      	adds	r3, r7, r5
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d131      	bne.n	80019a4 <ReadBatteryVoltage+0x94>

    status = HAL_ADC_PollForConversion(&hadc, 10);
 8001940:	197c      	adds	r4, r7, r5
 8001942:	4b20      	ldr	r3, [pc, #128]	@ (80019c4 <ReadBatteryVoltage+0xb4>)
 8001944:	210a      	movs	r1, #10
 8001946:	0018      	movs	r0, r3
 8001948:	f001 fd9a 	bl	8003480 <HAL_ADC_PollForConversion>
 800194c:	0003      	movs	r3, r0
 800194e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) goto fail;
 8001950:	197b      	adds	r3, r7, r5
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d127      	bne.n	80019a8 <ReadBatteryVoltage+0x98>

    raw = HAL_ADC_GetValue(&hadc);
 8001958:	4b1a      	ldr	r3, [pc, #104]	@ (80019c4 <ReadBatteryVoltage+0xb4>)
 800195a:	0018      	movs	r0, r3
 800195c:	f001 fe2c 	bl	80035b8 <HAL_ADC_GetValue>
 8001960:	0003      	movs	r3, r0
 8001962:	60bb      	str	r3, [r7, #8]
    HAL_ADC_Stop(&hadc);
 8001964:	4b17      	ldr	r3, [pc, #92]	@ (80019c4 <ReadBatteryVoltage+0xb4>)
 8001966:	0018      	movs	r0, r3
 8001968:	f001 fd4a 	bl	8003400 <HAL_ADC_Stop>

    // 4) Disable the divider
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_RESET);
 800196c:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <ReadBatteryVoltage+0xb0>)
 800196e:	2200      	movs	r2, #0
 8001970:	2101      	movs	r1, #1
 8001972:	0018      	movs	r0, r3
 8001974:	f002 faa6 	bl	8003ec4 <HAL_GPIO_WritePin>

    // 5) Convert ADC code → volts, then scale up by divider ratio
    float v_adc = ((float)raw / ADC_RESOLUTION) * ADC_REF_VOLTAGE;
 8001978:	68b8      	ldr	r0, [r7, #8]
 800197a:	f7ff fd3f 	bl	80013fc <__aeabi_ui2f>
 800197e:	1c03      	adds	r3, r0, #0
 8001980:	4911      	ldr	r1, [pc, #68]	@ (80019c8 <ReadBatteryVoltage+0xb8>)
 8001982:	1c18      	adds	r0, r3, #0
 8001984:	f7fe ff8e 	bl	80008a4 <__aeabi_fdiv>
 8001988:	1c03      	adds	r3, r0, #0
 800198a:	4910      	ldr	r1, [pc, #64]	@ (80019cc <ReadBatteryVoltage+0xbc>)
 800198c:	1c18      	adds	r0, r3, #0
 800198e:	f7ff f957 	bl	8000c40 <__aeabi_fmul>
 8001992:	1c03      	adds	r3, r0, #0
 8001994:	607b      	str	r3, [r7, #4]
    return v_adc * VOLTAGE_DIVIDER_RATIO;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	1c19      	adds	r1, r3, #0
 800199a:	1c18      	adds	r0, r3, #0
 800199c:	f7fe fd90 	bl	80004c0 <__aeabi_fadd>
 80019a0:	1c03      	adds	r3, r0, #0
 80019a2:	e009      	b.n	80019b8 <ReadBatteryVoltage+0xa8>
    if (status != HAL_OK) goto fail;
 80019a4:	46c0      	nop			@ (mov r8, r8)
 80019a6:	e000      	b.n	80019aa <ReadBatteryVoltage+0x9a>
    if (status != HAL_OK) goto fail;
 80019a8:	46c0      	nop			@ (mov r8, r8)

fail:
    // Ensure divider is off on error
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_RESET);
 80019aa:	4b05      	ldr	r3, [pc, #20]	@ (80019c0 <ReadBatteryVoltage+0xb0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	2101      	movs	r1, #1
 80019b0:	0018      	movs	r0, r3
 80019b2:	f002 fa87 	bl	8003ec4 <HAL_GPIO_WritePin>
    return -1.0f;
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <ReadBatteryVoltage+0xc0>)
}
 80019b8:	1c18      	adds	r0, r3, #0
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b004      	add	sp, #16
 80019be:	bdb0      	pop	{r4, r5, r7, pc}
 80019c0:	50000400 	.word	0x50000400
 80019c4:	20000078 	.word	0x20000078
 80019c8:	457ff000 	.word	0x457ff000
 80019cc:	40533333 	.word	0x40533333
 80019d0:	bf800000 	.word	0xbf800000

080019d4 <GetBatteryLevel>:

Battery_Status_t GetBatteryLevel(uint32_t *out_v, uint8_t *out_pct)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
    if (!out_v || !out_pct) return BATTERY_ERROR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <GetBatteryLevel+0x16>
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d102      	bne.n	80019f0 <GetBatteryLevel+0x1c>
 80019ea:	2303      	movs	r3, #3
 80019ec:	425b      	negs	r3, r3
 80019ee:	e04a      	b.n	8001a86 <GetBatteryLevel+0xb2>

    float v = ReadBatteryVoltage();
 80019f0:	f7ff ff8e 	bl	8001910 <ReadBatteryVoltage>
 80019f4:	1c03      	adds	r3, r0, #0
 80019f6:	613b      	str	r3, [r7, #16]
    if (v < 0.0f) return BATTERY_ERROR;
 80019f8:	2100      	movs	r1, #0
 80019fa:	6938      	ldr	r0, [r7, #16]
 80019fc:	f7fe fc34 	bl	8000268 <__aeabi_fcmplt>
 8001a00:	1e03      	subs	r3, r0, #0
 8001a02:	d002      	beq.n	8001a0a <GetBatteryLevel+0x36>
 8001a04:	2303      	movs	r3, #3
 8001a06:	425b      	negs	r3, r3
 8001a08:	e03d      	b.n	8001a86 <GetBatteryLevel+0xb2>

    *out_v = v;
 8001a0a:	6938      	ldr	r0, [r7, #16]
 8001a0c:	f7fe fc74 	bl	80002f8 <__aeabi_f2uiz>
 8001a10:	0002      	movs	r2, r0
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	601a      	str	r2, [r3, #0]

    // Example curve: 3.0 V→0%, 4.2 V→100%
    const float V_MIN = 3.0f, V_MAX = 4.2f;
 8001a16:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <GetBatteryLevel+0xbc>)
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <GetBatteryLevel+0xc0>)
 8001a1c:	60bb      	str	r3, [r7, #8]
    float pct = (v - V_MIN) / (V_MAX - V_MIN) * 100.0f;
 8001a1e:	68f9      	ldr	r1, [r7, #12]
 8001a20:	6938      	ldr	r0, [r7, #16]
 8001a22:	f7ff fa67 	bl	8000ef4 <__aeabi_fsub>
 8001a26:	1c03      	adds	r3, r0, #0
 8001a28:	1c1c      	adds	r4, r3, #0
 8001a2a:	68f9      	ldr	r1, [r7, #12]
 8001a2c:	68b8      	ldr	r0, [r7, #8]
 8001a2e:	f7ff fa61 	bl	8000ef4 <__aeabi_fsub>
 8001a32:	1c03      	adds	r3, r0, #0
 8001a34:	1c19      	adds	r1, r3, #0
 8001a36:	1c20      	adds	r0, r4, #0
 8001a38:	f7fe ff34 	bl	80008a4 <__aeabi_fdiv>
 8001a3c:	1c03      	adds	r3, r0, #0
 8001a3e:	4916      	ldr	r1, [pc, #88]	@ (8001a98 <GetBatteryLevel+0xc4>)
 8001a40:	1c18      	adds	r0, r3, #0
 8001a42:	f7ff f8fd 	bl	8000c40 <__aeabi_fmul>
 8001a46:	1c03      	adds	r3, r0, #0
 8001a48:	617b      	str	r3, [r7, #20]
    if (pct < 0.0f)   pct = 0.0f;
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	6978      	ldr	r0, [r7, #20]
 8001a4e:	f7fe fc0b 	bl	8000268 <__aeabi_fcmplt>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d001      	beq.n	8001a5a <GetBatteryLevel+0x86>
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
    if (pct > 100.0f) pct = 100.0f;
 8001a5a:	490f      	ldr	r1, [pc, #60]	@ (8001a98 <GetBatteryLevel+0xc4>)
 8001a5c:	6978      	ldr	r0, [r7, #20]
 8001a5e:	f7fe fc17 	bl	8000290 <__aeabi_fcmpgt>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d001      	beq.n	8001a6a <GetBatteryLevel+0x96>
 8001a66:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <GetBatteryLevel+0xc4>)
 8001a68:	617b      	str	r3, [r7, #20]
    *out_pct = (uint8_t)(pct + 0.5f);
 8001a6a:	21fc      	movs	r1, #252	@ 0xfc
 8001a6c:	0589      	lsls	r1, r1, #22
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7fe fd26 	bl	80004c0 <__aeabi_fadd>
 8001a74:	1c03      	adds	r3, r0, #0
 8001a76:	1c18      	adds	r0, r3, #0
 8001a78:	f7fe fc3e 	bl	80002f8 <__aeabi_f2uiz>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	701a      	strb	r2, [r3, #0]

    return BATTERY_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	0018      	movs	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b007      	add	sp, #28
 8001a8c:	bd90      	pop	{r4, r7, pc}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	40400000 	.word	0x40400000
 8001a94:	40866666 	.word	0x40866666
 8001a98:	42c80000 	.word	0x42c80000

08001a9c <RTC_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RTC_IRQHandler(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <RTC_IRQHandler+0x14>)
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f004 fcaa 	bl	80063fc <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 8001aa8:	46c0      	nop			@ (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	20000238 	.word	0x20000238

08001ab4 <RTC_WakeUp_Init>:

void RTC_WakeUp_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  ConsolePrintf("Starting RTC Wake-Up Timer configuration\r\n");
 8001ab8:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <RTC_WakeUp_Init+0x5c>)
 8001aba:	0018      	movs	r0, r3
 8001abc:	f000 fbb0 	bl	8002220 <ConsolePrintf>

  // Disable the Wake-Up Timer before configuring
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001ac0:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <RTC_WakeUp_Init+0x60>)
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f004 fc36 	bl	8006334 <HAL_RTCEx_DeactivateWakeUpTimer>
  ConsolePrintf("RTC Wake-Up Timer disabled\r\n");
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <RTC_WakeUp_Init+0x64>)
 8001aca:	0018      	movs	r0, r3
 8001acc:	f000 fba8 	bl	8002220 <ConsolePrintf>

  // Configure Wake-Up Timer for 60 seconds using LSI (~40 kHz)
  // With AsynchPrediv = 127, SynchPrediv = 255: CK_SPRE = 40,000 / (128 * 256) = ~1.22 Hz
  // For ~60 seconds: WakeUpCounter = (60 * 1.22) - 1 = ~72
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8001ad0:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <RTC_WakeUp_Init+0x60>)
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	213b      	movs	r1, #59	@ 0x3b
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f004 fb54 	bl	8006184 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001adc:	1e03      	subs	r3, r0, #0
 8001ade:	d004      	beq.n	8001aea <RTC_WakeUp_Init+0x36>
  {
    ConsolePrintf("RTC Wake-Up Timer Init Failed\r\n");
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8001b1c <RTC_WakeUp_Init+0x68>)
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f000 fb9c 	bl	8002220 <ConsolePrintf>
 8001ae8:	e003      	b.n	8001af2 <RTC_WakeUp_Init+0x3e>
  }
  else
  {
    ConsolePrintf("RTC Wake-Up Timer Initialized for ~60 seconds\r\n");
 8001aea:	4b0d      	ldr	r3, [pc, #52]	@ (8001b20 <RTC_WakeUp_Init+0x6c>)
 8001aec:	0018      	movs	r0, r3
 8001aee:	f000 fb97 	bl	8002220 <ConsolePrintf>
  }

  // Enable RTC Wake-Up interrupt in NVIC
  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	2002      	movs	r0, #2
 8001af8:	f001 ff52 	bl	80039a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001afc:	2002      	movs	r0, #2
 8001afe:	f001 ff64 	bl	80039ca <HAL_NVIC_EnableIRQ>
  ConsolePrintf("RTC Wake-Up interrupt enabled in NVIC\r\n");
 8001b02:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <RTC_WakeUp_Init+0x70>)
 8001b04:	0018      	movs	r0, r3
 8001b06:	f000 fb8b 	bl	8002220 <ConsolePrintf>
}
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	08007d48 	.word	0x08007d48
 8001b14:	20000238 	.word	0x20000238
 8001b18:	08007d74 	.word	0x08007d74
 8001b1c:	08007d94 	.word	0x08007d94
 8001b20:	08007db4 	.word	0x08007db4
 8001b24:	08007de4 	.word	0x08007de4

08001b28 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  // Reconfigure system clock after wake-up
  SystemClock_Config();
 8001b30:	f000 f980 	bl	8001e34 <SystemClock_Config>

  // Print message
  ConsolePrintf("Woke up at %s\r\n", "1-minute interval");
 8001b34:	4a04      	ldr	r2, [pc, #16]	@ (8001b48 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 8001b36:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8001b38:	0011      	movs	r1, r2
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f000 fb70 	bl	8002220 <ConsolePrintf>
}
 8001b40:	46c0      	nop			@ (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b002      	add	sp, #8
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	08007e0c 	.word	0x08007e0c
 8001b4c:	08007e20 	.word	0x08007e20

08001b50 <Enter_Stop_Mode>:

void Enter_Stop_Mode(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  ConsolePrintf("Preparing to enter Stop mode\r\n");
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <Enter_Stop_Mode+0x50>)
 8001b56:	0018      	movs	r0, r3
 8001b58:	f000 fb62 	bl	8002220 <ConsolePrintf>

  // Clear Wake-Up flag
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <Enter_Stop_Mode+0x54>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	22ff      	movs	r2, #255	@ 0xff
 8001b64:	401a      	ands	r2, r3
 8001b66:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <Enter_Stop_Mode+0x54>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	490f      	ldr	r1, [pc, #60]	@ (8001ba8 <Enter_Stop_Mode+0x58>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	60da      	str	r2, [r3, #12]
  ConsolePrintf("RTC Wake-Up flag cleared\r\n");
 8001b70:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <Enter_Stop_Mode+0x5c>)
 8001b72:	0018      	movs	r0, r3
 8001b74:	f000 fb54 	bl	8002220 <ConsolePrintf>

  // Enter Stop mode (low-power mode)
  ConsolePrintf("Entering Stop mode\r\n");
 8001b78:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <Enter_Stop_Mode+0x60>)
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 fb50 	bl	8002220 <ConsolePrintf>
  /* Suspend SysTick to prevent it from waking up the MCU immediately */
  HAL_SuspendTick();
 8001b80:	f001 f9a0 	bl	8002ec4 <HAL_SuspendTick>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001b84:	2101      	movs	r1, #1
 8001b86:	2001      	movs	r0, #1
 8001b88:	f003 f92a 	bl	8004de0 <HAL_PWR_EnterSTOPMode>
  /* Resume SysTick after waking up */
  HAL_ResumeTick();
 8001b8c:	f001 f9a8 	bl	8002ee0 <HAL_ResumeTick>
  ConsolePrintf("Exited Stop mode\r\n");
 8001b90:	4b08      	ldr	r3, [pc, #32]	@ (8001bb4 <Enter_Stop_Mode+0x64>)
 8001b92:	0018      	movs	r0, r3
 8001b94:	f000 fb44 	bl	8002220 <ConsolePrintf>
}
 8001b98:	46c0      	nop			@ (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			@ (mov r8, r8)
 8001ba0:	08007e30 	.word	0x08007e30
 8001ba4:	20000238 	.word	0x20000238
 8001ba8:	fffffb7f 	.word	0xfffffb7f
 8001bac:	08007e50 	.word	0x08007e50
 8001bb0:	08007e6c 	.word	0x08007e6c
 8001bb4:	08007e84 	.word	0x08007e84

08001bb8 <MX_ADC_DeInit>:

void MX_ADC_DeInit(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
    /* 1) De‑initialize the ADC handle */
    if (HAL_ADC_DeInit(&hadc) != HAL_OK) {
 8001bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <MX_ADC_DeInit+0x30>)
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	f001 fb2e 	bl	8003220 <HAL_ADC_DeInit>
 8001bc4:	1e03      	subs	r3, r0, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_ADC_DeInit+0x14>
        Error_Handler();
 8001bc8:	f000 fba0 	bl	800230c <Error_Handler>
    }
    /* 2) Disable the ADC clock */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001bcc:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <MX_ADC_DeInit+0x34>)
 8001bce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <MX_ADC_DeInit+0x34>)
 8001bd2:	4907      	ldr	r1, [pc, #28]	@ (8001bf0 <MX_ADC_DeInit+0x38>)
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* 3) Reset the GPIO pin back to its default state
       (PB1 was configured as analog in MX_GPIO_Init) */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 8001bd8:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <MX_ADC_DeInit+0x3c>)
 8001bda:	2102      	movs	r1, #2
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f002 f88f 	bl	8003d00 <HAL_GPIO_DeInit>
}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000078 	.word	0x20000078
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	fffffdff 	.word	0xfffffdff
 8001bf4:	50000400 	.word	0x50000400

08001bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b088      	sub	sp, #32
 8001bfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bfe:	f001 f8cd 	bl	8002d9c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(10000);
 8001c02:	4b79      	ldr	r3, [pc, #484]	@ (8001de8 <main+0x1f0>)
 8001c04:	0018      	movs	r0, r3
 8001c06:	f001 f939 	bl	8002e7c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0a:	f000 f913 	bl	8001e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c0e:	f000 faad 	bl	800216c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c12:	f000 f9d9 	bl	8001fc8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c16:	f000 fa49 	bl	80020ac <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001c1a:	f000 fa7d 	bl	8002118 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8001c1e:	f000 fa13 	bl	8002048 <MX_LPUART1_UART_Init>
  MX_ADC_Init();
 8001c22:	f000 f97f 	bl	8001f24 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  RTC_WakeUp_Init();
 8001c26:	f7ff ff45 	bl	8001ab4 <RTC_WakeUp_Init>


  uint32_t batt_voltage;
  uint8_t batt_percentage;
  if (GetBatteryLevel(&batt_voltage, &batt_percentage) == BATTERY_OK) {
 8001c2a:	2417      	movs	r4, #23
 8001c2c:	193a      	adds	r2, r7, r4
 8001c2e:	2318      	movs	r3, #24
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	0011      	movs	r1, r2
 8001c34:	0018      	movs	r0, r3
 8001c36:	f7ff fecd 	bl	80019d4 <GetBatteryLevel>
 8001c3a:	1e03      	subs	r3, r0, #0
 8001c3c:	d107      	bne.n	8001c4e <main+0x56>
	  ConsolePrintf(
 8001c3e:	69b9      	ldr	r1, [r7, #24]
 8001c40:	193b      	adds	r3, r7, r4
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	001a      	movs	r2, r3
 8001c46:	4b69      	ldr	r3, [pc, #420]	@ (8001dec <main+0x1f4>)
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f000 fae9 	bl	8002220 <ConsolePrintf>
  }

//  /* Scan the I2C bus and read sensors once at startup */
//  scan_i2c_bus();
//  sensor_init_and_read();
  LoRaWAN_Join(&lora);
 8001c4e:	4b68      	ldr	r3, [pc, #416]	@ (8001df0 <main+0x1f8>)
 8001c50:	0018      	movs	r0, r3
 8001c52:	f7ff fd13 	bl	800167c <LoRaWAN_Join>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ConsolePrintf("Entering main loop\r\n");
 8001c56:	4b67      	ldr	r3, [pc, #412]	@ (8001df4 <main+0x1fc>)
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f000 fae1 	bl	8002220 <ConsolePrintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ConsolePrintf("Going to sleep...\r\n");
 8001c5e:	4b66      	ldr	r3, [pc, #408]	@ (8001df8 <main+0x200>)
 8001c60:	0018      	movs	r0, r3
 8001c62:	f000 fadd 	bl	8002220 <ConsolePrintf>

    HAL_I2C_DeInit(&hi2c1);
 8001c66:	4b65      	ldr	r3, [pc, #404]	@ (8001dfc <main+0x204>)
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f002 f9ef 	bl	800404c <HAL_I2C_DeInit>
    HAL_UART_DeInit(&huart1);
 8001c6e:	4b64      	ldr	r3, [pc, #400]	@ (8001e00 <main+0x208>)
 8001c70:	0018      	movs	r0, r3
 8001c72:	f004 fc47 	bl	8006504 <HAL_UART_DeInit>
    // De-init LPUART1 (LoRaWAN UART)
    HAL_UART_DeInit(&hlpuart1);
 8001c76:	4b63      	ldr	r3, [pc, #396]	@ (8001e04 <main+0x20c>)
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f004 fc43 	bl	8006504 <HAL_UART_DeInit>
    MX_ADC_DeInit();
 8001c7e:	f7ff ff9b 	bl	8001bb8 <MX_ADC_DeInit>

    // Disable LPUART wake-up from Stop mode
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_RXNE);                    // Disable RXNE interrupt
 8001c82:	4b60      	ldr	r3, [pc, #384]	@ (8001e04 <main+0x20c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	4b5e      	ldr	r3, [pc, #376]	@ (8001e04 <main+0x20c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2120      	movs	r1, #32
 8001c8e:	438a      	bics	r2, r1
 8001c90:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_IDLE);                    // Disable IDLE interrupt
 8001c92:	4b5c      	ldr	r3, [pc, #368]	@ (8001e04 <main+0x20c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	4b5a      	ldr	r3, [pc, #360]	@ (8001e04 <main+0x20c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2110      	movs	r1, #16
 8001c9e:	438a      	bics	r2, r1
 8001ca0:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(&hlpuart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 8001ca2:	4b58      	ldr	r3, [pc, #352]	@ (8001e04 <main+0x20c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2230      	movs	r2, #48	@ 0x30
 8001ca8:	621a      	str	r2, [r3, #32]

    __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);                    // Disable RXNE interrupt
 8001caa:	4b55      	ldr	r3, [pc, #340]	@ (8001e00 <main+0x208>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b53      	ldr	r3, [pc, #332]	@ (8001e00 <main+0x208>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2120      	movs	r1, #32
 8001cb6:	438a      	bics	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);                    // Disable IDLE interrupt
 8001cba:	4b51      	ldr	r3, [pc, #324]	@ (8001e00 <main+0x208>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b4f      	ldr	r3, [pc, #316]	@ (8001e00 <main+0x208>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2110      	movs	r1, #16
 8001cc6:	438a      	bics	r2, r1
 8001cc8:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 8001cca:	4b4d      	ldr	r3, [pc, #308]	@ (8001e00 <main+0x208>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2230      	movs	r2, #48	@ 0x30
 8001cd0:	621a      	str	r2, [r3, #32]

    // Enter Stop mode
    Enter_Stop_Mode(); // Wakes up via RTC interrupt
 8001cd2:	f7ff ff3d 	bl	8001b50 <Enter_Stop_Mode>

    // === Code resumes after wake-up ===
    ConsolePrintf("Resumed after wake-up\r\n");
 8001cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8001e08 <main+0x210>)
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f000 faa1 	bl	8002220 <ConsolePrintf>

    // Reconfigure clocks
    SystemClock_Config();
 8001cde:	f000 f8a9 	bl	8001e34 <SystemClock_Config>
    ConsolePrintf("System clock reconfigured\r\n");
 8001ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8001e0c <main+0x214>)
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f000 fa9b 	bl	8002220 <ConsolePrintf>

    // Reinit I2C peripheral
    MX_I2C1_Init();
 8001cea:	f000 f96d 	bl	8001fc8 <MX_I2C1_Init>
    ConsolePrintf("I2C1 reinitialized\r\n");
 8001cee:	4b48      	ldr	r3, [pc, #288]	@ (8001e10 <main+0x218>)
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	f000 fa95 	bl	8002220 <ConsolePrintf>

    // Reinit UART
    MX_USART1_UART_Init();
 8001cf6:	f000 f9d9 	bl	80020ac <MX_USART1_UART_Init>
    ConsolePrintf("UART reinitialized\r\n");
 8001cfa:	4b46      	ldr	r3, [pc, #280]	@ (8001e14 <main+0x21c>)
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f000 fa8f 	bl	8002220 <ConsolePrintf>

    MX_LPUART1_UART_Init();
 8001d02:	f000 f9a1 	bl	8002048 <MX_LPUART1_UART_Init>
    ConsolePrintf("LPUART1 (lora) reinitialized\r\n");
 8001d06:	4b44      	ldr	r3, [pc, #272]	@ (8001e18 <main+0x220>)
 8001d08:	0018      	movs	r0, r3
 8001d0a:	f000 fa89 	bl	8002220 <ConsolePrintf>

    // Reinit WakeUp timer (MUST be outside the callback!)
    RTC_WakeUp_Init();
 8001d0e:	f7ff fed1 	bl	8001ab4 <RTC_WakeUp_Init>
    ConsolePrintf("RTC Wake-Up Timer reinitialized\r\n");
 8001d12:	4b42      	ldr	r3, [pc, #264]	@ (8001e1c <main+0x224>)
 8001d14:	0018      	movs	r0, r3
 8001d16:	f000 fa83 	bl	8002220 <ConsolePrintf>

    // Measure battery voltage after waking up
    uint32_t batt_voltage;
    uint8_t batt_percentage;
    if (GetBatteryLevel(&batt_voltage, &batt_percentage) == BATTERY_OK) {
 8001d1a:	240f      	movs	r4, #15
 8001d1c:	193a      	adds	r2, r7, r4
 8001d1e:	2310      	movs	r3, #16
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	0011      	movs	r1, r2
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7ff fe55 	bl	80019d4 <GetBatteryLevel>
 8001d2a:	1e03      	subs	r3, r0, #0
 8001d2c:	d108      	bne.n	8001d40 <main+0x148>
      ConsolePrintf("Battery: %lu mV (%d%%)\r\n", batt_voltage, batt_percentage);
 8001d2e:	6939      	ldr	r1, [r7, #16]
 8001d30:	193b      	adds	r3, r7, r4
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	001a      	movs	r2, r3
 8001d36:	4b3a      	ldr	r3, [pc, #232]	@ (8001e20 <main+0x228>)
 8001d38:	0018      	movs	r0, r3
 8001d3a:	f000 fa71 	bl	8002220 <ConsolePrintf>
 8001d3e:	e003      	b.n	8001d48 <main+0x150>
    } else {
      ConsolePrintf("Battery measurement failed\r\n");
 8001d40:	4b38      	ldr	r3, [pc, #224]	@ (8001e24 <main+0x22c>)
 8001d42:	0018      	movs	r0, r3
 8001d44:	f000 fa6c 	bl	8002220 <ConsolePrintf>
    }


    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8001d48:	4b37      	ldr	r3, [pc, #220]	@ (8001e28 <main+0x230>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f002 f8b8 	bl	8003ec4 <HAL_GPIO_WritePin>
    HAL_Delay(300); // Short Delay to let voltage stabalize
 8001d54:	2396      	movs	r3, #150	@ 0x96
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	0018      	movs	r0, r3
 8001d5a:	f001 f88f 	bl	8002e7c <HAL_Delay>
    scan_i2c_bus();
 8001d5e:	f000 fcd5 	bl	800270c <scan_i2c_bus>
    bool i2c_success = sensor_init_and_read();
 8001d62:	251f      	movs	r5, #31
 8001d64:	197c      	adds	r4, r7, r5
 8001d66:	f000 fcf9 	bl	800275c <sensor_init_and_read>
 8001d6a:	0003      	movs	r3, r0
 8001d6c:	7023      	strb	r3, [r4, #0]
    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8001e28 <main+0x230>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	2120      	movs	r1, #32
 8001d74:	0018      	movs	r0, r3
 8001d76:	f002 f8a5 	bl	8003ec4 <HAL_GPIO_WritePin>

    if (i2c_success)
 8001d7a:	197b      	adds	r3, r7, r5
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d021      	beq.n	8001dc6 <main+0x1ce>
    {
		uint8_t payload[5];
		payload[0] = (uint8_t)(calculated_temp >> 8);     // high byte
 8001d82:	4b2a      	ldr	r3, [pc, #168]	@ (8001e2c <main+0x234>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	2108      	movs	r1, #8
 8001d8e:	187b      	adds	r3, r7, r1
 8001d90:	701a      	strb	r2, [r3, #0]
		payload[1] = (uint8_t)(calculated_temp & 0xFF);   // low byte
 8001d92:	4b26      	ldr	r3, [pc, #152]	@ (8001e2c <main+0x234>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	187b      	adds	r3, r7, r1
 8001d9a:	705a      	strb	r2, [r3, #1]
		payload[2] = calculated_hum;
 8001d9c:	4b24      	ldr	r3, [pc, #144]	@ (8001e30 <main+0x238>)
 8001d9e:	781a      	ldrb	r2, [r3, #0]
 8001da0:	187b      	adds	r3, r7, r1
 8001da2:	709a      	strb	r2, [r3, #2]
		payload[3] = (uint8_t)(batt_voltage >> 8);        // battery voltage high byte
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	187b      	adds	r3, r7, r1
 8001dac:	70da      	strb	r2, [r3, #3]
		payload[4] = batt_percentage;                     // battery percentage
 8001dae:	230f      	movs	r3, #15
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	187b      	adds	r3, r7, r1
 8001db6:	711a      	strb	r2, [r3, #4]
		LoRaWAN_SendHex(&lora, payload, 5);
 8001db8:	1879      	adds	r1, r7, r1
 8001dba:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <main+0x1f8>)
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f7ff fcd8 	bl	8001774 <LoRaWAN_SendHex>
 8001dc4:	e74b      	b.n	8001c5e <main+0x66>
    }
    else
    {
		uint8_t payload[2];
		payload[0] = (uint8_t)(batt_voltage >> 8);        // battery voltage high byte
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	0a1b      	lsrs	r3, r3, #8
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	1d3b      	adds	r3, r7, #4
 8001dce:	701a      	strb	r2, [r3, #0]
		payload[1] = batt_percentage;                     // battery percentage
 8001dd0:	230f      	movs	r3, #15
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	781a      	ldrb	r2, [r3, #0]
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	705a      	strb	r2, [r3, #1]
		LoRaWAN_SendHex(&lora, payload, 2);
 8001dda:	1d39      	adds	r1, r7, #4
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <main+0x1f8>)
 8001dde:	2202      	movs	r2, #2
 8001de0:	0018      	movs	r0, r3
 8001de2:	f7ff fcc7 	bl	8001774 <LoRaWAN_SendHex>
  {
 8001de6:	e73a      	b.n	8001c5e <main+0x66>
 8001de8:	00002710 	.word	0x00002710
 8001dec:	08007e98 	.word	0x08007e98
 8001df0:	2000025c 	.word	0x2000025c
 8001df4:	08007ebc 	.word	0x08007ebc
 8001df8:	08007ed4 	.word	0x08007ed4
 8001dfc:	200000d4 	.word	0x200000d4
 8001e00:	200001b0 	.word	0x200001b0
 8001e04:	20000128 	.word	0x20000128
 8001e08:	08007ee8 	.word	0x08007ee8
 8001e0c:	08007f00 	.word	0x08007f00
 8001e10:	08007f1c 	.word	0x08007f1c
 8001e14:	08007f34 	.word	0x08007f34
 8001e18:	08007f4c 	.word	0x08007f4c
 8001e1c:	08007f6c 	.word	0x08007f6c
 8001e20:	08007f90 	.word	0x08007f90
 8001e24:	08007fac 	.word	0x08007fac
 8001e28:	50000400 	.word	0x50000400
 8001e2c:	2000026e 	.word	0x2000026e
 8001e30:	20000270 	.word	0x20000270

08001e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e34:	b590      	push	{r4, r7, lr}
 8001e36:	b09f      	sub	sp, #124	@ 0x7c
 8001e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3a:	2440      	movs	r4, #64	@ 0x40
 8001e3c:	193b      	adds	r3, r7, r4
 8001e3e:	0018      	movs	r0, r3
 8001e40:	2338      	movs	r3, #56	@ 0x38
 8001e42:	001a      	movs	r2, r3
 8001e44:	2100      	movs	r1, #0
 8001e46:	f005 fabb 	bl	80073c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e4a:	232c      	movs	r3, #44	@ 0x2c
 8001e4c:	18fb      	adds	r3, r7, r3
 8001e4e:	0018      	movs	r0, r3
 8001e50:	2314      	movs	r3, #20
 8001e52:	001a      	movs	r2, r3
 8001e54:	2100      	movs	r1, #0
 8001e56:	f005 fab3 	bl	80073c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	2328      	movs	r3, #40	@ 0x28
 8001e60:	001a      	movs	r2, r3
 8001e62:	2100      	movs	r1, #0
 8001e64:	f005 faac 	bl	80073c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e68:	4b2c      	ldr	r3, [pc, #176]	@ (8001f1c <SystemClock_Config+0xe8>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8001f20 <SystemClock_Config+0xec>)
 8001e6e:	401a      	ands	r2, r3
 8001e70:	4b2a      	ldr	r3, [pc, #168]	@ (8001f1c <SystemClock_Config+0xe8>)
 8001e72:	2180      	movs	r1, #128	@ 0x80
 8001e74:	0109      	lsls	r1, r1, #4
 8001e76:	430a      	orrs	r2, r1
 8001e78:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001e7a:	0021      	movs	r1, r4
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	2218      	movs	r2, #24
 8001e80:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	2201      	movs	r2, #1
 8001e86:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e8e:	187b      	adds	r3, r7, r1
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8001e94:	187b      	adds	r3, r7, r1
 8001e96:	22a0      	movs	r2, #160	@ 0xa0
 8001e98:	0212      	lsls	r2, r2, #8
 8001e9a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e9c:	187b      	adds	r3, r7, r1
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ea2:	187b      	adds	r3, r7, r1
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f002 fff7 	bl	8004e98 <HAL_RCC_OscConfig>
 8001eaa:	1e03      	subs	r3, r0, #0
 8001eac:	d001      	beq.n	8001eb2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001eae:	f000 fa2d 	bl	800230c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001eb2:	212c      	movs	r1, #44	@ 0x2c
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001eba:	187b      	adds	r3, r7, r1
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ec0:	187b      	adds	r3, r7, r1
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ec6:	187b      	adds	r3, r7, r1
 8001ec8:	2200      	movs	r2, #0
 8001eca:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ecc:	187b      	adds	r3, r7, r1
 8001ece:	2200      	movs	r2, #0
 8001ed0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ed2:	187b      	adds	r3, r7, r1
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f003 fbb2 	bl	8005640 <HAL_RCC_ClockConfig>
 8001edc:	1e03      	subs	r3, r0, #0
 8001ede:	d001      	beq.n	8001ee4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001ee0:	f000 fa14 	bl	800230c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	222d      	movs	r2, #45	@ 0x2d
 8001ee8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001ef0:	1d3b      	adds	r3, r7, #4
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	2280      	movs	r2, #128	@ 0x80
 8001f00:	0292      	lsls	r2, r2, #10
 8001f02:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	0018      	movs	r0, r3
 8001f08:	f003 fd9e 	bl	8005a48 <HAL_RCCEx_PeriphCLKConfig>
 8001f0c:	1e03      	subs	r3, r0, #0
 8001f0e:	d001      	beq.n	8001f14 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001f10:	f000 f9fc 	bl	800230c <Error_Handler>
  }
}
 8001f14:	46c0      	nop			@ (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	b01f      	add	sp, #124	@ 0x7c
 8001f1a:	bd90      	pop	{r4, r7, pc}
 8001f1c:	40007000 	.word	0x40007000
 8001f20:	ffffe7ff 	.word	0xffffe7ff

08001f24 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f2a:	003b      	movs	r3, r7
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	2308      	movs	r3, #8
 8001f30:	001a      	movs	r2, r3
 8001f32:	2100      	movs	r1, #0
 8001f34:	f005 fa44 	bl	80073c0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001f38:	4b21      	ldr	r3, [pc, #132]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f3a:	4a22      	ldr	r2, [pc, #136]	@ (8001fc4 <MX_ADC_Init+0xa0>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001f3e:	4b20      	ldr	r3, [pc, #128]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001f44:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f46:	22c0      	movs	r2, #192	@ 0xc0
 8001f48:	0612      	lsls	r2, r2, #24
 8001f4a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001f4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8001f52:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001f58:	4b19      	ldr	r3, [pc, #100]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f5e:	4b18      	ldr	r3, [pc, #96]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001f64:	4b16      	ldr	r3, [pc, #88]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f66:	2220      	movs	r2, #32
 8001f68:	2100      	movs	r1, #0
 8001f6a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001f6c:	4b14      	ldr	r3, [pc, #80]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f6e:	2221      	movs	r2, #33	@ 0x21
 8001f70:	2100      	movs	r1, #0
 8001f72:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f74:	4b12      	ldr	r3, [pc, #72]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f7c:	22c2      	movs	r2, #194	@ 0xc2
 8001f7e:	32ff      	adds	r2, #255	@ 0xff
 8001f80:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001f82:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f84:	222c      	movs	r2, #44	@ 0x2c
 8001f86:	2100      	movs	r1, #0
 8001f88:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f8c:	2204      	movs	r2, #4
 8001f8e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f90:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = ENABLE;
 8001f96:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f98:	2201      	movs	r2, #1
 8001f9a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8001f9c:	4b08      	ldr	r3, [pc, #32]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001fa8:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <MX_ADC_Init+0x9c>)
 8001faa:	0018      	movs	r0, r3
 8001fac:	f000 ffc4 	bl	8002f38 <HAL_ADC_Init>
 8001fb0:	1e03      	subs	r3, r0, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001fb4:	f000 f9aa 	bl	800230c <Error_Handler>
  // to minimize power consumption
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001fb8:	46c0      	nop			@ (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000078 	.word	0x20000078
 8001fc4:	40012400 	.word	0x40012400

08001fc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8002040 <MX_I2C1_Init+0x78>)
 8001fce:	4a1d      	ldr	r2, [pc, #116]	@ (8002044 <MX_I2C1_Init+0x7c>)
 8001fd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8001fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8002040 <MX_I2C1_Init+0x78>)
 8001fd4:	22c1      	movs	r2, #193	@ 0xc1
 8001fd6:	00d2      	lsls	r2, r2, #3
 8001fd8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001fda:	4b19      	ldr	r3, [pc, #100]	@ (8002040 <MX_I2C1_Init+0x78>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fe0:	4b17      	ldr	r3, [pc, #92]	@ (8002040 <MX_I2C1_Init+0x78>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe6:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <MX_I2C1_Init+0x78>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001fec:	4b14      	ldr	r3, [pc, #80]	@ (8002040 <MX_I2C1_Init+0x78>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ff2:	4b13      	ldr	r3, [pc, #76]	@ (8002040 <MX_I2C1_Init+0x78>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <MX_I2C1_Init+0x78>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ffe:	4b10      	ldr	r3, [pc, #64]	@ (8002040 <MX_I2C1_Init+0x78>)
 8002000:	2200      	movs	r2, #0
 8002002:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002004:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <MX_I2C1_Init+0x78>)
 8002006:	0018      	movs	r0, r3
 8002008:	f001 ff7a 	bl	8003f00 <HAL_I2C_Init>
 800200c:	1e03      	subs	r3, r0, #0
 800200e:	d001      	beq.n	8002014 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002010:	f000 f97c 	bl	800230c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002014:	4b0a      	ldr	r3, [pc, #40]	@ (8002040 <MX_I2C1_Init+0x78>)
 8002016:	2100      	movs	r1, #0
 8002018:	0018      	movs	r0, r3
 800201a:	f002 fe49 	bl	8004cb0 <HAL_I2CEx_ConfigAnalogFilter>
 800201e:	1e03      	subs	r3, r0, #0
 8002020:	d001      	beq.n	8002026 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002022:	f000 f973 	bl	800230c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002026:	4b06      	ldr	r3, [pc, #24]	@ (8002040 <MX_I2C1_Init+0x78>)
 8002028:	2100      	movs	r1, #0
 800202a:	0018      	movs	r0, r3
 800202c:	f002 fe8c 	bl	8004d48 <HAL_I2CEx_ConfigDigitalFilter>
 8002030:	1e03      	subs	r3, r0, #0
 8002032:	d001      	beq.n	8002038 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002034:	f000 f96a 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002038:	46c0      	nop			@ (mov r8, r8)
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	200000d4 	.word	0x200000d4
 8002044:	40005400 	.word	0x40005400

08002048 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800204c:	4b14      	ldr	r3, [pc, #80]	@ (80020a0 <MX_LPUART1_UART_Init+0x58>)
 800204e:	4a15      	ldr	r2, [pc, #84]	@ (80020a4 <MX_LPUART1_UART_Init+0x5c>)
 8002050:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002052:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <MX_LPUART1_UART_Init+0x58>)
 8002054:	22e1      	movs	r2, #225	@ 0xe1
 8002056:	0252      	lsls	r2, r2, #9
 8002058:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800205a:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <MX_LPUART1_UART_Init+0x58>)
 800205c:	2200      	movs	r2, #0
 800205e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002060:	4b0f      	ldr	r3, [pc, #60]	@ (80020a0 <MX_LPUART1_UART_Init+0x58>)
 8002062:	2200      	movs	r2, #0
 8002064:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002066:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <MX_LPUART1_UART_Init+0x58>)
 8002068:	2200      	movs	r2, #0
 800206a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800206c:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <MX_LPUART1_UART_Init+0x58>)
 800206e:	220c      	movs	r2, #12
 8002070:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002072:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <MX_LPUART1_UART_Init+0x58>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002078:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <MX_LPUART1_UART_Init+0x58>)
 800207a:	2200      	movs	r2, #0
 800207c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800207e:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <MX_LPUART1_UART_Init+0x58>)
 8002080:	2200      	movs	r2, #0
 8002082:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <MX_LPUART1_UART_Init+0x58>)
 8002086:	0018      	movs	r0, r3
 8002088:	f004 f9e8 	bl	800645c <HAL_UART_Init>
 800208c:	1e03      	subs	r3, r0, #0
 800208e:	d001      	beq.n	8002094 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002090:	f000 f93c 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  lora.huart = &hlpuart1;
 8002094:	4b04      	ldr	r3, [pc, #16]	@ (80020a8 <MX_LPUART1_UART_Init+0x60>)
 8002096:	4a02      	ldr	r2, [pc, #8]	@ (80020a0 <MX_LPUART1_UART_Init+0x58>)
 8002098:	601a      	str	r2, [r3, #0]
  /* USER CODE END LPUART1_Init 2 */

}
 800209a:	46c0      	nop			@ (mov r8, r8)
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000128 	.word	0x20000128
 80020a4:	40004800 	.word	0x40004800
 80020a8:	2000025c 	.word	0x2000025c

080020ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80020b0:	4b16      	ldr	r3, [pc, #88]	@ (800210c <MX_USART1_UART_Init+0x60>)
 80020b2:	4a17      	ldr	r2, [pc, #92]	@ (8002110 <MX_USART1_UART_Init+0x64>)
 80020b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80020b6:	4b15      	ldr	r3, [pc, #84]	@ (800210c <MX_USART1_UART_Init+0x60>)
 80020b8:	22e1      	movs	r2, #225	@ 0xe1
 80020ba:	0252      	lsls	r2, r2, #9
 80020bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80020be:	4b13      	ldr	r3, [pc, #76]	@ (800210c <MX_USART1_UART_Init+0x60>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <MX_USART1_UART_Init+0x60>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80020ca:	4b10      	ldr	r3, [pc, #64]	@ (800210c <MX_USART1_UART_Init+0x60>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80020d0:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <MX_USART1_UART_Init+0x60>)
 80020d2:	220c      	movs	r2, #12
 80020d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020d6:	4b0d      	ldr	r3, [pc, #52]	@ (800210c <MX_USART1_UART_Init+0x60>)
 80020d8:	2200      	movs	r2, #0
 80020da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80020dc:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <MX_USART1_UART_Init+0x60>)
 80020de:	2200      	movs	r2, #0
 80020e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020e2:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <MX_USART1_UART_Init+0x60>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020e8:	4b08      	ldr	r3, [pc, #32]	@ (800210c <MX_USART1_UART_Init+0x60>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020ee:	4b07      	ldr	r3, [pc, #28]	@ (800210c <MX_USART1_UART_Init+0x60>)
 80020f0:	0018      	movs	r0, r3
 80020f2:	f004 f9b3 	bl	800645c <HAL_UART_Init>
 80020f6:	1e03      	subs	r3, r0, #0
 80020f8:	d001      	beq.n	80020fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80020fa:	f000 f907 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  ConsolePrintf("USART1 (DBG) Cnfigured\r\n");
 80020fe:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <MX_USART1_UART_Init+0x68>)
 8002100:	0018      	movs	r0, r3
 8002102:	f000 f88d 	bl	8002220 <ConsolePrintf>
  /* USER CODE END USART1_Init 2 */

}
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	200001b0 	.word	0x200001b0
 8002110:	40013800 	.word	0x40013800
 8002114:	08007fcc 	.word	0x08007fcc

08002118 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <MX_RTC_Init+0x4c>)
 800211e:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <MX_RTC_Init+0x50>)
 8002120:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <MX_RTC_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002128:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <MX_RTC_Init+0x4c>)
 800212a:	227f      	movs	r2, #127	@ 0x7f
 800212c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800212e:	4b0d      	ldr	r3, [pc, #52]	@ (8002164 <MX_RTC_Init+0x4c>)
 8002130:	22ff      	movs	r2, #255	@ 0xff
 8002132:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002134:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <MX_RTC_Init+0x4c>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800213a:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <MX_RTC_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002140:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <MX_RTC_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002146:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <MX_RTC_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <MX_RTC_Init+0x4c>)
 800214e:	0018      	movs	r0, r3
 8002150:	f003 fe18 	bl	8005d84 <HAL_RTC_Init>
 8002154:	1e03      	subs	r3, r0, #0
 8002156:	d001      	beq.n	800215c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002158:	f000 f8d8 	bl	800230c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800215c:	46c0      	nop			@ (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	20000238 	.word	0x20000238
 8002168:	40002800 	.word	0x40002800

0800216c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800216c:	b590      	push	{r4, r7, lr}
 800216e:	b089      	sub	sp, #36	@ 0x24
 8002170:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002172:	240c      	movs	r4, #12
 8002174:	193b      	adds	r3, r7, r4
 8002176:	0018      	movs	r0, r3
 8002178:	2314      	movs	r3, #20
 800217a:	001a      	movs	r2, r3
 800217c:	2100      	movs	r1, #0
 800217e:	f005 f91f 	bl	80073c0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <MX_GPIO_Init+0xac>)
 8002184:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002186:	4b24      	ldr	r3, [pc, #144]	@ (8002218 <MX_GPIO_Init+0xac>)
 8002188:	2101      	movs	r1, #1
 800218a:	430a      	orrs	r2, r1
 800218c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800218e:	4b22      	ldr	r3, [pc, #136]	@ (8002218 <MX_GPIO_Init+0xac>)
 8002190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002192:	2201      	movs	r2, #1
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <MX_GPIO_Init+0xac>)
 800219c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800219e:	4b1e      	ldr	r3, [pc, #120]	@ (8002218 <MX_GPIO_Init+0xac>)
 80021a0:	2102      	movs	r1, #2
 80021a2:	430a      	orrs	r2, r1
 80021a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002218 <MX_GPIO_Init+0xac>)
 80021a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021aa:	2202      	movs	r2, #2
 80021ac:	4013      	ands	r3, r2
 80021ae:	607b      	str	r3, [r7, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_SET);
 80021b2:	4b1a      	ldr	r3, [pc, #104]	@ (800221c <MX_GPIO_Init+0xb0>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	2101      	movs	r1, #1
 80021b8:	0018      	movs	r0, r3
 80021ba:	f001 fe83 	bl	8003ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80021be:	4b17      	ldr	r3, [pc, #92]	@ (800221c <MX_GPIO_Init+0xb0>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	2120      	movs	r1, #32
 80021c4:	0018      	movs	r0, r3
 80021c6:	f001 fe7d 	bl	8003ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VBAT_MEAS_EN_Pin I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin;
 80021ca:	193b      	adds	r3, r7, r4
 80021cc:	2221      	movs	r2, #33	@ 0x21
 80021ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021d0:	193b      	adds	r3, r7, r4
 80021d2:	2201      	movs	r2, #1
 80021d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	193b      	adds	r3, r7, r4
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021dc:	193b      	adds	r3, r7, r4
 80021de:	2200      	movs	r2, #0
 80021e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e2:	193b      	adds	r3, r7, r4
 80021e4:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <MX_GPIO_Init+0xb0>)
 80021e6:	0019      	movs	r1, r3
 80021e8:	0010      	movs	r0, r2
 80021ea:	f001 fc0b 	bl	8003a04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80021ee:	0021      	movs	r1, r4
 80021f0:	187b      	adds	r3, r7, r1
 80021f2:	2202      	movs	r2, #2
 80021f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f6:	187b      	adds	r3, r7, r1
 80021f8:	2203      	movs	r2, #3
 80021fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	187b      	adds	r3, r7, r1
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002202:	187b      	adds	r3, r7, r1
 8002204:	4a05      	ldr	r2, [pc, #20]	@ (800221c <MX_GPIO_Init+0xb0>)
 8002206:	0019      	movs	r1, r3
 8002208:	0010      	movs	r0, r2
 800220a:	f001 fbfb 	bl	8003a04 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	b009      	add	sp, #36	@ 0x24
 8002214:	bd90      	pop	{r4, r7, pc}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	40021000 	.word	0x40021000
 800221c:	50000400 	.word	0x50000400

08002220 <ConsolePrintf>:

/* USER CODE BEGIN 4 */
void ConsolePrintf(const char *format, ...)
{
 8002220:	b40f      	push	{r0, r1, r2, r3}
 8002222:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002224:	b0df      	sub	sp, #380	@ 0x17c
 8002226:	af06      	add	r7, sp, #24
  char final_buffer[160];    // Combined buffer (timestamp + message)

  // Get time and date from RTC
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002228:	2308      	movs	r3, #8
 800222a:	18f9      	adds	r1, r7, r3
 800222c:	4b31      	ldr	r3, [pc, #196]	@ (80022f4 <ConsolePrintf+0xd4>)
 800222e:	2200      	movs	r2, #0
 8002230:	0018      	movs	r0, r3
 8002232:	f003 fe43 	bl	8005ebc <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002236:	231c      	movs	r3, #28
 8002238:	18f9      	adds	r1, r7, r3
 800223a:	4b2e      	ldr	r3, [pc, #184]	@ (80022f4 <ConsolePrintf+0xd4>)
 800223c:	2200      	movs	r2, #0
 800223e:	0018      	movs	r0, r3
 8002240:	f003 fe9a 	bl	8005f78 <HAL_RTC_GetDate>

  // Format timestamp as [YYYY-MM-DD HH:MM:SS]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
           date.Year, date.Month, date.Date,
 8002244:	4b2c      	ldr	r3, [pc, #176]	@ (80022f8 <ConsolePrintf+0xd8>)
 8002246:	22b0      	movs	r2, #176	@ 0xb0
 8002248:	0052      	lsls	r2, r2, #1
 800224a:	189b      	adds	r3, r3, r2
 800224c:	19db      	adds	r3, r3, r7
 800224e:	78db      	ldrb	r3, [r3, #3]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8002250:	469c      	mov	ip, r3
           date.Year, date.Month, date.Date,
 8002252:	4b29      	ldr	r3, [pc, #164]	@ (80022f8 <ConsolePrintf+0xd8>)
 8002254:	189b      	adds	r3, r3, r2
 8002256:	19db      	adds	r3, r3, r7
 8002258:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 800225a:	0019      	movs	r1, r3
           date.Year, date.Month, date.Date,
 800225c:	4b26      	ldr	r3, [pc, #152]	@ (80022f8 <ConsolePrintf+0xd8>)
 800225e:	189b      	adds	r3, r3, r2
 8002260:	19db      	adds	r3, r3, r7
 8002262:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8002264:	001c      	movs	r4, r3
           time.Hours, time.Minutes, time.Seconds);
 8002266:	4b25      	ldr	r3, [pc, #148]	@ (80022fc <ConsolePrintf+0xdc>)
 8002268:	189b      	adds	r3, r3, r2
 800226a:	19db      	adds	r3, r3, r7
 800226c:	781b      	ldrb	r3, [r3, #0]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 800226e:	001d      	movs	r5, r3
           time.Hours, time.Minutes, time.Seconds);
 8002270:	4b22      	ldr	r3, [pc, #136]	@ (80022fc <ConsolePrintf+0xdc>)
 8002272:	189b      	adds	r3, r3, r2
 8002274:	19db      	adds	r3, r3, r7
 8002276:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8002278:	001e      	movs	r6, r3
           time.Hours, time.Minutes, time.Seconds);
 800227a:	4b20      	ldr	r3, [pc, #128]	@ (80022fc <ConsolePrintf+0xdc>)
 800227c:	189b      	adds	r3, r3, r2
 800227e:	19db      	adds	r3, r3, r7
 8002280:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8002282:	4a1f      	ldr	r2, [pc, #124]	@ (8002300 <ConsolePrintf+0xe0>)
 8002284:	20c0      	movs	r0, #192	@ 0xc0
 8002286:	1838      	adds	r0, r7, r0
 8002288:	9304      	str	r3, [sp, #16]
 800228a:	9603      	str	r6, [sp, #12]
 800228c:	9502      	str	r5, [sp, #8]
 800228e:	9401      	str	r4, [sp, #4]
 8002290:	9100      	str	r1, [sp, #0]
 8002292:	4663      	mov	r3, ip
 8002294:	2120      	movs	r1, #32
 8002296:	f005 f801 	bl	800729c <sniprintf>

  // Format the original message
  va_list args;
  va_start(args, format);
 800229a:	23be      	movs	r3, #190	@ 0xbe
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	18fb      	adds	r3, r7, r3
 80022a0:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), format, args);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	22bc      	movs	r2, #188	@ 0xbc
 80022a6:	0052      	lsls	r2, r2, #1
 80022a8:	18ba      	adds	r2, r7, r2
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	25e0      	movs	r5, #224	@ 0xe0
 80022ae:	1978      	adds	r0, r7, r5
 80022b0:	2180      	movs	r1, #128	@ 0x80
 80022b2:	f005 f879 	bl	80073a8 <vsniprintf>
  va_end(args);

  // Combine timestamp and message
  snprintf(final_buffer, sizeof(final_buffer), "%s%s", timestamp_buffer, buffer);
 80022b6:	20c0      	movs	r0, #192	@ 0xc0
 80022b8:	1839      	adds	r1, r7, r0
 80022ba:	4a12      	ldr	r2, [pc, #72]	@ (8002304 <ConsolePrintf+0xe4>)
 80022bc:	2420      	movs	r4, #32
 80022be:	1938      	adds	r0, r7, r4
 80022c0:	197b      	adds	r3, r7, r5
 80022c2:	9300      	str	r3, [sp, #0]
 80022c4:	000b      	movs	r3, r1
 80022c6:	21a0      	movs	r1, #160	@ 0xa0
 80022c8:	f004 ffe8 	bl	800729c <sniprintf>

  // Transmit the combined message
  HAL_UART_Transmit(&huart1, (uint8_t *)final_buffer, strlen(final_buffer), HAL_MAX_DELAY);
 80022cc:	193b      	adds	r3, r7, r4
 80022ce:	0018      	movs	r0, r3
 80022d0:	f7fd ff1a 	bl	8000108 <strlen>
 80022d4:	0003      	movs	r3, r0
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	2301      	movs	r3, #1
 80022da:	425b      	negs	r3, r3
 80022dc:	1939      	adds	r1, r7, r4
 80022de:	480a      	ldr	r0, [pc, #40]	@ (8002308 <ConsolePrintf+0xe8>)
 80022e0:	f004 f94e 	bl	8006580 <HAL_UART_Transmit>
}
 80022e4:	46c0      	nop			@ (mov r8, r8)
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b059      	add	sp, #356	@ 0x164
 80022ea:	bcf0      	pop	{r4, r5, r6, r7}
 80022ec:	bc08      	pop	{r3}
 80022ee:	b004      	add	sp, #16
 80022f0:	4718      	bx	r3
 80022f2:	46c0      	nop			@ (mov r8, r8)
 80022f4:	20000238 	.word	0x20000238
 80022f8:	fffffebc 	.word	0xfffffebc
 80022fc:	fffffea8 	.word	0xfffffea8
 8002300:	08007fe8 	.word	0x08007fe8
 8002304:	0800800c 	.word	0x0800800c
 8002308:	200001b0 	.word	0x200001b0

0800230c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002310:	b672      	cpsid	i
}
 8002312:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002314:	46c0      	nop			@ (mov r8, r8)
 8002316:	e7fd      	b.n	8002314 <Error_Handler+0x8>

08002318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231c:	4b09      	ldr	r3, [pc, #36]	@ (8002344 <HAL_MspInit+0x2c>)
 800231e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002320:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <HAL_MspInit+0x2c>)
 8002322:	2101      	movs	r1, #1
 8002324:	430a      	orrs	r2, r1
 8002326:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002328:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <HAL_MspInit+0x2c>)
 800232a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <HAL_MspInit+0x2c>)
 800232e:	2180      	movs	r1, #128	@ 0x80
 8002330:	0549      	lsls	r1, r1, #21
 8002332:	430a      	orrs	r2, r1
 8002334:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/

  /** Select which pad is connected to VREFINT_ADC
  */
  HAL_SYSCFG_VREFINT_OutputSelect(SYSCFG_VREFINT_OUT_PB1);
 8002336:	2020      	movs	r0, #32
 8002338:	f000 fde8 	bl	8002f0c <HAL_SYSCFG_VREFINT_OutputSelect>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233c:	46c0      	nop			@ (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			@ (mov r8, r8)
 8002344:	40021000 	.word	0x40021000

08002348 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002348:	b590      	push	{r4, r7, lr}
 800234a:	b089      	sub	sp, #36	@ 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	240c      	movs	r4, #12
 8002352:	193b      	adds	r3, r7, r4
 8002354:	0018      	movs	r0, r3
 8002356:	2314      	movs	r3, #20
 8002358:	001a      	movs	r2, r3
 800235a:	2100      	movs	r1, #0
 800235c:	f005 f830 	bl	80073c0 <memset>
  if(hadc->Instance==ADC1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a14      	ldr	r2, [pc, #80]	@ (80023b8 <HAL_ADC_MspInit+0x70>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d122      	bne.n	80023b0 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800236a:	4b14      	ldr	r3, [pc, #80]	@ (80023bc <HAL_ADC_MspInit+0x74>)
 800236c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800236e:	4b13      	ldr	r3, [pc, #76]	@ (80023bc <HAL_ADC_MspInit+0x74>)
 8002370:	2180      	movs	r1, #128	@ 0x80
 8002372:	0089      	lsls	r1, r1, #2
 8002374:	430a      	orrs	r2, r1
 8002376:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002378:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <HAL_ADC_MspInit+0x74>)
 800237a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800237c:	4b0f      	ldr	r3, [pc, #60]	@ (80023bc <HAL_ADC_MspInit+0x74>)
 800237e:	2101      	movs	r1, #1
 8002380:	430a      	orrs	r2, r1
 8002382:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002384:	4b0d      	ldr	r3, [pc, #52]	@ (80023bc <HAL_ADC_MspInit+0x74>)
 8002386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002388:	2201      	movs	r2, #1
 800238a:	4013      	ands	r3, r2
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = VBAT_MEAS_Pin;
 8002390:	193b      	adds	r3, r7, r4
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002396:	193b      	adds	r3, r7, r4
 8002398:	2203      	movs	r2, #3
 800239a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	193b      	adds	r3, r7, r4
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBAT_MEAS_GPIO_Port, &GPIO_InitStruct);
 80023a2:	193a      	adds	r2, r7, r4
 80023a4:	23a0      	movs	r3, #160	@ 0xa0
 80023a6:	05db      	lsls	r3, r3, #23
 80023a8:	0011      	movs	r1, r2
 80023aa:	0018      	movs	r0, r3
 80023ac:	f001 fb2a 	bl	8003a04 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80023b0:	46c0      	nop			@ (mov r8, r8)
 80023b2:	46bd      	mov	sp, r7
 80023b4:	b009      	add	sp, #36	@ 0x24
 80023b6:	bd90      	pop	{r4, r7, pc}
 80023b8:	40012400 	.word	0x40012400
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a09      	ldr	r2, [pc, #36]	@ (80023f4 <HAL_ADC_MspDeInit+0x34>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d10b      	bne.n	80023ea <HAL_ADC_MspDeInit+0x2a>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <HAL_ADC_MspDeInit+0x38>)
 80023d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023d6:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <HAL_ADC_MspDeInit+0x38>)
 80023d8:	4908      	ldr	r1, [pc, #32]	@ (80023fc <HAL_ADC_MspDeInit+0x3c>)
 80023da:	400a      	ands	r2, r1
 80023dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(VBAT_MEAS_GPIO_Port, VBAT_MEAS_Pin);
 80023de:	23a0      	movs	r3, #160	@ 0xa0
 80023e0:	05db      	lsls	r3, r3, #23
 80023e2:	2101      	movs	r1, #1
 80023e4:	0018      	movs	r0, r3
 80023e6:	f001 fc8b 	bl	8003d00 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 80023ea:	46c0      	nop			@ (mov r8, r8)
 80023ec:	46bd      	mov	sp, r7
 80023ee:	b002      	add	sp, #8
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	40012400 	.word	0x40012400
 80023f8:	40021000 	.word	0x40021000
 80023fc:	fffffdff 	.word	0xfffffdff

08002400 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b089      	sub	sp, #36	@ 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002408:	240c      	movs	r4, #12
 800240a:	193b      	adds	r3, r7, r4
 800240c:	0018      	movs	r0, r3
 800240e:	2314      	movs	r3, #20
 8002410:	001a      	movs	r2, r3
 8002412:	2100      	movs	r1, #0
 8002414:	f004 ffd4 	bl	80073c0 <memset>
  if(hi2c->Instance==I2C1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a17      	ldr	r2, [pc, #92]	@ (800247c <HAL_I2C_MspInit+0x7c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d128      	bne.n	8002474 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002422:	4b17      	ldr	r3, [pc, #92]	@ (8002480 <HAL_I2C_MspInit+0x80>)
 8002424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002426:	4b16      	ldr	r3, [pc, #88]	@ (8002480 <HAL_I2C_MspInit+0x80>)
 8002428:	2102      	movs	r1, #2
 800242a:	430a      	orrs	r2, r1
 800242c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800242e:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <HAL_I2C_MspInit+0x80>)
 8002430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002432:	2202      	movs	r2, #2
 8002434:	4013      	ands	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800243a:	0021      	movs	r1, r4
 800243c:	187b      	adds	r3, r7, r1
 800243e:	22c0      	movs	r2, #192	@ 0xc0
 8002440:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002442:	187b      	adds	r3, r7, r1
 8002444:	2212      	movs	r2, #18
 8002446:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	187b      	adds	r3, r7, r1
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244e:	187b      	adds	r3, r7, r1
 8002450:	2203      	movs	r2, #3
 8002452:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002454:	187b      	adds	r3, r7, r1
 8002456:	2201      	movs	r2, #1
 8002458:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245a:	187b      	adds	r3, r7, r1
 800245c:	4a09      	ldr	r2, [pc, #36]	@ (8002484 <HAL_I2C_MspInit+0x84>)
 800245e:	0019      	movs	r1, r3
 8002460:	0010      	movs	r0, r2
 8002462:	f001 facf 	bl	8003a04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002466:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <HAL_I2C_MspInit+0x80>)
 8002468:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800246a:	4b05      	ldr	r3, [pc, #20]	@ (8002480 <HAL_I2C_MspInit+0x80>)
 800246c:	2180      	movs	r1, #128	@ 0x80
 800246e:	0389      	lsls	r1, r1, #14
 8002470:	430a      	orrs	r2, r1
 8002472:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002474:	46c0      	nop			@ (mov r8, r8)
 8002476:	46bd      	mov	sp, r7
 8002478:	b009      	add	sp, #36	@ 0x24
 800247a:	bd90      	pop	{r4, r7, pc}
 800247c:	40005400 	.word	0x40005400
 8002480:	40021000 	.word	0x40021000
 8002484:	50000400 	.word	0x50000400

08002488 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0b      	ldr	r2, [pc, #44]	@ (80024c4 <HAL_I2C_MspDeInit+0x3c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10f      	bne.n	80024ba <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800249a:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <HAL_I2C_MspDeInit+0x40>)
 800249c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800249e:	4b0a      	ldr	r3, [pc, #40]	@ (80024c8 <HAL_I2C_MspDeInit+0x40>)
 80024a0:	490a      	ldr	r1, [pc, #40]	@ (80024cc <HAL_I2C_MspDeInit+0x44>)
 80024a2:	400a      	ands	r2, r1
 80024a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80024a6:	4b0a      	ldr	r3, [pc, #40]	@ (80024d0 <HAL_I2C_MspDeInit+0x48>)
 80024a8:	2140      	movs	r1, #64	@ 0x40
 80024aa:	0018      	movs	r0, r3
 80024ac:	f001 fc28 	bl	8003d00 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80024b0:	4b07      	ldr	r3, [pc, #28]	@ (80024d0 <HAL_I2C_MspDeInit+0x48>)
 80024b2:	2180      	movs	r1, #128	@ 0x80
 80024b4:	0018      	movs	r0, r3
 80024b6:	f001 fc23 	bl	8003d00 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			@ (mov r8, r8)
 80024c4:	40005400 	.word	0x40005400
 80024c8:	40021000 	.word	0x40021000
 80024cc:	ffdfffff 	.word	0xffdfffff
 80024d0:	50000400 	.word	0x50000400

080024d4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d4:	b590      	push	{r4, r7, lr}
 80024d6:	b08b      	sub	sp, #44	@ 0x2c
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	2414      	movs	r4, #20
 80024de:	193b      	adds	r3, r7, r4
 80024e0:	0018      	movs	r0, r3
 80024e2:	2314      	movs	r3, #20
 80024e4:	001a      	movs	r2, r3
 80024e6:	2100      	movs	r1, #0
 80024e8:	f004 ff6a 	bl	80073c0 <memset>
  if(huart->Instance==LPUART1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a30      	ldr	r2, [pc, #192]	@ (80025b4 <HAL_UART_MspInit+0xe0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d12a      	bne.n	800254c <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80024f6:	4b30      	ldr	r3, [pc, #192]	@ (80025b8 <HAL_UART_MspInit+0xe4>)
 80024f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024fa:	4b2f      	ldr	r3, [pc, #188]	@ (80025b8 <HAL_UART_MspInit+0xe4>)
 80024fc:	2180      	movs	r1, #128	@ 0x80
 80024fe:	02c9      	lsls	r1, r1, #11
 8002500:	430a      	orrs	r2, r1
 8002502:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002504:	4b2c      	ldr	r3, [pc, #176]	@ (80025b8 <HAL_UART_MspInit+0xe4>)
 8002506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002508:	4b2b      	ldr	r3, [pc, #172]	@ (80025b8 <HAL_UART_MspInit+0xe4>)
 800250a:	2101      	movs	r1, #1
 800250c:	430a      	orrs	r2, r1
 800250e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002510:	4b29      	ldr	r3, [pc, #164]	@ (80025b8 <HAL_UART_MspInit+0xe4>)
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800251c:	0021      	movs	r1, r4
 800251e:	187b      	adds	r3, r7, r1
 8002520:	220c      	movs	r2, #12
 8002522:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	187b      	adds	r3, r7, r1
 8002526:	2202      	movs	r2, #2
 8002528:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252a:	187b      	adds	r3, r7, r1
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002530:	187b      	adds	r3, r7, r1
 8002532:	2203      	movs	r2, #3
 8002534:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8002536:	187b      	adds	r3, r7, r1
 8002538:	2206      	movs	r2, #6
 800253a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253c:	187a      	adds	r2, r7, r1
 800253e:	23a0      	movs	r3, #160	@ 0xa0
 8002540:	05db      	lsls	r3, r3, #23
 8002542:	0011      	movs	r1, r2
 8002544:	0018      	movs	r0, r3
 8002546:	f001 fa5d 	bl	8003a04 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 800254a:	e02f      	b.n	80025ac <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1a      	ldr	r2, [pc, #104]	@ (80025bc <HAL_UART_MspInit+0xe8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d12a      	bne.n	80025ac <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002556:	4b18      	ldr	r3, [pc, #96]	@ (80025b8 <HAL_UART_MspInit+0xe4>)
 8002558:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800255a:	4b17      	ldr	r3, [pc, #92]	@ (80025b8 <HAL_UART_MspInit+0xe4>)
 800255c:	2180      	movs	r1, #128	@ 0x80
 800255e:	01c9      	lsls	r1, r1, #7
 8002560:	430a      	orrs	r2, r1
 8002562:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002564:	4b14      	ldr	r3, [pc, #80]	@ (80025b8 <HAL_UART_MspInit+0xe4>)
 8002566:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002568:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <HAL_UART_MspInit+0xe4>)
 800256a:	2101      	movs	r1, #1
 800256c:	430a      	orrs	r2, r1
 800256e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002570:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <HAL_UART_MspInit+0xe4>)
 8002572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002574:	2201      	movs	r2, #1
 8002576:	4013      	ands	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800257c:	2114      	movs	r1, #20
 800257e:	187b      	adds	r3, r7, r1
 8002580:	22c0      	movs	r2, #192	@ 0xc0
 8002582:	00d2      	lsls	r2, r2, #3
 8002584:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002586:	187b      	adds	r3, r7, r1
 8002588:	2202      	movs	r2, #2
 800258a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258c:	187b      	adds	r3, r7, r1
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002592:	187b      	adds	r3, r7, r1
 8002594:	2203      	movs	r2, #3
 8002596:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002598:	187b      	adds	r3, r7, r1
 800259a:	2204      	movs	r2, #4
 800259c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259e:	187a      	adds	r2, r7, r1
 80025a0:	23a0      	movs	r3, #160	@ 0xa0
 80025a2:	05db      	lsls	r3, r3, #23
 80025a4:	0011      	movs	r1, r2
 80025a6:	0018      	movs	r0, r3
 80025a8:	f001 fa2c 	bl	8003a04 <HAL_GPIO_Init>
}
 80025ac:	46c0      	nop			@ (mov r8, r8)
 80025ae:	46bd      	mov	sp, r7
 80025b0:	b00b      	add	sp, #44	@ 0x2c
 80025b2:	bd90      	pop	{r4, r7, pc}
 80025b4:	40004800 	.word	0x40004800
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40013800 	.word	0x40013800

080025c0 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a13      	ldr	r2, [pc, #76]	@ (800261c <HAL_UART_MspDeInit+0x5c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d10c      	bne.n	80025ec <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN LPUART1_MspDeInit 0 */

    /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 80025d2:	4b13      	ldr	r3, [pc, #76]	@ (8002620 <HAL_UART_MspDeInit+0x60>)
 80025d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025d6:	4b12      	ldr	r3, [pc, #72]	@ (8002620 <HAL_UART_MspDeInit+0x60>)
 80025d8:	4912      	ldr	r1, [pc, #72]	@ (8002624 <HAL_UART_MspDeInit+0x64>)
 80025da:	400a      	ands	r2, r1
 80025dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80025de:	23a0      	movs	r3, #160	@ 0xa0
 80025e0:	05db      	lsls	r3, r3, #23
 80025e2:	210c      	movs	r1, #12
 80025e4:	0018      	movs	r0, r3
 80025e6:	f001 fb8b 	bl	8003d00 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80025ea:	e012      	b.n	8002612 <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART1)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002628 <HAL_UART_MspDeInit+0x68>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d10d      	bne.n	8002612 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART1_CLK_DISABLE();
 80025f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002620 <HAL_UART_MspDeInit+0x60>)
 80025f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025fa:	4b09      	ldr	r3, [pc, #36]	@ (8002620 <HAL_UART_MspDeInit+0x60>)
 80025fc:	490b      	ldr	r1, [pc, #44]	@ (800262c <HAL_UART_MspDeInit+0x6c>)
 80025fe:	400a      	ands	r2, r1
 8002600:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002602:	23c0      	movs	r3, #192	@ 0xc0
 8002604:	00da      	lsls	r2, r3, #3
 8002606:	23a0      	movs	r3, #160	@ 0xa0
 8002608:	05db      	lsls	r3, r3, #23
 800260a:	0011      	movs	r1, r2
 800260c:	0018      	movs	r0, r3
 800260e:	f001 fb77 	bl	8003d00 <HAL_GPIO_DeInit>
}
 8002612:	46c0      	nop			@ (mov r8, r8)
 8002614:	46bd      	mov	sp, r7
 8002616:	b002      	add	sp, #8
 8002618:	bd80      	pop	{r7, pc}
 800261a:	46c0      	nop			@ (mov r8, r8)
 800261c:	40004800 	.word	0x40004800
 8002620:	40021000 	.word	0x40021000
 8002624:	fffbffff 	.word	0xfffbffff
 8002628:	40013800 	.word	0x40013800
 800262c:	ffffbfff 	.word	0xffffbfff

08002630 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a06      	ldr	r2, [pc, #24]	@ (8002658 <HAL_RTC_MspInit+0x28>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d106      	bne.n	8002650 <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002642:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_RTC_MspInit+0x2c>)
 8002644:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002646:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_RTC_MspInit+0x2c>)
 8002648:	2180      	movs	r1, #128	@ 0x80
 800264a:	02c9      	lsls	r1, r1, #11
 800264c:	430a      	orrs	r2, r1
 800264e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002650:	46c0      	nop			@ (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b002      	add	sp, #8
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40002800 	.word	0x40002800
 800265c:	40021000 	.word	0x40021000

08002660 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002664:	46c0      	nop			@ (mov r8, r8)
 8002666:	e7fd      	b.n	8002664 <NMI_Handler+0x4>

08002668 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800266c:	46c0      	nop			@ (mov r8, r8)
 800266e:	e7fd      	b.n	800266c <HardFault_Handler+0x4>

08002670 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002674:	46c0      	nop			@ (mov r8, r8)
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800267e:	46c0      	nop			@ (mov r8, r8)
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002688:	f000 fbdc 	bl	8002e44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800268c:	46c0      	nop			@ (mov r8, r8)
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800269c:	4a14      	ldr	r2, [pc, #80]	@ (80026f0 <_sbrk+0x5c>)
 800269e:	4b15      	ldr	r3, [pc, #84]	@ (80026f4 <_sbrk+0x60>)
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026a8:	4b13      	ldr	r3, [pc, #76]	@ (80026f8 <_sbrk+0x64>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d102      	bne.n	80026b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <_sbrk+0x64>)
 80026b2:	4a12      	ldr	r2, [pc, #72]	@ (80026fc <_sbrk+0x68>)
 80026b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026b6:	4b10      	ldr	r3, [pc, #64]	@ (80026f8 <_sbrk+0x64>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	18d3      	adds	r3, r2, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d207      	bcs.n	80026d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026c4:	f004 fe9a 	bl	80073fc <__errno>
 80026c8:	0003      	movs	r3, r0
 80026ca:	220c      	movs	r2, #12
 80026cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ce:	2301      	movs	r3, #1
 80026d0:	425b      	negs	r3, r3
 80026d2:	e009      	b.n	80026e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026d4:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <_sbrk+0x64>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026da:	4b07      	ldr	r3, [pc, #28]	@ (80026f8 <_sbrk+0x64>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	18d2      	adds	r2, r2, r3
 80026e2:	4b05      	ldr	r3, [pc, #20]	@ (80026f8 <_sbrk+0x64>)
 80026e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80026e6:	68fb      	ldr	r3, [r7, #12]
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b006      	add	sp, #24
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20005000 	.word	0x20005000
 80026f4:	00000400 	.word	0x00000400
 80026f8:	20000260 	.word	0x20000260
 80026fc:	200003c8 	.word	0x200003c8

08002700 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002704:	46c0      	nop			@ (mov r8, r8)
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <scan_i2c_bus>:
uint16_t calculated_temp;
uint8_t  calculated_hum;
int16_t i2c_error_code = 0;

void scan_i2c_bus(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
	// we re-set these to false because we want to check this every time for safety
    has_sensor_1 = false;
 8002710:	4b0f      	ldr	r3, [pc, #60]	@ (8002750 <scan_i2c_bus+0x44>)
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]
    has_sensor_2 = false;
 8002716:	4b0f      	ldr	r3, [pc, #60]	@ (8002754 <scan_i2c_bus+0x48>)
 8002718:	2200      	movs	r2, #0
 800271a:	701a      	strb	r2, [r3, #0]

    if (HAL_I2C_IsDeviceReady(&hi2c1, 68 << 1, 1, 10) == HAL_OK) has_sensor_1 = true;
 800271c:	480e      	ldr	r0, [pc, #56]	@ (8002758 <scan_i2c_bus+0x4c>)
 800271e:	230a      	movs	r3, #10
 8002720:	2201      	movs	r2, #1
 8002722:	2188      	movs	r1, #136	@ 0x88
 8002724:	f001 fef4 	bl	8004510 <HAL_I2C_IsDeviceReady>
 8002728:	1e03      	subs	r3, r0, #0
 800272a:	d102      	bne.n	8002732 <scan_i2c_bus+0x26>
 800272c:	4b08      	ldr	r3, [pc, #32]	@ (8002750 <scan_i2c_bus+0x44>)
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_IsDeviceReady(&hi2c1, 70 << 1, 1, 10) == HAL_OK) has_sensor_2 = true;
 8002732:	4809      	ldr	r0, [pc, #36]	@ (8002758 <scan_i2c_bus+0x4c>)
 8002734:	230a      	movs	r3, #10
 8002736:	2201      	movs	r2, #1
 8002738:	218c      	movs	r1, #140	@ 0x8c
 800273a:	f001 fee9 	bl	8004510 <HAL_I2C_IsDeviceReady>
 800273e:	1e03      	subs	r3, r0, #0
 8002740:	d102      	bne.n	8002748 <scan_i2c_bus+0x3c>
 8002742:	4b04      	ldr	r3, [pc, #16]	@ (8002754 <scan_i2c_bus+0x48>)
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
}
 8002748:	46c0      	nop			@ (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	46c0      	nop			@ (mov r8, r8)
 8002750:	20000264 	.word	0x20000264
 8002754:	20000265 	.word	0x20000265
 8002758:	200000d4 	.word	0x200000d4

0800275c <sensor_init_and_read>:

bool sensor_init_and_read(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
    if (!has_sensor_1 && !has_sensor_2) {
 8002760:	4b37      	ldr	r3, [pc, #220]	@ (8002840 <sensor_init_and_read+0xe4>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2201      	movs	r2, #1
 8002766:	4053      	eors	r3, r2
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00b      	beq.n	8002786 <sensor_init_and_read+0x2a>
 800276e:	4b35      	ldr	r3, [pc, #212]	@ (8002844 <sensor_init_and_read+0xe8>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2201      	movs	r2, #1
 8002774:	4053      	eors	r3, r2
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d004      	beq.n	8002786 <sensor_init_and_read+0x2a>
    	i2c_error_code = NO_SENSORS_FOUND;
 800277c:	4b32      	ldr	r3, [pc, #200]	@ (8002848 <sensor_init_and_read+0xec>)
 800277e:	2201      	movs	r2, #1
 8002780:	801a      	strh	r2, [r3, #0]
        return false;
 8002782:	2300      	movs	r3, #0
 8002784:	e058      	b.n	8002838 <sensor_init_and_read+0xdc>
    }

    i2c_error_code = NO_ERROR;
 8002786:	4b30      	ldr	r3, [pc, #192]	@ (8002848 <sensor_init_and_read+0xec>)
 8002788:	2200      	movs	r2, #0
 800278a:	801a      	strh	r2, [r3, #0]
    HAL_Delay(100);
 800278c:	2064      	movs	r0, #100	@ 0x64
 800278e:	f000 fb75 	bl	8002e7c <HAL_Delay>

    if (has_sensor_1) {
 8002792:	4b2b      	ldr	r3, [pc, #172]	@ (8002840 <sensor_init_and_read+0xe4>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d015      	beq.n	80027c6 <sensor_init_and_read+0x6a>
        sht4x_init(SHT43_I2C_ADDR_44);
 800279a:	2044      	movs	r0, #68	@ 0x44
 800279c:	f000 fa24 	bl	8002be8 <sht4x_init>
        sht4x_soft_reset();
 80027a0:	f000 fa96 	bl	8002cd0 <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 80027a4:	4b29      	ldr	r3, [pc, #164]	@ (800284c <sensor_init_and_read+0xf0>)
 80027a6:	0018      	movs	r0, r3
 80027a8:	f000 f9f4 	bl	8002b94 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT43_I2C_ADDR_44);
 80027ac:	2044      	movs	r0, #68	@ 0x44
 80027ae:	f000 fa1b 	bl	8002be8 <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 80027b2:	4a27      	ldr	r2, [pc, #156]	@ (8002850 <sensor_init_and_read+0xf4>)
 80027b4:	4b27      	ldr	r3, [pc, #156]	@ (8002854 <sensor_init_and_read+0xf8>)
 80027b6:	0011      	movs	r1, r2
 80027b8:	0018      	movs	r0, r3
 80027ba:	f000 fa25 	bl	8002c08 <sht4x_measure_high_precision_ticks>
 80027be:	0003      	movs	r3, r0
 80027c0:	001a      	movs	r2, r3
 80027c2:	4b21      	ldr	r3, [pc, #132]	@ (8002848 <sensor_init_and_read+0xec>)
 80027c4:	801a      	strh	r2, [r3, #0]
    }

    if (has_sensor_2) {
 80027c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002844 <sensor_init_and_read+0xe8>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d015      	beq.n	80027fa <sensor_init_and_read+0x9e>
        sht4x_init(SHT40_I2C_ADDR_46);
 80027ce:	2046      	movs	r0, #70	@ 0x46
 80027d0:	f000 fa0a 	bl	8002be8 <sht4x_init>
        sht4x_soft_reset();
 80027d4:	f000 fa7c 	bl	8002cd0 <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 80027d8:	4b1c      	ldr	r3, [pc, #112]	@ (800284c <sensor_init_and_read+0xf0>)
 80027da:	0018      	movs	r0, r3
 80027dc:	f000 f9da 	bl	8002b94 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT40_I2C_ADDR_46);
 80027e0:	2046      	movs	r0, #70	@ 0x46
 80027e2:	f000 fa01 	bl	8002be8 <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 80027e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002858 <sensor_init_and_read+0xfc>)
 80027e8:	4b1c      	ldr	r3, [pc, #112]	@ (800285c <sensor_init_and_read+0x100>)
 80027ea:	0011      	movs	r1, r2
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 fa0b 	bl	8002c08 <sht4x_measure_high_precision_ticks>
 80027f2:	0003      	movs	r3, r0
 80027f4:	001a      	movs	r2, r3
 80027f6:	4b14      	ldr	r3, [pc, #80]	@ (8002848 <sensor_init_and_read+0xec>)
 80027f8:	801a      	strh	r2, [r3, #0]
    }

    calculated_temp            = (temp_ticks_1 / 100U) + 55U;
 80027fa:	4b16      	ldr	r3, [pc, #88]	@ (8002854 <sensor_init_and_read+0xf8>)
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	2164      	movs	r1, #100	@ 0x64
 8002800:	0018      	movs	r0, r3
 8002802:	f7fd fc93 	bl	800012c <__udivsi3>
 8002806:	0003      	movs	r3, r0
 8002808:	b29b      	uxth	r3, r3
 800280a:	3337      	adds	r3, #55	@ 0x37
 800280c:	b29a      	uxth	r2, r3
 800280e:	4b14      	ldr	r3, [pc, #80]	@ (8002860 <sensor_init_and_read+0x104>)
 8002810:	801a      	strh	r2, [r3, #0]
//    uint16_t calculated_temp_2 = (temp_ticks_2 / 100U) + 55U;
    calculated_hum             = (hum_ticks_1 / 100U);
 8002812:	4b0f      	ldr	r3, [pc, #60]	@ (8002850 <sensor_init_and_read+0xf4>)
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	2164      	movs	r1, #100	@ 0x64
 8002818:	0018      	movs	r0, r3
 800281a:	f7fd fc87 	bl	800012c <__udivsi3>
 800281e:	0003      	movs	r3, r0
 8002820:	b29b      	uxth	r3, r3
 8002822:	b2da      	uxtb	r2, r3
 8002824:	4b0f      	ldr	r3, [pc, #60]	@ (8002864 <sensor_init_and_read+0x108>)
 8002826:	701a      	strb	r2, [r3, #0]

    // convert to absolute unsigned values
//    uint8_t temp_delta = (uint8_t)abs(temp_diff);
//    uint8_t hum_delta  = (uint8_t)abs(hum_diff);

    if (i2c_error_code) {
 8002828:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <sensor_init_and_read+0xec>)
 800282a:	2200      	movs	r2, #0
 800282c:	5e9b      	ldrsh	r3, [r3, r2]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <sensor_init_and_read+0xda>
        return false;
 8002832:	2300      	movs	r3, #0
 8002834:	e000      	b.n	8002838 <sensor_init_and_read+0xdc>
    }
    return true;
 8002836:	2301      	movs	r3, #1
}
 8002838:	0018      	movs	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			@ (mov r8, r8)
 8002840:	20000264 	.word	0x20000264
 8002844:	20000265 	.word	0x20000265
 8002848:	20000272 	.word	0x20000272
 800284c:	00002710 	.word	0x00002710
 8002850:	20000268 	.word	0x20000268
 8002854:	20000266 	.word	0x20000266
 8002858:	2000026c 	.word	0x2000026c
 800285c:	2000026a 	.word	0x2000026a
 8002860:	2000026e 	.word	0x2000026e
 8002864:	20000270 	.word	0x20000270

08002868 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	b21b      	sxth	r3, r3
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	b21a      	sxth	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	3301      	adds	r3, #1
 800287e:	781b      	ldrb	r3, [r3, #0]
 8002880:	b21b      	sxth	r3, r3
 8002882:	4313      	orrs	r3, r2
 8002884:	b21b      	sxth	r3, r3
 8002886:	b29b      	uxth	r3, r3
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	b002      	add	sp, #8
 800288e:	bd80      	pop	{r7, pc}

08002890 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	000a      	movs	r2, r1
 800289a:	1cbb      	adds	r3, r7, #2
 800289c:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800289e:	230d      	movs	r3, #13
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	22ff      	movs	r2, #255	@ 0xff
 80028a4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80028a6:	230e      	movs	r3, #14
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	2200      	movs	r2, #0
 80028ac:	801a      	strh	r2, [r3, #0]
 80028ae:	e038      	b.n	8002922 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 80028b0:	230e      	movs	r3, #14
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	18d3      	adds	r3, r2, r3
 80028ba:	7819      	ldrb	r1, [r3, #0]
 80028bc:	220d      	movs	r2, #13
 80028be:	18bb      	adds	r3, r7, r2
 80028c0:	18ba      	adds	r2, r7, r2
 80028c2:	7812      	ldrb	r2, [r2, #0]
 80028c4:	404a      	eors	r2, r1
 80028c6:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80028c8:	230c      	movs	r3, #12
 80028ca:	18fb      	adds	r3, r7, r3
 80028cc:	2208      	movs	r2, #8
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	e01c      	b.n	800290c <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 80028d2:	210d      	movs	r1, #13
 80028d4:	187b      	adds	r3, r7, r1
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	da0a      	bge.n	80028f4 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80028de:	187b      	adds	r3, r7, r1
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	b25b      	sxtb	r3, r3
 80028e4:	18db      	adds	r3, r3, r3
 80028e6:	b25b      	sxtb	r3, r3
 80028e8:	2231      	movs	r2, #49	@ 0x31
 80028ea:	4053      	eors	r3, r2
 80028ec:	b25a      	sxtb	r2, r3
 80028ee:	187b      	adds	r3, r7, r1
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e005      	b.n	8002900 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 80028f4:	230d      	movs	r3, #13
 80028f6:	18fa      	adds	r2, r7, r3
 80028f8:	18fb      	adds	r3, r7, r3
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	18db      	adds	r3, r3, r3
 80028fe:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8002900:	220c      	movs	r2, #12
 8002902:	18bb      	adds	r3, r7, r2
 8002904:	18ba      	adds	r2, r7, r2
 8002906:	7812      	ldrb	r2, [r2, #0]
 8002908:	3a01      	subs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	230c      	movs	r3, #12
 800290e:	18fb      	adds	r3, r7, r3
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1dd      	bne.n	80028d2 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8002916:	220e      	movs	r2, #14
 8002918:	18bb      	adds	r3, r7, r2
 800291a:	18ba      	adds	r2, r7, r2
 800291c:	8812      	ldrh	r2, [r2, #0]
 800291e:	3201      	adds	r2, #1
 8002920:	801a      	strh	r2, [r3, #0]
 8002922:	230e      	movs	r3, #14
 8002924:	18fa      	adds	r2, r7, r3
 8002926:	1cbb      	adds	r3, r7, #2
 8002928:	8812      	ldrh	r2, [r2, #0]
 800292a:	881b      	ldrh	r3, [r3, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	d3bf      	bcc.n	80028b0 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8002930:	230d      	movs	r3, #13
 8002932:	18fb      	adds	r3, r7, r3
 8002934:	781b      	ldrb	r3, [r3, #0]
}
 8002936:	0018      	movs	r0, r3
 8002938:	46bd      	mov	sp, r7
 800293a:	b004      	add	sp, #16
 800293c:	bd80      	pop	{r7, pc}

0800293e <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
 8002946:	0008      	movs	r0, r1
 8002948:	0011      	movs	r1, r2
 800294a:	1cbb      	adds	r3, r7, #2
 800294c:	1c02      	adds	r2, r0, #0
 800294e:	801a      	strh	r2, [r3, #0]
 8002950:	1c7b      	adds	r3, r7, #1
 8002952:	1c0a      	adds	r2, r1, #0
 8002954:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8002956:	1cbb      	adds	r3, r7, #2
 8002958:	881a      	ldrh	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	0011      	movs	r1, r2
 800295e:	0018      	movs	r0, r3
 8002960:	f7ff ff96 	bl	8002890 <sensirion_i2c_generate_crc>
 8002964:	0003      	movs	r3, r0
 8002966:	001a      	movs	r2, r3
 8002968:	1c7b      	adds	r3, r7, #1
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	4293      	cmp	r3, r2
 800296e:	d001      	beq.n	8002974 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e000      	b.n	8002976 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8002974:	2300      	movs	r3, #0
}
 8002976:	0018      	movs	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	b002      	add	sp, #8
 800297c:	bd80      	pop	{r7, pc}

0800297e <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	0008      	movs	r0, r1
 8002988:	0011      	movs	r1, r2
 800298a:	1cbb      	adds	r3, r7, #2
 800298c:	1c02      	adds	r2, r0, #0
 800298e:	801a      	strh	r2, [r3, #0]
 8002990:	1c7b      	adds	r3, r7, #1
 8002992:	1c0a      	adds	r2, r1, #0
 8002994:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 8002996:	1cbb      	adds	r3, r7, #2
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	1cba      	adds	r2, r7, #2
 800299c:	1c59      	adds	r1, r3, #1
 800299e:	8011      	strh	r1, [r2, #0]
 80029a0:	001a      	movs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	189b      	adds	r3, r3, r2
 80029a6:	1c7a      	adds	r2, r7, #1
 80029a8:	7812      	ldrb	r2, [r2, #0]
 80029aa:	701a      	strb	r2, [r3, #0]
    return offset;
 80029ac:	1cbb      	adds	r3, r7, #2
 80029ae:	881b      	ldrh	r3, [r3, #0]
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b002      	add	sp, #8
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6039      	str	r1, [r7, #0]
 80029c0:	0011      	movs	r1, r2
 80029c2:	1dfb      	adds	r3, r7, #7
 80029c4:	1c02      	adds	r2, r0, #0
 80029c6:	701a      	strb	r2, [r3, #0]
 80029c8:	1d3b      	adds	r3, r7, #4
 80029ca:	1c0a      	adds	r2, r1, #0
 80029cc:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 80029ce:	1d3b      	adds	r3, r7, #4
 80029d0:	881b      	ldrh	r3, [r3, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	6839      	ldr	r1, [r7, #0]
 80029d6:	1dfb      	adds	r3, r7, #7
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	0018      	movs	r0, r3
 80029dc:	f000 f8b8 	bl	8002b50 <sensirion_i2c_hal_write>
 80029e0:	0003      	movs	r3, r0
}
 80029e2:	0018      	movs	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	b002      	add	sp, #8
 80029e8:	bd80      	pop	{r7, pc}

080029ea <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 80029ea:	b5b0      	push	{r4, r5, r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	0011      	movs	r1, r2
 80029f4:	1dfb      	adds	r3, r7, #7
 80029f6:	1c02      	adds	r2, r0, #0
 80029f8:	701a      	strb	r2, [r3, #0]
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	1c0a      	adds	r2, r1, #0
 80029fe:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8002a00:	1d3b      	adds	r3, r7, #4
 8002a02:	881b      	ldrh	r3, [r3, #0]
 8002a04:	085b      	lsrs	r3, r3, #1
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	220a      	movs	r2, #10
 8002a0a:	18ba      	adds	r2, r7, r2
 8002a0c:	1c19      	adds	r1, r3, #0
 8002a0e:	1c0b      	adds	r3, r1, #0
 8002a10:	18db      	adds	r3, r3, r3
 8002a12:	185b      	adds	r3, r3, r1
 8002a14:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8002a24:	2304      	movs	r3, #4
 8002a26:	e06c      	b.n	8002b02 <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8002a28:	230a      	movs	r3, #10
 8002a2a:	18fb      	adds	r3, r7, r3
 8002a2c:	881b      	ldrh	r3, [r3, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	6839      	ldr	r1, [r7, #0]
 8002a32:	1dfb      	adds	r3, r7, #7
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 f868 	bl	8002b0c <sensirion_i2c_hal_read>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	001a      	movs	r2, r3
 8002a40:	2108      	movs	r1, #8
 8002a42:	187b      	adds	r3, r7, r1
 8002a44:	801a      	strh	r2, [r3, #0]
    if (error) {
 8002a46:	000a      	movs	r2, r1
 8002a48:	18bb      	adds	r3, r7, r2
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	5e5b      	ldrsh	r3, [r3, r1]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <sensirion_i2c_read_data_inplace+0x70>
        return error;
 8002a52:	18bb      	adds	r3, r7, r2
 8002a54:	2200      	movs	r2, #0
 8002a56:	5e9b      	ldrsh	r3, [r3, r2]
 8002a58:	e053      	b.n	8002b02 <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8002a5a:	230e      	movs	r3, #14
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	2200      	movs	r2, #0
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	230c      	movs	r3, #12
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	2200      	movs	r2, #0
 8002a68:	801a      	strh	r2, [r3, #0]
 8002a6a:	e041      	b.n	8002af0 <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8002a6c:	210e      	movs	r1, #14
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8002a76:	187b      	adds	r3, r7, r1
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	3302      	adds	r3, #2
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	001a      	movs	r2, r3
 8002a84:	2102      	movs	r1, #2
 8002a86:	f7ff ff5a 	bl	800293e <sensirion_i2c_check_crc>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	001a      	movs	r2, r3
 8002a8e:	2108      	movs	r1, #8
 8002a90:	187b      	adds	r3, r7, r1
 8002a92:	801a      	strh	r2, [r3, #0]
        if (error) {
 8002a94:	000a      	movs	r2, r1
 8002a96:	18bb      	adds	r3, r7, r2
 8002a98:	2100      	movs	r1, #0
 8002a9a:	5e5b      	ldrsh	r3, [r3, r1]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 8002aa0:	18bb      	adds	r3, r7, r2
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	5e9b      	ldrsh	r3, [r3, r2]
 8002aa6:	e02c      	b.n	8002b02 <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 8002aa8:	240e      	movs	r4, #14
 8002aaa:	193b      	adds	r3, r7, r4
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	18d2      	adds	r2, r2, r3
 8002ab2:	250c      	movs	r5, #12
 8002ab4:	197b      	adds	r3, r7, r5
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	1979      	adds	r1, r7, r5
 8002aba:	1c58      	adds	r0, r3, #1
 8002abc:	8008      	strh	r0, [r1, #0]
 8002abe:	0019      	movs	r1, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	185b      	adds	r3, r3, r1
 8002ac4:	7812      	ldrb	r2, [r2, #0]
 8002ac6:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8002ac8:	193b      	adds	r3, r7, r4
 8002aca:	881b      	ldrh	r3, [r3, #0]
 8002acc:	3301      	adds	r3, #1
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	18d2      	adds	r2, r2, r3
 8002ad2:	197b      	adds	r3, r7, r5
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	1979      	adds	r1, r7, r5
 8002ad8:	1c58      	adds	r0, r3, #1
 8002ada:	8008      	strh	r0, [r1, #0]
 8002adc:	0019      	movs	r1, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	185b      	adds	r3, r3, r1
 8002ae2:	7812      	ldrb	r2, [r2, #0]
 8002ae4:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8002ae6:	193b      	adds	r3, r7, r4
 8002ae8:	193a      	adds	r2, r7, r4
 8002aea:	8812      	ldrh	r2, [r2, #0]
 8002aec:	3203      	adds	r2, #3
 8002aee:	801a      	strh	r2, [r3, #0]
 8002af0:	230e      	movs	r3, #14
 8002af2:	18fa      	adds	r2, r7, r3
 8002af4:	230a      	movs	r3, #10
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	8812      	ldrh	r2, [r2, #0]
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d3b5      	bcc.n	8002a6c <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b004      	add	sp, #16
 8002b08:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002b0c <sensirion_i2c_hal_read>:

void sensirion_i2c_hal_free(void) {
    /* nothing to free */
}

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	6039      	str	r1, [r7, #0]
 8002b14:	0011      	movs	r1, r2
 8002b16:	1dfb      	adds	r3, r7, #7
 8002b18:	1c02      	adds	r2, r0, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	1dbb      	adds	r3, r7, #6
 8002b1e:	1c0a      	adds	r2, r1, #0
 8002b20:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1), data, count, 100);
 8002b22:	1dfb      	adds	r3, r7, #7
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	18db      	adds	r3, r3, r3
 8002b2a:	b299      	uxth	r1, r3
 8002b2c:	1dbb      	adds	r3, r7, #6
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	4805      	ldr	r0, [pc, #20]	@ (8002b4c <sensirion_i2c_hal_read+0x40>)
 8002b36:	2464      	movs	r4, #100	@ 0x64
 8002b38:	9400      	str	r4, [sp, #0]
 8002b3a:	f001 fbe1 	bl	8004300 <HAL_I2C_Master_Receive>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	b25b      	sxtb	r3, r3
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b003      	add	sp, #12
 8002b48:	bd90      	pop	{r4, r7, pc}
 8002b4a:	46c0      	nop			@ (mov r8, r8)
 8002b4c:	200000d4 	.word	0x200000d4

08002b50 <sensirion_i2c_hal_write>:

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint8_t count) {
 8002b50:	b590      	push	{r4, r7, lr}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	6039      	str	r1, [r7, #0]
 8002b58:	0011      	movs	r1, r2
 8002b5a:	1dfb      	adds	r3, r7, #7
 8002b5c:	1c02      	adds	r2, r0, #0
 8002b5e:	701a      	strb	r2, [r3, #0]
 8002b60:	1dbb      	adds	r3, r7, #6
 8002b62:	1c0a      	adds	r2, r1, #0
 8002b64:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8002b66:	1dfb      	adds	r3, r7, #7
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	18db      	adds	r3, r3, r3
 8002b6e:	b299      	uxth	r1, r3
 8002b70:	1dbb      	adds	r3, r7, #6
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	4805      	ldr	r0, [pc, #20]	@ (8002b90 <sensirion_i2c_hal_write+0x40>)
 8002b7a:	2464      	movs	r4, #100	@ 0x64
 8002b7c:	9400      	str	r4, [sp, #0]
 8002b7e:	f001 fa95 	bl	80040ac <HAL_I2C_Master_Transmit>
 8002b82:	0003      	movs	r3, r0
 8002b84:	b25b      	sxtb	r3, r3
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b003      	add	sp, #12
 8002b8c:	bd90      	pop	{r4, r7, pc}
 8002b8e:	46c0      	nop			@ (mov r8, r8)
 8002b90:	200000d4 	.word	0x200000d4

08002b94 <sensirion_i2c_hal_sleep_usec>:

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	22fa      	movs	r2, #250	@ 0xfa
 8002ba0:	0091      	lsls	r1, r2, #2
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f7fd fac2 	bl	800012c <__udivsi3>
 8002ba8:	0003      	movs	r3, r0
 8002baa:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	22fa      	movs	r2, #250	@ 0xfa
 8002bb0:	0091      	lsls	r1, r2, #2
 8002bb2:	0018      	movs	r0, r3
 8002bb4:	f7fd fb40 	bl	8000238 <__aeabi_uidivmod>
 8002bb8:	1e0b      	subs	r3, r1, #0
 8002bba:	d002      	beq.n	8002bc2 <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_GetHalVersion() < 0x01010100) {
 8002bc2:	f000 f99b 	bl	8002efc <HAL_GetHalVersion>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	4a06      	ldr	r2, [pc, #24]	@ (8002be4 <sensirion_i2c_hal_sleep_usec+0x50>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d802      	bhi.n	8002bd4 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f000 f950 	bl	8002e7c <HAL_Delay>
}
 8002bdc:	46c0      	nop			@ (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b004      	add	sp, #16
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	010100ff 	.word	0x010100ff

08002be8 <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	0002      	movs	r2, r0
 8002bf0:	1dfb      	adds	r3, r7, #7
 8002bf2:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 8002bf4:	4b03      	ldr	r3, [pc, #12]	@ (8002c04 <sht4x_init+0x1c>)
 8002bf6:	1dfa      	adds	r2, r7, #7
 8002bf8:	7812      	ldrb	r2, [r2, #0]
 8002bfa:	701a      	strb	r2, [r3, #0]
}
 8002bfc:	46c0      	nop			@ (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b002      	add	sp, #8
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	2000027a 	.word	0x2000027a

08002c08 <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 8002c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 8002c12:	2516      	movs	r5, #22
 8002c14:	197b      	adds	r3, r7, r5
 8002c16:	2200      	movs	r2, #0
 8002c18:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc4 <sht4x_measure_high_precision_ticks+0xbc>)
 8002c1c:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 8002c1e:	260e      	movs	r6, #14
 8002c20:	19bb      	adds	r3, r7, r6
 8002c22:	2200      	movs	r2, #0
 8002c24:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 8002c26:	19bc      	adds	r4, r7, r6
 8002c28:	19bb      	adds	r3, r7, r6
 8002c2a:	8819      	ldrh	r1, [r3, #0]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	22fd      	movs	r2, #253	@ 0xfd
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7ff fea4 	bl	800297e <sensirion_i2c_add_command8_to_buffer>
 8002c36:	0003      	movs	r3, r0
 8002c38:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8002c3a:	4b23      	ldr	r3, [pc, #140]	@ (8002cc8 <sht4x_measure_high_precision_ticks+0xc0>)
 8002c3c:	7818      	ldrb	r0, [r3, #0]
 8002c3e:	197c      	adds	r4, r7, r5
 8002c40:	19bb      	adds	r3, r7, r6
 8002c42:	881a      	ldrh	r2, [r3, #0]
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	0019      	movs	r1, r3
 8002c48:	f7ff feb6 	bl	80029b8 <sensirion_i2c_write_data>
 8002c4c:	0003      	movs	r3, r0
 8002c4e:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8002c50:	197b      	adds	r3, r7, r5
 8002c52:	2200      	movs	r2, #0
 8002c54:	5e9b      	ldrsh	r3, [r3, r2]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 8002c5a:	197b      	adds	r3, r7, r5
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	5e9b      	ldrsh	r3, [r3, r2]
 8002c60:	e02c      	b.n	8002cbc <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8002c62:	4b1a      	ldr	r3, [pc, #104]	@ (8002ccc <sht4x_measure_high_precision_ticks+0xc4>)
 8002c64:	0018      	movs	r0, r3
 8002c66:	f7ff ff95 	bl	8002b94 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 8002c6a:	4b17      	ldr	r3, [pc, #92]	@ (8002cc8 <sht4x_measure_high_precision_ticks+0xc0>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	2516      	movs	r5, #22
 8002c70:	197c      	adds	r4, r7, r5
 8002c72:	6939      	ldr	r1, [r7, #16]
 8002c74:	2204      	movs	r2, #4
 8002c76:	0018      	movs	r0, r3
 8002c78:	f7ff feb7 	bl	80029ea <sensirion_i2c_read_data_inplace>
 8002c7c:	0003      	movs	r3, r0
 8002c7e:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8002c80:	197b      	adds	r3, r7, r5
 8002c82:	2200      	movs	r2, #0
 8002c84:	5e9b      	ldrsh	r3, [r3, r2]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 8002c8a:	197b      	adds	r3, r7, r5
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	5e9b      	ldrsh	r3, [r3, r2]
 8002c90:	e014      	b.n	8002cbc <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7ff fde7 	bl	8002868 <sensirion_common_bytes_to_uint16_t>
 8002c9a:	0003      	movs	r3, r0
 8002c9c:	001a      	movs	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	3302      	adds	r3, #2
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f7ff fdde 	bl	8002868 <sensirion_common_bytes_to_uint16_t>
 8002cac:	0003      	movs	r3, r0
 8002cae:	001a      	movs	r2, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	801a      	strh	r2, [r3, #0]
    return local_error;
 8002cb4:	2316      	movs	r3, #22
 8002cb6:	18fb      	adds	r3, r7, r3
 8002cb8:	2200      	movs	r2, #0
 8002cba:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b007      	add	sp, #28
 8002cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cc4:	20000274 	.word	0x20000274
 8002cc8:	2000027a 	.word	0x2000027a
 8002ccc:	00002710 	.word	0x00002710

08002cd0 <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 8002cd0:	b5b0      	push	{r4, r5, r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8002cd6:	250e      	movs	r5, #14
 8002cd8:	197b      	adds	r3, r7, r5
 8002cda:	2200      	movs	r2, #0
 8002cdc:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8002cde:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <sht4x_soft_reset+0x6c>)
 8002ce0:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 8002ce2:	1dbb      	adds	r3, r7, #6
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 8002ce8:	1dbc      	adds	r4, r7, #6
 8002cea:	1dbb      	adds	r3, r7, #6
 8002cec:	8819      	ldrh	r1, [r3, #0]
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2294      	movs	r2, #148	@ 0x94
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f7ff fe43 	bl	800297e <sensirion_i2c_add_command8_to_buffer>
 8002cf8:	0003      	movs	r3, r0
 8002cfa:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8002cfc:	4b10      	ldr	r3, [pc, #64]	@ (8002d40 <sht4x_soft_reset+0x70>)
 8002cfe:	7818      	ldrb	r0, [r3, #0]
 8002d00:	197c      	adds	r4, r7, r5
 8002d02:	1dbb      	adds	r3, r7, #6
 8002d04:	881a      	ldrh	r2, [r3, #0]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	0019      	movs	r1, r3
 8002d0a:	f7ff fe55 	bl	80029b8 <sensirion_i2c_write_data>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8002d12:	197b      	adds	r3, r7, r5
 8002d14:	2200      	movs	r2, #0
 8002d16:	5e9b      	ldrsh	r3, [r3, r2]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <sht4x_soft_reset+0x54>
        return local_error;
 8002d1c:	197b      	adds	r3, r7, r5
 8002d1e:	2200      	movs	r2, #0
 8002d20:	5e9b      	ldrsh	r3, [r3, r2]
 8002d22:	e007      	b.n	8002d34 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8002d24:	4b07      	ldr	r3, [pc, #28]	@ (8002d44 <sht4x_soft_reset+0x74>)
 8002d26:	0018      	movs	r0, r3
 8002d28:	f7ff ff34 	bl	8002b94 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8002d2c:	230e      	movs	r3, #14
 8002d2e:	18fb      	adds	r3, r7, r3
 8002d30:	2200      	movs	r2, #0
 8002d32:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b004      	add	sp, #16
 8002d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d3c:	20000274 	.word	0x20000274
 8002d40:	2000027a 	.word	0x2000027a
 8002d44:	00002710 	.word	0x00002710

08002d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002d48:	480d      	ldr	r0, [pc, #52]	@ (8002d80 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002d4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d4c:	f7ff fcd8 	bl	8002700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d50:	480c      	ldr	r0, [pc, #48]	@ (8002d84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d52:	490d      	ldr	r1, [pc, #52]	@ (8002d88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d54:	4a0d      	ldr	r2, [pc, #52]	@ (8002d8c <LoopForever+0xe>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d58:	e002      	b.n	8002d60 <LoopCopyDataInit>

08002d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5e:	3304      	adds	r3, #4

08002d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d64:	d3f9      	bcc.n	8002d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d66:	4a0a      	ldr	r2, [pc, #40]	@ (8002d90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d68:	4c0a      	ldr	r4, [pc, #40]	@ (8002d94 <LoopForever+0x16>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d6c:	e001      	b.n	8002d72 <LoopFillZerobss>

08002d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d70:	3204      	adds	r2, #4

08002d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d74:	d3fb      	bcc.n	8002d6e <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002d76:	f004 fb47 	bl	8007408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d7a:	f7fe ff3d 	bl	8001bf8 <main>

08002d7e <LoopForever>:

LoopForever:
    b LoopForever
 8002d7e:	e7fe      	b.n	8002d7e <LoopForever>
   ldr   r0, =_estack
 8002d80:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d88:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002d8c:	08008140 	.word	0x08008140
  ldr r2, =_sbss
 8002d90:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002d94:	200003c8 	.word	0x200003c8

08002d98 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d98:	e7fe      	b.n	8002d98 <ADC1_COMP_IRQHandler>
	...

08002d9c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002da2:	1dfb      	adds	r3, r7, #7
 8002da4:	2200      	movs	r2, #0
 8002da6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <HAL_Init+0x3c>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <HAL_Init+0x3c>)
 8002dae:	2140      	movs	r1, #64	@ 0x40
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002db4:	2003      	movs	r0, #3
 8002db6:	f000 f811 	bl	8002ddc <HAL_InitTick>
 8002dba:	1e03      	subs	r3, r0, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002dbe:	1dfb      	adds	r3, r7, #7
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e001      	b.n	8002dca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002dc6:	f7ff faa7 	bl	8002318 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dca:	1dfb      	adds	r3, r7, #7
 8002dcc:	781b      	ldrb	r3, [r3, #0]
}
 8002dce:	0018      	movs	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	40022000 	.word	0x40022000

08002ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de4:	4b14      	ldr	r3, [pc, #80]	@ (8002e38 <HAL_InitTick+0x5c>)
 8002de6:	681c      	ldr	r4, [r3, #0]
 8002de8:	4b14      	ldr	r3, [pc, #80]	@ (8002e3c <HAL_InitTick+0x60>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	0019      	movs	r1, r3
 8002dee:	23fa      	movs	r3, #250	@ 0xfa
 8002df0:	0098      	lsls	r0, r3, #2
 8002df2:	f7fd f99b 	bl	800012c <__udivsi3>
 8002df6:	0003      	movs	r3, r0
 8002df8:	0019      	movs	r1, r3
 8002dfa:	0020      	movs	r0, r4
 8002dfc:	f7fd f996 	bl	800012c <__udivsi3>
 8002e00:	0003      	movs	r3, r0
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 fdf1 	bl	80039ea <HAL_SYSTICK_Config>
 8002e08:	1e03      	subs	r3, r0, #0
 8002e0a:	d001      	beq.n	8002e10 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e00f      	b.n	8002e30 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d80b      	bhi.n	8002e2e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	2301      	movs	r3, #1
 8002e1a:	425b      	negs	r3, r3
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f000 fdbe 	bl	80039a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e24:	4b06      	ldr	r3, [pc, #24]	@ (8002e40 <HAL_InitTick+0x64>)
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e000      	b.n	8002e30 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b003      	add	sp, #12
 8002e36:	bd90      	pop	{r4, r7, pc}
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	20000008 	.word	0x20000008
 8002e40:	20000004 	.word	0x20000004

08002e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e48:	4b05      	ldr	r3, [pc, #20]	@ (8002e60 <HAL_IncTick+0x1c>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	001a      	movs	r2, r3
 8002e4e:	4b05      	ldr	r3, [pc, #20]	@ (8002e64 <HAL_IncTick+0x20>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	18d2      	adds	r2, r2, r3
 8002e54:	4b03      	ldr	r3, [pc, #12]	@ (8002e64 <HAL_IncTick+0x20>)
 8002e56:	601a      	str	r2, [r3, #0]
}
 8002e58:	46c0      	nop			@ (mov r8, r8)
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	46c0      	nop			@ (mov r8, r8)
 8002e60:	20000008 	.word	0x20000008
 8002e64:	2000027c 	.word	0x2000027c

08002e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e6c:	4b02      	ldr	r3, [pc, #8]	@ (8002e78 <HAL_GetTick+0x10>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
}
 8002e70:	0018      	movs	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	2000027c 	.word	0x2000027c

08002e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e84:	f7ff fff0 	bl	8002e68 <HAL_GetTick>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3301      	adds	r3, #1
 8002e94:	d005      	beq.n	8002ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <HAL_Delay+0x44>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	001a      	movs	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	189b      	adds	r3, r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ea2:	46c0      	nop			@ (mov r8, r8)
 8002ea4:	f7ff ffe0 	bl	8002e68 <HAL_GetTick>
 8002ea8:	0002      	movs	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d8f7      	bhi.n	8002ea4 <HAL_Delay+0x28>
  {
  }
}
 8002eb4:	46c0      	nop			@ (mov r8, r8)
 8002eb6:	46c0      	nop			@ (mov r8, r8)
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b004      	add	sp, #16
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	20000008 	.word	0x20000008

08002ec4 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8002ec8:	4b04      	ldr	r3, [pc, #16]	@ (8002edc <HAL_SuspendTick+0x18>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4b03      	ldr	r3, [pc, #12]	@ (8002edc <HAL_SuspendTick+0x18>)
 8002ece:	2102      	movs	r1, #2
 8002ed0:	438a      	bics	r2, r1
 8002ed2:	601a      	str	r2, [r3, #0]
}
 8002ed4:	46c0      	nop			@ (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	e000e010 	.word	0xe000e010

08002ee0 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8002ee4:	4b04      	ldr	r3, [pc, #16]	@ (8002ef8 <HAL_ResumeTick+0x18>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4b03      	ldr	r3, [pc, #12]	@ (8002ef8 <HAL_ResumeTick+0x18>)
 8002eea:	2102      	movs	r1, #2
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]
}
 8002ef0:	46c0      	nop			@ (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			@ (mov r8, r8)
 8002ef8:	e000e010 	.word	0xe000e010

08002efc <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8002f00:	4b01      	ldr	r3, [pc, #4]	@ (8002f08 <HAL_GetHalVersion+0xc>)
}
 8002f02:	0018      	movs	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}
 8002f08:	010a0700 	.word	0x010a0700

08002f0c <HAL_SYSCFG_VREFINT_OutputSelect>:
  *     @arg SYSCFG_VREFINT_OUT_PB1
  *     @arg SYSCFG_VREFINT_OUT_PB0_PB1
  * @retval None
  */
void HAL_SYSCFG_VREFINT_OutputSelect(uint32_t SYSCFG_Vrefint_OUTPUT)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFINT_OUT_SELECT(SYSCFG_Vrefint_OUTPUT));

  /* Set the output Vrefint pin */
  SYSCFG->CFGR3 &= ~(SYSCFG_CFGR3_VREF_OUT);
 8002f14:	4b07      	ldr	r3, [pc, #28]	@ (8002f34 <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 8002f16:	6a1a      	ldr	r2, [r3, #32]
 8002f18:	4b06      	ldr	r3, [pc, #24]	@ (8002f34 <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 8002f1a:	2130      	movs	r1, #48	@ 0x30
 8002f1c:	438a      	bics	r2, r1
 8002f1e:	621a      	str	r2, [r3, #32]
  SYSCFG->CFGR3 |= (uint32_t)(SYSCFG_Vrefint_OUTPUT);
 8002f20:	4b04      	ldr	r3, [pc, #16]	@ (8002f34 <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 8002f22:	6a19      	ldr	r1, [r3, #32]
 8002f24:	4b03      	ldr	r3, [pc, #12]	@ (8002f34 <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	621a      	str	r2, [r3, #32]
}
 8002f2c:	46c0      	nop			@ (mov r8, r8)
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b002      	add	sp, #8
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40010000 	.word	0x40010000

08002f38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e159      	b.n	80031fe <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2250      	movs	r2, #80	@ 0x50
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f7ff f9f0 	bl	8002348 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f6c:	2210      	movs	r2, #16
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b10      	cmp	r3, #16
 8002f72:	d005      	beq.n	8002f80 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2204      	movs	r2, #4
 8002f7c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002f7e:	d00b      	beq.n	8002f98 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f84:	2210      	movs	r2, #16
 8002f86:	431a      	orrs	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2250      	movs	r2, #80	@ 0x50
 8002f90:	2100      	movs	r1, #0
 8002f92:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e132      	b.n	80031fe <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9c:	4a9a      	ldr	r2, [pc, #616]	@ (8003208 <HAL_ADC_Init+0x2d0>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2203      	movs	r2, #3
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d108      	bne.n	8002fc8 <HAL_ADC_Init+0x90>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_ADC_Init+0x90>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_ADC_Init+0x92>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d149      	bne.n	8003062 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	23c0      	movs	r3, #192	@ 0xc0
 8002fd4:	061b      	lsls	r3, r3, #24
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d00b      	beq.n	8002ff2 <HAL_ADC_Init+0xba>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	05db      	lsls	r3, r3, #23
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d005      	beq.n	8002ff2 <HAL_ADC_Init+0xba>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	2380      	movs	r3, #128	@ 0x80
 8002fec:	061b      	lsls	r3, r3, #24
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d111      	bne.n	8003016 <HAL_ADC_Init+0xde>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	0092      	lsls	r2, r2, #2
 8002ffe:	0892      	lsrs	r2, r2, #2
 8003000:	611a      	str	r2, [r3, #16]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6919      	ldr	r1, [r3, #16]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	611a      	str	r2, [r3, #16]
 8003014:	e014      	b.n	8003040 <HAL_ADC_Init+0x108>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	0092      	lsls	r2, r2, #2
 8003022:	0892      	lsrs	r2, r2, #2
 8003024:	611a      	str	r2, [r3, #16]
 8003026:	4b79      	ldr	r3, [pc, #484]	@ (800320c <HAL_ADC_Init+0x2d4>)
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	4b78      	ldr	r3, [pc, #480]	@ (800320c <HAL_ADC_Init+0x2d4>)
 800302c:	4978      	ldr	r1, [pc, #480]	@ (8003210 <HAL_ADC_Init+0x2d8>)
 800302e:	400a      	ands	r2, r1
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	4b76      	ldr	r3, [pc, #472]	@ (800320c <HAL_ADC_Init+0x2d4>)
 8003034:	6819      	ldr	r1, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	4b74      	ldr	r3, [pc, #464]	@ (800320c <HAL_ADC_Init+0x2d4>)
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2118      	movs	r1, #24
 800304c:	438a      	bics	r2, r1
 800304e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	68d9      	ldr	r1, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689a      	ldr	r2, [r3, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003062:	4b6a      	ldr	r3, [pc, #424]	@ (800320c <HAL_ADC_Init+0x2d4>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4b69      	ldr	r3, [pc, #420]	@ (800320c <HAL_ADC_Init+0x2d4>)
 8003068:	496a      	ldr	r1, [pc, #424]	@ (8003214 <HAL_ADC_Init+0x2dc>)
 800306a:	400a      	ands	r2, r1
 800306c:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800306e:	4b67      	ldr	r3, [pc, #412]	@ (800320c <HAL_ADC_Init+0x2d4>)
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003076:	065a      	lsls	r2, r3, #25
 8003078:	4b64      	ldr	r3, [pc, #400]	@ (800320c <HAL_ADC_Init+0x2d4>)
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	2380      	movs	r3, #128	@ 0x80
 8003086:	055b      	lsls	r3, r3, #21
 8003088:	4013      	ands	r3, r2
 800308a:	d108      	bne.n	800309e <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2180      	movs	r1, #128	@ 0x80
 8003098:	0549      	lsls	r1, r1, #21
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68da      	ldr	r2, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	495b      	ldr	r1, [pc, #364]	@ (8003218 <HAL_ADC_Init+0x2e0>)
 80030aa:	400a      	ands	r2, r1
 80030ac:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68d9      	ldr	r1, [r3, #12]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d101      	bne.n	80030c4 <HAL_ADC_Init+0x18c>
 80030c0:	2304      	movs	r3, #4
 80030c2:	e000      	b.n	80030c6 <HAL_ADC_Init+0x18e>
 80030c4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80030c6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2020      	movs	r0, #32
 80030cc:	5c1b      	ldrb	r3, [r3, r0]
 80030ce:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80030d0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	202c      	movs	r0, #44	@ 0x2c
 80030d6:	5c1b      	ldrb	r3, [r3, r0]
 80030d8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80030da:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80030e0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80030e8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80030f0:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030fe:	23c2      	movs	r3, #194	@ 0xc2
 8003100:	33ff      	adds	r3, #255	@ 0xff
 8003102:	429a      	cmp	r2, r3
 8003104:	d00b      	beq.n	800311e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68d9      	ldr	r1, [r3, #12]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003114:	431a      	orrs	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2221      	movs	r2, #33	@ 0x21
 8003122:	5c9b      	ldrb	r3, [r3, r2]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d11a      	bne.n	800315e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	5c9b      	ldrb	r3, [r3, r2]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68da      	ldr	r2, [r3, #12]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2180      	movs	r1, #128	@ 0x80
 800313e:	0249      	lsls	r1, r1, #9
 8003140:	430a      	orrs	r2, r1
 8003142:	60da      	str	r2, [r3, #12]
 8003144:	e00b      	b.n	800315e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314a:	2220      	movs	r2, #32
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003156:	2201      	movs	r2, #1
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003162:	2b01      	cmp	r3, #1
 8003164:	d11f      	bne.n	80031a6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	492a      	ldr	r1, [pc, #168]	@ (800321c <HAL_ADC_Init+0x2e4>)
 8003172:	400a      	ands	r2, r1
 8003174:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6919      	ldr	r1, [r3, #16]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003184:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800318a:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	430a      	orrs	r2, r1
 8003192:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2101      	movs	r1, #1
 80031a0:	430a      	orrs	r2, r1
 80031a2:	611a      	str	r2, [r3, #16]
 80031a4:	e00e      	b.n	80031c4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	2201      	movs	r2, #1
 80031ae:	4013      	ands	r3, r2
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d107      	bne.n	80031c4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2101      	movs	r1, #1
 80031c0:	438a      	bics	r2, r1
 80031c2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2107      	movs	r1, #7
 80031d0:	438a      	bics	r2, r1
 80031d2:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6959      	ldr	r1, [r3, #20]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f0:	2203      	movs	r2, #3
 80031f2:	4393      	bics	r3, r2
 80031f4:	2201      	movs	r2, #1
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b002      	add	sp, #8
 8003204:	bd80      	pop	{r7, pc}
 8003206:	46c0      	nop			@ (mov r8, r8)
 8003208:	fffffefd 	.word	0xfffffefd
 800320c:	40012708 	.word	0x40012708
 8003210:	ffc3ffff 	.word	0xffc3ffff
 8003214:	fdffffff 	.word	0xfdffffff
 8003218:	fffe0219 	.word	0xfffe0219
 800321c:	fffffc03 	.word	0xfffffc03

08003220 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003220:	b5b0      	push	{r4, r5, r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003228:	230f      	movs	r3, #15
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]

  /* Check ADC handle */
  if (hadc == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e07d      	b.n	8003336 <HAL_ADC_DeInit+0x116>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323e:	2202      	movs	r2, #2
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003246:	250f      	movs	r5, #15
 8003248:	197c      	adds	r4, r7, r5
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	0018      	movs	r0, r3
 800324e:	f000 fa8e 	bl	800376e <ADC_ConversionStop>
 8003252:	0003      	movs	r3, r0
 8003254:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003256:	197b      	adds	r3, r7, r5
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10d      	bne.n	800327a <HAL_ADC_DeInit+0x5a>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800325e:	197c      	adds	r4, r7, r5
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	0018      	movs	r0, r3
 8003264:	f000 fa1c 	bl	80036a0 <ADC_Disable>
 8003268:	0003      	movs	r3, r0
 800326a:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 800326c:	197b      	adds	r3, r7, r5
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d002      	beq.n	800327a <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	655a      	str	r2, [r3, #84]	@ 0x54
  }


  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 800327a:	230f      	movs	r3, #15
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d051      	beq.n	8003328 <HAL_ADC_DeInit+0x108>
  {

    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	492c      	ldr	r1, [pc, #176]	@ (8003340 <HAL_ADC_DeInit+0x120>)
 8003290:	400a      	ands	r2, r1
 8003292:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP));


    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2a      	ldr	r2, [pc, #168]	@ (8003344 <HAL_ADC_DeInit+0x124>)
 800329a:	601a      	str	r2, [r3, #0]

    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4928      	ldr	r1, [pc, #160]	@ (8003348 <HAL_ADC_DeInit+0x128>)
 80032a8:	400a      	ands	r2, r1
 80032aa:	609a      	str	r2, [r3, #8]

    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */

    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4925      	ldr	r1, [pc, #148]	@ (800334c <HAL_ADC_DeInit+0x12c>)
 80032b8:	400a      	ands	r2, r1
 80032ba:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4922      	ldr	r1, [pc, #136]	@ (8003350 <HAL_ADC_DeInit+0x130>)
 80032c8:	400a      	ands	r2, r1
 80032ca:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE);


    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2107      	movs	r1, #7
 80032d8:	438a      	bics	r2, r1
 80032da:	615a      	str	r2, [r3, #20]

    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6a1a      	ldr	r2, [r3, #32]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	491b      	ldr	r1, [pc, #108]	@ (8003354 <HAL_ADC_DeInit+0x134>)
 80032e8:	400a      	ands	r2, r1
 80032ea:	621a      	str	r2, [r3, #32]

    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	22b4      	movs	r2, #180	@ 0xb4
 80032f2:	589a      	ldr	r2, [r3, r2]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	217f      	movs	r1, #127	@ 0x7f
 80032fa:	438a      	bics	r2, r1
 80032fc:	21b4      	movs	r1, #180	@ 0xb4
 80032fe:	505a      	str	r2, [r3, r1]

    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/

    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	22b4      	movs	r2, #180	@ 0xb4
 8003306:	589a      	ldr	r2, [r3, r2]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	217f      	movs	r1, #127	@ 0x7f
 800330e:	438a      	bics	r2, r1
 8003310:	21b4      	movs	r1, #180	@ 0xb4
 8003312:	505a      	str	r2, [r3, r1]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	0018      	movs	r0, r3
 8003318:	f7ff f852 	bl	80023c0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2250      	movs	r2, #80	@ 0x50
 800332c:	2100      	movs	r1, #0
 800332e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003330:	230f      	movs	r3, #15
 8003332:	18fb      	adds	r3, r7, r3
 8003334:	781b      	ldrb	r3, [r3, #0]
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b004      	add	sp, #16
 800333c:	bdb0      	pop	{r4, r5, r7, pc}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	fffff760 	.word	0xfffff760
 8003344:	0000089f 	.word	0x0000089f
 8003348:	efffffff 	.word	0xefffffff
 800334c:	833e0200 	.word	0x833e0200
 8003350:	3ffffc02 	.word	0x3ffffc02
 8003354:	f000f000 	.word	0xf000f000

08003358 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003358:	b590      	push	{r4, r7, lr}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003360:	230f      	movs	r3, #15
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2204      	movs	r2, #4
 8003370:	4013      	ands	r3, r2
 8003372:	d138      	bne.n	80033e6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2250      	movs	r2, #80	@ 0x50
 8003378:	5c9b      	ldrb	r3, [r3, r2]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d101      	bne.n	8003382 <HAL_ADC_Start+0x2a>
 800337e:	2302      	movs	r3, #2
 8003380:	e038      	b.n	80033f4 <HAL_ADC_Start+0x9c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2250      	movs	r2, #80	@ 0x50
 8003386:	2101      	movs	r1, #1
 8003388:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d007      	beq.n	80033a2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8003392:	230f      	movs	r3, #15
 8003394:	18fc      	adds	r4, r7, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	0018      	movs	r0, r3
 800339a:	f000 f919 	bl	80035d0 <ADC_Enable>
 800339e:	0003      	movs	r3, r0
 80033a0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80033a2:	230f      	movs	r3, #15
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d120      	bne.n	80033ee <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b0:	4a12      	ldr	r2, [pc, #72]	@ (80033fc <HAL_ADC_Start+0xa4>)
 80033b2:	4013      	ands	r3, r2
 80033b4:	2280      	movs	r2, #128	@ 0x80
 80033b6:	0052      	lsls	r2, r2, #1
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2250      	movs	r2, #80	@ 0x50
 80033c8:	2100      	movs	r1, #0
 80033ca:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	221c      	movs	r2, #28
 80033d2:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2104      	movs	r1, #4
 80033e0:	430a      	orrs	r2, r1
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	e003      	b.n	80033ee <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033e6:	230f      	movs	r3, #15
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	2202      	movs	r2, #2
 80033ec:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80033ee:	230f      	movs	r3, #15
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	781b      	ldrb	r3, [r3, #0]
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b005      	add	sp, #20
 80033fa:	bd90      	pop	{r4, r7, pc}
 80033fc:	fffff0fe 	.word	0xfffff0fe

08003400 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003400:	b5b0      	push	{r4, r5, r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003408:	230f      	movs	r3, #15
 800340a:	18fb      	adds	r3, r7, r3
 800340c:	2200      	movs	r2, #0
 800340e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2250      	movs	r2, #80	@ 0x50
 8003414:	5c9b      	ldrb	r3, [r3, r2]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_ADC_Stop+0x1e>
 800341a:	2302      	movs	r3, #2
 800341c:	e029      	b.n	8003472 <HAL_ADC_Stop+0x72>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2250      	movs	r2, #80	@ 0x50
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003426:	250f      	movs	r5, #15
 8003428:	197c      	adds	r4, r7, r5
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	0018      	movs	r0, r3
 800342e:	f000 f99e 	bl	800376e <ADC_ConversionStop>
 8003432:	0003      	movs	r3, r0
 8003434:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003436:	197b      	adds	r3, r7, r5
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d112      	bne.n	8003464 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800343e:	197c      	adds	r4, r7, r5
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	0018      	movs	r0, r3
 8003444:	f000 f92c 	bl	80036a0 <ADC_Disable>
 8003448:	0003      	movs	r3, r0
 800344a:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800344c:	197b      	adds	r3, r7, r5
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d107      	bne.n	8003464 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003458:	4a08      	ldr	r2, [pc, #32]	@ (800347c <HAL_ADC_Stop+0x7c>)
 800345a:	4013      	ands	r3, r2
 800345c:	2201      	movs	r2, #1
 800345e:	431a      	orrs	r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2250      	movs	r2, #80	@ 0x50
 8003468:	2100      	movs	r1, #0
 800346a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800346c:	230f      	movs	r3, #15
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	781b      	ldrb	r3, [r3, #0]
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bdb0      	pop	{r4, r5, r7, pc}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	fffffefe 	.word	0xfffffefe

08003480 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	2b08      	cmp	r3, #8
 8003498:	d102      	bne.n	80034a0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800349a:	2308      	movs	r3, #8
 800349c:	60fb      	str	r3, [r7, #12]
 800349e:	e014      	b.n	80034ca <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	4013      	ands	r3, r2
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d10b      	bne.n	80034c6 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b2:	2220      	movs	r2, #32
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2250      	movs	r2, #80	@ 0x50
 80034be:	2100      	movs	r1, #0
 80034c0:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e072      	b.n	80035ac <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80034c6:	230c      	movs	r3, #12
 80034c8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80034ca:	f7ff fccd 	bl	8002e68 <HAL_GetTick>
 80034ce:	0003      	movs	r3, r0
 80034d0:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80034d2:	e01f      	b.n	8003514 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	3301      	adds	r3, #1
 80034d8:	d01c      	beq.n	8003514 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <HAL_ADC_PollForConversion+0x70>
 80034e0:	f7ff fcc2 	bl	8002e68 <HAL_GetTick>
 80034e4:	0002      	movs	r2, r0
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d211      	bcs.n	8003514 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4013      	ands	r3, r2
 80034fa:	d10b      	bne.n	8003514 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003500:	2204      	movs	r2, #4
 8003502:	431a      	orrs	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2250      	movs	r2, #80	@ 0x50
 800350c:	2100      	movs	r1, #0
 800350e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e04b      	b.n	80035ac <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4013      	ands	r3, r2
 800351e:	d0d9      	beq.n	80034d4 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003524:	2280      	movs	r2, #128	@ 0x80
 8003526:	0092      	lsls	r2, r2, #2
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	23c0      	movs	r3, #192	@ 0xc0
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	4013      	ands	r3, r2
 800353a:	d12e      	bne.n	800359a <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2220      	movs	r2, #32
 8003540:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003542:	2b00      	cmp	r3, #0
 8003544:	d129      	bne.n	800359a <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2208      	movs	r2, #8
 800354e:	4013      	ands	r3, r2
 8003550:	2b08      	cmp	r3, #8
 8003552:	d122      	bne.n	800359a <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2204      	movs	r2, #4
 800355c:	4013      	ands	r3, r2
 800355e:	d110      	bne.n	8003582 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	210c      	movs	r1, #12
 800356c:	438a      	bics	r2, r1
 800356e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003574:	4a0f      	ldr	r2, [pc, #60]	@ (80035b4 <HAL_ADC_PollForConversion+0x134>)
 8003576:	4013      	ands	r3, r2
 8003578:	2201      	movs	r2, #1
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	655a      	str	r2, [r3, #84]	@ 0x54
 8003580:	e00b      	b.n	800359a <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003586:	2220      	movs	r2, #32
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003592:	2201      	movs	r2, #1
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	699b      	ldr	r3, [r3, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d103      	bne.n	80035aa <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	220c      	movs	r2, #12
 80035a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	0018      	movs	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b004      	add	sp, #16
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	fffffefe 	.word	0xfffffefe

080035b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80035c6:	0018      	movs	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b002      	add	sp, #8
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	2203      	movs	r2, #3
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d108      	bne.n	80035fc <ADC_Enable+0x2c>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2201      	movs	r2, #1
 80035f2:	4013      	ands	r3, r2
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <ADC_Enable+0x2c>
 80035f8:	2301      	movs	r3, #1
 80035fa:	e000      	b.n	80035fe <ADC_Enable+0x2e>
 80035fc:	2300      	movs	r3, #0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d146      	bne.n	8003690 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	4a24      	ldr	r2, [pc, #144]	@ (800369c <ADC_Enable+0xcc>)
 800360a:	4013      	ands	r3, r2
 800360c:	d00d      	beq.n	800362a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003612:	2210      	movs	r2, #16
 8003614:	431a      	orrs	r2, r3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800361e:	2201      	movs	r2, #1
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e033      	b.n	8003692 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2101      	movs	r1, #1
 8003636:	430a      	orrs	r2, r1
 8003638:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800363a:	2001      	movs	r0, #1
 800363c:	f000 f8e4 	bl	8003808 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8003640:	f7ff fc12 	bl	8002e68 <HAL_GetTick>
 8003644:	0003      	movs	r3, r0
 8003646:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003648:	e01b      	b.n	8003682 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800364a:	f7ff fc0d 	bl	8002e68 <HAL_GetTick>
 800364e:	0002      	movs	r2, r0
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b0a      	cmp	r3, #10
 8003656:	d914      	bls.n	8003682 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2201      	movs	r2, #1
 8003660:	4013      	ands	r3, r2
 8003662:	2b01      	cmp	r3, #1
 8003664:	d00d      	beq.n	8003682 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800366a:	2210      	movs	r2, #16
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003676:	2201      	movs	r2, #1
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e007      	b.n	8003692 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2201      	movs	r2, #1
 800368a:	4013      	ands	r3, r2
 800368c:	2b01      	cmp	r3, #1
 800368e:	d1dc      	bne.n	800364a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	0018      	movs	r0, r3
 8003694:	46bd      	mov	sp, r7
 8003696:	b004      	add	sp, #16
 8003698:	bd80      	pop	{r7, pc}
 800369a:	46c0      	nop			@ (mov r8, r8)
 800369c:	80000017 	.word	0x80000017

080036a0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2203      	movs	r2, #3
 80036b4:	4013      	ands	r3, r2
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d108      	bne.n	80036cc <ADC_Disable+0x2c>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2201      	movs	r2, #1
 80036c2:	4013      	ands	r3, r2
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <ADC_Disable+0x2c>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <ADC_Disable+0x2e>
 80036cc:	2300      	movs	r3, #0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d048      	beq.n	8003764 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2205      	movs	r2, #5
 80036da:	4013      	ands	r3, r2
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d110      	bne.n	8003702 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2102      	movs	r1, #2
 80036ec:	430a      	orrs	r2, r1
 80036ee:	609a      	str	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2203      	movs	r2, #3
 80036f6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036f8:	f7ff fbb6 	bl	8002e68 <HAL_GetTick>
 80036fc:	0003      	movs	r3, r0
 80036fe:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003700:	e029      	b.n	8003756 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003706:	2210      	movs	r2, #16
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	2201      	movs	r2, #1
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e023      	b.n	8003766 <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800371e:	f7ff fba3 	bl	8002e68 <HAL_GetTick>
 8003722:	0002      	movs	r2, r0
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b0a      	cmp	r3, #10
 800372a:	d914      	bls.n	8003756 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	2201      	movs	r2, #1
 8003734:	4013      	ands	r3, r2
 8003736:	2b01      	cmp	r3, #1
 8003738:	d10d      	bne.n	8003756 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800373e:	2210      	movs	r2, #16
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374a:	2201      	movs	r2, #1
 800374c:	431a      	orrs	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e007      	b.n	8003766 <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2201      	movs	r2, #1
 800375e:	4013      	ands	r3, r2
 8003760:	2b01      	cmp	r3, #1
 8003762:	d0dc      	beq.n	800371e <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	0018      	movs	r0, r3
 8003768:	46bd      	mov	sp, r7
 800376a:	b004      	add	sp, #16
 800376c:	bd80      	pop	{r7, pc}

0800376e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 800376e:	b580      	push	{r7, lr}
 8003770:	b084      	sub	sp, #16
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	2204      	movs	r2, #4
 8003782:	4013      	ands	r3, r2
 8003784:	d03a      	beq.n	80037fc <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2204      	movs	r2, #4
 800378e:	4013      	ands	r3, r2
 8003790:	2b04      	cmp	r3, #4
 8003792:	d10d      	bne.n	80037b0 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2202      	movs	r2, #2
 800379c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800379e:	d107      	bne.n	80037b0 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2110      	movs	r1, #16
 80037ac:	430a      	orrs	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80037b0:	f7ff fb5a 	bl	8002e68 <HAL_GetTick>
 80037b4:	0003      	movs	r3, r0
 80037b6:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80037b8:	e01a      	b.n	80037f0 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80037ba:	f7ff fb55 	bl	8002e68 <HAL_GetTick>
 80037be:	0002      	movs	r2, r0
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	2b0a      	cmp	r3, #10
 80037c6:	d913      	bls.n	80037f0 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2204      	movs	r2, #4
 80037d0:	4013      	ands	r3, r2
 80037d2:	d00d      	beq.n	80037f0 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d8:	2210      	movs	r2, #16
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037e4:	2201      	movs	r2, #1
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e006      	b.n	80037fe <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2204      	movs	r2, #4
 80037f8:	4013      	ands	r3, r2
 80037fa:	d1de      	bne.n	80037ba <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	0018      	movs	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	b004      	add	sp, #16
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8003810:	4b0b      	ldr	r3, [pc, #44]	@ (8003840 <ADC_DelayMicroSecond+0x38>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	490b      	ldr	r1, [pc, #44]	@ (8003844 <ADC_DelayMicroSecond+0x3c>)
 8003816:	0018      	movs	r0, r3
 8003818:	f7fc fc88 	bl	800012c <__udivsi3>
 800381c:	0003      	movs	r3, r0
 800381e:	001a      	movs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	4353      	muls	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8003826:	e002      	b.n	800382e <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	3b01      	subs	r3, #1
 800382c:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1f9      	bne.n	8003828 <ADC_DelayMicroSecond+0x20>
  }
}
 8003834:	46c0      	nop			@ (mov r8, r8)
 8003836:	46c0      	nop			@ (mov r8, r8)
 8003838:	46bd      	mov	sp, r7
 800383a:	b004      	add	sp, #16
 800383c:	bd80      	pop	{r7, pc}
 800383e:	46c0      	nop			@ (mov r8, r8)
 8003840:	20000000 	.word	0x20000000
 8003844:	000f4240 	.word	0x000f4240

08003848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	0002      	movs	r2, r0
 8003850:	1dfb      	adds	r3, r7, #7
 8003852:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003854:	1dfb      	adds	r3, r7, #7
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b7f      	cmp	r3, #127	@ 0x7f
 800385a:	d809      	bhi.n	8003870 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800385c:	1dfb      	adds	r3, r7, #7
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	001a      	movs	r2, r3
 8003862:	231f      	movs	r3, #31
 8003864:	401a      	ands	r2, r3
 8003866:	4b04      	ldr	r3, [pc, #16]	@ (8003878 <__NVIC_EnableIRQ+0x30>)
 8003868:	2101      	movs	r1, #1
 800386a:	4091      	lsls	r1, r2
 800386c:	000a      	movs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]
  }
}
 8003870:	46c0      	nop			@ (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	b002      	add	sp, #8
 8003876:	bd80      	pop	{r7, pc}
 8003878:	e000e100 	.word	0xe000e100

0800387c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	0002      	movs	r2, r0
 8003884:	6039      	str	r1, [r7, #0]
 8003886:	1dfb      	adds	r3, r7, #7
 8003888:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800388a:	1dfb      	adds	r3, r7, #7
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003890:	d828      	bhi.n	80038e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003892:	4a2f      	ldr	r2, [pc, #188]	@ (8003950 <__NVIC_SetPriority+0xd4>)
 8003894:	1dfb      	adds	r3, r7, #7
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	b25b      	sxtb	r3, r3
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	33c0      	adds	r3, #192	@ 0xc0
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	589b      	ldr	r3, [r3, r2]
 80038a2:	1dfa      	adds	r2, r7, #7
 80038a4:	7812      	ldrb	r2, [r2, #0]
 80038a6:	0011      	movs	r1, r2
 80038a8:	2203      	movs	r2, #3
 80038aa:	400a      	ands	r2, r1
 80038ac:	00d2      	lsls	r2, r2, #3
 80038ae:	21ff      	movs	r1, #255	@ 0xff
 80038b0:	4091      	lsls	r1, r2
 80038b2:	000a      	movs	r2, r1
 80038b4:	43d2      	mvns	r2, r2
 80038b6:	401a      	ands	r2, r3
 80038b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	019b      	lsls	r3, r3, #6
 80038be:	22ff      	movs	r2, #255	@ 0xff
 80038c0:	401a      	ands	r2, r3
 80038c2:	1dfb      	adds	r3, r7, #7
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	0018      	movs	r0, r3
 80038c8:	2303      	movs	r3, #3
 80038ca:	4003      	ands	r3, r0
 80038cc:	00db      	lsls	r3, r3, #3
 80038ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038d0:	481f      	ldr	r0, [pc, #124]	@ (8003950 <__NVIC_SetPriority+0xd4>)
 80038d2:	1dfb      	adds	r3, r7, #7
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	b25b      	sxtb	r3, r3
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	430a      	orrs	r2, r1
 80038dc:	33c0      	adds	r3, #192	@ 0xc0
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80038e2:	e031      	b.n	8003948 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80038e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003954 <__NVIC_SetPriority+0xd8>)
 80038e6:	1dfb      	adds	r3, r7, #7
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	0019      	movs	r1, r3
 80038ec:	230f      	movs	r3, #15
 80038ee:	400b      	ands	r3, r1
 80038f0:	3b08      	subs	r3, #8
 80038f2:	089b      	lsrs	r3, r3, #2
 80038f4:	3306      	adds	r3, #6
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	18d3      	adds	r3, r2, r3
 80038fa:	3304      	adds	r3, #4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	1dfa      	adds	r2, r7, #7
 8003900:	7812      	ldrb	r2, [r2, #0]
 8003902:	0011      	movs	r1, r2
 8003904:	2203      	movs	r2, #3
 8003906:	400a      	ands	r2, r1
 8003908:	00d2      	lsls	r2, r2, #3
 800390a:	21ff      	movs	r1, #255	@ 0xff
 800390c:	4091      	lsls	r1, r2
 800390e:	000a      	movs	r2, r1
 8003910:	43d2      	mvns	r2, r2
 8003912:	401a      	ands	r2, r3
 8003914:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	019b      	lsls	r3, r3, #6
 800391a:	22ff      	movs	r2, #255	@ 0xff
 800391c:	401a      	ands	r2, r3
 800391e:	1dfb      	adds	r3, r7, #7
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	0018      	movs	r0, r3
 8003924:	2303      	movs	r3, #3
 8003926:	4003      	ands	r3, r0
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800392c:	4809      	ldr	r0, [pc, #36]	@ (8003954 <__NVIC_SetPriority+0xd8>)
 800392e:	1dfb      	adds	r3, r7, #7
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	001c      	movs	r4, r3
 8003934:	230f      	movs	r3, #15
 8003936:	4023      	ands	r3, r4
 8003938:	3b08      	subs	r3, #8
 800393a:	089b      	lsrs	r3, r3, #2
 800393c:	430a      	orrs	r2, r1
 800393e:	3306      	adds	r3, #6
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	18c3      	adds	r3, r0, r3
 8003944:	3304      	adds	r3, #4
 8003946:	601a      	str	r2, [r3, #0]
}
 8003948:	46c0      	nop			@ (mov r8, r8)
 800394a:	46bd      	mov	sp, r7
 800394c:	b003      	add	sp, #12
 800394e:	bd90      	pop	{r4, r7, pc}
 8003950:	e000e100 	.word	0xe000e100
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	1e5a      	subs	r2, r3, #1
 8003964:	2380      	movs	r3, #128	@ 0x80
 8003966:	045b      	lsls	r3, r3, #17
 8003968:	429a      	cmp	r2, r3
 800396a:	d301      	bcc.n	8003970 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800396c:	2301      	movs	r3, #1
 800396e:	e010      	b.n	8003992 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003970:	4b0a      	ldr	r3, [pc, #40]	@ (800399c <SysTick_Config+0x44>)
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	3a01      	subs	r2, #1
 8003976:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003978:	2301      	movs	r3, #1
 800397a:	425b      	negs	r3, r3
 800397c:	2103      	movs	r1, #3
 800397e:	0018      	movs	r0, r3
 8003980:	f7ff ff7c 	bl	800387c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003984:	4b05      	ldr	r3, [pc, #20]	@ (800399c <SysTick_Config+0x44>)
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800398a:	4b04      	ldr	r3, [pc, #16]	@ (800399c <SysTick_Config+0x44>)
 800398c:	2207      	movs	r2, #7
 800398e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003990:	2300      	movs	r3, #0
}
 8003992:	0018      	movs	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	b002      	add	sp, #8
 8003998:	bd80      	pop	{r7, pc}
 800399a:	46c0      	nop			@ (mov r8, r8)
 800399c:	e000e010 	.word	0xe000e010

080039a0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	607a      	str	r2, [r7, #4]
 80039aa:	210f      	movs	r1, #15
 80039ac:	187b      	adds	r3, r7, r1
 80039ae:	1c02      	adds	r2, r0, #0
 80039b0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	187b      	adds	r3, r7, r1
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	b25b      	sxtb	r3, r3
 80039ba:	0011      	movs	r1, r2
 80039bc:	0018      	movs	r0, r3
 80039be:	f7ff ff5d 	bl	800387c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80039c2:	46c0      	nop			@ (mov r8, r8)
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b004      	add	sp, #16
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	0002      	movs	r2, r0
 80039d2:	1dfb      	adds	r3, r7, #7
 80039d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039d6:	1dfb      	adds	r3, r7, #7
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	b25b      	sxtb	r3, r3
 80039dc:	0018      	movs	r0, r3
 80039de:	f7ff ff33 	bl	8003848 <__NVIC_EnableIRQ>
}
 80039e2:	46c0      	nop			@ (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b002      	add	sp, #8
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	0018      	movs	r0, r3
 80039f6:	f7ff ffaf 	bl	8003958 <SysTick_Config>
 80039fa:	0003      	movs	r3, r0
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b002      	add	sp, #8
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003a1a:	e155      	b.n	8003cc8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2101      	movs	r1, #1
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4091      	lsls	r1, r2
 8003a26:	000a      	movs	r2, r1
 8003a28:	4013      	ands	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d100      	bne.n	8003a34 <HAL_GPIO_Init+0x30>
 8003a32:	e146      	b.n	8003cc2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2203      	movs	r2, #3
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d005      	beq.n	8003a4c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2203      	movs	r2, #3
 8003a46:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d130      	bne.n	8003aae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	2203      	movs	r2, #3
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	0013      	movs	r3, r2
 8003a5c:	43da      	mvns	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	0013      	movs	r3, r2
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a82:	2201      	movs	r2, #1
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	409a      	lsls	r2, r3
 8003a88:	0013      	movs	r3, r2
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4013      	ands	r3, r2
 8003a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	091b      	lsrs	r3, r3, #4
 8003a98:	2201      	movs	r2, #1
 8003a9a:	401a      	ands	r2, r3
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	409a      	lsls	r2, r3
 8003aa0:	0013      	movs	r3, r2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	2203      	movs	r2, #3
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d017      	beq.n	8003aea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	0013      	movs	r3, r2
 8003aca:	43da      	mvns	r2, r3
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4013      	ands	r3, r2
 8003ad0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	005b      	lsls	r3, r3, #1
 8003ada:	409a      	lsls	r2, r3
 8003adc:	0013      	movs	r3, r2
 8003ade:	693a      	ldr	r2, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2203      	movs	r2, #3
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d123      	bne.n	8003b3e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	08da      	lsrs	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3208      	adds	r2, #8
 8003afe:	0092      	lsls	r2, r2, #2
 8003b00:	58d3      	ldr	r3, [r2, r3]
 8003b02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2207      	movs	r2, #7
 8003b08:	4013      	ands	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	220f      	movs	r2, #15
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	0013      	movs	r3, r2
 8003b12:	43da      	mvns	r2, r3
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	4013      	ands	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2107      	movs	r1, #7
 8003b22:	400b      	ands	r3, r1
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	409a      	lsls	r2, r3
 8003b28:	0013      	movs	r3, r2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	08da      	lsrs	r2, r3, #3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3208      	adds	r2, #8
 8003b38:	0092      	lsls	r2, r2, #2
 8003b3a:	6939      	ldr	r1, [r7, #16]
 8003b3c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	2203      	movs	r2, #3
 8003b4a:	409a      	lsls	r2, r3
 8003b4c:	0013      	movs	r3, r2
 8003b4e:	43da      	mvns	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4013      	ands	r3, r2
 8003b54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2203      	movs	r2, #3
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	409a      	lsls	r2, r3
 8003b64:	0013      	movs	r3, r2
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685a      	ldr	r2, [r3, #4]
 8003b76:	23c0      	movs	r3, #192	@ 0xc0
 8003b78:	029b      	lsls	r3, r3, #10
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d100      	bne.n	8003b80 <HAL_GPIO_Init+0x17c>
 8003b7e:	e0a0      	b.n	8003cc2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b80:	4b57      	ldr	r3, [pc, #348]	@ (8003ce0 <HAL_GPIO_Init+0x2dc>)
 8003b82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b84:	4b56      	ldr	r3, [pc, #344]	@ (8003ce0 <HAL_GPIO_Init+0x2dc>)
 8003b86:	2101      	movs	r1, #1
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b8c:	4a55      	ldr	r2, [pc, #340]	@ (8003ce4 <HAL_GPIO_Init+0x2e0>)
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	089b      	lsrs	r3, r3, #2
 8003b92:	3302      	adds	r3, #2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	589b      	ldr	r3, [r3, r2]
 8003b98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	220f      	movs	r2, #15
 8003ba4:	409a      	lsls	r2, r3
 8003ba6:	0013      	movs	r3, r2
 8003ba8:	43da      	mvns	r2, r3
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	23a0      	movs	r3, #160	@ 0xa0
 8003bb4:	05db      	lsls	r3, r3, #23
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d01f      	beq.n	8003bfa <HAL_GPIO_Init+0x1f6>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a4a      	ldr	r2, [pc, #296]	@ (8003ce8 <HAL_GPIO_Init+0x2e4>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d019      	beq.n	8003bf6 <HAL_GPIO_Init+0x1f2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a49      	ldr	r2, [pc, #292]	@ (8003cec <HAL_GPIO_Init+0x2e8>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <HAL_GPIO_Init+0x1ee>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a48      	ldr	r2, [pc, #288]	@ (8003cf0 <HAL_GPIO_Init+0x2ec>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00d      	beq.n	8003bee <HAL_GPIO_Init+0x1ea>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a47      	ldr	r2, [pc, #284]	@ (8003cf4 <HAL_GPIO_Init+0x2f0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d007      	beq.n	8003bea <HAL_GPIO_Init+0x1e6>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a46      	ldr	r2, [pc, #280]	@ (8003cf8 <HAL_GPIO_Init+0x2f4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d101      	bne.n	8003be6 <HAL_GPIO_Init+0x1e2>
 8003be2:	2305      	movs	r3, #5
 8003be4:	e00a      	b.n	8003bfc <HAL_GPIO_Init+0x1f8>
 8003be6:	2306      	movs	r3, #6
 8003be8:	e008      	b.n	8003bfc <HAL_GPIO_Init+0x1f8>
 8003bea:	2304      	movs	r3, #4
 8003bec:	e006      	b.n	8003bfc <HAL_GPIO_Init+0x1f8>
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e004      	b.n	8003bfc <HAL_GPIO_Init+0x1f8>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e002      	b.n	8003bfc <HAL_GPIO_Init+0x1f8>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <HAL_GPIO_Init+0x1f8>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	697a      	ldr	r2, [r7, #20]
 8003bfe:	2103      	movs	r1, #3
 8003c00:	400a      	ands	r2, r1
 8003c02:	0092      	lsls	r2, r2, #2
 8003c04:	4093      	lsls	r3, r2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c0c:	4935      	ldr	r1, [pc, #212]	@ (8003ce4 <HAL_GPIO_Init+0x2e0>)
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	089b      	lsrs	r3, r3, #2
 8003c12:	3302      	adds	r3, #2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c1a:	4b38      	ldr	r3, [pc, #224]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	43da      	mvns	r2, r3
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	4013      	ands	r3, r2
 8003c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	2380      	movs	r3, #128	@ 0x80
 8003c30:	035b      	lsls	r3, r3, #13
 8003c32:	4013      	ands	r3, r2
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003c3e:	4b2f      	ldr	r3, [pc, #188]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003c44:	4b2d      	ldr	r3, [pc, #180]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	43da      	mvns	r2, r3
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	4013      	ands	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	2380      	movs	r3, #128	@ 0x80
 8003c5a:	039b      	lsls	r3, r3, #14
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d003      	beq.n	8003c68 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003c68:	4b24      	ldr	r3, [pc, #144]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8003c6e:	4b23      	ldr	r3, [pc, #140]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	43da      	mvns	r2, r3
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	2380      	movs	r3, #128	@ 0x80
 8003c84:	029b      	lsls	r3, r3, #10
 8003c86:	4013      	ands	r3, r2
 8003c88:	d003      	beq.n	8003c92 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003c92:	4b1a      	ldr	r3, [pc, #104]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c98:	4b18      	ldr	r3, [pc, #96]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	43da      	mvns	r2, r3
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	2380      	movs	r3, #128	@ 0x80
 8003cae:	025b      	lsls	r3, r3, #9
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003cfc <HAL_GPIO_Init+0x2f8>)
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	40da      	lsrs	r2, r3
 8003cd0:	1e13      	subs	r3, r2, #0
 8003cd2:	d000      	beq.n	8003cd6 <HAL_GPIO_Init+0x2d2>
 8003cd4:	e6a2      	b.n	8003a1c <HAL_GPIO_Init+0x18>
  }
}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	46c0      	nop			@ (mov r8, r8)
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	b006      	add	sp, #24
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40010000 	.word	0x40010000
 8003ce8:	50000400 	.word	0x50000400
 8003cec:	50000800 	.word	0x50000800
 8003cf0:	50000c00 	.word	0x50000c00
 8003cf4:	50001000 	.word	0x50001000
 8003cf8:	50001c00 	.word	0x50001c00
 8003cfc:	40010400 	.word	0x40010400

08003d00 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8003d16:	e0bc      	b.n	8003e92 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8003d18:	2201      	movs	r2, #1
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	4013      	ands	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d100      	bne.n	8003d2c <HAL_GPIO_DeInit+0x2c>
 8003d2a:	e0af      	b.n	8003e8c <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8003d2c:	4a5e      	ldr	r2, [pc, #376]	@ (8003ea8 <HAL_GPIO_DeInit+0x1a8>)
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	089b      	lsrs	r3, r3, #2
 8003d32:	3302      	adds	r3, #2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	589b      	ldr	r3, [r3, r2]
 8003d38:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	4013      	ands	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	220f      	movs	r2, #15
 8003d44:	409a      	lsls	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	23a0      	movs	r3, #160	@ 0xa0
 8003d50:	05db      	lsls	r3, r3, #23
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d01f      	beq.n	8003d96 <HAL_GPIO_DeInit+0x96>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a54      	ldr	r2, [pc, #336]	@ (8003eac <HAL_GPIO_DeInit+0x1ac>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d019      	beq.n	8003d92 <HAL_GPIO_DeInit+0x92>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a53      	ldr	r2, [pc, #332]	@ (8003eb0 <HAL_GPIO_DeInit+0x1b0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d013      	beq.n	8003d8e <HAL_GPIO_DeInit+0x8e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a52      	ldr	r2, [pc, #328]	@ (8003eb4 <HAL_GPIO_DeInit+0x1b4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d00d      	beq.n	8003d8a <HAL_GPIO_DeInit+0x8a>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a51      	ldr	r2, [pc, #324]	@ (8003eb8 <HAL_GPIO_DeInit+0x1b8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d007      	beq.n	8003d86 <HAL_GPIO_DeInit+0x86>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a50      	ldr	r2, [pc, #320]	@ (8003ebc <HAL_GPIO_DeInit+0x1bc>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <HAL_GPIO_DeInit+0x82>
 8003d7e:	2305      	movs	r3, #5
 8003d80:	e00a      	b.n	8003d98 <HAL_GPIO_DeInit+0x98>
 8003d82:	2306      	movs	r3, #6
 8003d84:	e008      	b.n	8003d98 <HAL_GPIO_DeInit+0x98>
 8003d86:	2304      	movs	r3, #4
 8003d88:	e006      	b.n	8003d98 <HAL_GPIO_DeInit+0x98>
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e004      	b.n	8003d98 <HAL_GPIO_DeInit+0x98>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	e002      	b.n	8003d98 <HAL_GPIO_DeInit+0x98>
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <HAL_GPIO_DeInit+0x98>
 8003d96:	2300      	movs	r3, #0
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	2103      	movs	r1, #3
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	0092      	lsls	r2, r2, #2
 8003da0:	4093      	lsls	r3, r2
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d132      	bne.n	8003e0e <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003da8:	4b45      	ldr	r3, [pc, #276]	@ (8003ec0 <HAL_GPIO_DeInit+0x1c0>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	43d9      	mvns	r1, r3
 8003db0:	4b43      	ldr	r3, [pc, #268]	@ (8003ec0 <HAL_GPIO_DeInit+0x1c0>)
 8003db2:	400a      	ands	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003db6:	4b42      	ldr	r3, [pc, #264]	@ (8003ec0 <HAL_GPIO_DeInit+0x1c0>)
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	43d9      	mvns	r1, r3
 8003dbe:	4b40      	ldr	r3, [pc, #256]	@ (8003ec0 <HAL_GPIO_DeInit+0x1c0>)
 8003dc0:	400a      	ands	r2, r1
 8003dc2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003dc4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec0 <HAL_GPIO_DeInit+0x1c0>)
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	43d9      	mvns	r1, r3
 8003dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8003ec0 <HAL_GPIO_DeInit+0x1c0>)
 8003dce:	400a      	ands	r2, r1
 8003dd0:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003dd2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec0 <HAL_GPIO_DeInit+0x1c0>)
 8003dd4:	689a      	ldr	r2, [r3, #8]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	43d9      	mvns	r1, r3
 8003dda:	4b39      	ldr	r3, [pc, #228]	@ (8003ec0 <HAL_GPIO_DeInit+0x1c0>)
 8003ddc:	400a      	ands	r2, r1
 8003dde:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2203      	movs	r2, #3
 8003de4:	4013      	ands	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	220f      	movs	r2, #15
 8003dea:	409a      	lsls	r2, r3
 8003dec:	0013      	movs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003df0:	4a2d      	ldr	r2, [pc, #180]	@ (8003ea8 <HAL_GPIO_DeInit+0x1a8>)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	089b      	lsrs	r3, r3, #2
 8003df6:	3302      	adds	r3, #2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	589a      	ldr	r2, [r3, r2]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	43d9      	mvns	r1, r3
 8003e00:	4829      	ldr	r0, [pc, #164]	@ (8003ea8 <HAL_GPIO_DeInit+0x1a8>)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	089b      	lsrs	r3, r3, #2
 8003e06:	400a      	ands	r2, r1
 8003e08:	3302      	adds	r3, #2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	2103      	movs	r1, #3
 8003e18:	4099      	lsls	r1, r3
 8003e1a:	000b      	movs	r3, r1
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	08da      	lsrs	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3208      	adds	r2, #8
 8003e2a:	0092      	lsls	r2, r2, #2
 8003e2c:	58d3      	ldr	r3, [r2, r3]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	2107      	movs	r1, #7
 8003e32:	400a      	ands	r2, r1
 8003e34:	0092      	lsls	r2, r2, #2
 8003e36:	210f      	movs	r1, #15
 8003e38:	4091      	lsls	r1, r2
 8003e3a:	000a      	movs	r2, r1
 8003e3c:	43d1      	mvns	r1, r2
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	08d2      	lsrs	r2, r2, #3
 8003e42:	4019      	ands	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3208      	adds	r2, #8
 8003e48:	0092      	lsls	r2, r2, #2
 8003e4a:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	0052      	lsls	r2, r2, #1
 8003e54:	2103      	movs	r1, #3
 8003e56:	4091      	lsls	r1, r2
 8003e58:	000a      	movs	r2, r1
 8003e5a:	43d2      	mvns	r2, r2
 8003e5c:	401a      	ands	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2101      	movs	r1, #1
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	4091      	lsls	r1, r2
 8003e6c:	000a      	movs	r2, r1
 8003e6e:	43d2      	mvns	r2, r2
 8003e70:	401a      	ands	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	0052      	lsls	r2, r2, #1
 8003e7e:	2103      	movs	r1, #3
 8003e80:	4091      	lsls	r1, r2
 8003e82:	000a      	movs	r2, r1
 8003e84:	43d2      	mvns	r2, r2
 8003e86:	401a      	ands	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
    }
    position++;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	3301      	adds	r3, #1
 8003e90:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	40da      	lsrs	r2, r3
 8003e98:	1e13      	subs	r3, r2, #0
 8003e9a:	d000      	beq.n	8003e9e <HAL_GPIO_DeInit+0x19e>
 8003e9c:	e73c      	b.n	8003d18 <HAL_GPIO_DeInit+0x18>
  }
}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	46c0      	nop			@ (mov r8, r8)
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	b006      	add	sp, #24
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	40010000 	.word	0x40010000
 8003eac:	50000400 	.word	0x50000400
 8003eb0:	50000800 	.word	0x50000800
 8003eb4:	50000c00 	.word	0x50000c00
 8003eb8:	50001000 	.word	0x50001000
 8003ebc:	50001c00 	.word	0x50001c00
 8003ec0:	40010400 	.word	0x40010400

08003ec4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	0008      	movs	r0, r1
 8003ece:	0011      	movs	r1, r2
 8003ed0:	1cbb      	adds	r3, r7, #2
 8003ed2:	1c02      	adds	r2, r0, #0
 8003ed4:	801a      	strh	r2, [r3, #0]
 8003ed6:	1c7b      	adds	r3, r7, #1
 8003ed8:	1c0a      	adds	r2, r1, #0
 8003eda:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003edc:	1c7b      	adds	r3, r7, #1
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ee4:	1cbb      	adds	r3, r7, #2
 8003ee6:	881a      	ldrh	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8003eec:	e003      	b.n	8003ef6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8003eee:	1cbb      	adds	r3, r7, #2
 8003ef0:	881a      	ldrh	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ef6:	46c0      	nop			@ (mov r8, r8)
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	b002      	add	sp, #8
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e08f      	b.n	8004032 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2241      	movs	r2, #65	@ 0x41
 8003f16:	5c9b      	ldrb	r3, [r3, r2]
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d107      	bne.n	8003f2e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2240      	movs	r2, #64	@ 0x40
 8003f22:	2100      	movs	r1, #0
 8003f24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7fe fa69 	bl	8002400 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2241      	movs	r2, #65	@ 0x41
 8003f32:	2124      	movs	r1, #36	@ 0x24
 8003f34:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2101      	movs	r1, #1
 8003f42:	438a      	bics	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	493b      	ldr	r1, [pc, #236]	@ (800403c <HAL_I2C_Init+0x13c>)
 8003f50:	400a      	ands	r2, r1
 8003f52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4938      	ldr	r1, [pc, #224]	@ (8004040 <HAL_I2C_Init+0x140>)
 8003f60:	400a      	ands	r2, r1
 8003f62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d108      	bne.n	8003f7e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2180      	movs	r1, #128	@ 0x80
 8003f76:	0209      	lsls	r1, r1, #8
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	609a      	str	r2, [r3, #8]
 8003f7c:	e007      	b.n	8003f8e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689a      	ldr	r2, [r3, #8]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2184      	movs	r1, #132	@ 0x84
 8003f88:	0209      	lsls	r1, r1, #8
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d109      	bne.n	8003faa <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2180      	movs	r1, #128	@ 0x80
 8003fa2:	0109      	lsls	r1, r1, #4
 8003fa4:	430a      	orrs	r2, r1
 8003fa6:	605a      	str	r2, [r3, #4]
 8003fa8:	e007      	b.n	8003fba <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4923      	ldr	r1, [pc, #140]	@ (8004044 <HAL_I2C_Init+0x144>)
 8003fb6:	400a      	ands	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4920      	ldr	r1, [pc, #128]	@ (8004048 <HAL_I2C_Init+0x148>)
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	491a      	ldr	r1, [pc, #104]	@ (8004040 <HAL_I2C_Init+0x140>)
 8003fd6:	400a      	ands	r2, r1
 8003fd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691a      	ldr	r2, [r3, #16]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69d9      	ldr	r1, [r3, #28]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1a      	ldr	r2, [r3, #32]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2101      	movs	r1, #1
 8004010:	430a      	orrs	r2, r1
 8004012:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2241      	movs	r2, #65	@ 0x41
 800401e:	2120      	movs	r1, #32
 8004020:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2242      	movs	r2, #66	@ 0x42
 800402c:	2100      	movs	r1, #0
 800402e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	0018      	movs	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b002      	add	sp, #8
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	f0ffffff 	.word	0xf0ffffff
 8004040:	ffff7fff 	.word	0xffff7fff
 8004044:	fffff7ff 	.word	0xfffff7ff
 8004048:	02008000 	.word	0x02008000

0800404c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e022      	b.n	80040a4 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2241      	movs	r2, #65	@ 0x41
 8004062:	2124      	movs	r1, #36	@ 0x24
 8004064:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2101      	movs	r1, #1
 8004072:	438a      	bics	r2, r1
 8004074:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	f7fe fa05 	bl	8002488 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2241      	movs	r2, #65	@ 0x41
 8004088:	2100      	movs	r1, #0
 800408a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2242      	movs	r2, #66	@ 0x42
 8004096:	2100      	movs	r1, #0
 8004098:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2240      	movs	r2, #64	@ 0x40
 800409e:	2100      	movs	r1, #0
 80040a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80040a2:	2300      	movs	r3, #0
}
 80040a4:	0018      	movs	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b002      	add	sp, #8
 80040aa:	bd80      	pop	{r7, pc}

080040ac <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b089      	sub	sp, #36	@ 0x24
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	0008      	movs	r0, r1
 80040b6:	607a      	str	r2, [r7, #4]
 80040b8:	0019      	movs	r1, r3
 80040ba:	230a      	movs	r3, #10
 80040bc:	18fb      	adds	r3, r7, r3
 80040be:	1c02      	adds	r2, r0, #0
 80040c0:	801a      	strh	r2, [r3, #0]
 80040c2:	2308      	movs	r3, #8
 80040c4:	18fb      	adds	r3, r7, r3
 80040c6:	1c0a      	adds	r2, r1, #0
 80040c8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2241      	movs	r2, #65	@ 0x41
 80040ce:	5c9b      	ldrb	r3, [r3, r2]
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b20      	cmp	r3, #32
 80040d4:	d000      	beq.n	80040d8 <HAL_I2C_Master_Transmit+0x2c>
 80040d6:	e10a      	b.n	80042ee <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2240      	movs	r2, #64	@ 0x40
 80040dc:	5c9b      	ldrb	r3, [r3, r2]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_I2C_Master_Transmit+0x3a>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e104      	b.n	80042f0 <HAL_I2C_Master_Transmit+0x244>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2240      	movs	r2, #64	@ 0x40
 80040ea:	2101      	movs	r1, #1
 80040ec:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040ee:	f7fe febb 	bl	8002e68 <HAL_GetTick>
 80040f2:	0003      	movs	r3, r0
 80040f4:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040f6:	2380      	movs	r3, #128	@ 0x80
 80040f8:	0219      	lsls	r1, r3, #8
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	2319      	movs	r3, #25
 8004102:	2201      	movs	r2, #1
 8004104:	f000 fb22 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8004108:	1e03      	subs	r3, r0, #0
 800410a:	d001      	beq.n	8004110 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e0ef      	b.n	80042f0 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2241      	movs	r2, #65	@ 0x41
 8004114:	2121      	movs	r1, #33	@ 0x21
 8004116:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2242      	movs	r2, #66	@ 0x42
 800411c:	2110      	movs	r1, #16
 800411e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2208      	movs	r2, #8
 8004130:	18ba      	adds	r2, r7, r2
 8004132:	8812      	ldrh	r2, [r2, #0]
 8004134:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	2bff      	cmp	r3, #255	@ 0xff
 8004144:	d906      	bls.n	8004154 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	22ff      	movs	r2, #255	@ 0xff
 800414a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800414c:	2380      	movs	r3, #128	@ 0x80
 800414e:	045b      	lsls	r3, r3, #17
 8004150:	617b      	str	r3, [r7, #20]
 8004152:	e007      	b.n	8004164 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800415e:	2380      	movs	r3, #128	@ 0x80
 8004160:	049b      	lsls	r3, r3, #18
 8004162:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004168:	2b00      	cmp	r3, #0
 800416a:	d027      	beq.n	80041bc <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	781a      	ldrb	r2, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	3301      	adds	r3, #1
 80041a4:	b2da      	uxtb	r2, r3
 80041a6:	697c      	ldr	r4, [r7, #20]
 80041a8:	230a      	movs	r3, #10
 80041aa:	18fb      	adds	r3, r7, r3
 80041ac:	8819      	ldrh	r1, [r3, #0]
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	4b51      	ldr	r3, [pc, #324]	@ (80042f8 <HAL_I2C_Master_Transmit+0x24c>)
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	0023      	movs	r3, r4
 80041b6:	f000 fd41 	bl	8004c3c <I2C_TransferConfig>
 80041ba:	e06f      	b.n	800429c <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	697c      	ldr	r4, [r7, #20]
 80041c4:	230a      	movs	r3, #10
 80041c6:	18fb      	adds	r3, r7, r3
 80041c8:	8819      	ldrh	r1, [r3, #0]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	4b4a      	ldr	r3, [pc, #296]	@ (80042f8 <HAL_I2C_Master_Transmit+0x24c>)
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	0023      	movs	r3, r4
 80041d2:	f000 fd33 	bl	8004c3c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80041d6:	e061      	b.n	800429c <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	0018      	movs	r0, r3
 80041e0:	f000 fb0c 	bl	80047fc <I2C_WaitOnTXISFlagUntilTimeout>
 80041e4:	1e03      	subs	r3, r0, #0
 80041e6:	d001      	beq.n	80041ec <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e081      	b.n	80042f0 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f0:	781a      	ldrb	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004206:	b29b      	uxth	r3, r3
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d03a      	beq.n	800429c <HAL_I2C_Master_Transmit+0x1f0>
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422a:	2b00      	cmp	r3, #0
 800422c:	d136      	bne.n	800429c <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800422e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	0013      	movs	r3, r2
 8004238:	2200      	movs	r2, #0
 800423a:	2180      	movs	r1, #128	@ 0x80
 800423c:	f000 fa86 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8004240:	1e03      	subs	r3, r0, #0
 8004242:	d001      	beq.n	8004248 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e053      	b.n	80042f0 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	2bff      	cmp	r3, #255	@ 0xff
 8004250:	d911      	bls.n	8004276 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	22ff      	movs	r2, #255	@ 0xff
 8004256:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425c:	b2da      	uxtb	r2, r3
 800425e:	2380      	movs	r3, #128	@ 0x80
 8004260:	045c      	lsls	r4, r3, #17
 8004262:	230a      	movs	r3, #10
 8004264:	18fb      	adds	r3, r7, r3
 8004266:	8819      	ldrh	r1, [r3, #0]
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	2300      	movs	r3, #0
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	0023      	movs	r3, r4
 8004270:	f000 fce4 	bl	8004c3c <I2C_TransferConfig>
 8004274:	e012      	b.n	800429c <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004284:	b2da      	uxtb	r2, r3
 8004286:	2380      	movs	r3, #128	@ 0x80
 8004288:	049c      	lsls	r4, r3, #18
 800428a:	230a      	movs	r3, #10
 800428c:	18fb      	adds	r3, r7, r3
 800428e:	8819      	ldrh	r1, [r3, #0]
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	2300      	movs	r3, #0
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	0023      	movs	r3, r4
 8004298:	f000 fcd0 	bl	8004c3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d198      	bne.n	80041d8 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	0018      	movs	r0, r3
 80042ae:	f000 faeb 	bl	8004888 <I2C_WaitOnSTOPFlagUntilTimeout>
 80042b2:	1e03      	subs	r3, r0, #0
 80042b4:	d001      	beq.n	80042ba <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e01a      	b.n	80042f0 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	2220      	movs	r2, #32
 80042c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	685a      	ldr	r2, [r3, #4]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	490b      	ldr	r1, [pc, #44]	@ (80042fc <HAL_I2C_Master_Transmit+0x250>)
 80042ce:	400a      	ands	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2241      	movs	r2, #65	@ 0x41
 80042d6:	2120      	movs	r1, #32
 80042d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2242      	movs	r2, #66	@ 0x42
 80042de:	2100      	movs	r1, #0
 80042e0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2240      	movs	r2, #64	@ 0x40
 80042e6:	2100      	movs	r1, #0
 80042e8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e000      	b.n	80042f0 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80042ee:	2302      	movs	r3, #2
  }
}
 80042f0:	0018      	movs	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b007      	add	sp, #28
 80042f6:	bd90      	pop	{r4, r7, pc}
 80042f8:	80002000 	.word	0x80002000
 80042fc:	fe00e800 	.word	0xfe00e800

08004300 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004300:	b590      	push	{r4, r7, lr}
 8004302:	b089      	sub	sp, #36	@ 0x24
 8004304:	af02      	add	r7, sp, #8
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	0008      	movs	r0, r1
 800430a:	607a      	str	r2, [r7, #4]
 800430c:	0019      	movs	r1, r3
 800430e:	230a      	movs	r3, #10
 8004310:	18fb      	adds	r3, r7, r3
 8004312:	1c02      	adds	r2, r0, #0
 8004314:	801a      	strh	r2, [r3, #0]
 8004316:	2308      	movs	r3, #8
 8004318:	18fb      	adds	r3, r7, r3
 800431a:	1c0a      	adds	r2, r1, #0
 800431c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2241      	movs	r2, #65	@ 0x41
 8004322:	5c9b      	ldrb	r3, [r3, r2]
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b20      	cmp	r3, #32
 8004328:	d000      	beq.n	800432c <HAL_I2C_Master_Receive+0x2c>
 800432a:	e0e8      	b.n	80044fe <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2240      	movs	r2, #64	@ 0x40
 8004330:	5c9b      	ldrb	r3, [r3, r2]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_I2C_Master_Receive+0x3a>
 8004336:	2302      	movs	r3, #2
 8004338:	e0e2      	b.n	8004500 <HAL_I2C_Master_Receive+0x200>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2240      	movs	r2, #64	@ 0x40
 800433e:	2101      	movs	r1, #1
 8004340:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004342:	f7fe fd91 	bl	8002e68 <HAL_GetTick>
 8004346:	0003      	movs	r3, r0
 8004348:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800434a:	2380      	movs	r3, #128	@ 0x80
 800434c:	0219      	lsls	r1, r3, #8
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	2319      	movs	r3, #25
 8004356:	2201      	movs	r2, #1
 8004358:	f000 f9f8 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 800435c:	1e03      	subs	r3, r0, #0
 800435e:	d001      	beq.n	8004364 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e0cd      	b.n	8004500 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2241      	movs	r2, #65	@ 0x41
 8004368:	2122      	movs	r1, #34	@ 0x22
 800436a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2242      	movs	r2, #66	@ 0x42
 8004370:	2110      	movs	r1, #16
 8004372:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2208      	movs	r2, #8
 8004384:	18ba      	adds	r2, r7, r2
 8004386:	8812      	ldrh	r2, [r2, #0]
 8004388:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004394:	b29b      	uxth	r3, r3
 8004396:	2bff      	cmp	r3, #255	@ 0xff
 8004398:	d911      	bls.n	80043be <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	2380      	movs	r3, #128	@ 0x80
 80043a8:	045c      	lsls	r4, r3, #17
 80043aa:	230a      	movs	r3, #10
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	8819      	ldrh	r1, [r3, #0]
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	4b55      	ldr	r3, [pc, #340]	@ (8004508 <HAL_I2C_Master_Receive+0x208>)
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	0023      	movs	r3, r4
 80043b8:	f000 fc40 	bl	8004c3c <I2C_TransferConfig>
 80043bc:	e076      	b.n	80044ac <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	2380      	movs	r3, #128	@ 0x80
 80043d0:	049c      	lsls	r4, r3, #18
 80043d2:	230a      	movs	r3, #10
 80043d4:	18fb      	adds	r3, r7, r3
 80043d6:	8819      	ldrh	r1, [r3, #0]
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	4b4b      	ldr	r3, [pc, #300]	@ (8004508 <HAL_I2C_Master_Receive+0x208>)
 80043dc:	9300      	str	r3, [sp, #0]
 80043de:	0023      	movs	r3, r4
 80043e0:	f000 fc2c 	bl	8004c3c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80043e4:	e062      	b.n	80044ac <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	0018      	movs	r0, r3
 80043ee:	f000 fa8f 	bl	8004910 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043f2:	1e03      	subs	r3, r0, #0
 80043f4:	d001      	beq.n	80043fa <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e082      	b.n	8004500 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004422:	b29b      	uxth	r3, r3
 8004424:	3b01      	subs	r3, #1
 8004426:	b29a      	uxth	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d03a      	beq.n	80044ac <HAL_I2C_Master_Receive+0x1ac>
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443a:	2b00      	cmp	r3, #0
 800443c:	d136      	bne.n	80044ac <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800443e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	0013      	movs	r3, r2
 8004448:	2200      	movs	r2, #0
 800444a:	2180      	movs	r1, #128	@ 0x80
 800444c:	f000 f97e 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8004450:	1e03      	subs	r3, r0, #0
 8004452:	d001      	beq.n	8004458 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e053      	b.n	8004500 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800445c:	b29b      	uxth	r3, r3
 800445e:	2bff      	cmp	r3, #255	@ 0xff
 8004460:	d911      	bls.n	8004486 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	22ff      	movs	r2, #255	@ 0xff
 8004466:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800446c:	b2da      	uxtb	r2, r3
 800446e:	2380      	movs	r3, #128	@ 0x80
 8004470:	045c      	lsls	r4, r3, #17
 8004472:	230a      	movs	r3, #10
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	8819      	ldrh	r1, [r3, #0]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	2300      	movs	r3, #0
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	0023      	movs	r3, r4
 8004480:	f000 fbdc 	bl	8004c3c <I2C_TransferConfig>
 8004484:	e012      	b.n	80044ac <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004494:	b2da      	uxtb	r2, r3
 8004496:	2380      	movs	r3, #128	@ 0x80
 8004498:	049c      	lsls	r4, r3, #18
 800449a:	230a      	movs	r3, #10
 800449c:	18fb      	adds	r3, r7, r3
 800449e:	8819      	ldrh	r1, [r3, #0]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	2300      	movs	r3, #0
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	0023      	movs	r3, r4
 80044a8:	f000 fbc8 	bl	8004c3c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d197      	bne.n	80043e6 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	0018      	movs	r0, r3
 80044be:	f000 f9e3 	bl	8004888 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044c2:	1e03      	subs	r3, r0, #0
 80044c4:	d001      	beq.n	80044ca <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e01a      	b.n	8004500 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2220      	movs	r2, #32
 80044d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	685a      	ldr	r2, [r3, #4]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	490b      	ldr	r1, [pc, #44]	@ (800450c <HAL_I2C_Master_Receive+0x20c>)
 80044de:	400a      	ands	r2, r1
 80044e0:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2241      	movs	r2, #65	@ 0x41
 80044e6:	2120      	movs	r1, #32
 80044e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2242      	movs	r2, #66	@ 0x42
 80044ee:	2100      	movs	r1, #0
 80044f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2240      	movs	r2, #64	@ 0x40
 80044f6:	2100      	movs	r1, #0
 80044f8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80044fa:	2300      	movs	r3, #0
 80044fc:	e000      	b.n	8004500 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80044fe:	2302      	movs	r3, #2
  }
}
 8004500:	0018      	movs	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	b007      	add	sp, #28
 8004506:	bd90      	pop	{r4, r7, pc}
 8004508:	80002400 	.word	0x80002400
 800450c:	fe00e800 	.word	0xfe00e800

08004510 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08a      	sub	sp, #40	@ 0x28
 8004514:	af02      	add	r7, sp, #8
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	230a      	movs	r3, #10
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	1c0a      	adds	r2, r1, #0
 8004522:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004524:	2300      	movs	r3, #0
 8004526:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2241      	movs	r2, #65	@ 0x41
 800452c:	5c9b      	ldrb	r3, [r3, r2]
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b20      	cmp	r3, #32
 8004532:	d000      	beq.n	8004536 <HAL_I2C_IsDeviceReady+0x26>
 8004534:	e0df      	b.n	80046f6 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	699a      	ldr	r2, [r3, #24]
 800453c:	2380      	movs	r3, #128	@ 0x80
 800453e:	021b      	lsls	r3, r3, #8
 8004540:	401a      	ands	r2, r3
 8004542:	2380      	movs	r3, #128	@ 0x80
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	429a      	cmp	r2, r3
 8004548:	d101      	bne.n	800454e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800454a:	2302      	movs	r3, #2
 800454c:	e0d4      	b.n	80046f8 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2240      	movs	r2, #64	@ 0x40
 8004552:	5c9b      	ldrb	r3, [r3, r2]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d101      	bne.n	800455c <HAL_I2C_IsDeviceReady+0x4c>
 8004558:	2302      	movs	r3, #2
 800455a:	e0cd      	b.n	80046f8 <HAL_I2C_IsDeviceReady+0x1e8>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2240      	movs	r2, #64	@ 0x40
 8004560:	2101      	movs	r1, #1
 8004562:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2241      	movs	r2, #65	@ 0x41
 8004568:	2124      	movs	r1, #36	@ 0x24
 800456a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d107      	bne.n	800458a <HAL_I2C_IsDeviceReady+0x7a>
 800457a:	230a      	movs	r3, #10
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	881b      	ldrh	r3, [r3, #0]
 8004580:	059b      	lsls	r3, r3, #22
 8004582:	0d9b      	lsrs	r3, r3, #22
 8004584:	4a5e      	ldr	r2, [pc, #376]	@ (8004700 <HAL_I2C_IsDeviceReady+0x1f0>)
 8004586:	431a      	orrs	r2, r3
 8004588:	e006      	b.n	8004598 <HAL_I2C_IsDeviceReady+0x88>
 800458a:	230a      	movs	r3, #10
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	881b      	ldrh	r3, [r3, #0]
 8004590:	059b      	lsls	r3, r3, #22
 8004592:	0d9b      	lsrs	r3, r3, #22
 8004594:	4a5b      	ldr	r2, [pc, #364]	@ (8004704 <HAL_I2C_IsDeviceReady+0x1f4>)
 8004596:	431a      	orrs	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800459e:	f7fe fc63 	bl	8002e68 <HAL_GetTick>
 80045a2:	0003      	movs	r3, r0
 80045a4:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	2220      	movs	r2, #32
 80045ae:	4013      	ands	r3, r2
 80045b0:	3b20      	subs	r3, #32
 80045b2:	425a      	negs	r2, r3
 80045b4:	4153      	adcs	r3, r2
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	231f      	movs	r3, #31
 80045ba:	18fb      	adds	r3, r7, r3
 80045bc:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	2210      	movs	r2, #16
 80045c6:	4013      	ands	r3, r2
 80045c8:	3b10      	subs	r3, #16
 80045ca:	425a      	negs	r2, r3
 80045cc:	4153      	adcs	r3, r2
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	231e      	movs	r3, #30
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80045d6:	e035      	b.n	8004644 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	3301      	adds	r3, #1
 80045dc:	d01a      	beq.n	8004614 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80045de:	f7fe fc43 	bl	8002e68 <HAL_GetTick>
 80045e2:	0002      	movs	r2, r0
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d302      	bcc.n	80045f4 <HAL_I2C_IsDeviceReady+0xe4>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10f      	bne.n	8004614 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2241      	movs	r2, #65	@ 0x41
 80045f8:	2120      	movs	r1, #32
 80045fa:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004600:	2220      	movs	r2, #32
 8004602:	431a      	orrs	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2240      	movs	r2, #64	@ 0x40
 800460c:	2100      	movs	r1, #0
 800460e:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e071      	b.n	80046f8 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2220      	movs	r2, #32
 800461c:	4013      	ands	r3, r2
 800461e:	3b20      	subs	r3, #32
 8004620:	425a      	negs	r2, r3
 8004622:	4153      	adcs	r3, r2
 8004624:	b2da      	uxtb	r2, r3
 8004626:	231f      	movs	r3, #31
 8004628:	18fb      	adds	r3, r7, r3
 800462a:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2210      	movs	r2, #16
 8004634:	4013      	ands	r3, r2
 8004636:	3b10      	subs	r3, #16
 8004638:	425a      	negs	r2, r3
 800463a:	4153      	adcs	r3, r2
 800463c:	b2da      	uxtb	r2, r3
 800463e:	231e      	movs	r3, #30
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004644:	231f      	movs	r3, #31
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d104      	bne.n	8004658 <HAL_I2C_IsDeviceReady+0x148>
 800464e:	231e      	movs	r3, #30
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0bf      	beq.n	80045d8 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	2210      	movs	r2, #16
 8004660:	4013      	ands	r3, r2
 8004662:	2b10      	cmp	r3, #16
 8004664:	d01a      	beq.n	800469c <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	0013      	movs	r3, r2
 8004670:	2200      	movs	r2, #0
 8004672:	2120      	movs	r1, #32
 8004674:	f000 f86a 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 8004678:	1e03      	subs	r3, r0, #0
 800467a:	d001      	beq.n	8004680 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e03b      	b.n	80046f8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2220      	movs	r2, #32
 8004686:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2241      	movs	r2, #65	@ 0x41
 800468c:	2120      	movs	r1, #32
 800468e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2240      	movs	r2, #64	@ 0x40
 8004694:	2100      	movs	r1, #0
 8004696:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8004698:	2300      	movs	r3, #0
 800469a:	e02d      	b.n	80046f8 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800469c:	683a      	ldr	r2, [r7, #0]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	0013      	movs	r3, r2
 80046a6:	2200      	movs	r2, #0
 80046a8:	2120      	movs	r1, #32
 80046aa:	f000 f84f 	bl	800474c <I2C_WaitOnFlagUntilTimeout>
 80046ae:	1e03      	subs	r3, r0, #0
 80046b0:	d001      	beq.n	80046b6 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e020      	b.n	80046f8 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2210      	movs	r2, #16
 80046bc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2220      	movs	r2, #32
 80046c4:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	3301      	adds	r3, #1
 80046ca:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d900      	bls.n	80046d6 <HAL_I2C_IsDeviceReady+0x1c6>
 80046d4:	e74d      	b.n	8004572 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2241      	movs	r2, #65	@ 0x41
 80046da:	2120      	movs	r1, #32
 80046dc:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e2:	2220      	movs	r2, #32
 80046e4:	431a      	orrs	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2240      	movs	r2, #64	@ 0x40
 80046ee:	2100      	movs	r1, #0
 80046f0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80046f6:	2302      	movs	r3, #2
  }
}
 80046f8:	0018      	movs	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	b008      	add	sp, #32
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	02002000 	.word	0x02002000
 8004704:	02002800 	.word	0x02002800

08004708 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699b      	ldr	r3, [r3, #24]
 8004716:	2202      	movs	r2, #2
 8004718:	4013      	ands	r3, r2
 800471a:	2b02      	cmp	r3, #2
 800471c:	d103      	bne.n	8004726 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2200      	movs	r2, #0
 8004724:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2201      	movs	r2, #1
 800472e:	4013      	ands	r3, r2
 8004730:	2b01      	cmp	r3, #1
 8004732:	d007      	beq.n	8004744 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2101      	movs	r1, #1
 8004740:	430a      	orrs	r2, r1
 8004742:	619a      	str	r2, [r3, #24]
  }
}
 8004744:	46c0      	nop			@ (mov r8, r8)
 8004746:	46bd      	mov	sp, r7
 8004748:	b002      	add	sp, #8
 800474a:	bd80      	pop	{r7, pc}

0800474c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	1dfb      	adds	r3, r7, #7
 800475a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800475c:	e03a      	b.n	80047d4 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	6839      	ldr	r1, [r7, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	0018      	movs	r0, r3
 8004766:	f000 f971 	bl	8004a4c <I2C_IsErrorOccurred>
 800476a:	1e03      	subs	r3, r0, #0
 800476c:	d001      	beq.n	8004772 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e040      	b.n	80047f4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	3301      	adds	r3, #1
 8004776:	d02d      	beq.n	80047d4 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004778:	f7fe fb76 	bl	8002e68 <HAL_GetTick>
 800477c:	0002      	movs	r2, r0
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	683a      	ldr	r2, [r7, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d302      	bcc.n	800478e <I2C_WaitOnFlagUntilTimeout+0x42>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d122      	bne.n	80047d4 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	4013      	ands	r3, r2
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	425a      	negs	r2, r3
 800479e:	4153      	adcs	r3, r2
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	001a      	movs	r2, r3
 80047a4:	1dfb      	adds	r3, r7, #7
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d113      	bne.n	80047d4 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047b0:	2220      	movs	r2, #32
 80047b2:	431a      	orrs	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2241      	movs	r2, #65	@ 0x41
 80047bc:	2120      	movs	r1, #32
 80047be:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2242      	movs	r2, #66	@ 0x42
 80047c4:	2100      	movs	r1, #0
 80047c6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2240      	movs	r2, #64	@ 0x40
 80047cc:	2100      	movs	r1, #0
 80047ce:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e00f      	b.n	80047f4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	4013      	ands	r3, r2
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	425a      	negs	r2, r3
 80047e4:	4153      	adcs	r3, r2
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	001a      	movs	r2, r3
 80047ea:	1dfb      	adds	r3, r7, #7
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d0b5      	beq.n	800475e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	0018      	movs	r0, r3
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b004      	add	sp, #16
 80047fa:	bd80      	pop	{r7, pc}

080047fc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004808:	e032      	b.n	8004870 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	0018      	movs	r0, r3
 8004812:	f000 f91b 	bl	8004a4c <I2C_IsErrorOccurred>
 8004816:	1e03      	subs	r3, r0, #0
 8004818:	d001      	beq.n	800481e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e030      	b.n	8004880 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	3301      	adds	r3, #1
 8004822:	d025      	beq.n	8004870 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004824:	f7fe fb20 	bl	8002e68 <HAL_GetTick>
 8004828:	0002      	movs	r2, r0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	429a      	cmp	r2, r3
 8004832:	d302      	bcc.n	800483a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d11a      	bne.n	8004870 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2202      	movs	r2, #2
 8004842:	4013      	ands	r3, r2
 8004844:	2b02      	cmp	r3, #2
 8004846:	d013      	beq.n	8004870 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484c:	2220      	movs	r2, #32
 800484e:	431a      	orrs	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2241      	movs	r2, #65	@ 0x41
 8004858:	2120      	movs	r1, #32
 800485a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2242      	movs	r2, #66	@ 0x42
 8004860:	2100      	movs	r1, #0
 8004862:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2240      	movs	r2, #64	@ 0x40
 8004868:	2100      	movs	r1, #0
 800486a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e007      	b.n	8004880 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2202      	movs	r2, #2
 8004878:	4013      	ands	r3, r2
 800487a:	2b02      	cmp	r3, #2
 800487c:	d1c5      	bne.n	800480a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	0018      	movs	r0, r3
 8004882:	46bd      	mov	sp, r7
 8004884:	b004      	add	sp, #16
 8004886:	bd80      	pop	{r7, pc}

08004888 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004894:	e02f      	b.n	80048f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	68b9      	ldr	r1, [r7, #8]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	0018      	movs	r0, r3
 800489e:	f000 f8d5 	bl	8004a4c <I2C_IsErrorOccurred>
 80048a2:	1e03      	subs	r3, r0, #0
 80048a4:	d001      	beq.n	80048aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e02d      	b.n	8004906 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048aa:	f7fe fadd 	bl	8002e68 <HAL_GetTick>
 80048ae:	0002      	movs	r2, r0
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d302      	bcc.n	80048c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d11a      	bne.n	80048f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	2220      	movs	r2, #32
 80048c8:	4013      	ands	r3, r2
 80048ca:	2b20      	cmp	r3, #32
 80048cc:	d013      	beq.n	80048f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d2:	2220      	movs	r2, #32
 80048d4:	431a      	orrs	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2241      	movs	r2, #65	@ 0x41
 80048de:	2120      	movs	r1, #32
 80048e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2242      	movs	r2, #66	@ 0x42
 80048e6:	2100      	movs	r1, #0
 80048e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2240      	movs	r2, #64	@ 0x40
 80048ee:	2100      	movs	r1, #0
 80048f0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e007      	b.n	8004906 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	699b      	ldr	r3, [r3, #24]
 80048fc:	2220      	movs	r2, #32
 80048fe:	4013      	ands	r3, r2
 8004900:	2b20      	cmp	r3, #32
 8004902:	d1c8      	bne.n	8004896 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	0018      	movs	r0, r3
 8004908:	46bd      	mov	sp, r7
 800490a:	b004      	add	sp, #16
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800491c:	2317      	movs	r3, #23
 800491e:	18fb      	adds	r3, r7, r3
 8004920:	2200      	movs	r2, #0
 8004922:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004924:	e07b      	b.n	8004a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	68b9      	ldr	r1, [r7, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	0018      	movs	r0, r3
 800492e:	f000 f88d 	bl	8004a4c <I2C_IsErrorOccurred>
 8004932:	1e03      	subs	r3, r0, #0
 8004934:	d003      	beq.n	800493e <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8004936:	2317      	movs	r3, #23
 8004938:	18fb      	adds	r3, r7, r3
 800493a:	2201      	movs	r2, #1
 800493c:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	2220      	movs	r2, #32
 8004946:	4013      	ands	r3, r2
 8004948:	2b20      	cmp	r3, #32
 800494a:	d140      	bne.n	80049ce <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 800494c:	2117      	movs	r1, #23
 800494e:	187b      	adds	r3, r7, r1
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d13b      	bne.n	80049ce <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	2204      	movs	r2, #4
 800495e:	4013      	ands	r3, r2
 8004960:	2b04      	cmp	r3, #4
 8004962:	d106      	bne.n	8004972 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800496c:	187b      	adds	r3, r7, r1
 800496e:	2200      	movs	r2, #0
 8004970:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	2210      	movs	r2, #16
 800497a:	4013      	ands	r3, r2
 800497c:	2b10      	cmp	r3, #16
 800497e:	d123      	bne.n	80049c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2210      	movs	r2, #16
 8004986:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2204      	movs	r2, #4
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2220      	movs	r2, #32
 8004994:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4929      	ldr	r1, [pc, #164]	@ (8004a48 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80049a2:	400a      	ands	r2, r1
 80049a4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2241      	movs	r2, #65	@ 0x41
 80049aa:	2120      	movs	r1, #32
 80049ac:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2242      	movs	r2, #66	@ 0x42
 80049b2:	2100      	movs	r1, #0
 80049b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2240      	movs	r2, #64	@ 0x40
 80049ba:	2100      	movs	r1, #0
 80049bc:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80049be:	2317      	movs	r3, #23
 80049c0:	18fb      	adds	r3, r7, r3
 80049c2:	2201      	movs	r2, #1
 80049c4:	701a      	strb	r2, [r3, #0]
 80049c6:	e002      	b.n	80049ce <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80049ce:	f7fe fa4b 	bl	8002e68 <HAL_GetTick>
 80049d2:	0002      	movs	r2, r0
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d302      	bcc.n	80049e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d11c      	bne.n	8004a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80049e4:	2017      	movs	r0, #23
 80049e6:	183b      	adds	r3, r7, r0
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d117      	bne.n	8004a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	2204      	movs	r2, #4
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d010      	beq.n	8004a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a00:	2220      	movs	r2, #32
 8004a02:	431a      	orrs	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2241      	movs	r2, #65	@ 0x41
 8004a0c:	2120      	movs	r1, #32
 8004a0e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2240      	movs	r2, #64	@ 0x40
 8004a14:	2100      	movs	r1, #0
 8004a16:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8004a18:	183b      	adds	r3, r7, r0
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	2204      	movs	r2, #4
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d005      	beq.n	8004a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004a2c:	2317      	movs	r3, #23
 8004a2e:	18fb      	adds	r3, r7, r3
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d100      	bne.n	8004a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8004a36:	e776      	b.n	8004926 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8004a38:	2317      	movs	r3, #23
 8004a3a:	18fb      	adds	r3, r7, r3
 8004a3c:	781b      	ldrb	r3, [r3, #0]
}
 8004a3e:	0018      	movs	r0, r3
 8004a40:	46bd      	mov	sp, r7
 8004a42:	b006      	add	sp, #24
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	46c0      	nop			@ (mov r8, r8)
 8004a48:	fe00e800 	.word	0xfe00e800

08004a4c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	@ 0x28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a58:	2327      	movs	r3, #39	@ 0x27
 8004a5a:	18fb      	adds	r3, r7, r3
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2210      	movs	r2, #16
 8004a74:	4013      	ands	r3, r2
 8004a76:	d100      	bne.n	8004a7a <I2C_IsErrorOccurred+0x2e>
 8004a78:	e079      	b.n	8004b6e <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	2210      	movs	r2, #16
 8004a80:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004a82:	e057      	b.n	8004b34 <I2C_IsErrorOccurred+0xe8>
 8004a84:	2227      	movs	r2, #39	@ 0x27
 8004a86:	18bb      	adds	r3, r7, r2
 8004a88:	18ba      	adds	r2, r7, r2
 8004a8a:	7812      	ldrb	r2, [r2, #0]
 8004a8c:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	3301      	adds	r3, #1
 8004a92:	d04f      	beq.n	8004b34 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a94:	f7fe f9e8 	bl	8002e68 <HAL_GetTick>
 8004a98:	0002      	movs	r2, r0
 8004a9a:	69fb      	ldr	r3, [r7, #28]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d302      	bcc.n	8004aaa <I2C_IsErrorOccurred+0x5e>
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d144      	bne.n	8004b34 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	2380      	movs	r3, #128	@ 0x80
 8004ab2:	01db      	lsls	r3, r3, #7
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ab8:	2013      	movs	r0, #19
 8004aba:	183b      	adds	r3, r7, r0
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	2142      	movs	r1, #66	@ 0x42
 8004ac0:	5c52      	ldrb	r2, [r2, r1]
 8004ac2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699a      	ldr	r2, [r3, #24]
 8004aca:	2380      	movs	r3, #128	@ 0x80
 8004acc:	021b      	lsls	r3, r3, #8
 8004ace:	401a      	ands	r2, r3
 8004ad0:	2380      	movs	r3, #128	@ 0x80
 8004ad2:	021b      	lsls	r3, r3, #8
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d126      	bne.n	8004b26 <I2C_IsErrorOccurred+0xda>
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	2380      	movs	r3, #128	@ 0x80
 8004adc:	01db      	lsls	r3, r3, #7
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d021      	beq.n	8004b26 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8004ae2:	183b      	adds	r3, r7, r0
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b20      	cmp	r3, #32
 8004ae8:	d01d      	beq.n	8004b26 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2180      	movs	r1, #128	@ 0x80
 8004af6:	01c9      	lsls	r1, r1, #7
 8004af8:	430a      	orrs	r2, r1
 8004afa:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004afc:	f7fe f9b4 	bl	8002e68 <HAL_GetTick>
 8004b00:	0003      	movs	r3, r0
 8004b02:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b04:	e00f      	b.n	8004b26 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b06:	f7fe f9af 	bl	8002e68 <HAL_GetTick>
 8004b0a:	0002      	movs	r2, r0
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b19      	cmp	r3, #25
 8004b12:	d908      	bls.n	8004b26 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004b14:	6a3b      	ldr	r3, [r7, #32]
 8004b16:	2220      	movs	r2, #32
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004b1c:	2327      	movs	r3, #39	@ 0x27
 8004b1e:	18fb      	adds	r3, r7, r3
 8004b20:	2201      	movs	r2, #1
 8004b22:	701a      	strb	r2, [r3, #0]

              break;
 8004b24:	e006      	b.n	8004b34 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b20      	cmp	r3, #32
 8004b32:	d1e8      	bne.n	8004b06 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d004      	beq.n	8004b4c <I2C_IsErrorOccurred+0x100>
 8004b42:	2327      	movs	r3, #39	@ 0x27
 8004b44:	18fb      	adds	r3, r7, r3
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d09b      	beq.n	8004a84 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b4c:	2327      	movs	r3, #39	@ 0x27
 8004b4e:	18fb      	adds	r3, r7, r3
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d103      	bne.n	8004b5e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	2204      	movs	r2, #4
 8004b62:	4313      	orrs	r3, r2
 8004b64:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004b66:	2327      	movs	r3, #39	@ 0x27
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	2380      	movs	r3, #128	@ 0x80
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	d00c      	beq.n	8004b9a <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	2201      	movs	r2, #1
 8004b84:	4313      	orrs	r3, r2
 8004b86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2280      	movs	r2, #128	@ 0x80
 8004b8e:	0052      	lsls	r2, r2, #1
 8004b90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004b92:	2327      	movs	r3, #39	@ 0x27
 8004b94:	18fb      	adds	r3, r7, r3
 8004b96:	2201      	movs	r2, #1
 8004b98:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	2380      	movs	r3, #128	@ 0x80
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d00c      	beq.n	8004bbe <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ba4:	6a3b      	ldr	r3, [r7, #32]
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2280      	movs	r2, #128	@ 0x80
 8004bb2:	00d2      	lsls	r2, r2, #3
 8004bb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bb6:	2327      	movs	r3, #39	@ 0x27
 8004bb8:	18fb      	adds	r3, r7, r3
 8004bba:	2201      	movs	r2, #1
 8004bbc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	2380      	movs	r3, #128	@ 0x80
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	d00c      	beq.n	8004be2 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2280      	movs	r2, #128	@ 0x80
 8004bd6:	0092      	lsls	r2, r2, #2
 8004bd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bda:	2327      	movs	r3, #39	@ 0x27
 8004bdc:	18fb      	adds	r3, r7, r3
 8004bde:	2201      	movs	r2, #1
 8004be0:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8004be2:	2327      	movs	r3, #39	@ 0x27
 8004be4:	18fb      	adds	r3, r7, r3
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d01d      	beq.n	8004c28 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	0018      	movs	r0, r3
 8004bf0:	f7ff fd8a 	bl	8004708 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	685a      	ldr	r2, [r3, #4]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	490e      	ldr	r1, [pc, #56]	@ (8004c38 <I2C_IsErrorOccurred+0x1ec>)
 8004c00:	400a      	ands	r2, r1
 8004c02:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	431a      	orrs	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2241      	movs	r2, #65	@ 0x41
 8004c14:	2120      	movs	r1, #32
 8004c16:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2242      	movs	r2, #66	@ 0x42
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2240      	movs	r2, #64	@ 0x40
 8004c24:	2100      	movs	r1, #0
 8004c26:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004c28:	2327      	movs	r3, #39	@ 0x27
 8004c2a:	18fb      	adds	r3, r7, r3
 8004c2c:	781b      	ldrb	r3, [r3, #0]
}
 8004c2e:	0018      	movs	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b00a      	add	sp, #40	@ 0x28
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	46c0      	nop			@ (mov r8, r8)
 8004c38:	fe00e800 	.word	0xfe00e800

08004c3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c3c:	b590      	push	{r4, r7, lr}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	0008      	movs	r0, r1
 8004c46:	0011      	movs	r1, r2
 8004c48:	607b      	str	r3, [r7, #4]
 8004c4a:	240a      	movs	r4, #10
 8004c4c:	193b      	adds	r3, r7, r4
 8004c4e:	1c02      	adds	r2, r0, #0
 8004c50:	801a      	strh	r2, [r3, #0]
 8004c52:	2009      	movs	r0, #9
 8004c54:	183b      	adds	r3, r7, r0
 8004c56:	1c0a      	adds	r2, r1, #0
 8004c58:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c5a:	193b      	adds	r3, r7, r4
 8004c5c:	881b      	ldrh	r3, [r3, #0]
 8004c5e:	059b      	lsls	r3, r3, #22
 8004c60:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c62:	183b      	adds	r3, r7, r0
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	0419      	lsls	r1, r3, #16
 8004c68:	23ff      	movs	r3, #255	@ 0xff
 8004c6a:	041b      	lsls	r3, r3, #16
 8004c6c:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c6e:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c76:	4313      	orrs	r3, r2
 8004c78:	005b      	lsls	r3, r3, #1
 8004c7a:	085b      	lsrs	r3, r3, #1
 8004c7c:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c86:	0d51      	lsrs	r1, r2, #21
 8004c88:	2280      	movs	r2, #128	@ 0x80
 8004c8a:	00d2      	lsls	r2, r2, #3
 8004c8c:	400a      	ands	r2, r1
 8004c8e:	4907      	ldr	r1, [pc, #28]	@ (8004cac <I2C_TransferConfig+0x70>)
 8004c90:	430a      	orrs	r2, r1
 8004c92:	43d2      	mvns	r2, r2
 8004c94:	401a      	ands	r2, r3
 8004c96:	0011      	movs	r1, r2
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004ca2:	46c0      	nop			@ (mov r8, r8)
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	b007      	add	sp, #28
 8004ca8:	bd90      	pop	{r4, r7, pc}
 8004caa:	46c0      	nop			@ (mov r8, r8)
 8004cac:	03ff63ff 	.word	0x03ff63ff

08004cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2241      	movs	r2, #65	@ 0x41
 8004cbe:	5c9b      	ldrb	r3, [r3, r2]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	d138      	bne.n	8004d38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2240      	movs	r2, #64	@ 0x40
 8004cca:	5c9b      	ldrb	r3, [r3, r2]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d101      	bne.n	8004cd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	e032      	b.n	8004d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2240      	movs	r2, #64	@ 0x40
 8004cd8:	2101      	movs	r1, #1
 8004cda:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2241      	movs	r2, #65	@ 0x41
 8004ce0:	2124      	movs	r1, #36	@ 0x24
 8004ce2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2101      	movs	r1, #1
 8004cf0:	438a      	bics	r2, r1
 8004cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4911      	ldr	r1, [pc, #68]	@ (8004d44 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004d00:	400a      	ands	r2, r1
 8004d02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6819      	ldr	r1, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	430a      	orrs	r2, r1
 8004d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	2101      	movs	r1, #1
 8004d20:	430a      	orrs	r2, r1
 8004d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2241      	movs	r2, #65	@ 0x41
 8004d28:	2120      	movs	r1, #32
 8004d2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2240      	movs	r2, #64	@ 0x40
 8004d30:	2100      	movs	r1, #0
 8004d32:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	e000      	b.n	8004d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d38:	2302      	movs	r3, #2
  }
}
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b002      	add	sp, #8
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	46c0      	nop			@ (mov r8, r8)
 8004d44:	ffffefff 	.word	0xffffefff

08004d48 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2241      	movs	r2, #65	@ 0x41
 8004d56:	5c9b      	ldrb	r3, [r3, r2]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d139      	bne.n	8004dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2240      	movs	r2, #64	@ 0x40
 8004d62:	5c9b      	ldrb	r3, [r3, r2]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d68:	2302      	movs	r3, #2
 8004d6a:	e033      	b.n	8004dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2240      	movs	r2, #64	@ 0x40
 8004d70:	2101      	movs	r1, #1
 8004d72:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2241      	movs	r2, #65	@ 0x41
 8004d78:	2124      	movs	r1, #36	@ 0x24
 8004d7a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2101      	movs	r1, #1
 8004d88:	438a      	bics	r2, r1
 8004d8a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a11      	ldr	r2, [pc, #68]	@ (8004ddc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2101      	movs	r1, #1
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2241      	movs	r2, #65	@ 0x41
 8004dc2:	2120      	movs	r1, #32
 8004dc4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2240      	movs	r2, #64	@ 0x40
 8004dca:	2100      	movs	r1, #0
 8004dcc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
  }
}
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	b004      	add	sp, #16
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	fffff0ff 	.word	0xfffff0ff

08004de0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	000a      	movs	r2, r1
 8004dea:	1cfb      	adds	r3, r7, #3
 8004dec:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8004dee:	2300      	movs	r3, #0
 8004df0:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004df2:	4b25      	ldr	r3, [pc, #148]	@ (8004e88 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	2380      	movs	r3, #128	@ 0x80
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8004dfe:	4b23      	ldr	r3, [pc, #140]	@ (8004e8c <HAL_PWR_EnterSTOPMode+0xac>)
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	2201      	movs	r2, #1
 8004e04:	4013      	ands	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d008      	beq.n	8004e20 <HAL_PWR_EnterSTOPMode+0x40>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d005      	beq.n	8004e20 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004e14:	4b1c      	ldr	r3, [pc, #112]	@ (8004e88 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	4b1b      	ldr	r3, [pc, #108]	@ (8004e88 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004e1a:	491d      	ldr	r1, [pc, #116]	@ (8004e90 <HAL_PWR_EnterSTOPMode+0xb0>)
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004e20:	4b19      	ldr	r3, [pc, #100]	@ (8004e88 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	2203      	movs	r2, #3
 8004e2a:	4393      	bics	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8004e36:	4b14      	ldr	r3, [pc, #80]	@ (8004e88 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004e3c:	4b15      	ldr	r3, [pc, #84]	@ (8004e94 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004e3e:	691a      	ldr	r2, [r3, #16]
 8004e40:	4b14      	ldr	r3, [pc, #80]	@ (8004e94 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004e42:	2104      	movs	r1, #4
 8004e44:	430a      	orrs	r2, r1
 8004e46:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004e48:	1cfb      	adds	r3, r7, #3
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004e50:	bf30      	wfi
 8004e52:	e002      	b.n	8004e5a <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004e54:	bf40      	sev
    __WFE();
 8004e56:	bf20      	wfe
    __WFE();
 8004e58:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e94 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004e5c:	691a      	ldr	r2, [r3, #16]
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e94 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004e60:	2104      	movs	r1, #4
 8004e62:	438a      	bics	r2, r1
 8004e64:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d009      	beq.n	8004e80 <HAL_PWR_EnterSTOPMode+0xa0>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d006      	beq.n	8004e80 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8004e72:	4b05      	ldr	r3, [pc, #20]	@ (8004e88 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4b04      	ldr	r3, [pc, #16]	@ (8004e88 <HAL_PWR_EnterSTOPMode+0xa8>)
 8004e78:	2180      	movs	r1, #128	@ 0x80
 8004e7a:	0089      	lsls	r1, r1, #2
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	601a      	str	r2, [r3, #0]
  }
}
 8004e80:	46c0      	nop			@ (mov r8, r8)
 8004e82:	46bd      	mov	sp, r7
 8004e84:	b006      	add	sp, #24
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	40007000 	.word	0x40007000
 8004e8c:	40010000 	.word	0x40010000
 8004e90:	fffffdff 	.word	0xfffffdff
 8004e94:	e000ed00 	.word	0xe000ed00

08004e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e98:	b5b0      	push	{r4, r5, r7, lr}
 8004e9a:	b08a      	sub	sp, #40	@ 0x28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d102      	bne.n	8004eac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	f000 fbbf 	bl	800562a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eac:	4bc9      	ldr	r3, [pc, #804]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	220c      	movs	r2, #12
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eb6:	4bc7      	ldr	r3, [pc, #796]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004eb8:	68da      	ldr	r2, [r3, #12]
 8004eba:	2380      	movs	r3, #128	@ 0x80
 8004ebc:	025b      	lsls	r3, r3, #9
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d100      	bne.n	8004ece <HAL_RCC_OscConfig+0x36>
 8004ecc:	e07e      	b.n	8004fcc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d007      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	2b0c      	cmp	r3, #12
 8004ed8:	d112      	bne.n	8004f00 <HAL_RCC_OscConfig+0x68>
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	2380      	movs	r3, #128	@ 0x80
 8004ede:	025b      	lsls	r3, r3, #9
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d10d      	bne.n	8004f00 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee4:	4bbb      	ldr	r3, [pc, #748]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	2380      	movs	r3, #128	@ 0x80
 8004eea:	029b      	lsls	r3, r3, #10
 8004eec:	4013      	ands	r3, r2
 8004eee:	d100      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x5a>
 8004ef0:	e06b      	b.n	8004fca <HAL_RCC_OscConfig+0x132>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d167      	bne.n	8004fca <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f000 fb95 	bl	800562a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	2380      	movs	r3, #128	@ 0x80
 8004f06:	025b      	lsls	r3, r3, #9
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d107      	bne.n	8004f1c <HAL_RCC_OscConfig+0x84>
 8004f0c:	4bb1      	ldr	r3, [pc, #708]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4bb0      	ldr	r3, [pc, #704]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004f12:	2180      	movs	r1, #128	@ 0x80
 8004f14:	0249      	lsls	r1, r1, #9
 8004f16:	430a      	orrs	r2, r1
 8004f18:	601a      	str	r2, [r3, #0]
 8004f1a:	e027      	b.n	8004f6c <HAL_RCC_OscConfig+0xd4>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	23a0      	movs	r3, #160	@ 0xa0
 8004f22:	02db      	lsls	r3, r3, #11
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d10e      	bne.n	8004f46 <HAL_RCC_OscConfig+0xae>
 8004f28:	4baa      	ldr	r3, [pc, #680]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	4ba9      	ldr	r3, [pc, #676]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004f2e:	2180      	movs	r1, #128	@ 0x80
 8004f30:	02c9      	lsls	r1, r1, #11
 8004f32:	430a      	orrs	r2, r1
 8004f34:	601a      	str	r2, [r3, #0]
 8004f36:	4ba7      	ldr	r3, [pc, #668]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4ba6      	ldr	r3, [pc, #664]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004f3c:	2180      	movs	r1, #128	@ 0x80
 8004f3e:	0249      	lsls	r1, r1, #9
 8004f40:	430a      	orrs	r2, r1
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	e012      	b.n	8004f6c <HAL_RCC_OscConfig+0xd4>
 8004f46:	4ba3      	ldr	r3, [pc, #652]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4ba2      	ldr	r3, [pc, #648]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004f4c:	49a2      	ldr	r1, [pc, #648]	@ (80051d8 <HAL_RCC_OscConfig+0x340>)
 8004f4e:	400a      	ands	r2, r1
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	4ba0      	ldr	r3, [pc, #640]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	2380      	movs	r3, #128	@ 0x80
 8004f58:	025b      	lsls	r3, r3, #9
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4b9c      	ldr	r3, [pc, #624]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	4b9b      	ldr	r3, [pc, #620]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004f66:	499d      	ldr	r1, [pc, #628]	@ (80051dc <HAL_RCC_OscConfig+0x344>)
 8004f68:	400a      	ands	r2, r1
 8004f6a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d015      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f74:	f7fd ff78 	bl	8002e68 <HAL_GetTick>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f7c:	e009      	b.n	8004f92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f7e:	f7fd ff73 	bl	8002e68 <HAL_GetTick>
 8004f82:	0002      	movs	r2, r0
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b64      	cmp	r3, #100	@ 0x64
 8004f8a:	d902      	bls.n	8004f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	f000 fb4c 	bl	800562a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f92:	4b90      	ldr	r3, [pc, #576]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	2380      	movs	r3, #128	@ 0x80
 8004f98:	029b      	lsls	r3, r3, #10
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d0ef      	beq.n	8004f7e <HAL_RCC_OscConfig+0xe6>
 8004f9e:	e015      	b.n	8004fcc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa0:	f7fd ff62 	bl	8002e68 <HAL_GetTick>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004faa:	f7fd ff5d 	bl	8002e68 <HAL_GetTick>
 8004fae:	0002      	movs	r2, r0
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b64      	cmp	r3, #100	@ 0x64
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e336      	b.n	800562a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004fbc:	4b85      	ldr	r3, [pc, #532]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	2380      	movs	r3, #128	@ 0x80
 8004fc2:	029b      	lsls	r3, r3, #10
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	d1f0      	bne.n	8004faa <HAL_RCC_OscConfig+0x112>
 8004fc8:	e000      	b.n	8004fcc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fca:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d100      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x140>
 8004fd6:	e099      	b.n	800510c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d009      	beq.n	8004ffa <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004fe6:	4b7b      	ldr	r3, [pc, #492]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	4b7a      	ldr	r3, [pc, #488]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8004fec:	2120      	movs	r1, #32
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	2220      	movs	r2, #32
 8004ff6:	4393      	bics	r3, r2
 8004ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d005      	beq.n	800500c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2b0c      	cmp	r3, #12
 8005004:	d13e      	bne.n	8005084 <HAL_RCC_OscConfig+0x1ec>
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d13b      	bne.n	8005084 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800500c:	4b71      	ldr	r3, [pc, #452]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2204      	movs	r2, #4
 8005012:	4013      	ands	r3, r2
 8005014:	d004      	beq.n	8005020 <HAL_RCC_OscConfig+0x188>
 8005016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e304      	b.n	800562a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005020:	4b6c      	ldr	r3, [pc, #432]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	4a6e      	ldr	r2, [pc, #440]	@ (80051e0 <HAL_RCC_OscConfig+0x348>)
 8005026:	4013      	ands	r3, r2
 8005028:	0019      	movs	r1, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	021a      	lsls	r2, r3, #8
 8005030:	4b68      	ldr	r3, [pc, #416]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005036:	4b67      	ldr	r3, [pc, #412]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2209      	movs	r2, #9
 800503c:	4393      	bics	r3, r2
 800503e:	0019      	movs	r1, r3
 8005040:	4b64      	ldr	r3, [pc, #400]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8005042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005048:	f000 fc42 	bl	80058d0 <HAL_RCC_GetSysClockFreq>
 800504c:	0001      	movs	r1, r0
 800504e:	4b61      	ldr	r3, [pc, #388]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	091b      	lsrs	r3, r3, #4
 8005054:	220f      	movs	r2, #15
 8005056:	4013      	ands	r3, r2
 8005058:	4a62      	ldr	r2, [pc, #392]	@ (80051e4 <HAL_RCC_OscConfig+0x34c>)
 800505a:	5cd3      	ldrb	r3, [r2, r3]
 800505c:	000a      	movs	r2, r1
 800505e:	40da      	lsrs	r2, r3
 8005060:	4b61      	ldr	r3, [pc, #388]	@ (80051e8 <HAL_RCC_OscConfig+0x350>)
 8005062:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005064:	4b61      	ldr	r3, [pc, #388]	@ (80051ec <HAL_RCC_OscConfig+0x354>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2513      	movs	r5, #19
 800506a:	197c      	adds	r4, r7, r5
 800506c:	0018      	movs	r0, r3
 800506e:	f7fd feb5 	bl	8002ddc <HAL_InitTick>
 8005072:	0003      	movs	r3, r0
 8005074:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005076:	197b      	adds	r3, r7, r5
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d046      	beq.n	800510c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800507e:	197b      	adds	r3, r7, r5
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	e2d2      	b.n	800562a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005086:	2b00      	cmp	r3, #0
 8005088:	d027      	beq.n	80050da <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800508a:	4b52      	ldr	r3, [pc, #328]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2209      	movs	r2, #9
 8005090:	4393      	bics	r3, r2
 8005092:	0019      	movs	r1, r3
 8005094:	4b4f      	ldr	r3, [pc, #316]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8005096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005098:	430a      	orrs	r2, r1
 800509a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509c:	f7fd fee4 	bl	8002e68 <HAL_GetTick>
 80050a0:	0003      	movs	r3, r0
 80050a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050a6:	f7fd fedf 	bl	8002e68 <HAL_GetTick>
 80050aa:	0002      	movs	r2, r0
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e2b8      	b.n	800562a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050b8:	4b46      	ldr	r3, [pc, #280]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2204      	movs	r2, #4
 80050be:	4013      	ands	r3, r2
 80050c0:	d0f1      	beq.n	80050a6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c2:	4b44      	ldr	r3, [pc, #272]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4a46      	ldr	r2, [pc, #280]	@ (80051e0 <HAL_RCC_OscConfig+0x348>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	0019      	movs	r1, r3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	021a      	lsls	r2, r3, #8
 80050d2:	4b40      	ldr	r3, [pc, #256]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
 80050d8:	e018      	b.n	800510c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050da:	4b3e      	ldr	r3, [pc, #248]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4b3d      	ldr	r3, [pc, #244]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 80050e0:	2101      	movs	r1, #1
 80050e2:	438a      	bics	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e6:	f7fd febf 	bl	8002e68 <HAL_GetTick>
 80050ea:	0003      	movs	r3, r0
 80050ec:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80050ee:	e008      	b.n	8005102 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050f0:	f7fd feba 	bl	8002e68 <HAL_GetTick>
 80050f4:	0002      	movs	r2, r0
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e293      	b.n	800562a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005102:	4b34      	ldr	r3, [pc, #208]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2204      	movs	r2, #4
 8005108:	4013      	ands	r3, r2
 800510a:	d1f1      	bne.n	80050f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2210      	movs	r2, #16
 8005112:	4013      	ands	r3, r2
 8005114:	d100      	bne.n	8005118 <HAL_RCC_OscConfig+0x280>
 8005116:	e0a2      	b.n	800525e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d140      	bne.n	80051a0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800511e:	4b2d      	ldr	r3, [pc, #180]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	2380      	movs	r3, #128	@ 0x80
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	4013      	ands	r3, r2
 8005128:	d005      	beq.n	8005136 <HAL_RCC_OscConfig+0x29e>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e279      	b.n	800562a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005136:	4b27      	ldr	r3, [pc, #156]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4a2d      	ldr	r2, [pc, #180]	@ (80051f0 <HAL_RCC_OscConfig+0x358>)
 800513c:	4013      	ands	r3, r2
 800513e:	0019      	movs	r1, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005144:	4b23      	ldr	r3, [pc, #140]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 8005146:	430a      	orrs	r2, r1
 8005148:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800514a:	4b22      	ldr	r3, [pc, #136]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	0a19      	lsrs	r1, r3, #8
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	061a      	lsls	r2, r3, #24
 8005158:	4b1e      	ldr	r3, [pc, #120]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 800515a:	430a      	orrs	r2, r1
 800515c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005162:	0b5b      	lsrs	r3, r3, #13
 8005164:	3301      	adds	r3, #1
 8005166:	2280      	movs	r2, #128	@ 0x80
 8005168:	0212      	lsls	r2, r2, #8
 800516a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800516c:	4b19      	ldr	r3, [pc, #100]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	091b      	lsrs	r3, r3, #4
 8005172:	210f      	movs	r1, #15
 8005174:	400b      	ands	r3, r1
 8005176:	491b      	ldr	r1, [pc, #108]	@ (80051e4 <HAL_RCC_OscConfig+0x34c>)
 8005178:	5ccb      	ldrb	r3, [r1, r3]
 800517a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800517c:	4b1a      	ldr	r3, [pc, #104]	@ (80051e8 <HAL_RCC_OscConfig+0x350>)
 800517e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005180:	4b1a      	ldr	r3, [pc, #104]	@ (80051ec <HAL_RCC_OscConfig+0x354>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2513      	movs	r5, #19
 8005186:	197c      	adds	r4, r7, r5
 8005188:	0018      	movs	r0, r3
 800518a:	f7fd fe27 	bl	8002ddc <HAL_InitTick>
 800518e:	0003      	movs	r3, r0
 8005190:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005192:	197b      	adds	r3, r7, r5
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d061      	beq.n	800525e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800519a:	197b      	adds	r3, r7, r5
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	e244      	b.n	800562a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69db      	ldr	r3, [r3, #28]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d040      	beq.n	800522a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80051a8:	4b0a      	ldr	r3, [pc, #40]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	4b09      	ldr	r3, [pc, #36]	@ (80051d4 <HAL_RCC_OscConfig+0x33c>)
 80051ae:	2180      	movs	r1, #128	@ 0x80
 80051b0:	0049      	lsls	r1, r1, #1
 80051b2:	430a      	orrs	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b6:	f7fd fe57 	bl	8002e68 <HAL_GetTick>
 80051ba:	0003      	movs	r3, r0
 80051bc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80051be:	e019      	b.n	80051f4 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051c0:	f7fd fe52 	bl	8002e68 <HAL_GetTick>
 80051c4:	0002      	movs	r2, r0
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d912      	bls.n	80051f4 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e22b      	b.n	800562a <HAL_RCC_OscConfig+0x792>
 80051d2:	46c0      	nop			@ (mov r8, r8)
 80051d4:	40021000 	.word	0x40021000
 80051d8:	fffeffff 	.word	0xfffeffff
 80051dc:	fffbffff 	.word	0xfffbffff
 80051e0:	ffffe0ff 	.word	0xffffe0ff
 80051e4:	08008090 	.word	0x08008090
 80051e8:	20000000 	.word	0x20000000
 80051ec:	20000004 	.word	0x20000004
 80051f0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80051f4:	4bca      	ldr	r3, [pc, #808]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	2380      	movs	r3, #128	@ 0x80
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	4013      	ands	r3, r2
 80051fe:	d0df      	beq.n	80051c0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005200:	4bc7      	ldr	r3, [pc, #796]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4ac7      	ldr	r2, [pc, #796]	@ (8005524 <HAL_RCC_OscConfig+0x68c>)
 8005206:	4013      	ands	r3, r2
 8005208:	0019      	movs	r1, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800520e:	4bc4      	ldr	r3, [pc, #784]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005210:	430a      	orrs	r2, r1
 8005212:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005214:	4bc2      	ldr	r3, [pc, #776]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	0a19      	lsrs	r1, r3, #8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	061a      	lsls	r2, r3, #24
 8005222:	4bbf      	ldr	r3, [pc, #764]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005224:	430a      	orrs	r2, r1
 8005226:	605a      	str	r2, [r3, #4]
 8005228:	e019      	b.n	800525e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800522a:	4bbd      	ldr	r3, [pc, #756]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4bbc      	ldr	r3, [pc, #752]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005230:	49bd      	ldr	r1, [pc, #756]	@ (8005528 <HAL_RCC_OscConfig+0x690>)
 8005232:	400a      	ands	r2, r1
 8005234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005236:	f7fd fe17 	bl	8002e68 <HAL_GetTick>
 800523a:	0003      	movs	r3, r0
 800523c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005240:	f7fd fe12 	bl	8002e68 <HAL_GetTick>
 8005244:	0002      	movs	r2, r0
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e1eb      	b.n	800562a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005252:	4bb3      	ldr	r3, [pc, #716]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	2380      	movs	r3, #128	@ 0x80
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4013      	ands	r3, r2
 800525c:	d1f0      	bne.n	8005240 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2208      	movs	r2, #8
 8005264:	4013      	ands	r3, r2
 8005266:	d036      	beq.n	80052d6 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d019      	beq.n	80052a4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005270:	4bab      	ldr	r3, [pc, #684]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005272:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005274:	4baa      	ldr	r3, [pc, #680]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005276:	2101      	movs	r1, #1
 8005278:	430a      	orrs	r2, r1
 800527a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800527c:	f7fd fdf4 	bl	8002e68 <HAL_GetTick>
 8005280:	0003      	movs	r3, r0
 8005282:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005286:	f7fd fdef 	bl	8002e68 <HAL_GetTick>
 800528a:	0002      	movs	r2, r0
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e1c8      	b.n	800562a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005298:	4ba1      	ldr	r3, [pc, #644]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 800529a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800529c:	2202      	movs	r2, #2
 800529e:	4013      	ands	r3, r2
 80052a0:	d0f1      	beq.n	8005286 <HAL_RCC_OscConfig+0x3ee>
 80052a2:	e018      	b.n	80052d6 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052a4:	4b9e      	ldr	r3, [pc, #632]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80052a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052a8:	4b9d      	ldr	r3, [pc, #628]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80052aa:	2101      	movs	r1, #1
 80052ac:	438a      	bics	r2, r1
 80052ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052b0:	f7fd fdda 	bl	8002e68 <HAL_GetTick>
 80052b4:	0003      	movs	r3, r0
 80052b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052ba:	f7fd fdd5 	bl	8002e68 <HAL_GetTick>
 80052be:	0002      	movs	r2, r0
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e1ae      	b.n	800562a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80052cc:	4b94      	ldr	r3, [pc, #592]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80052ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052d0:	2202      	movs	r2, #2
 80052d2:	4013      	ands	r3, r2
 80052d4:	d1f1      	bne.n	80052ba <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2204      	movs	r2, #4
 80052dc:	4013      	ands	r3, r2
 80052de:	d100      	bne.n	80052e2 <HAL_RCC_OscConfig+0x44a>
 80052e0:	e0ae      	b.n	8005440 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052e2:	2023      	movs	r0, #35	@ 0x23
 80052e4:	183b      	adds	r3, r7, r0
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ea:	4b8d      	ldr	r3, [pc, #564]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80052ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052ee:	2380      	movs	r3, #128	@ 0x80
 80052f0:	055b      	lsls	r3, r3, #21
 80052f2:	4013      	ands	r3, r2
 80052f4:	d109      	bne.n	800530a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f6:	4b8a      	ldr	r3, [pc, #552]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80052f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052fa:	4b89      	ldr	r3, [pc, #548]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80052fc:	2180      	movs	r1, #128	@ 0x80
 80052fe:	0549      	lsls	r1, r1, #21
 8005300:	430a      	orrs	r2, r1
 8005302:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005304:	183b      	adds	r3, r7, r0
 8005306:	2201      	movs	r2, #1
 8005308:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800530a:	4b88      	ldr	r3, [pc, #544]	@ (800552c <HAL_RCC_OscConfig+0x694>)
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	2380      	movs	r3, #128	@ 0x80
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	4013      	ands	r3, r2
 8005314:	d11a      	bne.n	800534c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005316:	4b85      	ldr	r3, [pc, #532]	@ (800552c <HAL_RCC_OscConfig+0x694>)
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4b84      	ldr	r3, [pc, #528]	@ (800552c <HAL_RCC_OscConfig+0x694>)
 800531c:	2180      	movs	r1, #128	@ 0x80
 800531e:	0049      	lsls	r1, r1, #1
 8005320:	430a      	orrs	r2, r1
 8005322:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005324:	f7fd fda0 	bl	8002e68 <HAL_GetTick>
 8005328:	0003      	movs	r3, r0
 800532a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800532e:	f7fd fd9b 	bl	8002e68 <HAL_GetTick>
 8005332:	0002      	movs	r2, r0
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b64      	cmp	r3, #100	@ 0x64
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e174      	b.n	800562a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005340:	4b7a      	ldr	r3, [pc, #488]	@ (800552c <HAL_RCC_OscConfig+0x694>)
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	2380      	movs	r3, #128	@ 0x80
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4013      	ands	r3, r2
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	2380      	movs	r3, #128	@ 0x80
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	429a      	cmp	r2, r3
 8005356:	d107      	bne.n	8005368 <HAL_RCC_OscConfig+0x4d0>
 8005358:	4b71      	ldr	r3, [pc, #452]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 800535a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800535c:	4b70      	ldr	r3, [pc, #448]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 800535e:	2180      	movs	r1, #128	@ 0x80
 8005360:	0049      	lsls	r1, r1, #1
 8005362:	430a      	orrs	r2, r1
 8005364:	651a      	str	r2, [r3, #80]	@ 0x50
 8005366:	e031      	b.n	80053cc <HAL_RCC_OscConfig+0x534>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d10c      	bne.n	800538a <HAL_RCC_OscConfig+0x4f2>
 8005370:	4b6b      	ldr	r3, [pc, #428]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005372:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005374:	4b6a      	ldr	r3, [pc, #424]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005376:	496c      	ldr	r1, [pc, #432]	@ (8005528 <HAL_RCC_OscConfig+0x690>)
 8005378:	400a      	ands	r2, r1
 800537a:	651a      	str	r2, [r3, #80]	@ 0x50
 800537c:	4b68      	ldr	r3, [pc, #416]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 800537e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005380:	4b67      	ldr	r3, [pc, #412]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005382:	496b      	ldr	r1, [pc, #428]	@ (8005530 <HAL_RCC_OscConfig+0x698>)
 8005384:	400a      	ands	r2, r1
 8005386:	651a      	str	r2, [r3, #80]	@ 0x50
 8005388:	e020      	b.n	80053cc <HAL_RCC_OscConfig+0x534>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689a      	ldr	r2, [r3, #8]
 800538e:	23a0      	movs	r3, #160	@ 0xa0
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	429a      	cmp	r2, r3
 8005394:	d10e      	bne.n	80053b4 <HAL_RCC_OscConfig+0x51c>
 8005396:	4b62      	ldr	r3, [pc, #392]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005398:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800539a:	4b61      	ldr	r3, [pc, #388]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 800539c:	2180      	movs	r1, #128	@ 0x80
 800539e:	00c9      	lsls	r1, r1, #3
 80053a0:	430a      	orrs	r2, r1
 80053a2:	651a      	str	r2, [r3, #80]	@ 0x50
 80053a4:	4b5e      	ldr	r3, [pc, #376]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80053a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053a8:	4b5d      	ldr	r3, [pc, #372]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80053aa:	2180      	movs	r1, #128	@ 0x80
 80053ac:	0049      	lsls	r1, r1, #1
 80053ae:	430a      	orrs	r2, r1
 80053b0:	651a      	str	r2, [r3, #80]	@ 0x50
 80053b2:	e00b      	b.n	80053cc <HAL_RCC_OscConfig+0x534>
 80053b4:	4b5a      	ldr	r3, [pc, #360]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80053b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053b8:	4b59      	ldr	r3, [pc, #356]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80053ba:	495b      	ldr	r1, [pc, #364]	@ (8005528 <HAL_RCC_OscConfig+0x690>)
 80053bc:	400a      	ands	r2, r1
 80053be:	651a      	str	r2, [r3, #80]	@ 0x50
 80053c0:	4b57      	ldr	r3, [pc, #348]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80053c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053c4:	4b56      	ldr	r3, [pc, #344]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80053c6:	495a      	ldr	r1, [pc, #360]	@ (8005530 <HAL_RCC_OscConfig+0x698>)
 80053c8:	400a      	ands	r2, r1
 80053ca:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d015      	beq.n	8005400 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d4:	f7fd fd48 	bl	8002e68 <HAL_GetTick>
 80053d8:	0003      	movs	r3, r0
 80053da:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053dc:	e009      	b.n	80053f2 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053de:	f7fd fd43 	bl	8002e68 <HAL_GetTick>
 80053e2:	0002      	movs	r2, r0
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	4a52      	ldr	r2, [pc, #328]	@ (8005534 <HAL_RCC_OscConfig+0x69c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d901      	bls.n	80053f2 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80053ee:	2303      	movs	r3, #3
 80053f0:	e11b      	b.n	800562a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053f2:	4b4b      	ldr	r3, [pc, #300]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80053f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80053f6:	2380      	movs	r3, #128	@ 0x80
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4013      	ands	r3, r2
 80053fc:	d0ef      	beq.n	80053de <HAL_RCC_OscConfig+0x546>
 80053fe:	e014      	b.n	800542a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005400:	f7fd fd32 	bl	8002e68 <HAL_GetTick>
 8005404:	0003      	movs	r3, r0
 8005406:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005408:	e009      	b.n	800541e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800540a:	f7fd fd2d 	bl	8002e68 <HAL_GetTick>
 800540e:	0002      	movs	r2, r0
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	4a47      	ldr	r2, [pc, #284]	@ (8005534 <HAL_RCC_OscConfig+0x69c>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e105      	b.n	800562a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800541e:	4b40      	ldr	r3, [pc, #256]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005420:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005422:	2380      	movs	r3, #128	@ 0x80
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	4013      	ands	r3, r2
 8005428:	d1ef      	bne.n	800540a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800542a:	2323      	movs	r3, #35	@ 0x23
 800542c:	18fb      	adds	r3, r7, r3
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d105      	bne.n	8005440 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005434:	4b3a      	ldr	r3, [pc, #232]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005438:	4b39      	ldr	r3, [pc, #228]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 800543a:	493f      	ldr	r1, [pc, #252]	@ (8005538 <HAL_RCC_OscConfig+0x6a0>)
 800543c:	400a      	ands	r2, r1
 800543e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2220      	movs	r2, #32
 8005446:	4013      	ands	r3, r2
 8005448:	d049      	beq.n	80054de <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d026      	beq.n	80054a0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005452:	4b33      	ldr	r3, [pc, #204]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	4b32      	ldr	r3, [pc, #200]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005458:	2101      	movs	r1, #1
 800545a:	430a      	orrs	r2, r1
 800545c:	609a      	str	r2, [r3, #8]
 800545e:	4b30      	ldr	r3, [pc, #192]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005462:	4b2f      	ldr	r3, [pc, #188]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005464:	2101      	movs	r1, #1
 8005466:	430a      	orrs	r2, r1
 8005468:	635a      	str	r2, [r3, #52]	@ 0x34
 800546a:	4b34      	ldr	r3, [pc, #208]	@ (800553c <HAL_RCC_OscConfig+0x6a4>)
 800546c:	6a1a      	ldr	r2, [r3, #32]
 800546e:	4b33      	ldr	r3, [pc, #204]	@ (800553c <HAL_RCC_OscConfig+0x6a4>)
 8005470:	2180      	movs	r1, #128	@ 0x80
 8005472:	0189      	lsls	r1, r1, #6
 8005474:	430a      	orrs	r2, r1
 8005476:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005478:	f7fd fcf6 	bl	8002e68 <HAL_GetTick>
 800547c:	0003      	movs	r3, r0
 800547e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005482:	f7fd fcf1 	bl	8002e68 <HAL_GetTick>
 8005486:	0002      	movs	r2, r0
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e0ca      	b.n	800562a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005494:	4b22      	ldr	r3, [pc, #136]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	2202      	movs	r2, #2
 800549a:	4013      	ands	r3, r2
 800549c:	d0f1      	beq.n	8005482 <HAL_RCC_OscConfig+0x5ea>
 800549e:	e01e      	b.n	80054de <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80054a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	4b1e      	ldr	r3, [pc, #120]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80054a6:	2101      	movs	r1, #1
 80054a8:	438a      	bics	r2, r1
 80054aa:	609a      	str	r2, [r3, #8]
 80054ac:	4b23      	ldr	r3, [pc, #140]	@ (800553c <HAL_RCC_OscConfig+0x6a4>)
 80054ae:	6a1a      	ldr	r2, [r3, #32]
 80054b0:	4b22      	ldr	r3, [pc, #136]	@ (800553c <HAL_RCC_OscConfig+0x6a4>)
 80054b2:	4923      	ldr	r1, [pc, #140]	@ (8005540 <HAL_RCC_OscConfig+0x6a8>)
 80054b4:	400a      	ands	r2, r1
 80054b6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054b8:	f7fd fcd6 	bl	8002e68 <HAL_GetTick>
 80054bc:	0003      	movs	r3, r0
 80054be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054c2:	f7fd fcd1 	bl	8002e68 <HAL_GetTick>
 80054c6:	0002      	movs	r2, r0
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e0aa      	b.n	800562a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80054d4:	4b12      	ldr	r3, [pc, #72]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2202      	movs	r2, #2
 80054da:	4013      	ands	r3, r2
 80054dc:	d1f1      	bne.n	80054c2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d100      	bne.n	80054e8 <HAL_RCC_OscConfig+0x650>
 80054e6:	e09f      	b.n	8005628 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	2b0c      	cmp	r3, #12
 80054ec:	d100      	bne.n	80054f0 <HAL_RCC_OscConfig+0x658>
 80054ee:	e078      	b.n	80055e2 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d159      	bne.n	80055ac <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f8:	4b09      	ldr	r3, [pc, #36]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	4b08      	ldr	r3, [pc, #32]	@ (8005520 <HAL_RCC_OscConfig+0x688>)
 80054fe:	4911      	ldr	r1, [pc, #68]	@ (8005544 <HAL_RCC_OscConfig+0x6ac>)
 8005500:	400a      	ands	r2, r1
 8005502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005504:	f7fd fcb0 	bl	8002e68 <HAL_GetTick>
 8005508:	0003      	movs	r3, r0
 800550a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800550c:	e01c      	b.n	8005548 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800550e:	f7fd fcab 	bl	8002e68 <HAL_GetTick>
 8005512:	0002      	movs	r2, r0
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	2b02      	cmp	r3, #2
 800551a:	d915      	bls.n	8005548 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800551c:	2303      	movs	r3, #3
 800551e:	e084      	b.n	800562a <HAL_RCC_OscConfig+0x792>
 8005520:	40021000 	.word	0x40021000
 8005524:	ffff1fff 	.word	0xffff1fff
 8005528:	fffffeff 	.word	0xfffffeff
 800552c:	40007000 	.word	0x40007000
 8005530:	fffffbff 	.word	0xfffffbff
 8005534:	00001388 	.word	0x00001388
 8005538:	efffffff 	.word	0xefffffff
 800553c:	40010000 	.word	0x40010000
 8005540:	ffffdfff 	.word	0xffffdfff
 8005544:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005548:	4b3a      	ldr	r3, [pc, #232]	@ (8005634 <HAL_RCC_OscConfig+0x79c>)
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	2380      	movs	r3, #128	@ 0x80
 800554e:	049b      	lsls	r3, r3, #18
 8005550:	4013      	ands	r3, r2
 8005552:	d1dc      	bne.n	800550e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005554:	4b37      	ldr	r3, [pc, #220]	@ (8005634 <HAL_RCC_OscConfig+0x79c>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	4a37      	ldr	r2, [pc, #220]	@ (8005638 <HAL_RCC_OscConfig+0x7a0>)
 800555a:	4013      	ands	r3, r2
 800555c:	0019      	movs	r1, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005566:	431a      	orrs	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800556c:	431a      	orrs	r2, r3
 800556e:	4b31      	ldr	r3, [pc, #196]	@ (8005634 <HAL_RCC_OscConfig+0x79c>)
 8005570:	430a      	orrs	r2, r1
 8005572:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005574:	4b2f      	ldr	r3, [pc, #188]	@ (8005634 <HAL_RCC_OscConfig+0x79c>)
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	4b2e      	ldr	r3, [pc, #184]	@ (8005634 <HAL_RCC_OscConfig+0x79c>)
 800557a:	2180      	movs	r1, #128	@ 0x80
 800557c:	0449      	lsls	r1, r1, #17
 800557e:	430a      	orrs	r2, r1
 8005580:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005582:	f7fd fc71 	bl	8002e68 <HAL_GetTick>
 8005586:	0003      	movs	r3, r0
 8005588:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800558a:	e008      	b.n	800559e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800558c:	f7fd fc6c 	bl	8002e68 <HAL_GetTick>
 8005590:	0002      	movs	r2, r0
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d901      	bls.n	800559e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e045      	b.n	800562a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800559e:	4b25      	ldr	r3, [pc, #148]	@ (8005634 <HAL_RCC_OscConfig+0x79c>)
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	2380      	movs	r3, #128	@ 0x80
 80055a4:	049b      	lsls	r3, r3, #18
 80055a6:	4013      	ands	r3, r2
 80055a8:	d0f0      	beq.n	800558c <HAL_RCC_OscConfig+0x6f4>
 80055aa:	e03d      	b.n	8005628 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ac:	4b21      	ldr	r3, [pc, #132]	@ (8005634 <HAL_RCC_OscConfig+0x79c>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	4b20      	ldr	r3, [pc, #128]	@ (8005634 <HAL_RCC_OscConfig+0x79c>)
 80055b2:	4922      	ldr	r1, [pc, #136]	@ (800563c <HAL_RCC_OscConfig+0x7a4>)
 80055b4:	400a      	ands	r2, r1
 80055b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b8:	f7fd fc56 	bl	8002e68 <HAL_GetTick>
 80055bc:	0003      	movs	r3, r0
 80055be:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80055c0:	e008      	b.n	80055d4 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c2:	f7fd fc51 	bl	8002e68 <HAL_GetTick>
 80055c6:	0002      	movs	r2, r0
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d901      	bls.n	80055d4 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e02a      	b.n	800562a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80055d4:	4b17      	ldr	r3, [pc, #92]	@ (8005634 <HAL_RCC_OscConfig+0x79c>)
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	2380      	movs	r3, #128	@ 0x80
 80055da:	049b      	lsls	r3, r3, #18
 80055dc:	4013      	ands	r3, r2
 80055de:	d1f0      	bne.n	80055c2 <HAL_RCC_OscConfig+0x72a>
 80055e0:	e022      	b.n	8005628 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e01d      	b.n	800562a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80055ee:	4b11      	ldr	r3, [pc, #68]	@ (8005634 <HAL_RCC_OscConfig+0x79c>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	2380      	movs	r3, #128	@ 0x80
 80055f8:	025b      	lsls	r3, r3, #9
 80055fa:	401a      	ands	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005600:	429a      	cmp	r2, r3
 8005602:	d10f      	bne.n	8005624 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	23f0      	movs	r3, #240	@ 0xf0
 8005608:	039b      	lsls	r3, r3, #14
 800560a:	401a      	ands	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005610:	429a      	cmp	r2, r3
 8005612:	d107      	bne.n	8005624 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	23c0      	movs	r3, #192	@ 0xc0
 8005618:	041b      	lsls	r3, r3, #16
 800561a:	401a      	ands	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005620:	429a      	cmp	r2, r3
 8005622:	d001      	beq.n	8005628 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	e000      	b.n	800562a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	0018      	movs	r0, r3
 800562c:	46bd      	mov	sp, r7
 800562e:	b00a      	add	sp, #40	@ 0x28
 8005630:	bdb0      	pop	{r4, r5, r7, pc}
 8005632:	46c0      	nop			@ (mov r8, r8)
 8005634:	40021000 	.word	0x40021000
 8005638:	ff02ffff 	.word	0xff02ffff
 800563c:	feffffff 	.word	0xfeffffff

08005640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005640:	b5b0      	push	{r4, r5, r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e128      	b.n	80058a6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005654:	4b96      	ldr	r3, [pc, #600]	@ (80058b0 <HAL_RCC_ClockConfig+0x270>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2201      	movs	r2, #1
 800565a:	4013      	ands	r3, r2
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	429a      	cmp	r2, r3
 8005660:	d91e      	bls.n	80056a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005662:	4b93      	ldr	r3, [pc, #588]	@ (80058b0 <HAL_RCC_ClockConfig+0x270>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2201      	movs	r2, #1
 8005668:	4393      	bics	r3, r2
 800566a:	0019      	movs	r1, r3
 800566c:	4b90      	ldr	r3, [pc, #576]	@ (80058b0 <HAL_RCC_ClockConfig+0x270>)
 800566e:	683a      	ldr	r2, [r7, #0]
 8005670:	430a      	orrs	r2, r1
 8005672:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005674:	f7fd fbf8 	bl	8002e68 <HAL_GetTick>
 8005678:	0003      	movs	r3, r0
 800567a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800567c:	e009      	b.n	8005692 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800567e:	f7fd fbf3 	bl	8002e68 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	4a8a      	ldr	r2, [pc, #552]	@ (80058b4 <HAL_RCC_ClockConfig+0x274>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e109      	b.n	80058a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005692:	4b87      	ldr	r3, [pc, #540]	@ (80058b0 <HAL_RCC_ClockConfig+0x270>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2201      	movs	r2, #1
 8005698:	4013      	ands	r3, r2
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d1ee      	bne.n	800567e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2202      	movs	r2, #2
 80056a6:	4013      	ands	r3, r2
 80056a8:	d009      	beq.n	80056be <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056aa:	4b83      	ldr	r3, [pc, #524]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	22f0      	movs	r2, #240	@ 0xf0
 80056b0:	4393      	bics	r3, r2
 80056b2:	0019      	movs	r1, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	4b7f      	ldr	r3, [pc, #508]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 80056ba:	430a      	orrs	r2, r1
 80056bc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	2201      	movs	r2, #1
 80056c4:	4013      	ands	r3, r2
 80056c6:	d100      	bne.n	80056ca <HAL_RCC_ClockConfig+0x8a>
 80056c8:	e089      	b.n	80057de <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d107      	bne.n	80056e2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056d2:	4b79      	ldr	r3, [pc, #484]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	2380      	movs	r3, #128	@ 0x80
 80056d8:	029b      	lsls	r3, r3, #10
 80056da:	4013      	ands	r3, r2
 80056dc:	d120      	bne.n	8005720 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	e0e1      	b.n	80058a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d107      	bne.n	80056fa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80056ea:	4b73      	ldr	r3, [pc, #460]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	2380      	movs	r3, #128	@ 0x80
 80056f0:	049b      	lsls	r3, r3, #18
 80056f2:	4013      	ands	r3, r2
 80056f4:	d114      	bne.n	8005720 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e0d5      	b.n	80058a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d106      	bne.n	8005710 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005702:	4b6d      	ldr	r3, [pc, #436]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2204      	movs	r2, #4
 8005708:	4013      	ands	r3, r2
 800570a:	d109      	bne.n	8005720 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e0ca      	b.n	80058a6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005710:	4b69      	ldr	r3, [pc, #420]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	2380      	movs	r3, #128	@ 0x80
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4013      	ands	r3, r2
 800571a:	d101      	bne.n	8005720 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e0c2      	b.n	80058a6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005720:	4b65      	ldr	r3, [pc, #404]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	2203      	movs	r2, #3
 8005726:	4393      	bics	r3, r2
 8005728:	0019      	movs	r1, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	4b62      	ldr	r3, [pc, #392]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 8005730:	430a      	orrs	r2, r1
 8005732:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005734:	f7fd fb98 	bl	8002e68 <HAL_GetTick>
 8005738:	0003      	movs	r3, r0
 800573a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b02      	cmp	r3, #2
 8005742:	d111      	bne.n	8005768 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005744:	e009      	b.n	800575a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005746:	f7fd fb8f 	bl	8002e68 <HAL_GetTick>
 800574a:	0002      	movs	r2, r0
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	4a58      	ldr	r2, [pc, #352]	@ (80058b4 <HAL_RCC_ClockConfig+0x274>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d901      	bls.n	800575a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e0a5      	b.n	80058a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800575a:	4b57      	ldr	r3, [pc, #348]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	220c      	movs	r2, #12
 8005760:	4013      	ands	r3, r2
 8005762:	2b08      	cmp	r3, #8
 8005764:	d1ef      	bne.n	8005746 <HAL_RCC_ClockConfig+0x106>
 8005766:	e03a      	b.n	80057de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	2b03      	cmp	r3, #3
 800576e:	d111      	bne.n	8005794 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005770:	e009      	b.n	8005786 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005772:	f7fd fb79 	bl	8002e68 <HAL_GetTick>
 8005776:	0002      	movs	r2, r0
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	4a4d      	ldr	r2, [pc, #308]	@ (80058b4 <HAL_RCC_ClockConfig+0x274>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e08f      	b.n	80058a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005786:	4b4c      	ldr	r3, [pc, #304]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	220c      	movs	r2, #12
 800578c:	4013      	ands	r3, r2
 800578e:	2b0c      	cmp	r3, #12
 8005790:	d1ef      	bne.n	8005772 <HAL_RCC_ClockConfig+0x132>
 8005792:	e024      	b.n	80057de <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d11b      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800579c:	e009      	b.n	80057b2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800579e:	f7fd fb63 	bl	8002e68 <HAL_GetTick>
 80057a2:	0002      	movs	r2, r0
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	4a42      	ldr	r2, [pc, #264]	@ (80058b4 <HAL_RCC_ClockConfig+0x274>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e079      	b.n	80058a6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80057b2:	4b41      	ldr	r3, [pc, #260]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	220c      	movs	r2, #12
 80057b8:	4013      	ands	r3, r2
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	d1ef      	bne.n	800579e <HAL_RCC_ClockConfig+0x15e>
 80057be:	e00e      	b.n	80057de <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057c0:	f7fd fb52 	bl	8002e68 <HAL_GetTick>
 80057c4:	0002      	movs	r2, r0
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	4a3a      	ldr	r2, [pc, #232]	@ (80058b4 <HAL_RCC_ClockConfig+0x274>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e068      	b.n	80058a6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80057d4:	4b38      	ldr	r3, [pc, #224]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	220c      	movs	r2, #12
 80057da:	4013      	ands	r3, r2
 80057dc:	d1f0      	bne.n	80057c0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057de:	4b34      	ldr	r3, [pc, #208]	@ (80058b0 <HAL_RCC_ClockConfig+0x270>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2201      	movs	r2, #1
 80057e4:	4013      	ands	r3, r2
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d21e      	bcs.n	800582a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ec:	4b30      	ldr	r3, [pc, #192]	@ (80058b0 <HAL_RCC_ClockConfig+0x270>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2201      	movs	r2, #1
 80057f2:	4393      	bics	r3, r2
 80057f4:	0019      	movs	r1, r3
 80057f6:	4b2e      	ldr	r3, [pc, #184]	@ (80058b0 <HAL_RCC_ClockConfig+0x270>)
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	430a      	orrs	r2, r1
 80057fc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80057fe:	f7fd fb33 	bl	8002e68 <HAL_GetTick>
 8005802:	0003      	movs	r3, r0
 8005804:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005806:	e009      	b.n	800581c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005808:	f7fd fb2e 	bl	8002e68 <HAL_GetTick>
 800580c:	0002      	movs	r2, r0
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	4a28      	ldr	r2, [pc, #160]	@ (80058b4 <HAL_RCC_ClockConfig+0x274>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d901      	bls.n	800581c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e044      	b.n	80058a6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800581c:	4b24      	ldr	r3, [pc, #144]	@ (80058b0 <HAL_RCC_ClockConfig+0x270>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2201      	movs	r2, #1
 8005822:	4013      	ands	r3, r2
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d1ee      	bne.n	8005808 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2204      	movs	r2, #4
 8005830:	4013      	ands	r3, r2
 8005832:	d009      	beq.n	8005848 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005834:	4b20      	ldr	r3, [pc, #128]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	4a20      	ldr	r2, [pc, #128]	@ (80058bc <HAL_RCC_ClockConfig+0x27c>)
 800583a:	4013      	ands	r3, r2
 800583c:	0019      	movs	r1, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	4b1d      	ldr	r3, [pc, #116]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 8005844:	430a      	orrs	r2, r1
 8005846:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2208      	movs	r2, #8
 800584e:	4013      	ands	r3, r2
 8005850:	d00a      	beq.n	8005868 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005852:	4b19      	ldr	r3, [pc, #100]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	4a1a      	ldr	r2, [pc, #104]	@ (80058c0 <HAL_RCC_ClockConfig+0x280>)
 8005858:	4013      	ands	r3, r2
 800585a:	0019      	movs	r1, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	691b      	ldr	r3, [r3, #16]
 8005860:	00da      	lsls	r2, r3, #3
 8005862:	4b15      	ldr	r3, [pc, #84]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 8005864:	430a      	orrs	r2, r1
 8005866:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005868:	f000 f832 	bl	80058d0 <HAL_RCC_GetSysClockFreq>
 800586c:	0001      	movs	r1, r0
 800586e:	4b12      	ldr	r3, [pc, #72]	@ (80058b8 <HAL_RCC_ClockConfig+0x278>)
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	091b      	lsrs	r3, r3, #4
 8005874:	220f      	movs	r2, #15
 8005876:	4013      	ands	r3, r2
 8005878:	4a12      	ldr	r2, [pc, #72]	@ (80058c4 <HAL_RCC_ClockConfig+0x284>)
 800587a:	5cd3      	ldrb	r3, [r2, r3]
 800587c:	000a      	movs	r2, r1
 800587e:	40da      	lsrs	r2, r3
 8005880:	4b11      	ldr	r3, [pc, #68]	@ (80058c8 <HAL_RCC_ClockConfig+0x288>)
 8005882:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005884:	4b11      	ldr	r3, [pc, #68]	@ (80058cc <HAL_RCC_ClockConfig+0x28c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	250b      	movs	r5, #11
 800588a:	197c      	adds	r4, r7, r5
 800588c:	0018      	movs	r0, r3
 800588e:	f7fd faa5 	bl	8002ddc <HAL_InitTick>
 8005892:	0003      	movs	r3, r0
 8005894:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8005896:	197b      	adds	r3, r7, r5
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800589e:	197b      	adds	r3, r7, r5
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	e000      	b.n	80058a6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	0018      	movs	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b004      	add	sp, #16
 80058ac:	bdb0      	pop	{r4, r5, r7, pc}
 80058ae:	46c0      	nop			@ (mov r8, r8)
 80058b0:	40022000 	.word	0x40022000
 80058b4:	00001388 	.word	0x00001388
 80058b8:	40021000 	.word	0x40021000
 80058bc:	fffff8ff 	.word	0xfffff8ff
 80058c0:	ffffc7ff 	.word	0xffffc7ff
 80058c4:	08008090 	.word	0x08008090
 80058c8:	20000000 	.word	0x20000000
 80058cc:	20000004 	.word	0x20000004

080058d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b086      	sub	sp, #24
 80058d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80058d6:	4b3c      	ldr	r3, [pc, #240]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	220c      	movs	r2, #12
 80058e0:	4013      	ands	r3, r2
 80058e2:	2b0c      	cmp	r3, #12
 80058e4:	d013      	beq.n	800590e <HAL_RCC_GetSysClockFreq+0x3e>
 80058e6:	d85c      	bhi.n	80059a2 <HAL_RCC_GetSysClockFreq+0xd2>
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d002      	beq.n	80058f2 <HAL_RCC_GetSysClockFreq+0x22>
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d00b      	beq.n	8005908 <HAL_RCC_GetSysClockFreq+0x38>
 80058f0:	e057      	b.n	80059a2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80058f2:	4b35      	ldr	r3, [pc, #212]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2210      	movs	r2, #16
 80058f8:	4013      	ands	r3, r2
 80058fa:	d002      	beq.n	8005902 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80058fc:	4b33      	ldr	r3, [pc, #204]	@ (80059cc <HAL_RCC_GetSysClockFreq+0xfc>)
 80058fe:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8005900:	e05d      	b.n	80059be <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8005902:	4b33      	ldr	r3, [pc, #204]	@ (80059d0 <HAL_RCC_GetSysClockFreq+0x100>)
 8005904:	613b      	str	r3, [r7, #16]
      break;
 8005906:	e05a      	b.n	80059be <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005908:	4b32      	ldr	r3, [pc, #200]	@ (80059d4 <HAL_RCC_GetSysClockFreq+0x104>)
 800590a:	613b      	str	r3, [r7, #16]
      break;
 800590c:	e057      	b.n	80059be <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	0c9b      	lsrs	r3, r3, #18
 8005912:	220f      	movs	r2, #15
 8005914:	4013      	ands	r3, r2
 8005916:	4a30      	ldr	r2, [pc, #192]	@ (80059d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005918:	5cd3      	ldrb	r3, [r2, r3]
 800591a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	0d9b      	lsrs	r3, r3, #22
 8005920:	2203      	movs	r2, #3
 8005922:	4013      	ands	r3, r2
 8005924:	3301      	adds	r3, #1
 8005926:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005928:	4b27      	ldr	r3, [pc, #156]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800592a:	68da      	ldr	r2, [r3, #12]
 800592c:	2380      	movs	r3, #128	@ 0x80
 800592e:	025b      	lsls	r3, r3, #9
 8005930:	4013      	ands	r3, r2
 8005932:	d00f      	beq.n	8005954 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	000a      	movs	r2, r1
 8005938:	0152      	lsls	r2, r2, #5
 800593a:	1a52      	subs	r2, r2, r1
 800593c:	0193      	lsls	r3, r2, #6
 800593e:	1a9b      	subs	r3, r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	185b      	adds	r3, r3, r1
 8005944:	025b      	lsls	r3, r3, #9
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	0018      	movs	r0, r3
 800594a:	f7fa fbef 	bl	800012c <__udivsi3>
 800594e:	0003      	movs	r3, r0
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	e023      	b.n	800599c <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005954:	4b1c      	ldr	r3, [pc, #112]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2210      	movs	r2, #16
 800595a:	4013      	ands	r3, r2
 800595c:	d00f      	beq.n	800597e <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800595e:	68b9      	ldr	r1, [r7, #8]
 8005960:	000a      	movs	r2, r1
 8005962:	0152      	lsls	r2, r2, #5
 8005964:	1a52      	subs	r2, r2, r1
 8005966:	0193      	lsls	r3, r2, #6
 8005968:	1a9b      	subs	r3, r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	185b      	adds	r3, r3, r1
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	6879      	ldr	r1, [r7, #4]
 8005972:	0018      	movs	r0, r3
 8005974:	f7fa fbda 	bl	800012c <__udivsi3>
 8005978:	0003      	movs	r3, r0
 800597a:	617b      	str	r3, [r7, #20]
 800597c:	e00e      	b.n	800599c <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	000a      	movs	r2, r1
 8005982:	0152      	lsls	r2, r2, #5
 8005984:	1a52      	subs	r2, r2, r1
 8005986:	0193      	lsls	r3, r2, #6
 8005988:	1a9b      	subs	r3, r3, r2
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	185b      	adds	r3, r3, r1
 800598e:	029b      	lsls	r3, r3, #10
 8005990:	6879      	ldr	r1, [r7, #4]
 8005992:	0018      	movs	r0, r3
 8005994:	f7fa fbca 	bl	800012c <__udivsi3>
 8005998:	0003      	movs	r3, r0
 800599a:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	613b      	str	r3, [r7, #16]
      break;
 80059a0:	e00d      	b.n	80059be <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80059a2:	4b09      	ldr	r3, [pc, #36]	@ (80059c8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	0b5b      	lsrs	r3, r3, #13
 80059a8:	2207      	movs	r2, #7
 80059aa:	4013      	ands	r3, r2
 80059ac:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	3301      	adds	r3, #1
 80059b2:	2280      	movs	r2, #128	@ 0x80
 80059b4:	0212      	lsls	r2, r2, #8
 80059b6:	409a      	lsls	r2, r3
 80059b8:	0013      	movs	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
      break;
 80059bc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80059be:	693b      	ldr	r3, [r7, #16]
}
 80059c0:	0018      	movs	r0, r3
 80059c2:	46bd      	mov	sp, r7
 80059c4:	b006      	add	sp, #24
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40021000 	.word	0x40021000
 80059cc:	003d0900 	.word	0x003d0900
 80059d0:	00f42400 	.word	0x00f42400
 80059d4:	007a1200 	.word	0x007a1200
 80059d8:	080080a8 	.word	0x080080a8

080059dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059e0:	4b02      	ldr	r3, [pc, #8]	@ (80059ec <HAL_RCC_GetHCLKFreq+0x10>)
 80059e2:	681b      	ldr	r3, [r3, #0]
}
 80059e4:	0018      	movs	r0, r3
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	46c0      	nop			@ (mov r8, r8)
 80059ec:	20000000 	.word	0x20000000

080059f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059f4:	f7ff fff2 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 80059f8:	0001      	movs	r1, r0
 80059fa:	4b06      	ldr	r3, [pc, #24]	@ (8005a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	0a1b      	lsrs	r3, r3, #8
 8005a00:	2207      	movs	r2, #7
 8005a02:	4013      	ands	r3, r2
 8005a04:	4a04      	ldr	r2, [pc, #16]	@ (8005a18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005a06:	5cd3      	ldrb	r3, [r2, r3]
 8005a08:	40d9      	lsrs	r1, r3
 8005a0a:	000b      	movs	r3, r1
}
 8005a0c:	0018      	movs	r0, r3
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	46c0      	nop			@ (mov r8, r8)
 8005a14:	40021000 	.word	0x40021000
 8005a18:	080080a0 	.word	0x080080a0

08005a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a20:	f7ff ffdc 	bl	80059dc <HAL_RCC_GetHCLKFreq>
 8005a24:	0001      	movs	r1, r0
 8005a26:	4b06      	ldr	r3, [pc, #24]	@ (8005a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	0adb      	lsrs	r3, r3, #11
 8005a2c:	2207      	movs	r2, #7
 8005a2e:	4013      	ands	r3, r2
 8005a30:	4a04      	ldr	r2, [pc, #16]	@ (8005a44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005a32:	5cd3      	ldrb	r3, [r2, r3]
 8005a34:	40d9      	lsrs	r1, r3
 8005a36:	000b      	movs	r3, r1
}
 8005a38:	0018      	movs	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	46c0      	nop			@ (mov r8, r8)
 8005a40:	40021000 	.word	0x40021000
 8005a44:	080080a0 	.word	0x080080a0

08005a48 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005a50:	2317      	movs	r3, #23
 8005a52:	18fb      	adds	r3, r7, r3
 8005a54:	2200      	movs	r2, #0
 8005a56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	4013      	ands	r3, r2
 8005a60:	d106      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	2380      	movs	r3, #128	@ 0x80
 8005a68:	011b      	lsls	r3, r3, #4
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	d100      	bne.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005a6e:	e104      	b.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a70:	4bb9      	ldr	r3, [pc, #740]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a74:	2380      	movs	r3, #128	@ 0x80
 8005a76:	055b      	lsls	r3, r3, #21
 8005a78:	4013      	ands	r3, r2
 8005a7a:	d10a      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a7c:	4bb6      	ldr	r3, [pc, #728]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a80:	4bb5      	ldr	r3, [pc, #724]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005a82:	2180      	movs	r1, #128	@ 0x80
 8005a84:	0549      	lsls	r1, r1, #21
 8005a86:	430a      	orrs	r2, r1
 8005a88:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8005a8a:	2317      	movs	r3, #23
 8005a8c:	18fb      	adds	r3, r7, r3
 8005a8e:	2201      	movs	r2, #1
 8005a90:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a92:	4bb2      	ldr	r3, [pc, #712]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	2380      	movs	r3, #128	@ 0x80
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	d11a      	bne.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a9e:	4baf      	ldr	r3, [pc, #700]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4bae      	ldr	r3, [pc, #696]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005aa4:	2180      	movs	r1, #128	@ 0x80
 8005aa6:	0049      	lsls	r1, r1, #1
 8005aa8:	430a      	orrs	r2, r1
 8005aaa:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005aac:	f7fd f9dc 	bl	8002e68 <HAL_GetTick>
 8005ab0:	0003      	movs	r3, r0
 8005ab2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ab6:	f7fd f9d7 	bl	8002e68 <HAL_GetTick>
 8005aba:	0002      	movs	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b64      	cmp	r3, #100	@ 0x64
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e143      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac8:	4ba4      	ldr	r3, [pc, #656]	@ (8005d5c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	2380      	movs	r3, #128	@ 0x80
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	d0f0      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005ad4:	4ba0      	ldr	r3, [pc, #640]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	23c0      	movs	r3, #192	@ 0xc0
 8005ada:	039b      	lsls	r3, r3, #14
 8005adc:	4013      	ands	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	23c0      	movs	r3, #192	@ 0xc0
 8005ae6:	039b      	lsls	r3, r3, #14
 8005ae8:	4013      	ands	r3, r2
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d107      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689a      	ldr	r2, [r3, #8]
 8005af4:	23c0      	movs	r3, #192	@ 0xc0
 8005af6:	039b      	lsls	r3, r3, #14
 8005af8:	4013      	ands	r3, r2
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d013      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	23c0      	movs	r3, #192	@ 0xc0
 8005b06:	029b      	lsls	r3, r3, #10
 8005b08:	401a      	ands	r2, r3
 8005b0a:	23c0      	movs	r3, #192	@ 0xc0
 8005b0c:	029b      	lsls	r3, r3, #10
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d10a      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b12:	4b91      	ldr	r3, [pc, #580]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	2380      	movs	r3, #128	@ 0x80
 8005b18:	029b      	lsls	r3, r3, #10
 8005b1a:	401a      	ands	r2, r3
 8005b1c:	2380      	movs	r3, #128	@ 0x80
 8005b1e:	029b      	lsls	r3, r3, #10
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d101      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e113      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005b28:	4b8b      	ldr	r3, [pc, #556]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b2c:	23c0      	movs	r3, #192	@ 0xc0
 8005b2e:	029b      	lsls	r3, r3, #10
 8005b30:	4013      	ands	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d049      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	23c0      	movs	r3, #192	@ 0xc0
 8005b40:	029b      	lsls	r3, r3, #10
 8005b42:	4013      	ands	r3, r2
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	d004      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	4013      	ands	r3, r2
 8005b52:	d10d      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	23c0      	movs	r3, #192	@ 0xc0
 8005b5a:	029b      	lsls	r3, r3, #10
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	68fa      	ldr	r2, [r7, #12]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d034      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	2380      	movs	r3, #128	@ 0x80
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d02e      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005b70:	4b79      	ldr	r3, [pc, #484]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b74:	4a7a      	ldr	r2, [pc, #488]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005b76:	4013      	ands	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b7a:	4b77      	ldr	r3, [pc, #476]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b7e:	4b76      	ldr	r3, [pc, #472]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b80:	2180      	movs	r1, #128	@ 0x80
 8005b82:	0309      	lsls	r1, r1, #12
 8005b84:	430a      	orrs	r2, r1
 8005b86:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b88:	4b73      	ldr	r3, [pc, #460]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005b8c:	4b72      	ldr	r3, [pc, #456]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b8e:	4975      	ldr	r1, [pc, #468]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8005b90:	400a      	ands	r2, r1
 8005b92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005b94:	4b70      	ldr	r3, [pc, #448]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	2380      	movs	r3, #128	@ 0x80
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d014      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba4:	f7fd f960 	bl	8002e68 <HAL_GetTick>
 8005ba8:	0003      	movs	r3, r0
 8005baa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bac:	e009      	b.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bae:	f7fd f95b 	bl	8002e68 <HAL_GetTick>
 8005bb2:	0002      	movs	r2, r0
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	4a6b      	ldr	r2, [pc, #428]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e0c6      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bc2:	4b65      	ldr	r3, [pc, #404]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005bc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005bc6:	2380      	movs	r3, #128	@ 0x80
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d0ef      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	2380      	movs	r3, #128	@ 0x80
 8005bd4:	011b      	lsls	r3, r3, #4
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	d01f      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689a      	ldr	r2, [r3, #8]
 8005bde:	23c0      	movs	r3, #192	@ 0xc0
 8005be0:	029b      	lsls	r3, r3, #10
 8005be2:	401a      	ands	r2, r3
 8005be4:	23c0      	movs	r3, #192	@ 0xc0
 8005be6:	029b      	lsls	r3, r3, #10
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d10c      	bne.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8005bec:	4b5a      	ldr	r3, [pc, #360]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a5e      	ldr	r2, [pc, #376]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	0019      	movs	r1, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	23c0      	movs	r3, #192	@ 0xc0
 8005bfc:	039b      	lsls	r3, r3, #14
 8005bfe:	401a      	ands	r2, r3
 8005c00:	4b55      	ldr	r3, [pc, #340]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c02:	430a      	orrs	r2, r1
 8005c04:	601a      	str	r2, [r3, #0]
 8005c06:	4b54      	ldr	r3, [pc, #336]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	23c0      	movs	r3, #192	@ 0xc0
 8005c10:	029b      	lsls	r3, r3, #10
 8005c12:	401a      	ands	r2, r3
 8005c14:	4b50      	ldr	r3, [pc, #320]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c16:	430a      	orrs	r2, r1
 8005c18:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2220      	movs	r2, #32
 8005c20:	4013      	ands	r3, r2
 8005c22:	d01f      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	23c0      	movs	r3, #192	@ 0xc0
 8005c2a:	029b      	lsls	r3, r3, #10
 8005c2c:	401a      	ands	r2, r3
 8005c2e:	23c0      	movs	r3, #192	@ 0xc0
 8005c30:	029b      	lsls	r3, r3, #10
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d10c      	bne.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8005c36:	4b48      	ldr	r3, [pc, #288]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a4c      	ldr	r2, [pc, #304]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	0019      	movs	r1, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	23c0      	movs	r3, #192	@ 0xc0
 8005c46:	039b      	lsls	r3, r3, #14
 8005c48:	401a      	ands	r2, r3
 8005c4a:	4b43      	ldr	r3, [pc, #268]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	4b41      	ldr	r3, [pc, #260]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c52:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	23c0      	movs	r3, #192	@ 0xc0
 8005c5a:	029b      	lsls	r3, r3, #10
 8005c5c:	401a      	ands	r2, r3
 8005c5e:	4b3e      	ldr	r3, [pc, #248]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c60:	430a      	orrs	r2, r1
 8005c62:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005c64:	2317      	movs	r3, #23
 8005c66:	18fb      	adds	r3, r7, r3
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	2b01      	cmp	r3, #1
 8005c6c:	d105      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c72:	4b39      	ldr	r3, [pc, #228]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c74:	493e      	ldr	r1, [pc, #248]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8005c76:	400a      	ands	r2, r1
 8005c78:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	4013      	ands	r3, r2
 8005c82:	d009      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c84:	4b34      	ldr	r3, [pc, #208]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c88:	2203      	movs	r2, #3
 8005c8a:	4393      	bics	r3, r2
 8005c8c:	0019      	movs	r1, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	4b31      	ldr	r3, [pc, #196]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005c94:	430a      	orrs	r2, r1
 8005c96:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	4013      	ands	r3, r2
 8005ca0:	d009      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ca2:	4b2d      	ldr	r3, [pc, #180]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ca6:	220c      	movs	r2, #12
 8005ca8:	4393      	bics	r3, r2
 8005caa:	0019      	movs	r1, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	4b29      	ldr	r3, [pc, #164]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005cb2:	430a      	orrs	r2, r1
 8005cb4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2204      	movs	r2, #4
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	d009      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005cc0:	4b25      	ldr	r3, [pc, #148]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	0019      	movs	r1, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695a      	ldr	r2, [r3, #20]
 8005cce:	4b22      	ldr	r3, [pc, #136]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2208      	movs	r2, #8
 8005cda:	4013      	ands	r3, r2
 8005cdc:	d009      	beq.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cde:	4b1e      	ldr	r3, [pc, #120]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ce2:	4a25      	ldr	r2, [pc, #148]	@ (8005d78 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	0019      	movs	r1, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	4b1a      	ldr	r3, [pc, #104]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	2380      	movs	r3, #128	@ 0x80
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	d009      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005cfe:	4b16      	ldr	r3, [pc, #88]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d02:	4a17      	ldr	r2, [pc, #92]	@ (8005d60 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005d04:	4013      	ands	r3, r2
 8005d06:	0019      	movs	r1, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	69da      	ldr	r2, [r3, #28]
 8005d0c:	4b12      	ldr	r3, [pc, #72]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2240      	movs	r2, #64	@ 0x40
 8005d18:	4013      	ands	r3, r2
 8005d1a:	d009      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d20:	4a16      	ldr	r2, [pc, #88]	@ (8005d7c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005d22:	4013      	ands	r3, r2
 8005d24:	0019      	movs	r1, r3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005d2c:	430a      	orrs	r2, r1
 8005d2e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2280      	movs	r2, #128	@ 0x80
 8005d36:	4013      	ands	r3, r2
 8005d38:	d009      	beq.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005d3a:	4b07      	ldr	r3, [pc, #28]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d3e:	4a10      	ldr	r2, [pc, #64]	@ (8005d80 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005d40:	4013      	ands	r3, r2
 8005d42:	0019      	movs	r1, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1a      	ldr	r2, [r3, #32]
 8005d48:	4b03      	ldr	r3, [pc, #12]	@ (8005d58 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	0018      	movs	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	b006      	add	sp, #24
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	40007000 	.word	0x40007000
 8005d60:	fffcffff 	.word	0xfffcffff
 8005d64:	fff7ffff 	.word	0xfff7ffff
 8005d68:	00001388 	.word	0x00001388
 8005d6c:	ffcfffff 	.word	0xffcfffff
 8005d70:	efffffff 	.word	0xefffffff
 8005d74:	fffff3ff 	.word	0xfffff3ff
 8005d78:	ffffcfff 	.word	0xffffcfff
 8005d7c:	fbffffff 	.word	0xfbffffff
 8005d80:	fff3ffff 	.word	0xfff3ffff

08005d84 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005d84:	b5b0      	push	{r4, r5, r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005d8c:	230f      	movs	r3, #15
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	2201      	movs	r2, #1
 8005d92:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e088      	b.n	8005eb0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2221      	movs	r2, #33	@ 0x21
 8005da2:	5c9b      	ldrb	r3, [r3, r2]
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d107      	bne.n	8005dba <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2220      	movs	r2, #32
 8005dae:	2100      	movs	r1, #0
 8005db0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	0018      	movs	r0, r3
 8005db6:	f7fc fc3b 	bl	8002630 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2221      	movs	r2, #33	@ 0x21
 8005dbe:	2102      	movs	r1, #2
 8005dc0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	2210      	movs	r2, #16
 8005dca:	4013      	ands	r3, r2
 8005dcc:	2b10      	cmp	r3, #16
 8005dce:	d05f      	beq.n	8005e90 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	22ca      	movs	r2, #202	@ 0xca
 8005dd6:	625a      	str	r2, [r3, #36]	@ 0x24
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2253      	movs	r2, #83	@ 0x53
 8005dde:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005de0:	250f      	movs	r5, #15
 8005de2:	197c      	adds	r4, r7, r5
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	0018      	movs	r0, r3
 8005de8:	f000 f93e 	bl	8006068 <RTC_EnterInitMode>
 8005dec:	0003      	movs	r3, r0
 8005dee:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8005df0:	0028      	movs	r0, r5
 8005df2:	183b      	adds	r3, r7, r0
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d12c      	bne.n	8005e54 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689a      	ldr	r2, [r3, #8]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	492c      	ldr	r1, [pc, #176]	@ (8005eb8 <HAL_RTC_Init+0x134>)
 8005e06:	400a      	ands	r2, r1
 8005e08:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6899      	ldr	r1, [r3, #8]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685a      	ldr	r2, [r3, #4]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	699b      	ldr	r3, [r3, #24]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	68d2      	ldr	r2, [r2, #12]
 8005e30:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6919      	ldr	r1, [r3, #16]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	041a      	lsls	r2, r3, #16
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005e46:	183c      	adds	r4, r7, r0
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f000 f950 	bl	80060f0 <RTC_ExitInitMode>
 8005e50:	0003      	movs	r3, r0
 8005e52:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8005e54:	230f      	movs	r3, #15
 8005e56:	18fb      	adds	r3, r7, r3
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d113      	bne.n	8005e86 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2103      	movs	r1, #3
 8005e6a:	438a      	bics	r2, r1
 8005e6c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	695b      	ldr	r3, [r3, #20]
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	430a      	orrs	r2, r1
 8005e84:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	22ff      	movs	r2, #255	@ 0xff
 8005e8c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005e8e:	e003      	b.n	8005e98 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005e90:	230f      	movs	r3, #15
 8005e92:	18fb      	adds	r3, r7, r3
 8005e94:	2200      	movs	r2, #0
 8005e96:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8005e98:	230f      	movs	r3, #15
 8005e9a:	18fb      	adds	r3, r7, r3
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d103      	bne.n	8005eaa <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2221      	movs	r2, #33	@ 0x21
 8005ea6:	2101      	movs	r1, #1
 8005ea8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005eaa:	230f      	movs	r3, #15
 8005eac:	18fb      	adds	r3, r7, r3
 8005eae:	781b      	ldrb	r3, [r3, #0]
}
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	b004      	add	sp, #16
 8005eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8005eb8:	ff8fffbf 	.word	0xff8fffbf

08005ebc <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	045b      	lsls	r3, r3, #17
 8005ede:	0c5a      	lsrs	r2, r3, #17
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a22      	ldr	r2, [pc, #136]	@ (8005f74 <HAL_RTC_GetTime+0xb8>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	0c1b      	lsrs	r3, r3, #16
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	223f      	movs	r2, #63	@ 0x3f
 8005ef8:	4013      	ands	r3, r2
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	227f      	movs	r2, #127	@ 0x7f
 8005f08:	4013      	ands	r3, r2
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	227f      	movs	r2, #127	@ 0x7f
 8005f16:	4013      	ands	r3, r2
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	0d9b      	lsrs	r3, r3, #22
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2201      	movs	r2, #1
 8005f26:	4013      	ands	r3, r2
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d11a      	bne.n	8005f6a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f000 f903 	bl	8006144 <RTC_Bcd2ToByte>
 8005f3e:	0003      	movs	r3, r0
 8005f40:	001a      	movs	r2, r3
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	785b      	ldrb	r3, [r3, #1]
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	f000 f8fa 	bl	8006144 <RTC_Bcd2ToByte>
 8005f50:	0003      	movs	r3, r0
 8005f52:	001a      	movs	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	789b      	ldrb	r3, [r3, #2]
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f000 f8f1 	bl	8006144 <RTC_Bcd2ToByte>
 8005f62:	0003      	movs	r3, r0
 8005f64:	001a      	movs	r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	0018      	movs	r0, r3
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	b006      	add	sp, #24
 8005f72:	bd80      	pop	{r7, pc}
 8005f74:	007f7f7f 	.word	0x007f7f7f

08005f78 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	4a21      	ldr	r2, [pc, #132]	@ (8006014 <HAL_RTC_GetDate+0x9c>)
 8005f90:	4013      	ands	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	0c1b      	lsrs	r3, r3, #16
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	0a1b      	lsrs	r3, r3, #8
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	221f      	movs	r2, #31
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	223f      	movs	r2, #63	@ 0x3f
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	0b5b      	lsrs	r3, r3, #13
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2207      	movs	r2, #7
 8005fc4:	4013      	ands	r3, r2
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d11a      	bne.n	8006008 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	78db      	ldrb	r3, [r3, #3]
 8005fd6:	0018      	movs	r0, r3
 8005fd8:	f000 f8b4 	bl	8006144 <RTC_Bcd2ToByte>
 8005fdc:	0003      	movs	r3, r0
 8005fde:	001a      	movs	r2, r3
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f000 f8ab 	bl	8006144 <RTC_Bcd2ToByte>
 8005fee:	0003      	movs	r3, r0
 8005ff0:	001a      	movs	r2, r3
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	789b      	ldrb	r3, [r3, #2]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f000 f8a2 	bl	8006144 <RTC_Bcd2ToByte>
 8006000:	0003      	movs	r3, r0
 8006002:	001a      	movs	r2, r3
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	0018      	movs	r0, r3
 800600c:	46bd      	mov	sp, r7
 800600e:	b006      	add	sp, #24
 8006010:	bd80      	pop	{r7, pc}
 8006012:	46c0      	nop			@ (mov r8, r8)
 8006014:	00ffff3f 	.word	0x00ffff3f

08006018 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006020:	2300      	movs	r3, #0
 8006022:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a0e      	ldr	r2, [pc, #56]	@ (8006064 <HAL_RTC_WaitForSynchro+0x4c>)
 800602a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800602c:	f7fc ff1c 	bl	8002e68 <HAL_GetTick>
 8006030:	0003      	movs	r3, r0
 8006032:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006034:	e00a      	b.n	800604c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006036:	f7fc ff17 	bl	8002e68 <HAL_GetTick>
 800603a:	0002      	movs	r2, r0
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	1ad2      	subs	r2, r2, r3
 8006040:	23fa      	movs	r3, #250	@ 0xfa
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	429a      	cmp	r2, r3
 8006046:	d901      	bls.n	800604c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006048:	2303      	movs	r3, #3
 800604a:	e006      	b.n	800605a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	4013      	ands	r3, r2
 8006056:	d0ee      	beq.n	8006036 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	0018      	movs	r0, r3
 800605c:	46bd      	mov	sp, r7
 800605e:	b004      	add	sp, #16
 8006060:	bd80      	pop	{r7, pc}
 8006062:	46c0      	nop			@ (mov r8, r8)
 8006064:	0001ff5f 	.word	0x0001ff5f

08006068 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006074:	230f      	movs	r3, #15
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	2200      	movs	r2, #0
 800607a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	2240      	movs	r2, #64	@ 0x40
 8006084:	4013      	ands	r3, r2
 8006086:	d12c      	bne.n	80060e2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2180      	movs	r1, #128	@ 0x80
 8006094:	430a      	orrs	r2, r1
 8006096:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006098:	f7fc fee6 	bl	8002e68 <HAL_GetTick>
 800609c:	0003      	movs	r3, r0
 800609e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80060a0:	e014      	b.n	80060cc <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80060a2:	f7fc fee1 	bl	8002e68 <HAL_GetTick>
 80060a6:	0002      	movs	r2, r0
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	1ad2      	subs	r2, r2, r3
 80060ac:	200f      	movs	r0, #15
 80060ae:	183b      	adds	r3, r7, r0
 80060b0:	1839      	adds	r1, r7, r0
 80060b2:	7809      	ldrb	r1, [r1, #0]
 80060b4:	7019      	strb	r1, [r3, #0]
 80060b6:	23fa      	movs	r3, #250	@ 0xfa
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d906      	bls.n	80060cc <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2221      	movs	r2, #33	@ 0x21
 80060c2:	2104      	movs	r1, #4
 80060c4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80060c6:	183b      	adds	r3, r7, r0
 80060c8:	2201      	movs	r2, #1
 80060ca:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	2240      	movs	r2, #64	@ 0x40
 80060d4:	4013      	ands	r3, r2
 80060d6:	d104      	bne.n	80060e2 <RTC_EnterInitMode+0x7a>
 80060d8:	230f      	movs	r3, #15
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d1df      	bne.n	80060a2 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80060e2:	230f      	movs	r3, #15
 80060e4:	18fb      	adds	r3, r7, r3
 80060e6:	781b      	ldrb	r3, [r3, #0]
}
 80060e8:	0018      	movs	r0, r3
 80060ea:	46bd      	mov	sp, r7
 80060ec:	b004      	add	sp, #16
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80060f0:	b590      	push	{r4, r7, lr}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060f8:	240f      	movs	r4, #15
 80060fa:	193b      	adds	r3, r7, r4
 80060fc:	2200      	movs	r2, #0
 80060fe:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	2180      	movs	r1, #128	@ 0x80
 800610c:	438a      	bics	r2, r1
 800610e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2220      	movs	r2, #32
 8006118:	4013      	ands	r3, r2
 800611a:	d10c      	bne.n	8006136 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	0018      	movs	r0, r3
 8006120:	f7ff ff7a 	bl	8006018 <HAL_RTC_WaitForSynchro>
 8006124:	1e03      	subs	r3, r0, #0
 8006126:	d006      	beq.n	8006136 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2221      	movs	r2, #33	@ 0x21
 800612c:	2104      	movs	r1, #4
 800612e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8006130:	193b      	adds	r3, r7, r4
 8006132:	2201      	movs	r2, #1
 8006134:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8006136:	230f      	movs	r3, #15
 8006138:	18fb      	adds	r3, r7, r3
 800613a:	781b      	ldrb	r3, [r3, #0]
}
 800613c:	0018      	movs	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	b005      	add	sp, #20
 8006142:	bd90      	pop	{r4, r7, pc}

08006144 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	0002      	movs	r2, r0
 800614c:	1dfb      	adds	r3, r7, #7
 800614e:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8006154:	1dfb      	adds	r3, r7, #7
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	091b      	lsrs	r3, r3, #4
 800615a:	b2db      	uxtb	r3, r3
 800615c:	001a      	movs	r2, r3
 800615e:	0013      	movs	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	189b      	adds	r3, r3, r2
 8006164:	005b      	lsls	r3, r3, #1
 8006166:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	b2da      	uxtb	r2, r3
 800616c:	1dfb      	adds	r3, r7, #7
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	210f      	movs	r1, #15
 8006172:	400b      	ands	r3, r1
 8006174:	b2db      	uxtb	r3, r3
 8006176:	18d3      	adds	r3, r2, r3
 8006178:	b2db      	uxtb	r3, r3
}
 800617a:	0018      	movs	r0, r3
 800617c:	46bd      	mov	sp, r7
 800617e:	b004      	add	sp, #16
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006190:	4b64      	ldr	r3, [pc, #400]	@ (8006324 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	22fa      	movs	r2, #250	@ 0xfa
 8006196:	01d1      	lsls	r1, r2, #7
 8006198:	0018      	movs	r0, r3
 800619a:	f7f9 ffc7 	bl	800012c <__udivsi3>
 800619e:	0003      	movs	r3, r0
 80061a0:	001a      	movs	r2, r3
 80061a2:	0013      	movs	r3, r2
 80061a4:	015b      	lsls	r3, r3, #5
 80061a6:	1a9b      	subs	r3, r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	189b      	adds	r3, r3, r2
 80061ac:	00db      	lsls	r3, r3, #3
 80061ae:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	5c9b      	ldrb	r3, [r3, r2]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d101      	bne.n	80061be <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80061ba:	2302      	movs	r3, #2
 80061bc:	e0ad      	b.n	800631a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2220      	movs	r2, #32
 80061c2:	2101      	movs	r1, #1
 80061c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2221      	movs	r2, #33	@ 0x21
 80061ca:	2102      	movs	r1, #2
 80061cc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	22ca      	movs	r2, #202	@ 0xca
 80061d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2253      	movs	r2, #83	@ 0x53
 80061dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689a      	ldr	r2, [r3, #8]
 80061e4:	2380      	movs	r3, #128	@ 0x80
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	4013      	ands	r3, r2
 80061ea:	d019      	beq.n	8006220 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10d      	bne.n	8006214 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	22ff      	movs	r2, #255	@ 0xff
 80061fe:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2221      	movs	r2, #33	@ 0x21
 8006204:	2103      	movs	r1, #3
 8006206:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	2100      	movs	r1, #0
 800620e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e082      	b.n	800631a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	2204      	movs	r2, #4
 800621c:	4013      	ands	r3, r2
 800621e:	d1e5      	bne.n	80061ec <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	689a      	ldr	r2, [r3, #8]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	493f      	ldr	r1, [pc, #252]	@ (8006328 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 800622c:	400a      	ands	r2, r1
 800622e:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	22ff      	movs	r2, #255	@ 0xff
 8006238:	401a      	ands	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	493b      	ldr	r1, [pc, #236]	@ (800632c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8006240:	430a      	orrs	r2, r1
 8006242:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8006244:	4b37      	ldr	r3, [pc, #220]	@ (8006324 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	22fa      	movs	r2, #250	@ 0xfa
 800624a:	01d1      	lsls	r1, r2, #7
 800624c:	0018      	movs	r0, r3
 800624e:	f7f9 ff6d 	bl	800012c <__udivsi3>
 8006252:	0003      	movs	r3, r0
 8006254:	001a      	movs	r2, r3
 8006256:	0013      	movs	r3, r2
 8006258:	015b      	lsls	r3, r3, #5
 800625a:	1a9b      	subs	r3, r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	189b      	adds	r3, r3, r2
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	3b01      	subs	r3, #1
 8006268:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10d      	bne.n	800628c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	22ff      	movs	r2, #255	@ 0xff
 8006276:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2221      	movs	r2, #33	@ 0x21
 800627c:	2103      	movs	r1, #3
 800627e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2220      	movs	r2, #32
 8006284:	2100      	movs	r1, #0
 8006286:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e046      	b.n	800631a <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	2204      	movs	r2, #4
 8006294:	4013      	ands	r3, r2
 8006296:	d0e5      	beq.n	8006264 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2107      	movs	r1, #7
 80062a4:	438a      	bics	r2, r1
 80062a6:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6899      	ldr	r1, [r3, #8]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80062c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006330 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	4b1a      	ldr	r3, [pc, #104]	@ (8006330 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80062c6:	2180      	movs	r1, #128	@ 0x80
 80062c8:	0349      	lsls	r1, r1, #13
 80062ca:	430a      	orrs	r2, r1
 80062cc:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80062ce:	4b18      	ldr	r3, [pc, #96]	@ (8006330 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80062d0:	689a      	ldr	r2, [r3, #8]
 80062d2:	4b17      	ldr	r3, [pc, #92]	@ (8006330 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80062d4:	2180      	movs	r1, #128	@ 0x80
 80062d6:	0349      	lsls	r1, r1, #13
 80062d8:	430a      	orrs	r2, r1
 80062da:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2180      	movs	r1, #128	@ 0x80
 80062e8:	01c9      	lsls	r1, r1, #7
 80062ea:	430a      	orrs	r2, r1
 80062ec:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2180      	movs	r1, #128	@ 0x80
 80062fa:	00c9      	lsls	r1, r1, #3
 80062fc:	430a      	orrs	r2, r1
 80062fe:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	22ff      	movs	r2, #255	@ 0xff
 8006306:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2221      	movs	r2, #33	@ 0x21
 800630c:	2101      	movs	r1, #1
 800630e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2220      	movs	r2, #32
 8006314:	2100      	movs	r1, #0
 8006316:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	0018      	movs	r0, r3
 800631c:	46bd      	mov	sp, r7
 800631e:	b006      	add	sp, #24
 8006320:	bd80      	pop	{r7, pc}
 8006322:	46c0      	nop			@ (mov r8, r8)
 8006324:	20000000 	.word	0x20000000
 8006328:	fffffbff 	.word	0xfffffbff
 800632c:	fffffb7f 	.word	0xfffffb7f
 8006330:	40010400 	.word	0x40010400

08006334 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	5c9b      	ldrb	r3, [r3, r2]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d101      	bne.n	800634e <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 800634a:	2302      	movs	r3, #2
 800634c:	e04e      	b.n	80063ec <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	2101      	movs	r1, #1
 8006354:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2221      	movs	r2, #33	@ 0x21
 800635a:	2102      	movs	r1, #2
 800635c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	22ca      	movs	r2, #202	@ 0xca
 8006364:	625a      	str	r2, [r3, #36]	@ 0x24
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2253      	movs	r2, #83	@ 0x53
 800636c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	689a      	ldr	r2, [r3, #8]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	491e      	ldr	r1, [pc, #120]	@ (80063f4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 800637a:	400a      	ands	r2, r1
 800637c:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	491b      	ldr	r1, [pc, #108]	@ (80063f8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 800638a:	400a      	ands	r2, r1
 800638c:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800638e:	f7fc fd6b 	bl	8002e68 <HAL_GetTick>
 8006392:	0003      	movs	r3, r0
 8006394:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8006396:	e016      	b.n	80063c6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006398:	f7fc fd66 	bl	8002e68 <HAL_GetTick>
 800639c:	0002      	movs	r2, r0
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	1ad2      	subs	r2, r2, r3
 80063a2:	23fa      	movs	r3, #250	@ 0xfa
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d90d      	bls.n	80063c6 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	22ff      	movs	r2, #255	@ 0xff
 80063b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2221      	movs	r2, #33	@ 0x21
 80063b6:	2103      	movs	r1, #3
 80063b8:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2220      	movs	r2, #32
 80063be:	2100      	movs	r1, #0
 80063c0:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e012      	b.n	80063ec <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	2204      	movs	r2, #4
 80063ce:	4013      	ands	r3, r2
 80063d0:	d0e2      	beq.n	8006398 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	22ff      	movs	r2, #255	@ 0xff
 80063d8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2221      	movs	r2, #33	@ 0x21
 80063de:	2101      	movs	r1, #1
 80063e0:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2220      	movs	r2, #32
 80063e6:	2100      	movs	r1, #0
 80063e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	0018      	movs	r0, r3
 80063ee:	46bd      	mov	sp, r7
 80063f0:	b004      	add	sp, #16
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	fffffbff 	.word	0xfffffbff
 80063f8:	ffffbfff 	.word	0xffffbfff

080063fc <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8006404:	4b13      	ldr	r3, [pc, #76]	@ (8006454 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8006406:	2280      	movs	r2, #128	@ 0x80
 8006408:	0352      	lsls	r2, r2, #13
 800640a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	689a      	ldr	r2, [r3, #8]
 8006412:	2380      	movs	r3, #128	@ 0x80
 8006414:	01db      	lsls	r3, r3, #7
 8006416:	4013      	ands	r3, r2
 8006418:	d014      	beq.n	8006444 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	2380      	movs	r3, #128	@ 0x80
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	4013      	ands	r3, r2
 8006426:	d00d      	beq.n	8006444 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	22ff      	movs	r2, #255	@ 0xff
 8006430:	401a      	ands	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4908      	ldr	r1, [pc, #32]	@ (8006458 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8006438:	430a      	orrs	r2, r1
 800643a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	0018      	movs	r0, r3
 8006440:	f7fb fb72 	bl	8001b28 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2221      	movs	r2, #33	@ 0x21
 8006448:	2101      	movs	r1, #1
 800644a:	5499      	strb	r1, [r3, r2]
}
 800644c:	46c0      	nop			@ (mov r8, r8)
 800644e:	46bd      	mov	sp, r7
 8006450:	b002      	add	sp, #8
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40010400 	.word	0x40010400
 8006458:	fffffb7f 	.word	0xfffffb7f

0800645c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e044      	b.n	80064f8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d107      	bne.n	8006486 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2278      	movs	r2, #120	@ 0x78
 800647a:	2100      	movs	r1, #0
 800647c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	0018      	movs	r0, r3
 8006482:	f7fc f827 	bl	80024d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2224      	movs	r2, #36	@ 0x24
 800648a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2101      	movs	r1, #1
 8006498:	438a      	bics	r2, r1
 800649a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d003      	beq.n	80064ac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	0018      	movs	r0, r3
 80064a8:	f000 fba8 	bl	8006bfc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	0018      	movs	r0, r3
 80064b0:	f000 f906 	bl	80066c0 <UART_SetConfig>
 80064b4:	0003      	movs	r3, r0
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80064ba:	2301      	movs	r3, #1
 80064bc:	e01c      	b.n	80064f8 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	685a      	ldr	r2, [r3, #4]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	490d      	ldr	r1, [pc, #52]	@ (8006500 <HAL_UART_Init+0xa4>)
 80064ca:	400a      	ands	r2, r1
 80064cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	689a      	ldr	r2, [r3, #8]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	212a      	movs	r1, #42	@ 0x2a
 80064da:	438a      	bics	r2, r1
 80064dc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2101      	movs	r1, #1
 80064ea:	430a      	orrs	r2, r1
 80064ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	0018      	movs	r0, r3
 80064f2:	f000 fc37 	bl	8006d64 <UART_CheckIdleState>
 80064f6:	0003      	movs	r3, r0
}
 80064f8:	0018      	movs	r0, r3
 80064fa:	46bd      	mov	sp, r7
 80064fc:	b002      	add	sp, #8
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	ffffb7ff 	.word	0xffffb7ff

08006504 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d101      	bne.n	8006516 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	e030      	b.n	8006578 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2224      	movs	r2, #36	@ 0x24
 800651a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2101      	movs	r1, #1
 8006528:	438a      	bics	r2, r1
 800652a:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2200      	movs	r2, #0
 8006532:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2200      	movs	r2, #0
 800653a:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2200      	movs	r2, #0
 8006542:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	0018      	movs	r0, r3
 8006548:	f7fc f83a 	bl	80025c0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2284      	movs	r2, #132	@ 0x84
 8006550:	2100      	movs	r1, #0
 8006552:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2280      	movs	r2, #128	@ 0x80
 800655e:	2100      	movs	r1, #0
 8006560:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2278      	movs	r2, #120	@ 0x78
 8006572:	2100      	movs	r1, #0
 8006574:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	0018      	movs	r0, r3
 800657a:	46bd      	mov	sp, r7
 800657c:	b002      	add	sp, #8
 800657e:	bd80      	pop	{r7, pc}

08006580 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08a      	sub	sp, #40	@ 0x28
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	603b      	str	r3, [r7, #0]
 800658c:	1dbb      	adds	r3, r7, #6
 800658e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006594:	2b20      	cmp	r3, #32
 8006596:	d000      	beq.n	800659a <HAL_UART_Transmit+0x1a>
 8006598:	e08c      	b.n	80066b4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d003      	beq.n	80065a8 <HAL_UART_Transmit+0x28>
 80065a0:	1dbb      	adds	r3, r7, #6
 80065a2:	881b      	ldrh	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e084      	b.n	80066b6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	2380      	movs	r3, #128	@ 0x80
 80065b2:	015b      	lsls	r3, r3, #5
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d109      	bne.n	80065cc <HAL_UART_Transmit+0x4c>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d105      	bne.n	80065cc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2201      	movs	r2, #1
 80065c4:	4013      	ands	r3, r2
 80065c6:	d001      	beq.n	80065cc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e074      	b.n	80066b6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2284      	movs	r2, #132	@ 0x84
 80065d0:	2100      	movs	r1, #0
 80065d2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2221      	movs	r2, #33	@ 0x21
 80065d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065da:	f7fc fc45 	bl	8002e68 <HAL_GetTick>
 80065de:	0003      	movs	r3, r0
 80065e0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1dba      	adds	r2, r7, #6
 80065e6:	2150      	movs	r1, #80	@ 0x50
 80065e8:	8812      	ldrh	r2, [r2, #0]
 80065ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	1dba      	adds	r2, r7, #6
 80065f0:	2152      	movs	r1, #82	@ 0x52
 80065f2:	8812      	ldrh	r2, [r2, #0]
 80065f4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	2380      	movs	r3, #128	@ 0x80
 80065fc:	015b      	lsls	r3, r3, #5
 80065fe:	429a      	cmp	r2, r3
 8006600:	d108      	bne.n	8006614 <HAL_UART_Transmit+0x94>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d104      	bne.n	8006614 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	e003      	b.n	800661c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006618:	2300      	movs	r3, #0
 800661a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800661c:	e02f      	b.n	800667e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	0013      	movs	r3, r2
 8006628:	2200      	movs	r2, #0
 800662a:	2180      	movs	r1, #128	@ 0x80
 800662c:	f000 fc42 	bl	8006eb4 <UART_WaitOnFlagUntilTimeout>
 8006630:	1e03      	subs	r3, r0, #0
 8006632:	d004      	beq.n	800663e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2220      	movs	r2, #32
 8006638:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e03b      	b.n	80066b6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10b      	bne.n	800665c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	001a      	movs	r2, r3
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	05d2      	lsls	r2, r2, #23
 8006650:	0dd2      	lsrs	r2, r2, #23
 8006652:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	3302      	adds	r3, #2
 8006658:	61bb      	str	r3, [r7, #24]
 800665a:	e007      	b.n	800666c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800665c:	69fb      	ldr	r3, [r7, #28]
 800665e:	781a      	ldrb	r2, [r3, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	3301      	adds	r3, #1
 800666a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2252      	movs	r2, #82	@ 0x52
 8006670:	5a9b      	ldrh	r3, [r3, r2]
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b299      	uxth	r1, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2252      	movs	r2, #82	@ 0x52
 800667c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2252      	movs	r2, #82	@ 0x52
 8006682:	5a9b      	ldrh	r3, [r3, r2]
 8006684:	b29b      	uxth	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1c9      	bne.n	800661e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	0013      	movs	r3, r2
 8006694:	2200      	movs	r2, #0
 8006696:	2140      	movs	r1, #64	@ 0x40
 8006698:	f000 fc0c 	bl	8006eb4 <UART_WaitOnFlagUntilTimeout>
 800669c:	1e03      	subs	r3, r0, #0
 800669e:	d004      	beq.n	80066aa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e005      	b.n	80066b6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2220      	movs	r2, #32
 80066ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	e000      	b.n	80066b6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80066b4:	2302      	movs	r3, #2
  }
}
 80066b6:	0018      	movs	r0, r3
 80066b8:	46bd      	mov	sp, r7
 80066ba:	b008      	add	sp, #32
 80066bc:	bd80      	pop	{r7, pc}
	...

080066c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066c0:	b5b0      	push	{r4, r5, r7, lr}
 80066c2:	b08e      	sub	sp, #56	@ 0x38
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066c8:	231a      	movs	r3, #26
 80066ca:	2218      	movs	r2, #24
 80066cc:	189b      	adds	r3, r3, r2
 80066ce:	19db      	adds	r3, r3, r7
 80066d0:	2200      	movs	r2, #0
 80066d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	431a      	orrs	r2, r3
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	695b      	ldr	r3, [r3, #20]
 80066e2:	431a      	orrs	r2, r3
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4ac3      	ldr	r2, [pc, #780]	@ (8006a00 <UART_SetConfig+0x340>)
 80066f4:	4013      	ands	r3, r2
 80066f6:	0019      	movs	r1, r3
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066fe:	430a      	orrs	r2, r1
 8006700:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	4abe      	ldr	r2, [pc, #760]	@ (8006a04 <UART_SetConfig+0x344>)
 800670a:	4013      	ands	r3, r2
 800670c:	0019      	movs	r1, r3
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800671a:	69fb      	ldr	r3, [r7, #28]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006720:	69fb      	ldr	r3, [r7, #28]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4ab8      	ldr	r2, [pc, #736]	@ (8006a08 <UART_SetConfig+0x348>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d004      	beq.n	8006734 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006730:	4313      	orrs	r3, r2
 8006732:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	4ab4      	ldr	r2, [pc, #720]	@ (8006a0c <UART_SetConfig+0x34c>)
 800673c:	4013      	ands	r3, r2
 800673e:	0019      	movs	r1, r3
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006746:	430a      	orrs	r2, r1
 8006748:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800674a:	69fb      	ldr	r3, [r7, #28]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4ab0      	ldr	r2, [pc, #704]	@ (8006a10 <UART_SetConfig+0x350>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d131      	bne.n	80067b8 <UART_SetConfig+0xf8>
 8006754:	4baf      	ldr	r3, [pc, #700]	@ (8006a14 <UART_SetConfig+0x354>)
 8006756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006758:	2203      	movs	r2, #3
 800675a:	4013      	ands	r3, r2
 800675c:	2b03      	cmp	r3, #3
 800675e:	d01d      	beq.n	800679c <UART_SetConfig+0xdc>
 8006760:	d823      	bhi.n	80067aa <UART_SetConfig+0xea>
 8006762:	2b02      	cmp	r3, #2
 8006764:	d00c      	beq.n	8006780 <UART_SetConfig+0xc0>
 8006766:	d820      	bhi.n	80067aa <UART_SetConfig+0xea>
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <UART_SetConfig+0xb2>
 800676c:	2b01      	cmp	r3, #1
 800676e:	d00e      	beq.n	800678e <UART_SetConfig+0xce>
 8006770:	e01b      	b.n	80067aa <UART_SetConfig+0xea>
 8006772:	231b      	movs	r3, #27
 8006774:	2218      	movs	r2, #24
 8006776:	189b      	adds	r3, r3, r2
 8006778:	19db      	adds	r3, r3, r7
 800677a:	2201      	movs	r2, #1
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	e0b4      	b.n	80068ea <UART_SetConfig+0x22a>
 8006780:	231b      	movs	r3, #27
 8006782:	2218      	movs	r2, #24
 8006784:	189b      	adds	r3, r3, r2
 8006786:	19db      	adds	r3, r3, r7
 8006788:	2202      	movs	r2, #2
 800678a:	701a      	strb	r2, [r3, #0]
 800678c:	e0ad      	b.n	80068ea <UART_SetConfig+0x22a>
 800678e:	231b      	movs	r3, #27
 8006790:	2218      	movs	r2, #24
 8006792:	189b      	adds	r3, r3, r2
 8006794:	19db      	adds	r3, r3, r7
 8006796:	2204      	movs	r2, #4
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	e0a6      	b.n	80068ea <UART_SetConfig+0x22a>
 800679c:	231b      	movs	r3, #27
 800679e:	2218      	movs	r2, #24
 80067a0:	189b      	adds	r3, r3, r2
 80067a2:	19db      	adds	r3, r3, r7
 80067a4:	2208      	movs	r2, #8
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e09f      	b.n	80068ea <UART_SetConfig+0x22a>
 80067aa:	231b      	movs	r3, #27
 80067ac:	2218      	movs	r2, #24
 80067ae:	189b      	adds	r3, r3, r2
 80067b0:	19db      	adds	r3, r3, r7
 80067b2:	2210      	movs	r2, #16
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e098      	b.n	80068ea <UART_SetConfig+0x22a>
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a96      	ldr	r2, [pc, #600]	@ (8006a18 <UART_SetConfig+0x358>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d131      	bne.n	8006826 <UART_SetConfig+0x166>
 80067c2:	4b94      	ldr	r3, [pc, #592]	@ (8006a14 <UART_SetConfig+0x354>)
 80067c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067c6:	220c      	movs	r2, #12
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b0c      	cmp	r3, #12
 80067cc:	d01d      	beq.n	800680a <UART_SetConfig+0x14a>
 80067ce:	d823      	bhi.n	8006818 <UART_SetConfig+0x158>
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d00c      	beq.n	80067ee <UART_SetConfig+0x12e>
 80067d4:	d820      	bhi.n	8006818 <UART_SetConfig+0x158>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <UART_SetConfig+0x120>
 80067da:	2b04      	cmp	r3, #4
 80067dc:	d00e      	beq.n	80067fc <UART_SetConfig+0x13c>
 80067de:	e01b      	b.n	8006818 <UART_SetConfig+0x158>
 80067e0:	231b      	movs	r3, #27
 80067e2:	2218      	movs	r2, #24
 80067e4:	189b      	adds	r3, r3, r2
 80067e6:	19db      	adds	r3, r3, r7
 80067e8:	2200      	movs	r2, #0
 80067ea:	701a      	strb	r2, [r3, #0]
 80067ec:	e07d      	b.n	80068ea <UART_SetConfig+0x22a>
 80067ee:	231b      	movs	r3, #27
 80067f0:	2218      	movs	r2, #24
 80067f2:	189b      	adds	r3, r3, r2
 80067f4:	19db      	adds	r3, r3, r7
 80067f6:	2202      	movs	r2, #2
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	e076      	b.n	80068ea <UART_SetConfig+0x22a>
 80067fc:	231b      	movs	r3, #27
 80067fe:	2218      	movs	r2, #24
 8006800:	189b      	adds	r3, r3, r2
 8006802:	19db      	adds	r3, r3, r7
 8006804:	2204      	movs	r2, #4
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	e06f      	b.n	80068ea <UART_SetConfig+0x22a>
 800680a:	231b      	movs	r3, #27
 800680c:	2218      	movs	r2, #24
 800680e:	189b      	adds	r3, r3, r2
 8006810:	19db      	adds	r3, r3, r7
 8006812:	2208      	movs	r2, #8
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	e068      	b.n	80068ea <UART_SetConfig+0x22a>
 8006818:	231b      	movs	r3, #27
 800681a:	2218      	movs	r2, #24
 800681c:	189b      	adds	r3, r3, r2
 800681e:	19db      	adds	r3, r3, r7
 8006820:	2210      	movs	r2, #16
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	e061      	b.n	80068ea <UART_SetConfig+0x22a>
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a7c      	ldr	r2, [pc, #496]	@ (8006a1c <UART_SetConfig+0x35c>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d106      	bne.n	800683e <UART_SetConfig+0x17e>
 8006830:	231b      	movs	r3, #27
 8006832:	2218      	movs	r2, #24
 8006834:	189b      	adds	r3, r3, r2
 8006836:	19db      	adds	r3, r3, r7
 8006838:	2200      	movs	r2, #0
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	e055      	b.n	80068ea <UART_SetConfig+0x22a>
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a77      	ldr	r2, [pc, #476]	@ (8006a20 <UART_SetConfig+0x360>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d106      	bne.n	8006856 <UART_SetConfig+0x196>
 8006848:	231b      	movs	r3, #27
 800684a:	2218      	movs	r2, #24
 800684c:	189b      	adds	r3, r3, r2
 800684e:	19db      	adds	r3, r3, r7
 8006850:	2200      	movs	r2, #0
 8006852:	701a      	strb	r2, [r3, #0]
 8006854:	e049      	b.n	80068ea <UART_SetConfig+0x22a>
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a6b      	ldr	r2, [pc, #428]	@ (8006a08 <UART_SetConfig+0x348>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d13e      	bne.n	80068de <UART_SetConfig+0x21e>
 8006860:	4b6c      	ldr	r3, [pc, #432]	@ (8006a14 <UART_SetConfig+0x354>)
 8006862:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006864:	23c0      	movs	r3, #192	@ 0xc0
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	4013      	ands	r3, r2
 800686a:	22c0      	movs	r2, #192	@ 0xc0
 800686c:	0112      	lsls	r2, r2, #4
 800686e:	4293      	cmp	r3, r2
 8006870:	d027      	beq.n	80068c2 <UART_SetConfig+0x202>
 8006872:	22c0      	movs	r2, #192	@ 0xc0
 8006874:	0112      	lsls	r2, r2, #4
 8006876:	4293      	cmp	r3, r2
 8006878:	d82a      	bhi.n	80068d0 <UART_SetConfig+0x210>
 800687a:	2280      	movs	r2, #128	@ 0x80
 800687c:	0112      	lsls	r2, r2, #4
 800687e:	4293      	cmp	r3, r2
 8006880:	d011      	beq.n	80068a6 <UART_SetConfig+0x1e6>
 8006882:	2280      	movs	r2, #128	@ 0x80
 8006884:	0112      	lsls	r2, r2, #4
 8006886:	4293      	cmp	r3, r2
 8006888:	d822      	bhi.n	80068d0 <UART_SetConfig+0x210>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <UART_SetConfig+0x1d8>
 800688e:	2280      	movs	r2, #128	@ 0x80
 8006890:	00d2      	lsls	r2, r2, #3
 8006892:	4293      	cmp	r3, r2
 8006894:	d00e      	beq.n	80068b4 <UART_SetConfig+0x1f4>
 8006896:	e01b      	b.n	80068d0 <UART_SetConfig+0x210>
 8006898:	231b      	movs	r3, #27
 800689a:	2218      	movs	r2, #24
 800689c:	189b      	adds	r3, r3, r2
 800689e:	19db      	adds	r3, r3, r7
 80068a0:	2200      	movs	r2, #0
 80068a2:	701a      	strb	r2, [r3, #0]
 80068a4:	e021      	b.n	80068ea <UART_SetConfig+0x22a>
 80068a6:	231b      	movs	r3, #27
 80068a8:	2218      	movs	r2, #24
 80068aa:	189b      	adds	r3, r3, r2
 80068ac:	19db      	adds	r3, r3, r7
 80068ae:	2202      	movs	r2, #2
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	e01a      	b.n	80068ea <UART_SetConfig+0x22a>
 80068b4:	231b      	movs	r3, #27
 80068b6:	2218      	movs	r2, #24
 80068b8:	189b      	adds	r3, r3, r2
 80068ba:	19db      	adds	r3, r3, r7
 80068bc:	2204      	movs	r2, #4
 80068be:	701a      	strb	r2, [r3, #0]
 80068c0:	e013      	b.n	80068ea <UART_SetConfig+0x22a>
 80068c2:	231b      	movs	r3, #27
 80068c4:	2218      	movs	r2, #24
 80068c6:	189b      	adds	r3, r3, r2
 80068c8:	19db      	adds	r3, r3, r7
 80068ca:	2208      	movs	r2, #8
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	e00c      	b.n	80068ea <UART_SetConfig+0x22a>
 80068d0:	231b      	movs	r3, #27
 80068d2:	2218      	movs	r2, #24
 80068d4:	189b      	adds	r3, r3, r2
 80068d6:	19db      	adds	r3, r3, r7
 80068d8:	2210      	movs	r2, #16
 80068da:	701a      	strb	r2, [r3, #0]
 80068dc:	e005      	b.n	80068ea <UART_SetConfig+0x22a>
 80068de:	231b      	movs	r3, #27
 80068e0:	2218      	movs	r2, #24
 80068e2:	189b      	adds	r3, r3, r2
 80068e4:	19db      	adds	r3, r3, r7
 80068e6:	2210      	movs	r2, #16
 80068e8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a46      	ldr	r2, [pc, #280]	@ (8006a08 <UART_SetConfig+0x348>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d000      	beq.n	80068f6 <UART_SetConfig+0x236>
 80068f4:	e09a      	b.n	8006a2c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068f6:	231b      	movs	r3, #27
 80068f8:	2218      	movs	r2, #24
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	19db      	adds	r3, r3, r7
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b08      	cmp	r3, #8
 8006902:	d01d      	beq.n	8006940 <UART_SetConfig+0x280>
 8006904:	dc20      	bgt.n	8006948 <UART_SetConfig+0x288>
 8006906:	2b04      	cmp	r3, #4
 8006908:	d015      	beq.n	8006936 <UART_SetConfig+0x276>
 800690a:	dc1d      	bgt.n	8006948 <UART_SetConfig+0x288>
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <UART_SetConfig+0x256>
 8006910:	2b02      	cmp	r3, #2
 8006912:	d005      	beq.n	8006920 <UART_SetConfig+0x260>
 8006914:	e018      	b.n	8006948 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006916:	f7ff f86b 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 800691a:	0003      	movs	r3, r0
 800691c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800691e:	e01c      	b.n	800695a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006920:	4b3c      	ldr	r3, [pc, #240]	@ (8006a14 <UART_SetConfig+0x354>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2210      	movs	r2, #16
 8006926:	4013      	ands	r3, r2
 8006928:	d002      	beq.n	8006930 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800692a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a24 <UART_SetConfig+0x364>)
 800692c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800692e:	e014      	b.n	800695a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8006930:	4b3d      	ldr	r3, [pc, #244]	@ (8006a28 <UART_SetConfig+0x368>)
 8006932:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006934:	e011      	b.n	800695a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006936:	f7fe ffcb 	bl	80058d0 <HAL_RCC_GetSysClockFreq>
 800693a:	0003      	movs	r3, r0
 800693c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800693e:	e00c      	b.n	800695a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006940:	2380      	movs	r3, #128	@ 0x80
 8006942:	021b      	lsls	r3, r3, #8
 8006944:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006946:	e008      	b.n	800695a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8006948:	2300      	movs	r3, #0
 800694a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800694c:	231a      	movs	r3, #26
 800694e:	2218      	movs	r2, #24
 8006950:	189b      	adds	r3, r3, r2
 8006952:	19db      	adds	r3, r3, r7
 8006954:	2201      	movs	r2, #1
 8006956:	701a      	strb	r2, [r3, #0]
        break;
 8006958:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800695a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800695c:	2b00      	cmp	r3, #0
 800695e:	d100      	bne.n	8006962 <UART_SetConfig+0x2a2>
 8006960:	e133      	b.n	8006bca <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	685a      	ldr	r2, [r3, #4]
 8006966:	0013      	movs	r3, r2
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	189b      	adds	r3, r3, r2
 800696c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800696e:	429a      	cmp	r2, r3
 8006970:	d305      	bcc.n	800697e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006972:	69fb      	ldr	r3, [r7, #28]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800697a:	429a      	cmp	r2, r3
 800697c:	d906      	bls.n	800698c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800697e:	231a      	movs	r3, #26
 8006980:	2218      	movs	r2, #24
 8006982:	189b      	adds	r3, r3, r2
 8006984:	19db      	adds	r3, r3, r7
 8006986:	2201      	movs	r2, #1
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	e11e      	b.n	8006bca <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800698c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	2300      	movs	r3, #0
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	6939      	ldr	r1, [r7, #16]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	000b      	movs	r3, r1
 800699a:	0e1b      	lsrs	r3, r3, #24
 800699c:	0010      	movs	r0, r2
 800699e:	0205      	lsls	r5, r0, #8
 80069a0:	431d      	orrs	r5, r3
 80069a2:	000b      	movs	r3, r1
 80069a4:	021c      	lsls	r4, r3, #8
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	085b      	lsrs	r3, r3, #1
 80069ac:	60bb      	str	r3, [r7, #8]
 80069ae:	2300      	movs	r3, #0
 80069b0:	60fb      	str	r3, [r7, #12]
 80069b2:	68b8      	ldr	r0, [r7, #8]
 80069b4:	68f9      	ldr	r1, [r7, #12]
 80069b6:	1900      	adds	r0, r0, r4
 80069b8:	4169      	adcs	r1, r5
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	2300      	movs	r3, #0
 80069c2:	607b      	str	r3, [r7, #4]
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f7f9 fc76 	bl	80002b8 <__aeabi_uldivmod>
 80069cc:	0002      	movs	r2, r0
 80069ce:	000b      	movs	r3, r1
 80069d0:	0013      	movs	r3, r2
 80069d2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069d6:	23c0      	movs	r3, #192	@ 0xc0
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	429a      	cmp	r2, r3
 80069dc:	d309      	bcc.n	80069f2 <UART_SetConfig+0x332>
 80069de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069e0:	2380      	movs	r3, #128	@ 0x80
 80069e2:	035b      	lsls	r3, r3, #13
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d204      	bcs.n	80069f2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069ee:	60da      	str	r2, [r3, #12]
 80069f0:	e0eb      	b.n	8006bca <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80069f2:	231a      	movs	r3, #26
 80069f4:	2218      	movs	r2, #24
 80069f6:	189b      	adds	r3, r3, r2
 80069f8:	19db      	adds	r3, r3, r7
 80069fa:	2201      	movs	r2, #1
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	e0e4      	b.n	8006bca <UART_SetConfig+0x50a>
 8006a00:	efff69f3 	.word	0xefff69f3
 8006a04:	ffffcfff 	.word	0xffffcfff
 8006a08:	40004800 	.word	0x40004800
 8006a0c:	fffff4ff 	.word	0xfffff4ff
 8006a10:	40013800 	.word	0x40013800
 8006a14:	40021000 	.word	0x40021000
 8006a18:	40004400 	.word	0x40004400
 8006a1c:	40004c00 	.word	0x40004c00
 8006a20:	40005000 	.word	0x40005000
 8006a24:	003d0900 	.word	0x003d0900
 8006a28:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	69da      	ldr	r2, [r3, #28]
 8006a30:	2380      	movs	r3, #128	@ 0x80
 8006a32:	021b      	lsls	r3, r3, #8
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d000      	beq.n	8006a3a <UART_SetConfig+0x37a>
 8006a38:	e070      	b.n	8006b1c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8006a3a:	231b      	movs	r3, #27
 8006a3c:	2218      	movs	r2, #24
 8006a3e:	189b      	adds	r3, r3, r2
 8006a40:	19db      	adds	r3, r3, r7
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b08      	cmp	r3, #8
 8006a46:	d822      	bhi.n	8006a8e <UART_SetConfig+0x3ce>
 8006a48:	009a      	lsls	r2, r3, #2
 8006a4a:	4b67      	ldr	r3, [pc, #412]	@ (8006be8 <UART_SetConfig+0x528>)
 8006a4c:	18d3      	adds	r3, r2, r3
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a52:	f7fe ffcd 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8006a56:	0003      	movs	r3, r0
 8006a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a5a:	e021      	b.n	8006aa0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a5c:	f7fe ffde 	bl	8005a1c <HAL_RCC_GetPCLK2Freq>
 8006a60:	0003      	movs	r3, r0
 8006a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a64:	e01c      	b.n	8006aa0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a66:	4b61      	ldr	r3, [pc, #388]	@ (8006bec <UART_SetConfig+0x52c>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2210      	movs	r2, #16
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	d002      	beq.n	8006a76 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006a70:	4b5f      	ldr	r3, [pc, #380]	@ (8006bf0 <UART_SetConfig+0x530>)
 8006a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006a74:	e014      	b.n	8006aa0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8006a76:	4b5f      	ldr	r3, [pc, #380]	@ (8006bf4 <UART_SetConfig+0x534>)
 8006a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a7a:	e011      	b.n	8006aa0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a7c:	f7fe ff28 	bl	80058d0 <HAL_RCC_GetSysClockFreq>
 8006a80:	0003      	movs	r3, r0
 8006a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a84:	e00c      	b.n	8006aa0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a86:	2380      	movs	r3, #128	@ 0x80
 8006a88:	021b      	lsls	r3, r3, #8
 8006a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006a8c:	e008      	b.n	8006aa0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006a92:	231a      	movs	r3, #26
 8006a94:	2218      	movs	r2, #24
 8006a96:	189b      	adds	r3, r3, r2
 8006a98:	19db      	adds	r3, r3, r7
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	701a      	strb	r2, [r3, #0]
        break;
 8006a9e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d100      	bne.n	8006aa8 <UART_SetConfig+0x3e8>
 8006aa6:	e090      	b.n	8006bca <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aaa:	005a      	lsls	r2, r3, #1
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	18d2      	adds	r2, r2, r3
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	0019      	movs	r1, r3
 8006aba:	0010      	movs	r0, r2
 8006abc:	f7f9 fb36 	bl	800012c <__udivsi3>
 8006ac0:	0003      	movs	r3, r0
 8006ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ac6:	2b0f      	cmp	r3, #15
 8006ac8:	d921      	bls.n	8006b0e <UART_SetConfig+0x44e>
 8006aca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006acc:	2380      	movs	r3, #128	@ 0x80
 8006ace:	025b      	lsls	r3, r3, #9
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d21c      	bcs.n	8006b0e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad6:	b29a      	uxth	r2, r3
 8006ad8:	200e      	movs	r0, #14
 8006ada:	2418      	movs	r4, #24
 8006adc:	1903      	adds	r3, r0, r4
 8006ade:	19db      	adds	r3, r3, r7
 8006ae0:	210f      	movs	r1, #15
 8006ae2:	438a      	bics	r2, r1
 8006ae4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae8:	085b      	lsrs	r3, r3, #1
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	2207      	movs	r2, #7
 8006aee:	4013      	ands	r3, r2
 8006af0:	b299      	uxth	r1, r3
 8006af2:	1903      	adds	r3, r0, r4
 8006af4:	19db      	adds	r3, r3, r7
 8006af6:	1902      	adds	r2, r0, r4
 8006af8:	19d2      	adds	r2, r2, r7
 8006afa:	8812      	ldrh	r2, [r2, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	1902      	adds	r2, r0, r4
 8006b06:	19d2      	adds	r2, r2, r7
 8006b08:	8812      	ldrh	r2, [r2, #0]
 8006b0a:	60da      	str	r2, [r3, #12]
 8006b0c:	e05d      	b.n	8006bca <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006b0e:	231a      	movs	r3, #26
 8006b10:	2218      	movs	r2, #24
 8006b12:	189b      	adds	r3, r3, r2
 8006b14:	19db      	adds	r3, r3, r7
 8006b16:	2201      	movs	r2, #1
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	e056      	b.n	8006bca <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b1c:	231b      	movs	r3, #27
 8006b1e:	2218      	movs	r2, #24
 8006b20:	189b      	adds	r3, r3, r2
 8006b22:	19db      	adds	r3, r3, r7
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b08      	cmp	r3, #8
 8006b28:	d822      	bhi.n	8006b70 <UART_SetConfig+0x4b0>
 8006b2a:	009a      	lsls	r2, r3, #2
 8006b2c:	4b32      	ldr	r3, [pc, #200]	@ (8006bf8 <UART_SetConfig+0x538>)
 8006b2e:	18d3      	adds	r3, r2, r3
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b34:	f7fe ff5c 	bl	80059f0 <HAL_RCC_GetPCLK1Freq>
 8006b38:	0003      	movs	r3, r0
 8006b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b3c:	e021      	b.n	8006b82 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b3e:	f7fe ff6d 	bl	8005a1c <HAL_RCC_GetPCLK2Freq>
 8006b42:	0003      	movs	r3, r0
 8006b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b46:	e01c      	b.n	8006b82 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b48:	4b28      	ldr	r3, [pc, #160]	@ (8006bec <UART_SetConfig+0x52c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2210      	movs	r2, #16
 8006b4e:	4013      	ands	r3, r2
 8006b50:	d002      	beq.n	8006b58 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006b52:	4b27      	ldr	r3, [pc, #156]	@ (8006bf0 <UART_SetConfig+0x530>)
 8006b54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b56:	e014      	b.n	8006b82 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006b58:	4b26      	ldr	r3, [pc, #152]	@ (8006bf4 <UART_SetConfig+0x534>)
 8006b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b5c:	e011      	b.n	8006b82 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b5e:	f7fe feb7 	bl	80058d0 <HAL_RCC_GetSysClockFreq>
 8006b62:	0003      	movs	r3, r0
 8006b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b66:	e00c      	b.n	8006b82 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b68:	2380      	movs	r3, #128	@ 0x80
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006b6e:	e008      	b.n	8006b82 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006b74:	231a      	movs	r3, #26
 8006b76:	2218      	movs	r2, #24
 8006b78:	189b      	adds	r3, r3, r2
 8006b7a:	19db      	adds	r3, r3, r7
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	701a      	strb	r2, [r3, #0]
        break;
 8006b80:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d020      	beq.n	8006bca <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	085a      	lsrs	r2, r3, #1
 8006b8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b90:	18d2      	adds	r2, r2, r3
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	0019      	movs	r1, r3
 8006b98:	0010      	movs	r0, r2
 8006b9a:	f7f9 fac7 	bl	800012c <__udivsi3>
 8006b9e:	0003      	movs	r3, r0
 8006ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba4:	2b0f      	cmp	r3, #15
 8006ba6:	d90a      	bls.n	8006bbe <UART_SetConfig+0x4fe>
 8006ba8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006baa:	2380      	movs	r3, #128	@ 0x80
 8006bac:	025b      	lsls	r3, r3, #9
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d205      	bcs.n	8006bbe <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb4:	b29a      	uxth	r2, r3
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	60da      	str	r2, [r3, #12]
 8006bbc:	e005      	b.n	8006bca <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8006bbe:	231a      	movs	r3, #26
 8006bc0:	2218      	movs	r2, #24
 8006bc2:	189b      	adds	r3, r3, r2
 8006bc4:	19db      	adds	r3, r3, r7
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006bd6:	231a      	movs	r3, #26
 8006bd8:	2218      	movs	r2, #24
 8006bda:	189b      	adds	r3, r3, r2
 8006bdc:	19db      	adds	r3, r3, r7
 8006bde:	781b      	ldrb	r3, [r3, #0]
}
 8006be0:	0018      	movs	r0, r3
 8006be2:	46bd      	mov	sp, r7
 8006be4:	b00e      	add	sp, #56	@ 0x38
 8006be6:	bdb0      	pop	{r4, r5, r7, pc}
 8006be8:	080080b4 	.word	0x080080b4
 8006bec:	40021000 	.word	0x40021000
 8006bf0:	003d0900 	.word	0x003d0900
 8006bf4:	00f42400 	.word	0x00f42400
 8006bf8:	080080d8 	.word	0x080080d8

08006bfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b082      	sub	sp, #8
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c08:	2208      	movs	r2, #8
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	d00b      	beq.n	8006c26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	4a4a      	ldr	r2, [pc, #296]	@ (8006d40 <UART_AdvFeatureConfig+0x144>)
 8006c16:	4013      	ands	r3, r2
 8006c18:	0019      	movs	r1, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	4013      	ands	r3, r2
 8006c2e:	d00b      	beq.n	8006c48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	4a43      	ldr	r2, [pc, #268]	@ (8006d44 <UART_AdvFeatureConfig+0x148>)
 8006c38:	4013      	ands	r3, r2
 8006c3a:	0019      	movs	r1, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	2202      	movs	r2, #2
 8006c4e:	4013      	ands	r3, r2
 8006c50:	d00b      	beq.n	8006c6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	4a3b      	ldr	r2, [pc, #236]	@ (8006d48 <UART_AdvFeatureConfig+0x14c>)
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	0019      	movs	r1, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c6e:	2204      	movs	r2, #4
 8006c70:	4013      	ands	r3, r2
 8006c72:	d00b      	beq.n	8006c8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	4a34      	ldr	r2, [pc, #208]	@ (8006d4c <UART_AdvFeatureConfig+0x150>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	0019      	movs	r1, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c90:	2210      	movs	r2, #16
 8006c92:	4013      	ands	r3, r2
 8006c94:	d00b      	beq.n	8006cae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	4a2c      	ldr	r2, [pc, #176]	@ (8006d50 <UART_AdvFeatureConfig+0x154>)
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	0019      	movs	r1, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	d00b      	beq.n	8006cd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	4a25      	ldr	r2, [pc, #148]	@ (8006d54 <UART_AdvFeatureConfig+0x158>)
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	0019      	movs	r1, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	430a      	orrs	r2, r1
 8006cce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd4:	2240      	movs	r2, #64	@ 0x40
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	d01d      	beq.n	8006d16 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d58 <UART_AdvFeatureConfig+0x15c>)
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	0019      	movs	r1, r3
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cf6:	2380      	movs	r3, #128	@ 0x80
 8006cf8:	035b      	lsls	r3, r3, #13
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d10b      	bne.n	8006d16 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	4a15      	ldr	r2, [pc, #84]	@ (8006d5c <UART_AdvFeatureConfig+0x160>)
 8006d06:	4013      	ands	r3, r2
 8006d08:	0019      	movs	r1, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	430a      	orrs	r2, r1
 8006d14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1a:	2280      	movs	r2, #128	@ 0x80
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	d00b      	beq.n	8006d38 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	4a0e      	ldr	r2, [pc, #56]	@ (8006d60 <UART_AdvFeatureConfig+0x164>)
 8006d28:	4013      	ands	r3, r2
 8006d2a:	0019      	movs	r1, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	605a      	str	r2, [r3, #4]
  }
}
 8006d38:	46c0      	nop			@ (mov r8, r8)
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	b002      	add	sp, #8
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	ffff7fff 	.word	0xffff7fff
 8006d44:	fffdffff 	.word	0xfffdffff
 8006d48:	fffeffff 	.word	0xfffeffff
 8006d4c:	fffbffff 	.word	0xfffbffff
 8006d50:	ffffefff 	.word	0xffffefff
 8006d54:	ffffdfff 	.word	0xffffdfff
 8006d58:	ffefffff 	.word	0xffefffff
 8006d5c:	ff9fffff 	.word	0xff9fffff
 8006d60:	fff7ffff 	.word	0xfff7ffff

08006d64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b092      	sub	sp, #72	@ 0x48
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2284      	movs	r2, #132	@ 0x84
 8006d70:	2100      	movs	r1, #0
 8006d72:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d74:	f7fc f878 	bl	8002e68 <HAL_GetTick>
 8006d78:	0003      	movs	r3, r0
 8006d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2208      	movs	r2, #8
 8006d84:	4013      	ands	r3, r2
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	d12c      	bne.n	8006de4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d8c:	2280      	movs	r2, #128	@ 0x80
 8006d8e:	0391      	lsls	r1, r2, #14
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	4a46      	ldr	r2, [pc, #280]	@ (8006eac <UART_CheckIdleState+0x148>)
 8006d94:	9200      	str	r2, [sp, #0]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f000 f88c 	bl	8006eb4 <UART_WaitOnFlagUntilTimeout>
 8006d9c:	1e03      	subs	r3, r0, #0
 8006d9e:	d021      	beq.n	8006de4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006da0:	f3ef 8310 	mrs	r3, PRIMASK
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006da8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006daa:	2301      	movs	r3, #1
 8006dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db0:	f383 8810 	msr	PRIMASK, r3
}
 8006db4:	46c0      	nop			@ (mov r8, r8)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2180      	movs	r1, #128	@ 0x80
 8006dc2:	438a      	bics	r2, r1
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dcc:	f383 8810 	msr	PRIMASK, r3
}
 8006dd0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2278      	movs	r2, #120	@ 0x78
 8006ddc:	2100      	movs	r1, #0
 8006dde:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e05f      	b.n	8006ea4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2204      	movs	r2, #4
 8006dec:	4013      	ands	r3, r2
 8006dee:	2b04      	cmp	r3, #4
 8006df0:	d146      	bne.n	8006e80 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006df2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df4:	2280      	movs	r2, #128	@ 0x80
 8006df6:	03d1      	lsls	r1, r2, #15
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4a2c      	ldr	r2, [pc, #176]	@ (8006eac <UART_CheckIdleState+0x148>)
 8006dfc:	9200      	str	r2, [sp, #0]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f000 f858 	bl	8006eb4 <UART_WaitOnFlagUntilTimeout>
 8006e04:	1e03      	subs	r3, r0, #0
 8006e06:	d03b      	beq.n	8006e80 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e08:	f3ef 8310 	mrs	r3, PRIMASK
 8006e0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e12:	2301      	movs	r3, #1
 8006e14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	f383 8810 	msr	PRIMASK, r3
}
 8006e1c:	46c0      	nop			@ (mov r8, r8)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4921      	ldr	r1, [pc, #132]	@ (8006eb0 <UART_CheckIdleState+0x14c>)
 8006e2a:	400a      	ands	r2, r1
 8006e2c:	601a      	str	r2, [r3, #0]
 8006e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f383 8810 	msr	PRIMASK, r3
}
 8006e38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e3e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006e40:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e42:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e44:	2301      	movs	r3, #1
 8006e46:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	f383 8810 	msr	PRIMASK, r3
}
 8006e4e:	46c0      	nop			@ (mov r8, r8)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2101      	movs	r1, #1
 8006e5c:	438a      	bics	r2, r1
 8006e5e:	609a      	str	r2, [r3, #8]
 8006e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	f383 8810 	msr	PRIMASK, r3
}
 8006e6a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2280      	movs	r2, #128	@ 0x80
 8006e70:	2120      	movs	r1, #32
 8006e72:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2278      	movs	r2, #120	@ 0x78
 8006e78:	2100      	movs	r1, #0
 8006e7a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e011      	b.n	8006ea4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2220      	movs	r2, #32
 8006e84:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2280      	movs	r2, #128	@ 0x80
 8006e8a:	2120      	movs	r1, #32
 8006e8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2278      	movs	r2, #120	@ 0x78
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	0018      	movs	r0, r3
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	b010      	add	sp, #64	@ 0x40
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	01ffffff 	.word	0x01ffffff
 8006eb0:	fffffedf 	.word	0xfffffedf

08006eb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	1dfb      	adds	r3, r7, #7
 8006ec2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ec4:	e051      	b.n	8006f6a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec6:	69bb      	ldr	r3, [r7, #24]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	d04e      	beq.n	8006f6a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ecc:	f7fb ffcc 	bl	8002e68 <HAL_GetTick>
 8006ed0:	0002      	movs	r2, r0
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d302      	bcc.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e051      	b.n	8006f8a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2204      	movs	r2, #4
 8006eee:	4013      	ands	r3, r2
 8006ef0:	d03b      	beq.n	8006f6a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b80      	cmp	r3, #128	@ 0x80
 8006ef6:	d038      	beq.n	8006f6a <UART_WaitOnFlagUntilTimeout+0xb6>
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b40      	cmp	r3, #64	@ 0x40
 8006efc:	d035      	beq.n	8006f6a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	69db      	ldr	r3, [r3, #28]
 8006f04:	2208      	movs	r2, #8
 8006f06:	4013      	ands	r3, r2
 8006f08:	2b08      	cmp	r3, #8
 8006f0a:	d111      	bne.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	2208      	movs	r2, #8
 8006f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	0018      	movs	r0, r3
 8006f18:	f000 f83c 	bl	8006f94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2284      	movs	r2, #132	@ 0x84
 8006f20:	2108      	movs	r1, #8
 8006f22:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2278      	movs	r2, #120	@ 0x78
 8006f28:	2100      	movs	r1, #0
 8006f2a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e02c      	b.n	8006f8a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	69da      	ldr	r2, [r3, #28]
 8006f36:	2380      	movs	r3, #128	@ 0x80
 8006f38:	011b      	lsls	r3, r3, #4
 8006f3a:	401a      	ands	r2, r3
 8006f3c:	2380      	movs	r3, #128	@ 0x80
 8006f3e:	011b      	lsls	r3, r3, #4
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d112      	bne.n	8006f6a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2280      	movs	r2, #128	@ 0x80
 8006f4a:	0112      	lsls	r2, r2, #4
 8006f4c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	0018      	movs	r0, r3
 8006f52:	f000 f81f 	bl	8006f94 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2284      	movs	r2, #132	@ 0x84
 8006f5a:	2120      	movs	r1, #32
 8006f5c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2278      	movs	r2, #120	@ 0x78
 8006f62:	2100      	movs	r1, #0
 8006f64:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e00f      	b.n	8006f8a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	68ba      	ldr	r2, [r7, #8]
 8006f72:	4013      	ands	r3, r2
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	1ad3      	subs	r3, r2, r3
 8006f78:	425a      	negs	r2, r3
 8006f7a:	4153      	adcs	r3, r2
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	001a      	movs	r2, r3
 8006f80:	1dfb      	adds	r3, r7, #7
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d09e      	beq.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	0018      	movs	r0, r3
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	b004      	add	sp, #16
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08e      	sub	sp, #56	@ 0x38
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f9c:	f3ef 8310 	mrs	r3, PRIMASK
 8006fa0:	617b      	str	r3, [r7, #20]
  return(result);
 8006fa2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fa4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	f383 8810 	msr	PRIMASK, r3
}
 8006fb0:	46c0      	nop			@ (mov r8, r8)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4926      	ldr	r1, [pc, #152]	@ (8007058 <UART_EndRxTransfer+0xc4>)
 8006fbe:	400a      	ands	r2, r1
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	f383 8810 	msr	PRIMASK, r3
}
 8006fcc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fce:	f3ef 8310 	mrs	r3, PRIMASK
 8006fd2:	623b      	str	r3, [r7, #32]
  return(result);
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fd8:	2301      	movs	r3, #1
 8006fda:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fde:	f383 8810 	msr	PRIMASK, r3
}
 8006fe2:	46c0      	nop			@ (mov r8, r8)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2101      	movs	r1, #1
 8006ff0:	438a      	bics	r2, r1
 8006ff2:	609a      	str	r2, [r3, #8]
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffa:	f383 8810 	msr	PRIMASK, r3
}
 8006ffe:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007004:	2b01      	cmp	r3, #1
 8007006:	d118      	bne.n	800703a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007008:	f3ef 8310 	mrs	r3, PRIMASK
 800700c:	60bb      	str	r3, [r7, #8]
  return(result);
 800700e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007010:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007012:	2301      	movs	r3, #1
 8007014:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f383 8810 	msr	PRIMASK, r3
}
 800701c:	46c0      	nop			@ (mov r8, r8)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2110      	movs	r1, #16
 800702a:	438a      	bics	r2, r1
 800702c:	601a      	str	r2, [r3, #0]
 800702e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007030:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f383 8810 	msr	PRIMASK, r3
}
 8007038:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2280      	movs	r2, #128	@ 0x80
 800703e:	2120      	movs	r1, #32
 8007040:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800704e:	46c0      	nop			@ (mov r8, r8)
 8007050:	46bd      	mov	sp, r7
 8007052:	b00e      	add	sp, #56	@ 0x38
 8007054:	bd80      	pop	{r7, pc}
 8007056:	46c0      	nop			@ (mov r8, r8)
 8007058:	fffffedf 	.word	0xfffffedf

0800705c <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	1dbb      	adds	r3, r7, #6
 800706a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2280      	movs	r2, #128	@ 0x80
 8007070:	589b      	ldr	r3, [r3, r2]
 8007072:	2b20      	cmp	r3, #32
 8007074:	d000      	beq.n	8007078 <HAL_UARTEx_ReceiveToIdle+0x1c>
 8007076:	e109      	b.n	800728c <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_UARTEx_ReceiveToIdle+0x2a>
 800707e:	1dbb      	adds	r3, r7, #6
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e101      	b.n	800728e <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	689a      	ldr	r2, [r3, #8]
 800708e:	2380      	movs	r3, #128	@ 0x80
 8007090:	015b      	lsls	r3, r3, #5
 8007092:	429a      	cmp	r2, r3
 8007094:	d109      	bne.n	80070aa <HAL_UARTEx_ReceiveToIdle+0x4e>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d105      	bne.n	80070aa <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	2201      	movs	r2, #1
 80070a2:	4013      	ands	r3, r2
 80070a4:	d001      	beq.n	80070aa <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e0f1      	b.n	800728e <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2284      	movs	r2, #132	@ 0x84
 80070ae:	2100      	movs	r1, #0
 80070b0:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2280      	movs	r2, #128	@ 0x80
 80070b6:	2122      	movs	r1, #34	@ 0x22
 80070b8:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070c6:	f7fb fecf 	bl	8002e68 <HAL_GetTick>
 80070ca:	0003      	movs	r3, r0
 80070cc:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	1dba      	adds	r2, r7, #6
 80070d2:	2158      	movs	r1, #88	@ 0x58
 80070d4:	8812      	ldrh	r2, [r2, #0]
 80070d6:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	1dba      	adds	r2, r7, #6
 80070dc:	215a      	movs	r1, #90	@ 0x5a
 80070de:	8812      	ldrh	r2, [r2, #0]
 80070e0:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	2380      	movs	r3, #128	@ 0x80
 80070e8:	015b      	lsls	r3, r3, #5
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d10d      	bne.n	800710a <HAL_UARTEx_ReceiveToIdle+0xae>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d104      	bne.n	8007100 <HAL_UARTEx_ReceiveToIdle+0xa4>
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	225c      	movs	r2, #92	@ 0x5c
 80070fa:	4967      	ldr	r1, [pc, #412]	@ (8007298 <HAL_UARTEx_ReceiveToIdle+0x23c>)
 80070fc:	5299      	strh	r1, [r3, r2]
 80070fe:	e02e      	b.n	800715e <HAL_UARTEx_ReceiveToIdle+0x102>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	225c      	movs	r2, #92	@ 0x5c
 8007104:	21ff      	movs	r1, #255	@ 0xff
 8007106:	5299      	strh	r1, [r3, r2]
 8007108:	e029      	b.n	800715e <HAL_UARTEx_ReceiveToIdle+0x102>
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10d      	bne.n	800712e <HAL_UARTEx_ReceiveToIdle+0xd2>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d104      	bne.n	8007124 <HAL_UARTEx_ReceiveToIdle+0xc8>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	225c      	movs	r2, #92	@ 0x5c
 800711e:	21ff      	movs	r1, #255	@ 0xff
 8007120:	5299      	strh	r1, [r3, r2]
 8007122:	e01c      	b.n	800715e <HAL_UARTEx_ReceiveToIdle+0x102>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	225c      	movs	r2, #92	@ 0x5c
 8007128:	217f      	movs	r1, #127	@ 0x7f
 800712a:	5299      	strh	r1, [r3, r2]
 800712c:	e017      	b.n	800715e <HAL_UARTEx_ReceiveToIdle+0x102>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	689a      	ldr	r2, [r3, #8]
 8007132:	2380      	movs	r3, #128	@ 0x80
 8007134:	055b      	lsls	r3, r3, #21
 8007136:	429a      	cmp	r2, r3
 8007138:	d10d      	bne.n	8007156 <HAL_UARTEx_ReceiveToIdle+0xfa>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d104      	bne.n	800714c <HAL_UARTEx_ReceiveToIdle+0xf0>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	225c      	movs	r2, #92	@ 0x5c
 8007146:	217f      	movs	r1, #127	@ 0x7f
 8007148:	5299      	strh	r1, [r3, r2]
 800714a:	e008      	b.n	800715e <HAL_UARTEx_ReceiveToIdle+0x102>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	225c      	movs	r2, #92	@ 0x5c
 8007150:	213f      	movs	r1, #63	@ 0x3f
 8007152:	5299      	strh	r1, [r3, r2]
 8007154:	e003      	b.n	800715e <HAL_UARTEx_ReceiveToIdle+0x102>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	225c      	movs	r2, #92	@ 0x5c
 800715a:	2100      	movs	r1, #0
 800715c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800715e:	2312      	movs	r3, #18
 8007160:	18fb      	adds	r3, r7, r3
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	215c      	movs	r1, #92	@ 0x5c
 8007166:	5a52      	ldrh	r2, [r2, r1]
 8007168:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	689a      	ldr	r2, [r3, #8]
 800716e:	2380      	movs	r3, #128	@ 0x80
 8007170:	015b      	lsls	r3, r3, #5
 8007172:	429a      	cmp	r2, r3
 8007174:	d108      	bne.n	8007188 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d104      	bne.n	8007188 <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 800717e:	2300      	movs	r3, #0
 8007180:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	61bb      	str	r3, [r7, #24]
 8007186:	e003      	b.n	8007190 <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800718c:	2300      	movs	r3, #0
 800718e:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2200      	movs	r2, #0
 8007194:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007196:	e062      	b.n	800725e <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	69db      	ldr	r3, [r3, #28]
 800719e:	2210      	movs	r2, #16
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b10      	cmp	r3, #16
 80071a4:	d110      	bne.n	80071c8 <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2210      	movs	r2, #16
 80071ac:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d008      	beq.n	80071c8 <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2202      	movs	r2, #2
 80071ba:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2280      	movs	r2, #128	@ 0x80
 80071c0:	2120      	movs	r1, #32
 80071c2:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	e062      	b.n	800728e <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	2220      	movs	r2, #32
 80071d0:	4013      	ands	r3, r2
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	d12f      	bne.n	8007236 <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10e      	bne.n	80071fa <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2212      	movs	r2, #18
 80071e6:	18ba      	adds	r2, r7, r2
 80071e8:	8812      	ldrh	r2, [r2, #0]
 80071ea:	4013      	ands	r3, r2
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	3302      	adds	r3, #2
 80071f6:	61bb      	str	r3, [r7, #24]
 80071f8:	e00e      	b.n	8007218 <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2212      	movs	r2, #18
 8007204:	18ba      	adds	r2, r7, r2
 8007206:	8812      	ldrh	r2, [r2, #0]
 8007208:	b2d2      	uxtb	r2, r2
 800720a:	4013      	ands	r3, r2
 800720c:	b2da      	uxtb	r2, r3
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	3301      	adds	r3, #1
 8007216:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	3301      	adds	r3, #1
 800721e:	b29a      	uxth	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	225a      	movs	r2, #90	@ 0x5a
 8007228:	5a9b      	ldrh	r3, [r3, r2]
 800722a:	b29b      	uxth	r3, r3
 800722c:	3b01      	subs	r3, #1
 800722e:	b299      	uxth	r1, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	225a      	movs	r2, #90	@ 0x5a
 8007234:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007238:	3301      	adds	r3, #1
 800723a:	d010      	beq.n	800725e <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800723c:	f7fb fe14 	bl	8002e68 <HAL_GetTick>
 8007240:	0002      	movs	r2, r0
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007248:	429a      	cmp	r2, r3
 800724a:	d302      	bcc.n	8007252 <HAL_UARTEx_ReceiveToIdle+0x1f6>
 800724c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724e:	2b00      	cmp	r3, #0
 8007250:	d105      	bne.n	800725e <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2280      	movs	r2, #128	@ 0x80
 8007256:	2120      	movs	r1, #32
 8007258:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e017      	b.n	800728e <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	225a      	movs	r2, #90	@ 0x5a
 8007262:	5a9b      	ldrh	r3, [r3, r2]
 8007264:	b29b      	uxth	r3, r3
 8007266:	2b00      	cmp	r3, #0
 8007268:	d196      	bne.n	8007198 <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2258      	movs	r2, #88	@ 0x58
 800726e:	5a9a      	ldrh	r2, [r3, r2]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	215a      	movs	r1, #90	@ 0x5a
 8007274:	5a5b      	ldrh	r3, [r3, r1]
 8007276:	b29b      	uxth	r3, r3
 8007278:	1ad3      	subs	r3, r2, r3
 800727a:	b29a      	uxth	r2, r3
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2280      	movs	r2, #128	@ 0x80
 8007284:	2120      	movs	r1, #32
 8007286:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007288:	2300      	movs	r3, #0
 800728a:	e000      	b.n	800728e <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 800728c:	2302      	movs	r3, #2
  }
}
 800728e:	0018      	movs	r0, r3
 8007290:	46bd      	mov	sp, r7
 8007292:	b008      	add	sp, #32
 8007294:	bd80      	pop	{r7, pc}
 8007296:	46c0      	nop			@ (mov r8, r8)
 8007298:	000001ff 	.word	0x000001ff

0800729c <sniprintf>:
 800729c:	b40c      	push	{r2, r3}
 800729e:	b530      	push	{r4, r5, lr}
 80072a0:	4b18      	ldr	r3, [pc, #96]	@ (8007304 <sniprintf+0x68>)
 80072a2:	000c      	movs	r4, r1
 80072a4:	681d      	ldr	r5, [r3, #0]
 80072a6:	b09d      	sub	sp, #116	@ 0x74
 80072a8:	2900      	cmp	r1, #0
 80072aa:	da08      	bge.n	80072be <sniprintf+0x22>
 80072ac:	238b      	movs	r3, #139	@ 0x8b
 80072ae:	2001      	movs	r0, #1
 80072b0:	602b      	str	r3, [r5, #0]
 80072b2:	4240      	negs	r0, r0
 80072b4:	b01d      	add	sp, #116	@ 0x74
 80072b6:	bc30      	pop	{r4, r5}
 80072b8:	bc08      	pop	{r3}
 80072ba:	b002      	add	sp, #8
 80072bc:	4718      	bx	r3
 80072be:	2382      	movs	r3, #130	@ 0x82
 80072c0:	466a      	mov	r2, sp
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	8293      	strh	r3, [r2, #20]
 80072c6:	2300      	movs	r3, #0
 80072c8:	9002      	str	r0, [sp, #8]
 80072ca:	931b      	str	r3, [sp, #108]	@ 0x6c
 80072cc:	9006      	str	r0, [sp, #24]
 80072ce:	4299      	cmp	r1, r3
 80072d0:	d000      	beq.n	80072d4 <sniprintf+0x38>
 80072d2:	1e4b      	subs	r3, r1, #1
 80072d4:	9304      	str	r3, [sp, #16]
 80072d6:	9307      	str	r3, [sp, #28]
 80072d8:	2301      	movs	r3, #1
 80072da:	466a      	mov	r2, sp
 80072dc:	425b      	negs	r3, r3
 80072de:	82d3      	strh	r3, [r2, #22]
 80072e0:	0028      	movs	r0, r5
 80072e2:	ab21      	add	r3, sp, #132	@ 0x84
 80072e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80072e6:	a902      	add	r1, sp, #8
 80072e8:	9301      	str	r3, [sp, #4]
 80072ea:	f000 fa0f 	bl	800770c <_svfiprintf_r>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	da01      	bge.n	80072f6 <sniprintf+0x5a>
 80072f2:	238b      	movs	r3, #139	@ 0x8b
 80072f4:	602b      	str	r3, [r5, #0]
 80072f6:	2c00      	cmp	r4, #0
 80072f8:	d0dc      	beq.n	80072b4 <sniprintf+0x18>
 80072fa:	2200      	movs	r2, #0
 80072fc:	9b02      	ldr	r3, [sp, #8]
 80072fe:	701a      	strb	r2, [r3, #0]
 8007300:	e7d8      	b.n	80072b4 <sniprintf+0x18>
 8007302:	46c0      	nop			@ (mov r8, r8)
 8007304:	2000000c 	.word	0x2000000c

08007308 <siprintf>:
 8007308:	b40e      	push	{r1, r2, r3}
 800730a:	b510      	push	{r4, lr}
 800730c:	2400      	movs	r4, #0
 800730e:	490c      	ldr	r1, [pc, #48]	@ (8007340 <siprintf+0x38>)
 8007310:	b09d      	sub	sp, #116	@ 0x74
 8007312:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007314:	9002      	str	r0, [sp, #8]
 8007316:	9006      	str	r0, [sp, #24]
 8007318:	9107      	str	r1, [sp, #28]
 800731a:	9104      	str	r1, [sp, #16]
 800731c:	4809      	ldr	r0, [pc, #36]	@ (8007344 <siprintf+0x3c>)
 800731e:	490a      	ldr	r1, [pc, #40]	@ (8007348 <siprintf+0x40>)
 8007320:	cb04      	ldmia	r3!, {r2}
 8007322:	9105      	str	r1, [sp, #20]
 8007324:	6800      	ldr	r0, [r0, #0]
 8007326:	a902      	add	r1, sp, #8
 8007328:	9301      	str	r3, [sp, #4]
 800732a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800732c:	f000 f9ee 	bl	800770c <_svfiprintf_r>
 8007330:	9b02      	ldr	r3, [sp, #8]
 8007332:	701c      	strb	r4, [r3, #0]
 8007334:	b01d      	add	sp, #116	@ 0x74
 8007336:	bc10      	pop	{r4}
 8007338:	bc08      	pop	{r3}
 800733a:	b003      	add	sp, #12
 800733c:	4718      	bx	r3
 800733e:	46c0      	nop			@ (mov r8, r8)
 8007340:	7fffffff 	.word	0x7fffffff
 8007344:	2000000c 	.word	0x2000000c
 8007348:	ffff0208 	.word	0xffff0208

0800734c <_vsniprintf_r>:
 800734c:	b530      	push	{r4, r5, lr}
 800734e:	0005      	movs	r5, r0
 8007350:	0014      	movs	r4, r2
 8007352:	0008      	movs	r0, r1
 8007354:	001a      	movs	r2, r3
 8007356:	b09b      	sub	sp, #108	@ 0x6c
 8007358:	2c00      	cmp	r4, #0
 800735a:	da05      	bge.n	8007368 <_vsniprintf_r+0x1c>
 800735c:	238b      	movs	r3, #139	@ 0x8b
 800735e:	2001      	movs	r0, #1
 8007360:	602b      	str	r3, [r5, #0]
 8007362:	4240      	negs	r0, r0
 8007364:	b01b      	add	sp, #108	@ 0x6c
 8007366:	bd30      	pop	{r4, r5, pc}
 8007368:	2382      	movs	r3, #130	@ 0x82
 800736a:	4669      	mov	r1, sp
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	818b      	strh	r3, [r1, #12]
 8007370:	2100      	movs	r1, #0
 8007372:	9000      	str	r0, [sp, #0]
 8007374:	9119      	str	r1, [sp, #100]	@ 0x64
 8007376:	9004      	str	r0, [sp, #16]
 8007378:	428c      	cmp	r4, r1
 800737a:	d000      	beq.n	800737e <_vsniprintf_r+0x32>
 800737c:	1e61      	subs	r1, r4, #1
 800737e:	2301      	movs	r3, #1
 8007380:	9102      	str	r1, [sp, #8]
 8007382:	9105      	str	r1, [sp, #20]
 8007384:	4669      	mov	r1, sp
 8007386:	425b      	negs	r3, r3
 8007388:	81cb      	strh	r3, [r1, #14]
 800738a:	0028      	movs	r0, r5
 800738c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800738e:	f000 f9bd 	bl	800770c <_svfiprintf_r>
 8007392:	1c43      	adds	r3, r0, #1
 8007394:	da01      	bge.n	800739a <_vsniprintf_r+0x4e>
 8007396:	238b      	movs	r3, #139	@ 0x8b
 8007398:	602b      	str	r3, [r5, #0]
 800739a:	2c00      	cmp	r4, #0
 800739c:	d0e2      	beq.n	8007364 <_vsniprintf_r+0x18>
 800739e:	2200      	movs	r2, #0
 80073a0:	9b00      	ldr	r3, [sp, #0]
 80073a2:	701a      	strb	r2, [r3, #0]
 80073a4:	e7de      	b.n	8007364 <_vsniprintf_r+0x18>
	...

080073a8 <vsniprintf>:
 80073a8:	b513      	push	{r0, r1, r4, lr}
 80073aa:	4c04      	ldr	r4, [pc, #16]	@ (80073bc <vsniprintf+0x14>)
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	0013      	movs	r3, r2
 80073b0:	000a      	movs	r2, r1
 80073b2:	0001      	movs	r1, r0
 80073b4:	6820      	ldr	r0, [r4, #0]
 80073b6:	f7ff ffc9 	bl	800734c <_vsniprintf_r>
 80073ba:	bd16      	pop	{r1, r2, r4, pc}
 80073bc:	2000000c 	.word	0x2000000c

080073c0 <memset>:
 80073c0:	0003      	movs	r3, r0
 80073c2:	1882      	adds	r2, r0, r2
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d100      	bne.n	80073ca <memset+0xa>
 80073c8:	4770      	bx	lr
 80073ca:	7019      	strb	r1, [r3, #0]
 80073cc:	3301      	adds	r3, #1
 80073ce:	e7f9      	b.n	80073c4 <memset+0x4>

080073d0 <strstr>:
 80073d0:	780a      	ldrb	r2, [r1, #0]
 80073d2:	b530      	push	{r4, r5, lr}
 80073d4:	2a00      	cmp	r2, #0
 80073d6:	d10c      	bne.n	80073f2 <strstr+0x22>
 80073d8:	bd30      	pop	{r4, r5, pc}
 80073da:	429a      	cmp	r2, r3
 80073dc:	d108      	bne.n	80073f0 <strstr+0x20>
 80073de:	2301      	movs	r3, #1
 80073e0:	5ccc      	ldrb	r4, [r1, r3]
 80073e2:	2c00      	cmp	r4, #0
 80073e4:	d0f8      	beq.n	80073d8 <strstr+0x8>
 80073e6:	5cc5      	ldrb	r5, [r0, r3]
 80073e8:	42a5      	cmp	r5, r4
 80073ea:	d101      	bne.n	80073f0 <strstr+0x20>
 80073ec:	3301      	adds	r3, #1
 80073ee:	e7f7      	b.n	80073e0 <strstr+0x10>
 80073f0:	3001      	adds	r0, #1
 80073f2:	7803      	ldrb	r3, [r0, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d1f0      	bne.n	80073da <strstr+0xa>
 80073f8:	0018      	movs	r0, r3
 80073fa:	e7ed      	b.n	80073d8 <strstr+0x8>

080073fc <__errno>:
 80073fc:	4b01      	ldr	r3, [pc, #4]	@ (8007404 <__errno+0x8>)
 80073fe:	6818      	ldr	r0, [r3, #0]
 8007400:	4770      	bx	lr
 8007402:	46c0      	nop			@ (mov r8, r8)
 8007404:	2000000c 	.word	0x2000000c

08007408 <__libc_init_array>:
 8007408:	b570      	push	{r4, r5, r6, lr}
 800740a:	2600      	movs	r6, #0
 800740c:	4c0c      	ldr	r4, [pc, #48]	@ (8007440 <__libc_init_array+0x38>)
 800740e:	4d0d      	ldr	r5, [pc, #52]	@ (8007444 <__libc_init_array+0x3c>)
 8007410:	1b64      	subs	r4, r4, r5
 8007412:	10a4      	asrs	r4, r4, #2
 8007414:	42a6      	cmp	r6, r4
 8007416:	d109      	bne.n	800742c <__libc_init_array+0x24>
 8007418:	2600      	movs	r6, #0
 800741a:	f000 fc61 	bl	8007ce0 <_init>
 800741e:	4c0a      	ldr	r4, [pc, #40]	@ (8007448 <__libc_init_array+0x40>)
 8007420:	4d0a      	ldr	r5, [pc, #40]	@ (800744c <__libc_init_array+0x44>)
 8007422:	1b64      	subs	r4, r4, r5
 8007424:	10a4      	asrs	r4, r4, #2
 8007426:	42a6      	cmp	r6, r4
 8007428:	d105      	bne.n	8007436 <__libc_init_array+0x2e>
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	00b3      	lsls	r3, r6, #2
 800742e:	58eb      	ldr	r3, [r5, r3]
 8007430:	4798      	blx	r3
 8007432:	3601      	adds	r6, #1
 8007434:	e7ee      	b.n	8007414 <__libc_init_array+0xc>
 8007436:	00b3      	lsls	r3, r6, #2
 8007438:	58eb      	ldr	r3, [r5, r3]
 800743a:	4798      	blx	r3
 800743c:	3601      	adds	r6, #1
 800743e:	e7f2      	b.n	8007426 <__libc_init_array+0x1e>
 8007440:	08008138 	.word	0x08008138
 8007444:	08008138 	.word	0x08008138
 8007448:	0800813c 	.word	0x0800813c
 800744c:	08008138 	.word	0x08008138

08007450 <__retarget_lock_acquire_recursive>:
 8007450:	4770      	bx	lr

08007452 <__retarget_lock_release_recursive>:
 8007452:	4770      	bx	lr

08007454 <_free_r>:
 8007454:	b570      	push	{r4, r5, r6, lr}
 8007456:	0005      	movs	r5, r0
 8007458:	1e0c      	subs	r4, r1, #0
 800745a:	d010      	beq.n	800747e <_free_r+0x2a>
 800745c:	3c04      	subs	r4, #4
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	da00      	bge.n	8007466 <_free_r+0x12>
 8007464:	18e4      	adds	r4, r4, r3
 8007466:	0028      	movs	r0, r5
 8007468:	f000 f8e0 	bl	800762c <__malloc_lock>
 800746c:	4a1d      	ldr	r2, [pc, #116]	@ (80074e4 <_free_r+0x90>)
 800746e:	6813      	ldr	r3, [r2, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d105      	bne.n	8007480 <_free_r+0x2c>
 8007474:	6063      	str	r3, [r4, #4]
 8007476:	6014      	str	r4, [r2, #0]
 8007478:	0028      	movs	r0, r5
 800747a:	f000 f8df 	bl	800763c <__malloc_unlock>
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	42a3      	cmp	r3, r4
 8007482:	d908      	bls.n	8007496 <_free_r+0x42>
 8007484:	6820      	ldr	r0, [r4, #0]
 8007486:	1821      	adds	r1, r4, r0
 8007488:	428b      	cmp	r3, r1
 800748a:	d1f3      	bne.n	8007474 <_free_r+0x20>
 800748c:	6819      	ldr	r1, [r3, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	1809      	adds	r1, r1, r0
 8007492:	6021      	str	r1, [r4, #0]
 8007494:	e7ee      	b.n	8007474 <_free_r+0x20>
 8007496:	001a      	movs	r2, r3
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <_free_r+0x4e>
 800749e:	42a3      	cmp	r3, r4
 80074a0:	d9f9      	bls.n	8007496 <_free_r+0x42>
 80074a2:	6811      	ldr	r1, [r2, #0]
 80074a4:	1850      	adds	r0, r2, r1
 80074a6:	42a0      	cmp	r0, r4
 80074a8:	d10b      	bne.n	80074c2 <_free_r+0x6e>
 80074aa:	6820      	ldr	r0, [r4, #0]
 80074ac:	1809      	adds	r1, r1, r0
 80074ae:	1850      	adds	r0, r2, r1
 80074b0:	6011      	str	r1, [r2, #0]
 80074b2:	4283      	cmp	r3, r0
 80074b4:	d1e0      	bne.n	8007478 <_free_r+0x24>
 80074b6:	6818      	ldr	r0, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	1841      	adds	r1, r0, r1
 80074bc:	6011      	str	r1, [r2, #0]
 80074be:	6053      	str	r3, [r2, #4]
 80074c0:	e7da      	b.n	8007478 <_free_r+0x24>
 80074c2:	42a0      	cmp	r0, r4
 80074c4:	d902      	bls.n	80074cc <_free_r+0x78>
 80074c6:	230c      	movs	r3, #12
 80074c8:	602b      	str	r3, [r5, #0]
 80074ca:	e7d5      	b.n	8007478 <_free_r+0x24>
 80074cc:	6820      	ldr	r0, [r4, #0]
 80074ce:	1821      	adds	r1, r4, r0
 80074d0:	428b      	cmp	r3, r1
 80074d2:	d103      	bne.n	80074dc <_free_r+0x88>
 80074d4:	6819      	ldr	r1, [r3, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	1809      	adds	r1, r1, r0
 80074da:	6021      	str	r1, [r4, #0]
 80074dc:	6063      	str	r3, [r4, #4]
 80074de:	6054      	str	r4, [r2, #4]
 80074e0:	e7ca      	b.n	8007478 <_free_r+0x24>
 80074e2:	46c0      	nop			@ (mov r8, r8)
 80074e4:	200003c4 	.word	0x200003c4

080074e8 <sbrk_aligned>:
 80074e8:	b570      	push	{r4, r5, r6, lr}
 80074ea:	4e0f      	ldr	r6, [pc, #60]	@ (8007528 <sbrk_aligned+0x40>)
 80074ec:	000d      	movs	r5, r1
 80074ee:	6831      	ldr	r1, [r6, #0]
 80074f0:	0004      	movs	r4, r0
 80074f2:	2900      	cmp	r1, #0
 80074f4:	d102      	bne.n	80074fc <sbrk_aligned+0x14>
 80074f6:	f000 fb95 	bl	8007c24 <_sbrk_r>
 80074fa:	6030      	str	r0, [r6, #0]
 80074fc:	0029      	movs	r1, r5
 80074fe:	0020      	movs	r0, r4
 8007500:	f000 fb90 	bl	8007c24 <_sbrk_r>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d103      	bne.n	8007510 <sbrk_aligned+0x28>
 8007508:	2501      	movs	r5, #1
 800750a:	426d      	negs	r5, r5
 800750c:	0028      	movs	r0, r5
 800750e:	bd70      	pop	{r4, r5, r6, pc}
 8007510:	2303      	movs	r3, #3
 8007512:	1cc5      	adds	r5, r0, #3
 8007514:	439d      	bics	r5, r3
 8007516:	42a8      	cmp	r0, r5
 8007518:	d0f8      	beq.n	800750c <sbrk_aligned+0x24>
 800751a:	1a29      	subs	r1, r5, r0
 800751c:	0020      	movs	r0, r4
 800751e:	f000 fb81 	bl	8007c24 <_sbrk_r>
 8007522:	3001      	adds	r0, #1
 8007524:	d1f2      	bne.n	800750c <sbrk_aligned+0x24>
 8007526:	e7ef      	b.n	8007508 <sbrk_aligned+0x20>
 8007528:	200003c0 	.word	0x200003c0

0800752c <_malloc_r>:
 800752c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800752e:	2203      	movs	r2, #3
 8007530:	1ccb      	adds	r3, r1, #3
 8007532:	4393      	bics	r3, r2
 8007534:	3308      	adds	r3, #8
 8007536:	0005      	movs	r5, r0
 8007538:	001f      	movs	r7, r3
 800753a:	2b0c      	cmp	r3, #12
 800753c:	d234      	bcs.n	80075a8 <_malloc_r+0x7c>
 800753e:	270c      	movs	r7, #12
 8007540:	42b9      	cmp	r1, r7
 8007542:	d833      	bhi.n	80075ac <_malloc_r+0x80>
 8007544:	0028      	movs	r0, r5
 8007546:	f000 f871 	bl	800762c <__malloc_lock>
 800754a:	4e37      	ldr	r6, [pc, #220]	@ (8007628 <_malloc_r+0xfc>)
 800754c:	6833      	ldr	r3, [r6, #0]
 800754e:	001c      	movs	r4, r3
 8007550:	2c00      	cmp	r4, #0
 8007552:	d12f      	bne.n	80075b4 <_malloc_r+0x88>
 8007554:	0039      	movs	r1, r7
 8007556:	0028      	movs	r0, r5
 8007558:	f7ff ffc6 	bl	80074e8 <sbrk_aligned>
 800755c:	0004      	movs	r4, r0
 800755e:	1c43      	adds	r3, r0, #1
 8007560:	d15f      	bne.n	8007622 <_malloc_r+0xf6>
 8007562:	6834      	ldr	r4, [r6, #0]
 8007564:	9400      	str	r4, [sp, #0]
 8007566:	9b00      	ldr	r3, [sp, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d14a      	bne.n	8007602 <_malloc_r+0xd6>
 800756c:	2c00      	cmp	r4, #0
 800756e:	d052      	beq.n	8007616 <_malloc_r+0xea>
 8007570:	6823      	ldr	r3, [r4, #0]
 8007572:	0028      	movs	r0, r5
 8007574:	18e3      	adds	r3, r4, r3
 8007576:	9900      	ldr	r1, [sp, #0]
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	f000 fb53 	bl	8007c24 <_sbrk_r>
 800757e:	9b01      	ldr	r3, [sp, #4]
 8007580:	4283      	cmp	r3, r0
 8007582:	d148      	bne.n	8007616 <_malloc_r+0xea>
 8007584:	6823      	ldr	r3, [r4, #0]
 8007586:	0028      	movs	r0, r5
 8007588:	1aff      	subs	r7, r7, r3
 800758a:	0039      	movs	r1, r7
 800758c:	f7ff ffac 	bl	80074e8 <sbrk_aligned>
 8007590:	3001      	adds	r0, #1
 8007592:	d040      	beq.n	8007616 <_malloc_r+0xea>
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	19db      	adds	r3, r3, r7
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	6833      	ldr	r3, [r6, #0]
 800759c:	685a      	ldr	r2, [r3, #4]
 800759e:	2a00      	cmp	r2, #0
 80075a0:	d133      	bne.n	800760a <_malloc_r+0xde>
 80075a2:	9b00      	ldr	r3, [sp, #0]
 80075a4:	6033      	str	r3, [r6, #0]
 80075a6:	e019      	b.n	80075dc <_malloc_r+0xb0>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	dac9      	bge.n	8007540 <_malloc_r+0x14>
 80075ac:	230c      	movs	r3, #12
 80075ae:	602b      	str	r3, [r5, #0]
 80075b0:	2000      	movs	r0, #0
 80075b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80075b4:	6821      	ldr	r1, [r4, #0]
 80075b6:	1bc9      	subs	r1, r1, r7
 80075b8:	d420      	bmi.n	80075fc <_malloc_r+0xd0>
 80075ba:	290b      	cmp	r1, #11
 80075bc:	d90a      	bls.n	80075d4 <_malloc_r+0xa8>
 80075be:	19e2      	adds	r2, r4, r7
 80075c0:	6027      	str	r7, [r4, #0]
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	d104      	bne.n	80075d0 <_malloc_r+0xa4>
 80075c6:	6032      	str	r2, [r6, #0]
 80075c8:	6863      	ldr	r3, [r4, #4]
 80075ca:	6011      	str	r1, [r2, #0]
 80075cc:	6053      	str	r3, [r2, #4]
 80075ce:	e005      	b.n	80075dc <_malloc_r+0xb0>
 80075d0:	605a      	str	r2, [r3, #4]
 80075d2:	e7f9      	b.n	80075c8 <_malloc_r+0x9c>
 80075d4:	6862      	ldr	r2, [r4, #4]
 80075d6:	42a3      	cmp	r3, r4
 80075d8:	d10e      	bne.n	80075f8 <_malloc_r+0xcc>
 80075da:	6032      	str	r2, [r6, #0]
 80075dc:	0028      	movs	r0, r5
 80075de:	f000 f82d 	bl	800763c <__malloc_unlock>
 80075e2:	0020      	movs	r0, r4
 80075e4:	2207      	movs	r2, #7
 80075e6:	300b      	adds	r0, #11
 80075e8:	1d23      	adds	r3, r4, #4
 80075ea:	4390      	bics	r0, r2
 80075ec:	1ac2      	subs	r2, r0, r3
 80075ee:	4298      	cmp	r0, r3
 80075f0:	d0df      	beq.n	80075b2 <_malloc_r+0x86>
 80075f2:	1a1b      	subs	r3, r3, r0
 80075f4:	50a3      	str	r3, [r4, r2]
 80075f6:	e7dc      	b.n	80075b2 <_malloc_r+0x86>
 80075f8:	605a      	str	r2, [r3, #4]
 80075fa:	e7ef      	b.n	80075dc <_malloc_r+0xb0>
 80075fc:	0023      	movs	r3, r4
 80075fe:	6864      	ldr	r4, [r4, #4]
 8007600:	e7a6      	b.n	8007550 <_malloc_r+0x24>
 8007602:	9c00      	ldr	r4, [sp, #0]
 8007604:	6863      	ldr	r3, [r4, #4]
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	e7ad      	b.n	8007566 <_malloc_r+0x3a>
 800760a:	001a      	movs	r2, r3
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	42a3      	cmp	r3, r4
 8007610:	d1fb      	bne.n	800760a <_malloc_r+0xde>
 8007612:	2300      	movs	r3, #0
 8007614:	e7da      	b.n	80075cc <_malloc_r+0xa0>
 8007616:	230c      	movs	r3, #12
 8007618:	0028      	movs	r0, r5
 800761a:	602b      	str	r3, [r5, #0]
 800761c:	f000 f80e 	bl	800763c <__malloc_unlock>
 8007620:	e7c6      	b.n	80075b0 <_malloc_r+0x84>
 8007622:	6007      	str	r7, [r0, #0]
 8007624:	e7da      	b.n	80075dc <_malloc_r+0xb0>
 8007626:	46c0      	nop			@ (mov r8, r8)
 8007628:	200003c4 	.word	0x200003c4

0800762c <__malloc_lock>:
 800762c:	b510      	push	{r4, lr}
 800762e:	4802      	ldr	r0, [pc, #8]	@ (8007638 <__malloc_lock+0xc>)
 8007630:	f7ff ff0e 	bl	8007450 <__retarget_lock_acquire_recursive>
 8007634:	bd10      	pop	{r4, pc}
 8007636:	46c0      	nop			@ (mov r8, r8)
 8007638:	200003bc 	.word	0x200003bc

0800763c <__malloc_unlock>:
 800763c:	b510      	push	{r4, lr}
 800763e:	4802      	ldr	r0, [pc, #8]	@ (8007648 <__malloc_unlock+0xc>)
 8007640:	f7ff ff07 	bl	8007452 <__retarget_lock_release_recursive>
 8007644:	bd10      	pop	{r4, pc}
 8007646:	46c0      	nop			@ (mov r8, r8)
 8007648:	200003bc 	.word	0x200003bc

0800764c <__ssputs_r>:
 800764c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800764e:	688e      	ldr	r6, [r1, #8]
 8007650:	b085      	sub	sp, #20
 8007652:	001f      	movs	r7, r3
 8007654:	000c      	movs	r4, r1
 8007656:	680b      	ldr	r3, [r1, #0]
 8007658:	9002      	str	r0, [sp, #8]
 800765a:	9203      	str	r2, [sp, #12]
 800765c:	42be      	cmp	r6, r7
 800765e:	d830      	bhi.n	80076c2 <__ssputs_r+0x76>
 8007660:	210c      	movs	r1, #12
 8007662:	5e62      	ldrsh	r2, [r4, r1]
 8007664:	2190      	movs	r1, #144	@ 0x90
 8007666:	00c9      	lsls	r1, r1, #3
 8007668:	420a      	tst	r2, r1
 800766a:	d028      	beq.n	80076be <__ssputs_r+0x72>
 800766c:	2003      	movs	r0, #3
 800766e:	6921      	ldr	r1, [r4, #16]
 8007670:	1a5b      	subs	r3, r3, r1
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	6963      	ldr	r3, [r4, #20]
 8007676:	4343      	muls	r3, r0
 8007678:	9801      	ldr	r0, [sp, #4]
 800767a:	0fdd      	lsrs	r5, r3, #31
 800767c:	18ed      	adds	r5, r5, r3
 800767e:	1c7b      	adds	r3, r7, #1
 8007680:	181b      	adds	r3, r3, r0
 8007682:	106d      	asrs	r5, r5, #1
 8007684:	42ab      	cmp	r3, r5
 8007686:	d900      	bls.n	800768a <__ssputs_r+0x3e>
 8007688:	001d      	movs	r5, r3
 800768a:	0552      	lsls	r2, r2, #21
 800768c:	d528      	bpl.n	80076e0 <__ssputs_r+0x94>
 800768e:	0029      	movs	r1, r5
 8007690:	9802      	ldr	r0, [sp, #8]
 8007692:	f7ff ff4b 	bl	800752c <_malloc_r>
 8007696:	1e06      	subs	r6, r0, #0
 8007698:	d02c      	beq.n	80076f4 <__ssputs_r+0xa8>
 800769a:	9a01      	ldr	r2, [sp, #4]
 800769c:	6921      	ldr	r1, [r4, #16]
 800769e:	f000 fade 	bl	8007c5e <memcpy>
 80076a2:	89a2      	ldrh	r2, [r4, #12]
 80076a4:	4b18      	ldr	r3, [pc, #96]	@ (8007708 <__ssputs_r+0xbc>)
 80076a6:	401a      	ands	r2, r3
 80076a8:	2380      	movs	r3, #128	@ 0x80
 80076aa:	4313      	orrs	r3, r2
 80076ac:	81a3      	strh	r3, [r4, #12]
 80076ae:	9b01      	ldr	r3, [sp, #4]
 80076b0:	6126      	str	r6, [r4, #16]
 80076b2:	18f6      	adds	r6, r6, r3
 80076b4:	6026      	str	r6, [r4, #0]
 80076b6:	003e      	movs	r6, r7
 80076b8:	6165      	str	r5, [r4, #20]
 80076ba:	1aed      	subs	r5, r5, r3
 80076bc:	60a5      	str	r5, [r4, #8]
 80076be:	42be      	cmp	r6, r7
 80076c0:	d900      	bls.n	80076c4 <__ssputs_r+0x78>
 80076c2:	003e      	movs	r6, r7
 80076c4:	0032      	movs	r2, r6
 80076c6:	9903      	ldr	r1, [sp, #12]
 80076c8:	6820      	ldr	r0, [r4, #0]
 80076ca:	f000 fa99 	bl	8007c00 <memmove>
 80076ce:	2000      	movs	r0, #0
 80076d0:	68a3      	ldr	r3, [r4, #8]
 80076d2:	1b9b      	subs	r3, r3, r6
 80076d4:	60a3      	str	r3, [r4, #8]
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	199b      	adds	r3, r3, r6
 80076da:	6023      	str	r3, [r4, #0]
 80076dc:	b005      	add	sp, #20
 80076de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e0:	002a      	movs	r2, r5
 80076e2:	9802      	ldr	r0, [sp, #8]
 80076e4:	f000 fac4 	bl	8007c70 <_realloc_r>
 80076e8:	1e06      	subs	r6, r0, #0
 80076ea:	d1e0      	bne.n	80076ae <__ssputs_r+0x62>
 80076ec:	6921      	ldr	r1, [r4, #16]
 80076ee:	9802      	ldr	r0, [sp, #8]
 80076f0:	f7ff feb0 	bl	8007454 <_free_r>
 80076f4:	230c      	movs	r3, #12
 80076f6:	2001      	movs	r0, #1
 80076f8:	9a02      	ldr	r2, [sp, #8]
 80076fa:	4240      	negs	r0, r0
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	89a2      	ldrh	r2, [r4, #12]
 8007700:	3334      	adds	r3, #52	@ 0x34
 8007702:	4313      	orrs	r3, r2
 8007704:	81a3      	strh	r3, [r4, #12]
 8007706:	e7e9      	b.n	80076dc <__ssputs_r+0x90>
 8007708:	fffffb7f 	.word	0xfffffb7f

0800770c <_svfiprintf_r>:
 800770c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800770e:	b0a1      	sub	sp, #132	@ 0x84
 8007710:	9003      	str	r0, [sp, #12]
 8007712:	001d      	movs	r5, r3
 8007714:	898b      	ldrh	r3, [r1, #12]
 8007716:	000f      	movs	r7, r1
 8007718:	0016      	movs	r6, r2
 800771a:	061b      	lsls	r3, r3, #24
 800771c:	d511      	bpl.n	8007742 <_svfiprintf_r+0x36>
 800771e:	690b      	ldr	r3, [r1, #16]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10e      	bne.n	8007742 <_svfiprintf_r+0x36>
 8007724:	2140      	movs	r1, #64	@ 0x40
 8007726:	f7ff ff01 	bl	800752c <_malloc_r>
 800772a:	6038      	str	r0, [r7, #0]
 800772c:	6138      	str	r0, [r7, #16]
 800772e:	2800      	cmp	r0, #0
 8007730:	d105      	bne.n	800773e <_svfiprintf_r+0x32>
 8007732:	230c      	movs	r3, #12
 8007734:	9a03      	ldr	r2, [sp, #12]
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	2001      	movs	r0, #1
 800773a:	4240      	negs	r0, r0
 800773c:	e0cf      	b.n	80078de <_svfiprintf_r+0x1d2>
 800773e:	2340      	movs	r3, #64	@ 0x40
 8007740:	617b      	str	r3, [r7, #20]
 8007742:	2300      	movs	r3, #0
 8007744:	ac08      	add	r4, sp, #32
 8007746:	6163      	str	r3, [r4, #20]
 8007748:	3320      	adds	r3, #32
 800774a:	7663      	strb	r3, [r4, #25]
 800774c:	3310      	adds	r3, #16
 800774e:	76a3      	strb	r3, [r4, #26]
 8007750:	9507      	str	r5, [sp, #28]
 8007752:	0035      	movs	r5, r6
 8007754:	782b      	ldrb	r3, [r5, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <_svfiprintf_r+0x52>
 800775a:	2b25      	cmp	r3, #37	@ 0x25
 800775c:	d148      	bne.n	80077f0 <_svfiprintf_r+0xe4>
 800775e:	1bab      	subs	r3, r5, r6
 8007760:	9305      	str	r3, [sp, #20]
 8007762:	42b5      	cmp	r5, r6
 8007764:	d00b      	beq.n	800777e <_svfiprintf_r+0x72>
 8007766:	0032      	movs	r2, r6
 8007768:	0039      	movs	r1, r7
 800776a:	9803      	ldr	r0, [sp, #12]
 800776c:	f7ff ff6e 	bl	800764c <__ssputs_r>
 8007770:	3001      	adds	r0, #1
 8007772:	d100      	bne.n	8007776 <_svfiprintf_r+0x6a>
 8007774:	e0ae      	b.n	80078d4 <_svfiprintf_r+0x1c8>
 8007776:	6963      	ldr	r3, [r4, #20]
 8007778:	9a05      	ldr	r2, [sp, #20]
 800777a:	189b      	adds	r3, r3, r2
 800777c:	6163      	str	r3, [r4, #20]
 800777e:	782b      	ldrb	r3, [r5, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d100      	bne.n	8007786 <_svfiprintf_r+0x7a>
 8007784:	e0a6      	b.n	80078d4 <_svfiprintf_r+0x1c8>
 8007786:	2201      	movs	r2, #1
 8007788:	2300      	movs	r3, #0
 800778a:	4252      	negs	r2, r2
 800778c:	6062      	str	r2, [r4, #4]
 800778e:	a904      	add	r1, sp, #16
 8007790:	3254      	adds	r2, #84	@ 0x54
 8007792:	1852      	adds	r2, r2, r1
 8007794:	1c6e      	adds	r6, r5, #1
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	60e3      	str	r3, [r4, #12]
 800779a:	60a3      	str	r3, [r4, #8]
 800779c:	7013      	strb	r3, [r2, #0]
 800779e:	65a3      	str	r3, [r4, #88]	@ 0x58
 80077a0:	4b54      	ldr	r3, [pc, #336]	@ (80078f4 <_svfiprintf_r+0x1e8>)
 80077a2:	2205      	movs	r2, #5
 80077a4:	0018      	movs	r0, r3
 80077a6:	7831      	ldrb	r1, [r6, #0]
 80077a8:	9305      	str	r3, [sp, #20]
 80077aa:	f000 fa4d 	bl	8007c48 <memchr>
 80077ae:	1c75      	adds	r5, r6, #1
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d11f      	bne.n	80077f4 <_svfiprintf_r+0xe8>
 80077b4:	6822      	ldr	r2, [r4, #0]
 80077b6:	06d3      	lsls	r3, r2, #27
 80077b8:	d504      	bpl.n	80077c4 <_svfiprintf_r+0xb8>
 80077ba:	2353      	movs	r3, #83	@ 0x53
 80077bc:	a904      	add	r1, sp, #16
 80077be:	185b      	adds	r3, r3, r1
 80077c0:	2120      	movs	r1, #32
 80077c2:	7019      	strb	r1, [r3, #0]
 80077c4:	0713      	lsls	r3, r2, #28
 80077c6:	d504      	bpl.n	80077d2 <_svfiprintf_r+0xc6>
 80077c8:	2353      	movs	r3, #83	@ 0x53
 80077ca:	a904      	add	r1, sp, #16
 80077cc:	185b      	adds	r3, r3, r1
 80077ce:	212b      	movs	r1, #43	@ 0x2b
 80077d0:	7019      	strb	r1, [r3, #0]
 80077d2:	7833      	ldrb	r3, [r6, #0]
 80077d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80077d6:	d016      	beq.n	8007806 <_svfiprintf_r+0xfa>
 80077d8:	0035      	movs	r5, r6
 80077da:	2100      	movs	r1, #0
 80077dc:	200a      	movs	r0, #10
 80077de:	68e3      	ldr	r3, [r4, #12]
 80077e0:	782a      	ldrb	r2, [r5, #0]
 80077e2:	1c6e      	adds	r6, r5, #1
 80077e4:	3a30      	subs	r2, #48	@ 0x30
 80077e6:	2a09      	cmp	r2, #9
 80077e8:	d950      	bls.n	800788c <_svfiprintf_r+0x180>
 80077ea:	2900      	cmp	r1, #0
 80077ec:	d111      	bne.n	8007812 <_svfiprintf_r+0x106>
 80077ee:	e017      	b.n	8007820 <_svfiprintf_r+0x114>
 80077f0:	3501      	adds	r5, #1
 80077f2:	e7af      	b.n	8007754 <_svfiprintf_r+0x48>
 80077f4:	9b05      	ldr	r3, [sp, #20]
 80077f6:	6822      	ldr	r2, [r4, #0]
 80077f8:	1ac0      	subs	r0, r0, r3
 80077fa:	2301      	movs	r3, #1
 80077fc:	4083      	lsls	r3, r0
 80077fe:	4313      	orrs	r3, r2
 8007800:	002e      	movs	r6, r5
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	e7cc      	b.n	80077a0 <_svfiprintf_r+0x94>
 8007806:	9b07      	ldr	r3, [sp, #28]
 8007808:	1d19      	adds	r1, r3, #4
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	9107      	str	r1, [sp, #28]
 800780e:	2b00      	cmp	r3, #0
 8007810:	db01      	blt.n	8007816 <_svfiprintf_r+0x10a>
 8007812:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007814:	e004      	b.n	8007820 <_svfiprintf_r+0x114>
 8007816:	425b      	negs	r3, r3
 8007818:	60e3      	str	r3, [r4, #12]
 800781a:	2302      	movs	r3, #2
 800781c:	4313      	orrs	r3, r2
 800781e:	6023      	str	r3, [r4, #0]
 8007820:	782b      	ldrb	r3, [r5, #0]
 8007822:	2b2e      	cmp	r3, #46	@ 0x2e
 8007824:	d10c      	bne.n	8007840 <_svfiprintf_r+0x134>
 8007826:	786b      	ldrb	r3, [r5, #1]
 8007828:	2b2a      	cmp	r3, #42	@ 0x2a
 800782a:	d134      	bne.n	8007896 <_svfiprintf_r+0x18a>
 800782c:	9b07      	ldr	r3, [sp, #28]
 800782e:	3502      	adds	r5, #2
 8007830:	1d1a      	adds	r2, r3, #4
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	9207      	str	r2, [sp, #28]
 8007836:	2b00      	cmp	r3, #0
 8007838:	da01      	bge.n	800783e <_svfiprintf_r+0x132>
 800783a:	2301      	movs	r3, #1
 800783c:	425b      	negs	r3, r3
 800783e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007840:	4e2d      	ldr	r6, [pc, #180]	@ (80078f8 <_svfiprintf_r+0x1ec>)
 8007842:	2203      	movs	r2, #3
 8007844:	0030      	movs	r0, r6
 8007846:	7829      	ldrb	r1, [r5, #0]
 8007848:	f000 f9fe 	bl	8007c48 <memchr>
 800784c:	2800      	cmp	r0, #0
 800784e:	d006      	beq.n	800785e <_svfiprintf_r+0x152>
 8007850:	2340      	movs	r3, #64	@ 0x40
 8007852:	1b80      	subs	r0, r0, r6
 8007854:	4083      	lsls	r3, r0
 8007856:	6822      	ldr	r2, [r4, #0]
 8007858:	3501      	adds	r5, #1
 800785a:	4313      	orrs	r3, r2
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	7829      	ldrb	r1, [r5, #0]
 8007860:	2206      	movs	r2, #6
 8007862:	4826      	ldr	r0, [pc, #152]	@ (80078fc <_svfiprintf_r+0x1f0>)
 8007864:	1c6e      	adds	r6, r5, #1
 8007866:	7621      	strb	r1, [r4, #24]
 8007868:	f000 f9ee 	bl	8007c48 <memchr>
 800786c:	2800      	cmp	r0, #0
 800786e:	d038      	beq.n	80078e2 <_svfiprintf_r+0x1d6>
 8007870:	4b23      	ldr	r3, [pc, #140]	@ (8007900 <_svfiprintf_r+0x1f4>)
 8007872:	2b00      	cmp	r3, #0
 8007874:	d122      	bne.n	80078bc <_svfiprintf_r+0x1b0>
 8007876:	2207      	movs	r2, #7
 8007878:	9b07      	ldr	r3, [sp, #28]
 800787a:	3307      	adds	r3, #7
 800787c:	4393      	bics	r3, r2
 800787e:	3308      	adds	r3, #8
 8007880:	9307      	str	r3, [sp, #28]
 8007882:	6963      	ldr	r3, [r4, #20]
 8007884:	9a04      	ldr	r2, [sp, #16]
 8007886:	189b      	adds	r3, r3, r2
 8007888:	6163      	str	r3, [r4, #20]
 800788a:	e762      	b.n	8007752 <_svfiprintf_r+0x46>
 800788c:	4343      	muls	r3, r0
 800788e:	0035      	movs	r5, r6
 8007890:	2101      	movs	r1, #1
 8007892:	189b      	adds	r3, r3, r2
 8007894:	e7a4      	b.n	80077e0 <_svfiprintf_r+0xd4>
 8007896:	2300      	movs	r3, #0
 8007898:	200a      	movs	r0, #10
 800789a:	0019      	movs	r1, r3
 800789c:	3501      	adds	r5, #1
 800789e:	6063      	str	r3, [r4, #4]
 80078a0:	782a      	ldrb	r2, [r5, #0]
 80078a2:	1c6e      	adds	r6, r5, #1
 80078a4:	3a30      	subs	r2, #48	@ 0x30
 80078a6:	2a09      	cmp	r2, #9
 80078a8:	d903      	bls.n	80078b2 <_svfiprintf_r+0x1a6>
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0c8      	beq.n	8007840 <_svfiprintf_r+0x134>
 80078ae:	9109      	str	r1, [sp, #36]	@ 0x24
 80078b0:	e7c6      	b.n	8007840 <_svfiprintf_r+0x134>
 80078b2:	4341      	muls	r1, r0
 80078b4:	0035      	movs	r5, r6
 80078b6:	2301      	movs	r3, #1
 80078b8:	1889      	adds	r1, r1, r2
 80078ba:	e7f1      	b.n	80078a0 <_svfiprintf_r+0x194>
 80078bc:	aa07      	add	r2, sp, #28
 80078be:	9200      	str	r2, [sp, #0]
 80078c0:	0021      	movs	r1, r4
 80078c2:	003a      	movs	r2, r7
 80078c4:	4b0f      	ldr	r3, [pc, #60]	@ (8007904 <_svfiprintf_r+0x1f8>)
 80078c6:	9803      	ldr	r0, [sp, #12]
 80078c8:	e000      	b.n	80078cc <_svfiprintf_r+0x1c0>
 80078ca:	bf00      	nop
 80078cc:	9004      	str	r0, [sp, #16]
 80078ce:	9b04      	ldr	r3, [sp, #16]
 80078d0:	3301      	adds	r3, #1
 80078d2:	d1d6      	bne.n	8007882 <_svfiprintf_r+0x176>
 80078d4:	89bb      	ldrh	r3, [r7, #12]
 80078d6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80078d8:	065b      	lsls	r3, r3, #25
 80078da:	d500      	bpl.n	80078de <_svfiprintf_r+0x1d2>
 80078dc:	e72c      	b.n	8007738 <_svfiprintf_r+0x2c>
 80078de:	b021      	add	sp, #132	@ 0x84
 80078e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078e2:	aa07      	add	r2, sp, #28
 80078e4:	9200      	str	r2, [sp, #0]
 80078e6:	0021      	movs	r1, r4
 80078e8:	003a      	movs	r2, r7
 80078ea:	4b06      	ldr	r3, [pc, #24]	@ (8007904 <_svfiprintf_r+0x1f8>)
 80078ec:	9803      	ldr	r0, [sp, #12]
 80078ee:	f000 f87b 	bl	80079e8 <_printf_i>
 80078f2:	e7eb      	b.n	80078cc <_svfiprintf_r+0x1c0>
 80078f4:	080080fc 	.word	0x080080fc
 80078f8:	08008102 	.word	0x08008102
 80078fc:	08008106 	.word	0x08008106
 8007900:	00000000 	.word	0x00000000
 8007904:	0800764d 	.word	0x0800764d

08007908 <_printf_common>:
 8007908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800790a:	0016      	movs	r6, r2
 800790c:	9301      	str	r3, [sp, #4]
 800790e:	688a      	ldr	r2, [r1, #8]
 8007910:	690b      	ldr	r3, [r1, #16]
 8007912:	000c      	movs	r4, r1
 8007914:	9000      	str	r0, [sp, #0]
 8007916:	4293      	cmp	r3, r2
 8007918:	da00      	bge.n	800791c <_printf_common+0x14>
 800791a:	0013      	movs	r3, r2
 800791c:	0022      	movs	r2, r4
 800791e:	6033      	str	r3, [r6, #0]
 8007920:	3243      	adds	r2, #67	@ 0x43
 8007922:	7812      	ldrb	r2, [r2, #0]
 8007924:	2a00      	cmp	r2, #0
 8007926:	d001      	beq.n	800792c <_printf_common+0x24>
 8007928:	3301      	adds	r3, #1
 800792a:	6033      	str	r3, [r6, #0]
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	069b      	lsls	r3, r3, #26
 8007930:	d502      	bpl.n	8007938 <_printf_common+0x30>
 8007932:	6833      	ldr	r3, [r6, #0]
 8007934:	3302      	adds	r3, #2
 8007936:	6033      	str	r3, [r6, #0]
 8007938:	6822      	ldr	r2, [r4, #0]
 800793a:	2306      	movs	r3, #6
 800793c:	0015      	movs	r5, r2
 800793e:	401d      	ands	r5, r3
 8007940:	421a      	tst	r2, r3
 8007942:	d027      	beq.n	8007994 <_printf_common+0x8c>
 8007944:	0023      	movs	r3, r4
 8007946:	3343      	adds	r3, #67	@ 0x43
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	1e5a      	subs	r2, r3, #1
 800794c:	4193      	sbcs	r3, r2
 800794e:	6822      	ldr	r2, [r4, #0]
 8007950:	0692      	lsls	r2, r2, #26
 8007952:	d430      	bmi.n	80079b6 <_printf_common+0xae>
 8007954:	0022      	movs	r2, r4
 8007956:	9901      	ldr	r1, [sp, #4]
 8007958:	9800      	ldr	r0, [sp, #0]
 800795a:	9d08      	ldr	r5, [sp, #32]
 800795c:	3243      	adds	r2, #67	@ 0x43
 800795e:	47a8      	blx	r5
 8007960:	3001      	adds	r0, #1
 8007962:	d025      	beq.n	80079b0 <_printf_common+0xa8>
 8007964:	2206      	movs	r2, #6
 8007966:	6823      	ldr	r3, [r4, #0]
 8007968:	2500      	movs	r5, #0
 800796a:	4013      	ands	r3, r2
 800796c:	2b04      	cmp	r3, #4
 800796e:	d105      	bne.n	800797c <_printf_common+0x74>
 8007970:	6833      	ldr	r3, [r6, #0]
 8007972:	68e5      	ldr	r5, [r4, #12]
 8007974:	1aed      	subs	r5, r5, r3
 8007976:	43eb      	mvns	r3, r5
 8007978:	17db      	asrs	r3, r3, #31
 800797a:	401d      	ands	r5, r3
 800797c:	68a3      	ldr	r3, [r4, #8]
 800797e:	6922      	ldr	r2, [r4, #16]
 8007980:	4293      	cmp	r3, r2
 8007982:	dd01      	ble.n	8007988 <_printf_common+0x80>
 8007984:	1a9b      	subs	r3, r3, r2
 8007986:	18ed      	adds	r5, r5, r3
 8007988:	2600      	movs	r6, #0
 800798a:	42b5      	cmp	r5, r6
 800798c:	d120      	bne.n	80079d0 <_printf_common+0xc8>
 800798e:	2000      	movs	r0, #0
 8007990:	e010      	b.n	80079b4 <_printf_common+0xac>
 8007992:	3501      	adds	r5, #1
 8007994:	68e3      	ldr	r3, [r4, #12]
 8007996:	6832      	ldr	r2, [r6, #0]
 8007998:	1a9b      	subs	r3, r3, r2
 800799a:	42ab      	cmp	r3, r5
 800799c:	ddd2      	ble.n	8007944 <_printf_common+0x3c>
 800799e:	0022      	movs	r2, r4
 80079a0:	2301      	movs	r3, #1
 80079a2:	9901      	ldr	r1, [sp, #4]
 80079a4:	9800      	ldr	r0, [sp, #0]
 80079a6:	9f08      	ldr	r7, [sp, #32]
 80079a8:	3219      	adds	r2, #25
 80079aa:	47b8      	blx	r7
 80079ac:	3001      	adds	r0, #1
 80079ae:	d1f0      	bne.n	8007992 <_printf_common+0x8a>
 80079b0:	2001      	movs	r0, #1
 80079b2:	4240      	negs	r0, r0
 80079b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80079b6:	2030      	movs	r0, #48	@ 0x30
 80079b8:	18e1      	adds	r1, r4, r3
 80079ba:	3143      	adds	r1, #67	@ 0x43
 80079bc:	7008      	strb	r0, [r1, #0]
 80079be:	0021      	movs	r1, r4
 80079c0:	1c5a      	adds	r2, r3, #1
 80079c2:	3145      	adds	r1, #69	@ 0x45
 80079c4:	7809      	ldrb	r1, [r1, #0]
 80079c6:	18a2      	adds	r2, r4, r2
 80079c8:	3243      	adds	r2, #67	@ 0x43
 80079ca:	3302      	adds	r3, #2
 80079cc:	7011      	strb	r1, [r2, #0]
 80079ce:	e7c1      	b.n	8007954 <_printf_common+0x4c>
 80079d0:	0022      	movs	r2, r4
 80079d2:	2301      	movs	r3, #1
 80079d4:	9901      	ldr	r1, [sp, #4]
 80079d6:	9800      	ldr	r0, [sp, #0]
 80079d8:	9f08      	ldr	r7, [sp, #32]
 80079da:	321a      	adds	r2, #26
 80079dc:	47b8      	blx	r7
 80079de:	3001      	adds	r0, #1
 80079e0:	d0e6      	beq.n	80079b0 <_printf_common+0xa8>
 80079e2:	3601      	adds	r6, #1
 80079e4:	e7d1      	b.n	800798a <_printf_common+0x82>
	...

080079e8 <_printf_i>:
 80079e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079ea:	b08b      	sub	sp, #44	@ 0x2c
 80079ec:	9206      	str	r2, [sp, #24]
 80079ee:	000a      	movs	r2, r1
 80079f0:	3243      	adds	r2, #67	@ 0x43
 80079f2:	9307      	str	r3, [sp, #28]
 80079f4:	9005      	str	r0, [sp, #20]
 80079f6:	9203      	str	r2, [sp, #12]
 80079f8:	7e0a      	ldrb	r2, [r1, #24]
 80079fa:	000c      	movs	r4, r1
 80079fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80079fe:	2a78      	cmp	r2, #120	@ 0x78
 8007a00:	d809      	bhi.n	8007a16 <_printf_i+0x2e>
 8007a02:	2a62      	cmp	r2, #98	@ 0x62
 8007a04:	d80b      	bhi.n	8007a1e <_printf_i+0x36>
 8007a06:	2a00      	cmp	r2, #0
 8007a08:	d100      	bne.n	8007a0c <_printf_i+0x24>
 8007a0a:	e0ba      	b.n	8007b82 <_printf_i+0x19a>
 8007a0c:	497a      	ldr	r1, [pc, #488]	@ (8007bf8 <_printf_i+0x210>)
 8007a0e:	9104      	str	r1, [sp, #16]
 8007a10:	2a58      	cmp	r2, #88	@ 0x58
 8007a12:	d100      	bne.n	8007a16 <_printf_i+0x2e>
 8007a14:	e08e      	b.n	8007b34 <_printf_i+0x14c>
 8007a16:	0025      	movs	r5, r4
 8007a18:	3542      	adds	r5, #66	@ 0x42
 8007a1a:	702a      	strb	r2, [r5, #0]
 8007a1c:	e022      	b.n	8007a64 <_printf_i+0x7c>
 8007a1e:	0010      	movs	r0, r2
 8007a20:	3863      	subs	r0, #99	@ 0x63
 8007a22:	2815      	cmp	r0, #21
 8007a24:	d8f7      	bhi.n	8007a16 <_printf_i+0x2e>
 8007a26:	f7f8 fb77 	bl	8000118 <__gnu_thumb1_case_shi>
 8007a2a:	0016      	.short	0x0016
 8007a2c:	fff6001f 	.word	0xfff6001f
 8007a30:	fff6fff6 	.word	0xfff6fff6
 8007a34:	001ffff6 	.word	0x001ffff6
 8007a38:	fff6fff6 	.word	0xfff6fff6
 8007a3c:	fff6fff6 	.word	0xfff6fff6
 8007a40:	0036009f 	.word	0x0036009f
 8007a44:	fff6007e 	.word	0xfff6007e
 8007a48:	00b0fff6 	.word	0x00b0fff6
 8007a4c:	0036fff6 	.word	0x0036fff6
 8007a50:	fff6fff6 	.word	0xfff6fff6
 8007a54:	0082      	.short	0x0082
 8007a56:	0025      	movs	r5, r4
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	3542      	adds	r5, #66	@ 0x42
 8007a5c:	1d11      	adds	r1, r2, #4
 8007a5e:	6019      	str	r1, [r3, #0]
 8007a60:	6813      	ldr	r3, [r2, #0]
 8007a62:	702b      	strb	r3, [r5, #0]
 8007a64:	2301      	movs	r3, #1
 8007a66:	e09e      	b.n	8007ba6 <_printf_i+0x1be>
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	6809      	ldr	r1, [r1, #0]
 8007a6c:	1d02      	adds	r2, r0, #4
 8007a6e:	060d      	lsls	r5, r1, #24
 8007a70:	d50b      	bpl.n	8007a8a <_printf_i+0xa2>
 8007a72:	6806      	ldr	r6, [r0, #0]
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	2e00      	cmp	r6, #0
 8007a78:	da03      	bge.n	8007a82 <_printf_i+0x9a>
 8007a7a:	232d      	movs	r3, #45	@ 0x2d
 8007a7c:	9a03      	ldr	r2, [sp, #12]
 8007a7e:	4276      	negs	r6, r6
 8007a80:	7013      	strb	r3, [r2, #0]
 8007a82:	4b5d      	ldr	r3, [pc, #372]	@ (8007bf8 <_printf_i+0x210>)
 8007a84:	270a      	movs	r7, #10
 8007a86:	9304      	str	r3, [sp, #16]
 8007a88:	e018      	b.n	8007abc <_printf_i+0xd4>
 8007a8a:	6806      	ldr	r6, [r0, #0]
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	0649      	lsls	r1, r1, #25
 8007a90:	d5f1      	bpl.n	8007a76 <_printf_i+0x8e>
 8007a92:	b236      	sxth	r6, r6
 8007a94:	e7ef      	b.n	8007a76 <_printf_i+0x8e>
 8007a96:	6808      	ldr	r0, [r1, #0]
 8007a98:	6819      	ldr	r1, [r3, #0]
 8007a9a:	c940      	ldmia	r1!, {r6}
 8007a9c:	0605      	lsls	r5, r0, #24
 8007a9e:	d402      	bmi.n	8007aa6 <_printf_i+0xbe>
 8007aa0:	0640      	lsls	r0, r0, #25
 8007aa2:	d500      	bpl.n	8007aa6 <_printf_i+0xbe>
 8007aa4:	b2b6      	uxth	r6, r6
 8007aa6:	6019      	str	r1, [r3, #0]
 8007aa8:	4b53      	ldr	r3, [pc, #332]	@ (8007bf8 <_printf_i+0x210>)
 8007aaa:	270a      	movs	r7, #10
 8007aac:	9304      	str	r3, [sp, #16]
 8007aae:	2a6f      	cmp	r2, #111	@ 0x6f
 8007ab0:	d100      	bne.n	8007ab4 <_printf_i+0xcc>
 8007ab2:	3f02      	subs	r7, #2
 8007ab4:	0023      	movs	r3, r4
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	3343      	adds	r3, #67	@ 0x43
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	6863      	ldr	r3, [r4, #4]
 8007abe:	60a3      	str	r3, [r4, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	db06      	blt.n	8007ad2 <_printf_i+0xea>
 8007ac4:	2104      	movs	r1, #4
 8007ac6:	6822      	ldr	r2, [r4, #0]
 8007ac8:	9d03      	ldr	r5, [sp, #12]
 8007aca:	438a      	bics	r2, r1
 8007acc:	6022      	str	r2, [r4, #0]
 8007ace:	4333      	orrs	r3, r6
 8007ad0:	d00c      	beq.n	8007aec <_printf_i+0x104>
 8007ad2:	9d03      	ldr	r5, [sp, #12]
 8007ad4:	0030      	movs	r0, r6
 8007ad6:	0039      	movs	r1, r7
 8007ad8:	f7f8 fbae 	bl	8000238 <__aeabi_uidivmod>
 8007adc:	9b04      	ldr	r3, [sp, #16]
 8007ade:	3d01      	subs	r5, #1
 8007ae0:	5c5b      	ldrb	r3, [r3, r1]
 8007ae2:	702b      	strb	r3, [r5, #0]
 8007ae4:	0033      	movs	r3, r6
 8007ae6:	0006      	movs	r6, r0
 8007ae8:	429f      	cmp	r7, r3
 8007aea:	d9f3      	bls.n	8007ad4 <_printf_i+0xec>
 8007aec:	2f08      	cmp	r7, #8
 8007aee:	d109      	bne.n	8007b04 <_printf_i+0x11c>
 8007af0:	6823      	ldr	r3, [r4, #0]
 8007af2:	07db      	lsls	r3, r3, #31
 8007af4:	d506      	bpl.n	8007b04 <_printf_i+0x11c>
 8007af6:	6862      	ldr	r2, [r4, #4]
 8007af8:	6923      	ldr	r3, [r4, #16]
 8007afa:	429a      	cmp	r2, r3
 8007afc:	dc02      	bgt.n	8007b04 <_printf_i+0x11c>
 8007afe:	2330      	movs	r3, #48	@ 0x30
 8007b00:	3d01      	subs	r5, #1
 8007b02:	702b      	strb	r3, [r5, #0]
 8007b04:	9b03      	ldr	r3, [sp, #12]
 8007b06:	1b5b      	subs	r3, r3, r5
 8007b08:	6123      	str	r3, [r4, #16]
 8007b0a:	9b07      	ldr	r3, [sp, #28]
 8007b0c:	0021      	movs	r1, r4
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	9805      	ldr	r0, [sp, #20]
 8007b12:	9b06      	ldr	r3, [sp, #24]
 8007b14:	aa09      	add	r2, sp, #36	@ 0x24
 8007b16:	f7ff fef7 	bl	8007908 <_printf_common>
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	d148      	bne.n	8007bb0 <_printf_i+0x1c8>
 8007b1e:	2001      	movs	r0, #1
 8007b20:	4240      	negs	r0, r0
 8007b22:	b00b      	add	sp, #44	@ 0x2c
 8007b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b26:	2220      	movs	r2, #32
 8007b28:	6809      	ldr	r1, [r1, #0]
 8007b2a:	430a      	orrs	r2, r1
 8007b2c:	6022      	str	r2, [r4, #0]
 8007b2e:	2278      	movs	r2, #120	@ 0x78
 8007b30:	4932      	ldr	r1, [pc, #200]	@ (8007bfc <_printf_i+0x214>)
 8007b32:	9104      	str	r1, [sp, #16]
 8007b34:	0021      	movs	r1, r4
 8007b36:	3145      	adds	r1, #69	@ 0x45
 8007b38:	700a      	strb	r2, [r1, #0]
 8007b3a:	6819      	ldr	r1, [r3, #0]
 8007b3c:	6822      	ldr	r2, [r4, #0]
 8007b3e:	c940      	ldmia	r1!, {r6}
 8007b40:	0610      	lsls	r0, r2, #24
 8007b42:	d402      	bmi.n	8007b4a <_printf_i+0x162>
 8007b44:	0650      	lsls	r0, r2, #25
 8007b46:	d500      	bpl.n	8007b4a <_printf_i+0x162>
 8007b48:	b2b6      	uxth	r6, r6
 8007b4a:	6019      	str	r1, [r3, #0]
 8007b4c:	07d3      	lsls	r3, r2, #31
 8007b4e:	d502      	bpl.n	8007b56 <_printf_i+0x16e>
 8007b50:	2320      	movs	r3, #32
 8007b52:	4313      	orrs	r3, r2
 8007b54:	6023      	str	r3, [r4, #0]
 8007b56:	2e00      	cmp	r6, #0
 8007b58:	d001      	beq.n	8007b5e <_printf_i+0x176>
 8007b5a:	2710      	movs	r7, #16
 8007b5c:	e7aa      	b.n	8007ab4 <_printf_i+0xcc>
 8007b5e:	2220      	movs	r2, #32
 8007b60:	6823      	ldr	r3, [r4, #0]
 8007b62:	4393      	bics	r3, r2
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	e7f8      	b.n	8007b5a <_printf_i+0x172>
 8007b68:	681a      	ldr	r2, [r3, #0]
 8007b6a:	680d      	ldr	r5, [r1, #0]
 8007b6c:	1d10      	adds	r0, r2, #4
 8007b6e:	6949      	ldr	r1, [r1, #20]
 8007b70:	6018      	str	r0, [r3, #0]
 8007b72:	6813      	ldr	r3, [r2, #0]
 8007b74:	062e      	lsls	r6, r5, #24
 8007b76:	d501      	bpl.n	8007b7c <_printf_i+0x194>
 8007b78:	6019      	str	r1, [r3, #0]
 8007b7a:	e002      	b.n	8007b82 <_printf_i+0x19a>
 8007b7c:	066d      	lsls	r5, r5, #25
 8007b7e:	d5fb      	bpl.n	8007b78 <_printf_i+0x190>
 8007b80:	8019      	strh	r1, [r3, #0]
 8007b82:	2300      	movs	r3, #0
 8007b84:	9d03      	ldr	r5, [sp, #12]
 8007b86:	6123      	str	r3, [r4, #16]
 8007b88:	e7bf      	b.n	8007b0a <_printf_i+0x122>
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	1d11      	adds	r1, r2, #4
 8007b8e:	6019      	str	r1, [r3, #0]
 8007b90:	6815      	ldr	r5, [r2, #0]
 8007b92:	2100      	movs	r1, #0
 8007b94:	0028      	movs	r0, r5
 8007b96:	6862      	ldr	r2, [r4, #4]
 8007b98:	f000 f856 	bl	8007c48 <memchr>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d001      	beq.n	8007ba4 <_printf_i+0x1bc>
 8007ba0:	1b40      	subs	r0, r0, r5
 8007ba2:	6060      	str	r0, [r4, #4]
 8007ba4:	6863      	ldr	r3, [r4, #4]
 8007ba6:	6123      	str	r3, [r4, #16]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9a03      	ldr	r2, [sp, #12]
 8007bac:	7013      	strb	r3, [r2, #0]
 8007bae:	e7ac      	b.n	8007b0a <_printf_i+0x122>
 8007bb0:	002a      	movs	r2, r5
 8007bb2:	6923      	ldr	r3, [r4, #16]
 8007bb4:	9906      	ldr	r1, [sp, #24]
 8007bb6:	9805      	ldr	r0, [sp, #20]
 8007bb8:	9d07      	ldr	r5, [sp, #28]
 8007bba:	47a8      	blx	r5
 8007bbc:	3001      	adds	r0, #1
 8007bbe:	d0ae      	beq.n	8007b1e <_printf_i+0x136>
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	079b      	lsls	r3, r3, #30
 8007bc4:	d415      	bmi.n	8007bf2 <_printf_i+0x20a>
 8007bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc8:	68e0      	ldr	r0, [r4, #12]
 8007bca:	4298      	cmp	r0, r3
 8007bcc:	daa9      	bge.n	8007b22 <_printf_i+0x13a>
 8007bce:	0018      	movs	r0, r3
 8007bd0:	e7a7      	b.n	8007b22 <_printf_i+0x13a>
 8007bd2:	0022      	movs	r2, r4
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	9906      	ldr	r1, [sp, #24]
 8007bd8:	9805      	ldr	r0, [sp, #20]
 8007bda:	9e07      	ldr	r6, [sp, #28]
 8007bdc:	3219      	adds	r2, #25
 8007bde:	47b0      	blx	r6
 8007be0:	3001      	adds	r0, #1
 8007be2:	d09c      	beq.n	8007b1e <_printf_i+0x136>
 8007be4:	3501      	adds	r5, #1
 8007be6:	68e3      	ldr	r3, [r4, #12]
 8007be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bea:	1a9b      	subs	r3, r3, r2
 8007bec:	42ab      	cmp	r3, r5
 8007bee:	dcf0      	bgt.n	8007bd2 <_printf_i+0x1ea>
 8007bf0:	e7e9      	b.n	8007bc6 <_printf_i+0x1de>
 8007bf2:	2500      	movs	r5, #0
 8007bf4:	e7f7      	b.n	8007be6 <_printf_i+0x1fe>
 8007bf6:	46c0      	nop			@ (mov r8, r8)
 8007bf8:	0800810d 	.word	0x0800810d
 8007bfc:	0800811e 	.word	0x0800811e

08007c00 <memmove>:
 8007c00:	b510      	push	{r4, lr}
 8007c02:	4288      	cmp	r0, r1
 8007c04:	d902      	bls.n	8007c0c <memmove+0xc>
 8007c06:	188b      	adds	r3, r1, r2
 8007c08:	4298      	cmp	r0, r3
 8007c0a:	d308      	bcc.n	8007c1e <memmove+0x1e>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d007      	beq.n	8007c22 <memmove+0x22>
 8007c12:	5ccc      	ldrb	r4, [r1, r3]
 8007c14:	54c4      	strb	r4, [r0, r3]
 8007c16:	3301      	adds	r3, #1
 8007c18:	e7f9      	b.n	8007c0e <memmove+0xe>
 8007c1a:	5c8b      	ldrb	r3, [r1, r2]
 8007c1c:	5483      	strb	r3, [r0, r2]
 8007c1e:	3a01      	subs	r2, #1
 8007c20:	d2fb      	bcs.n	8007c1a <memmove+0x1a>
 8007c22:	bd10      	pop	{r4, pc}

08007c24 <_sbrk_r>:
 8007c24:	2300      	movs	r3, #0
 8007c26:	b570      	push	{r4, r5, r6, lr}
 8007c28:	4d06      	ldr	r5, [pc, #24]	@ (8007c44 <_sbrk_r+0x20>)
 8007c2a:	0004      	movs	r4, r0
 8007c2c:	0008      	movs	r0, r1
 8007c2e:	602b      	str	r3, [r5, #0]
 8007c30:	f7fa fd30 	bl	8002694 <_sbrk>
 8007c34:	1c43      	adds	r3, r0, #1
 8007c36:	d103      	bne.n	8007c40 <_sbrk_r+0x1c>
 8007c38:	682b      	ldr	r3, [r5, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d000      	beq.n	8007c40 <_sbrk_r+0x1c>
 8007c3e:	6023      	str	r3, [r4, #0]
 8007c40:	bd70      	pop	{r4, r5, r6, pc}
 8007c42:	46c0      	nop			@ (mov r8, r8)
 8007c44:	200003b8 	.word	0x200003b8

08007c48 <memchr>:
 8007c48:	b2c9      	uxtb	r1, r1
 8007c4a:	1882      	adds	r2, r0, r2
 8007c4c:	4290      	cmp	r0, r2
 8007c4e:	d101      	bne.n	8007c54 <memchr+0xc>
 8007c50:	2000      	movs	r0, #0
 8007c52:	4770      	bx	lr
 8007c54:	7803      	ldrb	r3, [r0, #0]
 8007c56:	428b      	cmp	r3, r1
 8007c58:	d0fb      	beq.n	8007c52 <memchr+0xa>
 8007c5a:	3001      	adds	r0, #1
 8007c5c:	e7f6      	b.n	8007c4c <memchr+0x4>

08007c5e <memcpy>:
 8007c5e:	2300      	movs	r3, #0
 8007c60:	b510      	push	{r4, lr}
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d100      	bne.n	8007c68 <memcpy+0xa>
 8007c66:	bd10      	pop	{r4, pc}
 8007c68:	5ccc      	ldrb	r4, [r1, r3]
 8007c6a:	54c4      	strb	r4, [r0, r3]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	e7f8      	b.n	8007c62 <memcpy+0x4>

08007c70 <_realloc_r>:
 8007c70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c72:	0006      	movs	r6, r0
 8007c74:	000c      	movs	r4, r1
 8007c76:	0015      	movs	r5, r2
 8007c78:	2900      	cmp	r1, #0
 8007c7a:	d105      	bne.n	8007c88 <_realloc_r+0x18>
 8007c7c:	0011      	movs	r1, r2
 8007c7e:	f7ff fc55 	bl	800752c <_malloc_r>
 8007c82:	0004      	movs	r4, r0
 8007c84:	0020      	movs	r0, r4
 8007c86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007c88:	2a00      	cmp	r2, #0
 8007c8a:	d103      	bne.n	8007c94 <_realloc_r+0x24>
 8007c8c:	f7ff fbe2 	bl	8007454 <_free_r>
 8007c90:	002c      	movs	r4, r5
 8007c92:	e7f7      	b.n	8007c84 <_realloc_r+0x14>
 8007c94:	f000 f81c 	bl	8007cd0 <_malloc_usable_size_r>
 8007c98:	0007      	movs	r7, r0
 8007c9a:	4285      	cmp	r5, r0
 8007c9c:	d802      	bhi.n	8007ca4 <_realloc_r+0x34>
 8007c9e:	0843      	lsrs	r3, r0, #1
 8007ca0:	42ab      	cmp	r3, r5
 8007ca2:	d3ef      	bcc.n	8007c84 <_realloc_r+0x14>
 8007ca4:	0029      	movs	r1, r5
 8007ca6:	0030      	movs	r0, r6
 8007ca8:	f7ff fc40 	bl	800752c <_malloc_r>
 8007cac:	9001      	str	r0, [sp, #4]
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d101      	bne.n	8007cb6 <_realloc_r+0x46>
 8007cb2:	9c01      	ldr	r4, [sp, #4]
 8007cb4:	e7e6      	b.n	8007c84 <_realloc_r+0x14>
 8007cb6:	002a      	movs	r2, r5
 8007cb8:	42bd      	cmp	r5, r7
 8007cba:	d900      	bls.n	8007cbe <_realloc_r+0x4e>
 8007cbc:	003a      	movs	r2, r7
 8007cbe:	0021      	movs	r1, r4
 8007cc0:	9801      	ldr	r0, [sp, #4]
 8007cc2:	f7ff ffcc 	bl	8007c5e <memcpy>
 8007cc6:	0021      	movs	r1, r4
 8007cc8:	0030      	movs	r0, r6
 8007cca:	f7ff fbc3 	bl	8007454 <_free_r>
 8007cce:	e7f0      	b.n	8007cb2 <_realloc_r+0x42>

08007cd0 <_malloc_usable_size_r>:
 8007cd0:	1f0b      	subs	r3, r1, #4
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	1f18      	subs	r0, r3, #4
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	da01      	bge.n	8007cde <_malloc_usable_size_r+0xe>
 8007cda:	580b      	ldr	r3, [r1, r0]
 8007cdc:	18c0      	adds	r0, r0, r3
 8007cde:	4770      	bx	lr

08007ce0 <_init>:
 8007ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce2:	46c0      	nop			@ (mov r8, r8)
 8007ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ce6:	bc08      	pop	{r3}
 8007ce8:	469e      	mov	lr, r3
 8007cea:	4770      	bx	lr

08007cec <_fini>:
 8007cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cee:	46c0      	nop			@ (mov r8, r8)
 8007cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf2:	bc08      	pop	{r3}
 8007cf4:	469e      	mov	lr, r3
 8007cf6:	4770      	bx	lr
