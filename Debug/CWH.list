
CWH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ed8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001440  08008f98  08008f98  00009f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3d8  0800a3d8  0000c0a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a3d8  0800a3d8  0000b3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3e0  0800a3e0  0000c0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3e0  0800a3e0  0000b3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a3e4  0800a3e4  0000b3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800a3e8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200000a0  0800a488  0000c0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  0800a488  0000c418  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b3e  00000000  00000000  0000c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a4f  00000000  00000000  00021c06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001280  00000000  00000000  00025658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3e  00000000  00000000  000268d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018425  00000000  00000000  00027716  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001840a  00000000  00000000  0003fb3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bfa0  00000000  00000000  00057f45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e3ee5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004848  00000000  00000000  000e3f28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e8770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a0 	.word	0x200000a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08008f80 	.word	0x08008f80

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a4 	.word	0x200000a4
 8000104:	08008f80 	.word	0x08008f80

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	@ (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	@ (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f81e 	bl	8000488 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			@ (mov r8, r8)

08000458 <__aeabi_f2uiz>:
 8000458:	219e      	movs	r1, #158	@ 0x9e
 800045a:	b510      	push	{r4, lr}
 800045c:	05c9      	lsls	r1, r1, #23
 800045e:	1c04      	adds	r4, r0, #0
 8000460:	f000 fe90 	bl	8001184 <__aeabi_fcmpge>
 8000464:	2800      	cmp	r0, #0
 8000466:	d103      	bne.n	8000470 <__aeabi_f2uiz+0x18>
 8000468:	1c20      	adds	r0, r4, #0
 800046a:	f000 fdad 	bl	8000fc8 <__aeabi_f2iz>
 800046e:	bd10      	pop	{r4, pc}
 8000470:	219e      	movs	r1, #158	@ 0x9e
 8000472:	1c20      	adds	r0, r4, #0
 8000474:	05c9      	lsls	r1, r1, #23
 8000476:	f000 fb43 	bl	8000b00 <__aeabi_fsub>
 800047a:	f000 fda5 	bl	8000fc8 <__aeabi_f2iz>
 800047e:	2380      	movs	r3, #128	@ 0x80
 8000480:	061b      	lsls	r3, r3, #24
 8000482:	469c      	mov	ip, r3
 8000484:	4460      	add	r0, ip
 8000486:	e7f2      	b.n	800046e <__aeabi_f2uiz+0x16>

08000488 <__udivmoddi4>:
 8000488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800048a:	4657      	mov	r7, sl
 800048c:	464e      	mov	r6, r9
 800048e:	4645      	mov	r5, r8
 8000490:	46de      	mov	lr, fp
 8000492:	b5e0      	push	{r5, r6, r7, lr}
 8000494:	0004      	movs	r4, r0
 8000496:	000d      	movs	r5, r1
 8000498:	4692      	mov	sl, r2
 800049a:	4699      	mov	r9, r3
 800049c:	b083      	sub	sp, #12
 800049e:	428b      	cmp	r3, r1
 80004a0:	d830      	bhi.n	8000504 <__udivmoddi4+0x7c>
 80004a2:	d02d      	beq.n	8000500 <__udivmoddi4+0x78>
 80004a4:	4649      	mov	r1, r9
 80004a6:	4650      	mov	r0, sl
 80004a8:	f000 fe94 	bl	80011d4 <__clzdi2>
 80004ac:	0029      	movs	r1, r5
 80004ae:	0006      	movs	r6, r0
 80004b0:	0020      	movs	r0, r4
 80004b2:	f000 fe8f 	bl	80011d4 <__clzdi2>
 80004b6:	1a33      	subs	r3, r6, r0
 80004b8:	4698      	mov	r8, r3
 80004ba:	3b20      	subs	r3, #32
 80004bc:	d434      	bmi.n	8000528 <__udivmoddi4+0xa0>
 80004be:	469b      	mov	fp, r3
 80004c0:	4653      	mov	r3, sl
 80004c2:	465a      	mov	r2, fp
 80004c4:	4093      	lsls	r3, r2
 80004c6:	4642      	mov	r2, r8
 80004c8:	001f      	movs	r7, r3
 80004ca:	4653      	mov	r3, sl
 80004cc:	4093      	lsls	r3, r2
 80004ce:	001e      	movs	r6, r3
 80004d0:	42af      	cmp	r7, r5
 80004d2:	d83b      	bhi.n	800054c <__udivmoddi4+0xc4>
 80004d4:	42af      	cmp	r7, r5
 80004d6:	d100      	bne.n	80004da <__udivmoddi4+0x52>
 80004d8:	e079      	b.n	80005ce <__udivmoddi4+0x146>
 80004da:	465b      	mov	r3, fp
 80004dc:	1ba4      	subs	r4, r4, r6
 80004de:	41bd      	sbcs	r5, r7
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	da00      	bge.n	80004e6 <__udivmoddi4+0x5e>
 80004e4:	e076      	b.n	80005d4 <__udivmoddi4+0x14c>
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	9200      	str	r2, [sp, #0]
 80004ec:	9301      	str	r3, [sp, #4]
 80004ee:	2301      	movs	r3, #1
 80004f0:	465a      	mov	r2, fp
 80004f2:	4093      	lsls	r3, r2
 80004f4:	9301      	str	r3, [sp, #4]
 80004f6:	2301      	movs	r3, #1
 80004f8:	4642      	mov	r2, r8
 80004fa:	4093      	lsls	r3, r2
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	e029      	b.n	8000554 <__udivmoddi4+0xcc>
 8000500:	4282      	cmp	r2, r0
 8000502:	d9cf      	bls.n	80004a4 <__udivmoddi4+0x1c>
 8000504:	2200      	movs	r2, #0
 8000506:	2300      	movs	r3, #0
 8000508:	9200      	str	r2, [sp, #0]
 800050a:	9301      	str	r3, [sp, #4]
 800050c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <__udivmoddi4+0x8e>
 8000512:	601c      	str	r4, [r3, #0]
 8000514:	605d      	str	r5, [r3, #4]
 8000516:	9800      	ldr	r0, [sp, #0]
 8000518:	9901      	ldr	r1, [sp, #4]
 800051a:	b003      	add	sp, #12
 800051c:	bcf0      	pop	{r4, r5, r6, r7}
 800051e:	46bb      	mov	fp, r7
 8000520:	46b2      	mov	sl, r6
 8000522:	46a9      	mov	r9, r5
 8000524:	46a0      	mov	r8, r4
 8000526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000528:	4642      	mov	r2, r8
 800052a:	469b      	mov	fp, r3
 800052c:	2320      	movs	r3, #32
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	4652      	mov	r2, sl
 8000532:	40da      	lsrs	r2, r3
 8000534:	4641      	mov	r1, r8
 8000536:	0013      	movs	r3, r2
 8000538:	464a      	mov	r2, r9
 800053a:	408a      	lsls	r2, r1
 800053c:	0017      	movs	r7, r2
 800053e:	4642      	mov	r2, r8
 8000540:	431f      	orrs	r7, r3
 8000542:	4653      	mov	r3, sl
 8000544:	4093      	lsls	r3, r2
 8000546:	001e      	movs	r6, r3
 8000548:	42af      	cmp	r7, r5
 800054a:	d9c3      	bls.n	80004d4 <__udivmoddi4+0x4c>
 800054c:	2200      	movs	r2, #0
 800054e:	2300      	movs	r3, #0
 8000550:	9200      	str	r2, [sp, #0]
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	4643      	mov	r3, r8
 8000556:	2b00      	cmp	r3, #0
 8000558:	d0d8      	beq.n	800050c <__udivmoddi4+0x84>
 800055a:	07fb      	lsls	r3, r7, #31
 800055c:	0872      	lsrs	r2, r6, #1
 800055e:	431a      	orrs	r2, r3
 8000560:	4646      	mov	r6, r8
 8000562:	087b      	lsrs	r3, r7, #1
 8000564:	e00e      	b.n	8000584 <__udivmoddi4+0xfc>
 8000566:	42ab      	cmp	r3, r5
 8000568:	d101      	bne.n	800056e <__udivmoddi4+0xe6>
 800056a:	42a2      	cmp	r2, r4
 800056c:	d80c      	bhi.n	8000588 <__udivmoddi4+0x100>
 800056e:	1aa4      	subs	r4, r4, r2
 8000570:	419d      	sbcs	r5, r3
 8000572:	2001      	movs	r0, #1
 8000574:	1924      	adds	r4, r4, r4
 8000576:	416d      	adcs	r5, r5
 8000578:	2100      	movs	r1, #0
 800057a:	3e01      	subs	r6, #1
 800057c:	1824      	adds	r4, r4, r0
 800057e:	414d      	adcs	r5, r1
 8000580:	2e00      	cmp	r6, #0
 8000582:	d006      	beq.n	8000592 <__udivmoddi4+0x10a>
 8000584:	42ab      	cmp	r3, r5
 8000586:	d9ee      	bls.n	8000566 <__udivmoddi4+0xde>
 8000588:	3e01      	subs	r6, #1
 800058a:	1924      	adds	r4, r4, r4
 800058c:	416d      	adcs	r5, r5
 800058e:	2e00      	cmp	r6, #0
 8000590:	d1f8      	bne.n	8000584 <__udivmoddi4+0xfc>
 8000592:	9800      	ldr	r0, [sp, #0]
 8000594:	9901      	ldr	r1, [sp, #4]
 8000596:	465b      	mov	r3, fp
 8000598:	1900      	adds	r0, r0, r4
 800059a:	4169      	adcs	r1, r5
 800059c:	2b00      	cmp	r3, #0
 800059e:	db24      	blt.n	80005ea <__udivmoddi4+0x162>
 80005a0:	002b      	movs	r3, r5
 80005a2:	465a      	mov	r2, fp
 80005a4:	4644      	mov	r4, r8
 80005a6:	40d3      	lsrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	db2a      	blt.n	800060c <__udivmoddi4+0x184>
 80005b6:	0026      	movs	r6, r4
 80005b8:	409e      	lsls	r6, r3
 80005ba:	0033      	movs	r3, r6
 80005bc:	0026      	movs	r6, r4
 80005be:	4647      	mov	r7, r8
 80005c0:	40be      	lsls	r6, r7
 80005c2:	0032      	movs	r2, r6
 80005c4:	1a80      	subs	r0, r0, r2
 80005c6:	4199      	sbcs	r1, r3
 80005c8:	9000      	str	r0, [sp, #0]
 80005ca:	9101      	str	r1, [sp, #4]
 80005cc:	e79e      	b.n	800050c <__udivmoddi4+0x84>
 80005ce:	42a3      	cmp	r3, r4
 80005d0:	d8bc      	bhi.n	800054c <__udivmoddi4+0xc4>
 80005d2:	e782      	b.n	80004da <__udivmoddi4+0x52>
 80005d4:	4642      	mov	r2, r8
 80005d6:	2320      	movs	r3, #32
 80005d8:	2100      	movs	r1, #0
 80005da:	1a9b      	subs	r3, r3, r2
 80005dc:	2200      	movs	r2, #0
 80005de:	9100      	str	r1, [sp, #0]
 80005e0:	9201      	str	r2, [sp, #4]
 80005e2:	2201      	movs	r2, #1
 80005e4:	40da      	lsrs	r2, r3
 80005e6:	9201      	str	r2, [sp, #4]
 80005e8:	e785      	b.n	80004f6 <__udivmoddi4+0x6e>
 80005ea:	4642      	mov	r2, r8
 80005ec:	2320      	movs	r3, #32
 80005ee:	1a9b      	subs	r3, r3, r2
 80005f0:	002a      	movs	r2, r5
 80005f2:	4646      	mov	r6, r8
 80005f4:	409a      	lsls	r2, r3
 80005f6:	0023      	movs	r3, r4
 80005f8:	40f3      	lsrs	r3, r6
 80005fa:	4644      	mov	r4, r8
 80005fc:	4313      	orrs	r3, r2
 80005fe:	002a      	movs	r2, r5
 8000600:	40e2      	lsrs	r2, r4
 8000602:	001c      	movs	r4, r3
 8000604:	465b      	mov	r3, fp
 8000606:	0015      	movs	r5, r2
 8000608:	2b00      	cmp	r3, #0
 800060a:	dad4      	bge.n	80005b6 <__udivmoddi4+0x12e>
 800060c:	4642      	mov	r2, r8
 800060e:	002f      	movs	r7, r5
 8000610:	2320      	movs	r3, #32
 8000612:	0026      	movs	r6, r4
 8000614:	4097      	lsls	r7, r2
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	40de      	lsrs	r6, r3
 800061a:	003b      	movs	r3, r7
 800061c:	4333      	orrs	r3, r6
 800061e:	e7cd      	b.n	80005bc <__udivmoddi4+0x134>

08000620 <__aeabi_fdiv>:
 8000620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000622:	4646      	mov	r6, r8
 8000624:	464f      	mov	r7, r9
 8000626:	46d6      	mov	lr, sl
 8000628:	0245      	lsls	r5, r0, #9
 800062a:	b5c0      	push	{r6, r7, lr}
 800062c:	0fc3      	lsrs	r3, r0, #31
 800062e:	0047      	lsls	r7, r0, #1
 8000630:	4698      	mov	r8, r3
 8000632:	1c0e      	adds	r6, r1, #0
 8000634:	0a6d      	lsrs	r5, r5, #9
 8000636:	0e3f      	lsrs	r7, r7, #24
 8000638:	d05b      	beq.n	80006f2 <__aeabi_fdiv+0xd2>
 800063a:	2fff      	cmp	r7, #255	@ 0xff
 800063c:	d021      	beq.n	8000682 <__aeabi_fdiv+0x62>
 800063e:	2380      	movs	r3, #128	@ 0x80
 8000640:	00ed      	lsls	r5, r5, #3
 8000642:	04db      	lsls	r3, r3, #19
 8000644:	431d      	orrs	r5, r3
 8000646:	2300      	movs	r3, #0
 8000648:	4699      	mov	r9, r3
 800064a:	469a      	mov	sl, r3
 800064c:	3f7f      	subs	r7, #127	@ 0x7f
 800064e:	0274      	lsls	r4, r6, #9
 8000650:	0073      	lsls	r3, r6, #1
 8000652:	0a64      	lsrs	r4, r4, #9
 8000654:	0e1b      	lsrs	r3, r3, #24
 8000656:	0ff6      	lsrs	r6, r6, #31
 8000658:	2b00      	cmp	r3, #0
 800065a:	d020      	beq.n	800069e <__aeabi_fdiv+0x7e>
 800065c:	2bff      	cmp	r3, #255	@ 0xff
 800065e:	d043      	beq.n	80006e8 <__aeabi_fdiv+0xc8>
 8000660:	2280      	movs	r2, #128	@ 0x80
 8000662:	2000      	movs	r0, #0
 8000664:	00e4      	lsls	r4, r4, #3
 8000666:	04d2      	lsls	r2, r2, #19
 8000668:	4314      	orrs	r4, r2
 800066a:	3b7f      	subs	r3, #127	@ 0x7f
 800066c:	4642      	mov	r2, r8
 800066e:	1aff      	subs	r7, r7, r3
 8000670:	464b      	mov	r3, r9
 8000672:	4072      	eors	r2, r6
 8000674:	2b0f      	cmp	r3, #15
 8000676:	d900      	bls.n	800067a <__aeabi_fdiv+0x5a>
 8000678:	e09d      	b.n	80007b6 <__aeabi_fdiv+0x196>
 800067a:	4971      	ldr	r1, [pc, #452]	@ (8000840 <__aeabi_fdiv+0x220>)
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	58cb      	ldr	r3, [r1, r3]
 8000680:	469f      	mov	pc, r3
 8000682:	2d00      	cmp	r5, #0
 8000684:	d15a      	bne.n	800073c <__aeabi_fdiv+0x11c>
 8000686:	2308      	movs	r3, #8
 8000688:	4699      	mov	r9, r3
 800068a:	3b06      	subs	r3, #6
 800068c:	0274      	lsls	r4, r6, #9
 800068e:	469a      	mov	sl, r3
 8000690:	0073      	lsls	r3, r6, #1
 8000692:	27ff      	movs	r7, #255	@ 0xff
 8000694:	0a64      	lsrs	r4, r4, #9
 8000696:	0e1b      	lsrs	r3, r3, #24
 8000698:	0ff6      	lsrs	r6, r6, #31
 800069a:	2b00      	cmp	r3, #0
 800069c:	d1de      	bne.n	800065c <__aeabi_fdiv+0x3c>
 800069e:	2c00      	cmp	r4, #0
 80006a0:	d13b      	bne.n	800071a <__aeabi_fdiv+0xfa>
 80006a2:	2301      	movs	r3, #1
 80006a4:	4642      	mov	r2, r8
 80006a6:	4649      	mov	r1, r9
 80006a8:	4072      	eors	r2, r6
 80006aa:	4319      	orrs	r1, r3
 80006ac:	290e      	cmp	r1, #14
 80006ae:	d818      	bhi.n	80006e2 <__aeabi_fdiv+0xc2>
 80006b0:	4864      	ldr	r0, [pc, #400]	@ (8000844 <__aeabi_fdiv+0x224>)
 80006b2:	0089      	lsls	r1, r1, #2
 80006b4:	5841      	ldr	r1, [r0, r1]
 80006b6:	468f      	mov	pc, r1
 80006b8:	4653      	mov	r3, sl
 80006ba:	2b02      	cmp	r3, #2
 80006bc:	d100      	bne.n	80006c0 <__aeabi_fdiv+0xa0>
 80006be:	e0b8      	b.n	8000832 <__aeabi_fdiv+0x212>
 80006c0:	2b03      	cmp	r3, #3
 80006c2:	d06e      	beq.n	80007a2 <__aeabi_fdiv+0x182>
 80006c4:	4642      	mov	r2, r8
 80006c6:	002c      	movs	r4, r5
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d140      	bne.n	800074e <__aeabi_fdiv+0x12e>
 80006cc:	2000      	movs	r0, #0
 80006ce:	2400      	movs	r4, #0
 80006d0:	05c0      	lsls	r0, r0, #23
 80006d2:	4320      	orrs	r0, r4
 80006d4:	07d2      	lsls	r2, r2, #31
 80006d6:	4310      	orrs	r0, r2
 80006d8:	bce0      	pop	{r5, r6, r7}
 80006da:	46ba      	mov	sl, r7
 80006dc:	46b1      	mov	r9, r6
 80006de:	46a8      	mov	r8, r5
 80006e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e2:	20ff      	movs	r0, #255	@ 0xff
 80006e4:	2400      	movs	r4, #0
 80006e6:	e7f3      	b.n	80006d0 <__aeabi_fdiv+0xb0>
 80006e8:	2c00      	cmp	r4, #0
 80006ea:	d120      	bne.n	800072e <__aeabi_fdiv+0x10e>
 80006ec:	2302      	movs	r3, #2
 80006ee:	3fff      	subs	r7, #255	@ 0xff
 80006f0:	e7d8      	b.n	80006a4 <__aeabi_fdiv+0x84>
 80006f2:	2d00      	cmp	r5, #0
 80006f4:	d105      	bne.n	8000702 <__aeabi_fdiv+0xe2>
 80006f6:	2304      	movs	r3, #4
 80006f8:	4699      	mov	r9, r3
 80006fa:	3b03      	subs	r3, #3
 80006fc:	2700      	movs	r7, #0
 80006fe:	469a      	mov	sl, r3
 8000700:	e7a5      	b.n	800064e <__aeabi_fdiv+0x2e>
 8000702:	0028      	movs	r0, r5
 8000704:	f000 fd48 	bl	8001198 <__clzsi2>
 8000708:	2776      	movs	r7, #118	@ 0x76
 800070a:	1f43      	subs	r3, r0, #5
 800070c:	409d      	lsls	r5, r3
 800070e:	2300      	movs	r3, #0
 8000710:	427f      	negs	r7, r7
 8000712:	4699      	mov	r9, r3
 8000714:	469a      	mov	sl, r3
 8000716:	1a3f      	subs	r7, r7, r0
 8000718:	e799      	b.n	800064e <__aeabi_fdiv+0x2e>
 800071a:	0020      	movs	r0, r4
 800071c:	f000 fd3c 	bl	8001198 <__clzsi2>
 8000720:	1f43      	subs	r3, r0, #5
 8000722:	409c      	lsls	r4, r3
 8000724:	2376      	movs	r3, #118	@ 0x76
 8000726:	425b      	negs	r3, r3
 8000728:	1a1b      	subs	r3, r3, r0
 800072a:	2000      	movs	r0, #0
 800072c:	e79e      	b.n	800066c <__aeabi_fdiv+0x4c>
 800072e:	2303      	movs	r3, #3
 8000730:	464a      	mov	r2, r9
 8000732:	431a      	orrs	r2, r3
 8000734:	4691      	mov	r9, r2
 8000736:	2003      	movs	r0, #3
 8000738:	33fc      	adds	r3, #252	@ 0xfc
 800073a:	e797      	b.n	800066c <__aeabi_fdiv+0x4c>
 800073c:	230c      	movs	r3, #12
 800073e:	4699      	mov	r9, r3
 8000740:	3b09      	subs	r3, #9
 8000742:	27ff      	movs	r7, #255	@ 0xff
 8000744:	469a      	mov	sl, r3
 8000746:	e782      	b.n	800064e <__aeabi_fdiv+0x2e>
 8000748:	2803      	cmp	r0, #3
 800074a:	d02c      	beq.n	80007a6 <__aeabi_fdiv+0x186>
 800074c:	0032      	movs	r2, r6
 800074e:	0038      	movs	r0, r7
 8000750:	307f      	adds	r0, #127	@ 0x7f
 8000752:	2800      	cmp	r0, #0
 8000754:	dd47      	ble.n	80007e6 <__aeabi_fdiv+0x1c6>
 8000756:	0763      	lsls	r3, r4, #29
 8000758:	d004      	beq.n	8000764 <__aeabi_fdiv+0x144>
 800075a:	230f      	movs	r3, #15
 800075c:	4023      	ands	r3, r4
 800075e:	2b04      	cmp	r3, #4
 8000760:	d000      	beq.n	8000764 <__aeabi_fdiv+0x144>
 8000762:	3404      	adds	r4, #4
 8000764:	0123      	lsls	r3, r4, #4
 8000766:	d503      	bpl.n	8000770 <__aeabi_fdiv+0x150>
 8000768:	0038      	movs	r0, r7
 800076a:	4b37      	ldr	r3, [pc, #220]	@ (8000848 <__aeabi_fdiv+0x228>)
 800076c:	3080      	adds	r0, #128	@ 0x80
 800076e:	401c      	ands	r4, r3
 8000770:	28fe      	cmp	r0, #254	@ 0xfe
 8000772:	dcb6      	bgt.n	80006e2 <__aeabi_fdiv+0xc2>
 8000774:	01a4      	lsls	r4, r4, #6
 8000776:	0a64      	lsrs	r4, r4, #9
 8000778:	b2c0      	uxtb	r0, r0
 800077a:	e7a9      	b.n	80006d0 <__aeabi_fdiv+0xb0>
 800077c:	2480      	movs	r4, #128	@ 0x80
 800077e:	2200      	movs	r2, #0
 8000780:	20ff      	movs	r0, #255	@ 0xff
 8000782:	03e4      	lsls	r4, r4, #15
 8000784:	e7a4      	b.n	80006d0 <__aeabi_fdiv+0xb0>
 8000786:	2380      	movs	r3, #128	@ 0x80
 8000788:	03db      	lsls	r3, r3, #15
 800078a:	421d      	tst	r5, r3
 800078c:	d001      	beq.n	8000792 <__aeabi_fdiv+0x172>
 800078e:	421c      	tst	r4, r3
 8000790:	d00b      	beq.n	80007aa <__aeabi_fdiv+0x18a>
 8000792:	2480      	movs	r4, #128	@ 0x80
 8000794:	03e4      	lsls	r4, r4, #15
 8000796:	432c      	orrs	r4, r5
 8000798:	0264      	lsls	r4, r4, #9
 800079a:	4642      	mov	r2, r8
 800079c:	20ff      	movs	r0, #255	@ 0xff
 800079e:	0a64      	lsrs	r4, r4, #9
 80007a0:	e796      	b.n	80006d0 <__aeabi_fdiv+0xb0>
 80007a2:	4646      	mov	r6, r8
 80007a4:	002c      	movs	r4, r5
 80007a6:	2380      	movs	r3, #128	@ 0x80
 80007a8:	03db      	lsls	r3, r3, #15
 80007aa:	431c      	orrs	r4, r3
 80007ac:	0264      	lsls	r4, r4, #9
 80007ae:	0032      	movs	r2, r6
 80007b0:	20ff      	movs	r0, #255	@ 0xff
 80007b2:	0a64      	lsrs	r4, r4, #9
 80007b4:	e78c      	b.n	80006d0 <__aeabi_fdiv+0xb0>
 80007b6:	016d      	lsls	r5, r5, #5
 80007b8:	0160      	lsls	r0, r4, #5
 80007ba:	4285      	cmp	r5, r0
 80007bc:	d22d      	bcs.n	800081a <__aeabi_fdiv+0x1fa>
 80007be:	231b      	movs	r3, #27
 80007c0:	2400      	movs	r4, #0
 80007c2:	3f01      	subs	r7, #1
 80007c4:	2601      	movs	r6, #1
 80007c6:	0029      	movs	r1, r5
 80007c8:	0064      	lsls	r4, r4, #1
 80007ca:	006d      	lsls	r5, r5, #1
 80007cc:	2900      	cmp	r1, #0
 80007ce:	db01      	blt.n	80007d4 <__aeabi_fdiv+0x1b4>
 80007d0:	4285      	cmp	r5, r0
 80007d2:	d301      	bcc.n	80007d8 <__aeabi_fdiv+0x1b8>
 80007d4:	1a2d      	subs	r5, r5, r0
 80007d6:	4334      	orrs	r4, r6
 80007d8:	3b01      	subs	r3, #1
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d1f3      	bne.n	80007c6 <__aeabi_fdiv+0x1a6>
 80007de:	1e6b      	subs	r3, r5, #1
 80007e0:	419d      	sbcs	r5, r3
 80007e2:	432c      	orrs	r4, r5
 80007e4:	e7b3      	b.n	800074e <__aeabi_fdiv+0x12e>
 80007e6:	2301      	movs	r3, #1
 80007e8:	1a1b      	subs	r3, r3, r0
 80007ea:	2b1b      	cmp	r3, #27
 80007ec:	dd00      	ble.n	80007f0 <__aeabi_fdiv+0x1d0>
 80007ee:	e76d      	b.n	80006cc <__aeabi_fdiv+0xac>
 80007f0:	0021      	movs	r1, r4
 80007f2:	379e      	adds	r7, #158	@ 0x9e
 80007f4:	40d9      	lsrs	r1, r3
 80007f6:	40bc      	lsls	r4, r7
 80007f8:	000b      	movs	r3, r1
 80007fa:	1e61      	subs	r1, r4, #1
 80007fc:	418c      	sbcs	r4, r1
 80007fe:	4323      	orrs	r3, r4
 8000800:	0759      	lsls	r1, r3, #29
 8000802:	d004      	beq.n	800080e <__aeabi_fdiv+0x1ee>
 8000804:	210f      	movs	r1, #15
 8000806:	4019      	ands	r1, r3
 8000808:	2904      	cmp	r1, #4
 800080a:	d000      	beq.n	800080e <__aeabi_fdiv+0x1ee>
 800080c:	3304      	adds	r3, #4
 800080e:	0159      	lsls	r1, r3, #5
 8000810:	d413      	bmi.n	800083a <__aeabi_fdiv+0x21a>
 8000812:	019b      	lsls	r3, r3, #6
 8000814:	2000      	movs	r0, #0
 8000816:	0a5c      	lsrs	r4, r3, #9
 8000818:	e75a      	b.n	80006d0 <__aeabi_fdiv+0xb0>
 800081a:	231a      	movs	r3, #26
 800081c:	2401      	movs	r4, #1
 800081e:	1a2d      	subs	r5, r5, r0
 8000820:	e7d0      	b.n	80007c4 <__aeabi_fdiv+0x1a4>
 8000822:	1e98      	subs	r0, r3, #2
 8000824:	4243      	negs	r3, r0
 8000826:	4158      	adcs	r0, r3
 8000828:	4240      	negs	r0, r0
 800082a:	0032      	movs	r2, r6
 800082c:	2400      	movs	r4, #0
 800082e:	b2c0      	uxtb	r0, r0
 8000830:	e74e      	b.n	80006d0 <__aeabi_fdiv+0xb0>
 8000832:	4642      	mov	r2, r8
 8000834:	20ff      	movs	r0, #255	@ 0xff
 8000836:	2400      	movs	r4, #0
 8000838:	e74a      	b.n	80006d0 <__aeabi_fdiv+0xb0>
 800083a:	2001      	movs	r0, #1
 800083c:	2400      	movs	r4, #0
 800083e:	e747      	b.n	80006d0 <__aeabi_fdiv+0xb0>
 8000840:	0800a1b4 	.word	0x0800a1b4
 8000844:	0800a1f4 	.word	0x0800a1f4
 8000848:	f7ffffff 	.word	0xf7ffffff

0800084c <__aeabi_fmul>:
 800084c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084e:	464f      	mov	r7, r9
 8000850:	4646      	mov	r6, r8
 8000852:	46d6      	mov	lr, sl
 8000854:	0044      	lsls	r4, r0, #1
 8000856:	b5c0      	push	{r6, r7, lr}
 8000858:	0246      	lsls	r6, r0, #9
 800085a:	1c0f      	adds	r7, r1, #0
 800085c:	0a76      	lsrs	r6, r6, #9
 800085e:	0e24      	lsrs	r4, r4, #24
 8000860:	0fc5      	lsrs	r5, r0, #31
 8000862:	2c00      	cmp	r4, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_fmul+0x1c>
 8000866:	e0da      	b.n	8000a1e <__aeabi_fmul+0x1d2>
 8000868:	2cff      	cmp	r4, #255	@ 0xff
 800086a:	d074      	beq.n	8000956 <__aeabi_fmul+0x10a>
 800086c:	2380      	movs	r3, #128	@ 0x80
 800086e:	00f6      	lsls	r6, r6, #3
 8000870:	04db      	lsls	r3, r3, #19
 8000872:	431e      	orrs	r6, r3
 8000874:	2300      	movs	r3, #0
 8000876:	4699      	mov	r9, r3
 8000878:	469a      	mov	sl, r3
 800087a:	3c7f      	subs	r4, #127	@ 0x7f
 800087c:	027b      	lsls	r3, r7, #9
 800087e:	0a5b      	lsrs	r3, r3, #9
 8000880:	4698      	mov	r8, r3
 8000882:	007b      	lsls	r3, r7, #1
 8000884:	0e1b      	lsrs	r3, r3, #24
 8000886:	0fff      	lsrs	r7, r7, #31
 8000888:	2b00      	cmp	r3, #0
 800088a:	d074      	beq.n	8000976 <__aeabi_fmul+0x12a>
 800088c:	2bff      	cmp	r3, #255	@ 0xff
 800088e:	d100      	bne.n	8000892 <__aeabi_fmul+0x46>
 8000890:	e08e      	b.n	80009b0 <__aeabi_fmul+0x164>
 8000892:	4642      	mov	r2, r8
 8000894:	2180      	movs	r1, #128	@ 0x80
 8000896:	00d2      	lsls	r2, r2, #3
 8000898:	04c9      	lsls	r1, r1, #19
 800089a:	4311      	orrs	r1, r2
 800089c:	3b7f      	subs	r3, #127	@ 0x7f
 800089e:	002a      	movs	r2, r5
 80008a0:	18e4      	adds	r4, r4, r3
 80008a2:	464b      	mov	r3, r9
 80008a4:	407a      	eors	r2, r7
 80008a6:	4688      	mov	r8, r1
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	2b0a      	cmp	r3, #10
 80008ac:	dc75      	bgt.n	800099a <__aeabi_fmul+0x14e>
 80008ae:	464b      	mov	r3, r9
 80008b0:	2000      	movs	r0, #0
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	dd0f      	ble.n	80008d6 <__aeabi_fmul+0x8a>
 80008b6:	4649      	mov	r1, r9
 80008b8:	2301      	movs	r3, #1
 80008ba:	408b      	lsls	r3, r1
 80008bc:	21a6      	movs	r1, #166	@ 0xa6
 80008be:	00c9      	lsls	r1, r1, #3
 80008c0:	420b      	tst	r3, r1
 80008c2:	d169      	bne.n	8000998 <__aeabi_fmul+0x14c>
 80008c4:	2190      	movs	r1, #144	@ 0x90
 80008c6:	0089      	lsls	r1, r1, #2
 80008c8:	420b      	tst	r3, r1
 80008ca:	d000      	beq.n	80008ce <__aeabi_fmul+0x82>
 80008cc:	e100      	b.n	8000ad0 <__aeabi_fmul+0x284>
 80008ce:	2188      	movs	r1, #136	@ 0x88
 80008d0:	4219      	tst	r1, r3
 80008d2:	d000      	beq.n	80008d6 <__aeabi_fmul+0x8a>
 80008d4:	e0f5      	b.n	8000ac2 <__aeabi_fmul+0x276>
 80008d6:	4641      	mov	r1, r8
 80008d8:	0409      	lsls	r1, r1, #16
 80008da:	0c09      	lsrs	r1, r1, #16
 80008dc:	4643      	mov	r3, r8
 80008de:	0008      	movs	r0, r1
 80008e0:	0c35      	lsrs	r5, r6, #16
 80008e2:	0436      	lsls	r6, r6, #16
 80008e4:	0c1b      	lsrs	r3, r3, #16
 80008e6:	0c36      	lsrs	r6, r6, #16
 80008e8:	4370      	muls	r0, r6
 80008ea:	4369      	muls	r1, r5
 80008ec:	435e      	muls	r6, r3
 80008ee:	435d      	muls	r5, r3
 80008f0:	1876      	adds	r6, r6, r1
 80008f2:	0c03      	lsrs	r3, r0, #16
 80008f4:	199b      	adds	r3, r3, r6
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d903      	bls.n	8000902 <__aeabi_fmul+0xb6>
 80008fa:	2180      	movs	r1, #128	@ 0x80
 80008fc:	0249      	lsls	r1, r1, #9
 80008fe:	468c      	mov	ip, r1
 8000900:	4465      	add	r5, ip
 8000902:	0400      	lsls	r0, r0, #16
 8000904:	0419      	lsls	r1, r3, #16
 8000906:	0c00      	lsrs	r0, r0, #16
 8000908:	1809      	adds	r1, r1, r0
 800090a:	018e      	lsls	r6, r1, #6
 800090c:	1e70      	subs	r0, r6, #1
 800090e:	4186      	sbcs	r6, r0
 8000910:	0c1b      	lsrs	r3, r3, #16
 8000912:	0e89      	lsrs	r1, r1, #26
 8000914:	195b      	adds	r3, r3, r5
 8000916:	430e      	orrs	r6, r1
 8000918:	019b      	lsls	r3, r3, #6
 800091a:	431e      	orrs	r6, r3
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	d46c      	bmi.n	80009fa <__aeabi_fmul+0x1ae>
 8000920:	0023      	movs	r3, r4
 8000922:	337f      	adds	r3, #127	@ 0x7f
 8000924:	2b00      	cmp	r3, #0
 8000926:	dc00      	bgt.n	800092a <__aeabi_fmul+0xde>
 8000928:	e0b1      	b.n	8000a8e <__aeabi_fmul+0x242>
 800092a:	0015      	movs	r5, r2
 800092c:	0771      	lsls	r1, r6, #29
 800092e:	d00b      	beq.n	8000948 <__aeabi_fmul+0xfc>
 8000930:	200f      	movs	r0, #15
 8000932:	0021      	movs	r1, r4
 8000934:	4030      	ands	r0, r6
 8000936:	2804      	cmp	r0, #4
 8000938:	d006      	beq.n	8000948 <__aeabi_fmul+0xfc>
 800093a:	3604      	adds	r6, #4
 800093c:	0132      	lsls	r2, r6, #4
 800093e:	d503      	bpl.n	8000948 <__aeabi_fmul+0xfc>
 8000940:	4b6e      	ldr	r3, [pc, #440]	@ (8000afc <__aeabi_fmul+0x2b0>)
 8000942:	401e      	ands	r6, r3
 8000944:	000b      	movs	r3, r1
 8000946:	3380      	adds	r3, #128	@ 0x80
 8000948:	2bfe      	cmp	r3, #254	@ 0xfe
 800094a:	dd00      	ble.n	800094e <__aeabi_fmul+0x102>
 800094c:	e0bd      	b.n	8000aca <__aeabi_fmul+0x27e>
 800094e:	01b2      	lsls	r2, r6, #6
 8000950:	0a52      	lsrs	r2, r2, #9
 8000952:	b2db      	uxtb	r3, r3
 8000954:	e048      	b.n	80009e8 <__aeabi_fmul+0x19c>
 8000956:	2e00      	cmp	r6, #0
 8000958:	d000      	beq.n	800095c <__aeabi_fmul+0x110>
 800095a:	e092      	b.n	8000a82 <__aeabi_fmul+0x236>
 800095c:	2308      	movs	r3, #8
 800095e:	4699      	mov	r9, r3
 8000960:	3b06      	subs	r3, #6
 8000962:	469a      	mov	sl, r3
 8000964:	027b      	lsls	r3, r7, #9
 8000966:	0a5b      	lsrs	r3, r3, #9
 8000968:	4698      	mov	r8, r3
 800096a:	007b      	lsls	r3, r7, #1
 800096c:	24ff      	movs	r4, #255	@ 0xff
 800096e:	0e1b      	lsrs	r3, r3, #24
 8000970:	0fff      	lsrs	r7, r7, #31
 8000972:	2b00      	cmp	r3, #0
 8000974:	d18a      	bne.n	800088c <__aeabi_fmul+0x40>
 8000976:	4642      	mov	r2, r8
 8000978:	2a00      	cmp	r2, #0
 800097a:	d164      	bne.n	8000a46 <__aeabi_fmul+0x1fa>
 800097c:	4649      	mov	r1, r9
 800097e:	3201      	adds	r2, #1
 8000980:	4311      	orrs	r1, r2
 8000982:	4689      	mov	r9, r1
 8000984:	290a      	cmp	r1, #10
 8000986:	dc08      	bgt.n	800099a <__aeabi_fmul+0x14e>
 8000988:	407d      	eors	r5, r7
 800098a:	2001      	movs	r0, #1
 800098c:	b2ea      	uxtb	r2, r5
 800098e:	2902      	cmp	r1, #2
 8000990:	dc91      	bgt.n	80008b6 <__aeabi_fmul+0x6a>
 8000992:	0015      	movs	r5, r2
 8000994:	2200      	movs	r2, #0
 8000996:	e027      	b.n	80009e8 <__aeabi_fmul+0x19c>
 8000998:	0015      	movs	r5, r2
 800099a:	4653      	mov	r3, sl
 800099c:	2b02      	cmp	r3, #2
 800099e:	d100      	bne.n	80009a2 <__aeabi_fmul+0x156>
 80009a0:	e093      	b.n	8000aca <__aeabi_fmul+0x27e>
 80009a2:	2b03      	cmp	r3, #3
 80009a4:	d01a      	beq.n	80009dc <__aeabi_fmul+0x190>
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d12c      	bne.n	8000a04 <__aeabi_fmul+0x1b8>
 80009aa:	2300      	movs	r3, #0
 80009ac:	2200      	movs	r2, #0
 80009ae:	e01b      	b.n	80009e8 <__aeabi_fmul+0x19c>
 80009b0:	4643      	mov	r3, r8
 80009b2:	34ff      	adds	r4, #255	@ 0xff
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d055      	beq.n	8000a64 <__aeabi_fmul+0x218>
 80009b8:	2103      	movs	r1, #3
 80009ba:	464b      	mov	r3, r9
 80009bc:	430b      	orrs	r3, r1
 80009be:	0019      	movs	r1, r3
 80009c0:	2b0a      	cmp	r3, #10
 80009c2:	dc00      	bgt.n	80009c6 <__aeabi_fmul+0x17a>
 80009c4:	e092      	b.n	8000aec <__aeabi_fmul+0x2a0>
 80009c6:	2b0f      	cmp	r3, #15
 80009c8:	d000      	beq.n	80009cc <__aeabi_fmul+0x180>
 80009ca:	e08c      	b.n	8000ae6 <__aeabi_fmul+0x29a>
 80009cc:	2280      	movs	r2, #128	@ 0x80
 80009ce:	03d2      	lsls	r2, r2, #15
 80009d0:	4216      	tst	r6, r2
 80009d2:	d003      	beq.n	80009dc <__aeabi_fmul+0x190>
 80009d4:	4643      	mov	r3, r8
 80009d6:	4213      	tst	r3, r2
 80009d8:	d100      	bne.n	80009dc <__aeabi_fmul+0x190>
 80009da:	e07d      	b.n	8000ad8 <__aeabi_fmul+0x28c>
 80009dc:	2280      	movs	r2, #128	@ 0x80
 80009de:	03d2      	lsls	r2, r2, #15
 80009e0:	4332      	orrs	r2, r6
 80009e2:	0252      	lsls	r2, r2, #9
 80009e4:	0a52      	lsrs	r2, r2, #9
 80009e6:	23ff      	movs	r3, #255	@ 0xff
 80009e8:	05d8      	lsls	r0, r3, #23
 80009ea:	07ed      	lsls	r5, r5, #31
 80009ec:	4310      	orrs	r0, r2
 80009ee:	4328      	orrs	r0, r5
 80009f0:	bce0      	pop	{r5, r6, r7}
 80009f2:	46ba      	mov	sl, r7
 80009f4:	46b1      	mov	r9, r6
 80009f6:	46a8      	mov	r8, r5
 80009f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80009fa:	2301      	movs	r3, #1
 80009fc:	0015      	movs	r5, r2
 80009fe:	0871      	lsrs	r1, r6, #1
 8000a00:	401e      	ands	r6, r3
 8000a02:	430e      	orrs	r6, r1
 8000a04:	0023      	movs	r3, r4
 8000a06:	3380      	adds	r3, #128	@ 0x80
 8000a08:	1c61      	adds	r1, r4, #1
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	dd41      	ble.n	8000a92 <__aeabi_fmul+0x246>
 8000a0e:	0772      	lsls	r2, r6, #29
 8000a10:	d094      	beq.n	800093c <__aeabi_fmul+0xf0>
 8000a12:	220f      	movs	r2, #15
 8000a14:	4032      	ands	r2, r6
 8000a16:	2a04      	cmp	r2, #4
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fmul+0x1d0>
 8000a1a:	e78e      	b.n	800093a <__aeabi_fmul+0xee>
 8000a1c:	e78e      	b.n	800093c <__aeabi_fmul+0xf0>
 8000a1e:	2e00      	cmp	r6, #0
 8000a20:	d105      	bne.n	8000a2e <__aeabi_fmul+0x1e2>
 8000a22:	2304      	movs	r3, #4
 8000a24:	4699      	mov	r9, r3
 8000a26:	3b03      	subs	r3, #3
 8000a28:	2400      	movs	r4, #0
 8000a2a:	469a      	mov	sl, r3
 8000a2c:	e726      	b.n	800087c <__aeabi_fmul+0x30>
 8000a2e:	0030      	movs	r0, r6
 8000a30:	f000 fbb2 	bl	8001198 <__clzsi2>
 8000a34:	2476      	movs	r4, #118	@ 0x76
 8000a36:	1f43      	subs	r3, r0, #5
 8000a38:	409e      	lsls	r6, r3
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	4264      	negs	r4, r4
 8000a3e:	4699      	mov	r9, r3
 8000a40:	469a      	mov	sl, r3
 8000a42:	1a24      	subs	r4, r4, r0
 8000a44:	e71a      	b.n	800087c <__aeabi_fmul+0x30>
 8000a46:	4640      	mov	r0, r8
 8000a48:	f000 fba6 	bl	8001198 <__clzsi2>
 8000a4c:	464b      	mov	r3, r9
 8000a4e:	1a24      	subs	r4, r4, r0
 8000a50:	3c76      	subs	r4, #118	@ 0x76
 8000a52:	2b0a      	cmp	r3, #10
 8000a54:	dca1      	bgt.n	800099a <__aeabi_fmul+0x14e>
 8000a56:	4643      	mov	r3, r8
 8000a58:	3805      	subs	r0, #5
 8000a5a:	4083      	lsls	r3, r0
 8000a5c:	407d      	eors	r5, r7
 8000a5e:	4698      	mov	r8, r3
 8000a60:	b2ea      	uxtb	r2, r5
 8000a62:	e724      	b.n	80008ae <__aeabi_fmul+0x62>
 8000a64:	464a      	mov	r2, r9
 8000a66:	3302      	adds	r3, #2
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	002a      	movs	r2, r5
 8000a6c:	407a      	eors	r2, r7
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	2b0a      	cmp	r3, #10
 8000a72:	dc92      	bgt.n	800099a <__aeabi_fmul+0x14e>
 8000a74:	4649      	mov	r1, r9
 8000a76:	0015      	movs	r5, r2
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	d026      	beq.n	8000aca <__aeabi_fmul+0x27e>
 8000a7c:	4699      	mov	r9, r3
 8000a7e:	2002      	movs	r0, #2
 8000a80:	e719      	b.n	80008b6 <__aeabi_fmul+0x6a>
 8000a82:	230c      	movs	r3, #12
 8000a84:	4699      	mov	r9, r3
 8000a86:	3b09      	subs	r3, #9
 8000a88:	24ff      	movs	r4, #255	@ 0xff
 8000a8a:	469a      	mov	sl, r3
 8000a8c:	e6f6      	b.n	800087c <__aeabi_fmul+0x30>
 8000a8e:	0015      	movs	r5, r2
 8000a90:	0021      	movs	r1, r4
 8000a92:	2201      	movs	r2, #1
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	2b1b      	cmp	r3, #27
 8000a98:	dd00      	ble.n	8000a9c <__aeabi_fmul+0x250>
 8000a9a:	e786      	b.n	80009aa <__aeabi_fmul+0x15e>
 8000a9c:	319e      	adds	r1, #158	@ 0x9e
 8000a9e:	0032      	movs	r2, r6
 8000aa0:	408e      	lsls	r6, r1
 8000aa2:	40da      	lsrs	r2, r3
 8000aa4:	1e73      	subs	r3, r6, #1
 8000aa6:	419e      	sbcs	r6, r3
 8000aa8:	4332      	orrs	r2, r6
 8000aaa:	0753      	lsls	r3, r2, #29
 8000aac:	d004      	beq.n	8000ab8 <__aeabi_fmul+0x26c>
 8000aae:	230f      	movs	r3, #15
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d000      	beq.n	8000ab8 <__aeabi_fmul+0x26c>
 8000ab6:	3204      	adds	r2, #4
 8000ab8:	0153      	lsls	r3, r2, #5
 8000aba:	d510      	bpl.n	8000ade <__aeabi_fmul+0x292>
 8000abc:	2301      	movs	r3, #1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	e792      	b.n	80009e8 <__aeabi_fmul+0x19c>
 8000ac2:	003d      	movs	r5, r7
 8000ac4:	4646      	mov	r6, r8
 8000ac6:	4682      	mov	sl, r0
 8000ac8:	e767      	b.n	800099a <__aeabi_fmul+0x14e>
 8000aca:	23ff      	movs	r3, #255	@ 0xff
 8000acc:	2200      	movs	r2, #0
 8000ace:	e78b      	b.n	80009e8 <__aeabi_fmul+0x19c>
 8000ad0:	2280      	movs	r2, #128	@ 0x80
 8000ad2:	2500      	movs	r5, #0
 8000ad4:	03d2      	lsls	r2, r2, #15
 8000ad6:	e786      	b.n	80009e6 <__aeabi_fmul+0x19a>
 8000ad8:	003d      	movs	r5, r7
 8000ada:	431a      	orrs	r2, r3
 8000adc:	e783      	b.n	80009e6 <__aeabi_fmul+0x19a>
 8000ade:	0192      	lsls	r2, r2, #6
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	0a52      	lsrs	r2, r2, #9
 8000ae4:	e780      	b.n	80009e8 <__aeabi_fmul+0x19c>
 8000ae6:	003d      	movs	r5, r7
 8000ae8:	4646      	mov	r6, r8
 8000aea:	e777      	b.n	80009dc <__aeabi_fmul+0x190>
 8000aec:	002a      	movs	r2, r5
 8000aee:	2301      	movs	r3, #1
 8000af0:	407a      	eors	r2, r7
 8000af2:	408b      	lsls	r3, r1
 8000af4:	2003      	movs	r0, #3
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	e6e9      	b.n	80008ce <__aeabi_fmul+0x82>
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	f7ffffff 	.word	0xf7ffffff

08000b00 <__aeabi_fsub>:
 8000b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b02:	4647      	mov	r7, r8
 8000b04:	46ce      	mov	lr, r9
 8000b06:	0243      	lsls	r3, r0, #9
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	0a5f      	lsrs	r7, r3, #9
 8000b0c:	099b      	lsrs	r3, r3, #6
 8000b0e:	0045      	lsls	r5, r0, #1
 8000b10:	004a      	lsls	r2, r1, #1
 8000b12:	469c      	mov	ip, r3
 8000b14:	024b      	lsls	r3, r1, #9
 8000b16:	0fc4      	lsrs	r4, r0, #31
 8000b18:	0fce      	lsrs	r6, r1, #31
 8000b1a:	0e2d      	lsrs	r5, r5, #24
 8000b1c:	0a58      	lsrs	r0, r3, #9
 8000b1e:	0e12      	lsrs	r2, r2, #24
 8000b20:	0999      	lsrs	r1, r3, #6
 8000b22:	2aff      	cmp	r2, #255	@ 0xff
 8000b24:	d06b      	beq.n	8000bfe <__aeabi_fsub+0xfe>
 8000b26:	2301      	movs	r3, #1
 8000b28:	405e      	eors	r6, r3
 8000b2a:	1aab      	subs	r3, r5, r2
 8000b2c:	42b4      	cmp	r4, r6
 8000b2e:	d04b      	beq.n	8000bc8 <__aeabi_fsub+0xc8>
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	dc00      	bgt.n	8000b36 <__aeabi_fsub+0x36>
 8000b34:	e0ff      	b.n	8000d36 <__aeabi_fsub+0x236>
 8000b36:	2a00      	cmp	r2, #0
 8000b38:	d100      	bne.n	8000b3c <__aeabi_fsub+0x3c>
 8000b3a:	e088      	b.n	8000c4e <__aeabi_fsub+0x14e>
 8000b3c:	2dff      	cmp	r5, #255	@ 0xff
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_fsub+0x42>
 8000b40:	e0ef      	b.n	8000d22 <__aeabi_fsub+0x222>
 8000b42:	2280      	movs	r2, #128	@ 0x80
 8000b44:	04d2      	lsls	r2, r2, #19
 8000b46:	4311      	orrs	r1, r2
 8000b48:	2001      	movs	r0, #1
 8000b4a:	2b1b      	cmp	r3, #27
 8000b4c:	dc08      	bgt.n	8000b60 <__aeabi_fsub+0x60>
 8000b4e:	0008      	movs	r0, r1
 8000b50:	2220      	movs	r2, #32
 8000b52:	40d8      	lsrs	r0, r3
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	4099      	lsls	r1, r3
 8000b58:	000b      	movs	r3, r1
 8000b5a:	1e5a      	subs	r2, r3, #1
 8000b5c:	4193      	sbcs	r3, r2
 8000b5e:	4318      	orrs	r0, r3
 8000b60:	4663      	mov	r3, ip
 8000b62:	1a1b      	subs	r3, r3, r0
 8000b64:	469c      	mov	ip, r3
 8000b66:	4663      	mov	r3, ip
 8000b68:	015b      	lsls	r3, r3, #5
 8000b6a:	d400      	bmi.n	8000b6e <__aeabi_fsub+0x6e>
 8000b6c:	e0cd      	b.n	8000d0a <__aeabi_fsub+0x20a>
 8000b6e:	4663      	mov	r3, ip
 8000b70:	019f      	lsls	r7, r3, #6
 8000b72:	09bf      	lsrs	r7, r7, #6
 8000b74:	0038      	movs	r0, r7
 8000b76:	f000 fb0f 	bl	8001198 <__clzsi2>
 8000b7a:	003b      	movs	r3, r7
 8000b7c:	3805      	subs	r0, #5
 8000b7e:	4083      	lsls	r3, r0
 8000b80:	4285      	cmp	r5, r0
 8000b82:	dc00      	bgt.n	8000b86 <__aeabi_fsub+0x86>
 8000b84:	e0a2      	b.n	8000ccc <__aeabi_fsub+0x1cc>
 8000b86:	4ab7      	ldr	r2, [pc, #732]	@ (8000e64 <__aeabi_fsub+0x364>)
 8000b88:	1a2d      	subs	r5, r5, r0
 8000b8a:	401a      	ands	r2, r3
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	075a      	lsls	r2, r3, #29
 8000b90:	d100      	bne.n	8000b94 <__aeabi_fsub+0x94>
 8000b92:	e0c3      	b.n	8000d1c <__aeabi_fsub+0x21c>
 8000b94:	220f      	movs	r2, #15
 8000b96:	4013      	ands	r3, r2
 8000b98:	2b04      	cmp	r3, #4
 8000b9a:	d100      	bne.n	8000b9e <__aeabi_fsub+0x9e>
 8000b9c:	e0be      	b.n	8000d1c <__aeabi_fsub+0x21c>
 8000b9e:	2304      	movs	r3, #4
 8000ba0:	4698      	mov	r8, r3
 8000ba2:	44c4      	add	ip, r8
 8000ba4:	4663      	mov	r3, ip
 8000ba6:	015b      	lsls	r3, r3, #5
 8000ba8:	d400      	bmi.n	8000bac <__aeabi_fsub+0xac>
 8000baa:	e0b7      	b.n	8000d1c <__aeabi_fsub+0x21c>
 8000bac:	1c68      	adds	r0, r5, #1
 8000bae:	2dfe      	cmp	r5, #254	@ 0xfe
 8000bb0:	d000      	beq.n	8000bb4 <__aeabi_fsub+0xb4>
 8000bb2:	e0a5      	b.n	8000d00 <__aeabi_fsub+0x200>
 8000bb4:	20ff      	movs	r0, #255	@ 0xff
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	05c0      	lsls	r0, r0, #23
 8000bba:	4310      	orrs	r0, r2
 8000bbc:	07e4      	lsls	r4, r4, #31
 8000bbe:	4320      	orrs	r0, r4
 8000bc0:	bcc0      	pop	{r6, r7}
 8000bc2:	46b9      	mov	r9, r7
 8000bc4:	46b0      	mov	r8, r6
 8000bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	dc00      	bgt.n	8000bce <__aeabi_fsub+0xce>
 8000bcc:	e1eb      	b.n	8000fa6 <__aeabi_fsub+0x4a6>
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d046      	beq.n	8000c60 <__aeabi_fsub+0x160>
 8000bd2:	2dff      	cmp	r5, #255	@ 0xff
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_fsub+0xd8>
 8000bd6:	e0a4      	b.n	8000d22 <__aeabi_fsub+0x222>
 8000bd8:	2280      	movs	r2, #128	@ 0x80
 8000bda:	04d2      	lsls	r2, r2, #19
 8000bdc:	4311      	orrs	r1, r2
 8000bde:	2b1b      	cmp	r3, #27
 8000be0:	dc00      	bgt.n	8000be4 <__aeabi_fsub+0xe4>
 8000be2:	e0fb      	b.n	8000ddc <__aeabi_fsub+0x2dc>
 8000be4:	2305      	movs	r3, #5
 8000be6:	4698      	mov	r8, r3
 8000be8:	002b      	movs	r3, r5
 8000bea:	44c4      	add	ip, r8
 8000bec:	4662      	mov	r2, ip
 8000bee:	08d7      	lsrs	r7, r2, #3
 8000bf0:	2bff      	cmp	r3, #255	@ 0xff
 8000bf2:	d100      	bne.n	8000bf6 <__aeabi_fsub+0xf6>
 8000bf4:	e095      	b.n	8000d22 <__aeabi_fsub+0x222>
 8000bf6:	027a      	lsls	r2, r7, #9
 8000bf8:	0a52      	lsrs	r2, r2, #9
 8000bfa:	b2d8      	uxtb	r0, r3
 8000bfc:	e7dc      	b.n	8000bb8 <__aeabi_fsub+0xb8>
 8000bfe:	002b      	movs	r3, r5
 8000c00:	3bff      	subs	r3, #255	@ 0xff
 8000c02:	4699      	mov	r9, r3
 8000c04:	2900      	cmp	r1, #0
 8000c06:	d118      	bne.n	8000c3a <__aeabi_fsub+0x13a>
 8000c08:	2301      	movs	r3, #1
 8000c0a:	405e      	eors	r6, r3
 8000c0c:	42b4      	cmp	r4, r6
 8000c0e:	d100      	bne.n	8000c12 <__aeabi_fsub+0x112>
 8000c10:	e0ca      	b.n	8000da8 <__aeabi_fsub+0x2a8>
 8000c12:	464b      	mov	r3, r9
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d02d      	beq.n	8000c74 <__aeabi_fsub+0x174>
 8000c18:	2d00      	cmp	r5, #0
 8000c1a:	d000      	beq.n	8000c1e <__aeabi_fsub+0x11e>
 8000c1c:	e13c      	b.n	8000e98 <__aeabi_fsub+0x398>
 8000c1e:	23ff      	movs	r3, #255	@ 0xff
 8000c20:	4664      	mov	r4, ip
 8000c22:	2c00      	cmp	r4, #0
 8000c24:	d100      	bne.n	8000c28 <__aeabi_fsub+0x128>
 8000c26:	e15f      	b.n	8000ee8 <__aeabi_fsub+0x3e8>
 8000c28:	1e5d      	subs	r5, r3, #1
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_fsub+0x130>
 8000c2e:	e174      	b.n	8000f1a <__aeabi_fsub+0x41a>
 8000c30:	0034      	movs	r4, r6
 8000c32:	2bff      	cmp	r3, #255	@ 0xff
 8000c34:	d074      	beq.n	8000d20 <__aeabi_fsub+0x220>
 8000c36:	002b      	movs	r3, r5
 8000c38:	e103      	b.n	8000e42 <__aeabi_fsub+0x342>
 8000c3a:	42b4      	cmp	r4, r6
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_fsub+0x140>
 8000c3e:	e09c      	b.n	8000d7a <__aeabi_fsub+0x27a>
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d017      	beq.n	8000c74 <__aeabi_fsub+0x174>
 8000c44:	2d00      	cmp	r5, #0
 8000c46:	d0ea      	beq.n	8000c1e <__aeabi_fsub+0x11e>
 8000c48:	0007      	movs	r7, r0
 8000c4a:	0034      	movs	r4, r6
 8000c4c:	e06c      	b.n	8000d28 <__aeabi_fsub+0x228>
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d0cc      	beq.n	8000bec <__aeabi_fsub+0xec>
 8000c52:	1e5a      	subs	r2, r3, #1
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d02b      	beq.n	8000cb0 <__aeabi_fsub+0x1b0>
 8000c58:	2bff      	cmp	r3, #255	@ 0xff
 8000c5a:	d062      	beq.n	8000d22 <__aeabi_fsub+0x222>
 8000c5c:	0013      	movs	r3, r2
 8000c5e:	e773      	b.n	8000b48 <__aeabi_fsub+0x48>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	d0c3      	beq.n	8000bec <__aeabi_fsub+0xec>
 8000c64:	1e5a      	subs	r2, r3, #1
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d100      	bne.n	8000c6c <__aeabi_fsub+0x16c>
 8000c6a:	e11e      	b.n	8000eaa <__aeabi_fsub+0x3aa>
 8000c6c:	2bff      	cmp	r3, #255	@ 0xff
 8000c6e:	d058      	beq.n	8000d22 <__aeabi_fsub+0x222>
 8000c70:	0013      	movs	r3, r2
 8000c72:	e7b4      	b.n	8000bde <__aeabi_fsub+0xde>
 8000c74:	22fe      	movs	r2, #254	@ 0xfe
 8000c76:	1c6b      	adds	r3, r5, #1
 8000c78:	421a      	tst	r2, r3
 8000c7a:	d10d      	bne.n	8000c98 <__aeabi_fsub+0x198>
 8000c7c:	2d00      	cmp	r5, #0
 8000c7e:	d060      	beq.n	8000d42 <__aeabi_fsub+0x242>
 8000c80:	4663      	mov	r3, ip
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d000      	beq.n	8000c88 <__aeabi_fsub+0x188>
 8000c86:	e120      	b.n	8000eca <__aeabi_fsub+0x3ca>
 8000c88:	2900      	cmp	r1, #0
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fsub+0x18e>
 8000c8c:	e128      	b.n	8000ee0 <__aeabi_fsub+0x3e0>
 8000c8e:	2280      	movs	r2, #128	@ 0x80
 8000c90:	2400      	movs	r4, #0
 8000c92:	20ff      	movs	r0, #255	@ 0xff
 8000c94:	03d2      	lsls	r2, r2, #15
 8000c96:	e78f      	b.n	8000bb8 <__aeabi_fsub+0xb8>
 8000c98:	4663      	mov	r3, ip
 8000c9a:	1a5f      	subs	r7, r3, r1
 8000c9c:	017b      	lsls	r3, r7, #5
 8000c9e:	d500      	bpl.n	8000ca2 <__aeabi_fsub+0x1a2>
 8000ca0:	e0fe      	b.n	8000ea0 <__aeabi_fsub+0x3a0>
 8000ca2:	2f00      	cmp	r7, #0
 8000ca4:	d000      	beq.n	8000ca8 <__aeabi_fsub+0x1a8>
 8000ca6:	e765      	b.n	8000b74 <__aeabi_fsub+0x74>
 8000ca8:	2400      	movs	r4, #0
 8000caa:	2000      	movs	r0, #0
 8000cac:	2200      	movs	r2, #0
 8000cae:	e783      	b.n	8000bb8 <__aeabi_fsub+0xb8>
 8000cb0:	4663      	mov	r3, ip
 8000cb2:	1a59      	subs	r1, r3, r1
 8000cb4:	014b      	lsls	r3, r1, #5
 8000cb6:	d400      	bmi.n	8000cba <__aeabi_fsub+0x1ba>
 8000cb8:	e119      	b.n	8000eee <__aeabi_fsub+0x3ee>
 8000cba:	018f      	lsls	r7, r1, #6
 8000cbc:	09bf      	lsrs	r7, r7, #6
 8000cbe:	0038      	movs	r0, r7
 8000cc0:	f000 fa6a 	bl	8001198 <__clzsi2>
 8000cc4:	003b      	movs	r3, r7
 8000cc6:	3805      	subs	r0, #5
 8000cc8:	4083      	lsls	r3, r0
 8000cca:	2501      	movs	r5, #1
 8000ccc:	2220      	movs	r2, #32
 8000cce:	1b40      	subs	r0, r0, r5
 8000cd0:	3001      	adds	r0, #1
 8000cd2:	1a12      	subs	r2, r2, r0
 8000cd4:	0019      	movs	r1, r3
 8000cd6:	4093      	lsls	r3, r2
 8000cd8:	40c1      	lsrs	r1, r0
 8000cda:	1e5a      	subs	r2, r3, #1
 8000cdc:	4193      	sbcs	r3, r2
 8000cde:	4319      	orrs	r1, r3
 8000ce0:	468c      	mov	ip, r1
 8000ce2:	1e0b      	subs	r3, r1, #0
 8000ce4:	d0e1      	beq.n	8000caa <__aeabi_fsub+0x1aa>
 8000ce6:	075b      	lsls	r3, r3, #29
 8000ce8:	d100      	bne.n	8000cec <__aeabi_fsub+0x1ec>
 8000cea:	e152      	b.n	8000f92 <__aeabi_fsub+0x492>
 8000cec:	230f      	movs	r3, #15
 8000cee:	2500      	movs	r5, #0
 8000cf0:	400b      	ands	r3, r1
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	d000      	beq.n	8000cf8 <__aeabi_fsub+0x1f8>
 8000cf6:	e752      	b.n	8000b9e <__aeabi_fsub+0x9e>
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	014a      	lsls	r2, r1, #5
 8000cfc:	d400      	bmi.n	8000d00 <__aeabi_fsub+0x200>
 8000cfe:	e092      	b.n	8000e26 <__aeabi_fsub+0x326>
 8000d00:	b2c0      	uxtb	r0, r0
 8000d02:	4663      	mov	r3, ip
 8000d04:	019a      	lsls	r2, r3, #6
 8000d06:	0a52      	lsrs	r2, r2, #9
 8000d08:	e756      	b.n	8000bb8 <__aeabi_fsub+0xb8>
 8000d0a:	4663      	mov	r3, ip
 8000d0c:	075b      	lsls	r3, r3, #29
 8000d0e:	d005      	beq.n	8000d1c <__aeabi_fsub+0x21c>
 8000d10:	230f      	movs	r3, #15
 8000d12:	4662      	mov	r2, ip
 8000d14:	4013      	ands	r3, r2
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	d000      	beq.n	8000d1c <__aeabi_fsub+0x21c>
 8000d1a:	e740      	b.n	8000b9e <__aeabi_fsub+0x9e>
 8000d1c:	002b      	movs	r3, r5
 8000d1e:	e765      	b.n	8000bec <__aeabi_fsub+0xec>
 8000d20:	0007      	movs	r7, r0
 8000d22:	2f00      	cmp	r7, #0
 8000d24:	d100      	bne.n	8000d28 <__aeabi_fsub+0x228>
 8000d26:	e745      	b.n	8000bb4 <__aeabi_fsub+0xb4>
 8000d28:	2280      	movs	r2, #128	@ 0x80
 8000d2a:	03d2      	lsls	r2, r2, #15
 8000d2c:	433a      	orrs	r2, r7
 8000d2e:	0252      	lsls	r2, r2, #9
 8000d30:	20ff      	movs	r0, #255	@ 0xff
 8000d32:	0a52      	lsrs	r2, r2, #9
 8000d34:	e740      	b.n	8000bb8 <__aeabi_fsub+0xb8>
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d179      	bne.n	8000e2e <__aeabi_fsub+0x32e>
 8000d3a:	22fe      	movs	r2, #254	@ 0xfe
 8000d3c:	1c6b      	adds	r3, r5, #1
 8000d3e:	421a      	tst	r2, r3
 8000d40:	d1aa      	bne.n	8000c98 <__aeabi_fsub+0x198>
 8000d42:	4663      	mov	r3, ip
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d100      	bne.n	8000d4a <__aeabi_fsub+0x24a>
 8000d48:	e0f5      	b.n	8000f36 <__aeabi_fsub+0x436>
 8000d4a:	2900      	cmp	r1, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_fsub+0x250>
 8000d4e:	e0d1      	b.n	8000ef4 <__aeabi_fsub+0x3f4>
 8000d50:	1a5f      	subs	r7, r3, r1
 8000d52:	2380      	movs	r3, #128	@ 0x80
 8000d54:	04db      	lsls	r3, r3, #19
 8000d56:	421f      	tst	r7, r3
 8000d58:	d100      	bne.n	8000d5c <__aeabi_fsub+0x25c>
 8000d5a:	e10e      	b.n	8000f7a <__aeabi_fsub+0x47a>
 8000d5c:	4662      	mov	r2, ip
 8000d5e:	2401      	movs	r4, #1
 8000d60:	1a8a      	subs	r2, r1, r2
 8000d62:	4694      	mov	ip, r2
 8000d64:	2000      	movs	r0, #0
 8000d66:	4034      	ands	r4, r6
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	d100      	bne.n	8000d6e <__aeabi_fsub+0x26e>
 8000d6c:	e724      	b.n	8000bb8 <__aeabi_fsub+0xb8>
 8000d6e:	2001      	movs	r0, #1
 8000d70:	421a      	tst	r2, r3
 8000d72:	d1c6      	bne.n	8000d02 <__aeabi_fsub+0x202>
 8000d74:	2300      	movs	r3, #0
 8000d76:	08d7      	lsrs	r7, r2, #3
 8000d78:	e73d      	b.n	8000bf6 <__aeabi_fsub+0xf6>
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d017      	beq.n	8000dae <__aeabi_fsub+0x2ae>
 8000d7e:	2d00      	cmp	r5, #0
 8000d80:	d000      	beq.n	8000d84 <__aeabi_fsub+0x284>
 8000d82:	e0af      	b.n	8000ee4 <__aeabi_fsub+0x3e4>
 8000d84:	23ff      	movs	r3, #255	@ 0xff
 8000d86:	4665      	mov	r5, ip
 8000d88:	2d00      	cmp	r5, #0
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_fsub+0x28e>
 8000d8c:	e0ad      	b.n	8000eea <__aeabi_fsub+0x3ea>
 8000d8e:	1e5e      	subs	r6, r3, #1
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d100      	bne.n	8000d96 <__aeabi_fsub+0x296>
 8000d94:	e089      	b.n	8000eaa <__aeabi_fsub+0x3aa>
 8000d96:	2bff      	cmp	r3, #255	@ 0xff
 8000d98:	d0c2      	beq.n	8000d20 <__aeabi_fsub+0x220>
 8000d9a:	2e1b      	cmp	r6, #27
 8000d9c:	dc00      	bgt.n	8000da0 <__aeabi_fsub+0x2a0>
 8000d9e:	e0ab      	b.n	8000ef8 <__aeabi_fsub+0x3f8>
 8000da0:	1d4b      	adds	r3, r1, #5
 8000da2:	469c      	mov	ip, r3
 8000da4:	0013      	movs	r3, r2
 8000da6:	e721      	b.n	8000bec <__aeabi_fsub+0xec>
 8000da8:	464b      	mov	r3, r9
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d170      	bne.n	8000e90 <__aeabi_fsub+0x390>
 8000dae:	22fe      	movs	r2, #254	@ 0xfe
 8000db0:	1c6b      	adds	r3, r5, #1
 8000db2:	421a      	tst	r2, r3
 8000db4:	d15e      	bne.n	8000e74 <__aeabi_fsub+0x374>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d000      	beq.n	8000dbc <__aeabi_fsub+0x2bc>
 8000dba:	e0c3      	b.n	8000f44 <__aeabi_fsub+0x444>
 8000dbc:	4663      	mov	r3, ip
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_fsub+0x2c4>
 8000dc2:	e0d0      	b.n	8000f66 <__aeabi_fsub+0x466>
 8000dc4:	2900      	cmp	r1, #0
 8000dc6:	d100      	bne.n	8000dca <__aeabi_fsub+0x2ca>
 8000dc8:	e094      	b.n	8000ef4 <__aeabi_fsub+0x3f4>
 8000dca:	000a      	movs	r2, r1
 8000dcc:	4462      	add	r2, ip
 8000dce:	0153      	lsls	r3, r2, #5
 8000dd0:	d400      	bmi.n	8000dd4 <__aeabi_fsub+0x2d4>
 8000dd2:	e0d8      	b.n	8000f86 <__aeabi_fsub+0x486>
 8000dd4:	0192      	lsls	r2, r2, #6
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	0a52      	lsrs	r2, r2, #9
 8000dda:	e6ed      	b.n	8000bb8 <__aeabi_fsub+0xb8>
 8000ddc:	0008      	movs	r0, r1
 8000dde:	2220      	movs	r2, #32
 8000de0:	40d8      	lsrs	r0, r3
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	4099      	lsls	r1, r3
 8000de6:	000b      	movs	r3, r1
 8000de8:	1e5a      	subs	r2, r3, #1
 8000dea:	4193      	sbcs	r3, r2
 8000dec:	4303      	orrs	r3, r0
 8000dee:	449c      	add	ip, r3
 8000df0:	4663      	mov	r3, ip
 8000df2:	015b      	lsls	r3, r3, #5
 8000df4:	d589      	bpl.n	8000d0a <__aeabi_fsub+0x20a>
 8000df6:	3501      	adds	r5, #1
 8000df8:	2dff      	cmp	r5, #255	@ 0xff
 8000dfa:	d100      	bne.n	8000dfe <__aeabi_fsub+0x2fe>
 8000dfc:	e6da      	b.n	8000bb4 <__aeabi_fsub+0xb4>
 8000dfe:	4662      	mov	r2, ip
 8000e00:	2301      	movs	r3, #1
 8000e02:	4919      	ldr	r1, [pc, #100]	@ (8000e68 <__aeabi_fsub+0x368>)
 8000e04:	4013      	ands	r3, r2
 8000e06:	0852      	lsrs	r2, r2, #1
 8000e08:	400a      	ands	r2, r1
 8000e0a:	431a      	orrs	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	4694      	mov	ip, r2
 8000e10:	075b      	lsls	r3, r3, #29
 8000e12:	d004      	beq.n	8000e1e <__aeabi_fsub+0x31e>
 8000e14:	230f      	movs	r3, #15
 8000e16:	4013      	ands	r3, r2
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d000      	beq.n	8000e1e <__aeabi_fsub+0x31e>
 8000e1c:	e6bf      	b.n	8000b9e <__aeabi_fsub+0x9e>
 8000e1e:	4663      	mov	r3, ip
 8000e20:	015b      	lsls	r3, r3, #5
 8000e22:	d500      	bpl.n	8000e26 <__aeabi_fsub+0x326>
 8000e24:	e6c2      	b.n	8000bac <__aeabi_fsub+0xac>
 8000e26:	4663      	mov	r3, ip
 8000e28:	08df      	lsrs	r7, r3, #3
 8000e2a:	002b      	movs	r3, r5
 8000e2c:	e6e3      	b.n	8000bf6 <__aeabi_fsub+0xf6>
 8000e2e:	1b53      	subs	r3, r2, r5
 8000e30:	2d00      	cmp	r5, #0
 8000e32:	d100      	bne.n	8000e36 <__aeabi_fsub+0x336>
 8000e34:	e6f4      	b.n	8000c20 <__aeabi_fsub+0x120>
 8000e36:	2080      	movs	r0, #128	@ 0x80
 8000e38:	4664      	mov	r4, ip
 8000e3a:	04c0      	lsls	r0, r0, #19
 8000e3c:	4304      	orrs	r4, r0
 8000e3e:	46a4      	mov	ip, r4
 8000e40:	0034      	movs	r4, r6
 8000e42:	2001      	movs	r0, #1
 8000e44:	2b1b      	cmp	r3, #27
 8000e46:	dc09      	bgt.n	8000e5c <__aeabi_fsub+0x35c>
 8000e48:	2520      	movs	r5, #32
 8000e4a:	4660      	mov	r0, ip
 8000e4c:	40d8      	lsrs	r0, r3
 8000e4e:	1aeb      	subs	r3, r5, r3
 8000e50:	4665      	mov	r5, ip
 8000e52:	409d      	lsls	r5, r3
 8000e54:	002b      	movs	r3, r5
 8000e56:	1e5d      	subs	r5, r3, #1
 8000e58:	41ab      	sbcs	r3, r5
 8000e5a:	4318      	orrs	r0, r3
 8000e5c:	1a0b      	subs	r3, r1, r0
 8000e5e:	469c      	mov	ip, r3
 8000e60:	0015      	movs	r5, r2
 8000e62:	e680      	b.n	8000b66 <__aeabi_fsub+0x66>
 8000e64:	fbffffff 	.word	0xfbffffff
 8000e68:	7dffffff 	.word	0x7dffffff
 8000e6c:	22fe      	movs	r2, #254	@ 0xfe
 8000e6e:	1c6b      	adds	r3, r5, #1
 8000e70:	4213      	tst	r3, r2
 8000e72:	d0a3      	beq.n	8000dbc <__aeabi_fsub+0x2bc>
 8000e74:	2bff      	cmp	r3, #255	@ 0xff
 8000e76:	d100      	bne.n	8000e7a <__aeabi_fsub+0x37a>
 8000e78:	e69c      	b.n	8000bb4 <__aeabi_fsub+0xb4>
 8000e7a:	4461      	add	r1, ip
 8000e7c:	0849      	lsrs	r1, r1, #1
 8000e7e:	074a      	lsls	r2, r1, #29
 8000e80:	d049      	beq.n	8000f16 <__aeabi_fsub+0x416>
 8000e82:	220f      	movs	r2, #15
 8000e84:	400a      	ands	r2, r1
 8000e86:	2a04      	cmp	r2, #4
 8000e88:	d045      	beq.n	8000f16 <__aeabi_fsub+0x416>
 8000e8a:	1d0a      	adds	r2, r1, #4
 8000e8c:	4694      	mov	ip, r2
 8000e8e:	e6ad      	b.n	8000bec <__aeabi_fsub+0xec>
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d100      	bne.n	8000e96 <__aeabi_fsub+0x396>
 8000e94:	e776      	b.n	8000d84 <__aeabi_fsub+0x284>
 8000e96:	e68d      	b.n	8000bb4 <__aeabi_fsub+0xb4>
 8000e98:	0034      	movs	r4, r6
 8000e9a:	20ff      	movs	r0, #255	@ 0xff
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	e68b      	b.n	8000bb8 <__aeabi_fsub+0xb8>
 8000ea0:	4663      	mov	r3, ip
 8000ea2:	2401      	movs	r4, #1
 8000ea4:	1acf      	subs	r7, r1, r3
 8000ea6:	4034      	ands	r4, r6
 8000ea8:	e664      	b.n	8000b74 <__aeabi_fsub+0x74>
 8000eaa:	4461      	add	r1, ip
 8000eac:	014b      	lsls	r3, r1, #5
 8000eae:	d56d      	bpl.n	8000f8c <__aeabi_fsub+0x48c>
 8000eb0:	0848      	lsrs	r0, r1, #1
 8000eb2:	4944      	ldr	r1, [pc, #272]	@ (8000fc4 <__aeabi_fsub+0x4c4>)
 8000eb4:	4001      	ands	r1, r0
 8000eb6:	0743      	lsls	r3, r0, #29
 8000eb8:	d02c      	beq.n	8000f14 <__aeabi_fsub+0x414>
 8000eba:	230f      	movs	r3, #15
 8000ebc:	4003      	ands	r3, r0
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d028      	beq.n	8000f14 <__aeabi_fsub+0x414>
 8000ec2:	1d0b      	adds	r3, r1, #4
 8000ec4:	469c      	mov	ip, r3
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	e690      	b.n	8000bec <__aeabi_fsub+0xec>
 8000eca:	2900      	cmp	r1, #0
 8000ecc:	d100      	bne.n	8000ed0 <__aeabi_fsub+0x3d0>
 8000ece:	e72b      	b.n	8000d28 <__aeabi_fsub+0x228>
 8000ed0:	2380      	movs	r3, #128	@ 0x80
 8000ed2:	03db      	lsls	r3, r3, #15
 8000ed4:	429f      	cmp	r7, r3
 8000ed6:	d200      	bcs.n	8000eda <__aeabi_fsub+0x3da>
 8000ed8:	e726      	b.n	8000d28 <__aeabi_fsub+0x228>
 8000eda:	4298      	cmp	r0, r3
 8000edc:	d300      	bcc.n	8000ee0 <__aeabi_fsub+0x3e0>
 8000ede:	e723      	b.n	8000d28 <__aeabi_fsub+0x228>
 8000ee0:	2401      	movs	r4, #1
 8000ee2:	4034      	ands	r4, r6
 8000ee4:	0007      	movs	r7, r0
 8000ee6:	e71f      	b.n	8000d28 <__aeabi_fsub+0x228>
 8000ee8:	0034      	movs	r4, r6
 8000eea:	468c      	mov	ip, r1
 8000eec:	e67e      	b.n	8000bec <__aeabi_fsub+0xec>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	08cf      	lsrs	r7, r1, #3
 8000ef2:	e680      	b.n	8000bf6 <__aeabi_fsub+0xf6>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e67e      	b.n	8000bf6 <__aeabi_fsub+0xf6>
 8000ef8:	2020      	movs	r0, #32
 8000efa:	4665      	mov	r5, ip
 8000efc:	1b80      	subs	r0, r0, r6
 8000efe:	4085      	lsls	r5, r0
 8000f00:	4663      	mov	r3, ip
 8000f02:	0028      	movs	r0, r5
 8000f04:	40f3      	lsrs	r3, r6
 8000f06:	1e45      	subs	r5, r0, #1
 8000f08:	41a8      	sbcs	r0, r5
 8000f0a:	4303      	orrs	r3, r0
 8000f0c:	469c      	mov	ip, r3
 8000f0e:	0015      	movs	r5, r2
 8000f10:	448c      	add	ip, r1
 8000f12:	e76d      	b.n	8000df0 <__aeabi_fsub+0x2f0>
 8000f14:	2302      	movs	r3, #2
 8000f16:	08cf      	lsrs	r7, r1, #3
 8000f18:	e66d      	b.n	8000bf6 <__aeabi_fsub+0xf6>
 8000f1a:	1b0f      	subs	r7, r1, r4
 8000f1c:	017b      	lsls	r3, r7, #5
 8000f1e:	d528      	bpl.n	8000f72 <__aeabi_fsub+0x472>
 8000f20:	01bf      	lsls	r7, r7, #6
 8000f22:	09bf      	lsrs	r7, r7, #6
 8000f24:	0038      	movs	r0, r7
 8000f26:	f000 f937 	bl	8001198 <__clzsi2>
 8000f2a:	003b      	movs	r3, r7
 8000f2c:	3805      	subs	r0, #5
 8000f2e:	4083      	lsls	r3, r0
 8000f30:	0034      	movs	r4, r6
 8000f32:	2501      	movs	r5, #1
 8000f34:	e6ca      	b.n	8000ccc <__aeabi_fsub+0x1cc>
 8000f36:	2900      	cmp	r1, #0
 8000f38:	d100      	bne.n	8000f3c <__aeabi_fsub+0x43c>
 8000f3a:	e6b5      	b.n	8000ca8 <__aeabi_fsub+0x1a8>
 8000f3c:	2401      	movs	r4, #1
 8000f3e:	0007      	movs	r7, r0
 8000f40:	4034      	ands	r4, r6
 8000f42:	e658      	b.n	8000bf6 <__aeabi_fsub+0xf6>
 8000f44:	4663      	mov	r3, ip
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fsub+0x44c>
 8000f4a:	e6e9      	b.n	8000d20 <__aeabi_fsub+0x220>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d100      	bne.n	8000f52 <__aeabi_fsub+0x452>
 8000f50:	e6ea      	b.n	8000d28 <__aeabi_fsub+0x228>
 8000f52:	2380      	movs	r3, #128	@ 0x80
 8000f54:	03db      	lsls	r3, r3, #15
 8000f56:	429f      	cmp	r7, r3
 8000f58:	d200      	bcs.n	8000f5c <__aeabi_fsub+0x45c>
 8000f5a:	e6e5      	b.n	8000d28 <__aeabi_fsub+0x228>
 8000f5c:	4298      	cmp	r0, r3
 8000f5e:	d300      	bcc.n	8000f62 <__aeabi_fsub+0x462>
 8000f60:	e6e2      	b.n	8000d28 <__aeabi_fsub+0x228>
 8000f62:	0007      	movs	r7, r0
 8000f64:	e6e0      	b.n	8000d28 <__aeabi_fsub+0x228>
 8000f66:	2900      	cmp	r1, #0
 8000f68:	d100      	bne.n	8000f6c <__aeabi_fsub+0x46c>
 8000f6a:	e69e      	b.n	8000caa <__aeabi_fsub+0x1aa>
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	08cf      	lsrs	r7, r1, #3
 8000f70:	e641      	b.n	8000bf6 <__aeabi_fsub+0xf6>
 8000f72:	0034      	movs	r4, r6
 8000f74:	2301      	movs	r3, #1
 8000f76:	08ff      	lsrs	r7, r7, #3
 8000f78:	e63d      	b.n	8000bf6 <__aeabi_fsub+0xf6>
 8000f7a:	2f00      	cmp	r7, #0
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_fsub+0x480>
 8000f7e:	e693      	b.n	8000ca8 <__aeabi_fsub+0x1a8>
 8000f80:	2300      	movs	r3, #0
 8000f82:	08ff      	lsrs	r7, r7, #3
 8000f84:	e637      	b.n	8000bf6 <__aeabi_fsub+0xf6>
 8000f86:	2300      	movs	r3, #0
 8000f88:	08d7      	lsrs	r7, r2, #3
 8000f8a:	e634      	b.n	8000bf6 <__aeabi_fsub+0xf6>
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	08cf      	lsrs	r7, r1, #3
 8000f90:	e631      	b.n	8000bf6 <__aeabi_fsub+0xf6>
 8000f92:	2280      	movs	r2, #128	@ 0x80
 8000f94:	000b      	movs	r3, r1
 8000f96:	04d2      	lsls	r2, r2, #19
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	4211      	tst	r1, r2
 8000f9e:	d000      	beq.n	8000fa2 <__aeabi_fsub+0x4a2>
 8000fa0:	e6ae      	b.n	8000d00 <__aeabi_fsub+0x200>
 8000fa2:	08cf      	lsrs	r7, r1, #3
 8000fa4:	e627      	b.n	8000bf6 <__aeabi_fsub+0xf6>
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x4ac>
 8000faa:	e75f      	b.n	8000e6c <__aeabi_fsub+0x36c>
 8000fac:	1b56      	subs	r6, r2, r5
 8000fae:	2d00      	cmp	r5, #0
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_fsub+0x4b6>
 8000fb2:	0033      	movs	r3, r6
 8000fb4:	e6e7      	b.n	8000d86 <__aeabi_fsub+0x286>
 8000fb6:	2380      	movs	r3, #128	@ 0x80
 8000fb8:	4660      	mov	r0, ip
 8000fba:	04db      	lsls	r3, r3, #19
 8000fbc:	4318      	orrs	r0, r3
 8000fbe:	4684      	mov	ip, r0
 8000fc0:	e6eb      	b.n	8000d9a <__aeabi_fsub+0x29a>
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	7dffffff 	.word	0x7dffffff

08000fc8 <__aeabi_f2iz>:
 8000fc8:	0241      	lsls	r1, r0, #9
 8000fca:	0042      	lsls	r2, r0, #1
 8000fcc:	0fc3      	lsrs	r3, r0, #31
 8000fce:	0a49      	lsrs	r1, r1, #9
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	0e12      	lsrs	r2, r2, #24
 8000fd4:	2a7e      	cmp	r2, #126	@ 0x7e
 8000fd6:	dd03      	ble.n	8000fe0 <__aeabi_f2iz+0x18>
 8000fd8:	2a9d      	cmp	r2, #157	@ 0x9d
 8000fda:	dd02      	ble.n	8000fe2 <__aeabi_f2iz+0x1a>
 8000fdc:	4a09      	ldr	r2, [pc, #36]	@ (8001004 <__aeabi_f2iz+0x3c>)
 8000fde:	1898      	adds	r0, r3, r2
 8000fe0:	4770      	bx	lr
 8000fe2:	2080      	movs	r0, #128	@ 0x80
 8000fe4:	0400      	lsls	r0, r0, #16
 8000fe6:	4301      	orrs	r1, r0
 8000fe8:	2a95      	cmp	r2, #149	@ 0x95
 8000fea:	dc07      	bgt.n	8000ffc <__aeabi_f2iz+0x34>
 8000fec:	2096      	movs	r0, #150	@ 0x96
 8000fee:	1a82      	subs	r2, r0, r2
 8000ff0:	40d1      	lsrs	r1, r2
 8000ff2:	4248      	negs	r0, r1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1f3      	bne.n	8000fe0 <__aeabi_f2iz+0x18>
 8000ff8:	0008      	movs	r0, r1
 8000ffa:	e7f1      	b.n	8000fe0 <__aeabi_f2iz+0x18>
 8000ffc:	3a96      	subs	r2, #150	@ 0x96
 8000ffe:	4091      	lsls	r1, r2
 8001000:	e7f7      	b.n	8000ff2 <__aeabi_f2iz+0x2a>
 8001002:	46c0      	nop			@ (mov r8, r8)
 8001004:	7fffffff 	.word	0x7fffffff

08001008 <__aeabi_ui2f>:
 8001008:	b510      	push	{r4, lr}
 800100a:	1e04      	subs	r4, r0, #0
 800100c:	d00d      	beq.n	800102a <__aeabi_ui2f+0x22>
 800100e:	f000 f8c3 	bl	8001198 <__clzsi2>
 8001012:	239e      	movs	r3, #158	@ 0x9e
 8001014:	1a1b      	subs	r3, r3, r0
 8001016:	2b96      	cmp	r3, #150	@ 0x96
 8001018:	dc0c      	bgt.n	8001034 <__aeabi_ui2f+0x2c>
 800101a:	2808      	cmp	r0, #8
 800101c:	d034      	beq.n	8001088 <__aeabi_ui2f+0x80>
 800101e:	3808      	subs	r0, #8
 8001020:	4084      	lsls	r4, r0
 8001022:	0264      	lsls	r4, r4, #9
 8001024:	0a64      	lsrs	r4, r4, #9
 8001026:	b2d8      	uxtb	r0, r3
 8001028:	e001      	b.n	800102e <__aeabi_ui2f+0x26>
 800102a:	2000      	movs	r0, #0
 800102c:	2400      	movs	r4, #0
 800102e:	05c0      	lsls	r0, r0, #23
 8001030:	4320      	orrs	r0, r4
 8001032:	bd10      	pop	{r4, pc}
 8001034:	2b99      	cmp	r3, #153	@ 0x99
 8001036:	dc13      	bgt.n	8001060 <__aeabi_ui2f+0x58>
 8001038:	1f42      	subs	r2, r0, #5
 800103a:	4094      	lsls	r4, r2
 800103c:	4a14      	ldr	r2, [pc, #80]	@ (8001090 <__aeabi_ui2f+0x88>)
 800103e:	4022      	ands	r2, r4
 8001040:	0761      	lsls	r1, r4, #29
 8001042:	d01c      	beq.n	800107e <__aeabi_ui2f+0x76>
 8001044:	210f      	movs	r1, #15
 8001046:	4021      	ands	r1, r4
 8001048:	2904      	cmp	r1, #4
 800104a:	d018      	beq.n	800107e <__aeabi_ui2f+0x76>
 800104c:	3204      	adds	r2, #4
 800104e:	08d4      	lsrs	r4, r2, #3
 8001050:	0152      	lsls	r2, r2, #5
 8001052:	d515      	bpl.n	8001080 <__aeabi_ui2f+0x78>
 8001054:	239f      	movs	r3, #159	@ 0x9f
 8001056:	0264      	lsls	r4, r4, #9
 8001058:	1a18      	subs	r0, r3, r0
 800105a:	0a64      	lsrs	r4, r4, #9
 800105c:	b2c0      	uxtb	r0, r0
 800105e:	e7e6      	b.n	800102e <__aeabi_ui2f+0x26>
 8001060:	0002      	movs	r2, r0
 8001062:	0021      	movs	r1, r4
 8001064:	321b      	adds	r2, #27
 8001066:	4091      	lsls	r1, r2
 8001068:	000a      	movs	r2, r1
 800106a:	1e51      	subs	r1, r2, #1
 800106c:	418a      	sbcs	r2, r1
 800106e:	2105      	movs	r1, #5
 8001070:	1a09      	subs	r1, r1, r0
 8001072:	40cc      	lsrs	r4, r1
 8001074:	4314      	orrs	r4, r2
 8001076:	4a06      	ldr	r2, [pc, #24]	@ (8001090 <__aeabi_ui2f+0x88>)
 8001078:	4022      	ands	r2, r4
 800107a:	0761      	lsls	r1, r4, #29
 800107c:	d1e2      	bne.n	8001044 <__aeabi_ui2f+0x3c>
 800107e:	08d4      	lsrs	r4, r2, #3
 8001080:	0264      	lsls	r4, r4, #9
 8001082:	0a64      	lsrs	r4, r4, #9
 8001084:	b2d8      	uxtb	r0, r3
 8001086:	e7d2      	b.n	800102e <__aeabi_ui2f+0x26>
 8001088:	0264      	lsls	r4, r4, #9
 800108a:	0a64      	lsrs	r4, r4, #9
 800108c:	308e      	adds	r0, #142	@ 0x8e
 800108e:	e7ce      	b.n	800102e <__aeabi_ui2f+0x26>
 8001090:	fbffffff 	.word	0xfbffffff

08001094 <__aeabi_f2d>:
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	0242      	lsls	r2, r0, #9
 8001098:	0043      	lsls	r3, r0, #1
 800109a:	0fc4      	lsrs	r4, r0, #31
 800109c:	20fe      	movs	r0, #254	@ 0xfe
 800109e:	0e1b      	lsrs	r3, r3, #24
 80010a0:	1c59      	adds	r1, r3, #1
 80010a2:	0a55      	lsrs	r5, r2, #9
 80010a4:	4208      	tst	r0, r1
 80010a6:	d00c      	beq.n	80010c2 <__aeabi_f2d+0x2e>
 80010a8:	21e0      	movs	r1, #224	@ 0xe0
 80010aa:	0089      	lsls	r1, r1, #2
 80010ac:	468c      	mov	ip, r1
 80010ae:	076d      	lsls	r5, r5, #29
 80010b0:	0b12      	lsrs	r2, r2, #12
 80010b2:	4463      	add	r3, ip
 80010b4:	051b      	lsls	r3, r3, #20
 80010b6:	4313      	orrs	r3, r2
 80010b8:	07e4      	lsls	r4, r4, #31
 80010ba:	4323      	orrs	r3, r4
 80010bc:	0028      	movs	r0, r5
 80010be:	0019      	movs	r1, r3
 80010c0:	bd70      	pop	{r4, r5, r6, pc}
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d114      	bne.n	80010f0 <__aeabi_f2d+0x5c>
 80010c6:	2d00      	cmp	r5, #0
 80010c8:	d01b      	beq.n	8001102 <__aeabi_f2d+0x6e>
 80010ca:	0028      	movs	r0, r5
 80010cc:	f000 f864 	bl	8001198 <__clzsi2>
 80010d0:	280a      	cmp	r0, #10
 80010d2:	dc1c      	bgt.n	800110e <__aeabi_f2d+0x7a>
 80010d4:	230b      	movs	r3, #11
 80010d6:	002a      	movs	r2, r5
 80010d8:	1a1b      	subs	r3, r3, r0
 80010da:	40da      	lsrs	r2, r3
 80010dc:	0003      	movs	r3, r0
 80010de:	3315      	adds	r3, #21
 80010e0:	409d      	lsls	r5, r3
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <__aeabi_f2d+0x88>)
 80010e4:	0312      	lsls	r2, r2, #12
 80010e6:	1a1b      	subs	r3, r3, r0
 80010e8:	055b      	lsls	r3, r3, #21
 80010ea:	0b12      	lsrs	r2, r2, #12
 80010ec:	0d5b      	lsrs	r3, r3, #21
 80010ee:	e7e1      	b.n	80010b4 <__aeabi_f2d+0x20>
 80010f0:	2d00      	cmp	r5, #0
 80010f2:	d009      	beq.n	8001108 <__aeabi_f2d+0x74>
 80010f4:	0b13      	lsrs	r3, r2, #12
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	0312      	lsls	r2, r2, #12
 80010fa:	431a      	orrs	r2, r3
 80010fc:	076d      	lsls	r5, r5, #29
 80010fe:	4b08      	ldr	r3, [pc, #32]	@ (8001120 <__aeabi_f2d+0x8c>)
 8001100:	e7d8      	b.n	80010b4 <__aeabi_f2d+0x20>
 8001102:	2300      	movs	r3, #0
 8001104:	2200      	movs	r2, #0
 8001106:	e7d5      	b.n	80010b4 <__aeabi_f2d+0x20>
 8001108:	2200      	movs	r2, #0
 800110a:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <__aeabi_f2d+0x8c>)
 800110c:	e7d2      	b.n	80010b4 <__aeabi_f2d+0x20>
 800110e:	0003      	movs	r3, r0
 8001110:	002a      	movs	r2, r5
 8001112:	3b0b      	subs	r3, #11
 8001114:	409a      	lsls	r2, r3
 8001116:	2500      	movs	r5, #0
 8001118:	e7e3      	b.n	80010e2 <__aeabi_f2d+0x4e>
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	00000389 	.word	0x00000389
 8001120:	000007ff 	.word	0x000007ff

08001124 <__aeabi_cfrcmple>:
 8001124:	4684      	mov	ip, r0
 8001126:	0008      	movs	r0, r1
 8001128:	4661      	mov	r1, ip
 800112a:	e7ff      	b.n	800112c <__aeabi_cfcmpeq>

0800112c <__aeabi_cfcmpeq>:
 800112c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800112e:	f000 f8cd 	bl	80012cc <__lesf2>
 8001132:	2800      	cmp	r0, #0
 8001134:	d401      	bmi.n	800113a <__aeabi_cfcmpeq+0xe>
 8001136:	2100      	movs	r1, #0
 8001138:	42c8      	cmn	r0, r1
 800113a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800113c <__aeabi_fcmpeq>:
 800113c:	b510      	push	{r4, lr}
 800113e:	f000 f855 	bl	80011ec <__eqsf2>
 8001142:	4240      	negs	r0, r0
 8001144:	3001      	adds	r0, #1
 8001146:	bd10      	pop	{r4, pc}

08001148 <__aeabi_fcmplt>:
 8001148:	b510      	push	{r4, lr}
 800114a:	f000 f8bf 	bl	80012cc <__lesf2>
 800114e:	2800      	cmp	r0, #0
 8001150:	db01      	blt.n	8001156 <__aeabi_fcmplt+0xe>
 8001152:	2000      	movs	r0, #0
 8001154:	bd10      	pop	{r4, pc}
 8001156:	2001      	movs	r0, #1
 8001158:	bd10      	pop	{r4, pc}
 800115a:	46c0      	nop			@ (mov r8, r8)

0800115c <__aeabi_fcmple>:
 800115c:	b510      	push	{r4, lr}
 800115e:	f000 f8b5 	bl	80012cc <__lesf2>
 8001162:	2800      	cmp	r0, #0
 8001164:	dd01      	ble.n	800116a <__aeabi_fcmple+0xe>
 8001166:	2000      	movs	r0, #0
 8001168:	bd10      	pop	{r4, pc}
 800116a:	2001      	movs	r0, #1
 800116c:	bd10      	pop	{r4, pc}
 800116e:	46c0      	nop			@ (mov r8, r8)

08001170 <__aeabi_fcmpgt>:
 8001170:	b510      	push	{r4, lr}
 8001172:	f000 f863 	bl	800123c <__gesf2>
 8001176:	2800      	cmp	r0, #0
 8001178:	dc01      	bgt.n	800117e <__aeabi_fcmpgt+0xe>
 800117a:	2000      	movs	r0, #0
 800117c:	bd10      	pop	{r4, pc}
 800117e:	2001      	movs	r0, #1
 8001180:	bd10      	pop	{r4, pc}
 8001182:	46c0      	nop			@ (mov r8, r8)

08001184 <__aeabi_fcmpge>:
 8001184:	b510      	push	{r4, lr}
 8001186:	f000 f859 	bl	800123c <__gesf2>
 800118a:	2800      	cmp	r0, #0
 800118c:	da01      	bge.n	8001192 <__aeabi_fcmpge+0xe>
 800118e:	2000      	movs	r0, #0
 8001190:	bd10      	pop	{r4, pc}
 8001192:	2001      	movs	r0, #1
 8001194:	bd10      	pop	{r4, pc}
 8001196:	46c0      	nop			@ (mov r8, r8)

08001198 <__clzsi2>:
 8001198:	211c      	movs	r1, #28
 800119a:	2301      	movs	r3, #1
 800119c:	041b      	lsls	r3, r3, #16
 800119e:	4298      	cmp	r0, r3
 80011a0:	d301      	bcc.n	80011a6 <__clzsi2+0xe>
 80011a2:	0c00      	lsrs	r0, r0, #16
 80011a4:	3910      	subs	r1, #16
 80011a6:	0a1b      	lsrs	r3, r3, #8
 80011a8:	4298      	cmp	r0, r3
 80011aa:	d301      	bcc.n	80011b0 <__clzsi2+0x18>
 80011ac:	0a00      	lsrs	r0, r0, #8
 80011ae:	3908      	subs	r1, #8
 80011b0:	091b      	lsrs	r3, r3, #4
 80011b2:	4298      	cmp	r0, r3
 80011b4:	d301      	bcc.n	80011ba <__clzsi2+0x22>
 80011b6:	0900      	lsrs	r0, r0, #4
 80011b8:	3904      	subs	r1, #4
 80011ba:	a202      	add	r2, pc, #8	@ (adr r2, 80011c4 <__clzsi2+0x2c>)
 80011bc:	5c10      	ldrb	r0, [r2, r0]
 80011be:	1840      	adds	r0, r0, r1
 80011c0:	4770      	bx	lr
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	02020304 	.word	0x02020304
 80011c8:	01010101 	.word	0x01010101
	...

080011d4 <__clzdi2>:
 80011d4:	b510      	push	{r4, lr}
 80011d6:	2900      	cmp	r1, #0
 80011d8:	d103      	bne.n	80011e2 <__clzdi2+0xe>
 80011da:	f7ff ffdd 	bl	8001198 <__clzsi2>
 80011de:	3020      	adds	r0, #32
 80011e0:	e002      	b.n	80011e8 <__clzdi2+0x14>
 80011e2:	0008      	movs	r0, r1
 80011e4:	f7ff ffd8 	bl	8001198 <__clzsi2>
 80011e8:	bd10      	pop	{r4, pc}
 80011ea:	46c0      	nop			@ (mov r8, r8)

080011ec <__eqsf2>:
 80011ec:	b570      	push	{r4, r5, r6, lr}
 80011ee:	0042      	lsls	r2, r0, #1
 80011f0:	024e      	lsls	r6, r1, #9
 80011f2:	004c      	lsls	r4, r1, #1
 80011f4:	0245      	lsls	r5, r0, #9
 80011f6:	0a6d      	lsrs	r5, r5, #9
 80011f8:	0e12      	lsrs	r2, r2, #24
 80011fa:	0fc3      	lsrs	r3, r0, #31
 80011fc:	0a76      	lsrs	r6, r6, #9
 80011fe:	0e24      	lsrs	r4, r4, #24
 8001200:	0fc9      	lsrs	r1, r1, #31
 8001202:	2aff      	cmp	r2, #255	@ 0xff
 8001204:	d010      	beq.n	8001228 <__eqsf2+0x3c>
 8001206:	2cff      	cmp	r4, #255	@ 0xff
 8001208:	d00c      	beq.n	8001224 <__eqsf2+0x38>
 800120a:	2001      	movs	r0, #1
 800120c:	42a2      	cmp	r2, r4
 800120e:	d10a      	bne.n	8001226 <__eqsf2+0x3a>
 8001210:	42b5      	cmp	r5, r6
 8001212:	d108      	bne.n	8001226 <__eqsf2+0x3a>
 8001214:	428b      	cmp	r3, r1
 8001216:	d00f      	beq.n	8001238 <__eqsf2+0x4c>
 8001218:	2a00      	cmp	r2, #0
 800121a:	d104      	bne.n	8001226 <__eqsf2+0x3a>
 800121c:	0028      	movs	r0, r5
 800121e:	1e43      	subs	r3, r0, #1
 8001220:	4198      	sbcs	r0, r3
 8001222:	e000      	b.n	8001226 <__eqsf2+0x3a>
 8001224:	2001      	movs	r0, #1
 8001226:	bd70      	pop	{r4, r5, r6, pc}
 8001228:	2001      	movs	r0, #1
 800122a:	2cff      	cmp	r4, #255	@ 0xff
 800122c:	d1fb      	bne.n	8001226 <__eqsf2+0x3a>
 800122e:	4335      	orrs	r5, r6
 8001230:	d1f9      	bne.n	8001226 <__eqsf2+0x3a>
 8001232:	404b      	eors	r3, r1
 8001234:	0018      	movs	r0, r3
 8001236:	e7f6      	b.n	8001226 <__eqsf2+0x3a>
 8001238:	2000      	movs	r0, #0
 800123a:	e7f4      	b.n	8001226 <__eqsf2+0x3a>

0800123c <__gesf2>:
 800123c:	b530      	push	{r4, r5, lr}
 800123e:	0042      	lsls	r2, r0, #1
 8001240:	0244      	lsls	r4, r0, #9
 8001242:	024d      	lsls	r5, r1, #9
 8001244:	0fc3      	lsrs	r3, r0, #31
 8001246:	0048      	lsls	r0, r1, #1
 8001248:	0a64      	lsrs	r4, r4, #9
 800124a:	0e12      	lsrs	r2, r2, #24
 800124c:	0a6d      	lsrs	r5, r5, #9
 800124e:	0e00      	lsrs	r0, r0, #24
 8001250:	0fc9      	lsrs	r1, r1, #31
 8001252:	2aff      	cmp	r2, #255	@ 0xff
 8001254:	d018      	beq.n	8001288 <__gesf2+0x4c>
 8001256:	28ff      	cmp	r0, #255	@ 0xff
 8001258:	d00a      	beq.n	8001270 <__gesf2+0x34>
 800125a:	2a00      	cmp	r2, #0
 800125c:	d11e      	bne.n	800129c <__gesf2+0x60>
 800125e:	2800      	cmp	r0, #0
 8001260:	d10a      	bne.n	8001278 <__gesf2+0x3c>
 8001262:	2d00      	cmp	r5, #0
 8001264:	d029      	beq.n	80012ba <__gesf2+0x7e>
 8001266:	2c00      	cmp	r4, #0
 8001268:	d12d      	bne.n	80012c6 <__gesf2+0x8a>
 800126a:	0048      	lsls	r0, r1, #1
 800126c:	3801      	subs	r0, #1
 800126e:	bd30      	pop	{r4, r5, pc}
 8001270:	2d00      	cmp	r5, #0
 8001272:	d125      	bne.n	80012c0 <__gesf2+0x84>
 8001274:	2a00      	cmp	r2, #0
 8001276:	d101      	bne.n	800127c <__gesf2+0x40>
 8001278:	2c00      	cmp	r4, #0
 800127a:	d0f6      	beq.n	800126a <__gesf2+0x2e>
 800127c:	428b      	cmp	r3, r1
 800127e:	d019      	beq.n	80012b4 <__gesf2+0x78>
 8001280:	2001      	movs	r0, #1
 8001282:	425b      	negs	r3, r3
 8001284:	4318      	orrs	r0, r3
 8001286:	e7f2      	b.n	800126e <__gesf2+0x32>
 8001288:	2c00      	cmp	r4, #0
 800128a:	d119      	bne.n	80012c0 <__gesf2+0x84>
 800128c:	28ff      	cmp	r0, #255	@ 0xff
 800128e:	d1f7      	bne.n	8001280 <__gesf2+0x44>
 8001290:	2d00      	cmp	r5, #0
 8001292:	d115      	bne.n	80012c0 <__gesf2+0x84>
 8001294:	2000      	movs	r0, #0
 8001296:	428b      	cmp	r3, r1
 8001298:	d1f2      	bne.n	8001280 <__gesf2+0x44>
 800129a:	e7e8      	b.n	800126e <__gesf2+0x32>
 800129c:	2800      	cmp	r0, #0
 800129e:	d0ef      	beq.n	8001280 <__gesf2+0x44>
 80012a0:	428b      	cmp	r3, r1
 80012a2:	d1ed      	bne.n	8001280 <__gesf2+0x44>
 80012a4:	4282      	cmp	r2, r0
 80012a6:	dceb      	bgt.n	8001280 <__gesf2+0x44>
 80012a8:	db04      	blt.n	80012b4 <__gesf2+0x78>
 80012aa:	42ac      	cmp	r4, r5
 80012ac:	d8e8      	bhi.n	8001280 <__gesf2+0x44>
 80012ae:	2000      	movs	r0, #0
 80012b0:	42ac      	cmp	r4, r5
 80012b2:	d2dc      	bcs.n	800126e <__gesf2+0x32>
 80012b4:	0058      	lsls	r0, r3, #1
 80012b6:	3801      	subs	r0, #1
 80012b8:	e7d9      	b.n	800126e <__gesf2+0x32>
 80012ba:	2c00      	cmp	r4, #0
 80012bc:	d0d7      	beq.n	800126e <__gesf2+0x32>
 80012be:	e7df      	b.n	8001280 <__gesf2+0x44>
 80012c0:	2002      	movs	r0, #2
 80012c2:	4240      	negs	r0, r0
 80012c4:	e7d3      	b.n	800126e <__gesf2+0x32>
 80012c6:	428b      	cmp	r3, r1
 80012c8:	d1da      	bne.n	8001280 <__gesf2+0x44>
 80012ca:	e7ee      	b.n	80012aa <__gesf2+0x6e>

080012cc <__lesf2>:
 80012cc:	b530      	push	{r4, r5, lr}
 80012ce:	0042      	lsls	r2, r0, #1
 80012d0:	0244      	lsls	r4, r0, #9
 80012d2:	024d      	lsls	r5, r1, #9
 80012d4:	0fc3      	lsrs	r3, r0, #31
 80012d6:	0048      	lsls	r0, r1, #1
 80012d8:	0a64      	lsrs	r4, r4, #9
 80012da:	0e12      	lsrs	r2, r2, #24
 80012dc:	0a6d      	lsrs	r5, r5, #9
 80012de:	0e00      	lsrs	r0, r0, #24
 80012e0:	0fc9      	lsrs	r1, r1, #31
 80012e2:	2aff      	cmp	r2, #255	@ 0xff
 80012e4:	d017      	beq.n	8001316 <__lesf2+0x4a>
 80012e6:	28ff      	cmp	r0, #255	@ 0xff
 80012e8:	d00a      	beq.n	8001300 <__lesf2+0x34>
 80012ea:	2a00      	cmp	r2, #0
 80012ec:	d11b      	bne.n	8001326 <__lesf2+0x5a>
 80012ee:	2800      	cmp	r0, #0
 80012f0:	d10a      	bne.n	8001308 <__lesf2+0x3c>
 80012f2:	2d00      	cmp	r5, #0
 80012f4:	d01d      	beq.n	8001332 <__lesf2+0x66>
 80012f6:	2c00      	cmp	r4, #0
 80012f8:	d12d      	bne.n	8001356 <__lesf2+0x8a>
 80012fa:	0048      	lsls	r0, r1, #1
 80012fc:	3801      	subs	r0, #1
 80012fe:	e011      	b.n	8001324 <__lesf2+0x58>
 8001300:	2d00      	cmp	r5, #0
 8001302:	d10e      	bne.n	8001322 <__lesf2+0x56>
 8001304:	2a00      	cmp	r2, #0
 8001306:	d101      	bne.n	800130c <__lesf2+0x40>
 8001308:	2c00      	cmp	r4, #0
 800130a:	d0f6      	beq.n	80012fa <__lesf2+0x2e>
 800130c:	428b      	cmp	r3, r1
 800130e:	d10c      	bne.n	800132a <__lesf2+0x5e>
 8001310:	0058      	lsls	r0, r3, #1
 8001312:	3801      	subs	r0, #1
 8001314:	e006      	b.n	8001324 <__lesf2+0x58>
 8001316:	2c00      	cmp	r4, #0
 8001318:	d103      	bne.n	8001322 <__lesf2+0x56>
 800131a:	28ff      	cmp	r0, #255	@ 0xff
 800131c:	d105      	bne.n	800132a <__lesf2+0x5e>
 800131e:	2d00      	cmp	r5, #0
 8001320:	d015      	beq.n	800134e <__lesf2+0x82>
 8001322:	2002      	movs	r0, #2
 8001324:	bd30      	pop	{r4, r5, pc}
 8001326:	2800      	cmp	r0, #0
 8001328:	d106      	bne.n	8001338 <__lesf2+0x6c>
 800132a:	2001      	movs	r0, #1
 800132c:	425b      	negs	r3, r3
 800132e:	4318      	orrs	r0, r3
 8001330:	e7f8      	b.n	8001324 <__lesf2+0x58>
 8001332:	2c00      	cmp	r4, #0
 8001334:	d0f6      	beq.n	8001324 <__lesf2+0x58>
 8001336:	e7f8      	b.n	800132a <__lesf2+0x5e>
 8001338:	428b      	cmp	r3, r1
 800133a:	d1f6      	bne.n	800132a <__lesf2+0x5e>
 800133c:	4282      	cmp	r2, r0
 800133e:	dcf4      	bgt.n	800132a <__lesf2+0x5e>
 8001340:	dbe6      	blt.n	8001310 <__lesf2+0x44>
 8001342:	42ac      	cmp	r4, r5
 8001344:	d8f1      	bhi.n	800132a <__lesf2+0x5e>
 8001346:	2000      	movs	r0, #0
 8001348:	42ac      	cmp	r4, r5
 800134a:	d2eb      	bcs.n	8001324 <__lesf2+0x58>
 800134c:	e7e0      	b.n	8001310 <__lesf2+0x44>
 800134e:	2000      	movs	r0, #0
 8001350:	428b      	cmp	r3, r1
 8001352:	d1ea      	bne.n	800132a <__lesf2+0x5e>
 8001354:	e7e6      	b.n	8001324 <__lesf2+0x58>
 8001356:	428b      	cmp	r3, r1
 8001358:	d1e7      	bne.n	800132a <__lesf2+0x5e>
 800135a:	e7f2      	b.n	8001342 <__lesf2+0x76>

0800135c <ATC_SendReceive>:
    uint32_t command_len,
    char *response,
    uint32_t response_size,
    uint32_t timeout_ms,
    const char *expected_response
) {
 800135c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800135e:	b089      	sub	sp, #36	@ 0x24
 8001360:	af02      	add	r7, sp, #8
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
    if (!lora || !lora->huart || !command || command_len == 0) {
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d009      	beq.n	8001384 <ATC_SendReceive+0x28>
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d005      	beq.n	8001384 <ATC_SendReceive+0x28>
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <ATC_SendReceive+0x28>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d102      	bne.n	800138a <ATC_SendReceive+0x2e>
        return -1;
 8001384:	2301      	movs	r3, #1
 8001386:	425b      	negs	r3, r3
 8001388:	e068      	b.n	800145c <ATC_SendReceive+0x100>
    }
    HAL_StatusTypeDef status = HAL_UART_Transmit(
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6818      	ldr	r0, [r3, #0]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	b29a      	uxth	r2, r3
 8001392:	2517      	movs	r5, #23
 8001394:	197c      	adds	r4, r7, r5
 8001396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001398:	68b9      	ldr	r1, [r7, #8]
 800139a:	f006 f8e7 	bl	800756c <HAL_UART_Transmit>
 800139e:	0003      	movs	r3, r0
 80013a0:	7023      	strb	r3, [r4, #0]
        lora->huart,
        (const uint8_t *)command,
        command_len,
        timeout_ms
    );
    if (status != HAL_OK) {
 80013a2:	197b      	adds	r3, r7, r5
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d009      	beq.n	80013be <ATC_SendReceive+0x62>
        ConsolePrintf("ATC_SendReceive: TX failed (status=%d)\r\n", (int)status);
 80013aa:	197b      	adds	r3, r7, r5
 80013ac:	781a      	ldrb	r2, [r3, #0]
 80013ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001464 <ATC_SendReceive+0x108>)
 80013b0:	0011      	movs	r1, r2
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 ff18 	bl	80021e8 <ConsolePrintf>
        return -2;
 80013b8:	2302      	movs	r3, #2
 80013ba:	425b      	negs	r3, r3
 80013bc:	e04e      	b.n	800145c <ATC_SendReceive+0x100>
    }
    if (response && response_size > 0) {
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d033      	beq.n	800142c <ATC_SendReceive+0xd0>
 80013c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d030      	beq.n	800142c <ATC_SendReceive+0xd0>
        uint16_t rx_len = 0;
 80013ca:	2514      	movs	r5, #20
 80013cc:	197b      	adds	r3, r7, r5
 80013ce:	2200      	movs	r2, #0
 80013d0:	801a      	strh	r2, [r3, #0]
        memset(response, 0, response_size);
 80013d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	2100      	movs	r1, #0
 80013d8:	0018      	movs	r0, r3
 80013da:	f007 f941 	bl	8008660 <memset>
        status = HAL_UARTEx_ReceiveToIdle(
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	6818      	ldr	r0, [r3, #0]
 80013e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	3b01      	subs	r3, #1
 80013e8:	b29a      	uxth	r2, r3
 80013ea:	2617      	movs	r6, #23
 80013ec:	19bc      	adds	r4, r7, r6
 80013ee:	197d      	adds	r5, r7, r5
 80013f0:	6839      	ldr	r1, [r7, #0]
 80013f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	002b      	movs	r3, r5
 80013f8:	f006 ff0c 	bl	8008214 <HAL_UARTEx_ReceiveToIdle>
 80013fc:	0003      	movs	r3, r0
 80013fe:	7023      	strb	r3, [r4, #0]
            (uint8_t *)response,
            response_size - 1,
            &rx_len,
            timeout_ms
        );
        if (status != HAL_OK) {
 8001400:	19bb      	adds	r3, r7, r6
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d009      	beq.n	800141c <ATC_SendReceive+0xc0>
            ConsolePrintf("ATC_SendReceive: RX failed (status=%d)\r\n", (int)status);
 8001408:	19bb      	adds	r3, r7, r6
 800140a:	781a      	ldrb	r2, [r3, #0]
 800140c:	4b16      	ldr	r3, [pc, #88]	@ (8001468 <ATC_SendReceive+0x10c>)
 800140e:	0011      	movs	r1, r2
 8001410:	0018      	movs	r0, r3
 8001412:	f000 fee9 	bl	80021e8 <ConsolePrintf>
            return -4;
 8001416:	2304      	movs	r3, #4
 8001418:	425b      	negs	r3, r3
 800141a:	e01f      	b.n	800145c <ATC_SendReceive+0x100>
        }
        response[rx_len] = '\0';
 800141c:	2314      	movs	r3, #20
 800141e:	18fb      	adds	r3, r7, r3
 8001420:	881b      	ldrh	r3, [r3, #0]
 8001422:	001a      	movs	r2, r3
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	189b      	adds	r3, r3, r2
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
    }
    if (expected_response && response) {
 800142c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800142e:	2b00      	cmp	r3, #0
 8001430:	d013      	beq.n	800145a <ATC_SendReceive+0xfe>
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d010      	beq.n	800145a <ATC_SendReceive+0xfe>
        if (!strstr(response, expected_response)) {
 8001438:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	0011      	movs	r1, r2
 800143e:	0018      	movs	r0, r3
 8001440:	f007 f916 	bl	8008670 <strstr>
 8001444:	1e03      	subs	r3, r0, #0
 8001446:	d108      	bne.n	800145a <ATC_SendReceive+0xfe>
            ConsolePrintf("ATC_SendReceive: expected response '%s' not found\r\n", expected_response);
 8001448:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800144a:	4b08      	ldr	r3, [pc, #32]	@ (800146c <ATC_SendReceive+0x110>)
 800144c:	0011      	movs	r1, r2
 800144e:	0018      	movs	r0, r3
 8001450:	f000 feca 	bl	80021e8 <ConsolePrintf>
            return -3;
 8001454:	2303      	movs	r3, #3
 8001456:	425b      	negs	r3, r3
 8001458:	e000      	b.n	800145c <ATC_SendReceive+0x100>
        }
    }
    return 0;
 800145a:	2300      	movs	r3, #0
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b007      	add	sp, #28
 8001462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001464:	08008f98 	.word	0x08008f98
 8001468:	08008fc4 	.word	0x08008fc4
 800146c:	08008ff0 	.word	0x08008ff0

08001470 <wake_module>:
static LoRaWAN_Error_t wake_module(
    ATC_HandleTypeDef *lora,
    char *response,
    uint32_t response_size,
    uint32_t timeout_ms
) {
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b08b      	sub	sp, #44	@ 0x2c
 8001474:	af04      	add	r7, sp, #16
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	603b      	str	r3, [r7, #0]
    uint8_t dummy;
    // Flush RX FIFO by reading until no more data
    while (HAL_UART_Receive(lora->huart, &dummy, 1, 1) == HAL_OK) {
 800147e:	46c0      	nop			@ (mov r8, r8)
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	2313      	movs	r3, #19
 8001486:	18f9      	adds	r1, r7, r3
 8001488:	2301      	movs	r3, #1
 800148a:	2201      	movs	r2, #1
 800148c:	f006 f90e 	bl	80076ac <HAL_UART_Receive>
 8001490:	1e03      	subs	r3, r0, #0
 8001492:	d0f5      	beq.n	8001480 <wake_module+0x10>
    }
    static const char wake_cmd[] = "AT\r\n";
    int rc = ATC_SendReceive(
        lora,
        wake_cmd,
        (uint32_t)strlen(wake_cmd),
 8001494:	4b1d      	ldr	r3, [pc, #116]	@ (800150c <wake_module+0x9c>)
 8001496:	0018      	movs	r0, r3
 8001498:	f7fe fe36 	bl	8000108 <strlen>
 800149c:	0004      	movs	r4, r0
    int rc = ATC_SendReceive(
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	491a      	ldr	r1, [pc, #104]	@ (800150c <wake_module+0x9c>)
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	2300      	movs	r3, #0
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	0013      	movs	r3, r2
 80014b2:	0022      	movs	r2, r4
 80014b4:	f7ff ff52 	bl	800135c <ATC_SendReceive>
 80014b8:	0003      	movs	r3, r0
 80014ba:	617b      	str	r3, [r7, #20]
        response,
        response_size,
        timeout_ms,
        NULL
    );
    if (rc != 0) {
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d008      	beq.n	80014d4 <wake_module+0x64>
        ConsolePrintf("wake_module: AT transmit error (rc=%d)\r\n", rc);
 80014c2:	697a      	ldr	r2, [r7, #20]
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <wake_module+0xa0>)
 80014c6:	0011      	movs	r1, r2
 80014c8:	0018      	movs	r0, r3
 80014ca:	f000 fe8d 	bl	80021e8 <ConsolePrintf>
        return LORAWAN_ERROR_COMMUNICATION;
 80014ce:	2302      	movs	r3, #2
 80014d0:	425b      	negs	r3, r3
 80014d2:	e016      	b.n	8001502 <wake_module+0x92>
    }
    HAL_Delay(100);
 80014d4:	2064      	movs	r0, #100	@ 0x64
 80014d6:	f002 fb13 	bl	8003b00 <HAL_Delay>
    if (strstr(response, "WAKE") || strstr(response, "OK")) {
 80014da:	4a0e      	ldr	r2, [pc, #56]	@ (8001514 <wake_module+0xa4>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	0011      	movs	r1, r2
 80014e0:	0018      	movs	r0, r3
 80014e2:	f007 f8c5 	bl	8008670 <strstr>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d107      	bne.n	80014fa <wake_module+0x8a>
 80014ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001518 <wake_module+0xa8>)
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	0011      	movs	r1, r2
 80014f0:	0018      	movs	r0, r3
 80014f2:	f007 f8bd 	bl	8008670 <strstr>
 80014f6:	1e03      	subs	r3, r0, #0
 80014f8:	d001      	beq.n	80014fe <wake_module+0x8e>
        return LORAWAN_ERROR_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e001      	b.n	8001502 <wake_module+0x92>
    }
    return LORAWAN_ERROR_COMMUNICATION;
 80014fe:	2302      	movs	r3, #2
 8001500:	425b      	negs	r3, r3
}
 8001502:	0018      	movs	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	b007      	add	sp, #28
 8001508:	bd90      	pop	{r4, r7, pc}
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	0800a230 	.word	0x0800a230
 8001510:	08009024 	.word	0x08009024
 8001514:	08009050 	.word	0x08009050
 8001518:	08009058 	.word	0x08009058

0800151c <send_data_and_get_response>:
    const char *data,
    char *response,
    uint32_t response_size,
    uint32_t timeout_ms,
    const char *expected_response
) {
 800151c:	b5b0      	push	{r4, r5, r7, lr}
 800151e:	b08a      	sub	sp, #40	@ 0x28
 8001520:	af04      	add	r7, sp, #16
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
    if (!lora || !lora->huart || !data || !response || response_size == 0) {
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00c      	beq.n	800154a <send_data_and_get_response+0x2e>
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d008      	beq.n	800154a <send_data_and_get_response+0x2e>
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <send_data_and_get_response+0x2e>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d002      	beq.n	800154a <send_data_and_get_response+0x2e>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d102      	bne.n	8001550 <send_data_and_get_response+0x34>
        return LORAWAN_ERROR_INVALID_PARAM;
 800154a:	2301      	movs	r3, #1
 800154c:	425b      	negs	r3, r3
 800154e:	e049      	b.n	80015e4 <send_data_and_get_response+0xc8>
    }
    LoRaWAN_Error_t wake_status = wake_module(
 8001550:	2517      	movs	r5, #23
 8001552:	197c      	adds	r4, r7, r5
 8001554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f7ff ff88 	bl	8001470 <wake_module>
 8001560:	0003      	movs	r3, r0
 8001562:	7023      	strb	r3, [r4, #0]
        lora,
        response,
        response_size,
        timeout_ms
    );
    if (wake_status != LORAWAN_ERROR_OK) {
 8001564:	197b      	adds	r3, r7, r5
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b25b      	sxtb	r3, r3
 800156a:	2b00      	cmp	r3, #0
 800156c:	d003      	beq.n	8001576 <send_data_and_get_response+0x5a>
        return wake_status;
 800156e:	197b      	adds	r3, r7, r5
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b25b      	sxtb	r3, r3
 8001574:	e036      	b.n	80015e4 <send_data_and_get_response+0xc8>
    }
    HAL_Delay(50);
 8001576:	2032      	movs	r0, #50	@ 0x32
 8001578:	f002 fac2 	bl	8003b00 <HAL_Delay>
    int res = ATC_SendReceive(
        lora,
        data,
        (uint32_t)strlen(data),
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	0018      	movs	r0, r3
 8001580:	f7fe fdc2 	bl	8000108 <strlen>
 8001584:	0004      	movs	r4, r0
    int res = ATC_SendReceive(
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	68f8      	ldr	r0, [r7, #12]
 800158c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	0013      	movs	r3, r2
 800159a:	0022      	movs	r2, r4
 800159c:	f7ff fede 	bl	800135c <ATC_SendReceive>
 80015a0:	0003      	movs	r3, r0
 80015a2:	613b      	str	r3, [r7, #16]
        response,
        response_size,
        timeout_ms,
        expected_response
    );
    switch (res) {
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	3301      	adds	r3, #1
 80015a8:	d00f      	beq.n	80015ca <send_data_and_get_response+0xae>
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	da18      	bge.n	80015e2 <send_data_and_get_response+0xc6>
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	3302      	adds	r3, #2
 80015b4:	d00c      	beq.n	80015d0 <send_data_and_get_response+0xb4>
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	3302      	adds	r3, #2
 80015ba:	dc12      	bgt.n	80015e2 <send_data_and_get_response+0xc6>
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	3304      	adds	r3, #4
 80015c0:	d00c      	beq.n	80015dc <send_data_and_get_response+0xc0>
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	3303      	adds	r3, #3
 80015c6:	d006      	beq.n	80015d6 <send_data_and_get_response+0xba>
 80015c8:	e00b      	b.n	80015e2 <send_data_and_get_response+0xc6>
        case -1: return LORAWAN_ERROR_INVALID_PARAM;
 80015ca:	2301      	movs	r3, #1
 80015cc:	425b      	negs	r3, r3
 80015ce:	e009      	b.n	80015e4 <send_data_and_get_response+0xc8>
        case -2: return LORAWAN_ERROR_COMMUNICATION;
 80015d0:	2302      	movs	r3, #2
 80015d2:	425b      	negs	r3, r3
 80015d4:	e006      	b.n	80015e4 <send_data_and_get_response+0xc8>
        case -3: return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 80015d6:	2303      	movs	r3, #3
 80015d8:	425b      	negs	r3, r3
 80015da:	e003      	b.n	80015e4 <send_data_and_get_response+0xc8>
        case -4: return LORAWAN_ERROR_TIMEOUT;
 80015dc:	2304      	movs	r3, #4
 80015de:	425b      	negs	r3, r3
 80015e0:	e000      	b.n	80015e4 <send_data_and_get_response+0xc8>
        default:  return LORAWAN_ERROR_OK;
 80015e2:	2300      	movs	r3, #0
    }
}
 80015e4:	0018      	movs	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	b006      	add	sp, #24
 80015ea:	bdb0      	pop	{r4, r5, r7, pc}

080015ec <LoRaWAN_Join>:

LoRaWAN_Error_t LoRaWAN_Join(ATC_HandleTypeDef *lora) {
 80015ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ee:	b0c7      	sub	sp, #284	@ 0x11c
 80015f0:	af02      	add	r7, sp, #8
 80015f2:	6078      	str	r0, [r7, #4]
    char response[LORAWAN_MAX_RESP_LEN] = {0};
 80015f4:	4b34      	ldr	r3, [pc, #208]	@ (80016c8 <LoRaWAN_Join+0xdc>)
 80015f6:	2288      	movs	r2, #136	@ 0x88
 80015f8:	0052      	lsls	r2, r2, #1
 80015fa:	189b      	adds	r3, r3, r2
 80015fc:	19db      	adds	r3, r3, r7
 80015fe:	0018      	movs	r0, r3
 8001600:	2380      	movs	r3, #128	@ 0x80
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	001a      	movs	r2, r3
 8001606:	2100      	movs	r1, #0
 8001608:	f007 f82a 	bl	8008660 <memset>
    LoRaWAN_Error_t status = send_data_and_get_response(
 800160c:	2610      	movs	r6, #16
 800160e:	36ff      	adds	r6, #255	@ 0xff
 8001610:	19bc      	adds	r4, r7, r6
 8001612:	2380      	movs	r3, #128	@ 0x80
 8001614:	005d      	lsls	r5, r3, #1
 8001616:	230c      	movs	r3, #12
 8001618:	18fa      	adds	r2, r7, r3
 800161a:	492c      	ldr	r1, [pc, #176]	@ (80016cc <LoRaWAN_Join+0xe0>)
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	4b2c      	ldr	r3, [pc, #176]	@ (80016d0 <LoRaWAN_Join+0xe4>)
 8001620:	9301      	str	r3, [sp, #4]
 8001622:	4b2c      	ldr	r3, [pc, #176]	@ (80016d4 <LoRaWAN_Join+0xe8>)
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	002b      	movs	r3, r5
 8001628:	f7ff ff78 	bl	800151c <send_data_and_get_response>
 800162c:	0003      	movs	r3, r0
 800162e:	7023      	strb	r3, [r4, #0]
        response,
        sizeof(response),
        10000,
        "OK"
    );
    if (status != LORAWAN_ERROR_OK) {
 8001630:	19bb      	adds	r3, r7, r6
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b25b      	sxtb	r3, r3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <LoRaWAN_Join+0x56>
        return status;
 800163a:	19bb      	adds	r3, r7, r6
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	b25b      	sxtb	r3, r3
 8001640:	e03d      	b.n	80016be <LoRaWAN_Join+0xd2>
    }
    memset(response, 0, sizeof(response));
 8001642:	2380      	movs	r3, #128	@ 0x80
 8001644:	005a      	lsls	r2, r3, #1
 8001646:	250c      	movs	r5, #12
 8001648:	197b      	adds	r3, r7, r5
 800164a:	2100      	movs	r1, #0
 800164c:	0018      	movs	r0, r3
 800164e:	f007 f807 	bl	8008660 <memset>
    uint16_t rx_len = 0;
 8001652:	4b21      	ldr	r3, [pc, #132]	@ (80016d8 <LoRaWAN_Join+0xec>)
 8001654:	2488      	movs	r4, #136	@ 0x88
 8001656:	0064      	lsls	r4, r4, #1
 8001658:	191b      	adds	r3, r3, r4
 800165a:	19db      	adds	r3, r3, r7
 800165c:	2200      	movs	r2, #0
 800165e:	801a      	strh	r2, [r3, #0]
    if (HAL_UARTEx_ReceiveToIdle(
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	230a      	movs	r3, #10
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	1979      	adds	r1, r7, r5
 800166a:	4a1a      	ldr	r2, [pc, #104]	@ (80016d4 <LoRaWAN_Join+0xe8>)
 800166c:	9200      	str	r2, [sp, #0]
 800166e:	22ff      	movs	r2, #255	@ 0xff
 8001670:	f006 fdd0 	bl	8008214 <HAL_UARTEx_ReceiveToIdle>
 8001674:	1e03      	subs	r3, r0, #0
 8001676:	d109      	bne.n	800168c <LoRaWAN_Join+0xa0>
            (uint8_t *)response,
            sizeof(response) - 1,
            &rx_len,
            10000
        ) == HAL_OK) {
        response[rx_len] = '\0';
 8001678:	4b17      	ldr	r3, [pc, #92]	@ (80016d8 <LoRaWAN_Join+0xec>)
 800167a:	191b      	adds	r3, r3, r4
 800167c:	19db      	adds	r3, r3, r7
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	001a      	movs	r2, r3
 8001682:	4b11      	ldr	r3, [pc, #68]	@ (80016c8 <LoRaWAN_Join+0xdc>)
 8001684:	191b      	adds	r3, r3, r4
 8001686:	19db      	adds	r3, r3, r7
 8001688:	2100      	movs	r1, #0
 800168a:	5499      	strb	r1, [r3, r2]
    }
    if (strstr(response, "JOINED")) {
 800168c:	4a13      	ldr	r2, [pc, #76]	@ (80016dc <LoRaWAN_Join+0xf0>)
 800168e:	230c      	movs	r3, #12
 8001690:	18fb      	adds	r3, r7, r3
 8001692:	0011      	movs	r1, r2
 8001694:	0018      	movs	r0, r3
 8001696:	f006 ffeb 	bl	8008670 <strstr>
 800169a:	1e03      	subs	r3, r0, #0
 800169c:	d001      	beq.n	80016a2 <LoRaWAN_Join+0xb6>
        return LORAWAN_ERROR_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e00d      	b.n	80016be <LoRaWAN_Join+0xd2>
    }
    if (strstr(response, "JOIN FAILED")) {
 80016a2:	4a0f      	ldr	r2, [pc, #60]	@ (80016e0 <LoRaWAN_Join+0xf4>)
 80016a4:	230c      	movs	r3, #12
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	0011      	movs	r1, r2
 80016aa:	0018      	movs	r0, r3
 80016ac:	f006 ffe0 	bl	8008670 <strstr>
 80016b0:	1e03      	subs	r3, r0, #0
 80016b2:	d002      	beq.n	80016ba <LoRaWAN_Join+0xce>
        return LORAWAN_ERROR_NOT_JOINED;
 80016b4:	2305      	movs	r3, #5
 80016b6:	425b      	negs	r3, r3
 80016b8:	e001      	b.n	80016be <LoRaWAN_Join+0xd2>
    }
    return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 80016ba:	2303      	movs	r3, #3
 80016bc:	425b      	negs	r3, r3
}
 80016be:	0018      	movs	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	b045      	add	sp, #276	@ 0x114
 80016c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c6:	46c0      	nop			@ (mov r8, r8)
 80016c8:	fffffefc 	.word	0xfffffefc
 80016cc:	0800905c 	.word	0x0800905c
 80016d0:	08009058 	.word	0x08009058
 80016d4:	00002710 	.word	0x00002710
 80016d8:	fffffefa 	.word	0xfffffefa
 80016dc:	08009068 	.word	0x08009068
 80016e0:	08009070 	.word	0x08009070

080016e4 <LoRaWAN_SendHex>:

LoRaWAN_Error_t LoRaWAN_SendHex(
    ATC_HandleTypeDef *lora,
    const uint8_t *payload,
    size_t length
) {
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b0cb      	sub	sp, #300	@ 0x12c
 80016e8:	af02      	add	r7, sp, #8
 80016ea:	60f8      	str	r0, [r7, #12]
 80016ec:	60b9      	str	r1, [r7, #8]
 80016ee:	607a      	str	r2, [r7, #4]
    if (!lora || !lora->huart || !payload || length == 0 || length > (LORAWAN_MAX_HEX_LEN/2)) {
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d00c      	beq.n	8001710 <LoRaWAN_SendHex+0x2c>
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d008      	beq.n	8001710 <LoRaWAN_SendHex+0x2c>
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <LoRaWAN_SendHex+0x2c>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <LoRaWAN_SendHex+0x2c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b40      	cmp	r3, #64	@ 0x40
 800170e:	d902      	bls.n	8001716 <LoRaWAN_SendHex+0x32>
        return LORAWAN_ERROR_INVALID_PARAM;
 8001710:	2301      	movs	r3, #1
 8001712:	425b      	negs	r3, r3
 8001714:	e057      	b.n	80017c6 <LoRaWAN_SendHex+0xe2>
    }
    char hex[LORAWAN_MAX_HEX_LEN + 1];
    for (size_t i = 0; i < length; ++i) {
 8001716:	2300      	movs	r3, #0
 8001718:	228e      	movs	r2, #142	@ 0x8e
 800171a:	0052      	lsls	r2, r2, #1
 800171c:	18ba      	adds	r2, r7, r2
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	e015      	b.n	800174e <LoRaWAN_SendHex+0x6a>
        snprintf(&hex[2 * i], 3, "%02X", payload[i]);
 8001722:	248e      	movs	r4, #142	@ 0x8e
 8001724:	0064      	lsls	r4, r4, #1
 8001726:	193b      	adds	r3, r7, r4
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	2294      	movs	r2, #148	@ 0x94
 800172e:	18ba      	adds	r2, r7, r2
 8001730:	18d0      	adds	r0, r2, r3
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	193b      	adds	r3, r7, r4
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	18d3      	adds	r3, r2, r3
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4a24      	ldr	r2, [pc, #144]	@ (80017d0 <LoRaWAN_SendHex+0xec>)
 800173e:	2103      	movs	r1, #3
 8001740:	f006 ff1e 	bl	8008580 <sniprintf>
    for (size_t i = 0; i < length; ++i) {
 8001744:	193b      	adds	r3, r7, r4
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	193a      	adds	r2, r7, r4
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	238e      	movs	r3, #142	@ 0x8e
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	d3e2      	bcc.n	8001722 <LoRaWAN_SendHex+0x3e>
    }
    hex[2 * length] = '\0';
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	2094      	movs	r0, #148	@ 0x94
 8001762:	183a      	adds	r2, r7, r0
 8001764:	2100      	movs	r1, #0
 8001766:	54d1      	strb	r1, [r2, r3]
    char cmd[LORAWAN_MAX_CMD_LEN];
    int n = snprintf(cmd, sizeof(cmd), "AT+SEND \"%s\"\r\n", hex);
 8001768:	183b      	adds	r3, r7, r0
 800176a:	4a1a      	ldr	r2, [pc, #104]	@ (80017d4 <LoRaWAN_SendHex+0xf0>)
 800176c:	2154      	movs	r1, #84	@ 0x54
 800176e:	1878      	adds	r0, r7, r1
 8001770:	2140      	movs	r1, #64	@ 0x40
 8001772:	f006 ff05 	bl	8008580 <sniprintf>
 8001776:	0003      	movs	r3, r0
 8001778:	228c      	movs	r2, #140	@ 0x8c
 800177a:	0052      	lsls	r2, r2, #1
 800177c:	18b9      	adds	r1, r7, r2
 800177e:	600b      	str	r3, [r1, #0]
    if (n < 0 || n >= (int)sizeof(cmd)) {
 8001780:	18bb      	adds	r3, r7, r2
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db03      	blt.n	8001790 <LoRaWAN_SendHex+0xac>
 8001788:	18bb      	adds	r3, r7, r2
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b3f      	cmp	r3, #63	@ 0x3f
 800178e:	dd02      	ble.n	8001796 <LoRaWAN_SendHex+0xb2>
        return LORAWAN_ERROR_INVALID_PARAM;
 8001790:	2301      	movs	r3, #1
 8001792:	425b      	negs	r3, r3
 8001794:	e017      	b.n	80017c6 <LoRaWAN_SendHex+0xe2>
    }
    char response[64] = {0};
 8001796:	4b10      	ldr	r3, [pc, #64]	@ (80017d8 <LoRaWAN_SendHex+0xf4>)
 8001798:	2290      	movs	r2, #144	@ 0x90
 800179a:	0052      	lsls	r2, r2, #1
 800179c:	189b      	adds	r3, r3, r2
 800179e:	19db      	adds	r3, r3, r7
 80017a0:	0018      	movs	r0, r3
 80017a2:	2340      	movs	r3, #64	@ 0x40
 80017a4:	001a      	movs	r2, r3
 80017a6:	2100      	movs	r1, #0
 80017a8:	f006 ff5a 	bl	8008660 <memset>
    return send_data_and_get_response(
 80017ac:	2314      	movs	r3, #20
 80017ae:	18fa      	adds	r2, r7, r3
 80017b0:	2354      	movs	r3, #84	@ 0x54
 80017b2:	18f9      	adds	r1, r7, r3
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <LoRaWAN_SendHex+0xf8>)
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <LoRaWAN_SendHex+0xfc>)
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2340      	movs	r3, #64	@ 0x40
 80017c0:	f7ff feac 	bl	800151c <send_data_and_get_response>
 80017c4:	0003      	movs	r3, r0
        response,
        sizeof(response),
        5000,
        "OK"
    );
}
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b049      	add	sp, #292	@ 0x124
 80017cc:	bd90      	pop	{r4, r7, pc}
 80017ce:	46c0      	nop			@ (mov r8, r8)
 80017d0:	0800907c 	.word	0x0800907c
 80017d4:	08009084 	.word	0x08009084
 80017d8:	fffffef4 	.word	0xfffffef4
 80017dc:	08009058 	.word	0x08009058
 80017e0:	00001388 	.word	0x00001388

080017e4 <LoRaWAN_Join_Status>:


LoRaWAN_Error_t LoRaWAN_Join_Status(ATC_HandleTypeDef *lora) {
 80017e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e6:	b08f      	sub	sp, #60	@ 0x3c
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	6078      	str	r0, [r7, #4]
    char resp[32] = {0};
 80017ec:	2508      	movs	r5, #8
 80017ee:	197b      	adds	r3, r7, r5
 80017f0:	0018      	movs	r0, r3
 80017f2:	2320      	movs	r3, #32
 80017f4:	001a      	movs	r2, r3
 80017f6:	2100      	movs	r1, #0
 80017f8:	f006 ff32 	bl	8008660 <memset>

    // Read the full response (don’t stop on any particular substring)
    LoRaWAN_Error_t st = send_data_and_get_response(
 80017fc:	262b      	movs	r6, #43	@ 0x2b
 80017fe:	19bc      	adds	r4, r7, r6
 8001800:	197a      	adds	r2, r7, r5
 8001802:	491d      	ldr	r1, [pc, #116]	@ (8001878 <LoRaWAN_Join_Status+0x94>)
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	2300      	movs	r3, #0
 8001808:	9301      	str	r3, [sp, #4]
 800180a:	2396      	movs	r3, #150	@ 0x96
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2320      	movs	r3, #32
 8001812:	f7ff fe83 	bl	800151c <send_data_and_get_response>
 8001816:	0003      	movs	r3, r0
 8001818:	7023      	strb	r3, [r4, #0]
        resp,
        sizeof(resp),
        300,
        NULL
    );
    if (st != LORAWAN_ERROR_OK) {
 800181a:	19bb      	adds	r3, r7, r6
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	b25b      	sxtb	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <LoRaWAN_Join_Status+0x46>
        return LORAWAN_ERROR_NOT_JOINED;
 8001824:	2305      	movs	r3, #5
 8001826:	425b      	negs	r3, r3
 8001828:	e021      	b.n	800186e <LoRaWAN_Join_Status+0x8a>
    }

    // Skip leading CR/LF/whitespace
    char *p = resp;
 800182a:	2308      	movs	r3, #8
 800182c:	18fb      	adds	r3, r7, r3
 800182e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (*p && isspace((unsigned char)*p)) {
 8001830:	e002      	b.n	8001838 <LoRaWAN_Join_Status+0x54>
        p++;
 8001832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001834:	3301      	adds	r3, #1
 8001836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (*p && isspace((unsigned char)*p)) {
 8001838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d009      	beq.n	8001854 <LoRaWAN_Join_Status+0x70>
 8001840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	1c5a      	adds	r2, r3, #1
 8001846:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <LoRaWAN_Join_Status+0x98>)
 8001848:	18d3      	adds	r3, r2, r3
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	001a      	movs	r2, r3
 800184e:	2308      	movs	r3, #8
 8001850:	4013      	ands	r3, r2
 8001852:	d1ee      	bne.n	8001832 <LoRaWAN_Join_Status+0x4e>
    }

    // Option A: parse as integer
    if (strtol(p, NULL, 10) == 1) {
 8001854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001856:	220a      	movs	r2, #10
 8001858:	2100      	movs	r1, #0
 800185a:	0018      	movs	r0, r3
 800185c:	f006 fe84 	bl	8008568 <strtol>
 8001860:	0003      	movs	r3, r0
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <LoRaWAN_Join_Status+0x86>
        return LORAWAN_ERROR_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	e001      	b.n	800186e <LoRaWAN_Join_Status+0x8a>
    }

    return LORAWAN_ERROR_NOT_JOINED;
 800186a:	2305      	movs	r3, #5
 800186c:	425b      	negs	r3, r3
}
 800186e:	0018      	movs	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	b00d      	add	sp, #52	@ 0x34
 8001874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001876:	46c0      	nop			@ (mov r8, r8)
 8001878:	08009094 	.word	0x08009094
 800187c:	0800a2a4 	.word	0x0800a2a4

08001880 <LoRaWAN_SetPort>:

LoRaWAN_Error_t LoRaWAN_SetPort(ATC_HandleTypeDef *lora, uint8_t port) {
 8001880:	b590      	push	{r4, r7, lr}
 8001882:	b09b      	sub	sp, #108	@ 0x6c
 8001884:	af02      	add	r7, sp, #8
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	000a      	movs	r2, r1
 800188a:	1cfb      	adds	r3, r7, #3
 800188c:	701a      	strb	r2, [r3, #0]
    if (!lora || !lora->huart || port < 1 || port > 198) {
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d00b      	beq.n	80018ac <LoRaWAN_SetPort+0x2c>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <LoRaWAN_SetPort+0x2c>
 800189c:	1cfb      	adds	r3, r7, #3
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <LoRaWAN_SetPort+0x2c>
 80018a4:	1cfb      	adds	r3, r7, #3
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2bc6      	cmp	r3, #198	@ 0xc6
 80018aa:	d902      	bls.n	80018b2 <LoRaWAN_SetPort+0x32>
        return LORAWAN_ERROR_INVALID_PARAM;
 80018ac:	2301      	movs	r3, #1
 80018ae:	425b      	negs	r3, r3
 80018b0:	e029      	b.n	8001906 <LoRaWAN_SetPort+0x86>
    }
    // build the ATS command to set the Application Port
    char cmd[16];
    int n = snprintf(cmd, sizeof(cmd), "ATS%u=%u\r\n",
 80018b2:	1cfb      	adds	r3, r7, #3
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	4916      	ldr	r1, [pc, #88]	@ (8001910 <LoRaWAN_SetPort+0x90>)
 80018b8:	4a16      	ldr	r2, [pc, #88]	@ (8001914 <LoRaWAN_SetPort+0x94>)
 80018ba:	204c      	movs	r0, #76	@ 0x4c
 80018bc:	1838      	adds	r0, r7, r0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	000b      	movs	r3, r1
 80018c2:	2110      	movs	r1, #16
 80018c4:	f006 fe5c 	bl	8008580 <sniprintf>
 80018c8:	0003      	movs	r3, r0
 80018ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
                     (unsigned)APPLICATION_PORT_PARAM,
                     (unsigned)port);
    if (n < 0 || n >= (int)sizeof(cmd)) {
 80018cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db02      	blt.n	80018d8 <LoRaWAN_SetPort+0x58>
 80018d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018d4:	2b0f      	cmp	r3, #15
 80018d6:	dd02      	ble.n	80018de <LoRaWAN_SetPort+0x5e>
        return LORAWAN_ERROR_INVALID_PARAM;
 80018d8:	2301      	movs	r3, #1
 80018da:	425b      	negs	r3, r3
 80018dc:	e013      	b.n	8001906 <LoRaWAN_SetPort+0x86>
    }
    // fire off “ATS629=<port>” and wait for “OK”
    char resp[64] = {0};
 80018de:	240c      	movs	r4, #12
 80018e0:	193b      	adds	r3, r7, r4
 80018e2:	0018      	movs	r0, r3
 80018e4:	2340      	movs	r3, #64	@ 0x40
 80018e6:	001a      	movs	r2, r3
 80018e8:	2100      	movs	r1, #0
 80018ea:	f006 feb9 	bl	8008660 <memset>
    return send_data_and_get_response(
 80018ee:	193a      	adds	r2, r7, r4
 80018f0:	234c      	movs	r3, #76	@ 0x4c
 80018f2:	18f9      	adds	r1, r7, r3
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <LoRaWAN_SetPort+0x98>)
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	4b08      	ldr	r3, [pc, #32]	@ (800191c <LoRaWAN_SetPort+0x9c>)
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	2340      	movs	r3, #64	@ 0x40
 8001900:	f7ff fe0c 	bl	800151c <send_data_and_get_response>
 8001904:	0003      	movs	r3, r0
        resp,
        sizeof(resp),
        5000,
        "OK"
    );
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b019      	add	sp, #100	@ 0x64
 800190c:	bd90      	pop	{r4, r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	00000275 	.word	0x00000275
 8001914:	080090a0 	.word	0x080090a0
 8001918:	08009058 	.word	0x08009058
 800191c:	00001388 	.word	0x00001388

08001920 <LoRaWAN_SendHexOnPort>:
LoRaWAN_Error_t LoRaWAN_SendHexOnPort(
    ATC_HandleTypeDef *lora,
    uint8_t           port,
    const uint8_t    *payload,
    size_t            length
) {
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	200b      	movs	r0, #11
 800192e:	183b      	adds	r3, r7, r0
 8001930:	1c0a      	adds	r2, r1, #0
 8001932:	701a      	strb	r2, [r3, #0]
    // 1) change to your desired port
    LoRaWAN_Error_t err = LoRaWAN_SetPort(lora, port);
 8001934:	2517      	movs	r5, #23
 8001936:	197c      	adds	r4, r7, r5
 8001938:	183b      	adds	r3, r7, r0
 800193a:	781a      	ldrb	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	0011      	movs	r1, r2
 8001940:	0018      	movs	r0, r3
 8001942:	f7ff ff9d 	bl	8001880 <LoRaWAN_SetPort>
 8001946:	0003      	movs	r3, r0
 8001948:	7023      	strb	r3, [r4, #0]
    if (err != LORAWAN_ERROR_OK) {
 800194a:	197b      	adds	r3, r7, r5
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	b25b      	sxtb	r3, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <LoRaWAN_SendHexOnPort+0x3c>
        return err;
 8001954:	197b      	adds	r3, r7, r5
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b25b      	sxtb	r3, r3
 800195a:	e006      	b.n	800196a <LoRaWAN_SendHexOnPort+0x4a>
    }
    // 2) send exactly as before
    return LoRaWAN_SendHex(lora, payload, length);
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	6879      	ldr	r1, [r7, #4]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	0018      	movs	r0, r3
 8001964:	f7ff febe 	bl	80016e4 <LoRaWAN_SendHex>
 8001968:	0003      	movs	r3, r0
}
 800196a:	0018      	movs	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	b006      	add	sp, #24
 8001970:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001974 <LoRaWAN_Set_Battery>:

LoRaWAN_Error_t LoRaWAN_Set_Battery(
    ATC_HandleTypeDef *lora,
    uint8_t batteryStatus  // 0..254 per spec
) {
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b09b      	sub	sp, #108	@ 0x6c
 8001978:	af02      	add	r7, sp, #8
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	000a      	movs	r2, r1
 800197e:	1cfb      	adds	r3, r7, #3
 8001980:	701a      	strb	r2, [r3, #0]
    if (!lora || !lora->huart || batteryStatus > 254U) {
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d007      	beq.n	8001998 <LoRaWAN_Set_Battery+0x24>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <LoRaWAN_Set_Battery+0x24>
 8001990:	1cfb      	adds	r3, r7, #3
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2bff      	cmp	r3, #255	@ 0xff
 8001996:	d102      	bne.n	800199e <LoRaWAN_Set_Battery+0x2a>
        return LORAWAN_ERROR_INVALID_PARAM;
 8001998:	2301      	movs	r3, #1
 800199a:	425b      	negs	r3, r3
 800199c:	e026      	b.n	80019ec <LoRaWAN_Set_Battery+0x78>
    }
    char cmd[16];
    int len = snprintf(cmd, sizeof(cmd), "AT+BAT %u\r\n", (unsigned)batteryStatus);
 800199e:	1cfb      	adds	r3, r7, #3
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	4a14      	ldr	r2, [pc, #80]	@ (80019f4 <LoRaWAN_Set_Battery+0x80>)
 80019a4:	214c      	movs	r1, #76	@ 0x4c
 80019a6:	1878      	adds	r0, r7, r1
 80019a8:	2110      	movs	r1, #16
 80019aa:	f006 fde9 	bl	8008580 <sniprintf>
 80019ae:	0003      	movs	r3, r0
 80019b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (len < 0 || len >= (int)sizeof(cmd)) {
 80019b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	db02      	blt.n	80019be <LoRaWAN_Set_Battery+0x4a>
 80019b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80019ba:	2b0f      	cmp	r3, #15
 80019bc:	dd02      	ble.n	80019c4 <LoRaWAN_Set_Battery+0x50>
        return LORAWAN_ERROR_INVALID_PARAM;
 80019be:	2301      	movs	r3, #1
 80019c0:	425b      	negs	r3, r3
 80019c2:	e013      	b.n	80019ec <LoRaWAN_Set_Battery+0x78>
    }
    char resp[64] = {0};
 80019c4:	240c      	movs	r4, #12
 80019c6:	193b      	adds	r3, r7, r4
 80019c8:	0018      	movs	r0, r3
 80019ca:	2340      	movs	r3, #64	@ 0x40
 80019cc:	001a      	movs	r2, r3
 80019ce:	2100      	movs	r1, #0
 80019d0:	f006 fe46 	bl	8008660 <memset>
    return send_data_and_get_response(
 80019d4:	193a      	adds	r2, r7, r4
 80019d6:	234c      	movs	r3, #76	@ 0x4c
 80019d8:	18f9      	adds	r1, r7, r3
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <LoRaWAN_Set_Battery+0x84>)
 80019de:	9301      	str	r3, [sp, #4]
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <LoRaWAN_Set_Battery+0x88>)
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	2340      	movs	r3, #64	@ 0x40
 80019e6:	f7ff fd99 	bl	800151c <send_data_and_get_response>
 80019ea:	0003      	movs	r3, r0
        resp,
        sizeof(resp),
        5000,
        "OK"
    );
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b019      	add	sp, #100	@ 0x64
 80019f2:	bd90      	pop	{r4, r7, pc}
 80019f4:	080090ac 	.word	0x080090ac
 80019f8:	08009058 	.word	0x08009058
 80019fc:	00001388 	.word	0x00001388

08001a00 <LoRaWAN_UpdateBattery>:

LoRaWAN_Error_t LoRaWAN_UpdateBattery(ATC_HandleTypeDef *lora) {
 8001a00:	b5b0      	push	{r4, r5, r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
    uint32_t v_mV;
    uint8_t  pct;
    Battery_Status_t bst = GetBatteryLevel(&v_mV, &pct);
 8001a08:	2516      	movs	r5, #22
 8001a0a:	197c      	adds	r4, r7, r5
 8001a0c:	230f      	movs	r3, #15
 8001a0e:	18fa      	adds	r2, r7, r3
 8001a10:	2310      	movs	r3, #16
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	0011      	movs	r1, r2
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 f89c 	bl	8001b54 <GetBatteryLevel>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	7023      	strb	r3, [r4, #0]
    if (bst != BATTERY_OK) {
 8001a20:	197b      	adds	r3, r7, r5
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d002      	beq.n	8001a30 <LoRaWAN_UpdateBattery+0x30>
        return LORAWAN_ERROR_COMMUNICATION;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	425b      	negs	r3, r3
 8001a2e:	e030      	b.n	8001a92 <LoRaWAN_UpdateBattery+0x92>
    // map pct(0..100) → batteryStatus(1..254):
    //   0%   → 1
    //   100% → 254
    //   linearly in between
    uint8_t batteryStatus;
    if (pct == 0) {
 8001a30:	230f      	movs	r3, #15
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d104      	bne.n	8001a44 <LoRaWAN_UpdateBattery+0x44>
        batteryStatus = 1;
 8001a3a:	2317      	movs	r3, #23
 8001a3c:	18fb      	adds	r3, r7, r3
 8001a3e:	2201      	movs	r2, #1
 8001a40:	701a      	strb	r2, [r3, #0]
 8001a42:	e01d      	b.n	8001a80 <LoRaWAN_UpdateBattery+0x80>
    } else if (pct >= 100) {
 8001a44:	230f      	movs	r3, #15
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b63      	cmp	r3, #99	@ 0x63
 8001a4c:	d904      	bls.n	8001a58 <LoRaWAN_UpdateBattery+0x58>
        batteryStatus = 254;
 8001a4e:	2317      	movs	r3, #23
 8001a50:	18fb      	adds	r3, r7, r3
 8001a52:	22fe      	movs	r2, #254	@ 0xfe
 8001a54:	701a      	strb	r2, [r3, #0]
 8001a56:	e013      	b.n	8001a80 <LoRaWAN_UpdateBattery+0x80>
    } else {
        batteryStatus = (uint8_t)(((uint32_t)pct * 253U + 50U) / 100U + 1U);
 8001a58:	230f      	movs	r3, #15
 8001a5a:	18fb      	adds	r3, r7, r3
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	001a      	movs	r2, r3
 8001a60:	0013      	movs	r3, r2
 8001a62:	019b      	lsls	r3, r3, #6
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	189b      	adds	r3, r3, r2
 8001a6a:	3332      	adds	r3, #50	@ 0x32
 8001a6c:	2164      	movs	r1, #100	@ 0x64
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7fe fb5c 	bl	800012c <__udivsi3>
 8001a74:	0003      	movs	r3, r0
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	2317      	movs	r3, #23
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	3201      	adds	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
    }

    return LoRaWAN_Set_Battery(lora, batteryStatus);
 8001a80:	2317      	movs	r3, #23
 8001a82:	18fb      	adds	r3, r7, r3
 8001a84:	781a      	ldrb	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0011      	movs	r1, r2
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	f7ff ff72 	bl	8001974 <LoRaWAN_Set_Battery>
 8001a90:	0003      	movs	r3, r0
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b006      	add	sp, #24
 8001a98:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001a9c <ReadBatteryVoltage>:
// Battery percentage curve (in mV)
#define V_MIN_MV 3000U    // 3.0 V → 0%
#define V_MAX_MV 4200U    // 4.2 V → 100%

int32_t ReadBatteryVoltage(void)
{
 8001a9c:	b5b0      	push	{r4, r5, r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;
    uint32_t raw;

    // 1) Enable the divider
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_SET);
 8001aa2:	4b28      	ldr	r3, [pc, #160]	@ (8001b44 <ReadBatteryVoltage+0xa8>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	f003 f92a 	bl	8004d02 <HAL_GPIO_WritePin>

    // 2) Wait for it to settle
    HAL_Delay(VBAT_SETTLE_DELAY_MS);
 8001aae:	200a      	movs	r0, #10
 8001ab0:	f002 f826 	bl	8003b00 <HAL_Delay>

    // 3) Sample ADC
    status = HAL_ADC_Start(&hadc);
 8001ab4:	2517      	movs	r5, #23
 8001ab6:	197c      	adds	r4, r7, r5
 8001ab8:	4b23      	ldr	r3, [pc, #140]	@ (8001b48 <ReadBatteryVoltage+0xac>)
 8001aba:	0018      	movs	r0, r3
 8001abc:	f002 fa8e 	bl	8003fdc <HAL_ADC_Start>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) goto fail;
 8001ac4:	197b      	adds	r3, r7, r5
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d12c      	bne.n	8001b26 <ReadBatteryVoltage+0x8a>
    status = HAL_ADC_PollForConversion(&hadc, 10);
 8001acc:	197c      	adds	r4, r7, r5
 8001ace:	4b1e      	ldr	r3, [pc, #120]	@ (8001b48 <ReadBatteryVoltage+0xac>)
 8001ad0:	210a      	movs	r1, #10
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	f002 fb16 	bl	8004104 <HAL_ADC_PollForConversion>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) goto fail;
 8001adc:	197b      	adds	r3, r7, r5
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d122      	bne.n	8001b2a <ReadBatteryVoltage+0x8e>
    raw = HAL_ADC_GetValue(&hadc);
 8001ae4:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <ReadBatteryVoltage+0xac>)
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f002 fba8 	bl	800423c <HAL_ADC_GetValue>
 8001aec:	0003      	movs	r3, r0
 8001aee:	613b      	str	r3, [r7, #16]
    HAL_ADC_Stop(&hadc);
 8001af0:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <ReadBatteryVoltage+0xac>)
 8001af2:	0018      	movs	r0, r3
 8001af4:	f002 fac6 	bl	8004084 <HAL_ADC_Stop>

    // 4) Turn divider off
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_RESET);
 8001af8:	4b12      	ldr	r3, [pc, #72]	@ (8001b44 <ReadBatteryVoltage+0xa8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	2101      	movs	r1, #1
 8001afe:	0018      	movs	r0, r3
 8001b00:	f003 f8ff 	bl	8004d02 <HAL_GPIO_WritePin>

    // 5) Compute VBAT in mV:
    //    VBAT = (raw/ADC_MAX_COUNT) * ADC_REF_VOLTAGE_MV * (DIVIDER_RATIO_NUM/DIVIDER_RATIO_DEN)
    //    = (raw * ADC_REF_VOLTAGE_MV * DIVIDER_RATIO_NUM + denom/2) / denom  (rounded)
    const uint32_t denom = ADC_MAX_COUNT * DIVIDER_RATIO_DEN;
 8001b04:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <ReadBatteryVoltage+0xb0>)
 8001b06:	60fb      	str	r3, [r7, #12]
    uint32_t numerator = raw * ADC_REF_VOLTAGE_MV * DIVIDER_RATIO_NUM + (denom/2U);
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4a11      	ldr	r2, [pc, #68]	@ (8001b50 <ReadBatteryVoltage+0xb4>)
 8001b0c:	435a      	muls	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	18d3      	adds	r3, r2, r3
 8001b14:	60bb      	str	r3, [r7, #8]
    uint32_t vbat_mV = numerator / denom;
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	68b8      	ldr	r0, [r7, #8]
 8001b1a:	f7fe fb07 	bl	800012c <__udivsi3>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	607b      	str	r3, [r7, #4]

    return (int32_t)vbat_mV;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	e00a      	b.n	8001b3c <ReadBatteryVoltage+0xa0>
    if (status != HAL_OK) goto fail;
 8001b26:	46c0      	nop			@ (mov r8, r8)
 8001b28:	e000      	b.n	8001b2c <ReadBatteryVoltage+0x90>
    if (status != HAL_OK) goto fail;
 8001b2a:	46c0      	nop			@ (mov r8, r8)

fail:
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_RESET);
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <ReadBatteryVoltage+0xa8>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2101      	movs	r1, #1
 8001b32:	0018      	movs	r0, r3
 8001b34:	f003 f8e5 	bl	8004d02 <HAL_GPIO_WritePin>
    return -1;  // ADC error indicator
 8001b38:	2301      	movs	r3, #1
 8001b3a:	425b      	negs	r3, r3
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b006      	add	sp, #24
 8001b42:	bdb0      	pop	{r4, r5, r7, pc}
 8001b44:	50000400 	.word	0x50000400
 8001b48:	200000bc 	.word	0x200000bc
 8001b4c:	00000fff 	.word	0x00000fff
 8001b50:	000019c8 	.word	0x000019c8

08001b54 <GetBatteryLevel>:

Battery_Status_t GetBatteryLevel(uint32_t *out_v, uint8_t *out_pct)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
    if (out_v == NULL || out_pct == NULL) {
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d002      	beq.n	8001b6a <GetBatteryLevel+0x16>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <GetBatteryLevel+0x1c>
        return BATTERY_ERROR;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	425b      	negs	r3, r3
 8001b6e:	e034      	b.n	8001bda <GetBatteryLevel+0x86>
    }

    int32_t v_mV = ReadBatteryVoltage();
 8001b70:	f7ff ff94 	bl	8001a9c <ReadBatteryVoltage>
 8001b74:	0003      	movs	r3, r0
 8001b76:	617b      	str	r3, [r7, #20]
    if (v_mV < 0) {
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	da02      	bge.n	8001b84 <GetBatteryLevel+0x30>
        return BATTERY_ADC_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	425b      	negs	r3, r3
 8001b82:	e02a      	b.n	8001bda <GetBatteryLevel+0x86>
    }

    *out_v = (uint32_t)v_mV;
 8001b84:	697a      	ldr	r2, [r7, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	601a      	str	r2, [r3, #0]

    if ((uint32_t)v_mV <= V_MIN_MV) {
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	4a15      	ldr	r2, [pc, #84]	@ (8001be4 <GetBatteryLevel+0x90>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d803      	bhi.n	8001b9a <GetBatteryLevel+0x46>
        *out_pct = 0;
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	701a      	strb	r2, [r3, #0]
 8001b98:	e01e      	b.n	8001bd8 <GetBatteryLevel+0x84>
    }
    else if ((uint32_t)v_mV >= V_MAX_MV) {
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	4a12      	ldr	r2, [pc, #72]	@ (8001be8 <GetBatteryLevel+0x94>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d903      	bls.n	8001baa <GetBatteryLevel+0x56>
        *out_pct = 100;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2264      	movs	r2, #100	@ 0x64
 8001ba6:	701a      	strb	r2, [r3, #0]
 8001ba8:	e016      	b.n	8001bd8 <GetBatteryLevel+0x84>
    }
    else {
        uint32_t range = V_MAX_MV - V_MIN_MV;
 8001baa:	2396      	movs	r3, #150	@ 0x96
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	613b      	str	r3, [r7, #16]
        // pct = ((v_mV - V_MIN_MV) / range) * 100
        // = ( (v_mV - V_MIN_MV)*100 + range/2 ) / range
        uint32_t numerator = (uint32_t)(v_mV - V_MIN_MV) * 100U + (range/2U);
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	2264      	movs	r2, #100	@ 0x64
 8001bb4:	435a      	muls	r2, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	085b      	lsrs	r3, r3, #1
 8001bba:	18d3      	adds	r3, r2, r3
 8001bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8001bec <GetBatteryLevel+0x98>)
 8001bbe:	4694      	mov	ip, r2
 8001bc0:	4463      	add	r3, ip
 8001bc2:	60fb      	str	r3, [r7, #12]
        uint32_t pct = numerator / range;
 8001bc4:	6939      	ldr	r1, [r7, #16]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7fe fab0 	bl	800012c <__udivsi3>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	60bb      	str	r3, [r7, #8]
        *out_pct = (uint8_t)pct;
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	701a      	strb	r2, [r3, #0]
    }

    return BATTERY_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	0018      	movs	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b006      	add	sp, #24
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	00000bb8 	.word	0x00000bb8
 8001be8:	00001067 	.word	0x00001067
 8001bec:	fffb6c20 	.word	0xfffb6c20

08001bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bf6:	f001 ff13 	bl	8003a20 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(6000);
 8001bfa:	4b4b      	ldr	r3, [pc, #300]	@ (8001d28 <main+0x138>)
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f001 ff7f 	bl	8003b00 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c02:	f000 f8a1 	bl	8001d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c06:	f000 fa6b 	bl	80020e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c0a:	f000 f997 	bl	8001f3c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001c0e:	f000 fa07 	bl	8002020 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001c12:	f000 fa3b 	bl	800208c <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8001c16:	f000 f9d1 	bl	8001fbc <MX_LPUART1_UART_Init>
  MX_ADC_Init();
 8001c1a:	f000 f90d 	bl	8001e38 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  
  // Initialize RTC with calibration and print calibration guide
  RTC_Print_Calibration_Guide();
 8001c1e:	f000 feed 	bl	80029fc <RTC_Print_Calibration_Guide>
  RTC_WakeUp_Init_Calibrated();
 8001c22:	f000 fd63 	bl	80026ec <RTC_WakeUp_Init_Calibrated>
  
  LoRaWAN_Join(&lora);
 8001c26:	4b41      	ldr	r3, [pc, #260]	@ (8001d2c <main+0x13c>)
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f7ff fcdf 	bl	80015ec <LoRaWAN_Join>
  LoRaWAN_UpdateBattery(&lora);
 8001c2e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d2c <main+0x13c>)
 8001c30:	0018      	movs	r0, r3
 8001c32:	f7ff fee5 	bl	8001a00 <LoRaWAN_UpdateBattery>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  enter_sleep_mode();
 8001c36:	f001 fc15 	bl	8003464 <enter_sleep_mode>
	  LoRaWAN_Error_t isConnected = LoRaWAN_Join_Status(&lora);
 8001c3a:	250f      	movs	r5, #15
 8001c3c:	197c      	adds	r4, r7, r5
 8001c3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d2c <main+0x13c>)
 8001c40:	0018      	movs	r0, r3
 8001c42:	f7ff fdcf 	bl	80017e4 <LoRaWAN_Join_Status>
 8001c46:	0003      	movs	r3, r0
 8001c48:	7023      	strb	r3, [r4, #0]
	        if (isConnected == LORAWAN_ERROR_OK)
 8001c4a:	197b      	adds	r3, r7, r5
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	b25b      	sxtb	r3, r3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d15f      	bne.n	8001d14 <main+0x124>
	        {
	        	UPLINK_COUNT++;
 8001c54:	4b36      	ldr	r3, [pc, #216]	@ (8001d30 <main+0x140>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	5e9b      	ldrsh	r3, [r3, r2]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	b21a      	sxth	r2, r3
 8001c62:	4b33      	ldr	r3, [pc, #204]	@ (8001d30 <main+0x140>)
 8001c64:	801a      	strh	r2, [r3, #0]
	        	if (UPLINK_COUNT > 4464)
 8001c66:	4b32      	ldr	r3, [pc, #200]	@ (8001d30 <main+0x140>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	5e9b      	ldrsh	r3, [r3, r2]
 8001c6c:	4a31      	ldr	r2, [pc, #196]	@ (8001d34 <main+0x144>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	dd06      	ble.n	8001c80 <main+0x90>
	        	{
	        		UPLINK_COUNT = 0;
 8001c72:	4b2f      	ldr	r3, [pc, #188]	@ (8001d30 <main+0x140>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	801a      	strh	r2, [r3, #0]
	        		LoRaWAN_UpdateBattery(&lora);
 8001c78:	4b2c      	ldr	r3, [pc, #176]	@ (8001d2c <main+0x13c>)
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f7ff fec0 	bl	8001a00 <LoRaWAN_UpdateBattery>
	        	}

	            I2C_Error_t i2c_result = sensor_init_and_read();
 8001c80:	250e      	movs	r5, #14
 8001c82:	197c      	adds	r4, r7, r5
 8001c84:	f000 ffa6 	bl	8002bd4 <sensor_init_and_read>
 8001c88:	0003      	movs	r3, r0
 8001c8a:	7023      	strb	r3, [r4, #0]
	            uint8_t payload[3];
	            if (i2c_result == I2C_ERROR_OK)
 8001c8c:	197b      	adds	r3, r7, r5
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d117      	bne.n	8001cc6 <main+0xd6>
	            {
	                payload[0] = (uint8_t)(calculated_temp >> 8);
 8001c96:	4b28      	ldr	r3, [pc, #160]	@ (8001d38 <main+0x148>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	0a1b      	lsrs	r3, r3, #8
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	2108      	movs	r1, #8
 8001ca2:	187b      	adds	r3, r7, r1
 8001ca4:	701a      	strb	r2, [r3, #0]
	                payload[1] = (uint8_t)(calculated_temp & 0xFF);
 8001ca6:	4b24      	ldr	r3, [pc, #144]	@ (8001d38 <main+0x148>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	705a      	strb	r2, [r3, #1]
	                payload[2] = calculated_hum;
 8001cb0:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <main+0x14c>)
 8001cb2:	781a      	ldrb	r2, [r3, #0]
 8001cb4:	187b      	adds	r3, r7, r1
 8001cb6:	709a      	strb	r2, [r3, #2]
	                LoRaWAN_SendHexOnPort(&lora, 1, payload, sizeof(payload));
 8001cb8:	187a      	adds	r2, r7, r1
 8001cba:	481c      	ldr	r0, [pc, #112]	@ (8001d2c <main+0x13c>)
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	f7ff fe2e 	bl	8001920 <LoRaWAN_SendHexOnPort>
 8001cc4:	e7b7      	b.n	8001c36 <main+0x46>
	            }
	            else if (i2c_result == I2C_ERROR_SENSORS_TOO_DIFFERENT)
 8001cc6:	230e      	movs	r3, #14
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b25b      	sxtb	r3, r3
 8001cce:	3304      	adds	r3, #4
 8001cd0:	d110      	bne.n	8001cf4 <main+0x104>
	            {
	          	  uint8_t payload[3];
	          	  payload[0] = (uint8_t)(temp_delta >> 8);
 8001cd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d40 <main+0x150>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	121b      	asrs	r3, r3, #8
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	701a      	strb	r2, [r3, #0]
	          	  payload[1] = (uint8_t)(temp_delta & 0xFF);
 8001cde:	4b18      	ldr	r3, [pc, #96]	@ (8001d40 <main+0x150>)
 8001ce0:	781a      	ldrb	r2, [r3, #0]
 8001ce2:	1d3b      	adds	r3, r7, #4
 8001ce4:	705a      	strb	r2, [r3, #1]
	          	  LoRaWAN_SendHexOnPort(&lora, 6, payload, sizeof(payload));
 8001ce6:	1d3a      	adds	r2, r7, #4
 8001ce8:	4810      	ldr	r0, [pc, #64]	@ (8001d2c <main+0x13c>)
 8001cea:	2303      	movs	r3, #3
 8001cec:	2106      	movs	r1, #6
 8001cee:	f7ff fe17 	bl	8001920 <LoRaWAN_SendHexOnPort>
 8001cf2:	e7a0      	b.n	8001c36 <main+0x46>
	            }
	            else
	            {
	                uint8_t payload[3];
	                payload[0] = 255;
 8001cf4:	003b      	movs	r3, r7
 8001cf6:	22ff      	movs	r2, #255	@ 0xff
 8001cf8:	701a      	strb	r2, [r3, #0]
	                payload[1] = 255;
 8001cfa:	003b      	movs	r3, r7
 8001cfc:	22ff      	movs	r2, #255	@ 0xff
 8001cfe:	705a      	strb	r2, [r3, #1]
	                payload[2] = 255;
 8001d00:	003b      	movs	r3, r7
 8001d02:	22ff      	movs	r2, #255	@ 0xff
 8001d04:	709a      	strb	r2, [r3, #2]
	                LoRaWAN_SendHexOnPort(&lora, 6, payload, sizeof(payload));
 8001d06:	003a      	movs	r2, r7
 8001d08:	4808      	ldr	r0, [pc, #32]	@ (8001d2c <main+0x13c>)
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	2106      	movs	r1, #6
 8001d0e:	f7ff fe07 	bl	8001920 <LoRaWAN_SendHexOnPort>
 8001d12:	e790      	b.n	8001c36 <main+0x46>
	            }
	        }
	        else
	        {
	            ConsolePrintf("I am not joined, trying to join again...\r\n");
 8001d14:	4b0b      	ldr	r3, [pc, #44]	@ (8001d44 <main+0x154>)
 8001d16:	0018      	movs	r0, r3
 8001d18:	f000 fa66 	bl	80021e8 <ConsolePrintf>
	            LoRaWAN_Join(&lora);
 8001d1c:	4b03      	ldr	r3, [pc, #12]	@ (8001d2c <main+0x13c>)
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7ff fc64 	bl	80015ec <LoRaWAN_Join>
  {
 8001d24:	e787      	b.n	8001c36 <main+0x46>
 8001d26:	46c0      	nop			@ (mov r8, r8)
 8001d28:	00001770 	.word	0x00001770
 8001d2c:	200002a0 	.word	0x200002a0
 8001d30:	200002a4 	.word	0x200002a4
 8001d34:	00001170 	.word	0x00001170
 8001d38:	200002ba 	.word	0x200002ba
 8001d3c:	200002bc 	.word	0x200002bc
 8001d40:	200002bd 	.word	0x200002bd
 8001d44:	080090b8 	.word	0x080090b8

08001d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d48:	b590      	push	{r4, r7, lr}
 8001d4a:	b09f      	sub	sp, #124	@ 0x7c
 8001d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4e:	2440      	movs	r4, #64	@ 0x40
 8001d50:	193b      	adds	r3, r7, r4
 8001d52:	0018      	movs	r0, r3
 8001d54:	2338      	movs	r3, #56	@ 0x38
 8001d56:	001a      	movs	r2, r3
 8001d58:	2100      	movs	r1, #0
 8001d5a:	f006 fc81 	bl	8008660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d5e:	232c      	movs	r3, #44	@ 0x2c
 8001d60:	18fb      	adds	r3, r7, r3
 8001d62:	0018      	movs	r0, r3
 8001d64:	2314      	movs	r3, #20
 8001d66:	001a      	movs	r2, r3
 8001d68:	2100      	movs	r1, #0
 8001d6a:	f006 fc79 	bl	8008660 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	0018      	movs	r0, r3
 8001d72:	2328      	movs	r3, #40	@ 0x28
 8001d74:	001a      	movs	r2, r3
 8001d76:	2100      	movs	r1, #0
 8001d78:	f006 fc72 	bl	8008660 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e30 <SystemClock_Config+0xe8>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a2c      	ldr	r2, [pc, #176]	@ (8001e34 <SystemClock_Config+0xec>)
 8001d82:	401a      	ands	r2, r3
 8001d84:	4b2a      	ldr	r3, [pc, #168]	@ (8001e30 <SystemClock_Config+0xe8>)
 8001d86:	2180      	movs	r1, #128	@ 0x80
 8001d88:	0109      	lsls	r1, r1, #4
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  * Using MSI at higher range for balance of power efficiency and timing accuracy
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8001d8e:	0021      	movs	r1, r4
 8001d90:	187b      	adds	r3, r7, r1
 8001d92:	2218      	movs	r2, #24
 8001d94:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d96:	187b      	adds	r3, r7, r1
 8001d98:	2201      	movs	r2, #1
 8001d9a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001d9c:	187b      	adds	r3, r7, r1
 8001d9e:	2201      	movs	r2, #1
 8001da0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001da2:	187b      	adds	r3, r7, r1
 8001da4:	2200      	movs	r2, #0
 8001da6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;  // 4.194 MHz for better timing than default
 8001da8:	187b      	adds	r3, r7, r1
 8001daa:	22c0      	movs	r2, #192	@ 0xc0
 8001dac:	0212      	lsls	r2, r2, #8
 8001dae:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001db0:	187b      	adds	r3, r7, r1
 8001db2:	2200      	movs	r2, #0
 8001db4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db6:	187b      	adds	r3, r7, r1
 8001db8:	0018      	movs	r0, r3
 8001dba:	f003 ffff 	bl	8005dbc <HAL_RCC_OscConfig>
 8001dbe:	1e03      	subs	r3, r0, #0
 8001dc0:	d001      	beq.n	8001dc6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001dc2:	f000 fa87 	bl	80022d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  * Using MSI at 4.194 MHz for balance of power efficiency and timing accuracy
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc6:	212c      	movs	r1, #44	@ 0x2c
 8001dc8:	187b      	adds	r3, r7, r1
 8001dca:	220f      	movs	r2, #15
 8001dcc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;  // Use MSI for low power
 8001dce:	187b      	adds	r3, r7, r1
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd4:	187b      	adds	r3, r7, r1
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dda:	187b      	adds	r3, r7, r1
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001de0:	187b      	adds	r3, r7, r1
 8001de2:	2200      	movs	r2, #0
 8001de4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)  // No wait state for <8 MHz
 8001de6:	187b      	adds	r3, r7, r1
 8001de8:	2100      	movs	r1, #0
 8001dea:	0018      	movs	r0, r3
 8001dec:	f004 fbba 	bl	8006564 <HAL_RCC_ClockConfig>
 8001df0:	1e03      	subs	r3, r0, #0
 8001df2:	d001      	beq.n	8001df8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001df4:	f000 fa6e 	bl	80022d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	222d      	movs	r2, #45	@ 0x2d
 8001dfc:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001dfe:	1d3b      	adds	r3, r7, #4
 8001e00:	2200      	movs	r2, #0
 8001e02:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	2200      	movs	r2, #0
 8001e08:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	2280      	movs	r2, #128	@ 0x80
 8001e14:	0292      	lsls	r2, r2, #10
 8001e16:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f004 fda6 	bl	800696c <HAL_RCCEx_PeriphCLKConfig>
 8001e20:	1e03      	subs	r3, r0, #0
 8001e22:	d001      	beq.n	8001e28 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001e24:	f000 fa56 	bl	80022d4 <Error_Handler>
  }
}
 8001e28:	46c0      	nop			@ (mov r8, r8)
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b01f      	add	sp, #124	@ 0x7c
 8001e2e:	bd90      	pop	{r4, r7, pc}
 8001e30:	40007000 	.word	0x40007000
 8001e34:	ffffe7ff 	.word	0xffffe7ff

08001e38 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e3e:	003b      	movs	r3, r7
 8001e40:	0018      	movs	r0, r3
 8001e42:	2308      	movs	r3, #8
 8001e44:	001a      	movs	r2, r3
 8001e46:	2100      	movs	r1, #0
 8001e48:	f006 fc0a 	bl	8008660 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001e4c:	4b37      	ldr	r3, [pc, #220]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001e4e:	4a38      	ldr	r2, [pc, #224]	@ (8001f30 <MX_ADC_Init+0xf8>)
 8001e50:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8001e52:	4b36      	ldr	r3, [pc, #216]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001e58:	4b34      	ldr	r3, [pc, #208]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001e5a:	22c0      	movs	r2, #192	@ 0xc0
 8001e5c:	0612      	lsls	r2, r2, #24
 8001e5e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001e60:	4b32      	ldr	r3, [pc, #200]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8001e66:	4b31      	ldr	r3, [pc, #196]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001e68:	2207      	movs	r2, #7
 8001e6a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e72:	4b2e      	ldr	r3, [pc, #184]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001e78:	4b2c      	ldr	r3, [pc, #176]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001e80:	4b2a      	ldr	r3, [pc, #168]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001e82:	2221      	movs	r2, #33	@ 0x21
 8001e84:	2100      	movs	r1, #0
 8001e86:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e88:	4b28      	ldr	r3, [pc, #160]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e8e:	4b27      	ldr	r3, [pc, #156]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001e90:	22c2      	movs	r2, #194	@ 0xc2
 8001e92:	32ff      	adds	r2, #255	@ 0xff
 8001e94:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001e96:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001e98:	222c      	movs	r2, #44	@ 0x2c
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e9e:	4b23      	ldr	r3, [pc, #140]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ea4:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001eaa:	4b20      	ldr	r3, [pc, #128]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f001 fe7c 	bl	8003bbc <HAL_ADC_Init>
 8001ec4:	1e03      	subs	r3, r0, #0
 8001ec6:	d001      	beq.n	8001ecc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8001ec8:	f000 fa04 	bl	80022d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ecc:	003b      	movs	r3, r7
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001ed2:	003b      	movs	r3, r7
 8001ed4:	2280      	movs	r2, #128	@ 0x80
 8001ed6:	0152      	lsls	r2, r2, #5
 8001ed8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001eda:	003a      	movs	r2, r7
 8001edc:	4b13      	ldr	r3, [pc, #76]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001ede:	0011      	movs	r1, r2
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f002 f9b7 	bl	8004254 <HAL_ADC_ConfigChannel>
 8001ee6:	1e03      	subs	r3, r0, #0
 8001ee8:	d001      	beq.n	8001eee <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8001eea:	f000 f9f3 	bl	80022d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001eee:	003b      	movs	r3, r7
 8001ef0:	4a10      	ldr	r2, [pc, #64]	@ (8001f34 <MX_ADC_Init+0xfc>)
 8001ef2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ef4:	003a      	movs	r2, r7
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001ef8:	0011      	movs	r1, r2
 8001efa:	0018      	movs	r0, r3
 8001efc:	f002 f9aa 	bl	8004254 <HAL_ADC_ConfigChannel>
 8001f00:	1e03      	subs	r3, r0, #0
 8001f02:	d001      	beq.n	8001f08 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8001f04:	f000 f9e6 	bl	80022d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001f08:	003b      	movs	r3, r7
 8001f0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f38 <MX_ADC_Init+0x100>)
 8001f0c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001f0e:	003a      	movs	r2, r7
 8001f10:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <MX_ADC_Init+0xf4>)
 8001f12:	0011      	movs	r1, r2
 8001f14:	0018      	movs	r0, r3
 8001f16:	f002 f99d 	bl	8004254 <HAL_ADC_ConfigChannel>
 8001f1a:	1e03      	subs	r3, r0, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8001f1e:	f000 f9d9 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001f22:	46c0      	nop			@ (mov r8, r8)
 8001f24:	46bd      	mov	sp, r7
 8001f26:	b002      	add	sp, #8
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	200000bc 	.word	0x200000bc
 8001f30:	40012400 	.word	0x40012400
 8001f34:	48040000 	.word	0x48040000
 8001f38:	44020000 	.word	0x44020000

08001f3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f40:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb4 <MX_I2C1_Init+0x78>)
 8001f42:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb8 <MX_I2C1_Init+0x7c>)
 8001f44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8001f46:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <MX_I2C1_Init+0x78>)
 8001f48:	22c1      	movs	r2, #193	@ 0xc1
 8001f4a:	00d2      	lsls	r2, r2, #3
 8001f4c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f4e:	4b19      	ldr	r3, [pc, #100]	@ (8001fb4 <MX_I2C1_Init+0x78>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f54:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <MX_I2C1_Init+0x78>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f5a:	4b16      	ldr	r3, [pc, #88]	@ (8001fb4 <MX_I2C1_Init+0x78>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f60:	4b14      	ldr	r3, [pc, #80]	@ (8001fb4 <MX_I2C1_Init+0x78>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f66:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <MX_I2C1_Init+0x78>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f6c:	4b11      	ldr	r3, [pc, #68]	@ (8001fb4 <MX_I2C1_Init+0x78>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <MX_I2C1_Init+0x78>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f78:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb4 <MX_I2C1_Init+0x78>)
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f002 fede 	bl	8004d3c <HAL_I2C_Init>
 8001f80:	1e03      	subs	r3, r0, #0
 8001f82:	d001      	beq.n	8001f88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f84:	f000 f9a6 	bl	80022d4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f88:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb4 <MX_I2C1_Init+0x78>)
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f003 fdad 	bl	8005aec <HAL_I2CEx_ConfigAnalogFilter>
 8001f92:	1e03      	subs	r3, r0, #0
 8001f94:	d001      	beq.n	8001f9a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001f96:	f000 f99d 	bl	80022d4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <MX_I2C1_Init+0x78>)
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f003 fdf0 	bl	8005b84 <HAL_I2CEx_ConfigDigitalFilter>
 8001fa4:	1e03      	subs	r3, r0, #0
 8001fa6:	d001      	beq.n	8001fac <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001fa8:	f000 f994 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fac:	46c0      	nop			@ (mov r8, r8)
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	46c0      	nop			@ (mov r8, r8)
 8001fb4:	20000118 	.word	0x20000118
 8001fb8:	40005400 	.word	0x40005400

08001fbc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	@ (8002014 <MX_LPUART1_UART_Init+0x58>)
 8001fc2:	4a15      	ldr	r2, [pc, #84]	@ (8002018 <MX_LPUART1_UART_Init+0x5c>)
 8001fc4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	@ (8002014 <MX_LPUART1_UART_Init+0x58>)
 8001fc8:	22e1      	movs	r2, #225	@ 0xe1
 8001fca:	0252      	lsls	r2, r2, #9
 8001fcc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fce:	4b11      	ldr	r3, [pc, #68]	@ (8002014 <MX_LPUART1_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <MX_LPUART1_UART_Init+0x58>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <MX_LPUART1_UART_Init+0x58>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <MX_LPUART1_UART_Init+0x58>)
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <MX_LPUART1_UART_Init+0x58>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fec:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <MX_LPUART1_UART_Init+0x58>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <MX_LPUART1_UART_Init+0x58>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001ff8:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <MX_LPUART1_UART_Init+0x58>)
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f005 fa24 	bl	8007448 <HAL_UART_Init>
 8002000:	1e03      	subs	r3, r0, #0
 8002002:	d001      	beq.n	8002008 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002004:	f000 f966 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  lora.huart = &hlpuart1;
 8002008:	4b04      	ldr	r3, [pc, #16]	@ (800201c <MX_LPUART1_UART_Init+0x60>)
 800200a:	4a02      	ldr	r2, [pc, #8]	@ (8002014 <MX_LPUART1_UART_Init+0x58>)
 800200c:	601a      	str	r2, [r3, #0]
  /* USER CODE END LPUART1_Init 2 */

}
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	2000016c 	.word	0x2000016c
 8002018:	40004800 	.word	0x40004800
 800201c:	200002a0 	.word	0x200002a0

08002020 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002024:	4b16      	ldr	r3, [pc, #88]	@ (8002080 <MX_USART1_UART_Init+0x60>)
 8002026:	4a17      	ldr	r2, [pc, #92]	@ (8002084 <MX_USART1_UART_Init+0x64>)
 8002028:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800202a:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <MX_USART1_UART_Init+0x60>)
 800202c:	22e1      	movs	r2, #225	@ 0xe1
 800202e:	0252      	lsls	r2, r2, #9
 8002030:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002032:	4b13      	ldr	r3, [pc, #76]	@ (8002080 <MX_USART1_UART_Init+0x60>)
 8002034:	2200      	movs	r2, #0
 8002036:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002038:	4b11      	ldr	r3, [pc, #68]	@ (8002080 <MX_USART1_UART_Init+0x60>)
 800203a:	2200      	movs	r2, #0
 800203c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <MX_USART1_UART_Init+0x60>)
 8002040:	2200      	movs	r2, #0
 8002042:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002044:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <MX_USART1_UART_Init+0x60>)
 8002046:	220c      	movs	r2, #12
 8002048:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800204a:	4b0d      	ldr	r3, [pc, #52]	@ (8002080 <MX_USART1_UART_Init+0x60>)
 800204c:	2200      	movs	r2, #0
 800204e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002050:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <MX_USART1_UART_Init+0x60>)
 8002052:	2200      	movs	r2, #0
 8002054:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002056:	4b0a      	ldr	r3, [pc, #40]	@ (8002080 <MX_USART1_UART_Init+0x60>)
 8002058:	2200      	movs	r2, #0
 800205a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800205c:	4b08      	ldr	r3, [pc, #32]	@ (8002080 <MX_USART1_UART_Init+0x60>)
 800205e:	2200      	movs	r2, #0
 8002060:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002062:	4b07      	ldr	r3, [pc, #28]	@ (8002080 <MX_USART1_UART_Init+0x60>)
 8002064:	0018      	movs	r0, r3
 8002066:	f005 f9ef 	bl	8007448 <HAL_UART_Init>
 800206a:	1e03      	subs	r3, r0, #0
 800206c:	d001      	beq.n	8002072 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800206e:	f000 f931 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  ConsolePrintf("USART1 (DBG) Cnfigured\r\n");
 8002072:	4b05      	ldr	r3, [pc, #20]	@ (8002088 <MX_USART1_UART_Init+0x68>)
 8002074:	0018      	movs	r0, r3
 8002076:	f000 f8b7 	bl	80021e8 <ConsolePrintf>
  /* USER CODE END USART1_Init 2 */

}
 800207a:	46c0      	nop			@ (mov r8, r8)
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	200001f4 	.word	0x200001f4
 8002084:	40013800 	.word	0x40013800
 8002088:	080090e4 	.word	0x080090e4

0800208c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002090:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <MX_RTC_Init+0x4c>)
 8002092:	4a12      	ldr	r2, [pc, #72]	@ (80020dc <MX_RTC_Init+0x50>)
 8002094:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002096:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <MX_RTC_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800209c:	4b0e      	ldr	r3, [pc, #56]	@ (80020d8 <MX_RTC_Init+0x4c>)
 800209e:	227f      	movs	r2, #127	@ 0x7f
 80020a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <MX_RTC_Init+0x4c>)
 80020a4:	22ff      	movs	r2, #255	@ 0xff
 80020a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020a8:	4b0b      	ldr	r3, [pc, #44]	@ (80020d8 <MX_RTC_Init+0x4c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80020ae:	4b0a      	ldr	r3, [pc, #40]	@ (80020d8 <MX_RTC_Init+0x4c>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020b4:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <MX_RTC_Init+0x4c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020ba:	4b07      	ldr	r3, [pc, #28]	@ (80020d8 <MX_RTC_Init+0x4c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020c0:	4b05      	ldr	r3, [pc, #20]	@ (80020d8 <MX_RTC_Init+0x4c>)
 80020c2:	0018      	movs	r0, r3
 80020c4:	f004 fdf0 	bl	8006ca8 <HAL_RTC_Init>
 80020c8:	1e03      	subs	r3, r0, #0
 80020ca:	d001      	beq.n	80020d0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80020cc:	f000 f902 	bl	80022d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80020d0:	46c0      	nop			@ (mov r8, r8)
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			@ (mov r8, r8)
 80020d8:	2000027c 	.word	0x2000027c
 80020dc:	40002800 	.word	0x40002800

080020e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b089      	sub	sp, #36	@ 0x24
 80020e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e6:	240c      	movs	r4, #12
 80020e8:	193b      	adds	r3, r7, r4
 80020ea:	0018      	movs	r0, r3
 80020ec:	2314      	movs	r3, #20
 80020ee:	001a      	movs	r2, r3
 80020f0:	2100      	movs	r1, #0
 80020f2:	f006 fab5 	bl	8008660 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f6:	4b25      	ldr	r3, [pc, #148]	@ (800218c <MX_GPIO_Init+0xac>)
 80020f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020fa:	4b24      	ldr	r3, [pc, #144]	@ (800218c <MX_GPIO_Init+0xac>)
 80020fc:	2101      	movs	r1, #1
 80020fe:	430a      	orrs	r2, r1
 8002100:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002102:	4b22      	ldr	r3, [pc, #136]	@ (800218c <MX_GPIO_Init+0xac>)
 8002104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002106:	2201      	movs	r2, #1
 8002108:	4013      	ands	r3, r2
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	4b1f      	ldr	r3, [pc, #124]	@ (800218c <MX_GPIO_Init+0xac>)
 8002110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002112:	4b1e      	ldr	r3, [pc, #120]	@ (800218c <MX_GPIO_Init+0xac>)
 8002114:	2102      	movs	r1, #2
 8002116:	430a      	orrs	r2, r1
 8002118:	62da      	str	r2, [r3, #44]	@ 0x2c
 800211a:	4b1c      	ldr	r3, [pc, #112]	@ (800218c <MX_GPIO_Init+0xac>)
 800211c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800211e:	2202      	movs	r2, #2
 8002120:	4013      	ands	r3, r2
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_SET);
 8002126:	4b1a      	ldr	r3, [pc, #104]	@ (8002190 <MX_GPIO_Init+0xb0>)
 8002128:	2201      	movs	r2, #1
 800212a:	2101      	movs	r1, #1
 800212c:	0018      	movs	r0, r3
 800212e:	f002 fde8 	bl	8004d02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8002132:	4b17      	ldr	r3, [pc, #92]	@ (8002190 <MX_GPIO_Init+0xb0>)
 8002134:	2200      	movs	r2, #0
 8002136:	2120      	movs	r1, #32
 8002138:	0018      	movs	r0, r3
 800213a:	f002 fde2 	bl	8004d02 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VBAT_MEAS_EN_Pin I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin;
 800213e:	193b      	adds	r3, r7, r4
 8002140:	2221      	movs	r2, #33	@ 0x21
 8002142:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002144:	193b      	adds	r3, r7, r4
 8002146:	2201      	movs	r2, #1
 8002148:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	193b      	adds	r3, r7, r4
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002150:	193b      	adds	r3, r7, r4
 8002152:	2200      	movs	r2, #0
 8002154:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	193b      	adds	r3, r7, r4
 8002158:	4a0d      	ldr	r2, [pc, #52]	@ (8002190 <MX_GPIO_Init+0xb0>)
 800215a:	0019      	movs	r1, r3
 800215c:	0010      	movs	r0, r2
 800215e:	f002 fb53 	bl	8004808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002162:	0021      	movs	r1, r4
 8002164:	187b      	adds	r3, r7, r1
 8002166:	2202      	movs	r2, #2
 8002168:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216a:	187b      	adds	r3, r7, r1
 800216c:	2203      	movs	r2, #3
 800216e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	187b      	adds	r3, r7, r1
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002176:	187b      	adds	r3, r7, r1
 8002178:	4a05      	ldr	r2, [pc, #20]	@ (8002190 <MX_GPIO_Init+0xb0>)
 800217a:	0019      	movs	r1, r3
 800217c:	0010      	movs	r0, r2
 800217e:	f002 fb43 	bl	8004808 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002182:	46c0      	nop			@ (mov r8, r8)
 8002184:	46bd      	mov	sp, r7
 8002186:	b009      	add	sp, #36	@ 0x24
 8002188:	bd90      	pop	{r4, r7, pc}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	40021000 	.word	0x40021000
 8002190:	50000400 	.word	0x50000400

08002194 <SystemClock_Config_Wrapper>:

/* USER CODE BEGIN 4 */
// Wrapper functions for sleep module to access static initialization functions
void SystemClock_Config_Wrapper(void) {
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
    SystemClock_Config();
 8002198:	f7ff fdd6 	bl	8001d48 <SystemClock_Config>
}
 800219c:	46c0      	nop			@ (mov r8, r8)
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <MX_GPIO_Init_Wrapper>:

void MX_GPIO_Init_Wrapper(void) {
 80021a2:	b580      	push	{r7, lr}
 80021a4:	af00      	add	r7, sp, #0
    MX_GPIO_Init();
 80021a6:	f7ff ff9b 	bl	80020e0 <MX_GPIO_Init>
}
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <MX_I2C1_Init_Wrapper>:

void MX_I2C1_Init_Wrapper(void) {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
    MX_I2C1_Init();
 80021b4:	f7ff fec2 	bl	8001f3c <MX_I2C1_Init>
}
 80021b8:	46c0      	nop			@ (mov r8, r8)
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <MX_USART1_UART_Init_Wrapper>:

void MX_USART1_UART_Init_Wrapper(void) {
 80021be:	b580      	push	{r7, lr}
 80021c0:	af00      	add	r7, sp, #0
    MX_USART1_UART_Init();
 80021c2:	f7ff ff2d 	bl	8002020 <MX_USART1_UART_Init>
}
 80021c6:	46c0      	nop			@ (mov r8, r8)
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <MX_LPUART1_UART_Init_Wrapper>:

void MX_LPUART1_UART_Init_Wrapper(void) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
    MX_LPUART1_UART_Init();
 80021d0:	f7ff fef4 	bl	8001fbc <MX_LPUART1_UART_Init>
}
 80021d4:	46c0      	nop			@ (mov r8, r8)
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <MX_ADC_Init_Wrapper>:

void MX_ADC_Init_Wrapper(void) {
 80021da:	b580      	push	{r7, lr}
 80021dc:	af00      	add	r7, sp, #0
    MX_ADC_Init();
 80021de:	f7ff fe2b 	bl	8001e38 <MX_ADC_Init>
}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <ConsolePrintf>:

void ConsolePrintf(const char *format, ...)
{
 80021e8:	b40f      	push	{r0, r1, r2, r3}
 80021ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ec:	b0df      	sub	sp, #380	@ 0x17c
 80021ee:	af06      	add	r7, sp, #24
  char final_buffer[160];    // Combined buffer (timestamp + message)

  // Get time and date from RTC
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80021f0:	2308      	movs	r3, #8
 80021f2:	18f9      	adds	r1, r7, r3
 80021f4:	4b31      	ldr	r3, [pc, #196]	@ (80022bc <ConsolePrintf+0xd4>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	0018      	movs	r0, r3
 80021fa:	f004 fdf1 	bl	8006de0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 80021fe:	231c      	movs	r3, #28
 8002200:	18f9      	adds	r1, r7, r3
 8002202:	4b2e      	ldr	r3, [pc, #184]	@ (80022bc <ConsolePrintf+0xd4>)
 8002204:	2200      	movs	r2, #0
 8002206:	0018      	movs	r0, r3
 8002208:	f004 fe48 	bl	8006e9c <HAL_RTC_GetDate>

  // Format timestamp as [YYYY-MM-DD HH:MM:SS]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
           date.Year, date.Month, date.Date,
 800220c:	4b2c      	ldr	r3, [pc, #176]	@ (80022c0 <ConsolePrintf+0xd8>)
 800220e:	22b0      	movs	r2, #176	@ 0xb0
 8002210:	0052      	lsls	r2, r2, #1
 8002212:	189b      	adds	r3, r3, r2
 8002214:	19db      	adds	r3, r3, r7
 8002216:	78db      	ldrb	r3, [r3, #3]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8002218:	469c      	mov	ip, r3
           date.Year, date.Month, date.Date,
 800221a:	4b29      	ldr	r3, [pc, #164]	@ (80022c0 <ConsolePrintf+0xd8>)
 800221c:	189b      	adds	r3, r3, r2
 800221e:	19db      	adds	r3, r3, r7
 8002220:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8002222:	0019      	movs	r1, r3
           date.Year, date.Month, date.Date,
 8002224:	4b26      	ldr	r3, [pc, #152]	@ (80022c0 <ConsolePrintf+0xd8>)
 8002226:	189b      	adds	r3, r3, r2
 8002228:	19db      	adds	r3, r3, r7
 800222a:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 800222c:	001c      	movs	r4, r3
           time.Hours, time.Minutes, time.Seconds);
 800222e:	4b25      	ldr	r3, [pc, #148]	@ (80022c4 <ConsolePrintf+0xdc>)
 8002230:	189b      	adds	r3, r3, r2
 8002232:	19db      	adds	r3, r3, r7
 8002234:	781b      	ldrb	r3, [r3, #0]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8002236:	001d      	movs	r5, r3
           time.Hours, time.Minutes, time.Seconds);
 8002238:	4b22      	ldr	r3, [pc, #136]	@ (80022c4 <ConsolePrintf+0xdc>)
 800223a:	189b      	adds	r3, r3, r2
 800223c:	19db      	adds	r3, r3, r7
 800223e:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8002240:	001e      	movs	r6, r3
           time.Hours, time.Minutes, time.Seconds);
 8002242:	4b20      	ldr	r3, [pc, #128]	@ (80022c4 <ConsolePrintf+0xdc>)
 8002244:	189b      	adds	r3, r3, r2
 8002246:	19db      	adds	r3, r3, r7
 8002248:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 800224a:	4a1f      	ldr	r2, [pc, #124]	@ (80022c8 <ConsolePrintf+0xe0>)
 800224c:	20c0      	movs	r0, #192	@ 0xc0
 800224e:	1838      	adds	r0, r7, r0
 8002250:	9304      	str	r3, [sp, #16]
 8002252:	9603      	str	r6, [sp, #12]
 8002254:	9502      	str	r5, [sp, #8]
 8002256:	9401      	str	r4, [sp, #4]
 8002258:	9100      	str	r1, [sp, #0]
 800225a:	4663      	mov	r3, ip
 800225c:	2120      	movs	r1, #32
 800225e:	f006 f98f 	bl	8008580 <sniprintf>

  // Format the original message
  va_list args;
  va_start(args, format);
 8002262:	23be      	movs	r3, #190	@ 0xbe
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	18fb      	adds	r3, r7, r3
 8002268:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), format, args);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	22bc      	movs	r2, #188	@ 0xbc
 800226e:	0052      	lsls	r2, r2, #1
 8002270:	18ba      	adds	r2, r7, r2
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	25e0      	movs	r5, #224	@ 0xe0
 8002276:	1978      	adds	r0, r7, r5
 8002278:	2180      	movs	r1, #128	@ 0x80
 800227a:	f006 f9e5 	bl	8008648 <vsniprintf>
  va_end(args);

  // Combine timestamp and message
  snprintf(final_buffer, sizeof(final_buffer), "%s%s", timestamp_buffer, buffer);
 800227e:	20c0      	movs	r0, #192	@ 0xc0
 8002280:	1839      	adds	r1, r7, r0
 8002282:	4a12      	ldr	r2, [pc, #72]	@ (80022cc <ConsolePrintf+0xe4>)
 8002284:	2420      	movs	r4, #32
 8002286:	1938      	adds	r0, r7, r4
 8002288:	197b      	adds	r3, r7, r5
 800228a:	9300      	str	r3, [sp, #0]
 800228c:	000b      	movs	r3, r1
 800228e:	21a0      	movs	r1, #160	@ 0xa0
 8002290:	f006 f976 	bl	8008580 <sniprintf>

  // Transmit the combined message
  HAL_UART_Transmit(&huart1, (uint8_t *)final_buffer, strlen(final_buffer), HAL_MAX_DELAY);
 8002294:	193b      	adds	r3, r7, r4
 8002296:	0018      	movs	r0, r3
 8002298:	f7fd ff36 	bl	8000108 <strlen>
 800229c:	0003      	movs	r3, r0
 800229e:	b29a      	uxth	r2, r3
 80022a0:	2301      	movs	r3, #1
 80022a2:	425b      	negs	r3, r3
 80022a4:	1939      	adds	r1, r7, r4
 80022a6:	480a      	ldr	r0, [pc, #40]	@ (80022d0 <ConsolePrintf+0xe8>)
 80022a8:	f005 f960 	bl	800756c <HAL_UART_Transmit>
}
 80022ac:	46c0      	nop			@ (mov r8, r8)
 80022ae:	46bd      	mov	sp, r7
 80022b0:	b059      	add	sp, #356	@ 0x164
 80022b2:	bcf0      	pop	{r4, r5, r6, r7}
 80022b4:	bc08      	pop	{r3}
 80022b6:	b004      	add	sp, #16
 80022b8:	4718      	bx	r3
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	2000027c 	.word	0x2000027c
 80022c0:	fffffebc 	.word	0xfffffebc
 80022c4:	fffffea8 	.word	0xfffffea8
 80022c8:	08009100 	.word	0x08009100
 80022cc:	08009124 	.word	0x08009124
 80022d0:	200001f4 	.word	0x200001f4

080022d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022d8:	b672      	cpsid	i
}
 80022da:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022dc:	46c0      	nop			@ (mov r8, r8)
 80022de:	e7fd      	b.n	80022dc <Error_Handler+0x8>

080022e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e4:	4b09      	ldr	r3, [pc, #36]	@ (800230c <HAL_MspInit+0x2c>)
 80022e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022e8:	4b08      	ldr	r3, [pc, #32]	@ (800230c <HAL_MspInit+0x2c>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	430a      	orrs	r2, r1
 80022ee:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f0:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_MspInit+0x2c>)
 80022f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80022f4:	4b05      	ldr	r3, [pc, #20]	@ (800230c <HAL_MspInit+0x2c>)
 80022f6:	2180      	movs	r1, #128	@ 0x80
 80022f8:	0549      	lsls	r1, r1, #21
 80022fa:	430a      	orrs	r2, r1
 80022fc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/

  /** Select which pad is connected to VREFINT_ADC
  */
  HAL_SYSCFG_VREFINT_OutputSelect(SYSCFG_VREFINT_OUT_PB1);
 80022fe:	2020      	movs	r0, #32
 8002300:	f001 fc46 	bl	8003b90 <HAL_SYSCFG_VREFINT_OutputSelect>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002304:	46c0      	nop			@ (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	40021000 	.word	0x40021000

08002310 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002310:	b590      	push	{r4, r7, lr}
 8002312:	b089      	sub	sp, #36	@ 0x24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	240c      	movs	r4, #12
 800231a:	193b      	adds	r3, r7, r4
 800231c:	0018      	movs	r0, r3
 800231e:	2314      	movs	r3, #20
 8002320:	001a      	movs	r2, r3
 8002322:	2100      	movs	r1, #0
 8002324:	f006 f99c 	bl	8008660 <memset>
  if(hadc->Instance==ADC1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a14      	ldr	r2, [pc, #80]	@ (8002380 <HAL_ADC_MspInit+0x70>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d122      	bne.n	8002378 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002332:	4b14      	ldr	r3, [pc, #80]	@ (8002384 <HAL_ADC_MspInit+0x74>)
 8002334:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002336:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <HAL_ADC_MspInit+0x74>)
 8002338:	2180      	movs	r1, #128	@ 0x80
 800233a:	0089      	lsls	r1, r1, #2
 800233c:	430a      	orrs	r2, r1
 800233e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002340:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <HAL_ADC_MspInit+0x74>)
 8002342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002344:	4b0f      	ldr	r3, [pc, #60]	@ (8002384 <HAL_ADC_MspInit+0x74>)
 8002346:	2101      	movs	r1, #1
 8002348:	430a      	orrs	r2, r1
 800234a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800234c:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <HAL_ADC_MspInit+0x74>)
 800234e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002350:	2201      	movs	r2, #1
 8002352:	4013      	ands	r3, r2
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = VBAT_MEAS_Pin;
 8002358:	193b      	adds	r3, r7, r4
 800235a:	2201      	movs	r2, #1
 800235c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800235e:	193b      	adds	r3, r7, r4
 8002360:	2203      	movs	r2, #3
 8002362:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	193b      	adds	r3, r7, r4
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBAT_MEAS_GPIO_Port, &GPIO_InitStruct);
 800236a:	193a      	adds	r2, r7, r4
 800236c:	23a0      	movs	r3, #160	@ 0xa0
 800236e:	05db      	lsls	r3, r3, #23
 8002370:	0011      	movs	r1, r2
 8002372:	0018      	movs	r0, r3
 8002374:	f002 fa48 	bl	8004808 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002378:	46c0      	nop			@ (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b009      	add	sp, #36	@ 0x24
 800237e:	bd90      	pop	{r4, r7, pc}
 8002380:	40012400 	.word	0x40012400
 8002384:	40021000 	.word	0x40021000

08002388 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a09      	ldr	r2, [pc, #36]	@ (80023bc <HAL_ADC_MspDeInit+0x34>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10b      	bne.n	80023b2 <HAL_ADC_MspDeInit+0x2a>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800239a:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <HAL_ADC_MspDeInit+0x38>)
 800239c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800239e:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <HAL_ADC_MspDeInit+0x38>)
 80023a0:	4908      	ldr	r1, [pc, #32]	@ (80023c4 <HAL_ADC_MspDeInit+0x3c>)
 80023a2:	400a      	ands	r2, r1
 80023a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(VBAT_MEAS_GPIO_Port, VBAT_MEAS_Pin);
 80023a6:	23a0      	movs	r3, #160	@ 0xa0
 80023a8:	05db      	lsls	r3, r3, #23
 80023aa:	2101      	movs	r1, #1
 80023ac:	0018      	movs	r0, r3
 80023ae:	f002 fba9 	bl	8004b04 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 80023b2:	46c0      	nop			@ (mov r8, r8)
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b002      	add	sp, #8
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	40012400 	.word	0x40012400
 80023c0:	40021000 	.word	0x40021000
 80023c4:	fffffdff 	.word	0xfffffdff

080023c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b089      	sub	sp, #36	@ 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	240c      	movs	r4, #12
 80023d2:	193b      	adds	r3, r7, r4
 80023d4:	0018      	movs	r0, r3
 80023d6:	2314      	movs	r3, #20
 80023d8:	001a      	movs	r2, r3
 80023da:	2100      	movs	r1, #0
 80023dc:	f006 f940 	bl	8008660 <memset>
  if(hi2c->Instance==I2C1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a17      	ldr	r2, [pc, #92]	@ (8002444 <HAL_I2C_MspInit+0x7c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d128      	bne.n	800243c <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	4b17      	ldr	r3, [pc, #92]	@ (8002448 <HAL_I2C_MspInit+0x80>)
 80023ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023ee:	4b16      	ldr	r3, [pc, #88]	@ (8002448 <HAL_I2C_MspInit+0x80>)
 80023f0:	2102      	movs	r1, #2
 80023f2:	430a      	orrs	r2, r1
 80023f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80023f6:	4b14      	ldr	r3, [pc, #80]	@ (8002448 <HAL_I2C_MspInit+0x80>)
 80023f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fa:	2202      	movs	r2, #2
 80023fc:	4013      	ands	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002402:	0021      	movs	r1, r4
 8002404:	187b      	adds	r3, r7, r1
 8002406:	22c0      	movs	r2, #192	@ 0xc0
 8002408:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800240a:	187b      	adds	r3, r7, r1
 800240c:	2212      	movs	r2, #18
 800240e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	187b      	adds	r3, r7, r1
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002416:	187b      	adds	r3, r7, r1
 8002418:	2203      	movs	r2, #3
 800241a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800241c:	187b      	adds	r3, r7, r1
 800241e:	2201      	movs	r2, #1
 8002420:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002422:	187b      	adds	r3, r7, r1
 8002424:	4a09      	ldr	r2, [pc, #36]	@ (800244c <HAL_I2C_MspInit+0x84>)
 8002426:	0019      	movs	r1, r3
 8002428:	0010      	movs	r0, r2
 800242a:	f002 f9ed 	bl	8004808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800242e:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <HAL_I2C_MspInit+0x80>)
 8002430:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002432:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <HAL_I2C_MspInit+0x80>)
 8002434:	2180      	movs	r1, #128	@ 0x80
 8002436:	0389      	lsls	r1, r1, #14
 8002438:	430a      	orrs	r2, r1
 800243a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800243c:	46c0      	nop			@ (mov r8, r8)
 800243e:	46bd      	mov	sp, r7
 8002440:	b009      	add	sp, #36	@ 0x24
 8002442:	bd90      	pop	{r4, r7, pc}
 8002444:	40005400 	.word	0x40005400
 8002448:	40021000 	.word	0x40021000
 800244c:	50000400 	.word	0x50000400

08002450 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0b      	ldr	r2, [pc, #44]	@ (800248c <HAL_I2C_MspDeInit+0x3c>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10f      	bne.n	8002482 <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002462:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_I2C_MspDeInit+0x40>)
 8002464:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002466:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <HAL_I2C_MspDeInit+0x40>)
 8002468:	490a      	ldr	r1, [pc, #40]	@ (8002494 <HAL_I2C_MspDeInit+0x44>)
 800246a:	400a      	ands	r2, r1
 800246c:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800246e:	4b0a      	ldr	r3, [pc, #40]	@ (8002498 <HAL_I2C_MspDeInit+0x48>)
 8002470:	2140      	movs	r1, #64	@ 0x40
 8002472:	0018      	movs	r0, r3
 8002474:	f002 fb46 	bl	8004b04 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002478:	4b07      	ldr	r3, [pc, #28]	@ (8002498 <HAL_I2C_MspDeInit+0x48>)
 800247a:	2180      	movs	r1, #128	@ 0x80
 800247c:	0018      	movs	r0, r3
 800247e:	f002 fb41 	bl	8004b04 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	46bd      	mov	sp, r7
 8002486:	b002      	add	sp, #8
 8002488:	bd80      	pop	{r7, pc}
 800248a:	46c0      	nop			@ (mov r8, r8)
 800248c:	40005400 	.word	0x40005400
 8002490:	40021000 	.word	0x40021000
 8002494:	ffdfffff 	.word	0xffdfffff
 8002498:	50000400 	.word	0x50000400

0800249c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b08b      	sub	sp, #44	@ 0x2c
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	2414      	movs	r4, #20
 80024a6:	193b      	adds	r3, r7, r4
 80024a8:	0018      	movs	r0, r3
 80024aa:	2314      	movs	r3, #20
 80024ac:	001a      	movs	r2, r3
 80024ae:	2100      	movs	r1, #0
 80024b0:	f006 f8d6 	bl	8008660 <memset>
  if(huart->Instance==LPUART1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a30      	ldr	r2, [pc, #192]	@ (800257c <HAL_UART_MspInit+0xe0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d12a      	bne.n	8002514 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80024be:	4b30      	ldr	r3, [pc, #192]	@ (8002580 <HAL_UART_MspInit+0xe4>)
 80024c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024c2:	4b2f      	ldr	r3, [pc, #188]	@ (8002580 <HAL_UART_MspInit+0xe4>)
 80024c4:	2180      	movs	r1, #128	@ 0x80
 80024c6:	02c9      	lsls	r1, r1, #11
 80024c8:	430a      	orrs	r2, r1
 80024ca:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002580 <HAL_UART_MspInit+0xe4>)
 80024ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002580 <HAL_UART_MspInit+0xe4>)
 80024d2:	2101      	movs	r1, #1
 80024d4:	430a      	orrs	r2, r1
 80024d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024d8:	4b29      	ldr	r3, [pc, #164]	@ (8002580 <HAL_UART_MspInit+0xe4>)
 80024da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024dc:	2201      	movs	r2, #1
 80024de:	4013      	ands	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024e4:	0021      	movs	r1, r4
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	220c      	movs	r2, #12
 80024ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ec:	187b      	adds	r3, r7, r1
 80024ee:	2202      	movs	r2, #2
 80024f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	2200      	movs	r2, #0
 80024f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	2203      	movs	r2, #3
 80024fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80024fe:	187b      	adds	r3, r7, r1
 8002500:	2206      	movs	r2, #6
 8002502:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002504:	187a      	adds	r2, r7, r1
 8002506:	23a0      	movs	r3, #160	@ 0xa0
 8002508:	05db      	lsls	r3, r3, #23
 800250a:	0011      	movs	r1, r2
 800250c:	0018      	movs	r0, r3
 800250e:	f002 f97b 	bl	8004808 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 8002512:	e02f      	b.n	8002574 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1a      	ldr	r2, [pc, #104]	@ (8002584 <HAL_UART_MspInit+0xe8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d12a      	bne.n	8002574 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800251e:	4b18      	ldr	r3, [pc, #96]	@ (8002580 <HAL_UART_MspInit+0xe4>)
 8002520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002522:	4b17      	ldr	r3, [pc, #92]	@ (8002580 <HAL_UART_MspInit+0xe4>)
 8002524:	2180      	movs	r1, #128	@ 0x80
 8002526:	01c9      	lsls	r1, r1, #7
 8002528:	430a      	orrs	r2, r1
 800252a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252c:	4b14      	ldr	r3, [pc, #80]	@ (8002580 <HAL_UART_MspInit+0xe4>)
 800252e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002530:	4b13      	ldr	r3, [pc, #76]	@ (8002580 <HAL_UART_MspInit+0xe4>)
 8002532:	2101      	movs	r1, #1
 8002534:	430a      	orrs	r2, r1
 8002536:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002538:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <HAL_UART_MspInit+0xe4>)
 800253a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253c:	2201      	movs	r2, #1
 800253e:	4013      	ands	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002544:	2114      	movs	r1, #20
 8002546:	187b      	adds	r3, r7, r1
 8002548:	22c0      	movs	r2, #192	@ 0xc0
 800254a:	00d2      	lsls	r2, r2, #3
 800254c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254e:	187b      	adds	r3, r7, r1
 8002550:	2202      	movs	r2, #2
 8002552:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002554:	187b      	adds	r3, r7, r1
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800255a:	187b      	adds	r3, r7, r1
 800255c:	2203      	movs	r2, #3
 800255e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002560:	187b      	adds	r3, r7, r1
 8002562:	2204      	movs	r2, #4
 8002564:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002566:	187a      	adds	r2, r7, r1
 8002568:	23a0      	movs	r3, #160	@ 0xa0
 800256a:	05db      	lsls	r3, r3, #23
 800256c:	0011      	movs	r1, r2
 800256e:	0018      	movs	r0, r3
 8002570:	f002 f94a 	bl	8004808 <HAL_GPIO_Init>
}
 8002574:	46c0      	nop			@ (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b00b      	add	sp, #44	@ 0x2c
 800257a:	bd90      	pop	{r4, r7, pc}
 800257c:	40004800 	.word	0x40004800
 8002580:	40021000 	.word	0x40021000
 8002584:	40013800 	.word	0x40013800

08002588 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a13      	ldr	r2, [pc, #76]	@ (80025e4 <HAL_UART_MspDeInit+0x5c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d10c      	bne.n	80025b4 <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN LPUART1_MspDeInit 0 */

    /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 800259a:	4b13      	ldr	r3, [pc, #76]	@ (80025e8 <HAL_UART_MspDeInit+0x60>)
 800259c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800259e:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <HAL_UART_MspDeInit+0x60>)
 80025a0:	4912      	ldr	r1, [pc, #72]	@ (80025ec <HAL_UART_MspDeInit+0x64>)
 80025a2:	400a      	ands	r2, r1
 80025a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80025a6:	23a0      	movs	r3, #160	@ 0xa0
 80025a8:	05db      	lsls	r3, r3, #23
 80025aa:	210c      	movs	r1, #12
 80025ac:	0018      	movs	r0, r3
 80025ae:	f002 faa9 	bl	8004b04 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80025b2:	e012      	b.n	80025da <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0d      	ldr	r2, [pc, #52]	@ (80025f0 <HAL_UART_MspDeInit+0x68>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10d      	bne.n	80025da <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART1_CLK_DISABLE();
 80025be:	4b0a      	ldr	r3, [pc, #40]	@ (80025e8 <HAL_UART_MspDeInit+0x60>)
 80025c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025c2:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_UART_MspDeInit+0x60>)
 80025c4:	490b      	ldr	r1, [pc, #44]	@ (80025f4 <HAL_UART_MspDeInit+0x6c>)
 80025c6:	400a      	ands	r2, r1
 80025c8:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80025ca:	23c0      	movs	r3, #192	@ 0xc0
 80025cc:	00da      	lsls	r2, r3, #3
 80025ce:	23a0      	movs	r3, #160	@ 0xa0
 80025d0:	05db      	lsls	r3, r3, #23
 80025d2:	0011      	movs	r1, r2
 80025d4:	0018      	movs	r0, r3
 80025d6:	f002 fa95 	bl	8004b04 <HAL_GPIO_DeInit>
}
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	b002      	add	sp, #8
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	40004800 	.word	0x40004800
 80025e8:	40021000 	.word	0x40021000
 80025ec:	fffbffff 	.word	0xfffbffff
 80025f0:	40013800 	.word	0x40013800
 80025f4:	ffffbfff 	.word	0xffffbfff

080025f8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a06      	ldr	r2, [pc, #24]	@ (8002620 <HAL_RTC_MspInit+0x28>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d106      	bne.n	8002618 <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800260a:	4b06      	ldr	r3, [pc, #24]	@ (8002624 <HAL_RTC_MspInit+0x2c>)
 800260c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800260e:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <HAL_RTC_MspInit+0x2c>)
 8002610:	2180      	movs	r1, #128	@ 0x80
 8002612:	02c9      	lsls	r1, r1, #11
 8002614:	430a      	orrs	r2, r1
 8002616:	651a      	str	r2, [r3, #80]	@ 0x50

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8002618:	46c0      	nop			@ (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40002800 	.word	0x40002800
 8002624:	40021000 	.word	0x40021000

08002628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800262c:	46c0      	nop			@ (mov r8, r8)
 800262e:	e7fd      	b.n	800262c <NMI_Handler+0x4>

08002630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002634:	46c0      	nop			@ (mov r8, r8)
 8002636:	e7fd      	b.n	8002634 <HardFault_Handler+0x4>

08002638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800263c:	46c0      	nop			@ (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002646:	46c0      	nop			@ (mov r8, r8)
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002650:	f001 fa3a 	bl	8003ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002654:	46c0      	nop			@ (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <RTC_IRQHandler>:
/* USER CODE BEGIN 1 */
/**
  * @brief This function handles RTC wake-up timer interrupt.
  */
void RTC_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002660:	4b03      	ldr	r3, [pc, #12]	@ (8002670 <RTC_IRQHandler+0x14>)
 8002662:	0018      	movs	r0, r3
 8002664:	f004 fe5c 	bl	8007320 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 8002668:	46c0      	nop			@ (mov r8, r8)
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	2000027c 	.word	0x2000027c

08002674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800267c:	4a14      	ldr	r2, [pc, #80]	@ (80026d0 <_sbrk+0x5c>)
 800267e:	4b15      	ldr	r3, [pc, #84]	@ (80026d4 <_sbrk+0x60>)
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002688:	4b13      	ldr	r3, [pc, #76]	@ (80026d8 <_sbrk+0x64>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d102      	bne.n	8002696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <_sbrk+0x64>)
 8002692:	4a12      	ldr	r2, [pc, #72]	@ (80026dc <_sbrk+0x68>)
 8002694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <_sbrk+0x64>)
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	18d3      	adds	r3, r2, r3
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d207      	bcs.n	80026b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026a4:	f005 fffa 	bl	800869c <__errno>
 80026a8:	0003      	movs	r3, r0
 80026aa:	220c      	movs	r2, #12
 80026ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ae:	2301      	movs	r3, #1
 80026b0:	425b      	negs	r3, r3
 80026b2:	e009      	b.n	80026c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026b4:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <_sbrk+0x64>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ba:	4b07      	ldr	r3, [pc, #28]	@ (80026d8 <_sbrk+0x64>)
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	18d2      	adds	r2, r2, r3
 80026c2:	4b05      	ldr	r3, [pc, #20]	@ (80026d8 <_sbrk+0x64>)
 80026c4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80026c6:	68fb      	ldr	r3, [r7, #12]
}
 80026c8:	0018      	movs	r0, r3
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b006      	add	sp, #24
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	20005000 	.word	0x20005000
 80026d4:	00000400 	.word	0x00000400
 80026d8:	200002a8 	.word	0x200002a8
 80026dc:	20000418 	.word	0x20000418

080026e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026e4:	46c0      	nop			@ (mov r8, r8)
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <RTC_WakeUp_Init_Calibrated>:

/**
 * @brief Initialize RTC wake-up timer with calibration
 */
void RTC_WakeUp_Init_Calibrated(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
    ConsolePrintf("Starting RTC Wake-Up Timer with calibration...\r\n");
 80026f2:	4b28      	ldr	r3, [pc, #160]	@ (8002794 <RTC_WakeUp_Init_Calibrated+0xa8>)
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7ff fd77 	bl	80021e8 <ConsolePrintf>

    // Disable the Wake-Up Timer before configuring
    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80026fa:	4b27      	ldr	r3, [pc, #156]	@ (8002798 <RTC_WakeUp_Init_Calibrated+0xac>)
 80026fc:	0018      	movs	r0, r3
 80026fe:	f004 fdab 	bl	8007258 <HAL_RTCEx_DeactivateWakeUpTimer>
    ConsolePrintf("RTC Wake-Up Timer disabled\r\n");
 8002702:	4b26      	ldr	r3, [pc, #152]	@ (800279c <RTC_WakeUp_Init_Calibrated+0xb0>)
 8002704:	0018      	movs	r0, r3
 8002706:	f7ff fd6f 	bl	80021e8 <ConsolePrintf>

    // Apply any existing calibration
    RTC_Apply_Factory_Calibration();
 800270a:	f000 f945 	bl	8002998 <RTC_Apply_Factory_Calibration>

    // Measure LSI frequency if possible
    measured_lsi_freq = RTC_Measure_LSI_Frequency();
 800270e:	f000 f8e9 	bl	80028e4 <RTC_Measure_LSI_Frequency>
 8002712:	0002      	movs	r2, r0
 8002714:	4b22      	ldr	r3, [pc, #136]	@ (80027a0 <RTC_WakeUp_Init_Calibrated+0xb4>)
 8002716:	601a      	str	r2, [r3, #0]
    ConsolePrintf("Using LSI frequency: %lu Hz\r\n", measured_lsi_freq);
 8002718:	4b21      	ldr	r3, [pc, #132]	@ (80027a0 <RTC_WakeUp_Init_Calibrated+0xb4>)
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4b21      	ldr	r3, [pc, #132]	@ (80027a4 <RTC_WakeUp_Init_Calibrated+0xb8>)
 800271e:	0011      	movs	r1, r2
 8002720:	0018      	movs	r0, r3
 8002722:	f7ff fd61 	bl	80021e8 <ConsolePrintf>

    // Calculate optimal wake-up counter
    uint32_t wakeup_counter = RTC_Calculate_WakeUp_Counter(measured_lsi_freq, RTC_WAKEUP_INTERVAL_SEC);
 8002726:	4b1e      	ldr	r3, [pc, #120]	@ (80027a0 <RTC_WakeUp_Init_Calibrated+0xb4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2296      	movs	r2, #150	@ 0x96
 800272c:	0092      	lsls	r2, r2, #2
 800272e:	0011      	movs	r1, r2
 8002730:	0018      	movs	r0, r3
 8002732:	f000 f8e5 	bl	8002900 <RTC_Calculate_WakeUp_Counter>
 8002736:	0003      	movs	r3, r0
 8002738:	607b      	str	r3, [r7, #4]
    ConsolePrintf("Calculated wake-up counter: %lu\r\n", wakeup_counter);
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	4b1a      	ldr	r3, [pc, #104]	@ (80027a8 <RTC_WakeUp_Init_Calibrated+0xbc>)
 800273e:	0011      	movs	r1, r2
 8002740:	0018      	movs	r0, r3
 8002742:	f7ff fd51 	bl	80021e8 <ConsolePrintf>

    // Configure Wake-Up Timer
    if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, wakeup_counter, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4b13      	ldr	r3, [pc, #76]	@ (8002798 <RTC_WakeUp_Init_Calibrated+0xac>)
 800274a:	2204      	movs	r2, #4
 800274c:	0018      	movs	r0, r3
 800274e:	f004 fcab 	bl	80070a8 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002752:	1e03      	subs	r3, r0, #0
 8002754:	d005      	beq.n	8002762 <RTC_WakeUp_Init_Calibrated+0x76>
    {
        ConsolePrintf("ERROR: Failed to set RTC Wake-Up Timer\r\n");
 8002756:	4b15      	ldr	r3, [pc, #84]	@ (80027ac <RTC_WakeUp_Init_Calibrated+0xc0>)
 8002758:	0018      	movs	r0, r3
 800275a:	f7ff fd45 	bl	80021e8 <ConsolePrintf>
        Error_Handler();
 800275e:	f7ff fdb9 	bl	80022d4 <Error_Handler>
    }

    // Enable RTC Wake-Up interrupt in NVIC
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	2002      	movs	r0, #2
 8002768:	f002 f81c 	bl	80047a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800276c:	2002      	movs	r0, #2
 800276e:	f002 f82e 	bl	80047ce <HAL_NVIC_EnableIRQ>

    ConsolePrintf("RTC Wake-Up Timer configured for %d minutes\r\n", RTC_WAKEUP_INTERVAL_SEC / 60);
 8002772:	4b0f      	ldr	r3, [pc, #60]	@ (80027b0 <RTC_WakeUp_Init_Calibrated+0xc4>)
 8002774:	210a      	movs	r1, #10
 8002776:	0018      	movs	r0, r3
 8002778:	f7ff fd36 	bl	80021e8 <ConsolePrintf>
    ConsolePrintf("Calibration status: %s\r\n", RTC_Get_Calibration_Status());
 800277c:	f000 f904 	bl	8002988 <RTC_Get_Calibration_Status>
 8002780:	0002      	movs	r2, r0
 8002782:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <RTC_WakeUp_Init_Calibrated+0xc8>)
 8002784:	0011      	movs	r1, r2
 8002786:	0018      	movs	r0, r3
 8002788:	f7ff fd2e 	bl	80021e8 <ConsolePrintf>
}
 800278c:	46c0      	nop			@ (mov r8, r8)
 800278e:	46bd      	mov	sp, r7
 8002790:	b002      	add	sp, #8
 8002792:	bd80      	pop	{r7, pc}
 8002794:	0800912c 	.word	0x0800912c
 8002798:	2000027c 	.word	0x2000027c
 800279c:	08009160 	.word	0x08009160
 80027a0:	20000004 	.word	0x20000004
 80027a4:	08009180 	.word	0x08009180
 80027a8:	080091a0 	.word	0x080091a0
 80027ac:	080091c4 	.word	0x080091c4
 80027b0:	080091f0 	.word	0x080091f0
 80027b4:	08009220 	.word	0x08009220

080027b8 <RTC_Calibrate_LSI>:

/**
 * @brief Calibrate RTC using smooth calibration for LSI inaccuracy
 */
void RTC_Calibrate_LSI(int32_t error_ppm)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af02      	add	r7, sp, #8
 80027be:	6078      	str	r0, [r7, #4]
    ConsolePrintf("Starting RTC LSI calibration with error: %ld ppm\r\n", error_ppm);
 80027c0:	687a      	ldr	r2, [r7, #4]
 80027c2:	4b38      	ldr	r3, [pc, #224]	@ (80028a4 <RTC_Calibrate_LSI+0xec>)
 80027c4:	0011      	movs	r1, r2
 80027c6:	0018      	movs	r0, r3
 80027c8:	f7ff fd0e 	bl	80021e8 <ConsolePrintf>
    
    if (error_ppm == 0) {
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10a      	bne.n	80027e8 <RTC_Calibrate_LSI+0x30>
        ConsolePrintf("No calibration needed (error = 0 ppm)\r\n");
 80027d2:	4b35      	ldr	r3, [pc, #212]	@ (80028a8 <RTC_Calibrate_LSI+0xf0>)
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7ff fd07 	bl	80021e8 <ConsolePrintf>
        snprintf(calibration_status, sizeof(calibration_status), "No calibration (0 ppm)");
 80027da:	4a34      	ldr	r2, [pc, #208]	@ (80028ac <RTC_Calibrate_LSI+0xf4>)
 80027dc:	4b34      	ldr	r3, [pc, #208]	@ (80028b0 <RTC_Calibrate_LSI+0xf8>)
 80027de:	2140      	movs	r1, #64	@ 0x40
 80027e0:	0018      	movs	r0, r3
 80027e2:	f005 fecd 	bl	8008580 <sniprintf>
        return;
 80027e6:	e059      	b.n	800289c <RTC_Calibrate_LSI+0xe4>
    }

    // Calculate pulse correction
    // 512 pulses ≈ 488 ppm correction
    uint32_t pulse_correction = (uint32_t)((abs(error_ppm) * 512) / RTC_CALIB_PULSES_PER_PPM);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	17da      	asrs	r2, r3, #31
 80027ec:	189b      	adds	r3, r3, r2
 80027ee:	4053      	eors	r3, r2
 80027f0:	025b      	lsls	r3, r3, #9
 80027f2:	22f4      	movs	r2, #244	@ 0xf4
 80027f4:	0051      	lsls	r1, r2, #1
 80027f6:	0018      	movs	r0, r3
 80027f8:	f7fd fd22 	bl	8000240 <__divsi3>
 80027fc:	0003      	movs	r3, r0
 80027fe:	60fb      	str	r3, [r7, #12]
    
    // Limit to maximum correction
    if (pulse_correction > RTC_CALIB_MAX_PULSES) {
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	2380      	movs	r3, #128	@ 0x80
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	429a      	cmp	r2, r3
 8002808:	d307      	bcc.n	800281a <RTC_Calibrate_LSI+0x62>
        pulse_correction = RTC_CALIB_MAX_PULSES;
 800280a:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <RTC_Calibrate_LSI+0xfc>)
 800280c:	60fb      	str	r3, [r7, #12]
        ConsolePrintf("WARNING: Limiting correction to maximum %d pulses\r\n", RTC_CALIB_MAX_PULSES);
 800280e:	4a29      	ldr	r2, [pc, #164]	@ (80028b4 <RTC_Calibrate_LSI+0xfc>)
 8002810:	4b29      	ldr	r3, [pc, #164]	@ (80028b8 <RTC_Calibrate_LSI+0x100>)
 8002812:	0011      	movs	r1, r2
 8002814:	0018      	movs	r0, r3
 8002816:	f7ff fce7 	bl	80021e8 <ConsolePrintf>
    }

    uint32_t smooth_calib_plus;
    
    // Determine calibration direction
    if (error_ppm > 0) {
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	dd08      	ble.n	8002832 <RTC_Calibrate_LSI+0x7a>
        // Timer is too long - LSI too slow - subtract pulses to speed up
        smooth_calib_plus = RTC_SMOOTHCALIB_PLUSPULSES_RESET;
 8002820:	2300      	movs	r3, #0
 8002822:	60bb      	str	r3, [r7, #8]
        ConsolePrintf("LSI too slow, subtracting %lu pulses\r\n", pulse_correction);
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4b25      	ldr	r3, [pc, #148]	@ (80028bc <RTC_Calibrate_LSI+0x104>)
 8002828:	0011      	movs	r1, r2
 800282a:	0018      	movs	r0, r3
 800282c:	f7ff fcdc 	bl	80021e8 <ConsolePrintf>
 8002830:	e008      	b.n	8002844 <RTC_Calibrate_LSI+0x8c>
    } else {
        // Timer is too short - LSI too fast - add pulses to slow down  
        smooth_calib_plus = RTC_SMOOTHCALIB_PLUSPULSES_SET;
 8002832:	2380      	movs	r3, #128	@ 0x80
 8002834:	021b      	lsls	r3, r3, #8
 8002836:	60bb      	str	r3, [r7, #8]
        ConsolePrintf("LSI too fast, adding %lu pulses\r\n", pulse_correction);
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	4b21      	ldr	r3, [pc, #132]	@ (80028c0 <RTC_Calibrate_LSI+0x108>)
 800283c:	0011      	movs	r1, r2
 800283e:	0018      	movs	r0, r3
 8002840:	f7ff fcd2 	bl	80021e8 <ConsolePrintf>
    }

    // Apply the smooth calibration
    if (HAL_RTCEx_SetSmoothCalib(&hrtc, 
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	481e      	ldr	r0, [pc, #120]	@ (80028c4 <RTC_Calibrate_LSI+0x10c>)
 800284a:	2100      	movs	r1, #0
 800284c:	f004 fd98 	bl	8007380 <HAL_RTCEx_SetSmoothCalib>
 8002850:	1e03      	subs	r3, r0, #0
 8002852:	d119      	bne.n	8002888 <RTC_Calibrate_LSI+0xd0>
                               RTC_SMOOTHCALIB_PERIOD_32SEC,
                               smooth_calib_plus, 
                               pulse_correction) == HAL_OK) {
        current_calibration_ppm = error_ppm;
 8002854:	4b1c      	ldr	r3, [pc, #112]	@ (80028c8 <RTC_Calibrate_LSI+0x110>)
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	601a      	str	r2, [r3, #0]
        snprintf(calibration_status, sizeof(calibration_status), 
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	021b      	lsls	r3, r3, #8
 8002860:	429a      	cmp	r2, r3
 8002862:	d101      	bne.n	8002868 <RTC_Calibrate_LSI+0xb0>
 8002864:	4b19      	ldr	r3, [pc, #100]	@ (80028cc <RTC_Calibrate_LSI+0x114>)
 8002866:	e000      	b.n	800286a <RTC_Calibrate_LSI+0xb2>
 8002868:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <RTC_Calibrate_LSI+0x118>)
 800286a:	491a      	ldr	r1, [pc, #104]	@ (80028d4 <RTC_Calibrate_LSI+0x11c>)
 800286c:	4810      	ldr	r0, [pc, #64]	@ (80028b0 <RTC_Calibrate_LSI+0xf8>)
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	9201      	str	r2, [sp, #4]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	9200      	str	r2, [sp, #0]
 8002876:	000a      	movs	r2, r1
 8002878:	2140      	movs	r1, #64	@ 0x40
 800287a:	f005 fe81 	bl	8008580 <sniprintf>
                "%s%lu pulses (%ld ppm)", 
                (smooth_calib_plus == RTC_SMOOTHCALIB_PLUSPULSES_SET) ? "+" : "-",
                pulse_correction, error_ppm);
        ConsolePrintf("RTC smooth calibration applied successfully\r\n");
 800287e:	4b16      	ldr	r3, [pc, #88]	@ (80028d8 <RTC_Calibrate_LSI+0x120>)
 8002880:	0018      	movs	r0, r3
 8002882:	f7ff fcb1 	bl	80021e8 <ConsolePrintf>
 8002886:	e009      	b.n	800289c <RTC_Calibrate_LSI+0xe4>
    } else {
        ConsolePrintf("ERROR: Failed to apply RTC smooth calibration\r\n");
 8002888:	4b14      	ldr	r3, [pc, #80]	@ (80028dc <RTC_Calibrate_LSI+0x124>)
 800288a:	0018      	movs	r0, r3
 800288c:	f7ff fcac 	bl	80021e8 <ConsolePrintf>
        snprintf(calibration_status, sizeof(calibration_status), "Calibration failed");
 8002890:	4a13      	ldr	r2, [pc, #76]	@ (80028e0 <RTC_Calibrate_LSI+0x128>)
 8002892:	4b07      	ldr	r3, [pc, #28]	@ (80028b0 <RTC_Calibrate_LSI+0xf8>)
 8002894:	2140      	movs	r1, #64	@ 0x40
 8002896:	0018      	movs	r0, r3
 8002898:	f005 fe72 	bl	8008580 <sniprintf>
    }
}
 800289c:	46bd      	mov	sp, r7
 800289e:	b004      	add	sp, #16
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	46c0      	nop			@ (mov r8, r8)
 80028a4:	0800923c 	.word	0x0800923c
 80028a8:	08009270 	.word	0x08009270
 80028ac:	08009298 	.word	0x08009298
 80028b0:	20000008 	.word	0x20000008
 80028b4:	000001ff 	.word	0x000001ff
 80028b8:	080092b0 	.word	0x080092b0
 80028bc:	080092e4 	.word	0x080092e4
 80028c0:	0800930c 	.word	0x0800930c
 80028c4:	2000027c 	.word	0x2000027c
 80028c8:	200002ac 	.word	0x200002ac
 80028cc:	08009330 	.word	0x08009330
 80028d0:	08009334 	.word	0x08009334
 80028d4:	08009338 	.word	0x08009338
 80028d8:	08009350 	.word	0x08009350
 80028dc:	08009380 	.word	0x08009380
 80028e0:	080093b0 	.word	0x080093b0

080028e4 <RTC_Measure_LSI_Frequency>:

/**
 * @brief Measure LSI frequency using system tick (simplified approach)
 */
uint32_t RTC_Measure_LSI_Frequency(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0
    // This is a simplified implementation
    // In a full implementation, you would use TIM21 to measure LSI against HSI
    // For now, we'll use the nominal frequency with some variation based on temperature
    
    ConsolePrintf("Using nominal LSI frequency (advanced measurement not implemented)\r\n");
 80028e8:	4b03      	ldr	r3, [pc, #12]	@ (80028f8 <RTC_Measure_LSI_Frequency+0x14>)
 80028ea:	0018      	movs	r0, r3
 80028ec:	f7ff fc7c 	bl	80021e8 <ConsolePrintf>
    
    // You could add temperature compensation here if you have temperature data
    // LSI typically varies by about ±1%/°C
    
    return RTC_LSI_NOMINAL_FREQ;
 80028f0:	4b02      	ldr	r3, [pc, #8]	@ (80028fc <RTC_Measure_LSI_Frequency+0x18>)
}
 80028f2:	0018      	movs	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	080093c4 	.word	0x080093c4
 80028fc:	00009088 	.word	0x00009088

08002900 <RTC_Calculate_WakeUp_Counter>:

/**
 * @brief Calculate optimal wake-up counter value based on LSI frequency
 */
uint32_t RTC_Calculate_WakeUp_Counter(uint32_t lsi_freq, uint32_t interval_sec)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
    // Calculate CK_SPRE frequency: LSI / ((AsynchPrediv + 1) * (SynchPrediv + 1))
    float ck_spre_freq = (float)lsi_freq / ((RTC_PRESCALER_ASYNC + 1) * (RTC_PRESCALER_SYNC + 1));
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fe fb7c 	bl	8001008 <__aeabi_ui2f>
 8002910:	1c03      	adds	r3, r0, #0
 8002912:	218e      	movs	r1, #142	@ 0x8e
 8002914:	05c9      	lsls	r1, r1, #23
 8002916:	1c18      	adds	r0, r3, #0
 8002918:	f7fd fe82 	bl	8000620 <__aeabi_fdiv>
 800291c:	1c03      	adds	r3, r0, #0
 800291e:	60bb      	str	r3, [r7, #8]
    
    ConsolePrintf("CK_SPRE frequency: %.3f Hz\r\n", ck_spre_freq);
 8002920:	68b8      	ldr	r0, [r7, #8]
 8002922:	f7fe fbb7 	bl	8001094 <__aeabi_f2d>
 8002926:	0002      	movs	r2, r0
 8002928:	000b      	movs	r3, r1
 800292a:	4914      	ldr	r1, [pc, #80]	@ (800297c <RTC_Calculate_WakeUp_Counter+0x7c>)
 800292c:	0008      	movs	r0, r1
 800292e:	f7ff fc5b 	bl	80021e8 <ConsolePrintf>
    
    // Calculate wake-up counter for desired interval
    // Subtract 1 because counter counts from N down to 0
    uint32_t wakeup_counter = (uint32_t)((interval_sec * ck_spre_freq) - 1.0f);
 8002932:	6838      	ldr	r0, [r7, #0]
 8002934:	f7fe fb68 	bl	8001008 <__aeabi_ui2f>
 8002938:	1c03      	adds	r3, r0, #0
 800293a:	68b9      	ldr	r1, [r7, #8]
 800293c:	1c18      	adds	r0, r3, #0
 800293e:	f7fd ff85 	bl	800084c <__aeabi_fmul>
 8002942:	1c03      	adds	r3, r0, #0
 8002944:	21fe      	movs	r1, #254	@ 0xfe
 8002946:	0589      	lsls	r1, r1, #22
 8002948:	1c18      	adds	r0, r3, #0
 800294a:	f7fe f8d9 	bl	8000b00 <__aeabi_fsub>
 800294e:	1c03      	adds	r3, r0, #0
 8002950:	1c18      	adds	r0, r3, #0
 8002952:	f7fd fd81 	bl	8000458 <__aeabi_f2uiz>
 8002956:	0003      	movs	r3, r0
 8002958:	60fb      	str	r3, [r7, #12]
    
    // Ensure we don't exceed 16-bit limit
    if (wakeup_counter > 0xFFFF) {
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	2380      	movs	r3, #128	@ 0x80
 800295e:	025b      	lsls	r3, r3, #9
 8002960:	429a      	cmp	r2, r3
 8002962:	d305      	bcc.n	8002970 <RTC_Calculate_WakeUp_Counter+0x70>
        wakeup_counter = 0xFFFF;
 8002964:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <RTC_Calculate_WakeUp_Counter+0x80>)
 8002966:	60fb      	str	r3, [r7, #12]
        ConsolePrintf("WARNING: Counter limited to 16-bit maximum\r\n");
 8002968:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <RTC_Calculate_WakeUp_Counter+0x84>)
 800296a:	0018      	movs	r0, r3
 800296c:	f7ff fc3c 	bl	80021e8 <ConsolePrintf>
    }
    
    return wakeup_counter;
 8002970:	68fb      	ldr	r3, [r7, #12]
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	b004      	add	sp, #16
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			@ (mov r8, r8)
 800297c:	0800940c 	.word	0x0800940c
 8002980:	0000ffff 	.word	0x0000ffff
 8002984:	0800942c 	.word	0x0800942c

08002988 <RTC_Get_Calibration_Status>:

/**
 * @brief Get current RTC calibration status
 */
const char* RTC_Get_Calibration_Status(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
    return calibration_status;
 800298c:	4b01      	ldr	r3, [pc, #4]	@ (8002994 <RTC_Get_Calibration_Status+0xc>)
}
 800298e:	0018      	movs	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	20000008 	.word	0x20000008

08002998 <RTC_Apply_Factory_Calibration>:

/**
 * @brief Apply factory calibration values if available
 */
void RTC_Apply_Factory_Calibration(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
    //   +5000 = Timer too slow by 5000 ppm (timer takes 603 sec instead of 600)
    //   -5000 = Timer too fast by 5000 ppm (timer takes 597 sec instead of 600)
    //
    // NOTE: With MSI clock, timing accuracy is reduced compared to HSI+PLL,
    // but power consumption during sleep is dramatically lower (<1µA vs 8mA)
    int32_t factory_error_ppm = 0;  // <<<< CHANGE THIS VALUE AFTER MEASUREMENT
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
    
    if (factory_error_ppm != 0) {
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d00e      	beq.n	80029c6 <RTC_Apply_Factory_Calibration+0x2e>
        ConsolePrintf("Applying low-power calibration: %ld ppm\r\n", factory_error_ppm);
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	4b0f      	ldr	r3, [pc, #60]	@ (80029e8 <RTC_Apply_Factory_Calibration+0x50>)
 80029ac:	0011      	movs	r1, r2
 80029ae:	0018      	movs	r0, r3
 80029b0:	f7ff fc1a 	bl	80021e8 <ConsolePrintf>
        ConsolePrintf("NOTE: Using MSI for ultra-low power (<1µA sleep current)\r\n");
 80029b4:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <RTC_Apply_Factory_Calibration+0x54>)
 80029b6:	0018      	movs	r0, r3
 80029b8:	f7ff fc16 	bl	80021e8 <ConsolePrintf>
        RTC_Calibrate_LSI(factory_error_ppm);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	0018      	movs	r0, r3
 80029c0:	f7ff fefa 	bl	80027b8 <RTC_Calibrate_LSI>
    } else {
        ConsolePrintf("Using default timing optimized for ultra-low power\r\n");
        ConsolePrintf("MSI clock: Better power efficiency, acceptable timing accuracy\r\n");
        ConsolePrintf("To calibrate: measure actual 10-min sleep time and update factory_error_ppm\r\n");
    }
}
 80029c4:	e00b      	b.n	80029de <RTC_Apply_Factory_Calibration+0x46>
        ConsolePrintf("Using default timing optimized for ultra-low power\r\n");
 80029c6:	4b0a      	ldr	r3, [pc, #40]	@ (80029f0 <RTC_Apply_Factory_Calibration+0x58>)
 80029c8:	0018      	movs	r0, r3
 80029ca:	f7ff fc0d 	bl	80021e8 <ConsolePrintf>
        ConsolePrintf("MSI clock: Better power efficiency, acceptable timing accuracy\r\n");
 80029ce:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <RTC_Apply_Factory_Calibration+0x5c>)
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7ff fc09 	bl	80021e8 <ConsolePrintf>
        ConsolePrintf("To calibrate: measure actual 10-min sleep time and update factory_error_ppm\r\n");
 80029d6:	4b08      	ldr	r3, [pc, #32]	@ (80029f8 <RTC_Apply_Factory_Calibration+0x60>)
 80029d8:	0018      	movs	r0, r3
 80029da:	f7ff fc05 	bl	80021e8 <ConsolePrintf>
}
 80029de:	46c0      	nop			@ (mov r8, r8)
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b002      	add	sp, #8
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			@ (mov r8, r8)
 80029e8:	0800945c 	.word	0x0800945c
 80029ec:	08009488 	.word	0x08009488
 80029f0:	080094c4 	.word	0x080094c4
 80029f4:	080094fc 	.word	0x080094fc
 80029f8:	08009540 	.word	0x08009540

080029fc <RTC_Print_Calibration_Guide>:

/**
 * @brief Get recommended calibration values for common scenarios
 */
void RTC_Print_Calibration_Guide(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
    ConsolePrintf("\r\n=== RTC Calibration Guide ===\r\n");
 8002a00:	4b17      	ldr	r3, [pc, #92]	@ (8002a60 <RTC_Print_Calibration_Guide+0x64>)
 8002a02:	0018      	movs	r0, r3
 8002a04:	f7ff fbf0 	bl	80021e8 <ConsolePrintf>
    ConsolePrintf("1. Flash code with RTC_Calibrate_LSI(0) - no calibration\r\n");
 8002a08:	4b16      	ldr	r3, [pc, #88]	@ (8002a64 <RTC_Print_Calibration_Guide+0x68>)
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7ff fbec 	bl	80021e8 <ConsolePrintf>
    ConsolePrintf("2. Time your 10-minute sleep cycles with a stopwatch\r\n");
 8002a10:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <RTC_Print_Calibration_Guide+0x6c>)
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7ff fbe8 	bl	80021e8 <ConsolePrintf>
    ConsolePrintf("3. Calculate error: error_ppm = ((actual_sec - 600) / 600) * 1000000\r\n");
 8002a18:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <RTC_Print_Calibration_Guide+0x70>)
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f7ff fbe4 	bl	80021e8 <ConsolePrintf>
    ConsolePrintf("4. Update code with RTC_Calibrate_LSI(error_ppm) and reflash\r\n");
 8002a20:	4b13      	ldr	r3, [pc, #76]	@ (8002a70 <RTC_Print_Calibration_Guide+0x74>)
 8002a22:	0018      	movs	r0, r3
 8002a24:	f7ff fbe0 	bl	80021e8 <ConsolePrintf>
    ConsolePrintf("\r\nCommon corrections:\r\n");
 8002a28:	4b12      	ldr	r3, [pc, #72]	@ (8002a74 <RTC_Print_Calibration_Guide+0x78>)
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f7ff fbdc 	bl	80021e8 <ConsolePrintf>
    ConsolePrintf("- If timer takes 603 sec: error = +5000 ppm (too slow)\r\n");
 8002a30:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <RTC_Print_Calibration_Guide+0x7c>)
 8002a32:	0018      	movs	r0, r3
 8002a34:	f7ff fbd8 	bl	80021e8 <ConsolePrintf>
    ConsolePrintf("- If timer takes 597 sec: error = -5000 ppm (too fast)\r\n");
 8002a38:	4b10      	ldr	r3, [pc, #64]	@ (8002a7c <RTC_Print_Calibration_Guide+0x80>)
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f7ff fbd4 	bl	80021e8 <ConsolePrintf>
    ConsolePrintf("- If timer takes 610 sec: error = +16667 ppm (very slow)\r\n");
 8002a40:	4b0f      	ldr	r3, [pc, #60]	@ (8002a80 <RTC_Print_Calibration_Guide+0x84>)
 8002a42:	0018      	movs	r0, r3
 8002a44:	f7ff fbd0 	bl	80021e8 <ConsolePrintf>
    ConsolePrintf("- If timer takes 590 sec: error = -16667 ppm (very fast)\r\n");
 8002a48:	4b0e      	ldr	r3, [pc, #56]	@ (8002a84 <RTC_Print_Calibration_Guide+0x88>)
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f7ff fbcc 	bl	80021e8 <ConsolePrintf>
    ConsolePrintf("============================\r\n\r\n");
 8002a50:	4b0d      	ldr	r3, [pc, #52]	@ (8002a88 <RTC_Print_Calibration_Guide+0x8c>)
 8002a52:	0018      	movs	r0, r3
 8002a54:	f7ff fbc8 	bl	80021e8 <ConsolePrintf>
}
 8002a58:	46c0      	nop			@ (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	08009688 	.word	0x08009688
 8002a64:	080096ac 	.word	0x080096ac
 8002a68:	080096e8 	.word	0x080096e8
 8002a6c:	08009720 	.word	0x08009720
 8002a70:	08009768 	.word	0x08009768
 8002a74:	080097a8 	.word	0x080097a8
 8002a78:	080097c0 	.word	0x080097c0
 8002a7c:	080097fc 	.word	0x080097fc
 8002a80:	08009838 	.word	0x08009838
 8002a84:	08009874 	.word	0x08009874
 8002a88:	080098b0 	.word	0x080098b0

08002a8c <scan_i2c_bus>:
uint8_t temp_delta;
uint8_t hum_delta;
int16_t i2c_error_code = 0;

void scan_i2c_bus(void)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
	// we re-set these to false because we want to check this every time for safety
    has_sensor_1 = false;
 8002a92:	4b41      	ldr	r3, [pc, #260]	@ (8002b98 <scan_i2c_bus+0x10c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
    has_sensor_2 = false;
 8002a98:	4b40      	ldr	r3, [pc, #256]	@ (8002b9c <scan_i2c_bus+0x110>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
    
    ConsolePrintf("Testing sensor 1 at address 0x44 (I2C addr 0x88)...\r\n");
 8002a9e:	4b40      	ldr	r3, [pc, #256]	@ (8002ba0 <scan_i2c_bus+0x114>)
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff fba1 	bl	80021e8 <ConsolePrintf>
    HAL_StatusTypeDef result1 = HAL_I2C_IsDeviceReady(&hi2c1, 68 << 1, 1, 10);
 8002aa6:	1dfc      	adds	r4, r7, #7
 8002aa8:	483e      	ldr	r0, [pc, #248]	@ (8002ba4 <scan_i2c_bus+0x118>)
 8002aaa:	230a      	movs	r3, #10
 8002aac:	2201      	movs	r2, #1
 8002aae:	2188      	movs	r1, #136	@ 0x88
 8002ab0:	f002 fc4c 	bl	800534c <HAL_I2C_IsDeviceReady>
 8002ab4:	0003      	movs	r3, r0
 8002ab6:	7023      	strb	r3, [r4, #0]
    ConsolePrintf("Sensor 1 result: %s (code: %d)\r\n", 
 8002ab8:	1dfb      	adds	r3, r7, #7
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d013      	beq.n	8002ae8 <scan_i2c_bus+0x5c>
                  (result1 == HAL_OK) ? "HAL_OK" : 
                  (result1 == HAL_ERROR) ? "HAL_ERROR" :
 8002ac0:	1dfb      	adds	r3, r7, #7
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d00d      	beq.n	8002ae4 <scan_i2c_bus+0x58>
                  (result1 == HAL_BUSY) ? "HAL_BUSY" : 
 8002ac8:	1dfb      	adds	r3, r7, #7
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d007      	beq.n	8002ae0 <scan_i2c_bus+0x54>
                  (result1 == HAL_TIMEOUT) ? "HAL_TIMEOUT" : "UNKNOWN", result1);
 8002ad0:	1dfb      	adds	r3, r7, #7
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d101      	bne.n	8002adc <scan_i2c_bus+0x50>
 8002ad8:	4b33      	ldr	r3, [pc, #204]	@ (8002ba8 <scan_i2c_bus+0x11c>)
 8002ada:	e006      	b.n	8002aea <scan_i2c_bus+0x5e>
 8002adc:	4b33      	ldr	r3, [pc, #204]	@ (8002bac <scan_i2c_bus+0x120>)
 8002ade:	e004      	b.n	8002aea <scan_i2c_bus+0x5e>
                  (result1 == HAL_BUSY) ? "HAL_BUSY" : 
 8002ae0:	4b33      	ldr	r3, [pc, #204]	@ (8002bb0 <scan_i2c_bus+0x124>)
 8002ae2:	e002      	b.n	8002aea <scan_i2c_bus+0x5e>
                  (result1 == HAL_ERROR) ? "HAL_ERROR" :
 8002ae4:	4b33      	ldr	r3, [pc, #204]	@ (8002bb4 <scan_i2c_bus+0x128>)
 8002ae6:	e000      	b.n	8002aea <scan_i2c_bus+0x5e>
    ConsolePrintf("Sensor 1 result: %s (code: %d)\r\n", 
 8002ae8:	4b33      	ldr	r3, [pc, #204]	@ (8002bb8 <scan_i2c_bus+0x12c>)
 8002aea:	1dfa      	adds	r2, r7, #7
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	4833      	ldr	r0, [pc, #204]	@ (8002bbc <scan_i2c_bus+0x130>)
 8002af0:	0019      	movs	r1, r3
 8002af2:	f7ff fb79 	bl	80021e8 <ConsolePrintf>
    if (result1 == HAL_OK) has_sensor_1 = true;
 8002af6:	1dfb      	adds	r3, r7, #7
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <scan_i2c_bus+0x78>
 8002afe:	4b26      	ldr	r3, [pc, #152]	@ (8002b98 <scan_i2c_bus+0x10c>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	701a      	strb	r2, [r3, #0]
    
    ConsolePrintf("Testing sensor 2 at address 0x46 (I2C addr 0x8C)...\r\n");
 8002b04:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc0 <scan_i2c_bus+0x134>)
 8002b06:	0018      	movs	r0, r3
 8002b08:	f7ff fb6e 	bl	80021e8 <ConsolePrintf>
    HAL_StatusTypeDef result2 = HAL_I2C_IsDeviceReady(&hi2c1, 70 << 1, 1, 10);
 8002b0c:	1dbc      	adds	r4, r7, #6
 8002b0e:	4825      	ldr	r0, [pc, #148]	@ (8002ba4 <scan_i2c_bus+0x118>)
 8002b10:	230a      	movs	r3, #10
 8002b12:	2201      	movs	r2, #1
 8002b14:	218c      	movs	r1, #140	@ 0x8c
 8002b16:	f002 fc19 	bl	800534c <HAL_I2C_IsDeviceReady>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	7023      	strb	r3, [r4, #0]
    ConsolePrintf("Sensor 2 result: %s (code: %d)\r\n", 
 8002b1e:	1dbb      	adds	r3, r7, #6
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d013      	beq.n	8002b4e <scan_i2c_bus+0xc2>
                  (result2 == HAL_OK) ? "HAL_OK" : 
                  (result2 == HAL_ERROR) ? "HAL_ERROR" :
 8002b26:	1dbb      	adds	r3, r7, #6
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d00d      	beq.n	8002b4a <scan_i2c_bus+0xbe>
                  (result2 == HAL_BUSY) ? "HAL_BUSY" : 
 8002b2e:	1dbb      	adds	r3, r7, #6
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d007      	beq.n	8002b46 <scan_i2c_bus+0xba>
                  (result2 == HAL_TIMEOUT) ? "HAL_TIMEOUT" : "UNKNOWN", result2);
 8002b36:	1dbb      	adds	r3, r7, #6
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d101      	bne.n	8002b42 <scan_i2c_bus+0xb6>
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ba8 <scan_i2c_bus+0x11c>)
 8002b40:	e006      	b.n	8002b50 <scan_i2c_bus+0xc4>
 8002b42:	4b1a      	ldr	r3, [pc, #104]	@ (8002bac <scan_i2c_bus+0x120>)
 8002b44:	e004      	b.n	8002b50 <scan_i2c_bus+0xc4>
                  (result2 == HAL_BUSY) ? "HAL_BUSY" : 
 8002b46:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb0 <scan_i2c_bus+0x124>)
 8002b48:	e002      	b.n	8002b50 <scan_i2c_bus+0xc4>
                  (result2 == HAL_ERROR) ? "HAL_ERROR" :
 8002b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb4 <scan_i2c_bus+0x128>)
 8002b4c:	e000      	b.n	8002b50 <scan_i2c_bus+0xc4>
    ConsolePrintf("Sensor 2 result: %s (code: %d)\r\n", 
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bb8 <scan_i2c_bus+0x12c>)
 8002b50:	1dba      	adds	r2, r7, #6
 8002b52:	7812      	ldrb	r2, [r2, #0]
 8002b54:	481b      	ldr	r0, [pc, #108]	@ (8002bc4 <scan_i2c_bus+0x138>)
 8002b56:	0019      	movs	r1, r3
 8002b58:	f7ff fb46 	bl	80021e8 <ConsolePrintf>
    if (result2 == HAL_OK) has_sensor_2 = true;
 8002b5c:	1dbb      	adds	r3, r7, #6
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d102      	bne.n	8002b6a <scan_i2c_bus+0xde>
 8002b64:	4b0d      	ldr	r3, [pc, #52]	@ (8002b9c <scan_i2c_bus+0x110>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]

    ConsolePrintf("Sensor scan: Sensor 1 (0x44): %s, Sensor 2 (0x46): %s\r\n", 
                  has_sensor_1 ? "FOUND" : "NOT FOUND", 
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <scan_i2c_bus+0x10c>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
    ConsolePrintf("Sensor scan: Sensor 1 (0x44): %s, Sensor 2 (0x46): %s\r\n", 
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d001      	beq.n	8002b76 <scan_i2c_bus+0xea>
 8002b72:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <scan_i2c_bus+0x13c>)
 8002b74:	e000      	b.n	8002b78 <scan_i2c_bus+0xec>
 8002b76:	4b15      	ldr	r3, [pc, #84]	@ (8002bcc <scan_i2c_bus+0x140>)
                  has_sensor_2 ? "FOUND" : "NOT FOUND");
 8002b78:	4a08      	ldr	r2, [pc, #32]	@ (8002b9c <scan_i2c_bus+0x110>)
 8002b7a:	7812      	ldrb	r2, [r2, #0]
    ConsolePrintf("Sensor scan: Sensor 1 (0x44): %s, Sensor 2 (0x46): %s\r\n", 
 8002b7c:	2a00      	cmp	r2, #0
 8002b7e:	d001      	beq.n	8002b84 <scan_i2c_bus+0xf8>
 8002b80:	4a11      	ldr	r2, [pc, #68]	@ (8002bc8 <scan_i2c_bus+0x13c>)
 8002b82:	e000      	b.n	8002b86 <scan_i2c_bus+0xfa>
 8002b84:	4a11      	ldr	r2, [pc, #68]	@ (8002bcc <scan_i2c_bus+0x140>)
 8002b86:	4812      	ldr	r0, [pc, #72]	@ (8002bd0 <scan_i2c_bus+0x144>)
 8002b88:	0019      	movs	r1, r3
 8002b8a:	f7ff fb2d 	bl	80021e8 <ConsolePrintf>
    return;
 8002b8e:	46c0      	nop			@ (mov r8, r8)
}
 8002b90:	46bd      	mov	sp, r7
 8002b92:	b003      	add	sp, #12
 8002b94:	bd90      	pop	{r4, r7, pc}
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	200002b0 	.word	0x200002b0
 8002b9c:	200002b1 	.word	0x200002b1
 8002ba0:	08009928 	.word	0x08009928
 8002ba4:	20000118 	.word	0x20000118
 8002ba8:	08009960 	.word	0x08009960
 8002bac:	0800996c 	.word	0x0800996c
 8002bb0:	08009974 	.word	0x08009974
 8002bb4:	08009980 	.word	0x08009980
 8002bb8:	0800998c 	.word	0x0800998c
 8002bbc:	08009994 	.word	0x08009994
 8002bc0:	080099b8 	.word	0x080099b8
 8002bc4:	080099f0 	.word	0x080099f0
 8002bc8:	08009a14 	.word	0x08009a14
 8002bcc:	08009a1c 	.word	0x08009a1c
 8002bd0:	08009a28 	.word	0x08009a28

08002bd4 <sensor_init_and_read>:

I2C_Error_t sensor_init_and_read(void)
{
 8002bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af02      	add	r7, sp, #8
	ConsolePrintf("Enabling I2C power...\r\n");
 8002bda:	4bca      	ldr	r3, [pc, #808]	@ (8002f04 <sensor_init_and_read+0x330>)
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff fb03 	bl	80021e8 <ConsolePrintf>
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8002be2:	4bc9      	ldr	r3, [pc, #804]	@ (8002f08 <sensor_init_and_read+0x334>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	2120      	movs	r1, #32
 8002be8:	0018      	movs	r0, r3
 8002bea:	f002 f88a 	bl	8004d02 <HAL_GPIO_WritePin>
	ConsolePrintf("I2C_ENABLE pin set to HIGH (PB5)\r\n");
 8002bee:	4bc7      	ldr	r3, [pc, #796]	@ (8002f0c <sensor_init_and_read+0x338>)
 8002bf0:	0018      	movs	r0, r3
 8002bf2:	f7ff faf9 	bl	80021e8 <ConsolePrintf>
	
	// Read back the pin state to confirm it's actually set
	GPIO_PinState pin_state = HAL_GPIO_ReadPin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin);
 8002bf6:	250a      	movs	r5, #10
 8002bf8:	197c      	adds	r4, r7, r5
 8002bfa:	4bc3      	ldr	r3, [pc, #780]	@ (8002f08 <sensor_init_and_read+0x334>)
 8002bfc:	2120      	movs	r1, #32
 8002bfe:	0018      	movs	r0, r3
 8002c00:	f002 f862 	bl	8004cc8 <HAL_GPIO_ReadPin>
 8002c04:	0003      	movs	r3, r0
 8002c06:	7023      	strb	r3, [r4, #0]
	ConsolePrintf("I2C_ENABLE pin readback: %s\r\n", (pin_state == GPIO_PIN_SET) ? "HIGH" : "LOW");
 8002c08:	197b      	adds	r3, r7, r5
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <sensor_init_and_read+0x40>
 8002c10:	4bbf      	ldr	r3, [pc, #764]	@ (8002f10 <sensor_init_and_read+0x33c>)
 8002c12:	e000      	b.n	8002c16 <sensor_init_and_read+0x42>
 8002c14:	4bbf      	ldr	r3, [pc, #764]	@ (8002f14 <sensor_init_and_read+0x340>)
 8002c16:	4ac0      	ldr	r2, [pc, #768]	@ (8002f18 <sensor_init_and_read+0x344>)
 8002c18:	0019      	movs	r1, r3
 8002c1a:	0010      	movs	r0, r2
 8002c1c:	f7ff fae4 	bl	80021e8 <ConsolePrintf>
	
	HAL_Delay(400); // WE NEED THIS FOR IC POWER UP!!! IT TAKES 300mS to competely power up!!!
 8002c20:	23c8      	movs	r3, #200	@ 0xc8
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	0018      	movs	r0, r3
 8002c26:	f000 ff6b 	bl	8003b00 <HAL_Delay>
	ConsolePrintf("I2C power stabilized, scanning for sensors...\r\n");
 8002c2a:	4bbc      	ldr	r3, [pc, #752]	@ (8002f1c <sensor_init_and_read+0x348>)
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f7ff fadb 	bl	80021e8 <ConsolePrintf>
	
	// Test I2C bus by scanning a wider range of addresses
	ConsolePrintf("Performing extended I2C bus scan...\r\n");
 8002c32:	4bbb      	ldr	r3, [pc, #748]	@ (8002f20 <sensor_init_and_read+0x34c>)
 8002c34:	0018      	movs	r0, r3
 8002c36:	f7ff fad7 	bl	80021e8 <ConsolePrintf>
	int devices_found = 0;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
	for (uint8_t addr = 0x08; addr < 0x78; addr++) {
 8002c3e:	230b      	movs	r3, #11
 8002c40:	18fb      	adds	r3, r7, r3
 8002c42:	2208      	movs	r2, #8
 8002c44:	701a      	strb	r2, [r3, #0]
 8002c46:	e01c      	b.n	8002c82 <sensor_init_and_read+0xae>
		if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK) {
 8002c48:	240b      	movs	r4, #11
 8002c4a:	193b      	adds	r3, r7, r4
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	18db      	adds	r3, r3, r3
 8002c52:	b299      	uxth	r1, r3
 8002c54:	48b3      	ldr	r0, [pc, #716]	@ (8002f24 <sensor_init_and_read+0x350>)
 8002c56:	230a      	movs	r3, #10
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f002 fb77 	bl	800534c <HAL_I2C_IsDeviceReady>
 8002c5e:	1e03      	subs	r3, r0, #0
 8002c60:	d109      	bne.n	8002c76 <sensor_init_and_read+0xa2>
			ConsolePrintf("I2C device found at address 0x%02X\r\n", addr);
 8002c62:	193b      	adds	r3, r7, r4
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	4bb0      	ldr	r3, [pc, #704]	@ (8002f28 <sensor_init_and_read+0x354>)
 8002c68:	0011      	movs	r1, r2
 8002c6a:	0018      	movs	r0, r3
 8002c6c:	f7ff fabc 	bl	80021e8 <ConsolePrintf>
			devices_found++;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3301      	adds	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
	for (uint8_t addr = 0x08; addr < 0x78; addr++) {
 8002c76:	210b      	movs	r1, #11
 8002c78:	187b      	adds	r3, r7, r1
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	3201      	adds	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
 8002c82:	230b      	movs	r3, #11
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b77      	cmp	r3, #119	@ 0x77
 8002c8a:	d9dd      	bls.n	8002c48 <sensor_init_and_read+0x74>
		}
	}
	ConsolePrintf("Total I2C devices found: %d\r\n", devices_found);
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4ba7      	ldr	r3, [pc, #668]	@ (8002f2c <sensor_init_and_read+0x358>)
 8002c90:	0011      	movs	r1, r2
 8002c92:	0018      	movs	r0, r3
 8002c94:	f7ff faa8 	bl	80021e8 <ConsolePrintf>
	
	scan_i2c_bus();
 8002c98:	f7ff fef8 	bl	8002a8c <scan_i2c_bus>
    if (!has_sensor_1 && !has_sensor_2) {
 8002c9c:	4ba4      	ldr	r3, [pc, #656]	@ (8002f30 <sensor_init_and_read+0x35c>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4053      	eors	r3, r2
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d012      	beq.n	8002cd0 <sensor_init_and_read+0xfc>
 8002caa:	4ba2      	ldr	r3, [pc, #648]	@ (8002f34 <sensor_init_and_read+0x360>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	4053      	eors	r3, r2
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00b      	beq.n	8002cd0 <sensor_init_and_read+0xfc>
    	i2c_error_code = NO_SENSORS_FOUND;
 8002cb8:	4b9f      	ldr	r3, [pc, #636]	@ (8002f38 <sensor_init_and_read+0x364>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	801a      	strh	r2, [r3, #0]
    	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8002cbe:	4b92      	ldr	r3, [pc, #584]	@ (8002f08 <sensor_init_and_read+0x334>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2120      	movs	r1, #32
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f002 f81c 	bl	8004d02 <HAL_GPIO_WritePin>
        return I2C_ERROR_BOTH_SENSORS_NOT_RESPONDING;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	425b      	negs	r3, r3
 8002cce:	e115      	b.n	8002efc <sensor_init_and_read+0x328>
    }

    i2c_error_code = NO_ERROR;
 8002cd0:	4b99      	ldr	r3, [pc, #612]	@ (8002f38 <sensor_init_and_read+0x364>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	801a      	strh	r2, [r3, #0]

    if (has_sensor_1) {
 8002cd6:	4b96      	ldr	r3, [pc, #600]	@ (8002f30 <sensor_init_and_read+0x35c>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d023      	beq.n	8002d26 <sensor_init_and_read+0x152>
        ConsolePrintf("Reading sensor 1 (SHT43 at 0x44)...\r\n");
 8002cde:	4b97      	ldr	r3, [pc, #604]	@ (8002f3c <sensor_init_and_read+0x368>)
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7ff fa81 	bl	80021e8 <ConsolePrintf>
        sht4x_init(SHT43_I2C_ADDR_44);
 8002ce6:	2044      	movs	r0, #68	@ 0x44
 8002ce8:	f000 fb0c 	bl	8003304 <sht4x_init>
        sht4x_soft_reset();
 8002cec:	f000 fb7e 	bl	80033ec <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 8002cf0:	4b93      	ldr	r3, [pc, #588]	@ (8002f40 <sensor_init_and_read+0x36c>)
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f000 fadc 	bl	80032b0 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT43_I2C_ADDR_44);
 8002cf8:	2044      	movs	r0, #68	@ 0x44
 8002cfa:	f000 fb03 	bl	8003304 <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 8002cfe:	4a91      	ldr	r2, [pc, #580]	@ (8002f44 <sensor_init_and_read+0x370>)
 8002d00:	4b91      	ldr	r3, [pc, #580]	@ (8002f48 <sensor_init_and_read+0x374>)
 8002d02:	0011      	movs	r1, r2
 8002d04:	0018      	movs	r0, r3
 8002d06:	f000 fb0d 	bl	8003324 <sht4x_measure_high_precision_ticks>
 8002d0a:	0003      	movs	r3, r0
 8002d0c:	001a      	movs	r2, r3
 8002d0e:	4b8a      	ldr	r3, [pc, #552]	@ (8002f38 <sensor_init_and_read+0x364>)
 8002d10:	801a      	strh	r2, [r3, #0]
        ConsolePrintf("Sensor 1 raw: temp_ticks=%u, hum_ticks=%u\r\n", temp_ticks_1, hum_ticks_1);
 8002d12:	4b8d      	ldr	r3, [pc, #564]	@ (8002f48 <sensor_init_and_read+0x374>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	0019      	movs	r1, r3
 8002d18:	4b8a      	ldr	r3, [pc, #552]	@ (8002f44 <sensor_init_and_read+0x370>)
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	001a      	movs	r2, r3
 8002d1e:	4b8b      	ldr	r3, [pc, #556]	@ (8002f4c <sensor_init_and_read+0x378>)
 8002d20:	0018      	movs	r0, r3
 8002d22:	f7ff fa61 	bl	80021e8 <ConsolePrintf>
    }

    if (has_sensor_2) {
 8002d26:	4b83      	ldr	r3, [pc, #524]	@ (8002f34 <sensor_init_and_read+0x360>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d023      	beq.n	8002d76 <sensor_init_and_read+0x1a2>
        ConsolePrintf("Reading sensor 2 (SHT40 at 0x46)...\r\n");
 8002d2e:	4b88      	ldr	r3, [pc, #544]	@ (8002f50 <sensor_init_and_read+0x37c>)
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7ff fa59 	bl	80021e8 <ConsolePrintf>
        sht4x_init(SHT40_I2C_ADDR_46);
 8002d36:	2046      	movs	r0, #70	@ 0x46
 8002d38:	f000 fae4 	bl	8003304 <sht4x_init>
        sht4x_soft_reset();
 8002d3c:	f000 fb56 	bl	80033ec <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 8002d40:	4b7f      	ldr	r3, [pc, #508]	@ (8002f40 <sensor_init_and_read+0x36c>)
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 fab4 	bl	80032b0 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT40_I2C_ADDR_46);
 8002d48:	2046      	movs	r0, #70	@ 0x46
 8002d4a:	f000 fadb 	bl	8003304 <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 8002d4e:	4a81      	ldr	r2, [pc, #516]	@ (8002f54 <sensor_init_and_read+0x380>)
 8002d50:	4b81      	ldr	r3, [pc, #516]	@ (8002f58 <sensor_init_and_read+0x384>)
 8002d52:	0011      	movs	r1, r2
 8002d54:	0018      	movs	r0, r3
 8002d56:	f000 fae5 	bl	8003324 <sht4x_measure_high_precision_ticks>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	4b76      	ldr	r3, [pc, #472]	@ (8002f38 <sensor_init_and_read+0x364>)
 8002d60:	801a      	strh	r2, [r3, #0]
        ConsolePrintf("Sensor 2 raw: temp_ticks=%u, hum_ticks=%u\r\n", temp_ticks_2, hum_ticks_2);
 8002d62:	4b7d      	ldr	r3, [pc, #500]	@ (8002f58 <sensor_init_and_read+0x384>)
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	0019      	movs	r1, r3
 8002d68:	4b7a      	ldr	r3, [pc, #488]	@ (8002f54 <sensor_init_and_read+0x380>)
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f5c <sensor_init_and_read+0x388>)
 8002d70:	0018      	movs	r0, r3
 8002d72:	f7ff fa39 	bl	80021e8 <ConsolePrintf>
    }
    ConsolePrintf("Disabling I2C power...\r\n");
 8002d76:	4b7a      	ldr	r3, [pc, #488]	@ (8002f60 <sensor_init_and_read+0x38c>)
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f7ff fa35 	bl	80021e8 <ConsolePrintf>
    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8002d7e:	4b62      	ldr	r3, [pc, #392]	@ (8002f08 <sensor_init_and_read+0x334>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	2120      	movs	r1, #32
 8002d84:	0018      	movs	r0, r3
 8002d86:	f001 ffbc 	bl	8004d02 <HAL_GPIO_WritePin>

             calculated_temp   = (uint16_t)((temp_ticks_1 + 5U) / 10U);
 8002d8a:	4b6f      	ldr	r3, [pc, #444]	@ (8002f48 <sensor_init_and_read+0x374>)
 8002d8c:	881b      	ldrh	r3, [r3, #0]
 8002d8e:	3305      	adds	r3, #5
 8002d90:	210a      	movs	r1, #10
 8002d92:	0018      	movs	r0, r3
 8002d94:	f7fd f9ca 	bl	800012c <__udivsi3>
 8002d98:	0003      	movs	r3, r0
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	4b71      	ldr	r3, [pc, #452]	@ (8002f64 <sensor_init_and_read+0x390>)
 8002d9e:	801a      	strh	r2, [r3, #0]
    uint16_t calculated_temp_2 = (uint16_t)((temp_ticks_2 + 5U) / 10U);
 8002da0:	4b6d      	ldr	r3, [pc, #436]	@ (8002f58 <sensor_init_and_read+0x384>)
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	3305      	adds	r3, #5
 8002da6:	210a      	movs	r1, #10
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7fd f9bf 	bl	800012c <__udivsi3>
 8002dae:	0003      	movs	r3, r0
 8002db0:	001a      	movs	r2, r3
 8002db2:	2608      	movs	r6, #8
 8002db4:	19bb      	adds	r3, r7, r6
 8002db6:	801a      	strh	r2, [r3, #0]

    ConsolePrintf("Temperature readings: Sensor 1: %u.%u°C, Sensor 2: %u.%u°C\r\n", 
 8002db8:	4b6a      	ldr	r3, [pc, #424]	@ (8002f64 <sensor_init_and_read+0x390>)
 8002dba:	881b      	ldrh	r3, [r3, #0]
 8002dbc:	210a      	movs	r1, #10
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f7fd f9b4 	bl	800012c <__udivsi3>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	001c      	movs	r4, r3
 8002dca:	4b66      	ldr	r3, [pc, #408]	@ (8002f64 <sensor_init_and_read+0x390>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	210a      	movs	r1, #10
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f7fd fa31 	bl	8000238 <__aeabi_uidivmod>
 8002dd6:	000b      	movs	r3, r1
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	001d      	movs	r5, r3
 8002ddc:	19bb      	adds	r3, r7, r6
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	210a      	movs	r1, #10
 8002de2:	0018      	movs	r0, r3
 8002de4:	f7fd f9a2 	bl	800012c <__udivsi3>
 8002de8:	0003      	movs	r3, r0
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	001e      	movs	r6, r3
 8002dee:	2308      	movs	r3, #8
 8002df0:	18fb      	adds	r3, r7, r3
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	210a      	movs	r1, #10
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7fd fa1e 	bl	8000238 <__aeabi_uidivmod>
 8002dfc:	000b      	movs	r3, r1
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	4859      	ldr	r0, [pc, #356]	@ (8002f68 <sensor_init_and_read+0x394>)
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	0033      	movs	r3, r6
 8002e06:	002a      	movs	r2, r5
 8002e08:	0021      	movs	r1, r4
 8002e0a:	f7ff f9ed 	bl	80021e8 <ConsolePrintf>
                  calculated_temp / 10, calculated_temp % 10,
                  calculated_temp_2 / 10, calculated_temp_2 % 10);

             calculated_hum    = (uint8_t)(hum_ticks_1 / 1000U);
 8002e0e:	4b4d      	ldr	r3, [pc, #308]	@ (8002f44 <sensor_init_and_read+0x370>)
 8002e10:	881b      	ldrh	r3, [r3, #0]
 8002e12:	22fa      	movs	r2, #250	@ 0xfa
 8002e14:	0091      	lsls	r1, r2, #2
 8002e16:	0018      	movs	r0, r3
 8002e18:	f7fd f988 	bl	800012c <__udivsi3>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	b2da      	uxtb	r2, r3
 8002e22:	4b52      	ldr	r3, [pc, #328]	@ (8002f6c <sensor_init_and_read+0x398>)
 8002e24:	701a      	strb	r2, [r3, #0]
    uint8_t  calculated_hum_2  = (uint8_t)(hum_ticks_2 / 1000U);
 8002e26:	4b4b      	ldr	r3, [pc, #300]	@ (8002f54 <sensor_init_and_read+0x380>)
 8002e28:	881b      	ldrh	r3, [r3, #0]
 8002e2a:	22fa      	movs	r2, #250	@ 0xfa
 8002e2c:	0091      	lsls	r1, r2, #2
 8002e2e:	0018      	movs	r0, r3
 8002e30:	f7fd f97c 	bl	800012c <__udivsi3>
 8002e34:	0003      	movs	r3, r0
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	1dfb      	adds	r3, r7, #7
 8002e3a:	701a      	strb	r2, [r3, #0]

    ConsolePrintf("Humidity readings: Sensor 1: %u%%, Sensor 2: %u%%\r\n", 
 8002e3c:	4b4b      	ldr	r3, [pc, #300]	@ (8002f6c <sensor_init_and_read+0x398>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	0019      	movs	r1, r3
 8002e42:	1dfb      	adds	r3, r7, #7
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	4b4a      	ldr	r3, [pc, #296]	@ (8002f70 <sensor_init_and_read+0x39c>)
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f7ff f9cd 	bl	80021e8 <ConsolePrintf>
                  calculated_hum, calculated_hum_2);

             temp_delta        = (uint8_t)abs(calculated_temp - calculated_temp_2);
 8002e4e:	4b45      	ldr	r3, [pc, #276]	@ (8002f64 <sensor_init_and_read+0x390>)
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	001a      	movs	r2, r3
 8002e54:	2308      	movs	r3, #8
 8002e56:	18fb      	adds	r3, r7, r3
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	17da      	asrs	r2, r3, #31
 8002e5e:	189b      	adds	r3, r3, r2
 8002e60:	4053      	eors	r3, r2
 8002e62:	b2da      	uxtb	r2, r3
 8002e64:	4b43      	ldr	r3, [pc, #268]	@ (8002f74 <sensor_init_and_read+0x3a0>)
 8002e66:	701a      	strb	r2, [r3, #0]
             hum_delta         = (uint8_t)abs(calculated_hum  - calculated_hum_2);
 8002e68:	4b40      	ldr	r3, [pc, #256]	@ (8002f6c <sensor_init_and_read+0x398>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	001a      	movs	r2, r3
 8002e6e:	1dfb      	adds	r3, r7, #7
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	17da      	asrs	r2, r3, #31
 8002e76:	189b      	adds	r3, r3, r2
 8002e78:	4053      	eors	r3, r2
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8002f78 <sensor_init_and_read+0x3a4>)
 8002e7e:	701a      	strb	r2, [r3, #0]

    ConsolePrintf("Sensor deltas: Temp delta: %u.%u°C, Hum delta: %u%%\r\n", 
 8002e80:	4b3c      	ldr	r3, [pc, #240]	@ (8002f74 <sensor_init_and_read+0x3a0>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	210a      	movs	r1, #10
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7fd f950 	bl	800012c <__udivsi3>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	001c      	movs	r4, r3
 8002e92:	4b38      	ldr	r3, [pc, #224]	@ (8002f74 <sensor_init_and_read+0x3a0>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	210a      	movs	r1, #10
 8002e98:	0018      	movs	r0, r3
 8002e9a:	f7fd f9cd 	bl	8000238 <__aeabi_uidivmod>
 8002e9e:	000b      	movs	r3, r1
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	4b34      	ldr	r3, [pc, #208]	@ (8002f78 <sensor_init_and_read+0x3a4>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4834      	ldr	r0, [pc, #208]	@ (8002f7c <sensor_init_and_read+0x3a8>)
 8002eaa:	0021      	movs	r1, r4
 8002eac:	f7ff f99c 	bl	80021e8 <ConsolePrintf>
                  temp_delta / 10, temp_delta % 10, hum_delta);

    if (temp_delta > 200) {
 8002eb0:	4b30      	ldr	r3, [pc, #192]	@ (8002f74 <sensor_init_and_read+0x3a0>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2bc8      	cmp	r3, #200	@ 0xc8
 8002eb6:	d919      	bls.n	8002eec <sensor_init_and_read+0x318>
        ConsolePrintf("WARNING: Temperature difference too large (%u.%u°C > 20.0°C)\r\n", 
 8002eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002f74 <sensor_init_and_read+0x3a0>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	210a      	movs	r1, #10
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f7fd f934 	bl	800012c <__udivsi3>
 8002ec4:	0003      	movs	r3, r0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	001c      	movs	r4, r3
 8002eca:	4b2a      	ldr	r3, [pc, #168]	@ (8002f74 <sensor_init_and_read+0x3a0>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	210a      	movs	r1, #10
 8002ed0:	0018      	movs	r0, r3
 8002ed2:	f7fd f9b1 	bl	8000238 <__aeabi_uidivmod>
 8002ed6:	000b      	movs	r3, r1
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	001a      	movs	r2, r3
 8002edc:	4b28      	ldr	r3, [pc, #160]	@ (8002f80 <sensor_init_and_read+0x3ac>)
 8002ede:	0021      	movs	r1, r4
 8002ee0:	0018      	movs	r0, r3
 8002ee2:	f7ff f981 	bl	80021e8 <ConsolePrintf>
                      temp_delta / 10, temp_delta % 10);
        return I2C_ERROR_SENSORS_TOO_DIFFERENT;
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	425b      	negs	r3, r3
 8002eea:	e007      	b.n	8002efc <sensor_init_and_read+0x328>
    }
    if (i2c_error_code) return false;
 8002eec:	4b12      	ldr	r3, [pc, #72]	@ (8002f38 <sensor_init_and_read+0x364>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	5e9b      	ldrsh	r3, [r3, r2]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <sensor_init_and_read+0x326>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e000      	b.n	8002efc <sensor_init_and_read+0x328>

    return I2C_ERROR_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	0018      	movs	r0, r3
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b005      	add	sp, #20
 8002f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f04:	08009a60 	.word	0x08009a60
 8002f08:	50000400 	.word	0x50000400
 8002f0c:	08009a78 	.word	0x08009a78
 8002f10:	08009a9c 	.word	0x08009a9c
 8002f14:	08009aa4 	.word	0x08009aa4
 8002f18:	08009aa8 	.word	0x08009aa8
 8002f1c:	08009ac8 	.word	0x08009ac8
 8002f20:	08009af8 	.word	0x08009af8
 8002f24:	20000118 	.word	0x20000118
 8002f28:	08009b20 	.word	0x08009b20
 8002f2c:	08009b48 	.word	0x08009b48
 8002f30:	200002b0 	.word	0x200002b0
 8002f34:	200002b1 	.word	0x200002b1
 8002f38:	200002c0 	.word	0x200002c0
 8002f3c:	08009b68 	.word	0x08009b68
 8002f40:	00002710 	.word	0x00002710
 8002f44:	200002b4 	.word	0x200002b4
 8002f48:	200002b2 	.word	0x200002b2
 8002f4c:	08009b90 	.word	0x08009b90
 8002f50:	08009bbc 	.word	0x08009bbc
 8002f54:	200002b8 	.word	0x200002b8
 8002f58:	200002b6 	.word	0x200002b6
 8002f5c:	08009be4 	.word	0x08009be4
 8002f60:	08009c10 	.word	0x08009c10
 8002f64:	200002ba 	.word	0x200002ba
 8002f68:	08009c2c 	.word	0x08009c2c
 8002f6c:	200002bc 	.word	0x200002bc
 8002f70:	08009c6c 	.word	0x08009c6c
 8002f74:	200002bd 	.word	0x200002bd
 8002f78:	200002be 	.word	0x200002be
 8002f7c:	08009ca0 	.word	0x08009ca0
 8002f80:	08009cd8 	.word	0x08009cd8

08002f84 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b21b      	sxth	r3, r3
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	b21a      	sxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	b21b      	sxth	r3, r3
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	b21b      	sxth	r3, r3
 8002fa2:	b29b      	uxth	r3, r3
}
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	b002      	add	sp, #8
 8002faa:	bd80      	pop	{r7, pc}

08002fac <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	000a      	movs	r2, r1
 8002fb6:	1cbb      	adds	r3, r7, #2
 8002fb8:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8002fba:	230d      	movs	r3, #13
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	22ff      	movs	r2, #255	@ 0xff
 8002fc0:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8002fc2:	230e      	movs	r3, #14
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	801a      	strh	r2, [r3, #0]
 8002fca:	e038      	b.n	800303e <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8002fcc:	230e      	movs	r3, #14
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	18d3      	adds	r3, r2, r3
 8002fd6:	7819      	ldrb	r1, [r3, #0]
 8002fd8:	220d      	movs	r2, #13
 8002fda:	18bb      	adds	r3, r7, r2
 8002fdc:	18ba      	adds	r2, r7, r2
 8002fde:	7812      	ldrb	r2, [r2, #0]
 8002fe0:	404a      	eors	r2, r1
 8002fe2:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8002fe4:	230c      	movs	r3, #12
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	2208      	movs	r2, #8
 8002fea:	701a      	strb	r2, [r3, #0]
 8002fec:	e01c      	b.n	8003028 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 8002fee:	210d      	movs	r1, #13
 8002ff0:	187b      	adds	r3, r7, r1
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	b25b      	sxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	da0a      	bge.n	8003010 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8002ffa:	187b      	adds	r3, r7, r1
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	b25b      	sxtb	r3, r3
 8003000:	18db      	adds	r3, r3, r3
 8003002:	b25b      	sxtb	r3, r3
 8003004:	2231      	movs	r2, #49	@ 0x31
 8003006:	4053      	eors	r3, r2
 8003008:	b25a      	sxtb	r2, r3
 800300a:	187b      	adds	r3, r7, r1
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e005      	b.n	800301c <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8003010:	230d      	movs	r3, #13
 8003012:	18fa      	adds	r2, r7, r3
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	18db      	adds	r3, r3, r3
 800301a:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800301c:	220c      	movs	r2, #12
 800301e:	18bb      	adds	r3, r7, r2
 8003020:	18ba      	adds	r2, r7, r2
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	3a01      	subs	r2, #1
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	230c      	movs	r3, #12
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1dd      	bne.n	8002fee <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8003032:	220e      	movs	r2, #14
 8003034:	18bb      	adds	r3, r7, r2
 8003036:	18ba      	adds	r2, r7, r2
 8003038:	8812      	ldrh	r2, [r2, #0]
 800303a:	3201      	adds	r2, #1
 800303c:	801a      	strh	r2, [r3, #0]
 800303e:	230e      	movs	r3, #14
 8003040:	18fa      	adds	r2, r7, r3
 8003042:	1cbb      	adds	r3, r7, #2
 8003044:	8812      	ldrh	r2, [r2, #0]
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d3bf      	bcc.n	8002fcc <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 800304c:	230d      	movs	r3, #13
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	781b      	ldrb	r3, [r3, #0]
}
 8003052:	0018      	movs	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	b004      	add	sp, #16
 8003058:	bd80      	pop	{r7, pc}

0800305a <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
 8003062:	0008      	movs	r0, r1
 8003064:	0011      	movs	r1, r2
 8003066:	1cbb      	adds	r3, r7, #2
 8003068:	1c02      	adds	r2, r0, #0
 800306a:	801a      	strh	r2, [r3, #0]
 800306c:	1c7b      	adds	r3, r7, #1
 800306e:	1c0a      	adds	r2, r1, #0
 8003070:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8003072:	1cbb      	adds	r3, r7, #2
 8003074:	881a      	ldrh	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	0011      	movs	r1, r2
 800307a:	0018      	movs	r0, r3
 800307c:	f7ff ff96 	bl	8002fac <sensirion_i2c_generate_crc>
 8003080:	0003      	movs	r3, r0
 8003082:	001a      	movs	r2, r3
 8003084:	1c7b      	adds	r3, r7, #1
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	4293      	cmp	r3, r2
 800308a:	d001      	beq.n	8003090 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8003090:	2300      	movs	r3, #0
}
 8003092:	0018      	movs	r0, r3
 8003094:	46bd      	mov	sp, r7
 8003096:	b002      	add	sp, #8
 8003098:	bd80      	pop	{r7, pc}

0800309a <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	0008      	movs	r0, r1
 80030a4:	0011      	movs	r1, r2
 80030a6:	1cbb      	adds	r3, r7, #2
 80030a8:	1c02      	adds	r2, r0, #0
 80030aa:	801a      	strh	r2, [r3, #0]
 80030ac:	1c7b      	adds	r3, r7, #1
 80030ae:	1c0a      	adds	r2, r1, #0
 80030b0:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 80030b2:	1cbb      	adds	r3, r7, #2
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	1cba      	adds	r2, r7, #2
 80030b8:	1c59      	adds	r1, r3, #1
 80030ba:	8011      	strh	r1, [r2, #0]
 80030bc:	001a      	movs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	189b      	adds	r3, r3, r2
 80030c2:	1c7a      	adds	r2, r7, #1
 80030c4:	7812      	ldrb	r2, [r2, #0]
 80030c6:	701a      	strb	r2, [r3, #0]
    return offset;
 80030c8:	1cbb      	adds	r3, r7, #2
 80030ca:	881b      	ldrh	r3, [r3, #0]
}
 80030cc:	0018      	movs	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	b002      	add	sp, #8
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6039      	str	r1, [r7, #0]
 80030dc:	0011      	movs	r1, r2
 80030de:	1dfb      	adds	r3, r7, #7
 80030e0:	1c02      	adds	r2, r0, #0
 80030e2:	701a      	strb	r2, [r3, #0]
 80030e4:	1d3b      	adds	r3, r7, #4
 80030e6:	1c0a      	adds	r2, r1, #0
 80030e8:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 80030ea:	1d3b      	adds	r3, r7, #4
 80030ec:	881b      	ldrh	r3, [r3, #0]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	6839      	ldr	r1, [r7, #0]
 80030f2:	1dfb      	adds	r3, r7, #7
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	0018      	movs	r0, r3
 80030f8:	f000 f8b8 	bl	800326c <sensirion_i2c_hal_write>
 80030fc:	0003      	movs	r3, r0
}
 80030fe:	0018      	movs	r0, r3
 8003100:	46bd      	mov	sp, r7
 8003102:	b002      	add	sp, #8
 8003104:	bd80      	pop	{r7, pc}

08003106 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8003106:	b5b0      	push	{r4, r5, r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6039      	str	r1, [r7, #0]
 800310e:	0011      	movs	r1, r2
 8003110:	1dfb      	adds	r3, r7, #7
 8003112:	1c02      	adds	r2, r0, #0
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	1d3b      	adds	r3, r7, #4
 8003118:	1c0a      	adds	r2, r1, #0
 800311a:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800311c:	1d3b      	adds	r3, r7, #4
 800311e:	881b      	ldrh	r3, [r3, #0]
 8003120:	085b      	lsrs	r3, r3, #1
 8003122:	b29b      	uxth	r3, r3
 8003124:	220a      	movs	r2, #10
 8003126:	18ba      	adds	r2, r7, r2
 8003128:	1c19      	adds	r1, r3, #0
 800312a:	1c0b      	adds	r3, r1, #0
 800312c:	18db      	adds	r3, r3, r3
 800312e:	185b      	adds	r3, r3, r1
 8003130:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8003132:	1d3b      	adds	r3, r7, #4
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	2201      	movs	r2, #1
 8003138:	4013      	ands	r3, r2
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8003140:	2304      	movs	r3, #4
 8003142:	e06c      	b.n	800321e <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8003144:	230a      	movs	r3, #10
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	6839      	ldr	r1, [r7, #0]
 800314e:	1dfb      	adds	r3, r7, #7
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	0018      	movs	r0, r3
 8003154:	f000 f868 	bl	8003228 <sensirion_i2c_hal_read>
 8003158:	0003      	movs	r3, r0
 800315a:	001a      	movs	r2, r3
 800315c:	2108      	movs	r1, #8
 800315e:	187b      	adds	r3, r7, r1
 8003160:	801a      	strh	r2, [r3, #0]
    if (error) {
 8003162:	000a      	movs	r2, r1
 8003164:	18bb      	adds	r3, r7, r2
 8003166:	2100      	movs	r1, #0
 8003168:	5e5b      	ldrsh	r3, [r3, r1]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <sensirion_i2c_read_data_inplace+0x70>
        return error;
 800316e:	18bb      	adds	r3, r7, r2
 8003170:	2200      	movs	r2, #0
 8003172:	5e9b      	ldrsh	r3, [r3, r2]
 8003174:	e053      	b.n	800321e <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8003176:	230e      	movs	r3, #14
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	2200      	movs	r2, #0
 800317c:	801a      	strh	r2, [r3, #0]
 800317e:	230c      	movs	r3, #12
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	2200      	movs	r2, #0
 8003184:	801a      	strh	r2, [r3, #0]
 8003186:	e041      	b.n	800320c <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8003188:	210e      	movs	r1, #14
 800318a:	187b      	adds	r3, r7, r1
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8003192:	187b      	adds	r3, r7, r1
 8003194:	881b      	ldrh	r3, [r3, #0]
 8003196:	3302      	adds	r3, #2
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	001a      	movs	r2, r3
 80031a0:	2102      	movs	r1, #2
 80031a2:	f7ff ff5a 	bl	800305a <sensirion_i2c_check_crc>
 80031a6:	0003      	movs	r3, r0
 80031a8:	001a      	movs	r2, r3
 80031aa:	2108      	movs	r1, #8
 80031ac:	187b      	adds	r3, r7, r1
 80031ae:	801a      	strh	r2, [r3, #0]
        if (error) {
 80031b0:	000a      	movs	r2, r1
 80031b2:	18bb      	adds	r3, r7, r2
 80031b4:	2100      	movs	r1, #0
 80031b6:	5e5b      	ldrsh	r3, [r3, r1]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 80031bc:	18bb      	adds	r3, r7, r2
 80031be:	2200      	movs	r2, #0
 80031c0:	5e9b      	ldrsh	r3, [r3, r2]
 80031c2:	e02c      	b.n	800321e <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 80031c4:	240e      	movs	r4, #14
 80031c6:	193b      	adds	r3, r7, r4
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	683a      	ldr	r2, [r7, #0]
 80031cc:	18d2      	adds	r2, r2, r3
 80031ce:	250c      	movs	r5, #12
 80031d0:	197b      	adds	r3, r7, r5
 80031d2:	881b      	ldrh	r3, [r3, #0]
 80031d4:	1979      	adds	r1, r7, r5
 80031d6:	1c58      	adds	r0, r3, #1
 80031d8:	8008      	strh	r0, [r1, #0]
 80031da:	0019      	movs	r1, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	185b      	adds	r3, r3, r1
 80031e0:	7812      	ldrb	r2, [r2, #0]
 80031e2:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 80031e4:	193b      	adds	r3, r7, r4
 80031e6:	881b      	ldrh	r3, [r3, #0]
 80031e8:	3301      	adds	r3, #1
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	18d2      	adds	r2, r2, r3
 80031ee:	197b      	adds	r3, r7, r5
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	1979      	adds	r1, r7, r5
 80031f4:	1c58      	adds	r0, r3, #1
 80031f6:	8008      	strh	r0, [r1, #0]
 80031f8:	0019      	movs	r1, r3
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	185b      	adds	r3, r3, r1
 80031fe:	7812      	ldrb	r2, [r2, #0]
 8003200:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8003202:	193b      	adds	r3, r7, r4
 8003204:	193a      	adds	r2, r7, r4
 8003206:	8812      	ldrh	r2, [r2, #0]
 8003208:	3203      	adds	r2, #3
 800320a:	801a      	strh	r2, [r3, #0]
 800320c:	230e      	movs	r3, #14
 800320e:	18fa      	adds	r2, r7, r3
 8003210:	230a      	movs	r3, #10
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	8812      	ldrh	r2, [r2, #0]
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d3b5      	bcc.n	8003188 <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 800321c:	2300      	movs	r3, #0
}
 800321e:	0018      	movs	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	b004      	add	sp, #16
 8003224:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003228 <sensirion_i2c_hal_read>:

void sensirion_i2c_hal_free(void) {
    /* nothing to free */
}

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 8003228:	b590      	push	{r4, r7, lr}
 800322a:	b085      	sub	sp, #20
 800322c:	af02      	add	r7, sp, #8
 800322e:	6039      	str	r1, [r7, #0]
 8003230:	0011      	movs	r1, r2
 8003232:	1dfb      	adds	r3, r7, #7
 8003234:	1c02      	adds	r2, r0, #0
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	1dbb      	adds	r3, r7, #6
 800323a:	1c0a      	adds	r2, r1, #0
 800323c:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1), data, count, 100);
 800323e:	1dfb      	adds	r3, r7, #7
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	b29b      	uxth	r3, r3
 8003244:	18db      	adds	r3, r3, r3
 8003246:	b299      	uxth	r1, r3
 8003248:	1dbb      	adds	r3, r7, #6
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	4805      	ldr	r0, [pc, #20]	@ (8003268 <sensirion_i2c_hal_read+0x40>)
 8003252:	2464      	movs	r4, #100	@ 0x64
 8003254:	9400      	str	r4, [sp, #0]
 8003256:	f001 ff71 	bl	800513c <HAL_I2C_Master_Receive>
 800325a:	0003      	movs	r3, r0
 800325c:	b25b      	sxtb	r3, r3
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b003      	add	sp, #12
 8003264:	bd90      	pop	{r4, r7, pc}
 8003266:	46c0      	nop			@ (mov r8, r8)
 8003268:	20000118 	.word	0x20000118

0800326c <sensirion_i2c_hal_write>:

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint8_t count) {
 800326c:	b590      	push	{r4, r7, lr}
 800326e:	b085      	sub	sp, #20
 8003270:	af02      	add	r7, sp, #8
 8003272:	6039      	str	r1, [r7, #0]
 8003274:	0011      	movs	r1, r2
 8003276:	1dfb      	adds	r3, r7, #7
 8003278:	1c02      	adds	r2, r0, #0
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	1dbb      	adds	r3, r7, #6
 800327e:	1c0a      	adds	r2, r1, #0
 8003280:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8003282:	1dfb      	adds	r3, r7, #7
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	18db      	adds	r3, r3, r3
 800328a:	b299      	uxth	r1, r3
 800328c:	1dbb      	adds	r3, r7, #6
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	b29b      	uxth	r3, r3
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	4805      	ldr	r0, [pc, #20]	@ (80032ac <sensirion_i2c_hal_write+0x40>)
 8003296:	2464      	movs	r4, #100	@ 0x64
 8003298:	9400      	str	r4, [sp, #0]
 800329a:	f001 fe25 	bl	8004ee8 <HAL_I2C_Master_Transmit>
 800329e:	0003      	movs	r3, r0
 80032a0:	b25b      	sxtb	r3, r3
}
 80032a2:	0018      	movs	r0, r3
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b003      	add	sp, #12
 80032a8:	bd90      	pop	{r4, r7, pc}
 80032aa:	46c0      	nop			@ (mov r8, r8)
 80032ac:	20000118 	.word	0x20000118

080032b0 <sensirion_i2c_hal_sleep_usec>:

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	22fa      	movs	r2, #250	@ 0xfa
 80032bc:	0091      	lsls	r1, r2, #2
 80032be:	0018      	movs	r0, r3
 80032c0:	f7fc ff34 	bl	800012c <__udivsi3>
 80032c4:	0003      	movs	r3, r0
 80032c6:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	22fa      	movs	r2, #250	@ 0xfa
 80032cc:	0091      	lsls	r1, r2, #2
 80032ce:	0018      	movs	r0, r3
 80032d0:	f7fc ffb2 	bl	8000238 <__aeabi_uidivmod>
 80032d4:	1e0b      	subs	r3, r1, #0
 80032d6:	d002      	beq.n	80032de <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3301      	adds	r3, #1
 80032dc:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_GetHalVersion() < 0x01010100) {
 80032de:	f000 fc4f 	bl	8003b80 <HAL_GetHalVersion>
 80032e2:	0003      	movs	r3, r0
 80032e4:	4a06      	ldr	r2, [pc, #24]	@ (8003300 <sensirion_i2c_hal_sleep_usec+0x50>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d802      	bhi.n	80032f0 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	3301      	adds	r3, #1
 80032ee:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f000 fc04 	bl	8003b00 <HAL_Delay>
}
 80032f8:	46c0      	nop			@ (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b004      	add	sp, #16
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	010100ff 	.word	0x010100ff

08003304 <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	0002      	movs	r2, r0
 800330c:	1dfb      	adds	r3, r7, #7
 800330e:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 8003310:	4b03      	ldr	r3, [pc, #12]	@ (8003320 <sht4x_init+0x1c>)
 8003312:	1dfa      	adds	r2, r7, #7
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	701a      	strb	r2, [r3, #0]
}
 8003318:	46c0      	nop			@ (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b002      	add	sp, #8
 800331e:	bd80      	pop	{r7, pc}
 8003320:	200002ca 	.word	0x200002ca

08003324 <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 8003324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 800332e:	2516      	movs	r5, #22
 8003330:	197b      	adds	r3, r7, r5
 8003332:	2200      	movs	r2, #0
 8003334:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8003336:	4b2a      	ldr	r3, [pc, #168]	@ (80033e0 <sht4x_measure_high_precision_ticks+0xbc>)
 8003338:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 800333a:	260e      	movs	r6, #14
 800333c:	19bb      	adds	r3, r7, r6
 800333e:	2200      	movs	r2, #0
 8003340:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 8003342:	19bc      	adds	r4, r7, r6
 8003344:	19bb      	adds	r3, r7, r6
 8003346:	8819      	ldrh	r1, [r3, #0]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	22fd      	movs	r2, #253	@ 0xfd
 800334c:	0018      	movs	r0, r3
 800334e:	f7ff fea4 	bl	800309a <sensirion_i2c_add_command8_to_buffer>
 8003352:	0003      	movs	r3, r0
 8003354:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8003356:	4b23      	ldr	r3, [pc, #140]	@ (80033e4 <sht4x_measure_high_precision_ticks+0xc0>)
 8003358:	7818      	ldrb	r0, [r3, #0]
 800335a:	197c      	adds	r4, r7, r5
 800335c:	19bb      	adds	r3, r7, r6
 800335e:	881a      	ldrh	r2, [r3, #0]
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	0019      	movs	r1, r3
 8003364:	f7ff feb6 	bl	80030d4 <sensirion_i2c_write_data>
 8003368:	0003      	movs	r3, r0
 800336a:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 800336c:	197b      	adds	r3, r7, r5
 800336e:	2200      	movs	r2, #0
 8003370:	5e9b      	ldrsh	r3, [r3, r2]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 8003376:	197b      	adds	r3, r7, r5
 8003378:	2200      	movs	r2, #0
 800337a:	5e9b      	ldrsh	r3, [r3, r2]
 800337c:	e02c      	b.n	80033d8 <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 800337e:	4b1a      	ldr	r3, [pc, #104]	@ (80033e8 <sht4x_measure_high_precision_ticks+0xc4>)
 8003380:	0018      	movs	r0, r3
 8003382:	f7ff ff95 	bl	80032b0 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 8003386:	4b17      	ldr	r3, [pc, #92]	@ (80033e4 <sht4x_measure_high_precision_ticks+0xc0>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	2516      	movs	r5, #22
 800338c:	197c      	adds	r4, r7, r5
 800338e:	6939      	ldr	r1, [r7, #16]
 8003390:	2204      	movs	r2, #4
 8003392:	0018      	movs	r0, r3
 8003394:	f7ff feb7 	bl	8003106 <sensirion_i2c_read_data_inplace>
 8003398:	0003      	movs	r3, r0
 800339a:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 800339c:	197b      	adds	r3, r7, r5
 800339e:	2200      	movs	r2, #0
 80033a0:	5e9b      	ldrsh	r3, [r3, r2]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 80033a6:	197b      	adds	r3, r7, r5
 80033a8:	2200      	movs	r2, #0
 80033aa:	5e9b      	ldrsh	r3, [r3, r2]
 80033ac:	e014      	b.n	80033d8 <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff fde7 	bl	8002f84 <sensirion_common_bytes_to_uint16_t>
 80033b6:	0003      	movs	r3, r0
 80033b8:	001a      	movs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	3302      	adds	r3, #2
 80033c2:	0018      	movs	r0, r3
 80033c4:	f7ff fdde 	bl	8002f84 <sensirion_common_bytes_to_uint16_t>
 80033c8:	0003      	movs	r3, r0
 80033ca:	001a      	movs	r2, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	801a      	strh	r2, [r3, #0]
    return local_error;
 80033d0:	2316      	movs	r3, #22
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	2200      	movs	r2, #0
 80033d6:	5e9b      	ldrsh	r3, [r3, r2]
}
 80033d8:	0018      	movs	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	b007      	add	sp, #28
 80033de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033e0:	200002c4 	.word	0x200002c4
 80033e4:	200002ca 	.word	0x200002ca
 80033e8:	00002710 	.word	0x00002710

080033ec <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 80033ec:	b5b0      	push	{r4, r5, r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 80033f2:	250e      	movs	r5, #14
 80033f4:	197b      	adds	r3, r7, r5
 80033f6:	2200      	movs	r2, #0
 80033f8:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 80033fa:	4b17      	ldr	r3, [pc, #92]	@ (8003458 <sht4x_soft_reset+0x6c>)
 80033fc:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 80033fe:	1dbb      	adds	r3, r7, #6
 8003400:	2200      	movs	r2, #0
 8003402:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 8003404:	1dbc      	adds	r4, r7, #6
 8003406:	1dbb      	adds	r3, r7, #6
 8003408:	8819      	ldrh	r1, [r3, #0]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2294      	movs	r2, #148	@ 0x94
 800340e:	0018      	movs	r0, r3
 8003410:	f7ff fe43 	bl	800309a <sensirion_i2c_add_command8_to_buffer>
 8003414:	0003      	movs	r3, r0
 8003416:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8003418:	4b10      	ldr	r3, [pc, #64]	@ (800345c <sht4x_soft_reset+0x70>)
 800341a:	7818      	ldrb	r0, [r3, #0]
 800341c:	197c      	adds	r4, r7, r5
 800341e:	1dbb      	adds	r3, r7, #6
 8003420:	881a      	ldrh	r2, [r3, #0]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	0019      	movs	r1, r3
 8003426:	f7ff fe55 	bl	80030d4 <sensirion_i2c_write_data>
 800342a:	0003      	movs	r3, r0
 800342c:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 800342e:	197b      	adds	r3, r7, r5
 8003430:	2200      	movs	r2, #0
 8003432:	5e9b      	ldrsh	r3, [r3, r2]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <sht4x_soft_reset+0x54>
        return local_error;
 8003438:	197b      	adds	r3, r7, r5
 800343a:	2200      	movs	r2, #0
 800343c:	5e9b      	ldrsh	r3, [r3, r2]
 800343e:	e007      	b.n	8003450 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8003440:	4b07      	ldr	r3, [pc, #28]	@ (8003460 <sht4x_soft_reset+0x74>)
 8003442:	0018      	movs	r0, r3
 8003444:	f7ff ff34 	bl	80032b0 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8003448:	230e      	movs	r3, #14
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	2200      	movs	r2, #0
 800344e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b004      	add	sp, #16
 8003456:	bdb0      	pop	{r4, r5, r7, pc}
 8003458:	200002c4 	.word	0x200002c4
 800345c:	200002ca 	.word	0x200002ca
 8003460:	00002710 	.word	0x00002710

08003464 <enter_sleep_mode>:
#include "stm32l0xx_hal_rtc.h"
#include "sleep.h"
#include "../rtc/rtc.h"

void enter_sleep_mode()
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
	ConsolePrintf("Going to sleep...\r\n");
 8003468:	4b5f      	ldr	r3, [pc, #380]	@ (80035e8 <enter_sleep_mode+0x184>)
 800346a:	0018      	movs	r0, r3
 800346c:	f7fe febc 	bl	80021e8 <ConsolePrintf>
	
	// Configure all unused GPIO pins to analog mode for minimum power consumption
	configure_gpio_for_low_power();
 8003470:	f000 f972 	bl	8003758 <configure_gpio_for_low_power>
	ConsolePrintf("GPIO configured for low power\r\n");
 8003474:	4b5d      	ldr	r3, [pc, #372]	@ (80035ec <enter_sleep_mode+0x188>)
 8003476:	0018      	movs	r0, r3
 8003478:	f7fe feb6 	bl	80021e8 <ConsolePrintf>
	
	// Properly deinitialize peripherals before sleep
	HAL_I2C_DeInit(&hi2c1);
 800347c:	4b5c      	ldr	r3, [pc, #368]	@ (80035f0 <enter_sleep_mode+0x18c>)
 800347e:	0018      	movs	r0, r3
 8003480:	f001 fd02 	bl	8004e88 <HAL_I2C_DeInit>
	ConsolePrintf("I2C deinitialized\r\n");
 8003484:	4b5b      	ldr	r3, [pc, #364]	@ (80035f4 <enter_sleep_mode+0x190>)
 8003486:	0018      	movs	r0, r3
 8003488:	f7fe feae 	bl	80021e8 <ConsolePrintf>
	HAL_UART_DeInit(&huart1);
 800348c:	4b5a      	ldr	r3, [pc, #360]	@ (80035f8 <enter_sleep_mode+0x194>)
 800348e:	0018      	movs	r0, r3
 8003490:	f004 f82e 	bl	80074f0 <HAL_UART_DeInit>
	ConsolePrintf("UART1 deinitialized\r\n");
 8003494:	4b59      	ldr	r3, [pc, #356]	@ (80035fc <enter_sleep_mode+0x198>)
 8003496:	0018      	movs	r0, r3
 8003498:	f7fe fea6 	bl	80021e8 <ConsolePrintf>
	HAL_UART_DeInit(&hlpuart1);
 800349c:	4b58      	ldr	r3, [pc, #352]	@ (8003600 <enter_sleep_mode+0x19c>)
 800349e:	0018      	movs	r0, r3
 80034a0:	f004 f826 	bl	80074f0 <HAL_UART_DeInit>
	ConsolePrintf("LPUART1 deinitialized\r\n");
 80034a4:	4b57      	ldr	r3, [pc, #348]	@ (8003604 <enter_sleep_mode+0x1a0>)
 80034a6:	0018      	movs	r0, r3
 80034a8:	f7fe fe9e 	bl	80021e8 <ConsolePrintf>
	MX_ADC_DeInit();
 80034ac:	f000 f8d4 	bl	8003658 <MX_ADC_DeInit>
	
	// CRITICAL: Disable peripheral clocks completely before sleep
	__HAL_RCC_I2C1_CLK_DISABLE();
 80034b0:	4b55      	ldr	r3, [pc, #340]	@ (8003608 <enter_sleep_mode+0x1a4>)
 80034b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b4:	4b54      	ldr	r3, [pc, #336]	@ (8003608 <enter_sleep_mode+0x1a4>)
 80034b6:	4955      	ldr	r1, [pc, #340]	@ (800360c <enter_sleep_mode+0x1a8>)
 80034b8:	400a      	ands	r2, r1
 80034ba:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_RCC_USART1_CLK_DISABLE();
 80034bc:	4b52      	ldr	r3, [pc, #328]	@ (8003608 <enter_sleep_mode+0x1a4>)
 80034be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034c0:	4b51      	ldr	r3, [pc, #324]	@ (8003608 <enter_sleep_mode+0x1a4>)
 80034c2:	4953      	ldr	r1, [pc, #332]	@ (8003610 <enter_sleep_mode+0x1ac>)
 80034c4:	400a      	ands	r2, r1
 80034c6:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_RCC_LPUART1_CLK_DISABLE();
 80034c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003608 <enter_sleep_mode+0x1a4>)
 80034ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034cc:	4b4e      	ldr	r3, [pc, #312]	@ (8003608 <enter_sleep_mode+0x1a4>)
 80034ce:	4951      	ldr	r1, [pc, #324]	@ (8003614 <enter_sleep_mode+0x1b0>)
 80034d0:	400a      	ands	r2, r1
 80034d2:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_RCC_ADC1_CLK_DISABLE();
 80034d4:	4b4c      	ldr	r3, [pc, #304]	@ (8003608 <enter_sleep_mode+0x1a4>)
 80034d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034d8:	4b4b      	ldr	r3, [pc, #300]	@ (8003608 <enter_sleep_mode+0x1a4>)
 80034da:	494f      	ldr	r1, [pc, #316]	@ (8003618 <enter_sleep_mode+0x1b4>)
 80034dc:	400a      	ands	r2, r1
 80034de:	635a      	str	r2, [r3, #52]	@ 0x34
	ConsolePrintf("All peripheral clocks disabled\r\n");
 80034e0:	4b4e      	ldr	r3, [pc, #312]	@ (800361c <enter_sleep_mode+0x1b8>)
 80034e2:	0018      	movs	r0, r3
 80034e4:	f7fe fe80 	bl	80021e8 <ConsolePrintf>
	
	// CRITICAL: Disable VREFINT and temperature sensor to save power
	HAL_ADCEx_DisableVREFINT();
 80034e8:	f001 f890 	bl	800460c <HAL_ADCEx_DisableVREFINT>
	HAL_ADCEx_DisableVREFINTTempSensor();
 80034ec:	f001 f89e 	bl	800462c <HAL_ADCEx_DisableVREFINTTempSensor>
	ConsolePrintf("VREFINT and temp sensor disabled\r\n");
 80034f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003620 <enter_sleep_mode+0x1bc>)
 80034f2:	0018      	movs	r0, r3
 80034f4:	f7fe fe78 	bl	80021e8 <ConsolePrintf>
	
	// CRITICAL: Enable Ultra Low Power mode RIGHT BEFORE entering sleep
	// This ensures it's not disabled by any peripheral deinitialization
	HAL_PWREx_EnableUltraLowPower();
 80034f8:	f002 fc52 	bl	8005da0 <HAL_PWREx_EnableUltraLowPower>
	HAL_PWREx_EnableFastWakeUp();
 80034fc:	f002 fc42 	bl	8005d84 <HAL_PWREx_EnableFastWakeUp>
	ConsolePrintf("Ultra Low Power mode enabled\r\n");
 8003500:	4b48      	ldr	r3, [pc, #288]	@ (8003624 <enter_sleep_mode+0x1c0>)
 8003502:	0018      	movs	r0, r3
 8003504:	f7fe fe70 	bl	80021e8 <ConsolePrintf>
	
	// ULTRA-LOW POWER: Additional power optimizations
	apply_extreme_low_power_settings();
 8003508:	f000 f962 	bl	80037d0 <apply_extreme_low_power_settings>
	
	Enter_Stop_Mode();
 800350c:	f000 f8e8 	bl	80036e0 <Enter_Stop_Mode>
	
	ConsolePrintf("Resumed after wake-up\r\n");
 8003510:	4b45      	ldr	r3, [pc, #276]	@ (8003628 <enter_sleep_mode+0x1c4>)
 8003512:	0018      	movs	r0, r3
 8003514:	f7fe fe68 	bl	80021e8 <ConsolePrintf>
	
	SystemClock_Config_Wrapper();
 8003518:	f7fe fe3c 	bl	8002194 <SystemClock_Config_Wrapper>
	ConsolePrintf("System clock reconfigured\r\n");
 800351c:	4b43      	ldr	r3, [pc, #268]	@ (800362c <enter_sleep_mode+0x1c8>)
 800351e:	0018      	movs	r0, r3
 8003520:	f7fe fe62 	bl	80021e8 <ConsolePrintf>
	
	// CRITICAL: Re-enable Ultra Low Power mode IMMEDIATELY after system clock config
	// because SystemClock_Config resets the power regulator settings
	HAL_PWREx_EnableUltraLowPower();
 8003524:	f002 fc3c 	bl	8005da0 <HAL_PWREx_EnableUltraLowPower>
	HAL_PWREx_EnableFastWakeUp();
 8003528:	f002 fc2c 	bl	8005d84 <HAL_PWREx_EnableFastWakeUp>
	ConsolePrintf("Ultra Low Power mode re-enabled after system clock config\r\n");
 800352c:	4b40      	ldr	r3, [pc, #256]	@ (8003630 <enter_sleep_mode+0x1cc>)
 800352e:	0018      	movs	r0, r3
 8003530:	f7fe fe5a 	bl	80021e8 <ConsolePrintf>
	
	// Re-enable peripheral clocks before reinitializing peripherals
	__HAL_RCC_I2C1_CLK_ENABLE();
 8003534:	4b34      	ldr	r3, [pc, #208]	@ (8003608 <enter_sleep_mode+0x1a4>)
 8003536:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003538:	4b33      	ldr	r3, [pc, #204]	@ (8003608 <enter_sleep_mode+0x1a4>)
 800353a:	2180      	movs	r1, #128	@ 0x80
 800353c:	0389      	lsls	r1, r1, #14
 800353e:	430a      	orrs	r2, r1
 8003540:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_RCC_USART1_CLK_ENABLE();
 8003542:	4b31      	ldr	r3, [pc, #196]	@ (8003608 <enter_sleep_mode+0x1a4>)
 8003544:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003546:	4b30      	ldr	r3, [pc, #192]	@ (8003608 <enter_sleep_mode+0x1a4>)
 8003548:	2180      	movs	r1, #128	@ 0x80
 800354a:	01c9      	lsls	r1, r1, #7
 800354c:	430a      	orrs	r2, r1
 800354e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_RCC_LPUART1_CLK_ENABLE();
 8003550:	4b2d      	ldr	r3, [pc, #180]	@ (8003608 <enter_sleep_mode+0x1a4>)
 8003552:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003554:	4b2c      	ldr	r3, [pc, #176]	@ (8003608 <enter_sleep_mode+0x1a4>)
 8003556:	2180      	movs	r1, #128	@ 0x80
 8003558:	02c9      	lsls	r1, r1, #11
 800355a:	430a      	orrs	r2, r1
 800355c:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_RCC_ADC1_CLK_ENABLE();
 800355e:	4b2a      	ldr	r3, [pc, #168]	@ (8003608 <enter_sleep_mode+0x1a4>)
 8003560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003562:	4b29      	ldr	r3, [pc, #164]	@ (8003608 <enter_sleep_mode+0x1a4>)
 8003564:	2180      	movs	r1, #128	@ 0x80
 8003566:	0089      	lsls	r1, r1, #2
 8003568:	430a      	orrs	r2, r1
 800356a:	635a      	str	r2, [r3, #52]	@ 0x34
	ConsolePrintf("Peripheral clocks re-enabled\r\n");
 800356c:	4b31      	ldr	r3, [pc, #196]	@ (8003634 <enter_sleep_mode+0x1d0>)
 800356e:	0018      	movs	r0, r3
 8003570:	f7fe fe3a 	bl	80021e8 <ConsolePrintf>
	
	// Restore GPIO configuration after sleep
	restore_gpio_after_sleep();
 8003574:	f000 f924 	bl	80037c0 <restore_gpio_after_sleep>
	
	// CRITICAL: Re-configure unused pins for low power after GPIO restoration
	// The GPIO init wrapper restores all pins, but we need unused ones back to analog
	configure_gpio_for_low_power();
 8003578:	f000 f8ee 	bl	8003758 <configure_gpio_for_low_power>
	
	MX_I2C1_Init_Wrapper();
 800357c:	f7fe fe18 	bl	80021b0 <MX_I2C1_Init_Wrapper>
	ConsolePrintf("I2C1 reinitialized\r\n");
 8003580:	4b2d      	ldr	r3, [pc, #180]	@ (8003638 <enter_sleep_mode+0x1d4>)
 8003582:	0018      	movs	r0, r3
 8003584:	f7fe fe30 	bl	80021e8 <ConsolePrintf>
	MX_USART1_UART_Init_Wrapper();
 8003588:	f7fe fe19 	bl	80021be <MX_USART1_UART_Init_Wrapper>
	ConsolePrintf("UART reinitialized\r\n");
 800358c:	4b2b      	ldr	r3, [pc, #172]	@ (800363c <enter_sleep_mode+0x1d8>)
 800358e:	0018      	movs	r0, r3
 8003590:	f7fe fe2a 	bl	80021e8 <ConsolePrintf>
	MX_LPUART1_UART_Init_Wrapper();
 8003594:	f7fe fe1a 	bl	80021cc <MX_LPUART1_UART_Init_Wrapper>
	ConsolePrintf("LPUART1 (lora) reinitialized\r\n");
 8003598:	4b29      	ldr	r3, [pc, #164]	@ (8003640 <enter_sleep_mode+0x1dc>)
 800359a:	0018      	movs	r0, r3
 800359c:	f7fe fe24 	bl	80021e8 <ConsolePrintf>
	RTC_WakeUp_Init_Calibrated();
 80035a0:	f7ff f8a4 	bl	80026ec <RTC_WakeUp_Init_Calibrated>
	ConsolePrintf("RTC Wake-Up Timer reinitialized with calibration\r\n");
 80035a4:	4b27      	ldr	r3, [pc, #156]	@ (8003644 <enter_sleep_mode+0x1e0>)
 80035a6:	0018      	movs	r0, r3
 80035a8:	f7fe fe1e 	bl	80021e8 <ConsolePrintf>
	
	// CRITICAL: Re-enable Ultra Low Power mode after RTC init
	// RTC initialization might affect power settings
	HAL_PWREx_EnableUltraLowPower();
 80035ac:	f002 fbf8 	bl	8005da0 <HAL_PWREx_EnableUltraLowPower>
	HAL_PWREx_EnableFastWakeUp();
 80035b0:	f002 fbe8 	bl	8005d84 <HAL_PWREx_EnableFastWakeUp>
	ConsolePrintf("Ultra Low Power mode re-enabled after RTC init\r\n");
 80035b4:	4b24      	ldr	r3, [pc, #144]	@ (8003648 <enter_sleep_mode+0x1e4>)
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7fe fe16 	bl	80021e8 <ConsolePrintf>
	
	MX_ADC_Init_Wrapper();
 80035bc:	f7fe fe0d 	bl	80021da <MX_ADC_Init_Wrapper>
	ConsolePrintf("ADC reinitialized\r\n");
 80035c0:	4b22      	ldr	r3, [pc, #136]	@ (800364c <enter_sleep_mode+0x1e8>)
 80035c2:	0018      	movs	r0, r3
 80035c4:	f7fe fe10 	bl	80021e8 <ConsolePrintf>
	
	// CRITICAL: Re-disable VREFINT and temp sensor after ADC reinit
	// ADC initialization re-enables these, causing high power consumption in subsequent sleeps
	HAL_ADCEx_DisableVREFINT();
 80035c8:	f001 f820 	bl	800460c <HAL_ADCEx_DisableVREFINT>
	HAL_ADCEx_DisableVREFINTTempSensor();
 80035cc:	f001 f82e 	bl	800462c <HAL_ADCEx_DisableVREFINTTempSensor>
	ConsolePrintf("CRITICAL: VREFINT and temp sensor re-disabled after ADC init\r\n");
 80035d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003650 <enter_sleep_mode+0x1ec>)
 80035d2:	0018      	movs	r0, r3
 80035d4:	f7fe fe08 	bl	80021e8 <ConsolePrintf>
	ConsolePrintf("Power management cycle complete - ready for next sleep\r\n");
 80035d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003654 <enter_sleep_mode+0x1f0>)
 80035da:	0018      	movs	r0, r3
 80035dc:	f7fe fe04 	bl	80021e8 <ConsolePrintf>
}
 80035e0:	46c0      	nop			@ (mov r8, r8)
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	08009d1c 	.word	0x08009d1c
 80035ec:	08009d30 	.word	0x08009d30
 80035f0:	20000118 	.word	0x20000118
 80035f4:	08009d50 	.word	0x08009d50
 80035f8:	200001f4 	.word	0x200001f4
 80035fc:	08009d64 	.word	0x08009d64
 8003600:	2000016c 	.word	0x2000016c
 8003604:	08009d7c 	.word	0x08009d7c
 8003608:	40021000 	.word	0x40021000
 800360c:	ffdfffff 	.word	0xffdfffff
 8003610:	ffffbfff 	.word	0xffffbfff
 8003614:	fffbffff 	.word	0xfffbffff
 8003618:	fffffdff 	.word	0xfffffdff
 800361c:	08009d94 	.word	0x08009d94
 8003620:	08009db8 	.word	0x08009db8
 8003624:	08009ddc 	.word	0x08009ddc
 8003628:	08009dfc 	.word	0x08009dfc
 800362c:	08009e14 	.word	0x08009e14
 8003630:	08009e30 	.word	0x08009e30
 8003634:	08009e6c 	.word	0x08009e6c
 8003638:	08009e8c 	.word	0x08009e8c
 800363c:	08009ea4 	.word	0x08009ea4
 8003640:	08009ebc 	.word	0x08009ebc
 8003644:	08009edc 	.word	0x08009edc
 8003648:	08009f10 	.word	0x08009f10
 800364c:	08009f44 	.word	0x08009f44
 8003650:	08009f58 	.word	0x08009f58
 8003654:	08009f98 	.word	0x08009f98

08003658 <MX_ADC_DeInit>:

void MX_ADC_DeInit(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
    ConsolePrintf("Deinitializing ADC...\r\n");
 800365c:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <MX_ADC_DeInit+0x64>)
 800365e:	0018      	movs	r0, r3
 8003660:	f7fe fdc2 	bl	80021e8 <ConsolePrintf>
    
    /* 1) Stop any ongoing ADC conversions */
    if (HAL_ADC_Stop(&hadc) != HAL_OK) {
 8003664:	4b16      	ldr	r3, [pc, #88]	@ (80036c0 <MX_ADC_DeInit+0x68>)
 8003666:	0018      	movs	r0, r3
 8003668:	f000 fd0c 	bl	8004084 <HAL_ADC_Stop>
 800366c:	1e03      	subs	r3, r0, #0
 800366e:	d003      	beq.n	8003678 <MX_ADC_DeInit+0x20>
        ConsolePrintf("ADC Stop failed\r\n");
 8003670:	4b14      	ldr	r3, [pc, #80]	@ (80036c4 <MX_ADC_DeInit+0x6c>)
 8003672:	0018      	movs	r0, r3
 8003674:	f7fe fdb8 	bl	80021e8 <ConsolePrintf>
    }
    
    /* 2) De‑initialize the ADC handle */
    if (HAL_ADC_DeInit(&hadc) != HAL_OK) {
 8003678:	4b11      	ldr	r3, [pc, #68]	@ (80036c0 <MX_ADC_DeInit+0x68>)
 800367a:	0018      	movs	r0, r3
 800367c:	f000 fc12 	bl	8003ea4 <HAL_ADC_DeInit>
 8003680:	1e03      	subs	r3, r0, #0
 8003682:	d005      	beq.n	8003690 <MX_ADC_DeInit+0x38>
        ConsolePrintf("ADC DeInit failed\r\n");
 8003684:	4b10      	ldr	r3, [pc, #64]	@ (80036c8 <MX_ADC_DeInit+0x70>)
 8003686:	0018      	movs	r0, r3
 8003688:	f7fe fdae 	bl	80021e8 <ConsolePrintf>
        Error_Handler();
 800368c:	f7fe fe22 	bl	80022d4 <Error_Handler>
    }
    
    /* 3) Disable the ADC clock */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8003690:	4b0e      	ldr	r3, [pc, #56]	@ (80036cc <MX_ADC_DeInit+0x74>)
 8003692:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003694:	4b0d      	ldr	r3, [pc, #52]	@ (80036cc <MX_ADC_DeInit+0x74>)
 8003696:	490e      	ldr	r1, [pc, #56]	@ (80036d0 <MX_ADC_DeInit+0x78>)
 8003698:	400a      	ands	r2, r1
 800369a:	635a      	str	r2, [r3, #52]	@ 0x34
    ConsolePrintf("ADC clock disabled\r\n");
 800369c:	4b0d      	ldr	r3, [pc, #52]	@ (80036d4 <MX_ADC_DeInit+0x7c>)
 800369e:	0018      	movs	r0, r3
 80036a0:	f7fe fda2 	bl	80021e8 <ConsolePrintf>

    /* 4) Reset the GPIO pin back to its default state (analog mode) */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 80036a4:	4b0c      	ldr	r3, [pc, #48]	@ (80036d8 <MX_ADC_DeInit+0x80>)
 80036a6:	2102      	movs	r1, #2
 80036a8:	0018      	movs	r0, r3
 80036aa:	f001 fa2b 	bl	8004b04 <HAL_GPIO_DeInit>
    
    ConsolePrintf("ADC deinitialization complete\r\n");
 80036ae:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <MX_ADC_DeInit+0x84>)
 80036b0:	0018      	movs	r0, r3
 80036b2:	f7fe fd99 	bl	80021e8 <ConsolePrintf>
}
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	08009fd4 	.word	0x08009fd4
 80036c0:	200000bc 	.word	0x200000bc
 80036c4:	08009fec 	.word	0x08009fec
 80036c8:	0800a000 	.word	0x0800a000
 80036cc:	40021000 	.word	0x40021000
 80036d0:	fffffdff 	.word	0xfffffdff
 80036d4:	0800a014 	.word	0x0800a014
 80036d8:	50000400 	.word	0x50000400
 80036dc:	0800a02c 	.word	0x0800a02c

080036e0 <Enter_Stop_Mode>:

void Enter_Stop_Mode(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  ConsolePrintf("Preparing to enter Stop mode\r\n");
 80036e4:	4b12      	ldr	r3, [pc, #72]	@ (8003730 <Enter_Stop_Mode+0x50>)
 80036e6:	0018      	movs	r0, r3
 80036e8:	f7fe fd7e 	bl	80021e8 <ConsolePrintf>

  // Clear Wake-Up flag
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 80036ec:	4b11      	ldr	r3, [pc, #68]	@ (8003734 <Enter_Stop_Mode+0x54>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	22ff      	movs	r2, #255	@ 0xff
 80036f4:	401a      	ands	r2, r3
 80036f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003734 <Enter_Stop_Mode+0x54>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	490f      	ldr	r1, [pc, #60]	@ (8003738 <Enter_Stop_Mode+0x58>)
 80036fc:	430a      	orrs	r2, r1
 80036fe:	60da      	str	r2, [r3, #12]
  ConsolePrintf("RTC Wake-Up flag cleared\r\n");
 8003700:	4b0e      	ldr	r3, [pc, #56]	@ (800373c <Enter_Stop_Mode+0x5c>)
 8003702:	0018      	movs	r0, r3
 8003704:	f7fe fd70 	bl	80021e8 <ConsolePrintf>
  
  // Enter Stop mode (low-power mode)
  ConsolePrintf("Entering Stop mode\r\n");
 8003708:	4b0d      	ldr	r3, [pc, #52]	@ (8003740 <Enter_Stop_Mode+0x60>)
 800370a:	0018      	movs	r0, r3
 800370c:	f7fe fd6c 	bl	80021e8 <ConsolePrintf>
  /* Suspend SysTick to prevent it from waking up the MCU immediately */
  HAL_SuspendTick();
 8003710:	f000 fa1a 	bl	8003b48 <HAL_SuspendTick>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003714:	2101      	movs	r1, #1
 8003716:	2001      	movs	r0, #1
 8003718:	f002 fad8 	bl	8005ccc <HAL_PWR_EnterSTOPMode>
  /* Resume SysTick after waking up */
  HAL_ResumeTick();
 800371c:	f000 fa22 	bl	8003b64 <HAL_ResumeTick>
  
  ConsolePrintf("Exited Stop mode\r\n");
 8003720:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <Enter_Stop_Mode+0x64>)
 8003722:	0018      	movs	r0, r3
 8003724:	f7fe fd60 	bl	80021e8 <ConsolePrintf>
}
 8003728:	46c0      	nop			@ (mov r8, r8)
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	0800a04c 	.word	0x0800a04c
 8003734:	2000027c 	.word	0x2000027c
 8003738:	fffffb7f 	.word	0xfffffb7f
 800373c:	0800a06c 	.word	0x0800a06c
 8003740:	0800a088 	.word	0x0800a088
 8003744:	0800a0a0 	.word	0x0800a0a0

08003748 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  // System clock will be reconfigured in the main wake-up sequence
  // No need to do it here to avoid conflicts
}
 8003750:	46c0      	nop			@ (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b002      	add	sp, #8
 8003756:	bd80      	pop	{r7, pc}

08003758 <configure_gpio_for_low_power>:

void configure_gpio_for_low_power(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	0018      	movs	r0, r3
 8003762:	2314      	movs	r3, #20
 8003764:	001a      	movs	r2, r3
 8003766:	2100      	movs	r1, #0
 8003768:	f004 ff7a 	bl	8008660 <memset>
    
    // Configure all unused GPIO pins to analog mode to minimize leakage current
    // This is CRITICAL for achieving lowest power consumption
    
    // GPIOA: Set unused pins to analog mode (except PA0 - VBAT_MEAS, PA2/PA3 - USART1, PA9/PA10 if used)
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | 
 800376c:	1d3b      	adds	r3, r7, #4
 800376e:	4a11      	ldr	r2, [pc, #68]	@ (80037b4 <configure_gpio_for_low_power+0x5c>)
 8003770:	601a      	str	r2, [r3, #0]
                          GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003772:	1d3b      	adds	r3, r7, #4
 8003774:	2203      	movs	r2, #3
 8003776:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003778:	1d3b      	adds	r3, r7, #4
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800377e:	1d3a      	adds	r2, r7, #4
 8003780:	23a0      	movs	r3, #160	@ 0xa0
 8003782:	05db      	lsls	r3, r3, #23
 8003784:	0011      	movs	r1, r2
 8003786:	0018      	movs	r0, r3
 8003788:	f001 f83e 	bl	8004808 <HAL_GPIO_Init>
    
    // GPIOB: Set unused pins to analog mode (except PB0 - VBAT_MEAS_EN, PB1 - ADC, PB5 - I2C_ENABLE, PB6/PB7 - I2C1, PB10/PB11 - LPUART1)
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_8 | 
 800378c:	1d3b      	adds	r3, r7, #4
 800378e:	4a0a      	ldr	r2, [pc, #40]	@ (80037b8 <configure_gpio_for_low_power+0x60>)
 8003790:	601a      	str	r2, [r3, #0]
                          GPIO_PIN_9 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	2203      	movs	r2, #3
 8003796:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	2200      	movs	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800379e:	1d3b      	adds	r3, r7, #4
 80037a0:	4a06      	ldr	r2, [pc, #24]	@ (80037bc <configure_gpio_for_low_power+0x64>)
 80037a2:	0019      	movs	r1, r3
 80037a4:	0010      	movs	r0, r2
 80037a6:	f001 f82f 	bl	8004808 <HAL_GPIO_Init>
}
 80037aa:	46c0      	nop			@ (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b006      	add	sp, #24
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	000099f2 	.word	0x000099f2
 80037b8:	0000f31c 	.word	0x0000f31c
 80037bc:	50000400 	.word	0x50000400

080037c0 <restore_gpio_after_sleep>:

void restore_gpio_after_sleep(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
    // Re-initialize GPIO pins that need to be restored after sleep
    // This should restore only the pins that are actually used
    // Most pins can remain in analog mode
    MX_GPIO_Init_Wrapper(); // This will restore the necessary GPIO configurations
 80037c4:	f7fe fced 	bl	80021a2 <MX_GPIO_Init_Wrapper>
}
 80037c8:	46c0      	nop			@ (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <apply_extreme_low_power_settings>:

void apply_extreme_low_power_settings(void)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	af00      	add	r7, sp, #0
    ConsolePrintf("Applying extreme low power settings...\r\n");
 80037d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003848 <apply_extreme_low_power_settings+0x78>)
 80037d6:	0018      	movs	r0, r3
 80037d8:	f7fe fd06 	bl	80021e8 <ConsolePrintf>
    
    // 1. Disable all unused peripheral clocks that might still be running
    __HAL_RCC_GPIOA_CLK_DISABLE();  // We'll re-enable only what we need
 80037dc:	4b1b      	ldr	r3, [pc, #108]	@ (800384c <apply_extreme_low_power_settings+0x7c>)
 80037de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e0:	4b1a      	ldr	r3, [pc, #104]	@ (800384c <apply_extreme_low_power_settings+0x7c>)
 80037e2:	2101      	movs	r1, #1
 80037e4:	438a      	bics	r2, r1
 80037e6:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_DISABLE();
 80037e8:	4b18      	ldr	r3, [pc, #96]	@ (800384c <apply_extreme_low_power_settings+0x7c>)
 80037ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ec:	4b17      	ldr	r3, [pc, #92]	@ (800384c <apply_extreme_low_power_settings+0x7c>)
 80037ee:	2102      	movs	r1, #2
 80037f0:	438a      	bics	r2, r1
 80037f2:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_DMA1_CLK_DISABLE();
 80037f4:	4b15      	ldr	r3, [pc, #84]	@ (800384c <apply_extreme_low_power_settings+0x7c>)
 80037f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037f8:	4b14      	ldr	r3, [pc, #80]	@ (800384c <apply_extreme_low_power_settings+0x7c>)
 80037fa:	2101      	movs	r1, #1
 80037fc:	438a      	bics	r2, r1
 80037fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_SYSCFG_CLK_DISABLE();
 8003800:	4b12      	ldr	r3, [pc, #72]	@ (800384c <apply_extreme_low_power_settings+0x7c>)
 8003802:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003804:	4b11      	ldr	r3, [pc, #68]	@ (800384c <apply_extreme_low_power_settings+0x7c>)
 8003806:	2101      	movs	r1, #1
 8003808:	438a      	bics	r2, r1
 800380a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    // 2. Configure voltage regulator for lowest power
    HAL_PWREx_EnableUltraLowPower();
 800380c:	f002 fac8 	bl	8005da0 <HAL_PWREx_EnableUltraLowPower>
    HAL_PWREx_EnableFastWakeUp();
 8003810:	f002 fab8 	bl	8005d84 <HAL_PWREx_EnableFastWakeUp>
    
    // 3. Use the lowest power regulator mode
    HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003814:	2101      	movs	r1, #1
 8003816:	2001      	movs	r0, #1
 8003818:	f002 fa00 	bl	8005c1c <HAL_PWR_EnterSLEEPMode>
    
    // 4. Ensure VREFINT and temperature sensor are truly disabled
    // These can consume significant power if left enabled
    HAL_ADCEx_DisableVREFINT();
 800381c:	f000 fef6 	bl	800460c <HAL_ADCEx_DisableVREFINT>
    ConsolePrintf("VREFINT disabled for ultra-low power\r\n");
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <apply_extreme_low_power_settings+0x80>)
 8003822:	0018      	movs	r0, r3
 8003824:	f7fe fce0 	bl	80021e8 <ConsolePrintf>
    
    HAL_ADCEx_DisableVREFINTTempSensor();
 8003828:	f000 ff00 	bl	800462c <HAL_ADCEx_DisableVREFINTTempSensor>
    ConsolePrintf("Temperature sensor disabled for ultra-low power\r\n");
 800382c:	4b09      	ldr	r3, [pc, #36]	@ (8003854 <apply_extreme_low_power_settings+0x84>)
 800382e:	0018      	movs	r0, r3
 8003830:	f7fe fcda 	bl	80021e8 <ConsolePrintf>
    
    // 5. Configure all GPIO ports for minimum leakage
    configure_all_gpio_for_minimum_power();
 8003834:	f000 f812 	bl	800385c <configure_all_gpio_for_minimum_power>
    
    ConsolePrintf("Extreme low power settings applied - expect <1µA sleep current\r\n");
 8003838:	4b07      	ldr	r3, [pc, #28]	@ (8003858 <apply_extreme_low_power_settings+0x88>)
 800383a:	0018      	movs	r0, r3
 800383c:	f7fe fcd4 	bl	80021e8 <ConsolePrintf>
}
 8003840:	46c0      	nop			@ (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	46c0      	nop			@ (mov r8, r8)
 8003848:	0800a0b4 	.word	0x0800a0b4
 800384c:	40021000 	.word	0x40021000
 8003850:	0800a0e0 	.word	0x0800a0e0
 8003854:	0800a108 	.word	0x0800a108
 8003858:	0800a13c 	.word	0x0800a13c

0800385c <configure_all_gpio_for_minimum_power>:

void configure_all_gpio_for_minimum_power(void)
{
 800385c:	b590      	push	{r4, r7, lr}
 800385e:	b08b      	sub	sp, #44	@ 0x2c
 8003860:	af00      	add	r7, sp, #0
    // Enable GPIO clocks temporarily to configure them
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003862:	4b51      	ldr	r3, [pc, #324]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 8003864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003866:	4b50      	ldr	r3, [pc, #320]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 8003868:	2101      	movs	r1, #1
 800386a:	430a      	orrs	r2, r1
 800386c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800386e:	4b4e      	ldr	r3, [pc, #312]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 8003870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003872:	2201      	movs	r2, #1
 8003874:	4013      	ands	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800387a:	4b4b      	ldr	r3, [pc, #300]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 800387c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800387e:	4b4a      	ldr	r3, [pc, #296]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 8003880:	2102      	movs	r1, #2
 8003882:	430a      	orrs	r2, r1
 8003884:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003886:	4b48      	ldr	r3, [pc, #288]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 8003888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388a:	2202      	movs	r2, #2
 800388c:	4013      	ands	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();  // If available
 8003892:	4b45      	ldr	r3, [pc, #276]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 8003894:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003896:	4b44      	ldr	r3, [pc, #272]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 8003898:	2104      	movs	r1, #4
 800389a:	430a      	orrs	r2, r1
 800389c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800389e:	4b42      	ldr	r3, [pc, #264]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 80038a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a2:	2204      	movs	r2, #4
 80038a4:	4013      	ands	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
 80038a8:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();  // If available
 80038aa:	4b3f      	ldr	r3, [pc, #252]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 80038ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038ae:	4b3e      	ldr	r3, [pc, #248]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 80038b0:	2108      	movs	r1, #8
 80038b2:	430a      	orrs	r2, r1
 80038b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80038b6:	4b3c      	ldr	r3, [pc, #240]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 80038b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ba:	2208      	movs	r2, #8
 80038bc:	4013      	ands	r3, r2
 80038be:	607b      	str	r3, [r7, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();  // If available
 80038c2:	4b39      	ldr	r3, [pc, #228]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 80038c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038c6:	4b38      	ldr	r3, [pc, #224]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 80038c8:	2180      	movs	r1, #128	@ 0x80
 80038ca:	430a      	orrs	r2, r1
 80038cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80038ce:	4b36      	ldr	r3, [pc, #216]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 80038d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d2:	2280      	movs	r2, #128	@ 0x80
 80038d4:	4013      	ands	r3, r2
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	683b      	ldr	r3, [r7, #0]
    
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038da:	2414      	movs	r4, #20
 80038dc:	193b      	adds	r3, r7, r4
 80038de:	0018      	movs	r0, r3
 80038e0:	2314      	movs	r3, #20
 80038e2:	001a      	movs	r2, r3
 80038e4:	2100      	movs	r1, #0
 80038e6:	f004 febb 	bl	8008660 <memset>
    
    // Configure ALL pins as analog input with no pull to minimize leakage
    // This is the absolute lowest power configuration
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038ea:	193b      	adds	r3, r7, r4
 80038ec:	2203      	movs	r2, #3
 80038ee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f0:	193b      	adds	r3, r7, r4
 80038f2:	2200      	movs	r2, #0
 80038f4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038f6:	193b      	adds	r3, r7, r4
 80038f8:	2200      	movs	r2, #0
 80038fa:	60da      	str	r2, [r3, #12]
    
    // GPIOA - Configure all pins except those we absolutely need
    // Keep PA2/PA3 (USART1), others can be analog
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | 
 80038fc:	193b      	adds	r3, r7, r4
 80038fe:	4a2b      	ldr	r2, [pc, #172]	@ (80039ac <configure_all_gpio_for_minimum_power+0x150>)
 8003900:	601a      	str	r2, [r3, #0]
                          GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |
                          GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                          GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003902:	193a      	adds	r2, r7, r4
 8003904:	23a0      	movs	r3, #160	@ 0xa0
 8003906:	05db      	lsls	r3, r3, #23
 8003908:	0011      	movs	r1, r2
 800390a:	0018      	movs	r0, r3
 800390c:	f000 ff7c 	bl	8004808 <HAL_GPIO_Init>
    
    // GPIOB - Configure unused pins only
    // Keep PB0 (VBAT_MEAS_EN), PB5 (I2C_ENABLE), PB6/PB7 (I2C), PB10/PB11 (LPUART1)
    GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | 
 8003910:	193b      	adds	r3, r7, r4
 8003912:	4a27      	ldr	r2, [pc, #156]	@ (80039b0 <configure_all_gpio_for_minimum_power+0x154>)
 8003914:	601a      	str	r2, [r3, #0]
                          GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_12 | GPIO_PIN_13 |
                          GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003916:	193b      	adds	r3, r7, r4
 8003918:	4a26      	ldr	r2, [pc, #152]	@ (80039b4 <configure_all_gpio_for_minimum_power+0x158>)
 800391a:	0019      	movs	r1, r3
 800391c:	0010      	movs	r0, r2
 800391e:	f000 ff73 	bl	8004808 <HAL_GPIO_Init>
    
    // Configure any other GPIO ports if they exist on your MCU
    #ifdef GPIOC
    GPIO_InitStruct.Pin = GPIO_PIN_All;
 8003922:	193b      	adds	r3, r7, r4
 8003924:	4a24      	ldr	r2, [pc, #144]	@ (80039b8 <configure_all_gpio_for_minimum_power+0x15c>)
 8003926:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003928:	193b      	adds	r3, r7, r4
 800392a:	4a24      	ldr	r2, [pc, #144]	@ (80039bc <configure_all_gpio_for_minimum_power+0x160>)
 800392c:	0019      	movs	r1, r3
 800392e:	0010      	movs	r0, r2
 8003930:	f000 ff6a 	bl	8004808 <HAL_GPIO_Init>
    #endif
    
    #ifdef GPIOD  
    GPIO_InitStruct.Pin = GPIO_PIN_All;
 8003934:	193b      	adds	r3, r7, r4
 8003936:	4a20      	ldr	r2, [pc, #128]	@ (80039b8 <configure_all_gpio_for_minimum_power+0x15c>)
 8003938:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800393a:	193b      	adds	r3, r7, r4
 800393c:	4a20      	ldr	r2, [pc, #128]	@ (80039c0 <configure_all_gpio_for_minimum_power+0x164>)
 800393e:	0019      	movs	r1, r3
 8003940:	0010      	movs	r0, r2
 8003942:	f000 ff61 	bl	8004808 <HAL_GPIO_Init>
    #endif
    
    #ifdef GPIOH
    GPIO_InitStruct.Pin = GPIO_PIN_All;
 8003946:	0021      	movs	r1, r4
 8003948:	187b      	adds	r3, r7, r1
 800394a:	4a1b      	ldr	r2, [pc, #108]	@ (80039b8 <configure_all_gpio_for_minimum_power+0x15c>)
 800394c:	601a      	str	r2, [r3, #0]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800394e:	187b      	adds	r3, r7, r1
 8003950:	4a1c      	ldr	r2, [pc, #112]	@ (80039c4 <configure_all_gpio_for_minimum_power+0x168>)
 8003952:	0019      	movs	r1, r3
 8003954:	0010      	movs	r0, r2
 8003956:	f000 ff57 	bl	8004808 <HAL_GPIO_Init>
    #endif
    
    // Now disable GPIO clocks to save even more power
    // We'll re-enable them when we wake up
    __HAL_RCC_GPIOA_CLK_DISABLE();
 800395a:	4b13      	ldr	r3, [pc, #76]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 800395c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800395e:	4b12      	ldr	r3, [pc, #72]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 8003960:	2101      	movs	r1, #1
 8003962:	438a      	bics	r2, r1
 8003964:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_DISABLE();
 8003966:	4b10      	ldr	r3, [pc, #64]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 8003968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800396a:	4b0f      	ldr	r3, [pc, #60]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 800396c:	2102      	movs	r1, #2
 800396e:	438a      	bics	r2, r1
 8003970:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_GPIOC_CLK_DISABLE();
 8003972:	4b0d      	ldr	r3, [pc, #52]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 8003974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003976:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 8003978:	2104      	movs	r1, #4
 800397a:	438a      	bics	r2, r1
 800397c:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_GPIOD_CLK_DISABLE();
 800397e:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 8003980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003982:	4b09      	ldr	r3, [pc, #36]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 8003984:	2108      	movs	r1, #8
 8003986:	438a      	bics	r2, r1
 8003988:	62da      	str	r2, [r3, #44]	@ 0x2c
    __HAL_RCC_GPIOH_CLK_DISABLE();
 800398a:	4b07      	ldr	r3, [pc, #28]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 800398c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800398e:	4b06      	ldr	r3, [pc, #24]	@ (80039a8 <configure_all_gpio_for_minimum_power+0x14c>)
 8003990:	2180      	movs	r1, #128	@ 0x80
 8003992:	438a      	bics	r2, r1
 8003994:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    ConsolePrintf("All GPIO configured for minimum power consumption\r\n");
 8003996:	4b0c      	ldr	r3, [pc, #48]	@ (80039c8 <configure_all_gpio_for_minimum_power+0x16c>)
 8003998:	0018      	movs	r0, r3
 800399a:	f7fe fc25 	bl	80021e8 <ConsolePrintf>
}
 800399e:	46c0      	nop			@ (mov r8, r8)
 80039a0:	46bd      	mov	sp, r7
 80039a2:	b00b      	add	sp, #44	@ 0x2c
 80039a4:	bd90      	pop	{r4, r7, pc}
 80039a6:	46c0      	nop			@ (mov r8, r8)
 80039a8:	40021000 	.word	0x40021000
 80039ac:	0000fff3 	.word	0x0000fff3
 80039b0:	0000f31e 	.word	0x0000f31e
 80039b4:	50000400 	.word	0x50000400
 80039b8:	0000ffff 	.word	0x0000ffff
 80039bc:	50000800 	.word	0x50000800
 80039c0:	50000c00 	.word	0x50000c00
 80039c4:	50001c00 	.word	0x50001c00
 80039c8:	0800a180 	.word	0x0800a180

080039cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80039cc:	480d      	ldr	r0, [pc, #52]	@ (8003a04 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80039ce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80039d0:	f7fe fe86 	bl	80026e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039d4:	480c      	ldr	r0, [pc, #48]	@ (8003a08 <LoopForever+0x6>)
  ldr r1, =_edata
 80039d6:	490d      	ldr	r1, [pc, #52]	@ (8003a0c <LoopForever+0xa>)
  ldr r2, =_sidata
 80039d8:	4a0d      	ldr	r2, [pc, #52]	@ (8003a10 <LoopForever+0xe>)
  movs r3, #0
 80039da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039dc:	e002      	b.n	80039e4 <LoopCopyDataInit>

080039de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039e2:	3304      	adds	r3, #4

080039e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039e8:	d3f9      	bcc.n	80039de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003a14 <LoopForever+0x12>)
  ldr r4, =_ebss
 80039ec:	4c0a      	ldr	r4, [pc, #40]	@ (8003a18 <LoopForever+0x16>)
  movs r3, #0
 80039ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039f0:	e001      	b.n	80039f6 <LoopFillZerobss>

080039f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039f4:	3204      	adds	r2, #4

080039f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039f8:	d3fb      	bcc.n	80039f2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80039fa:	f004 fe55 	bl	80086a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039fe:	f7fe f8f7 	bl	8001bf0 <main>

08003a02 <LoopForever>:

LoopForever:
    b LoopForever
 8003a02:	e7fe      	b.n	8003a02 <LoopForever>
   ldr   r0, =_estack
 8003a04:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8003a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a0c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8003a10:	0800a3e8 	.word	0x0800a3e8
  ldr r2, =_sbss
 8003a14:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8003a18:	20000418 	.word	0x20000418

08003a1c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a1c:	e7fe      	b.n	8003a1c <ADC1_COMP_IRQHandler>
	...

08003a20 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a26:	1dfb      	adds	r3, r7, #7
 8003a28:	2200      	movs	r2, #0
 8003a2a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a5c <HAL_Init+0x3c>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b0a      	ldr	r3, [pc, #40]	@ (8003a5c <HAL_Init+0x3c>)
 8003a32:	2140      	movs	r1, #64	@ 0x40
 8003a34:	430a      	orrs	r2, r1
 8003a36:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a38:	2003      	movs	r0, #3
 8003a3a:	f000 f811 	bl	8003a60 <HAL_InitTick>
 8003a3e:	1e03      	subs	r3, r0, #0
 8003a40:	d003      	beq.n	8003a4a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003a42:	1dfb      	adds	r3, r7, #7
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
 8003a48:	e001      	b.n	8003a4e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a4a:	f7fe fc49 	bl	80022e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a4e:	1dfb      	adds	r3, r7, #7
 8003a50:	781b      	ldrb	r3, [r3, #0]
}
 8003a52:	0018      	movs	r0, r3
 8003a54:	46bd      	mov	sp, r7
 8003a56:	b002      	add	sp, #8
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	46c0      	nop			@ (mov r8, r8)
 8003a5c:	40022000 	.word	0x40022000

08003a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a60:	b590      	push	{r4, r7, lr}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a68:	4b14      	ldr	r3, [pc, #80]	@ (8003abc <HAL_InitTick+0x5c>)
 8003a6a:	681c      	ldr	r4, [r3, #0]
 8003a6c:	4b14      	ldr	r3, [pc, #80]	@ (8003ac0 <HAL_InitTick+0x60>)
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	0019      	movs	r1, r3
 8003a72:	23fa      	movs	r3, #250	@ 0xfa
 8003a74:	0098      	lsls	r0, r3, #2
 8003a76:	f7fc fb59 	bl	800012c <__udivsi3>
 8003a7a:	0003      	movs	r3, r0
 8003a7c:	0019      	movs	r1, r3
 8003a7e:	0020      	movs	r0, r4
 8003a80:	f7fc fb54 	bl	800012c <__udivsi3>
 8003a84:	0003      	movs	r3, r0
 8003a86:	0018      	movs	r0, r3
 8003a88:	f000 feb1 	bl	80047ee <HAL_SYSTICK_Config>
 8003a8c:	1e03      	subs	r3, r0, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e00f      	b.n	8003ab4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d80b      	bhi.n	8003ab2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	425b      	negs	r3, r3
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	f000 fe7e 	bl	80047a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003aa8:	4b06      	ldr	r3, [pc, #24]	@ (8003ac4 <HAL_InitTick+0x64>)
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e000      	b.n	8003ab4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
}
 8003ab4:	0018      	movs	r0, r3
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b003      	add	sp, #12
 8003aba:	bd90      	pop	{r4, r7, pc}
 8003abc:	20000000 	.word	0x20000000
 8003ac0:	2000004c 	.word	0x2000004c
 8003ac4:	20000048 	.word	0x20000048

08003ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003acc:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <HAL_IncTick+0x1c>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	001a      	movs	r2, r3
 8003ad2:	4b05      	ldr	r3, [pc, #20]	@ (8003ae8 <HAL_IncTick+0x20>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	18d2      	adds	r2, r2, r3
 8003ad8:	4b03      	ldr	r3, [pc, #12]	@ (8003ae8 <HAL_IncTick+0x20>)
 8003ada:	601a      	str	r2, [r3, #0]
}
 8003adc:	46c0      	nop			@ (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	46c0      	nop			@ (mov r8, r8)
 8003ae4:	2000004c 	.word	0x2000004c
 8003ae8:	200002cc 	.word	0x200002cc

08003aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  return uwTick;
 8003af0:	4b02      	ldr	r3, [pc, #8]	@ (8003afc <HAL_GetTick+0x10>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			@ (mov r8, r8)
 8003afc:	200002cc 	.word	0x200002cc

08003b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b08:	f7ff fff0 	bl	8003aec <HAL_GetTick>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	3301      	adds	r3, #1
 8003b18:	d005      	beq.n	8003b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <HAL_Delay+0x44>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	001a      	movs	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	189b      	adds	r3, r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b26:	46c0      	nop			@ (mov r8, r8)
 8003b28:	f7ff ffe0 	bl	8003aec <HAL_GetTick>
 8003b2c:	0002      	movs	r2, r0
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d8f7      	bhi.n	8003b28 <HAL_Delay+0x28>
  {
  }
}
 8003b38:	46c0      	nop			@ (mov r8, r8)
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	b004      	add	sp, #16
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	46c0      	nop			@ (mov r8, r8)
 8003b44:	2000004c 	.word	0x2000004c

08003b48 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8003b4c:	4b04      	ldr	r3, [pc, #16]	@ (8003b60 <HAL_SuspendTick+0x18>)
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	4b03      	ldr	r3, [pc, #12]	@ (8003b60 <HAL_SuspendTick+0x18>)
 8003b52:	2102      	movs	r1, #2
 8003b54:	438a      	bics	r2, r1
 8003b56:	601a      	str	r2, [r3, #0]
}
 8003b58:	46c0      	nop			@ (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	46c0      	nop			@ (mov r8, r8)
 8003b60:	e000e010 	.word	0xe000e010

08003b64 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8003b68:	4b04      	ldr	r3, [pc, #16]	@ (8003b7c <HAL_ResumeTick+0x18>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <HAL_ResumeTick+0x18>)
 8003b6e:	2102      	movs	r1, #2
 8003b70:	430a      	orrs	r2, r1
 8003b72:	601a      	str	r2, [r3, #0]
}
 8003b74:	46c0      	nop			@ (mov r8, r8)
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	e000e010 	.word	0xe000e010

08003b80 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8003b84:	4b01      	ldr	r3, [pc, #4]	@ (8003b8c <HAL_GetHalVersion+0xc>)
}
 8003b86:	0018      	movs	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	010a0700 	.word	0x010a0700

08003b90 <HAL_SYSCFG_VREFINT_OutputSelect>:
  *     @arg SYSCFG_VREFINT_OUT_PB1
  *     @arg SYSCFG_VREFINT_OUT_PB0_PB1
  * @retval None
  */
void HAL_SYSCFG_VREFINT_OutputSelect(uint32_t SYSCFG_Vrefint_OUTPUT)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFINT_OUT_SELECT(SYSCFG_Vrefint_OUTPUT));

  /* Set the output Vrefint pin */
  SYSCFG->CFGR3 &= ~(SYSCFG_CFGR3_VREF_OUT);
 8003b98:	4b07      	ldr	r3, [pc, #28]	@ (8003bb8 <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 8003b9a:	6a1a      	ldr	r2, [r3, #32]
 8003b9c:	4b06      	ldr	r3, [pc, #24]	@ (8003bb8 <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 8003b9e:	2130      	movs	r1, #48	@ 0x30
 8003ba0:	438a      	bics	r2, r1
 8003ba2:	621a      	str	r2, [r3, #32]
  SYSCFG->CFGR3 |= (uint32_t)(SYSCFG_Vrefint_OUTPUT);
 8003ba4:	4b04      	ldr	r3, [pc, #16]	@ (8003bb8 <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 8003ba6:	6a19      	ldr	r1, [r3, #32]
 8003ba8:	4b03      	ldr	r3, [pc, #12]	@ (8003bb8 <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	46c0      	nop			@ (mov r8, r8)
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	b002      	add	sp, #8
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40010000 	.word	0x40010000

08003bbc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e159      	b.n	8003e82 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10a      	bne.n	8003bec <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2250      	movs	r2, #80	@ 0x50
 8003be0:	2100      	movs	r1, #0
 8003be2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	0018      	movs	r0, r3
 8003be8:	f7fe fb92 	bl	8002310 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf0:	2210      	movs	r2, #16
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d005      	beq.n	8003c04 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2204      	movs	r2, #4
 8003c00:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003c02:	d00b      	beq.n	8003c1c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c08:	2210      	movs	r2, #16
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2250      	movs	r2, #80	@ 0x50
 8003c14:	2100      	movs	r1, #0
 8003c16:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e132      	b.n	8003e82 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c20:	4a9a      	ldr	r2, [pc, #616]	@ (8003e8c <HAL_ADC_Init+0x2d0>)
 8003c22:	4013      	ands	r3, r2
 8003c24:	2202      	movs	r2, #2
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2203      	movs	r2, #3
 8003c34:	4013      	ands	r3, r2
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d108      	bne.n	8003c4c <HAL_ADC_Init+0x90>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2201      	movs	r2, #1
 8003c42:	4013      	ands	r3, r2
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_ADC_Init+0x90>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <HAL_ADC_Init+0x92>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d149      	bne.n	8003ce6 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	23c0      	movs	r3, #192	@ 0xc0
 8003c58:	061b      	lsls	r3, r3, #24
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d00b      	beq.n	8003c76 <HAL_ADC_Init+0xba>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	2380      	movs	r3, #128	@ 0x80
 8003c64:	05db      	lsls	r3, r3, #23
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d005      	beq.n	8003c76 <HAL_ADC_Init+0xba>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	2380      	movs	r3, #128	@ 0x80
 8003c70:	061b      	lsls	r3, r3, #24
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d111      	bne.n	8003c9a <HAL_ADC_Init+0xde>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	691a      	ldr	r2, [r3, #16]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	0092      	lsls	r2, r2, #2
 8003c82:	0892      	lsrs	r2, r2, #2
 8003c84:	611a      	str	r2, [r3, #16]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6919      	ldr	r1, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	611a      	str	r2, [r3, #16]
 8003c98:	e014      	b.n	8003cc4 <HAL_ADC_Init+0x108>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	0092      	lsls	r2, r2, #2
 8003ca6:	0892      	lsrs	r2, r2, #2
 8003ca8:	611a      	str	r2, [r3, #16]
 8003caa:	4b79      	ldr	r3, [pc, #484]	@ (8003e90 <HAL_ADC_Init+0x2d4>)
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	4b78      	ldr	r3, [pc, #480]	@ (8003e90 <HAL_ADC_Init+0x2d4>)
 8003cb0:	4978      	ldr	r1, [pc, #480]	@ (8003e94 <HAL_ADC_Init+0x2d8>)
 8003cb2:	400a      	ands	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	4b76      	ldr	r3, [pc, #472]	@ (8003e90 <HAL_ADC_Init+0x2d4>)
 8003cb8:	6819      	ldr	r1, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	4b74      	ldr	r3, [pc, #464]	@ (8003e90 <HAL_ADC_Init+0x2d4>)
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2118      	movs	r1, #24
 8003cd0:	438a      	bics	r2, r1
 8003cd2:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68d9      	ldr	r1, [r3, #12]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8003ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8003e90 <HAL_ADC_Init+0x2d4>)
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	4b69      	ldr	r3, [pc, #420]	@ (8003e90 <HAL_ADC_Init+0x2d4>)
 8003cec:	496a      	ldr	r1, [pc, #424]	@ (8003e98 <HAL_ADC_Init+0x2dc>)
 8003cee:	400a      	ands	r2, r1
 8003cf0:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8003cf2:	4b67      	ldr	r3, [pc, #412]	@ (8003e90 <HAL_ADC_Init+0x2d4>)
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfa:	065a      	lsls	r2, r3, #25
 8003cfc:	4b64      	ldr	r3, [pc, #400]	@ (8003e90 <HAL_ADC_Init+0x2d4>)
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	2380      	movs	r3, #128	@ 0x80
 8003d0a:	055b      	lsls	r3, r3, #21
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	d108      	bne.n	8003d22 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2180      	movs	r1, #128	@ 0x80
 8003d1c:	0549      	lsls	r1, r1, #21
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	495b      	ldr	r1, [pc, #364]	@ (8003e9c <HAL_ADC_Init+0x2e0>)
 8003d2e:	400a      	ands	r2, r1
 8003d30:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68d9      	ldr	r1, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d101      	bne.n	8003d48 <HAL_ADC_Init+0x18c>
 8003d44:	2304      	movs	r3, #4
 8003d46:	e000      	b.n	8003d4a <HAL_ADC_Init+0x18e>
 8003d48:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003d4a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2020      	movs	r0, #32
 8003d50:	5c1b      	ldrb	r3, [r3, r0]
 8003d52:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003d54:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	202c      	movs	r0, #44	@ 0x2c
 8003d5a:	5c1b      	ldrb	r3, [r3, r0]
 8003d5c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003d5e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8003d64:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8003d6c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8003d74:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d82:	23c2      	movs	r3, #194	@ 0xc2
 8003d84:	33ff      	adds	r3, #255	@ 0xff
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d00b      	beq.n	8003da2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68d9      	ldr	r1, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2221      	movs	r2, #33	@ 0x21
 8003da6:	5c9b      	ldrb	r3, [r3, r2]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d11a      	bne.n	8003de2 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2220      	movs	r2, #32
 8003db0:	5c9b      	ldrb	r3, [r3, r2]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2180      	movs	r1, #128	@ 0x80
 8003dc2:	0249      	lsls	r1, r1, #9
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	60da      	str	r2, [r3, #12]
 8003dc8:	e00b      	b.n	8003de2 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dce:	2220      	movs	r2, #32
 8003dd0:	431a      	orrs	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dda:	2201      	movs	r2, #1
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d11f      	bne.n	8003e2a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691a      	ldr	r2, [r3, #16]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	492a      	ldr	r1, [pc, #168]	@ (8003ea0 <HAL_ADC_Init+0x2e4>)
 8003df6:	400a      	ands	r2, r1
 8003df8:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6919      	ldr	r1, [r3, #16]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003e08:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8003e0e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	691a      	ldr	r2, [r3, #16]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2101      	movs	r1, #1
 8003e24:	430a      	orrs	r2, r1
 8003e26:	611a      	str	r2, [r3, #16]
 8003e28:	e00e      	b.n	8003e48 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2201      	movs	r2, #1
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d107      	bne.n	8003e48 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	691a      	ldr	r2, [r3, #16]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2101      	movs	r1, #1
 8003e44:	438a      	bics	r2, r1
 8003e46:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2107      	movs	r1, #7
 8003e54:	438a      	bics	r2, r1
 8003e56:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6959      	ldr	r1, [r3, #20]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e74:	2203      	movs	r2, #3
 8003e76:	4393      	bics	r3, r2
 8003e78:	2201      	movs	r2, #1
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	0018      	movs	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b002      	add	sp, #8
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	46c0      	nop			@ (mov r8, r8)
 8003e8c:	fffffefd 	.word	0xfffffefd
 8003e90:	40012708 	.word	0x40012708
 8003e94:	ffc3ffff 	.word	0xffc3ffff
 8003e98:	fdffffff 	.word	0xfdffffff
 8003e9c:	fffe0219 	.word	0xfffe0219
 8003ea0:	fffffc03 	.word	0xfffffc03

08003ea4 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8003ea4:	b5b0      	push	{r4, r5, r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eac:	230f      	movs	r3, #15
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]

  /* Check ADC handle */
  if (hadc == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e07d      	b.n	8003fba <HAL_ADC_DeInit+0x116>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003eca:	250f      	movs	r5, #15
 8003ecc:	197c      	adds	r4, r7, r5
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f000 fb2e 	bl	8004532 <ADC_ConversionStop>
 8003ed6:	0003      	movs	r3, r0
 8003ed8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003eda:	197b      	adds	r3, r7, r5
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10d      	bne.n	8003efe <HAL_ADC_DeInit+0x5a>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003ee2:	197c      	adds	r4, r7, r5
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f000 fabc 	bl	8004464 <ADC_Disable>
 8003eec:	0003      	movs	r3, r0
 8003eee:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8003ef0:	197b      	adds	r3, r7, r5
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d002      	beq.n	8003efe <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	655a      	str	r2, [r3, #84]	@ 0x54
  }


  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 8003efe:	230f      	movs	r3, #15
 8003f00:	18fb      	adds	r3, r7, r3
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d051      	beq.n	8003fac <HAL_ADC_DeInit+0x108>
  {

    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685a      	ldr	r2, [r3, #4]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	492c      	ldr	r1, [pc, #176]	@ (8003fc4 <HAL_ADC_DeInit+0x120>)
 8003f14:	400a      	ands	r2, r1
 8003f16:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP));


    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc8 <HAL_ADC_DeInit+0x124>)
 8003f1e:	601a      	str	r2, [r3, #0]

    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4928      	ldr	r1, [pc, #160]	@ (8003fcc <HAL_ADC_DeInit+0x128>)
 8003f2c:	400a      	ands	r2, r1
 8003f2e:	609a      	str	r2, [r3, #8]

    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */

    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4925      	ldr	r1, [pc, #148]	@ (8003fd0 <HAL_ADC_DeInit+0x12c>)
 8003f3c:	400a      	ands	r2, r1
 8003f3e:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	691a      	ldr	r2, [r3, #16]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4922      	ldr	r1, [pc, #136]	@ (8003fd4 <HAL_ADC_DeInit+0x130>)
 8003f4c:	400a      	ands	r2, r1
 8003f4e:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE);


    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2107      	movs	r1, #7
 8003f5c:	438a      	bics	r2, r1
 8003f5e:	615a      	str	r2, [r3, #20]

    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6a1a      	ldr	r2, [r3, #32]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	491b      	ldr	r1, [pc, #108]	@ (8003fd8 <HAL_ADC_DeInit+0x134>)
 8003f6c:	400a      	ands	r2, r1
 8003f6e:	621a      	str	r2, [r3, #32]

    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	22b4      	movs	r2, #180	@ 0xb4
 8003f76:	589a      	ldr	r2, [r3, r2]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	217f      	movs	r1, #127	@ 0x7f
 8003f7e:	438a      	bics	r2, r1
 8003f80:	21b4      	movs	r1, #180	@ 0xb4
 8003f82:	505a      	str	r2, [r3, r1]

    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/

    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	22b4      	movs	r2, #180	@ 0xb4
 8003f8a:	589a      	ldr	r2, [r3, r2]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	217f      	movs	r1, #127	@ 0x7f
 8003f92:	438a      	bics	r2, r1
 8003f94:	21b4      	movs	r1, #180	@ 0xb4
 8003f96:	505a      	str	r2, [r3, r1]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f7fe f9f4 	bl	8002388 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2250      	movs	r2, #80	@ 0x50
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8003fb4:	230f      	movs	r3, #15
 8003fb6:	18fb      	adds	r3, r7, r3
 8003fb8:	781b      	ldrb	r3, [r3, #0]
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b004      	add	sp, #16
 8003fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	fffff760 	.word	0xfffff760
 8003fc8:	0000089f 	.word	0x0000089f
 8003fcc:	efffffff 	.word	0xefffffff
 8003fd0:	833e0200 	.word	0x833e0200
 8003fd4:	3ffffc02 	.word	0x3ffffc02
 8003fd8:	f000f000 	.word	0xf000f000

08003fdc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fe4:	230f      	movs	r3, #15
 8003fe6:	18fb      	adds	r3, r7, r3
 8003fe8:	2200      	movs	r2, #0
 8003fea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d138      	bne.n	800406a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2250      	movs	r2, #80	@ 0x50
 8003ffc:	5c9b      	ldrb	r3, [r3, r2]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_ADC_Start+0x2a>
 8004002:	2302      	movs	r3, #2
 8004004:	e038      	b.n	8004078 <HAL_ADC_Start+0x9c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2250      	movs	r2, #80	@ 0x50
 800400a:	2101      	movs	r1, #1
 800400c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d007      	beq.n	8004026 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004016:	230f      	movs	r3, #15
 8004018:	18fc      	adds	r4, r7, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f000 f9b9 	bl	8004394 <ADC_Enable>
 8004022:	0003      	movs	r3, r0
 8004024:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004026:	230f      	movs	r3, #15
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d120      	bne.n	8004072 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004034:	4a12      	ldr	r2, [pc, #72]	@ (8004080 <HAL_ADC_Start+0xa4>)
 8004036:	4013      	ands	r3, r2
 8004038:	2280      	movs	r2, #128	@ 0x80
 800403a:	0052      	lsls	r2, r2, #1
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2250      	movs	r2, #80	@ 0x50
 800404c:	2100      	movs	r1, #0
 800404e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	221c      	movs	r2, #28
 8004056:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	689a      	ldr	r2, [r3, #8]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2104      	movs	r1, #4
 8004064:	430a      	orrs	r2, r1
 8004066:	609a      	str	r2, [r3, #8]
 8004068:	e003      	b.n	8004072 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800406a:	230f      	movs	r3, #15
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	2202      	movs	r2, #2
 8004070:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8004072:	230f      	movs	r3, #15
 8004074:	18fb      	adds	r3, r7, r3
 8004076:	781b      	ldrb	r3, [r3, #0]
}
 8004078:	0018      	movs	r0, r3
 800407a:	46bd      	mov	sp, r7
 800407c:	b005      	add	sp, #20
 800407e:	bd90      	pop	{r4, r7, pc}
 8004080:	fffff0fe 	.word	0xfffff0fe

08004084 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8004084:	b5b0      	push	{r4, r5, r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800408c:	230f      	movs	r3, #15
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	2200      	movs	r2, #0
 8004092:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2250      	movs	r2, #80	@ 0x50
 8004098:	5c9b      	ldrb	r3, [r3, r2]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_ADC_Stop+0x1e>
 800409e:	2302      	movs	r3, #2
 80040a0:	e029      	b.n	80040f6 <HAL_ADC_Stop+0x72>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2250      	movs	r2, #80	@ 0x50
 80040a6:	2101      	movs	r1, #1
 80040a8:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80040aa:	250f      	movs	r5, #15
 80040ac:	197c      	adds	r4, r7, r5
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	0018      	movs	r0, r3
 80040b2:	f000 fa3e 	bl	8004532 <ADC_ConversionStop>
 80040b6:	0003      	movs	r3, r0
 80040b8:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80040ba:	197b      	adds	r3, r7, r5
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d112      	bne.n	80040e8 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80040c2:	197c      	adds	r4, r7, r5
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	0018      	movs	r0, r3
 80040c8:	f000 f9cc 	bl	8004464 <ADC_Disable>
 80040cc:	0003      	movs	r3, r0
 80040ce:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80040d0:	197b      	adds	r3, r7, r5
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d107      	bne.n	80040e8 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040dc:	4a08      	ldr	r2, [pc, #32]	@ (8004100 <HAL_ADC_Stop+0x7c>)
 80040de:	4013      	ands	r3, r2
 80040e0:	2201      	movs	r2, #1
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2250      	movs	r2, #80	@ 0x50
 80040ec:	2100      	movs	r1, #0
 80040ee:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80040f0:	230f      	movs	r3, #15
 80040f2:	18fb      	adds	r3, r7, r3
 80040f4:	781b      	ldrb	r3, [r3, #0]
}
 80040f6:	0018      	movs	r0, r3
 80040f8:	46bd      	mov	sp, r7
 80040fa:	b004      	add	sp, #16
 80040fc:	bdb0      	pop	{r4, r5, r7, pc}
 80040fe:	46c0      	nop			@ (mov r8, r8)
 8004100:	fffffefe 	.word	0xfffffefe

08004104 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800410e:	2300      	movs	r3, #0
 8004110:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	2b08      	cmp	r3, #8
 800411c:	d102      	bne.n	8004124 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800411e:	2308      	movs	r3, #8
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	e014      	b.n	800414e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	4013      	ands	r3, r2
 800412e:	2b01      	cmp	r3, #1
 8004130:	d10b      	bne.n	800414a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004136:	2220      	movs	r2, #32
 8004138:	431a      	orrs	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2250      	movs	r2, #80	@ 0x50
 8004142:	2100      	movs	r1, #0
 8004144:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e072      	b.n	8004230 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800414a:	230c      	movs	r3, #12
 800414c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800414e:	f7ff fccd 	bl	8003aec <HAL_GetTick>
 8004152:	0003      	movs	r3, r0
 8004154:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004156:	e01f      	b.n	8004198 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	3301      	adds	r3, #1
 800415c:	d01c      	beq.n	8004198 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d007      	beq.n	8004174 <HAL_ADC_PollForConversion+0x70>
 8004164:	f7ff fcc2 	bl	8003aec <HAL_GetTick>
 8004168:	0002      	movs	r2, r0
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	429a      	cmp	r2, r3
 8004172:	d211      	bcs.n	8004198 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4013      	ands	r3, r2
 800417e:	d10b      	bne.n	8004198 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004184:	2204      	movs	r2, #4
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2250      	movs	r2, #80	@ 0x50
 8004190:	2100      	movs	r1, #0
 8004192:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e04b      	b.n	8004230 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4013      	ands	r3, r2
 80041a2:	d0d9      	beq.n	8004158 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041a8:	2280      	movs	r2, #128	@ 0x80
 80041aa:	0092      	lsls	r2, r2, #2
 80041ac:	431a      	orrs	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	23c0      	movs	r3, #192	@ 0xc0
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	4013      	ands	r3, r2
 80041be:	d12e      	bne.n	800421e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2220      	movs	r2, #32
 80041c4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d129      	bne.n	800421e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2208      	movs	r2, #8
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d122      	bne.n	800421e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2204      	movs	r2, #4
 80041e0:	4013      	ands	r3, r2
 80041e2:	d110      	bne.n	8004206 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	210c      	movs	r1, #12
 80041f0:	438a      	bics	r2, r1
 80041f2:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f8:	4a0f      	ldr	r2, [pc, #60]	@ (8004238 <HAL_ADC_PollForConversion+0x134>)
 80041fa:	4013      	ands	r3, r2
 80041fc:	2201      	movs	r2, #1
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	655a      	str	r2, [r3, #84]	@ 0x54
 8004204:	e00b      	b.n	800421e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420a:	2220      	movs	r2, #32
 800420c:	431a      	orrs	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004216:	2201      	movs	r2, #1
 8004218:	431a      	orrs	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	699b      	ldr	r3, [r3, #24]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	220c      	movs	r2, #12
 800422c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	0018      	movs	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	b004      	add	sp, #16
 8004236:	bd80      	pop	{r7, pc}
 8004238:	fffffefe 	.word	0xfffffefe

0800423c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800424a:	0018      	movs	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	b002      	add	sp, #8
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2250      	movs	r2, #80	@ 0x50
 8004262:	5c9b      	ldrb	r3, [r3, r2]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d101      	bne.n	800426c <HAL_ADC_ConfigChannel+0x18>
 8004268:	2302      	movs	r3, #2
 800426a:	e085      	b.n	8004378 <HAL_ADC_ConfigChannel+0x124>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2250      	movs	r2, #80	@ 0x50
 8004270:	2101      	movs	r1, #1
 8004272:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2204      	movs	r2, #4
 800427c:	4013      	ands	r3, r2
 800427e:	d00b      	beq.n	8004298 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004284:	2220      	movs	r2, #32
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2250      	movs	r2, #80	@ 0x50
 8004290:	2100      	movs	r1, #0
 8004292:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e06f      	b.n	8004378 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4a38      	ldr	r2, [pc, #224]	@ (8004380 <HAL_ADC_ConfigChannel+0x12c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d035      	beq.n	800430e <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	035b      	lsls	r3, r3, #13
 80042ae:	0b5a      	lsrs	r2, r3, #13
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	2380      	movs	r3, #128	@ 0x80
 80042be:	02db      	lsls	r3, r3, #11
 80042c0:	4013      	ands	r3, r2
 80042c2:	d009      	beq.n	80042d8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 80042c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004384 <HAL_ADC_ConfigChannel+0x130>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b2e      	ldr	r3, [pc, #184]	@ (8004384 <HAL_ADC_ConfigChannel+0x130>)
 80042ca:	2180      	movs	r1, #128	@ 0x80
 80042cc:	0409      	lsls	r1, r1, #16
 80042ce:	430a      	orrs	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80042d2:	200a      	movs	r0, #10
 80042d4:	f000 f97a 	bl	80045cc <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	2380      	movs	r3, #128	@ 0x80
 80042de:	029b      	lsls	r3, r3, #10
 80042e0:	4013      	ands	r3, r2
 80042e2:	d006      	beq.n	80042f2 <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80042e4:	4b27      	ldr	r3, [pc, #156]	@ (8004384 <HAL_ADC_ConfigChannel+0x130>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b26      	ldr	r3, [pc, #152]	@ (8004384 <HAL_ADC_ConfigChannel+0x130>)
 80042ea:	2180      	movs	r1, #128	@ 0x80
 80042ec:	03c9      	lsls	r1, r1, #15
 80042ee:	430a      	orrs	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	2380      	movs	r3, #128	@ 0x80
 80042f8:	025b      	lsls	r3, r3, #9
 80042fa:	4013      	ands	r3, r2
 80042fc:	d037      	beq.n	800436e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80042fe:	4b21      	ldr	r3, [pc, #132]	@ (8004384 <HAL_ADC_ConfigChannel+0x130>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	4b20      	ldr	r3, [pc, #128]	@ (8004384 <HAL_ADC_ConfigChannel+0x130>)
 8004304:	2180      	movs	r1, #128	@ 0x80
 8004306:	0449      	lsls	r1, r1, #17
 8004308:	430a      	orrs	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	e02f      	b.n	800436e <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	035b      	lsls	r3, r3, #13
 800431a:	0b5b      	lsrs	r3, r3, #13
 800431c:	43d9      	mvns	r1, r3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	400a      	ands	r2, r1
 8004324:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	2380      	movs	r3, #128	@ 0x80
 800432c:	02db      	lsls	r3, r3, #11
 800432e:	4013      	ands	r3, r2
 8004330:	d005      	beq.n	800433e <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8004332:	4b14      	ldr	r3, [pc, #80]	@ (8004384 <HAL_ADC_ConfigChannel+0x130>)
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	4b13      	ldr	r3, [pc, #76]	@ (8004384 <HAL_ADC_ConfigChannel+0x130>)
 8004338:	4913      	ldr	r1, [pc, #76]	@ (8004388 <HAL_ADC_ConfigChannel+0x134>)
 800433a:	400a      	ands	r2, r1
 800433c:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	2380      	movs	r3, #128	@ 0x80
 8004344:	029b      	lsls	r3, r3, #10
 8004346:	4013      	ands	r3, r2
 8004348:	d005      	beq.n	8004356 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800434a:	4b0e      	ldr	r3, [pc, #56]	@ (8004384 <HAL_ADC_ConfigChannel+0x130>)
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <HAL_ADC_ConfigChannel+0x130>)
 8004350:	490e      	ldr	r1, [pc, #56]	@ (800438c <HAL_ADC_ConfigChannel+0x138>)
 8004352:	400a      	ands	r2, r1
 8004354:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	2380      	movs	r3, #128	@ 0x80
 800435c:	025b      	lsls	r3, r3, #9
 800435e:	4013      	ands	r3, r2
 8004360:	d005      	beq.n	800436e <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 8004362:	4b08      	ldr	r3, [pc, #32]	@ (8004384 <HAL_ADC_ConfigChannel+0x130>)
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	4b07      	ldr	r3, [pc, #28]	@ (8004384 <HAL_ADC_ConfigChannel+0x130>)
 8004368:	4909      	ldr	r1, [pc, #36]	@ (8004390 <HAL_ADC_ConfigChannel+0x13c>)
 800436a:	400a      	ands	r2, r1
 800436c:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2250      	movs	r2, #80	@ 0x50
 8004372:	2100      	movs	r1, #0
 8004374:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	0018      	movs	r0, r3
 800437a:	46bd      	mov	sp, r7
 800437c:	b002      	add	sp, #8
 800437e:	bd80      	pop	{r7, pc}
 8004380:	00001001 	.word	0x00001001
 8004384:	40012708 	.word	0x40012708
 8004388:	ff7fffff 	.word	0xff7fffff
 800438c:	ffbfffff 	.word	0xffbfffff
 8004390:	feffffff 	.word	0xfeffffff

08004394 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2203      	movs	r2, #3
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d108      	bne.n	80043c0 <ADC_Enable+0x2c>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2201      	movs	r2, #1
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d101      	bne.n	80043c0 <ADC_Enable+0x2c>
 80043bc:	2301      	movs	r3, #1
 80043be:	e000      	b.n	80043c2 <ADC_Enable+0x2e>
 80043c0:	2300      	movs	r3, #0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d146      	bne.n	8004454 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	4a24      	ldr	r2, [pc, #144]	@ (8004460 <ADC_Enable+0xcc>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	d00d      	beq.n	80043ee <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d6:	2210      	movs	r2, #16
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e2:	2201      	movs	r2, #1
 80043e4:	431a      	orrs	r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e033      	b.n	8004456 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2101      	movs	r1, #1
 80043fa:	430a      	orrs	r2, r1
 80043fc:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80043fe:	2001      	movs	r0, #1
 8004400:	f000 f8e4 	bl	80045cc <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004404:	f7ff fb72 	bl	8003aec <HAL_GetTick>
 8004408:	0003      	movs	r3, r0
 800440a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800440c:	e01b      	b.n	8004446 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800440e:	f7ff fb6d 	bl	8003aec <HAL_GetTick>
 8004412:	0002      	movs	r2, r0
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b0a      	cmp	r3, #10
 800441a:	d914      	bls.n	8004446 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2201      	movs	r2, #1
 8004424:	4013      	ands	r3, r2
 8004426:	2b01      	cmp	r3, #1
 8004428:	d00d      	beq.n	8004446 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442e:	2210      	movs	r2, #16
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800443a:	2201      	movs	r2, #1
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e007      	b.n	8004456 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2201      	movs	r2, #1
 800444e:	4013      	ands	r3, r2
 8004450:	2b01      	cmp	r3, #1
 8004452:	d1dc      	bne.n	800440e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	0018      	movs	r0, r3
 8004458:	46bd      	mov	sp, r7
 800445a:	b004      	add	sp, #16
 800445c:	bd80      	pop	{r7, pc}
 800445e:	46c0      	nop			@ (mov r8, r8)
 8004460:	80000017 	.word	0x80000017

08004464 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2203      	movs	r2, #3
 8004478:	4013      	ands	r3, r2
 800447a:	2b01      	cmp	r3, #1
 800447c:	d108      	bne.n	8004490 <ADC_Disable+0x2c>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2201      	movs	r2, #1
 8004486:	4013      	ands	r3, r2
 8004488:	2b01      	cmp	r3, #1
 800448a:	d101      	bne.n	8004490 <ADC_Disable+0x2c>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <ADC_Disable+0x2e>
 8004490:	2300      	movs	r3, #0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d048      	beq.n	8004528 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2205      	movs	r2, #5
 800449e:	4013      	ands	r3, r2
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d110      	bne.n	80044c6 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689a      	ldr	r2, [r3, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2102      	movs	r1, #2
 80044b0:	430a      	orrs	r2, r1
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2203      	movs	r2, #3
 80044ba:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80044bc:	f7ff fb16 	bl	8003aec <HAL_GetTick>
 80044c0:	0003      	movs	r3, r0
 80044c2:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80044c4:	e029      	b.n	800451a <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ca:	2210      	movs	r2, #16
 80044cc:	431a      	orrs	r2, r3
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d6:	2201      	movs	r2, #1
 80044d8:	431a      	orrs	r2, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e023      	b.n	800452a <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80044e2:	f7ff fb03 	bl	8003aec <HAL_GetTick>
 80044e6:	0002      	movs	r2, r0
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	1ad3      	subs	r3, r2, r3
 80044ec:	2b0a      	cmp	r3, #10
 80044ee:	d914      	bls.n	800451a <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2201      	movs	r2, #1
 80044f8:	4013      	ands	r3, r2
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d10d      	bne.n	800451a <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004502:	2210      	movs	r2, #16
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800450e:	2201      	movs	r2, #1
 8004510:	431a      	orrs	r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e007      	b.n	800452a <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2201      	movs	r2, #1
 8004522:	4013      	ands	r3, r2
 8004524:	2b01      	cmp	r3, #1
 8004526:	d0dc      	beq.n	80044e2 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b004      	add	sp, #16
 8004530:	bd80      	pop	{r7, pc}

08004532 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b084      	sub	sp, #16
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2204      	movs	r2, #4
 8004546:	4013      	ands	r3, r2
 8004548:	d03a      	beq.n	80045c0 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	2204      	movs	r2, #4
 8004552:	4013      	ands	r3, r2
 8004554:	2b04      	cmp	r3, #4
 8004556:	d10d      	bne.n	8004574 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2202      	movs	r2, #2
 8004560:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8004562:	d107      	bne.n	8004574 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2110      	movs	r1, #16
 8004570:	430a      	orrs	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004574:	f7ff faba 	bl	8003aec <HAL_GetTick>
 8004578:	0003      	movs	r3, r0
 800457a:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800457c:	e01a      	b.n	80045b4 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800457e:	f7ff fab5 	bl	8003aec <HAL_GetTick>
 8004582:	0002      	movs	r2, r0
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b0a      	cmp	r3, #10
 800458a:	d913      	bls.n	80045b4 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2204      	movs	r2, #4
 8004594:	4013      	ands	r3, r2
 8004596:	d00d      	beq.n	80045b4 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459c:	2210      	movs	r2, #16
 800459e:	431a      	orrs	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045a8:	2201      	movs	r2, #1
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e006      	b.n	80045c2 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	2204      	movs	r2, #4
 80045bc:	4013      	ands	r3, r2
 80045be:	d1de      	bne.n	800457e <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	0018      	movs	r0, r3
 80045c4:	46bd      	mov	sp, r7
 80045c6:	b004      	add	sp, #16
 80045c8:	bd80      	pop	{r7, pc}
	...

080045cc <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80045d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004604 <ADC_DelayMicroSecond+0x38>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	490b      	ldr	r1, [pc, #44]	@ (8004608 <ADC_DelayMicroSecond+0x3c>)
 80045da:	0018      	movs	r0, r3
 80045dc:	f7fb fda6 	bl	800012c <__udivsi3>
 80045e0:	0003      	movs	r3, r0
 80045e2:	001a      	movs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4353      	muls	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80045ea:	e002      	b.n	80045f2 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1f9      	bne.n	80045ec <ADC_DelayMicroSecond+0x20>
  }
}
 80045f8:	46c0      	nop			@ (mov r8, r8)
 80045fa:	46c0      	nop			@ (mov r8, r8)
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b004      	add	sp, #16
 8004600:	bd80      	pop	{r7, pc}
 8004602:	46c0      	nop			@ (mov r8, r8)
 8004604:	20000000 	.word	0x20000000
 8004608:	000f4240 	.word	0x000f4240

0800460c <HAL_ADCEx_DisableVREFINT>:
  * @note This API is obsolete. This equivalent configuration is done in HAL_ADC_ConfigChannel().
          bit fields in ADC_CCR and SYSCFG_CFGR3 control the same signals to VREFINT and TempSensor buffers.
  * @retval None
  */
void HAL_ADCEx_DisableVREFINT(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  /* Disable the Vrefint by resetting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  CLEAR_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 8004610:	4b04      	ldr	r3, [pc, #16]	@ (8004624 <HAL_ADCEx_DisableVREFINT+0x18>)
 8004612:	6a1a      	ldr	r2, [r3, #32]
 8004614:	4b03      	ldr	r3, [pc, #12]	@ (8004624 <HAL_ADCEx_DisableVREFINT+0x18>)
 8004616:	4904      	ldr	r1, [pc, #16]	@ (8004628 <HAL_ADCEx_DisableVREFINT+0x1c>)
 8004618:	400a      	ands	r2, r1
 800461a:	621a      	str	r2, [r3, #32]
}
 800461c:	46c0      	nop			@ (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	46c0      	nop			@ (mov r8, r8)
 8004624:	40010000 	.word	0x40010000
 8004628:	fffffeff 	.word	0xfffffeff

0800462c <HAL_ADCEx_DisableVREFINTTempSensor>:
  * @note This API is obsolete. This equivalent configuration is done in HAL_ADC_ConfigChannel().
          bit fields in ADC_CCR and SYSCFG_CFGR3 control the same signals to VREFINT and TempSensor buffers.
  * @retval None
  */
void HAL_ADCEx_DisableVREFINTTempSensor(void)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* Disable the Vrefint by resetting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  CLEAR_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_SENSOR_ADC);
 8004630:	4b04      	ldr	r3, [pc, #16]	@ (8004644 <HAL_ADCEx_DisableVREFINTTempSensor+0x18>)
 8004632:	6a1a      	ldr	r2, [r3, #32]
 8004634:	4b03      	ldr	r3, [pc, #12]	@ (8004644 <HAL_ADCEx_DisableVREFINTTempSensor+0x18>)
 8004636:	4904      	ldr	r1, [pc, #16]	@ (8004648 <HAL_ADCEx_DisableVREFINTTempSensor+0x1c>)
 8004638:	400a      	ands	r2, r1
 800463a:	621a      	str	r2, [r3, #32]
}
 800463c:	46c0      	nop			@ (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	46c0      	nop			@ (mov r8, r8)
 8004644:	40010000 	.word	0x40010000
 8004648:	fffffdff 	.word	0xfffffdff

0800464c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	0002      	movs	r2, r0
 8004654:	1dfb      	adds	r3, r7, #7
 8004656:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004658:	1dfb      	adds	r3, r7, #7
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b7f      	cmp	r3, #127	@ 0x7f
 800465e:	d809      	bhi.n	8004674 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004660:	1dfb      	adds	r3, r7, #7
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	001a      	movs	r2, r3
 8004666:	231f      	movs	r3, #31
 8004668:	401a      	ands	r2, r3
 800466a:	4b04      	ldr	r3, [pc, #16]	@ (800467c <__NVIC_EnableIRQ+0x30>)
 800466c:	2101      	movs	r1, #1
 800466e:	4091      	lsls	r1, r2
 8004670:	000a      	movs	r2, r1
 8004672:	601a      	str	r2, [r3, #0]
  }
}
 8004674:	46c0      	nop			@ (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	b002      	add	sp, #8
 800467a:	bd80      	pop	{r7, pc}
 800467c:	e000e100 	.word	0xe000e100

08004680 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004680:	b590      	push	{r4, r7, lr}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	0002      	movs	r2, r0
 8004688:	6039      	str	r1, [r7, #0]
 800468a:	1dfb      	adds	r3, r7, #7
 800468c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800468e:	1dfb      	adds	r3, r7, #7
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b7f      	cmp	r3, #127	@ 0x7f
 8004694:	d828      	bhi.n	80046e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004696:	4a2f      	ldr	r2, [pc, #188]	@ (8004754 <__NVIC_SetPriority+0xd4>)
 8004698:	1dfb      	adds	r3, r7, #7
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	b25b      	sxtb	r3, r3
 800469e:	089b      	lsrs	r3, r3, #2
 80046a0:	33c0      	adds	r3, #192	@ 0xc0
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	589b      	ldr	r3, [r3, r2]
 80046a6:	1dfa      	adds	r2, r7, #7
 80046a8:	7812      	ldrb	r2, [r2, #0]
 80046aa:	0011      	movs	r1, r2
 80046ac:	2203      	movs	r2, #3
 80046ae:	400a      	ands	r2, r1
 80046b0:	00d2      	lsls	r2, r2, #3
 80046b2:	21ff      	movs	r1, #255	@ 0xff
 80046b4:	4091      	lsls	r1, r2
 80046b6:	000a      	movs	r2, r1
 80046b8:	43d2      	mvns	r2, r2
 80046ba:	401a      	ands	r2, r3
 80046bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	019b      	lsls	r3, r3, #6
 80046c2:	22ff      	movs	r2, #255	@ 0xff
 80046c4:	401a      	ands	r2, r3
 80046c6:	1dfb      	adds	r3, r7, #7
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	0018      	movs	r0, r3
 80046cc:	2303      	movs	r3, #3
 80046ce:	4003      	ands	r3, r0
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046d4:	481f      	ldr	r0, [pc, #124]	@ (8004754 <__NVIC_SetPriority+0xd4>)
 80046d6:	1dfb      	adds	r3, r7, #7
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	b25b      	sxtb	r3, r3
 80046dc:	089b      	lsrs	r3, r3, #2
 80046de:	430a      	orrs	r2, r1
 80046e0:	33c0      	adds	r3, #192	@ 0xc0
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80046e6:	e031      	b.n	800474c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80046e8:	4a1b      	ldr	r2, [pc, #108]	@ (8004758 <__NVIC_SetPriority+0xd8>)
 80046ea:	1dfb      	adds	r3, r7, #7
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	0019      	movs	r1, r3
 80046f0:	230f      	movs	r3, #15
 80046f2:	400b      	ands	r3, r1
 80046f4:	3b08      	subs	r3, #8
 80046f6:	089b      	lsrs	r3, r3, #2
 80046f8:	3306      	adds	r3, #6
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	18d3      	adds	r3, r2, r3
 80046fe:	3304      	adds	r3, #4
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	1dfa      	adds	r2, r7, #7
 8004704:	7812      	ldrb	r2, [r2, #0]
 8004706:	0011      	movs	r1, r2
 8004708:	2203      	movs	r2, #3
 800470a:	400a      	ands	r2, r1
 800470c:	00d2      	lsls	r2, r2, #3
 800470e:	21ff      	movs	r1, #255	@ 0xff
 8004710:	4091      	lsls	r1, r2
 8004712:	000a      	movs	r2, r1
 8004714:	43d2      	mvns	r2, r2
 8004716:	401a      	ands	r2, r3
 8004718:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	019b      	lsls	r3, r3, #6
 800471e:	22ff      	movs	r2, #255	@ 0xff
 8004720:	401a      	ands	r2, r3
 8004722:	1dfb      	adds	r3, r7, #7
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	0018      	movs	r0, r3
 8004728:	2303      	movs	r3, #3
 800472a:	4003      	ands	r3, r0
 800472c:	00db      	lsls	r3, r3, #3
 800472e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004730:	4809      	ldr	r0, [pc, #36]	@ (8004758 <__NVIC_SetPriority+0xd8>)
 8004732:	1dfb      	adds	r3, r7, #7
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	001c      	movs	r4, r3
 8004738:	230f      	movs	r3, #15
 800473a:	4023      	ands	r3, r4
 800473c:	3b08      	subs	r3, #8
 800473e:	089b      	lsrs	r3, r3, #2
 8004740:	430a      	orrs	r2, r1
 8004742:	3306      	adds	r3, #6
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	18c3      	adds	r3, r0, r3
 8004748:	3304      	adds	r3, #4
 800474a:	601a      	str	r2, [r3, #0]
}
 800474c:	46c0      	nop			@ (mov r8, r8)
 800474e:	46bd      	mov	sp, r7
 8004750:	b003      	add	sp, #12
 8004752:	bd90      	pop	{r4, r7, pc}
 8004754:	e000e100 	.word	0xe000e100
 8004758:	e000ed00 	.word	0xe000ed00

0800475c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	1e5a      	subs	r2, r3, #1
 8004768:	2380      	movs	r3, #128	@ 0x80
 800476a:	045b      	lsls	r3, r3, #17
 800476c:	429a      	cmp	r2, r3
 800476e:	d301      	bcc.n	8004774 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004770:	2301      	movs	r3, #1
 8004772:	e010      	b.n	8004796 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004774:	4b0a      	ldr	r3, [pc, #40]	@ (80047a0 <SysTick_Config+0x44>)
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	3a01      	subs	r2, #1
 800477a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800477c:	2301      	movs	r3, #1
 800477e:	425b      	negs	r3, r3
 8004780:	2103      	movs	r1, #3
 8004782:	0018      	movs	r0, r3
 8004784:	f7ff ff7c 	bl	8004680 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004788:	4b05      	ldr	r3, [pc, #20]	@ (80047a0 <SysTick_Config+0x44>)
 800478a:	2200      	movs	r2, #0
 800478c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800478e:	4b04      	ldr	r3, [pc, #16]	@ (80047a0 <SysTick_Config+0x44>)
 8004790:	2207      	movs	r2, #7
 8004792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004794:	2300      	movs	r3, #0
}
 8004796:	0018      	movs	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	b002      	add	sp, #8
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			@ (mov r8, r8)
 80047a0:	e000e010 	.word	0xe000e010

080047a4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	210f      	movs	r1, #15
 80047b0:	187b      	adds	r3, r7, r1
 80047b2:	1c02      	adds	r2, r0, #0
 80047b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80047b6:	68ba      	ldr	r2, [r7, #8]
 80047b8:	187b      	adds	r3, r7, r1
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	b25b      	sxtb	r3, r3
 80047be:	0011      	movs	r1, r2
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7ff ff5d 	bl	8004680 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 80047c6:	46c0      	nop			@ (mov r8, r8)
 80047c8:	46bd      	mov	sp, r7
 80047ca:	b004      	add	sp, #16
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b082      	sub	sp, #8
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	0002      	movs	r2, r0
 80047d6:	1dfb      	adds	r3, r7, #7
 80047d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047da:	1dfb      	adds	r3, r7, #7
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	b25b      	sxtb	r3, r3
 80047e0:	0018      	movs	r0, r3
 80047e2:	f7ff ff33 	bl	800464c <__NVIC_EnableIRQ>
}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	46bd      	mov	sp, r7
 80047ea:	b002      	add	sp, #8
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	0018      	movs	r0, r3
 80047fa:	f7ff ffaf 	bl	800475c <SysTick_Config>
 80047fe:	0003      	movs	r3, r0
}
 8004800:	0018      	movs	r0, r3
 8004802:	46bd      	mov	sp, r7
 8004804:	b002      	add	sp, #8
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004812:	2300      	movs	r3, #0
 8004814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800481a:	2300      	movs	r3, #0
 800481c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800481e:	e155      	b.n	8004acc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2101      	movs	r1, #1
 8004826:	697a      	ldr	r2, [r7, #20]
 8004828:	4091      	lsls	r1, r2
 800482a:	000a      	movs	r2, r1
 800482c:	4013      	ands	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d100      	bne.n	8004838 <HAL_GPIO_Init+0x30>
 8004836:	e146      	b.n	8004ac6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2203      	movs	r2, #3
 800483e:	4013      	ands	r3, r2
 8004840:	2b01      	cmp	r3, #1
 8004842:	d005      	beq.n	8004850 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2203      	movs	r2, #3
 800484a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800484c:	2b02      	cmp	r3, #2
 800484e:	d130      	bne.n	80048b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	2203      	movs	r2, #3
 800485c:	409a      	lsls	r2, r3
 800485e:	0013      	movs	r3, r2
 8004860:	43da      	mvns	r2, r3
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4013      	ands	r3, r2
 8004866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	409a      	lsls	r2, r3
 8004872:	0013      	movs	r3, r2
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004886:	2201      	movs	r2, #1
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	409a      	lsls	r2, r3
 800488c:	0013      	movs	r3, r2
 800488e:	43da      	mvns	r2, r3
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	4013      	ands	r3, r2
 8004894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	091b      	lsrs	r3, r3, #4
 800489c:	2201      	movs	r2, #1
 800489e:	401a      	ands	r2, r3
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	409a      	lsls	r2, r3
 80048a4:	0013      	movs	r3, r2
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2203      	movs	r2, #3
 80048b8:	4013      	ands	r3, r2
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d017      	beq.n	80048ee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	2203      	movs	r2, #3
 80048ca:	409a      	lsls	r2, r3
 80048cc:	0013      	movs	r3, r2
 80048ce:	43da      	mvns	r2, r3
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4013      	ands	r3, r2
 80048d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	689a      	ldr	r2, [r3, #8]
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	409a      	lsls	r2, r3
 80048e0:	0013      	movs	r3, r2
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2203      	movs	r2, #3
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d123      	bne.n	8004942 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	08da      	lsrs	r2, r3, #3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3208      	adds	r2, #8
 8004902:	0092      	lsls	r2, r2, #2
 8004904:	58d3      	ldr	r3, [r2, r3]
 8004906:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2207      	movs	r2, #7
 800490c:	4013      	ands	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	220f      	movs	r2, #15
 8004912:	409a      	lsls	r2, r3
 8004914:	0013      	movs	r3, r2
 8004916:	43da      	mvns	r2, r3
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	4013      	ands	r3, r2
 800491c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	691a      	ldr	r2, [r3, #16]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2107      	movs	r1, #7
 8004926:	400b      	ands	r3, r1
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	409a      	lsls	r2, r3
 800492c:	0013      	movs	r3, r2
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	4313      	orrs	r3, r2
 8004932:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	08da      	lsrs	r2, r3, #3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3208      	adds	r2, #8
 800493c:	0092      	lsls	r2, r2, #2
 800493e:	6939      	ldr	r1, [r7, #16]
 8004940:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	2203      	movs	r2, #3
 800494e:	409a      	lsls	r2, r3
 8004950:	0013      	movs	r3, r2
 8004952:	43da      	mvns	r2, r3
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	4013      	ands	r3, r2
 8004958:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2203      	movs	r2, #3
 8004960:	401a      	ands	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	409a      	lsls	r2, r3
 8004968:	0013      	movs	r3, r2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	23c0      	movs	r3, #192	@ 0xc0
 800497c:	029b      	lsls	r3, r3, #10
 800497e:	4013      	ands	r3, r2
 8004980:	d100      	bne.n	8004984 <HAL_GPIO_Init+0x17c>
 8004982:	e0a0      	b.n	8004ac6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004984:	4b57      	ldr	r3, [pc, #348]	@ (8004ae4 <HAL_GPIO_Init+0x2dc>)
 8004986:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004988:	4b56      	ldr	r3, [pc, #344]	@ (8004ae4 <HAL_GPIO_Init+0x2dc>)
 800498a:	2101      	movs	r1, #1
 800498c:	430a      	orrs	r2, r1
 800498e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004990:	4a55      	ldr	r2, [pc, #340]	@ (8004ae8 <HAL_GPIO_Init+0x2e0>)
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	089b      	lsrs	r3, r3, #2
 8004996:	3302      	adds	r3, #2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	589b      	ldr	r3, [r3, r2]
 800499c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2203      	movs	r2, #3
 80049a2:	4013      	ands	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	220f      	movs	r2, #15
 80049a8:	409a      	lsls	r2, r3
 80049aa:	0013      	movs	r3, r2
 80049ac:	43da      	mvns	r2, r3
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4013      	ands	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	23a0      	movs	r3, #160	@ 0xa0
 80049b8:	05db      	lsls	r3, r3, #23
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d01f      	beq.n	80049fe <HAL_GPIO_Init+0x1f6>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a4a      	ldr	r2, [pc, #296]	@ (8004aec <HAL_GPIO_Init+0x2e4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d019      	beq.n	80049fa <HAL_GPIO_Init+0x1f2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a49      	ldr	r2, [pc, #292]	@ (8004af0 <HAL_GPIO_Init+0x2e8>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d013      	beq.n	80049f6 <HAL_GPIO_Init+0x1ee>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a48      	ldr	r2, [pc, #288]	@ (8004af4 <HAL_GPIO_Init+0x2ec>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00d      	beq.n	80049f2 <HAL_GPIO_Init+0x1ea>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a47      	ldr	r2, [pc, #284]	@ (8004af8 <HAL_GPIO_Init+0x2f0>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d007      	beq.n	80049ee <HAL_GPIO_Init+0x1e6>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a46      	ldr	r2, [pc, #280]	@ (8004afc <HAL_GPIO_Init+0x2f4>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d101      	bne.n	80049ea <HAL_GPIO_Init+0x1e2>
 80049e6:	2305      	movs	r3, #5
 80049e8:	e00a      	b.n	8004a00 <HAL_GPIO_Init+0x1f8>
 80049ea:	2306      	movs	r3, #6
 80049ec:	e008      	b.n	8004a00 <HAL_GPIO_Init+0x1f8>
 80049ee:	2304      	movs	r3, #4
 80049f0:	e006      	b.n	8004a00 <HAL_GPIO_Init+0x1f8>
 80049f2:	2303      	movs	r3, #3
 80049f4:	e004      	b.n	8004a00 <HAL_GPIO_Init+0x1f8>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e002      	b.n	8004a00 <HAL_GPIO_Init+0x1f8>
 80049fa:	2301      	movs	r3, #1
 80049fc:	e000      	b.n	8004a00 <HAL_GPIO_Init+0x1f8>
 80049fe:	2300      	movs	r3, #0
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	2103      	movs	r1, #3
 8004a04:	400a      	ands	r2, r1
 8004a06:	0092      	lsls	r2, r2, #2
 8004a08:	4093      	lsls	r3, r2
 8004a0a:	693a      	ldr	r2, [r7, #16]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a10:	4935      	ldr	r1, [pc, #212]	@ (8004ae8 <HAL_GPIO_Init+0x2e0>)
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	089b      	lsrs	r3, r3, #2
 8004a16:	3302      	adds	r3, #2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a1e:	4b38      	ldr	r3, [pc, #224]	@ (8004b00 <HAL_GPIO_Init+0x2f8>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	43da      	mvns	r2, r3
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	2380      	movs	r3, #128	@ 0x80
 8004a34:	035b      	lsls	r3, r3, #13
 8004a36:	4013      	ands	r3, r2
 8004a38:	d003      	beq.n	8004a42 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004a42:	4b2f      	ldr	r3, [pc, #188]	@ (8004b00 <HAL_GPIO_Init+0x2f8>)
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004a48:	4b2d      	ldr	r3, [pc, #180]	@ (8004b00 <HAL_GPIO_Init+0x2f8>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	43da      	mvns	r2, r3
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4013      	ands	r3, r2
 8004a56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	2380      	movs	r3, #128	@ 0x80
 8004a5e:	039b      	lsls	r3, r3, #14
 8004a60:	4013      	ands	r3, r2
 8004a62:	d003      	beq.n	8004a6c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004a6c:	4b24      	ldr	r3, [pc, #144]	@ (8004b00 <HAL_GPIO_Init+0x2f8>)
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8004a72:	4b23      	ldr	r3, [pc, #140]	@ (8004b00 <HAL_GPIO_Init+0x2f8>)
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	2380      	movs	r3, #128	@ 0x80
 8004a88:	029b      	lsls	r3, r3, #10
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d003      	beq.n	8004a96 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004a96:	4b1a      	ldr	r3, [pc, #104]	@ (8004b00 <HAL_GPIO_Init+0x2f8>)
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a9c:	4b18      	ldr	r3, [pc, #96]	@ (8004b00 <HAL_GPIO_Init+0x2f8>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	43da      	mvns	r2, r3
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	2380      	movs	r3, #128	@ 0x80
 8004ab2:	025b      	lsls	r3, r3, #9
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d003      	beq.n	8004ac0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b00 <HAL_GPIO_Init+0x2f8>)
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	40da      	lsrs	r2, r3
 8004ad4:	1e13      	subs	r3, r2, #0
 8004ad6:	d000      	beq.n	8004ada <HAL_GPIO_Init+0x2d2>
 8004ad8:	e6a2      	b.n	8004820 <HAL_GPIO_Init+0x18>
  }
}
 8004ada:	46c0      	nop			@ (mov r8, r8)
 8004adc:	46c0      	nop			@ (mov r8, r8)
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	b006      	add	sp, #24
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000
 8004ae8:	40010000 	.word	0x40010000
 8004aec:	50000400 	.word	0x50000400
 8004af0:	50000800 	.word	0x50000800
 8004af4:	50000c00 	.word	0x50000c00
 8004af8:	50001000 	.word	0x50001000
 8004afc:	50001c00 	.word	0x50001c00
 8004b00:	40010400 	.word	0x40010400

08004b04 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8004b1a:	e0bc      	b.n	8004c96 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	409a      	lsls	r2, r3
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	4013      	ands	r3, r2
 8004b26:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d100      	bne.n	8004b30 <HAL_GPIO_DeInit+0x2c>
 8004b2e:	e0af      	b.n	8004c90 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8004b30:	4a5e      	ldr	r2, [pc, #376]	@ (8004cac <HAL_GPIO_DeInit+0x1a8>)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	089b      	lsrs	r3, r3, #2
 8004b36:	3302      	adds	r3, #2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	589b      	ldr	r3, [r3, r2]
 8004b3c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	2203      	movs	r2, #3
 8004b42:	4013      	ands	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	220f      	movs	r2, #15
 8004b48:	409a      	lsls	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	23a0      	movs	r3, #160	@ 0xa0
 8004b54:	05db      	lsls	r3, r3, #23
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d01f      	beq.n	8004b9a <HAL_GPIO_DeInit+0x96>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a54      	ldr	r2, [pc, #336]	@ (8004cb0 <HAL_GPIO_DeInit+0x1ac>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d019      	beq.n	8004b96 <HAL_GPIO_DeInit+0x92>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a53      	ldr	r2, [pc, #332]	@ (8004cb4 <HAL_GPIO_DeInit+0x1b0>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <HAL_GPIO_DeInit+0x8e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a52      	ldr	r2, [pc, #328]	@ (8004cb8 <HAL_GPIO_DeInit+0x1b4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00d      	beq.n	8004b8e <HAL_GPIO_DeInit+0x8a>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a51      	ldr	r2, [pc, #324]	@ (8004cbc <HAL_GPIO_DeInit+0x1b8>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d007      	beq.n	8004b8a <HAL_GPIO_DeInit+0x86>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a50      	ldr	r2, [pc, #320]	@ (8004cc0 <HAL_GPIO_DeInit+0x1bc>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d101      	bne.n	8004b86 <HAL_GPIO_DeInit+0x82>
 8004b82:	2305      	movs	r3, #5
 8004b84:	e00a      	b.n	8004b9c <HAL_GPIO_DeInit+0x98>
 8004b86:	2306      	movs	r3, #6
 8004b88:	e008      	b.n	8004b9c <HAL_GPIO_DeInit+0x98>
 8004b8a:	2304      	movs	r3, #4
 8004b8c:	e006      	b.n	8004b9c <HAL_GPIO_DeInit+0x98>
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e004      	b.n	8004b9c <HAL_GPIO_DeInit+0x98>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e002      	b.n	8004b9c <HAL_GPIO_DeInit+0x98>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_GPIO_DeInit+0x98>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	2103      	movs	r1, #3
 8004ba0:	400a      	ands	r2, r1
 8004ba2:	0092      	lsls	r2, r2, #2
 8004ba4:	4093      	lsls	r3, r2
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d132      	bne.n	8004c12 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004bac:	4b45      	ldr	r3, [pc, #276]	@ (8004cc4 <HAL_GPIO_DeInit+0x1c0>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	43d9      	mvns	r1, r3
 8004bb4:	4b43      	ldr	r3, [pc, #268]	@ (8004cc4 <HAL_GPIO_DeInit+0x1c0>)
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004bba:	4b42      	ldr	r3, [pc, #264]	@ (8004cc4 <HAL_GPIO_DeInit+0x1c0>)
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	43d9      	mvns	r1, r3
 8004bc2:	4b40      	ldr	r3, [pc, #256]	@ (8004cc4 <HAL_GPIO_DeInit+0x1c0>)
 8004bc4:	400a      	ands	r2, r1
 8004bc6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8004cc4 <HAL_GPIO_DeInit+0x1c0>)
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	43d9      	mvns	r1, r3
 8004bd0:	4b3c      	ldr	r3, [pc, #240]	@ (8004cc4 <HAL_GPIO_DeInit+0x1c0>)
 8004bd2:	400a      	ands	r2, r1
 8004bd4:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004bd6:	4b3b      	ldr	r3, [pc, #236]	@ (8004cc4 <HAL_GPIO_DeInit+0x1c0>)
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	43d9      	mvns	r1, r3
 8004bde:	4b39      	ldr	r3, [pc, #228]	@ (8004cc4 <HAL_GPIO_DeInit+0x1c0>)
 8004be0:	400a      	ands	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2203      	movs	r2, #3
 8004be8:	4013      	ands	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	220f      	movs	r2, #15
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	0013      	movs	r3, r2
 8004bf2:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8004cac <HAL_GPIO_DeInit+0x1a8>)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	089b      	lsrs	r3, r3, #2
 8004bfa:	3302      	adds	r3, #2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	589a      	ldr	r2, [r3, r2]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	43d9      	mvns	r1, r3
 8004c04:	4829      	ldr	r0, [pc, #164]	@ (8004cac <HAL_GPIO_DeInit+0x1a8>)
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	089b      	lsrs	r3, r3, #2
 8004c0a:	400a      	ands	r2, r1
 8004c0c:	3302      	adds	r3, #2
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	2103      	movs	r1, #3
 8004c1c:	4099      	lsls	r1, r3
 8004c1e:	000b      	movs	r3, r1
 8004c20:	431a      	orrs	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	08da      	lsrs	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3208      	adds	r2, #8
 8004c2e:	0092      	lsls	r2, r2, #2
 8004c30:	58d3      	ldr	r3, [r2, r3]
 8004c32:	697a      	ldr	r2, [r7, #20]
 8004c34:	2107      	movs	r1, #7
 8004c36:	400a      	ands	r2, r1
 8004c38:	0092      	lsls	r2, r2, #2
 8004c3a:	210f      	movs	r1, #15
 8004c3c:	4091      	lsls	r1, r2
 8004c3e:	000a      	movs	r2, r1
 8004c40:	43d1      	mvns	r1, r2
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	08d2      	lsrs	r2, r2, #3
 8004c46:	4019      	ands	r1, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3208      	adds	r2, #8
 8004c4c:	0092      	lsls	r2, r2, #2
 8004c4e:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	697a      	ldr	r2, [r7, #20]
 8004c56:	0052      	lsls	r2, r2, #1
 8004c58:	2103      	movs	r1, #3
 8004c5a:	4091      	lsls	r1, r2
 8004c5c:	000a      	movs	r2, r1
 8004c5e:	43d2      	mvns	r2, r2
 8004c60:	401a      	ands	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4091      	lsls	r1, r2
 8004c70:	000a      	movs	r2, r1
 8004c72:	43d2      	mvns	r2, r2
 8004c74:	401a      	ands	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	0052      	lsls	r2, r2, #1
 8004c82:	2103      	movs	r1, #3
 8004c84:	4091      	lsls	r1, r2
 8004c86:	000a      	movs	r2, r1
 8004c88:	43d2      	mvns	r2, r2
 8004c8a:	401a      	ands	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	609a      	str	r2, [r3, #8]
    }
    position++;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	3301      	adds	r3, #1
 8004c94:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	40da      	lsrs	r2, r3
 8004c9c:	1e13      	subs	r3, r2, #0
 8004c9e:	d000      	beq.n	8004ca2 <HAL_GPIO_DeInit+0x19e>
 8004ca0:	e73c      	b.n	8004b1c <HAL_GPIO_DeInit+0x18>
  }
}
 8004ca2:	46c0      	nop			@ (mov r8, r8)
 8004ca4:	46c0      	nop			@ (mov r8, r8)
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	b006      	add	sp, #24
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40010000 	.word	0x40010000
 8004cb0:	50000400 	.word	0x50000400
 8004cb4:	50000800 	.word	0x50000800
 8004cb8:	50000c00 	.word	0x50000c00
 8004cbc:	50001000 	.word	0x50001000
 8004cc0:	50001c00 	.word	0x50001c00
 8004cc4:	40010400 	.word	0x40010400

08004cc8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	000a      	movs	r2, r1
 8004cd2:	1cbb      	adds	r3, r7, #2
 8004cd4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	1cba      	adds	r2, r7, #2
 8004cdc:	8812      	ldrh	r2, [r2, #0]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d004      	beq.n	8004cec <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8004ce2:	230f      	movs	r3, #15
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	701a      	strb	r2, [r3, #0]
 8004cea:	e003      	b.n	8004cf4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cec:	230f      	movs	r3, #15
 8004cee:	18fb      	adds	r3, r7, r3
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8004cf4:	230f      	movs	r3, #15
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	781b      	ldrb	r3, [r3, #0]
}
 8004cfa:	0018      	movs	r0, r3
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	b004      	add	sp, #16
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b082      	sub	sp, #8
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
 8004d0a:	0008      	movs	r0, r1
 8004d0c:	0011      	movs	r1, r2
 8004d0e:	1cbb      	adds	r3, r7, #2
 8004d10:	1c02      	adds	r2, r0, #0
 8004d12:	801a      	strh	r2, [r3, #0]
 8004d14:	1c7b      	adds	r3, r7, #1
 8004d16:	1c0a      	adds	r2, r1, #0
 8004d18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d1a:	1c7b      	adds	r3, r7, #1
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d004      	beq.n	8004d2c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004d22:	1cbb      	adds	r3, r7, #2
 8004d24:	881a      	ldrh	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004d2a:	e003      	b.n	8004d34 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004d2c:	1cbb      	adds	r3, r7, #2
 8004d2e:	881a      	ldrh	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d34:	46c0      	nop			@ (mov r8, r8)
 8004d36:	46bd      	mov	sp, r7
 8004d38:	b002      	add	sp, #8
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e08f      	b.n	8004e6e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2241      	movs	r2, #65	@ 0x41
 8004d52:	5c9b      	ldrb	r3, [r3, r2]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d107      	bne.n	8004d6a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2240      	movs	r2, #64	@ 0x40
 8004d5e:	2100      	movs	r1, #0
 8004d60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	0018      	movs	r0, r3
 8004d66:	f7fd fb2f 	bl	80023c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2241      	movs	r2, #65	@ 0x41
 8004d6e:	2124      	movs	r1, #36	@ 0x24
 8004d70:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	438a      	bics	r2, r1
 8004d80:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	493b      	ldr	r1, [pc, #236]	@ (8004e78 <HAL_I2C_Init+0x13c>)
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689a      	ldr	r2, [r3, #8]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4938      	ldr	r1, [pc, #224]	@ (8004e7c <HAL_I2C_Init+0x140>)
 8004d9c:	400a      	ands	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d108      	bne.n	8004dba <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2180      	movs	r1, #128	@ 0x80
 8004db2:	0209      	lsls	r1, r1, #8
 8004db4:	430a      	orrs	r2, r1
 8004db6:	609a      	str	r2, [r3, #8]
 8004db8:	e007      	b.n	8004dca <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2184      	movs	r1, #132	@ 0x84
 8004dc4:	0209      	lsls	r1, r1, #8
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d109      	bne.n	8004de6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2180      	movs	r1, #128	@ 0x80
 8004dde:	0109      	lsls	r1, r1, #4
 8004de0:	430a      	orrs	r2, r1
 8004de2:	605a      	str	r2, [r3, #4]
 8004de4:	e007      	b.n	8004df6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4923      	ldr	r1, [pc, #140]	@ (8004e80 <HAL_I2C_Init+0x144>)
 8004df2:	400a      	ands	r2, r1
 8004df4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4920      	ldr	r1, [pc, #128]	@ (8004e84 <HAL_I2C_Init+0x148>)
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	491a      	ldr	r1, [pc, #104]	@ (8004e7c <HAL_I2C_Init+0x140>)
 8004e12:	400a      	ands	r2, r1
 8004e14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69d9      	ldr	r1, [r3, #28]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a1a      	ldr	r2, [r3, #32]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	430a      	orrs	r2, r1
 8004e3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2241      	movs	r2, #65	@ 0x41
 8004e5a:	2120      	movs	r1, #32
 8004e5c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2242      	movs	r2, #66	@ 0x42
 8004e68:	2100      	movs	r1, #0
 8004e6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	0018      	movs	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b002      	add	sp, #8
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	f0ffffff 	.word	0xf0ffffff
 8004e7c:	ffff7fff 	.word	0xffff7fff
 8004e80:	fffff7ff 	.word	0xfffff7ff
 8004e84:	02008000 	.word	0x02008000

08004e88 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e022      	b.n	8004ee0 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2241      	movs	r2, #65	@ 0x41
 8004e9e:	2124      	movs	r1, #36	@ 0x24
 8004ea0:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2101      	movs	r1, #1
 8004eae:	438a      	bics	r2, r1
 8004eb0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	f7fd facb 	bl	8002450 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2241      	movs	r2, #65	@ 0x41
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2242      	movs	r2, #66	@ 0x42
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2240      	movs	r2, #64	@ 0x40
 8004eda:	2100      	movs	r1, #0
 8004edc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b002      	add	sp, #8
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ee8:	b590      	push	{r4, r7, lr}
 8004eea:	b089      	sub	sp, #36	@ 0x24
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	0008      	movs	r0, r1
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	0019      	movs	r1, r3
 8004ef6:	230a      	movs	r3, #10
 8004ef8:	18fb      	adds	r3, r7, r3
 8004efa:	1c02      	adds	r2, r0, #0
 8004efc:	801a      	strh	r2, [r3, #0]
 8004efe:	2308      	movs	r3, #8
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	1c0a      	adds	r2, r1, #0
 8004f04:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2241      	movs	r2, #65	@ 0x41
 8004f0a:	5c9b      	ldrb	r3, [r3, r2]
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b20      	cmp	r3, #32
 8004f10:	d000      	beq.n	8004f14 <HAL_I2C_Master_Transmit+0x2c>
 8004f12:	e10a      	b.n	800512a <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2240      	movs	r2, #64	@ 0x40
 8004f18:	5c9b      	ldrb	r3, [r3, r2]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d101      	bne.n	8004f22 <HAL_I2C_Master_Transmit+0x3a>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e104      	b.n	800512c <HAL_I2C_Master_Transmit+0x244>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2240      	movs	r2, #64	@ 0x40
 8004f26:	2101      	movs	r1, #1
 8004f28:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f2a:	f7fe fddf 	bl	8003aec <HAL_GetTick>
 8004f2e:	0003      	movs	r3, r0
 8004f30:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f32:	2380      	movs	r3, #128	@ 0x80
 8004f34:	0219      	lsls	r1, r3, #8
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	2319      	movs	r3, #25
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f000 fb22 	bl	8005588 <I2C_WaitOnFlagUntilTimeout>
 8004f44:	1e03      	subs	r3, r0, #0
 8004f46:	d001      	beq.n	8004f4c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e0ef      	b.n	800512c <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2241      	movs	r2, #65	@ 0x41
 8004f50:	2121      	movs	r1, #33	@ 0x21
 8004f52:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2242      	movs	r2, #66	@ 0x42
 8004f58:	2110      	movs	r1, #16
 8004f5a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2208      	movs	r2, #8
 8004f6c:	18ba      	adds	r2, r7, r2
 8004f6e:	8812      	ldrh	r2, [r2, #0]
 8004f70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	2bff      	cmp	r3, #255	@ 0xff
 8004f80:	d906      	bls.n	8004f90 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	22ff      	movs	r2, #255	@ 0xff
 8004f86:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004f88:	2380      	movs	r3, #128	@ 0x80
 8004f8a:	045b      	lsls	r3, r3, #17
 8004f8c:	617b      	str	r3, [r7, #20]
 8004f8e:	e007      	b.n	8004fa0 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f94:	b29a      	uxth	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004f9a:	2380      	movs	r3, #128	@ 0x80
 8004f9c:	049b      	lsls	r3, r3, #18
 8004f9e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d027      	beq.n	8004ff8 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	781a      	ldrb	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	3301      	adds	r3, #1
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	697c      	ldr	r4, [r7, #20]
 8004fe4:	230a      	movs	r3, #10
 8004fe6:	18fb      	adds	r3, r7, r3
 8004fe8:	8819      	ldrh	r1, [r3, #0]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	4b51      	ldr	r3, [pc, #324]	@ (8005134 <HAL_I2C_Master_Transmit+0x24c>)
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	0023      	movs	r3, r4
 8004ff2:	f000 fd41 	bl	8005a78 <I2C_TransferConfig>
 8004ff6:	e06f      	b.n	80050d8 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	697c      	ldr	r4, [r7, #20]
 8005000:	230a      	movs	r3, #10
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	8819      	ldrh	r1, [r3, #0]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	4b4a      	ldr	r3, [pc, #296]	@ (8005134 <HAL_I2C_Master_Transmit+0x24c>)
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	0023      	movs	r3, r4
 800500e:	f000 fd33 	bl	8005a78 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005012:	e061      	b.n	80050d8 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	0018      	movs	r0, r3
 800501c:	f000 fb0c 	bl	8005638 <I2C_WaitOnTXISFlagUntilTimeout>
 8005020:	1e03      	subs	r3, r0, #0
 8005022:	d001      	beq.n	8005028 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e081      	b.n	800512c <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502c:	781a      	ldrb	r2, [r3, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	1c5a      	adds	r2, r3, #1
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005042:	b29b      	uxth	r3, r3
 8005044:	3b01      	subs	r3, #1
 8005046:	b29a      	uxth	r2, r3
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005050:	3b01      	subs	r3, #1
 8005052:	b29a      	uxth	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	d03a      	beq.n	80050d8 <HAL_I2C_Master_Transmit+0x1f0>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005066:	2b00      	cmp	r3, #0
 8005068:	d136      	bne.n	80050d8 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800506a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	0013      	movs	r3, r2
 8005074:	2200      	movs	r2, #0
 8005076:	2180      	movs	r1, #128	@ 0x80
 8005078:	f000 fa86 	bl	8005588 <I2C_WaitOnFlagUntilTimeout>
 800507c:	1e03      	subs	r3, r0, #0
 800507e:	d001      	beq.n	8005084 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e053      	b.n	800512c <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005088:	b29b      	uxth	r3, r3
 800508a:	2bff      	cmp	r3, #255	@ 0xff
 800508c:	d911      	bls.n	80050b2 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	22ff      	movs	r2, #255	@ 0xff
 8005092:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005098:	b2da      	uxtb	r2, r3
 800509a:	2380      	movs	r3, #128	@ 0x80
 800509c:	045c      	lsls	r4, r3, #17
 800509e:	230a      	movs	r3, #10
 80050a0:	18fb      	adds	r3, r7, r3
 80050a2:	8819      	ldrh	r1, [r3, #0]
 80050a4:	68f8      	ldr	r0, [r7, #12]
 80050a6:	2300      	movs	r3, #0
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	0023      	movs	r3, r4
 80050ac:	f000 fce4 	bl	8005a78 <I2C_TransferConfig>
 80050b0:	e012      	b.n	80050d8 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	2380      	movs	r3, #128	@ 0x80
 80050c4:	049c      	lsls	r4, r3, #18
 80050c6:	230a      	movs	r3, #10
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	8819      	ldrh	r1, [r3, #0]
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	2300      	movs	r3, #0
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	0023      	movs	r3, r4
 80050d4:	f000 fcd0 	bl	8005a78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d198      	bne.n	8005014 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	0018      	movs	r0, r3
 80050ea:	f000 faeb 	bl	80056c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80050ee:	1e03      	subs	r3, r0, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e01a      	b.n	800512c <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2220      	movs	r2, #32
 80050fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	490b      	ldr	r1, [pc, #44]	@ (8005138 <HAL_I2C_Master_Transmit+0x250>)
 800510a:	400a      	ands	r2, r1
 800510c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2241      	movs	r2, #65	@ 0x41
 8005112:	2120      	movs	r1, #32
 8005114:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2242      	movs	r2, #66	@ 0x42
 800511a:	2100      	movs	r1, #0
 800511c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2240      	movs	r2, #64	@ 0x40
 8005122:	2100      	movs	r1, #0
 8005124:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	e000      	b.n	800512c <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 800512a:	2302      	movs	r3, #2
  }
}
 800512c:	0018      	movs	r0, r3
 800512e:	46bd      	mov	sp, r7
 8005130:	b007      	add	sp, #28
 8005132:	bd90      	pop	{r4, r7, pc}
 8005134:	80002000 	.word	0x80002000
 8005138:	fe00e800 	.word	0xfe00e800

0800513c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800513c:	b590      	push	{r4, r7, lr}
 800513e:	b089      	sub	sp, #36	@ 0x24
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	0008      	movs	r0, r1
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	0019      	movs	r1, r3
 800514a:	230a      	movs	r3, #10
 800514c:	18fb      	adds	r3, r7, r3
 800514e:	1c02      	adds	r2, r0, #0
 8005150:	801a      	strh	r2, [r3, #0]
 8005152:	2308      	movs	r3, #8
 8005154:	18fb      	adds	r3, r7, r3
 8005156:	1c0a      	adds	r2, r1, #0
 8005158:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2241      	movs	r2, #65	@ 0x41
 800515e:	5c9b      	ldrb	r3, [r3, r2]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b20      	cmp	r3, #32
 8005164:	d000      	beq.n	8005168 <HAL_I2C_Master_Receive+0x2c>
 8005166:	e0e8      	b.n	800533a <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2240      	movs	r2, #64	@ 0x40
 800516c:	5c9b      	ldrb	r3, [r3, r2]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d101      	bne.n	8005176 <HAL_I2C_Master_Receive+0x3a>
 8005172:	2302      	movs	r3, #2
 8005174:	e0e2      	b.n	800533c <HAL_I2C_Master_Receive+0x200>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2240      	movs	r2, #64	@ 0x40
 800517a:	2101      	movs	r1, #1
 800517c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800517e:	f7fe fcb5 	bl	8003aec <HAL_GetTick>
 8005182:	0003      	movs	r3, r0
 8005184:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005186:	2380      	movs	r3, #128	@ 0x80
 8005188:	0219      	lsls	r1, r3, #8
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	9300      	str	r3, [sp, #0]
 8005190:	2319      	movs	r3, #25
 8005192:	2201      	movs	r2, #1
 8005194:	f000 f9f8 	bl	8005588 <I2C_WaitOnFlagUntilTimeout>
 8005198:	1e03      	subs	r3, r0, #0
 800519a:	d001      	beq.n	80051a0 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800519c:	2301      	movs	r3, #1
 800519e:	e0cd      	b.n	800533c <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2241      	movs	r2, #65	@ 0x41
 80051a4:	2122      	movs	r1, #34	@ 0x22
 80051a6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2242      	movs	r2, #66	@ 0x42
 80051ac:	2110      	movs	r1, #16
 80051ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2208      	movs	r2, #8
 80051c0:	18ba      	adds	r2, r7, r2
 80051c2:	8812      	ldrh	r2, [r2, #0]
 80051c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d0:	b29b      	uxth	r3, r3
 80051d2:	2bff      	cmp	r3, #255	@ 0xff
 80051d4:	d911      	bls.n	80051fa <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	2380      	movs	r3, #128	@ 0x80
 80051e4:	045c      	lsls	r4, r3, #17
 80051e6:	230a      	movs	r3, #10
 80051e8:	18fb      	adds	r3, r7, r3
 80051ea:	8819      	ldrh	r1, [r3, #0]
 80051ec:	68f8      	ldr	r0, [r7, #12]
 80051ee:	4b55      	ldr	r3, [pc, #340]	@ (8005344 <HAL_I2C_Master_Receive+0x208>)
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	0023      	movs	r3, r4
 80051f4:	f000 fc40 	bl	8005a78 <I2C_TransferConfig>
 80051f8:	e076      	b.n	80052e8 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005208:	b2da      	uxtb	r2, r3
 800520a:	2380      	movs	r3, #128	@ 0x80
 800520c:	049c      	lsls	r4, r3, #18
 800520e:	230a      	movs	r3, #10
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	8819      	ldrh	r1, [r3, #0]
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	4b4b      	ldr	r3, [pc, #300]	@ (8005344 <HAL_I2C_Master_Receive+0x208>)
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	0023      	movs	r3, r4
 800521c:	f000 fc2c 	bl	8005a78 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005220:	e062      	b.n	80052e8 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	0018      	movs	r0, r3
 800522a:	f000 fa8f 	bl	800574c <I2C_WaitOnRXNEFlagUntilTimeout>
 800522e:	1e03      	subs	r3, r0, #0
 8005230:	d001      	beq.n	8005236 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e082      	b.n	800533c <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005240:	b2d2      	uxtb	r2, r2
 8005242:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005248:	1c5a      	adds	r2, r3, #1
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005252:	3b01      	subs	r3, #1
 8005254:	b29a      	uxth	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800525e:	b29b      	uxth	r3, r3
 8005260:	3b01      	subs	r3, #1
 8005262:	b29a      	uxth	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d03a      	beq.n	80052e8 <HAL_I2C_Master_Receive+0x1ac>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	d136      	bne.n	80052e8 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800527a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	0013      	movs	r3, r2
 8005284:	2200      	movs	r2, #0
 8005286:	2180      	movs	r1, #128	@ 0x80
 8005288:	f000 f97e 	bl	8005588 <I2C_WaitOnFlagUntilTimeout>
 800528c:	1e03      	subs	r3, r0, #0
 800528e:	d001      	beq.n	8005294 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e053      	b.n	800533c <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005298:	b29b      	uxth	r3, r3
 800529a:	2bff      	cmp	r3, #255	@ 0xff
 800529c:	d911      	bls.n	80052c2 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	22ff      	movs	r2, #255	@ 0xff
 80052a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a8:	b2da      	uxtb	r2, r3
 80052aa:	2380      	movs	r3, #128	@ 0x80
 80052ac:	045c      	lsls	r4, r3, #17
 80052ae:	230a      	movs	r3, #10
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	8819      	ldrh	r1, [r3, #0]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	2300      	movs	r3, #0
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	0023      	movs	r3, r4
 80052bc:	f000 fbdc 	bl	8005a78 <I2C_TransferConfig>
 80052c0:	e012      	b.n	80052e8 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c6:	b29a      	uxth	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	2380      	movs	r3, #128	@ 0x80
 80052d4:	049c      	lsls	r4, r3, #18
 80052d6:	230a      	movs	r3, #10
 80052d8:	18fb      	adds	r3, r7, r3
 80052da:	8819      	ldrh	r1, [r3, #0]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	2300      	movs	r3, #0
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	0023      	movs	r3, r4
 80052e4:	f000 fbc8 	bl	8005a78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d197      	bne.n	8005222 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	0018      	movs	r0, r3
 80052fa:	f000 f9e3 	bl	80056c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052fe:	1e03      	subs	r3, r0, #0
 8005300:	d001      	beq.n	8005306 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e01a      	b.n	800533c <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2220      	movs	r2, #32
 800530c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	490b      	ldr	r1, [pc, #44]	@ (8005348 <HAL_I2C_Master_Receive+0x20c>)
 800531a:	400a      	ands	r2, r1
 800531c:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2241      	movs	r2, #65	@ 0x41
 8005322:	2120      	movs	r1, #32
 8005324:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2242      	movs	r2, #66	@ 0x42
 800532a:	2100      	movs	r1, #0
 800532c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2240      	movs	r2, #64	@ 0x40
 8005332:	2100      	movs	r1, #0
 8005334:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005336:	2300      	movs	r3, #0
 8005338:	e000      	b.n	800533c <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800533a:	2302      	movs	r3, #2
  }
}
 800533c:	0018      	movs	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	b007      	add	sp, #28
 8005342:	bd90      	pop	{r4, r7, pc}
 8005344:	80002400 	.word	0x80002400
 8005348:	fe00e800 	.word	0xfe00e800

0800534c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b08a      	sub	sp, #40	@ 0x28
 8005350:	af02      	add	r7, sp, #8
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	607a      	str	r2, [r7, #4]
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	230a      	movs	r3, #10
 800535a:	18fb      	adds	r3, r7, r3
 800535c:	1c0a      	adds	r2, r1, #0
 800535e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2241      	movs	r2, #65	@ 0x41
 8005368:	5c9b      	ldrb	r3, [r3, r2]
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b20      	cmp	r3, #32
 800536e:	d000      	beq.n	8005372 <HAL_I2C_IsDeviceReady+0x26>
 8005370:	e0df      	b.n	8005532 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	699a      	ldr	r2, [r3, #24]
 8005378:	2380      	movs	r3, #128	@ 0x80
 800537a:	021b      	lsls	r3, r3, #8
 800537c:	401a      	ands	r2, r3
 800537e:	2380      	movs	r3, #128	@ 0x80
 8005380:	021b      	lsls	r3, r3, #8
 8005382:	429a      	cmp	r2, r3
 8005384:	d101      	bne.n	800538a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8005386:	2302      	movs	r3, #2
 8005388:	e0d4      	b.n	8005534 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2240      	movs	r2, #64	@ 0x40
 800538e:	5c9b      	ldrb	r3, [r3, r2]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d101      	bne.n	8005398 <HAL_I2C_IsDeviceReady+0x4c>
 8005394:	2302      	movs	r3, #2
 8005396:	e0cd      	b.n	8005534 <HAL_I2C_IsDeviceReady+0x1e8>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2240      	movs	r2, #64	@ 0x40
 800539c:	2101      	movs	r1, #1
 800539e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2241      	movs	r2, #65	@ 0x41
 80053a4:	2124      	movs	r1, #36	@ 0x24
 80053a6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d107      	bne.n	80053c6 <HAL_I2C_IsDeviceReady+0x7a>
 80053b6:	230a      	movs	r3, #10
 80053b8:	18fb      	adds	r3, r7, r3
 80053ba:	881b      	ldrh	r3, [r3, #0]
 80053bc:	059b      	lsls	r3, r3, #22
 80053be:	0d9b      	lsrs	r3, r3, #22
 80053c0:	4a5e      	ldr	r2, [pc, #376]	@ (800553c <HAL_I2C_IsDeviceReady+0x1f0>)
 80053c2:	431a      	orrs	r2, r3
 80053c4:	e006      	b.n	80053d4 <HAL_I2C_IsDeviceReady+0x88>
 80053c6:	230a      	movs	r3, #10
 80053c8:	18fb      	adds	r3, r7, r3
 80053ca:	881b      	ldrh	r3, [r3, #0]
 80053cc:	059b      	lsls	r3, r3, #22
 80053ce:	0d9b      	lsrs	r3, r3, #22
 80053d0:	4a5b      	ldr	r2, [pc, #364]	@ (8005540 <HAL_I2C_IsDeviceReady+0x1f4>)
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80053da:	f7fe fb87 	bl	8003aec <HAL_GetTick>
 80053de:	0003      	movs	r3, r0
 80053e0:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2220      	movs	r2, #32
 80053ea:	4013      	ands	r3, r2
 80053ec:	3b20      	subs	r3, #32
 80053ee:	425a      	negs	r2, r3
 80053f0:	4153      	adcs	r3, r2
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	231f      	movs	r3, #31
 80053f6:	18fb      	adds	r3, r7, r3
 80053f8:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	2210      	movs	r2, #16
 8005402:	4013      	ands	r3, r2
 8005404:	3b10      	subs	r3, #16
 8005406:	425a      	negs	r2, r3
 8005408:	4153      	adcs	r3, r2
 800540a:	b2da      	uxtb	r2, r3
 800540c:	231e      	movs	r3, #30
 800540e:	18fb      	adds	r3, r7, r3
 8005410:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005412:	e035      	b.n	8005480 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	3301      	adds	r3, #1
 8005418:	d01a      	beq.n	8005450 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800541a:	f7fe fb67 	bl	8003aec <HAL_GetTick>
 800541e:	0002      	movs	r2, r0
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	683a      	ldr	r2, [r7, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d302      	bcc.n	8005430 <HAL_I2C_IsDeviceReady+0xe4>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10f      	bne.n	8005450 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2241      	movs	r2, #65	@ 0x41
 8005434:	2120      	movs	r1, #32
 8005436:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543c:	2220      	movs	r2, #32
 800543e:	431a      	orrs	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2240      	movs	r2, #64	@ 0x40
 8005448:	2100      	movs	r1, #0
 800544a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e071      	b.n	8005534 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	2220      	movs	r2, #32
 8005458:	4013      	ands	r3, r2
 800545a:	3b20      	subs	r3, #32
 800545c:	425a      	negs	r2, r3
 800545e:	4153      	adcs	r3, r2
 8005460:	b2da      	uxtb	r2, r3
 8005462:	231f      	movs	r3, #31
 8005464:	18fb      	adds	r3, r7, r3
 8005466:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	2210      	movs	r2, #16
 8005470:	4013      	ands	r3, r2
 8005472:	3b10      	subs	r3, #16
 8005474:	425a      	negs	r2, r3
 8005476:	4153      	adcs	r3, r2
 8005478:	b2da      	uxtb	r2, r3
 800547a:	231e      	movs	r3, #30
 800547c:	18fb      	adds	r3, r7, r3
 800547e:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005480:	231f      	movs	r3, #31
 8005482:	18fb      	adds	r3, r7, r3
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d104      	bne.n	8005494 <HAL_I2C_IsDeviceReady+0x148>
 800548a:	231e      	movs	r3, #30
 800548c:	18fb      	adds	r3, r7, r3
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d0bf      	beq.n	8005414 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	2210      	movs	r2, #16
 800549c:	4013      	ands	r3, r2
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d01a      	beq.n	80054d8 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	0013      	movs	r3, r2
 80054ac:	2200      	movs	r2, #0
 80054ae:	2120      	movs	r1, #32
 80054b0:	f000 f86a 	bl	8005588 <I2C_WaitOnFlagUntilTimeout>
 80054b4:	1e03      	subs	r3, r0, #0
 80054b6:	d001      	beq.n	80054bc <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e03b      	b.n	8005534 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2220      	movs	r2, #32
 80054c2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2241      	movs	r2, #65	@ 0x41
 80054c8:	2120      	movs	r1, #32
 80054ca:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2240      	movs	r2, #64	@ 0x40
 80054d0:	2100      	movs	r1, #0
 80054d2:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80054d4:	2300      	movs	r3, #0
 80054d6:	e02d      	b.n	8005534 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	0013      	movs	r3, r2
 80054e2:	2200      	movs	r2, #0
 80054e4:	2120      	movs	r1, #32
 80054e6:	f000 f84f 	bl	8005588 <I2C_WaitOnFlagUntilTimeout>
 80054ea:	1e03      	subs	r3, r0, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e020      	b.n	8005534 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2210      	movs	r2, #16
 80054f8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2220      	movs	r2, #32
 8005500:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	3301      	adds	r3, #1
 8005506:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	429a      	cmp	r2, r3
 800550e:	d900      	bls.n	8005512 <HAL_I2C_IsDeviceReady+0x1c6>
 8005510:	e74d      	b.n	80053ae <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2241      	movs	r2, #65	@ 0x41
 8005516:	2120      	movs	r1, #32
 8005518:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551e:	2220      	movs	r2, #32
 8005520:	431a      	orrs	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2240      	movs	r2, #64	@ 0x40
 800552a:	2100      	movs	r1, #0
 800552c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 8005532:	2302      	movs	r3, #2
  }
}
 8005534:	0018      	movs	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	b008      	add	sp, #32
 800553a:	bd80      	pop	{r7, pc}
 800553c:	02002000 	.word	0x02002000
 8005540:	02002800 	.word	0x02002800

08005544 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	2202      	movs	r2, #2
 8005554:	4013      	ands	r3, r2
 8005556:	2b02      	cmp	r3, #2
 8005558:	d103      	bne.n	8005562 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2200      	movs	r2, #0
 8005560:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	2201      	movs	r2, #1
 800556a:	4013      	ands	r3, r2
 800556c:	2b01      	cmp	r3, #1
 800556e:	d007      	beq.n	8005580 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699a      	ldr	r2, [r3, #24]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2101      	movs	r1, #1
 800557c:	430a      	orrs	r2, r1
 800557e:	619a      	str	r2, [r3, #24]
  }
}
 8005580:	46c0      	nop			@ (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	b002      	add	sp, #8
 8005586:	bd80      	pop	{r7, pc}

08005588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	1dfb      	adds	r3, r7, #7
 8005596:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005598:	e03a      	b.n	8005610 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800559a:	69ba      	ldr	r2, [r7, #24]
 800559c:	6839      	ldr	r1, [r7, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	0018      	movs	r0, r3
 80055a2:	f000 f971 	bl	8005888 <I2C_IsErrorOccurred>
 80055a6:	1e03      	subs	r3, r0, #0
 80055a8:	d001      	beq.n	80055ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e040      	b.n	8005630 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	3301      	adds	r3, #1
 80055b2:	d02d      	beq.n	8005610 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055b4:	f7fe fa9a 	bl	8003aec <HAL_GetTick>
 80055b8:	0002      	movs	r2, r0
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d302      	bcc.n	80055ca <I2C_WaitOnFlagUntilTimeout+0x42>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d122      	bne.n	8005610 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	4013      	ands	r3, r2
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	425a      	negs	r2, r3
 80055da:	4153      	adcs	r3, r2
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	001a      	movs	r2, r3
 80055e0:	1dfb      	adds	r3, r7, #7
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d113      	bne.n	8005610 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ec:	2220      	movs	r2, #32
 80055ee:	431a      	orrs	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2241      	movs	r2, #65	@ 0x41
 80055f8:	2120      	movs	r1, #32
 80055fa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2242      	movs	r2, #66	@ 0x42
 8005600:	2100      	movs	r1, #0
 8005602:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2240      	movs	r2, #64	@ 0x40
 8005608:	2100      	movs	r1, #0
 800560a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e00f      	b.n	8005630 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	4013      	ands	r3, r2
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	425a      	negs	r2, r3
 8005620:	4153      	adcs	r3, r2
 8005622:	b2db      	uxtb	r3, r3
 8005624:	001a      	movs	r2, r3
 8005626:	1dfb      	adds	r3, r7, #7
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	429a      	cmp	r2, r3
 800562c:	d0b5      	beq.n	800559a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	0018      	movs	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	b004      	add	sp, #16
 8005636:	bd80      	pop	{r7, pc}

08005638 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005644:	e032      	b.n	80056ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	0018      	movs	r0, r3
 800564e:	f000 f91b 	bl	8005888 <I2C_IsErrorOccurred>
 8005652:	1e03      	subs	r3, r0, #0
 8005654:	d001      	beq.n	800565a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e030      	b.n	80056bc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	3301      	adds	r3, #1
 800565e:	d025      	beq.n	80056ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005660:	f7fe fa44 	bl	8003aec <HAL_GetTick>
 8005664:	0002      	movs	r2, r0
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	429a      	cmp	r2, r3
 800566e:	d302      	bcc.n	8005676 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d11a      	bne.n	80056ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	2202      	movs	r2, #2
 800567e:	4013      	ands	r3, r2
 8005680:	2b02      	cmp	r3, #2
 8005682:	d013      	beq.n	80056ac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005688:	2220      	movs	r2, #32
 800568a:	431a      	orrs	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2241      	movs	r2, #65	@ 0x41
 8005694:	2120      	movs	r1, #32
 8005696:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2242      	movs	r2, #66	@ 0x42
 800569c:	2100      	movs	r1, #0
 800569e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2240      	movs	r2, #64	@ 0x40
 80056a4:	2100      	movs	r1, #0
 80056a6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e007      	b.n	80056bc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	2202      	movs	r2, #2
 80056b4:	4013      	ands	r3, r2
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d1c5      	bne.n	8005646 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	0018      	movs	r0, r3
 80056be:	46bd      	mov	sp, r7
 80056c0:	b004      	add	sp, #16
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b084      	sub	sp, #16
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056d0:	e02f      	b.n	8005732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	0018      	movs	r0, r3
 80056da:	f000 f8d5 	bl	8005888 <I2C_IsErrorOccurred>
 80056de:	1e03      	subs	r3, r0, #0
 80056e0:	d001      	beq.n	80056e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e02d      	b.n	8005742 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e6:	f7fe fa01 	bl	8003aec <HAL_GetTick>
 80056ea:	0002      	movs	r2, r0
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	68ba      	ldr	r2, [r7, #8]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d302      	bcc.n	80056fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d11a      	bne.n	8005732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	2220      	movs	r2, #32
 8005704:	4013      	ands	r3, r2
 8005706:	2b20      	cmp	r3, #32
 8005708:	d013      	beq.n	8005732 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570e:	2220      	movs	r2, #32
 8005710:	431a      	orrs	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2241      	movs	r2, #65	@ 0x41
 800571a:	2120      	movs	r1, #32
 800571c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2242      	movs	r2, #66	@ 0x42
 8005722:	2100      	movs	r1, #0
 8005724:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2240      	movs	r2, #64	@ 0x40
 800572a:	2100      	movs	r1, #0
 800572c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e007      	b.n	8005742 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	2220      	movs	r2, #32
 800573a:	4013      	ands	r3, r2
 800573c:	2b20      	cmp	r3, #32
 800573e:	d1c8      	bne.n	80056d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	0018      	movs	r0, r3
 8005744:	46bd      	mov	sp, r7
 8005746:	b004      	add	sp, #16
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005758:	2317      	movs	r3, #23
 800575a:	18fb      	adds	r3, r7, r3
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005760:	e07b      	b.n	800585a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	68b9      	ldr	r1, [r7, #8]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	0018      	movs	r0, r3
 800576a:	f000 f88d 	bl	8005888 <I2C_IsErrorOccurred>
 800576e:	1e03      	subs	r3, r0, #0
 8005770:	d003      	beq.n	800577a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8005772:	2317      	movs	r3, #23
 8005774:	18fb      	adds	r3, r7, r3
 8005776:	2201      	movs	r2, #1
 8005778:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	699b      	ldr	r3, [r3, #24]
 8005780:	2220      	movs	r2, #32
 8005782:	4013      	ands	r3, r2
 8005784:	2b20      	cmp	r3, #32
 8005786:	d140      	bne.n	800580a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8005788:	2117      	movs	r1, #23
 800578a:	187b      	adds	r3, r7, r1
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d13b      	bne.n	800580a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	2204      	movs	r2, #4
 800579a:	4013      	ands	r3, r2
 800579c:	2b04      	cmp	r3, #4
 800579e:	d106      	bne.n	80057ae <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80057a8:	187b      	adds	r3, r7, r1
 80057aa:	2200      	movs	r2, #0
 80057ac:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	2210      	movs	r2, #16
 80057b6:	4013      	ands	r3, r2
 80057b8:	2b10      	cmp	r3, #16
 80057ba:	d123      	bne.n	8005804 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2210      	movs	r2, #16
 80057c2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2204      	movs	r2, #4
 80057c8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2220      	movs	r2, #32
 80057d0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4929      	ldr	r1, [pc, #164]	@ (8005884 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80057de:	400a      	ands	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2241      	movs	r2, #65	@ 0x41
 80057e6:	2120      	movs	r1, #32
 80057e8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2242      	movs	r2, #66	@ 0x42
 80057ee:	2100      	movs	r1, #0
 80057f0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2240      	movs	r2, #64	@ 0x40
 80057f6:	2100      	movs	r1, #0
 80057f8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80057fa:	2317      	movs	r3, #23
 80057fc:	18fb      	adds	r3, r7, r3
 80057fe:	2201      	movs	r2, #1
 8005800:	701a      	strb	r2, [r3, #0]
 8005802:	e002      	b.n	800580a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2200      	movs	r2, #0
 8005808:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800580a:	f7fe f96f 	bl	8003aec <HAL_GetTick>
 800580e:	0002      	movs	r2, r0
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	429a      	cmp	r2, r3
 8005818:	d302      	bcc.n	8005820 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d11c      	bne.n	800585a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8005820:	2017      	movs	r0, #23
 8005822:	183b      	adds	r3, r7, r0
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d117      	bne.n	800585a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	699b      	ldr	r3, [r3, #24]
 8005830:	2204      	movs	r2, #4
 8005832:	4013      	ands	r3, r2
 8005834:	2b04      	cmp	r3, #4
 8005836:	d010      	beq.n	800585a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583c:	2220      	movs	r2, #32
 800583e:	431a      	orrs	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2241      	movs	r2, #65	@ 0x41
 8005848:	2120      	movs	r1, #32
 800584a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2240      	movs	r2, #64	@ 0x40
 8005850:	2100      	movs	r1, #0
 8005852:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8005854:	183b      	adds	r3, r7, r0
 8005856:	2201      	movs	r2, #1
 8005858:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	2204      	movs	r2, #4
 8005862:	4013      	ands	r3, r2
 8005864:	2b04      	cmp	r3, #4
 8005866:	d005      	beq.n	8005874 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8005868:	2317      	movs	r3, #23
 800586a:	18fb      	adds	r3, r7, r3
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d100      	bne.n	8005874 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8005872:	e776      	b.n	8005762 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8005874:	2317      	movs	r3, #23
 8005876:	18fb      	adds	r3, r7, r3
 8005878:	781b      	ldrb	r3, [r3, #0]
}
 800587a:	0018      	movs	r0, r3
 800587c:	46bd      	mov	sp, r7
 800587e:	b006      	add	sp, #24
 8005880:	bd80      	pop	{r7, pc}
 8005882:	46c0      	nop			@ (mov r8, r8)
 8005884:	fe00e800 	.word	0xfe00e800

08005888 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b08a      	sub	sp, #40	@ 0x28
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005894:	2327      	movs	r3, #39	@ 0x27
 8005896:	18fb      	adds	r3, r7, r3
 8005898:	2200      	movs	r2, #0
 800589a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	2210      	movs	r2, #16
 80058b0:	4013      	ands	r3, r2
 80058b2:	d100      	bne.n	80058b6 <I2C_IsErrorOccurred+0x2e>
 80058b4:	e079      	b.n	80059aa <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2210      	movs	r2, #16
 80058bc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80058be:	e057      	b.n	8005970 <I2C_IsErrorOccurred+0xe8>
 80058c0:	2227      	movs	r2, #39	@ 0x27
 80058c2:	18bb      	adds	r3, r7, r2
 80058c4:	18ba      	adds	r2, r7, r2
 80058c6:	7812      	ldrb	r2, [r2, #0]
 80058c8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	3301      	adds	r3, #1
 80058ce:	d04f      	beq.n	8005970 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80058d0:	f7fe f90c 	bl	8003aec <HAL_GetTick>
 80058d4:	0002      	movs	r2, r0
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d302      	bcc.n	80058e6 <I2C_IsErrorOccurred+0x5e>
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d144      	bne.n	8005970 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	2380      	movs	r3, #128	@ 0x80
 80058ee:	01db      	lsls	r3, r3, #7
 80058f0:	4013      	ands	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80058f4:	2013      	movs	r0, #19
 80058f6:	183b      	adds	r3, r7, r0
 80058f8:	68fa      	ldr	r2, [r7, #12]
 80058fa:	2142      	movs	r1, #66	@ 0x42
 80058fc:	5c52      	ldrb	r2, [r2, r1]
 80058fe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	2380      	movs	r3, #128	@ 0x80
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	401a      	ands	r2, r3
 800590c:	2380      	movs	r3, #128	@ 0x80
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	429a      	cmp	r2, r3
 8005912:	d126      	bne.n	8005962 <I2C_IsErrorOccurred+0xda>
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	2380      	movs	r3, #128	@ 0x80
 8005918:	01db      	lsls	r3, r3, #7
 800591a:	429a      	cmp	r2, r3
 800591c:	d021      	beq.n	8005962 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 800591e:	183b      	adds	r3, r7, r0
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b20      	cmp	r3, #32
 8005924:	d01d      	beq.n	8005962 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2180      	movs	r1, #128	@ 0x80
 8005932:	01c9      	lsls	r1, r1, #7
 8005934:	430a      	orrs	r2, r1
 8005936:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005938:	f7fe f8d8 	bl	8003aec <HAL_GetTick>
 800593c:	0003      	movs	r3, r0
 800593e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005940:	e00f      	b.n	8005962 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005942:	f7fe f8d3 	bl	8003aec <HAL_GetTick>
 8005946:	0002      	movs	r2, r0
 8005948:	69fb      	ldr	r3, [r7, #28]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b19      	cmp	r3, #25
 800594e:	d908      	bls.n	8005962 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	2220      	movs	r2, #32
 8005954:	4313      	orrs	r3, r2
 8005956:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005958:	2327      	movs	r3, #39	@ 0x27
 800595a:	18fb      	adds	r3, r7, r3
 800595c:	2201      	movs	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]

              break;
 8005960:	e006      	b.n	8005970 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	2220      	movs	r2, #32
 800596a:	4013      	ands	r3, r2
 800596c:	2b20      	cmp	r3, #32
 800596e:	d1e8      	bne.n	8005942 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2220      	movs	r2, #32
 8005978:	4013      	ands	r3, r2
 800597a:	2b20      	cmp	r3, #32
 800597c:	d004      	beq.n	8005988 <I2C_IsErrorOccurred+0x100>
 800597e:	2327      	movs	r3, #39	@ 0x27
 8005980:	18fb      	adds	r3, r7, r3
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d09b      	beq.n	80058c0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005988:	2327      	movs	r3, #39	@ 0x27
 800598a:	18fb      	adds	r3, r7, r3
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d103      	bne.n	800599a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2220      	movs	r2, #32
 8005998:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	2204      	movs	r2, #4
 800599e:	4313      	orrs	r3, r2
 80059a0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80059a2:	2327      	movs	r3, #39	@ 0x27
 80059a4:	18fb      	adds	r3, r7, r3
 80059a6:	2201      	movs	r2, #1
 80059a8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	2380      	movs	r3, #128	@ 0x80
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	4013      	ands	r3, r2
 80059ba:	d00c      	beq.n	80059d6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	2201      	movs	r2, #1
 80059c0:	4313      	orrs	r3, r2
 80059c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2280      	movs	r2, #128	@ 0x80
 80059ca:	0052      	lsls	r2, r2, #1
 80059cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059ce:	2327      	movs	r3, #39	@ 0x27
 80059d0:	18fb      	adds	r3, r7, r3
 80059d2:	2201      	movs	r2, #1
 80059d4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80059d6:	69ba      	ldr	r2, [r7, #24]
 80059d8:	2380      	movs	r3, #128	@ 0x80
 80059da:	00db      	lsls	r3, r3, #3
 80059dc:	4013      	ands	r3, r2
 80059de:	d00c      	beq.n	80059fa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	2208      	movs	r2, #8
 80059e4:	4313      	orrs	r3, r2
 80059e6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2280      	movs	r2, #128	@ 0x80
 80059ee:	00d2      	lsls	r2, r2, #3
 80059f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059f2:	2327      	movs	r3, #39	@ 0x27
 80059f4:	18fb      	adds	r3, r7, r3
 80059f6:	2201      	movs	r2, #1
 80059f8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	2380      	movs	r3, #128	@ 0x80
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4013      	ands	r3, r2
 8005a02:	d00c      	beq.n	8005a1e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	2202      	movs	r2, #2
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2280      	movs	r2, #128	@ 0x80
 8005a12:	0092      	lsls	r2, r2, #2
 8005a14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005a16:	2327      	movs	r3, #39	@ 0x27
 8005a18:	18fb      	adds	r3, r7, r3
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8005a1e:	2327      	movs	r3, #39	@ 0x27
 8005a20:	18fb      	adds	r3, r7, r3
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d01d      	beq.n	8005a64 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	f7ff fd8a 	bl	8005544 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	490e      	ldr	r1, [pc, #56]	@ (8005a74 <I2C_IsErrorOccurred+0x1ec>)
 8005a3c:	400a      	ands	r2, r1
 8005a3e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a44:	6a3b      	ldr	r3, [r7, #32]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2241      	movs	r2, #65	@ 0x41
 8005a50:	2120      	movs	r1, #32
 8005a52:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2242      	movs	r2, #66	@ 0x42
 8005a58:	2100      	movs	r1, #0
 8005a5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2240      	movs	r2, #64	@ 0x40
 8005a60:	2100      	movs	r1, #0
 8005a62:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8005a64:	2327      	movs	r3, #39	@ 0x27
 8005a66:	18fb      	adds	r3, r7, r3
 8005a68:	781b      	ldrb	r3, [r3, #0]
}
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	b00a      	add	sp, #40	@ 0x28
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	46c0      	nop			@ (mov r8, r8)
 8005a74:	fe00e800 	.word	0xfe00e800

08005a78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a78:	b590      	push	{r4, r7, lr}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	0008      	movs	r0, r1
 8005a82:	0011      	movs	r1, r2
 8005a84:	607b      	str	r3, [r7, #4]
 8005a86:	240a      	movs	r4, #10
 8005a88:	193b      	adds	r3, r7, r4
 8005a8a:	1c02      	adds	r2, r0, #0
 8005a8c:	801a      	strh	r2, [r3, #0]
 8005a8e:	2009      	movs	r0, #9
 8005a90:	183b      	adds	r3, r7, r0
 8005a92:	1c0a      	adds	r2, r1, #0
 8005a94:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a96:	193b      	adds	r3, r7, r4
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	059b      	lsls	r3, r3, #22
 8005a9c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a9e:	183b      	adds	r3, r7, r0
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	0419      	lsls	r1, r3, #16
 8005aa4:	23ff      	movs	r3, #255	@ 0xff
 8005aa6:	041b      	lsls	r3, r3, #16
 8005aa8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005aaa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	085b      	lsrs	r3, r3, #1
 8005ab8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ac2:	0d51      	lsrs	r1, r2, #21
 8005ac4:	2280      	movs	r2, #128	@ 0x80
 8005ac6:	00d2      	lsls	r2, r2, #3
 8005ac8:	400a      	ands	r2, r1
 8005aca:	4907      	ldr	r1, [pc, #28]	@ (8005ae8 <I2C_TransferConfig+0x70>)
 8005acc:	430a      	orrs	r2, r1
 8005ace:	43d2      	mvns	r2, r2
 8005ad0:	401a      	ands	r2, r3
 8005ad2:	0011      	movs	r1, r2
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	697a      	ldr	r2, [r7, #20]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005ade:	46c0      	nop			@ (mov r8, r8)
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b007      	add	sp, #28
 8005ae4:	bd90      	pop	{r4, r7, pc}
 8005ae6:	46c0      	nop			@ (mov r8, r8)
 8005ae8:	03ff63ff 	.word	0x03ff63ff

08005aec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2241      	movs	r2, #65	@ 0x41
 8005afa:	5c9b      	ldrb	r3, [r3, r2]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d138      	bne.n	8005b74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2240      	movs	r2, #64	@ 0x40
 8005b06:	5c9b      	ldrb	r3, [r3, r2]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d101      	bne.n	8005b10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	e032      	b.n	8005b76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2240      	movs	r2, #64	@ 0x40
 8005b14:	2101      	movs	r1, #1
 8005b16:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2241      	movs	r2, #65	@ 0x41
 8005b1c:	2124      	movs	r1, #36	@ 0x24
 8005b1e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	438a      	bics	r2, r1
 8005b2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4911      	ldr	r1, [pc, #68]	@ (8005b80 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005b3c:	400a      	ands	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6819      	ldr	r1, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	430a      	orrs	r2, r1
 8005b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	2101      	movs	r1, #1
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2241      	movs	r2, #65	@ 0x41
 8005b64:	2120      	movs	r1, #32
 8005b66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2240      	movs	r2, #64	@ 0x40
 8005b6c:	2100      	movs	r1, #0
 8005b6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	e000      	b.n	8005b76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005b74:	2302      	movs	r3, #2
  }
}
 8005b76:	0018      	movs	r0, r3
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	b002      	add	sp, #8
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	46c0      	nop			@ (mov r8, r8)
 8005b80:	ffffefff 	.word	0xffffefff

08005b84 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2241      	movs	r2, #65	@ 0x41
 8005b92:	5c9b      	ldrb	r3, [r3, r2]
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b20      	cmp	r3, #32
 8005b98:	d139      	bne.n	8005c0e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2240      	movs	r2, #64	@ 0x40
 8005b9e:	5c9b      	ldrb	r3, [r3, r2]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d101      	bne.n	8005ba8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e033      	b.n	8005c10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2240      	movs	r2, #64	@ 0x40
 8005bac:	2101      	movs	r1, #1
 8005bae:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2241      	movs	r2, #65	@ 0x41
 8005bb4:	2124      	movs	r1, #36	@ 0x24
 8005bb6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	438a      	bics	r2, r1
 8005bc6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4a11      	ldr	r2, [pc, #68]	@ (8005c18 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	021b      	lsls	r3, r3, #8
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2101      	movs	r1, #1
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2241      	movs	r2, #65	@ 0x41
 8005bfe:	2120      	movs	r1, #32
 8005c00:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2240      	movs	r2, #64	@ 0x40
 8005c06:	2100      	movs	r1, #0
 8005c08:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	e000      	b.n	8005c10 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005c0e:	2302      	movs	r3, #2
  }
}
 8005c10:	0018      	movs	r0, r3
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b004      	add	sp, #16
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	fffff0ff 	.word	0xfffff0ff

08005c1c <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	000a      	movs	r2, r1
 8005c26:	1cfb      	adds	r3, r7, #3
 8005c28:	701a      	strb	r2, [r3, #0]
   uint32_t tmpreg = 0U;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005c2e:	4b23      	ldr	r3, [pc, #140]	@ (8005cbc <HAL_PWR_EnterSLEEPMode+0xa0>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	2380      	movs	r3, #128	@ 0x80
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4013      	ands	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005c3a:	4b21      	ldr	r3, [pc, #132]	@ (8005cc0 <HAL_PWR_EnterSLEEPMode+0xa4>)
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	4013      	ands	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d008      	beq.n	8005c5c <HAL_PWR_EnterSLEEPMode+0x40>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d005      	beq.n	8005c5c <HAL_PWR_EnterSLEEPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8005c50:	4b1a      	ldr	r3, [pc, #104]	@ (8005cbc <HAL_PWR_EnterSLEEPMode+0xa0>)
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	4b19      	ldr	r3, [pc, #100]	@ (8005cbc <HAL_PWR_EnterSLEEPMode+0xa0>)
 8005c56:	491b      	ldr	r1, [pc, #108]	@ (8005cc4 <HAL_PWR_EnterSLEEPMode+0xa8>)
 8005c58:	400a      	ands	r2, r1
 8005c5a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;
 8005c5c:	4b17      	ldr	r3, [pc, #92]	@ (8005cbc <HAL_PWR_EnterSLEEPMode+0xa0>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	617b      	str	r3, [r7, #20]

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	2203      	movs	r2, #3
 8005c66:	4393      	bics	r3, r2
 8005c68:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8005c72:	4b12      	ldr	r3, [pc, #72]	@ (8005cbc <HAL_PWR_EnterSLEEPMode+0xa0>)
 8005c74:	697a      	ldr	r2, [r7, #20]
 8005c76:	601a      	str	r2, [r3, #0]
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005c78:	4b13      	ldr	r3, [pc, #76]	@ (8005cc8 <HAL_PWR_EnterSLEEPMode+0xac>)
 8005c7a:	691a      	ldr	r2, [r3, #16]
 8005c7c:	4b12      	ldr	r3, [pc, #72]	@ (8005cc8 <HAL_PWR_EnterSLEEPMode+0xac>)
 8005c7e:	2104      	movs	r1, #4
 8005c80:	438a      	bics	r2, r1
 8005c82:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005c84:	1cfb      	adds	r3, r7, #3
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_PWR_EnterSLEEPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005c8c:	bf30      	wfi
 8005c8e:	e002      	b.n	8005c96 <HAL_PWR_EnterSLEEPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005c90:	bf40      	sev
    __WFE();
 8005c92:	bf20      	wfe
    __WFE();
 8005c94:	bf20      	wfe
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d009      	beq.n	8005cb0 <HAL_PWR_EnterSLEEPMode+0x94>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d006      	beq.n	8005cb0 <HAL_PWR_EnterSLEEPMode+0x94>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8005ca2:	4b06      	ldr	r3, [pc, #24]	@ (8005cbc <HAL_PWR_EnterSLEEPMode+0xa0>)
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	4b05      	ldr	r3, [pc, #20]	@ (8005cbc <HAL_PWR_EnterSLEEPMode+0xa0>)
 8005ca8:	2180      	movs	r1, #128	@ 0x80
 8005caa:	0089      	lsls	r1, r1, #2
 8005cac:	430a      	orrs	r2, r1
 8005cae:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8005cb0:	46c0      	nop			@ (mov r8, r8)

}
 8005cb2:	46c0      	nop			@ (mov r8, r8)
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	b006      	add	sp, #24
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	46c0      	nop			@ (mov r8, r8)
 8005cbc:	40007000 	.word	0x40007000
 8005cc0:	40010000 	.word	0x40010000
 8005cc4:	fffffdff 	.word	0xfffffdff
 8005cc8:	e000ed00 	.word	0xe000ed00

08005ccc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	000a      	movs	r2, r1
 8005cd6:	1cfb      	adds	r3, r7, #3
 8005cd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005cde:	4b25      	ldr	r3, [pc, #148]	@ (8005d74 <HAL_PWR_EnterSTOPMode+0xa8>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	2380      	movs	r3, #128	@ 0x80
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005cea:	4b23      	ldr	r3, [pc, #140]	@ (8005d78 <HAL_PWR_EnterSTOPMode+0xac>)
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d008      	beq.n	8005d0c <HAL_PWR_EnterSTOPMode+0x40>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d005      	beq.n	8005d0c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8005d00:	4b1c      	ldr	r3, [pc, #112]	@ (8005d74 <HAL_PWR_EnterSTOPMode+0xa8>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	4b1b      	ldr	r3, [pc, #108]	@ (8005d74 <HAL_PWR_EnterSTOPMode+0xa8>)
 8005d06:	491d      	ldr	r1, [pc, #116]	@ (8005d7c <HAL_PWR_EnterSTOPMode+0xb0>)
 8005d08:	400a      	ands	r2, r1
 8005d0a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8005d0c:	4b19      	ldr	r3, [pc, #100]	@ (8005d74 <HAL_PWR_EnterSTOPMode+0xa8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2203      	movs	r2, #3
 8005d16:	4393      	bics	r3, r2
 8005d18:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8005d22:	4b14      	ldr	r3, [pc, #80]	@ (8005d74 <HAL_PWR_EnterSTOPMode+0xa8>)
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005d28:	4b15      	ldr	r3, [pc, #84]	@ (8005d80 <HAL_PWR_EnterSTOPMode+0xb4>)
 8005d2a:	691a      	ldr	r2, [r3, #16]
 8005d2c:	4b14      	ldr	r3, [pc, #80]	@ (8005d80 <HAL_PWR_EnterSTOPMode+0xb4>)
 8005d2e:	2104      	movs	r1, #4
 8005d30:	430a      	orrs	r2, r1
 8005d32:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005d34:	1cfb      	adds	r3, r7, #3
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005d3c:	bf30      	wfi
 8005d3e:	e002      	b.n	8005d46 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005d40:	bf40      	sev
    __WFE();
 8005d42:	bf20      	wfe
    __WFE();
 8005d44:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005d46:	4b0e      	ldr	r3, [pc, #56]	@ (8005d80 <HAL_PWR_EnterSTOPMode+0xb4>)
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005d80 <HAL_PWR_EnterSTOPMode+0xb4>)
 8005d4c:	2104      	movs	r1, #4
 8005d4e:	438a      	bics	r2, r1
 8005d50:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d009      	beq.n	8005d6c <HAL_PWR_EnterSTOPMode+0xa0>
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d006      	beq.n	8005d6c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8005d5e:	4b05      	ldr	r3, [pc, #20]	@ (8005d74 <HAL_PWR_EnterSTOPMode+0xa8>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b04      	ldr	r3, [pc, #16]	@ (8005d74 <HAL_PWR_EnterSTOPMode+0xa8>)
 8005d64:	2180      	movs	r1, #128	@ 0x80
 8005d66:	0089      	lsls	r1, r1, #2
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	601a      	str	r2, [r3, #0]
  }
}
 8005d6c:	46c0      	nop			@ (mov r8, r8)
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	b006      	add	sp, #24
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	40007000 	.word	0x40007000
 8005d78:	40010000 	.word	0x40010000
 8005d7c:	fffffdff 	.word	0xfffffdff
 8005d80:	e000ed00 	.word	0xe000ed00

08005d84 <HAL_PWREx_EnableFastWakeUp>:
  *        Means, when ULP = 1 and FWU = 1 :VREFINT startup time is ignored when 
  *        exiting from low power mode.
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8005d88:	4b04      	ldr	r3, [pc, #16]	@ (8005d9c <HAL_PWREx_EnableFastWakeUp+0x18>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	4b03      	ldr	r3, [pc, #12]	@ (8005d9c <HAL_PWREx_EnableFastWakeUp+0x18>)
 8005d8e:	2180      	movs	r1, #128	@ 0x80
 8005d90:	00c9      	lsls	r1, r1, #3
 8005d92:	430a      	orrs	r2, r1
 8005d94:	601a      	str	r2, [r3, #0]
}
 8005d96:	46c0      	nop			@ (mov r8, r8)
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	40007000 	.word	0x40007000

08005da0 <HAL_PWREx_EnableUltraLowPower>:
/**
  * @brief  Enables the Ultra Low Power mode
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8005da4:	4b04      	ldr	r3, [pc, #16]	@ (8005db8 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	4b03      	ldr	r3, [pc, #12]	@ (8005db8 <HAL_PWREx_EnableUltraLowPower+0x18>)
 8005daa:	2180      	movs	r1, #128	@ 0x80
 8005dac:	0089      	lsls	r1, r1, #2
 8005dae:	430a      	orrs	r2, r1
 8005db0:	601a      	str	r2, [r3, #0]
}
 8005db2:	46c0      	nop			@ (mov r8, r8)
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	40007000 	.word	0x40007000

08005dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005dbc:	b5b0      	push	{r4, r5, r7, lr}
 8005dbe:	b08a      	sub	sp, #40	@ 0x28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d102      	bne.n	8005dd0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f000 fbbf 	bl	800654e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005dd0:	4bc9      	ldr	r3, [pc, #804]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	220c      	movs	r2, #12
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dda:	4bc7      	ldr	r3, [pc, #796]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005ddc:	68da      	ldr	r2, [r3, #12]
 8005dde:	2380      	movs	r3, #128	@ 0x80
 8005de0:	025b      	lsls	r3, r3, #9
 8005de2:	4013      	ands	r3, r2
 8005de4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2201      	movs	r2, #1
 8005dec:	4013      	ands	r3, r2
 8005dee:	d100      	bne.n	8005df2 <HAL_RCC_OscConfig+0x36>
 8005df0:	e07e      	b.n	8005ef0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	2b08      	cmp	r3, #8
 8005df6:	d007      	beq.n	8005e08 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	2b0c      	cmp	r3, #12
 8005dfc:	d112      	bne.n	8005e24 <HAL_RCC_OscConfig+0x68>
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	2380      	movs	r3, #128	@ 0x80
 8005e02:	025b      	lsls	r3, r3, #9
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d10d      	bne.n	8005e24 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e08:	4bbb      	ldr	r3, [pc, #748]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	2380      	movs	r3, #128	@ 0x80
 8005e0e:	029b      	lsls	r3, r3, #10
 8005e10:	4013      	ands	r3, r2
 8005e12:	d100      	bne.n	8005e16 <HAL_RCC_OscConfig+0x5a>
 8005e14:	e06b      	b.n	8005eee <HAL_RCC_OscConfig+0x132>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d167      	bne.n	8005eee <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f000 fb95 	bl	800654e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	2380      	movs	r3, #128	@ 0x80
 8005e2a:	025b      	lsls	r3, r3, #9
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d107      	bne.n	8005e40 <HAL_RCC_OscConfig+0x84>
 8005e30:	4bb1      	ldr	r3, [pc, #708]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	4bb0      	ldr	r3, [pc, #704]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005e36:	2180      	movs	r1, #128	@ 0x80
 8005e38:	0249      	lsls	r1, r1, #9
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	e027      	b.n	8005e90 <HAL_RCC_OscConfig+0xd4>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	23a0      	movs	r3, #160	@ 0xa0
 8005e46:	02db      	lsls	r3, r3, #11
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d10e      	bne.n	8005e6a <HAL_RCC_OscConfig+0xae>
 8005e4c:	4baa      	ldr	r3, [pc, #680]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	4ba9      	ldr	r3, [pc, #676]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005e52:	2180      	movs	r1, #128	@ 0x80
 8005e54:	02c9      	lsls	r1, r1, #11
 8005e56:	430a      	orrs	r2, r1
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	4ba7      	ldr	r3, [pc, #668]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	4ba6      	ldr	r3, [pc, #664]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005e60:	2180      	movs	r1, #128	@ 0x80
 8005e62:	0249      	lsls	r1, r1, #9
 8005e64:	430a      	orrs	r2, r1
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	e012      	b.n	8005e90 <HAL_RCC_OscConfig+0xd4>
 8005e6a:	4ba3      	ldr	r3, [pc, #652]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4ba2      	ldr	r3, [pc, #648]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005e70:	49a2      	ldr	r1, [pc, #648]	@ (80060fc <HAL_RCC_OscConfig+0x340>)
 8005e72:	400a      	ands	r2, r1
 8005e74:	601a      	str	r2, [r3, #0]
 8005e76:	4ba0      	ldr	r3, [pc, #640]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	2380      	movs	r3, #128	@ 0x80
 8005e7c:	025b      	lsls	r3, r3, #9
 8005e7e:	4013      	ands	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4b9c      	ldr	r3, [pc, #624]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	4b9b      	ldr	r3, [pc, #620]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005e8a:	499d      	ldr	r1, [pc, #628]	@ (8006100 <HAL_RCC_OscConfig+0x344>)
 8005e8c:	400a      	ands	r2, r1
 8005e8e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d015      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e98:	f7fd fe28 	bl	8003aec <HAL_GetTick>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ea0:	e009      	b.n	8005eb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ea2:	f7fd fe23 	bl	8003aec <HAL_GetTick>
 8005ea6:	0002      	movs	r2, r0
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	2b64      	cmp	r3, #100	@ 0x64
 8005eae:	d902      	bls.n	8005eb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	f000 fb4c 	bl	800654e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005eb6:	4b90      	ldr	r3, [pc, #576]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	2380      	movs	r3, #128	@ 0x80
 8005ebc:	029b      	lsls	r3, r3, #10
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	d0ef      	beq.n	8005ea2 <HAL_RCC_OscConfig+0xe6>
 8005ec2:	e015      	b.n	8005ef0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec4:	f7fd fe12 	bl	8003aec <HAL_GetTick>
 8005ec8:	0003      	movs	r3, r0
 8005eca:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ecc:	e008      	b.n	8005ee0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ece:	f7fd fe0d 	bl	8003aec <HAL_GetTick>
 8005ed2:	0002      	movs	r2, r0
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b64      	cmp	r3, #100	@ 0x64
 8005eda:	d901      	bls.n	8005ee0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	e336      	b.n	800654e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ee0:	4b85      	ldr	r3, [pc, #532]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	2380      	movs	r3, #128	@ 0x80
 8005ee6:	029b      	lsls	r3, r3, #10
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d1f0      	bne.n	8005ece <HAL_RCC_OscConfig+0x112>
 8005eec:	e000      	b.n	8005ef0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eee:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	d100      	bne.n	8005efc <HAL_RCC_OscConfig+0x140>
 8005efa:	e099      	b.n	8006030 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8005f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f04:	2220      	movs	r2, #32
 8005f06:	4013      	ands	r3, r2
 8005f08:	d009      	beq.n	8005f1e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8005f0a:	4b7b      	ldr	r3, [pc, #492]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	4b7a      	ldr	r3, [pc, #488]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005f10:	2120      	movs	r1, #32
 8005f12:	430a      	orrs	r2, r1
 8005f14:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8005f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f18:	2220      	movs	r2, #32
 8005f1a:	4393      	bics	r3, r2
 8005f1c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d005      	beq.n	8005f30 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	2b0c      	cmp	r3, #12
 8005f28:	d13e      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x1ec>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d13b      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005f30:	4b71      	ldr	r3, [pc, #452]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2204      	movs	r2, #4
 8005f36:	4013      	ands	r3, r2
 8005f38:	d004      	beq.n	8005f44 <HAL_RCC_OscConfig+0x188>
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d101      	bne.n	8005f44 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e304      	b.n	800654e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f44:	4b6c      	ldr	r3, [pc, #432]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	4a6e      	ldr	r2, [pc, #440]	@ (8006104 <HAL_RCC_OscConfig+0x348>)
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	0019      	movs	r1, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	021a      	lsls	r2, r3, #8
 8005f54:	4b68      	ldr	r3, [pc, #416]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005f5a:	4b67      	ldr	r3, [pc, #412]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2209      	movs	r2, #9
 8005f60:	4393      	bics	r3, r2
 8005f62:	0019      	movs	r1, r3
 8005f64:	4b64      	ldr	r3, [pc, #400]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f6c:	f000 fc42 	bl	80067f4 <HAL_RCC_GetSysClockFreq>
 8005f70:	0001      	movs	r1, r0
 8005f72:	4b61      	ldr	r3, [pc, #388]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005f74:	68db      	ldr	r3, [r3, #12]
 8005f76:	091b      	lsrs	r3, r3, #4
 8005f78:	220f      	movs	r2, #15
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	4a62      	ldr	r2, [pc, #392]	@ (8006108 <HAL_RCC_OscConfig+0x34c>)
 8005f7e:	5cd3      	ldrb	r3, [r2, r3]
 8005f80:	000a      	movs	r2, r1
 8005f82:	40da      	lsrs	r2, r3
 8005f84:	4b61      	ldr	r3, [pc, #388]	@ (800610c <HAL_RCC_OscConfig+0x350>)
 8005f86:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005f88:	4b61      	ldr	r3, [pc, #388]	@ (8006110 <HAL_RCC_OscConfig+0x354>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2513      	movs	r5, #19
 8005f8e:	197c      	adds	r4, r7, r5
 8005f90:	0018      	movs	r0, r3
 8005f92:	f7fd fd65 	bl	8003a60 <HAL_InitTick>
 8005f96:	0003      	movs	r3, r0
 8005f98:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005f9a:	197b      	adds	r3, r7, r5
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d046      	beq.n	8006030 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8005fa2:	197b      	adds	r3, r7, r5
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	e2d2      	b.n	800654e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d027      	beq.n	8005ffe <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005fae:	4b52      	ldr	r3, [pc, #328]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2209      	movs	r2, #9
 8005fb4:	4393      	bics	r3, r2
 8005fb6:	0019      	movs	r1, r3
 8005fb8:	4b4f      	ldr	r3, [pc, #316]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fbc:	430a      	orrs	r2, r1
 8005fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fc0:	f7fd fd94 	bl	8003aec <HAL_GetTick>
 8005fc4:	0003      	movs	r3, r0
 8005fc6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fc8:	e008      	b.n	8005fdc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005fca:	f7fd fd8f 	bl	8003aec <HAL_GetTick>
 8005fce:	0002      	movs	r2, r0
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d901      	bls.n	8005fdc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e2b8      	b.n	800654e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fdc:	4b46      	ldr	r3, [pc, #280]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	d0f1      	beq.n	8005fca <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe6:	4b44      	ldr	r3, [pc, #272]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	4a46      	ldr	r2, [pc, #280]	@ (8006104 <HAL_RCC_OscConfig+0x348>)
 8005fec:	4013      	ands	r3, r2
 8005fee:	0019      	movs	r1, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	021a      	lsls	r2, r3, #8
 8005ff6:	4b40      	ldr	r3, [pc, #256]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	605a      	str	r2, [r3, #4]
 8005ffc:	e018      	b.n	8006030 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4b3d      	ldr	r3, [pc, #244]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8006004:	2101      	movs	r1, #1
 8006006:	438a      	bics	r2, r1
 8006008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800600a:	f7fd fd6f 	bl	8003aec <HAL_GetTick>
 800600e:	0003      	movs	r3, r0
 8006010:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006014:	f7fd fd6a 	bl	8003aec <HAL_GetTick>
 8006018:	0002      	movs	r2, r0
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e293      	b.n	800654e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006026:	4b34      	ldr	r3, [pc, #208]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2204      	movs	r2, #4
 800602c:	4013      	ands	r3, r2
 800602e:	d1f1      	bne.n	8006014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2210      	movs	r2, #16
 8006036:	4013      	ands	r3, r2
 8006038:	d100      	bne.n	800603c <HAL_RCC_OscConfig+0x280>
 800603a:	e0a2      	b.n	8006182 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d140      	bne.n	80060c4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006042:	4b2d      	ldr	r3, [pc, #180]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	2380      	movs	r3, #128	@ 0x80
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4013      	ands	r3, r2
 800604c:	d005      	beq.n	800605a <HAL_RCC_OscConfig+0x29e>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e279      	b.n	800654e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800605a:	4b27      	ldr	r3, [pc, #156]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	4a2d      	ldr	r2, [pc, #180]	@ (8006114 <HAL_RCC_OscConfig+0x358>)
 8006060:	4013      	ands	r3, r2
 8006062:	0019      	movs	r1, r3
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006068:	4b23      	ldr	r3, [pc, #140]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 800606a:	430a      	orrs	r2, r1
 800606c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800606e:	4b22      	ldr	r3, [pc, #136]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	021b      	lsls	r3, r3, #8
 8006074:	0a19      	lsrs	r1, r3, #8
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	061a      	lsls	r2, r3, #24
 800607c:	4b1e      	ldr	r3, [pc, #120]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 800607e:	430a      	orrs	r2, r1
 8006080:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006086:	0b5b      	lsrs	r3, r3, #13
 8006088:	3301      	adds	r3, #1
 800608a:	2280      	movs	r2, #128	@ 0x80
 800608c:	0212      	lsls	r2, r2, #8
 800608e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006090:	4b19      	ldr	r3, [pc, #100]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	091b      	lsrs	r3, r3, #4
 8006096:	210f      	movs	r1, #15
 8006098:	400b      	ands	r3, r1
 800609a:	491b      	ldr	r1, [pc, #108]	@ (8006108 <HAL_RCC_OscConfig+0x34c>)
 800609c:	5ccb      	ldrb	r3, [r1, r3]
 800609e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80060a0:	4b1a      	ldr	r3, [pc, #104]	@ (800610c <HAL_RCC_OscConfig+0x350>)
 80060a2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80060a4:	4b1a      	ldr	r3, [pc, #104]	@ (8006110 <HAL_RCC_OscConfig+0x354>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2513      	movs	r5, #19
 80060aa:	197c      	adds	r4, r7, r5
 80060ac:	0018      	movs	r0, r3
 80060ae:	f7fd fcd7 	bl	8003a60 <HAL_InitTick>
 80060b2:	0003      	movs	r3, r0
 80060b4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80060b6:	197b      	adds	r3, r7, r5
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d061      	beq.n	8006182 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80060be:	197b      	adds	r3, r7, r5
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	e244      	b.n	800654e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d040      	beq.n	800614e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80060cc:	4b0a      	ldr	r3, [pc, #40]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	4b09      	ldr	r3, [pc, #36]	@ (80060f8 <HAL_RCC_OscConfig+0x33c>)
 80060d2:	2180      	movs	r1, #128	@ 0x80
 80060d4:	0049      	lsls	r1, r1, #1
 80060d6:	430a      	orrs	r2, r1
 80060d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060da:	f7fd fd07 	bl	8003aec <HAL_GetTick>
 80060de:	0003      	movs	r3, r0
 80060e0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80060e2:	e019      	b.n	8006118 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80060e4:	f7fd fd02 	bl	8003aec <HAL_GetTick>
 80060e8:	0002      	movs	r2, r0
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	1ad3      	subs	r3, r2, r3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d912      	bls.n	8006118 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e22b      	b.n	800654e <HAL_RCC_OscConfig+0x792>
 80060f6:	46c0      	nop			@ (mov r8, r8)
 80060f8:	40021000 	.word	0x40021000
 80060fc:	fffeffff 	.word	0xfffeffff
 8006100:	fffbffff 	.word	0xfffbffff
 8006104:	ffffe0ff 	.word	0xffffe0ff
 8006108:	0800a238 	.word	0x0800a238
 800610c:	20000000 	.word	0x20000000
 8006110:	20000048 	.word	0x20000048
 8006114:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006118:	4bca      	ldr	r3, [pc, #808]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	2380      	movs	r3, #128	@ 0x80
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4013      	ands	r3, r2
 8006122:	d0df      	beq.n	80060e4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006124:	4bc7      	ldr	r3, [pc, #796]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	4ac7      	ldr	r2, [pc, #796]	@ (8006448 <HAL_RCC_OscConfig+0x68c>)
 800612a:	4013      	ands	r3, r2
 800612c:	0019      	movs	r1, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006132:	4bc4      	ldr	r3, [pc, #784]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006134:	430a      	orrs	r2, r1
 8006136:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006138:	4bc2      	ldr	r3, [pc, #776]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	021b      	lsls	r3, r3, #8
 800613e:	0a19      	lsrs	r1, r3, #8
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	061a      	lsls	r2, r3, #24
 8006146:	4bbf      	ldr	r3, [pc, #764]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006148:	430a      	orrs	r2, r1
 800614a:	605a      	str	r2, [r3, #4]
 800614c:	e019      	b.n	8006182 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800614e:	4bbd      	ldr	r3, [pc, #756]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	4bbc      	ldr	r3, [pc, #752]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006154:	49bd      	ldr	r1, [pc, #756]	@ (800644c <HAL_RCC_OscConfig+0x690>)
 8006156:	400a      	ands	r2, r1
 8006158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800615a:	f7fd fcc7 	bl	8003aec <HAL_GetTick>
 800615e:	0003      	movs	r3, r0
 8006160:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006162:	e008      	b.n	8006176 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006164:	f7fd fcc2 	bl	8003aec <HAL_GetTick>
 8006168:	0002      	movs	r2, r0
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	2b02      	cmp	r3, #2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e1eb      	b.n	800654e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006176:	4bb3      	ldr	r3, [pc, #716]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	2380      	movs	r3, #128	@ 0x80
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	4013      	ands	r3, r2
 8006180:	d1f0      	bne.n	8006164 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2208      	movs	r2, #8
 8006188:	4013      	ands	r3, r2
 800618a:	d036      	beq.n	80061fa <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d019      	beq.n	80061c8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006194:	4bab      	ldr	r3, [pc, #684]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006196:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006198:	4baa      	ldr	r3, [pc, #680]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 800619a:	2101      	movs	r1, #1
 800619c:	430a      	orrs	r2, r1
 800619e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061a0:	f7fd fca4 	bl	8003aec <HAL_GetTick>
 80061a4:	0003      	movs	r3, r0
 80061a6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061a8:	e008      	b.n	80061bc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061aa:	f7fd fc9f 	bl	8003aec <HAL_GetTick>
 80061ae:	0002      	movs	r2, r0
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e1c8      	b.n	800654e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80061bc:	4ba1      	ldr	r3, [pc, #644]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80061be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c0:	2202      	movs	r2, #2
 80061c2:	4013      	ands	r3, r2
 80061c4:	d0f1      	beq.n	80061aa <HAL_RCC_OscConfig+0x3ee>
 80061c6:	e018      	b.n	80061fa <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061c8:	4b9e      	ldr	r3, [pc, #632]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80061ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80061cc:	4b9d      	ldr	r3, [pc, #628]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80061ce:	2101      	movs	r1, #1
 80061d0:	438a      	bics	r2, r1
 80061d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061d4:	f7fd fc8a 	bl	8003aec <HAL_GetTick>
 80061d8:	0003      	movs	r3, r0
 80061da:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061dc:	e008      	b.n	80061f0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061de:	f7fd fc85 	bl	8003aec <HAL_GetTick>
 80061e2:	0002      	movs	r2, r0
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e1ae      	b.n	800654e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80061f0:	4b94      	ldr	r3, [pc, #592]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80061f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061f4:	2202      	movs	r2, #2
 80061f6:	4013      	ands	r3, r2
 80061f8:	d1f1      	bne.n	80061de <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2204      	movs	r2, #4
 8006200:	4013      	ands	r3, r2
 8006202:	d100      	bne.n	8006206 <HAL_RCC_OscConfig+0x44a>
 8006204:	e0ae      	b.n	8006364 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006206:	2023      	movs	r0, #35	@ 0x23
 8006208:	183b      	adds	r3, r7, r0
 800620a:	2200      	movs	r2, #0
 800620c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800620e:	4b8d      	ldr	r3, [pc, #564]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006210:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006212:	2380      	movs	r3, #128	@ 0x80
 8006214:	055b      	lsls	r3, r3, #21
 8006216:	4013      	ands	r3, r2
 8006218:	d109      	bne.n	800622e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800621a:	4b8a      	ldr	r3, [pc, #552]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 800621c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800621e:	4b89      	ldr	r3, [pc, #548]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006220:	2180      	movs	r1, #128	@ 0x80
 8006222:	0549      	lsls	r1, r1, #21
 8006224:	430a      	orrs	r2, r1
 8006226:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8006228:	183b      	adds	r3, r7, r0
 800622a:	2201      	movs	r2, #1
 800622c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800622e:	4b88      	ldr	r3, [pc, #544]	@ (8006450 <HAL_RCC_OscConfig+0x694>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	2380      	movs	r3, #128	@ 0x80
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	4013      	ands	r3, r2
 8006238:	d11a      	bne.n	8006270 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800623a:	4b85      	ldr	r3, [pc, #532]	@ (8006450 <HAL_RCC_OscConfig+0x694>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4b84      	ldr	r3, [pc, #528]	@ (8006450 <HAL_RCC_OscConfig+0x694>)
 8006240:	2180      	movs	r1, #128	@ 0x80
 8006242:	0049      	lsls	r1, r1, #1
 8006244:	430a      	orrs	r2, r1
 8006246:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006248:	f7fd fc50 	bl	8003aec <HAL_GetTick>
 800624c:	0003      	movs	r3, r0
 800624e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006250:	e008      	b.n	8006264 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006252:	f7fd fc4b 	bl	8003aec <HAL_GetTick>
 8006256:	0002      	movs	r2, r0
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	2b64      	cmp	r3, #100	@ 0x64
 800625e:	d901      	bls.n	8006264 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8006260:	2303      	movs	r3, #3
 8006262:	e174      	b.n	800654e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006264:	4b7a      	ldr	r3, [pc, #488]	@ (8006450 <HAL_RCC_OscConfig+0x694>)
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	2380      	movs	r3, #128	@ 0x80
 800626a:	005b      	lsls	r3, r3, #1
 800626c:	4013      	ands	r3, r2
 800626e:	d0f0      	beq.n	8006252 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	2380      	movs	r3, #128	@ 0x80
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	429a      	cmp	r2, r3
 800627a:	d107      	bne.n	800628c <HAL_RCC_OscConfig+0x4d0>
 800627c:	4b71      	ldr	r3, [pc, #452]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 800627e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006280:	4b70      	ldr	r3, [pc, #448]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006282:	2180      	movs	r1, #128	@ 0x80
 8006284:	0049      	lsls	r1, r1, #1
 8006286:	430a      	orrs	r2, r1
 8006288:	651a      	str	r2, [r3, #80]	@ 0x50
 800628a:	e031      	b.n	80062f0 <HAL_RCC_OscConfig+0x534>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10c      	bne.n	80062ae <HAL_RCC_OscConfig+0x4f2>
 8006294:	4b6b      	ldr	r3, [pc, #428]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006296:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006298:	4b6a      	ldr	r3, [pc, #424]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 800629a:	496c      	ldr	r1, [pc, #432]	@ (800644c <HAL_RCC_OscConfig+0x690>)
 800629c:	400a      	ands	r2, r1
 800629e:	651a      	str	r2, [r3, #80]	@ 0x50
 80062a0:	4b68      	ldr	r3, [pc, #416]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80062a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062a4:	4b67      	ldr	r3, [pc, #412]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80062a6:	496b      	ldr	r1, [pc, #428]	@ (8006454 <HAL_RCC_OscConfig+0x698>)
 80062a8:	400a      	ands	r2, r1
 80062aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80062ac:	e020      	b.n	80062f0 <HAL_RCC_OscConfig+0x534>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689a      	ldr	r2, [r3, #8]
 80062b2:	23a0      	movs	r3, #160	@ 0xa0
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d10e      	bne.n	80062d8 <HAL_RCC_OscConfig+0x51c>
 80062ba:	4b62      	ldr	r3, [pc, #392]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80062bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062be:	4b61      	ldr	r3, [pc, #388]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80062c0:	2180      	movs	r1, #128	@ 0x80
 80062c2:	00c9      	lsls	r1, r1, #3
 80062c4:	430a      	orrs	r2, r1
 80062c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80062c8:	4b5e      	ldr	r3, [pc, #376]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80062ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062cc:	4b5d      	ldr	r3, [pc, #372]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80062ce:	2180      	movs	r1, #128	@ 0x80
 80062d0:	0049      	lsls	r1, r1, #1
 80062d2:	430a      	orrs	r2, r1
 80062d4:	651a      	str	r2, [r3, #80]	@ 0x50
 80062d6:	e00b      	b.n	80062f0 <HAL_RCC_OscConfig+0x534>
 80062d8:	4b5a      	ldr	r3, [pc, #360]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80062da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062dc:	4b59      	ldr	r3, [pc, #356]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80062de:	495b      	ldr	r1, [pc, #364]	@ (800644c <HAL_RCC_OscConfig+0x690>)
 80062e0:	400a      	ands	r2, r1
 80062e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80062e4:	4b57      	ldr	r3, [pc, #348]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80062e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062e8:	4b56      	ldr	r3, [pc, #344]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80062ea:	495a      	ldr	r1, [pc, #360]	@ (8006454 <HAL_RCC_OscConfig+0x698>)
 80062ec:	400a      	ands	r2, r1
 80062ee:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d015      	beq.n	8006324 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062f8:	f7fd fbf8 	bl	8003aec <HAL_GetTick>
 80062fc:	0003      	movs	r3, r0
 80062fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006300:	e009      	b.n	8006316 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006302:	f7fd fbf3 	bl	8003aec <HAL_GetTick>
 8006306:	0002      	movs	r2, r0
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	4a52      	ldr	r2, [pc, #328]	@ (8006458 <HAL_RCC_OscConfig+0x69c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e11b      	b.n	800654e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006316:	4b4b      	ldr	r3, [pc, #300]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006318:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800631a:	2380      	movs	r3, #128	@ 0x80
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4013      	ands	r3, r2
 8006320:	d0ef      	beq.n	8006302 <HAL_RCC_OscConfig+0x546>
 8006322:	e014      	b.n	800634e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006324:	f7fd fbe2 	bl	8003aec <HAL_GetTick>
 8006328:	0003      	movs	r3, r0
 800632a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800632c:	e009      	b.n	8006342 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800632e:	f7fd fbdd 	bl	8003aec <HAL_GetTick>
 8006332:	0002      	movs	r2, r0
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	4a47      	ldr	r2, [pc, #284]	@ (8006458 <HAL_RCC_OscConfig+0x69c>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e105      	b.n	800654e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006342:	4b40      	ldr	r3, [pc, #256]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006344:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006346:	2380      	movs	r3, #128	@ 0x80
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4013      	ands	r3, r2
 800634c:	d1ef      	bne.n	800632e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800634e:	2323      	movs	r3, #35	@ 0x23
 8006350:	18fb      	adds	r3, r7, r3
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d105      	bne.n	8006364 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006358:	4b3a      	ldr	r3, [pc, #232]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 800635a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800635c:	4b39      	ldr	r3, [pc, #228]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 800635e:	493f      	ldr	r1, [pc, #252]	@ (800645c <HAL_RCC_OscConfig+0x6a0>)
 8006360:	400a      	ands	r2, r1
 8006362:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2220      	movs	r2, #32
 800636a:	4013      	ands	r3, r2
 800636c:	d049      	beq.n	8006402 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d026      	beq.n	80063c4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006376:	4b33      	ldr	r3, [pc, #204]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	4b32      	ldr	r3, [pc, #200]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 800637c:	2101      	movs	r1, #1
 800637e:	430a      	orrs	r2, r1
 8006380:	609a      	str	r2, [r3, #8]
 8006382:	4b30      	ldr	r3, [pc, #192]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006386:	4b2f      	ldr	r3, [pc, #188]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006388:	2101      	movs	r1, #1
 800638a:	430a      	orrs	r2, r1
 800638c:	635a      	str	r2, [r3, #52]	@ 0x34
 800638e:	4b34      	ldr	r3, [pc, #208]	@ (8006460 <HAL_RCC_OscConfig+0x6a4>)
 8006390:	6a1a      	ldr	r2, [r3, #32]
 8006392:	4b33      	ldr	r3, [pc, #204]	@ (8006460 <HAL_RCC_OscConfig+0x6a4>)
 8006394:	2180      	movs	r1, #128	@ 0x80
 8006396:	0189      	lsls	r1, r1, #6
 8006398:	430a      	orrs	r2, r1
 800639a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800639c:	f7fd fba6 	bl	8003aec <HAL_GetTick>
 80063a0:	0003      	movs	r3, r0
 80063a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063a4:	e008      	b.n	80063b8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063a6:	f7fd fba1 	bl	8003aec <HAL_GetTick>
 80063aa:	0002      	movs	r2, r0
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d901      	bls.n	80063b8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80063b4:	2303      	movs	r3, #3
 80063b6:	e0ca      	b.n	800654e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80063b8:	4b22      	ldr	r3, [pc, #136]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2202      	movs	r2, #2
 80063be:	4013      	ands	r3, r2
 80063c0:	d0f1      	beq.n	80063a6 <HAL_RCC_OscConfig+0x5ea>
 80063c2:	e01e      	b.n	8006402 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80063c4:	4b1f      	ldr	r3, [pc, #124]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	4b1e      	ldr	r3, [pc, #120]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80063ca:	2101      	movs	r1, #1
 80063cc:	438a      	bics	r2, r1
 80063ce:	609a      	str	r2, [r3, #8]
 80063d0:	4b23      	ldr	r3, [pc, #140]	@ (8006460 <HAL_RCC_OscConfig+0x6a4>)
 80063d2:	6a1a      	ldr	r2, [r3, #32]
 80063d4:	4b22      	ldr	r3, [pc, #136]	@ (8006460 <HAL_RCC_OscConfig+0x6a4>)
 80063d6:	4923      	ldr	r1, [pc, #140]	@ (8006464 <HAL_RCC_OscConfig+0x6a8>)
 80063d8:	400a      	ands	r2, r1
 80063da:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063dc:	f7fd fb86 	bl	8003aec <HAL_GetTick>
 80063e0:	0003      	movs	r3, r0
 80063e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063e4:	e008      	b.n	80063f8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063e6:	f7fd fb81 	bl	8003aec <HAL_GetTick>
 80063ea:	0002      	movs	r2, r0
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e0aa      	b.n	800654e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063f8:	4b12      	ldr	r3, [pc, #72]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	2202      	movs	r2, #2
 80063fe:	4013      	ands	r3, r2
 8006400:	d1f1      	bne.n	80063e6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006406:	2b00      	cmp	r3, #0
 8006408:	d100      	bne.n	800640c <HAL_RCC_OscConfig+0x650>
 800640a:	e09f      	b.n	800654c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800640c:	69fb      	ldr	r3, [r7, #28]
 800640e:	2b0c      	cmp	r3, #12
 8006410:	d100      	bne.n	8006414 <HAL_RCC_OscConfig+0x658>
 8006412:	e078      	b.n	8006506 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006418:	2b02      	cmp	r3, #2
 800641a:	d159      	bne.n	80064d0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800641c:	4b09      	ldr	r3, [pc, #36]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	4b08      	ldr	r3, [pc, #32]	@ (8006444 <HAL_RCC_OscConfig+0x688>)
 8006422:	4911      	ldr	r1, [pc, #68]	@ (8006468 <HAL_RCC_OscConfig+0x6ac>)
 8006424:	400a      	ands	r2, r1
 8006426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006428:	f7fd fb60 	bl	8003aec <HAL_GetTick>
 800642c:	0003      	movs	r3, r0
 800642e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006430:	e01c      	b.n	800646c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006432:	f7fd fb5b 	bl	8003aec <HAL_GetTick>
 8006436:	0002      	movs	r2, r0
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	2b02      	cmp	r3, #2
 800643e:	d915      	bls.n	800646c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e084      	b.n	800654e <HAL_RCC_OscConfig+0x792>
 8006444:	40021000 	.word	0x40021000
 8006448:	ffff1fff 	.word	0xffff1fff
 800644c:	fffffeff 	.word	0xfffffeff
 8006450:	40007000 	.word	0x40007000
 8006454:	fffffbff 	.word	0xfffffbff
 8006458:	00001388 	.word	0x00001388
 800645c:	efffffff 	.word	0xefffffff
 8006460:	40010000 	.word	0x40010000
 8006464:	ffffdfff 	.word	0xffffdfff
 8006468:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800646c:	4b3a      	ldr	r3, [pc, #232]	@ (8006558 <HAL_RCC_OscConfig+0x79c>)
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	2380      	movs	r3, #128	@ 0x80
 8006472:	049b      	lsls	r3, r3, #18
 8006474:	4013      	ands	r3, r2
 8006476:	d1dc      	bne.n	8006432 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006478:	4b37      	ldr	r3, [pc, #220]	@ (8006558 <HAL_RCC_OscConfig+0x79c>)
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	4a37      	ldr	r2, [pc, #220]	@ (800655c <HAL_RCC_OscConfig+0x7a0>)
 800647e:	4013      	ands	r3, r2
 8006480:	0019      	movs	r1, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800648a:	431a      	orrs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006490:	431a      	orrs	r2, r3
 8006492:	4b31      	ldr	r3, [pc, #196]	@ (8006558 <HAL_RCC_OscConfig+0x79c>)
 8006494:	430a      	orrs	r2, r1
 8006496:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006498:	4b2f      	ldr	r3, [pc, #188]	@ (8006558 <HAL_RCC_OscConfig+0x79c>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	4b2e      	ldr	r3, [pc, #184]	@ (8006558 <HAL_RCC_OscConfig+0x79c>)
 800649e:	2180      	movs	r1, #128	@ 0x80
 80064a0:	0449      	lsls	r1, r1, #17
 80064a2:	430a      	orrs	r2, r1
 80064a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064a6:	f7fd fb21 	bl	8003aec <HAL_GetTick>
 80064aa:	0003      	movs	r3, r0
 80064ac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80064ae:	e008      	b.n	80064c2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064b0:	f7fd fb1c 	bl	8003aec <HAL_GetTick>
 80064b4:	0002      	movs	r2, r0
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d901      	bls.n	80064c2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e045      	b.n	800654e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80064c2:	4b25      	ldr	r3, [pc, #148]	@ (8006558 <HAL_RCC_OscConfig+0x79c>)
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	2380      	movs	r3, #128	@ 0x80
 80064c8:	049b      	lsls	r3, r3, #18
 80064ca:	4013      	ands	r3, r2
 80064cc:	d0f0      	beq.n	80064b0 <HAL_RCC_OscConfig+0x6f4>
 80064ce:	e03d      	b.n	800654c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064d0:	4b21      	ldr	r3, [pc, #132]	@ (8006558 <HAL_RCC_OscConfig+0x79c>)
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	4b20      	ldr	r3, [pc, #128]	@ (8006558 <HAL_RCC_OscConfig+0x79c>)
 80064d6:	4922      	ldr	r1, [pc, #136]	@ (8006560 <HAL_RCC_OscConfig+0x7a4>)
 80064d8:	400a      	ands	r2, r1
 80064da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064dc:	f7fd fb06 	bl	8003aec <HAL_GetTick>
 80064e0:	0003      	movs	r3, r0
 80064e2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064e6:	f7fd fb01 	bl	8003aec <HAL_GetTick>
 80064ea:	0002      	movs	r2, r0
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e02a      	b.n	800654e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80064f8:	4b17      	ldr	r3, [pc, #92]	@ (8006558 <HAL_RCC_OscConfig+0x79c>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	2380      	movs	r3, #128	@ 0x80
 80064fe:	049b      	lsls	r3, r3, #18
 8006500:	4013      	ands	r3, r2
 8006502:	d1f0      	bne.n	80064e6 <HAL_RCC_OscConfig+0x72a>
 8006504:	e022      	b.n	800654c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800650a:	2b01      	cmp	r3, #1
 800650c:	d101      	bne.n	8006512 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	e01d      	b.n	800654e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006512:	4b11      	ldr	r3, [pc, #68]	@ (8006558 <HAL_RCC_OscConfig+0x79c>)
 8006514:	68db      	ldr	r3, [r3, #12]
 8006516:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	2380      	movs	r3, #128	@ 0x80
 800651c:	025b      	lsls	r3, r3, #9
 800651e:	401a      	ands	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006524:	429a      	cmp	r2, r3
 8006526:	d10f      	bne.n	8006548 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	23f0      	movs	r3, #240	@ 0xf0
 800652c:	039b      	lsls	r3, r3, #14
 800652e:	401a      	ands	r2, r3
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006534:	429a      	cmp	r2, r3
 8006536:	d107      	bne.n	8006548 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	23c0      	movs	r3, #192	@ 0xc0
 800653c:	041b      	lsls	r3, r3, #16
 800653e:	401a      	ands	r2, r3
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006544:	429a      	cmp	r2, r3
 8006546:	d001      	beq.n	800654c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e000      	b.n	800654e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	0018      	movs	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	b00a      	add	sp, #40	@ 0x28
 8006554:	bdb0      	pop	{r4, r5, r7, pc}
 8006556:	46c0      	nop			@ (mov r8, r8)
 8006558:	40021000 	.word	0x40021000
 800655c:	ff02ffff 	.word	0xff02ffff
 8006560:	feffffff 	.word	0xfeffffff

08006564 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006564:	b5b0      	push	{r4, r5, r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d101      	bne.n	8006578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e128      	b.n	80067ca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006578:	4b96      	ldr	r3, [pc, #600]	@ (80067d4 <HAL_RCC_ClockConfig+0x270>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	2201      	movs	r2, #1
 800657e:	4013      	ands	r3, r2
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	429a      	cmp	r2, r3
 8006584:	d91e      	bls.n	80065c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006586:	4b93      	ldr	r3, [pc, #588]	@ (80067d4 <HAL_RCC_ClockConfig+0x270>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2201      	movs	r2, #1
 800658c:	4393      	bics	r3, r2
 800658e:	0019      	movs	r1, r3
 8006590:	4b90      	ldr	r3, [pc, #576]	@ (80067d4 <HAL_RCC_ClockConfig+0x270>)
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	430a      	orrs	r2, r1
 8006596:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006598:	f7fd faa8 	bl	8003aec <HAL_GetTick>
 800659c:	0003      	movs	r3, r0
 800659e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065a0:	e009      	b.n	80065b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065a2:	f7fd faa3 	bl	8003aec <HAL_GetTick>
 80065a6:	0002      	movs	r2, r0
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	4a8a      	ldr	r2, [pc, #552]	@ (80067d8 <HAL_RCC_ClockConfig+0x274>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d901      	bls.n	80065b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80065b2:	2303      	movs	r3, #3
 80065b4:	e109      	b.n	80067ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065b6:	4b87      	ldr	r3, [pc, #540]	@ (80067d4 <HAL_RCC_ClockConfig+0x270>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2201      	movs	r2, #1
 80065bc:	4013      	ands	r3, r2
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d1ee      	bne.n	80065a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2202      	movs	r2, #2
 80065ca:	4013      	ands	r3, r2
 80065cc:	d009      	beq.n	80065e2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065ce:	4b83      	ldr	r3, [pc, #524]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	22f0      	movs	r2, #240	@ 0xf0
 80065d4:	4393      	bics	r3, r2
 80065d6:	0019      	movs	r1, r3
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	4b7f      	ldr	r3, [pc, #508]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 80065de:	430a      	orrs	r2, r1
 80065e0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	2201      	movs	r2, #1
 80065e8:	4013      	ands	r3, r2
 80065ea:	d100      	bne.n	80065ee <HAL_RCC_ClockConfig+0x8a>
 80065ec:	e089      	b.n	8006702 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d107      	bne.n	8006606 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065f6:	4b79      	ldr	r3, [pc, #484]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	2380      	movs	r3, #128	@ 0x80
 80065fc:	029b      	lsls	r3, r3, #10
 80065fe:	4013      	ands	r3, r2
 8006600:	d120      	bne.n	8006644 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006602:	2301      	movs	r3, #1
 8006604:	e0e1      	b.n	80067ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	2b03      	cmp	r3, #3
 800660c:	d107      	bne.n	800661e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800660e:	4b73      	ldr	r3, [pc, #460]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	2380      	movs	r3, #128	@ 0x80
 8006614:	049b      	lsls	r3, r3, #18
 8006616:	4013      	ands	r3, r2
 8006618:	d114      	bne.n	8006644 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800661a:	2301      	movs	r3, #1
 800661c:	e0d5      	b.n	80067ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	2b01      	cmp	r3, #1
 8006624:	d106      	bne.n	8006634 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006626:	4b6d      	ldr	r3, [pc, #436]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2204      	movs	r2, #4
 800662c:	4013      	ands	r3, r2
 800662e:	d109      	bne.n	8006644 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e0ca      	b.n	80067ca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006634:	4b69      	ldr	r3, [pc, #420]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	2380      	movs	r3, #128	@ 0x80
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4013      	ands	r3, r2
 800663e:	d101      	bne.n	8006644 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e0c2      	b.n	80067ca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006644:	4b65      	ldr	r3, [pc, #404]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	2203      	movs	r2, #3
 800664a:	4393      	bics	r3, r2
 800664c:	0019      	movs	r1, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	4b62      	ldr	r3, [pc, #392]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 8006654:	430a      	orrs	r2, r1
 8006656:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006658:	f7fd fa48 	bl	8003aec <HAL_GetTick>
 800665c:	0003      	movs	r3, r0
 800665e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d111      	bne.n	800668c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006668:	e009      	b.n	800667e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800666a:	f7fd fa3f 	bl	8003aec <HAL_GetTick>
 800666e:	0002      	movs	r2, r0
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	4a58      	ldr	r2, [pc, #352]	@ (80067d8 <HAL_RCC_ClockConfig+0x274>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d901      	bls.n	800667e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e0a5      	b.n	80067ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800667e:	4b57      	ldr	r3, [pc, #348]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	220c      	movs	r2, #12
 8006684:	4013      	ands	r3, r2
 8006686:	2b08      	cmp	r3, #8
 8006688:	d1ef      	bne.n	800666a <HAL_RCC_ClockConfig+0x106>
 800668a:	e03a      	b.n	8006702 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	2b03      	cmp	r3, #3
 8006692:	d111      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006694:	e009      	b.n	80066aa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006696:	f7fd fa29 	bl	8003aec <HAL_GetTick>
 800669a:	0002      	movs	r2, r0
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	4a4d      	ldr	r2, [pc, #308]	@ (80067d8 <HAL_RCC_ClockConfig+0x274>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e08f      	b.n	80067ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066aa:	4b4c      	ldr	r3, [pc, #304]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	220c      	movs	r2, #12
 80066b0:	4013      	ands	r3, r2
 80066b2:	2b0c      	cmp	r3, #12
 80066b4:	d1ef      	bne.n	8006696 <HAL_RCC_ClockConfig+0x132>
 80066b6:	e024      	b.n	8006702 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d11b      	bne.n	80066f8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80066c0:	e009      	b.n	80066d6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c2:	f7fd fa13 	bl	8003aec <HAL_GetTick>
 80066c6:	0002      	movs	r2, r0
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	4a42      	ldr	r2, [pc, #264]	@ (80067d8 <HAL_RCC_ClockConfig+0x274>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e079      	b.n	80067ca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80066d6:	4b41      	ldr	r3, [pc, #260]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	220c      	movs	r2, #12
 80066dc:	4013      	ands	r3, r2
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d1ef      	bne.n	80066c2 <HAL_RCC_ClockConfig+0x15e>
 80066e2:	e00e      	b.n	8006702 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066e4:	f7fd fa02 	bl	8003aec <HAL_GetTick>
 80066e8:	0002      	movs	r2, r0
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	4a3a      	ldr	r2, [pc, #232]	@ (80067d8 <HAL_RCC_ClockConfig+0x274>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d901      	bls.n	80066f8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e068      	b.n	80067ca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80066f8:	4b38      	ldr	r3, [pc, #224]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	220c      	movs	r2, #12
 80066fe:	4013      	ands	r3, r2
 8006700:	d1f0      	bne.n	80066e4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006702:	4b34      	ldr	r3, [pc, #208]	@ (80067d4 <HAL_RCC_ClockConfig+0x270>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2201      	movs	r2, #1
 8006708:	4013      	ands	r3, r2
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d21e      	bcs.n	800674e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006710:	4b30      	ldr	r3, [pc, #192]	@ (80067d4 <HAL_RCC_ClockConfig+0x270>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	2201      	movs	r2, #1
 8006716:	4393      	bics	r3, r2
 8006718:	0019      	movs	r1, r3
 800671a:	4b2e      	ldr	r3, [pc, #184]	@ (80067d4 <HAL_RCC_ClockConfig+0x270>)
 800671c:	683a      	ldr	r2, [r7, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006722:	f7fd f9e3 	bl	8003aec <HAL_GetTick>
 8006726:	0003      	movs	r3, r0
 8006728:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800672a:	e009      	b.n	8006740 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800672c:	f7fd f9de 	bl	8003aec <HAL_GetTick>
 8006730:	0002      	movs	r2, r0
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	4a28      	ldr	r2, [pc, #160]	@ (80067d8 <HAL_RCC_ClockConfig+0x274>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d901      	bls.n	8006740 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e044      	b.n	80067ca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006740:	4b24      	ldr	r3, [pc, #144]	@ (80067d4 <HAL_RCC_ClockConfig+0x270>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2201      	movs	r2, #1
 8006746:	4013      	ands	r3, r2
 8006748:	683a      	ldr	r2, [r7, #0]
 800674a:	429a      	cmp	r2, r3
 800674c:	d1ee      	bne.n	800672c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2204      	movs	r2, #4
 8006754:	4013      	ands	r3, r2
 8006756:	d009      	beq.n	800676c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006758:	4b20      	ldr	r3, [pc, #128]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	4a20      	ldr	r2, [pc, #128]	@ (80067e0 <HAL_RCC_ClockConfig+0x27c>)
 800675e:	4013      	ands	r3, r2
 8006760:	0019      	movs	r1, r3
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	4b1d      	ldr	r3, [pc, #116]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 8006768:	430a      	orrs	r2, r1
 800676a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2208      	movs	r2, #8
 8006772:	4013      	ands	r3, r2
 8006774:	d00a      	beq.n	800678c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006776:	4b19      	ldr	r3, [pc, #100]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	4a1a      	ldr	r2, [pc, #104]	@ (80067e4 <HAL_RCC_ClockConfig+0x280>)
 800677c:	4013      	ands	r3, r2
 800677e:	0019      	movs	r1, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	00da      	lsls	r2, r3, #3
 8006786:	4b15      	ldr	r3, [pc, #84]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 8006788:	430a      	orrs	r2, r1
 800678a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800678c:	f000 f832 	bl	80067f4 <HAL_RCC_GetSysClockFreq>
 8006790:	0001      	movs	r1, r0
 8006792:	4b12      	ldr	r3, [pc, #72]	@ (80067dc <HAL_RCC_ClockConfig+0x278>)
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	091b      	lsrs	r3, r3, #4
 8006798:	220f      	movs	r2, #15
 800679a:	4013      	ands	r3, r2
 800679c:	4a12      	ldr	r2, [pc, #72]	@ (80067e8 <HAL_RCC_ClockConfig+0x284>)
 800679e:	5cd3      	ldrb	r3, [r2, r3]
 80067a0:	000a      	movs	r2, r1
 80067a2:	40da      	lsrs	r2, r3
 80067a4:	4b11      	ldr	r3, [pc, #68]	@ (80067ec <HAL_RCC_ClockConfig+0x288>)
 80067a6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80067a8:	4b11      	ldr	r3, [pc, #68]	@ (80067f0 <HAL_RCC_ClockConfig+0x28c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	250b      	movs	r5, #11
 80067ae:	197c      	adds	r4, r7, r5
 80067b0:	0018      	movs	r0, r3
 80067b2:	f7fd f955 	bl	8003a60 <HAL_InitTick>
 80067b6:	0003      	movs	r3, r0
 80067b8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80067ba:	197b      	adds	r3, r7, r5
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80067c2:	197b      	adds	r3, r7, r5
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	e000      	b.n	80067ca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	0018      	movs	r0, r3
 80067cc:	46bd      	mov	sp, r7
 80067ce:	b004      	add	sp, #16
 80067d0:	bdb0      	pop	{r4, r5, r7, pc}
 80067d2:	46c0      	nop			@ (mov r8, r8)
 80067d4:	40022000 	.word	0x40022000
 80067d8:	00001388 	.word	0x00001388
 80067dc:	40021000 	.word	0x40021000
 80067e0:	fffff8ff 	.word	0xfffff8ff
 80067e4:	ffffc7ff 	.word	0xffffc7ff
 80067e8:	0800a238 	.word	0x0800a238
 80067ec:	20000000 	.word	0x20000000
 80067f0:	20000048 	.word	0x20000048

080067f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80067fa:	4b3c      	ldr	r3, [pc, #240]	@ (80068ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	220c      	movs	r2, #12
 8006804:	4013      	ands	r3, r2
 8006806:	2b0c      	cmp	r3, #12
 8006808:	d013      	beq.n	8006832 <HAL_RCC_GetSysClockFreq+0x3e>
 800680a:	d85c      	bhi.n	80068c6 <HAL_RCC_GetSysClockFreq+0xd2>
 800680c:	2b04      	cmp	r3, #4
 800680e:	d002      	beq.n	8006816 <HAL_RCC_GetSysClockFreq+0x22>
 8006810:	2b08      	cmp	r3, #8
 8006812:	d00b      	beq.n	800682c <HAL_RCC_GetSysClockFreq+0x38>
 8006814:	e057      	b.n	80068c6 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006816:	4b35      	ldr	r3, [pc, #212]	@ (80068ec <HAL_RCC_GetSysClockFreq+0xf8>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	2210      	movs	r2, #16
 800681c:	4013      	ands	r3, r2
 800681e:	d002      	beq.n	8006826 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8006820:	4b33      	ldr	r3, [pc, #204]	@ (80068f0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006822:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8006824:	e05d      	b.n	80068e2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8006826:	4b33      	ldr	r3, [pc, #204]	@ (80068f4 <HAL_RCC_GetSysClockFreq+0x100>)
 8006828:	613b      	str	r3, [r7, #16]
      break;
 800682a:	e05a      	b.n	80068e2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800682c:	4b32      	ldr	r3, [pc, #200]	@ (80068f8 <HAL_RCC_GetSysClockFreq+0x104>)
 800682e:	613b      	str	r3, [r7, #16]
      break;
 8006830:	e057      	b.n	80068e2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	0c9b      	lsrs	r3, r3, #18
 8006836:	220f      	movs	r2, #15
 8006838:	4013      	ands	r3, r2
 800683a:	4a30      	ldr	r2, [pc, #192]	@ (80068fc <HAL_RCC_GetSysClockFreq+0x108>)
 800683c:	5cd3      	ldrb	r3, [r2, r3]
 800683e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	0d9b      	lsrs	r3, r3, #22
 8006844:	2203      	movs	r2, #3
 8006846:	4013      	ands	r3, r2
 8006848:	3301      	adds	r3, #1
 800684a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800684c:	4b27      	ldr	r3, [pc, #156]	@ (80068ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	2380      	movs	r3, #128	@ 0x80
 8006852:	025b      	lsls	r3, r3, #9
 8006854:	4013      	ands	r3, r2
 8006856:	d00f      	beq.n	8006878 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	000a      	movs	r2, r1
 800685c:	0152      	lsls	r2, r2, #5
 800685e:	1a52      	subs	r2, r2, r1
 8006860:	0193      	lsls	r3, r2, #6
 8006862:	1a9b      	subs	r3, r3, r2
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	185b      	adds	r3, r3, r1
 8006868:	025b      	lsls	r3, r3, #9
 800686a:	6879      	ldr	r1, [r7, #4]
 800686c:	0018      	movs	r0, r3
 800686e:	f7f9 fc5d 	bl	800012c <__udivsi3>
 8006872:	0003      	movs	r3, r0
 8006874:	617b      	str	r3, [r7, #20]
 8006876:	e023      	b.n	80068c0 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006878:	4b1c      	ldr	r3, [pc, #112]	@ (80068ec <HAL_RCC_GetSysClockFreq+0xf8>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2210      	movs	r2, #16
 800687e:	4013      	ands	r3, r2
 8006880:	d00f      	beq.n	80068a2 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	000a      	movs	r2, r1
 8006886:	0152      	lsls	r2, r2, #5
 8006888:	1a52      	subs	r2, r2, r1
 800688a:	0193      	lsls	r3, r2, #6
 800688c:	1a9b      	subs	r3, r3, r2
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	185b      	adds	r3, r3, r1
 8006892:	021b      	lsls	r3, r3, #8
 8006894:	6879      	ldr	r1, [r7, #4]
 8006896:	0018      	movs	r0, r3
 8006898:	f7f9 fc48 	bl	800012c <__udivsi3>
 800689c:	0003      	movs	r3, r0
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	e00e      	b.n	80068c0 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	000a      	movs	r2, r1
 80068a6:	0152      	lsls	r2, r2, #5
 80068a8:	1a52      	subs	r2, r2, r1
 80068aa:	0193      	lsls	r3, r2, #6
 80068ac:	1a9b      	subs	r3, r3, r2
 80068ae:	00db      	lsls	r3, r3, #3
 80068b0:	185b      	adds	r3, r3, r1
 80068b2:	029b      	lsls	r3, r3, #10
 80068b4:	6879      	ldr	r1, [r7, #4]
 80068b6:	0018      	movs	r0, r3
 80068b8:	f7f9 fc38 	bl	800012c <__udivsi3>
 80068bc:	0003      	movs	r3, r0
 80068be:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	613b      	str	r3, [r7, #16]
      break;
 80068c4:	e00d      	b.n	80068e2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80068c6:	4b09      	ldr	r3, [pc, #36]	@ (80068ec <HAL_RCC_GetSysClockFreq+0xf8>)
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	0b5b      	lsrs	r3, r3, #13
 80068cc:	2207      	movs	r2, #7
 80068ce:	4013      	ands	r3, r2
 80068d0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	3301      	adds	r3, #1
 80068d6:	2280      	movs	r2, #128	@ 0x80
 80068d8:	0212      	lsls	r2, r2, #8
 80068da:	409a      	lsls	r2, r3
 80068dc:	0013      	movs	r3, r2
 80068de:	613b      	str	r3, [r7, #16]
      break;
 80068e0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80068e2:	693b      	ldr	r3, [r7, #16]
}
 80068e4:	0018      	movs	r0, r3
 80068e6:	46bd      	mov	sp, r7
 80068e8:	b006      	add	sp, #24
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	40021000 	.word	0x40021000
 80068f0:	003d0900 	.word	0x003d0900
 80068f4:	00f42400 	.word	0x00f42400
 80068f8:	007a1200 	.word	0x007a1200
 80068fc:	0800a250 	.word	0x0800a250

08006900 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006904:	4b02      	ldr	r3, [pc, #8]	@ (8006910 <HAL_RCC_GetHCLKFreq+0x10>)
 8006906:	681b      	ldr	r3, [r3, #0]
}
 8006908:	0018      	movs	r0, r3
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	46c0      	nop			@ (mov r8, r8)
 8006910:	20000000 	.word	0x20000000

08006914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006918:	f7ff fff2 	bl	8006900 <HAL_RCC_GetHCLKFreq>
 800691c:	0001      	movs	r1, r0
 800691e:	4b06      	ldr	r3, [pc, #24]	@ (8006938 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	0a1b      	lsrs	r3, r3, #8
 8006924:	2207      	movs	r2, #7
 8006926:	4013      	ands	r3, r2
 8006928:	4a04      	ldr	r2, [pc, #16]	@ (800693c <HAL_RCC_GetPCLK1Freq+0x28>)
 800692a:	5cd3      	ldrb	r3, [r2, r3]
 800692c:	40d9      	lsrs	r1, r3
 800692e:	000b      	movs	r3, r1
}
 8006930:	0018      	movs	r0, r3
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	46c0      	nop			@ (mov r8, r8)
 8006938:	40021000 	.word	0x40021000
 800693c:	0800a248 	.word	0x0800a248

08006940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006944:	f7ff ffdc 	bl	8006900 <HAL_RCC_GetHCLKFreq>
 8006948:	0001      	movs	r1, r0
 800694a:	4b06      	ldr	r3, [pc, #24]	@ (8006964 <HAL_RCC_GetPCLK2Freq+0x24>)
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	0adb      	lsrs	r3, r3, #11
 8006950:	2207      	movs	r2, #7
 8006952:	4013      	ands	r3, r2
 8006954:	4a04      	ldr	r2, [pc, #16]	@ (8006968 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006956:	5cd3      	ldrb	r3, [r2, r3]
 8006958:	40d9      	lsrs	r1, r3
 800695a:	000b      	movs	r3, r1
}
 800695c:	0018      	movs	r0, r3
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	46c0      	nop			@ (mov r8, r8)
 8006964:	40021000 	.word	0x40021000
 8006968:	0800a248 	.word	0x0800a248

0800696c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b086      	sub	sp, #24
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006974:	2317      	movs	r3, #23
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	2200      	movs	r2, #0
 800697a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2220      	movs	r2, #32
 8006982:	4013      	ands	r3, r2
 8006984:	d106      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	2380      	movs	r3, #128	@ 0x80
 800698c:	011b      	lsls	r3, r3, #4
 800698e:	4013      	ands	r3, r2
 8006990:	d100      	bne.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8006992:	e104      	b.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006994:	4bb9      	ldr	r3, [pc, #740]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006996:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006998:	2380      	movs	r3, #128	@ 0x80
 800699a:	055b      	lsls	r3, r3, #21
 800699c:	4013      	ands	r3, r2
 800699e:	d10a      	bne.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069a0:	4bb6      	ldr	r3, [pc, #728]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069a2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069a4:	4bb5      	ldr	r3, [pc, #724]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069a6:	2180      	movs	r1, #128	@ 0x80
 80069a8:	0549      	lsls	r1, r1, #21
 80069aa:	430a      	orrs	r2, r1
 80069ac:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80069ae:	2317      	movs	r3, #23
 80069b0:	18fb      	adds	r3, r7, r3
 80069b2:	2201      	movs	r2, #1
 80069b4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069b6:	4bb2      	ldr	r3, [pc, #712]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	2380      	movs	r3, #128	@ 0x80
 80069bc:	005b      	lsls	r3, r3, #1
 80069be:	4013      	ands	r3, r2
 80069c0:	d11a      	bne.n	80069f8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069c2:	4baf      	ldr	r3, [pc, #700]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	4bae      	ldr	r3, [pc, #696]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80069c8:	2180      	movs	r1, #128	@ 0x80
 80069ca:	0049      	lsls	r1, r1, #1
 80069cc:	430a      	orrs	r2, r1
 80069ce:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069d0:	f7fd f88c 	bl	8003aec <HAL_GetTick>
 80069d4:	0003      	movs	r3, r0
 80069d6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069d8:	e008      	b.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069da:	f7fd f887 	bl	8003aec <HAL_GetTick>
 80069de:	0002      	movs	r2, r0
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b64      	cmp	r3, #100	@ 0x64
 80069e6:	d901      	bls.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e143      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069ec:	4ba4      	ldr	r3, [pc, #656]	@ (8006c80 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	2380      	movs	r3, #128	@ 0x80
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	4013      	ands	r3, r2
 80069f6:	d0f0      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80069f8:	4ba0      	ldr	r3, [pc, #640]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	23c0      	movs	r3, #192	@ 0xc0
 80069fe:	039b      	lsls	r3, r3, #14
 8006a00:	4013      	ands	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685a      	ldr	r2, [r3, #4]
 8006a08:	23c0      	movs	r3, #192	@ 0xc0
 8006a0a:	039b      	lsls	r3, r3, #14
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	68fa      	ldr	r2, [r7, #12]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d107      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	23c0      	movs	r3, #192	@ 0xc0
 8006a1a:	039b      	lsls	r3, r3, #14
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d013      	beq.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	23c0      	movs	r3, #192	@ 0xc0
 8006a2a:	029b      	lsls	r3, r3, #10
 8006a2c:	401a      	ands	r2, r3
 8006a2e:	23c0      	movs	r3, #192	@ 0xc0
 8006a30:	029b      	lsls	r3, r3, #10
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d10a      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a36:	4b91      	ldr	r3, [pc, #580]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	2380      	movs	r3, #128	@ 0x80
 8006a3c:	029b      	lsls	r3, r3, #10
 8006a3e:	401a      	ands	r2, r3
 8006a40:	2380      	movs	r3, #128	@ 0x80
 8006a42:	029b      	lsls	r3, r3, #10
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d101      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e113      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006a4c:	4b8b      	ldr	r3, [pc, #556]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006a50:	23c0      	movs	r3, #192	@ 0xc0
 8006a52:	029b      	lsls	r3, r3, #10
 8006a54:	4013      	ands	r3, r2
 8006a56:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d049      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685a      	ldr	r2, [r3, #4]
 8006a62:	23c0      	movs	r3, #192	@ 0xc0
 8006a64:	029b      	lsls	r3, r3, #10
 8006a66:	4013      	ands	r3, r2
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d004      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2220      	movs	r2, #32
 8006a74:	4013      	ands	r3, r2
 8006a76:	d10d      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	23c0      	movs	r3, #192	@ 0xc0
 8006a7e:	029b      	lsls	r3, r3, #10
 8006a80:	4013      	ands	r3, r2
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d034      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	2380      	movs	r3, #128	@ 0x80
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	4013      	ands	r3, r2
 8006a92:	d02e      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006a94:	4b79      	ldr	r3, [pc, #484]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a98:	4a7a      	ldr	r2, [pc, #488]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006a9e:	4b77      	ldr	r3, [pc, #476]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006aa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006aa2:	4b76      	ldr	r3, [pc, #472]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006aa4:	2180      	movs	r1, #128	@ 0x80
 8006aa6:	0309      	lsls	r1, r1, #12
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006aac:	4b73      	ldr	r3, [pc, #460]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006aae:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006ab0:	4b72      	ldr	r3, [pc, #456]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ab2:	4975      	ldr	r1, [pc, #468]	@ (8006c88 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8006ab4:	400a      	ands	r2, r1
 8006ab6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8006ab8:	4b70      	ldr	r3, [pc, #448]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	2380      	movs	r3, #128	@ 0x80
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	d014      	beq.n	8006af2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac8:	f7fd f810 	bl	8003aec <HAL_GetTick>
 8006acc:	0003      	movs	r3, r0
 8006ace:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ad0:	e009      	b.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ad2:	f7fd f80b 	bl	8003aec <HAL_GetTick>
 8006ad6:	0002      	movs	r2, r0
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	4a6b      	ldr	r2, [pc, #428]	@ (8006c8c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e0c6      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ae6:	4b65      	ldr	r3, [pc, #404]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006ae8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006aea:	2380      	movs	r3, #128	@ 0x80
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4013      	ands	r3, r2
 8006af0:	d0ef      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	2380      	movs	r3, #128	@ 0x80
 8006af8:	011b      	lsls	r3, r3, #4
 8006afa:	4013      	ands	r3, r2
 8006afc:	d01f      	beq.n	8006b3e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	689a      	ldr	r2, [r3, #8]
 8006b02:	23c0      	movs	r3, #192	@ 0xc0
 8006b04:	029b      	lsls	r3, r3, #10
 8006b06:	401a      	ands	r2, r3
 8006b08:	23c0      	movs	r3, #192	@ 0xc0
 8006b0a:	029b      	lsls	r3, r3, #10
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d10c      	bne.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8006b10:	4b5a      	ldr	r3, [pc, #360]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a5e      	ldr	r2, [pc, #376]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006b16:	4013      	ands	r3, r2
 8006b18:	0019      	movs	r1, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689a      	ldr	r2, [r3, #8]
 8006b1e:	23c0      	movs	r3, #192	@ 0xc0
 8006b20:	039b      	lsls	r3, r3, #14
 8006b22:	401a      	ands	r2, r3
 8006b24:	4b55      	ldr	r3, [pc, #340]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b26:	430a      	orrs	r2, r1
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	4b54      	ldr	r3, [pc, #336]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b2c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	689a      	ldr	r2, [r3, #8]
 8006b32:	23c0      	movs	r3, #192	@ 0xc0
 8006b34:	029b      	lsls	r3, r3, #10
 8006b36:	401a      	ands	r2, r3
 8006b38:	4b50      	ldr	r3, [pc, #320]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b3a:	430a      	orrs	r2, r1
 8006b3c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2220      	movs	r2, #32
 8006b44:	4013      	ands	r3, r2
 8006b46:	d01f      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	23c0      	movs	r3, #192	@ 0xc0
 8006b4e:	029b      	lsls	r3, r3, #10
 8006b50:	401a      	ands	r2, r3
 8006b52:	23c0      	movs	r3, #192	@ 0xc0
 8006b54:	029b      	lsls	r3, r3, #10
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d10c      	bne.n	8006b74 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8006b5a:	4b48      	ldr	r3, [pc, #288]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4a4c      	ldr	r2, [pc, #304]	@ (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	0019      	movs	r1, r3
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	23c0      	movs	r3, #192	@ 0xc0
 8006b6a:	039b      	lsls	r3, r3, #14
 8006b6c:	401a      	ands	r2, r3
 8006b6e:	4b43      	ldr	r3, [pc, #268]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b70:	430a      	orrs	r2, r1
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	4b41      	ldr	r3, [pc, #260]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b76:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	23c0      	movs	r3, #192	@ 0xc0
 8006b7e:	029b      	lsls	r3, r3, #10
 8006b80:	401a      	ands	r2, r3
 8006b82:	4b3e      	ldr	r3, [pc, #248]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b84:	430a      	orrs	r2, r1
 8006b86:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b88:	2317      	movs	r3, #23
 8006b8a:	18fb      	adds	r3, r7, r3
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d105      	bne.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b92:	4b3a      	ldr	r3, [pc, #232]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b96:	4b39      	ldr	r3, [pc, #228]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006b98:	493e      	ldr	r1, [pc, #248]	@ (8006c94 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8006b9a:	400a      	ands	r2, r1
 8006b9c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	d009      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ba8:	4b34      	ldr	r3, [pc, #208]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bac:	2203      	movs	r2, #3
 8006bae:	4393      	bics	r3, r2
 8006bb0:	0019      	movs	r1, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	4b31      	ldr	r3, [pc, #196]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	d009      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006bc6:	4b2d      	ldr	r3, [pc, #180]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bca:	220c      	movs	r2, #12
 8006bcc:	4393      	bics	r3, r2
 8006bce:	0019      	movs	r1, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	691a      	ldr	r2, [r3, #16]
 8006bd4:	4b29      	ldr	r3, [pc, #164]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2204      	movs	r2, #4
 8006be0:	4013      	ands	r3, r2
 8006be2:	d009      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006be4:	4b25      	ldr	r3, [pc, #148]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006be6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be8:	4a2b      	ldr	r2, [pc, #172]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8006bea:	4013      	ands	r3, r2
 8006bec:	0019      	movs	r1, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	695a      	ldr	r2, [r3, #20]
 8006bf2:	4b22      	ldr	r3, [pc, #136]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	4013      	ands	r3, r2
 8006c00:	d009      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c02:	4b1e      	ldr	r3, [pc, #120]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c06:	4a25      	ldr	r2, [pc, #148]	@ (8006c9c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006c08:	4013      	ands	r3, r2
 8006c0a:	0019      	movs	r1, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	699a      	ldr	r2, [r3, #24]
 8006c10:	4b1a      	ldr	r3, [pc, #104]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c12:	430a      	orrs	r2, r1
 8006c14:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	2380      	movs	r3, #128	@ 0x80
 8006c1c:	005b      	lsls	r3, r3, #1
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d009      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c22:	4b16      	ldr	r3, [pc, #88]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c26:	4a17      	ldr	r2, [pc, #92]	@ (8006c84 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	0019      	movs	r1, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	69da      	ldr	r2, [r3, #28]
 8006c30:	4b12      	ldr	r3, [pc, #72]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c32:	430a      	orrs	r2, r1
 8006c34:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2240      	movs	r2, #64	@ 0x40
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	d009      	beq.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c40:	4b0e      	ldr	r3, [pc, #56]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c44:	4a16      	ldr	r2, [pc, #88]	@ (8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006c46:	4013      	ands	r3, r2
 8006c48:	0019      	movs	r1, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c50:	430a      	orrs	r2, r1
 8006c52:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2280      	movs	r2, #128	@ 0x80
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	d009      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006c5e:	4b07      	ldr	r3, [pc, #28]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c62:	4a10      	ldr	r2, [pc, #64]	@ (8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c64:	4013      	ands	r3, r2
 8006c66:	0019      	movs	r1, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1a      	ldr	r2, [r3, #32]
 8006c6c:	4b03      	ldr	r3, [pc, #12]	@ (8006c7c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8006c72:	2300      	movs	r3, #0
}
 8006c74:	0018      	movs	r0, r3
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b006      	add	sp, #24
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	40021000 	.word	0x40021000
 8006c80:	40007000 	.word	0x40007000
 8006c84:	fffcffff 	.word	0xfffcffff
 8006c88:	fff7ffff 	.word	0xfff7ffff
 8006c8c:	00001388 	.word	0x00001388
 8006c90:	ffcfffff 	.word	0xffcfffff
 8006c94:	efffffff 	.word	0xefffffff
 8006c98:	fffff3ff 	.word	0xfffff3ff
 8006c9c:	ffffcfff 	.word	0xffffcfff
 8006ca0:	fbffffff 	.word	0xfbffffff
 8006ca4:	fff3ffff 	.word	0xfff3ffff

08006ca8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006ca8:	b5b0      	push	{r4, r5, r7, lr}
 8006caa:	b084      	sub	sp, #16
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006cb0:	230f      	movs	r3, #15
 8006cb2:	18fb      	adds	r3, r7, r3
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e088      	b.n	8006dd4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2221      	movs	r2, #33	@ 0x21
 8006cc6:	5c9b      	ldrb	r3, [r3, r2]
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d107      	bne.n	8006cde <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	2100      	movs	r1, #0
 8006cd4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	0018      	movs	r0, r3
 8006cda:	f7fb fc8d 	bl	80025f8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2221      	movs	r2, #33	@ 0x21
 8006ce2:	2102      	movs	r1, #2
 8006ce4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	2210      	movs	r2, #16
 8006cee:	4013      	ands	r3, r2
 8006cf0:	2b10      	cmp	r3, #16
 8006cf2:	d05f      	beq.n	8006db4 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	22ca      	movs	r2, #202	@ 0xca
 8006cfa:	625a      	str	r2, [r3, #36]	@ 0x24
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2253      	movs	r2, #83	@ 0x53
 8006d02:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8006d04:	250f      	movs	r5, #15
 8006d06:	197c      	adds	r4, r7, r5
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f000 f93e 	bl	8006f8c <RTC_EnterInitMode>
 8006d10:	0003      	movs	r3, r0
 8006d12:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8006d14:	0028      	movs	r0, r5
 8006d16:	183b      	adds	r3, r7, r0
 8006d18:	781b      	ldrb	r3, [r3, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d12c      	bne.n	8006d78 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	689a      	ldr	r2, [r3, #8]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	492c      	ldr	r1, [pc, #176]	@ (8006ddc <HAL_RTC_Init+0x134>)
 8006d2a:	400a      	ands	r2, r1
 8006d2c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	6899      	ldr	r1, [r3, #8]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	431a      	orrs	r2, r3
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	68d2      	ldr	r2, [r2, #12]
 8006d54:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6919      	ldr	r1, [r3, #16]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	041a      	lsls	r2, r3, #16
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	430a      	orrs	r2, r1
 8006d68:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006d6a:	183c      	adds	r4, r7, r0
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	0018      	movs	r0, r3
 8006d70:	f000 f950 	bl	8007014 <RTC_ExitInitMode>
 8006d74:	0003      	movs	r3, r0
 8006d76:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8006d78:	230f      	movs	r3, #15
 8006d7a:	18fb      	adds	r3, r7, r3
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d113      	bne.n	8006daa <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2103      	movs	r1, #3
 8006d8e:	438a      	bics	r2, r1
 8006d90:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	69da      	ldr	r2, [r3, #28]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	431a      	orrs	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	430a      	orrs	r2, r1
 8006da8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	22ff      	movs	r2, #255	@ 0xff
 8006db0:	625a      	str	r2, [r3, #36]	@ 0x24
 8006db2:	e003      	b.n	8006dbc <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8006db4:	230f      	movs	r3, #15
 8006db6:	18fb      	adds	r3, r7, r3
 8006db8:	2200      	movs	r2, #0
 8006dba:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8006dbc:	230f      	movs	r3, #15
 8006dbe:	18fb      	adds	r3, r7, r3
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2221      	movs	r2, #33	@ 0x21
 8006dca:	2101      	movs	r1, #1
 8006dcc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006dce:	230f      	movs	r3, #15
 8006dd0:	18fb      	adds	r3, r7, r3
 8006dd2:	781b      	ldrb	r3, [r3, #0]
}
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	b004      	add	sp, #16
 8006dda:	bdb0      	pop	{r4, r5, r7, pc}
 8006ddc:	ff8fffbf 	.word	0xff8fffbf

08006de0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	045b      	lsls	r3, r3, #17
 8006e02:	0c5a      	lsrs	r2, r3, #17
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a22      	ldr	r2, [pc, #136]	@ (8006e98 <HAL_RTC_GetTime+0xb8>)
 8006e10:	4013      	ands	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	0c1b      	lsrs	r3, r3, #16
 8006e18:	b2db      	uxtb	r3, r3
 8006e1a:	223f      	movs	r2, #63	@ 0x3f
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	b2da      	uxtb	r2, r3
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	0a1b      	lsrs	r3, r3, #8
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	227f      	movs	r2, #127	@ 0x7f
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	227f      	movs	r2, #127	@ 0x7f
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	b2da      	uxtb	r2, r3
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	0d9b      	lsrs	r3, r3, #22
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2201      	movs	r2, #1
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d11a      	bne.n	8006e8e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	0018      	movs	r0, r3
 8006e5e:	f000 f903 	bl	8007068 <RTC_Bcd2ToByte>
 8006e62:	0003      	movs	r3, r0
 8006e64:	001a      	movs	r2, r3
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	785b      	ldrb	r3, [r3, #1]
 8006e6e:	0018      	movs	r0, r3
 8006e70:	f000 f8fa 	bl	8007068 <RTC_Bcd2ToByte>
 8006e74:	0003      	movs	r3, r0
 8006e76:	001a      	movs	r2, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	789b      	ldrb	r3, [r3, #2]
 8006e80:	0018      	movs	r0, r3
 8006e82:	f000 f8f1 	bl	8007068 <RTC_Bcd2ToByte>
 8006e86:	0003      	movs	r3, r0
 8006e88:	001a      	movs	r2, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	0018      	movs	r0, r3
 8006e92:	46bd      	mov	sp, r7
 8006e94:	b006      	add	sp, #24
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	007f7f7f 	.word	0x007f7f7f

08006e9c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b086      	sub	sp, #24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	4a21      	ldr	r2, [pc, #132]	@ (8006f38 <HAL_RTC_GetDate+0x9c>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	0c1b      	lsrs	r3, r3, #16
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	0a1b      	lsrs	r3, r3, #8
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	221f      	movs	r2, #31
 8006eca:	4013      	ands	r3, r2
 8006ecc:	b2da      	uxtb	r2, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	223f      	movs	r2, #63	@ 0x3f
 8006ed8:	4013      	ands	r3, r2
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	0b5b      	lsrs	r3, r3, #13
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2207      	movs	r2, #7
 8006ee8:	4013      	ands	r3, r2
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d11a      	bne.n	8006f2c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	78db      	ldrb	r3, [r3, #3]
 8006efa:	0018      	movs	r0, r3
 8006efc:	f000 f8b4 	bl	8007068 <RTC_Bcd2ToByte>
 8006f00:	0003      	movs	r3, r0
 8006f02:	001a      	movs	r2, r3
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	785b      	ldrb	r3, [r3, #1]
 8006f0c:	0018      	movs	r0, r3
 8006f0e:	f000 f8ab 	bl	8007068 <RTC_Bcd2ToByte>
 8006f12:	0003      	movs	r3, r0
 8006f14:	001a      	movs	r2, r3
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	789b      	ldrb	r3, [r3, #2]
 8006f1e:	0018      	movs	r0, r3
 8006f20:	f000 f8a2 	bl	8007068 <RTC_Bcd2ToByte>
 8006f24:	0003      	movs	r3, r0
 8006f26:	001a      	movs	r2, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	0018      	movs	r0, r3
 8006f30:	46bd      	mov	sp, r7
 8006f32:	b006      	add	sp, #24
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	46c0      	nop			@ (mov r8, r8)
 8006f38:	00ffff3f 	.word	0x00ffff3f

08006f3c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f44:	2300      	movs	r3, #0
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a0e      	ldr	r2, [pc, #56]	@ (8006f88 <HAL_RTC_WaitForSynchro+0x4c>)
 8006f4e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f50:	f7fc fdcc 	bl	8003aec <HAL_GetTick>
 8006f54:	0003      	movs	r3, r0
 8006f56:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f58:	e00a      	b.n	8006f70 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006f5a:	f7fc fdc7 	bl	8003aec <HAL_GetTick>
 8006f5e:	0002      	movs	r2, r0
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	1ad2      	subs	r2, r2, r3
 8006f64:	23fa      	movs	r3, #250	@ 0xfa
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d901      	bls.n	8006f70 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006f6c:	2303      	movs	r3, #3
 8006f6e:	e006      	b.n	8006f7e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	2220      	movs	r2, #32
 8006f78:	4013      	ands	r3, r2
 8006f7a:	d0ee      	beq.n	8006f5a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	0018      	movs	r0, r3
 8006f80:	46bd      	mov	sp, r7
 8006f82:	b004      	add	sp, #16
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	46c0      	nop			@ (mov r8, r8)
 8006f88:	0001ff5f 	.word	0x0001ff5f

08006f8c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f94:	2300      	movs	r3, #0
 8006f96:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006f98:	230f      	movs	r3, #15
 8006f9a:	18fb      	adds	r3, r7, r3
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	2240      	movs	r2, #64	@ 0x40
 8006fa8:	4013      	ands	r3, r2
 8006faa:	d12c      	bne.n	8007006 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2180      	movs	r1, #128	@ 0x80
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006fbc:	f7fc fd96 	bl	8003aec <HAL_GetTick>
 8006fc0:	0003      	movs	r3, r0
 8006fc2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006fc4:	e014      	b.n	8006ff0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fc6:	f7fc fd91 	bl	8003aec <HAL_GetTick>
 8006fca:	0002      	movs	r2, r0
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	1ad2      	subs	r2, r2, r3
 8006fd0:	200f      	movs	r0, #15
 8006fd2:	183b      	adds	r3, r7, r0
 8006fd4:	1839      	adds	r1, r7, r0
 8006fd6:	7809      	ldrb	r1, [r1, #0]
 8006fd8:	7019      	strb	r1, [r3, #0]
 8006fda:	23fa      	movs	r3, #250	@ 0xfa
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d906      	bls.n	8006ff0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2221      	movs	r2, #33	@ 0x21
 8006fe6:	2104      	movs	r1, #4
 8006fe8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8006fea:	183b      	adds	r3, r7, r0
 8006fec:	2201      	movs	r2, #1
 8006fee:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	2240      	movs	r2, #64	@ 0x40
 8006ff8:	4013      	ands	r3, r2
 8006ffa:	d104      	bne.n	8007006 <RTC_EnterInitMode+0x7a>
 8006ffc:	230f      	movs	r3, #15
 8006ffe:	18fb      	adds	r3, r7, r3
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b01      	cmp	r3, #1
 8007004:	d1df      	bne.n	8006fc6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8007006:	230f      	movs	r3, #15
 8007008:	18fb      	adds	r3, r7, r3
 800700a:	781b      	ldrb	r3, [r3, #0]
}
 800700c:	0018      	movs	r0, r3
 800700e:	46bd      	mov	sp, r7
 8007010:	b004      	add	sp, #16
 8007012:	bd80      	pop	{r7, pc}

08007014 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007014:	b590      	push	{r4, r7, lr}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800701c:	240f      	movs	r4, #15
 800701e:	193b      	adds	r3, r7, r4
 8007020:	2200      	movs	r2, #0
 8007022:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2180      	movs	r1, #128	@ 0x80
 8007030:	438a      	bics	r2, r1
 8007032:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2220      	movs	r2, #32
 800703c:	4013      	ands	r3, r2
 800703e:	d10c      	bne.n	800705a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	0018      	movs	r0, r3
 8007044:	f7ff ff7a 	bl	8006f3c <HAL_RTC_WaitForSynchro>
 8007048:	1e03      	subs	r3, r0, #0
 800704a:	d006      	beq.n	800705a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2221      	movs	r2, #33	@ 0x21
 8007050:	2104      	movs	r1, #4
 8007052:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8007054:	193b      	adds	r3, r7, r4
 8007056:	2201      	movs	r2, #1
 8007058:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800705a:	230f      	movs	r3, #15
 800705c:	18fb      	adds	r3, r7, r3
 800705e:	781b      	ldrb	r3, [r3, #0]
}
 8007060:	0018      	movs	r0, r3
 8007062:	46bd      	mov	sp, r7
 8007064:	b005      	add	sp, #20
 8007066:	bd90      	pop	{r4, r7, pc}

08007068 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	0002      	movs	r2, r0
 8007070:	1dfb      	adds	r3, r7, #7
 8007072:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8007078:	1dfb      	adds	r3, r7, #7
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	091b      	lsrs	r3, r3, #4
 800707e:	b2db      	uxtb	r3, r3
 8007080:	001a      	movs	r2, r3
 8007082:	0013      	movs	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	189b      	adds	r3, r3, r2
 8007088:	005b      	lsls	r3, r3, #1
 800708a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	b2da      	uxtb	r2, r3
 8007090:	1dfb      	adds	r3, r7, #7
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	210f      	movs	r1, #15
 8007096:	400b      	ands	r3, r1
 8007098:	b2db      	uxtb	r3, r3
 800709a:	18d3      	adds	r3, r2, r3
 800709c:	b2db      	uxtb	r3, r3
}
 800709e:	0018      	movs	r0, r3
 80070a0:	46bd      	mov	sp, r7
 80070a2:	b004      	add	sp, #16
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 80070b4:	4b64      	ldr	r3, [pc, #400]	@ (8007248 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	22fa      	movs	r2, #250	@ 0xfa
 80070ba:	01d1      	lsls	r1, r2, #7
 80070bc:	0018      	movs	r0, r3
 80070be:	f7f9 f835 	bl	800012c <__udivsi3>
 80070c2:	0003      	movs	r3, r0
 80070c4:	001a      	movs	r2, r3
 80070c6:	0013      	movs	r3, r2
 80070c8:	015b      	lsls	r3, r3, #5
 80070ca:	1a9b      	subs	r3, r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	189b      	adds	r3, r3, r2
 80070d0:	00db      	lsls	r3, r3, #3
 80070d2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2220      	movs	r2, #32
 80070d8:	5c9b      	ldrb	r3, [r3, r2]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d101      	bne.n	80070e2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80070de:	2302      	movs	r3, #2
 80070e0:	e0ad      	b.n	800723e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2220      	movs	r2, #32
 80070e6:	2101      	movs	r1, #1
 80070e8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2221      	movs	r2, #33	@ 0x21
 80070ee:	2102      	movs	r1, #2
 80070f0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	22ca      	movs	r2, #202	@ 0xca
 80070f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2253      	movs	r2, #83	@ 0x53
 8007100:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	2380      	movs	r3, #128	@ 0x80
 800710a:	00db      	lsls	r3, r3, #3
 800710c:	4013      	ands	r3, r2
 800710e:	d019      	beq.n	8007144 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	3b01      	subs	r3, #1
 8007114:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d10d      	bne.n	8007138 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	22ff      	movs	r2, #255	@ 0xff
 8007122:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2221      	movs	r2, #33	@ 0x21
 8007128:	2103      	movs	r1, #3
 800712a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2220      	movs	r2, #32
 8007130:	2100      	movs	r1, #0
 8007132:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e082      	b.n	800723e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	2204      	movs	r2, #4
 8007140:	4013      	ands	r3, r2
 8007142:	d1e5      	bne.n	8007110 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	493f      	ldr	r1, [pc, #252]	@ (800724c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8007150:	400a      	ands	r2, r1
 8007152:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	22ff      	movs	r2, #255	@ 0xff
 800715c:	401a      	ands	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	493b      	ldr	r1, [pc, #236]	@ (8007250 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8007164:	430a      	orrs	r2, r1
 8007166:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8007168:	4b37      	ldr	r3, [pc, #220]	@ (8007248 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	22fa      	movs	r2, #250	@ 0xfa
 800716e:	01d1      	lsls	r1, r2, #7
 8007170:	0018      	movs	r0, r3
 8007172:	f7f8 ffdb 	bl	800012c <__udivsi3>
 8007176:	0003      	movs	r3, r0
 8007178:	001a      	movs	r2, r3
 800717a:	0013      	movs	r3, r2
 800717c:	015b      	lsls	r3, r3, #5
 800717e:	1a9b      	subs	r3, r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	189b      	adds	r3, r3, r2
 8007184:	00db      	lsls	r3, r3, #3
 8007186:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	3b01      	subs	r3, #1
 800718c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10d      	bne.n	80071b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	22ff      	movs	r2, #255	@ 0xff
 800719a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2221      	movs	r2, #33	@ 0x21
 80071a0:	2103      	movs	r1, #3
 80071a2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2220      	movs	r2, #32
 80071a8:	2100      	movs	r1, #0
 80071aa:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80071ac:	2303      	movs	r3, #3
 80071ae:	e046      	b.n	800723e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	2204      	movs	r2, #4
 80071b8:	4013      	ands	r3, r2
 80071ba:	d0e5      	beq.n	8007188 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	689a      	ldr	r2, [r3, #8]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2107      	movs	r1, #7
 80071c8:	438a      	bics	r2, r1
 80071ca:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6899      	ldr	r1, [r3, #8]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	430a      	orrs	r2, r1
 80071da:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68ba      	ldr	r2, [r7, #8]
 80071e2:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80071e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007254 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	4b1a      	ldr	r3, [pc, #104]	@ (8007254 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80071ea:	2180      	movs	r1, #128	@ 0x80
 80071ec:	0349      	lsls	r1, r1, #13
 80071ee:	430a      	orrs	r2, r1
 80071f0:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80071f2:	4b18      	ldr	r3, [pc, #96]	@ (8007254 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80071f4:	689a      	ldr	r2, [r3, #8]
 80071f6:	4b17      	ldr	r3, [pc, #92]	@ (8007254 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80071f8:	2180      	movs	r1, #128	@ 0x80
 80071fa:	0349      	lsls	r1, r1, #13
 80071fc:	430a      	orrs	r2, r1
 80071fe:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689a      	ldr	r2, [r3, #8]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2180      	movs	r1, #128	@ 0x80
 800720c:	01c9      	lsls	r1, r1, #7
 800720e:	430a      	orrs	r2, r1
 8007210:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2180      	movs	r1, #128	@ 0x80
 800721e:	00c9      	lsls	r1, r1, #3
 8007220:	430a      	orrs	r2, r1
 8007222:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	22ff      	movs	r2, #255	@ 0xff
 800722a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2221      	movs	r2, #33	@ 0x21
 8007230:	2101      	movs	r1, #1
 8007232:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2220      	movs	r2, #32
 8007238:	2100      	movs	r1, #0
 800723a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	0018      	movs	r0, r3
 8007240:	46bd      	mov	sp, r7
 8007242:	b006      	add	sp, #24
 8007244:	bd80      	pop	{r7, pc}
 8007246:	46c0      	nop			@ (mov r8, r8)
 8007248:	20000000 	.word	0x20000000
 800724c:	fffffbff 	.word	0xfffffbff
 8007250:	fffffb7f 	.word	0xfffffb7f
 8007254:	40010400 	.word	0x40010400

08007258 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b084      	sub	sp, #16
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007260:	2300      	movs	r3, #0
 8007262:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2220      	movs	r2, #32
 8007268:	5c9b      	ldrb	r3, [r3, r2]
 800726a:	2b01      	cmp	r3, #1
 800726c:	d101      	bne.n	8007272 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 800726e:	2302      	movs	r3, #2
 8007270:	e04e      	b.n	8007310 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	2101      	movs	r1, #1
 8007278:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2221      	movs	r2, #33	@ 0x21
 800727e:	2102      	movs	r1, #2
 8007280:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	22ca      	movs	r2, #202	@ 0xca
 8007288:	625a      	str	r2, [r3, #36]	@ 0x24
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2253      	movs	r2, #83	@ 0x53
 8007290:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689a      	ldr	r2, [r3, #8]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	491e      	ldr	r1, [pc, #120]	@ (8007318 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 800729e:	400a      	ands	r2, r1
 80072a0:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	491b      	ldr	r1, [pc, #108]	@ (800731c <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 80072ae:	400a      	ands	r2, r1
 80072b0:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072b2:	f7fc fc1b 	bl	8003aec <HAL_GetTick>
 80072b6:	0003      	movs	r3, r0
 80072b8:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80072ba:	e016      	b.n	80072ea <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072bc:	f7fc fc16 	bl	8003aec <HAL_GetTick>
 80072c0:	0002      	movs	r2, r0
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	1ad2      	subs	r2, r2, r3
 80072c6:	23fa      	movs	r3, #250	@ 0xfa
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d90d      	bls.n	80072ea <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	22ff      	movs	r2, #255	@ 0xff
 80072d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2221      	movs	r2, #33	@ 0x21
 80072da:	2103      	movs	r1, #3
 80072dc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	2100      	movs	r1, #0
 80072e4:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e012      	b.n	8007310 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	2204      	movs	r2, #4
 80072f2:	4013      	ands	r3, r2
 80072f4:	d0e2      	beq.n	80072bc <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	22ff      	movs	r2, #255	@ 0xff
 80072fc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2221      	movs	r2, #33	@ 0x21
 8007302:	2101      	movs	r1, #1
 8007304:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	2100      	movs	r1, #0
 800730c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800730e:	2300      	movs	r3, #0
}
 8007310:	0018      	movs	r0, r3
 8007312:	46bd      	mov	sp, r7
 8007314:	b004      	add	sp, #16
 8007316:	bd80      	pop	{r7, pc}
 8007318:	fffffbff 	.word	0xfffffbff
 800731c:	ffffbfff 	.word	0xffffbfff

08007320 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8007328:	4b13      	ldr	r3, [pc, #76]	@ (8007378 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 800732a:	2280      	movs	r2, #128	@ 0x80
 800732c:	0352      	lsls	r2, r2, #13
 800732e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689a      	ldr	r2, [r3, #8]
 8007336:	2380      	movs	r3, #128	@ 0x80
 8007338:	01db      	lsls	r3, r3, #7
 800733a:	4013      	ands	r3, r2
 800733c:	d014      	beq.n	8007368 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	2380      	movs	r3, #128	@ 0x80
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	4013      	ands	r3, r2
 800734a:	d00d      	beq.n	8007368 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	22ff      	movs	r2, #255	@ 0xff
 8007354:	401a      	ands	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4908      	ldr	r1, [pc, #32]	@ (800737c <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 800735c:	430a      	orrs	r2, r1
 800735e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	0018      	movs	r0, r3
 8007364:	f7fc f9f0 	bl	8003748 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2221      	movs	r2, #33	@ 0x21
 800736c:	2101      	movs	r1, #1
 800736e:	5499      	strb	r1, [r3, r2]
}
 8007370:	46c0      	nop			@ (mov r8, r8)
 8007372:	46bd      	mov	sp, r7
 8007374:	b002      	add	sp, #8
 8007376:	bd80      	pop	{r7, pc}
 8007378:	40010400 	.word	0x40010400
 800737c:	fffffb7f 	.word	0xfffffb7f

08007380 <HAL_RTCEx_SetSmoothCalib>:
  *         must be equal to SMOOTHCALIB_PLUSPULSES_RESET and the field
  *         SmoothCalibMinusPulsesValue must be equal to 0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSmoothCalib(RTC_HandleTypeDef *hrtc, uint32_t SmoothCalibPeriod, uint32_t SmoothCalibPlusPulses, uint32_t SmoothCalibMinusPulsesValue)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
 800738c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_SMOOTH_CALIB_PERIOD(SmoothCalibPeriod));
  assert_param(IS_RTC_SMOOTH_CALIB_PLUS(SmoothCalibPlusPulses));
  assert_param(IS_RTC_SMOOTH_CALIB_MINUS(SmoothCalibMinusPulsesValue));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2220      	movs	r2, #32
 8007396:	5c9b      	ldrb	r3, [r3, r2]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d101      	bne.n	80073a0 <HAL_RTCEx_SetSmoothCalib+0x20>
 800739c:	2302      	movs	r3, #2
 800739e:	e04f      	b.n	8007440 <HAL_RTCEx_SetSmoothCalib+0xc0>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2220      	movs	r2, #32
 80073a4:	2101      	movs	r1, #1
 80073a6:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2221      	movs	r2, #33	@ 0x21
 80073ac:	2102      	movs	r1, #2
 80073ae:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	22ca      	movs	r2, #202	@ 0xca
 80073b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2253      	movs	r2, #83	@ 0x53
 80073be:	625a      	str	r2, [r3, #36]	@ 0x24

  /* check if a calibration is pending*/
  if ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	2380      	movs	r3, #128	@ 0x80
 80073c8:	025b      	lsls	r3, r3, #9
 80073ca:	4013      	ands	r3, r2
 80073cc:	d022      	beq.n	8007414 <HAL_RTCEx_SetSmoothCalib+0x94>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80073ce:	f7fc fb8d 	bl	8003aec <HAL_GetTick>
 80073d2:	0003      	movs	r3, r0
 80073d4:	617b      	str	r3, [r7, #20]

    /* check if a calibration is pending*/
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 80073d6:	e016      	b.n	8007406 <HAL_RTCEx_SetSmoothCalib+0x86>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80073d8:	f7fc fb88 	bl	8003aec <HAL_GetTick>
 80073dc:	0002      	movs	r2, r0
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	1ad2      	subs	r2, r2, r3
 80073e2:	23fa      	movs	r3, #250	@ 0xfa
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d90d      	bls.n	8007406 <HAL_RTCEx_SetSmoothCalib+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	22ff      	movs	r2, #255	@ 0xff
 80073f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2221      	movs	r2, #33	@ 0x21
 80073f6:	2103      	movs	r1, #3
 80073f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2220      	movs	r2, #32
 80073fe:	2100      	movs	r1, #0
 8007400:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e01c      	b.n	8007440 <HAL_RTCEx_SetSmoothCalib+0xc0>
    while ((hrtc->Instance->ISR & RTC_ISR_RECALPF) != 0U)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	2380      	movs	r3, #128	@ 0x80
 800740e:	025b      	lsls	r3, r3, #9
 8007410:	4013      	ands	r3, r2
 8007412:	d1e1      	bne.n	80073d8 <HAL_RTCEx_SetSmoothCalib+0x58>
      }
    }
  }

  /* Configure the Smooth calibration settings */
  hrtc->Instance->CALR = (uint32_t)((uint32_t)SmoothCalibPeriod     | \
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	431a      	orrs	r2, r3
 800741a:	0011      	movs	r1, r2
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	430a      	orrs	r2, r1
 8007424:	63da      	str	r2, [r3, #60]	@ 0x3c
                                    (uint32_t)SmoothCalibPlusPulses | \
                                    (uint32_t)SmoothCalibMinusPulsesValue);

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	22ff      	movs	r2, #255	@ 0xff
 800742c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2221      	movs	r2, #33	@ 0x21
 8007432:	2101      	movs	r1, #1
 8007434:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2220      	movs	r2, #32
 800743a:	2100      	movs	r1, #0
 800743c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	0018      	movs	r0, r3
 8007442:	46bd      	mov	sp, r7
 8007444:	b006      	add	sp, #24
 8007446:	bd80      	pop	{r7, pc}

08007448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e044      	b.n	80074e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800745e:	2b00      	cmp	r3, #0
 8007460:	d107      	bne.n	8007472 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2278      	movs	r2, #120	@ 0x78
 8007466:	2100      	movs	r1, #0
 8007468:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	0018      	movs	r0, r3
 800746e:	f7fb f815 	bl	800249c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2224      	movs	r2, #36	@ 0x24
 8007476:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2101      	movs	r1, #1
 8007484:	438a      	bics	r2, r1
 8007486:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	0018      	movs	r0, r3
 8007494:	f000 fc8e 	bl	8007db4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	0018      	movs	r0, r3
 800749c:	f000 f9ec 	bl	8007878 <UART_SetConfig>
 80074a0:	0003      	movs	r3, r0
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d101      	bne.n	80074aa <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e01c      	b.n	80074e4 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	490d      	ldr	r1, [pc, #52]	@ (80074ec <HAL_UART_Init+0xa4>)
 80074b6:	400a      	ands	r2, r1
 80074b8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689a      	ldr	r2, [r3, #8]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	212a      	movs	r1, #42	@ 0x2a
 80074c6:	438a      	bics	r2, r1
 80074c8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2101      	movs	r1, #1
 80074d6:	430a      	orrs	r2, r1
 80074d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	0018      	movs	r0, r3
 80074de:	f000 fd1d 	bl	8007f1c <UART_CheckIdleState>
 80074e2:	0003      	movs	r3, r0
}
 80074e4:	0018      	movs	r0, r3
 80074e6:	46bd      	mov	sp, r7
 80074e8:	b002      	add	sp, #8
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	ffffb7ff 	.word	0xffffb7ff

080074f0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	e030      	b.n	8007564 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2224      	movs	r2, #36	@ 0x24
 8007506:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2101      	movs	r1, #1
 8007514:	438a      	bics	r2, r1
 8007516:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2200      	movs	r2, #0
 800751e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2200      	movs	r2, #0
 8007526:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2200      	movs	r2, #0
 800752e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	0018      	movs	r0, r3
 8007534:	f7fb f828 	bl	8002588 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2284      	movs	r2, #132	@ 0x84
 800753c:	2100      	movs	r1, #0
 800753e:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2280      	movs	r2, #128	@ 0x80
 800754a:	2100      	movs	r1, #0
 800754c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2278      	movs	r2, #120	@ 0x78
 800755e:	2100      	movs	r1, #0
 8007560:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	0018      	movs	r0, r3
 8007566:	46bd      	mov	sp, r7
 8007568:	b002      	add	sp, #8
 800756a:	bd80      	pop	{r7, pc}

0800756c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08a      	sub	sp, #40	@ 0x28
 8007570:	af02      	add	r7, sp, #8
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	1dbb      	adds	r3, r7, #6
 800757a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007580:	2b20      	cmp	r3, #32
 8007582:	d000      	beq.n	8007586 <HAL_UART_Transmit+0x1a>
 8007584:	e08c      	b.n	80076a0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d003      	beq.n	8007594 <HAL_UART_Transmit+0x28>
 800758c:	1dbb      	adds	r3, r7, #6
 800758e:	881b      	ldrh	r3, [r3, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d101      	bne.n	8007598 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e084      	b.n	80076a2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	2380      	movs	r3, #128	@ 0x80
 800759e:	015b      	lsls	r3, r3, #5
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d109      	bne.n	80075b8 <HAL_UART_Transmit+0x4c>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d105      	bne.n	80075b8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	2201      	movs	r2, #1
 80075b0:	4013      	ands	r3, r2
 80075b2:	d001      	beq.n	80075b8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e074      	b.n	80076a2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2284      	movs	r2, #132	@ 0x84
 80075bc:	2100      	movs	r1, #0
 80075be:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2221      	movs	r2, #33	@ 0x21
 80075c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075c6:	f7fc fa91 	bl	8003aec <HAL_GetTick>
 80075ca:	0003      	movs	r3, r0
 80075cc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1dba      	adds	r2, r7, #6
 80075d2:	2150      	movs	r1, #80	@ 0x50
 80075d4:	8812      	ldrh	r2, [r2, #0]
 80075d6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	1dba      	adds	r2, r7, #6
 80075dc:	2152      	movs	r1, #82	@ 0x52
 80075de:	8812      	ldrh	r2, [r2, #0]
 80075e0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	689a      	ldr	r2, [r3, #8]
 80075e6:	2380      	movs	r3, #128	@ 0x80
 80075e8:	015b      	lsls	r3, r3, #5
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d108      	bne.n	8007600 <HAL_UART_Transmit+0x94>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d104      	bne.n	8007600 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80075f6:	2300      	movs	r3, #0
 80075f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	61bb      	str	r3, [r7, #24]
 80075fe:	e003      	b.n	8007608 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007604:	2300      	movs	r3, #0
 8007606:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007608:	e02f      	b.n	800766a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	68f8      	ldr	r0, [r7, #12]
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	0013      	movs	r3, r2
 8007614:	2200      	movs	r2, #0
 8007616:	2180      	movs	r1, #128	@ 0x80
 8007618:	f000 fd28 	bl	800806c <UART_WaitOnFlagUntilTimeout>
 800761c:	1e03      	subs	r3, r0, #0
 800761e:	d004      	beq.n	800762a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2220      	movs	r2, #32
 8007624:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e03b      	b.n	80076a2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10b      	bne.n	8007648 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	881b      	ldrh	r3, [r3, #0]
 8007634:	001a      	movs	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	05d2      	lsls	r2, r2, #23
 800763c:	0dd2      	lsrs	r2, r2, #23
 800763e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007640:	69bb      	ldr	r3, [r7, #24]
 8007642:	3302      	adds	r3, #2
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	e007      	b.n	8007658 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	781a      	ldrb	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	3301      	adds	r3, #1
 8007656:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2252      	movs	r2, #82	@ 0x52
 800765c:	5a9b      	ldrh	r3, [r3, r2]
 800765e:	b29b      	uxth	r3, r3
 8007660:	3b01      	subs	r3, #1
 8007662:	b299      	uxth	r1, r3
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	2252      	movs	r2, #82	@ 0x52
 8007668:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2252      	movs	r2, #82	@ 0x52
 800766e:	5a9b      	ldrh	r3, [r3, r2]
 8007670:	b29b      	uxth	r3, r3
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1c9      	bne.n	800760a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007676:	697a      	ldr	r2, [r7, #20]
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	0013      	movs	r3, r2
 8007680:	2200      	movs	r2, #0
 8007682:	2140      	movs	r1, #64	@ 0x40
 8007684:	f000 fcf2 	bl	800806c <UART_WaitOnFlagUntilTimeout>
 8007688:	1e03      	subs	r3, r0, #0
 800768a:	d004      	beq.n	8007696 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2220      	movs	r2, #32
 8007690:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8007692:	2303      	movs	r3, #3
 8007694:	e005      	b.n	80076a2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2220      	movs	r2, #32
 800769a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800769c:	2300      	movs	r3, #0
 800769e:	e000      	b.n	80076a2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80076a0:	2302      	movs	r3, #2
  }
}
 80076a2:	0018      	movs	r0, r3
 80076a4:	46bd      	mov	sp, r7
 80076a6:	b008      	add	sp, #32
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08a      	sub	sp, #40	@ 0x28
 80076b0:	af02      	add	r7, sp, #8
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	1dbb      	adds	r3, r7, #6
 80076ba:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2280      	movs	r2, #128	@ 0x80
 80076c0:	589b      	ldr	r3, [r3, r2]
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	d000      	beq.n	80076c8 <HAL_UART_Receive+0x1c>
 80076c6:	e0d0      	b.n	800786a <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_UART_Receive+0x2a>
 80076ce:	1dbb      	adds	r3, r7, #6
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e0c8      	b.n	800786c <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	689a      	ldr	r2, [r3, #8]
 80076de:	2380      	movs	r3, #128	@ 0x80
 80076e0:	015b      	lsls	r3, r3, #5
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d109      	bne.n	80076fa <HAL_UART_Receive+0x4e>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d105      	bne.n	80076fa <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2201      	movs	r2, #1
 80076f2:	4013      	ands	r3, r2
 80076f4:	d001      	beq.n	80076fa <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e0b8      	b.n	800786c <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2284      	movs	r2, #132	@ 0x84
 80076fe:	2100      	movs	r1, #0
 8007700:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2280      	movs	r2, #128	@ 0x80
 8007706:	2122      	movs	r1, #34	@ 0x22
 8007708:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007710:	f7fc f9ec 	bl	8003aec <HAL_GetTick>
 8007714:	0003      	movs	r3, r0
 8007716:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	1dba      	adds	r2, r7, #6
 800771c:	2158      	movs	r1, #88	@ 0x58
 800771e:	8812      	ldrh	r2, [r2, #0]
 8007720:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	1dba      	adds	r2, r7, #6
 8007726:	215a      	movs	r1, #90	@ 0x5a
 8007728:	8812      	ldrh	r2, [r2, #0]
 800772a:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	689a      	ldr	r2, [r3, #8]
 8007730:	2380      	movs	r3, #128	@ 0x80
 8007732:	015b      	lsls	r3, r3, #5
 8007734:	429a      	cmp	r2, r3
 8007736:	d10d      	bne.n	8007754 <HAL_UART_Receive+0xa8>
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d104      	bne.n	800774a <HAL_UART_Receive+0x9e>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	225c      	movs	r2, #92	@ 0x5c
 8007744:	494b      	ldr	r1, [pc, #300]	@ (8007874 <HAL_UART_Receive+0x1c8>)
 8007746:	5299      	strh	r1, [r3, r2]
 8007748:	e02e      	b.n	80077a8 <HAL_UART_Receive+0xfc>
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	225c      	movs	r2, #92	@ 0x5c
 800774e:	21ff      	movs	r1, #255	@ 0xff
 8007750:	5299      	strh	r1, [r3, r2]
 8007752:	e029      	b.n	80077a8 <HAL_UART_Receive+0xfc>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10d      	bne.n	8007778 <HAL_UART_Receive+0xcc>
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d104      	bne.n	800776e <HAL_UART_Receive+0xc2>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	225c      	movs	r2, #92	@ 0x5c
 8007768:	21ff      	movs	r1, #255	@ 0xff
 800776a:	5299      	strh	r1, [r3, r2]
 800776c:	e01c      	b.n	80077a8 <HAL_UART_Receive+0xfc>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	225c      	movs	r2, #92	@ 0x5c
 8007772:	217f      	movs	r1, #127	@ 0x7f
 8007774:	5299      	strh	r1, [r3, r2]
 8007776:	e017      	b.n	80077a8 <HAL_UART_Receive+0xfc>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	2380      	movs	r3, #128	@ 0x80
 800777e:	055b      	lsls	r3, r3, #21
 8007780:	429a      	cmp	r2, r3
 8007782:	d10d      	bne.n	80077a0 <HAL_UART_Receive+0xf4>
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d104      	bne.n	8007796 <HAL_UART_Receive+0xea>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	225c      	movs	r2, #92	@ 0x5c
 8007790:	217f      	movs	r1, #127	@ 0x7f
 8007792:	5299      	strh	r1, [r3, r2]
 8007794:	e008      	b.n	80077a8 <HAL_UART_Receive+0xfc>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	225c      	movs	r2, #92	@ 0x5c
 800779a:	213f      	movs	r1, #63	@ 0x3f
 800779c:	5299      	strh	r1, [r3, r2]
 800779e:	e003      	b.n	80077a8 <HAL_UART_Receive+0xfc>
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	225c      	movs	r2, #92	@ 0x5c
 80077a4:	2100      	movs	r1, #0
 80077a6:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80077a8:	2312      	movs	r3, #18
 80077aa:	18fb      	adds	r3, r7, r3
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	215c      	movs	r1, #92	@ 0x5c
 80077b0:	5a52      	ldrh	r2, [r2, r1]
 80077b2:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	2380      	movs	r3, #128	@ 0x80
 80077ba:	015b      	lsls	r3, r3, #5
 80077bc:	429a      	cmp	r2, r3
 80077be:	d108      	bne.n	80077d2 <HAL_UART_Receive+0x126>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d104      	bne.n	80077d2 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80077c8:	2300      	movs	r3, #0
 80077ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	61bb      	str	r3, [r7, #24]
 80077d0:	e003      	b.n	80077da <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80077da:	e03a      	b.n	8007852 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	68f8      	ldr	r0, [r7, #12]
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	0013      	movs	r3, r2
 80077e6:	2200      	movs	r2, #0
 80077e8:	2120      	movs	r1, #32
 80077ea:	f000 fc3f 	bl	800806c <UART_WaitOnFlagUntilTimeout>
 80077ee:	1e03      	subs	r3, r0, #0
 80077f0:	d005      	beq.n	80077fe <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2280      	movs	r2, #128	@ 0x80
 80077f6:	2120      	movs	r1, #32
 80077f8:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e036      	b.n	800786c <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10e      	bne.n	8007822 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800780a:	b29b      	uxth	r3, r3
 800780c:	2212      	movs	r2, #18
 800780e:	18ba      	adds	r2, r7, r2
 8007810:	8812      	ldrh	r2, [r2, #0]
 8007812:	4013      	ands	r3, r2
 8007814:	b29a      	uxth	r2, r3
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	3302      	adds	r3, #2
 800781e:	61bb      	str	r3, [r7, #24]
 8007820:	e00e      	b.n	8007840 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2212      	movs	r2, #18
 800782c:	18ba      	adds	r2, r7, r2
 800782e:	8812      	ldrh	r2, [r2, #0]
 8007830:	b2d2      	uxtb	r2, r2
 8007832:	4013      	ands	r3, r2
 8007834:	b2da      	uxtb	r2, r3
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	3301      	adds	r3, #1
 800783e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	225a      	movs	r2, #90	@ 0x5a
 8007844:	5a9b      	ldrh	r3, [r3, r2]
 8007846:	b29b      	uxth	r3, r3
 8007848:	3b01      	subs	r3, #1
 800784a:	b299      	uxth	r1, r3
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	225a      	movs	r2, #90	@ 0x5a
 8007850:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	225a      	movs	r2, #90	@ 0x5a
 8007856:	5a9b      	ldrh	r3, [r3, r2]
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1be      	bne.n	80077dc <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2280      	movs	r2, #128	@ 0x80
 8007862:	2120      	movs	r1, #32
 8007864:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007866:	2300      	movs	r3, #0
 8007868:	e000      	b.n	800786c <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800786a:	2302      	movs	r3, #2
  }
}
 800786c:	0018      	movs	r0, r3
 800786e:	46bd      	mov	sp, r7
 8007870:	b008      	add	sp, #32
 8007872:	bd80      	pop	{r7, pc}
 8007874:	000001ff 	.word	0x000001ff

08007878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007878:	b5b0      	push	{r4, r5, r7, lr}
 800787a:	b08e      	sub	sp, #56	@ 0x38
 800787c:	af00      	add	r7, sp, #0
 800787e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007880:	231a      	movs	r3, #26
 8007882:	2218      	movs	r2, #24
 8007884:	189b      	adds	r3, r3, r2
 8007886:	19db      	adds	r3, r3, r7
 8007888:	2200      	movs	r2, #0
 800788a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	431a      	orrs	r2, r3
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	695b      	ldr	r3, [r3, #20]
 800789a:	431a      	orrs	r2, r3
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	4313      	orrs	r3, r2
 80078a2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4ac3      	ldr	r2, [pc, #780]	@ (8007bb8 <UART_SetConfig+0x340>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	0019      	movs	r1, r3
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078b6:	430a      	orrs	r2, r1
 80078b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	4abe      	ldr	r2, [pc, #760]	@ (8007bbc <UART_SetConfig+0x344>)
 80078c2:	4013      	ands	r3, r2
 80078c4:	0019      	movs	r1, r3
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	68da      	ldr	r2, [r3, #12]
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	430a      	orrs	r2, r1
 80078d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078d2:	69fb      	ldr	r3, [r7, #28]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4ab8      	ldr	r2, [pc, #736]	@ (8007bc0 <UART_SetConfig+0x348>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d004      	beq.n	80078ec <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	6a1b      	ldr	r3, [r3, #32]
 80078e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078e8:	4313      	orrs	r3, r2
 80078ea:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	4ab4      	ldr	r2, [pc, #720]	@ (8007bc4 <UART_SetConfig+0x34c>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	0019      	movs	r1, r3
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80078fe:	430a      	orrs	r2, r1
 8007900:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4ab0      	ldr	r2, [pc, #704]	@ (8007bc8 <UART_SetConfig+0x350>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d131      	bne.n	8007970 <UART_SetConfig+0xf8>
 800790c:	4baf      	ldr	r3, [pc, #700]	@ (8007bcc <UART_SetConfig+0x354>)
 800790e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007910:	2203      	movs	r2, #3
 8007912:	4013      	ands	r3, r2
 8007914:	2b03      	cmp	r3, #3
 8007916:	d01d      	beq.n	8007954 <UART_SetConfig+0xdc>
 8007918:	d823      	bhi.n	8007962 <UART_SetConfig+0xea>
 800791a:	2b02      	cmp	r3, #2
 800791c:	d00c      	beq.n	8007938 <UART_SetConfig+0xc0>
 800791e:	d820      	bhi.n	8007962 <UART_SetConfig+0xea>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d002      	beq.n	800792a <UART_SetConfig+0xb2>
 8007924:	2b01      	cmp	r3, #1
 8007926:	d00e      	beq.n	8007946 <UART_SetConfig+0xce>
 8007928:	e01b      	b.n	8007962 <UART_SetConfig+0xea>
 800792a:	231b      	movs	r3, #27
 800792c:	2218      	movs	r2, #24
 800792e:	189b      	adds	r3, r3, r2
 8007930:	19db      	adds	r3, r3, r7
 8007932:	2201      	movs	r2, #1
 8007934:	701a      	strb	r2, [r3, #0]
 8007936:	e0b4      	b.n	8007aa2 <UART_SetConfig+0x22a>
 8007938:	231b      	movs	r3, #27
 800793a:	2218      	movs	r2, #24
 800793c:	189b      	adds	r3, r3, r2
 800793e:	19db      	adds	r3, r3, r7
 8007940:	2202      	movs	r2, #2
 8007942:	701a      	strb	r2, [r3, #0]
 8007944:	e0ad      	b.n	8007aa2 <UART_SetConfig+0x22a>
 8007946:	231b      	movs	r3, #27
 8007948:	2218      	movs	r2, #24
 800794a:	189b      	adds	r3, r3, r2
 800794c:	19db      	adds	r3, r3, r7
 800794e:	2204      	movs	r2, #4
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	e0a6      	b.n	8007aa2 <UART_SetConfig+0x22a>
 8007954:	231b      	movs	r3, #27
 8007956:	2218      	movs	r2, #24
 8007958:	189b      	adds	r3, r3, r2
 800795a:	19db      	adds	r3, r3, r7
 800795c:	2208      	movs	r2, #8
 800795e:	701a      	strb	r2, [r3, #0]
 8007960:	e09f      	b.n	8007aa2 <UART_SetConfig+0x22a>
 8007962:	231b      	movs	r3, #27
 8007964:	2218      	movs	r2, #24
 8007966:	189b      	adds	r3, r3, r2
 8007968:	19db      	adds	r3, r3, r7
 800796a:	2210      	movs	r2, #16
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	e098      	b.n	8007aa2 <UART_SetConfig+0x22a>
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a96      	ldr	r2, [pc, #600]	@ (8007bd0 <UART_SetConfig+0x358>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d131      	bne.n	80079de <UART_SetConfig+0x166>
 800797a:	4b94      	ldr	r3, [pc, #592]	@ (8007bcc <UART_SetConfig+0x354>)
 800797c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800797e:	220c      	movs	r2, #12
 8007980:	4013      	ands	r3, r2
 8007982:	2b0c      	cmp	r3, #12
 8007984:	d01d      	beq.n	80079c2 <UART_SetConfig+0x14a>
 8007986:	d823      	bhi.n	80079d0 <UART_SetConfig+0x158>
 8007988:	2b08      	cmp	r3, #8
 800798a:	d00c      	beq.n	80079a6 <UART_SetConfig+0x12e>
 800798c:	d820      	bhi.n	80079d0 <UART_SetConfig+0x158>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <UART_SetConfig+0x120>
 8007992:	2b04      	cmp	r3, #4
 8007994:	d00e      	beq.n	80079b4 <UART_SetConfig+0x13c>
 8007996:	e01b      	b.n	80079d0 <UART_SetConfig+0x158>
 8007998:	231b      	movs	r3, #27
 800799a:	2218      	movs	r2, #24
 800799c:	189b      	adds	r3, r3, r2
 800799e:	19db      	adds	r3, r3, r7
 80079a0:	2200      	movs	r2, #0
 80079a2:	701a      	strb	r2, [r3, #0]
 80079a4:	e07d      	b.n	8007aa2 <UART_SetConfig+0x22a>
 80079a6:	231b      	movs	r3, #27
 80079a8:	2218      	movs	r2, #24
 80079aa:	189b      	adds	r3, r3, r2
 80079ac:	19db      	adds	r3, r3, r7
 80079ae:	2202      	movs	r2, #2
 80079b0:	701a      	strb	r2, [r3, #0]
 80079b2:	e076      	b.n	8007aa2 <UART_SetConfig+0x22a>
 80079b4:	231b      	movs	r3, #27
 80079b6:	2218      	movs	r2, #24
 80079b8:	189b      	adds	r3, r3, r2
 80079ba:	19db      	adds	r3, r3, r7
 80079bc:	2204      	movs	r2, #4
 80079be:	701a      	strb	r2, [r3, #0]
 80079c0:	e06f      	b.n	8007aa2 <UART_SetConfig+0x22a>
 80079c2:	231b      	movs	r3, #27
 80079c4:	2218      	movs	r2, #24
 80079c6:	189b      	adds	r3, r3, r2
 80079c8:	19db      	adds	r3, r3, r7
 80079ca:	2208      	movs	r2, #8
 80079cc:	701a      	strb	r2, [r3, #0]
 80079ce:	e068      	b.n	8007aa2 <UART_SetConfig+0x22a>
 80079d0:	231b      	movs	r3, #27
 80079d2:	2218      	movs	r2, #24
 80079d4:	189b      	adds	r3, r3, r2
 80079d6:	19db      	adds	r3, r3, r7
 80079d8:	2210      	movs	r2, #16
 80079da:	701a      	strb	r2, [r3, #0]
 80079dc:	e061      	b.n	8007aa2 <UART_SetConfig+0x22a>
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a7c      	ldr	r2, [pc, #496]	@ (8007bd4 <UART_SetConfig+0x35c>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d106      	bne.n	80079f6 <UART_SetConfig+0x17e>
 80079e8:	231b      	movs	r3, #27
 80079ea:	2218      	movs	r2, #24
 80079ec:	189b      	adds	r3, r3, r2
 80079ee:	19db      	adds	r3, r3, r7
 80079f0:	2200      	movs	r2, #0
 80079f2:	701a      	strb	r2, [r3, #0]
 80079f4:	e055      	b.n	8007aa2 <UART_SetConfig+0x22a>
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a77      	ldr	r2, [pc, #476]	@ (8007bd8 <UART_SetConfig+0x360>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d106      	bne.n	8007a0e <UART_SetConfig+0x196>
 8007a00:	231b      	movs	r3, #27
 8007a02:	2218      	movs	r2, #24
 8007a04:	189b      	adds	r3, r3, r2
 8007a06:	19db      	adds	r3, r3, r7
 8007a08:	2200      	movs	r2, #0
 8007a0a:	701a      	strb	r2, [r3, #0]
 8007a0c:	e049      	b.n	8007aa2 <UART_SetConfig+0x22a>
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a6b      	ldr	r2, [pc, #428]	@ (8007bc0 <UART_SetConfig+0x348>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d13e      	bne.n	8007a96 <UART_SetConfig+0x21e>
 8007a18:	4b6c      	ldr	r3, [pc, #432]	@ (8007bcc <UART_SetConfig+0x354>)
 8007a1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a1c:	23c0      	movs	r3, #192	@ 0xc0
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	4013      	ands	r3, r2
 8007a22:	22c0      	movs	r2, #192	@ 0xc0
 8007a24:	0112      	lsls	r2, r2, #4
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d027      	beq.n	8007a7a <UART_SetConfig+0x202>
 8007a2a:	22c0      	movs	r2, #192	@ 0xc0
 8007a2c:	0112      	lsls	r2, r2, #4
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d82a      	bhi.n	8007a88 <UART_SetConfig+0x210>
 8007a32:	2280      	movs	r2, #128	@ 0x80
 8007a34:	0112      	lsls	r2, r2, #4
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d011      	beq.n	8007a5e <UART_SetConfig+0x1e6>
 8007a3a:	2280      	movs	r2, #128	@ 0x80
 8007a3c:	0112      	lsls	r2, r2, #4
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d822      	bhi.n	8007a88 <UART_SetConfig+0x210>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d004      	beq.n	8007a50 <UART_SetConfig+0x1d8>
 8007a46:	2280      	movs	r2, #128	@ 0x80
 8007a48:	00d2      	lsls	r2, r2, #3
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d00e      	beq.n	8007a6c <UART_SetConfig+0x1f4>
 8007a4e:	e01b      	b.n	8007a88 <UART_SetConfig+0x210>
 8007a50:	231b      	movs	r3, #27
 8007a52:	2218      	movs	r2, #24
 8007a54:	189b      	adds	r3, r3, r2
 8007a56:	19db      	adds	r3, r3, r7
 8007a58:	2200      	movs	r2, #0
 8007a5a:	701a      	strb	r2, [r3, #0]
 8007a5c:	e021      	b.n	8007aa2 <UART_SetConfig+0x22a>
 8007a5e:	231b      	movs	r3, #27
 8007a60:	2218      	movs	r2, #24
 8007a62:	189b      	adds	r3, r3, r2
 8007a64:	19db      	adds	r3, r3, r7
 8007a66:	2202      	movs	r2, #2
 8007a68:	701a      	strb	r2, [r3, #0]
 8007a6a:	e01a      	b.n	8007aa2 <UART_SetConfig+0x22a>
 8007a6c:	231b      	movs	r3, #27
 8007a6e:	2218      	movs	r2, #24
 8007a70:	189b      	adds	r3, r3, r2
 8007a72:	19db      	adds	r3, r3, r7
 8007a74:	2204      	movs	r2, #4
 8007a76:	701a      	strb	r2, [r3, #0]
 8007a78:	e013      	b.n	8007aa2 <UART_SetConfig+0x22a>
 8007a7a:	231b      	movs	r3, #27
 8007a7c:	2218      	movs	r2, #24
 8007a7e:	189b      	adds	r3, r3, r2
 8007a80:	19db      	adds	r3, r3, r7
 8007a82:	2208      	movs	r2, #8
 8007a84:	701a      	strb	r2, [r3, #0]
 8007a86:	e00c      	b.n	8007aa2 <UART_SetConfig+0x22a>
 8007a88:	231b      	movs	r3, #27
 8007a8a:	2218      	movs	r2, #24
 8007a8c:	189b      	adds	r3, r3, r2
 8007a8e:	19db      	adds	r3, r3, r7
 8007a90:	2210      	movs	r2, #16
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	e005      	b.n	8007aa2 <UART_SetConfig+0x22a>
 8007a96:	231b      	movs	r3, #27
 8007a98:	2218      	movs	r2, #24
 8007a9a:	189b      	adds	r3, r3, r2
 8007a9c:	19db      	adds	r3, r3, r7
 8007a9e:	2210      	movs	r2, #16
 8007aa0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a46      	ldr	r2, [pc, #280]	@ (8007bc0 <UART_SetConfig+0x348>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d000      	beq.n	8007aae <UART_SetConfig+0x236>
 8007aac:	e09a      	b.n	8007be4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007aae:	231b      	movs	r3, #27
 8007ab0:	2218      	movs	r2, #24
 8007ab2:	189b      	adds	r3, r3, r2
 8007ab4:	19db      	adds	r3, r3, r7
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d01d      	beq.n	8007af8 <UART_SetConfig+0x280>
 8007abc:	dc20      	bgt.n	8007b00 <UART_SetConfig+0x288>
 8007abe:	2b04      	cmp	r3, #4
 8007ac0:	d015      	beq.n	8007aee <UART_SetConfig+0x276>
 8007ac2:	dc1d      	bgt.n	8007b00 <UART_SetConfig+0x288>
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <UART_SetConfig+0x256>
 8007ac8:	2b02      	cmp	r3, #2
 8007aca:	d005      	beq.n	8007ad8 <UART_SetConfig+0x260>
 8007acc:	e018      	b.n	8007b00 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ace:	f7fe ff21 	bl	8006914 <HAL_RCC_GetPCLK1Freq>
 8007ad2:	0003      	movs	r3, r0
 8007ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007ad6:	e01c      	b.n	8007b12 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ad8:	4b3c      	ldr	r3, [pc, #240]	@ (8007bcc <UART_SetConfig+0x354>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2210      	movs	r2, #16
 8007ade:	4013      	ands	r3, r2
 8007ae0:	d002      	beq.n	8007ae8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8007bdc <UART_SetConfig+0x364>)
 8007ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007ae6:	e014      	b.n	8007b12 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8007ae8:	4b3d      	ldr	r3, [pc, #244]	@ (8007be0 <UART_SetConfig+0x368>)
 8007aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007aec:	e011      	b.n	8007b12 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aee:	f7fe fe81 	bl	80067f4 <HAL_RCC_GetSysClockFreq>
 8007af2:	0003      	movs	r3, r0
 8007af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007af6:	e00c      	b.n	8007b12 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007af8:	2380      	movs	r3, #128	@ 0x80
 8007afa:	021b      	lsls	r3, r3, #8
 8007afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007afe:	e008      	b.n	8007b12 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007b04:	231a      	movs	r3, #26
 8007b06:	2218      	movs	r2, #24
 8007b08:	189b      	adds	r3, r3, r2
 8007b0a:	19db      	adds	r3, r3, r7
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	701a      	strb	r2, [r3, #0]
        break;
 8007b10:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d100      	bne.n	8007b1a <UART_SetConfig+0x2a2>
 8007b18:	e133      	b.n	8007d82 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b1a:	69fb      	ldr	r3, [r7, #28]
 8007b1c:	685a      	ldr	r2, [r3, #4]
 8007b1e:	0013      	movs	r3, r2
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	189b      	adds	r3, r3, r2
 8007b24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d305      	bcc.n	8007b36 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d906      	bls.n	8007b44 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8007b36:	231a      	movs	r3, #26
 8007b38:	2218      	movs	r2, #24
 8007b3a:	189b      	adds	r3, r3, r2
 8007b3c:	19db      	adds	r3, r3, r7
 8007b3e:	2201      	movs	r2, #1
 8007b40:	701a      	strb	r2, [r3, #0]
 8007b42:	e11e      	b.n	8007d82 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b46:	613b      	str	r3, [r7, #16]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	617b      	str	r3, [r7, #20]
 8007b4c:	6939      	ldr	r1, [r7, #16]
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	000b      	movs	r3, r1
 8007b52:	0e1b      	lsrs	r3, r3, #24
 8007b54:	0010      	movs	r0, r2
 8007b56:	0205      	lsls	r5, r0, #8
 8007b58:	431d      	orrs	r5, r3
 8007b5a:	000b      	movs	r3, r1
 8007b5c:	021c      	lsls	r4, r3, #8
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	085b      	lsrs	r3, r3, #1
 8007b64:	60bb      	str	r3, [r7, #8]
 8007b66:	2300      	movs	r3, #0
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	68b8      	ldr	r0, [r7, #8]
 8007b6c:	68f9      	ldr	r1, [r7, #12]
 8007b6e:	1900      	adds	r0, r0, r4
 8007b70:	4169      	adcs	r1, r5
 8007b72:	69fb      	ldr	r3, [r7, #28]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	2300      	movs	r3, #0
 8007b7a:	607b      	str	r3, [r7, #4]
 8007b7c:	683a      	ldr	r2, [r7, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f7f8 fc4a 	bl	8000418 <__aeabi_uldivmod>
 8007b84:	0002      	movs	r2, r0
 8007b86:	000b      	movs	r3, r1
 8007b88:	0013      	movs	r3, r2
 8007b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b8c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b8e:	23c0      	movs	r3, #192	@ 0xc0
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d309      	bcc.n	8007baa <UART_SetConfig+0x332>
 8007b96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b98:	2380      	movs	r3, #128	@ 0x80
 8007b9a:	035b      	lsls	r3, r3, #13
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d204      	bcs.n	8007baa <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ba6:	60da      	str	r2, [r3, #12]
 8007ba8:	e0eb      	b.n	8007d82 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8007baa:	231a      	movs	r3, #26
 8007bac:	2218      	movs	r2, #24
 8007bae:	189b      	adds	r3, r3, r2
 8007bb0:	19db      	adds	r3, r3, r7
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	701a      	strb	r2, [r3, #0]
 8007bb6:	e0e4      	b.n	8007d82 <UART_SetConfig+0x50a>
 8007bb8:	efff69f3 	.word	0xefff69f3
 8007bbc:	ffffcfff 	.word	0xffffcfff
 8007bc0:	40004800 	.word	0x40004800
 8007bc4:	fffff4ff 	.word	0xfffff4ff
 8007bc8:	40013800 	.word	0x40013800
 8007bcc:	40021000 	.word	0x40021000
 8007bd0:	40004400 	.word	0x40004400
 8007bd4:	40004c00 	.word	0x40004c00
 8007bd8:	40005000 	.word	0x40005000
 8007bdc:	003d0900 	.word	0x003d0900
 8007be0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007be4:	69fb      	ldr	r3, [r7, #28]
 8007be6:	69da      	ldr	r2, [r3, #28]
 8007be8:	2380      	movs	r3, #128	@ 0x80
 8007bea:	021b      	lsls	r3, r3, #8
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d000      	beq.n	8007bf2 <UART_SetConfig+0x37a>
 8007bf0:	e070      	b.n	8007cd4 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8007bf2:	231b      	movs	r3, #27
 8007bf4:	2218      	movs	r2, #24
 8007bf6:	189b      	adds	r3, r3, r2
 8007bf8:	19db      	adds	r3, r3, r7
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	2b08      	cmp	r3, #8
 8007bfe:	d822      	bhi.n	8007c46 <UART_SetConfig+0x3ce>
 8007c00:	009a      	lsls	r2, r3, #2
 8007c02:	4b67      	ldr	r3, [pc, #412]	@ (8007da0 <UART_SetConfig+0x528>)
 8007c04:	18d3      	adds	r3, r2, r3
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c0a:	f7fe fe83 	bl	8006914 <HAL_RCC_GetPCLK1Freq>
 8007c0e:	0003      	movs	r3, r0
 8007c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c12:	e021      	b.n	8007c58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c14:	f7fe fe94 	bl	8006940 <HAL_RCC_GetPCLK2Freq>
 8007c18:	0003      	movs	r3, r0
 8007c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c1c:	e01c      	b.n	8007c58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c1e:	4b61      	ldr	r3, [pc, #388]	@ (8007da4 <UART_SetConfig+0x52c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2210      	movs	r2, #16
 8007c24:	4013      	ands	r3, r2
 8007c26:	d002      	beq.n	8007c2e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007c28:	4b5f      	ldr	r3, [pc, #380]	@ (8007da8 <UART_SetConfig+0x530>)
 8007c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c2c:	e014      	b.n	8007c58 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8007c2e:	4b5f      	ldr	r3, [pc, #380]	@ (8007dac <UART_SetConfig+0x534>)
 8007c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c32:	e011      	b.n	8007c58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c34:	f7fe fdde 	bl	80067f4 <HAL_RCC_GetSysClockFreq>
 8007c38:	0003      	movs	r3, r0
 8007c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c3c:	e00c      	b.n	8007c58 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c3e:	2380      	movs	r3, #128	@ 0x80
 8007c40:	021b      	lsls	r3, r3, #8
 8007c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007c44:	e008      	b.n	8007c58 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8007c46:	2300      	movs	r3, #0
 8007c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007c4a:	231a      	movs	r3, #26
 8007c4c:	2218      	movs	r2, #24
 8007c4e:	189b      	adds	r3, r3, r2
 8007c50:	19db      	adds	r3, r3, r7
 8007c52:	2201      	movs	r2, #1
 8007c54:	701a      	strb	r2, [r3, #0]
        break;
 8007c56:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d100      	bne.n	8007c60 <UART_SetConfig+0x3e8>
 8007c5e:	e090      	b.n	8007d82 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c62:	005a      	lsls	r2, r3, #1
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	085b      	lsrs	r3, r3, #1
 8007c6a:	18d2      	adds	r2, r2, r3
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	0019      	movs	r1, r3
 8007c72:	0010      	movs	r0, r2
 8007c74:	f7f8 fa5a 	bl	800012c <__udivsi3>
 8007c78:	0003      	movs	r3, r0
 8007c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7e:	2b0f      	cmp	r3, #15
 8007c80:	d921      	bls.n	8007cc6 <UART_SetConfig+0x44e>
 8007c82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007c84:	2380      	movs	r3, #128	@ 0x80
 8007c86:	025b      	lsls	r3, r3, #9
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d21c      	bcs.n	8007cc6 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	200e      	movs	r0, #14
 8007c92:	2418      	movs	r4, #24
 8007c94:	1903      	adds	r3, r0, r4
 8007c96:	19db      	adds	r3, r3, r7
 8007c98:	210f      	movs	r1, #15
 8007c9a:	438a      	bics	r2, r1
 8007c9c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca0:	085b      	lsrs	r3, r3, #1
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	2207      	movs	r2, #7
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	b299      	uxth	r1, r3
 8007caa:	1903      	adds	r3, r0, r4
 8007cac:	19db      	adds	r3, r3, r7
 8007cae:	1902      	adds	r2, r0, r4
 8007cb0:	19d2      	adds	r2, r2, r7
 8007cb2:	8812      	ldrh	r2, [r2, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	1902      	adds	r2, r0, r4
 8007cbe:	19d2      	adds	r2, r2, r7
 8007cc0:	8812      	ldrh	r2, [r2, #0]
 8007cc2:	60da      	str	r2, [r3, #12]
 8007cc4:	e05d      	b.n	8007d82 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8007cc6:	231a      	movs	r3, #26
 8007cc8:	2218      	movs	r2, #24
 8007cca:	189b      	adds	r3, r3, r2
 8007ccc:	19db      	adds	r3, r3, r7
 8007cce:	2201      	movs	r2, #1
 8007cd0:	701a      	strb	r2, [r3, #0]
 8007cd2:	e056      	b.n	8007d82 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cd4:	231b      	movs	r3, #27
 8007cd6:	2218      	movs	r2, #24
 8007cd8:	189b      	adds	r3, r3, r2
 8007cda:	19db      	adds	r3, r3, r7
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	2b08      	cmp	r3, #8
 8007ce0:	d822      	bhi.n	8007d28 <UART_SetConfig+0x4b0>
 8007ce2:	009a      	lsls	r2, r3, #2
 8007ce4:	4b32      	ldr	r3, [pc, #200]	@ (8007db0 <UART_SetConfig+0x538>)
 8007ce6:	18d3      	adds	r3, r2, r3
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cec:	f7fe fe12 	bl	8006914 <HAL_RCC_GetPCLK1Freq>
 8007cf0:	0003      	movs	r3, r0
 8007cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007cf4:	e021      	b.n	8007d3a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cf6:	f7fe fe23 	bl	8006940 <HAL_RCC_GetPCLK2Freq>
 8007cfa:	0003      	movs	r3, r0
 8007cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007cfe:	e01c      	b.n	8007d3a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d00:	4b28      	ldr	r3, [pc, #160]	@ (8007da4 <UART_SetConfig+0x52c>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2210      	movs	r2, #16
 8007d06:	4013      	ands	r3, r2
 8007d08:	d002      	beq.n	8007d10 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007d0a:	4b27      	ldr	r3, [pc, #156]	@ (8007da8 <UART_SetConfig+0x530>)
 8007d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007d0e:	e014      	b.n	8007d3a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8007d10:	4b26      	ldr	r3, [pc, #152]	@ (8007dac <UART_SetConfig+0x534>)
 8007d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007d14:	e011      	b.n	8007d3a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d16:	f7fe fd6d 	bl	80067f4 <HAL_RCC_GetSysClockFreq>
 8007d1a:	0003      	movs	r3, r0
 8007d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007d1e:	e00c      	b.n	8007d3a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d20:	2380      	movs	r3, #128	@ 0x80
 8007d22:	021b      	lsls	r3, r3, #8
 8007d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007d26:	e008      	b.n	8007d3a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8007d2c:	231a      	movs	r3, #26
 8007d2e:	2218      	movs	r2, #24
 8007d30:	189b      	adds	r3, r3, r2
 8007d32:	19db      	adds	r3, r3, r7
 8007d34:	2201      	movs	r2, #1
 8007d36:	701a      	strb	r2, [r3, #0]
        break;
 8007d38:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8007d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d020      	beq.n	8007d82 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d40:	69fb      	ldr	r3, [r7, #28]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	085a      	lsrs	r2, r3, #1
 8007d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d48:	18d2      	adds	r2, r2, r3
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	0019      	movs	r1, r3
 8007d50:	0010      	movs	r0, r2
 8007d52:	f7f8 f9eb 	bl	800012c <__udivsi3>
 8007d56:	0003      	movs	r3, r0
 8007d58:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5c:	2b0f      	cmp	r3, #15
 8007d5e:	d90a      	bls.n	8007d76 <UART_SetConfig+0x4fe>
 8007d60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d62:	2380      	movs	r3, #128	@ 0x80
 8007d64:	025b      	lsls	r3, r3, #9
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d205      	bcs.n	8007d76 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	60da      	str	r2, [r3, #12]
 8007d74:	e005      	b.n	8007d82 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8007d76:	231a      	movs	r3, #26
 8007d78:	2218      	movs	r2, #24
 8007d7a:	189b      	adds	r3, r3, r2
 8007d7c:	19db      	adds	r3, r3, r7
 8007d7e:	2201      	movs	r2, #1
 8007d80:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	2200      	movs	r2, #0
 8007d86:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007d8e:	231a      	movs	r3, #26
 8007d90:	2218      	movs	r2, #24
 8007d92:	189b      	adds	r3, r3, r2
 8007d94:	19db      	adds	r3, r3, r7
 8007d96:	781b      	ldrb	r3, [r3, #0]
}
 8007d98:	0018      	movs	r0, r3
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	b00e      	add	sp, #56	@ 0x38
 8007d9e:	bdb0      	pop	{r4, r5, r7, pc}
 8007da0:	0800a25c 	.word	0x0800a25c
 8007da4:	40021000 	.word	0x40021000
 8007da8:	003d0900 	.word	0x003d0900
 8007dac:	00f42400 	.word	0x00f42400
 8007db0:	0800a280 	.word	0x0800a280

08007db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	4013      	ands	r3, r2
 8007dc4:	d00b      	beq.n	8007dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8007ef8 <UART_AdvFeatureConfig+0x144>)
 8007dce:	4013      	ands	r3, r2
 8007dd0:	0019      	movs	r1, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007de2:	2201      	movs	r2, #1
 8007de4:	4013      	ands	r3, r2
 8007de6:	d00b      	beq.n	8007e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	4a43      	ldr	r2, [pc, #268]	@ (8007efc <UART_AdvFeatureConfig+0x148>)
 8007df0:	4013      	ands	r3, r2
 8007df2:	0019      	movs	r1, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	430a      	orrs	r2, r1
 8007dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e04:	2202      	movs	r2, #2
 8007e06:	4013      	ands	r3, r2
 8007e08:	d00b      	beq.n	8007e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	4a3b      	ldr	r2, [pc, #236]	@ (8007f00 <UART_AdvFeatureConfig+0x14c>)
 8007e12:	4013      	ands	r3, r2
 8007e14:	0019      	movs	r1, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e26:	2204      	movs	r2, #4
 8007e28:	4013      	ands	r3, r2
 8007e2a:	d00b      	beq.n	8007e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	4a34      	ldr	r2, [pc, #208]	@ (8007f04 <UART_AdvFeatureConfig+0x150>)
 8007e34:	4013      	ands	r3, r2
 8007e36:	0019      	movs	r1, r3
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	430a      	orrs	r2, r1
 8007e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e48:	2210      	movs	r2, #16
 8007e4a:	4013      	ands	r3, r2
 8007e4c:	d00b      	beq.n	8007e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	4a2c      	ldr	r2, [pc, #176]	@ (8007f08 <UART_AdvFeatureConfig+0x154>)
 8007e56:	4013      	ands	r3, r2
 8007e58:	0019      	movs	r1, r3
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6a:	2220      	movs	r2, #32
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	d00b      	beq.n	8007e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	4a25      	ldr	r2, [pc, #148]	@ (8007f0c <UART_AdvFeatureConfig+0x158>)
 8007e78:	4013      	ands	r3, r2
 8007e7a:	0019      	movs	r1, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	430a      	orrs	r2, r1
 8007e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8c:	2240      	movs	r2, #64	@ 0x40
 8007e8e:	4013      	ands	r3, r2
 8007e90:	d01d      	beq.n	8007ece <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	4a1d      	ldr	r2, [pc, #116]	@ (8007f10 <UART_AdvFeatureConfig+0x15c>)
 8007e9a:	4013      	ands	r3, r2
 8007e9c:	0019      	movs	r1, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007eae:	2380      	movs	r3, #128	@ 0x80
 8007eb0:	035b      	lsls	r3, r3, #13
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d10b      	bne.n	8007ece <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	4a15      	ldr	r2, [pc, #84]	@ (8007f14 <UART_AdvFeatureConfig+0x160>)
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	0019      	movs	r1, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	430a      	orrs	r2, r1
 8007ecc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed2:	2280      	movs	r2, #128	@ 0x80
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	d00b      	beq.n	8007ef0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	4a0e      	ldr	r2, [pc, #56]	@ (8007f18 <UART_AdvFeatureConfig+0x164>)
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	0019      	movs	r1, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	430a      	orrs	r2, r1
 8007eee:	605a      	str	r2, [r3, #4]
  }
}
 8007ef0:	46c0      	nop			@ (mov r8, r8)
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	b002      	add	sp, #8
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	ffff7fff 	.word	0xffff7fff
 8007efc:	fffdffff 	.word	0xfffdffff
 8007f00:	fffeffff 	.word	0xfffeffff
 8007f04:	fffbffff 	.word	0xfffbffff
 8007f08:	ffffefff 	.word	0xffffefff
 8007f0c:	ffffdfff 	.word	0xffffdfff
 8007f10:	ffefffff 	.word	0xffefffff
 8007f14:	ff9fffff 	.word	0xff9fffff
 8007f18:	fff7ffff 	.word	0xfff7ffff

08007f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b092      	sub	sp, #72	@ 0x48
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2284      	movs	r2, #132	@ 0x84
 8007f28:	2100      	movs	r1, #0
 8007f2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f2c:	f7fb fdde 	bl	8003aec <HAL_GetTick>
 8007f30:	0003      	movs	r3, r0
 8007f32:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	4013      	ands	r3, r2
 8007f3e:	2b08      	cmp	r3, #8
 8007f40:	d12c      	bne.n	8007f9c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f44:	2280      	movs	r2, #128	@ 0x80
 8007f46:	0391      	lsls	r1, r2, #14
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	4a46      	ldr	r2, [pc, #280]	@ (8008064 <UART_CheckIdleState+0x148>)
 8007f4c:	9200      	str	r2, [sp, #0]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f000 f88c 	bl	800806c <UART_WaitOnFlagUntilTimeout>
 8007f54:	1e03      	subs	r3, r0, #0
 8007f56:	d021      	beq.n	8007f9c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f58:	f3ef 8310 	mrs	r3, PRIMASK
 8007f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007f60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f62:	2301      	movs	r3, #1
 8007f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f68:	f383 8810 	msr	PRIMASK, r3
}
 8007f6c:	46c0      	nop			@ (mov r8, r8)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2180      	movs	r1, #128	@ 0x80
 8007f7a:	438a      	bics	r2, r1
 8007f7c:	601a      	str	r2, [r3, #0]
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f84:	f383 8810 	msr	PRIMASK, r3
}
 8007f88:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2220      	movs	r2, #32
 8007f8e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2278      	movs	r2, #120	@ 0x78
 8007f94:	2100      	movs	r1, #0
 8007f96:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e05f      	b.n	800805c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2204      	movs	r2, #4
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	2b04      	cmp	r3, #4
 8007fa8:	d146      	bne.n	8008038 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007faa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fac:	2280      	movs	r2, #128	@ 0x80
 8007fae:	03d1      	lsls	r1, r2, #15
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	4a2c      	ldr	r2, [pc, #176]	@ (8008064 <UART_CheckIdleState+0x148>)
 8007fb4:	9200      	str	r2, [sp, #0]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f000 f858 	bl	800806c <UART_WaitOnFlagUntilTimeout>
 8007fbc:	1e03      	subs	r3, r0, #0
 8007fbe:	d03b      	beq.n	8008038 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8007fc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fca:	2301      	movs	r3, #1
 8007fcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f383 8810 	msr	PRIMASK, r3
}
 8007fd4:	46c0      	nop			@ (mov r8, r8)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4921      	ldr	r1, [pc, #132]	@ (8008068 <UART_CheckIdleState+0x14c>)
 8007fe2:	400a      	ands	r2, r1
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fe8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f383 8810 	msr	PRIMASK, r3
}
 8007ff0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ff6:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ff8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffa:	633b      	str	r3, [r7, #48]	@ 0x30
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	f383 8810 	msr	PRIMASK, r3
}
 8008006:	46c0      	nop			@ (mov r8, r8)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	689a      	ldr	r2, [r3, #8]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	2101      	movs	r1, #1
 8008014:	438a      	bics	r2, r1
 8008016:	609a      	str	r2, [r3, #8]
 8008018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800801a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800801c:	6a3b      	ldr	r3, [r7, #32]
 800801e:	f383 8810 	msr	PRIMASK, r3
}
 8008022:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2280      	movs	r2, #128	@ 0x80
 8008028:	2120      	movs	r1, #32
 800802a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2278      	movs	r2, #120	@ 0x78
 8008030:	2100      	movs	r1, #0
 8008032:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e011      	b.n	800805c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2220      	movs	r2, #32
 800803c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2280      	movs	r2, #128	@ 0x80
 8008042:	2120      	movs	r1, #32
 8008044:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2278      	movs	r2, #120	@ 0x78
 8008056:	2100      	movs	r1, #0
 8008058:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800805a:	2300      	movs	r3, #0
}
 800805c:	0018      	movs	r0, r3
 800805e:	46bd      	mov	sp, r7
 8008060:	b010      	add	sp, #64	@ 0x40
 8008062:	bd80      	pop	{r7, pc}
 8008064:	01ffffff 	.word	0x01ffffff
 8008068:	fffffedf 	.word	0xfffffedf

0800806c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	603b      	str	r3, [r7, #0]
 8008078:	1dfb      	adds	r3, r7, #7
 800807a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800807c:	e051      	b.n	8008122 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	3301      	adds	r3, #1
 8008082:	d04e      	beq.n	8008122 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008084:	f7fb fd32 	bl	8003aec <HAL_GetTick>
 8008088:	0002      	movs	r2, r0
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	1ad3      	subs	r3, r2, r3
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	429a      	cmp	r2, r3
 8008092:	d302      	bcc.n	800809a <UART_WaitOnFlagUntilTimeout+0x2e>
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e051      	b.n	8008142 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2204      	movs	r2, #4
 80080a6:	4013      	ands	r3, r2
 80080a8:	d03b      	beq.n	8008122 <UART_WaitOnFlagUntilTimeout+0xb6>
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2b80      	cmp	r3, #128	@ 0x80
 80080ae:	d038      	beq.n	8008122 <UART_WaitOnFlagUntilTimeout+0xb6>
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	2b40      	cmp	r3, #64	@ 0x40
 80080b4:	d035      	beq.n	8008122 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	2208      	movs	r2, #8
 80080be:	4013      	ands	r3, r2
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d111      	bne.n	80080e8 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2208      	movs	r2, #8
 80080ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	0018      	movs	r0, r3
 80080d0:	f000 f83c 	bl	800814c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	2284      	movs	r2, #132	@ 0x84
 80080d8:	2108      	movs	r1, #8
 80080da:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2278      	movs	r2, #120	@ 0x78
 80080e0:	2100      	movs	r1, #0
 80080e2:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e02c      	b.n	8008142 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	69da      	ldr	r2, [r3, #28]
 80080ee:	2380      	movs	r3, #128	@ 0x80
 80080f0:	011b      	lsls	r3, r3, #4
 80080f2:	401a      	ands	r2, r3
 80080f4:	2380      	movs	r3, #128	@ 0x80
 80080f6:	011b      	lsls	r3, r3, #4
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d112      	bne.n	8008122 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2280      	movs	r2, #128	@ 0x80
 8008102:	0112      	lsls	r2, r2, #4
 8008104:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	0018      	movs	r0, r3
 800810a:	f000 f81f 	bl	800814c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2284      	movs	r2, #132	@ 0x84
 8008112:	2120      	movs	r1, #32
 8008114:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2278      	movs	r2, #120	@ 0x78
 800811a:	2100      	movs	r1, #0
 800811c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e00f      	b.n	8008142 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	4013      	ands	r3, r2
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	1ad3      	subs	r3, r2, r3
 8008130:	425a      	negs	r2, r3
 8008132:	4153      	adcs	r3, r2
 8008134:	b2db      	uxtb	r3, r3
 8008136:	001a      	movs	r2, r3
 8008138:	1dfb      	adds	r3, r7, #7
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	429a      	cmp	r2, r3
 800813e:	d09e      	beq.n	800807e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	0018      	movs	r0, r3
 8008144:	46bd      	mov	sp, r7
 8008146:	b004      	add	sp, #16
 8008148:	bd80      	pop	{r7, pc}
	...

0800814c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b08e      	sub	sp, #56	@ 0x38
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008154:	f3ef 8310 	mrs	r3, PRIMASK
 8008158:	617b      	str	r3, [r7, #20]
  return(result);
 800815a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800815c:	637b      	str	r3, [r7, #52]	@ 0x34
 800815e:	2301      	movs	r3, #1
 8008160:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	f383 8810 	msr	PRIMASK, r3
}
 8008168:	46c0      	nop			@ (mov r8, r8)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4926      	ldr	r1, [pc, #152]	@ (8008210 <UART_EndRxTransfer+0xc4>)
 8008176:	400a      	ands	r2, r1
 8008178:	601a      	str	r2, [r3, #0]
 800817a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800817c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	f383 8810 	msr	PRIMASK, r3
}
 8008184:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008186:	f3ef 8310 	mrs	r3, PRIMASK
 800818a:	623b      	str	r3, [r7, #32]
  return(result);
 800818c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800818e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008190:	2301      	movs	r3, #1
 8008192:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008196:	f383 8810 	msr	PRIMASK, r3
}
 800819a:	46c0      	nop			@ (mov r8, r8)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	689a      	ldr	r2, [r3, #8]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2101      	movs	r1, #1
 80081a8:	438a      	bics	r2, r1
 80081aa:	609a      	str	r2, [r3, #8]
 80081ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b2:	f383 8810 	msr	PRIMASK, r3
}
 80081b6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d118      	bne.n	80081f2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081c0:	f3ef 8310 	mrs	r3, PRIMASK
 80081c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80081c6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081ca:	2301      	movs	r3, #1
 80081cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f383 8810 	msr	PRIMASK, r3
}
 80081d4:	46c0      	nop			@ (mov r8, r8)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2110      	movs	r1, #16
 80081e2:	438a      	bics	r2, r1
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f383 8810 	msr	PRIMASK, r3
}
 80081f0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2280      	movs	r2, #128	@ 0x80
 80081f6:	2120      	movs	r1, #32
 80081f8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008206:	46c0      	nop			@ (mov r8, r8)
 8008208:	46bd      	mov	sp, r7
 800820a:	b00e      	add	sp, #56	@ 0x38
 800820c:	bd80      	pop	{r7, pc}
 800820e:	46c0      	nop			@ (mov r8, r8)
 8008210:	fffffedf 	.word	0xfffffedf

08008214 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b088      	sub	sp, #32
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	603b      	str	r3, [r7, #0]
 8008220:	1dbb      	adds	r3, r7, #6
 8008222:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2280      	movs	r2, #128	@ 0x80
 8008228:	589b      	ldr	r3, [r3, r2]
 800822a:	2b20      	cmp	r3, #32
 800822c:	d000      	beq.n	8008230 <HAL_UARTEx_ReceiveToIdle+0x1c>
 800822e:	e109      	b.n	8008444 <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d003      	beq.n	800823e <HAL_UARTEx_ReceiveToIdle+0x2a>
 8008236:	1dbb      	adds	r3, r7, #6
 8008238:	881b      	ldrh	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e101      	b.n	8008446 <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	689a      	ldr	r2, [r3, #8]
 8008246:	2380      	movs	r3, #128	@ 0x80
 8008248:	015b      	lsls	r3, r3, #5
 800824a:	429a      	cmp	r2, r3
 800824c:	d109      	bne.n	8008262 <HAL_UARTEx_ReceiveToIdle+0x4e>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d105      	bne.n	8008262 <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2201      	movs	r2, #1
 800825a:	4013      	ands	r3, r2
 800825c:	d001      	beq.n	8008262 <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e0f1      	b.n	8008446 <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2284      	movs	r2, #132	@ 0x84
 8008266:	2100      	movs	r1, #0
 8008268:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2280      	movs	r2, #128	@ 0x80
 800826e:	2122      	movs	r1, #34	@ 0x22
 8008270:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2201      	movs	r2, #1
 8008276:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2200      	movs	r2, #0
 800827c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800827e:	f7fb fc35 	bl	8003aec <HAL_GetTick>
 8008282:	0003      	movs	r3, r0
 8008284:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	1dba      	adds	r2, r7, #6
 800828a:	2158      	movs	r1, #88	@ 0x58
 800828c:	8812      	ldrh	r2, [r2, #0]
 800828e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	1dba      	adds	r2, r7, #6
 8008294:	215a      	movs	r1, #90	@ 0x5a
 8008296:	8812      	ldrh	r2, [r2, #0]
 8008298:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	689a      	ldr	r2, [r3, #8]
 800829e:	2380      	movs	r3, #128	@ 0x80
 80082a0:	015b      	lsls	r3, r3, #5
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d10d      	bne.n	80082c2 <HAL_UARTEx_ReceiveToIdle+0xae>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	691b      	ldr	r3, [r3, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d104      	bne.n	80082b8 <HAL_UARTEx_ReceiveToIdle+0xa4>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	225c      	movs	r2, #92	@ 0x5c
 80082b2:	4967      	ldr	r1, [pc, #412]	@ (8008450 <HAL_UARTEx_ReceiveToIdle+0x23c>)
 80082b4:	5299      	strh	r1, [r3, r2]
 80082b6:	e02e      	b.n	8008316 <HAL_UARTEx_ReceiveToIdle+0x102>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	225c      	movs	r2, #92	@ 0x5c
 80082bc:	21ff      	movs	r1, #255	@ 0xff
 80082be:	5299      	strh	r1, [r3, r2]
 80082c0:	e029      	b.n	8008316 <HAL_UARTEx_ReceiveToIdle+0x102>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10d      	bne.n	80082e6 <HAL_UARTEx_ReceiveToIdle+0xd2>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d104      	bne.n	80082dc <HAL_UARTEx_ReceiveToIdle+0xc8>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	225c      	movs	r2, #92	@ 0x5c
 80082d6:	21ff      	movs	r1, #255	@ 0xff
 80082d8:	5299      	strh	r1, [r3, r2]
 80082da:	e01c      	b.n	8008316 <HAL_UARTEx_ReceiveToIdle+0x102>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	225c      	movs	r2, #92	@ 0x5c
 80082e0:	217f      	movs	r1, #127	@ 0x7f
 80082e2:	5299      	strh	r1, [r3, r2]
 80082e4:	e017      	b.n	8008316 <HAL_UARTEx_ReceiveToIdle+0x102>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	689a      	ldr	r2, [r3, #8]
 80082ea:	2380      	movs	r3, #128	@ 0x80
 80082ec:	055b      	lsls	r3, r3, #21
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d10d      	bne.n	800830e <HAL_UARTEx_ReceiveToIdle+0xfa>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d104      	bne.n	8008304 <HAL_UARTEx_ReceiveToIdle+0xf0>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	225c      	movs	r2, #92	@ 0x5c
 80082fe:	217f      	movs	r1, #127	@ 0x7f
 8008300:	5299      	strh	r1, [r3, r2]
 8008302:	e008      	b.n	8008316 <HAL_UARTEx_ReceiveToIdle+0x102>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	225c      	movs	r2, #92	@ 0x5c
 8008308:	213f      	movs	r1, #63	@ 0x3f
 800830a:	5299      	strh	r1, [r3, r2]
 800830c:	e003      	b.n	8008316 <HAL_UARTEx_ReceiveToIdle+0x102>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	225c      	movs	r2, #92	@ 0x5c
 8008312:	2100      	movs	r1, #0
 8008314:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8008316:	2312      	movs	r3, #18
 8008318:	18fb      	adds	r3, r7, r3
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	215c      	movs	r1, #92	@ 0x5c
 800831e:	5a52      	ldrh	r2, [r2, r1]
 8008320:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	689a      	ldr	r2, [r3, #8]
 8008326:	2380      	movs	r3, #128	@ 0x80
 8008328:	015b      	lsls	r3, r3, #5
 800832a:	429a      	cmp	r2, r3
 800832c:	d108      	bne.n	8008340 <HAL_UARTEx_ReceiveToIdle+0x12c>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	691b      	ldr	r3, [r3, #16]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d104      	bne.n	8008340 <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 8008336:	2300      	movs	r3, #0
 8008338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	61bb      	str	r3, [r7, #24]
 800833e:	e003      	b.n	8008348 <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008344:	2300      	movs	r3, #0
 8008346:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	2200      	movs	r2, #0
 800834c:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800834e:	e062      	b.n	8008416 <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	69db      	ldr	r3, [r3, #28]
 8008356:	2210      	movs	r2, #16
 8008358:	4013      	ands	r3, r2
 800835a:	2b10      	cmp	r3, #16
 800835c:	d110      	bne.n	8008380 <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2210      	movs	r2, #16
 8008364:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	881b      	ldrh	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d008      	beq.n	8008380 <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2202      	movs	r2, #2
 8008372:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2280      	movs	r2, #128	@ 0x80
 8008378:	2120      	movs	r1, #32
 800837a:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 800837c:	2300      	movs	r3, #0
 800837e:	e062      	b.n	8008446 <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	2220      	movs	r2, #32
 8008388:	4013      	ands	r3, r2
 800838a:	2b20      	cmp	r3, #32
 800838c:	d12f      	bne.n	80083ee <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10e      	bne.n	80083b2 <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800839a:	b29b      	uxth	r3, r3
 800839c:	2212      	movs	r2, #18
 800839e:	18ba      	adds	r2, r7, r2
 80083a0:	8812      	ldrh	r2, [r2, #0]
 80083a2:	4013      	ands	r3, r2
 80083a4:	b29a      	uxth	r2, r3
 80083a6:	69bb      	ldr	r3, [r7, #24]
 80083a8:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	3302      	adds	r3, #2
 80083ae:	61bb      	str	r3, [r7, #24]
 80083b0:	e00e      	b.n	80083d0 <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2212      	movs	r2, #18
 80083bc:	18ba      	adds	r2, r7, r2
 80083be:	8812      	ldrh	r2, [r2, #0]
 80083c0:	b2d2      	uxtb	r2, r2
 80083c2:	4013      	ands	r3, r2
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	69fb      	ldr	r3, [r7, #28]
 80083c8:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	3301      	adds	r3, #1
 80083ce:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	3301      	adds	r3, #1
 80083d6:	b29a      	uxth	r2, r3
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	225a      	movs	r2, #90	@ 0x5a
 80083e0:	5a9b      	ldrh	r3, [r3, r2]
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b299      	uxth	r1, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	225a      	movs	r2, #90	@ 0x5a
 80083ec:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	3301      	adds	r3, #1
 80083f2:	d010      	beq.n	8008416 <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80083f4:	f7fb fb7a 	bl	8003aec <HAL_GetTick>
 80083f8:	0002      	movs	r2, r0
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008400:	429a      	cmp	r2, r3
 8008402:	d302      	bcc.n	800840a <HAL_UARTEx_ReceiveToIdle+0x1f6>
 8008404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008406:	2b00      	cmp	r3, #0
 8008408:	d105      	bne.n	8008416 <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2280      	movs	r2, #128	@ 0x80
 800840e:	2120      	movs	r1, #32
 8008410:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e017      	b.n	8008446 <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	225a      	movs	r2, #90	@ 0x5a
 800841a:	5a9b      	ldrh	r3, [r3, r2]
 800841c:	b29b      	uxth	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	d196      	bne.n	8008350 <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	2258      	movs	r2, #88	@ 0x58
 8008426:	5a9a      	ldrh	r2, [r3, r2]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	215a      	movs	r1, #90	@ 0x5a
 800842c:	5a5b      	ldrh	r3, [r3, r1]
 800842e:	b29b      	uxth	r3, r3
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	b29a      	uxth	r2, r3
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2280      	movs	r2, #128	@ 0x80
 800843c:	2120      	movs	r1, #32
 800843e:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8008440:	2300      	movs	r3, #0
 8008442:	e000      	b.n	8008446 <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 8008444:	2302      	movs	r3, #2
  }
}
 8008446:	0018      	movs	r0, r3
 8008448:	46bd      	mov	sp, r7
 800844a:	b008      	add	sp, #32
 800844c:	bd80      	pop	{r7, pc}
 800844e:	46c0      	nop			@ (mov r8, r8)
 8008450:	000001ff 	.word	0x000001ff

08008454 <_strtol_l.isra.0>:
 8008454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008456:	b085      	sub	sp, #20
 8008458:	0017      	movs	r7, r2
 800845a:	001e      	movs	r6, r3
 800845c:	9003      	str	r0, [sp, #12]
 800845e:	9101      	str	r1, [sp, #4]
 8008460:	2b24      	cmp	r3, #36	@ 0x24
 8008462:	d823      	bhi.n	80084ac <_strtol_l.isra.0+0x58>
 8008464:	000c      	movs	r4, r1
 8008466:	2b01      	cmp	r3, #1
 8008468:	d020      	beq.n	80084ac <_strtol_l.isra.0+0x58>
 800846a:	4b3d      	ldr	r3, [pc, #244]	@ (8008560 <_strtol_l.isra.0+0x10c>)
 800846c:	2208      	movs	r2, #8
 800846e:	469c      	mov	ip, r3
 8008470:	0023      	movs	r3, r4
 8008472:	4661      	mov	r1, ip
 8008474:	781d      	ldrb	r5, [r3, #0]
 8008476:	3401      	adds	r4, #1
 8008478:	5d48      	ldrb	r0, [r1, r5]
 800847a:	0001      	movs	r1, r0
 800847c:	4011      	ands	r1, r2
 800847e:	4210      	tst	r0, r2
 8008480:	d1f6      	bne.n	8008470 <_strtol_l.isra.0+0x1c>
 8008482:	2d2d      	cmp	r5, #45	@ 0x2d
 8008484:	d119      	bne.n	80084ba <_strtol_l.isra.0+0x66>
 8008486:	7825      	ldrb	r5, [r4, #0]
 8008488:	1c9c      	adds	r4, r3, #2
 800848a:	2301      	movs	r3, #1
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	2210      	movs	r2, #16
 8008490:	0033      	movs	r3, r6
 8008492:	4393      	bics	r3, r2
 8008494:	d11d      	bne.n	80084d2 <_strtol_l.isra.0+0x7e>
 8008496:	2d30      	cmp	r5, #48	@ 0x30
 8008498:	d115      	bne.n	80084c6 <_strtol_l.isra.0+0x72>
 800849a:	2120      	movs	r1, #32
 800849c:	7823      	ldrb	r3, [r4, #0]
 800849e:	438b      	bics	r3, r1
 80084a0:	2b58      	cmp	r3, #88	@ 0x58
 80084a2:	d110      	bne.n	80084c6 <_strtol_l.isra.0+0x72>
 80084a4:	7865      	ldrb	r5, [r4, #1]
 80084a6:	3402      	adds	r4, #2
 80084a8:	2610      	movs	r6, #16
 80084aa:	e012      	b.n	80084d2 <_strtol_l.isra.0+0x7e>
 80084ac:	f000 f8f6 	bl	800869c <__errno>
 80084b0:	2316      	movs	r3, #22
 80084b2:	6003      	str	r3, [r0, #0]
 80084b4:	2000      	movs	r0, #0
 80084b6:	b005      	add	sp, #20
 80084b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084ba:	9100      	str	r1, [sp, #0]
 80084bc:	2d2b      	cmp	r5, #43	@ 0x2b
 80084be:	d1e6      	bne.n	800848e <_strtol_l.isra.0+0x3a>
 80084c0:	7825      	ldrb	r5, [r4, #0]
 80084c2:	1c9c      	adds	r4, r3, #2
 80084c4:	e7e3      	b.n	800848e <_strtol_l.isra.0+0x3a>
 80084c6:	2e00      	cmp	r6, #0
 80084c8:	d1ee      	bne.n	80084a8 <_strtol_l.isra.0+0x54>
 80084ca:	360a      	adds	r6, #10
 80084cc:	2d30      	cmp	r5, #48	@ 0x30
 80084ce:	d100      	bne.n	80084d2 <_strtol_l.isra.0+0x7e>
 80084d0:	3e02      	subs	r6, #2
 80084d2:	4a24      	ldr	r2, [pc, #144]	@ (8008564 <_strtol_l.isra.0+0x110>)
 80084d4:	9b00      	ldr	r3, [sp, #0]
 80084d6:	4694      	mov	ip, r2
 80084d8:	4463      	add	r3, ip
 80084da:	0031      	movs	r1, r6
 80084dc:	0018      	movs	r0, r3
 80084de:	9302      	str	r3, [sp, #8]
 80084e0:	f7f7 feaa 	bl	8000238 <__aeabi_uidivmod>
 80084e4:	2200      	movs	r2, #0
 80084e6:	4684      	mov	ip, r0
 80084e8:	0010      	movs	r0, r2
 80084ea:	002b      	movs	r3, r5
 80084ec:	3b30      	subs	r3, #48	@ 0x30
 80084ee:	2b09      	cmp	r3, #9
 80084f0:	d811      	bhi.n	8008516 <_strtol_l.isra.0+0xc2>
 80084f2:	001d      	movs	r5, r3
 80084f4:	42ae      	cmp	r6, r5
 80084f6:	dd1d      	ble.n	8008534 <_strtol_l.isra.0+0xe0>
 80084f8:	1c53      	adds	r3, r2, #1
 80084fa:	d009      	beq.n	8008510 <_strtol_l.isra.0+0xbc>
 80084fc:	2201      	movs	r2, #1
 80084fe:	4252      	negs	r2, r2
 8008500:	4584      	cmp	ip, r0
 8008502:	d305      	bcc.n	8008510 <_strtol_l.isra.0+0xbc>
 8008504:	d101      	bne.n	800850a <_strtol_l.isra.0+0xb6>
 8008506:	42a9      	cmp	r1, r5
 8008508:	db11      	blt.n	800852e <_strtol_l.isra.0+0xda>
 800850a:	2201      	movs	r2, #1
 800850c:	4370      	muls	r0, r6
 800850e:	1828      	adds	r0, r5, r0
 8008510:	7825      	ldrb	r5, [r4, #0]
 8008512:	3401      	adds	r4, #1
 8008514:	e7e9      	b.n	80084ea <_strtol_l.isra.0+0x96>
 8008516:	002b      	movs	r3, r5
 8008518:	3b41      	subs	r3, #65	@ 0x41
 800851a:	2b19      	cmp	r3, #25
 800851c:	d801      	bhi.n	8008522 <_strtol_l.isra.0+0xce>
 800851e:	3d37      	subs	r5, #55	@ 0x37
 8008520:	e7e8      	b.n	80084f4 <_strtol_l.isra.0+0xa0>
 8008522:	002b      	movs	r3, r5
 8008524:	3b61      	subs	r3, #97	@ 0x61
 8008526:	2b19      	cmp	r3, #25
 8008528:	d804      	bhi.n	8008534 <_strtol_l.isra.0+0xe0>
 800852a:	3d57      	subs	r5, #87	@ 0x57
 800852c:	e7e2      	b.n	80084f4 <_strtol_l.isra.0+0xa0>
 800852e:	2201      	movs	r2, #1
 8008530:	4252      	negs	r2, r2
 8008532:	e7ed      	b.n	8008510 <_strtol_l.isra.0+0xbc>
 8008534:	1c53      	adds	r3, r2, #1
 8008536:	d108      	bne.n	800854a <_strtol_l.isra.0+0xf6>
 8008538:	2322      	movs	r3, #34	@ 0x22
 800853a:	9a03      	ldr	r2, [sp, #12]
 800853c:	9802      	ldr	r0, [sp, #8]
 800853e:	6013      	str	r3, [r2, #0]
 8008540:	2f00      	cmp	r7, #0
 8008542:	d0b8      	beq.n	80084b6 <_strtol_l.isra.0+0x62>
 8008544:	1e63      	subs	r3, r4, #1
 8008546:	9301      	str	r3, [sp, #4]
 8008548:	e007      	b.n	800855a <_strtol_l.isra.0+0x106>
 800854a:	9b00      	ldr	r3, [sp, #0]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d000      	beq.n	8008552 <_strtol_l.isra.0+0xfe>
 8008550:	4240      	negs	r0, r0
 8008552:	2f00      	cmp	r7, #0
 8008554:	d0af      	beq.n	80084b6 <_strtol_l.isra.0+0x62>
 8008556:	2a00      	cmp	r2, #0
 8008558:	d1f4      	bne.n	8008544 <_strtol_l.isra.0+0xf0>
 800855a:	9b01      	ldr	r3, [sp, #4]
 800855c:	603b      	str	r3, [r7, #0]
 800855e:	e7aa      	b.n	80084b6 <_strtol_l.isra.0+0x62>
 8008560:	0800a2a5 	.word	0x0800a2a5
 8008564:	7fffffff 	.word	0x7fffffff

08008568 <strtol>:
 8008568:	b510      	push	{r4, lr}
 800856a:	4c04      	ldr	r4, [pc, #16]	@ (800857c <strtol+0x14>)
 800856c:	0013      	movs	r3, r2
 800856e:	000a      	movs	r2, r1
 8008570:	0001      	movs	r1, r0
 8008572:	6820      	ldr	r0, [r4, #0]
 8008574:	f7ff ff6e 	bl	8008454 <_strtol_l.isra.0>
 8008578:	bd10      	pop	{r4, pc}
 800857a:	46c0      	nop			@ (mov r8, r8)
 800857c:	20000050 	.word	0x20000050

08008580 <sniprintf>:
 8008580:	b40c      	push	{r2, r3}
 8008582:	b530      	push	{r4, r5, lr}
 8008584:	4b18      	ldr	r3, [pc, #96]	@ (80085e8 <sniprintf+0x68>)
 8008586:	000c      	movs	r4, r1
 8008588:	681d      	ldr	r5, [r3, #0]
 800858a:	b09d      	sub	sp, #116	@ 0x74
 800858c:	2900      	cmp	r1, #0
 800858e:	da08      	bge.n	80085a2 <sniprintf+0x22>
 8008590:	238b      	movs	r3, #139	@ 0x8b
 8008592:	2001      	movs	r0, #1
 8008594:	602b      	str	r3, [r5, #0]
 8008596:	4240      	negs	r0, r0
 8008598:	b01d      	add	sp, #116	@ 0x74
 800859a:	bc30      	pop	{r4, r5}
 800859c:	bc08      	pop	{r3}
 800859e:	b002      	add	sp, #8
 80085a0:	4718      	bx	r3
 80085a2:	2382      	movs	r3, #130	@ 0x82
 80085a4:	466a      	mov	r2, sp
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	8293      	strh	r3, [r2, #20]
 80085aa:	2300      	movs	r3, #0
 80085ac:	9002      	str	r0, [sp, #8]
 80085ae:	931b      	str	r3, [sp, #108]	@ 0x6c
 80085b0:	9006      	str	r0, [sp, #24]
 80085b2:	4299      	cmp	r1, r3
 80085b4:	d000      	beq.n	80085b8 <sniprintf+0x38>
 80085b6:	1e4b      	subs	r3, r1, #1
 80085b8:	9304      	str	r3, [sp, #16]
 80085ba:	9307      	str	r3, [sp, #28]
 80085bc:	2301      	movs	r3, #1
 80085be:	466a      	mov	r2, sp
 80085c0:	425b      	negs	r3, r3
 80085c2:	82d3      	strh	r3, [r2, #22]
 80085c4:	0028      	movs	r0, r5
 80085c6:	ab21      	add	r3, sp, #132	@ 0x84
 80085c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80085ca:	a902      	add	r1, sp, #8
 80085cc:	9301      	str	r3, [sp, #4]
 80085ce:	f000 f9ed 	bl	80089ac <_svfiprintf_r>
 80085d2:	1c43      	adds	r3, r0, #1
 80085d4:	da01      	bge.n	80085da <sniprintf+0x5a>
 80085d6:	238b      	movs	r3, #139	@ 0x8b
 80085d8:	602b      	str	r3, [r5, #0]
 80085da:	2c00      	cmp	r4, #0
 80085dc:	d0dc      	beq.n	8008598 <sniprintf+0x18>
 80085de:	2200      	movs	r2, #0
 80085e0:	9b02      	ldr	r3, [sp, #8]
 80085e2:	701a      	strb	r2, [r3, #0]
 80085e4:	e7d8      	b.n	8008598 <sniprintf+0x18>
 80085e6:	46c0      	nop			@ (mov r8, r8)
 80085e8:	20000050 	.word	0x20000050

080085ec <_vsniprintf_r>:
 80085ec:	b530      	push	{r4, r5, lr}
 80085ee:	0005      	movs	r5, r0
 80085f0:	0014      	movs	r4, r2
 80085f2:	0008      	movs	r0, r1
 80085f4:	001a      	movs	r2, r3
 80085f6:	b09b      	sub	sp, #108	@ 0x6c
 80085f8:	2c00      	cmp	r4, #0
 80085fa:	da05      	bge.n	8008608 <_vsniprintf_r+0x1c>
 80085fc:	238b      	movs	r3, #139	@ 0x8b
 80085fe:	2001      	movs	r0, #1
 8008600:	602b      	str	r3, [r5, #0]
 8008602:	4240      	negs	r0, r0
 8008604:	b01b      	add	sp, #108	@ 0x6c
 8008606:	bd30      	pop	{r4, r5, pc}
 8008608:	2382      	movs	r3, #130	@ 0x82
 800860a:	4669      	mov	r1, sp
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	818b      	strh	r3, [r1, #12]
 8008610:	2100      	movs	r1, #0
 8008612:	9000      	str	r0, [sp, #0]
 8008614:	9119      	str	r1, [sp, #100]	@ 0x64
 8008616:	9004      	str	r0, [sp, #16]
 8008618:	428c      	cmp	r4, r1
 800861a:	d000      	beq.n	800861e <_vsniprintf_r+0x32>
 800861c:	1e61      	subs	r1, r4, #1
 800861e:	2301      	movs	r3, #1
 8008620:	9102      	str	r1, [sp, #8]
 8008622:	9105      	str	r1, [sp, #20]
 8008624:	4669      	mov	r1, sp
 8008626:	425b      	negs	r3, r3
 8008628:	81cb      	strh	r3, [r1, #14]
 800862a:	0028      	movs	r0, r5
 800862c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800862e:	f000 f9bd 	bl	80089ac <_svfiprintf_r>
 8008632:	1c43      	adds	r3, r0, #1
 8008634:	da01      	bge.n	800863a <_vsniprintf_r+0x4e>
 8008636:	238b      	movs	r3, #139	@ 0x8b
 8008638:	602b      	str	r3, [r5, #0]
 800863a:	2c00      	cmp	r4, #0
 800863c:	d0e2      	beq.n	8008604 <_vsniprintf_r+0x18>
 800863e:	2200      	movs	r2, #0
 8008640:	9b00      	ldr	r3, [sp, #0]
 8008642:	701a      	strb	r2, [r3, #0]
 8008644:	e7de      	b.n	8008604 <_vsniprintf_r+0x18>
	...

08008648 <vsniprintf>:
 8008648:	b513      	push	{r0, r1, r4, lr}
 800864a:	4c04      	ldr	r4, [pc, #16]	@ (800865c <vsniprintf+0x14>)
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	0013      	movs	r3, r2
 8008650:	000a      	movs	r2, r1
 8008652:	0001      	movs	r1, r0
 8008654:	6820      	ldr	r0, [r4, #0]
 8008656:	f7ff ffc9 	bl	80085ec <_vsniprintf_r>
 800865a:	bd16      	pop	{r1, r2, r4, pc}
 800865c:	20000050 	.word	0x20000050

08008660 <memset>:
 8008660:	0003      	movs	r3, r0
 8008662:	1882      	adds	r2, r0, r2
 8008664:	4293      	cmp	r3, r2
 8008666:	d100      	bne.n	800866a <memset+0xa>
 8008668:	4770      	bx	lr
 800866a:	7019      	strb	r1, [r3, #0]
 800866c:	3301      	adds	r3, #1
 800866e:	e7f9      	b.n	8008664 <memset+0x4>

08008670 <strstr>:
 8008670:	780a      	ldrb	r2, [r1, #0]
 8008672:	b530      	push	{r4, r5, lr}
 8008674:	2a00      	cmp	r2, #0
 8008676:	d10c      	bne.n	8008692 <strstr+0x22>
 8008678:	bd30      	pop	{r4, r5, pc}
 800867a:	429a      	cmp	r2, r3
 800867c:	d108      	bne.n	8008690 <strstr+0x20>
 800867e:	2301      	movs	r3, #1
 8008680:	5ccc      	ldrb	r4, [r1, r3]
 8008682:	2c00      	cmp	r4, #0
 8008684:	d0f8      	beq.n	8008678 <strstr+0x8>
 8008686:	5cc5      	ldrb	r5, [r0, r3]
 8008688:	42a5      	cmp	r5, r4
 800868a:	d101      	bne.n	8008690 <strstr+0x20>
 800868c:	3301      	adds	r3, #1
 800868e:	e7f7      	b.n	8008680 <strstr+0x10>
 8008690:	3001      	adds	r0, #1
 8008692:	7803      	ldrb	r3, [r0, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d1f0      	bne.n	800867a <strstr+0xa>
 8008698:	0018      	movs	r0, r3
 800869a:	e7ed      	b.n	8008678 <strstr+0x8>

0800869c <__errno>:
 800869c:	4b01      	ldr	r3, [pc, #4]	@ (80086a4 <__errno+0x8>)
 800869e:	6818      	ldr	r0, [r3, #0]
 80086a0:	4770      	bx	lr
 80086a2:	46c0      	nop			@ (mov r8, r8)
 80086a4:	20000050 	.word	0x20000050

080086a8 <__libc_init_array>:
 80086a8:	b570      	push	{r4, r5, r6, lr}
 80086aa:	2600      	movs	r6, #0
 80086ac:	4c0c      	ldr	r4, [pc, #48]	@ (80086e0 <__libc_init_array+0x38>)
 80086ae:	4d0d      	ldr	r5, [pc, #52]	@ (80086e4 <__libc_init_array+0x3c>)
 80086b0:	1b64      	subs	r4, r4, r5
 80086b2:	10a4      	asrs	r4, r4, #2
 80086b4:	42a6      	cmp	r6, r4
 80086b6:	d109      	bne.n	80086cc <__libc_init_array+0x24>
 80086b8:	2600      	movs	r6, #0
 80086ba:	f000 fc61 	bl	8008f80 <_init>
 80086be:	4c0a      	ldr	r4, [pc, #40]	@ (80086e8 <__libc_init_array+0x40>)
 80086c0:	4d0a      	ldr	r5, [pc, #40]	@ (80086ec <__libc_init_array+0x44>)
 80086c2:	1b64      	subs	r4, r4, r5
 80086c4:	10a4      	asrs	r4, r4, #2
 80086c6:	42a6      	cmp	r6, r4
 80086c8:	d105      	bne.n	80086d6 <__libc_init_array+0x2e>
 80086ca:	bd70      	pop	{r4, r5, r6, pc}
 80086cc:	00b3      	lsls	r3, r6, #2
 80086ce:	58eb      	ldr	r3, [r5, r3]
 80086d0:	4798      	blx	r3
 80086d2:	3601      	adds	r6, #1
 80086d4:	e7ee      	b.n	80086b4 <__libc_init_array+0xc>
 80086d6:	00b3      	lsls	r3, r6, #2
 80086d8:	58eb      	ldr	r3, [r5, r3]
 80086da:	4798      	blx	r3
 80086dc:	3601      	adds	r6, #1
 80086de:	e7f2      	b.n	80086c6 <__libc_init_array+0x1e>
 80086e0:	0800a3e0 	.word	0x0800a3e0
 80086e4:	0800a3e0 	.word	0x0800a3e0
 80086e8:	0800a3e4 	.word	0x0800a3e4
 80086ec:	0800a3e0 	.word	0x0800a3e0

080086f0 <__retarget_lock_acquire_recursive>:
 80086f0:	4770      	bx	lr

080086f2 <__retarget_lock_release_recursive>:
 80086f2:	4770      	bx	lr

080086f4 <_free_r>:
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	0005      	movs	r5, r0
 80086f8:	1e0c      	subs	r4, r1, #0
 80086fa:	d010      	beq.n	800871e <_free_r+0x2a>
 80086fc:	3c04      	subs	r4, #4
 80086fe:	6823      	ldr	r3, [r4, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	da00      	bge.n	8008706 <_free_r+0x12>
 8008704:	18e4      	adds	r4, r4, r3
 8008706:	0028      	movs	r0, r5
 8008708:	f000 f8e0 	bl	80088cc <__malloc_lock>
 800870c:	4a1d      	ldr	r2, [pc, #116]	@ (8008784 <_free_r+0x90>)
 800870e:	6813      	ldr	r3, [r2, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d105      	bne.n	8008720 <_free_r+0x2c>
 8008714:	6063      	str	r3, [r4, #4]
 8008716:	6014      	str	r4, [r2, #0]
 8008718:	0028      	movs	r0, r5
 800871a:	f000 f8df 	bl	80088dc <__malloc_unlock>
 800871e:	bd70      	pop	{r4, r5, r6, pc}
 8008720:	42a3      	cmp	r3, r4
 8008722:	d908      	bls.n	8008736 <_free_r+0x42>
 8008724:	6820      	ldr	r0, [r4, #0]
 8008726:	1821      	adds	r1, r4, r0
 8008728:	428b      	cmp	r3, r1
 800872a:	d1f3      	bne.n	8008714 <_free_r+0x20>
 800872c:	6819      	ldr	r1, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	1809      	adds	r1, r1, r0
 8008732:	6021      	str	r1, [r4, #0]
 8008734:	e7ee      	b.n	8008714 <_free_r+0x20>
 8008736:	001a      	movs	r2, r3
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d001      	beq.n	8008742 <_free_r+0x4e>
 800873e:	42a3      	cmp	r3, r4
 8008740:	d9f9      	bls.n	8008736 <_free_r+0x42>
 8008742:	6811      	ldr	r1, [r2, #0]
 8008744:	1850      	adds	r0, r2, r1
 8008746:	42a0      	cmp	r0, r4
 8008748:	d10b      	bne.n	8008762 <_free_r+0x6e>
 800874a:	6820      	ldr	r0, [r4, #0]
 800874c:	1809      	adds	r1, r1, r0
 800874e:	1850      	adds	r0, r2, r1
 8008750:	6011      	str	r1, [r2, #0]
 8008752:	4283      	cmp	r3, r0
 8008754:	d1e0      	bne.n	8008718 <_free_r+0x24>
 8008756:	6818      	ldr	r0, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	1841      	adds	r1, r0, r1
 800875c:	6011      	str	r1, [r2, #0]
 800875e:	6053      	str	r3, [r2, #4]
 8008760:	e7da      	b.n	8008718 <_free_r+0x24>
 8008762:	42a0      	cmp	r0, r4
 8008764:	d902      	bls.n	800876c <_free_r+0x78>
 8008766:	230c      	movs	r3, #12
 8008768:	602b      	str	r3, [r5, #0]
 800876a:	e7d5      	b.n	8008718 <_free_r+0x24>
 800876c:	6820      	ldr	r0, [r4, #0]
 800876e:	1821      	adds	r1, r4, r0
 8008770:	428b      	cmp	r3, r1
 8008772:	d103      	bne.n	800877c <_free_r+0x88>
 8008774:	6819      	ldr	r1, [r3, #0]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	1809      	adds	r1, r1, r0
 800877a:	6021      	str	r1, [r4, #0]
 800877c:	6063      	str	r3, [r4, #4]
 800877e:	6054      	str	r4, [r2, #4]
 8008780:	e7ca      	b.n	8008718 <_free_r+0x24>
 8008782:	46c0      	nop			@ (mov r8, r8)
 8008784:	20000414 	.word	0x20000414

08008788 <sbrk_aligned>:
 8008788:	b570      	push	{r4, r5, r6, lr}
 800878a:	4e0f      	ldr	r6, [pc, #60]	@ (80087c8 <sbrk_aligned+0x40>)
 800878c:	000d      	movs	r5, r1
 800878e:	6831      	ldr	r1, [r6, #0]
 8008790:	0004      	movs	r4, r0
 8008792:	2900      	cmp	r1, #0
 8008794:	d102      	bne.n	800879c <sbrk_aligned+0x14>
 8008796:	f000 fb95 	bl	8008ec4 <_sbrk_r>
 800879a:	6030      	str	r0, [r6, #0]
 800879c:	0029      	movs	r1, r5
 800879e:	0020      	movs	r0, r4
 80087a0:	f000 fb90 	bl	8008ec4 <_sbrk_r>
 80087a4:	1c43      	adds	r3, r0, #1
 80087a6:	d103      	bne.n	80087b0 <sbrk_aligned+0x28>
 80087a8:	2501      	movs	r5, #1
 80087aa:	426d      	negs	r5, r5
 80087ac:	0028      	movs	r0, r5
 80087ae:	bd70      	pop	{r4, r5, r6, pc}
 80087b0:	2303      	movs	r3, #3
 80087b2:	1cc5      	adds	r5, r0, #3
 80087b4:	439d      	bics	r5, r3
 80087b6:	42a8      	cmp	r0, r5
 80087b8:	d0f8      	beq.n	80087ac <sbrk_aligned+0x24>
 80087ba:	1a29      	subs	r1, r5, r0
 80087bc:	0020      	movs	r0, r4
 80087be:	f000 fb81 	bl	8008ec4 <_sbrk_r>
 80087c2:	3001      	adds	r0, #1
 80087c4:	d1f2      	bne.n	80087ac <sbrk_aligned+0x24>
 80087c6:	e7ef      	b.n	80087a8 <sbrk_aligned+0x20>
 80087c8:	20000410 	.word	0x20000410

080087cc <_malloc_r>:
 80087cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ce:	2203      	movs	r2, #3
 80087d0:	1ccb      	adds	r3, r1, #3
 80087d2:	4393      	bics	r3, r2
 80087d4:	3308      	adds	r3, #8
 80087d6:	0005      	movs	r5, r0
 80087d8:	001f      	movs	r7, r3
 80087da:	2b0c      	cmp	r3, #12
 80087dc:	d234      	bcs.n	8008848 <_malloc_r+0x7c>
 80087de:	270c      	movs	r7, #12
 80087e0:	42b9      	cmp	r1, r7
 80087e2:	d833      	bhi.n	800884c <_malloc_r+0x80>
 80087e4:	0028      	movs	r0, r5
 80087e6:	f000 f871 	bl	80088cc <__malloc_lock>
 80087ea:	4e37      	ldr	r6, [pc, #220]	@ (80088c8 <_malloc_r+0xfc>)
 80087ec:	6833      	ldr	r3, [r6, #0]
 80087ee:	001c      	movs	r4, r3
 80087f0:	2c00      	cmp	r4, #0
 80087f2:	d12f      	bne.n	8008854 <_malloc_r+0x88>
 80087f4:	0039      	movs	r1, r7
 80087f6:	0028      	movs	r0, r5
 80087f8:	f7ff ffc6 	bl	8008788 <sbrk_aligned>
 80087fc:	0004      	movs	r4, r0
 80087fe:	1c43      	adds	r3, r0, #1
 8008800:	d15f      	bne.n	80088c2 <_malloc_r+0xf6>
 8008802:	6834      	ldr	r4, [r6, #0]
 8008804:	9400      	str	r4, [sp, #0]
 8008806:	9b00      	ldr	r3, [sp, #0]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d14a      	bne.n	80088a2 <_malloc_r+0xd6>
 800880c:	2c00      	cmp	r4, #0
 800880e:	d052      	beq.n	80088b6 <_malloc_r+0xea>
 8008810:	6823      	ldr	r3, [r4, #0]
 8008812:	0028      	movs	r0, r5
 8008814:	18e3      	adds	r3, r4, r3
 8008816:	9900      	ldr	r1, [sp, #0]
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	f000 fb53 	bl	8008ec4 <_sbrk_r>
 800881e:	9b01      	ldr	r3, [sp, #4]
 8008820:	4283      	cmp	r3, r0
 8008822:	d148      	bne.n	80088b6 <_malloc_r+0xea>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	0028      	movs	r0, r5
 8008828:	1aff      	subs	r7, r7, r3
 800882a:	0039      	movs	r1, r7
 800882c:	f7ff ffac 	bl	8008788 <sbrk_aligned>
 8008830:	3001      	adds	r0, #1
 8008832:	d040      	beq.n	80088b6 <_malloc_r+0xea>
 8008834:	6823      	ldr	r3, [r4, #0]
 8008836:	19db      	adds	r3, r3, r7
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	6833      	ldr	r3, [r6, #0]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	2a00      	cmp	r2, #0
 8008840:	d133      	bne.n	80088aa <_malloc_r+0xde>
 8008842:	9b00      	ldr	r3, [sp, #0]
 8008844:	6033      	str	r3, [r6, #0]
 8008846:	e019      	b.n	800887c <_malloc_r+0xb0>
 8008848:	2b00      	cmp	r3, #0
 800884a:	dac9      	bge.n	80087e0 <_malloc_r+0x14>
 800884c:	230c      	movs	r3, #12
 800884e:	602b      	str	r3, [r5, #0]
 8008850:	2000      	movs	r0, #0
 8008852:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008854:	6821      	ldr	r1, [r4, #0]
 8008856:	1bc9      	subs	r1, r1, r7
 8008858:	d420      	bmi.n	800889c <_malloc_r+0xd0>
 800885a:	290b      	cmp	r1, #11
 800885c:	d90a      	bls.n	8008874 <_malloc_r+0xa8>
 800885e:	19e2      	adds	r2, r4, r7
 8008860:	6027      	str	r7, [r4, #0]
 8008862:	42a3      	cmp	r3, r4
 8008864:	d104      	bne.n	8008870 <_malloc_r+0xa4>
 8008866:	6032      	str	r2, [r6, #0]
 8008868:	6863      	ldr	r3, [r4, #4]
 800886a:	6011      	str	r1, [r2, #0]
 800886c:	6053      	str	r3, [r2, #4]
 800886e:	e005      	b.n	800887c <_malloc_r+0xb0>
 8008870:	605a      	str	r2, [r3, #4]
 8008872:	e7f9      	b.n	8008868 <_malloc_r+0x9c>
 8008874:	6862      	ldr	r2, [r4, #4]
 8008876:	42a3      	cmp	r3, r4
 8008878:	d10e      	bne.n	8008898 <_malloc_r+0xcc>
 800887a:	6032      	str	r2, [r6, #0]
 800887c:	0028      	movs	r0, r5
 800887e:	f000 f82d 	bl	80088dc <__malloc_unlock>
 8008882:	0020      	movs	r0, r4
 8008884:	2207      	movs	r2, #7
 8008886:	300b      	adds	r0, #11
 8008888:	1d23      	adds	r3, r4, #4
 800888a:	4390      	bics	r0, r2
 800888c:	1ac2      	subs	r2, r0, r3
 800888e:	4298      	cmp	r0, r3
 8008890:	d0df      	beq.n	8008852 <_malloc_r+0x86>
 8008892:	1a1b      	subs	r3, r3, r0
 8008894:	50a3      	str	r3, [r4, r2]
 8008896:	e7dc      	b.n	8008852 <_malloc_r+0x86>
 8008898:	605a      	str	r2, [r3, #4]
 800889a:	e7ef      	b.n	800887c <_malloc_r+0xb0>
 800889c:	0023      	movs	r3, r4
 800889e:	6864      	ldr	r4, [r4, #4]
 80088a0:	e7a6      	b.n	80087f0 <_malloc_r+0x24>
 80088a2:	9c00      	ldr	r4, [sp, #0]
 80088a4:	6863      	ldr	r3, [r4, #4]
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	e7ad      	b.n	8008806 <_malloc_r+0x3a>
 80088aa:	001a      	movs	r2, r3
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	42a3      	cmp	r3, r4
 80088b0:	d1fb      	bne.n	80088aa <_malloc_r+0xde>
 80088b2:	2300      	movs	r3, #0
 80088b4:	e7da      	b.n	800886c <_malloc_r+0xa0>
 80088b6:	230c      	movs	r3, #12
 80088b8:	0028      	movs	r0, r5
 80088ba:	602b      	str	r3, [r5, #0]
 80088bc:	f000 f80e 	bl	80088dc <__malloc_unlock>
 80088c0:	e7c6      	b.n	8008850 <_malloc_r+0x84>
 80088c2:	6007      	str	r7, [r0, #0]
 80088c4:	e7da      	b.n	800887c <_malloc_r+0xb0>
 80088c6:	46c0      	nop			@ (mov r8, r8)
 80088c8:	20000414 	.word	0x20000414

080088cc <__malloc_lock>:
 80088cc:	b510      	push	{r4, lr}
 80088ce:	4802      	ldr	r0, [pc, #8]	@ (80088d8 <__malloc_lock+0xc>)
 80088d0:	f7ff ff0e 	bl	80086f0 <__retarget_lock_acquire_recursive>
 80088d4:	bd10      	pop	{r4, pc}
 80088d6:	46c0      	nop			@ (mov r8, r8)
 80088d8:	2000040c 	.word	0x2000040c

080088dc <__malloc_unlock>:
 80088dc:	b510      	push	{r4, lr}
 80088de:	4802      	ldr	r0, [pc, #8]	@ (80088e8 <__malloc_unlock+0xc>)
 80088e0:	f7ff ff07 	bl	80086f2 <__retarget_lock_release_recursive>
 80088e4:	bd10      	pop	{r4, pc}
 80088e6:	46c0      	nop			@ (mov r8, r8)
 80088e8:	2000040c 	.word	0x2000040c

080088ec <__ssputs_r>:
 80088ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088ee:	688e      	ldr	r6, [r1, #8]
 80088f0:	b085      	sub	sp, #20
 80088f2:	001f      	movs	r7, r3
 80088f4:	000c      	movs	r4, r1
 80088f6:	680b      	ldr	r3, [r1, #0]
 80088f8:	9002      	str	r0, [sp, #8]
 80088fa:	9203      	str	r2, [sp, #12]
 80088fc:	42be      	cmp	r6, r7
 80088fe:	d830      	bhi.n	8008962 <__ssputs_r+0x76>
 8008900:	210c      	movs	r1, #12
 8008902:	5e62      	ldrsh	r2, [r4, r1]
 8008904:	2190      	movs	r1, #144	@ 0x90
 8008906:	00c9      	lsls	r1, r1, #3
 8008908:	420a      	tst	r2, r1
 800890a:	d028      	beq.n	800895e <__ssputs_r+0x72>
 800890c:	2003      	movs	r0, #3
 800890e:	6921      	ldr	r1, [r4, #16]
 8008910:	1a5b      	subs	r3, r3, r1
 8008912:	9301      	str	r3, [sp, #4]
 8008914:	6963      	ldr	r3, [r4, #20]
 8008916:	4343      	muls	r3, r0
 8008918:	9801      	ldr	r0, [sp, #4]
 800891a:	0fdd      	lsrs	r5, r3, #31
 800891c:	18ed      	adds	r5, r5, r3
 800891e:	1c7b      	adds	r3, r7, #1
 8008920:	181b      	adds	r3, r3, r0
 8008922:	106d      	asrs	r5, r5, #1
 8008924:	42ab      	cmp	r3, r5
 8008926:	d900      	bls.n	800892a <__ssputs_r+0x3e>
 8008928:	001d      	movs	r5, r3
 800892a:	0552      	lsls	r2, r2, #21
 800892c:	d528      	bpl.n	8008980 <__ssputs_r+0x94>
 800892e:	0029      	movs	r1, r5
 8008930:	9802      	ldr	r0, [sp, #8]
 8008932:	f7ff ff4b 	bl	80087cc <_malloc_r>
 8008936:	1e06      	subs	r6, r0, #0
 8008938:	d02c      	beq.n	8008994 <__ssputs_r+0xa8>
 800893a:	9a01      	ldr	r2, [sp, #4]
 800893c:	6921      	ldr	r1, [r4, #16]
 800893e:	f000 fade 	bl	8008efe <memcpy>
 8008942:	89a2      	ldrh	r2, [r4, #12]
 8008944:	4b18      	ldr	r3, [pc, #96]	@ (80089a8 <__ssputs_r+0xbc>)
 8008946:	401a      	ands	r2, r3
 8008948:	2380      	movs	r3, #128	@ 0x80
 800894a:	4313      	orrs	r3, r2
 800894c:	81a3      	strh	r3, [r4, #12]
 800894e:	9b01      	ldr	r3, [sp, #4]
 8008950:	6126      	str	r6, [r4, #16]
 8008952:	18f6      	adds	r6, r6, r3
 8008954:	6026      	str	r6, [r4, #0]
 8008956:	003e      	movs	r6, r7
 8008958:	6165      	str	r5, [r4, #20]
 800895a:	1aed      	subs	r5, r5, r3
 800895c:	60a5      	str	r5, [r4, #8]
 800895e:	42be      	cmp	r6, r7
 8008960:	d900      	bls.n	8008964 <__ssputs_r+0x78>
 8008962:	003e      	movs	r6, r7
 8008964:	0032      	movs	r2, r6
 8008966:	9903      	ldr	r1, [sp, #12]
 8008968:	6820      	ldr	r0, [r4, #0]
 800896a:	f000 fa99 	bl	8008ea0 <memmove>
 800896e:	2000      	movs	r0, #0
 8008970:	68a3      	ldr	r3, [r4, #8]
 8008972:	1b9b      	subs	r3, r3, r6
 8008974:	60a3      	str	r3, [r4, #8]
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	199b      	adds	r3, r3, r6
 800897a:	6023      	str	r3, [r4, #0]
 800897c:	b005      	add	sp, #20
 800897e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008980:	002a      	movs	r2, r5
 8008982:	9802      	ldr	r0, [sp, #8]
 8008984:	f000 fac4 	bl	8008f10 <_realloc_r>
 8008988:	1e06      	subs	r6, r0, #0
 800898a:	d1e0      	bne.n	800894e <__ssputs_r+0x62>
 800898c:	6921      	ldr	r1, [r4, #16]
 800898e:	9802      	ldr	r0, [sp, #8]
 8008990:	f7ff feb0 	bl	80086f4 <_free_r>
 8008994:	230c      	movs	r3, #12
 8008996:	2001      	movs	r0, #1
 8008998:	9a02      	ldr	r2, [sp, #8]
 800899a:	4240      	negs	r0, r0
 800899c:	6013      	str	r3, [r2, #0]
 800899e:	89a2      	ldrh	r2, [r4, #12]
 80089a0:	3334      	adds	r3, #52	@ 0x34
 80089a2:	4313      	orrs	r3, r2
 80089a4:	81a3      	strh	r3, [r4, #12]
 80089a6:	e7e9      	b.n	800897c <__ssputs_r+0x90>
 80089a8:	fffffb7f 	.word	0xfffffb7f

080089ac <_svfiprintf_r>:
 80089ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ae:	b0a1      	sub	sp, #132	@ 0x84
 80089b0:	9003      	str	r0, [sp, #12]
 80089b2:	001d      	movs	r5, r3
 80089b4:	898b      	ldrh	r3, [r1, #12]
 80089b6:	000f      	movs	r7, r1
 80089b8:	0016      	movs	r6, r2
 80089ba:	061b      	lsls	r3, r3, #24
 80089bc:	d511      	bpl.n	80089e2 <_svfiprintf_r+0x36>
 80089be:	690b      	ldr	r3, [r1, #16]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10e      	bne.n	80089e2 <_svfiprintf_r+0x36>
 80089c4:	2140      	movs	r1, #64	@ 0x40
 80089c6:	f7ff ff01 	bl	80087cc <_malloc_r>
 80089ca:	6038      	str	r0, [r7, #0]
 80089cc:	6138      	str	r0, [r7, #16]
 80089ce:	2800      	cmp	r0, #0
 80089d0:	d105      	bne.n	80089de <_svfiprintf_r+0x32>
 80089d2:	230c      	movs	r3, #12
 80089d4:	9a03      	ldr	r2, [sp, #12]
 80089d6:	6013      	str	r3, [r2, #0]
 80089d8:	2001      	movs	r0, #1
 80089da:	4240      	negs	r0, r0
 80089dc:	e0cf      	b.n	8008b7e <_svfiprintf_r+0x1d2>
 80089de:	2340      	movs	r3, #64	@ 0x40
 80089e0:	617b      	str	r3, [r7, #20]
 80089e2:	2300      	movs	r3, #0
 80089e4:	ac08      	add	r4, sp, #32
 80089e6:	6163      	str	r3, [r4, #20]
 80089e8:	3320      	adds	r3, #32
 80089ea:	7663      	strb	r3, [r4, #25]
 80089ec:	3310      	adds	r3, #16
 80089ee:	76a3      	strb	r3, [r4, #26]
 80089f0:	9507      	str	r5, [sp, #28]
 80089f2:	0035      	movs	r5, r6
 80089f4:	782b      	ldrb	r3, [r5, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <_svfiprintf_r+0x52>
 80089fa:	2b25      	cmp	r3, #37	@ 0x25
 80089fc:	d148      	bne.n	8008a90 <_svfiprintf_r+0xe4>
 80089fe:	1bab      	subs	r3, r5, r6
 8008a00:	9305      	str	r3, [sp, #20]
 8008a02:	42b5      	cmp	r5, r6
 8008a04:	d00b      	beq.n	8008a1e <_svfiprintf_r+0x72>
 8008a06:	0032      	movs	r2, r6
 8008a08:	0039      	movs	r1, r7
 8008a0a:	9803      	ldr	r0, [sp, #12]
 8008a0c:	f7ff ff6e 	bl	80088ec <__ssputs_r>
 8008a10:	3001      	adds	r0, #1
 8008a12:	d100      	bne.n	8008a16 <_svfiprintf_r+0x6a>
 8008a14:	e0ae      	b.n	8008b74 <_svfiprintf_r+0x1c8>
 8008a16:	6963      	ldr	r3, [r4, #20]
 8008a18:	9a05      	ldr	r2, [sp, #20]
 8008a1a:	189b      	adds	r3, r3, r2
 8008a1c:	6163      	str	r3, [r4, #20]
 8008a1e:	782b      	ldrb	r3, [r5, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d100      	bne.n	8008a26 <_svfiprintf_r+0x7a>
 8008a24:	e0a6      	b.n	8008b74 <_svfiprintf_r+0x1c8>
 8008a26:	2201      	movs	r2, #1
 8008a28:	2300      	movs	r3, #0
 8008a2a:	4252      	negs	r2, r2
 8008a2c:	6062      	str	r2, [r4, #4]
 8008a2e:	a904      	add	r1, sp, #16
 8008a30:	3254      	adds	r2, #84	@ 0x54
 8008a32:	1852      	adds	r2, r2, r1
 8008a34:	1c6e      	adds	r6, r5, #1
 8008a36:	6023      	str	r3, [r4, #0]
 8008a38:	60e3      	str	r3, [r4, #12]
 8008a3a:	60a3      	str	r3, [r4, #8]
 8008a3c:	7013      	strb	r3, [r2, #0]
 8008a3e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8008a40:	4b54      	ldr	r3, [pc, #336]	@ (8008b94 <_svfiprintf_r+0x1e8>)
 8008a42:	2205      	movs	r2, #5
 8008a44:	0018      	movs	r0, r3
 8008a46:	7831      	ldrb	r1, [r6, #0]
 8008a48:	9305      	str	r3, [sp, #20]
 8008a4a:	f000 fa4d 	bl	8008ee8 <memchr>
 8008a4e:	1c75      	adds	r5, r6, #1
 8008a50:	2800      	cmp	r0, #0
 8008a52:	d11f      	bne.n	8008a94 <_svfiprintf_r+0xe8>
 8008a54:	6822      	ldr	r2, [r4, #0]
 8008a56:	06d3      	lsls	r3, r2, #27
 8008a58:	d504      	bpl.n	8008a64 <_svfiprintf_r+0xb8>
 8008a5a:	2353      	movs	r3, #83	@ 0x53
 8008a5c:	a904      	add	r1, sp, #16
 8008a5e:	185b      	adds	r3, r3, r1
 8008a60:	2120      	movs	r1, #32
 8008a62:	7019      	strb	r1, [r3, #0]
 8008a64:	0713      	lsls	r3, r2, #28
 8008a66:	d504      	bpl.n	8008a72 <_svfiprintf_r+0xc6>
 8008a68:	2353      	movs	r3, #83	@ 0x53
 8008a6a:	a904      	add	r1, sp, #16
 8008a6c:	185b      	adds	r3, r3, r1
 8008a6e:	212b      	movs	r1, #43	@ 0x2b
 8008a70:	7019      	strb	r1, [r3, #0]
 8008a72:	7833      	ldrb	r3, [r6, #0]
 8008a74:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a76:	d016      	beq.n	8008aa6 <_svfiprintf_r+0xfa>
 8008a78:	0035      	movs	r5, r6
 8008a7a:	2100      	movs	r1, #0
 8008a7c:	200a      	movs	r0, #10
 8008a7e:	68e3      	ldr	r3, [r4, #12]
 8008a80:	782a      	ldrb	r2, [r5, #0]
 8008a82:	1c6e      	adds	r6, r5, #1
 8008a84:	3a30      	subs	r2, #48	@ 0x30
 8008a86:	2a09      	cmp	r2, #9
 8008a88:	d950      	bls.n	8008b2c <_svfiprintf_r+0x180>
 8008a8a:	2900      	cmp	r1, #0
 8008a8c:	d111      	bne.n	8008ab2 <_svfiprintf_r+0x106>
 8008a8e:	e017      	b.n	8008ac0 <_svfiprintf_r+0x114>
 8008a90:	3501      	adds	r5, #1
 8008a92:	e7af      	b.n	80089f4 <_svfiprintf_r+0x48>
 8008a94:	9b05      	ldr	r3, [sp, #20]
 8008a96:	6822      	ldr	r2, [r4, #0]
 8008a98:	1ac0      	subs	r0, r0, r3
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	4083      	lsls	r3, r0
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	002e      	movs	r6, r5
 8008aa2:	6023      	str	r3, [r4, #0]
 8008aa4:	e7cc      	b.n	8008a40 <_svfiprintf_r+0x94>
 8008aa6:	9b07      	ldr	r3, [sp, #28]
 8008aa8:	1d19      	adds	r1, r3, #4
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	9107      	str	r1, [sp, #28]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	db01      	blt.n	8008ab6 <_svfiprintf_r+0x10a>
 8008ab2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ab4:	e004      	b.n	8008ac0 <_svfiprintf_r+0x114>
 8008ab6:	425b      	negs	r3, r3
 8008ab8:	60e3      	str	r3, [r4, #12]
 8008aba:	2302      	movs	r3, #2
 8008abc:	4313      	orrs	r3, r2
 8008abe:	6023      	str	r3, [r4, #0]
 8008ac0:	782b      	ldrb	r3, [r5, #0]
 8008ac2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ac4:	d10c      	bne.n	8008ae0 <_svfiprintf_r+0x134>
 8008ac6:	786b      	ldrb	r3, [r5, #1]
 8008ac8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aca:	d134      	bne.n	8008b36 <_svfiprintf_r+0x18a>
 8008acc:	9b07      	ldr	r3, [sp, #28]
 8008ace:	3502      	adds	r5, #2
 8008ad0:	1d1a      	adds	r2, r3, #4
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	9207      	str	r2, [sp, #28]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	da01      	bge.n	8008ade <_svfiprintf_r+0x132>
 8008ada:	2301      	movs	r3, #1
 8008adc:	425b      	negs	r3, r3
 8008ade:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ae0:	4e2d      	ldr	r6, [pc, #180]	@ (8008b98 <_svfiprintf_r+0x1ec>)
 8008ae2:	2203      	movs	r2, #3
 8008ae4:	0030      	movs	r0, r6
 8008ae6:	7829      	ldrb	r1, [r5, #0]
 8008ae8:	f000 f9fe 	bl	8008ee8 <memchr>
 8008aec:	2800      	cmp	r0, #0
 8008aee:	d006      	beq.n	8008afe <_svfiprintf_r+0x152>
 8008af0:	2340      	movs	r3, #64	@ 0x40
 8008af2:	1b80      	subs	r0, r0, r6
 8008af4:	4083      	lsls	r3, r0
 8008af6:	6822      	ldr	r2, [r4, #0]
 8008af8:	3501      	adds	r5, #1
 8008afa:	4313      	orrs	r3, r2
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	7829      	ldrb	r1, [r5, #0]
 8008b00:	2206      	movs	r2, #6
 8008b02:	4826      	ldr	r0, [pc, #152]	@ (8008b9c <_svfiprintf_r+0x1f0>)
 8008b04:	1c6e      	adds	r6, r5, #1
 8008b06:	7621      	strb	r1, [r4, #24]
 8008b08:	f000 f9ee 	bl	8008ee8 <memchr>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	d038      	beq.n	8008b82 <_svfiprintf_r+0x1d6>
 8008b10:	4b23      	ldr	r3, [pc, #140]	@ (8008ba0 <_svfiprintf_r+0x1f4>)
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d122      	bne.n	8008b5c <_svfiprintf_r+0x1b0>
 8008b16:	2207      	movs	r2, #7
 8008b18:	9b07      	ldr	r3, [sp, #28]
 8008b1a:	3307      	adds	r3, #7
 8008b1c:	4393      	bics	r3, r2
 8008b1e:	3308      	adds	r3, #8
 8008b20:	9307      	str	r3, [sp, #28]
 8008b22:	6963      	ldr	r3, [r4, #20]
 8008b24:	9a04      	ldr	r2, [sp, #16]
 8008b26:	189b      	adds	r3, r3, r2
 8008b28:	6163      	str	r3, [r4, #20]
 8008b2a:	e762      	b.n	80089f2 <_svfiprintf_r+0x46>
 8008b2c:	4343      	muls	r3, r0
 8008b2e:	0035      	movs	r5, r6
 8008b30:	2101      	movs	r1, #1
 8008b32:	189b      	adds	r3, r3, r2
 8008b34:	e7a4      	b.n	8008a80 <_svfiprintf_r+0xd4>
 8008b36:	2300      	movs	r3, #0
 8008b38:	200a      	movs	r0, #10
 8008b3a:	0019      	movs	r1, r3
 8008b3c:	3501      	adds	r5, #1
 8008b3e:	6063      	str	r3, [r4, #4]
 8008b40:	782a      	ldrb	r2, [r5, #0]
 8008b42:	1c6e      	adds	r6, r5, #1
 8008b44:	3a30      	subs	r2, #48	@ 0x30
 8008b46:	2a09      	cmp	r2, #9
 8008b48:	d903      	bls.n	8008b52 <_svfiprintf_r+0x1a6>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0c8      	beq.n	8008ae0 <_svfiprintf_r+0x134>
 8008b4e:	9109      	str	r1, [sp, #36]	@ 0x24
 8008b50:	e7c6      	b.n	8008ae0 <_svfiprintf_r+0x134>
 8008b52:	4341      	muls	r1, r0
 8008b54:	0035      	movs	r5, r6
 8008b56:	2301      	movs	r3, #1
 8008b58:	1889      	adds	r1, r1, r2
 8008b5a:	e7f1      	b.n	8008b40 <_svfiprintf_r+0x194>
 8008b5c:	aa07      	add	r2, sp, #28
 8008b5e:	9200      	str	r2, [sp, #0]
 8008b60:	0021      	movs	r1, r4
 8008b62:	003a      	movs	r2, r7
 8008b64:	4b0f      	ldr	r3, [pc, #60]	@ (8008ba4 <_svfiprintf_r+0x1f8>)
 8008b66:	9803      	ldr	r0, [sp, #12]
 8008b68:	e000      	b.n	8008b6c <_svfiprintf_r+0x1c0>
 8008b6a:	bf00      	nop
 8008b6c:	9004      	str	r0, [sp, #16]
 8008b6e:	9b04      	ldr	r3, [sp, #16]
 8008b70:	3301      	adds	r3, #1
 8008b72:	d1d6      	bne.n	8008b22 <_svfiprintf_r+0x176>
 8008b74:	89bb      	ldrh	r3, [r7, #12]
 8008b76:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8008b78:	065b      	lsls	r3, r3, #25
 8008b7a:	d500      	bpl.n	8008b7e <_svfiprintf_r+0x1d2>
 8008b7c:	e72c      	b.n	80089d8 <_svfiprintf_r+0x2c>
 8008b7e:	b021      	add	sp, #132	@ 0x84
 8008b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b82:	aa07      	add	r2, sp, #28
 8008b84:	9200      	str	r2, [sp, #0]
 8008b86:	0021      	movs	r1, r4
 8008b88:	003a      	movs	r2, r7
 8008b8a:	4b06      	ldr	r3, [pc, #24]	@ (8008ba4 <_svfiprintf_r+0x1f8>)
 8008b8c:	9803      	ldr	r0, [sp, #12]
 8008b8e:	f000 f87b 	bl	8008c88 <_printf_i>
 8008b92:	e7eb      	b.n	8008b6c <_svfiprintf_r+0x1c0>
 8008b94:	0800a3a5 	.word	0x0800a3a5
 8008b98:	0800a3ab 	.word	0x0800a3ab
 8008b9c:	0800a3af 	.word	0x0800a3af
 8008ba0:	00000000 	.word	0x00000000
 8008ba4:	080088ed 	.word	0x080088ed

08008ba8 <_printf_common>:
 8008ba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008baa:	0016      	movs	r6, r2
 8008bac:	9301      	str	r3, [sp, #4]
 8008bae:	688a      	ldr	r2, [r1, #8]
 8008bb0:	690b      	ldr	r3, [r1, #16]
 8008bb2:	000c      	movs	r4, r1
 8008bb4:	9000      	str	r0, [sp, #0]
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	da00      	bge.n	8008bbc <_printf_common+0x14>
 8008bba:	0013      	movs	r3, r2
 8008bbc:	0022      	movs	r2, r4
 8008bbe:	6033      	str	r3, [r6, #0]
 8008bc0:	3243      	adds	r2, #67	@ 0x43
 8008bc2:	7812      	ldrb	r2, [r2, #0]
 8008bc4:	2a00      	cmp	r2, #0
 8008bc6:	d001      	beq.n	8008bcc <_printf_common+0x24>
 8008bc8:	3301      	adds	r3, #1
 8008bca:	6033      	str	r3, [r6, #0]
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	069b      	lsls	r3, r3, #26
 8008bd0:	d502      	bpl.n	8008bd8 <_printf_common+0x30>
 8008bd2:	6833      	ldr	r3, [r6, #0]
 8008bd4:	3302      	adds	r3, #2
 8008bd6:	6033      	str	r3, [r6, #0]
 8008bd8:	6822      	ldr	r2, [r4, #0]
 8008bda:	2306      	movs	r3, #6
 8008bdc:	0015      	movs	r5, r2
 8008bde:	401d      	ands	r5, r3
 8008be0:	421a      	tst	r2, r3
 8008be2:	d027      	beq.n	8008c34 <_printf_common+0x8c>
 8008be4:	0023      	movs	r3, r4
 8008be6:	3343      	adds	r3, #67	@ 0x43
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	1e5a      	subs	r2, r3, #1
 8008bec:	4193      	sbcs	r3, r2
 8008bee:	6822      	ldr	r2, [r4, #0]
 8008bf0:	0692      	lsls	r2, r2, #26
 8008bf2:	d430      	bmi.n	8008c56 <_printf_common+0xae>
 8008bf4:	0022      	movs	r2, r4
 8008bf6:	9901      	ldr	r1, [sp, #4]
 8008bf8:	9800      	ldr	r0, [sp, #0]
 8008bfa:	9d08      	ldr	r5, [sp, #32]
 8008bfc:	3243      	adds	r2, #67	@ 0x43
 8008bfe:	47a8      	blx	r5
 8008c00:	3001      	adds	r0, #1
 8008c02:	d025      	beq.n	8008c50 <_printf_common+0xa8>
 8008c04:	2206      	movs	r2, #6
 8008c06:	6823      	ldr	r3, [r4, #0]
 8008c08:	2500      	movs	r5, #0
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	2b04      	cmp	r3, #4
 8008c0e:	d105      	bne.n	8008c1c <_printf_common+0x74>
 8008c10:	6833      	ldr	r3, [r6, #0]
 8008c12:	68e5      	ldr	r5, [r4, #12]
 8008c14:	1aed      	subs	r5, r5, r3
 8008c16:	43eb      	mvns	r3, r5
 8008c18:	17db      	asrs	r3, r3, #31
 8008c1a:	401d      	ands	r5, r3
 8008c1c:	68a3      	ldr	r3, [r4, #8]
 8008c1e:	6922      	ldr	r2, [r4, #16]
 8008c20:	4293      	cmp	r3, r2
 8008c22:	dd01      	ble.n	8008c28 <_printf_common+0x80>
 8008c24:	1a9b      	subs	r3, r3, r2
 8008c26:	18ed      	adds	r5, r5, r3
 8008c28:	2600      	movs	r6, #0
 8008c2a:	42b5      	cmp	r5, r6
 8008c2c:	d120      	bne.n	8008c70 <_printf_common+0xc8>
 8008c2e:	2000      	movs	r0, #0
 8008c30:	e010      	b.n	8008c54 <_printf_common+0xac>
 8008c32:	3501      	adds	r5, #1
 8008c34:	68e3      	ldr	r3, [r4, #12]
 8008c36:	6832      	ldr	r2, [r6, #0]
 8008c38:	1a9b      	subs	r3, r3, r2
 8008c3a:	42ab      	cmp	r3, r5
 8008c3c:	ddd2      	ble.n	8008be4 <_printf_common+0x3c>
 8008c3e:	0022      	movs	r2, r4
 8008c40:	2301      	movs	r3, #1
 8008c42:	9901      	ldr	r1, [sp, #4]
 8008c44:	9800      	ldr	r0, [sp, #0]
 8008c46:	9f08      	ldr	r7, [sp, #32]
 8008c48:	3219      	adds	r2, #25
 8008c4a:	47b8      	blx	r7
 8008c4c:	3001      	adds	r0, #1
 8008c4e:	d1f0      	bne.n	8008c32 <_printf_common+0x8a>
 8008c50:	2001      	movs	r0, #1
 8008c52:	4240      	negs	r0, r0
 8008c54:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008c56:	2030      	movs	r0, #48	@ 0x30
 8008c58:	18e1      	adds	r1, r4, r3
 8008c5a:	3143      	adds	r1, #67	@ 0x43
 8008c5c:	7008      	strb	r0, [r1, #0]
 8008c5e:	0021      	movs	r1, r4
 8008c60:	1c5a      	adds	r2, r3, #1
 8008c62:	3145      	adds	r1, #69	@ 0x45
 8008c64:	7809      	ldrb	r1, [r1, #0]
 8008c66:	18a2      	adds	r2, r4, r2
 8008c68:	3243      	adds	r2, #67	@ 0x43
 8008c6a:	3302      	adds	r3, #2
 8008c6c:	7011      	strb	r1, [r2, #0]
 8008c6e:	e7c1      	b.n	8008bf4 <_printf_common+0x4c>
 8008c70:	0022      	movs	r2, r4
 8008c72:	2301      	movs	r3, #1
 8008c74:	9901      	ldr	r1, [sp, #4]
 8008c76:	9800      	ldr	r0, [sp, #0]
 8008c78:	9f08      	ldr	r7, [sp, #32]
 8008c7a:	321a      	adds	r2, #26
 8008c7c:	47b8      	blx	r7
 8008c7e:	3001      	adds	r0, #1
 8008c80:	d0e6      	beq.n	8008c50 <_printf_common+0xa8>
 8008c82:	3601      	adds	r6, #1
 8008c84:	e7d1      	b.n	8008c2a <_printf_common+0x82>
	...

08008c88 <_printf_i>:
 8008c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c8a:	b08b      	sub	sp, #44	@ 0x2c
 8008c8c:	9206      	str	r2, [sp, #24]
 8008c8e:	000a      	movs	r2, r1
 8008c90:	3243      	adds	r2, #67	@ 0x43
 8008c92:	9307      	str	r3, [sp, #28]
 8008c94:	9005      	str	r0, [sp, #20]
 8008c96:	9203      	str	r2, [sp, #12]
 8008c98:	7e0a      	ldrb	r2, [r1, #24]
 8008c9a:	000c      	movs	r4, r1
 8008c9c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c9e:	2a78      	cmp	r2, #120	@ 0x78
 8008ca0:	d809      	bhi.n	8008cb6 <_printf_i+0x2e>
 8008ca2:	2a62      	cmp	r2, #98	@ 0x62
 8008ca4:	d80b      	bhi.n	8008cbe <_printf_i+0x36>
 8008ca6:	2a00      	cmp	r2, #0
 8008ca8:	d100      	bne.n	8008cac <_printf_i+0x24>
 8008caa:	e0ba      	b.n	8008e22 <_printf_i+0x19a>
 8008cac:	497a      	ldr	r1, [pc, #488]	@ (8008e98 <_printf_i+0x210>)
 8008cae:	9104      	str	r1, [sp, #16]
 8008cb0:	2a58      	cmp	r2, #88	@ 0x58
 8008cb2:	d100      	bne.n	8008cb6 <_printf_i+0x2e>
 8008cb4:	e08e      	b.n	8008dd4 <_printf_i+0x14c>
 8008cb6:	0025      	movs	r5, r4
 8008cb8:	3542      	adds	r5, #66	@ 0x42
 8008cba:	702a      	strb	r2, [r5, #0]
 8008cbc:	e022      	b.n	8008d04 <_printf_i+0x7c>
 8008cbe:	0010      	movs	r0, r2
 8008cc0:	3863      	subs	r0, #99	@ 0x63
 8008cc2:	2815      	cmp	r0, #21
 8008cc4:	d8f7      	bhi.n	8008cb6 <_printf_i+0x2e>
 8008cc6:	f7f7 fa27 	bl	8000118 <__gnu_thumb1_case_shi>
 8008cca:	0016      	.short	0x0016
 8008ccc:	fff6001f 	.word	0xfff6001f
 8008cd0:	fff6fff6 	.word	0xfff6fff6
 8008cd4:	001ffff6 	.word	0x001ffff6
 8008cd8:	fff6fff6 	.word	0xfff6fff6
 8008cdc:	fff6fff6 	.word	0xfff6fff6
 8008ce0:	0036009f 	.word	0x0036009f
 8008ce4:	fff6007e 	.word	0xfff6007e
 8008ce8:	00b0fff6 	.word	0x00b0fff6
 8008cec:	0036fff6 	.word	0x0036fff6
 8008cf0:	fff6fff6 	.word	0xfff6fff6
 8008cf4:	0082      	.short	0x0082
 8008cf6:	0025      	movs	r5, r4
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	3542      	adds	r5, #66	@ 0x42
 8008cfc:	1d11      	adds	r1, r2, #4
 8008cfe:	6019      	str	r1, [r3, #0]
 8008d00:	6813      	ldr	r3, [r2, #0]
 8008d02:	702b      	strb	r3, [r5, #0]
 8008d04:	2301      	movs	r3, #1
 8008d06:	e09e      	b.n	8008e46 <_printf_i+0x1be>
 8008d08:	6818      	ldr	r0, [r3, #0]
 8008d0a:	6809      	ldr	r1, [r1, #0]
 8008d0c:	1d02      	adds	r2, r0, #4
 8008d0e:	060d      	lsls	r5, r1, #24
 8008d10:	d50b      	bpl.n	8008d2a <_printf_i+0xa2>
 8008d12:	6806      	ldr	r6, [r0, #0]
 8008d14:	601a      	str	r2, [r3, #0]
 8008d16:	2e00      	cmp	r6, #0
 8008d18:	da03      	bge.n	8008d22 <_printf_i+0x9a>
 8008d1a:	232d      	movs	r3, #45	@ 0x2d
 8008d1c:	9a03      	ldr	r2, [sp, #12]
 8008d1e:	4276      	negs	r6, r6
 8008d20:	7013      	strb	r3, [r2, #0]
 8008d22:	4b5d      	ldr	r3, [pc, #372]	@ (8008e98 <_printf_i+0x210>)
 8008d24:	270a      	movs	r7, #10
 8008d26:	9304      	str	r3, [sp, #16]
 8008d28:	e018      	b.n	8008d5c <_printf_i+0xd4>
 8008d2a:	6806      	ldr	r6, [r0, #0]
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	0649      	lsls	r1, r1, #25
 8008d30:	d5f1      	bpl.n	8008d16 <_printf_i+0x8e>
 8008d32:	b236      	sxth	r6, r6
 8008d34:	e7ef      	b.n	8008d16 <_printf_i+0x8e>
 8008d36:	6808      	ldr	r0, [r1, #0]
 8008d38:	6819      	ldr	r1, [r3, #0]
 8008d3a:	c940      	ldmia	r1!, {r6}
 8008d3c:	0605      	lsls	r5, r0, #24
 8008d3e:	d402      	bmi.n	8008d46 <_printf_i+0xbe>
 8008d40:	0640      	lsls	r0, r0, #25
 8008d42:	d500      	bpl.n	8008d46 <_printf_i+0xbe>
 8008d44:	b2b6      	uxth	r6, r6
 8008d46:	6019      	str	r1, [r3, #0]
 8008d48:	4b53      	ldr	r3, [pc, #332]	@ (8008e98 <_printf_i+0x210>)
 8008d4a:	270a      	movs	r7, #10
 8008d4c:	9304      	str	r3, [sp, #16]
 8008d4e:	2a6f      	cmp	r2, #111	@ 0x6f
 8008d50:	d100      	bne.n	8008d54 <_printf_i+0xcc>
 8008d52:	3f02      	subs	r7, #2
 8008d54:	0023      	movs	r3, r4
 8008d56:	2200      	movs	r2, #0
 8008d58:	3343      	adds	r3, #67	@ 0x43
 8008d5a:	701a      	strb	r2, [r3, #0]
 8008d5c:	6863      	ldr	r3, [r4, #4]
 8008d5e:	60a3      	str	r3, [r4, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	db06      	blt.n	8008d72 <_printf_i+0xea>
 8008d64:	2104      	movs	r1, #4
 8008d66:	6822      	ldr	r2, [r4, #0]
 8008d68:	9d03      	ldr	r5, [sp, #12]
 8008d6a:	438a      	bics	r2, r1
 8008d6c:	6022      	str	r2, [r4, #0]
 8008d6e:	4333      	orrs	r3, r6
 8008d70:	d00c      	beq.n	8008d8c <_printf_i+0x104>
 8008d72:	9d03      	ldr	r5, [sp, #12]
 8008d74:	0030      	movs	r0, r6
 8008d76:	0039      	movs	r1, r7
 8008d78:	f7f7 fa5e 	bl	8000238 <__aeabi_uidivmod>
 8008d7c:	9b04      	ldr	r3, [sp, #16]
 8008d7e:	3d01      	subs	r5, #1
 8008d80:	5c5b      	ldrb	r3, [r3, r1]
 8008d82:	702b      	strb	r3, [r5, #0]
 8008d84:	0033      	movs	r3, r6
 8008d86:	0006      	movs	r6, r0
 8008d88:	429f      	cmp	r7, r3
 8008d8a:	d9f3      	bls.n	8008d74 <_printf_i+0xec>
 8008d8c:	2f08      	cmp	r7, #8
 8008d8e:	d109      	bne.n	8008da4 <_printf_i+0x11c>
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	07db      	lsls	r3, r3, #31
 8008d94:	d506      	bpl.n	8008da4 <_printf_i+0x11c>
 8008d96:	6862      	ldr	r2, [r4, #4]
 8008d98:	6923      	ldr	r3, [r4, #16]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	dc02      	bgt.n	8008da4 <_printf_i+0x11c>
 8008d9e:	2330      	movs	r3, #48	@ 0x30
 8008da0:	3d01      	subs	r5, #1
 8008da2:	702b      	strb	r3, [r5, #0]
 8008da4:	9b03      	ldr	r3, [sp, #12]
 8008da6:	1b5b      	subs	r3, r3, r5
 8008da8:	6123      	str	r3, [r4, #16]
 8008daa:	9b07      	ldr	r3, [sp, #28]
 8008dac:	0021      	movs	r1, r4
 8008dae:	9300      	str	r3, [sp, #0]
 8008db0:	9805      	ldr	r0, [sp, #20]
 8008db2:	9b06      	ldr	r3, [sp, #24]
 8008db4:	aa09      	add	r2, sp, #36	@ 0x24
 8008db6:	f7ff fef7 	bl	8008ba8 <_printf_common>
 8008dba:	3001      	adds	r0, #1
 8008dbc:	d148      	bne.n	8008e50 <_printf_i+0x1c8>
 8008dbe:	2001      	movs	r0, #1
 8008dc0:	4240      	negs	r0, r0
 8008dc2:	b00b      	add	sp, #44	@ 0x2c
 8008dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008dc6:	2220      	movs	r2, #32
 8008dc8:	6809      	ldr	r1, [r1, #0]
 8008dca:	430a      	orrs	r2, r1
 8008dcc:	6022      	str	r2, [r4, #0]
 8008dce:	2278      	movs	r2, #120	@ 0x78
 8008dd0:	4932      	ldr	r1, [pc, #200]	@ (8008e9c <_printf_i+0x214>)
 8008dd2:	9104      	str	r1, [sp, #16]
 8008dd4:	0021      	movs	r1, r4
 8008dd6:	3145      	adds	r1, #69	@ 0x45
 8008dd8:	700a      	strb	r2, [r1, #0]
 8008dda:	6819      	ldr	r1, [r3, #0]
 8008ddc:	6822      	ldr	r2, [r4, #0]
 8008dde:	c940      	ldmia	r1!, {r6}
 8008de0:	0610      	lsls	r0, r2, #24
 8008de2:	d402      	bmi.n	8008dea <_printf_i+0x162>
 8008de4:	0650      	lsls	r0, r2, #25
 8008de6:	d500      	bpl.n	8008dea <_printf_i+0x162>
 8008de8:	b2b6      	uxth	r6, r6
 8008dea:	6019      	str	r1, [r3, #0]
 8008dec:	07d3      	lsls	r3, r2, #31
 8008dee:	d502      	bpl.n	8008df6 <_printf_i+0x16e>
 8008df0:	2320      	movs	r3, #32
 8008df2:	4313      	orrs	r3, r2
 8008df4:	6023      	str	r3, [r4, #0]
 8008df6:	2e00      	cmp	r6, #0
 8008df8:	d001      	beq.n	8008dfe <_printf_i+0x176>
 8008dfa:	2710      	movs	r7, #16
 8008dfc:	e7aa      	b.n	8008d54 <_printf_i+0xcc>
 8008dfe:	2220      	movs	r2, #32
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	4393      	bics	r3, r2
 8008e04:	6023      	str	r3, [r4, #0]
 8008e06:	e7f8      	b.n	8008dfa <_printf_i+0x172>
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	680d      	ldr	r5, [r1, #0]
 8008e0c:	1d10      	adds	r0, r2, #4
 8008e0e:	6949      	ldr	r1, [r1, #20]
 8008e10:	6018      	str	r0, [r3, #0]
 8008e12:	6813      	ldr	r3, [r2, #0]
 8008e14:	062e      	lsls	r6, r5, #24
 8008e16:	d501      	bpl.n	8008e1c <_printf_i+0x194>
 8008e18:	6019      	str	r1, [r3, #0]
 8008e1a:	e002      	b.n	8008e22 <_printf_i+0x19a>
 8008e1c:	066d      	lsls	r5, r5, #25
 8008e1e:	d5fb      	bpl.n	8008e18 <_printf_i+0x190>
 8008e20:	8019      	strh	r1, [r3, #0]
 8008e22:	2300      	movs	r3, #0
 8008e24:	9d03      	ldr	r5, [sp, #12]
 8008e26:	6123      	str	r3, [r4, #16]
 8008e28:	e7bf      	b.n	8008daa <_printf_i+0x122>
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	1d11      	adds	r1, r2, #4
 8008e2e:	6019      	str	r1, [r3, #0]
 8008e30:	6815      	ldr	r5, [r2, #0]
 8008e32:	2100      	movs	r1, #0
 8008e34:	0028      	movs	r0, r5
 8008e36:	6862      	ldr	r2, [r4, #4]
 8008e38:	f000 f856 	bl	8008ee8 <memchr>
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d001      	beq.n	8008e44 <_printf_i+0x1bc>
 8008e40:	1b40      	subs	r0, r0, r5
 8008e42:	6060      	str	r0, [r4, #4]
 8008e44:	6863      	ldr	r3, [r4, #4]
 8008e46:	6123      	str	r3, [r4, #16]
 8008e48:	2300      	movs	r3, #0
 8008e4a:	9a03      	ldr	r2, [sp, #12]
 8008e4c:	7013      	strb	r3, [r2, #0]
 8008e4e:	e7ac      	b.n	8008daa <_printf_i+0x122>
 8008e50:	002a      	movs	r2, r5
 8008e52:	6923      	ldr	r3, [r4, #16]
 8008e54:	9906      	ldr	r1, [sp, #24]
 8008e56:	9805      	ldr	r0, [sp, #20]
 8008e58:	9d07      	ldr	r5, [sp, #28]
 8008e5a:	47a8      	blx	r5
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d0ae      	beq.n	8008dbe <_printf_i+0x136>
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	079b      	lsls	r3, r3, #30
 8008e64:	d415      	bmi.n	8008e92 <_printf_i+0x20a>
 8008e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e68:	68e0      	ldr	r0, [r4, #12]
 8008e6a:	4298      	cmp	r0, r3
 8008e6c:	daa9      	bge.n	8008dc2 <_printf_i+0x13a>
 8008e6e:	0018      	movs	r0, r3
 8008e70:	e7a7      	b.n	8008dc2 <_printf_i+0x13a>
 8008e72:	0022      	movs	r2, r4
 8008e74:	2301      	movs	r3, #1
 8008e76:	9906      	ldr	r1, [sp, #24]
 8008e78:	9805      	ldr	r0, [sp, #20]
 8008e7a:	9e07      	ldr	r6, [sp, #28]
 8008e7c:	3219      	adds	r2, #25
 8008e7e:	47b0      	blx	r6
 8008e80:	3001      	adds	r0, #1
 8008e82:	d09c      	beq.n	8008dbe <_printf_i+0x136>
 8008e84:	3501      	adds	r5, #1
 8008e86:	68e3      	ldr	r3, [r4, #12]
 8008e88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e8a:	1a9b      	subs	r3, r3, r2
 8008e8c:	42ab      	cmp	r3, r5
 8008e8e:	dcf0      	bgt.n	8008e72 <_printf_i+0x1ea>
 8008e90:	e7e9      	b.n	8008e66 <_printf_i+0x1de>
 8008e92:	2500      	movs	r5, #0
 8008e94:	e7f7      	b.n	8008e86 <_printf_i+0x1fe>
 8008e96:	46c0      	nop			@ (mov r8, r8)
 8008e98:	0800a3b6 	.word	0x0800a3b6
 8008e9c:	0800a3c7 	.word	0x0800a3c7

08008ea0 <memmove>:
 8008ea0:	b510      	push	{r4, lr}
 8008ea2:	4288      	cmp	r0, r1
 8008ea4:	d902      	bls.n	8008eac <memmove+0xc>
 8008ea6:	188b      	adds	r3, r1, r2
 8008ea8:	4298      	cmp	r0, r3
 8008eaa:	d308      	bcc.n	8008ebe <memmove+0x1e>
 8008eac:	2300      	movs	r3, #0
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d007      	beq.n	8008ec2 <memmove+0x22>
 8008eb2:	5ccc      	ldrb	r4, [r1, r3]
 8008eb4:	54c4      	strb	r4, [r0, r3]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	e7f9      	b.n	8008eae <memmove+0xe>
 8008eba:	5c8b      	ldrb	r3, [r1, r2]
 8008ebc:	5483      	strb	r3, [r0, r2]
 8008ebe:	3a01      	subs	r2, #1
 8008ec0:	d2fb      	bcs.n	8008eba <memmove+0x1a>
 8008ec2:	bd10      	pop	{r4, pc}

08008ec4 <_sbrk_r>:
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	b570      	push	{r4, r5, r6, lr}
 8008ec8:	4d06      	ldr	r5, [pc, #24]	@ (8008ee4 <_sbrk_r+0x20>)
 8008eca:	0004      	movs	r4, r0
 8008ecc:	0008      	movs	r0, r1
 8008ece:	602b      	str	r3, [r5, #0]
 8008ed0:	f7f9 fbd0 	bl	8002674 <_sbrk>
 8008ed4:	1c43      	adds	r3, r0, #1
 8008ed6:	d103      	bne.n	8008ee0 <_sbrk_r+0x1c>
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d000      	beq.n	8008ee0 <_sbrk_r+0x1c>
 8008ede:	6023      	str	r3, [r4, #0]
 8008ee0:	bd70      	pop	{r4, r5, r6, pc}
 8008ee2:	46c0      	nop			@ (mov r8, r8)
 8008ee4:	20000408 	.word	0x20000408

08008ee8 <memchr>:
 8008ee8:	b2c9      	uxtb	r1, r1
 8008eea:	1882      	adds	r2, r0, r2
 8008eec:	4290      	cmp	r0, r2
 8008eee:	d101      	bne.n	8008ef4 <memchr+0xc>
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	4770      	bx	lr
 8008ef4:	7803      	ldrb	r3, [r0, #0]
 8008ef6:	428b      	cmp	r3, r1
 8008ef8:	d0fb      	beq.n	8008ef2 <memchr+0xa>
 8008efa:	3001      	adds	r0, #1
 8008efc:	e7f6      	b.n	8008eec <memchr+0x4>

08008efe <memcpy>:
 8008efe:	2300      	movs	r3, #0
 8008f00:	b510      	push	{r4, lr}
 8008f02:	429a      	cmp	r2, r3
 8008f04:	d100      	bne.n	8008f08 <memcpy+0xa>
 8008f06:	bd10      	pop	{r4, pc}
 8008f08:	5ccc      	ldrb	r4, [r1, r3]
 8008f0a:	54c4      	strb	r4, [r0, r3]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	e7f8      	b.n	8008f02 <memcpy+0x4>

08008f10 <_realloc_r>:
 8008f10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f12:	0006      	movs	r6, r0
 8008f14:	000c      	movs	r4, r1
 8008f16:	0015      	movs	r5, r2
 8008f18:	2900      	cmp	r1, #0
 8008f1a:	d105      	bne.n	8008f28 <_realloc_r+0x18>
 8008f1c:	0011      	movs	r1, r2
 8008f1e:	f7ff fc55 	bl	80087cc <_malloc_r>
 8008f22:	0004      	movs	r4, r0
 8008f24:	0020      	movs	r0, r4
 8008f26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f28:	2a00      	cmp	r2, #0
 8008f2a:	d103      	bne.n	8008f34 <_realloc_r+0x24>
 8008f2c:	f7ff fbe2 	bl	80086f4 <_free_r>
 8008f30:	002c      	movs	r4, r5
 8008f32:	e7f7      	b.n	8008f24 <_realloc_r+0x14>
 8008f34:	f000 f81c 	bl	8008f70 <_malloc_usable_size_r>
 8008f38:	0007      	movs	r7, r0
 8008f3a:	4285      	cmp	r5, r0
 8008f3c:	d802      	bhi.n	8008f44 <_realloc_r+0x34>
 8008f3e:	0843      	lsrs	r3, r0, #1
 8008f40:	42ab      	cmp	r3, r5
 8008f42:	d3ef      	bcc.n	8008f24 <_realloc_r+0x14>
 8008f44:	0029      	movs	r1, r5
 8008f46:	0030      	movs	r0, r6
 8008f48:	f7ff fc40 	bl	80087cc <_malloc_r>
 8008f4c:	9001      	str	r0, [sp, #4]
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d101      	bne.n	8008f56 <_realloc_r+0x46>
 8008f52:	9c01      	ldr	r4, [sp, #4]
 8008f54:	e7e6      	b.n	8008f24 <_realloc_r+0x14>
 8008f56:	002a      	movs	r2, r5
 8008f58:	42bd      	cmp	r5, r7
 8008f5a:	d900      	bls.n	8008f5e <_realloc_r+0x4e>
 8008f5c:	003a      	movs	r2, r7
 8008f5e:	0021      	movs	r1, r4
 8008f60:	9801      	ldr	r0, [sp, #4]
 8008f62:	f7ff ffcc 	bl	8008efe <memcpy>
 8008f66:	0021      	movs	r1, r4
 8008f68:	0030      	movs	r0, r6
 8008f6a:	f7ff fbc3 	bl	80086f4 <_free_r>
 8008f6e:	e7f0      	b.n	8008f52 <_realloc_r+0x42>

08008f70 <_malloc_usable_size_r>:
 8008f70:	1f0b      	subs	r3, r1, #4
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	1f18      	subs	r0, r3, #4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	da01      	bge.n	8008f7e <_malloc_usable_size_r+0xe>
 8008f7a:	580b      	ldr	r3, [r1, r0]
 8008f7c:	18c0      	adds	r0, r0, r3
 8008f7e:	4770      	bx	lr

08008f80 <_init>:
 8008f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f82:	46c0      	nop			@ (mov r8, r8)
 8008f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f86:	bc08      	pop	{r3}
 8008f88:	469e      	mov	lr, r3
 8008f8a:	4770      	bx	lr

08008f8c <_fini>:
 8008f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8e:	46c0      	nop			@ (mov r8, r8)
 8008f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f92:	bc08      	pop	{r3}
 8008f94:	469e      	mov	lr, r3
 8008f96:	4770      	bx	lr
