
CWH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b14  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  08006bd4  08006bd4  00007bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f40  08006f40  0000805c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006f40  08006f40  00007f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f48  08006f48  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f48  08006f48  00007f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f4c  08006f4c  00007f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006f50  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  2000005c  08006fac  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006fac  000083c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001305a  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000313a  00000000  00000000  0001b0de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001100  00000000  00000000  0001e218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d23  00000000  00000000  0001f318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017877  00000000  00000000  0002003b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015eac  00000000  00000000  000378b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008af7c  00000000  00000000  0004d75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d86da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a4  00000000  00000000  000d8720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000dc8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006bbc 	.word	0x08006bbc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08006bbc 	.word	0x08006bbc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <ATC_SendReceive>:
#include "lorawan.h"
#include <string.h>
#include <stdio.h>

static int ATC_SendReceive(ATC_HandleTypeDef *lora, const char *command, uint32_t command_len, char *response, uint32_t response_size, uint32_t timeout_ms, const char *expected_response)
{
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b089      	sub	sp, #36	@ 0x24
 8000474:	af02      	add	r7, sp, #8
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
 800047c:	603b      	str	r3, [r7, #0]
    if (lora == NULL || lora->huart == NULL || command == NULL || command_len == 0) {
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d009      	beq.n	8000498 <ATC_SendReceive+0x28>
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d005      	beq.n	8000498 <ATC_SendReceive+0x28>
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <ATC_SendReceive+0x28>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d102      	bne.n	800049e <ATC_SendReceive+0x2e>
        return -1;
 8000498:	2301      	movs	r3, #1
 800049a:	425b      	negs	r3, r3
 800049c:	e054      	b.n	8000548 <ATC_SendReceive+0xd8>
    }

    HAL_StatusTypeDef status = HAL_UART_Transmit(lora->huart, (uint8_t *)command, command_len, timeout_ms);
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	6818      	ldr	r0, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	2517      	movs	r5, #23
 80004a8:	197c      	adds	r4, r7, r5
 80004aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004ac:	68b9      	ldr	r1, [r7, #8]
 80004ae:	f004 ffd5 	bl	800545c <HAL_UART_Transmit>
 80004b2:	0003      	movs	r3, r0
 80004b4:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80004b6:	197b      	adds	r3, r7, r5
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d002      	beq.n	80004c4 <ATC_SendReceive+0x54>
        return -2;
 80004be:	2302      	movs	r3, #2
 80004c0:	425b      	negs	r3, r3
 80004c2:	e041      	b.n	8000548 <ATC_SendReceive+0xd8>
    }

    if (response != NULL && response_size > 0) {
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d02c      	beq.n	8000524 <ATC_SendReceive+0xb4>
 80004ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d029      	beq.n	8000524 <ATC_SendReceive+0xb4>
        uint16_t rx_len = 0;
 80004d0:	2514      	movs	r5, #20
 80004d2:	197b      	adds	r3, r7, r5
 80004d4:	2200      	movs	r2, #0
 80004d6:	801a      	strh	r2, [r3, #0]
        memset(response, 0, response_size);
 80004d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	2100      	movs	r1, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f005 fedc 	bl	800629c <memset>
        status = HAL_UARTEx_ReceiveToIdle(lora->huart, (uint8_t *)response, response_size - 1, &rx_len, timeout_ms);
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	6818      	ldr	r0, [r3, #0]
 80004e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004ea:	b29b      	uxth	r3, r3
 80004ec:	3b01      	subs	r3, #1
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	2617      	movs	r6, #23
 80004f2:	19bc      	adds	r4, r7, r6
 80004f4:	197d      	adds	r5, r7, r5
 80004f6:	6839      	ldr	r1, [r7, #0]
 80004f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	002b      	movs	r3, r5
 80004fe:	f005 fd1b 	bl	8005f38 <HAL_UARTEx_ReceiveToIdle>
 8000502:	0003      	movs	r3, r0
 8000504:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK) {
 8000506:	19bb      	adds	r3, r7, r6
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b00      	cmp	r3, #0
 800050c:	d002      	beq.n	8000514 <ATC_SendReceive+0xa4>
            return -4;
 800050e:	2304      	movs	r3, #4
 8000510:	425b      	negs	r3, r3
 8000512:	e019      	b.n	8000548 <ATC_SendReceive+0xd8>
        }
        response[rx_len] = '\0';
 8000514:	2314      	movs	r3, #20
 8000516:	18fb      	adds	r3, r7, r3
 8000518:	881b      	ldrh	r3, [r3, #0]
 800051a:	001a      	movs	r2, r3
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	189b      	adds	r3, r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
    }

    if (expected_response && response) {
 8000524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000526:	2b00      	cmp	r3, #0
 8000528:	d00d      	beq.n	8000546 <ATC_SendReceive+0xd6>
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d00a      	beq.n	8000546 <ATC_SendReceive+0xd6>
        if (!strstr(response, expected_response)) {
 8000530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	0011      	movs	r1, r2
 8000536:	0018      	movs	r0, r3
 8000538:	f005 feb8 	bl	80062ac <strstr>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d102      	bne.n	8000546 <ATC_SendReceive+0xd6>
            return -3;
 8000540:	2303      	movs	r3, #3
 8000542:	425b      	negs	r3, r3
 8000544:	e000      	b.n	8000548 <ATC_SendReceive+0xd8>
        }
    }

    return 0;
 8000546:	2300      	movs	r3, #0
}
 8000548:	0018      	movs	r0, r3
 800054a:	46bd      	mov	sp, r7
 800054c:	b007      	add	sp, #28
 800054e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000550 <send_data_and_get_response>:

LoRaWAN_Error_t send_data_and_get_response(ATC_HandleTypeDef *lora, const char *data, char *response, uint32_t response_size, uint32_t timeout_ms, const char *expected_response)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b08b      	sub	sp, #44	@ 0x2c
 8000554:	af04      	add	r7, sp, #16
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
 800055c:	603b      	str	r3, [r7, #0]
    if (!lora || !lora->huart || !data || !response || response_size == 0) {
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00c      	beq.n	800057e <send_data_and_get_response+0x2e>
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d008      	beq.n	800057e <send_data_and_get_response+0x2e>
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d005      	beq.n	800057e <send_data_and_get_response+0x2e>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d002      	beq.n	800057e <send_data_and_get_response+0x2e>
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d102      	bne.n	8000584 <send_data_and_get_response+0x34>
        return LORAWAN_ERROR_INVALID_PARAM;
 800057e:	2301      	movs	r3, #1
 8000580:	425b      	negs	r3, r3
 8000582:	e03e      	b.n	8000602 <send_data_and_get_response+0xb2>
    }

    ATC_SendReceive(lora, "AT\r\n", 4, response, response_size, timeout_ms, expected_response);
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	4921      	ldr	r1, [pc, #132]	@ (800060c <send_data_and_get_response+0xbc>)
 8000588:	68f8      	ldr	r0, [r7, #12]
 800058a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800058c:	9302      	str	r3, [sp, #8]
 800058e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	683b      	ldr	r3, [r7, #0]
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	0013      	movs	r3, r2
 8000598:	2204      	movs	r2, #4
 800059a:	f7ff ff69 	bl	8000470 <ATC_SendReceive>
    HAL_Delay(300);
 800059e:	2396      	movs	r3, #150	@ 0x96
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 fbbc 	bl	8001d20 <HAL_Delay>
    int result = ATC_SendReceive(lora, data, strlen(data), response, response_size, timeout_ms, expected_response);
 80005a8:	68bb      	ldr	r3, [r7, #8]
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff fdac 	bl	8000108 <strlen>
 80005b0:	0004      	movs	r4, r0
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	68b9      	ldr	r1, [r7, #8]
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	0013      	movs	r3, r2
 80005c6:	0022      	movs	r2, r4
 80005c8:	f7ff ff52 	bl	8000470 <ATC_SendReceive>
 80005cc:	0003      	movs	r3, r0
 80005ce:	617b      	str	r3, [r7, #20]

    if (result == -1) {
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	3301      	adds	r3, #1
 80005d4:	d102      	bne.n	80005dc <send_data_and_get_response+0x8c>
        return LORAWAN_ERROR_INVALID_PARAM;
 80005d6:	2301      	movs	r3, #1
 80005d8:	425b      	negs	r3, r3
 80005da:	e012      	b.n	8000602 <send_data_and_get_response+0xb2>
    } else if (result == -2) {
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	3302      	adds	r3, #2
 80005e0:	d102      	bne.n	80005e8 <send_data_and_get_response+0x98>
        return LORAWAN_ERROR_COMMUNICATION;
 80005e2:	2302      	movs	r3, #2
 80005e4:	425b      	negs	r3, r3
 80005e6:	e00c      	b.n	8000602 <send_data_and_get_response+0xb2>
    } else if (result == -3) {
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	3303      	adds	r3, #3
 80005ec:	d102      	bne.n	80005f4 <send_data_and_get_response+0xa4>
        return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 80005ee:	2303      	movs	r3, #3
 80005f0:	425b      	negs	r3, r3
 80005f2:	e006      	b.n	8000602 <send_data_and_get_response+0xb2>
    } else if (result == -4) {
 80005f4:	697b      	ldr	r3, [r7, #20]
 80005f6:	3304      	adds	r3, #4
 80005f8:	d102      	bne.n	8000600 <send_data_and_get_response+0xb0>
        return LORAWAN_ERROR_TIMEOUT;
 80005fa:	2304      	movs	r3, #4
 80005fc:	425b      	negs	r3, r3
 80005fe:	e000      	b.n	8000602 <send_data_and_get_response+0xb2>
    }

    return LORAWAN_ERROR_OK;
 8000600:	2300      	movs	r3, #0
}
 8000602:	0018      	movs	r0, r3
 8000604:	46bd      	mov	sp, r7
 8000606:	b007      	add	sp, #28
 8000608:	bd90      	pop	{r4, r7, pc}
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	08006bd4 	.word	0x08006bd4

08000610 <LoRaWAN_Join>:

LoRaWAN_Error_t LoRaWAN_Join(ATC_HandleTypeDef *lora)
{
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	b0c7      	sub	sp, #284	@ 0x11c
 8000614:	af02      	add	r7, sp, #8
 8000616:	6078      	str	r0, [r7, #4]
    char response[256];
    LoRaWAN_Error_t status = send_data_and_get_response(lora, "AT+JOIN\r\n", response, sizeof(response), 10000, "OK");
 8000618:	2610      	movs	r6, #16
 800061a:	36ff      	adds	r6, #255	@ 0xff
 800061c:	19bc      	adds	r4, r7, r6
 800061e:	2380      	movs	r3, #128	@ 0x80
 8000620:	005d      	lsls	r5, r3, #1
 8000622:	230c      	movs	r3, #12
 8000624:	18fa      	adds	r2, r7, r3
 8000626:	4931      	ldr	r1, [pc, #196]	@ (80006ec <LoRaWAN_Join+0xdc>)
 8000628:	6878      	ldr	r0, [r7, #4]
 800062a:	4b31      	ldr	r3, [pc, #196]	@ (80006f0 <LoRaWAN_Join+0xe0>)
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	4b31      	ldr	r3, [pc, #196]	@ (80006f4 <LoRaWAN_Join+0xe4>)
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	002b      	movs	r3, r5
 8000634:	f7ff ff8c 	bl	8000550 <send_data_and_get_response>
 8000638:	0003      	movs	r3, r0
 800063a:	7023      	strb	r3, [r4, #0]
    if (status != LORAWAN_ERROR_OK) {
 800063c:	19bb      	adds	r3, r7, r6
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b25b      	sxtb	r3, r3
 8000642:	2b00      	cmp	r3, #0
 8000644:	d003      	beq.n	800064e <LoRaWAN_Join+0x3e>
        return status;
 8000646:	19bb      	adds	r3, r7, r6
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	b25b      	sxtb	r3, r3
 800064c:	e049      	b.n	80006e2 <LoRaWAN_Join+0xd2>
    }

    memset(response, 0, sizeof(response));
 800064e:	2380      	movs	r3, #128	@ 0x80
 8000650:	005a      	lsls	r2, r3, #1
 8000652:	250c      	movs	r5, #12
 8000654:	197b      	adds	r3, r7, r5
 8000656:	2100      	movs	r1, #0
 8000658:	0018      	movs	r0, r3
 800065a:	f005 fe1f 	bl	800629c <memset>
    uint16_t rx_len = 0;
 800065e:	4b26      	ldr	r3, [pc, #152]	@ (80006f8 <LoRaWAN_Join+0xe8>)
 8000660:	2288      	movs	r2, #136	@ 0x88
 8000662:	0052      	lsls	r2, r2, #1
 8000664:	189b      	adds	r3, r3, r2
 8000666:	19db      	adds	r3, r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	801a      	strh	r2, [r3, #0]
    HAL_StatusTypeDef hal_status = HAL_UARTEx_ReceiveToIdle(lora->huart, (uint8_t *)response, sizeof(response) - 1, &rx_len, 10000);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	6818      	ldr	r0, [r3, #0]
 8000670:	2687      	movs	r6, #135	@ 0x87
 8000672:	0076      	lsls	r6, r6, #1
 8000674:	19bc      	adds	r4, r7, r6
 8000676:	230a      	movs	r3, #10
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	1979      	adds	r1, r7, r5
 800067c:	4a1d      	ldr	r2, [pc, #116]	@ (80006f4 <LoRaWAN_Join+0xe4>)
 800067e:	9200      	str	r2, [sp, #0]
 8000680:	22ff      	movs	r2, #255	@ 0xff
 8000682:	f005 fc59 	bl	8005f38 <HAL_UARTEx_ReceiveToIdle>
 8000686:	0003      	movs	r3, r0
 8000688:	7023      	strb	r3, [r4, #0]
    if (hal_status != HAL_OK) {
 800068a:	19bb      	adds	r3, r7, r6
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d002      	beq.n	8000698 <LoRaWAN_Join+0x88>
        return LORAWAN_ERROR_TIMEOUT;
 8000692:	2304      	movs	r3, #4
 8000694:	425b      	negs	r3, r3
 8000696:	e024      	b.n	80006e2 <LoRaWAN_Join+0xd2>
    }
    response[rx_len] = '\0';
 8000698:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <LoRaWAN_Join+0xe8>)
 800069a:	2188      	movs	r1, #136	@ 0x88
 800069c:	0049      	lsls	r1, r1, #1
 800069e:	185b      	adds	r3, r3, r1
 80006a0:	19db      	adds	r3, r3, r7
 80006a2:	881b      	ldrh	r3, [r3, #0]
 80006a4:	001a      	movs	r2, r3
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <LoRaWAN_Join+0xec>)
 80006a8:	185b      	adds	r3, r3, r1
 80006aa:	19db      	adds	r3, r3, r7
 80006ac:	2100      	movs	r1, #0
 80006ae:	5499      	strb	r1, [r3, r2]

    if (strstr(response, "JOINED")) {
 80006b0:	4a13      	ldr	r2, [pc, #76]	@ (8000700 <LoRaWAN_Join+0xf0>)
 80006b2:	230c      	movs	r3, #12
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f005 fdf7 	bl	80062ac <strstr>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <LoRaWAN_Join+0xb6>
        return LORAWAN_ERROR_OK;
 80006c2:	2300      	movs	r3, #0
 80006c4:	e00d      	b.n	80006e2 <LoRaWAN_Join+0xd2>
    } else if (strstr(response, "JOIN FAILED")) {
 80006c6:	4a0f      	ldr	r2, [pc, #60]	@ (8000704 <LoRaWAN_Join+0xf4>)
 80006c8:	230c      	movs	r3, #12
 80006ca:	18fb      	adds	r3, r7, r3
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f005 fdec 	bl	80062ac <strstr>
 80006d4:	1e03      	subs	r3, r0, #0
 80006d6:	d002      	beq.n	80006de <LoRaWAN_Join+0xce>
        return LORAWAN_ERROR_NOT_JOINED;
 80006d8:	2305      	movs	r3, #5
 80006da:	425b      	negs	r3, r3
 80006dc:	e001      	b.n	80006e2 <LoRaWAN_Join+0xd2>
    }
    return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 80006de:	2303      	movs	r3, #3
 80006e0:	425b      	negs	r3, r3
}
 80006e2:	0018      	movs	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b045      	add	sp, #276	@ 0x114
 80006e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	08006bdc 	.word	0x08006bdc
 80006f0:	08006be8 	.word	0x08006be8
 80006f4:	00002710 	.word	0x00002710
 80006f8:	fffffefa 	.word	0xfffffefa
 80006fc:	fffffefc 	.word	0xfffffefc
 8000700:	08006bec 	.word	0x08006bec
 8000704:	08006bf4 	.word	0x08006bf4

08000708 <LoRaWAN_SendHex>:

LoRaWAN_Error_t LoRaWAN_SendHex(ATC_HandleTypeDef *lora, const uint8_t *payload, size_t length)
{
 8000708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800070a:	b0ab      	sub	sp, #172	@ 0xac
 800070c:	af02      	add	r7, sp, #8
 800070e:	6478      	str	r0, [r7, #68]	@ 0x44
 8000710:	6439      	str	r1, [r7, #64]	@ 0x40
 8000712:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000714:	466b      	mov	r3, sp
 8000716:	001e      	movs	r6, r3
    if (!lora || !lora->huart || !payload || length == 0) {
 8000718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800071a:	2b00      	cmp	r3, #0
 800071c:	d009      	beq.n	8000732 <LoRaWAN_SendHex+0x2a>
 800071e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d005      	beq.n	8000732 <LoRaWAN_SendHex+0x2a>
 8000726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <LoRaWAN_SendHex+0x2a>
 800072c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800072e:	2b00      	cmp	r3, #0
 8000730:	d102      	bne.n	8000738 <LoRaWAN_SendHex+0x30>
        return LORAWAN_ERROR_INVALID_PARAM;
 8000732:	2301      	movs	r3, #1
 8000734:	425b      	negs	r3, r3
 8000736:	e0a8      	b.n	800088a <LoRaWAN_SendHex+0x182>
    }

    char hex[length * 2 + 1];
 8000738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	1c5a      	adds	r2, r3, #1
 800073e:	0013      	movs	r3, r2
 8000740:	3b01      	subs	r3, #1
 8000742:	2198      	movs	r1, #152	@ 0x98
 8000744:	1879      	adds	r1, r7, r1
 8000746:	600b      	str	r3, [r1, #0]
 8000748:	61ba      	str	r2, [r7, #24]
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]
 800074e:	69b8      	ldr	r0, [r7, #24]
 8000750:	69f9      	ldr	r1, [r7, #28]
 8000752:	0003      	movs	r3, r0
 8000754:	0f5b      	lsrs	r3, r3, #29
 8000756:	469c      	mov	ip, r3
 8000758:	000b      	movs	r3, r1
 800075a:	00dd      	lsls	r5, r3, #3
 800075c:	4663      	mov	r3, ip
 800075e:	431d      	orrs	r5, r3
 8000760:	0003      	movs	r3, r0
 8000762:	00dc      	lsls	r4, r3, #3
 8000764:	613a      	str	r2, [r7, #16]
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	6938      	ldr	r0, [r7, #16]
 800076c:	6979      	ldr	r1, [r7, #20]
 800076e:	0003      	movs	r3, r0
 8000770:	0f5b      	lsrs	r3, r3, #29
 8000772:	000c      	movs	r4, r1
 8000774:	00e4      	lsls	r4, r4, #3
 8000776:	637c      	str	r4, [r7, #52]	@ 0x34
 8000778:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 800077a:	431c      	orrs	r4, r3
 800077c:	637c      	str	r4, [r7, #52]	@ 0x34
 800077e:	0003      	movs	r3, r0
 8000780:	00db      	lsls	r3, r3, #3
 8000782:	633b      	str	r3, [r7, #48]	@ 0x30
 8000784:	1dd3      	adds	r3, r2, #7
 8000786:	08db      	lsrs	r3, r3, #3
 8000788:	00db      	lsls	r3, r3, #3
 800078a:	466a      	mov	r2, sp
 800078c:	1ad3      	subs	r3, r2, r3
 800078e:	469d      	mov	sp, r3
 8000790:	ab02      	add	r3, sp, #8
 8000792:	3300      	adds	r3, #0
 8000794:	2294      	movs	r2, #148	@ 0x94
 8000796:	18ba      	adds	r2, r7, r2
 8000798:	6013      	str	r3, [r2, #0]
    for (size_t i = 0; i < length; ++i) {
 800079a:	2300      	movs	r3, #0
 800079c:	229c      	movs	r2, #156	@ 0x9c
 800079e:	18ba      	adds	r2, r7, r2
 80007a0:	6013      	str	r3, [r2, #0]
 80007a2:	e019      	b.n	80007d8 <LoRaWAN_SendHex+0xd0>
        sprintf(&hex[i * 2], "%02X", payload[i]);
 80007a4:	239c      	movs	r3, #156	@ 0x9c
 80007a6:	18fb      	adds	r3, r7, r3
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	005b      	lsls	r3, r3, #1
 80007ac:	2294      	movs	r2, #148	@ 0x94
 80007ae:	18ba      	adds	r2, r7, r2
 80007b0:	6812      	ldr	r2, [r2, #0]
 80007b2:	18d0      	adds	r0, r2, r3
 80007b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80007b6:	239c      	movs	r3, #156	@ 0x9c
 80007b8:	18fb      	adds	r3, r7, r3
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	18d3      	adds	r3, r2, r3
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	001a      	movs	r2, r3
 80007c2:	4b34      	ldr	r3, [pc, #208]	@ (8000894 <LoRaWAN_SendHex+0x18c>)
 80007c4:	0019      	movs	r1, r3
 80007c6:	f005 fd0d 	bl	80061e4 <siprintf>
    for (size_t i = 0; i < length; ++i) {
 80007ca:	239c      	movs	r3, #156	@ 0x9c
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	229c      	movs	r2, #156	@ 0x9c
 80007d4:	18ba      	adds	r2, r7, r2
 80007d6:	6013      	str	r3, [r2, #0]
 80007d8:	239c      	movs	r3, #156	@ 0x9c
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d3df      	bcc.n	80007a4 <LoRaWAN_SendHex+0x9c>
    }
    hex[length * 2] = '\0';
 80007e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	2294      	movs	r2, #148	@ 0x94
 80007ea:	18ba      	adds	r2, r7, r2
 80007ec:	6812      	ldr	r2, [r2, #0]
 80007ee:	2100      	movs	r1, #0
 80007f0:	54d1      	strb	r1, [r2, r3]

    char command[length * 2 + 12];
 80007f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007f4:	3306      	adds	r3, #6
 80007f6:	0059      	lsls	r1, r3, #1
 80007f8:	000b      	movs	r3, r1
 80007fa:	3b01      	subs	r3, #1
 80007fc:	2290      	movs	r2, #144	@ 0x90
 80007fe:	18ba      	adds	r2, r7, r2
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	60b9      	str	r1, [r7, #8]
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68bc      	ldr	r4, [r7, #8]
 800080a:	68fd      	ldr	r5, [r7, #12]
 800080c:	0023      	movs	r3, r4
 800080e:	0f5b      	lsrs	r3, r3, #29
 8000810:	002a      	movs	r2, r5
 8000812:	00d2      	lsls	r2, r2, #3
 8000814:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000818:	431a      	orrs	r2, r3
 800081a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800081c:	0023      	movs	r3, r4
 800081e:	00db      	lsls	r3, r3, #3
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000822:	6039      	str	r1, [r7, #0]
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	683c      	ldr	r4, [r7, #0]
 800082a:	687d      	ldr	r5, [r7, #4]
 800082c:	0023      	movs	r3, r4
 800082e:	0f5b      	lsrs	r3, r3, #29
 8000830:	002a      	movs	r2, r5
 8000832:	00d2      	lsls	r2, r2, #3
 8000834:	627a      	str	r2, [r7, #36]	@ 0x24
 8000836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000838:	431a      	orrs	r2, r3
 800083a:	627a      	str	r2, [r7, #36]	@ 0x24
 800083c:	0023      	movs	r3, r4
 800083e:	00db      	lsls	r3, r3, #3
 8000840:	623b      	str	r3, [r7, #32]
 8000842:	1dcb      	adds	r3, r1, #7
 8000844:	08db      	lsrs	r3, r3, #3
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	466a      	mov	r2, sp
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	469d      	mov	sp, r3
 800084e:	ab02      	add	r3, sp, #8
 8000850:	3300      	adds	r3, #0
 8000852:	228c      	movs	r2, #140	@ 0x8c
 8000854:	18ba      	adds	r2, r7, r2
 8000856:	6013      	str	r3, [r2, #0]
    snprintf(command, sizeof(command), "AT+SEND \"%s\"\r\n", hex);
 8000858:	2394      	movs	r3, #148	@ 0x94
 800085a:	18fb      	adds	r3, r7, r3
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a0e      	ldr	r2, [pc, #56]	@ (8000898 <LoRaWAN_SendHex+0x190>)
 8000860:	208c      	movs	r0, #140	@ 0x8c
 8000862:	1838      	adds	r0, r7, r0
 8000864:	6800      	ldr	r0, [r0, #0]
 8000866:	f005 fc87 	bl	8006178 <sniprintf>

    char response[64];
    return send_data_and_get_response(lora, command, response, sizeof(response), 5000, "OK");
 800086a:	2314      	movs	r3, #20
 800086c:	2238      	movs	r2, #56	@ 0x38
 800086e:	189b      	adds	r3, r3, r2
 8000870:	19da      	adds	r2, r3, r7
 8000872:	238c      	movs	r3, #140	@ 0x8c
 8000874:	18fb      	adds	r3, r7, r3
 8000876:	6819      	ldr	r1, [r3, #0]
 8000878:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800087a:	4b08      	ldr	r3, [pc, #32]	@ (800089c <LoRaWAN_SendHex+0x194>)
 800087c:	9301      	str	r3, [sp, #4]
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <LoRaWAN_SendHex+0x198>)
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	2340      	movs	r3, #64	@ 0x40
 8000884:	f7ff fe64 	bl	8000550 <send_data_and_get_response>
 8000888:	0003      	movs	r3, r0
 800088a:	46b5      	mov	sp, r6
}
 800088c:	0018      	movs	r0, r3
 800088e:	46bd      	mov	sp, r7
 8000890:	b029      	add	sp, #164	@ 0xa4
 8000892:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000894:	08006c00 	.word	0x08006c00
 8000898:	08006c08 	.word	0x08006c08
 800089c:	08006be8 	.word	0x08006be8
 80008a0:	00001388 	.word	0x00001388

080008a4 <RTC_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void RTC_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80008a8:	4b03      	ldr	r3, [pc, #12]	@ (80008b8 <RTC_IRQHandler+0x14>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f004 fd14 	bl	80052d8 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 80008b0:	46c0      	nop			@ (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	20000238 	.word	0x20000238

080008bc <RTC_WakeUp_Init>:

void RTC_WakeUp_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  ConsolePrintf("Starting RTC Wake-Up Timer configuration\r\n");
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <RTC_WakeUp_Init+0x5c>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fc22 	bl	800110c <ConsolePrintf>

  // Disable the Wake-Up Timer before configuring
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80008c8:	4b14      	ldr	r3, [pc, #80]	@ (800091c <RTC_WakeUp_Init+0x60>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f004 fca0 	bl	8005210 <HAL_RTCEx_DeactivateWakeUpTimer>
  ConsolePrintf("RTC Wake-Up Timer disabled\r\n");
 80008d0:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <RTC_WakeUp_Init+0x64>)
 80008d2:	0018      	movs	r0, r3
 80008d4:	f000 fc1a 	bl	800110c <ConsolePrintf>

  // Configure Wake-Up Timer for 60 seconds using LSI (~40 kHz)
  // With AsynchPrediv = 127, SynchPrediv = 255: CK_SPRE = 40,000 / (128 * 256) = ~1.22 Hz
  // For ~60 seconds: WakeUpCounter = (60 * 1.22) - 1 = ~72
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80008d8:	4b10      	ldr	r3, [pc, #64]	@ (800091c <RTC_WakeUp_Init+0x60>)
 80008da:	2204      	movs	r2, #4
 80008dc:	213b      	movs	r1, #59	@ 0x3b
 80008de:	0018      	movs	r0, r3
 80008e0:	f004 fbbe 	bl	8005060 <HAL_RTCEx_SetWakeUpTimer_IT>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d004      	beq.n	80008f2 <RTC_WakeUp_Init+0x36>
  {
    ConsolePrintf("RTC Wake-Up Timer Init Failed\r\n");
 80008e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000924 <RTC_WakeUp_Init+0x68>)
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fc0e 	bl	800110c <ConsolePrintf>
 80008f0:	e003      	b.n	80008fa <RTC_WakeUp_Init+0x3e>
  }
  else
  {
    ConsolePrintf("RTC Wake-Up Timer Initialized for ~60 seconds\r\n");
 80008f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000928 <RTC_WakeUp_Init+0x6c>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f000 fc09 	bl	800110c <ConsolePrintf>
  }

  // Enable RTC Wake-Up interrupt in NVIC
  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	2002      	movs	r0, #2
 8000900:	f001 ffbc 	bl	800287c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000904:	2002      	movs	r0, #2
 8000906:	f001 ffce 	bl	80028a6 <HAL_NVIC_EnableIRQ>
  ConsolePrintf("RTC Wake-Up interrupt enabled in NVIC\r\n");
 800090a:	4b08      	ldr	r3, [pc, #32]	@ (800092c <RTC_WakeUp_Init+0x70>)
 800090c:	0018      	movs	r0, r3
 800090e:	f000 fbfd 	bl	800110c <ConsolePrintf>
}
 8000912:	46c0      	nop			@ (mov r8, r8)
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	08006c18 	.word	0x08006c18
 800091c:	20000238 	.word	0x20000238
 8000920:	08006c44 	.word	0x08006c44
 8000924:	08006c64 	.word	0x08006c64
 8000928:	08006c84 	.word	0x08006c84
 800092c:	08006cb4 	.word	0x08006cb4

08000930 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  // Reconfigure system clock after wake-up
  SystemClock_Config();
 8000938:	f000 f9d8 	bl	8000cec <SystemClock_Config>

  // Print message
  ConsolePrintf("Woke up at %s\r\n", "1-minute interval");
 800093c:	4a04      	ldr	r2, [pc, #16]	@ (8000950 <HAL_RTCEx_WakeUpTimerEventCallback+0x20>)
 800093e:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <HAL_RTCEx_WakeUpTimerEventCallback+0x24>)
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f000 fbe2 	bl	800110c <ConsolePrintf>
}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b002      	add	sp, #8
 800094e:	bd80      	pop	{r7, pc}
 8000950:	08006cdc 	.word	0x08006cdc
 8000954:	08006cf0 	.word	0x08006cf0

08000958 <Enter_Stop_Mode>:

void Enter_Stop_Mode(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  ConsolePrintf("Preparing to enter Stop mode\r\n");
 800095c:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <Enter_Stop_Mode+0x50>)
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fbd4 	bl	800110c <ConsolePrintf>

  // Clear Wake-Up flag
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <Enter_Stop_Mode+0x54>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	22ff      	movs	r2, #255	@ 0xff
 800096c:	401a      	ands	r2, r3
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <Enter_Stop_Mode+0x54>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	490f      	ldr	r1, [pc, #60]	@ (80009b0 <Enter_Stop_Mode+0x58>)
 8000974:	430a      	orrs	r2, r1
 8000976:	60da      	str	r2, [r3, #12]
  ConsolePrintf("RTC Wake-Up flag cleared\r\n");
 8000978:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <Enter_Stop_Mode+0x5c>)
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fbc6 	bl	800110c <ConsolePrintf>

  // Enter Stop mode (low-power mode)
  ConsolePrintf("Entering Stop mode\r\n");
 8000980:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <Enter_Stop_Mode+0x60>)
 8000982:	0018      	movs	r0, r3
 8000984:	f000 fbc2 	bl	800110c <ConsolePrintf>
  /* Suspend SysTick to prevent it from waking up the MCU immediately */
  HAL_SuspendTick();
 8000988:	f001 f9ee 	bl	8001d68 <HAL_SuspendTick>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800098c:	2101      	movs	r1, #1
 800098e:	2001      	movs	r0, #1
 8000990:	f003 f994 	bl	8003cbc <HAL_PWR_EnterSTOPMode>
  /* Resume SysTick after waking up */
  HAL_ResumeTick();
 8000994:	f001 f9f6 	bl	8001d84 <HAL_ResumeTick>
  ConsolePrintf("Exited Stop mode\r\n");
 8000998:	4b08      	ldr	r3, [pc, #32]	@ (80009bc <Enter_Stop_Mode+0x64>)
 800099a:	0018      	movs	r0, r3
 800099c:	f000 fbb6 	bl	800110c <ConsolePrintf>
}
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	08006d00 	.word	0x08006d00
 80009ac:	20000238 	.word	0x20000238
 80009b0:	fffffb7f 	.word	0xfffffb7f
 80009b4:	08006d20 	.word	0x08006d20
 80009b8:	08006d3c 	.word	0x08006d3c
 80009bc:	08006d54 	.word	0x08006d54

080009c0 <ReadBattery_mV>:
/**
 * @brief  Read VBAT (mV) via 1 MΩ:1 MΩ divider + unity buffer, no FPU
 * @retval Battery voltage in millivolts (rounded)
 */
uint32_t ReadBattery_mV(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0
    ADC_ChannelConfTypeDef sConfig = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	0018      	movs	r0, r3
 80009ca:	2308      	movs	r3, #8
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f005 fc64 	bl	800629c <memset>
    uint32_t raw_vref, raw_div;
    uint32_t Vdda_mV, Vnode_mV, VBAT_mV;

    // 1) Enable internal reference measurement
    HAL_ADCEx_EnableVREFINT();
 80009d4:	f001 fe78 	bl	80026c8 <HAL_ADCEx_EnableVREFINT>

    // 2) Sample VREFINT to compute true VDDA
    sConfig.Channel = ADC_CHANNEL_VREFINT;
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	4a3b      	ldr	r2, [pc, #236]	@ (8000ac8 <ReadBattery_mV+0x108>)
 80009dc:	601a      	str	r2, [r3, #0]
    sConfig.Rank    = ADC_RANK_CHANNEL_NUMBER;
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2280      	movs	r2, #128	@ 0x80
 80009e2:	0152      	lsls	r2, r2, #5
 80009e4:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80009e6:	1d3a      	adds	r2, r7, #4
 80009e8:	4b38      	ldr	r3, [pc, #224]	@ (8000acc <ReadBattery_mV+0x10c>)
 80009ea:	0011      	movs	r1, r2
 80009ec:	0018      	movs	r0, r3
 80009ee:	f001 fc8f 	bl	8002310 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc);
 80009f2:	4b36      	ldr	r3, [pc, #216]	@ (8000acc <ReadBattery_mV+0x10c>)
 80009f4:	0018      	movs	r0, r3
 80009f6:	f001 fb4f 	bl	8002098 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80009fa:	2301      	movs	r3, #1
 80009fc:	425a      	negs	r2, r3
 80009fe:	4b33      	ldr	r3, [pc, #204]	@ (8000acc <ReadBattery_mV+0x10c>)
 8000a00:	0011      	movs	r1, r2
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 fbdc 	bl	80021c0 <HAL_ADC_PollForConversion>
    raw_vref = HAL_ADC_GetValue(&hadc);
 8000a08:	4b30      	ldr	r3, [pc, #192]	@ (8000acc <ReadBattery_mV+0x10c>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f001 fc74 	bl	80022f8 <HAL_ADC_GetValue>
 8000a10:	0003      	movs	r3, r0
 8000a12:	61fb      	str	r3, [r7, #28]
    HAL_ADC_Stop(&hadc);
 8000a14:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <ReadBattery_mV+0x10c>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f001 fb92 	bl	8002140 <HAL_ADC_Stop>

    // Vdda = 3000 mV × VREFINT_CAL / raw_vref  (calibrated at 3.0 V)
    Vdda_mV = (3000UL * (*VREFINT_CAL_ADDR) + raw_vref/2U) / raw_vref;
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <ReadBattery_mV+0x110>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	001a      	movs	r2, r3
 8000a22:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad4 <ReadBattery_mV+0x114>)
 8000a24:	435a      	muls	r2, r3
 8000a26:	69fb      	ldr	r3, [r7, #28]
 8000a28:	085b      	lsrs	r3, r3, #1
 8000a2a:	18d3      	adds	r3, r2, r3
 8000a2c:	69f9      	ldr	r1, [r7, #28]
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff fb7c 	bl	800012c <__udivsi3>
 8000a34:	0003      	movs	r3, r0
 8000a36:	61bb      	str	r3, [r7, #24]

    // 3) Turn on your divider/buffer and let it settle
    HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin, GPIO_PIN_SET);
 8000a38:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <ReadBattery_mV+0x118>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f002 f9ae 	bl	8002da0 <HAL_GPIO_WritePin>
    HAL_Delay(300);
 8000a44:	2396      	movs	r3, #150	@ 0x96
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 f969 	bl	8001d20 <HAL_Delay>

    // 4) Sample the divider output (VBAT/2)
    sConfig.Channel = ADC_CHANNEL_0;              // PA0 is connected to the divider output
 8000a4e:	1d3b      	adds	r3, r7, #4
 8000a50:	2201      	movs	r2, #1
 8000a52:	601a      	str	r2, [r3, #0]
    sConfig.Rank    = ADC_RANK_CHANNEL_NUMBER;
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2280      	movs	r2, #128	@ 0x80
 8000a58:	0152      	lsls	r2, r2, #5
 8000a5a:	605a      	str	r2, [r3, #4]
    HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000a5c:	1d3a      	adds	r2, r7, #4
 8000a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <ReadBattery_mV+0x10c>)
 8000a60:	0011      	movs	r1, r2
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 fc54 	bl	8002310 <HAL_ADC_ConfigChannel>

    HAL_ADC_Start(&hadc);
 8000a68:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <ReadBattery_mV+0x10c>)
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f001 fb14 	bl	8002098 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8000a70:	2301      	movs	r3, #1
 8000a72:	425a      	negs	r2, r3
 8000a74:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <ReadBattery_mV+0x10c>)
 8000a76:	0011      	movs	r1, r2
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f001 fba1 	bl	80021c0 <HAL_ADC_PollForConversion>
    raw_div = HAL_ADC_GetValue(&hadc);
 8000a7e:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <ReadBattery_mV+0x10c>)
 8000a80:	0018      	movs	r0, r3
 8000a82:	f001 fc39 	bl	80022f8 <HAL_ADC_GetValue>
 8000a86:	0003      	movs	r3, r0
 8000a88:	617b      	str	r3, [r7, #20]
    HAL_ADC_Stop(&hadc);
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <ReadBattery_mV+0x10c>)
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f001 fb57 	bl	8002140 <HAL_ADC_Stop>

    // 5) Turn divider off
    HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin, GPIO_PIN_RESET);
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <ReadBattery_mV+0x118>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	2101      	movs	r1, #1
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f002 f981 	bl	8002da0 <HAL_GPIO_WritePin>

    // 6) Compute node voltage in mV and undo the 1:1 divider
    //    Vnode_mV = raw_div/4095 * Vdda_mV
    Vnode_mV = ((raw_div * Vdda_mV) + (ADC_MAX/2U)) / ADC_MAX;
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	4353      	muls	r3, r2
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <ReadBattery_mV+0x11c>)
 8000aa6:	4694      	mov	ip, r2
 8000aa8:	4463      	add	r3, ip
 8000aaa:	490d      	ldr	r1, [pc, #52]	@ (8000ae0 <ReadBattery_mV+0x120>)
 8000aac:	0018      	movs	r0, r3
 8000aae:	f7ff fb3d 	bl	800012c <__udivsi3>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	613b      	str	r3, [r7, #16]
    VBAT_mV  = Vnode_mV * 2U;  // since divider ratio is 0.5
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	60fb      	str	r3, [r7, #12]

    return VBAT_mV;  // e.g. 3700 → 3.700 V
 8000abc:	68fb      	ldr	r3, [r7, #12]
}
 8000abe:	0018      	movs	r0, r3
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b008      	add	sp, #32
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	44020000 	.word	0x44020000
 8000acc:	20000078 	.word	0x20000078
 8000ad0:	1ff80078 	.word	0x1ff80078
 8000ad4:	00000bb8 	.word	0x00000bb8
 8000ad8:	50000400 	.word	0x50000400
 8000adc:	000007ff 	.word	0x000007ff
 8000ae0:	00000fff 	.word	0x00000fff

08000ae4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aea:	f001 f8a9 	bl	8001c40 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(10000);
 8000aee:	4b6e      	ldr	r3, [pc, #440]	@ (8000ca8 <main+0x1c4>)
 8000af0:	0018      	movs	r0, r3
 8000af2:	f001 f915 	bl	8001d20 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 f8f9 	bl	8000cec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f000 fac3 	bl	8001084 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000afe:	f000 f9ef 	bl	8000ee0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b02:	f000 fa5f 	bl	8000fc4 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000b06:	f000 fa93 	bl	8001030 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8000b0a:	f000 fa29 	bl	8000f60 <MX_LPUART1_UART_Init>
  MX_ADC_Init();
 8000b0e:	f000 f965 	bl	8000ddc <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  RTC_WakeUp_Init();
 8000b12:	f7ff fed3 	bl	80008bc <RTC_WakeUp_Init>

//  /* Scan the I2C bus and read sensors once at startup */
//  scan_i2c_bus();
//  sensor_init_and_read();
  LoRaWAN_Join(&lora);
 8000b16:	4b65      	ldr	r3, [pc, #404]	@ (8000cac <main+0x1c8>)
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f7ff fd79 	bl	8000610 <LoRaWAN_Join>

  HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin, GPIO_PIN_SET);
 8000b1e:	4b64      	ldr	r3, [pc, #400]	@ (8000cb0 <main+0x1cc>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	2101      	movs	r1, #1
 8000b24:	0018      	movs	r0, r3
 8000b26:	f002 f93b 	bl	8002da0 <HAL_GPIO_WritePin>
  HAL_Delay(300);                          // let the divider & buffer settle
 8000b2a:	2396      	movs	r3, #150	@ 0x96
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f001 f8f6 	bl	8001d20 <HAL_Delay>
  uint32_t batt = ReadBattery_mV();
 8000b34:	f7ff ff44 	bl	80009c0 <ReadBattery_mV>
 8000b38:	0003      	movs	r3, r0
 8000b3a:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin, GPIO_PIN_RESET);
 8000b3c:	4b5c      	ldr	r3, [pc, #368]	@ (8000cb0 <main+0x1cc>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2101      	movs	r1, #1
 8000b42:	0018      	movs	r0, r3
 8000b44:	f002 f92c 	bl	8002da0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ConsolePrintf("Entering main loop\r\n");
 8000b48:	4b5a      	ldr	r3, [pc, #360]	@ (8000cb4 <main+0x1d0>)
 8000b4a:	0018      	movs	r0, r3
 8000b4c:	f000 fade 	bl	800110c <ConsolePrintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    ConsolePrintf("Going to sleep...\r\n");
 8000b50:	4b59      	ldr	r3, [pc, #356]	@ (8000cb8 <main+0x1d4>)
 8000b52:	0018      	movs	r0, r3
 8000b54:	f000 fada 	bl	800110c <ConsolePrintf>

    HAL_I2C_DeInit(&hi2c1);
 8000b58:	4b58      	ldr	r3, [pc, #352]	@ (8000cbc <main+0x1d8>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f002 f9e4 	bl	8002f28 <HAL_I2C_DeInit>
    HAL_UART_DeInit(&huart1);
 8000b60:	4b57      	ldr	r3, [pc, #348]	@ (8000cc0 <main+0x1dc>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f004 fc3c 	bl	80053e0 <HAL_UART_DeInit>
    // De-init LPUART1 (LoRaWAN UART)
    HAL_UART_DeInit(&hlpuart1);
 8000b68:	4b56      	ldr	r3, [pc, #344]	@ (8000cc4 <main+0x1e0>)
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f004 fc38 	bl	80053e0 <HAL_UART_DeInit>

    // Disable LPUART wake-up from Stop mode
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_RXNE);                    // Disable RXNE interrupt
 8000b70:	4b54      	ldr	r3, [pc, #336]	@ (8000cc4 <main+0x1e0>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b53      	ldr	r3, [pc, #332]	@ (8000cc4 <main+0x1e0>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	2120      	movs	r1, #32
 8000b7c:	438a      	bics	r2, r1
 8000b7e:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_IDLE);                    // Disable IDLE interrupt
 8000b80:	4b50      	ldr	r3, [pc, #320]	@ (8000cc4 <main+0x1e0>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	4b4f      	ldr	r3, [pc, #316]	@ (8000cc4 <main+0x1e0>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	438a      	bics	r2, r1
 8000b8e:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(&hlpuart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 8000b90:	4b4c      	ldr	r3, [pc, #304]	@ (8000cc4 <main+0x1e0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2230      	movs	r2, #48	@ 0x30
 8000b96:	621a      	str	r2, [r3, #32]

    __HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);                    // Disable RXNE interrupt
 8000b98:	4b49      	ldr	r3, [pc, #292]	@ (8000cc0 <main+0x1dc>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	4b48      	ldr	r3, [pc, #288]	@ (8000cc0 <main+0x1dc>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2120      	movs	r1, #32
 8000ba4:	438a      	bics	r2, r1
 8000ba6:	601a      	str	r2, [r3, #0]
    __HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);                    // Disable IDLE interrupt
 8000ba8:	4b45      	ldr	r3, [pc, #276]	@ (8000cc0 <main+0x1dc>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b44      	ldr	r3, [pc, #272]	@ (8000cc0 <main+0x1dc>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2110      	movs	r1, #16
 8000bb4:	438a      	bics	r2, r1
 8000bb6:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE | UART_FLAG_IDLE); // Clear any pending flags
 8000bb8:	4b41      	ldr	r3, [pc, #260]	@ (8000cc0 <main+0x1dc>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2230      	movs	r2, #48	@ 0x30
 8000bbe:	621a      	str	r2, [r3, #32]

    // Enter Stop mode
    Enter_Stop_Mode(); // Wakes up via RTC interrupt
 8000bc0:	f7ff feca 	bl	8000958 <Enter_Stop_Mode>

    // === Code resumes after wake-up ===
    ConsolePrintf("Resumed after wake-up\r\n");
 8000bc4:	4b40      	ldr	r3, [pc, #256]	@ (8000cc8 <main+0x1e4>)
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 faa0 	bl	800110c <ConsolePrintf>

    // Reconfigure clocks
    SystemClock_Config();
 8000bcc:	f000 f88e 	bl	8000cec <SystemClock_Config>
    ConsolePrintf("System clock reconfigured\r\n");
 8000bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8000ccc <main+0x1e8>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 fa9a 	bl	800110c <ConsolePrintf>

    // Reinit I2C peripheral
    MX_I2C1_Init();
 8000bd8:	f000 f982 	bl	8000ee0 <MX_I2C1_Init>
    ConsolePrintf("I2C1 reinitialized\r\n");
 8000bdc:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd0 <main+0x1ec>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 fa94 	bl	800110c <ConsolePrintf>

    // Reinit UART
    MX_USART1_UART_Init();
 8000be4:	f000 f9ee 	bl	8000fc4 <MX_USART1_UART_Init>
    ConsolePrintf("UART reinitialized\r\n");
 8000be8:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd4 <main+0x1f0>)
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 fa8e 	bl	800110c <ConsolePrintf>

    MX_LPUART1_UART_Init();
 8000bf0:	f000 f9b6 	bl	8000f60 <MX_LPUART1_UART_Init>
    ConsolePrintf("LPUART1 (lora) reinitialized\r\n");
 8000bf4:	4b38      	ldr	r3, [pc, #224]	@ (8000cd8 <main+0x1f4>)
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 fa88 	bl	800110c <ConsolePrintf>

    // Reinit WakeUp timer (MUST be outside the callback!)
    RTC_WakeUp_Init();
 8000bfc:	f7ff fe5e 	bl	80008bc <RTC_WakeUp_Init>
    ConsolePrintf("RTC Wake-Up Timer reinitialized\r\n");
 8000c00:	4b36      	ldr	r3, [pc, #216]	@ (8000cdc <main+0x1f8>)
 8000c02:	0018      	movs	r0, r3
 8000c04:	f000 fa82 	bl	800110c <ConsolePrintf>

    // Measure battery voltage after waking up
    HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin, GPIO_PIN_SET);
 8000c08:	4b29      	ldr	r3, [pc, #164]	@ (8000cb0 <main+0x1cc>)
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f002 f8c6 	bl	8002da0 <HAL_GPIO_WritePin>
    HAL_Delay(300);                          // allow divider to settle
 8000c14:	2396      	movs	r3, #150	@ 0x96
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f001 f881 	bl	8001d20 <HAL_Delay>
    batt = ReadBattery_mV();
 8000c1e:	f7ff fecf 	bl	80009c0 <ReadBattery_mV>
 8000c22:	0003      	movs	r3, r0
 8000c24:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin, GPIO_PIN_RESET);
 8000c26:	4b22      	ldr	r3, [pc, #136]	@ (8000cb0 <main+0x1cc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f002 f8b7 	bl	8002da0 <HAL_GPIO_WritePin>
    ConsolePrintf("Battery voltage: %lu mV\r\n", batt);
 8000c32:	687a      	ldr	r2, [r7, #4]
 8000c34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <main+0x1fc>)
 8000c36:	0011      	movs	r1, r2
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f000 fa67 	bl	800110c <ConsolePrintf>


    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8000c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <main+0x1cc>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	2120      	movs	r1, #32
 8000c44:	0018      	movs	r0, r3
 8000c46:	f002 f8ab 	bl	8002da0 <HAL_GPIO_WritePin>
    HAL_Delay(300); // Short Delay to let voltage stabalize
 8000c4a:	2396      	movs	r3, #150	@ 0x96
 8000c4c:	005b      	lsls	r3, r3, #1
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f001 f866 	bl	8001d20 <HAL_Delay>
    scan_i2c_bus();
 8000c54:	f000 fcac 	bl	80015b0 <scan_i2c_bus>
    bool i2c_success = sensor_init_and_read();
 8000c58:	1cfc      	adds	r4, r7, #3
 8000c5a:	f000 fcd1 	bl	8001600 <sensor_init_and_read>
 8000c5e:	0003      	movs	r3, r0
 8000c60:	7023      	strb	r3, [r4, #0]
    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8000c62:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <main+0x1cc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	2120      	movs	r1, #32
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f002 f899 	bl	8002da0 <HAL_GPIO_WritePin>

    if (i2c_success)
 8000c6e:	1cfb      	adds	r3, r7, #3
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d100      	bne.n	8000c78 <main+0x194>
 8000c76:	e76b      	b.n	8000b50 <main+0x6c>
    {
		uint8_t payload[3];
		payload[0] = (uint8_t)(calculated_temp >> 8);     // high byte
 8000c78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <main+0x200>)
 8000c7a:	881b      	ldrh	r3, [r3, #0]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	003b      	movs	r3, r7
 8000c84:	701a      	strb	r2, [r3, #0]
		payload[1] = (uint8_t)(calculated_temp & 0xFF);   // low byte
 8000c86:	4b17      	ldr	r3, [pc, #92]	@ (8000ce4 <main+0x200>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	b2da      	uxtb	r2, r3
 8000c8c:	003b      	movs	r3, r7
 8000c8e:	705a      	strb	r2, [r3, #1]
		payload[2] = calculated_hum;
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <main+0x204>)
 8000c92:	781a      	ldrb	r2, [r3, #0]
 8000c94:	003b      	movs	r3, r7
 8000c96:	709a      	strb	r2, [r3, #2]
		LoRaWAN_SendHex(&lora, payload, 3);
 8000c98:	0039      	movs	r1, r7
 8000c9a:	4b04      	ldr	r3, [pc, #16]	@ (8000cac <main+0x1c8>)
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff fd32 	bl	8000708 <LoRaWAN_SendHex>
  {
 8000ca4:	e754      	b.n	8000b50 <main+0x6c>
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	00002710 	.word	0x00002710
 8000cac:	2000025c 	.word	0x2000025c
 8000cb0:	50000400 	.word	0x50000400
 8000cb4:	08006d68 	.word	0x08006d68
 8000cb8:	08006d80 	.word	0x08006d80
 8000cbc:	200000d4 	.word	0x200000d4
 8000cc0:	200001b0 	.word	0x200001b0
 8000cc4:	20000128 	.word	0x20000128
 8000cc8:	08006d94 	.word	0x08006d94
 8000ccc:	08006dac 	.word	0x08006dac
 8000cd0:	08006dc8 	.word	0x08006dc8
 8000cd4:	08006de0 	.word	0x08006de0
 8000cd8:	08006df8 	.word	0x08006df8
 8000cdc:	08006e18 	.word	0x08006e18
 8000ce0:	08006e3c 	.word	0x08006e3c
 8000ce4:	2000026e 	.word	0x2000026e
 8000ce8:	20000270 	.word	0x20000270

08000cec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b09f      	sub	sp, #124	@ 0x7c
 8000cf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cf2:	2440      	movs	r4, #64	@ 0x40
 8000cf4:	193b      	adds	r3, r7, r4
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	2338      	movs	r3, #56	@ 0x38
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	f005 facd 	bl	800629c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d02:	232c      	movs	r3, #44	@ 0x2c
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	0018      	movs	r0, r3
 8000d08:	2314      	movs	r3, #20
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f005 fac5 	bl	800629c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	0018      	movs	r0, r3
 8000d16:	2328      	movs	r3, #40	@ 0x28
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	f005 fabe 	bl	800629c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d20:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd4 <SystemClock_Config+0xe8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd8 <SystemClock_Config+0xec>)
 8000d26:	401a      	ands	r2, r3
 8000d28:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <SystemClock_Config+0xe8>)
 8000d2a:	2180      	movs	r1, #128	@ 0x80
 8000d2c:	0109      	lsls	r1, r1, #4
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000d32:	0021      	movs	r1, r4
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2218      	movs	r2, #24
 8000d38:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2201      	movs	r2, #1
 8000d44:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	22a0      	movs	r2, #160	@ 0xa0
 8000d50:	0212      	lsls	r2, r2, #8
 8000d52:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2200      	movs	r2, #0
 8000d58:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f003 f809 	bl	8003d74 <HAL_RCC_OscConfig>
 8000d62:	1e03      	subs	r3, r0, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000d66:	f000 fa47 	bl	80011f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6a:	212c      	movs	r1, #44	@ 0x2c
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	220f      	movs	r2, #15
 8000d70:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2200      	movs	r2, #0
 8000d82:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f003 fbc4 	bl	800451c <HAL_RCC_ClockConfig>
 8000d94:	1e03      	subs	r3, r0, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000d98:	f000 fa2e 	bl	80011f8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	222d      	movs	r2, #45	@ 0x2d
 8000da0:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2200      	movs	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2280      	movs	r2, #128	@ 0x80
 8000db8:	0292      	lsls	r2, r2, #10
 8000dba:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f003 fdb0 	bl	8004924 <HAL_RCCEx_PeriphCLKConfig>
 8000dc4:	1e03      	subs	r3, r0, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000dc8:	f000 fa16 	bl	80011f8 <Error_Handler>
  }
}
 8000dcc:	46c0      	nop			@ (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b01f      	add	sp, #124	@ 0x7c
 8000dd2:	bd90      	pop	{r4, r7, pc}
 8000dd4:	40007000 	.word	0x40007000
 8000dd8:	ffffe7ff 	.word	0xffffe7ff

08000ddc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de2:	003b      	movs	r3, r7
 8000de4:	0018      	movs	r0, r3
 8000de6:	2308      	movs	r3, #8
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f005 fa56 	bl	800629c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000df0:	4b37      	ldr	r3, [pc, #220]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000df2:	4a38      	ldr	r2, [pc, #224]	@ (8000ed4 <MX_ADC_Init+0xf8>)
 8000df4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000df6:	4b36      	ldr	r3, [pc, #216]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000dfc:	4b34      	ldr	r3, [pc, #208]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000dfe:	22c0      	movs	r2, #192	@ 0xc0
 8000e00:	0612      	lsls	r2, r2, #24
 8000e02:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000e04:	4b32      	ldr	r3, [pc, #200]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000e0a:	4b31      	ldr	r3, [pc, #196]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000e10:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e12:	2201      	movs	r2, #1
 8000e14:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e16:	4b2e      	ldr	r3, [pc, #184]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000e1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e1e:	2220      	movs	r2, #32
 8000e20:	2100      	movs	r1, #0
 8000e22:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000e24:	4b2a      	ldr	r3, [pc, #168]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e26:	2221      	movs	r2, #33	@ 0x21
 8000e28:	2100      	movs	r1, #0
 8000e2a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e2c:	4b28      	ldr	r3, [pc, #160]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e32:	4b27      	ldr	r3, [pc, #156]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e34:	22c2      	movs	r2, #194	@ 0xc2
 8000e36:	32ff      	adds	r2, #255	@ 0xff
 8000e38:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000e3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e3c:	222c      	movs	r2, #44	@ 0x2c
 8000e3e:	2100      	movs	r1, #0
 8000e40:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e42:	4b23      	ldr	r3, [pc, #140]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e44:	2204      	movs	r2, #4
 8000e46:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e48:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000e4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000e54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000e60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 ffa4 	bl	8001db0 <HAL_ADC_Init>
 8000e68:	1e03      	subs	r3, r0, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000e6c:	f000 f9c4 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e70:	003b      	movs	r3, r7
 8000e72:	2201      	movs	r2, #1
 8000e74:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e76:	003b      	movs	r3, r7
 8000e78:	2280      	movs	r2, #128	@ 0x80
 8000e7a:	0152      	lsls	r2, r2, #5
 8000e7c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e7e:	003a      	movs	r2, r7
 8000e80:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e82:	0011      	movs	r1, r2
 8000e84:	0018      	movs	r0, r3
 8000e86:	f001 fa43 	bl	8002310 <HAL_ADC_ConfigChannel>
 8000e8a:	1e03      	subs	r3, r0, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8000e8e:	f000 f9b3 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e92:	003b      	movs	r3, r7
 8000e94:	4a10      	ldr	r2, [pc, #64]	@ (8000ed8 <MX_ADC_Init+0xfc>)
 8000e96:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e98:	003a      	movs	r2, r7
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000e9c:	0011      	movs	r1, r2
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f001 fa36 	bl	8002310 <HAL_ADC_ConfigChannel>
 8000ea4:	1e03      	subs	r3, r0, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000ea8:	f000 f9a6 	bl	80011f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000eac:	003b      	movs	r3, r7
 8000eae:	4a0b      	ldr	r2, [pc, #44]	@ (8000edc <MX_ADC_Init+0x100>)
 8000eb0:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000eb2:	003a      	movs	r2, r7
 8000eb4:	4b06      	ldr	r3, [pc, #24]	@ (8000ed0 <MX_ADC_Init+0xf4>)
 8000eb6:	0011      	movs	r1, r2
 8000eb8:	0018      	movs	r0, r3
 8000eba:	f001 fa29 	bl	8002310 <HAL_ADC_ConfigChannel>
 8000ebe:	1e03      	subs	r3, r0, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 8000ec2:	f000 f999 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	b002      	add	sp, #8
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			@ (mov r8, r8)
 8000ed0:	20000078 	.word	0x20000078
 8000ed4:	40012400 	.word	0x40012400
 8000ed8:	48040000 	.word	0x48040000
 8000edc:	44020000 	.word	0x44020000

08000ee0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <MX_I2C1_Init+0x78>)
 8000ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f5c <MX_I2C1_Init+0x7c>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <MX_I2C1_Init+0x78>)
 8000eec:	22c1      	movs	r2, #193	@ 0xc1
 8000eee:	00d2      	lsls	r2, r2, #3
 8000ef0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <MX_I2C1_Init+0x78>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef8:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <MX_I2C1_Init+0x78>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000efe:	4b16      	ldr	r3, [pc, #88]	@ (8000f58 <MX_I2C1_Init+0x78>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f04:	4b14      	ldr	r3, [pc, #80]	@ (8000f58 <MX_I2C1_Init+0x78>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	@ (8000f58 <MX_I2C1_Init+0x78>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f10:	4b11      	ldr	r3, [pc, #68]	@ (8000f58 <MX_I2C1_Init+0x78>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <MX_I2C1_Init+0x78>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <MX_I2C1_Init+0x78>)
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f001 ff5c 	bl	8002ddc <HAL_I2C_Init>
 8000f24:	1e03      	subs	r3, r0, #0
 8000f26:	d001      	beq.n	8000f2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f28:	f000 f966 	bl	80011f8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <MX_I2C1_Init+0x78>)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	0018      	movs	r0, r3
 8000f32:	f002 fe2b 	bl	8003b8c <HAL_I2CEx_ConfigAnalogFilter>
 8000f36:	1e03      	subs	r3, r0, #0
 8000f38:	d001      	beq.n	8000f3e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000f3a:	f000 f95d 	bl	80011f8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <MX_I2C1_Init+0x78>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	0018      	movs	r0, r3
 8000f44:	f002 fe6e 	bl	8003c24 <HAL_I2CEx_ConfigDigitalFilter>
 8000f48:	1e03      	subs	r3, r0, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000f4c:	f000 f954 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f50:	46c0      	nop			@ (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			@ (mov r8, r8)
 8000f58:	200000d4 	.word	0x200000d4
 8000f5c:	40005400 	.word	0x40005400

08000f60 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000f64:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <MX_LPUART1_UART_Init+0x58>)
 8000f66:	4a15      	ldr	r2, [pc, #84]	@ (8000fbc <MX_LPUART1_UART_Init+0x5c>)
 8000f68:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <MX_LPUART1_UART_Init+0x58>)
 8000f6c:	22e1      	movs	r2, #225	@ 0xe1
 8000f6e:	0252      	lsls	r2, r2, #9
 8000f70:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <MX_LPUART1_UART_Init+0x58>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <MX_LPUART1_UART_Init+0x58>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb8 <MX_LPUART1_UART_Init+0x58>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <MX_LPUART1_UART_Init+0x58>)
 8000f86:	220c      	movs	r2, #12
 8000f88:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb8 <MX_LPUART1_UART_Init+0x58>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f90:	4b09      	ldr	r3, [pc, #36]	@ (8000fb8 <MX_LPUART1_UART_Init+0x58>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f96:	4b08      	ldr	r3, [pc, #32]	@ (8000fb8 <MX_LPUART1_UART_Init+0x58>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MX_LPUART1_UART_Init+0x58>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f004 f9ca 	bl	8005338 <HAL_UART_Init>
 8000fa4:	1e03      	subs	r3, r0, #0
 8000fa6:	d001      	beq.n	8000fac <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000fa8:	f000 f926 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  lora.huart = &hlpuart1;
 8000fac:	4b04      	ldr	r3, [pc, #16]	@ (8000fc0 <MX_LPUART1_UART_Init+0x60>)
 8000fae:	4a02      	ldr	r2, [pc, #8]	@ (8000fb8 <MX_LPUART1_UART_Init+0x58>)
 8000fb0:	601a      	str	r2, [r3, #0]
  /* USER CODE END LPUART1_Init 2 */

}
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000128 	.word	0x20000128
 8000fbc:	40004800 	.word	0x40004800
 8000fc0:	2000025c 	.word	0x2000025c

08000fc4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fc8:	4b16      	ldr	r3, [pc, #88]	@ (8001024 <MX_USART1_UART_Init+0x60>)
 8000fca:	4a17      	ldr	r2, [pc, #92]	@ (8001028 <MX_USART1_UART_Init+0x64>)
 8000fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fce:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <MX_USART1_UART_Init+0x60>)
 8000fd0:	22e1      	movs	r2, #225	@ 0xe1
 8000fd2:	0252      	lsls	r2, r2, #9
 8000fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd6:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <MX_USART1_UART_Init+0x60>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	@ (8001024 <MX_USART1_UART_Init+0x60>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <MX_USART1_UART_Init+0x60>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <MX_USART1_UART_Init+0x60>)
 8000fea:	220c      	movs	r2, #12
 8000fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	@ (8001024 <MX_USART1_UART_Init+0x60>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	@ (8001024 <MX_USART1_UART_Init+0x60>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <MX_USART1_UART_Init+0x60>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001000:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <MX_USART1_UART_Init+0x60>)
 8001002:	2200      	movs	r2, #0
 8001004:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001006:	4b07      	ldr	r3, [pc, #28]	@ (8001024 <MX_USART1_UART_Init+0x60>)
 8001008:	0018      	movs	r0, r3
 800100a:	f004 f995 	bl	8005338 <HAL_UART_Init>
 800100e:	1e03      	subs	r3, r0, #0
 8001010:	d001      	beq.n	8001016 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001012:	f000 f8f1 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  ConsolePrintf("USART1 (DBG) Cnfigured\r\n");
 8001016:	4b05      	ldr	r3, [pc, #20]	@ (800102c <MX_USART1_UART_Init+0x68>)
 8001018:	0018      	movs	r0, r3
 800101a:	f000 f877 	bl	800110c <ConsolePrintf>
  /* USER CODE END USART1_Init 2 */

}
 800101e:	46c0      	nop			@ (mov r8, r8)
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200001b0 	.word	0x200001b0
 8001028:	40013800 	.word	0x40013800
 800102c:	08006e58 	.word	0x08006e58

08001030 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001034:	4b11      	ldr	r3, [pc, #68]	@ (800107c <MX_RTC_Init+0x4c>)
 8001036:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <MX_RTC_Init+0x50>)
 8001038:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <MX_RTC_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001040:	4b0e      	ldr	r3, [pc, #56]	@ (800107c <MX_RTC_Init+0x4c>)
 8001042:	227f      	movs	r2, #127	@ 0x7f
 8001044:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001046:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <MX_RTC_Init+0x4c>)
 8001048:	22ff      	movs	r2, #255	@ 0xff
 800104a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800104c:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <MX_RTC_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <MX_RTC_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001058:	4b08      	ldr	r3, [pc, #32]	@ (800107c <MX_RTC_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800105e:	4b07      	ldr	r3, [pc, #28]	@ (800107c <MX_RTC_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001064:	4b05      	ldr	r3, [pc, #20]	@ (800107c <MX_RTC_Init+0x4c>)
 8001066:	0018      	movs	r0, r3
 8001068:	f003 fdfa 	bl	8004c60 <HAL_RTC_Init>
 800106c:	1e03      	subs	r3, r0, #0
 800106e:	d001      	beq.n	8001074 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001070:	f000 f8c2 	bl	80011f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001074:	46c0      	nop			@ (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	20000238 	.word	0x20000238
 8001080:	40002800 	.word	0x40002800

08001084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b089      	sub	sp, #36	@ 0x24
 8001088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108a:	240c      	movs	r4, #12
 800108c:	193b      	adds	r3, r7, r4
 800108e:	0018      	movs	r0, r3
 8001090:	2314      	movs	r3, #20
 8001092:	001a      	movs	r2, r3
 8001094:	2100      	movs	r1, #0
 8001096:	f005 f901 	bl	800629c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	4b1a      	ldr	r3, [pc, #104]	@ (8001104 <MX_GPIO_Init+0x80>)
 800109c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800109e:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <MX_GPIO_Init+0x80>)
 80010a0:	2101      	movs	r1, #1
 80010a2:	430a      	orrs	r2, r1
 80010a4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010a6:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <MX_GPIO_Init+0x80>)
 80010a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010aa:	2201      	movs	r2, #1
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
 80010b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b2:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_GPIO_Init+0x80>)
 80010b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <MX_GPIO_Init+0x80>)
 80010b8:	2102      	movs	r1, #2
 80010ba:	430a      	orrs	r2, r1
 80010bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010be:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_GPIO_Init+0x80>)
 80010c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c2:	2202      	movs	r2, #2
 80010c4:	4013      	ands	r3, r2
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <MX_GPIO_Init+0x84>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	2121      	movs	r1, #33	@ 0x21
 80010d0:	0018      	movs	r0, r3
 80010d2:	f001 fe65 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VBAT_MEAS_EN_Pin I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin;
 80010d6:	0021      	movs	r1, r4
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	2221      	movs	r2, #33	@ 0x21
 80010dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010de:	187b      	adds	r3, r7, r1
 80010e0:	2201      	movs	r2, #1
 80010e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	187b      	adds	r3, r7, r1
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2200      	movs	r2, #0
 80010ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <MX_GPIO_Init+0x84>)
 80010f4:	0019      	movs	r1, r3
 80010f6:	0010      	movs	r0, r2
 80010f8:	f001 fbf2 	bl	80028e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010fc:	46c0      	nop			@ (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b009      	add	sp, #36	@ 0x24
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	40021000 	.word	0x40021000
 8001108:	50000400 	.word	0x50000400

0800110c <ConsolePrintf>:

/* USER CODE BEGIN 4 */
void ConsolePrintf(const char *format, ...)
{
 800110c:	b40f      	push	{r0, r1, r2, r3}
 800110e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001110:	b0df      	sub	sp, #380	@ 0x17c
 8001112:	af06      	add	r7, sp, #24
  char final_buffer[160];    // Combined buffer (timestamp + message)

  // Get time and date from RTC
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001114:	2308      	movs	r3, #8
 8001116:	18f9      	adds	r1, r7, r3
 8001118:	4b31      	ldr	r3, [pc, #196]	@ (80011e0 <ConsolePrintf+0xd4>)
 800111a:	2200      	movs	r2, #0
 800111c:	0018      	movs	r0, r3
 800111e:	f003 fe3b 	bl	8004d98 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001122:	231c      	movs	r3, #28
 8001124:	18f9      	adds	r1, r7, r3
 8001126:	4b2e      	ldr	r3, [pc, #184]	@ (80011e0 <ConsolePrintf+0xd4>)
 8001128:	2200      	movs	r2, #0
 800112a:	0018      	movs	r0, r3
 800112c:	f003 fe92 	bl	8004e54 <HAL_RTC_GetDate>

  // Format timestamp as [YYYY-MM-DD HH:MM:SS]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
           date.Year, date.Month, date.Date,
 8001130:	4b2c      	ldr	r3, [pc, #176]	@ (80011e4 <ConsolePrintf+0xd8>)
 8001132:	22b0      	movs	r2, #176	@ 0xb0
 8001134:	0052      	lsls	r2, r2, #1
 8001136:	189b      	adds	r3, r3, r2
 8001138:	19db      	adds	r3, r3, r7
 800113a:	78db      	ldrb	r3, [r3, #3]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 800113c:	469c      	mov	ip, r3
           date.Year, date.Month, date.Date,
 800113e:	4b29      	ldr	r3, [pc, #164]	@ (80011e4 <ConsolePrintf+0xd8>)
 8001140:	189b      	adds	r3, r3, r2
 8001142:	19db      	adds	r3, r3, r7
 8001144:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001146:	0019      	movs	r1, r3
           date.Year, date.Month, date.Date,
 8001148:	4b26      	ldr	r3, [pc, #152]	@ (80011e4 <ConsolePrintf+0xd8>)
 800114a:	189b      	adds	r3, r3, r2
 800114c:	19db      	adds	r3, r3, r7
 800114e:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001150:	001c      	movs	r4, r3
           time.Hours, time.Minutes, time.Seconds);
 8001152:	4b25      	ldr	r3, [pc, #148]	@ (80011e8 <ConsolePrintf+0xdc>)
 8001154:	189b      	adds	r3, r3, r2
 8001156:	19db      	adds	r3, r3, r7
 8001158:	781b      	ldrb	r3, [r3, #0]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 800115a:	001d      	movs	r5, r3
           time.Hours, time.Minutes, time.Seconds);
 800115c:	4b22      	ldr	r3, [pc, #136]	@ (80011e8 <ConsolePrintf+0xdc>)
 800115e:	189b      	adds	r3, r3, r2
 8001160:	19db      	adds	r3, r3, r7
 8001162:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001164:	001e      	movs	r6, r3
           time.Hours, time.Minutes, time.Seconds);
 8001166:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <ConsolePrintf+0xdc>)
 8001168:	189b      	adds	r3, r3, r2
 800116a:	19db      	adds	r3, r3, r7
 800116c:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 800116e:	4a1f      	ldr	r2, [pc, #124]	@ (80011ec <ConsolePrintf+0xe0>)
 8001170:	20c0      	movs	r0, #192	@ 0xc0
 8001172:	1838      	adds	r0, r7, r0
 8001174:	9304      	str	r3, [sp, #16]
 8001176:	9603      	str	r6, [sp, #12]
 8001178:	9502      	str	r5, [sp, #8]
 800117a:	9401      	str	r4, [sp, #4]
 800117c:	9100      	str	r1, [sp, #0]
 800117e:	4663      	mov	r3, ip
 8001180:	2120      	movs	r1, #32
 8001182:	f004 fff9 	bl	8006178 <sniprintf>

  // Format the original message
  va_list args;
  va_start(args, format);
 8001186:	23be      	movs	r3, #190	@ 0xbe
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	18fb      	adds	r3, r7, r3
 800118c:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), format, args);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	22bc      	movs	r2, #188	@ 0xbc
 8001192:	0052      	lsls	r2, r2, #1
 8001194:	18ba      	adds	r2, r7, r2
 8001196:	6812      	ldr	r2, [r2, #0]
 8001198:	25e0      	movs	r5, #224	@ 0xe0
 800119a:	1978      	adds	r0, r7, r5
 800119c:	2180      	movs	r1, #128	@ 0x80
 800119e:	f005 f871 	bl	8006284 <vsniprintf>
  va_end(args);

  // Combine timestamp and message
  snprintf(final_buffer, sizeof(final_buffer), "%s%s", timestamp_buffer, buffer);
 80011a2:	20c0      	movs	r0, #192	@ 0xc0
 80011a4:	1839      	adds	r1, r7, r0
 80011a6:	4a12      	ldr	r2, [pc, #72]	@ (80011f0 <ConsolePrintf+0xe4>)
 80011a8:	2420      	movs	r4, #32
 80011aa:	1938      	adds	r0, r7, r4
 80011ac:	197b      	adds	r3, r7, r5
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	000b      	movs	r3, r1
 80011b2:	21a0      	movs	r1, #160	@ 0xa0
 80011b4:	f004 ffe0 	bl	8006178 <sniprintf>

  // Transmit the combined message
  HAL_UART_Transmit(&huart1, (uint8_t *)final_buffer, strlen(final_buffer), HAL_MAX_DELAY);
 80011b8:	193b      	adds	r3, r7, r4
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7fe ffa4 	bl	8000108 <strlen>
 80011c0:	0003      	movs	r3, r0
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	2301      	movs	r3, #1
 80011c6:	425b      	negs	r3, r3
 80011c8:	1939      	adds	r1, r7, r4
 80011ca:	480a      	ldr	r0, [pc, #40]	@ (80011f4 <ConsolePrintf+0xe8>)
 80011cc:	f004 f946 	bl	800545c <HAL_UART_Transmit>
}
 80011d0:	46c0      	nop			@ (mov r8, r8)
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b059      	add	sp, #356	@ 0x164
 80011d6:	bcf0      	pop	{r4, r5, r6, r7}
 80011d8:	bc08      	pop	{r3}
 80011da:	b004      	add	sp, #16
 80011dc:	4718      	bx	r3
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	20000238 	.word	0x20000238
 80011e4:	fffffebc 	.word	0xfffffebc
 80011e8:	fffffea8 	.word	0xfffffea8
 80011ec:	08006e74 	.word	0x08006e74
 80011f0:	08006e98 	.word	0x08006e98
 80011f4:	200001b0 	.word	0x200001b0

080011f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011fc:	b672      	cpsid	i
}
 80011fe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001200:	46c0      	nop			@ (mov r8, r8)
 8001202:	e7fd      	b.n	8001200 <Error_Handler+0x8>

08001204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001208:	4b07      	ldr	r3, [pc, #28]	@ (8001228 <HAL_MspInit+0x24>)
 800120a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_MspInit+0x24>)
 800120e:	2101      	movs	r1, #1
 8001210:	430a      	orrs	r2, r1
 8001212:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	4b04      	ldr	r3, [pc, #16]	@ (8001228 <HAL_MspInit+0x24>)
 8001216:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001218:	4b03      	ldr	r3, [pc, #12]	@ (8001228 <HAL_MspInit+0x24>)
 800121a:	2180      	movs	r1, #128	@ 0x80
 800121c:	0549      	lsls	r1, r1, #21
 800121e:	430a      	orrs	r2, r1
 8001220:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001222:	46c0      	nop			@ (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b089      	sub	sp, #36	@ 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	240c      	movs	r4, #12
 8001236:	193b      	adds	r3, r7, r4
 8001238:	0018      	movs	r0, r3
 800123a:	2314      	movs	r3, #20
 800123c:	001a      	movs	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	f005 f82c 	bl	800629c <memset>
  if(hadc->Instance==ADC1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a14      	ldr	r2, [pc, #80]	@ (800129c <HAL_ADC_MspInit+0x70>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d122      	bne.n	8001294 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <HAL_ADC_MspInit+0x74>)
 8001250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001252:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <HAL_ADC_MspInit+0x74>)
 8001254:	2180      	movs	r1, #128	@ 0x80
 8001256:	0089      	lsls	r1, r1, #2
 8001258:	430a      	orrs	r2, r1
 800125a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125c:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <HAL_ADC_MspInit+0x74>)
 800125e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <HAL_ADC_MspInit+0x74>)
 8001262:	2101      	movs	r1, #1
 8001264:	430a      	orrs	r2, r1
 8001266:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001268:	4b0d      	ldr	r3, [pc, #52]	@ (80012a0 <HAL_ADC_MspInit+0x74>)
 800126a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800126c:	2201      	movs	r2, #1
 800126e:	4013      	ands	r3, r2
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = VBAT_MEAS_Pin;
 8001274:	193b      	adds	r3, r7, r4
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127a:	193b      	adds	r3, r7, r4
 800127c:	2203      	movs	r2, #3
 800127e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	193b      	adds	r3, r7, r4
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBAT_MEAS_GPIO_Port, &GPIO_InitStruct);
 8001286:	193a      	adds	r2, r7, r4
 8001288:	23a0      	movs	r3, #160	@ 0xa0
 800128a:	05db      	lsls	r3, r3, #23
 800128c:	0011      	movs	r1, r2
 800128e:	0018      	movs	r0, r3
 8001290:	f001 fb26 	bl	80028e0 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b009      	add	sp, #36	@ 0x24
 800129a:	bd90      	pop	{r4, r7, pc}
 800129c:	40012400 	.word	0x40012400
 80012a0:	40021000 	.word	0x40021000

080012a4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	240c      	movs	r4, #12
 80012ae:	193b      	adds	r3, r7, r4
 80012b0:	0018      	movs	r0, r3
 80012b2:	2314      	movs	r3, #20
 80012b4:	001a      	movs	r2, r3
 80012b6:	2100      	movs	r1, #0
 80012b8:	f004 fff0 	bl	800629c <memset>
  if(hi2c->Instance==I2C1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a17      	ldr	r2, [pc, #92]	@ (8001320 <HAL_I2C_MspInit+0x7c>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d128      	bne.n	8001318 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <HAL_I2C_MspInit+0x80>)
 80012c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012ca:	4b16      	ldr	r3, [pc, #88]	@ (8001324 <HAL_I2C_MspInit+0x80>)
 80012cc:	2102      	movs	r1, #2
 80012ce:	430a      	orrs	r2, r1
 80012d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012d2:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <HAL_I2C_MspInit+0x80>)
 80012d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d6:	2202      	movs	r2, #2
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012de:	0021      	movs	r1, r4
 80012e0:	187b      	adds	r3, r7, r1
 80012e2:	22c0      	movs	r2, #192	@ 0xc0
 80012e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	2212      	movs	r2, #18
 80012ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	187b      	adds	r3, r7, r1
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f2:	187b      	adds	r3, r7, r1
 80012f4:	2203      	movs	r2, #3
 80012f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80012f8:	187b      	adds	r3, r7, r1
 80012fa:	2201      	movs	r2, #1
 80012fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fe:	187b      	adds	r3, r7, r1
 8001300:	4a09      	ldr	r2, [pc, #36]	@ (8001328 <HAL_I2C_MspInit+0x84>)
 8001302:	0019      	movs	r1, r3
 8001304:	0010      	movs	r0, r2
 8001306:	f001 faeb 	bl	80028e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_I2C_MspInit+0x80>)
 800130c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800130e:	4b05      	ldr	r3, [pc, #20]	@ (8001324 <HAL_I2C_MspInit+0x80>)
 8001310:	2180      	movs	r1, #128	@ 0x80
 8001312:	0389      	lsls	r1, r1, #14
 8001314:	430a      	orrs	r2, r1
 8001316:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001318:	46c0      	nop			@ (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b009      	add	sp, #36	@ 0x24
 800131e:	bd90      	pop	{r4, r7, pc}
 8001320:	40005400 	.word	0x40005400
 8001324:	40021000 	.word	0x40021000
 8001328:	50000400 	.word	0x50000400

0800132c <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0b      	ldr	r2, [pc, #44]	@ (8001368 <HAL_I2C_MspDeInit+0x3c>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10f      	bne.n	800135e <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <HAL_I2C_MspDeInit+0x40>)
 8001340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001342:	4b0a      	ldr	r3, [pc, #40]	@ (800136c <HAL_I2C_MspDeInit+0x40>)
 8001344:	490a      	ldr	r1, [pc, #40]	@ (8001370 <HAL_I2C_MspDeInit+0x44>)
 8001346:	400a      	ands	r2, r1
 8001348:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800134a:	4b0a      	ldr	r3, [pc, #40]	@ (8001374 <HAL_I2C_MspDeInit+0x48>)
 800134c:	2140      	movs	r1, #64	@ 0x40
 800134e:	0018      	movs	r0, r3
 8001350:	f001 fc44 	bl	8002bdc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8001354:	4b07      	ldr	r3, [pc, #28]	@ (8001374 <HAL_I2C_MspDeInit+0x48>)
 8001356:	2180      	movs	r1, #128	@ 0x80
 8001358:	0018      	movs	r0, r3
 800135a:	f001 fc3f 	bl	8002bdc <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800135e:	46c0      	nop			@ (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b002      	add	sp, #8
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			@ (mov r8, r8)
 8001368:	40005400 	.word	0x40005400
 800136c:	40021000 	.word	0x40021000
 8001370:	ffdfffff 	.word	0xffdfffff
 8001374:	50000400 	.word	0x50000400

08001378 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b08b      	sub	sp, #44	@ 0x2c
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	2414      	movs	r4, #20
 8001382:	193b      	adds	r3, r7, r4
 8001384:	0018      	movs	r0, r3
 8001386:	2314      	movs	r3, #20
 8001388:	001a      	movs	r2, r3
 800138a:	2100      	movs	r1, #0
 800138c:	f004 ff86 	bl	800629c <memset>
  if(huart->Instance==LPUART1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a30      	ldr	r2, [pc, #192]	@ (8001458 <HAL_UART_MspInit+0xe0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d12a      	bne.n	80013f0 <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800139a:	4b30      	ldr	r3, [pc, #192]	@ (800145c <HAL_UART_MspInit+0xe4>)
 800139c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800139e:	4b2f      	ldr	r3, [pc, #188]	@ (800145c <HAL_UART_MspInit+0xe4>)
 80013a0:	2180      	movs	r1, #128	@ 0x80
 80013a2:	02c9      	lsls	r1, r1, #11
 80013a4:	430a      	orrs	r2, r1
 80013a6:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a8:	4b2c      	ldr	r3, [pc, #176]	@ (800145c <HAL_UART_MspInit+0xe4>)
 80013aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013ac:	4b2b      	ldr	r3, [pc, #172]	@ (800145c <HAL_UART_MspInit+0xe4>)
 80013ae:	2101      	movs	r1, #1
 80013b0:	430a      	orrs	r2, r1
 80013b2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013b4:	4b29      	ldr	r3, [pc, #164]	@ (800145c <HAL_UART_MspInit+0xe4>)
 80013b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b8:	2201      	movs	r2, #1
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
 80013be:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013c0:	0021      	movs	r1, r4
 80013c2:	187b      	adds	r3, r7, r1
 80013c4:	220c      	movs	r2, #12
 80013c6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c8:	187b      	adds	r3, r7, r1
 80013ca:	2202      	movs	r2, #2
 80013cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	187b      	adds	r3, r7, r1
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	2203      	movs	r2, #3
 80013d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 80013da:	187b      	adds	r3, r7, r1
 80013dc:	2206      	movs	r2, #6
 80013de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e0:	187a      	adds	r2, r7, r1
 80013e2:	23a0      	movs	r3, #160	@ 0xa0
 80013e4:	05db      	lsls	r3, r3, #23
 80013e6:	0011      	movs	r1, r2
 80013e8:	0018      	movs	r0, r3
 80013ea:	f001 fa79 	bl	80028e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 80013ee:	e02f      	b.n	8001450 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001460 <HAL_UART_MspInit+0xe8>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d12a      	bne.n	8001450 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80013fa:	4b18      	ldr	r3, [pc, #96]	@ (800145c <HAL_UART_MspInit+0xe4>)
 80013fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013fe:	4b17      	ldr	r3, [pc, #92]	@ (800145c <HAL_UART_MspInit+0xe4>)
 8001400:	2180      	movs	r1, #128	@ 0x80
 8001402:	01c9      	lsls	r1, r1, #7
 8001404:	430a      	orrs	r2, r1
 8001406:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b14      	ldr	r3, [pc, #80]	@ (800145c <HAL_UART_MspInit+0xe4>)
 800140a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800140c:	4b13      	ldr	r3, [pc, #76]	@ (800145c <HAL_UART_MspInit+0xe4>)
 800140e:	2101      	movs	r1, #1
 8001410:	430a      	orrs	r2, r1
 8001412:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001414:	4b11      	ldr	r3, [pc, #68]	@ (800145c <HAL_UART_MspInit+0xe4>)
 8001416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001418:	2201      	movs	r2, #1
 800141a:	4013      	ands	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001420:	2114      	movs	r1, #20
 8001422:	187b      	adds	r3, r7, r1
 8001424:	22c0      	movs	r2, #192	@ 0xc0
 8001426:	00d2      	lsls	r2, r2, #3
 8001428:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2202      	movs	r2, #2
 800142e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	187b      	adds	r3, r7, r1
 8001438:	2203      	movs	r2, #3
 800143a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800143c:	187b      	adds	r3, r7, r1
 800143e:	2204      	movs	r2, #4
 8001440:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	187a      	adds	r2, r7, r1
 8001444:	23a0      	movs	r3, #160	@ 0xa0
 8001446:	05db      	lsls	r3, r3, #23
 8001448:	0011      	movs	r1, r2
 800144a:	0018      	movs	r0, r3
 800144c:	f001 fa48 	bl	80028e0 <HAL_GPIO_Init>
}
 8001450:	46c0      	nop			@ (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b00b      	add	sp, #44	@ 0x2c
 8001456:	bd90      	pop	{r4, r7, pc}
 8001458:	40004800 	.word	0x40004800
 800145c:	40021000 	.word	0x40021000
 8001460:	40013800 	.word	0x40013800

08001464 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a13      	ldr	r2, [pc, #76]	@ (80014c0 <HAL_UART_MspDeInit+0x5c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d10c      	bne.n	8001490 <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN LPUART1_MspDeInit 0 */

    /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8001476:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <HAL_UART_MspDeInit+0x60>)
 8001478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800147a:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_UART_MspDeInit+0x60>)
 800147c:	4912      	ldr	r1, [pc, #72]	@ (80014c8 <HAL_UART_MspDeInit+0x64>)
 800147e:	400a      	ands	r2, r1
 8001480:	639a      	str	r2, [r3, #56]	@ 0x38

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8001482:	23a0      	movs	r3, #160	@ 0xa0
 8001484:	05db      	lsls	r3, r3, #23
 8001486:	210c      	movs	r1, #12
 8001488:	0018      	movs	r0, r3
 800148a:	f001 fba7 	bl	8002bdc <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 800148e:	e012      	b.n	80014b6 <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a0d      	ldr	r2, [pc, #52]	@ (80014cc <HAL_UART_MspDeInit+0x68>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d10d      	bne.n	80014b6 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART1_CLK_DISABLE();
 800149a:	4b0a      	ldr	r3, [pc, #40]	@ (80014c4 <HAL_UART_MspDeInit+0x60>)
 800149c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <HAL_UART_MspDeInit+0x60>)
 80014a0:	490b      	ldr	r1, [pc, #44]	@ (80014d0 <HAL_UART_MspDeInit+0x6c>)
 80014a2:	400a      	ands	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80014a6:	23c0      	movs	r3, #192	@ 0xc0
 80014a8:	00da      	lsls	r2, r3, #3
 80014aa:	23a0      	movs	r3, #160	@ 0xa0
 80014ac:	05db      	lsls	r3, r3, #23
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f001 fb93 	bl	8002bdc <HAL_GPIO_DeInit>
}
 80014b6:	46c0      	nop			@ (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			@ (mov r8, r8)
 80014c0:	40004800 	.word	0x40004800
 80014c4:	40021000 	.word	0x40021000
 80014c8:	fffbffff 	.word	0xfffbffff
 80014cc:	40013800 	.word	0x40013800
 80014d0:	ffffbfff 	.word	0xffffbfff

080014d4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a06      	ldr	r2, [pc, #24]	@ (80014fc <HAL_RTC_MspInit+0x28>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d106      	bne.n	80014f4 <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <HAL_RTC_MspInit+0x2c>)
 80014e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014ea:	4b05      	ldr	r3, [pc, #20]	@ (8001500 <HAL_RTC_MspInit+0x2c>)
 80014ec:	2180      	movs	r1, #128	@ 0x80
 80014ee:	02c9      	lsls	r1, r1, #11
 80014f0:	430a      	orrs	r2, r1
 80014f2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80014f4:	46c0      	nop			@ (mov r8, r8)
 80014f6:	46bd      	mov	sp, r7
 80014f8:	b002      	add	sp, #8
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40002800 	.word	0x40002800
 8001500:	40021000 	.word	0x40021000

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001508:	46c0      	nop			@ (mov r8, r8)
 800150a:	e7fd      	b.n	8001508 <NMI_Handler+0x4>

0800150c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001510:	46c0      	nop			@ (mov r8, r8)
 8001512:	e7fd      	b.n	8001510 <HardFault_Handler+0x4>

08001514 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001518:	46c0      	nop			@ (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	46c0      	nop			@ (mov r8, r8)
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152c:	f000 fbdc 	bl	8001ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001530:	46c0      	nop			@ (mov r8, r8)
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b086      	sub	sp, #24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001540:	4a14      	ldr	r2, [pc, #80]	@ (8001594 <_sbrk+0x5c>)
 8001542:	4b15      	ldr	r3, [pc, #84]	@ (8001598 <_sbrk+0x60>)
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800154c:	4b13      	ldr	r3, [pc, #76]	@ (800159c <_sbrk+0x64>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d102      	bne.n	800155a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <_sbrk+0x64>)
 8001556:	4a12      	ldr	r2, [pc, #72]	@ (80015a0 <_sbrk+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800155a:	4b10      	ldr	r3, [pc, #64]	@ (800159c <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	18d3      	adds	r3, r2, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	429a      	cmp	r2, r3
 8001566:	d207      	bcs.n	8001578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001568:	f004 feb6 	bl	80062d8 <__errno>
 800156c:	0003      	movs	r3, r0
 800156e:	220c      	movs	r2, #12
 8001570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001572:	2301      	movs	r3, #1
 8001574:	425b      	negs	r3, r3
 8001576:	e009      	b.n	800158c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001578:	4b08      	ldr	r3, [pc, #32]	@ (800159c <_sbrk+0x64>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800157e:	4b07      	ldr	r3, [pc, #28]	@ (800159c <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	18d2      	adds	r2, r2, r3
 8001586:	4b05      	ldr	r3, [pc, #20]	@ (800159c <_sbrk+0x64>)
 8001588:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800158a:	68fb      	ldr	r3, [r7, #12]
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	b006      	add	sp, #24
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20005000 	.word	0x20005000
 8001598:	00000400 	.word	0x00000400
 800159c:	20000260 	.word	0x20000260
 80015a0:	200003c8 	.word	0x200003c8

080015a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a8:	46c0      	nop			@ (mov r8, r8)
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <scan_i2c_bus>:
uint16_t calculated_temp;
uint8_t  calculated_hum;
int16_t i2c_error_code = 0;

void scan_i2c_bus(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	// we re-set these to false because we want to check this every time for safety
    has_sensor_1 = false;
 80015b4:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <scan_i2c_bus+0x44>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
    has_sensor_2 = false;
 80015ba:	4b0f      	ldr	r3, [pc, #60]	@ (80015f8 <scan_i2c_bus+0x48>)
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]

    if (HAL_I2C_IsDeviceReady(&hi2c1, 68 << 1, 1, 10) == HAL_OK) has_sensor_1 = true;
 80015c0:	480e      	ldr	r0, [pc, #56]	@ (80015fc <scan_i2c_bus+0x4c>)
 80015c2:	230a      	movs	r3, #10
 80015c4:	2201      	movs	r2, #1
 80015c6:	2188      	movs	r1, #136	@ 0x88
 80015c8:	f001 ff10 	bl	80033ec <HAL_I2C_IsDeviceReady>
 80015cc:	1e03      	subs	r3, r0, #0
 80015ce:	d102      	bne.n	80015d6 <scan_i2c_bus+0x26>
 80015d0:	4b08      	ldr	r3, [pc, #32]	@ (80015f4 <scan_i2c_bus+0x44>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_IsDeviceReady(&hi2c1, 70 << 1, 1, 10) == HAL_OK) has_sensor_2 = true;
 80015d6:	4809      	ldr	r0, [pc, #36]	@ (80015fc <scan_i2c_bus+0x4c>)
 80015d8:	230a      	movs	r3, #10
 80015da:	2201      	movs	r2, #1
 80015dc:	218c      	movs	r1, #140	@ 0x8c
 80015de:	f001 ff05 	bl	80033ec <HAL_I2C_IsDeviceReady>
 80015e2:	1e03      	subs	r3, r0, #0
 80015e4:	d102      	bne.n	80015ec <scan_i2c_bus+0x3c>
 80015e6:	4b04      	ldr	r3, [pc, #16]	@ (80015f8 <scan_i2c_bus+0x48>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	701a      	strb	r2, [r3, #0]
}
 80015ec:	46c0      	nop			@ (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	46c0      	nop			@ (mov r8, r8)
 80015f4:	20000264 	.word	0x20000264
 80015f8:	20000265 	.word	0x20000265
 80015fc:	200000d4 	.word	0x200000d4

08001600 <sensor_init_and_read>:

bool sensor_init_and_read(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
    if (!has_sensor_1 && !has_sensor_2) {
 8001604:	4b37      	ldr	r3, [pc, #220]	@ (80016e4 <sensor_init_and_read+0xe4>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2201      	movs	r2, #1
 800160a:	4053      	eors	r3, r2
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d00b      	beq.n	800162a <sensor_init_and_read+0x2a>
 8001612:	4b35      	ldr	r3, [pc, #212]	@ (80016e8 <sensor_init_and_read+0xe8>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2201      	movs	r2, #1
 8001618:	4053      	eors	r3, r2
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d004      	beq.n	800162a <sensor_init_and_read+0x2a>
    	i2c_error_code = NO_SENSORS_FOUND;
 8001620:	4b32      	ldr	r3, [pc, #200]	@ (80016ec <sensor_init_and_read+0xec>)
 8001622:	2201      	movs	r2, #1
 8001624:	801a      	strh	r2, [r3, #0]
        return false;
 8001626:	2300      	movs	r3, #0
 8001628:	e058      	b.n	80016dc <sensor_init_and_read+0xdc>
    }

    i2c_error_code = NO_ERROR;
 800162a:	4b30      	ldr	r3, [pc, #192]	@ (80016ec <sensor_init_and_read+0xec>)
 800162c:	2200      	movs	r2, #0
 800162e:	801a      	strh	r2, [r3, #0]
    HAL_Delay(100);
 8001630:	2064      	movs	r0, #100	@ 0x64
 8001632:	f000 fb75 	bl	8001d20 <HAL_Delay>

    if (has_sensor_1) {
 8001636:	4b2b      	ldr	r3, [pc, #172]	@ (80016e4 <sensor_init_and_read+0xe4>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d015      	beq.n	800166a <sensor_init_and_read+0x6a>
        sht4x_init(SHT43_I2C_ADDR_44);
 800163e:	2044      	movs	r0, #68	@ 0x44
 8001640:	f000 fa24 	bl	8001a8c <sht4x_init>
        sht4x_soft_reset();
 8001644:	f000 fa96 	bl	8001b74 <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 8001648:	4b29      	ldr	r3, [pc, #164]	@ (80016f0 <sensor_init_and_read+0xf0>)
 800164a:	0018      	movs	r0, r3
 800164c:	f000 f9f4 	bl	8001a38 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT43_I2C_ADDR_44);
 8001650:	2044      	movs	r0, #68	@ 0x44
 8001652:	f000 fa1b 	bl	8001a8c <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 8001656:	4a27      	ldr	r2, [pc, #156]	@ (80016f4 <sensor_init_and_read+0xf4>)
 8001658:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <sensor_init_and_read+0xf8>)
 800165a:	0011      	movs	r1, r2
 800165c:	0018      	movs	r0, r3
 800165e:	f000 fa25 	bl	8001aac <sht4x_measure_high_precision_ticks>
 8001662:	0003      	movs	r3, r0
 8001664:	001a      	movs	r2, r3
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <sensor_init_and_read+0xec>)
 8001668:	801a      	strh	r2, [r3, #0]
    }

    if (has_sensor_2) {
 800166a:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <sensor_init_and_read+0xe8>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d015      	beq.n	800169e <sensor_init_and_read+0x9e>
        sht4x_init(SHT40_I2C_ADDR_46);
 8001672:	2046      	movs	r0, #70	@ 0x46
 8001674:	f000 fa0a 	bl	8001a8c <sht4x_init>
        sht4x_soft_reset();
 8001678:	f000 fa7c 	bl	8001b74 <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 800167c:	4b1c      	ldr	r3, [pc, #112]	@ (80016f0 <sensor_init_and_read+0xf0>)
 800167e:	0018      	movs	r0, r3
 8001680:	f000 f9da 	bl	8001a38 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT40_I2C_ADDR_46);
 8001684:	2046      	movs	r0, #70	@ 0x46
 8001686:	f000 fa01 	bl	8001a8c <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 800168a:	4a1c      	ldr	r2, [pc, #112]	@ (80016fc <sensor_init_and_read+0xfc>)
 800168c:	4b1c      	ldr	r3, [pc, #112]	@ (8001700 <sensor_init_and_read+0x100>)
 800168e:	0011      	movs	r1, r2
 8001690:	0018      	movs	r0, r3
 8001692:	f000 fa0b 	bl	8001aac <sht4x_measure_high_precision_ticks>
 8001696:	0003      	movs	r3, r0
 8001698:	001a      	movs	r2, r3
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <sensor_init_and_read+0xec>)
 800169c:	801a      	strh	r2, [r3, #0]
    }

    calculated_temp            = (temp_ticks_1 / 100U) + 55U;
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <sensor_init_and_read+0xf8>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	2164      	movs	r1, #100	@ 0x64
 80016a4:	0018      	movs	r0, r3
 80016a6:	f7fe fd41 	bl	800012c <__udivsi3>
 80016aa:	0003      	movs	r3, r0
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	3337      	adds	r3, #55	@ 0x37
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	4b14      	ldr	r3, [pc, #80]	@ (8001704 <sensor_init_and_read+0x104>)
 80016b4:	801a      	strh	r2, [r3, #0]
//    uint16_t calculated_temp_2 = (temp_ticks_2 / 100U) + 55U;
    calculated_hum             = (hum_ticks_1 / 100U);
 80016b6:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <sensor_init_and_read+0xf4>)
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	2164      	movs	r1, #100	@ 0x64
 80016bc:	0018      	movs	r0, r3
 80016be:	f7fe fd35 	bl	800012c <__udivsi3>
 80016c2:	0003      	movs	r3, r0
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001708 <sensor_init_and_read+0x108>)
 80016ca:	701a      	strb	r2, [r3, #0]

    // convert to absolute unsigned values
//    uint8_t temp_delta = (uint8_t)abs(temp_diff);
//    uint8_t hum_delta  = (uint8_t)abs(hum_diff);

    if (i2c_error_code) {
 80016cc:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <sensor_init_and_read+0xec>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	5e9b      	ldrsh	r3, [r3, r2]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <sensor_init_and_read+0xda>
        return false;
 80016d6:	2300      	movs	r3, #0
 80016d8:	e000      	b.n	80016dc <sensor_init_and_read+0xdc>
    }
    return true;
 80016da:	2301      	movs	r3, #1
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	46c0      	nop			@ (mov r8, r8)
 80016e4:	20000264 	.word	0x20000264
 80016e8:	20000265 	.word	0x20000265
 80016ec:	20000272 	.word	0x20000272
 80016f0:	00002710 	.word	0x00002710
 80016f4:	20000268 	.word	0x20000268
 80016f8:	20000266 	.word	0x20000266
 80016fc:	2000026c 	.word	0x2000026c
 8001700:	2000026a 	.word	0x2000026a
 8001704:	2000026e 	.word	0x2000026e
 8001708:	20000270 	.word	0x20000270

0800170c <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	b21b      	sxth	r3, r3
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	b21a      	sxth	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3301      	adds	r3, #1
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b21b      	sxth	r3, r3
 8001726:	4313      	orrs	r3, r2
 8001728:	b21b      	sxth	r3, r3
 800172a:	b29b      	uxth	r3, r3
}
 800172c:	0018      	movs	r0, r3
 800172e:	46bd      	mov	sp, r7
 8001730:	b002      	add	sp, #8
 8001732:	bd80      	pop	{r7, pc}

08001734 <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	000a      	movs	r2, r1
 800173e:	1cbb      	adds	r3, r7, #2
 8001740:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8001742:	230d      	movs	r3, #13
 8001744:	18fb      	adds	r3, r7, r3
 8001746:	22ff      	movs	r2, #255	@ 0xff
 8001748:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 800174a:	230e      	movs	r3, #14
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	2200      	movs	r2, #0
 8001750:	801a      	strh	r2, [r3, #0]
 8001752:	e038      	b.n	80017c6 <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8001754:	230e      	movs	r3, #14
 8001756:	18fb      	adds	r3, r7, r3
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	18d3      	adds	r3, r2, r3
 800175e:	7819      	ldrb	r1, [r3, #0]
 8001760:	220d      	movs	r2, #13
 8001762:	18bb      	adds	r3, r7, r2
 8001764:	18ba      	adds	r2, r7, r2
 8001766:	7812      	ldrb	r2, [r2, #0]
 8001768:	404a      	eors	r2, r1
 800176a:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800176c:	230c      	movs	r3, #12
 800176e:	18fb      	adds	r3, r7, r3
 8001770:	2208      	movs	r2, #8
 8001772:	701a      	strb	r2, [r3, #0]
 8001774:	e01c      	b.n	80017b0 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 8001776:	210d      	movs	r1, #13
 8001778:	187b      	adds	r3, r7, r1
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	b25b      	sxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	da0a      	bge.n	8001798 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8001782:	187b      	adds	r3, r7, r1
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	b25b      	sxtb	r3, r3
 8001788:	18db      	adds	r3, r3, r3
 800178a:	b25b      	sxtb	r3, r3
 800178c:	2231      	movs	r2, #49	@ 0x31
 800178e:	4053      	eors	r3, r2
 8001790:	b25a      	sxtb	r2, r3
 8001792:	187b      	adds	r3, r7, r1
 8001794:	701a      	strb	r2, [r3, #0]
 8001796:	e005      	b.n	80017a4 <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8001798:	230d      	movs	r3, #13
 800179a:	18fa      	adds	r2, r7, r3
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	18db      	adds	r3, r3, r3
 80017a2:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80017a4:	220c      	movs	r2, #12
 80017a6:	18bb      	adds	r3, r7, r2
 80017a8:	18ba      	adds	r2, r7, r2
 80017aa:	7812      	ldrb	r2, [r2, #0]
 80017ac:	3a01      	subs	r2, #1
 80017ae:	701a      	strb	r2, [r3, #0]
 80017b0:	230c      	movs	r3, #12
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1dd      	bne.n	8001776 <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80017ba:	220e      	movs	r2, #14
 80017bc:	18bb      	adds	r3, r7, r2
 80017be:	18ba      	adds	r2, r7, r2
 80017c0:	8812      	ldrh	r2, [r2, #0]
 80017c2:	3201      	adds	r2, #1
 80017c4:	801a      	strh	r2, [r3, #0]
 80017c6:	230e      	movs	r3, #14
 80017c8:	18fa      	adds	r2, r7, r3
 80017ca:	1cbb      	adds	r3, r7, #2
 80017cc:	8812      	ldrh	r2, [r2, #0]
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d3bf      	bcc.n	8001754 <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 80017d4:	230d      	movs	r3, #13
 80017d6:	18fb      	adds	r3, r7, r3
 80017d8:	781b      	ldrb	r3, [r3, #0]
}
 80017da:	0018      	movs	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	b004      	add	sp, #16
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	0008      	movs	r0, r1
 80017ec:	0011      	movs	r1, r2
 80017ee:	1cbb      	adds	r3, r7, #2
 80017f0:	1c02      	adds	r2, r0, #0
 80017f2:	801a      	strh	r2, [r3, #0]
 80017f4:	1c7b      	adds	r3, r7, #1
 80017f6:	1c0a      	adds	r2, r1, #0
 80017f8:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 80017fa:	1cbb      	adds	r3, r7, #2
 80017fc:	881a      	ldrh	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0011      	movs	r1, r2
 8001802:	0018      	movs	r0, r3
 8001804:	f7ff ff96 	bl	8001734 <sensirion_i2c_generate_crc>
 8001808:	0003      	movs	r3, r0
 800180a:	001a      	movs	r2, r3
 800180c:	1c7b      	adds	r3, r7, #1
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4293      	cmp	r3, r2
 8001812:	d001      	beq.n	8001818 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e000      	b.n	800181a <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8001818:	2300      	movs	r3, #0
}
 800181a:	0018      	movs	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	b002      	add	sp, #8
 8001820:	bd80      	pop	{r7, pc}

08001822 <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 8001822:	b580      	push	{r7, lr}
 8001824:	b082      	sub	sp, #8
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	0008      	movs	r0, r1
 800182c:	0011      	movs	r1, r2
 800182e:	1cbb      	adds	r3, r7, #2
 8001830:	1c02      	adds	r2, r0, #0
 8001832:	801a      	strh	r2, [r3, #0]
 8001834:	1c7b      	adds	r3, r7, #1
 8001836:	1c0a      	adds	r2, r1, #0
 8001838:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 800183a:	1cbb      	adds	r3, r7, #2
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	1cba      	adds	r2, r7, #2
 8001840:	1c59      	adds	r1, r3, #1
 8001842:	8011      	strh	r1, [r2, #0]
 8001844:	001a      	movs	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	189b      	adds	r3, r3, r2
 800184a:	1c7a      	adds	r2, r7, #1
 800184c:	7812      	ldrb	r2, [r2, #0]
 800184e:	701a      	strb	r2, [r3, #0]
    return offset;
 8001850:	1cbb      	adds	r3, r7, #2
 8001852:	881b      	ldrh	r3, [r3, #0]
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b002      	add	sp, #8
 800185a:	bd80      	pop	{r7, pc}

0800185c <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6039      	str	r1, [r7, #0]
 8001864:	0011      	movs	r1, r2
 8001866:	1dfb      	adds	r3, r7, #7
 8001868:	1c02      	adds	r2, r0, #0
 800186a:	701a      	strb	r2, [r3, #0]
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	1c0a      	adds	r2, r1, #0
 8001870:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	6839      	ldr	r1, [r7, #0]
 800187a:	1dfb      	adds	r3, r7, #7
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	0018      	movs	r0, r3
 8001880:	f000 f8b8 	bl	80019f4 <sensirion_i2c_hal_write>
 8001884:	0003      	movs	r3, r0
}
 8001886:	0018      	movs	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	b002      	add	sp, #8
 800188c:	bd80      	pop	{r7, pc}

0800188e <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 800188e:	b5b0      	push	{r4, r5, r7, lr}
 8001890:	b084      	sub	sp, #16
 8001892:	af00      	add	r7, sp, #0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	0011      	movs	r1, r2
 8001898:	1dfb      	adds	r3, r7, #7
 800189a:	1c02      	adds	r2, r0, #0
 800189c:	701a      	strb	r2, [r3, #0]
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	1c0a      	adds	r2, r1, #0
 80018a2:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 80018a4:	1d3b      	adds	r3, r7, #4
 80018a6:	881b      	ldrh	r3, [r3, #0]
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	220a      	movs	r2, #10
 80018ae:	18ba      	adds	r2, r7, r2
 80018b0:	1c19      	adds	r1, r3, #0
 80018b2:	1c0b      	adds	r3, r1, #0
 80018b4:	18db      	adds	r3, r3, r3
 80018b6:	185b      	adds	r3, r3, r1
 80018b8:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	881b      	ldrh	r3, [r3, #0]
 80018be:	2201      	movs	r2, #1
 80018c0:	4013      	ands	r3, r2
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 80018c8:	2304      	movs	r3, #4
 80018ca:	e06c      	b.n	80019a6 <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 80018cc:	230a      	movs	r3, #10
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	6839      	ldr	r1, [r7, #0]
 80018d6:	1dfb      	adds	r3, r7, #7
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	0018      	movs	r0, r3
 80018dc:	f000 f868 	bl	80019b0 <sensirion_i2c_hal_read>
 80018e0:	0003      	movs	r3, r0
 80018e2:	001a      	movs	r2, r3
 80018e4:	2108      	movs	r1, #8
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	801a      	strh	r2, [r3, #0]
    if (error) {
 80018ea:	000a      	movs	r2, r1
 80018ec:	18bb      	adds	r3, r7, r2
 80018ee:	2100      	movs	r1, #0
 80018f0:	5e5b      	ldrsh	r3, [r3, r1]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <sensirion_i2c_read_data_inplace+0x70>
        return error;
 80018f6:	18bb      	adds	r3, r7, r2
 80018f8:	2200      	movs	r2, #0
 80018fa:	5e9b      	ldrsh	r3, [r3, r2]
 80018fc:	e053      	b.n	80019a6 <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 80018fe:	230e      	movs	r3, #14
 8001900:	18fb      	adds	r3, r7, r3
 8001902:	2200      	movs	r2, #0
 8001904:	801a      	strh	r2, [r3, #0]
 8001906:	230c      	movs	r3, #12
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	2200      	movs	r2, #0
 800190c:	801a      	strh	r2, [r3, #0]
 800190e:	e041      	b.n	8001994 <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001910:	210e      	movs	r1, #14
 8001912:	187b      	adds	r3, r7, r1
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 800191a:	187b      	adds	r3, r7, r1
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	3302      	adds	r3, #2
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	001a      	movs	r2, r3
 8001928:	2102      	movs	r1, #2
 800192a:	f7ff ff5a 	bl	80017e2 <sensirion_i2c_check_crc>
 800192e:	0003      	movs	r3, r0
 8001930:	001a      	movs	r2, r3
 8001932:	2108      	movs	r1, #8
 8001934:	187b      	adds	r3, r7, r1
 8001936:	801a      	strh	r2, [r3, #0]
        if (error) {
 8001938:	000a      	movs	r2, r1
 800193a:	18bb      	adds	r3, r7, r2
 800193c:	2100      	movs	r1, #0
 800193e:	5e5b      	ldrsh	r3, [r3, r1]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 8001944:	18bb      	adds	r3, r7, r2
 8001946:	2200      	movs	r2, #0
 8001948:	5e9b      	ldrsh	r3, [r3, r2]
 800194a:	e02c      	b.n	80019a6 <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 800194c:	240e      	movs	r4, #14
 800194e:	193b      	adds	r3, r7, r4
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	18d2      	adds	r2, r2, r3
 8001956:	250c      	movs	r5, #12
 8001958:	197b      	adds	r3, r7, r5
 800195a:	881b      	ldrh	r3, [r3, #0]
 800195c:	1979      	adds	r1, r7, r5
 800195e:	1c58      	adds	r0, r3, #1
 8001960:	8008      	strh	r0, [r1, #0]
 8001962:	0019      	movs	r1, r3
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	185b      	adds	r3, r3, r1
 8001968:	7812      	ldrb	r2, [r2, #0]
 800196a:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 800196c:	193b      	adds	r3, r7, r4
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	18d2      	adds	r2, r2, r3
 8001976:	197b      	adds	r3, r7, r5
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	1979      	adds	r1, r7, r5
 800197c:	1c58      	adds	r0, r3, #1
 800197e:	8008      	strh	r0, [r1, #0]
 8001980:	0019      	movs	r1, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	185b      	adds	r3, r3, r1
 8001986:	7812      	ldrb	r2, [r2, #0]
 8001988:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800198a:	193b      	adds	r3, r7, r4
 800198c:	193a      	adds	r2, r7, r4
 800198e:	8812      	ldrh	r2, [r2, #0]
 8001990:	3203      	adds	r2, #3
 8001992:	801a      	strh	r2, [r3, #0]
 8001994:	230e      	movs	r3, #14
 8001996:	18fa      	adds	r2, r7, r3
 8001998:	230a      	movs	r3, #10
 800199a:	18fb      	adds	r3, r7, r3
 800199c:	8812      	ldrh	r2, [r2, #0]
 800199e:	881b      	ldrh	r3, [r3, #0]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d3b5      	bcc.n	8001910 <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b004      	add	sp, #16
 80019ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080019b0 <sensirion_i2c_hal_read>:

void sensirion_i2c_hal_free(void) {
    /* nothing to free */
}

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af02      	add	r7, sp, #8
 80019b6:	6039      	str	r1, [r7, #0]
 80019b8:	0011      	movs	r1, r2
 80019ba:	1dfb      	adds	r3, r7, #7
 80019bc:	1c02      	adds	r2, r0, #0
 80019be:	701a      	strb	r2, [r3, #0]
 80019c0:	1dbb      	adds	r3, r7, #6
 80019c2:	1c0a      	adds	r2, r1, #0
 80019c4:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1), data, count, 100);
 80019c6:	1dfb      	adds	r3, r7, #7
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	18db      	adds	r3, r3, r3
 80019ce:	b299      	uxth	r1, r3
 80019d0:	1dbb      	adds	r3, r7, #6
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	4805      	ldr	r0, [pc, #20]	@ (80019f0 <sensirion_i2c_hal_read+0x40>)
 80019da:	2464      	movs	r4, #100	@ 0x64
 80019dc:	9400      	str	r4, [sp, #0]
 80019de:	f001 fbfd 	bl	80031dc <HAL_I2C_Master_Receive>
 80019e2:	0003      	movs	r3, r0
 80019e4:	b25b      	sxtb	r3, r3
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b003      	add	sp, #12
 80019ec:	bd90      	pop	{r4, r7, pc}
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	200000d4 	.word	0x200000d4

080019f4 <sensirion_i2c_hal_write>:

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint8_t count) {
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af02      	add	r7, sp, #8
 80019fa:	6039      	str	r1, [r7, #0]
 80019fc:	0011      	movs	r1, r2
 80019fe:	1dfb      	adds	r3, r7, #7
 8001a00:	1c02      	adds	r2, r0, #0
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	1dbb      	adds	r3, r7, #6
 8001a06:	1c0a      	adds	r2, r1, #0
 8001a08:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8001a0a:	1dfb      	adds	r3, r7, #7
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	18db      	adds	r3, r3, r3
 8001a12:	b299      	uxth	r1, r3
 8001a14:	1dbb      	adds	r3, r7, #6
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <sensirion_i2c_hal_write+0x40>)
 8001a1e:	2464      	movs	r4, #100	@ 0x64
 8001a20:	9400      	str	r4, [sp, #0]
 8001a22:	f001 fab1 	bl	8002f88 <HAL_I2C_Master_Transmit>
 8001a26:	0003      	movs	r3, r0
 8001a28:	b25b      	sxtb	r3, r3
}
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	b003      	add	sp, #12
 8001a30:	bd90      	pop	{r4, r7, pc}
 8001a32:	46c0      	nop			@ (mov r8, r8)
 8001a34:	200000d4 	.word	0x200000d4

08001a38 <sensirion_i2c_hal_sleep_usec>:

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	22fa      	movs	r2, #250	@ 0xfa
 8001a44:	0091      	lsls	r1, r2, #2
 8001a46:	0018      	movs	r0, r3
 8001a48:	f7fe fb70 	bl	800012c <__udivsi3>
 8001a4c:	0003      	movs	r3, r0
 8001a4e:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	22fa      	movs	r2, #250	@ 0xfa
 8001a54:	0091      	lsls	r1, r2, #2
 8001a56:	0018      	movs	r0, r3
 8001a58:	f7fe fbee 	bl	8000238 <__aeabi_uidivmod>
 8001a5c:	1e0b      	subs	r3, r1, #0
 8001a5e:	d002      	beq.n	8001a66 <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3301      	adds	r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_GetHalVersion() < 0x01010100) {
 8001a66:	f000 f99b 	bl	8001da0 <HAL_GetHalVersion>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	4a06      	ldr	r2, [pc, #24]	@ (8001a88 <sensirion_i2c_hal_sleep_usec+0x50>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d802      	bhi.n	8001a78 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3301      	adds	r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f000 f950 	bl	8001d20 <HAL_Delay>
}
 8001a80:	46c0      	nop			@ (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b004      	add	sp, #16
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	010100ff 	.word	0x010100ff

08001a8c <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	0002      	movs	r2, r0
 8001a94:	1dfb      	adds	r3, r7, #7
 8001a96:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <sht4x_init+0x1c>)
 8001a9a:	1dfa      	adds	r2, r7, #7
 8001a9c:	7812      	ldrb	r2, [r2, #0]
 8001a9e:	701a      	strb	r2, [r3, #0]
}
 8001aa0:	46c0      	nop			@ (mov r8, r8)
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	b002      	add	sp, #8
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000027a 	.word	0x2000027a

08001aac <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 8001aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 8001ab6:	2516      	movs	r5, #22
 8001ab8:	197b      	adds	r3, r7, r5
 8001aba:	2200      	movs	r2, #0
 8001abc:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8001abe:	4b2a      	ldr	r3, [pc, #168]	@ (8001b68 <sht4x_measure_high_precision_ticks+0xbc>)
 8001ac0:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 8001ac2:	260e      	movs	r6, #14
 8001ac4:	19bb      	adds	r3, r7, r6
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 8001aca:	19bc      	adds	r4, r7, r6
 8001acc:	19bb      	adds	r3, r7, r6
 8001ace:	8819      	ldrh	r1, [r3, #0]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	22fd      	movs	r2, #253	@ 0xfd
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f7ff fea4 	bl	8001822 <sensirion_i2c_add_command8_to_buffer>
 8001ada:	0003      	movs	r3, r0
 8001adc:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8001ade:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <sht4x_measure_high_precision_ticks+0xc0>)
 8001ae0:	7818      	ldrb	r0, [r3, #0]
 8001ae2:	197c      	adds	r4, r7, r5
 8001ae4:	19bb      	adds	r3, r7, r6
 8001ae6:	881a      	ldrh	r2, [r3, #0]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	0019      	movs	r1, r3
 8001aec:	f7ff feb6 	bl	800185c <sensirion_i2c_write_data>
 8001af0:	0003      	movs	r3, r0
 8001af2:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001af4:	197b      	adds	r3, r7, r5
 8001af6:	2200      	movs	r2, #0
 8001af8:	5e9b      	ldrsh	r3, [r3, r2]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 8001afe:	197b      	adds	r3, r7, r5
 8001b00:	2200      	movs	r2, #0
 8001b02:	5e9b      	ldrsh	r3, [r3, r2]
 8001b04:	e02c      	b.n	8001b60 <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8001b06:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <sht4x_measure_high_precision_ticks+0xc4>)
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff ff95 	bl	8001a38 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 8001b0e:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <sht4x_measure_high_precision_ticks+0xc0>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2516      	movs	r5, #22
 8001b14:	197c      	adds	r4, r7, r5
 8001b16:	6939      	ldr	r1, [r7, #16]
 8001b18:	2204      	movs	r2, #4
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	f7ff feb7 	bl	800188e <sensirion_i2c_read_data_inplace>
 8001b20:	0003      	movs	r3, r0
 8001b22:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001b24:	197b      	adds	r3, r7, r5
 8001b26:	2200      	movs	r2, #0
 8001b28:	5e9b      	ldrsh	r3, [r3, r2]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 8001b2e:	197b      	adds	r3, r7, r5
 8001b30:	2200      	movs	r2, #0
 8001b32:	5e9b      	ldrsh	r3, [r3, r2]
 8001b34:	e014      	b.n	8001b60 <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff fde7 	bl	800170c <sensirion_common_bytes_to_uint16_t>
 8001b3e:	0003      	movs	r3, r0
 8001b40:	001a      	movs	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	3302      	adds	r3, #2
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f7ff fdde 	bl	800170c <sensirion_common_bytes_to_uint16_t>
 8001b50:	0003      	movs	r3, r0
 8001b52:	001a      	movs	r2, r3
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	801a      	strh	r2, [r3, #0]
    return local_error;
 8001b58:	2316      	movs	r3, #22
 8001b5a:	18fb      	adds	r3, r7, r3
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b007      	add	sp, #28
 8001b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b68:	20000274 	.word	0x20000274
 8001b6c:	2000027a 	.word	0x2000027a
 8001b70:	00002710 	.word	0x00002710

08001b74 <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 8001b74:	b5b0      	push	{r4, r5, r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8001b7a:	250e      	movs	r5, #14
 8001b7c:	197b      	adds	r3, r7, r5
 8001b7e:	2200      	movs	r2, #0
 8001b80:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8001b82:	4b17      	ldr	r3, [pc, #92]	@ (8001be0 <sht4x_soft_reset+0x6c>)
 8001b84:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 8001b86:	1dbb      	adds	r3, r7, #6
 8001b88:	2200      	movs	r2, #0
 8001b8a:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 8001b8c:	1dbc      	adds	r4, r7, #6
 8001b8e:	1dbb      	adds	r3, r7, #6
 8001b90:	8819      	ldrh	r1, [r3, #0]
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2294      	movs	r2, #148	@ 0x94
 8001b96:	0018      	movs	r0, r3
 8001b98:	f7ff fe43 	bl	8001822 <sensirion_i2c_add_command8_to_buffer>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8001ba0:	4b10      	ldr	r3, [pc, #64]	@ (8001be4 <sht4x_soft_reset+0x70>)
 8001ba2:	7818      	ldrb	r0, [r3, #0]
 8001ba4:	197c      	adds	r4, r7, r5
 8001ba6:	1dbb      	adds	r3, r7, #6
 8001ba8:	881a      	ldrh	r2, [r3, #0]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	0019      	movs	r1, r3
 8001bae:	f7ff fe55 	bl	800185c <sensirion_i2c_write_data>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001bb6:	197b      	adds	r3, r7, r5
 8001bb8:	2200      	movs	r2, #0
 8001bba:	5e9b      	ldrsh	r3, [r3, r2]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <sht4x_soft_reset+0x54>
        return local_error;
 8001bc0:	197b      	adds	r3, r7, r5
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	5e9b      	ldrsh	r3, [r3, r2]
 8001bc6:	e007      	b.n	8001bd8 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8001bc8:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <sht4x_soft_reset+0x74>)
 8001bca:	0018      	movs	r0, r3
 8001bcc:	f7ff ff34 	bl	8001a38 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8001bd0:	230e      	movs	r3, #14
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	b004      	add	sp, #16
 8001bde:	bdb0      	pop	{r4, r5, r7, pc}
 8001be0:	20000274 	.word	0x20000274
 8001be4:	2000027a 	.word	0x2000027a
 8001be8:	00002710 	.word	0x00002710

08001bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001bec:	480d      	ldr	r0, [pc, #52]	@ (8001c24 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001bee:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bf0:	f7ff fcd8 	bl	80015a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bf4:	480c      	ldr	r0, [pc, #48]	@ (8001c28 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bf6:	490d      	ldr	r1, [pc, #52]	@ (8001c2c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c30 <LoopForever+0xe>)
  movs r3, #0
 8001bfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bfc:	e002      	b.n	8001c04 <LoopCopyDataInit>

08001bfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c02:	3304      	adds	r3, #4

08001c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c08:	d3f9      	bcc.n	8001bfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c34 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c38 <LoopForever+0x16>)
  movs r3, #0
 8001c0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c10:	e001      	b.n	8001c16 <LoopFillZerobss>

08001c12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c14:	3204      	adds	r2, #4

08001c16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c18:	d3fb      	bcc.n	8001c12 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001c1a:	f004 fb63 	bl	80062e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c1e:	f7fe ff61 	bl	8000ae4 <main>

08001c22 <LoopForever>:

LoopForever:
    b LoopForever
 8001c22:	e7fe      	b.n	8001c22 <LoopForever>
   ldr   r0, =_estack
 8001c24:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c2c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001c30:	08006f50 	.word	0x08006f50
  ldr r2, =_sbss
 8001c34:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001c38:	200003c8 	.word	0x200003c8

08001c3c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c3c:	e7fe      	b.n	8001c3c <ADC1_COMP_IRQHandler>
	...

08001c40 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c46:	1dfb      	adds	r3, r7, #7
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_Init+0x3c>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b0a      	ldr	r3, [pc, #40]	@ (8001c7c <HAL_Init+0x3c>)
 8001c52:	2140      	movs	r1, #64	@ 0x40
 8001c54:	430a      	orrs	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c58:	2003      	movs	r0, #3
 8001c5a:	f000 f811 	bl	8001c80 <HAL_InitTick>
 8001c5e:	1e03      	subs	r3, r0, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001c62:	1dfb      	adds	r3, r7, #7
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
 8001c68:	e001      	b.n	8001c6e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c6a:	f7ff facb 	bl	8001204 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c6e:	1dfb      	adds	r3, r7, #7
 8001c70:	781b      	ldrb	r3, [r3, #0]
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b002      	add	sp, #8
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			@ (mov r8, r8)
 8001c7c:	40022000 	.word	0x40022000

08001c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <HAL_InitTick+0x5c>)
 8001c8a:	681c      	ldr	r4, [r3, #0]
 8001c8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ce0 <HAL_InitTick+0x60>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	0019      	movs	r1, r3
 8001c92:	23fa      	movs	r3, #250	@ 0xfa
 8001c94:	0098      	lsls	r0, r3, #2
 8001c96:	f7fe fa49 	bl	800012c <__udivsi3>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	0019      	movs	r1, r3
 8001c9e:	0020      	movs	r0, r4
 8001ca0:	f7fe fa44 	bl	800012c <__udivsi3>
 8001ca4:	0003      	movs	r3, r0
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f000 fe0d 	bl	80028c6 <HAL_SYSTICK_Config>
 8001cac:	1e03      	subs	r3, r0, #0
 8001cae:	d001      	beq.n	8001cb4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e00f      	b.n	8001cd4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b03      	cmp	r3, #3
 8001cb8:	d80b      	bhi.n	8001cd2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	425b      	negs	r3, r3
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	f000 fdda 	bl	800287c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_InitTick+0x64>)
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b003      	add	sp, #12
 8001cda:	bd90      	pop	{r4, r7, pc}
 8001cdc:	20000000 	.word	0x20000000
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	20000004 	.word	0x20000004

08001ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_IncTick+0x1c>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	001a      	movs	r2, r3
 8001cf2:	4b05      	ldr	r3, [pc, #20]	@ (8001d08 <HAL_IncTick+0x20>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	18d2      	adds	r2, r2, r3
 8001cf8:	4b03      	ldr	r3, [pc, #12]	@ (8001d08 <HAL_IncTick+0x20>)
 8001cfa:	601a      	str	r2, [r3, #0]
}
 8001cfc:	46c0      	nop			@ (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			@ (mov r8, r8)
 8001d04:	20000008 	.word	0x20000008
 8001d08:	2000027c 	.word	0x2000027c

08001d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d10:	4b02      	ldr	r3, [pc, #8]	@ (8001d1c <HAL_GetTick+0x10>)
 8001d12:	681b      	ldr	r3, [r3, #0]
}
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	46c0      	nop			@ (mov r8, r8)
 8001d1c:	2000027c 	.word	0x2000027c

08001d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d28:	f7ff fff0 	bl	8001d0c <HAL_GetTick>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	3301      	adds	r3, #1
 8001d38:	d005      	beq.n	8001d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <HAL_Delay+0x44>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	001a      	movs	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	189b      	adds	r3, r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	f7ff ffe0 	bl	8001d0c <HAL_GetTick>
 8001d4c:	0002      	movs	r2, r0
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	68fa      	ldr	r2, [r7, #12]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d8f7      	bhi.n	8001d48 <HAL_Delay+0x28>
  {
  }
}
 8001d58:	46c0      	nop			@ (mov r8, r8)
 8001d5a:	46c0      	nop			@ (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b004      	add	sp, #16
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	20000008 	.word	0x20000008

08001d68 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001d6c:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <HAL_SuspendTick+0x18>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b03      	ldr	r3, [pc, #12]	@ (8001d80 <HAL_SuspendTick+0x18>)
 8001d72:	2102      	movs	r1, #2
 8001d74:	438a      	bics	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
}
 8001d78:	46c0      	nop			@ (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	e000e010 	.word	0xe000e010

08001d84 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8001d88:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <HAL_ResumeTick+0x18>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b03      	ldr	r3, [pc, #12]	@ (8001d9c <HAL_ResumeTick+0x18>)
 8001d8e:	2102      	movs	r1, #2
 8001d90:	430a      	orrs	r2, r1
 8001d92:	601a      	str	r2, [r3, #0]
}
 8001d94:	46c0      	nop			@ (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			@ (mov r8, r8)
 8001d9c:	e000e010 	.word	0xe000e010

08001da0 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8001da4:	4b01      	ldr	r3, [pc, #4]	@ (8001dac <HAL_GetHalVersion+0xc>)
}
 8001da6:	0018      	movs	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	010a0700 	.word	0x010a0700

08001db0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e159      	b.n	8002076 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10a      	bne.n	8001de0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2250      	movs	r2, #80	@ 0x50
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f7ff fa26 	bl	800122c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de4:	2210      	movs	r2, #16
 8001de6:	4013      	ands	r3, r2
 8001de8:	2b10      	cmp	r3, #16
 8001dea:	d005      	beq.n	8001df8 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2204      	movs	r2, #4
 8001df4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001df6:	d00b      	beq.n	8001e10 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfc:	2210      	movs	r2, #16
 8001dfe:	431a      	orrs	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2250      	movs	r2, #80	@ 0x50
 8001e08:	2100      	movs	r1, #0
 8001e0a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e132      	b.n	8002076 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e14:	4a9a      	ldr	r2, [pc, #616]	@ (8002080 <HAL_ADC_Init+0x2d0>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	2202      	movs	r2, #2
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	2203      	movs	r2, #3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d108      	bne.n	8001e40 <HAL_ADC_Init+0x90>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2201      	movs	r2, #1
 8001e36:	4013      	ands	r3, r2
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_ADC_Init+0x90>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_ADC_Init+0x92>
 8001e40:	2300      	movs	r3, #0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d149      	bne.n	8001eda <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685a      	ldr	r2, [r3, #4]
 8001e4a:	23c0      	movs	r3, #192	@ 0xc0
 8001e4c:	061b      	lsls	r3, r3, #24
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d00b      	beq.n	8001e6a <HAL_ADC_Init+0xba>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	2380      	movs	r3, #128	@ 0x80
 8001e58:	05db      	lsls	r3, r3, #23
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d005      	beq.n	8001e6a <HAL_ADC_Init+0xba>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685a      	ldr	r2, [r3, #4]
 8001e62:	2380      	movs	r3, #128	@ 0x80
 8001e64:	061b      	lsls	r3, r3, #24
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d111      	bne.n	8001e8e <HAL_ADC_Init+0xde>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0092      	lsls	r2, r2, #2
 8001e76:	0892      	lsrs	r2, r2, #2
 8001e78:	611a      	str	r2, [r3, #16]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6919      	ldr	r1, [r3, #16]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	611a      	str	r2, [r3, #16]
 8001e8c:	e014      	b.n	8001eb8 <HAL_ADC_Init+0x108>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	0092      	lsls	r2, r2, #2
 8001e9a:	0892      	lsrs	r2, r2, #2
 8001e9c:	611a      	str	r2, [r3, #16]
 8001e9e:	4b79      	ldr	r3, [pc, #484]	@ (8002084 <HAL_ADC_Init+0x2d4>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b78      	ldr	r3, [pc, #480]	@ (8002084 <HAL_ADC_Init+0x2d4>)
 8001ea4:	4978      	ldr	r1, [pc, #480]	@ (8002088 <HAL_ADC_Init+0x2d8>)
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	4b76      	ldr	r3, [pc, #472]	@ (8002084 <HAL_ADC_Init+0x2d4>)
 8001eac:	6819      	ldr	r1, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	4b74      	ldr	r3, [pc, #464]	@ (8002084 <HAL_ADC_Init+0x2d4>)
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	2118      	movs	r1, #24
 8001ec4:	438a      	bics	r2, r1
 8001ec6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	68d9      	ldr	r1, [r3, #12]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001eda:	4b6a      	ldr	r3, [pc, #424]	@ (8002084 <HAL_ADC_Init+0x2d4>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b69      	ldr	r3, [pc, #420]	@ (8002084 <HAL_ADC_Init+0x2d4>)
 8001ee0:	496a      	ldr	r1, [pc, #424]	@ (800208c <HAL_ADC_Init+0x2dc>)
 8001ee2:	400a      	ands	r2, r1
 8001ee4:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8001ee6:	4b67      	ldr	r3, [pc, #412]	@ (8002084 <HAL_ADC_Init+0x2d4>)
 8001ee8:	6819      	ldr	r1, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eee:	065a      	lsls	r2, r3, #25
 8001ef0:	4b64      	ldr	r3, [pc, #400]	@ (8002084 <HAL_ADC_Init+0x2d4>)
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	055b      	lsls	r3, r3, #21
 8001f00:	4013      	ands	r3, r2
 8001f02:	d108      	bne.n	8001f16 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689a      	ldr	r2, [r3, #8]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2180      	movs	r1, #128	@ 0x80
 8001f10:	0549      	lsls	r1, r1, #21
 8001f12:	430a      	orrs	r2, r1
 8001f14:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	495b      	ldr	r1, [pc, #364]	@ (8002090 <HAL_ADC_Init+0x2e0>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68d9      	ldr	r1, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d101      	bne.n	8001f3c <HAL_ADC_Init+0x18c>
 8001f38:	2304      	movs	r3, #4
 8001f3a:	e000      	b.n	8001f3e <HAL_ADC_Init+0x18e>
 8001f3c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001f3e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2020      	movs	r0, #32
 8001f44:	5c1b      	ldrb	r3, [r3, r0]
 8001f46:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001f48:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	202c      	movs	r0, #44	@ 0x2c
 8001f4e:	5c1b      	ldrb	r3, [r3, r0]
 8001f50:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001f52:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001f58:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001f60:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001f68:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f76:	23c2      	movs	r3, #194	@ 0xc2
 8001f78:	33ff      	adds	r3, #255	@ 0xff
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d00b      	beq.n	8001f96 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68d9      	ldr	r1, [r3, #12]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2221      	movs	r2, #33	@ 0x21
 8001f9a:	5c9b      	ldrb	r3, [r3, r2]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d11a      	bne.n	8001fd6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	5c9b      	ldrb	r3, [r3, r2]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2180      	movs	r1, #128	@ 0x80
 8001fb6:	0249      	lsls	r1, r1, #9
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	e00b      	b.n	8001fd6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fce:	2201      	movs	r2, #1
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d11f      	bne.n	800201e <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	492a      	ldr	r1, [pc, #168]	@ (8002094 <HAL_ADC_Init+0x2e4>)
 8001fea:	400a      	ands	r2, r1
 8001fec:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6919      	ldr	r1, [r3, #16]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8001ffc:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8002002:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	691a      	ldr	r2, [r3, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2101      	movs	r1, #1
 8002018:	430a      	orrs	r2, r1
 800201a:	611a      	str	r2, [r3, #16]
 800201c:	e00e      	b.n	800203c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	2201      	movs	r2, #1
 8002026:	4013      	ands	r3, r2
 8002028:	2b01      	cmp	r3, #1
 800202a:	d107      	bne.n	800203c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691a      	ldr	r2, [r3, #16]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2101      	movs	r1, #1
 8002038:	438a      	bics	r2, r1
 800203a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2107      	movs	r1, #7
 8002048:	438a      	bics	r2, r1
 800204a:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6959      	ldr	r1, [r3, #20]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002068:	2203      	movs	r2, #3
 800206a:	4393      	bics	r3, r2
 800206c:	2201      	movs	r2, #1
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b002      	add	sp, #8
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	fffffefd 	.word	0xfffffefd
 8002084:	40012708 	.word	0x40012708
 8002088:	ffc3ffff 	.word	0xffc3ffff
 800208c:	fdffffff 	.word	0xfdffffff
 8002090:	fffe0219 	.word	0xfffe0219
 8002094:	fffffc03 	.word	0xfffffc03

08002098 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a0:	230f      	movs	r3, #15
 80020a2:	18fb      	adds	r3, r7, r3
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2204      	movs	r2, #4
 80020b0:	4013      	ands	r3, r2
 80020b2:	d138      	bne.n	8002126 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2250      	movs	r2, #80	@ 0x50
 80020b8:	5c9b      	ldrb	r3, [r3, r2]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_Start+0x2a>
 80020be:	2302      	movs	r3, #2
 80020c0:	e038      	b.n	8002134 <HAL_ADC_Start+0x9c>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2250      	movs	r2, #80	@ 0x50
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d007      	beq.n	80020e2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80020d2:	230f      	movs	r3, #15
 80020d4:	18fc      	adds	r4, r7, r3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	0018      	movs	r0, r3
 80020da:	f000 f9b9 	bl	8002450 <ADC_Enable>
 80020de:	0003      	movs	r3, r0
 80020e0:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020e2:	230f      	movs	r3, #15
 80020e4:	18fb      	adds	r3, r7, r3
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d120      	bne.n	800212e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020f0:	4a12      	ldr	r2, [pc, #72]	@ (800213c <HAL_ADC_Start+0xa4>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	2280      	movs	r2, #128	@ 0x80
 80020f6:	0052      	lsls	r2, r2, #1
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2250      	movs	r2, #80	@ 0x50
 8002108:	2100      	movs	r1, #0
 800210a:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	221c      	movs	r2, #28
 8002112:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2104      	movs	r1, #4
 8002120:	430a      	orrs	r2, r1
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	e003      	b.n	800212e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002126:	230f      	movs	r3, #15
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	2202      	movs	r2, #2
 800212c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800212e:	230f      	movs	r3, #15
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	781b      	ldrb	r3, [r3, #0]
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b005      	add	sp, #20
 800213a:	bd90      	pop	{r4, r7, pc}
 800213c:	fffff0fe 	.word	0xfffff0fe

08002140 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002140:	b5b0      	push	{r4, r5, r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002148:	230f      	movs	r3, #15
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2250      	movs	r2, #80	@ 0x50
 8002154:	5c9b      	ldrb	r3, [r3, r2]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_ADC_Stop+0x1e>
 800215a:	2302      	movs	r3, #2
 800215c:	e029      	b.n	80021b2 <HAL_ADC_Stop+0x72>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2250      	movs	r2, #80	@ 0x50
 8002162:	2101      	movs	r1, #1
 8002164:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8002166:	250f      	movs	r5, #15
 8002168:	197c      	adds	r4, r7, r5
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	0018      	movs	r0, r3
 800216e:	f000 fa3e 	bl	80025ee <ADC_ConversionStop>
 8002172:	0003      	movs	r3, r0
 8002174:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002176:	197b      	adds	r3, r7, r5
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d112      	bne.n	80021a4 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800217e:	197c      	adds	r4, r7, r5
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	0018      	movs	r0, r3
 8002184:	f000 f9cc 	bl	8002520 <ADC_Disable>
 8002188:	0003      	movs	r3, r0
 800218a:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800218c:	197b      	adds	r3, r7, r5
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d107      	bne.n	80021a4 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002198:	4a08      	ldr	r2, [pc, #32]	@ (80021bc <HAL_ADC_Stop+0x7c>)
 800219a:	4013      	ands	r3, r2
 800219c:	2201      	movs	r2, #1
 800219e:	431a      	orrs	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2250      	movs	r2, #80	@ 0x50
 80021a8:	2100      	movs	r1, #0
 80021aa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80021ac:	230f      	movs	r3, #15
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	781b      	ldrb	r3, [r3, #0]
}
 80021b2:	0018      	movs	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b004      	add	sp, #16
 80021b8:	bdb0      	pop	{r4, r5, r7, pc}
 80021ba:	46c0      	nop			@ (mov r8, r8)
 80021bc:	fffffefe 	.word	0xfffffefe

080021c0 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	2b08      	cmp	r3, #8
 80021d8:	d102      	bne.n	80021e0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80021da:	2308      	movs	r3, #8
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	e014      	b.n	800220a <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2201      	movs	r2, #1
 80021e8:	4013      	ands	r3, r2
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d10b      	bne.n	8002206 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f2:	2220      	movs	r2, #32
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2250      	movs	r2, #80	@ 0x50
 80021fe:	2100      	movs	r1, #0
 8002200:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e072      	b.n	80022ec <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8002206:	230c      	movs	r3, #12
 8002208:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800220a:	f7ff fd7f 	bl	8001d0c <HAL_GetTick>
 800220e:	0003      	movs	r3, r0
 8002210:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002212:	e01f      	b.n	8002254 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	d01c      	beq.n	8002254 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_ADC_PollForConversion+0x70>
 8002220:	f7ff fd74 	bl	8001d0c <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d211      	bcs.n	8002254 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4013      	ands	r3, r2
 800223a:	d10b      	bne.n	8002254 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002240:	2204      	movs	r2, #4
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2250      	movs	r2, #80	@ 0x50
 800224c:	2100      	movs	r1, #0
 800224e:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e04b      	b.n	80022ec <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4013      	ands	r3, r2
 800225e:	d0d9      	beq.n	8002214 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002264:	2280      	movs	r2, #128	@ 0x80
 8002266:	0092      	lsls	r2, r2, #2
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	23c0      	movs	r3, #192	@ 0xc0
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	4013      	ands	r3, r2
 800227a:	d12e      	bne.n	80022da <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002282:	2b00      	cmp	r3, #0
 8002284:	d129      	bne.n	80022da <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2208      	movs	r2, #8
 800228e:	4013      	ands	r3, r2
 8002290:	2b08      	cmp	r3, #8
 8002292:	d122      	bne.n	80022da <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2204      	movs	r2, #4
 800229c:	4013      	ands	r3, r2
 800229e:	d110      	bne.n	80022c2 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	210c      	movs	r1, #12
 80022ac:	438a      	bics	r2, r1
 80022ae:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b4:	4a0f      	ldr	r2, [pc, #60]	@ (80022f4 <HAL_ADC_PollForConversion+0x134>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	2201      	movs	r2, #1
 80022ba:	431a      	orrs	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	655a      	str	r2, [r3, #84]	@ 0x54
 80022c0:	e00b      	b.n	80022da <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c6:	2220      	movs	r2, #32
 80022c8:	431a      	orrs	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d2:	2201      	movs	r2, #1
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d103      	bne.n	80022ea <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	220c      	movs	r2, #12
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	0018      	movs	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	b004      	add	sp, #16
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	fffffefe 	.word	0xfffffefe

080022f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b002      	add	sp, #8
 800230c:	bd80      	pop	{r7, pc}
	...

08002310 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2250      	movs	r2, #80	@ 0x50
 800231e:	5c9b      	ldrb	r3, [r3, r2]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x18>
 8002324:	2302      	movs	r3, #2
 8002326:	e085      	b.n	8002434 <HAL_ADC_ConfigChannel+0x124>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2250      	movs	r2, #80	@ 0x50
 800232c:	2101      	movs	r1, #1
 800232e:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2204      	movs	r2, #4
 8002338:	4013      	ands	r3, r2
 800233a:	d00b      	beq.n	8002354 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002340:	2220      	movs	r2, #32
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2250      	movs	r2, #80	@ 0x50
 800234c:	2100      	movs	r1, #0
 800234e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e06f      	b.n	8002434 <HAL_ADC_ConfigChannel+0x124>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4a38      	ldr	r2, [pc, #224]	@ (800243c <HAL_ADC_ConfigChannel+0x12c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d035      	beq.n	80023ca <HAL_ADC_ConfigChannel+0xba>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	035b      	lsls	r3, r3, #13
 800236a:	0b5a      	lsrs	r2, r3, #13
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	2380      	movs	r3, #128	@ 0x80
 800237a:	02db      	lsls	r3, r3, #11
 800237c:	4013      	ands	r3, r2
 800237e:	d009      	beq.n	8002394 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8002380:	4b2f      	ldr	r3, [pc, #188]	@ (8002440 <HAL_ADC_ConfigChannel+0x130>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	4b2e      	ldr	r3, [pc, #184]	@ (8002440 <HAL_ADC_ConfigChannel+0x130>)
 8002386:	2180      	movs	r1, #128	@ 0x80
 8002388:	0409      	lsls	r1, r1, #16
 800238a:	430a      	orrs	r2, r1
 800238c:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800238e:	200a      	movs	r0, #10
 8002390:	f000 f97a 	bl	8002688 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	2380      	movs	r3, #128	@ 0x80
 800239a:	029b      	lsls	r3, r3, #10
 800239c:	4013      	ands	r3, r2
 800239e:	d006      	beq.n	80023ae <HAL_ADC_ConfigChannel+0x9e>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 80023a0:	4b27      	ldr	r3, [pc, #156]	@ (8002440 <HAL_ADC_ConfigChannel+0x130>)
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	4b26      	ldr	r3, [pc, #152]	@ (8002440 <HAL_ADC_ConfigChannel+0x130>)
 80023a6:	2180      	movs	r1, #128	@ 0x80
 80023a8:	03c9      	lsls	r1, r1, #15
 80023aa:	430a      	orrs	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	2380      	movs	r3, #128	@ 0x80
 80023b4:	025b      	lsls	r3, r3, #9
 80023b6:	4013      	ands	r3, r2
 80023b8:	d037      	beq.n	800242a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR |= ADC_CCR_VLCDEN;
 80023ba:	4b21      	ldr	r3, [pc, #132]	@ (8002440 <HAL_ADC_ConfigChannel+0x130>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4b20      	ldr	r3, [pc, #128]	@ (8002440 <HAL_ADC_ConfigChannel+0x130>)
 80023c0:	2180      	movs	r1, #128	@ 0x80
 80023c2:	0449      	lsls	r1, r1, #17
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]
 80023c8:	e02f      	b.n	800242a <HAL_ADC_ConfigChannel+0x11a>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	035b      	lsls	r3, r3, #13
 80023d6:	0b5b      	lsrs	r3, r3, #13
 80023d8:	43d9      	mvns	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	400a      	ands	r2, r1
 80023e0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	2380      	movs	r3, #128	@ 0x80
 80023e8:	02db      	lsls	r3, r3, #11
 80023ea:	4013      	ands	r3, r2
 80023ec:	d005      	beq.n	80023fa <HAL_ADC_ConfigChannel+0xea>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 80023ee:	4b14      	ldr	r3, [pc, #80]	@ (8002440 <HAL_ADC_ConfigChannel+0x130>)
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	4b13      	ldr	r3, [pc, #76]	@ (8002440 <HAL_ADC_ConfigChannel+0x130>)
 80023f4:	4913      	ldr	r1, [pc, #76]	@ (8002444 <HAL_ADC_ConfigChannel+0x134>)
 80023f6:	400a      	ands	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	2380      	movs	r3, #128	@ 0x80
 8002400:	029b      	lsls	r3, r3, #10
 8002402:	4013      	ands	r3, r2
 8002404:	d005      	beq.n	8002412 <HAL_ADC_ConfigChannel+0x102>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8002406:	4b0e      	ldr	r3, [pc, #56]	@ (8002440 <HAL_ADC_ConfigChannel+0x130>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	4b0d      	ldr	r3, [pc, #52]	@ (8002440 <HAL_ADC_ConfigChannel+0x130>)
 800240c:	490e      	ldr	r1, [pc, #56]	@ (8002448 <HAL_ADC_ConfigChannel+0x138>)
 800240e:	400a      	ands	r2, r1
 8002410:	601a      	str	r2, [r3, #0]
    }

#if defined (STM32L053xx) || defined (STM32L063xx) || defined (STM32L073xx) || defined (STM32L083xx)
    /* If Vlcd channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VLCD) == (ADC_CHANNEL_VLCD & ADC_CHANNEL_MASK))
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	2380      	movs	r3, #128	@ 0x80
 8002418:	025b      	lsls	r3, r3, #9
 800241a:	4013      	ands	r3, r2
 800241c:	d005      	beq.n	800242a <HAL_ADC_ConfigChannel+0x11a>
    {
      ADC->CCR &= ~ADC_CCR_VLCDEN;
 800241e:	4b08      	ldr	r3, [pc, #32]	@ (8002440 <HAL_ADC_ConfigChannel+0x130>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	4b07      	ldr	r3, [pc, #28]	@ (8002440 <HAL_ADC_ConfigChannel+0x130>)
 8002424:	4909      	ldr	r1, [pc, #36]	@ (800244c <HAL_ADC_ConfigChannel+0x13c>)
 8002426:	400a      	ands	r2, r1
 8002428:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2250      	movs	r2, #80	@ 0x50
 800242e:	2100      	movs	r1, #0
 8002430:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	0018      	movs	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	b002      	add	sp, #8
 800243a:	bd80      	pop	{r7, pc}
 800243c:	00001001 	.word	0x00001001
 8002440:	40012708 	.word	0x40012708
 8002444:	ff7fffff 	.word	0xff7fffff
 8002448:	ffbfffff 	.word	0xffbfffff
 800244c:	feffffff 	.word	0xfeffffff

08002450 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2203      	movs	r2, #3
 8002464:	4013      	ands	r3, r2
 8002466:	2b01      	cmp	r3, #1
 8002468:	d108      	bne.n	800247c <ADC_Enable+0x2c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2201      	movs	r2, #1
 8002472:	4013      	ands	r3, r2
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <ADC_Enable+0x2c>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <ADC_Enable+0x2e>
 800247c:	2300      	movs	r3, #0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d146      	bne.n	8002510 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4a24      	ldr	r2, [pc, #144]	@ (800251c <ADC_Enable+0xcc>)
 800248a:	4013      	ands	r3, r2
 800248c:	d00d      	beq.n	80024aa <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002492:	2210      	movs	r2, #16
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	2201      	movs	r2, #1
 80024a0:	431a      	orrs	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e033      	b.n	8002512 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2101      	movs	r1, #1
 80024b6:	430a      	orrs	r2, r1
 80024b8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f000 f8e4 	bl	8002688 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 80024c0:	f7ff fc24 	bl	8001d0c <HAL_GetTick>
 80024c4:	0003      	movs	r3, r0
 80024c6:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024c8:	e01b      	b.n	8002502 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024ca:	f7ff fc1f 	bl	8001d0c <HAL_GetTick>
 80024ce:	0002      	movs	r2, r0
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b0a      	cmp	r3, #10
 80024d6:	d914      	bls.n	8002502 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2201      	movs	r2, #1
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d00d      	beq.n	8002502 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ea:	2210      	movs	r2, #16
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f6:	2201      	movs	r2, #1
 80024f8:	431a      	orrs	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e007      	b.n	8002512 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	4013      	ands	r3, r2
 800250c:	2b01      	cmp	r3, #1
 800250e:	d1dc      	bne.n	80024ca <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	0018      	movs	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	b004      	add	sp, #16
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			@ (mov r8, r8)
 800251c:	80000017 	.word	0x80000017

08002520 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2203      	movs	r2, #3
 8002534:	4013      	ands	r3, r2
 8002536:	2b01      	cmp	r3, #1
 8002538:	d108      	bne.n	800254c <ADC_Disable+0x2c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2201      	movs	r2, #1
 8002542:	4013      	ands	r3, r2
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <ADC_Disable+0x2c>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <ADC_Disable+0x2e>
 800254c:	2300      	movs	r3, #0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d048      	beq.n	80025e4 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2205      	movs	r2, #5
 800255a:	4013      	ands	r3, r2
 800255c:	2b01      	cmp	r3, #1
 800255e:	d110      	bne.n	8002582 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689a      	ldr	r2, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2102      	movs	r1, #2
 800256c:	430a      	orrs	r2, r1
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2203      	movs	r2, #3
 8002576:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002578:	f7ff fbc8 	bl	8001d0c <HAL_GetTick>
 800257c:	0003      	movs	r3, r0
 800257e:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002580:	e029      	b.n	80025d6 <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002586:	2210      	movs	r2, #16
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002592:	2201      	movs	r2, #1
 8002594:	431a      	orrs	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e023      	b.n	80025e6 <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800259e:	f7ff fbb5 	bl	8001d0c <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b0a      	cmp	r3, #10
 80025aa:	d914      	bls.n	80025d6 <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2201      	movs	r2, #1
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d10d      	bne.n	80025d6 <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025be:	2210      	movs	r2, #16
 80025c0:	431a      	orrs	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ca:	2201      	movs	r2, #1
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e007      	b.n	80025e6 <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2201      	movs	r2, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d0dc      	beq.n	800259e <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b004      	add	sp, #16
 80025ec:	bd80      	pop	{r7, pc}

080025ee <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2204      	movs	r2, #4
 8002602:	4013      	ands	r3, r2
 8002604:	d03a      	beq.n	800267c <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2204      	movs	r2, #4
 800260e:	4013      	ands	r3, r2
 8002610:	2b04      	cmp	r3, #4
 8002612:	d10d      	bne.n	8002630 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2202      	movs	r2, #2
 800261c:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 800261e:	d107      	bne.n	8002630 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2110      	movs	r1, #16
 800262c:	430a      	orrs	r2, r1
 800262e:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002630:	f7ff fb6c 	bl	8001d0c <HAL_GetTick>
 8002634:	0003      	movs	r3, r0
 8002636:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002638:	e01a      	b.n	8002670 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800263a:	f7ff fb67 	bl	8001d0c <HAL_GetTick>
 800263e:	0002      	movs	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b0a      	cmp	r3, #10
 8002646:	d913      	bls.n	8002670 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2204      	movs	r2, #4
 8002650:	4013      	ands	r3, r2
 8002652:	d00d      	beq.n	8002670 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002658:	2210      	movs	r2, #16
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002664:	2201      	movs	r2, #1
 8002666:	431a      	orrs	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e006      	b.n	800267e <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	2204      	movs	r2, #4
 8002678:	4013      	ands	r3, r2
 800267a:	d1de      	bne.n	800263a <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b004      	add	sp, #16
 8002684:	bd80      	pop	{r7, pc}
	...

08002688 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002690:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <ADC_DelayMicroSecond+0x38>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	490b      	ldr	r1, [pc, #44]	@ (80026c4 <ADC_DelayMicroSecond+0x3c>)
 8002696:	0018      	movs	r0, r3
 8002698:	f7fd fd48 	bl	800012c <__udivsi3>
 800269c:	0003      	movs	r3, r0
 800269e:	001a      	movs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4353      	muls	r3, r2
 80026a4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 80026a6:	e002      	b.n	80026ae <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f9      	bne.n	80026a8 <ADC_DelayMicroSecond+0x20>
  }
}
 80026b4:	46c0      	nop			@ (mov r8, r8)
 80026b6:	46c0      	nop			@ (mov r8, r8)
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b004      	add	sp, #16
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	46c0      	nop			@ (mov r8, r8)
 80026c0:	20000000 	.word	0x20000000
 80026c4:	000f4240 	.word	0x000f4240

080026c8 <HAL_ADCEx_EnableVREFINT>:
  * @note   This API is obsolete. This equivalent configuration is done in HAL_ADC_ConfigChannel().
            bit fields in ADC_CCR and SYSCFG_CFGR3 control the same signals to VREFINT and TempSensor buffers
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_EnableVREFINT(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	607b      	str	r3, [r7, #4]

  /* Enable the Buffer for the ADC by setting ENBUF_SENSOR_ADC bit in the CFGR3 register */
  SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUF_VREFINT_ADC);
 80026d2:	4b13      	ldr	r3, [pc, #76]	@ (8002720 <HAL_ADCEx_EnableVREFINT+0x58>)
 80026d4:	6a1a      	ldr	r2, [r3, #32]
 80026d6:	4b12      	ldr	r3, [pc, #72]	@ (8002720 <HAL_ADCEx_EnableVREFINT+0x58>)
 80026d8:	2180      	movs	r1, #128	@ 0x80
 80026da:	0049      	lsls	r1, r1, #1
 80026dc:	430a      	orrs	r2, r1
 80026de:	621a      	str	r2, [r3, #32]

  /* Wait for Vrefint buffer effectively enabled */
  /* Get tick count */
  tickstart = HAL_GetTick();
 80026e0:	f7ff fb14 	bl	8001d0c <HAL_GetTick>
 80026e4:	0003      	movs	r3, r0
 80026e6:	607b      	str	r3, [r7, #4]

  while (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 80026e8:	e00e      	b.n	8002708 <HAL_ADCEx_EnableVREFINT+0x40>
  {
    if ((HAL_GetTick() - tickstart) > SYSCFG_BUF_VREFINT_ENABLE_TIMEOUT)
 80026ea:	f7ff fb0f 	bl	8001d0c <HAL_GetTick>
 80026ee:	0002      	movs	r2, r0
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d907      	bls.n	8002708 <HAL_ADCEx_EnableVREFINT+0x40>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 80026f8:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <HAL_ADCEx_EnableVREFINT+0x58>)
 80026fa:	6a1a      	ldr	r2, [r3, #32]
 80026fc:	2380      	movs	r3, #128	@ 0x80
 80026fe:	05db      	lsls	r3, r3, #23
 8002700:	4013      	ands	r3, r2
 8002702:	d101      	bne.n	8002708 <HAL_ADCEx_EnableVREFINT+0x40>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e006      	b.n	8002716 <HAL_ADCEx_EnableVREFINT+0x4e>
  while (HAL_IS_BIT_CLR(SYSCFG->CFGR3, SYSCFG_CFGR3_VREFINT_RDYF))
 8002708:	4b05      	ldr	r3, [pc, #20]	@ (8002720 <HAL_ADCEx_EnableVREFINT+0x58>)
 800270a:	6a1a      	ldr	r2, [r3, #32]
 800270c:	2380      	movs	r3, #128	@ 0x80
 800270e:	05db      	lsls	r3, r3, #23
 8002710:	4013      	ands	r3, r2
 8002712:	d0ea      	beq.n	80026ea <HAL_ADCEx_EnableVREFINT+0x22>
      }
    }
  }

  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	0018      	movs	r0, r3
 8002718:	46bd      	mov	sp, r7
 800271a:	b002      	add	sp, #8
 800271c:	bd80      	pop	{r7, pc}
 800271e:	46c0      	nop			@ (mov r8, r8)
 8002720:	40010000 	.word	0x40010000

08002724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	0002      	movs	r2, r0
 800272c:	1dfb      	adds	r3, r7, #7
 800272e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002730:	1dfb      	adds	r3, r7, #7
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b7f      	cmp	r3, #127	@ 0x7f
 8002736:	d809      	bhi.n	800274c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002738:	1dfb      	adds	r3, r7, #7
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	001a      	movs	r2, r3
 800273e:	231f      	movs	r3, #31
 8002740:	401a      	ands	r2, r3
 8002742:	4b04      	ldr	r3, [pc, #16]	@ (8002754 <__NVIC_EnableIRQ+0x30>)
 8002744:	2101      	movs	r1, #1
 8002746:	4091      	lsls	r1, r2
 8002748:	000a      	movs	r2, r1
 800274a:	601a      	str	r2, [r3, #0]
  }
}
 800274c:	46c0      	nop			@ (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	b002      	add	sp, #8
 8002752:	bd80      	pop	{r7, pc}
 8002754:	e000e100 	.word	0xe000e100

08002758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	0002      	movs	r2, r0
 8002760:	6039      	str	r1, [r7, #0]
 8002762:	1dfb      	adds	r3, r7, #7
 8002764:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002766:	1dfb      	adds	r3, r7, #7
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b7f      	cmp	r3, #127	@ 0x7f
 800276c:	d828      	bhi.n	80027c0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800276e:	4a2f      	ldr	r2, [pc, #188]	@ (800282c <__NVIC_SetPriority+0xd4>)
 8002770:	1dfb      	adds	r3, r7, #7
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	b25b      	sxtb	r3, r3
 8002776:	089b      	lsrs	r3, r3, #2
 8002778:	33c0      	adds	r3, #192	@ 0xc0
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	589b      	ldr	r3, [r3, r2]
 800277e:	1dfa      	adds	r2, r7, #7
 8002780:	7812      	ldrb	r2, [r2, #0]
 8002782:	0011      	movs	r1, r2
 8002784:	2203      	movs	r2, #3
 8002786:	400a      	ands	r2, r1
 8002788:	00d2      	lsls	r2, r2, #3
 800278a:	21ff      	movs	r1, #255	@ 0xff
 800278c:	4091      	lsls	r1, r2
 800278e:	000a      	movs	r2, r1
 8002790:	43d2      	mvns	r2, r2
 8002792:	401a      	ands	r2, r3
 8002794:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	019b      	lsls	r3, r3, #6
 800279a:	22ff      	movs	r2, #255	@ 0xff
 800279c:	401a      	ands	r2, r3
 800279e:	1dfb      	adds	r3, r7, #7
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	0018      	movs	r0, r3
 80027a4:	2303      	movs	r3, #3
 80027a6:	4003      	ands	r3, r0
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ac:	481f      	ldr	r0, [pc, #124]	@ (800282c <__NVIC_SetPriority+0xd4>)
 80027ae:	1dfb      	adds	r3, r7, #7
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	b25b      	sxtb	r3, r3
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	430a      	orrs	r2, r1
 80027b8:	33c0      	adds	r3, #192	@ 0xc0
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80027be:	e031      	b.n	8002824 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027c0:	4a1b      	ldr	r2, [pc, #108]	@ (8002830 <__NVIC_SetPriority+0xd8>)
 80027c2:	1dfb      	adds	r3, r7, #7
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	0019      	movs	r1, r3
 80027c8:	230f      	movs	r3, #15
 80027ca:	400b      	ands	r3, r1
 80027cc:	3b08      	subs	r3, #8
 80027ce:	089b      	lsrs	r3, r3, #2
 80027d0:	3306      	adds	r3, #6
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	18d3      	adds	r3, r2, r3
 80027d6:	3304      	adds	r3, #4
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	1dfa      	adds	r2, r7, #7
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	0011      	movs	r1, r2
 80027e0:	2203      	movs	r2, #3
 80027e2:	400a      	ands	r2, r1
 80027e4:	00d2      	lsls	r2, r2, #3
 80027e6:	21ff      	movs	r1, #255	@ 0xff
 80027e8:	4091      	lsls	r1, r2
 80027ea:	000a      	movs	r2, r1
 80027ec:	43d2      	mvns	r2, r2
 80027ee:	401a      	ands	r2, r3
 80027f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	019b      	lsls	r3, r3, #6
 80027f6:	22ff      	movs	r2, #255	@ 0xff
 80027f8:	401a      	ands	r2, r3
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	0018      	movs	r0, r3
 8002800:	2303      	movs	r3, #3
 8002802:	4003      	ands	r3, r0
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002808:	4809      	ldr	r0, [pc, #36]	@ (8002830 <__NVIC_SetPriority+0xd8>)
 800280a:	1dfb      	adds	r3, r7, #7
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	001c      	movs	r4, r3
 8002810:	230f      	movs	r3, #15
 8002812:	4023      	ands	r3, r4
 8002814:	3b08      	subs	r3, #8
 8002816:	089b      	lsrs	r3, r3, #2
 8002818:	430a      	orrs	r2, r1
 800281a:	3306      	adds	r3, #6
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	18c3      	adds	r3, r0, r3
 8002820:	3304      	adds	r3, #4
 8002822:	601a      	str	r2, [r3, #0]
}
 8002824:	46c0      	nop			@ (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b003      	add	sp, #12
 800282a:	bd90      	pop	{r4, r7, pc}
 800282c:	e000e100 	.word	0xe000e100
 8002830:	e000ed00 	.word	0xe000ed00

08002834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	1e5a      	subs	r2, r3, #1
 8002840:	2380      	movs	r3, #128	@ 0x80
 8002842:	045b      	lsls	r3, r3, #17
 8002844:	429a      	cmp	r2, r3
 8002846:	d301      	bcc.n	800284c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002848:	2301      	movs	r3, #1
 800284a:	e010      	b.n	800286e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284c:	4b0a      	ldr	r3, [pc, #40]	@ (8002878 <SysTick_Config+0x44>)
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	3a01      	subs	r2, #1
 8002852:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002854:	2301      	movs	r3, #1
 8002856:	425b      	negs	r3, r3
 8002858:	2103      	movs	r1, #3
 800285a:	0018      	movs	r0, r3
 800285c:	f7ff ff7c 	bl	8002758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002860:	4b05      	ldr	r3, [pc, #20]	@ (8002878 <SysTick_Config+0x44>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002866:	4b04      	ldr	r3, [pc, #16]	@ (8002878 <SysTick_Config+0x44>)
 8002868:	2207      	movs	r2, #7
 800286a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800286c:	2300      	movs	r3, #0
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b002      	add	sp, #8
 8002874:	bd80      	pop	{r7, pc}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	e000e010 	.word	0xe000e010

0800287c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	60b9      	str	r1, [r7, #8]
 8002884:	607a      	str	r2, [r7, #4]
 8002886:	210f      	movs	r1, #15
 8002888:	187b      	adds	r3, r7, r1
 800288a:	1c02      	adds	r2, r0, #0
 800288c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	187b      	adds	r3, r7, r1
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b25b      	sxtb	r3, r3
 8002896:	0011      	movs	r1, r2
 8002898:	0018      	movs	r0, r3
 800289a:	f7ff ff5d 	bl	8002758 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b004      	add	sp, #16
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b082      	sub	sp, #8
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	0002      	movs	r2, r0
 80028ae:	1dfb      	adds	r3, r7, #7
 80028b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b2:	1dfb      	adds	r3, r7, #7
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	b25b      	sxtb	r3, r3
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7ff ff33 	bl	8002724 <__NVIC_EnableIRQ>
}
 80028be:	46c0      	nop			@ (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b002      	add	sp, #8
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	0018      	movs	r0, r3
 80028d2:	f7ff ffaf 	bl	8002834 <SysTick_Config>
 80028d6:	0003      	movs	r3, r0
}
 80028d8:	0018      	movs	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	b002      	add	sp, #8
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80028f6:	e155      	b.n	8002ba4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	697a      	ldr	r2, [r7, #20]
 8002900:	4091      	lsls	r1, r2
 8002902:	000a      	movs	r2, r1
 8002904:	4013      	ands	r3, r2
 8002906:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d100      	bne.n	8002910 <HAL_GPIO_Init+0x30>
 800290e:	e146      	b.n	8002b9e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	2203      	movs	r2, #3
 8002916:	4013      	ands	r3, r2
 8002918:	2b01      	cmp	r3, #1
 800291a:	d005      	beq.n	8002928 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2203      	movs	r2, #3
 8002922:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002924:	2b02      	cmp	r3, #2
 8002926:	d130      	bne.n	800298a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	005b      	lsls	r3, r3, #1
 8002932:	2203      	movs	r2, #3
 8002934:	409a      	lsls	r2, r3
 8002936:	0013      	movs	r3, r2
 8002938:	43da      	mvns	r2, r3
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	409a      	lsls	r2, r3
 800294a:	0013      	movs	r3, r2
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800295e:	2201      	movs	r2, #1
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	409a      	lsls	r2, r3
 8002964:	0013      	movs	r3, r2
 8002966:	43da      	mvns	r2, r3
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4013      	ands	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	091b      	lsrs	r3, r3, #4
 8002974:	2201      	movs	r2, #1
 8002976:	401a      	ands	r2, r3
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	409a      	lsls	r2, r3
 800297c:	0013      	movs	r3, r2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4313      	orrs	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2203      	movs	r2, #3
 8002990:	4013      	ands	r3, r2
 8002992:	2b03      	cmp	r3, #3
 8002994:	d017      	beq.n	80029c6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	2203      	movs	r2, #3
 80029a2:	409a      	lsls	r2, r3
 80029a4:	0013      	movs	r3, r2
 80029a6:	43da      	mvns	r2, r3
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4013      	ands	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	409a      	lsls	r2, r3
 80029b8:	0013      	movs	r3, r2
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4313      	orrs	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	693a      	ldr	r2, [r7, #16]
 80029c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2203      	movs	r2, #3
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d123      	bne.n	8002a1a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	08da      	lsrs	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3208      	adds	r2, #8
 80029da:	0092      	lsls	r2, r2, #2
 80029dc:	58d3      	ldr	r3, [r2, r3]
 80029de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2207      	movs	r2, #7
 80029e4:	4013      	ands	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	220f      	movs	r2, #15
 80029ea:	409a      	lsls	r2, r3
 80029ec:	0013      	movs	r3, r2
 80029ee:	43da      	mvns	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4013      	ands	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	2107      	movs	r1, #7
 80029fe:	400b      	ands	r3, r1
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	409a      	lsls	r2, r3
 8002a04:	0013      	movs	r3, r2
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	08da      	lsrs	r2, r3, #3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3208      	adds	r2, #8
 8002a14:	0092      	lsls	r2, r2, #2
 8002a16:	6939      	ldr	r1, [r7, #16]
 8002a18:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	409a      	lsls	r2, r3
 8002a28:	0013      	movs	r3, r2
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2203      	movs	r2, #3
 8002a38:	401a      	ands	r2, r3
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	409a      	lsls	r2, r3
 8002a40:	0013      	movs	r3, r2
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	23c0      	movs	r3, #192	@ 0xc0
 8002a54:	029b      	lsls	r3, r3, #10
 8002a56:	4013      	ands	r3, r2
 8002a58:	d100      	bne.n	8002a5c <HAL_GPIO_Init+0x17c>
 8002a5a:	e0a0      	b.n	8002b9e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a5c:	4b57      	ldr	r3, [pc, #348]	@ (8002bbc <HAL_GPIO_Init+0x2dc>)
 8002a5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a60:	4b56      	ldr	r3, [pc, #344]	@ (8002bbc <HAL_GPIO_Init+0x2dc>)
 8002a62:	2101      	movs	r1, #1
 8002a64:	430a      	orrs	r2, r1
 8002a66:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a68:	4a55      	ldr	r2, [pc, #340]	@ (8002bc0 <HAL_GPIO_Init+0x2e0>)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	089b      	lsrs	r3, r3, #2
 8002a6e:	3302      	adds	r3, #2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	589b      	ldr	r3, [r3, r2]
 8002a74:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2203      	movs	r2, #3
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	220f      	movs	r2, #15
 8002a80:	409a      	lsls	r2, r3
 8002a82:	0013      	movs	r3, r2
 8002a84:	43da      	mvns	r2, r3
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	23a0      	movs	r3, #160	@ 0xa0
 8002a90:	05db      	lsls	r3, r3, #23
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d01f      	beq.n	8002ad6 <HAL_GPIO_Init+0x1f6>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a4a      	ldr	r2, [pc, #296]	@ (8002bc4 <HAL_GPIO_Init+0x2e4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d019      	beq.n	8002ad2 <HAL_GPIO_Init+0x1f2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a49      	ldr	r2, [pc, #292]	@ (8002bc8 <HAL_GPIO_Init+0x2e8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d013      	beq.n	8002ace <HAL_GPIO_Init+0x1ee>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a48      	ldr	r2, [pc, #288]	@ (8002bcc <HAL_GPIO_Init+0x2ec>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d00d      	beq.n	8002aca <HAL_GPIO_Init+0x1ea>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a47      	ldr	r2, [pc, #284]	@ (8002bd0 <HAL_GPIO_Init+0x2f0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d007      	beq.n	8002ac6 <HAL_GPIO_Init+0x1e6>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a46      	ldr	r2, [pc, #280]	@ (8002bd4 <HAL_GPIO_Init+0x2f4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d101      	bne.n	8002ac2 <HAL_GPIO_Init+0x1e2>
 8002abe:	2305      	movs	r3, #5
 8002ac0:	e00a      	b.n	8002ad8 <HAL_GPIO_Init+0x1f8>
 8002ac2:	2306      	movs	r3, #6
 8002ac4:	e008      	b.n	8002ad8 <HAL_GPIO_Init+0x1f8>
 8002ac6:	2304      	movs	r3, #4
 8002ac8:	e006      	b.n	8002ad8 <HAL_GPIO_Init+0x1f8>
 8002aca:	2303      	movs	r3, #3
 8002acc:	e004      	b.n	8002ad8 <HAL_GPIO_Init+0x1f8>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e002      	b.n	8002ad8 <HAL_GPIO_Init+0x1f8>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_GPIO_Init+0x1f8>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	2103      	movs	r1, #3
 8002adc:	400a      	ands	r2, r1
 8002ade:	0092      	lsls	r2, r2, #2
 8002ae0:	4093      	lsls	r3, r2
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ae8:	4935      	ldr	r1, [pc, #212]	@ (8002bc0 <HAL_GPIO_Init+0x2e0>)
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	089b      	lsrs	r3, r3, #2
 8002aee:	3302      	adds	r3, #2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002af6:	4b38      	ldr	r3, [pc, #224]	@ (8002bd8 <HAL_GPIO_Init+0x2f8>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	43da      	mvns	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685a      	ldr	r2, [r3, #4]
 8002b0a:	2380      	movs	r3, #128	@ 0x80
 8002b0c:	035b      	lsls	r3, r3, #13
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d003      	beq.n	8002b1a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002bd8 <HAL_GPIO_Init+0x2f8>)
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002b20:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd8 <HAL_GPIO_Init+0x2f8>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	43da      	mvns	r2, r3
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	2380      	movs	r3, #128	@ 0x80
 8002b36:	039b      	lsls	r3, r3, #14
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d003      	beq.n	8002b44 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b44:	4b24      	ldr	r3, [pc, #144]	@ (8002bd8 <HAL_GPIO_Init+0x2f8>)
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002b4a:	4b23      	ldr	r3, [pc, #140]	@ (8002bd8 <HAL_GPIO_Init+0x2f8>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	43da      	mvns	r2, r3
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	2380      	movs	r3, #128	@ 0x80
 8002b60:	029b      	lsls	r3, r3, #10
 8002b62:	4013      	ands	r3, r2
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd8 <HAL_GPIO_Init+0x2f8>)
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b74:	4b18      	ldr	r3, [pc, #96]	@ (8002bd8 <HAL_GPIO_Init+0x2f8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	43da      	mvns	r2, r3
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4013      	ands	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	2380      	movs	r3, #128	@ 0x80
 8002b8a:	025b      	lsls	r3, r3, #9
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002b98:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd8 <HAL_GPIO_Init+0x2f8>)
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	40da      	lsrs	r2, r3
 8002bac:	1e13      	subs	r3, r2, #0
 8002bae:	d000      	beq.n	8002bb2 <HAL_GPIO_Init+0x2d2>
 8002bb0:	e6a2      	b.n	80028f8 <HAL_GPIO_Init+0x18>
  }
}
 8002bb2:	46c0      	nop			@ (mov r8, r8)
 8002bb4:	46c0      	nop			@ (mov r8, r8)
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	b006      	add	sp, #24
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	50000400 	.word	0x50000400
 8002bc8:	50000800 	.word	0x50000800
 8002bcc:	50000c00 	.word	0x50000c00
 8002bd0:	50001000 	.word	0x50001000
 8002bd4:	50001c00 	.word	0x50001c00
 8002bd8:	40010400 	.word	0x40010400

08002bdc <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b086      	sub	sp, #24
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8002bf2:	e0bc      	b.n	8002d6e <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d100      	bne.n	8002c08 <HAL_GPIO_DeInit+0x2c>
 8002c06:	e0af      	b.n	8002d68 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002c08:	4a5e      	ldr	r2, [pc, #376]	@ (8002d84 <HAL_GPIO_DeInit+0x1a8>)
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	089b      	lsrs	r3, r3, #2
 8002c0e:	3302      	adds	r3, #2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	589b      	ldr	r3, [r3, r2]
 8002c14:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2203      	movs	r2, #3
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	220f      	movs	r2, #15
 8002c20:	409a      	lsls	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4013      	ands	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	23a0      	movs	r3, #160	@ 0xa0
 8002c2c:	05db      	lsls	r3, r3, #23
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d01f      	beq.n	8002c72 <HAL_GPIO_DeInit+0x96>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a54      	ldr	r2, [pc, #336]	@ (8002d88 <HAL_GPIO_DeInit+0x1ac>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d019      	beq.n	8002c6e <HAL_GPIO_DeInit+0x92>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a53      	ldr	r2, [pc, #332]	@ (8002d8c <HAL_GPIO_DeInit+0x1b0>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d013      	beq.n	8002c6a <HAL_GPIO_DeInit+0x8e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a52      	ldr	r2, [pc, #328]	@ (8002d90 <HAL_GPIO_DeInit+0x1b4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d00d      	beq.n	8002c66 <HAL_GPIO_DeInit+0x8a>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a51      	ldr	r2, [pc, #324]	@ (8002d94 <HAL_GPIO_DeInit+0x1b8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d007      	beq.n	8002c62 <HAL_GPIO_DeInit+0x86>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a50      	ldr	r2, [pc, #320]	@ (8002d98 <HAL_GPIO_DeInit+0x1bc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d101      	bne.n	8002c5e <HAL_GPIO_DeInit+0x82>
 8002c5a:	2305      	movs	r3, #5
 8002c5c:	e00a      	b.n	8002c74 <HAL_GPIO_DeInit+0x98>
 8002c5e:	2306      	movs	r3, #6
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_DeInit+0x98>
 8002c62:	2304      	movs	r3, #4
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_DeInit+0x98>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_DeInit+0x98>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_DeInit+0x98>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_DeInit+0x98>
 8002c72:	2300      	movs	r3, #0
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	2103      	movs	r1, #3
 8002c78:	400a      	ands	r2, r1
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d132      	bne.n	8002cea <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002c84:	4b45      	ldr	r3, [pc, #276]	@ (8002d9c <HAL_GPIO_DeInit+0x1c0>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	43d9      	mvns	r1, r3
 8002c8c:	4b43      	ldr	r3, [pc, #268]	@ (8002d9c <HAL_GPIO_DeInit+0x1c0>)
 8002c8e:	400a      	ands	r2, r1
 8002c90:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002c92:	4b42      	ldr	r3, [pc, #264]	@ (8002d9c <HAL_GPIO_DeInit+0x1c0>)
 8002c94:	685a      	ldr	r2, [r3, #4]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43d9      	mvns	r1, r3
 8002c9a:	4b40      	ldr	r3, [pc, #256]	@ (8002d9c <HAL_GPIO_DeInit+0x1c0>)
 8002c9c:	400a      	ands	r2, r1
 8002c9e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002ca0:	4b3e      	ldr	r3, [pc, #248]	@ (8002d9c <HAL_GPIO_DeInit+0x1c0>)
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	43d9      	mvns	r1, r3
 8002ca8:	4b3c      	ldr	r3, [pc, #240]	@ (8002d9c <HAL_GPIO_DeInit+0x1c0>)
 8002caa:	400a      	ands	r2, r1
 8002cac:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002cae:	4b3b      	ldr	r3, [pc, #236]	@ (8002d9c <HAL_GPIO_DeInit+0x1c0>)
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43d9      	mvns	r1, r3
 8002cb6:	4b39      	ldr	r3, [pc, #228]	@ (8002d9c <HAL_GPIO_DeInit+0x1c0>)
 8002cb8:	400a      	ands	r2, r1
 8002cba:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	220f      	movs	r2, #15
 8002cc6:	409a      	lsls	r2, r3
 8002cc8:	0013      	movs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8002d84 <HAL_GPIO_DeInit+0x1a8>)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	3302      	adds	r3, #2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	589a      	ldr	r2, [r3, r2]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	43d9      	mvns	r1, r3
 8002cdc:	4829      	ldr	r0, [pc, #164]	@ (8002d84 <HAL_GPIO_DeInit+0x1a8>)
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	089b      	lsrs	r3, r3, #2
 8002ce2:	400a      	ands	r2, r1
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	2103      	movs	r1, #3
 8002cf4:	4099      	lsls	r1, r3
 8002cf6:	000b      	movs	r3, r1
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	08da      	lsrs	r2, r3, #3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3208      	adds	r2, #8
 8002d06:	0092      	lsls	r2, r2, #2
 8002d08:	58d3      	ldr	r3, [r2, r3]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	2107      	movs	r1, #7
 8002d0e:	400a      	ands	r2, r1
 8002d10:	0092      	lsls	r2, r2, #2
 8002d12:	210f      	movs	r1, #15
 8002d14:	4091      	lsls	r1, r2
 8002d16:	000a      	movs	r2, r1
 8002d18:	43d1      	mvns	r1, r2
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	08d2      	lsrs	r2, r2, #3
 8002d1e:	4019      	ands	r1, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3208      	adds	r2, #8
 8002d24:	0092      	lsls	r2, r2, #2
 8002d26:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	0052      	lsls	r2, r2, #1
 8002d30:	2103      	movs	r1, #3
 8002d32:	4091      	lsls	r1, r2
 8002d34:	000a      	movs	r2, r1
 8002d36:	43d2      	mvns	r2, r2
 8002d38:	401a      	ands	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2101      	movs	r1, #1
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4091      	lsls	r1, r2
 8002d48:	000a      	movs	r2, r1
 8002d4a:	43d2      	mvns	r2, r2
 8002d4c:	401a      	ands	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	0052      	lsls	r2, r2, #1
 8002d5a:	2103      	movs	r1, #3
 8002d5c:	4091      	lsls	r1, r2
 8002d5e:	000a      	movs	r2, r1
 8002d60:	43d2      	mvns	r2, r2
 8002d62:	401a      	ands	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	609a      	str	r2, [r3, #8]
    }
    position++;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	40da      	lsrs	r2, r3
 8002d74:	1e13      	subs	r3, r2, #0
 8002d76:	d000      	beq.n	8002d7a <HAL_GPIO_DeInit+0x19e>
 8002d78:	e73c      	b.n	8002bf4 <HAL_GPIO_DeInit+0x18>
  }
}
 8002d7a:	46c0      	nop			@ (mov r8, r8)
 8002d7c:	46c0      	nop			@ (mov r8, r8)
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	b006      	add	sp, #24
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	40010000 	.word	0x40010000
 8002d88:	50000400 	.word	0x50000400
 8002d8c:	50000800 	.word	0x50000800
 8002d90:	50000c00 	.word	0x50000c00
 8002d94:	50001000 	.word	0x50001000
 8002d98:	50001c00 	.word	0x50001c00
 8002d9c:	40010400 	.word	0x40010400

08002da0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	0008      	movs	r0, r1
 8002daa:	0011      	movs	r1, r2
 8002dac:	1cbb      	adds	r3, r7, #2
 8002dae:	1c02      	adds	r2, r0, #0
 8002db0:	801a      	strh	r2, [r3, #0]
 8002db2:	1c7b      	adds	r3, r7, #1
 8002db4:	1c0a      	adds	r2, r1, #0
 8002db6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002db8:	1c7b      	adds	r3, r7, #1
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dc0:	1cbb      	adds	r3, r7, #2
 8002dc2:	881a      	ldrh	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002dc8:	e003      	b.n	8002dd2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002dca:	1cbb      	adds	r3, r7, #2
 8002dcc:	881a      	ldrh	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002dd2:	46c0      	nop			@ (mov r8, r8)
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	b002      	add	sp, #8
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e08f      	b.n	8002f0e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2241      	movs	r2, #65	@ 0x41
 8002df2:	5c9b      	ldrb	r3, [r3, r2]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d107      	bne.n	8002e0a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2240      	movs	r2, #64	@ 0x40
 8002dfe:	2100      	movs	r1, #0
 8002e00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f7fe fa4d 	bl	80012a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2241      	movs	r2, #65	@ 0x41
 8002e0e:	2124      	movs	r1, #36	@ 0x24
 8002e10:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	438a      	bics	r2, r1
 8002e20:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	493b      	ldr	r1, [pc, #236]	@ (8002f18 <HAL_I2C_Init+0x13c>)
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4938      	ldr	r1, [pc, #224]	@ (8002f1c <HAL_I2C_Init+0x140>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d108      	bne.n	8002e5a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2180      	movs	r1, #128	@ 0x80
 8002e52:	0209      	lsls	r1, r1, #8
 8002e54:	430a      	orrs	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	e007      	b.n	8002e6a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2184      	movs	r1, #132	@ 0x84
 8002e64:	0209      	lsls	r1, r1, #8
 8002e66:	430a      	orrs	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d109      	bne.n	8002e86 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2180      	movs	r1, #128	@ 0x80
 8002e7e:	0109      	lsls	r1, r1, #4
 8002e80:	430a      	orrs	r2, r1
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	e007      	b.n	8002e96 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4923      	ldr	r1, [pc, #140]	@ (8002f20 <HAL_I2C_Init+0x144>)
 8002e92:	400a      	ands	r2, r1
 8002e94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4920      	ldr	r1, [pc, #128]	@ (8002f24 <HAL_I2C_Init+0x148>)
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	491a      	ldr	r1, [pc, #104]	@ (8002f1c <HAL_I2C_Init+0x140>)
 8002eb2:	400a      	ands	r2, r1
 8002eb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69d9      	ldr	r1, [r3, #28]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1a      	ldr	r2, [r3, #32]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2101      	movs	r1, #1
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2241      	movs	r2, #65	@ 0x41
 8002efa:	2120      	movs	r1, #32
 8002efc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2242      	movs	r2, #66	@ 0x42
 8002f08:	2100      	movs	r1, #0
 8002f0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b002      	add	sp, #8
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	f0ffffff 	.word	0xf0ffffff
 8002f1c:	ffff7fff 	.word	0xffff7fff
 8002f20:	fffff7ff 	.word	0xfffff7ff
 8002f24:	02008000 	.word	0x02008000

08002f28 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e022      	b.n	8002f80 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2241      	movs	r2, #65	@ 0x41
 8002f3e:	2124      	movs	r1, #36	@ 0x24
 8002f40:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	438a      	bics	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7fe f9e9 	bl	800132c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2241      	movs	r2, #65	@ 0x41
 8002f64:	2100      	movs	r1, #0
 8002f66:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2242      	movs	r2, #66	@ 0x42
 8002f72:	2100      	movs	r1, #0
 8002f74:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2240      	movs	r2, #64	@ 0x40
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b002      	add	sp, #8
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002f88:	b590      	push	{r4, r7, lr}
 8002f8a:	b089      	sub	sp, #36	@ 0x24
 8002f8c:	af02      	add	r7, sp, #8
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	0008      	movs	r0, r1
 8002f92:	607a      	str	r2, [r7, #4]
 8002f94:	0019      	movs	r1, r3
 8002f96:	230a      	movs	r3, #10
 8002f98:	18fb      	adds	r3, r7, r3
 8002f9a:	1c02      	adds	r2, r0, #0
 8002f9c:	801a      	strh	r2, [r3, #0]
 8002f9e:	2308      	movs	r3, #8
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	1c0a      	adds	r2, r1, #0
 8002fa4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2241      	movs	r2, #65	@ 0x41
 8002faa:	5c9b      	ldrb	r3, [r3, r2]
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	d000      	beq.n	8002fb4 <HAL_I2C_Master_Transmit+0x2c>
 8002fb2:	e10a      	b.n	80031ca <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2240      	movs	r2, #64	@ 0x40
 8002fb8:	5c9b      	ldrb	r3, [r3, r2]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d101      	bne.n	8002fc2 <HAL_I2C_Master_Transmit+0x3a>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e104      	b.n	80031cc <HAL_I2C_Master_Transmit+0x244>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2240      	movs	r2, #64	@ 0x40
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fca:	f7fe fe9f 	bl	8001d0c <HAL_GetTick>
 8002fce:	0003      	movs	r3, r0
 8002fd0:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fd2:	2380      	movs	r3, #128	@ 0x80
 8002fd4:	0219      	lsls	r1, r3, #8
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	2319      	movs	r3, #25
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f000 fb22 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 8002fe4:	1e03      	subs	r3, r0, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0ef      	b.n	80031cc <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2241      	movs	r2, #65	@ 0x41
 8002ff0:	2121      	movs	r1, #33	@ 0x21
 8002ff2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2242      	movs	r2, #66	@ 0x42
 8002ff8:	2110      	movs	r1, #16
 8002ffa:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2208      	movs	r2, #8
 800300c:	18ba      	adds	r2, r7, r2
 800300e:	8812      	ldrh	r2, [r2, #0]
 8003010:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	2bff      	cmp	r3, #255	@ 0xff
 8003020:	d906      	bls.n	8003030 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	22ff      	movs	r2, #255	@ 0xff
 8003026:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003028:	2380      	movs	r3, #128	@ 0x80
 800302a:	045b      	lsls	r3, r3, #17
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	e007      	b.n	8003040 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800303a:	2380      	movs	r3, #128	@ 0x80
 800303c:	049b      	lsls	r3, r3, #18
 800303e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	d027      	beq.n	8003098 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003070:	3b01      	subs	r3, #1
 8003072:	b29a      	uxth	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307c:	b2db      	uxtb	r3, r3
 800307e:	3301      	adds	r3, #1
 8003080:	b2da      	uxtb	r2, r3
 8003082:	697c      	ldr	r4, [r7, #20]
 8003084:	230a      	movs	r3, #10
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	8819      	ldrh	r1, [r3, #0]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	4b51      	ldr	r3, [pc, #324]	@ (80031d4 <HAL_I2C_Master_Transmit+0x24c>)
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	0023      	movs	r3, r4
 8003092:	f000 fd41 	bl	8003b18 <I2C_TransferConfig>
 8003096:	e06f      	b.n	8003178 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309c:	b2da      	uxtb	r2, r3
 800309e:	697c      	ldr	r4, [r7, #20]
 80030a0:	230a      	movs	r3, #10
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	8819      	ldrh	r1, [r3, #0]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	4b4a      	ldr	r3, [pc, #296]	@ (80031d4 <HAL_I2C_Master_Transmit+0x24c>)
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	0023      	movs	r3, r4
 80030ae:	f000 fd33 	bl	8003b18 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030b2:	e061      	b.n	8003178 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 fb0c 	bl	80036d8 <I2C_WaitOnTXISFlagUntilTimeout>
 80030c0:	1e03      	subs	r3, r0, #0
 80030c2:	d001      	beq.n	80030c8 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e081      	b.n	80031cc <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030cc:	781a      	ldrb	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d8:	1c5a      	adds	r2, r3, #1
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d03a      	beq.n	8003178 <HAL_I2C_Master_Transmit+0x1f0>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003106:	2b00      	cmp	r3, #0
 8003108:	d136      	bne.n	8003178 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800310a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	9300      	str	r3, [sp, #0]
 8003112:	0013      	movs	r3, r2
 8003114:	2200      	movs	r2, #0
 8003116:	2180      	movs	r1, #128	@ 0x80
 8003118:	f000 fa86 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 800311c:	1e03      	subs	r3, r0, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e053      	b.n	80031cc <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	2bff      	cmp	r3, #255	@ 0xff
 800312c:	d911      	bls.n	8003152 <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	22ff      	movs	r2, #255	@ 0xff
 8003132:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003138:	b2da      	uxtb	r2, r3
 800313a:	2380      	movs	r3, #128	@ 0x80
 800313c:	045c      	lsls	r4, r3, #17
 800313e:	230a      	movs	r3, #10
 8003140:	18fb      	adds	r3, r7, r3
 8003142:	8819      	ldrh	r1, [r3, #0]
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	2300      	movs	r3, #0
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	0023      	movs	r3, r4
 800314c:	f000 fce4 	bl	8003b18 <I2C_TransferConfig>
 8003150:	e012      	b.n	8003178 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003160:	b2da      	uxtb	r2, r3
 8003162:	2380      	movs	r3, #128	@ 0x80
 8003164:	049c      	lsls	r4, r3, #18
 8003166:	230a      	movs	r3, #10
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	8819      	ldrh	r1, [r3, #0]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	2300      	movs	r3, #0
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	0023      	movs	r3, r4
 8003174:	f000 fcd0 	bl	8003b18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d198      	bne.n	80030b4 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	0018      	movs	r0, r3
 800318a:	f000 faeb 	bl	8003764 <I2C_WaitOnSTOPFlagUntilTimeout>
 800318e:	1e03      	subs	r3, r0, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e01a      	b.n	80031cc <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2220      	movs	r2, #32
 800319c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	490b      	ldr	r1, [pc, #44]	@ (80031d8 <HAL_I2C_Master_Transmit+0x250>)
 80031aa:	400a      	ands	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2241      	movs	r2, #65	@ 0x41
 80031b2:	2120      	movs	r1, #32
 80031b4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2242      	movs	r2, #66	@ 0x42
 80031ba:	2100      	movs	r1, #0
 80031bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2240      	movs	r2, #64	@ 0x40
 80031c2:	2100      	movs	r1, #0
 80031c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
  }
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b007      	add	sp, #28
 80031d2:	bd90      	pop	{r4, r7, pc}
 80031d4:	80002000 	.word	0x80002000
 80031d8:	fe00e800 	.word	0xfe00e800

080031dc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80031dc:	b590      	push	{r4, r7, lr}
 80031de:	b089      	sub	sp, #36	@ 0x24
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	0008      	movs	r0, r1
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	0019      	movs	r1, r3
 80031ea:	230a      	movs	r3, #10
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	1c02      	adds	r2, r0, #0
 80031f0:	801a      	strh	r2, [r3, #0]
 80031f2:	2308      	movs	r3, #8
 80031f4:	18fb      	adds	r3, r7, r3
 80031f6:	1c0a      	adds	r2, r1, #0
 80031f8:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2241      	movs	r2, #65	@ 0x41
 80031fe:	5c9b      	ldrb	r3, [r3, r2]
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b20      	cmp	r3, #32
 8003204:	d000      	beq.n	8003208 <HAL_I2C_Master_Receive+0x2c>
 8003206:	e0e8      	b.n	80033da <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2240      	movs	r2, #64	@ 0x40
 800320c:	5c9b      	ldrb	r3, [r3, r2]
 800320e:	2b01      	cmp	r3, #1
 8003210:	d101      	bne.n	8003216 <HAL_I2C_Master_Receive+0x3a>
 8003212:	2302      	movs	r3, #2
 8003214:	e0e2      	b.n	80033dc <HAL_I2C_Master_Receive+0x200>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2240      	movs	r2, #64	@ 0x40
 800321a:	2101      	movs	r1, #1
 800321c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800321e:	f7fe fd75 	bl	8001d0c <HAL_GetTick>
 8003222:	0003      	movs	r3, r0
 8003224:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003226:	2380      	movs	r3, #128	@ 0x80
 8003228:	0219      	lsls	r1, r3, #8
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	2319      	movs	r3, #25
 8003232:	2201      	movs	r2, #1
 8003234:	f000 f9f8 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 8003238:	1e03      	subs	r3, r0, #0
 800323a:	d001      	beq.n	8003240 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0cd      	b.n	80033dc <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2241      	movs	r2, #65	@ 0x41
 8003244:	2122      	movs	r1, #34	@ 0x22
 8003246:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2242      	movs	r2, #66	@ 0x42
 800324c:	2110      	movs	r1, #16
 800324e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2208      	movs	r2, #8
 8003260:	18ba      	adds	r2, r7, r2
 8003262:	8812      	ldrh	r2, [r2, #0]
 8003264:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	2bff      	cmp	r3, #255	@ 0xff
 8003274:	d911      	bls.n	800329a <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003280:	b2da      	uxtb	r2, r3
 8003282:	2380      	movs	r3, #128	@ 0x80
 8003284:	045c      	lsls	r4, r3, #17
 8003286:	230a      	movs	r3, #10
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	8819      	ldrh	r1, [r3, #0]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	4b55      	ldr	r3, [pc, #340]	@ (80033e4 <HAL_I2C_Master_Receive+0x208>)
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	0023      	movs	r3, r4
 8003294:	f000 fc40 	bl	8003b18 <I2C_TransferConfig>
 8003298:	e076      	b.n	8003388 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	2380      	movs	r3, #128	@ 0x80
 80032ac:	049c      	lsls	r4, r3, #18
 80032ae:	230a      	movs	r3, #10
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	8819      	ldrh	r1, [r3, #0]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	4b4b      	ldr	r3, [pc, #300]	@ (80033e4 <HAL_I2C_Master_Receive+0x208>)
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	0023      	movs	r3, r4
 80032bc:	f000 fc2c 	bl	8003b18 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80032c0:	e062      	b.n	8003388 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	0018      	movs	r0, r3
 80032ca:	f000 fa8f 	bl	80037ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80032ce:	1e03      	subs	r3, r0, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e082      	b.n	80033dc <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e0:	b2d2      	uxtb	r2, r2
 80032e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b29a      	uxth	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	3b01      	subs	r3, #1
 8003302:	b29a      	uxth	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d03a      	beq.n	8003388 <HAL_I2C_Master_Receive+0x1ac>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003316:	2b00      	cmp	r3, #0
 8003318:	d136      	bne.n	8003388 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800331a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	0013      	movs	r3, r2
 8003324:	2200      	movs	r2, #0
 8003326:	2180      	movs	r1, #128	@ 0x80
 8003328:	f000 f97e 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d001      	beq.n	8003334 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e053      	b.n	80033dc <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003338:	b29b      	uxth	r3, r3
 800333a:	2bff      	cmp	r3, #255	@ 0xff
 800333c:	d911      	bls.n	8003362 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	22ff      	movs	r2, #255	@ 0xff
 8003342:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003348:	b2da      	uxtb	r2, r3
 800334a:	2380      	movs	r3, #128	@ 0x80
 800334c:	045c      	lsls	r4, r3, #17
 800334e:	230a      	movs	r3, #10
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	8819      	ldrh	r1, [r3, #0]
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	2300      	movs	r3, #0
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	0023      	movs	r3, r4
 800335c:	f000 fbdc 	bl	8003b18 <I2C_TransferConfig>
 8003360:	e012      	b.n	8003388 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003370:	b2da      	uxtb	r2, r3
 8003372:	2380      	movs	r3, #128	@ 0x80
 8003374:	049c      	lsls	r4, r3, #18
 8003376:	230a      	movs	r3, #10
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	8819      	ldrh	r1, [r3, #0]
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	2300      	movs	r3, #0
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	0023      	movs	r3, r4
 8003384:	f000 fbc8 	bl	8003b18 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d197      	bne.n	80032c2 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	0018      	movs	r0, r3
 800339a:	f000 f9e3 	bl	8003764 <I2C_WaitOnSTOPFlagUntilTimeout>
 800339e:	1e03      	subs	r3, r0, #0
 80033a0:	d001      	beq.n	80033a6 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e01a      	b.n	80033dc <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2220      	movs	r2, #32
 80033ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	490b      	ldr	r1, [pc, #44]	@ (80033e8 <HAL_I2C_Master_Receive+0x20c>)
 80033ba:	400a      	ands	r2, r1
 80033bc:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2241      	movs	r2, #65	@ 0x41
 80033c2:	2120      	movs	r1, #32
 80033c4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2242      	movs	r2, #66	@ 0x42
 80033ca:	2100      	movs	r1, #0
 80033cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2240      	movs	r2, #64	@ 0x40
 80033d2:	2100      	movs	r1, #0
 80033d4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	e000      	b.n	80033dc <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80033da:	2302      	movs	r3, #2
  }
}
 80033dc:	0018      	movs	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	b007      	add	sp, #28
 80033e2:	bd90      	pop	{r4, r7, pc}
 80033e4:	80002400 	.word	0x80002400
 80033e8:	fe00e800 	.word	0xfe00e800

080033ec <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b08a      	sub	sp, #40	@ 0x28
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	230a      	movs	r3, #10
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	1c0a      	adds	r2, r1, #0
 80033fe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2241      	movs	r2, #65	@ 0x41
 8003408:	5c9b      	ldrb	r3, [r3, r2]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b20      	cmp	r3, #32
 800340e:	d000      	beq.n	8003412 <HAL_I2C_IsDeviceReady+0x26>
 8003410:	e0df      	b.n	80035d2 <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	699a      	ldr	r2, [r3, #24]
 8003418:	2380      	movs	r3, #128	@ 0x80
 800341a:	021b      	lsls	r3, r3, #8
 800341c:	401a      	ands	r2, r3
 800341e:	2380      	movs	r3, #128	@ 0x80
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	429a      	cmp	r2, r3
 8003424:	d101      	bne.n	800342a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003426:	2302      	movs	r3, #2
 8003428:	e0d4      	b.n	80035d4 <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2240      	movs	r2, #64	@ 0x40
 800342e:	5c9b      	ldrb	r3, [r3, r2]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_I2C_IsDeviceReady+0x4c>
 8003434:	2302      	movs	r3, #2
 8003436:	e0cd      	b.n	80035d4 <HAL_I2C_IsDeviceReady+0x1e8>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2240      	movs	r2, #64	@ 0x40
 800343c:	2101      	movs	r1, #1
 800343e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2241      	movs	r2, #65	@ 0x41
 8003444:	2124      	movs	r1, #36	@ 0x24
 8003446:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d107      	bne.n	8003466 <HAL_I2C_IsDeviceReady+0x7a>
 8003456:	230a      	movs	r3, #10
 8003458:	18fb      	adds	r3, r7, r3
 800345a:	881b      	ldrh	r3, [r3, #0]
 800345c:	059b      	lsls	r3, r3, #22
 800345e:	0d9b      	lsrs	r3, r3, #22
 8003460:	4a5e      	ldr	r2, [pc, #376]	@ (80035dc <HAL_I2C_IsDeviceReady+0x1f0>)
 8003462:	431a      	orrs	r2, r3
 8003464:	e006      	b.n	8003474 <HAL_I2C_IsDeviceReady+0x88>
 8003466:	230a      	movs	r3, #10
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	059b      	lsls	r3, r3, #22
 800346e:	0d9b      	lsrs	r3, r3, #22
 8003470:	4a5b      	ldr	r2, [pc, #364]	@ (80035e0 <HAL_I2C_IsDeviceReady+0x1f4>)
 8003472:	431a      	orrs	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800347a:	f7fe fc47 	bl	8001d0c <HAL_GetTick>
 800347e:	0003      	movs	r3, r0
 8003480:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	2220      	movs	r2, #32
 800348a:	4013      	ands	r3, r2
 800348c:	3b20      	subs	r3, #32
 800348e:	425a      	negs	r2, r3
 8003490:	4153      	adcs	r3, r2
 8003492:	b2da      	uxtb	r2, r3
 8003494:	231f      	movs	r3, #31
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	2210      	movs	r2, #16
 80034a2:	4013      	ands	r3, r2
 80034a4:	3b10      	subs	r3, #16
 80034a6:	425a      	negs	r2, r3
 80034a8:	4153      	adcs	r3, r2
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	231e      	movs	r3, #30
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80034b2:	e035      	b.n	8003520 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	3301      	adds	r3, #1
 80034b8:	d01a      	beq.n	80034f0 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034ba:	f7fe fc27 	bl	8001d0c <HAL_GetTick>
 80034be:	0002      	movs	r2, r0
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d302      	bcc.n	80034d0 <HAL_I2C_IsDeviceReady+0xe4>
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10f      	bne.n	80034f0 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2241      	movs	r2, #65	@ 0x41
 80034d4:	2120      	movs	r1, #32
 80034d6:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034dc:	2220      	movs	r2, #32
 80034de:	431a      	orrs	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2240      	movs	r2, #64	@ 0x40
 80034e8:	2100      	movs	r1, #0
 80034ea:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e071      	b.n	80035d4 <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2220      	movs	r2, #32
 80034f8:	4013      	ands	r3, r2
 80034fa:	3b20      	subs	r3, #32
 80034fc:	425a      	negs	r2, r3
 80034fe:	4153      	adcs	r3, r2
 8003500:	b2da      	uxtb	r2, r3
 8003502:	231f      	movs	r3, #31
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	2210      	movs	r2, #16
 8003510:	4013      	ands	r3, r2
 8003512:	3b10      	subs	r3, #16
 8003514:	425a      	negs	r2, r3
 8003516:	4153      	adcs	r3, r2
 8003518:	b2da      	uxtb	r2, r3
 800351a:	231e      	movs	r3, #30
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003520:	231f      	movs	r3, #31
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d104      	bne.n	8003534 <HAL_I2C_IsDeviceReady+0x148>
 800352a:	231e      	movs	r3, #30
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0bf      	beq.n	80034b4 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	2210      	movs	r2, #16
 800353c:	4013      	ands	r3, r2
 800353e:	2b10      	cmp	r3, #16
 8003540:	d01a      	beq.n	8003578 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	0013      	movs	r3, r2
 800354c:	2200      	movs	r2, #0
 800354e:	2120      	movs	r1, #32
 8003550:	f000 f86a 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 8003554:	1e03      	subs	r3, r0, #0
 8003556:	d001      	beq.n	800355c <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e03b      	b.n	80035d4 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2220      	movs	r2, #32
 8003562:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2241      	movs	r2, #65	@ 0x41
 8003568:	2120      	movs	r1, #32
 800356a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2240      	movs	r2, #64	@ 0x40
 8003570:	2100      	movs	r1, #0
 8003572:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003574:	2300      	movs	r3, #0
 8003576:	e02d      	b.n	80035d4 <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	0013      	movs	r3, r2
 8003582:	2200      	movs	r2, #0
 8003584:	2120      	movs	r1, #32
 8003586:	f000 f84f 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 800358a:	1e03      	subs	r3, r0, #0
 800358c:	d001      	beq.n	8003592 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e020      	b.n	80035d4 <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2210      	movs	r2, #16
 8003598:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2220      	movs	r2, #32
 80035a0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	3301      	adds	r3, #1
 80035a6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d900      	bls.n	80035b2 <HAL_I2C_IsDeviceReady+0x1c6>
 80035b0:	e74d      	b.n	800344e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2241      	movs	r2, #65	@ 0x41
 80035b6:	2120      	movs	r1, #32
 80035b8:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035be:	2220      	movs	r2, #32
 80035c0:	431a      	orrs	r2, r3
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2240      	movs	r2, #64	@ 0x40
 80035ca:	2100      	movs	r1, #0
 80035cc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
  }
}
 80035d4:	0018      	movs	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	b008      	add	sp, #32
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	02002000 	.word	0x02002000
 80035e0:	02002800 	.word	0x02002800

080035e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2202      	movs	r2, #2
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d103      	bne.n	8003602 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2200      	movs	r2, #0
 8003600:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	2201      	movs	r2, #1
 800360a:	4013      	ands	r3, r2
 800360c:	2b01      	cmp	r3, #1
 800360e:	d007      	beq.n	8003620 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2101      	movs	r1, #1
 800361c:	430a      	orrs	r2, r1
 800361e:	619a      	str	r2, [r3, #24]
  }
}
 8003620:	46c0      	nop			@ (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}

08003628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	1dfb      	adds	r3, r7, #7
 8003636:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003638:	e03a      	b.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	6839      	ldr	r1, [r7, #0]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	0018      	movs	r0, r3
 8003642:	f000 f971 	bl	8003928 <I2C_IsErrorOccurred>
 8003646:	1e03      	subs	r3, r0, #0
 8003648:	d001      	beq.n	800364e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e040      	b.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	3301      	adds	r3, #1
 8003652:	d02d      	beq.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003654:	f7fe fb5a 	bl	8001d0c <HAL_GetTick>
 8003658:	0002      	movs	r2, r0
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	429a      	cmp	r2, r3
 8003662:	d302      	bcc.n	800366a <I2C_WaitOnFlagUntilTimeout+0x42>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d122      	bne.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	4013      	ands	r3, r2
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	425a      	negs	r2, r3
 800367a:	4153      	adcs	r3, r2
 800367c:	b2db      	uxtb	r3, r3
 800367e:	001a      	movs	r2, r3
 8003680:	1dfb      	adds	r3, r7, #7
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	429a      	cmp	r2, r3
 8003686:	d113      	bne.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368c:	2220      	movs	r2, #32
 800368e:	431a      	orrs	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2241      	movs	r2, #65	@ 0x41
 8003698:	2120      	movs	r1, #32
 800369a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2242      	movs	r2, #66	@ 0x42
 80036a0:	2100      	movs	r1, #0
 80036a2:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2240      	movs	r2, #64	@ 0x40
 80036a8:	2100      	movs	r1, #0
 80036aa:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e00f      	b.n	80036d0 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	4013      	ands	r3, r2
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	425a      	negs	r2, r3
 80036c0:	4153      	adcs	r3, r2
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	001a      	movs	r2, r3
 80036c6:	1dfb      	adds	r3, r7, #7
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d0b5      	beq.n	800363a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	0018      	movs	r0, r3
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b004      	add	sp, #16
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036e4:	e032      	b.n	800374c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	68b9      	ldr	r1, [r7, #8]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	0018      	movs	r0, r3
 80036ee:	f000 f91b 	bl	8003928 <I2C_IsErrorOccurred>
 80036f2:	1e03      	subs	r3, r0, #0
 80036f4:	d001      	beq.n	80036fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e030      	b.n	800375c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	3301      	adds	r3, #1
 80036fe:	d025      	beq.n	800374c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003700:	f7fe fb04 	bl	8001d0c <HAL_GetTick>
 8003704:	0002      	movs	r2, r0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	429a      	cmp	r2, r3
 800370e:	d302      	bcc.n	8003716 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d11a      	bne.n	800374c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	2202      	movs	r2, #2
 800371e:	4013      	ands	r3, r2
 8003720:	2b02      	cmp	r3, #2
 8003722:	d013      	beq.n	800374c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003728:	2220      	movs	r2, #32
 800372a:	431a      	orrs	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2241      	movs	r2, #65	@ 0x41
 8003734:	2120      	movs	r1, #32
 8003736:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2242      	movs	r2, #66	@ 0x42
 800373c:	2100      	movs	r1, #0
 800373e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2240      	movs	r2, #64	@ 0x40
 8003744:	2100      	movs	r1, #0
 8003746:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e007      	b.n	800375c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2202      	movs	r2, #2
 8003754:	4013      	ands	r3, r2
 8003756:	2b02      	cmp	r3, #2
 8003758:	d1c5      	bne.n	80036e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	b004      	add	sp, #16
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003770:	e02f      	b.n	80037d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	0018      	movs	r0, r3
 800377a:	f000 f8d5 	bl	8003928 <I2C_IsErrorOccurred>
 800377e:	1e03      	subs	r3, r0, #0
 8003780:	d001      	beq.n	8003786 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e02d      	b.n	80037e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003786:	f7fe fac1 	bl	8001d0c <HAL_GetTick>
 800378a:	0002      	movs	r2, r0
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d11a      	bne.n	80037d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2220      	movs	r2, #32
 80037a4:	4013      	ands	r3, r2
 80037a6:	2b20      	cmp	r3, #32
 80037a8:	d013      	beq.n	80037d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ae:	2220      	movs	r2, #32
 80037b0:	431a      	orrs	r2, r3
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2241      	movs	r2, #65	@ 0x41
 80037ba:	2120      	movs	r1, #32
 80037bc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2242      	movs	r2, #66	@ 0x42
 80037c2:	2100      	movs	r1, #0
 80037c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2240      	movs	r2, #64	@ 0x40
 80037ca:	2100      	movs	r1, #0
 80037cc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e007      	b.n	80037e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	699b      	ldr	r3, [r3, #24]
 80037d8:	2220      	movs	r2, #32
 80037da:	4013      	ands	r3, r2
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d1c8      	bne.n	8003772 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	0018      	movs	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	b004      	add	sp, #16
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f8:	2317      	movs	r3, #23
 80037fa:	18fb      	adds	r3, r7, r3
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003800:	e07b      	b.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	68b9      	ldr	r1, [r7, #8]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	0018      	movs	r0, r3
 800380a:	f000 f88d 	bl	8003928 <I2C_IsErrorOccurred>
 800380e:	1e03      	subs	r3, r0, #0
 8003810:	d003      	beq.n	800381a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003812:	2317      	movs	r3, #23
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2201      	movs	r2, #1
 8003818:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	2220      	movs	r2, #32
 8003822:	4013      	ands	r3, r2
 8003824:	2b20      	cmp	r3, #32
 8003826:	d140      	bne.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003828:	2117      	movs	r1, #23
 800382a:	187b      	adds	r3, r7, r1
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d13b      	bne.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2204      	movs	r2, #4
 800383a:	4013      	ands	r3, r2
 800383c:	2b04      	cmp	r3, #4
 800383e:	d106      	bne.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003848:	187b      	adds	r3, r7, r1
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2210      	movs	r2, #16
 8003856:	4013      	ands	r3, r2
 8003858:	2b10      	cmp	r3, #16
 800385a:	d123      	bne.n	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2210      	movs	r2, #16
 8003862:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2204      	movs	r2, #4
 8003868:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2220      	movs	r2, #32
 8003870:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4929      	ldr	r1, [pc, #164]	@ (8003924 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 800387e:	400a      	ands	r2, r1
 8003880:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2241      	movs	r2, #65	@ 0x41
 8003886:	2120      	movs	r1, #32
 8003888:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2242      	movs	r2, #66	@ 0x42
 800388e:	2100      	movs	r1, #0
 8003890:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2240      	movs	r2, #64	@ 0x40
 8003896:	2100      	movs	r1, #0
 8003898:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800389a:	2317      	movs	r3, #23
 800389c:	18fb      	adds	r3, r7, r3
 800389e:	2201      	movs	r2, #1
 80038a0:	701a      	strb	r2, [r3, #0]
 80038a2:	e002      	b.n	80038aa <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80038aa:	f7fe fa2f 	bl	8001d0c <HAL_GetTick>
 80038ae:	0002      	movs	r2, r0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d302      	bcc.n	80038c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11c      	bne.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 80038c0:	2017      	movs	r0, #23
 80038c2:	183b      	adds	r3, r7, r0
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d117      	bne.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2204      	movs	r2, #4
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d010      	beq.n	80038fa <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038dc:	2220      	movs	r2, #32
 80038de:	431a      	orrs	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2241      	movs	r2, #65	@ 0x41
 80038e8:	2120      	movs	r1, #32
 80038ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2240      	movs	r2, #64	@ 0x40
 80038f0:	2100      	movs	r1, #0
 80038f2:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 80038f4:	183b      	adds	r3, r7, r0
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2204      	movs	r2, #4
 8003902:	4013      	ands	r3, r2
 8003904:	2b04      	cmp	r3, #4
 8003906:	d005      	beq.n	8003914 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003908:	2317      	movs	r3, #23
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d100      	bne.n	8003914 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003912:	e776      	b.n	8003802 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003914:	2317      	movs	r3, #23
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	781b      	ldrb	r3, [r3, #0]
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	b006      	add	sp, #24
 8003920:	bd80      	pop	{r7, pc}
 8003922:	46c0      	nop			@ (mov r8, r8)
 8003924:	fe00e800 	.word	0xfe00e800

08003928 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	@ 0x28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003934:	2327      	movs	r3, #39	@ 0x27
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	2210      	movs	r2, #16
 8003950:	4013      	ands	r3, r2
 8003952:	d100      	bne.n	8003956 <I2C_IsErrorOccurred+0x2e>
 8003954:	e079      	b.n	8003a4a <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2210      	movs	r2, #16
 800395c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800395e:	e057      	b.n	8003a10 <I2C_IsErrorOccurred+0xe8>
 8003960:	2227      	movs	r2, #39	@ 0x27
 8003962:	18bb      	adds	r3, r7, r2
 8003964:	18ba      	adds	r2, r7, r2
 8003966:	7812      	ldrb	r2, [r2, #0]
 8003968:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	3301      	adds	r3, #1
 800396e:	d04f      	beq.n	8003a10 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003970:	f7fe f9cc 	bl	8001d0c <HAL_GetTick>
 8003974:	0002      	movs	r2, r0
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	68ba      	ldr	r2, [r7, #8]
 800397c:	429a      	cmp	r2, r3
 800397e:	d302      	bcc.n	8003986 <I2C_IsErrorOccurred+0x5e>
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d144      	bne.n	8003a10 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	2380      	movs	r3, #128	@ 0x80
 800398e:	01db      	lsls	r3, r3, #7
 8003990:	4013      	ands	r3, r2
 8003992:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003994:	2013      	movs	r0, #19
 8003996:	183b      	adds	r3, r7, r0
 8003998:	68fa      	ldr	r2, [r7, #12]
 800399a:	2142      	movs	r1, #66	@ 0x42
 800399c:	5c52      	ldrb	r2, [r2, r1]
 800399e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699a      	ldr	r2, [r3, #24]
 80039a6:	2380      	movs	r3, #128	@ 0x80
 80039a8:	021b      	lsls	r3, r3, #8
 80039aa:	401a      	ands	r2, r3
 80039ac:	2380      	movs	r3, #128	@ 0x80
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d126      	bne.n	8003a02 <I2C_IsErrorOccurred+0xda>
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	2380      	movs	r3, #128	@ 0x80
 80039b8:	01db      	lsls	r3, r3, #7
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d021      	beq.n	8003a02 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80039be:	183b      	adds	r3, r7, r0
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	d01d      	beq.n	8003a02 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2180      	movs	r1, #128	@ 0x80
 80039d2:	01c9      	lsls	r1, r1, #7
 80039d4:	430a      	orrs	r2, r1
 80039d6:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039d8:	f7fe f998 	bl	8001d0c <HAL_GetTick>
 80039dc:	0003      	movs	r3, r0
 80039de:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039e0:	e00f      	b.n	8003a02 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039e2:	f7fe f993 	bl	8001d0c <HAL_GetTick>
 80039e6:	0002      	movs	r2, r0
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b19      	cmp	r3, #25
 80039ee:	d908      	bls.n	8003a02 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	2220      	movs	r2, #32
 80039f4:	4313      	orrs	r3, r2
 80039f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80039f8:	2327      	movs	r3, #39	@ 0x27
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	2201      	movs	r2, #1
 80039fe:	701a      	strb	r2, [r3, #0]

              break;
 8003a00:	e006      	b.n	8003a10 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b20      	cmp	r3, #32
 8003a0e:	d1e8      	bne.n	80039e2 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699b      	ldr	r3, [r3, #24]
 8003a16:	2220      	movs	r2, #32
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b20      	cmp	r3, #32
 8003a1c:	d004      	beq.n	8003a28 <I2C_IsErrorOccurred+0x100>
 8003a1e:	2327      	movs	r3, #39	@ 0x27
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d09b      	beq.n	8003960 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a28:	2327      	movs	r3, #39	@ 0x27
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d103      	bne.n	8003a3a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2220      	movs	r2, #32
 8003a38:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	2204      	movs	r2, #4
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a42:	2327      	movs	r3, #39	@ 0x27
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	2201      	movs	r2, #1
 8003a48:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	2380      	movs	r3, #128	@ 0x80
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d00c      	beq.n	8003a76 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a5c:	6a3b      	ldr	r3, [r7, #32]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	4313      	orrs	r3, r2
 8003a62:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2280      	movs	r2, #128	@ 0x80
 8003a6a:	0052      	lsls	r2, r2, #1
 8003a6c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a6e:	2327      	movs	r3, #39	@ 0x27
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	2201      	movs	r2, #1
 8003a74:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	2380      	movs	r3, #128	@ 0x80
 8003a7a:	00db      	lsls	r3, r3, #3
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d00c      	beq.n	8003a9a <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	2208      	movs	r2, #8
 8003a84:	4313      	orrs	r3, r2
 8003a86:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2280      	movs	r2, #128	@ 0x80
 8003a8e:	00d2      	lsls	r2, r2, #3
 8003a90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a92:	2327      	movs	r3, #39	@ 0x27
 8003a94:	18fb      	adds	r3, r7, r3
 8003a96:	2201      	movs	r2, #1
 8003a98:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	2380      	movs	r3, #128	@ 0x80
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d00c      	beq.n	8003abe <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	2202      	movs	r2, #2
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2280      	movs	r2, #128	@ 0x80
 8003ab2:	0092      	lsls	r2, r2, #2
 8003ab4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ab6:	2327      	movs	r3, #39	@ 0x27
 8003ab8:	18fb      	adds	r3, r7, r3
 8003aba:	2201      	movs	r2, #1
 8003abc:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003abe:	2327      	movs	r3, #39	@ 0x27
 8003ac0:	18fb      	adds	r3, r7, r3
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d01d      	beq.n	8003b04 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f7ff fd8a 	bl	80035e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	490e      	ldr	r1, [pc, #56]	@ (8003b14 <I2C_IsErrorOccurred+0x1ec>)
 8003adc:	400a      	ands	r2, r1
 8003ade:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2241      	movs	r2, #65	@ 0x41
 8003af0:	2120      	movs	r1, #32
 8003af2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2242      	movs	r2, #66	@ 0x42
 8003af8:	2100      	movs	r1, #0
 8003afa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2240      	movs	r2, #64	@ 0x40
 8003b00:	2100      	movs	r1, #0
 8003b02:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003b04:	2327      	movs	r3, #39	@ 0x27
 8003b06:	18fb      	adds	r3, r7, r3
 8003b08:	781b      	ldrb	r3, [r3, #0]
}
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b00a      	add	sp, #40	@ 0x28
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	fe00e800 	.word	0xfe00e800

08003b18 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b18:	b590      	push	{r4, r7, lr}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	0008      	movs	r0, r1
 8003b22:	0011      	movs	r1, r2
 8003b24:	607b      	str	r3, [r7, #4]
 8003b26:	240a      	movs	r4, #10
 8003b28:	193b      	adds	r3, r7, r4
 8003b2a:	1c02      	adds	r2, r0, #0
 8003b2c:	801a      	strh	r2, [r3, #0]
 8003b2e:	2009      	movs	r0, #9
 8003b30:	183b      	adds	r3, r7, r0
 8003b32:	1c0a      	adds	r2, r1, #0
 8003b34:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b36:	193b      	adds	r3, r7, r4
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	059b      	lsls	r3, r3, #22
 8003b3c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b3e:	183b      	adds	r3, r7, r0
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	0419      	lsls	r1, r3, #16
 8003b44:	23ff      	movs	r3, #255	@ 0xff
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b4a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b52:	4313      	orrs	r3, r2
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b62:	0d51      	lsrs	r1, r2, #21
 8003b64:	2280      	movs	r2, #128	@ 0x80
 8003b66:	00d2      	lsls	r2, r2, #3
 8003b68:	400a      	ands	r2, r1
 8003b6a:	4907      	ldr	r1, [pc, #28]	@ (8003b88 <I2C_TransferConfig+0x70>)
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	43d2      	mvns	r2, r2
 8003b70:	401a      	ands	r2, r3
 8003b72:	0011      	movs	r1, r2
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b7e:	46c0      	nop			@ (mov r8, r8)
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b007      	add	sp, #28
 8003b84:	bd90      	pop	{r4, r7, pc}
 8003b86:	46c0      	nop			@ (mov r8, r8)
 8003b88:	03ff63ff 	.word	0x03ff63ff

08003b8c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2241      	movs	r2, #65	@ 0x41
 8003b9a:	5c9b      	ldrb	r3, [r3, r2]
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d138      	bne.n	8003c14 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2240      	movs	r2, #64	@ 0x40
 8003ba6:	5c9b      	ldrb	r3, [r3, r2]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d101      	bne.n	8003bb0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bac:	2302      	movs	r3, #2
 8003bae:	e032      	b.n	8003c16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2240      	movs	r2, #64	@ 0x40
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2241      	movs	r2, #65	@ 0x41
 8003bbc:	2124      	movs	r1, #36	@ 0x24
 8003bbe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2101      	movs	r1, #1
 8003bcc:	438a      	bics	r2, r1
 8003bce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4911      	ldr	r1, [pc, #68]	@ (8003c20 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003bdc:	400a      	ands	r2, r1
 8003bde:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6819      	ldr	r1, [r3, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	430a      	orrs	r2, r1
 8003bee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2241      	movs	r2, #65	@ 0x41
 8003c04:	2120      	movs	r1, #32
 8003c06:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2240      	movs	r2, #64	@ 0x40
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c10:	2300      	movs	r3, #0
 8003c12:	e000      	b.n	8003c16 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c14:	2302      	movs	r3, #2
  }
}
 8003c16:	0018      	movs	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b002      	add	sp, #8
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	46c0      	nop			@ (mov r8, r8)
 8003c20:	ffffefff 	.word	0xffffefff

08003c24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2241      	movs	r2, #65	@ 0x41
 8003c32:	5c9b      	ldrb	r3, [r3, r2]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d139      	bne.n	8003cae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2240      	movs	r2, #64	@ 0x40
 8003c3e:	5c9b      	ldrb	r3, [r3, r2]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e033      	b.n	8003cb0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2240      	movs	r2, #64	@ 0x40
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2241      	movs	r2, #65	@ 0x41
 8003c54:	2124      	movs	r1, #36	@ 0x24
 8003c56:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2101      	movs	r1, #1
 8003c64:	438a      	bics	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a11      	ldr	r2, [pc, #68]	@ (8003cb8 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	021b      	lsls	r3, r3, #8
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2101      	movs	r1, #1
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2241      	movs	r2, #65	@ 0x41
 8003c9e:	2120      	movs	r1, #32
 8003ca0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2240      	movs	r2, #64	@ 0x40
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	e000      	b.n	8003cb0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cae:	2302      	movs	r3, #2
  }
}
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b004      	add	sp, #16
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	fffff0ff 	.word	0xfffff0ff

08003cbc <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	000a      	movs	r2, r1
 8003cc6:	1cfb      	adds	r3, r7, #3
 8003cc8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8003cce:	4b25      	ldr	r3, [pc, #148]	@ (8003d64 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	2380      	movs	r3, #128	@ 0x80
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8003cda:	4b23      	ldr	r3, [pc, #140]	@ (8003d68 <HAL_PWR_EnterSTOPMode+0xac>)
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d008      	beq.n	8003cfc <HAL_PWR_EnterSTOPMode+0x40>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8003cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8003d64 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d64 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003cf6:	491d      	ldr	r1, [pc, #116]	@ (8003d6c <HAL_PWR_EnterSTOPMode+0xb0>)
 8003cf8:	400a      	ands	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8003cfc:	4b19      	ldr	r3, [pc, #100]	@ (8003d64 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2203      	movs	r2, #3
 8003d06:	4393      	bics	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8003d12:	4b14      	ldr	r3, [pc, #80]	@ (8003d64 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003d18:	4b15      	ldr	r3, [pc, #84]	@ (8003d70 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	4b14      	ldr	r3, [pc, #80]	@ (8003d70 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003d1e:	2104      	movs	r1, #4
 8003d20:	430a      	orrs	r2, r1
 8003d22:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003d24:	1cfb      	adds	r3, r7, #3
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d101      	bne.n	8003d30 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003d2c:	bf30      	wfi
 8003d2e:	e002      	b.n	8003d36 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003d30:	bf40      	sev
    __WFE();
 8003d32:	bf20      	wfe
    __WFE();
 8003d34:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8003d36:	4b0e      	ldr	r3, [pc, #56]	@ (8003d70 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d70 <HAL_PWR_EnterSTOPMode+0xb4>)
 8003d3c:	2104      	movs	r1, #4
 8003d3e:	438a      	bics	r2, r1
 8003d40:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d009      	beq.n	8003d5c <HAL_PWR_EnterSTOPMode+0xa0>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d006      	beq.n	8003d5c <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8003d4e:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	4b04      	ldr	r3, [pc, #16]	@ (8003d64 <HAL_PWR_EnterSTOPMode+0xa8>)
 8003d54:	2180      	movs	r1, #128	@ 0x80
 8003d56:	0089      	lsls	r1, r1, #2
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	601a      	str	r2, [r3, #0]
  }
}
 8003d5c:	46c0      	nop			@ (mov r8, r8)
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	b006      	add	sp, #24
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40007000 	.word	0x40007000
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	fffffdff 	.word	0xfffffdff
 8003d70:	e000ed00 	.word	0xe000ed00

08003d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d74:	b5b0      	push	{r4, r5, r7, lr}
 8003d76:	b08a      	sub	sp, #40	@ 0x28
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d102      	bne.n	8003d88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f000 fbbf 	bl	8004506 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d88:	4bc9      	ldr	r3, [pc, #804]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	220c      	movs	r2, #12
 8003d8e:	4013      	ands	r3, r2
 8003d90:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d92:	4bc7      	ldr	r3, [pc, #796]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003d94:	68da      	ldr	r2, [r3, #12]
 8003d96:	2380      	movs	r3, #128	@ 0x80
 8003d98:	025b      	lsls	r3, r3, #9
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2201      	movs	r2, #1
 8003da4:	4013      	ands	r3, r2
 8003da6:	d100      	bne.n	8003daa <HAL_RCC_OscConfig+0x36>
 8003da8:	e07e      	b.n	8003ea8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d007      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	2b0c      	cmp	r3, #12
 8003db4:	d112      	bne.n	8003ddc <HAL_RCC_OscConfig+0x68>
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	2380      	movs	r3, #128	@ 0x80
 8003dba:	025b      	lsls	r3, r3, #9
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d10d      	bne.n	8003ddc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc0:	4bbb      	ldr	r3, [pc, #748]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	2380      	movs	r3, #128	@ 0x80
 8003dc6:	029b      	lsls	r3, r3, #10
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d100      	bne.n	8003dce <HAL_RCC_OscConfig+0x5a>
 8003dcc:	e06b      	b.n	8003ea6 <HAL_RCC_OscConfig+0x132>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d167      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f000 fb95 	bl	8004506 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	2380      	movs	r3, #128	@ 0x80
 8003de2:	025b      	lsls	r3, r3, #9
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d107      	bne.n	8003df8 <HAL_RCC_OscConfig+0x84>
 8003de8:	4bb1      	ldr	r3, [pc, #708]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	4bb0      	ldr	r3, [pc, #704]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003dee:	2180      	movs	r1, #128	@ 0x80
 8003df0:	0249      	lsls	r1, r1, #9
 8003df2:	430a      	orrs	r2, r1
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	e027      	b.n	8003e48 <HAL_RCC_OscConfig+0xd4>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	23a0      	movs	r3, #160	@ 0xa0
 8003dfe:	02db      	lsls	r3, r3, #11
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d10e      	bne.n	8003e22 <HAL_RCC_OscConfig+0xae>
 8003e04:	4baa      	ldr	r3, [pc, #680]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	4ba9      	ldr	r3, [pc, #676]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003e0a:	2180      	movs	r1, #128	@ 0x80
 8003e0c:	02c9      	lsls	r1, r1, #11
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	4ba7      	ldr	r3, [pc, #668]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4ba6      	ldr	r3, [pc, #664]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003e18:	2180      	movs	r1, #128	@ 0x80
 8003e1a:	0249      	lsls	r1, r1, #9
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e012      	b.n	8003e48 <HAL_RCC_OscConfig+0xd4>
 8003e22:	4ba3      	ldr	r3, [pc, #652]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4ba2      	ldr	r3, [pc, #648]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003e28:	49a2      	ldr	r1, [pc, #648]	@ (80040b4 <HAL_RCC_OscConfig+0x340>)
 8003e2a:	400a      	ands	r2, r1
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	4ba0      	ldr	r3, [pc, #640]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	025b      	lsls	r3, r3, #9
 8003e36:	4013      	ands	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4b9c      	ldr	r3, [pc, #624]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b9b      	ldr	r3, [pc, #620]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003e42:	499d      	ldr	r1, [pc, #628]	@ (80040b8 <HAL_RCC_OscConfig+0x344>)
 8003e44:	400a      	ands	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d015      	beq.n	8003e7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fd ff5c 	bl	8001d0c <HAL_GetTick>
 8003e54:	0003      	movs	r3, r0
 8003e56:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e58:	e009      	b.n	8003e6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5a:	f7fd ff57 	bl	8001d0c <HAL_GetTick>
 8003e5e:	0002      	movs	r2, r0
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b64      	cmp	r3, #100	@ 0x64
 8003e66:	d902      	bls.n	8003e6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	f000 fb4c 	bl	8004506 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e6e:	4b90      	ldr	r3, [pc, #576]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	2380      	movs	r3, #128	@ 0x80
 8003e74:	029b      	lsls	r3, r3, #10
 8003e76:	4013      	ands	r3, r2
 8003e78:	d0ef      	beq.n	8003e5a <HAL_RCC_OscConfig+0xe6>
 8003e7a:	e015      	b.n	8003ea8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e7c:	f7fd ff46 	bl	8001d0c <HAL_GetTick>
 8003e80:	0003      	movs	r3, r0
 8003e82:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e86:	f7fd ff41 	bl	8001d0c <HAL_GetTick>
 8003e8a:	0002      	movs	r2, r0
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b64      	cmp	r3, #100	@ 0x64
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e336      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e98:	4b85      	ldr	r3, [pc, #532]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	2380      	movs	r3, #128	@ 0x80
 8003e9e:	029b      	lsls	r3, r3, #10
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	d1f0      	bne.n	8003e86 <HAL_RCC_OscConfig+0x112>
 8003ea4:	e000      	b.n	8003ea8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2202      	movs	r2, #2
 8003eae:	4013      	ands	r3, r2
 8003eb0:	d100      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x140>
 8003eb2:	e099      	b.n	8003fe8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d009      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003ec2:	4b7b      	ldr	r3, [pc, #492]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4b7a      	ldr	r3, [pc, #488]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003ec8:	2120      	movs	r1, #32
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	4393      	bics	r3, r2
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d005      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	2b0c      	cmp	r3, #12
 8003ee0:	d13e      	bne.n	8003f60 <HAL_RCC_OscConfig+0x1ec>
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d13b      	bne.n	8003f60 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003ee8:	4b71      	ldr	r3, [pc, #452]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2204      	movs	r2, #4
 8003eee:	4013      	ands	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_RCC_OscConfig+0x188>
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e304      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003efc:	4b6c      	ldr	r3, [pc, #432]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4a6e      	ldr	r2, [pc, #440]	@ (80040bc <HAL_RCC_OscConfig+0x348>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	0019      	movs	r1, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	021a      	lsls	r2, r3, #8
 8003f0c:	4b68      	ldr	r3, [pc, #416]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f12:	4b67      	ldr	r3, [pc, #412]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2209      	movs	r2, #9
 8003f18:	4393      	bics	r3, r2
 8003f1a:	0019      	movs	r1, r3
 8003f1c:	4b64      	ldr	r3, [pc, #400]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f20:	430a      	orrs	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f24:	f000 fc42 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 8003f28:	0001      	movs	r1, r0
 8003f2a:	4b61      	ldr	r3, [pc, #388]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	220f      	movs	r2, #15
 8003f32:	4013      	ands	r3, r2
 8003f34:	4a62      	ldr	r2, [pc, #392]	@ (80040c0 <HAL_RCC_OscConfig+0x34c>)
 8003f36:	5cd3      	ldrb	r3, [r2, r3]
 8003f38:	000a      	movs	r2, r1
 8003f3a:	40da      	lsrs	r2, r3
 8003f3c:	4b61      	ldr	r3, [pc, #388]	@ (80040c4 <HAL_RCC_OscConfig+0x350>)
 8003f3e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003f40:	4b61      	ldr	r3, [pc, #388]	@ (80040c8 <HAL_RCC_OscConfig+0x354>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2513      	movs	r5, #19
 8003f46:	197c      	adds	r4, r7, r5
 8003f48:	0018      	movs	r0, r3
 8003f4a:	f7fd fe99 	bl	8001c80 <HAL_InitTick>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003f52:	197b      	adds	r3, r7, r5
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d046      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003f5a:	197b      	adds	r3, r7, r5
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	e2d2      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d027      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f66:	4b52      	ldr	r3, [pc, #328]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2209      	movs	r2, #9
 8003f6c:	4393      	bics	r3, r2
 8003f6e:	0019      	movs	r1, r3
 8003f70:	4b4f      	ldr	r3, [pc, #316]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f78:	f7fd fec8 	bl	8001d0c <HAL_GetTick>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f82:	f7fd fec3 	bl	8001d0c <HAL_GetTick>
 8003f86:	0002      	movs	r2, r0
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e2b8      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f94:	4b46      	ldr	r3, [pc, #280]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2204      	movs	r2, #4
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d0f1      	beq.n	8003f82 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9e:	4b44      	ldr	r3, [pc, #272]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4a46      	ldr	r2, [pc, #280]	@ (80040bc <HAL_RCC_OscConfig+0x348>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	021a      	lsls	r2, r3, #8
 8003fae:	4b40      	ldr	r3, [pc, #256]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	605a      	str	r2, [r3, #4]
 8003fb4:	e018      	b.n	8003fe8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b3d      	ldr	r3, [pc, #244]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	438a      	bics	r2, r1
 8003fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc2:	f7fd fea3 	bl	8001d0c <HAL_GetTick>
 8003fc6:	0003      	movs	r3, r0
 8003fc8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fcc:	f7fd fe9e 	bl	8001d0c <HAL_GetTick>
 8003fd0:	0002      	movs	r2, r0
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e293      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003fde:	4b34      	ldr	r3, [pc, #208]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2204      	movs	r2, #4
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d1f1      	bne.n	8003fcc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2210      	movs	r2, #16
 8003fee:	4013      	ands	r3, r2
 8003ff0:	d100      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x280>
 8003ff2:	e0a2      	b.n	800413a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d140      	bne.n	800407c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	2380      	movs	r3, #128	@ 0x80
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4013      	ands	r3, r2
 8004004:	d005      	beq.n	8004012 <HAL_RCC_OscConfig+0x29e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e279      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004012:	4b27      	ldr	r3, [pc, #156]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	4a2d      	ldr	r2, [pc, #180]	@ (80040cc <HAL_RCC_OscConfig+0x358>)
 8004018:	4013      	ands	r3, r2
 800401a:	0019      	movs	r1, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004020:	4b23      	ldr	r3, [pc, #140]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004026:	4b22      	ldr	r3, [pc, #136]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	021b      	lsls	r3, r3, #8
 800402c:	0a19      	lsrs	r1, r3, #8
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	061a      	lsls	r2, r3, #24
 8004034:	4b1e      	ldr	r3, [pc, #120]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8004036:	430a      	orrs	r2, r1
 8004038:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403e:	0b5b      	lsrs	r3, r3, #13
 8004040:	3301      	adds	r3, #1
 8004042:	2280      	movs	r2, #128	@ 0x80
 8004044:	0212      	lsls	r2, r2, #8
 8004046:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004048:	4b19      	ldr	r3, [pc, #100]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	091b      	lsrs	r3, r3, #4
 800404e:	210f      	movs	r1, #15
 8004050:	400b      	ands	r3, r1
 8004052:	491b      	ldr	r1, [pc, #108]	@ (80040c0 <HAL_RCC_OscConfig+0x34c>)
 8004054:	5ccb      	ldrb	r3, [r1, r3]
 8004056:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004058:	4b1a      	ldr	r3, [pc, #104]	@ (80040c4 <HAL_RCC_OscConfig+0x350>)
 800405a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800405c:	4b1a      	ldr	r3, [pc, #104]	@ (80040c8 <HAL_RCC_OscConfig+0x354>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2513      	movs	r5, #19
 8004062:	197c      	adds	r4, r7, r5
 8004064:	0018      	movs	r0, r3
 8004066:	f7fd fe0b 	bl	8001c80 <HAL_InitTick>
 800406a:	0003      	movs	r3, r0
 800406c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800406e:	197b      	adds	r3, r7, r5
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d061      	beq.n	800413a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004076:	197b      	adds	r3, r7, r5
 8004078:	781b      	ldrb	r3, [r3, #0]
 800407a:	e244      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d040      	beq.n	8004106 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004084:	4b0a      	ldr	r3, [pc, #40]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4b09      	ldr	r3, [pc, #36]	@ (80040b0 <HAL_RCC_OscConfig+0x33c>)
 800408a:	2180      	movs	r1, #128	@ 0x80
 800408c:	0049      	lsls	r1, r1, #1
 800408e:	430a      	orrs	r2, r1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004092:	f7fd fe3b 	bl	8001d0c <HAL_GetTick>
 8004096:	0003      	movs	r3, r0
 8004098:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800409a:	e019      	b.n	80040d0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800409c:	f7fd fe36 	bl	8001d0c <HAL_GetTick>
 80040a0:	0002      	movs	r2, r0
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d912      	bls.n	80040d0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e22b      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
 80040ae:	46c0      	nop			@ (mov r8, r8)
 80040b0:	40021000 	.word	0x40021000
 80040b4:	fffeffff 	.word	0xfffeffff
 80040b8:	fffbffff 	.word	0xfffbffff
 80040bc:	ffffe0ff 	.word	0xffffe0ff
 80040c0:	08006ea0 	.word	0x08006ea0
 80040c4:	20000000 	.word	0x20000000
 80040c8:	20000004 	.word	0x20000004
 80040cc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80040d0:	4bca      	ldr	r3, [pc, #808]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	2380      	movs	r3, #128	@ 0x80
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4013      	ands	r3, r2
 80040da:	d0df      	beq.n	800409c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040dc:	4bc7      	ldr	r3, [pc, #796]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4ac7      	ldr	r2, [pc, #796]	@ (8004400 <HAL_RCC_OscConfig+0x68c>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	0019      	movs	r1, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040ea:	4bc4      	ldr	r3, [pc, #784]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040f0:	4bc2      	ldr	r3, [pc, #776]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	0a19      	lsrs	r1, r3, #8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	061a      	lsls	r2, r3, #24
 80040fe:	4bbf      	ldr	r3, [pc, #764]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004100:	430a      	orrs	r2, r1
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	e019      	b.n	800413a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004106:	4bbd      	ldr	r3, [pc, #756]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	4bbc      	ldr	r3, [pc, #752]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 800410c:	49bd      	ldr	r1, [pc, #756]	@ (8004404 <HAL_RCC_OscConfig+0x690>)
 800410e:	400a      	ands	r2, r1
 8004110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004112:	f7fd fdfb 	bl	8001d0c <HAL_GetTick>
 8004116:	0003      	movs	r3, r0
 8004118:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800411c:	f7fd fdf6 	bl	8001d0c <HAL_GetTick>
 8004120:	0002      	movs	r2, r0
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e1eb      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800412e:	4bb3      	ldr	r3, [pc, #716]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	2380      	movs	r3, #128	@ 0x80
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4013      	ands	r3, r2
 8004138:	d1f0      	bne.n	800411c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2208      	movs	r2, #8
 8004140:	4013      	ands	r3, r2
 8004142:	d036      	beq.n	80041b2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d019      	beq.n	8004180 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800414c:	4bab      	ldr	r3, [pc, #684]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 800414e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004150:	4baa      	ldr	r3, [pc, #680]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004152:	2101      	movs	r1, #1
 8004154:	430a      	orrs	r2, r1
 8004156:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004158:	f7fd fdd8 	bl	8001d0c <HAL_GetTick>
 800415c:	0003      	movs	r3, r0
 800415e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004160:	e008      	b.n	8004174 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004162:	f7fd fdd3 	bl	8001d0c <HAL_GetTick>
 8004166:	0002      	movs	r2, r0
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d901      	bls.n	8004174 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e1c8      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004174:	4ba1      	ldr	r3, [pc, #644]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004178:	2202      	movs	r2, #2
 800417a:	4013      	ands	r3, r2
 800417c:	d0f1      	beq.n	8004162 <HAL_RCC_OscConfig+0x3ee>
 800417e:	e018      	b.n	80041b2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004180:	4b9e      	ldr	r3, [pc, #632]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004182:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004184:	4b9d      	ldr	r3, [pc, #628]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004186:	2101      	movs	r1, #1
 8004188:	438a      	bics	r2, r1
 800418a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418c:	f7fd fdbe 	bl	8001d0c <HAL_GetTick>
 8004190:	0003      	movs	r3, r0
 8004192:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004194:	e008      	b.n	80041a8 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004196:	f7fd fdb9 	bl	8001d0c <HAL_GetTick>
 800419a:	0002      	movs	r2, r0
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	2b02      	cmp	r3, #2
 80041a2:	d901      	bls.n	80041a8 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e1ae      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041a8:	4b94      	ldr	r3, [pc, #592]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 80041aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ac:	2202      	movs	r2, #2
 80041ae:	4013      	ands	r3, r2
 80041b0:	d1f1      	bne.n	8004196 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2204      	movs	r2, #4
 80041b8:	4013      	ands	r3, r2
 80041ba:	d100      	bne.n	80041be <HAL_RCC_OscConfig+0x44a>
 80041bc:	e0ae      	b.n	800431c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041be:	2023      	movs	r0, #35	@ 0x23
 80041c0:	183b      	adds	r3, r7, r0
 80041c2:	2200      	movs	r2, #0
 80041c4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041c6:	4b8d      	ldr	r3, [pc, #564]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 80041c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041ca:	2380      	movs	r3, #128	@ 0x80
 80041cc:	055b      	lsls	r3, r3, #21
 80041ce:	4013      	ands	r3, r2
 80041d0:	d109      	bne.n	80041e6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d2:	4b8a      	ldr	r3, [pc, #552]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 80041d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041d6:	4b89      	ldr	r3, [pc, #548]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 80041d8:	2180      	movs	r1, #128	@ 0x80
 80041da:	0549      	lsls	r1, r1, #21
 80041dc:	430a      	orrs	r2, r1
 80041de:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80041e0:	183b      	adds	r3, r7, r0
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e6:	4b88      	ldr	r3, [pc, #544]	@ (8004408 <HAL_RCC_OscConfig+0x694>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	2380      	movs	r3, #128	@ 0x80
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	4013      	ands	r3, r2
 80041f0:	d11a      	bne.n	8004228 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f2:	4b85      	ldr	r3, [pc, #532]	@ (8004408 <HAL_RCC_OscConfig+0x694>)
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b84      	ldr	r3, [pc, #528]	@ (8004408 <HAL_RCC_OscConfig+0x694>)
 80041f8:	2180      	movs	r1, #128	@ 0x80
 80041fa:	0049      	lsls	r1, r1, #1
 80041fc:	430a      	orrs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004200:	f7fd fd84 	bl	8001d0c <HAL_GetTick>
 8004204:	0003      	movs	r3, r0
 8004206:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420a:	f7fd fd7f 	bl	8001d0c <HAL_GetTick>
 800420e:	0002      	movs	r2, r0
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b64      	cmp	r3, #100	@ 0x64
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e174      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	4b7a      	ldr	r3, [pc, #488]	@ (8004408 <HAL_RCC_OscConfig+0x694>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	2380      	movs	r3, #128	@ 0x80
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	4013      	ands	r3, r2
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	2380      	movs	r3, #128	@ 0x80
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	429a      	cmp	r2, r3
 8004232:	d107      	bne.n	8004244 <HAL_RCC_OscConfig+0x4d0>
 8004234:	4b71      	ldr	r3, [pc, #452]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004236:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004238:	4b70      	ldr	r3, [pc, #448]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 800423a:	2180      	movs	r1, #128	@ 0x80
 800423c:	0049      	lsls	r1, r1, #1
 800423e:	430a      	orrs	r2, r1
 8004240:	651a      	str	r2, [r3, #80]	@ 0x50
 8004242:	e031      	b.n	80042a8 <HAL_RCC_OscConfig+0x534>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10c      	bne.n	8004266 <HAL_RCC_OscConfig+0x4f2>
 800424c:	4b6b      	ldr	r3, [pc, #428]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 800424e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004250:	4b6a      	ldr	r3, [pc, #424]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004252:	496c      	ldr	r1, [pc, #432]	@ (8004404 <HAL_RCC_OscConfig+0x690>)
 8004254:	400a      	ands	r2, r1
 8004256:	651a      	str	r2, [r3, #80]	@ 0x50
 8004258:	4b68      	ldr	r3, [pc, #416]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 800425a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800425c:	4b67      	ldr	r3, [pc, #412]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 800425e:	496b      	ldr	r1, [pc, #428]	@ (800440c <HAL_RCC_OscConfig+0x698>)
 8004260:	400a      	ands	r2, r1
 8004262:	651a      	str	r2, [r3, #80]	@ 0x50
 8004264:	e020      	b.n	80042a8 <HAL_RCC_OscConfig+0x534>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	23a0      	movs	r3, #160	@ 0xa0
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	429a      	cmp	r2, r3
 8004270:	d10e      	bne.n	8004290 <HAL_RCC_OscConfig+0x51c>
 8004272:	4b62      	ldr	r3, [pc, #392]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004274:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004276:	4b61      	ldr	r3, [pc, #388]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004278:	2180      	movs	r1, #128	@ 0x80
 800427a:	00c9      	lsls	r1, r1, #3
 800427c:	430a      	orrs	r2, r1
 800427e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004280:	4b5e      	ldr	r3, [pc, #376]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004282:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004284:	4b5d      	ldr	r3, [pc, #372]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004286:	2180      	movs	r1, #128	@ 0x80
 8004288:	0049      	lsls	r1, r1, #1
 800428a:	430a      	orrs	r2, r1
 800428c:	651a      	str	r2, [r3, #80]	@ 0x50
 800428e:	e00b      	b.n	80042a8 <HAL_RCC_OscConfig+0x534>
 8004290:	4b5a      	ldr	r3, [pc, #360]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004292:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004294:	4b59      	ldr	r3, [pc, #356]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004296:	495b      	ldr	r1, [pc, #364]	@ (8004404 <HAL_RCC_OscConfig+0x690>)
 8004298:	400a      	ands	r2, r1
 800429a:	651a      	str	r2, [r3, #80]	@ 0x50
 800429c:	4b57      	ldr	r3, [pc, #348]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 800429e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042a0:	4b56      	ldr	r3, [pc, #344]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 80042a2:	495a      	ldr	r1, [pc, #360]	@ (800440c <HAL_RCC_OscConfig+0x698>)
 80042a4:	400a      	ands	r2, r1
 80042a6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d015      	beq.n	80042dc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042b0:	f7fd fd2c 	bl	8001d0c <HAL_GetTick>
 80042b4:	0003      	movs	r3, r0
 80042b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042b8:	e009      	b.n	80042ce <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ba:	f7fd fd27 	bl	8001d0c <HAL_GetTick>
 80042be:	0002      	movs	r2, r0
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	4a52      	ldr	r2, [pc, #328]	@ (8004410 <HAL_RCC_OscConfig+0x69c>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e11b      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80042ce:	4b4b      	ldr	r3, [pc, #300]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 80042d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042d2:	2380      	movs	r3, #128	@ 0x80
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4013      	ands	r3, r2
 80042d8:	d0ef      	beq.n	80042ba <HAL_RCC_OscConfig+0x546>
 80042da:	e014      	b.n	8004306 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042dc:	f7fd fd16 	bl	8001d0c <HAL_GetTick>
 80042e0:	0003      	movs	r3, r0
 80042e2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042e4:	e009      	b.n	80042fa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e6:	f7fd fd11 	bl	8001d0c <HAL_GetTick>
 80042ea:	0002      	movs	r2, r0
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	4a47      	ldr	r2, [pc, #284]	@ (8004410 <HAL_RCC_OscConfig+0x69c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e105      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042fa:	4b40      	ldr	r3, [pc, #256]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 80042fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042fe:	2380      	movs	r3, #128	@ 0x80
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4013      	ands	r3, r2
 8004304:	d1ef      	bne.n	80042e6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004306:	2323      	movs	r3, #35	@ 0x23
 8004308:	18fb      	adds	r3, r7, r3
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d105      	bne.n	800431c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004310:	4b3a      	ldr	r3, [pc, #232]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004312:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004314:	4b39      	ldr	r3, [pc, #228]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004316:	493f      	ldr	r1, [pc, #252]	@ (8004414 <HAL_RCC_OscConfig+0x6a0>)
 8004318:	400a      	ands	r2, r1
 800431a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	2220      	movs	r2, #32
 8004322:	4013      	ands	r3, r2
 8004324:	d049      	beq.n	80043ba <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d026      	beq.n	800437c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800432e:	4b33      	ldr	r3, [pc, #204]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	4b32      	ldr	r3, [pc, #200]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004334:	2101      	movs	r1, #1
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
 800433a:	4b30      	ldr	r3, [pc, #192]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 800433c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800433e:	4b2f      	ldr	r3, [pc, #188]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004340:	2101      	movs	r1, #1
 8004342:	430a      	orrs	r2, r1
 8004344:	635a      	str	r2, [r3, #52]	@ 0x34
 8004346:	4b34      	ldr	r3, [pc, #208]	@ (8004418 <HAL_RCC_OscConfig+0x6a4>)
 8004348:	6a1a      	ldr	r2, [r3, #32]
 800434a:	4b33      	ldr	r3, [pc, #204]	@ (8004418 <HAL_RCC_OscConfig+0x6a4>)
 800434c:	2180      	movs	r1, #128	@ 0x80
 800434e:	0189      	lsls	r1, r1, #6
 8004350:	430a      	orrs	r2, r1
 8004352:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004354:	f7fd fcda 	bl	8001d0c <HAL_GetTick>
 8004358:	0003      	movs	r3, r0
 800435a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800435e:	f7fd fcd5 	bl	8001d0c <HAL_GetTick>
 8004362:	0002      	movs	r2, r0
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e0ca      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004370:	4b22      	ldr	r3, [pc, #136]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	2202      	movs	r2, #2
 8004376:	4013      	ands	r3, r2
 8004378:	d0f1      	beq.n	800435e <HAL_RCC_OscConfig+0x5ea>
 800437a:	e01e      	b.n	80043ba <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800437c:	4b1f      	ldr	r3, [pc, #124]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	4b1e      	ldr	r3, [pc, #120]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 8004382:	2101      	movs	r1, #1
 8004384:	438a      	bics	r2, r1
 8004386:	609a      	str	r2, [r3, #8]
 8004388:	4b23      	ldr	r3, [pc, #140]	@ (8004418 <HAL_RCC_OscConfig+0x6a4>)
 800438a:	6a1a      	ldr	r2, [r3, #32]
 800438c:	4b22      	ldr	r3, [pc, #136]	@ (8004418 <HAL_RCC_OscConfig+0x6a4>)
 800438e:	4923      	ldr	r1, [pc, #140]	@ (800441c <HAL_RCC_OscConfig+0x6a8>)
 8004390:	400a      	ands	r2, r1
 8004392:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004394:	f7fd fcba 	bl	8001d0c <HAL_GetTick>
 8004398:	0003      	movs	r3, r0
 800439a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800439c:	e008      	b.n	80043b0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800439e:	f7fd fcb5 	bl	8001d0c <HAL_GetTick>
 80043a2:	0002      	movs	r2, r0
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e0aa      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043b0:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2202      	movs	r2, #2
 80043b6:	4013      	ands	r3, r2
 80043b8:	d1f1      	bne.n	800439e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d100      	bne.n	80043c4 <HAL_RCC_OscConfig+0x650>
 80043c2:	e09f      	b.n	8004504 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	2b0c      	cmp	r3, #12
 80043c8:	d100      	bne.n	80043cc <HAL_RCC_OscConfig+0x658>
 80043ca:	e078      	b.n	80044be <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d159      	bne.n	8004488 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d4:	4b09      	ldr	r3, [pc, #36]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	4b08      	ldr	r3, [pc, #32]	@ (80043fc <HAL_RCC_OscConfig+0x688>)
 80043da:	4911      	ldr	r1, [pc, #68]	@ (8004420 <HAL_RCC_OscConfig+0x6ac>)
 80043dc:	400a      	ands	r2, r1
 80043de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e0:	f7fd fc94 	bl	8001d0c <HAL_GetTick>
 80043e4:	0003      	movs	r3, r0
 80043e6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043e8:	e01c      	b.n	8004424 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ea:	f7fd fc8f 	bl	8001d0c <HAL_GetTick>
 80043ee:	0002      	movs	r2, r0
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	1ad3      	subs	r3, r2, r3
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d915      	bls.n	8004424 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e084      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
 80043fc:	40021000 	.word	0x40021000
 8004400:	ffff1fff 	.word	0xffff1fff
 8004404:	fffffeff 	.word	0xfffffeff
 8004408:	40007000 	.word	0x40007000
 800440c:	fffffbff 	.word	0xfffffbff
 8004410:	00001388 	.word	0x00001388
 8004414:	efffffff 	.word	0xefffffff
 8004418:	40010000 	.word	0x40010000
 800441c:	ffffdfff 	.word	0xffffdfff
 8004420:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004424:	4b3a      	ldr	r3, [pc, #232]	@ (8004510 <HAL_RCC_OscConfig+0x79c>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	2380      	movs	r3, #128	@ 0x80
 800442a:	049b      	lsls	r3, r3, #18
 800442c:	4013      	ands	r3, r2
 800442e:	d1dc      	bne.n	80043ea <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004430:	4b37      	ldr	r3, [pc, #220]	@ (8004510 <HAL_RCC_OscConfig+0x79c>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a37      	ldr	r2, [pc, #220]	@ (8004514 <HAL_RCC_OscConfig+0x7a0>)
 8004436:	4013      	ands	r3, r2
 8004438:	0019      	movs	r1, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004448:	431a      	orrs	r2, r3
 800444a:	4b31      	ldr	r3, [pc, #196]	@ (8004510 <HAL_RCC_OscConfig+0x79c>)
 800444c:	430a      	orrs	r2, r1
 800444e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004450:	4b2f      	ldr	r3, [pc, #188]	@ (8004510 <HAL_RCC_OscConfig+0x79c>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4b2e      	ldr	r3, [pc, #184]	@ (8004510 <HAL_RCC_OscConfig+0x79c>)
 8004456:	2180      	movs	r1, #128	@ 0x80
 8004458:	0449      	lsls	r1, r1, #17
 800445a:	430a      	orrs	r2, r1
 800445c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445e:	f7fd fc55 	bl	8001d0c <HAL_GetTick>
 8004462:	0003      	movs	r3, r0
 8004464:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004468:	f7fd fc50 	bl	8001d0c <HAL_GetTick>
 800446c:	0002      	movs	r2, r0
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e045      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800447a:	4b25      	ldr	r3, [pc, #148]	@ (8004510 <HAL_RCC_OscConfig+0x79c>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	2380      	movs	r3, #128	@ 0x80
 8004480:	049b      	lsls	r3, r3, #18
 8004482:	4013      	ands	r3, r2
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x6f4>
 8004486:	e03d      	b.n	8004504 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004488:	4b21      	ldr	r3, [pc, #132]	@ (8004510 <HAL_RCC_OscConfig+0x79c>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b20      	ldr	r3, [pc, #128]	@ (8004510 <HAL_RCC_OscConfig+0x79c>)
 800448e:	4922      	ldr	r1, [pc, #136]	@ (8004518 <HAL_RCC_OscConfig+0x7a4>)
 8004490:	400a      	ands	r2, r1
 8004492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004494:	f7fd fc3a 	bl	8001d0c <HAL_GetTick>
 8004498:	0003      	movs	r3, r0
 800449a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800449c:	e008      	b.n	80044b0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800449e:	f7fd fc35 	bl	8001d0c <HAL_GetTick>
 80044a2:	0002      	movs	r2, r0
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e02a      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80044b0:	4b17      	ldr	r3, [pc, #92]	@ (8004510 <HAL_RCC_OscConfig+0x79c>)
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2380      	movs	r3, #128	@ 0x80
 80044b6:	049b      	lsls	r3, r3, #18
 80044b8:	4013      	ands	r3, r2
 80044ba:	d1f0      	bne.n	800449e <HAL_RCC_OscConfig+0x72a>
 80044bc:	e022      	b.n	8004504 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d101      	bne.n	80044ca <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e01d      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80044ca:	4b11      	ldr	r3, [pc, #68]	@ (8004510 <HAL_RCC_OscConfig+0x79c>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	2380      	movs	r3, #128	@ 0x80
 80044d4:	025b      	lsls	r3, r3, #9
 80044d6:	401a      	ands	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044dc:	429a      	cmp	r2, r3
 80044de:	d10f      	bne.n	8004500 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	23f0      	movs	r3, #240	@ 0xf0
 80044e4:	039b      	lsls	r3, r3, #14
 80044e6:	401a      	ands	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d107      	bne.n	8004500 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	23c0      	movs	r3, #192	@ 0xc0
 80044f4:	041b      	lsls	r3, r3, #16
 80044f6:	401a      	ands	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d001      	beq.n	8004504 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	0018      	movs	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	b00a      	add	sp, #40	@ 0x28
 800450c:	bdb0      	pop	{r4, r5, r7, pc}
 800450e:	46c0      	nop			@ (mov r8, r8)
 8004510:	40021000 	.word	0x40021000
 8004514:	ff02ffff 	.word	0xff02ffff
 8004518:	feffffff 	.word	0xfeffffff

0800451c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800451c:	b5b0      	push	{r4, r5, r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e128      	b.n	8004782 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004530:	4b96      	ldr	r3, [pc, #600]	@ (800478c <HAL_RCC_ClockConfig+0x270>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2201      	movs	r2, #1
 8004536:	4013      	ands	r3, r2
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d91e      	bls.n	800457c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b93      	ldr	r3, [pc, #588]	@ (800478c <HAL_RCC_ClockConfig+0x270>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2201      	movs	r2, #1
 8004544:	4393      	bics	r3, r2
 8004546:	0019      	movs	r1, r3
 8004548:	4b90      	ldr	r3, [pc, #576]	@ (800478c <HAL_RCC_ClockConfig+0x270>)
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004550:	f7fd fbdc 	bl	8001d0c <HAL_GetTick>
 8004554:	0003      	movs	r3, r0
 8004556:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004558:	e009      	b.n	800456e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800455a:	f7fd fbd7 	bl	8001d0c <HAL_GetTick>
 800455e:	0002      	movs	r2, r0
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	4a8a      	ldr	r2, [pc, #552]	@ (8004790 <HAL_RCC_ClockConfig+0x274>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d901      	bls.n	800456e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e109      	b.n	8004782 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456e:	4b87      	ldr	r3, [pc, #540]	@ (800478c <HAL_RCC_ClockConfig+0x270>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2201      	movs	r2, #1
 8004574:	4013      	ands	r3, r2
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d1ee      	bne.n	800455a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2202      	movs	r2, #2
 8004582:	4013      	ands	r3, r2
 8004584:	d009      	beq.n	800459a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004586:	4b83      	ldr	r3, [pc, #524]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	22f0      	movs	r2, #240	@ 0xf0
 800458c:	4393      	bics	r3, r2
 800458e:	0019      	movs	r1, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	4b7f      	ldr	r3, [pc, #508]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 8004596:	430a      	orrs	r2, r1
 8004598:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2201      	movs	r2, #1
 80045a0:	4013      	ands	r3, r2
 80045a2:	d100      	bne.n	80045a6 <HAL_RCC_ClockConfig+0x8a>
 80045a4:	e089      	b.n	80046ba <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045ae:	4b79      	ldr	r3, [pc, #484]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	2380      	movs	r3, #128	@ 0x80
 80045b4:	029b      	lsls	r3, r3, #10
 80045b6:	4013      	ands	r3, r2
 80045b8:	d120      	bne.n	80045fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e0e1      	b.n	8004782 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045c6:	4b73      	ldr	r3, [pc, #460]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	049b      	lsls	r3, r3, #18
 80045ce:	4013      	ands	r3, r2
 80045d0:	d114      	bne.n	80045fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e0d5      	b.n	8004782 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d106      	bne.n	80045ec <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045de:	4b6d      	ldr	r3, [pc, #436]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2204      	movs	r2, #4
 80045e4:	4013      	ands	r3, r2
 80045e6:	d109      	bne.n	80045fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e0ca      	b.n	8004782 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80045ec:	4b69      	ldr	r3, [pc, #420]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	2380      	movs	r3, #128	@ 0x80
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4013      	ands	r3, r2
 80045f6:	d101      	bne.n	80045fc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0c2      	b.n	8004782 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fc:	4b65      	ldr	r3, [pc, #404]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	2203      	movs	r2, #3
 8004602:	4393      	bics	r3, r2
 8004604:	0019      	movs	r1, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685a      	ldr	r2, [r3, #4]
 800460a:	4b62      	ldr	r3, [pc, #392]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 800460c:	430a      	orrs	r2, r1
 800460e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004610:	f7fd fb7c 	bl	8001d0c <HAL_GetTick>
 8004614:	0003      	movs	r3, r0
 8004616:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	2b02      	cmp	r3, #2
 800461e:	d111      	bne.n	8004644 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004620:	e009      	b.n	8004636 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004622:	f7fd fb73 	bl	8001d0c <HAL_GetTick>
 8004626:	0002      	movs	r2, r0
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	4a58      	ldr	r2, [pc, #352]	@ (8004790 <HAL_RCC_ClockConfig+0x274>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0a5      	b.n	8004782 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004636:	4b57      	ldr	r3, [pc, #348]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	220c      	movs	r2, #12
 800463c:	4013      	ands	r3, r2
 800463e:	2b08      	cmp	r3, #8
 8004640:	d1ef      	bne.n	8004622 <HAL_RCC_ClockConfig+0x106>
 8004642:	e03a      	b.n	80046ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d111      	bne.n	8004670 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800464c:	e009      	b.n	8004662 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464e:	f7fd fb5d 	bl	8001d0c <HAL_GetTick>
 8004652:	0002      	movs	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	4a4d      	ldr	r2, [pc, #308]	@ (8004790 <HAL_RCC_ClockConfig+0x274>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d901      	bls.n	8004662 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e08f      	b.n	8004782 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004662:	4b4c      	ldr	r3, [pc, #304]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	220c      	movs	r2, #12
 8004668:	4013      	ands	r3, r2
 800466a:	2b0c      	cmp	r3, #12
 800466c:	d1ef      	bne.n	800464e <HAL_RCC_ClockConfig+0x132>
 800466e:	e024      	b.n	80046ba <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d11b      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004678:	e009      	b.n	800468e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800467a:	f7fd fb47 	bl	8001d0c <HAL_GetTick>
 800467e:	0002      	movs	r2, r0
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	4a42      	ldr	r2, [pc, #264]	@ (8004790 <HAL_RCC_ClockConfig+0x274>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d901      	bls.n	800468e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e079      	b.n	8004782 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800468e:	4b41      	ldr	r3, [pc, #260]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	220c      	movs	r2, #12
 8004694:	4013      	ands	r3, r2
 8004696:	2b04      	cmp	r3, #4
 8004698:	d1ef      	bne.n	800467a <HAL_RCC_ClockConfig+0x15e>
 800469a:	e00e      	b.n	80046ba <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800469c:	f7fd fb36 	bl	8001d0c <HAL_GetTick>
 80046a0:	0002      	movs	r2, r0
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	4a3a      	ldr	r2, [pc, #232]	@ (8004790 <HAL_RCC_ClockConfig+0x274>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e068      	b.n	8004782 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80046b0:	4b38      	ldr	r3, [pc, #224]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	220c      	movs	r2, #12
 80046b6:	4013      	ands	r3, r2
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046ba:	4b34      	ldr	r3, [pc, #208]	@ (800478c <HAL_RCC_ClockConfig+0x270>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2201      	movs	r2, #1
 80046c0:	4013      	ands	r3, r2
 80046c2:	683a      	ldr	r2, [r7, #0]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d21e      	bcs.n	8004706 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c8:	4b30      	ldr	r3, [pc, #192]	@ (800478c <HAL_RCC_ClockConfig+0x270>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2201      	movs	r2, #1
 80046ce:	4393      	bics	r3, r2
 80046d0:	0019      	movs	r1, r3
 80046d2:	4b2e      	ldr	r3, [pc, #184]	@ (800478c <HAL_RCC_ClockConfig+0x270>)
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80046da:	f7fd fb17 	bl	8001d0c <HAL_GetTick>
 80046de:	0003      	movs	r3, r0
 80046e0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e2:	e009      	b.n	80046f8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e4:	f7fd fb12 	bl	8001d0c <HAL_GetTick>
 80046e8:	0002      	movs	r2, r0
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	4a28      	ldr	r2, [pc, #160]	@ (8004790 <HAL_RCC_ClockConfig+0x274>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e044      	b.n	8004782 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f8:	4b24      	ldr	r3, [pc, #144]	@ (800478c <HAL_RCC_ClockConfig+0x270>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2201      	movs	r2, #1
 80046fe:	4013      	ands	r3, r2
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	429a      	cmp	r2, r3
 8004704:	d1ee      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2204      	movs	r2, #4
 800470c:	4013      	ands	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004710:	4b20      	ldr	r3, [pc, #128]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	4a20      	ldr	r2, [pc, #128]	@ (8004798 <HAL_RCC_ClockConfig+0x27c>)
 8004716:	4013      	ands	r3, r2
 8004718:	0019      	movs	r1, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	4b1d      	ldr	r3, [pc, #116]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 8004720:	430a      	orrs	r2, r1
 8004722:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2208      	movs	r2, #8
 800472a:	4013      	ands	r3, r2
 800472c:	d00a      	beq.n	8004744 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800472e:	4b19      	ldr	r3, [pc, #100]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	4a1a      	ldr	r2, [pc, #104]	@ (800479c <HAL_RCC_ClockConfig+0x280>)
 8004734:	4013      	ands	r3, r2
 8004736:	0019      	movs	r1, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	00da      	lsls	r2, r3, #3
 800473e:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 8004740:	430a      	orrs	r2, r1
 8004742:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004744:	f000 f832 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 8004748:	0001      	movs	r1, r0
 800474a:	4b12      	ldr	r3, [pc, #72]	@ (8004794 <HAL_RCC_ClockConfig+0x278>)
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	091b      	lsrs	r3, r3, #4
 8004750:	220f      	movs	r2, #15
 8004752:	4013      	ands	r3, r2
 8004754:	4a12      	ldr	r2, [pc, #72]	@ (80047a0 <HAL_RCC_ClockConfig+0x284>)
 8004756:	5cd3      	ldrb	r3, [r2, r3]
 8004758:	000a      	movs	r2, r1
 800475a:	40da      	lsrs	r2, r3
 800475c:	4b11      	ldr	r3, [pc, #68]	@ (80047a4 <HAL_RCC_ClockConfig+0x288>)
 800475e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004760:	4b11      	ldr	r3, [pc, #68]	@ (80047a8 <HAL_RCC_ClockConfig+0x28c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	250b      	movs	r5, #11
 8004766:	197c      	adds	r4, r7, r5
 8004768:	0018      	movs	r0, r3
 800476a:	f7fd fa89 	bl	8001c80 <HAL_InitTick>
 800476e:	0003      	movs	r3, r0
 8004770:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004772:	197b      	adds	r3, r7, r5
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800477a:	197b      	adds	r3, r7, r5
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	e000      	b.n	8004782 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	0018      	movs	r0, r3
 8004784:	46bd      	mov	sp, r7
 8004786:	b004      	add	sp, #16
 8004788:	bdb0      	pop	{r4, r5, r7, pc}
 800478a:	46c0      	nop			@ (mov r8, r8)
 800478c:	40022000 	.word	0x40022000
 8004790:	00001388 	.word	0x00001388
 8004794:	40021000 	.word	0x40021000
 8004798:	fffff8ff 	.word	0xfffff8ff
 800479c:	ffffc7ff 	.word	0xffffc7ff
 80047a0:	08006ea0 	.word	0x08006ea0
 80047a4:	20000000 	.word	0x20000000
 80047a8:	20000004 	.word	0x20000004

080047ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80047b2:	4b3c      	ldr	r3, [pc, #240]	@ (80048a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	220c      	movs	r2, #12
 80047bc:	4013      	ands	r3, r2
 80047be:	2b0c      	cmp	r3, #12
 80047c0:	d013      	beq.n	80047ea <HAL_RCC_GetSysClockFreq+0x3e>
 80047c2:	d85c      	bhi.n	800487e <HAL_RCC_GetSysClockFreq+0xd2>
 80047c4:	2b04      	cmp	r3, #4
 80047c6:	d002      	beq.n	80047ce <HAL_RCC_GetSysClockFreq+0x22>
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d00b      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0x38>
 80047cc:	e057      	b.n	800487e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80047ce:	4b35      	ldr	r3, [pc, #212]	@ (80048a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2210      	movs	r2, #16
 80047d4:	4013      	ands	r3, r2
 80047d6:	d002      	beq.n	80047de <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80047d8:	4b33      	ldr	r3, [pc, #204]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80047da:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80047dc:	e05d      	b.n	800489a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 80047de:	4b33      	ldr	r3, [pc, #204]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x100>)
 80047e0:	613b      	str	r3, [r7, #16]
      break;
 80047e2:	e05a      	b.n	800489a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047e4:	4b32      	ldr	r3, [pc, #200]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x104>)
 80047e6:	613b      	str	r3, [r7, #16]
      break;
 80047e8:	e057      	b.n	800489a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	0c9b      	lsrs	r3, r3, #18
 80047ee:	220f      	movs	r2, #15
 80047f0:	4013      	ands	r3, r2
 80047f2:	4a30      	ldr	r2, [pc, #192]	@ (80048b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f4:	5cd3      	ldrb	r3, [r2, r3]
 80047f6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	0d9b      	lsrs	r3, r3, #22
 80047fc:	2203      	movs	r2, #3
 80047fe:	4013      	ands	r3, r2
 8004800:	3301      	adds	r3, #1
 8004802:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004804:	4b27      	ldr	r3, [pc, #156]	@ (80048a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	2380      	movs	r3, #128	@ 0x80
 800480a:	025b      	lsls	r3, r3, #9
 800480c:	4013      	ands	r3, r2
 800480e:	d00f      	beq.n	8004830 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	000a      	movs	r2, r1
 8004814:	0152      	lsls	r2, r2, #5
 8004816:	1a52      	subs	r2, r2, r1
 8004818:	0193      	lsls	r3, r2, #6
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	185b      	adds	r3, r3, r1
 8004820:	025b      	lsls	r3, r3, #9
 8004822:	6879      	ldr	r1, [r7, #4]
 8004824:	0018      	movs	r0, r3
 8004826:	f7fb fc81 	bl	800012c <__udivsi3>
 800482a:	0003      	movs	r3, r0
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	e023      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004830:	4b1c      	ldr	r3, [pc, #112]	@ (80048a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2210      	movs	r2, #16
 8004836:	4013      	ands	r3, r2
 8004838:	d00f      	beq.n	800485a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	000a      	movs	r2, r1
 800483e:	0152      	lsls	r2, r2, #5
 8004840:	1a52      	subs	r2, r2, r1
 8004842:	0193      	lsls	r3, r2, #6
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	185b      	adds	r3, r3, r1
 800484a:	021b      	lsls	r3, r3, #8
 800484c:	6879      	ldr	r1, [r7, #4]
 800484e:	0018      	movs	r0, r3
 8004850:	f7fb fc6c 	bl	800012c <__udivsi3>
 8004854:	0003      	movs	r3, r0
 8004856:	617b      	str	r3, [r7, #20]
 8004858:	e00e      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	000a      	movs	r2, r1
 800485e:	0152      	lsls	r2, r2, #5
 8004860:	1a52      	subs	r2, r2, r1
 8004862:	0193      	lsls	r3, r2, #6
 8004864:	1a9b      	subs	r3, r3, r2
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	185b      	adds	r3, r3, r1
 800486a:	029b      	lsls	r3, r3, #10
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	0018      	movs	r0, r3
 8004870:	f7fb fc5c 	bl	800012c <__udivsi3>
 8004874:	0003      	movs	r3, r0
 8004876:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	613b      	str	r3, [r7, #16]
      break;
 800487c:	e00d      	b.n	800489a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800487e:	4b09      	ldr	r3, [pc, #36]	@ (80048a4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	0b5b      	lsrs	r3, r3, #13
 8004884:	2207      	movs	r2, #7
 8004886:	4013      	ands	r3, r2
 8004888:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	3301      	adds	r3, #1
 800488e:	2280      	movs	r2, #128	@ 0x80
 8004890:	0212      	lsls	r2, r2, #8
 8004892:	409a      	lsls	r2, r3
 8004894:	0013      	movs	r3, r2
 8004896:	613b      	str	r3, [r7, #16]
      break;
 8004898:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800489a:	693b      	ldr	r3, [r7, #16]
}
 800489c:	0018      	movs	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	b006      	add	sp, #24
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40021000 	.word	0x40021000
 80048a8:	003d0900 	.word	0x003d0900
 80048ac:	00f42400 	.word	0x00f42400
 80048b0:	007a1200 	.word	0x007a1200
 80048b4:	08006eb8 	.word	0x08006eb8

080048b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048bc:	4b02      	ldr	r3, [pc, #8]	@ (80048c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80048be:	681b      	ldr	r3, [r3, #0]
}
 80048c0:	0018      	movs	r0, r3
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	46c0      	nop			@ (mov r8, r8)
 80048c8:	20000000 	.word	0x20000000

080048cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048d0:	f7ff fff2 	bl	80048b8 <HAL_RCC_GetHCLKFreq>
 80048d4:	0001      	movs	r1, r0
 80048d6:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	2207      	movs	r2, #7
 80048de:	4013      	ands	r3, r2
 80048e0:	4a04      	ldr	r2, [pc, #16]	@ (80048f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048e2:	5cd3      	ldrb	r3, [r2, r3]
 80048e4:	40d9      	lsrs	r1, r3
 80048e6:	000b      	movs	r3, r1
}
 80048e8:	0018      	movs	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	46c0      	nop			@ (mov r8, r8)
 80048f0:	40021000 	.word	0x40021000
 80048f4:	08006eb0 	.word	0x08006eb0

080048f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048fc:	f7ff ffdc 	bl	80048b8 <HAL_RCC_GetHCLKFreq>
 8004900:	0001      	movs	r1, r0
 8004902:	4b06      	ldr	r3, [pc, #24]	@ (800491c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	0adb      	lsrs	r3, r3, #11
 8004908:	2207      	movs	r2, #7
 800490a:	4013      	ands	r3, r2
 800490c:	4a04      	ldr	r2, [pc, #16]	@ (8004920 <HAL_RCC_GetPCLK2Freq+0x28>)
 800490e:	5cd3      	ldrb	r3, [r2, r3]
 8004910:	40d9      	lsrs	r1, r3
 8004912:	000b      	movs	r3, r1
}
 8004914:	0018      	movs	r0, r3
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	46c0      	nop			@ (mov r8, r8)
 800491c:	40021000 	.word	0x40021000
 8004920:	08006eb0 	.word	0x08006eb0

08004924 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800492c:	2317      	movs	r3, #23
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2220      	movs	r2, #32
 800493a:	4013      	ands	r3, r2
 800493c:	d106      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	2380      	movs	r3, #128	@ 0x80
 8004944:	011b      	lsls	r3, r3, #4
 8004946:	4013      	ands	r3, r2
 8004948:	d100      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800494a:	e104      	b.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800494c:	4bb9      	ldr	r3, [pc, #740]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800494e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004950:	2380      	movs	r3, #128	@ 0x80
 8004952:	055b      	lsls	r3, r3, #21
 8004954:	4013      	ands	r3, r2
 8004956:	d10a      	bne.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004958:	4bb6      	ldr	r3, [pc, #728]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800495a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800495c:	4bb5      	ldr	r3, [pc, #724]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800495e:	2180      	movs	r1, #128	@ 0x80
 8004960:	0549      	lsls	r1, r1, #21
 8004962:	430a      	orrs	r2, r1
 8004964:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004966:	2317      	movs	r3, #23
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496e:	4bb2      	ldr	r3, [pc, #712]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	2380      	movs	r3, #128	@ 0x80
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	4013      	ands	r3, r2
 8004978:	d11a      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800497a:	4baf      	ldr	r3, [pc, #700]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800497c:	681a      	ldr	r2, [r3, #0]
 800497e:	4bae      	ldr	r3, [pc, #696]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004980:	2180      	movs	r1, #128	@ 0x80
 8004982:	0049      	lsls	r1, r1, #1
 8004984:	430a      	orrs	r2, r1
 8004986:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004988:	f7fd f9c0 	bl	8001d0c <HAL_GetTick>
 800498c:	0003      	movs	r3, r0
 800498e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004990:	e008      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004992:	f7fd f9bb 	bl	8001d0c <HAL_GetTick>
 8004996:	0002      	movs	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b64      	cmp	r3, #100	@ 0x64
 800499e:	d901      	bls.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e143      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049a4:	4ba4      	ldr	r3, [pc, #656]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	2380      	movs	r3, #128	@ 0x80
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	4013      	ands	r3, r2
 80049ae:	d0f0      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80049b0:	4ba0      	ldr	r3, [pc, #640]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	23c0      	movs	r3, #192	@ 0xc0
 80049b6:	039b      	lsls	r3, r3, #14
 80049b8:	4013      	ands	r3, r2
 80049ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	23c0      	movs	r3, #192	@ 0xc0
 80049c2:	039b      	lsls	r3, r3, #14
 80049c4:	4013      	ands	r3, r2
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d107      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689a      	ldr	r2, [r3, #8]
 80049d0:	23c0      	movs	r3, #192	@ 0xc0
 80049d2:	039b      	lsls	r3, r3, #14
 80049d4:	4013      	ands	r3, r2
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d013      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	23c0      	movs	r3, #192	@ 0xc0
 80049e2:	029b      	lsls	r3, r3, #10
 80049e4:	401a      	ands	r2, r3
 80049e6:	23c0      	movs	r3, #192	@ 0xc0
 80049e8:	029b      	lsls	r3, r3, #10
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d10a      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80049ee:	4b91      	ldr	r3, [pc, #580]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	2380      	movs	r3, #128	@ 0x80
 80049f4:	029b      	lsls	r3, r3, #10
 80049f6:	401a      	ands	r2, r3
 80049f8:	2380      	movs	r3, #128	@ 0x80
 80049fa:	029b      	lsls	r3, r3, #10
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d101      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e113      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004a04:	4b8b      	ldr	r3, [pc, #556]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a08:	23c0      	movs	r3, #192	@ 0xc0
 8004a0a:	029b      	lsls	r3, r3, #10
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d049      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	23c0      	movs	r3, #192	@ 0xc0
 8004a1c:	029b      	lsls	r3, r3, #10
 8004a1e:	4013      	ands	r3, r2
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d004      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d10d      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	23c0      	movs	r3, #192	@ 0xc0
 8004a36:	029b      	lsls	r3, r3, #10
 8004a38:	4013      	ands	r3, r2
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d034      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	2380      	movs	r3, #128	@ 0x80
 8004a46:	011b      	lsls	r3, r3, #4
 8004a48:	4013      	ands	r3, r2
 8004a4a:	d02e      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004a4c:	4b79      	ldr	r3, [pc, #484]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a50:	4a7a      	ldr	r2, [pc, #488]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a56:	4b77      	ldr	r3, [pc, #476]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a58:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a5a:	4b76      	ldr	r3, [pc, #472]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a5c:	2180      	movs	r1, #128	@ 0x80
 8004a5e:	0309      	lsls	r1, r1, #12
 8004a60:	430a      	orrs	r2, r1
 8004a62:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a64:	4b73      	ldr	r3, [pc, #460]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a66:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a68:	4b72      	ldr	r3, [pc, #456]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a6a:	4975      	ldr	r1, [pc, #468]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004a6c:	400a      	ands	r2, r1
 8004a6e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004a70:	4b70      	ldr	r3, [pc, #448]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	2380      	movs	r3, #128	@ 0x80
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d014      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fd f944 	bl	8001d0c <HAL_GetTick>
 8004a84:	0003      	movs	r3, r0
 8004a86:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a88:	e009      	b.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a8a:	f7fd f93f 	bl	8001d0c <HAL_GetTick>
 8004a8e:	0002      	movs	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	4a6b      	ldr	r2, [pc, #428]	@ (8004c44 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e0c6      	b.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a9e:	4b65      	ldr	r3, [pc, #404]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004aa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004aa2:	2380      	movs	r3, #128	@ 0x80
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	d0ef      	beq.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	2380      	movs	r3, #128	@ 0x80
 8004ab0:	011b      	lsls	r3, r3, #4
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d01f      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	23c0      	movs	r3, #192	@ 0xc0
 8004abc:	029b      	lsls	r3, r3, #10
 8004abe:	401a      	ands	r2, r3
 8004ac0:	23c0      	movs	r3, #192	@ 0xc0
 8004ac2:	029b      	lsls	r3, r3, #10
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d10c      	bne.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004ac8:	4b5a      	ldr	r3, [pc, #360]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a5e      	ldr	r2, [pc, #376]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	0019      	movs	r1, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689a      	ldr	r2, [r3, #8]
 8004ad6:	23c0      	movs	r3, #192	@ 0xc0
 8004ad8:	039b      	lsls	r3, r3, #14
 8004ada:	401a      	ands	r2, r3
 8004adc:	4b55      	ldr	r3, [pc, #340]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	4b54      	ldr	r3, [pc, #336]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ae4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	23c0      	movs	r3, #192	@ 0xc0
 8004aec:	029b      	lsls	r3, r3, #10
 8004aee:	401a      	ands	r2, r3
 8004af0:	4b50      	ldr	r3, [pc, #320]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004af2:	430a      	orrs	r2, r1
 8004af4:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2220      	movs	r2, #32
 8004afc:	4013      	ands	r3, r2
 8004afe:	d01f      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	23c0      	movs	r3, #192	@ 0xc0
 8004b06:	029b      	lsls	r3, r3, #10
 8004b08:	401a      	ands	r2, r3
 8004b0a:	23c0      	movs	r3, #192	@ 0xc0
 8004b0c:	029b      	lsls	r3, r3, #10
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d10c      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004b12:	4b48      	ldr	r3, [pc, #288]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a4c      	ldr	r2, [pc, #304]	@ (8004c48 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	0019      	movs	r1, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	23c0      	movs	r3, #192	@ 0xc0
 8004b22:	039b      	lsls	r3, r3, #14
 8004b24:	401a      	ands	r2, r3
 8004b26:	4b43      	ldr	r3, [pc, #268]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	4b41      	ldr	r3, [pc, #260]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b2e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	23c0      	movs	r3, #192	@ 0xc0
 8004b36:	029b      	lsls	r3, r3, #10
 8004b38:	401a      	ands	r2, r3
 8004b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b40:	2317      	movs	r3, #23
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d105      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b4a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b4e:	4b39      	ldr	r3, [pc, #228]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b50:	493e      	ldr	r1, [pc, #248]	@ (8004c4c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004b52:	400a      	ands	r2, r1
 8004b54:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	d009      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b60:	4b34      	ldr	r3, [pc, #208]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b64:	2203      	movs	r2, #3
 8004b66:	4393      	bics	r3, r2
 8004b68:	0019      	movs	r1, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	4b31      	ldr	r3, [pc, #196]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b70:	430a      	orrs	r2, r1
 8004b72:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2202      	movs	r2, #2
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	d009      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b7e:	4b2d      	ldr	r3, [pc, #180]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b82:	220c      	movs	r2, #12
 8004b84:	4393      	bics	r3, r2
 8004b86:	0019      	movs	r1, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	4b29      	ldr	r3, [pc, #164]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2204      	movs	r2, #4
 8004b98:	4013      	ands	r3, r2
 8004b9a:	d009      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b9c:	4b25      	ldr	r3, [pc, #148]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ba0:	4a2b      	ldr	r2, [pc, #172]	@ (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	0019      	movs	r1, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	4b22      	ldr	r3, [pc, #136]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bac:	430a      	orrs	r2, r1
 8004bae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2208      	movs	r2, #8
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	d009      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bba:	4b1e      	ldr	r3, [pc, #120]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bbe:	4a25      	ldr	r2, [pc, #148]	@ (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	2380      	movs	r3, #128	@ 0x80
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d009      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bda:	4b16      	ldr	r3, [pc, #88]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bde:	4a17      	ldr	r2, [pc, #92]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004be0:	4013      	ands	r3, r2
 8004be2:	0019      	movs	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	4b12      	ldr	r3, [pc, #72]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bea:	430a      	orrs	r2, r1
 8004bec:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2240      	movs	r2, #64	@ 0x40
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	d009      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bf8:	4b0e      	ldr	r3, [pc, #56]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bfc:	4a16      	ldr	r2, [pc, #88]	@ (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	0019      	movs	r1, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c06:	4b0b      	ldr	r3, [pc, #44]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c08:	430a      	orrs	r2, r1
 8004c0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2280      	movs	r2, #128	@ 0x80
 8004c12:	4013      	ands	r3, r2
 8004c14:	d009      	beq.n	8004c2a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004c16:	4b07      	ldr	r3, [pc, #28]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c1a:	4a10      	ldr	r2, [pc, #64]	@ (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	0019      	movs	r1, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1a      	ldr	r2, [r3, #32]
 8004c24:	4b03      	ldr	r3, [pc, #12]	@ (8004c34 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004c26:	430a      	orrs	r2, r1
 8004c28:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	0018      	movs	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	b006      	add	sp, #24
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	40021000 	.word	0x40021000
 8004c38:	40007000 	.word	0x40007000
 8004c3c:	fffcffff 	.word	0xfffcffff
 8004c40:	fff7ffff 	.word	0xfff7ffff
 8004c44:	00001388 	.word	0x00001388
 8004c48:	ffcfffff 	.word	0xffcfffff
 8004c4c:	efffffff 	.word	0xefffffff
 8004c50:	fffff3ff 	.word	0xfffff3ff
 8004c54:	ffffcfff 	.word	0xffffcfff
 8004c58:	fbffffff 	.word	0xfbffffff
 8004c5c:	fff3ffff 	.word	0xfff3ffff

08004c60 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004c60:	b5b0      	push	{r4, r5, r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004c68:	230f      	movs	r3, #15
 8004c6a:	18fb      	adds	r3, r7, r3
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e088      	b.n	8004d8c <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2221      	movs	r2, #33	@ 0x21
 8004c7e:	5c9b      	ldrb	r3, [r3, r2]
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d107      	bne.n	8004c96 <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	0018      	movs	r0, r3
 8004c92:	f7fc fc1f 	bl	80014d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2221      	movs	r2, #33	@ 0x21
 8004c9a:	2102      	movs	r1, #2
 8004c9c:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d05f      	beq.n	8004d6c <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	22ca      	movs	r2, #202	@ 0xca
 8004cb2:	625a      	str	r2, [r3, #36]	@ 0x24
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2253      	movs	r2, #83	@ 0x53
 8004cba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004cbc:	250f      	movs	r5, #15
 8004cbe:	197c      	adds	r4, r7, r5
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f000 f93e 	bl	8004f44 <RTC_EnterInitMode>
 8004cc8:	0003      	movs	r3, r0
 8004cca:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8004ccc:	0028      	movs	r0, r5
 8004cce:	183b      	adds	r3, r7, r0
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d12c      	bne.n	8004d30 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	492c      	ldr	r1, [pc, #176]	@ (8004d94 <HAL_RTC_Init+0x134>)
 8004ce2:	400a      	ands	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6899      	ldr	r1, [r3, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	431a      	orrs	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	68d2      	ldr	r2, [r2, #12]
 8004d0c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6919      	ldr	r1, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	041a      	lsls	r2, r3, #16
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004d22:	183c      	adds	r4, r7, r0
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	0018      	movs	r0, r3
 8004d28:	f000 f950 	bl	8004fcc <RTC_ExitInitMode>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8004d30:	230f      	movs	r3, #15
 8004d32:	18fb      	adds	r3, r7, r3
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d113      	bne.n	8004d62 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2103      	movs	r1, #3
 8004d46:	438a      	bics	r2, r1
 8004d48:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69da      	ldr	r2, [r3, #28]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	22ff      	movs	r2, #255	@ 0xff
 8004d68:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d6a:	e003      	b.n	8004d74 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004d6c:	230f      	movs	r3, #15
 8004d6e:	18fb      	adds	r3, r7, r3
 8004d70:	2200      	movs	r2, #0
 8004d72:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 8004d74:	230f      	movs	r3, #15
 8004d76:	18fb      	adds	r3, r7, r3
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d103      	bne.n	8004d86 <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2221      	movs	r2, #33	@ 0x21
 8004d82:	2101      	movs	r1, #1
 8004d84:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8004d86:	230f      	movs	r3, #15
 8004d88:	18fb      	adds	r3, r7, r3
 8004d8a:	781b      	ldrb	r3, [r3, #0]
}
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b004      	add	sp, #16
 8004d92:	bdb0      	pop	{r4, r5, r7, pc}
 8004d94:	ff8fffbf 	.word	0xff8fffbf

08004d98 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b086      	sub	sp, #24
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	045b      	lsls	r3, r3, #17
 8004dba:	0c5a      	lsrs	r2, r3, #17
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a22      	ldr	r2, [pc, #136]	@ (8004e50 <HAL_RTC_GetTime+0xb8>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	0c1b      	lsrs	r3, r3, #16
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	223f      	movs	r2, #63	@ 0x3f
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004ddc:	697b      	ldr	r3, [r7, #20]
 8004dde:	0a1b      	lsrs	r3, r3, #8
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	227f      	movs	r2, #127	@ 0x7f
 8004de4:	4013      	ands	r3, r2
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	227f      	movs	r2, #127	@ 0x7f
 8004df2:	4013      	ands	r3, r2
 8004df4:	b2da      	uxtb	r2, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	0d9b      	lsrs	r3, r3, #22
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2201      	movs	r2, #1
 8004e02:	4013      	ands	r3, r2
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d11a      	bne.n	8004e46 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	0018      	movs	r0, r3
 8004e16:	f000 f903 	bl	8005020 <RTC_Bcd2ToByte>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	001a      	movs	r2, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	785b      	ldrb	r3, [r3, #1]
 8004e26:	0018      	movs	r0, r3
 8004e28:	f000 f8fa 	bl	8005020 <RTC_Bcd2ToByte>
 8004e2c:	0003      	movs	r3, r0
 8004e2e:	001a      	movs	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	789b      	ldrb	r3, [r3, #2]
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f000 f8f1 	bl	8005020 <RTC_Bcd2ToByte>
 8004e3e:	0003      	movs	r3, r0
 8004e40:	001a      	movs	r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	0018      	movs	r0, r3
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	b006      	add	sp, #24
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	007f7f7f 	.word	0x007f7f7f

08004e54 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b086      	sub	sp, #24
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	4a21      	ldr	r2, [pc, #132]	@ (8004ef0 <HAL_RTC_GetDate+0x9c>)
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	0c1b      	lsrs	r3, r3, #16
 8004e74:	b2da      	uxtb	r2, r3
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	0a1b      	lsrs	r3, r3, #8
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	221f      	movs	r2, #31
 8004e82:	4013      	ands	r3, r2
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	223f      	movs	r2, #63	@ 0x3f
 8004e90:	4013      	ands	r3, r2
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	0b5b      	lsrs	r3, r3, #13
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2207      	movs	r2, #7
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	b2da      	uxtb	r2, r3
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d11a      	bne.n	8004ee4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	78db      	ldrb	r3, [r3, #3]
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	f000 f8b4 	bl	8005020 <RTC_Bcd2ToByte>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	001a      	movs	r2, r3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f000 f8ab 	bl	8005020 <RTC_Bcd2ToByte>
 8004eca:	0003      	movs	r3, r0
 8004ecc:	001a      	movs	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	789b      	ldrb	r3, [r3, #2]
 8004ed6:	0018      	movs	r0, r3
 8004ed8:	f000 f8a2 	bl	8005020 <RTC_Bcd2ToByte>
 8004edc:	0003      	movs	r3, r0
 8004ede:	001a      	movs	r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b006      	add	sp, #24
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	46c0      	nop			@ (mov r8, r8)
 8004ef0:	00ffff3f 	.word	0x00ffff3f

08004ef4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a0e      	ldr	r2, [pc, #56]	@ (8004f40 <HAL_RTC_WaitForSynchro+0x4c>)
 8004f06:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004f08:	f7fc ff00 	bl	8001d0c <HAL_GetTick>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f10:	e00a      	b.n	8004f28 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f12:	f7fc fefb 	bl	8001d0c <HAL_GetTick>
 8004f16:	0002      	movs	r2, r0
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	1ad2      	subs	r2, r2, r3
 8004f1c:	23fa      	movs	r3, #250	@ 0xfa
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d901      	bls.n	8004f28 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e006      	b.n	8004f36 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	4013      	ands	r3, r2
 8004f32:	d0ee      	beq.n	8004f12 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	0018      	movs	r0, r3
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	b004      	add	sp, #16
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	0001ff5f 	.word	0x0001ff5f

08004f44 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004f50:	230f      	movs	r3, #15
 8004f52:	18fb      	adds	r3, r7, r3
 8004f54:	2200      	movs	r2, #0
 8004f56:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	2240      	movs	r2, #64	@ 0x40
 8004f60:	4013      	ands	r3, r2
 8004f62:	d12c      	bne.n	8004fbe <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2180      	movs	r1, #128	@ 0x80
 8004f70:	430a      	orrs	r2, r1
 8004f72:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004f74:	f7fc feca 	bl	8001d0c <HAL_GetTick>
 8004f78:	0003      	movs	r3, r0
 8004f7a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004f7c:	e014      	b.n	8004fa8 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004f7e:	f7fc fec5 	bl	8001d0c <HAL_GetTick>
 8004f82:	0002      	movs	r2, r0
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	1ad2      	subs	r2, r2, r3
 8004f88:	200f      	movs	r0, #15
 8004f8a:	183b      	adds	r3, r7, r0
 8004f8c:	1839      	adds	r1, r7, r0
 8004f8e:	7809      	ldrb	r1, [r1, #0]
 8004f90:	7019      	strb	r1, [r3, #0]
 8004f92:	23fa      	movs	r3, #250	@ 0xfa
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d906      	bls.n	8004fa8 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2221      	movs	r2, #33	@ 0x21
 8004f9e:	2104      	movs	r1, #4
 8004fa0:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8004fa2:	183b      	adds	r3, r7, r0
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2240      	movs	r2, #64	@ 0x40
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	d104      	bne.n	8004fbe <RTC_EnterInitMode+0x7a>
 8004fb4:	230f      	movs	r3, #15
 8004fb6:	18fb      	adds	r3, r7, r3
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d1df      	bne.n	8004f7e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8004fbe:	230f      	movs	r3, #15
 8004fc0:	18fb      	adds	r3, r7, r3
 8004fc2:	781b      	ldrb	r3, [r3, #0]
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b004      	add	sp, #16
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fd4:	240f      	movs	r4, #15
 8004fd6:	193b      	adds	r3, r7, r4
 8004fd8:	2200      	movs	r2, #0
 8004fda:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2180      	movs	r1, #128	@ 0x80
 8004fe8:	438a      	bics	r2, r1
 8004fea:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	2220      	movs	r2, #32
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	d10c      	bne.n	8005012 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f7ff ff7a 	bl	8004ef4 <HAL_RTC_WaitForSynchro>
 8005000:	1e03      	subs	r3, r0, #0
 8005002:	d006      	beq.n	8005012 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2221      	movs	r2, #33	@ 0x21
 8005008:	2104      	movs	r1, #4
 800500a:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 800500c:	193b      	adds	r3, r7, r4
 800500e:	2201      	movs	r2, #1
 8005010:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8005012:	230f      	movs	r3, #15
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	781b      	ldrb	r3, [r3, #0]
}
 8005018:	0018      	movs	r0, r3
 800501a:	46bd      	mov	sp, r7
 800501c:	b005      	add	sp, #20
 800501e:	bd90      	pop	{r4, r7, pc}

08005020 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	0002      	movs	r2, r0
 8005028:	1dfb      	adds	r3, r7, #7
 800502a:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005030:	1dfb      	adds	r3, r7, #7
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	091b      	lsrs	r3, r3, #4
 8005036:	b2db      	uxtb	r3, r3
 8005038:	001a      	movs	r2, r3
 800503a:	0013      	movs	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	189b      	adds	r3, r3, r2
 8005040:	005b      	lsls	r3, r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	b2da      	uxtb	r2, r3
 8005048:	1dfb      	adds	r3, r7, #7
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	210f      	movs	r1, #15
 800504e:	400b      	ands	r3, r1
 8005050:	b2db      	uxtb	r3, r3
 8005052:	18d3      	adds	r3, r2, r3
 8005054:	b2db      	uxtb	r3, r3
}
 8005056:	0018      	movs	r0, r3
 8005058:	46bd      	mov	sp, r7
 800505a:	b004      	add	sp, #16
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800506c:	4b64      	ldr	r3, [pc, #400]	@ (8005200 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	22fa      	movs	r2, #250	@ 0xfa
 8005072:	01d1      	lsls	r1, r2, #7
 8005074:	0018      	movs	r0, r3
 8005076:	f7fb f859 	bl	800012c <__udivsi3>
 800507a:	0003      	movs	r3, r0
 800507c:	001a      	movs	r2, r3
 800507e:	0013      	movs	r3, r2
 8005080:	015b      	lsls	r3, r3, #5
 8005082:	1a9b      	subs	r3, r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	189b      	adds	r3, r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2220      	movs	r2, #32
 8005090:	5c9b      	ldrb	r3, [r3, r2]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d101      	bne.n	800509a <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 8005096:	2302      	movs	r3, #2
 8005098:	e0ad      	b.n	80051f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	2101      	movs	r1, #1
 80050a0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2221      	movs	r2, #33	@ 0x21
 80050a6:	2102      	movs	r1, #2
 80050a8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	22ca      	movs	r2, #202	@ 0xca
 80050b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2253      	movs	r2, #83	@ 0x53
 80050b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	2380      	movs	r3, #128	@ 0x80
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4013      	ands	r3, r2
 80050c6:	d019      	beq.n	80050fc <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10d      	bne.n	80050f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	22ff      	movs	r2, #255	@ 0xff
 80050da:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2221      	movs	r2, #33	@ 0x21
 80050e0:	2103      	movs	r1, #3
 80050e2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	2100      	movs	r1, #0
 80050ea:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e082      	b.n	80051f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2204      	movs	r2, #4
 80050f8:	4013      	ands	r3, r2
 80050fa:	d1e5      	bne.n	80050c8 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	493f      	ldr	r1, [pc, #252]	@ (8005204 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8005108:	400a      	ands	r2, r1
 800510a:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	22ff      	movs	r2, #255	@ 0xff
 8005114:	401a      	ands	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	493b      	ldr	r1, [pc, #236]	@ (8005208 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 800511c:	430a      	orrs	r2, r1
 800511e:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005120:	4b37      	ldr	r3, [pc, #220]	@ (8005200 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	22fa      	movs	r2, #250	@ 0xfa
 8005126:	01d1      	lsls	r1, r2, #7
 8005128:	0018      	movs	r0, r3
 800512a:	f7fa ffff 	bl	800012c <__udivsi3>
 800512e:	0003      	movs	r3, r0
 8005130:	001a      	movs	r2, r3
 8005132:	0013      	movs	r3, r2
 8005134:	015b      	lsls	r3, r3, #5
 8005136:	1a9b      	subs	r3, r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	189b      	adds	r3, r3, r2
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	3b01      	subs	r3, #1
 8005144:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10d      	bne.n	8005168 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	22ff      	movs	r2, #255	@ 0xff
 8005152:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2221      	movs	r2, #33	@ 0x21
 8005158:	2103      	movs	r1, #3
 800515a:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	2100      	movs	r1, #0
 8005162:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e046      	b.n	80051f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
 800516e:	2204      	movs	r2, #4
 8005170:	4013      	ands	r3, r2
 8005172:	d0e5      	beq.n	8005140 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2107      	movs	r1, #7
 8005180:	438a      	bics	r2, r1
 8005182:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6899      	ldr	r1, [r3, #8]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	430a      	orrs	r2, r1
 8005192:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800519c:	4b1b      	ldr	r3, [pc, #108]	@ (800520c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	4b1a      	ldr	r3, [pc, #104]	@ (800520c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80051a2:	2180      	movs	r1, #128	@ 0x80
 80051a4:	0349      	lsls	r1, r1, #13
 80051a6:	430a      	orrs	r2, r1
 80051a8:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80051aa:	4b18      	ldr	r3, [pc, #96]	@ (800520c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	4b17      	ldr	r3, [pc, #92]	@ (800520c <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80051b0:	2180      	movs	r1, #128	@ 0x80
 80051b2:	0349      	lsls	r1, r1, #13
 80051b4:	430a      	orrs	r2, r1
 80051b6:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2180      	movs	r1, #128	@ 0x80
 80051c4:	01c9      	lsls	r1, r1, #7
 80051c6:	430a      	orrs	r2, r1
 80051c8:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2180      	movs	r1, #128	@ 0x80
 80051d6:	00c9      	lsls	r1, r1, #3
 80051d8:	430a      	orrs	r2, r1
 80051da:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	22ff      	movs	r2, #255	@ 0xff
 80051e2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2221      	movs	r2, #33	@ 0x21
 80051e8:	2101      	movs	r1, #1
 80051ea:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2220      	movs	r2, #32
 80051f0:	2100      	movs	r1, #0
 80051f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	0018      	movs	r0, r3
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b006      	add	sp, #24
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	46c0      	nop			@ (mov r8, r8)
 8005200:	20000000 	.word	0x20000000
 8005204:	fffffbff 	.word	0xfffffbff
 8005208:	fffffb7f 	.word	0xfffffb7f
 800520c:	40010400 	.word	0x40010400

08005210 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	5c9b      	ldrb	r3, [r3, r2]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d101      	bne.n	800522a <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 8005226:	2302      	movs	r3, #2
 8005228:	e04e      	b.n	80052c8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2220      	movs	r2, #32
 800522e:	2101      	movs	r1, #1
 8005230:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2221      	movs	r2, #33	@ 0x21
 8005236:	2102      	movs	r1, #2
 8005238:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	22ca      	movs	r2, #202	@ 0xca
 8005240:	625a      	str	r2, [r3, #36]	@ 0x24
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2253      	movs	r2, #83	@ 0x53
 8005248:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	491e      	ldr	r1, [pc, #120]	@ (80052d0 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 8005256:	400a      	ands	r2, r1
 8005258:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	491b      	ldr	r1, [pc, #108]	@ (80052d4 <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 8005266:	400a      	ands	r2, r1
 8005268:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 800526a:	f7fc fd4f 	bl	8001d0c <HAL_GetTick>
 800526e:	0003      	movs	r3, r0
 8005270:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8005272:	e016      	b.n	80052a2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005274:	f7fc fd4a 	bl	8001d0c <HAL_GetTick>
 8005278:	0002      	movs	r2, r0
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad2      	subs	r2, r2, r3
 800527e:	23fa      	movs	r3, #250	@ 0xfa
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	429a      	cmp	r2, r3
 8005284:	d90d      	bls.n	80052a2 <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	22ff      	movs	r2, #255	@ 0xff
 800528c:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2221      	movs	r2, #33	@ 0x21
 8005292:	2103      	movs	r1, #3
 8005294:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2220      	movs	r2, #32
 800529a:	2100      	movs	r1, #0
 800529c:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e012      	b.n	80052c8 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	2204      	movs	r2, #4
 80052aa:	4013      	ands	r3, r2
 80052ac:	d0e2      	beq.n	8005274 <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	22ff      	movs	r2, #255	@ 0xff
 80052b4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2221      	movs	r2, #33	@ 0x21
 80052ba:	2101      	movs	r1, #1
 80052bc:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2220      	movs	r2, #32
 80052c2:	2100      	movs	r1, #0
 80052c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	0018      	movs	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b004      	add	sp, #16
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	fffffbff 	.word	0xfffffbff
 80052d4:	ffffbfff 	.word	0xffffbfff

080052d8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 80052e0:	4b13      	ldr	r3, [pc, #76]	@ (8005330 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 80052e2:	2280      	movs	r2, #128	@ 0x80
 80052e4:	0352      	lsls	r2, r2, #13
 80052e6:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	2380      	movs	r3, #128	@ 0x80
 80052f0:	01db      	lsls	r3, r3, #7
 80052f2:	4013      	ands	r3, r2
 80052f4:	d014      	beq.n	8005320 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	2380      	movs	r3, #128	@ 0x80
 80052fe:	00db      	lsls	r3, r3, #3
 8005300:	4013      	ands	r3, r2
 8005302:	d00d      	beq.n	8005320 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	22ff      	movs	r2, #255	@ 0xff
 800530c:	401a      	ands	r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4908      	ldr	r1, [pc, #32]	@ (8005334 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8005314:	430a      	orrs	r2, r1
 8005316:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	0018      	movs	r0, r3
 800531c:	f7fb fb08 	bl	8000930 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2221      	movs	r2, #33	@ 0x21
 8005324:	2101      	movs	r1, #1
 8005326:	5499      	strb	r1, [r3, r2]
}
 8005328:	46c0      	nop			@ (mov r8, r8)
 800532a:	46bd      	mov	sp, r7
 800532c:	b002      	add	sp, #8
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40010400 	.word	0x40010400
 8005334:	fffffb7f 	.word	0xfffffb7f

08005338 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e044      	b.n	80053d4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d107      	bne.n	8005362 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2278      	movs	r2, #120	@ 0x78
 8005356:	2100      	movs	r1, #0
 8005358:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	0018      	movs	r0, r3
 800535e:	f7fc f80b 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2224      	movs	r2, #36	@ 0x24
 8005366:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2101      	movs	r1, #1
 8005374:	438a      	bics	r2, r1
 8005376:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	0018      	movs	r0, r3
 8005384:	f000 fba8 	bl	8005ad8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	0018      	movs	r0, r3
 800538c:	f000 f906 	bl	800559c <UART_SetConfig>
 8005390:	0003      	movs	r3, r0
 8005392:	2b01      	cmp	r3, #1
 8005394:	d101      	bne.n	800539a <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e01c      	b.n	80053d4 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	490d      	ldr	r1, [pc, #52]	@ (80053dc <HAL_UART_Init+0xa4>)
 80053a6:	400a      	ands	r2, r1
 80053a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	212a      	movs	r1, #42	@ 0x2a
 80053b6:	438a      	bics	r2, r1
 80053b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2101      	movs	r1, #1
 80053c6:	430a      	orrs	r2, r1
 80053c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	0018      	movs	r0, r3
 80053ce:	f000 fc37 	bl	8005c40 <UART_CheckIdleState>
 80053d2:	0003      	movs	r3, r0
}
 80053d4:	0018      	movs	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	b002      	add	sp, #8
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	ffffb7ff 	.word	0xffffb7ff

080053e0 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e030      	b.n	8005454 <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2224      	movs	r2, #36	@ 0x24
 80053f6:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2101      	movs	r1, #1
 8005404:	438a      	bics	r2, r1
 8005406:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2200      	movs	r2, #0
 800540e:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2200      	movs	r2, #0
 8005416:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2200      	movs	r2, #0
 800541e:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	0018      	movs	r0, r3
 8005424:	f7fc f81e 	bl	8001464 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2284      	movs	r2, #132	@ 0x84
 800542c:	2100      	movs	r1, #0
 800542e:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2280      	movs	r2, #128	@ 0x80
 800543a:	2100      	movs	r1, #0
 800543c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2278      	movs	r2, #120	@ 0x78
 800544e:	2100      	movs	r1, #0
 8005450:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	0018      	movs	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	b002      	add	sp, #8
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	@ 0x28
 8005460:	af02      	add	r7, sp, #8
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	1dbb      	adds	r3, r7, #6
 800546a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005470:	2b20      	cmp	r3, #32
 8005472:	d000      	beq.n	8005476 <HAL_UART_Transmit+0x1a>
 8005474:	e08c      	b.n	8005590 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d003      	beq.n	8005484 <HAL_UART_Transmit+0x28>
 800547c:	1dbb      	adds	r3, r7, #6
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d101      	bne.n	8005488 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e084      	b.n	8005592 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	2380      	movs	r3, #128	@ 0x80
 800548e:	015b      	lsls	r3, r3, #5
 8005490:	429a      	cmp	r2, r3
 8005492:	d109      	bne.n	80054a8 <HAL_UART_Transmit+0x4c>
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d105      	bne.n	80054a8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2201      	movs	r2, #1
 80054a0:	4013      	ands	r3, r2
 80054a2:	d001      	beq.n	80054a8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e074      	b.n	8005592 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2284      	movs	r2, #132	@ 0x84
 80054ac:	2100      	movs	r1, #0
 80054ae:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2221      	movs	r2, #33	@ 0x21
 80054b4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054b6:	f7fc fc29 	bl	8001d0c <HAL_GetTick>
 80054ba:	0003      	movs	r3, r0
 80054bc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	1dba      	adds	r2, r7, #6
 80054c2:	2150      	movs	r1, #80	@ 0x50
 80054c4:	8812      	ldrh	r2, [r2, #0]
 80054c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	1dba      	adds	r2, r7, #6
 80054cc:	2152      	movs	r1, #82	@ 0x52
 80054ce:	8812      	ldrh	r2, [r2, #0]
 80054d0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	2380      	movs	r3, #128	@ 0x80
 80054d8:	015b      	lsls	r3, r3, #5
 80054da:	429a      	cmp	r2, r3
 80054dc:	d108      	bne.n	80054f0 <HAL_UART_Transmit+0x94>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	61bb      	str	r3, [r7, #24]
 80054ee:	e003      	b.n	80054f8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054f8:	e02f      	b.n	800555a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	0013      	movs	r3, r2
 8005504:	2200      	movs	r2, #0
 8005506:	2180      	movs	r1, #128	@ 0x80
 8005508:	f000 fc42 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 800550c:	1e03      	subs	r3, r0, #0
 800550e:	d004      	beq.n	800551a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e03b      	b.n	8005592 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d10b      	bne.n	8005538 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	001a      	movs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	05d2      	lsls	r2, r2, #23
 800552c:	0dd2      	lsrs	r2, r2, #23
 800552e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	3302      	adds	r3, #2
 8005534:	61bb      	str	r3, [r7, #24]
 8005536:	e007      	b.n	8005548 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	781a      	ldrb	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	3301      	adds	r3, #1
 8005546:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2252      	movs	r2, #82	@ 0x52
 800554c:	5a9b      	ldrh	r3, [r3, r2]
 800554e:	b29b      	uxth	r3, r3
 8005550:	3b01      	subs	r3, #1
 8005552:	b299      	uxth	r1, r3
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2252      	movs	r2, #82	@ 0x52
 8005558:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2252      	movs	r2, #82	@ 0x52
 800555e:	5a9b      	ldrh	r3, [r3, r2]
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1c9      	bne.n	80054fa <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	9300      	str	r3, [sp, #0]
 800556e:	0013      	movs	r3, r2
 8005570:	2200      	movs	r2, #0
 8005572:	2140      	movs	r1, #64	@ 0x40
 8005574:	f000 fc0c 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 8005578:	1e03      	subs	r3, r0, #0
 800557a:	d004      	beq.n	8005586 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2220      	movs	r2, #32
 8005580:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e005      	b.n	8005592 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800558c:	2300      	movs	r3, #0
 800558e:	e000      	b.n	8005592 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8005590:	2302      	movs	r3, #2
  }
}
 8005592:	0018      	movs	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	b008      	add	sp, #32
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800559c:	b5b0      	push	{r4, r5, r7, lr}
 800559e:	b08e      	sub	sp, #56	@ 0x38
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80055a4:	231a      	movs	r3, #26
 80055a6:	2218      	movs	r2, #24
 80055a8:	189b      	adds	r3, r3, r2
 80055aa:	19db      	adds	r3, r3, r7
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	431a      	orrs	r2, r3
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	431a      	orrs	r2, r3
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	69db      	ldr	r3, [r3, #28]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4ac3      	ldr	r2, [pc, #780]	@ (80058dc <UART_SetConfig+0x340>)
 80055d0:	4013      	ands	r3, r2
 80055d2:	0019      	movs	r1, r3
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055da:	430a      	orrs	r2, r1
 80055dc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	4abe      	ldr	r2, [pc, #760]	@ (80058e0 <UART_SetConfig+0x344>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	0019      	movs	r1, r3
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	430a      	orrs	r2, r1
 80055f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	699b      	ldr	r3, [r3, #24]
 80055fa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4ab8      	ldr	r2, [pc, #736]	@ (80058e4 <UART_SetConfig+0x348>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d004      	beq.n	8005610 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800560c:	4313      	orrs	r3, r2
 800560e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	4ab4      	ldr	r2, [pc, #720]	@ (80058e8 <UART_SetConfig+0x34c>)
 8005618:	4013      	ands	r3, r2
 800561a:	0019      	movs	r1, r3
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005622:	430a      	orrs	r2, r1
 8005624:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4ab0      	ldr	r2, [pc, #704]	@ (80058ec <UART_SetConfig+0x350>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d131      	bne.n	8005694 <UART_SetConfig+0xf8>
 8005630:	4baf      	ldr	r3, [pc, #700]	@ (80058f0 <UART_SetConfig+0x354>)
 8005632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005634:	2203      	movs	r2, #3
 8005636:	4013      	ands	r3, r2
 8005638:	2b03      	cmp	r3, #3
 800563a:	d01d      	beq.n	8005678 <UART_SetConfig+0xdc>
 800563c:	d823      	bhi.n	8005686 <UART_SetConfig+0xea>
 800563e:	2b02      	cmp	r3, #2
 8005640:	d00c      	beq.n	800565c <UART_SetConfig+0xc0>
 8005642:	d820      	bhi.n	8005686 <UART_SetConfig+0xea>
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <UART_SetConfig+0xb2>
 8005648:	2b01      	cmp	r3, #1
 800564a:	d00e      	beq.n	800566a <UART_SetConfig+0xce>
 800564c:	e01b      	b.n	8005686 <UART_SetConfig+0xea>
 800564e:	231b      	movs	r3, #27
 8005650:	2218      	movs	r2, #24
 8005652:	189b      	adds	r3, r3, r2
 8005654:	19db      	adds	r3, r3, r7
 8005656:	2201      	movs	r2, #1
 8005658:	701a      	strb	r2, [r3, #0]
 800565a:	e0b4      	b.n	80057c6 <UART_SetConfig+0x22a>
 800565c:	231b      	movs	r3, #27
 800565e:	2218      	movs	r2, #24
 8005660:	189b      	adds	r3, r3, r2
 8005662:	19db      	adds	r3, r3, r7
 8005664:	2202      	movs	r2, #2
 8005666:	701a      	strb	r2, [r3, #0]
 8005668:	e0ad      	b.n	80057c6 <UART_SetConfig+0x22a>
 800566a:	231b      	movs	r3, #27
 800566c:	2218      	movs	r2, #24
 800566e:	189b      	adds	r3, r3, r2
 8005670:	19db      	adds	r3, r3, r7
 8005672:	2204      	movs	r2, #4
 8005674:	701a      	strb	r2, [r3, #0]
 8005676:	e0a6      	b.n	80057c6 <UART_SetConfig+0x22a>
 8005678:	231b      	movs	r3, #27
 800567a:	2218      	movs	r2, #24
 800567c:	189b      	adds	r3, r3, r2
 800567e:	19db      	adds	r3, r3, r7
 8005680:	2208      	movs	r2, #8
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	e09f      	b.n	80057c6 <UART_SetConfig+0x22a>
 8005686:	231b      	movs	r3, #27
 8005688:	2218      	movs	r2, #24
 800568a:	189b      	adds	r3, r3, r2
 800568c:	19db      	adds	r3, r3, r7
 800568e:	2210      	movs	r2, #16
 8005690:	701a      	strb	r2, [r3, #0]
 8005692:	e098      	b.n	80057c6 <UART_SetConfig+0x22a>
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a96      	ldr	r2, [pc, #600]	@ (80058f4 <UART_SetConfig+0x358>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d131      	bne.n	8005702 <UART_SetConfig+0x166>
 800569e:	4b94      	ldr	r3, [pc, #592]	@ (80058f0 <UART_SetConfig+0x354>)
 80056a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056a2:	220c      	movs	r2, #12
 80056a4:	4013      	ands	r3, r2
 80056a6:	2b0c      	cmp	r3, #12
 80056a8:	d01d      	beq.n	80056e6 <UART_SetConfig+0x14a>
 80056aa:	d823      	bhi.n	80056f4 <UART_SetConfig+0x158>
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d00c      	beq.n	80056ca <UART_SetConfig+0x12e>
 80056b0:	d820      	bhi.n	80056f4 <UART_SetConfig+0x158>
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d002      	beq.n	80056bc <UART_SetConfig+0x120>
 80056b6:	2b04      	cmp	r3, #4
 80056b8:	d00e      	beq.n	80056d8 <UART_SetConfig+0x13c>
 80056ba:	e01b      	b.n	80056f4 <UART_SetConfig+0x158>
 80056bc:	231b      	movs	r3, #27
 80056be:	2218      	movs	r2, #24
 80056c0:	189b      	adds	r3, r3, r2
 80056c2:	19db      	adds	r3, r3, r7
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	e07d      	b.n	80057c6 <UART_SetConfig+0x22a>
 80056ca:	231b      	movs	r3, #27
 80056cc:	2218      	movs	r2, #24
 80056ce:	189b      	adds	r3, r3, r2
 80056d0:	19db      	adds	r3, r3, r7
 80056d2:	2202      	movs	r2, #2
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	e076      	b.n	80057c6 <UART_SetConfig+0x22a>
 80056d8:	231b      	movs	r3, #27
 80056da:	2218      	movs	r2, #24
 80056dc:	189b      	adds	r3, r3, r2
 80056de:	19db      	adds	r3, r3, r7
 80056e0:	2204      	movs	r2, #4
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e06f      	b.n	80057c6 <UART_SetConfig+0x22a>
 80056e6:	231b      	movs	r3, #27
 80056e8:	2218      	movs	r2, #24
 80056ea:	189b      	adds	r3, r3, r2
 80056ec:	19db      	adds	r3, r3, r7
 80056ee:	2208      	movs	r2, #8
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	e068      	b.n	80057c6 <UART_SetConfig+0x22a>
 80056f4:	231b      	movs	r3, #27
 80056f6:	2218      	movs	r2, #24
 80056f8:	189b      	adds	r3, r3, r2
 80056fa:	19db      	adds	r3, r3, r7
 80056fc:	2210      	movs	r2, #16
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	e061      	b.n	80057c6 <UART_SetConfig+0x22a>
 8005702:	69fb      	ldr	r3, [r7, #28]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a7c      	ldr	r2, [pc, #496]	@ (80058f8 <UART_SetConfig+0x35c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d106      	bne.n	800571a <UART_SetConfig+0x17e>
 800570c:	231b      	movs	r3, #27
 800570e:	2218      	movs	r2, #24
 8005710:	189b      	adds	r3, r3, r2
 8005712:	19db      	adds	r3, r3, r7
 8005714:	2200      	movs	r2, #0
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	e055      	b.n	80057c6 <UART_SetConfig+0x22a>
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a77      	ldr	r2, [pc, #476]	@ (80058fc <UART_SetConfig+0x360>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d106      	bne.n	8005732 <UART_SetConfig+0x196>
 8005724:	231b      	movs	r3, #27
 8005726:	2218      	movs	r2, #24
 8005728:	189b      	adds	r3, r3, r2
 800572a:	19db      	adds	r3, r3, r7
 800572c:	2200      	movs	r2, #0
 800572e:	701a      	strb	r2, [r3, #0]
 8005730:	e049      	b.n	80057c6 <UART_SetConfig+0x22a>
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a6b      	ldr	r2, [pc, #428]	@ (80058e4 <UART_SetConfig+0x348>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d13e      	bne.n	80057ba <UART_SetConfig+0x21e>
 800573c:	4b6c      	ldr	r3, [pc, #432]	@ (80058f0 <UART_SetConfig+0x354>)
 800573e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005740:	23c0      	movs	r3, #192	@ 0xc0
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	4013      	ands	r3, r2
 8005746:	22c0      	movs	r2, #192	@ 0xc0
 8005748:	0112      	lsls	r2, r2, #4
 800574a:	4293      	cmp	r3, r2
 800574c:	d027      	beq.n	800579e <UART_SetConfig+0x202>
 800574e:	22c0      	movs	r2, #192	@ 0xc0
 8005750:	0112      	lsls	r2, r2, #4
 8005752:	4293      	cmp	r3, r2
 8005754:	d82a      	bhi.n	80057ac <UART_SetConfig+0x210>
 8005756:	2280      	movs	r2, #128	@ 0x80
 8005758:	0112      	lsls	r2, r2, #4
 800575a:	4293      	cmp	r3, r2
 800575c:	d011      	beq.n	8005782 <UART_SetConfig+0x1e6>
 800575e:	2280      	movs	r2, #128	@ 0x80
 8005760:	0112      	lsls	r2, r2, #4
 8005762:	4293      	cmp	r3, r2
 8005764:	d822      	bhi.n	80057ac <UART_SetConfig+0x210>
 8005766:	2b00      	cmp	r3, #0
 8005768:	d004      	beq.n	8005774 <UART_SetConfig+0x1d8>
 800576a:	2280      	movs	r2, #128	@ 0x80
 800576c:	00d2      	lsls	r2, r2, #3
 800576e:	4293      	cmp	r3, r2
 8005770:	d00e      	beq.n	8005790 <UART_SetConfig+0x1f4>
 8005772:	e01b      	b.n	80057ac <UART_SetConfig+0x210>
 8005774:	231b      	movs	r3, #27
 8005776:	2218      	movs	r2, #24
 8005778:	189b      	adds	r3, r3, r2
 800577a:	19db      	adds	r3, r3, r7
 800577c:	2200      	movs	r2, #0
 800577e:	701a      	strb	r2, [r3, #0]
 8005780:	e021      	b.n	80057c6 <UART_SetConfig+0x22a>
 8005782:	231b      	movs	r3, #27
 8005784:	2218      	movs	r2, #24
 8005786:	189b      	adds	r3, r3, r2
 8005788:	19db      	adds	r3, r3, r7
 800578a:	2202      	movs	r2, #2
 800578c:	701a      	strb	r2, [r3, #0]
 800578e:	e01a      	b.n	80057c6 <UART_SetConfig+0x22a>
 8005790:	231b      	movs	r3, #27
 8005792:	2218      	movs	r2, #24
 8005794:	189b      	adds	r3, r3, r2
 8005796:	19db      	adds	r3, r3, r7
 8005798:	2204      	movs	r2, #4
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	e013      	b.n	80057c6 <UART_SetConfig+0x22a>
 800579e:	231b      	movs	r3, #27
 80057a0:	2218      	movs	r2, #24
 80057a2:	189b      	adds	r3, r3, r2
 80057a4:	19db      	adds	r3, r3, r7
 80057a6:	2208      	movs	r2, #8
 80057a8:	701a      	strb	r2, [r3, #0]
 80057aa:	e00c      	b.n	80057c6 <UART_SetConfig+0x22a>
 80057ac:	231b      	movs	r3, #27
 80057ae:	2218      	movs	r2, #24
 80057b0:	189b      	adds	r3, r3, r2
 80057b2:	19db      	adds	r3, r3, r7
 80057b4:	2210      	movs	r2, #16
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	e005      	b.n	80057c6 <UART_SetConfig+0x22a>
 80057ba:	231b      	movs	r3, #27
 80057bc:	2218      	movs	r2, #24
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	19db      	adds	r3, r3, r7
 80057c2:	2210      	movs	r2, #16
 80057c4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a46      	ldr	r2, [pc, #280]	@ (80058e4 <UART_SetConfig+0x348>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d000      	beq.n	80057d2 <UART_SetConfig+0x236>
 80057d0:	e09a      	b.n	8005908 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057d2:	231b      	movs	r3, #27
 80057d4:	2218      	movs	r2, #24
 80057d6:	189b      	adds	r3, r3, r2
 80057d8:	19db      	adds	r3, r3, r7
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d01d      	beq.n	800581c <UART_SetConfig+0x280>
 80057e0:	dc20      	bgt.n	8005824 <UART_SetConfig+0x288>
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d015      	beq.n	8005812 <UART_SetConfig+0x276>
 80057e6:	dc1d      	bgt.n	8005824 <UART_SetConfig+0x288>
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <UART_SetConfig+0x256>
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d005      	beq.n	80057fc <UART_SetConfig+0x260>
 80057f0:	e018      	b.n	8005824 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f2:	f7ff f86b 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 80057f6:	0003      	movs	r3, r0
 80057f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80057fa:	e01c      	b.n	8005836 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057fc:	4b3c      	ldr	r3, [pc, #240]	@ (80058f0 <UART_SetConfig+0x354>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2210      	movs	r2, #16
 8005802:	4013      	ands	r3, r2
 8005804:	d002      	beq.n	800580c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005806:	4b3e      	ldr	r3, [pc, #248]	@ (8005900 <UART_SetConfig+0x364>)
 8005808:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800580a:	e014      	b.n	8005836 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800580c:	4b3d      	ldr	r3, [pc, #244]	@ (8005904 <UART_SetConfig+0x368>)
 800580e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005810:	e011      	b.n	8005836 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005812:	f7fe ffcb 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 8005816:	0003      	movs	r3, r0
 8005818:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800581a:	e00c      	b.n	8005836 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800581c:	2380      	movs	r3, #128	@ 0x80
 800581e:	021b      	lsls	r3, r3, #8
 8005820:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005822:	e008      	b.n	8005836 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005828:	231a      	movs	r3, #26
 800582a:	2218      	movs	r2, #24
 800582c:	189b      	adds	r3, r3, r2
 800582e:	19db      	adds	r3, r3, r7
 8005830:	2201      	movs	r2, #1
 8005832:	701a      	strb	r2, [r3, #0]
        break;
 8005834:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d100      	bne.n	800583e <UART_SetConfig+0x2a2>
 800583c:	e133      	b.n	8005aa6 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	0013      	movs	r3, r2
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	189b      	adds	r3, r3, r2
 8005848:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800584a:	429a      	cmp	r2, r3
 800584c:	d305      	bcc.n	800585a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005854:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005856:	429a      	cmp	r2, r3
 8005858:	d906      	bls.n	8005868 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800585a:	231a      	movs	r3, #26
 800585c:	2218      	movs	r2, #24
 800585e:	189b      	adds	r3, r3, r2
 8005860:	19db      	adds	r3, r3, r7
 8005862:	2201      	movs	r2, #1
 8005864:	701a      	strb	r2, [r3, #0]
 8005866:	e11e      	b.n	8005aa6 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586a:	613b      	str	r3, [r7, #16]
 800586c:	2300      	movs	r3, #0
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	6939      	ldr	r1, [r7, #16]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	000b      	movs	r3, r1
 8005876:	0e1b      	lsrs	r3, r3, #24
 8005878:	0010      	movs	r0, r2
 800587a:	0205      	lsls	r5, r0, #8
 800587c:	431d      	orrs	r5, r3
 800587e:	000b      	movs	r3, r1
 8005880:	021c      	lsls	r4, r3, #8
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	085b      	lsrs	r3, r3, #1
 8005888:	60bb      	str	r3, [r7, #8]
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	68b8      	ldr	r0, [r7, #8]
 8005890:	68f9      	ldr	r1, [r7, #12]
 8005892:	1900      	adds	r0, r0, r4
 8005894:	4169      	adcs	r1, r5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	603b      	str	r3, [r7, #0]
 800589c:	2300      	movs	r3, #0
 800589e:	607b      	str	r3, [r7, #4]
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f7fa fcce 	bl	8000244 <__aeabi_uldivmod>
 80058a8:	0002      	movs	r2, r0
 80058aa:	000b      	movs	r3, r1
 80058ac:	0013      	movs	r3, r2
 80058ae:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80058b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058b2:	23c0      	movs	r3, #192	@ 0xc0
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d309      	bcc.n	80058ce <UART_SetConfig+0x332>
 80058ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058bc:	2380      	movs	r3, #128	@ 0x80
 80058be:	035b      	lsls	r3, r3, #13
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d204      	bcs.n	80058ce <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058ca:	60da      	str	r2, [r3, #12]
 80058cc:	e0eb      	b.n	8005aa6 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80058ce:	231a      	movs	r3, #26
 80058d0:	2218      	movs	r2, #24
 80058d2:	189b      	adds	r3, r3, r2
 80058d4:	19db      	adds	r3, r3, r7
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
 80058da:	e0e4      	b.n	8005aa6 <UART_SetConfig+0x50a>
 80058dc:	efff69f3 	.word	0xefff69f3
 80058e0:	ffffcfff 	.word	0xffffcfff
 80058e4:	40004800 	.word	0x40004800
 80058e8:	fffff4ff 	.word	0xfffff4ff
 80058ec:	40013800 	.word	0x40013800
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40004400 	.word	0x40004400
 80058f8:	40004c00 	.word	0x40004c00
 80058fc:	40005000 	.word	0x40005000
 8005900:	003d0900 	.word	0x003d0900
 8005904:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	69da      	ldr	r2, [r3, #28]
 800590c:	2380      	movs	r3, #128	@ 0x80
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	429a      	cmp	r2, r3
 8005912:	d000      	beq.n	8005916 <UART_SetConfig+0x37a>
 8005914:	e070      	b.n	80059f8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8005916:	231b      	movs	r3, #27
 8005918:	2218      	movs	r2, #24
 800591a:	189b      	adds	r3, r3, r2
 800591c:	19db      	adds	r3, r3, r7
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	2b08      	cmp	r3, #8
 8005922:	d822      	bhi.n	800596a <UART_SetConfig+0x3ce>
 8005924:	009a      	lsls	r2, r3, #2
 8005926:	4b67      	ldr	r3, [pc, #412]	@ (8005ac4 <UART_SetConfig+0x528>)
 8005928:	18d3      	adds	r3, r2, r3
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800592e:	f7fe ffcd 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 8005932:	0003      	movs	r3, r0
 8005934:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005936:	e021      	b.n	800597c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005938:	f7fe ffde 	bl	80048f8 <HAL_RCC_GetPCLK2Freq>
 800593c:	0003      	movs	r3, r0
 800593e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005940:	e01c      	b.n	800597c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005942:	4b61      	ldr	r3, [pc, #388]	@ (8005ac8 <UART_SetConfig+0x52c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2210      	movs	r2, #16
 8005948:	4013      	ands	r3, r2
 800594a:	d002      	beq.n	8005952 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800594c:	4b5f      	ldr	r3, [pc, #380]	@ (8005acc <UART_SetConfig+0x530>)
 800594e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005950:	e014      	b.n	800597c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005952:	4b5f      	ldr	r3, [pc, #380]	@ (8005ad0 <UART_SetConfig+0x534>)
 8005954:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005956:	e011      	b.n	800597c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005958:	f7fe ff28 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 800595c:	0003      	movs	r3, r0
 800595e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005960:	e00c      	b.n	800597c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005962:	2380      	movs	r3, #128	@ 0x80
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005968:	e008      	b.n	800597c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800596e:	231a      	movs	r3, #26
 8005970:	2218      	movs	r2, #24
 8005972:	189b      	adds	r3, r3, r2
 8005974:	19db      	adds	r3, r3, r7
 8005976:	2201      	movs	r2, #1
 8005978:	701a      	strb	r2, [r3, #0]
        break;
 800597a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800597c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d100      	bne.n	8005984 <UART_SetConfig+0x3e8>
 8005982:	e090      	b.n	8005aa6 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005986:	005a      	lsls	r2, r3, #1
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	085b      	lsrs	r3, r3, #1
 800598e:	18d2      	adds	r2, r2, r3
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	0019      	movs	r1, r3
 8005996:	0010      	movs	r0, r2
 8005998:	f7fa fbc8 	bl	800012c <__udivsi3>
 800599c:	0003      	movs	r3, r0
 800599e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a2:	2b0f      	cmp	r3, #15
 80059a4:	d921      	bls.n	80059ea <UART_SetConfig+0x44e>
 80059a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059a8:	2380      	movs	r3, #128	@ 0x80
 80059aa:	025b      	lsls	r3, r3, #9
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d21c      	bcs.n	80059ea <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80059b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	200e      	movs	r0, #14
 80059b6:	2418      	movs	r4, #24
 80059b8:	1903      	adds	r3, r0, r4
 80059ba:	19db      	adds	r3, r3, r7
 80059bc:	210f      	movs	r1, #15
 80059be:	438a      	bics	r2, r1
 80059c0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80059c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c4:	085b      	lsrs	r3, r3, #1
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	2207      	movs	r2, #7
 80059ca:	4013      	ands	r3, r2
 80059cc:	b299      	uxth	r1, r3
 80059ce:	1903      	adds	r3, r0, r4
 80059d0:	19db      	adds	r3, r3, r7
 80059d2:	1902      	adds	r2, r0, r4
 80059d4:	19d2      	adds	r2, r2, r7
 80059d6:	8812      	ldrh	r2, [r2, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	1902      	adds	r2, r0, r4
 80059e2:	19d2      	adds	r2, r2, r7
 80059e4:	8812      	ldrh	r2, [r2, #0]
 80059e6:	60da      	str	r2, [r3, #12]
 80059e8:	e05d      	b.n	8005aa6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80059ea:	231a      	movs	r3, #26
 80059ec:	2218      	movs	r2, #24
 80059ee:	189b      	adds	r3, r3, r2
 80059f0:	19db      	adds	r3, r3, r7
 80059f2:	2201      	movs	r2, #1
 80059f4:	701a      	strb	r2, [r3, #0]
 80059f6:	e056      	b.n	8005aa6 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80059f8:	231b      	movs	r3, #27
 80059fa:	2218      	movs	r2, #24
 80059fc:	189b      	adds	r3, r3, r2
 80059fe:	19db      	adds	r3, r3, r7
 8005a00:	781b      	ldrb	r3, [r3, #0]
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d822      	bhi.n	8005a4c <UART_SetConfig+0x4b0>
 8005a06:	009a      	lsls	r2, r3, #2
 8005a08:	4b32      	ldr	r3, [pc, #200]	@ (8005ad4 <UART_SetConfig+0x538>)
 8005a0a:	18d3      	adds	r3, r2, r3
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a10:	f7fe ff5c 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 8005a14:	0003      	movs	r3, r0
 8005a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a18:	e021      	b.n	8005a5e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a1a:	f7fe ff6d 	bl	80048f8 <HAL_RCC_GetPCLK2Freq>
 8005a1e:	0003      	movs	r3, r0
 8005a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a22:	e01c      	b.n	8005a5e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a24:	4b28      	ldr	r3, [pc, #160]	@ (8005ac8 <UART_SetConfig+0x52c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2210      	movs	r2, #16
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	d002      	beq.n	8005a34 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005a2e:	4b27      	ldr	r3, [pc, #156]	@ (8005acc <UART_SetConfig+0x530>)
 8005a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a32:	e014      	b.n	8005a5e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005a34:	4b26      	ldr	r3, [pc, #152]	@ (8005ad0 <UART_SetConfig+0x534>)
 8005a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a38:	e011      	b.n	8005a5e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a3a:	f7fe feb7 	bl	80047ac <HAL_RCC_GetSysClockFreq>
 8005a3e:	0003      	movs	r3, r0
 8005a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a42:	e00c      	b.n	8005a5e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a44:	2380      	movs	r3, #128	@ 0x80
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a4a:	e008      	b.n	8005a5e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005a50:	231a      	movs	r3, #26
 8005a52:	2218      	movs	r2, #24
 8005a54:	189b      	adds	r3, r3, r2
 8005a56:	19db      	adds	r3, r3, r7
 8005a58:	2201      	movs	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]
        break;
 8005a5c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d020      	beq.n	8005aa6 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	085a      	lsrs	r2, r3, #1
 8005a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6c:	18d2      	adds	r2, r2, r3
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	0019      	movs	r1, r3
 8005a74:	0010      	movs	r0, r2
 8005a76:	f7fa fb59 	bl	800012c <__udivsi3>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a80:	2b0f      	cmp	r3, #15
 8005a82:	d90a      	bls.n	8005a9a <UART_SetConfig+0x4fe>
 8005a84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a86:	2380      	movs	r3, #128	@ 0x80
 8005a88:	025b      	lsls	r3, r3, #9
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d205      	bcs.n	8005a9a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	e005      	b.n	8005aa6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005a9a:	231a      	movs	r3, #26
 8005a9c:	2218      	movs	r2, #24
 8005a9e:	189b      	adds	r3, r3, r2
 8005aa0:	19db      	adds	r3, r3, r7
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ab2:	231a      	movs	r3, #26
 8005ab4:	2218      	movs	r2, #24
 8005ab6:	189b      	adds	r3, r3, r2
 8005ab8:	19db      	adds	r3, r3, r7
 8005aba:	781b      	ldrb	r3, [r3, #0]
}
 8005abc:	0018      	movs	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b00e      	add	sp, #56	@ 0x38
 8005ac2:	bdb0      	pop	{r4, r5, r7, pc}
 8005ac4:	08006ec4 	.word	0x08006ec4
 8005ac8:	40021000 	.word	0x40021000
 8005acc:	003d0900 	.word	0x003d0900
 8005ad0:	00f42400 	.word	0x00f42400
 8005ad4:	08006ee8 	.word	0x08006ee8

08005ad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	d00b      	beq.n	8005b02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	4a4a      	ldr	r2, [pc, #296]	@ (8005c1c <UART_AdvFeatureConfig+0x144>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	0019      	movs	r1, r3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	430a      	orrs	r2, r1
 8005b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b06:	2201      	movs	r2, #1
 8005b08:	4013      	ands	r3, r2
 8005b0a:	d00b      	beq.n	8005b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	4a43      	ldr	r2, [pc, #268]	@ (8005c20 <UART_AdvFeatureConfig+0x148>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	0019      	movs	r1, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b28:	2202      	movs	r2, #2
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d00b      	beq.n	8005b46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	4a3b      	ldr	r2, [pc, #236]	@ (8005c24 <UART_AdvFeatureConfig+0x14c>)
 8005b36:	4013      	ands	r3, r2
 8005b38:	0019      	movs	r1, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4a:	2204      	movs	r2, #4
 8005b4c:	4013      	ands	r3, r2
 8005b4e:	d00b      	beq.n	8005b68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	4a34      	ldr	r2, [pc, #208]	@ (8005c28 <UART_AdvFeatureConfig+0x150>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	0019      	movs	r1, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6c:	2210      	movs	r2, #16
 8005b6e:	4013      	ands	r3, r2
 8005b70:	d00b      	beq.n	8005b8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4a2c      	ldr	r2, [pc, #176]	@ (8005c2c <UART_AdvFeatureConfig+0x154>)
 8005b7a:	4013      	ands	r3, r2
 8005b7c:	0019      	movs	r1, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	430a      	orrs	r2, r1
 8005b88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8e:	2220      	movs	r2, #32
 8005b90:	4013      	ands	r3, r2
 8005b92:	d00b      	beq.n	8005bac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	4a25      	ldr	r2, [pc, #148]	@ (8005c30 <UART_AdvFeatureConfig+0x158>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb0:	2240      	movs	r2, #64	@ 0x40
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d01d      	beq.n	8005bf2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8005c34 <UART_AdvFeatureConfig+0x15c>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	0019      	movs	r1, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bd2:	2380      	movs	r3, #128	@ 0x80
 8005bd4:	035b      	lsls	r3, r3, #13
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d10b      	bne.n	8005bf2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	4a15      	ldr	r2, [pc, #84]	@ (8005c38 <UART_AdvFeatureConfig+0x160>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	0019      	movs	r1, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf6:	2280      	movs	r2, #128	@ 0x80
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d00b      	beq.n	8005c14 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	4a0e      	ldr	r2, [pc, #56]	@ (8005c3c <UART_AdvFeatureConfig+0x164>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	0019      	movs	r1, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]
  }
}
 8005c14:	46c0      	nop			@ (mov r8, r8)
 8005c16:	46bd      	mov	sp, r7
 8005c18:	b002      	add	sp, #8
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	ffff7fff 	.word	0xffff7fff
 8005c20:	fffdffff 	.word	0xfffdffff
 8005c24:	fffeffff 	.word	0xfffeffff
 8005c28:	fffbffff 	.word	0xfffbffff
 8005c2c:	ffffefff 	.word	0xffffefff
 8005c30:	ffffdfff 	.word	0xffffdfff
 8005c34:	ffefffff 	.word	0xffefffff
 8005c38:	ff9fffff 	.word	0xff9fffff
 8005c3c:	fff7ffff 	.word	0xfff7ffff

08005c40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b092      	sub	sp, #72	@ 0x48
 8005c44:	af02      	add	r7, sp, #8
 8005c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2284      	movs	r2, #132	@ 0x84
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005c50:	f7fc f85c 	bl	8001d0c <HAL_GetTick>
 8005c54:	0003      	movs	r3, r0
 8005c56:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2208      	movs	r2, #8
 8005c60:	4013      	ands	r3, r2
 8005c62:	2b08      	cmp	r3, #8
 8005c64:	d12c      	bne.n	8005cc0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c68:	2280      	movs	r2, #128	@ 0x80
 8005c6a:	0391      	lsls	r1, r2, #14
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	4a46      	ldr	r2, [pc, #280]	@ (8005d88 <UART_CheckIdleState+0x148>)
 8005c70:	9200      	str	r2, [sp, #0]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f000 f88c 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 8005c78:	1e03      	subs	r3, r0, #0
 8005c7a:	d021      	beq.n	8005cc0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005c80:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005c84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c86:	2301      	movs	r3, #1
 8005c88:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8c:	f383 8810 	msr	PRIMASK, r3
}
 8005c90:	46c0      	nop			@ (mov r8, r8)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2180      	movs	r1, #128	@ 0x80
 8005c9e:	438a      	bics	r2, r1
 8005ca0:	601a      	str	r2, [r3, #0]
 8005ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca8:	f383 8810 	msr	PRIMASK, r3
}
 8005cac:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2278      	movs	r2, #120	@ 0x78
 8005cb8:	2100      	movs	r1, #0
 8005cba:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e05f      	b.n	8005d80 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	4013      	ands	r3, r2
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d146      	bne.n	8005d5c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cd0:	2280      	movs	r2, #128	@ 0x80
 8005cd2:	03d1      	lsls	r1, r2, #15
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8005d88 <UART_CheckIdleState+0x148>)
 8005cd8:	9200      	str	r2, [sp, #0]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f000 f858 	bl	8005d90 <UART_WaitOnFlagUntilTimeout>
 8005ce0:	1e03      	subs	r3, r0, #0
 8005ce2:	d03b      	beq.n	8005d5c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ce8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005cea:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cec:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cee:	2301      	movs	r3, #1
 8005cf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f383 8810 	msr	PRIMASK, r3
}
 8005cf8:	46c0      	nop			@ (mov r8, r8)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681a      	ldr	r2, [r3, #0]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4921      	ldr	r1, [pc, #132]	@ (8005d8c <UART_CheckIdleState+0x14c>)
 8005d06:	400a      	ands	r2, r1
 8005d08:	601a      	str	r2, [r3, #0]
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f383 8810 	msr	PRIMASK, r3
}
 8005d14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d16:	f3ef 8310 	mrs	r3, PRIMASK
 8005d1a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005d1c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d20:	2301      	movs	r3, #1
 8005d22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f383 8810 	msr	PRIMASK, r3
}
 8005d2a:	46c0      	nop			@ (mov r8, r8)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2101      	movs	r1, #1
 8005d38:	438a      	bics	r2, r1
 8005d3a:	609a      	str	r2, [r3, #8]
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d40:	6a3b      	ldr	r3, [r7, #32]
 8005d42:	f383 8810 	msr	PRIMASK, r3
}
 8005d46:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2280      	movs	r2, #128	@ 0x80
 8005d4c:	2120      	movs	r1, #32
 8005d4e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2278      	movs	r2, #120	@ 0x78
 8005d54:	2100      	movs	r1, #0
 8005d56:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e011      	b.n	8005d80 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2220      	movs	r2, #32
 8005d60:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2280      	movs	r2, #128	@ 0x80
 8005d66:	2120      	movs	r1, #32
 8005d68:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2278      	movs	r2, #120	@ 0x78
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	0018      	movs	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	b010      	add	sp, #64	@ 0x40
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	01ffffff 	.word	0x01ffffff
 8005d8c:	fffffedf 	.word	0xfffffedf

08005d90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	1dfb      	adds	r3, r7, #7
 8005d9e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005da0:	e051      	b.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	3301      	adds	r3, #1
 8005da6:	d04e      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005da8:	f7fb ffb0 	bl	8001d0c <HAL_GetTick>
 8005dac:	0002      	movs	r2, r0
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	69ba      	ldr	r2, [r7, #24]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d302      	bcc.n	8005dbe <UART_WaitOnFlagUntilTimeout+0x2e>
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e051      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2204      	movs	r2, #4
 8005dca:	4013      	ands	r3, r2
 8005dcc:	d03b      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	2b80      	cmp	r3, #128	@ 0x80
 8005dd2:	d038      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b40      	cmp	r3, #64	@ 0x40
 8005dd8:	d035      	beq.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	2208      	movs	r2, #8
 8005de2:	4013      	ands	r3, r2
 8005de4:	2b08      	cmp	r3, #8
 8005de6:	d111      	bne.n	8005e0c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2208      	movs	r2, #8
 8005dee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	0018      	movs	r0, r3
 8005df4:	f000 f83c 	bl	8005e70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2284      	movs	r2, #132	@ 0x84
 8005dfc:	2108      	movs	r1, #8
 8005dfe:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2278      	movs	r2, #120	@ 0x78
 8005e04:	2100      	movs	r1, #0
 8005e06:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e02c      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69da      	ldr	r2, [r3, #28]
 8005e12:	2380      	movs	r3, #128	@ 0x80
 8005e14:	011b      	lsls	r3, r3, #4
 8005e16:	401a      	ands	r2, r3
 8005e18:	2380      	movs	r3, #128	@ 0x80
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d112      	bne.n	8005e46 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	2280      	movs	r2, #128	@ 0x80
 8005e26:	0112      	lsls	r2, r2, #4
 8005e28:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f000 f81f 	bl	8005e70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2284      	movs	r2, #132	@ 0x84
 8005e36:	2120      	movs	r1, #32
 8005e38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2278      	movs	r2, #120	@ 0x78
 8005e3e:	2100      	movs	r1, #0
 8005e40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e00f      	b.n	8005e66 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	69db      	ldr	r3, [r3, #28]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	425a      	negs	r2, r3
 8005e56:	4153      	adcs	r3, r2
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	001a      	movs	r2, r3
 8005e5c:	1dfb      	adds	r3, r7, #7
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d09e      	beq.n	8005da2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	0018      	movs	r0, r3
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	b004      	add	sp, #16
 8005e6c:	bd80      	pop	{r7, pc}
	...

08005e70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08e      	sub	sp, #56	@ 0x38
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e78:	f3ef 8310 	mrs	r3, PRIMASK
 8005e7c:	617b      	str	r3, [r7, #20]
  return(result);
 8005e7e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e80:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e82:	2301      	movs	r3, #1
 8005e84:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e86:	69bb      	ldr	r3, [r7, #24]
 8005e88:	f383 8810 	msr	PRIMASK, r3
}
 8005e8c:	46c0      	nop			@ (mov r8, r8)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4926      	ldr	r1, [pc, #152]	@ (8005f34 <UART_EndRxTransfer+0xc4>)
 8005e9a:	400a      	ands	r2, r1
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	f383 8810 	msr	PRIMASK, r3
}
 8005ea8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8005eae:	623b      	str	r3, [r7, #32]
  return(result);
 8005eb0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eba:	f383 8810 	msr	PRIMASK, r3
}
 8005ebe:	46c0      	nop			@ (mov r8, r8)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689a      	ldr	r2, [r3, #8]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2101      	movs	r1, #1
 8005ecc:	438a      	bics	r2, r1
 8005ece:	609a      	str	r2, [r3, #8]
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed6:	f383 8810 	msr	PRIMASK, r3
}
 8005eda:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d118      	bne.n	8005f16 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8005ee8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005eea:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eee:	2301      	movs	r3, #1
 8005ef0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	f383 8810 	msr	PRIMASK, r3
}
 8005ef8:	46c0      	nop			@ (mov r8, r8)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2110      	movs	r1, #16
 8005f06:	438a      	bics	r2, r1
 8005f08:	601a      	str	r2, [r3, #0]
 8005f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f383 8810 	msr	PRIMASK, r3
}
 8005f14:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2280      	movs	r2, #128	@ 0x80
 8005f1a:	2120      	movs	r1, #32
 8005f1c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005f2a:	46c0      	nop			@ (mov r8, r8)
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b00e      	add	sp, #56	@ 0x38
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	46c0      	nop			@ (mov r8, r8)
 8005f34:	fffffedf 	.word	0xfffffedf

08005f38 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	603b      	str	r3, [r7, #0]
 8005f44:	1dbb      	adds	r3, r7, #6
 8005f46:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2280      	movs	r2, #128	@ 0x80
 8005f4c:	589b      	ldr	r3, [r3, r2]
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	d000      	beq.n	8005f54 <HAL_UARTEx_ReceiveToIdle+0x1c>
 8005f52:	e109      	b.n	8006168 <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <HAL_UARTEx_ReceiveToIdle+0x2a>
 8005f5a:	1dbb      	adds	r3, r7, #6
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e101      	b.n	800616a <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	689a      	ldr	r2, [r3, #8]
 8005f6a:	2380      	movs	r3, #128	@ 0x80
 8005f6c:	015b      	lsls	r3, r3, #5
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d109      	bne.n	8005f86 <HAL_UARTEx_ReceiveToIdle+0x4e>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d105      	bne.n	8005f86 <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	4013      	ands	r3, r2
 8005f80:	d001      	beq.n	8005f86 <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e0f1      	b.n	800616a <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2284      	movs	r2, #132	@ 0x84
 8005f8a:	2100      	movs	r1, #0
 8005f8c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2280      	movs	r2, #128	@ 0x80
 8005f92:	2122      	movs	r1, #34	@ 0x22
 8005f94:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fa2:	f7fb feb3 	bl	8001d0c <HAL_GetTick>
 8005fa6:	0003      	movs	r3, r0
 8005fa8:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	1dba      	adds	r2, r7, #6
 8005fae:	2158      	movs	r1, #88	@ 0x58
 8005fb0:	8812      	ldrh	r2, [r2, #0]
 8005fb2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	1dba      	adds	r2, r7, #6
 8005fb8:	215a      	movs	r1, #90	@ 0x5a
 8005fba:	8812      	ldrh	r2, [r2, #0]
 8005fbc:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	2380      	movs	r3, #128	@ 0x80
 8005fc4:	015b      	lsls	r3, r3, #5
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d10d      	bne.n	8005fe6 <HAL_UARTEx_ReceiveToIdle+0xae>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d104      	bne.n	8005fdc <HAL_UARTEx_ReceiveToIdle+0xa4>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	225c      	movs	r2, #92	@ 0x5c
 8005fd6:	4967      	ldr	r1, [pc, #412]	@ (8006174 <HAL_UARTEx_ReceiveToIdle+0x23c>)
 8005fd8:	5299      	strh	r1, [r3, r2]
 8005fda:	e02e      	b.n	800603a <HAL_UARTEx_ReceiveToIdle+0x102>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	225c      	movs	r2, #92	@ 0x5c
 8005fe0:	21ff      	movs	r1, #255	@ 0xff
 8005fe2:	5299      	strh	r1, [r3, r2]
 8005fe4:	e029      	b.n	800603a <HAL_UARTEx_ReceiveToIdle+0x102>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10d      	bne.n	800600a <HAL_UARTEx_ReceiveToIdle+0xd2>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d104      	bne.n	8006000 <HAL_UARTEx_ReceiveToIdle+0xc8>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	225c      	movs	r2, #92	@ 0x5c
 8005ffa:	21ff      	movs	r1, #255	@ 0xff
 8005ffc:	5299      	strh	r1, [r3, r2]
 8005ffe:	e01c      	b.n	800603a <HAL_UARTEx_ReceiveToIdle+0x102>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	225c      	movs	r2, #92	@ 0x5c
 8006004:	217f      	movs	r1, #127	@ 0x7f
 8006006:	5299      	strh	r1, [r3, r2]
 8006008:	e017      	b.n	800603a <HAL_UARTEx_ReceiveToIdle+0x102>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689a      	ldr	r2, [r3, #8]
 800600e:	2380      	movs	r3, #128	@ 0x80
 8006010:	055b      	lsls	r3, r3, #21
 8006012:	429a      	cmp	r2, r3
 8006014:	d10d      	bne.n	8006032 <HAL_UARTEx_ReceiveToIdle+0xfa>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d104      	bne.n	8006028 <HAL_UARTEx_ReceiveToIdle+0xf0>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	225c      	movs	r2, #92	@ 0x5c
 8006022:	217f      	movs	r1, #127	@ 0x7f
 8006024:	5299      	strh	r1, [r3, r2]
 8006026:	e008      	b.n	800603a <HAL_UARTEx_ReceiveToIdle+0x102>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	225c      	movs	r2, #92	@ 0x5c
 800602c:	213f      	movs	r1, #63	@ 0x3f
 800602e:	5299      	strh	r1, [r3, r2]
 8006030:	e003      	b.n	800603a <HAL_UARTEx_ReceiveToIdle+0x102>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	225c      	movs	r2, #92	@ 0x5c
 8006036:	2100      	movs	r1, #0
 8006038:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800603a:	2312      	movs	r3, #18
 800603c:	18fb      	adds	r3, r7, r3
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	215c      	movs	r1, #92	@ 0x5c
 8006042:	5a52      	ldrh	r2, [r2, r1]
 8006044:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	2380      	movs	r3, #128	@ 0x80
 800604c:	015b      	lsls	r3, r3, #5
 800604e:	429a      	cmp	r2, r3
 8006050:	d108      	bne.n	8006064 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d104      	bne.n	8006064 <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 800605a:	2300      	movs	r3, #0
 800605c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	61bb      	str	r3, [r7, #24]
 8006062:	e003      	b.n	800606c <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2200      	movs	r2, #0
 8006070:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006072:	e062      	b.n	800613a <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	2210      	movs	r2, #16
 800607c:	4013      	ands	r3, r2
 800607e:	2b10      	cmp	r3, #16
 8006080:	d110      	bne.n	80060a4 <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2210      	movs	r2, #16
 8006088:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d008      	beq.n	80060a4 <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2202      	movs	r2, #2
 8006096:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2280      	movs	r2, #128	@ 0x80
 800609c:	2120      	movs	r1, #32
 800609e:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	e062      	b.n	800616a <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	2220      	movs	r2, #32
 80060ac:	4013      	ands	r3, r2
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d12f      	bne.n	8006112 <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10e      	bne.n	80060d6 <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2212      	movs	r2, #18
 80060c2:	18ba      	adds	r2, r7, r2
 80060c4:	8812      	ldrh	r2, [r2, #0]
 80060c6:	4013      	ands	r3, r2
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	3302      	adds	r3, #2
 80060d2:	61bb      	str	r3, [r7, #24]
 80060d4:	e00e      	b.n	80060f4 <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2212      	movs	r2, #18
 80060e0:	18ba      	adds	r2, r7, r2
 80060e2:	8812      	ldrh	r2, [r2, #0]
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	4013      	ands	r3, r2
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	3301      	adds	r3, #1
 80060f2:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	3301      	adds	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	225a      	movs	r2, #90	@ 0x5a
 8006104:	5a9b      	ldrh	r3, [r3, r2]
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b299      	uxth	r1, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	225a      	movs	r2, #90	@ 0x5a
 8006110:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006114:	3301      	adds	r3, #1
 8006116:	d010      	beq.n	800613a <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006118:	f7fb fdf8 	bl	8001d0c <HAL_GetTick>
 800611c:	0002      	movs	r2, r0
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006124:	429a      	cmp	r2, r3
 8006126:	d302      	bcc.n	800612e <HAL_UARTEx_ReceiveToIdle+0x1f6>
 8006128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	d105      	bne.n	800613a <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2280      	movs	r2, #128	@ 0x80
 8006132:	2120      	movs	r1, #32
 8006134:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e017      	b.n	800616a <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	225a      	movs	r2, #90	@ 0x5a
 800613e:	5a9b      	ldrh	r3, [r3, r2]
 8006140:	b29b      	uxth	r3, r3
 8006142:	2b00      	cmp	r3, #0
 8006144:	d196      	bne.n	8006074 <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2258      	movs	r2, #88	@ 0x58
 800614a:	5a9a      	ldrh	r2, [r3, r2]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	215a      	movs	r1, #90	@ 0x5a
 8006150:	5a5b      	ldrh	r3, [r3, r1]
 8006152:	b29b      	uxth	r3, r3
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	b29a      	uxth	r2, r3
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2280      	movs	r2, #128	@ 0x80
 8006160:	2120      	movs	r1, #32
 8006162:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006164:	2300      	movs	r3, #0
 8006166:	e000      	b.n	800616a <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 8006168:	2302      	movs	r3, #2
  }
}
 800616a:	0018      	movs	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	b008      	add	sp, #32
 8006170:	bd80      	pop	{r7, pc}
 8006172:	46c0      	nop			@ (mov r8, r8)
 8006174:	000001ff 	.word	0x000001ff

08006178 <sniprintf>:
 8006178:	b40c      	push	{r2, r3}
 800617a:	b530      	push	{r4, r5, lr}
 800617c:	4b18      	ldr	r3, [pc, #96]	@ (80061e0 <sniprintf+0x68>)
 800617e:	000c      	movs	r4, r1
 8006180:	681d      	ldr	r5, [r3, #0]
 8006182:	b09d      	sub	sp, #116	@ 0x74
 8006184:	2900      	cmp	r1, #0
 8006186:	da08      	bge.n	800619a <sniprintf+0x22>
 8006188:	238b      	movs	r3, #139	@ 0x8b
 800618a:	2001      	movs	r0, #1
 800618c:	602b      	str	r3, [r5, #0]
 800618e:	4240      	negs	r0, r0
 8006190:	b01d      	add	sp, #116	@ 0x74
 8006192:	bc30      	pop	{r4, r5}
 8006194:	bc08      	pop	{r3}
 8006196:	b002      	add	sp, #8
 8006198:	4718      	bx	r3
 800619a:	2382      	movs	r3, #130	@ 0x82
 800619c:	466a      	mov	r2, sp
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	8293      	strh	r3, [r2, #20]
 80061a2:	2300      	movs	r3, #0
 80061a4:	9002      	str	r0, [sp, #8]
 80061a6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80061a8:	9006      	str	r0, [sp, #24]
 80061aa:	4299      	cmp	r1, r3
 80061ac:	d000      	beq.n	80061b0 <sniprintf+0x38>
 80061ae:	1e4b      	subs	r3, r1, #1
 80061b0:	9304      	str	r3, [sp, #16]
 80061b2:	9307      	str	r3, [sp, #28]
 80061b4:	2301      	movs	r3, #1
 80061b6:	466a      	mov	r2, sp
 80061b8:	425b      	negs	r3, r3
 80061ba:	82d3      	strh	r3, [r2, #22]
 80061bc:	0028      	movs	r0, r5
 80061be:	ab21      	add	r3, sp, #132	@ 0x84
 80061c0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80061c2:	a902      	add	r1, sp, #8
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	f000 fa0f 	bl	80065e8 <_svfiprintf_r>
 80061ca:	1c43      	adds	r3, r0, #1
 80061cc:	da01      	bge.n	80061d2 <sniprintf+0x5a>
 80061ce:	238b      	movs	r3, #139	@ 0x8b
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	2c00      	cmp	r4, #0
 80061d4:	d0dc      	beq.n	8006190 <sniprintf+0x18>
 80061d6:	2200      	movs	r2, #0
 80061d8:	9b02      	ldr	r3, [sp, #8]
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	e7d8      	b.n	8006190 <sniprintf+0x18>
 80061de:	46c0      	nop			@ (mov r8, r8)
 80061e0:	2000000c 	.word	0x2000000c

080061e4 <siprintf>:
 80061e4:	b40e      	push	{r1, r2, r3}
 80061e6:	b510      	push	{r4, lr}
 80061e8:	2400      	movs	r4, #0
 80061ea:	490c      	ldr	r1, [pc, #48]	@ (800621c <siprintf+0x38>)
 80061ec:	b09d      	sub	sp, #116	@ 0x74
 80061ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 80061f0:	9002      	str	r0, [sp, #8]
 80061f2:	9006      	str	r0, [sp, #24]
 80061f4:	9107      	str	r1, [sp, #28]
 80061f6:	9104      	str	r1, [sp, #16]
 80061f8:	4809      	ldr	r0, [pc, #36]	@ (8006220 <siprintf+0x3c>)
 80061fa:	490a      	ldr	r1, [pc, #40]	@ (8006224 <siprintf+0x40>)
 80061fc:	cb04      	ldmia	r3!, {r2}
 80061fe:	9105      	str	r1, [sp, #20]
 8006200:	6800      	ldr	r0, [r0, #0]
 8006202:	a902      	add	r1, sp, #8
 8006204:	9301      	str	r3, [sp, #4]
 8006206:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006208:	f000 f9ee 	bl	80065e8 <_svfiprintf_r>
 800620c:	9b02      	ldr	r3, [sp, #8]
 800620e:	701c      	strb	r4, [r3, #0]
 8006210:	b01d      	add	sp, #116	@ 0x74
 8006212:	bc10      	pop	{r4}
 8006214:	bc08      	pop	{r3}
 8006216:	b003      	add	sp, #12
 8006218:	4718      	bx	r3
 800621a:	46c0      	nop			@ (mov r8, r8)
 800621c:	7fffffff 	.word	0x7fffffff
 8006220:	2000000c 	.word	0x2000000c
 8006224:	ffff0208 	.word	0xffff0208

08006228 <_vsniprintf_r>:
 8006228:	b530      	push	{r4, r5, lr}
 800622a:	0005      	movs	r5, r0
 800622c:	0014      	movs	r4, r2
 800622e:	0008      	movs	r0, r1
 8006230:	001a      	movs	r2, r3
 8006232:	b09b      	sub	sp, #108	@ 0x6c
 8006234:	2c00      	cmp	r4, #0
 8006236:	da05      	bge.n	8006244 <_vsniprintf_r+0x1c>
 8006238:	238b      	movs	r3, #139	@ 0x8b
 800623a:	2001      	movs	r0, #1
 800623c:	602b      	str	r3, [r5, #0]
 800623e:	4240      	negs	r0, r0
 8006240:	b01b      	add	sp, #108	@ 0x6c
 8006242:	bd30      	pop	{r4, r5, pc}
 8006244:	2382      	movs	r3, #130	@ 0x82
 8006246:	4669      	mov	r1, sp
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	818b      	strh	r3, [r1, #12]
 800624c:	2100      	movs	r1, #0
 800624e:	9000      	str	r0, [sp, #0]
 8006250:	9119      	str	r1, [sp, #100]	@ 0x64
 8006252:	9004      	str	r0, [sp, #16]
 8006254:	428c      	cmp	r4, r1
 8006256:	d000      	beq.n	800625a <_vsniprintf_r+0x32>
 8006258:	1e61      	subs	r1, r4, #1
 800625a:	2301      	movs	r3, #1
 800625c:	9102      	str	r1, [sp, #8]
 800625e:	9105      	str	r1, [sp, #20]
 8006260:	4669      	mov	r1, sp
 8006262:	425b      	negs	r3, r3
 8006264:	81cb      	strh	r3, [r1, #14]
 8006266:	0028      	movs	r0, r5
 8006268:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800626a:	f000 f9bd 	bl	80065e8 <_svfiprintf_r>
 800626e:	1c43      	adds	r3, r0, #1
 8006270:	da01      	bge.n	8006276 <_vsniprintf_r+0x4e>
 8006272:	238b      	movs	r3, #139	@ 0x8b
 8006274:	602b      	str	r3, [r5, #0]
 8006276:	2c00      	cmp	r4, #0
 8006278:	d0e2      	beq.n	8006240 <_vsniprintf_r+0x18>
 800627a:	2200      	movs	r2, #0
 800627c:	9b00      	ldr	r3, [sp, #0]
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	e7de      	b.n	8006240 <_vsniprintf_r+0x18>
	...

08006284 <vsniprintf>:
 8006284:	b513      	push	{r0, r1, r4, lr}
 8006286:	4c04      	ldr	r4, [pc, #16]	@ (8006298 <vsniprintf+0x14>)
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	0013      	movs	r3, r2
 800628c:	000a      	movs	r2, r1
 800628e:	0001      	movs	r1, r0
 8006290:	6820      	ldr	r0, [r4, #0]
 8006292:	f7ff ffc9 	bl	8006228 <_vsniprintf_r>
 8006296:	bd16      	pop	{r1, r2, r4, pc}
 8006298:	2000000c 	.word	0x2000000c

0800629c <memset>:
 800629c:	0003      	movs	r3, r0
 800629e:	1882      	adds	r2, r0, r2
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d100      	bne.n	80062a6 <memset+0xa>
 80062a4:	4770      	bx	lr
 80062a6:	7019      	strb	r1, [r3, #0]
 80062a8:	3301      	adds	r3, #1
 80062aa:	e7f9      	b.n	80062a0 <memset+0x4>

080062ac <strstr>:
 80062ac:	780a      	ldrb	r2, [r1, #0]
 80062ae:	b530      	push	{r4, r5, lr}
 80062b0:	2a00      	cmp	r2, #0
 80062b2:	d10c      	bne.n	80062ce <strstr+0x22>
 80062b4:	bd30      	pop	{r4, r5, pc}
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d108      	bne.n	80062cc <strstr+0x20>
 80062ba:	2301      	movs	r3, #1
 80062bc:	5ccc      	ldrb	r4, [r1, r3]
 80062be:	2c00      	cmp	r4, #0
 80062c0:	d0f8      	beq.n	80062b4 <strstr+0x8>
 80062c2:	5cc5      	ldrb	r5, [r0, r3]
 80062c4:	42a5      	cmp	r5, r4
 80062c6:	d101      	bne.n	80062cc <strstr+0x20>
 80062c8:	3301      	adds	r3, #1
 80062ca:	e7f7      	b.n	80062bc <strstr+0x10>
 80062cc:	3001      	adds	r0, #1
 80062ce:	7803      	ldrb	r3, [r0, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f0      	bne.n	80062b6 <strstr+0xa>
 80062d4:	0018      	movs	r0, r3
 80062d6:	e7ed      	b.n	80062b4 <strstr+0x8>

080062d8 <__errno>:
 80062d8:	4b01      	ldr	r3, [pc, #4]	@ (80062e0 <__errno+0x8>)
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	4770      	bx	lr
 80062de:	46c0      	nop			@ (mov r8, r8)
 80062e0:	2000000c 	.word	0x2000000c

080062e4 <__libc_init_array>:
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	2600      	movs	r6, #0
 80062e8:	4c0c      	ldr	r4, [pc, #48]	@ (800631c <__libc_init_array+0x38>)
 80062ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006320 <__libc_init_array+0x3c>)
 80062ec:	1b64      	subs	r4, r4, r5
 80062ee:	10a4      	asrs	r4, r4, #2
 80062f0:	42a6      	cmp	r6, r4
 80062f2:	d109      	bne.n	8006308 <__libc_init_array+0x24>
 80062f4:	2600      	movs	r6, #0
 80062f6:	f000 fc61 	bl	8006bbc <_init>
 80062fa:	4c0a      	ldr	r4, [pc, #40]	@ (8006324 <__libc_init_array+0x40>)
 80062fc:	4d0a      	ldr	r5, [pc, #40]	@ (8006328 <__libc_init_array+0x44>)
 80062fe:	1b64      	subs	r4, r4, r5
 8006300:	10a4      	asrs	r4, r4, #2
 8006302:	42a6      	cmp	r6, r4
 8006304:	d105      	bne.n	8006312 <__libc_init_array+0x2e>
 8006306:	bd70      	pop	{r4, r5, r6, pc}
 8006308:	00b3      	lsls	r3, r6, #2
 800630a:	58eb      	ldr	r3, [r5, r3]
 800630c:	4798      	blx	r3
 800630e:	3601      	adds	r6, #1
 8006310:	e7ee      	b.n	80062f0 <__libc_init_array+0xc>
 8006312:	00b3      	lsls	r3, r6, #2
 8006314:	58eb      	ldr	r3, [r5, r3]
 8006316:	4798      	blx	r3
 8006318:	3601      	adds	r6, #1
 800631a:	e7f2      	b.n	8006302 <__libc_init_array+0x1e>
 800631c:	08006f48 	.word	0x08006f48
 8006320:	08006f48 	.word	0x08006f48
 8006324:	08006f4c 	.word	0x08006f4c
 8006328:	08006f48 	.word	0x08006f48

0800632c <__retarget_lock_acquire_recursive>:
 800632c:	4770      	bx	lr

0800632e <__retarget_lock_release_recursive>:
 800632e:	4770      	bx	lr

08006330 <_free_r>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	0005      	movs	r5, r0
 8006334:	1e0c      	subs	r4, r1, #0
 8006336:	d010      	beq.n	800635a <_free_r+0x2a>
 8006338:	3c04      	subs	r4, #4
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	da00      	bge.n	8006342 <_free_r+0x12>
 8006340:	18e4      	adds	r4, r4, r3
 8006342:	0028      	movs	r0, r5
 8006344:	f000 f8e0 	bl	8006508 <__malloc_lock>
 8006348:	4a1d      	ldr	r2, [pc, #116]	@ (80063c0 <_free_r+0x90>)
 800634a:	6813      	ldr	r3, [r2, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d105      	bne.n	800635c <_free_r+0x2c>
 8006350:	6063      	str	r3, [r4, #4]
 8006352:	6014      	str	r4, [r2, #0]
 8006354:	0028      	movs	r0, r5
 8006356:	f000 f8df 	bl	8006518 <__malloc_unlock>
 800635a:	bd70      	pop	{r4, r5, r6, pc}
 800635c:	42a3      	cmp	r3, r4
 800635e:	d908      	bls.n	8006372 <_free_r+0x42>
 8006360:	6820      	ldr	r0, [r4, #0]
 8006362:	1821      	adds	r1, r4, r0
 8006364:	428b      	cmp	r3, r1
 8006366:	d1f3      	bne.n	8006350 <_free_r+0x20>
 8006368:	6819      	ldr	r1, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	1809      	adds	r1, r1, r0
 800636e:	6021      	str	r1, [r4, #0]
 8006370:	e7ee      	b.n	8006350 <_free_r+0x20>
 8006372:	001a      	movs	r2, r3
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <_free_r+0x4e>
 800637a:	42a3      	cmp	r3, r4
 800637c:	d9f9      	bls.n	8006372 <_free_r+0x42>
 800637e:	6811      	ldr	r1, [r2, #0]
 8006380:	1850      	adds	r0, r2, r1
 8006382:	42a0      	cmp	r0, r4
 8006384:	d10b      	bne.n	800639e <_free_r+0x6e>
 8006386:	6820      	ldr	r0, [r4, #0]
 8006388:	1809      	adds	r1, r1, r0
 800638a:	1850      	adds	r0, r2, r1
 800638c:	6011      	str	r1, [r2, #0]
 800638e:	4283      	cmp	r3, r0
 8006390:	d1e0      	bne.n	8006354 <_free_r+0x24>
 8006392:	6818      	ldr	r0, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	1841      	adds	r1, r0, r1
 8006398:	6011      	str	r1, [r2, #0]
 800639a:	6053      	str	r3, [r2, #4]
 800639c:	e7da      	b.n	8006354 <_free_r+0x24>
 800639e:	42a0      	cmp	r0, r4
 80063a0:	d902      	bls.n	80063a8 <_free_r+0x78>
 80063a2:	230c      	movs	r3, #12
 80063a4:	602b      	str	r3, [r5, #0]
 80063a6:	e7d5      	b.n	8006354 <_free_r+0x24>
 80063a8:	6820      	ldr	r0, [r4, #0]
 80063aa:	1821      	adds	r1, r4, r0
 80063ac:	428b      	cmp	r3, r1
 80063ae:	d103      	bne.n	80063b8 <_free_r+0x88>
 80063b0:	6819      	ldr	r1, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	1809      	adds	r1, r1, r0
 80063b6:	6021      	str	r1, [r4, #0]
 80063b8:	6063      	str	r3, [r4, #4]
 80063ba:	6054      	str	r4, [r2, #4]
 80063bc:	e7ca      	b.n	8006354 <_free_r+0x24>
 80063be:	46c0      	nop			@ (mov r8, r8)
 80063c0:	200003c4 	.word	0x200003c4

080063c4 <sbrk_aligned>:
 80063c4:	b570      	push	{r4, r5, r6, lr}
 80063c6:	4e0f      	ldr	r6, [pc, #60]	@ (8006404 <sbrk_aligned+0x40>)
 80063c8:	000d      	movs	r5, r1
 80063ca:	6831      	ldr	r1, [r6, #0]
 80063cc:	0004      	movs	r4, r0
 80063ce:	2900      	cmp	r1, #0
 80063d0:	d102      	bne.n	80063d8 <sbrk_aligned+0x14>
 80063d2:	f000 fb95 	bl	8006b00 <_sbrk_r>
 80063d6:	6030      	str	r0, [r6, #0]
 80063d8:	0029      	movs	r1, r5
 80063da:	0020      	movs	r0, r4
 80063dc:	f000 fb90 	bl	8006b00 <_sbrk_r>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d103      	bne.n	80063ec <sbrk_aligned+0x28>
 80063e4:	2501      	movs	r5, #1
 80063e6:	426d      	negs	r5, r5
 80063e8:	0028      	movs	r0, r5
 80063ea:	bd70      	pop	{r4, r5, r6, pc}
 80063ec:	2303      	movs	r3, #3
 80063ee:	1cc5      	adds	r5, r0, #3
 80063f0:	439d      	bics	r5, r3
 80063f2:	42a8      	cmp	r0, r5
 80063f4:	d0f8      	beq.n	80063e8 <sbrk_aligned+0x24>
 80063f6:	1a29      	subs	r1, r5, r0
 80063f8:	0020      	movs	r0, r4
 80063fa:	f000 fb81 	bl	8006b00 <_sbrk_r>
 80063fe:	3001      	adds	r0, #1
 8006400:	d1f2      	bne.n	80063e8 <sbrk_aligned+0x24>
 8006402:	e7ef      	b.n	80063e4 <sbrk_aligned+0x20>
 8006404:	200003c0 	.word	0x200003c0

08006408 <_malloc_r>:
 8006408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800640a:	2203      	movs	r2, #3
 800640c:	1ccb      	adds	r3, r1, #3
 800640e:	4393      	bics	r3, r2
 8006410:	3308      	adds	r3, #8
 8006412:	0005      	movs	r5, r0
 8006414:	001f      	movs	r7, r3
 8006416:	2b0c      	cmp	r3, #12
 8006418:	d234      	bcs.n	8006484 <_malloc_r+0x7c>
 800641a:	270c      	movs	r7, #12
 800641c:	42b9      	cmp	r1, r7
 800641e:	d833      	bhi.n	8006488 <_malloc_r+0x80>
 8006420:	0028      	movs	r0, r5
 8006422:	f000 f871 	bl	8006508 <__malloc_lock>
 8006426:	4e37      	ldr	r6, [pc, #220]	@ (8006504 <_malloc_r+0xfc>)
 8006428:	6833      	ldr	r3, [r6, #0]
 800642a:	001c      	movs	r4, r3
 800642c:	2c00      	cmp	r4, #0
 800642e:	d12f      	bne.n	8006490 <_malloc_r+0x88>
 8006430:	0039      	movs	r1, r7
 8006432:	0028      	movs	r0, r5
 8006434:	f7ff ffc6 	bl	80063c4 <sbrk_aligned>
 8006438:	0004      	movs	r4, r0
 800643a:	1c43      	adds	r3, r0, #1
 800643c:	d15f      	bne.n	80064fe <_malloc_r+0xf6>
 800643e:	6834      	ldr	r4, [r6, #0]
 8006440:	9400      	str	r4, [sp, #0]
 8006442:	9b00      	ldr	r3, [sp, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d14a      	bne.n	80064de <_malloc_r+0xd6>
 8006448:	2c00      	cmp	r4, #0
 800644a:	d052      	beq.n	80064f2 <_malloc_r+0xea>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	0028      	movs	r0, r5
 8006450:	18e3      	adds	r3, r4, r3
 8006452:	9900      	ldr	r1, [sp, #0]
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	f000 fb53 	bl	8006b00 <_sbrk_r>
 800645a:	9b01      	ldr	r3, [sp, #4]
 800645c:	4283      	cmp	r3, r0
 800645e:	d148      	bne.n	80064f2 <_malloc_r+0xea>
 8006460:	6823      	ldr	r3, [r4, #0]
 8006462:	0028      	movs	r0, r5
 8006464:	1aff      	subs	r7, r7, r3
 8006466:	0039      	movs	r1, r7
 8006468:	f7ff ffac 	bl	80063c4 <sbrk_aligned>
 800646c:	3001      	adds	r0, #1
 800646e:	d040      	beq.n	80064f2 <_malloc_r+0xea>
 8006470:	6823      	ldr	r3, [r4, #0]
 8006472:	19db      	adds	r3, r3, r7
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	6833      	ldr	r3, [r6, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	2a00      	cmp	r2, #0
 800647c:	d133      	bne.n	80064e6 <_malloc_r+0xde>
 800647e:	9b00      	ldr	r3, [sp, #0]
 8006480:	6033      	str	r3, [r6, #0]
 8006482:	e019      	b.n	80064b8 <_malloc_r+0xb0>
 8006484:	2b00      	cmp	r3, #0
 8006486:	dac9      	bge.n	800641c <_malloc_r+0x14>
 8006488:	230c      	movs	r3, #12
 800648a:	602b      	str	r3, [r5, #0]
 800648c:	2000      	movs	r0, #0
 800648e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006490:	6821      	ldr	r1, [r4, #0]
 8006492:	1bc9      	subs	r1, r1, r7
 8006494:	d420      	bmi.n	80064d8 <_malloc_r+0xd0>
 8006496:	290b      	cmp	r1, #11
 8006498:	d90a      	bls.n	80064b0 <_malloc_r+0xa8>
 800649a:	19e2      	adds	r2, r4, r7
 800649c:	6027      	str	r7, [r4, #0]
 800649e:	42a3      	cmp	r3, r4
 80064a0:	d104      	bne.n	80064ac <_malloc_r+0xa4>
 80064a2:	6032      	str	r2, [r6, #0]
 80064a4:	6863      	ldr	r3, [r4, #4]
 80064a6:	6011      	str	r1, [r2, #0]
 80064a8:	6053      	str	r3, [r2, #4]
 80064aa:	e005      	b.n	80064b8 <_malloc_r+0xb0>
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	e7f9      	b.n	80064a4 <_malloc_r+0x9c>
 80064b0:	6862      	ldr	r2, [r4, #4]
 80064b2:	42a3      	cmp	r3, r4
 80064b4:	d10e      	bne.n	80064d4 <_malloc_r+0xcc>
 80064b6:	6032      	str	r2, [r6, #0]
 80064b8:	0028      	movs	r0, r5
 80064ba:	f000 f82d 	bl	8006518 <__malloc_unlock>
 80064be:	0020      	movs	r0, r4
 80064c0:	2207      	movs	r2, #7
 80064c2:	300b      	adds	r0, #11
 80064c4:	1d23      	adds	r3, r4, #4
 80064c6:	4390      	bics	r0, r2
 80064c8:	1ac2      	subs	r2, r0, r3
 80064ca:	4298      	cmp	r0, r3
 80064cc:	d0df      	beq.n	800648e <_malloc_r+0x86>
 80064ce:	1a1b      	subs	r3, r3, r0
 80064d0:	50a3      	str	r3, [r4, r2]
 80064d2:	e7dc      	b.n	800648e <_malloc_r+0x86>
 80064d4:	605a      	str	r2, [r3, #4]
 80064d6:	e7ef      	b.n	80064b8 <_malloc_r+0xb0>
 80064d8:	0023      	movs	r3, r4
 80064da:	6864      	ldr	r4, [r4, #4]
 80064dc:	e7a6      	b.n	800642c <_malloc_r+0x24>
 80064de:	9c00      	ldr	r4, [sp, #0]
 80064e0:	6863      	ldr	r3, [r4, #4]
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	e7ad      	b.n	8006442 <_malloc_r+0x3a>
 80064e6:	001a      	movs	r2, r3
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	42a3      	cmp	r3, r4
 80064ec:	d1fb      	bne.n	80064e6 <_malloc_r+0xde>
 80064ee:	2300      	movs	r3, #0
 80064f0:	e7da      	b.n	80064a8 <_malloc_r+0xa0>
 80064f2:	230c      	movs	r3, #12
 80064f4:	0028      	movs	r0, r5
 80064f6:	602b      	str	r3, [r5, #0]
 80064f8:	f000 f80e 	bl	8006518 <__malloc_unlock>
 80064fc:	e7c6      	b.n	800648c <_malloc_r+0x84>
 80064fe:	6007      	str	r7, [r0, #0]
 8006500:	e7da      	b.n	80064b8 <_malloc_r+0xb0>
 8006502:	46c0      	nop			@ (mov r8, r8)
 8006504:	200003c4 	.word	0x200003c4

08006508 <__malloc_lock>:
 8006508:	b510      	push	{r4, lr}
 800650a:	4802      	ldr	r0, [pc, #8]	@ (8006514 <__malloc_lock+0xc>)
 800650c:	f7ff ff0e 	bl	800632c <__retarget_lock_acquire_recursive>
 8006510:	bd10      	pop	{r4, pc}
 8006512:	46c0      	nop			@ (mov r8, r8)
 8006514:	200003bc 	.word	0x200003bc

08006518 <__malloc_unlock>:
 8006518:	b510      	push	{r4, lr}
 800651a:	4802      	ldr	r0, [pc, #8]	@ (8006524 <__malloc_unlock+0xc>)
 800651c:	f7ff ff07 	bl	800632e <__retarget_lock_release_recursive>
 8006520:	bd10      	pop	{r4, pc}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	200003bc 	.word	0x200003bc

08006528 <__ssputs_r>:
 8006528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800652a:	688e      	ldr	r6, [r1, #8]
 800652c:	b085      	sub	sp, #20
 800652e:	001f      	movs	r7, r3
 8006530:	000c      	movs	r4, r1
 8006532:	680b      	ldr	r3, [r1, #0]
 8006534:	9002      	str	r0, [sp, #8]
 8006536:	9203      	str	r2, [sp, #12]
 8006538:	42be      	cmp	r6, r7
 800653a:	d830      	bhi.n	800659e <__ssputs_r+0x76>
 800653c:	210c      	movs	r1, #12
 800653e:	5e62      	ldrsh	r2, [r4, r1]
 8006540:	2190      	movs	r1, #144	@ 0x90
 8006542:	00c9      	lsls	r1, r1, #3
 8006544:	420a      	tst	r2, r1
 8006546:	d028      	beq.n	800659a <__ssputs_r+0x72>
 8006548:	2003      	movs	r0, #3
 800654a:	6921      	ldr	r1, [r4, #16]
 800654c:	1a5b      	subs	r3, r3, r1
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	6963      	ldr	r3, [r4, #20]
 8006552:	4343      	muls	r3, r0
 8006554:	9801      	ldr	r0, [sp, #4]
 8006556:	0fdd      	lsrs	r5, r3, #31
 8006558:	18ed      	adds	r5, r5, r3
 800655a:	1c7b      	adds	r3, r7, #1
 800655c:	181b      	adds	r3, r3, r0
 800655e:	106d      	asrs	r5, r5, #1
 8006560:	42ab      	cmp	r3, r5
 8006562:	d900      	bls.n	8006566 <__ssputs_r+0x3e>
 8006564:	001d      	movs	r5, r3
 8006566:	0552      	lsls	r2, r2, #21
 8006568:	d528      	bpl.n	80065bc <__ssputs_r+0x94>
 800656a:	0029      	movs	r1, r5
 800656c:	9802      	ldr	r0, [sp, #8]
 800656e:	f7ff ff4b 	bl	8006408 <_malloc_r>
 8006572:	1e06      	subs	r6, r0, #0
 8006574:	d02c      	beq.n	80065d0 <__ssputs_r+0xa8>
 8006576:	9a01      	ldr	r2, [sp, #4]
 8006578:	6921      	ldr	r1, [r4, #16]
 800657a:	f000 fade 	bl	8006b3a <memcpy>
 800657e:	89a2      	ldrh	r2, [r4, #12]
 8006580:	4b18      	ldr	r3, [pc, #96]	@ (80065e4 <__ssputs_r+0xbc>)
 8006582:	401a      	ands	r2, r3
 8006584:	2380      	movs	r3, #128	@ 0x80
 8006586:	4313      	orrs	r3, r2
 8006588:	81a3      	strh	r3, [r4, #12]
 800658a:	9b01      	ldr	r3, [sp, #4]
 800658c:	6126      	str	r6, [r4, #16]
 800658e:	18f6      	adds	r6, r6, r3
 8006590:	6026      	str	r6, [r4, #0]
 8006592:	003e      	movs	r6, r7
 8006594:	6165      	str	r5, [r4, #20]
 8006596:	1aed      	subs	r5, r5, r3
 8006598:	60a5      	str	r5, [r4, #8]
 800659a:	42be      	cmp	r6, r7
 800659c:	d900      	bls.n	80065a0 <__ssputs_r+0x78>
 800659e:	003e      	movs	r6, r7
 80065a0:	0032      	movs	r2, r6
 80065a2:	9903      	ldr	r1, [sp, #12]
 80065a4:	6820      	ldr	r0, [r4, #0]
 80065a6:	f000 fa99 	bl	8006adc <memmove>
 80065aa:	2000      	movs	r0, #0
 80065ac:	68a3      	ldr	r3, [r4, #8]
 80065ae:	1b9b      	subs	r3, r3, r6
 80065b0:	60a3      	str	r3, [r4, #8]
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	199b      	adds	r3, r3, r6
 80065b6:	6023      	str	r3, [r4, #0]
 80065b8:	b005      	add	sp, #20
 80065ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065bc:	002a      	movs	r2, r5
 80065be:	9802      	ldr	r0, [sp, #8]
 80065c0:	f000 fac4 	bl	8006b4c <_realloc_r>
 80065c4:	1e06      	subs	r6, r0, #0
 80065c6:	d1e0      	bne.n	800658a <__ssputs_r+0x62>
 80065c8:	6921      	ldr	r1, [r4, #16]
 80065ca:	9802      	ldr	r0, [sp, #8]
 80065cc:	f7ff feb0 	bl	8006330 <_free_r>
 80065d0:	230c      	movs	r3, #12
 80065d2:	2001      	movs	r0, #1
 80065d4:	9a02      	ldr	r2, [sp, #8]
 80065d6:	4240      	negs	r0, r0
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	89a2      	ldrh	r2, [r4, #12]
 80065dc:	3334      	adds	r3, #52	@ 0x34
 80065de:	4313      	orrs	r3, r2
 80065e0:	81a3      	strh	r3, [r4, #12]
 80065e2:	e7e9      	b.n	80065b8 <__ssputs_r+0x90>
 80065e4:	fffffb7f 	.word	0xfffffb7f

080065e8 <_svfiprintf_r>:
 80065e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ea:	b0a1      	sub	sp, #132	@ 0x84
 80065ec:	9003      	str	r0, [sp, #12]
 80065ee:	001d      	movs	r5, r3
 80065f0:	898b      	ldrh	r3, [r1, #12]
 80065f2:	000f      	movs	r7, r1
 80065f4:	0016      	movs	r6, r2
 80065f6:	061b      	lsls	r3, r3, #24
 80065f8:	d511      	bpl.n	800661e <_svfiprintf_r+0x36>
 80065fa:	690b      	ldr	r3, [r1, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d10e      	bne.n	800661e <_svfiprintf_r+0x36>
 8006600:	2140      	movs	r1, #64	@ 0x40
 8006602:	f7ff ff01 	bl	8006408 <_malloc_r>
 8006606:	6038      	str	r0, [r7, #0]
 8006608:	6138      	str	r0, [r7, #16]
 800660a:	2800      	cmp	r0, #0
 800660c:	d105      	bne.n	800661a <_svfiprintf_r+0x32>
 800660e:	230c      	movs	r3, #12
 8006610:	9a03      	ldr	r2, [sp, #12]
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	2001      	movs	r0, #1
 8006616:	4240      	negs	r0, r0
 8006618:	e0cf      	b.n	80067ba <_svfiprintf_r+0x1d2>
 800661a:	2340      	movs	r3, #64	@ 0x40
 800661c:	617b      	str	r3, [r7, #20]
 800661e:	2300      	movs	r3, #0
 8006620:	ac08      	add	r4, sp, #32
 8006622:	6163      	str	r3, [r4, #20]
 8006624:	3320      	adds	r3, #32
 8006626:	7663      	strb	r3, [r4, #25]
 8006628:	3310      	adds	r3, #16
 800662a:	76a3      	strb	r3, [r4, #26]
 800662c:	9507      	str	r5, [sp, #28]
 800662e:	0035      	movs	r5, r6
 8006630:	782b      	ldrb	r3, [r5, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d001      	beq.n	800663a <_svfiprintf_r+0x52>
 8006636:	2b25      	cmp	r3, #37	@ 0x25
 8006638:	d148      	bne.n	80066cc <_svfiprintf_r+0xe4>
 800663a:	1bab      	subs	r3, r5, r6
 800663c:	9305      	str	r3, [sp, #20]
 800663e:	42b5      	cmp	r5, r6
 8006640:	d00b      	beq.n	800665a <_svfiprintf_r+0x72>
 8006642:	0032      	movs	r2, r6
 8006644:	0039      	movs	r1, r7
 8006646:	9803      	ldr	r0, [sp, #12]
 8006648:	f7ff ff6e 	bl	8006528 <__ssputs_r>
 800664c:	3001      	adds	r0, #1
 800664e:	d100      	bne.n	8006652 <_svfiprintf_r+0x6a>
 8006650:	e0ae      	b.n	80067b0 <_svfiprintf_r+0x1c8>
 8006652:	6963      	ldr	r3, [r4, #20]
 8006654:	9a05      	ldr	r2, [sp, #20]
 8006656:	189b      	adds	r3, r3, r2
 8006658:	6163      	str	r3, [r4, #20]
 800665a:	782b      	ldrb	r3, [r5, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d100      	bne.n	8006662 <_svfiprintf_r+0x7a>
 8006660:	e0a6      	b.n	80067b0 <_svfiprintf_r+0x1c8>
 8006662:	2201      	movs	r2, #1
 8006664:	2300      	movs	r3, #0
 8006666:	4252      	negs	r2, r2
 8006668:	6062      	str	r2, [r4, #4]
 800666a:	a904      	add	r1, sp, #16
 800666c:	3254      	adds	r2, #84	@ 0x54
 800666e:	1852      	adds	r2, r2, r1
 8006670:	1c6e      	adds	r6, r5, #1
 8006672:	6023      	str	r3, [r4, #0]
 8006674:	60e3      	str	r3, [r4, #12]
 8006676:	60a3      	str	r3, [r4, #8]
 8006678:	7013      	strb	r3, [r2, #0]
 800667a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800667c:	4b54      	ldr	r3, [pc, #336]	@ (80067d0 <_svfiprintf_r+0x1e8>)
 800667e:	2205      	movs	r2, #5
 8006680:	0018      	movs	r0, r3
 8006682:	7831      	ldrb	r1, [r6, #0]
 8006684:	9305      	str	r3, [sp, #20]
 8006686:	f000 fa4d 	bl	8006b24 <memchr>
 800668a:	1c75      	adds	r5, r6, #1
 800668c:	2800      	cmp	r0, #0
 800668e:	d11f      	bne.n	80066d0 <_svfiprintf_r+0xe8>
 8006690:	6822      	ldr	r2, [r4, #0]
 8006692:	06d3      	lsls	r3, r2, #27
 8006694:	d504      	bpl.n	80066a0 <_svfiprintf_r+0xb8>
 8006696:	2353      	movs	r3, #83	@ 0x53
 8006698:	a904      	add	r1, sp, #16
 800669a:	185b      	adds	r3, r3, r1
 800669c:	2120      	movs	r1, #32
 800669e:	7019      	strb	r1, [r3, #0]
 80066a0:	0713      	lsls	r3, r2, #28
 80066a2:	d504      	bpl.n	80066ae <_svfiprintf_r+0xc6>
 80066a4:	2353      	movs	r3, #83	@ 0x53
 80066a6:	a904      	add	r1, sp, #16
 80066a8:	185b      	adds	r3, r3, r1
 80066aa:	212b      	movs	r1, #43	@ 0x2b
 80066ac:	7019      	strb	r1, [r3, #0]
 80066ae:	7833      	ldrb	r3, [r6, #0]
 80066b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80066b2:	d016      	beq.n	80066e2 <_svfiprintf_r+0xfa>
 80066b4:	0035      	movs	r5, r6
 80066b6:	2100      	movs	r1, #0
 80066b8:	200a      	movs	r0, #10
 80066ba:	68e3      	ldr	r3, [r4, #12]
 80066bc:	782a      	ldrb	r2, [r5, #0]
 80066be:	1c6e      	adds	r6, r5, #1
 80066c0:	3a30      	subs	r2, #48	@ 0x30
 80066c2:	2a09      	cmp	r2, #9
 80066c4:	d950      	bls.n	8006768 <_svfiprintf_r+0x180>
 80066c6:	2900      	cmp	r1, #0
 80066c8:	d111      	bne.n	80066ee <_svfiprintf_r+0x106>
 80066ca:	e017      	b.n	80066fc <_svfiprintf_r+0x114>
 80066cc:	3501      	adds	r5, #1
 80066ce:	e7af      	b.n	8006630 <_svfiprintf_r+0x48>
 80066d0:	9b05      	ldr	r3, [sp, #20]
 80066d2:	6822      	ldr	r2, [r4, #0]
 80066d4:	1ac0      	subs	r0, r0, r3
 80066d6:	2301      	movs	r3, #1
 80066d8:	4083      	lsls	r3, r0
 80066da:	4313      	orrs	r3, r2
 80066dc:	002e      	movs	r6, r5
 80066de:	6023      	str	r3, [r4, #0]
 80066e0:	e7cc      	b.n	800667c <_svfiprintf_r+0x94>
 80066e2:	9b07      	ldr	r3, [sp, #28]
 80066e4:	1d19      	adds	r1, r3, #4
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	9107      	str	r1, [sp, #28]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	db01      	blt.n	80066f2 <_svfiprintf_r+0x10a>
 80066ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066f0:	e004      	b.n	80066fc <_svfiprintf_r+0x114>
 80066f2:	425b      	negs	r3, r3
 80066f4:	60e3      	str	r3, [r4, #12]
 80066f6:	2302      	movs	r3, #2
 80066f8:	4313      	orrs	r3, r2
 80066fa:	6023      	str	r3, [r4, #0]
 80066fc:	782b      	ldrb	r3, [r5, #0]
 80066fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8006700:	d10c      	bne.n	800671c <_svfiprintf_r+0x134>
 8006702:	786b      	ldrb	r3, [r5, #1]
 8006704:	2b2a      	cmp	r3, #42	@ 0x2a
 8006706:	d134      	bne.n	8006772 <_svfiprintf_r+0x18a>
 8006708:	9b07      	ldr	r3, [sp, #28]
 800670a:	3502      	adds	r5, #2
 800670c:	1d1a      	adds	r2, r3, #4
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	9207      	str	r2, [sp, #28]
 8006712:	2b00      	cmp	r3, #0
 8006714:	da01      	bge.n	800671a <_svfiprintf_r+0x132>
 8006716:	2301      	movs	r3, #1
 8006718:	425b      	negs	r3, r3
 800671a:	9309      	str	r3, [sp, #36]	@ 0x24
 800671c:	4e2d      	ldr	r6, [pc, #180]	@ (80067d4 <_svfiprintf_r+0x1ec>)
 800671e:	2203      	movs	r2, #3
 8006720:	0030      	movs	r0, r6
 8006722:	7829      	ldrb	r1, [r5, #0]
 8006724:	f000 f9fe 	bl	8006b24 <memchr>
 8006728:	2800      	cmp	r0, #0
 800672a:	d006      	beq.n	800673a <_svfiprintf_r+0x152>
 800672c:	2340      	movs	r3, #64	@ 0x40
 800672e:	1b80      	subs	r0, r0, r6
 8006730:	4083      	lsls	r3, r0
 8006732:	6822      	ldr	r2, [r4, #0]
 8006734:	3501      	adds	r5, #1
 8006736:	4313      	orrs	r3, r2
 8006738:	6023      	str	r3, [r4, #0]
 800673a:	7829      	ldrb	r1, [r5, #0]
 800673c:	2206      	movs	r2, #6
 800673e:	4826      	ldr	r0, [pc, #152]	@ (80067d8 <_svfiprintf_r+0x1f0>)
 8006740:	1c6e      	adds	r6, r5, #1
 8006742:	7621      	strb	r1, [r4, #24]
 8006744:	f000 f9ee 	bl	8006b24 <memchr>
 8006748:	2800      	cmp	r0, #0
 800674a:	d038      	beq.n	80067be <_svfiprintf_r+0x1d6>
 800674c:	4b23      	ldr	r3, [pc, #140]	@ (80067dc <_svfiprintf_r+0x1f4>)
 800674e:	2b00      	cmp	r3, #0
 8006750:	d122      	bne.n	8006798 <_svfiprintf_r+0x1b0>
 8006752:	2207      	movs	r2, #7
 8006754:	9b07      	ldr	r3, [sp, #28]
 8006756:	3307      	adds	r3, #7
 8006758:	4393      	bics	r3, r2
 800675a:	3308      	adds	r3, #8
 800675c:	9307      	str	r3, [sp, #28]
 800675e:	6963      	ldr	r3, [r4, #20]
 8006760:	9a04      	ldr	r2, [sp, #16]
 8006762:	189b      	adds	r3, r3, r2
 8006764:	6163      	str	r3, [r4, #20]
 8006766:	e762      	b.n	800662e <_svfiprintf_r+0x46>
 8006768:	4343      	muls	r3, r0
 800676a:	0035      	movs	r5, r6
 800676c:	2101      	movs	r1, #1
 800676e:	189b      	adds	r3, r3, r2
 8006770:	e7a4      	b.n	80066bc <_svfiprintf_r+0xd4>
 8006772:	2300      	movs	r3, #0
 8006774:	200a      	movs	r0, #10
 8006776:	0019      	movs	r1, r3
 8006778:	3501      	adds	r5, #1
 800677a:	6063      	str	r3, [r4, #4]
 800677c:	782a      	ldrb	r2, [r5, #0]
 800677e:	1c6e      	adds	r6, r5, #1
 8006780:	3a30      	subs	r2, #48	@ 0x30
 8006782:	2a09      	cmp	r2, #9
 8006784:	d903      	bls.n	800678e <_svfiprintf_r+0x1a6>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0c8      	beq.n	800671c <_svfiprintf_r+0x134>
 800678a:	9109      	str	r1, [sp, #36]	@ 0x24
 800678c:	e7c6      	b.n	800671c <_svfiprintf_r+0x134>
 800678e:	4341      	muls	r1, r0
 8006790:	0035      	movs	r5, r6
 8006792:	2301      	movs	r3, #1
 8006794:	1889      	adds	r1, r1, r2
 8006796:	e7f1      	b.n	800677c <_svfiprintf_r+0x194>
 8006798:	aa07      	add	r2, sp, #28
 800679a:	9200      	str	r2, [sp, #0]
 800679c:	0021      	movs	r1, r4
 800679e:	003a      	movs	r2, r7
 80067a0:	4b0f      	ldr	r3, [pc, #60]	@ (80067e0 <_svfiprintf_r+0x1f8>)
 80067a2:	9803      	ldr	r0, [sp, #12]
 80067a4:	e000      	b.n	80067a8 <_svfiprintf_r+0x1c0>
 80067a6:	bf00      	nop
 80067a8:	9004      	str	r0, [sp, #16]
 80067aa:	9b04      	ldr	r3, [sp, #16]
 80067ac:	3301      	adds	r3, #1
 80067ae:	d1d6      	bne.n	800675e <_svfiprintf_r+0x176>
 80067b0:	89bb      	ldrh	r3, [r7, #12]
 80067b2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80067b4:	065b      	lsls	r3, r3, #25
 80067b6:	d500      	bpl.n	80067ba <_svfiprintf_r+0x1d2>
 80067b8:	e72c      	b.n	8006614 <_svfiprintf_r+0x2c>
 80067ba:	b021      	add	sp, #132	@ 0x84
 80067bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067be:	aa07      	add	r2, sp, #28
 80067c0:	9200      	str	r2, [sp, #0]
 80067c2:	0021      	movs	r1, r4
 80067c4:	003a      	movs	r2, r7
 80067c6:	4b06      	ldr	r3, [pc, #24]	@ (80067e0 <_svfiprintf_r+0x1f8>)
 80067c8:	9803      	ldr	r0, [sp, #12]
 80067ca:	f000 f87b 	bl	80068c4 <_printf_i>
 80067ce:	e7eb      	b.n	80067a8 <_svfiprintf_r+0x1c0>
 80067d0:	08006f0c 	.word	0x08006f0c
 80067d4:	08006f12 	.word	0x08006f12
 80067d8:	08006f16 	.word	0x08006f16
 80067dc:	00000000 	.word	0x00000000
 80067e0:	08006529 	.word	0x08006529

080067e4 <_printf_common>:
 80067e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067e6:	0016      	movs	r6, r2
 80067e8:	9301      	str	r3, [sp, #4]
 80067ea:	688a      	ldr	r2, [r1, #8]
 80067ec:	690b      	ldr	r3, [r1, #16]
 80067ee:	000c      	movs	r4, r1
 80067f0:	9000      	str	r0, [sp, #0]
 80067f2:	4293      	cmp	r3, r2
 80067f4:	da00      	bge.n	80067f8 <_printf_common+0x14>
 80067f6:	0013      	movs	r3, r2
 80067f8:	0022      	movs	r2, r4
 80067fa:	6033      	str	r3, [r6, #0]
 80067fc:	3243      	adds	r2, #67	@ 0x43
 80067fe:	7812      	ldrb	r2, [r2, #0]
 8006800:	2a00      	cmp	r2, #0
 8006802:	d001      	beq.n	8006808 <_printf_common+0x24>
 8006804:	3301      	adds	r3, #1
 8006806:	6033      	str	r3, [r6, #0]
 8006808:	6823      	ldr	r3, [r4, #0]
 800680a:	069b      	lsls	r3, r3, #26
 800680c:	d502      	bpl.n	8006814 <_printf_common+0x30>
 800680e:	6833      	ldr	r3, [r6, #0]
 8006810:	3302      	adds	r3, #2
 8006812:	6033      	str	r3, [r6, #0]
 8006814:	6822      	ldr	r2, [r4, #0]
 8006816:	2306      	movs	r3, #6
 8006818:	0015      	movs	r5, r2
 800681a:	401d      	ands	r5, r3
 800681c:	421a      	tst	r2, r3
 800681e:	d027      	beq.n	8006870 <_printf_common+0x8c>
 8006820:	0023      	movs	r3, r4
 8006822:	3343      	adds	r3, #67	@ 0x43
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	1e5a      	subs	r2, r3, #1
 8006828:	4193      	sbcs	r3, r2
 800682a:	6822      	ldr	r2, [r4, #0]
 800682c:	0692      	lsls	r2, r2, #26
 800682e:	d430      	bmi.n	8006892 <_printf_common+0xae>
 8006830:	0022      	movs	r2, r4
 8006832:	9901      	ldr	r1, [sp, #4]
 8006834:	9800      	ldr	r0, [sp, #0]
 8006836:	9d08      	ldr	r5, [sp, #32]
 8006838:	3243      	adds	r2, #67	@ 0x43
 800683a:	47a8      	blx	r5
 800683c:	3001      	adds	r0, #1
 800683e:	d025      	beq.n	800688c <_printf_common+0xa8>
 8006840:	2206      	movs	r2, #6
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	2500      	movs	r5, #0
 8006846:	4013      	ands	r3, r2
 8006848:	2b04      	cmp	r3, #4
 800684a:	d105      	bne.n	8006858 <_printf_common+0x74>
 800684c:	6833      	ldr	r3, [r6, #0]
 800684e:	68e5      	ldr	r5, [r4, #12]
 8006850:	1aed      	subs	r5, r5, r3
 8006852:	43eb      	mvns	r3, r5
 8006854:	17db      	asrs	r3, r3, #31
 8006856:	401d      	ands	r5, r3
 8006858:	68a3      	ldr	r3, [r4, #8]
 800685a:	6922      	ldr	r2, [r4, #16]
 800685c:	4293      	cmp	r3, r2
 800685e:	dd01      	ble.n	8006864 <_printf_common+0x80>
 8006860:	1a9b      	subs	r3, r3, r2
 8006862:	18ed      	adds	r5, r5, r3
 8006864:	2600      	movs	r6, #0
 8006866:	42b5      	cmp	r5, r6
 8006868:	d120      	bne.n	80068ac <_printf_common+0xc8>
 800686a:	2000      	movs	r0, #0
 800686c:	e010      	b.n	8006890 <_printf_common+0xac>
 800686e:	3501      	adds	r5, #1
 8006870:	68e3      	ldr	r3, [r4, #12]
 8006872:	6832      	ldr	r2, [r6, #0]
 8006874:	1a9b      	subs	r3, r3, r2
 8006876:	42ab      	cmp	r3, r5
 8006878:	ddd2      	ble.n	8006820 <_printf_common+0x3c>
 800687a:	0022      	movs	r2, r4
 800687c:	2301      	movs	r3, #1
 800687e:	9901      	ldr	r1, [sp, #4]
 8006880:	9800      	ldr	r0, [sp, #0]
 8006882:	9f08      	ldr	r7, [sp, #32]
 8006884:	3219      	adds	r2, #25
 8006886:	47b8      	blx	r7
 8006888:	3001      	adds	r0, #1
 800688a:	d1f0      	bne.n	800686e <_printf_common+0x8a>
 800688c:	2001      	movs	r0, #1
 800688e:	4240      	negs	r0, r0
 8006890:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006892:	2030      	movs	r0, #48	@ 0x30
 8006894:	18e1      	adds	r1, r4, r3
 8006896:	3143      	adds	r1, #67	@ 0x43
 8006898:	7008      	strb	r0, [r1, #0]
 800689a:	0021      	movs	r1, r4
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	3145      	adds	r1, #69	@ 0x45
 80068a0:	7809      	ldrb	r1, [r1, #0]
 80068a2:	18a2      	adds	r2, r4, r2
 80068a4:	3243      	adds	r2, #67	@ 0x43
 80068a6:	3302      	adds	r3, #2
 80068a8:	7011      	strb	r1, [r2, #0]
 80068aa:	e7c1      	b.n	8006830 <_printf_common+0x4c>
 80068ac:	0022      	movs	r2, r4
 80068ae:	2301      	movs	r3, #1
 80068b0:	9901      	ldr	r1, [sp, #4]
 80068b2:	9800      	ldr	r0, [sp, #0]
 80068b4:	9f08      	ldr	r7, [sp, #32]
 80068b6:	321a      	adds	r2, #26
 80068b8:	47b8      	blx	r7
 80068ba:	3001      	adds	r0, #1
 80068bc:	d0e6      	beq.n	800688c <_printf_common+0xa8>
 80068be:	3601      	adds	r6, #1
 80068c0:	e7d1      	b.n	8006866 <_printf_common+0x82>
	...

080068c4 <_printf_i>:
 80068c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068c6:	b08b      	sub	sp, #44	@ 0x2c
 80068c8:	9206      	str	r2, [sp, #24]
 80068ca:	000a      	movs	r2, r1
 80068cc:	3243      	adds	r2, #67	@ 0x43
 80068ce:	9307      	str	r3, [sp, #28]
 80068d0:	9005      	str	r0, [sp, #20]
 80068d2:	9203      	str	r2, [sp, #12]
 80068d4:	7e0a      	ldrb	r2, [r1, #24]
 80068d6:	000c      	movs	r4, r1
 80068d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80068da:	2a78      	cmp	r2, #120	@ 0x78
 80068dc:	d809      	bhi.n	80068f2 <_printf_i+0x2e>
 80068de:	2a62      	cmp	r2, #98	@ 0x62
 80068e0:	d80b      	bhi.n	80068fa <_printf_i+0x36>
 80068e2:	2a00      	cmp	r2, #0
 80068e4:	d100      	bne.n	80068e8 <_printf_i+0x24>
 80068e6:	e0ba      	b.n	8006a5e <_printf_i+0x19a>
 80068e8:	497a      	ldr	r1, [pc, #488]	@ (8006ad4 <_printf_i+0x210>)
 80068ea:	9104      	str	r1, [sp, #16]
 80068ec:	2a58      	cmp	r2, #88	@ 0x58
 80068ee:	d100      	bne.n	80068f2 <_printf_i+0x2e>
 80068f0:	e08e      	b.n	8006a10 <_printf_i+0x14c>
 80068f2:	0025      	movs	r5, r4
 80068f4:	3542      	adds	r5, #66	@ 0x42
 80068f6:	702a      	strb	r2, [r5, #0]
 80068f8:	e022      	b.n	8006940 <_printf_i+0x7c>
 80068fa:	0010      	movs	r0, r2
 80068fc:	3863      	subs	r0, #99	@ 0x63
 80068fe:	2815      	cmp	r0, #21
 8006900:	d8f7      	bhi.n	80068f2 <_printf_i+0x2e>
 8006902:	f7f9 fc09 	bl	8000118 <__gnu_thumb1_case_shi>
 8006906:	0016      	.short	0x0016
 8006908:	fff6001f 	.word	0xfff6001f
 800690c:	fff6fff6 	.word	0xfff6fff6
 8006910:	001ffff6 	.word	0x001ffff6
 8006914:	fff6fff6 	.word	0xfff6fff6
 8006918:	fff6fff6 	.word	0xfff6fff6
 800691c:	0036009f 	.word	0x0036009f
 8006920:	fff6007e 	.word	0xfff6007e
 8006924:	00b0fff6 	.word	0x00b0fff6
 8006928:	0036fff6 	.word	0x0036fff6
 800692c:	fff6fff6 	.word	0xfff6fff6
 8006930:	0082      	.short	0x0082
 8006932:	0025      	movs	r5, r4
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	3542      	adds	r5, #66	@ 0x42
 8006938:	1d11      	adds	r1, r2, #4
 800693a:	6019      	str	r1, [r3, #0]
 800693c:	6813      	ldr	r3, [r2, #0]
 800693e:	702b      	strb	r3, [r5, #0]
 8006940:	2301      	movs	r3, #1
 8006942:	e09e      	b.n	8006a82 <_printf_i+0x1be>
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	6809      	ldr	r1, [r1, #0]
 8006948:	1d02      	adds	r2, r0, #4
 800694a:	060d      	lsls	r5, r1, #24
 800694c:	d50b      	bpl.n	8006966 <_printf_i+0xa2>
 800694e:	6806      	ldr	r6, [r0, #0]
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	2e00      	cmp	r6, #0
 8006954:	da03      	bge.n	800695e <_printf_i+0x9a>
 8006956:	232d      	movs	r3, #45	@ 0x2d
 8006958:	9a03      	ldr	r2, [sp, #12]
 800695a:	4276      	negs	r6, r6
 800695c:	7013      	strb	r3, [r2, #0]
 800695e:	4b5d      	ldr	r3, [pc, #372]	@ (8006ad4 <_printf_i+0x210>)
 8006960:	270a      	movs	r7, #10
 8006962:	9304      	str	r3, [sp, #16]
 8006964:	e018      	b.n	8006998 <_printf_i+0xd4>
 8006966:	6806      	ldr	r6, [r0, #0]
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	0649      	lsls	r1, r1, #25
 800696c:	d5f1      	bpl.n	8006952 <_printf_i+0x8e>
 800696e:	b236      	sxth	r6, r6
 8006970:	e7ef      	b.n	8006952 <_printf_i+0x8e>
 8006972:	6808      	ldr	r0, [r1, #0]
 8006974:	6819      	ldr	r1, [r3, #0]
 8006976:	c940      	ldmia	r1!, {r6}
 8006978:	0605      	lsls	r5, r0, #24
 800697a:	d402      	bmi.n	8006982 <_printf_i+0xbe>
 800697c:	0640      	lsls	r0, r0, #25
 800697e:	d500      	bpl.n	8006982 <_printf_i+0xbe>
 8006980:	b2b6      	uxth	r6, r6
 8006982:	6019      	str	r1, [r3, #0]
 8006984:	4b53      	ldr	r3, [pc, #332]	@ (8006ad4 <_printf_i+0x210>)
 8006986:	270a      	movs	r7, #10
 8006988:	9304      	str	r3, [sp, #16]
 800698a:	2a6f      	cmp	r2, #111	@ 0x6f
 800698c:	d100      	bne.n	8006990 <_printf_i+0xcc>
 800698e:	3f02      	subs	r7, #2
 8006990:	0023      	movs	r3, r4
 8006992:	2200      	movs	r2, #0
 8006994:	3343      	adds	r3, #67	@ 0x43
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	6863      	ldr	r3, [r4, #4]
 800699a:	60a3      	str	r3, [r4, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	db06      	blt.n	80069ae <_printf_i+0xea>
 80069a0:	2104      	movs	r1, #4
 80069a2:	6822      	ldr	r2, [r4, #0]
 80069a4:	9d03      	ldr	r5, [sp, #12]
 80069a6:	438a      	bics	r2, r1
 80069a8:	6022      	str	r2, [r4, #0]
 80069aa:	4333      	orrs	r3, r6
 80069ac:	d00c      	beq.n	80069c8 <_printf_i+0x104>
 80069ae:	9d03      	ldr	r5, [sp, #12]
 80069b0:	0030      	movs	r0, r6
 80069b2:	0039      	movs	r1, r7
 80069b4:	f7f9 fc40 	bl	8000238 <__aeabi_uidivmod>
 80069b8:	9b04      	ldr	r3, [sp, #16]
 80069ba:	3d01      	subs	r5, #1
 80069bc:	5c5b      	ldrb	r3, [r3, r1]
 80069be:	702b      	strb	r3, [r5, #0]
 80069c0:	0033      	movs	r3, r6
 80069c2:	0006      	movs	r6, r0
 80069c4:	429f      	cmp	r7, r3
 80069c6:	d9f3      	bls.n	80069b0 <_printf_i+0xec>
 80069c8:	2f08      	cmp	r7, #8
 80069ca:	d109      	bne.n	80069e0 <_printf_i+0x11c>
 80069cc:	6823      	ldr	r3, [r4, #0]
 80069ce:	07db      	lsls	r3, r3, #31
 80069d0:	d506      	bpl.n	80069e0 <_printf_i+0x11c>
 80069d2:	6862      	ldr	r2, [r4, #4]
 80069d4:	6923      	ldr	r3, [r4, #16]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	dc02      	bgt.n	80069e0 <_printf_i+0x11c>
 80069da:	2330      	movs	r3, #48	@ 0x30
 80069dc:	3d01      	subs	r5, #1
 80069de:	702b      	strb	r3, [r5, #0]
 80069e0:	9b03      	ldr	r3, [sp, #12]
 80069e2:	1b5b      	subs	r3, r3, r5
 80069e4:	6123      	str	r3, [r4, #16]
 80069e6:	9b07      	ldr	r3, [sp, #28]
 80069e8:	0021      	movs	r1, r4
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	9805      	ldr	r0, [sp, #20]
 80069ee:	9b06      	ldr	r3, [sp, #24]
 80069f0:	aa09      	add	r2, sp, #36	@ 0x24
 80069f2:	f7ff fef7 	bl	80067e4 <_printf_common>
 80069f6:	3001      	adds	r0, #1
 80069f8:	d148      	bne.n	8006a8c <_printf_i+0x1c8>
 80069fa:	2001      	movs	r0, #1
 80069fc:	4240      	negs	r0, r0
 80069fe:	b00b      	add	sp, #44	@ 0x2c
 8006a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a02:	2220      	movs	r2, #32
 8006a04:	6809      	ldr	r1, [r1, #0]
 8006a06:	430a      	orrs	r2, r1
 8006a08:	6022      	str	r2, [r4, #0]
 8006a0a:	2278      	movs	r2, #120	@ 0x78
 8006a0c:	4932      	ldr	r1, [pc, #200]	@ (8006ad8 <_printf_i+0x214>)
 8006a0e:	9104      	str	r1, [sp, #16]
 8006a10:	0021      	movs	r1, r4
 8006a12:	3145      	adds	r1, #69	@ 0x45
 8006a14:	700a      	strb	r2, [r1, #0]
 8006a16:	6819      	ldr	r1, [r3, #0]
 8006a18:	6822      	ldr	r2, [r4, #0]
 8006a1a:	c940      	ldmia	r1!, {r6}
 8006a1c:	0610      	lsls	r0, r2, #24
 8006a1e:	d402      	bmi.n	8006a26 <_printf_i+0x162>
 8006a20:	0650      	lsls	r0, r2, #25
 8006a22:	d500      	bpl.n	8006a26 <_printf_i+0x162>
 8006a24:	b2b6      	uxth	r6, r6
 8006a26:	6019      	str	r1, [r3, #0]
 8006a28:	07d3      	lsls	r3, r2, #31
 8006a2a:	d502      	bpl.n	8006a32 <_printf_i+0x16e>
 8006a2c:	2320      	movs	r3, #32
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	2e00      	cmp	r6, #0
 8006a34:	d001      	beq.n	8006a3a <_printf_i+0x176>
 8006a36:	2710      	movs	r7, #16
 8006a38:	e7aa      	b.n	8006990 <_printf_i+0xcc>
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	4393      	bics	r3, r2
 8006a40:	6023      	str	r3, [r4, #0]
 8006a42:	e7f8      	b.n	8006a36 <_printf_i+0x172>
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	680d      	ldr	r5, [r1, #0]
 8006a48:	1d10      	adds	r0, r2, #4
 8006a4a:	6949      	ldr	r1, [r1, #20]
 8006a4c:	6018      	str	r0, [r3, #0]
 8006a4e:	6813      	ldr	r3, [r2, #0]
 8006a50:	062e      	lsls	r6, r5, #24
 8006a52:	d501      	bpl.n	8006a58 <_printf_i+0x194>
 8006a54:	6019      	str	r1, [r3, #0]
 8006a56:	e002      	b.n	8006a5e <_printf_i+0x19a>
 8006a58:	066d      	lsls	r5, r5, #25
 8006a5a:	d5fb      	bpl.n	8006a54 <_printf_i+0x190>
 8006a5c:	8019      	strh	r1, [r3, #0]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9d03      	ldr	r5, [sp, #12]
 8006a62:	6123      	str	r3, [r4, #16]
 8006a64:	e7bf      	b.n	80069e6 <_printf_i+0x122>
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	1d11      	adds	r1, r2, #4
 8006a6a:	6019      	str	r1, [r3, #0]
 8006a6c:	6815      	ldr	r5, [r2, #0]
 8006a6e:	2100      	movs	r1, #0
 8006a70:	0028      	movs	r0, r5
 8006a72:	6862      	ldr	r2, [r4, #4]
 8006a74:	f000 f856 	bl	8006b24 <memchr>
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d001      	beq.n	8006a80 <_printf_i+0x1bc>
 8006a7c:	1b40      	subs	r0, r0, r5
 8006a7e:	6060      	str	r0, [r4, #4]
 8006a80:	6863      	ldr	r3, [r4, #4]
 8006a82:	6123      	str	r3, [r4, #16]
 8006a84:	2300      	movs	r3, #0
 8006a86:	9a03      	ldr	r2, [sp, #12]
 8006a88:	7013      	strb	r3, [r2, #0]
 8006a8a:	e7ac      	b.n	80069e6 <_printf_i+0x122>
 8006a8c:	002a      	movs	r2, r5
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	9906      	ldr	r1, [sp, #24]
 8006a92:	9805      	ldr	r0, [sp, #20]
 8006a94:	9d07      	ldr	r5, [sp, #28]
 8006a96:	47a8      	blx	r5
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d0ae      	beq.n	80069fa <_printf_i+0x136>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	079b      	lsls	r3, r3, #30
 8006aa0:	d415      	bmi.n	8006ace <_printf_i+0x20a>
 8006aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aa4:	68e0      	ldr	r0, [r4, #12]
 8006aa6:	4298      	cmp	r0, r3
 8006aa8:	daa9      	bge.n	80069fe <_printf_i+0x13a>
 8006aaa:	0018      	movs	r0, r3
 8006aac:	e7a7      	b.n	80069fe <_printf_i+0x13a>
 8006aae:	0022      	movs	r2, r4
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	9906      	ldr	r1, [sp, #24]
 8006ab4:	9805      	ldr	r0, [sp, #20]
 8006ab6:	9e07      	ldr	r6, [sp, #28]
 8006ab8:	3219      	adds	r2, #25
 8006aba:	47b0      	blx	r6
 8006abc:	3001      	adds	r0, #1
 8006abe:	d09c      	beq.n	80069fa <_printf_i+0x136>
 8006ac0:	3501      	adds	r5, #1
 8006ac2:	68e3      	ldr	r3, [r4, #12]
 8006ac4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ac6:	1a9b      	subs	r3, r3, r2
 8006ac8:	42ab      	cmp	r3, r5
 8006aca:	dcf0      	bgt.n	8006aae <_printf_i+0x1ea>
 8006acc:	e7e9      	b.n	8006aa2 <_printf_i+0x1de>
 8006ace:	2500      	movs	r5, #0
 8006ad0:	e7f7      	b.n	8006ac2 <_printf_i+0x1fe>
 8006ad2:	46c0      	nop			@ (mov r8, r8)
 8006ad4:	08006f1d 	.word	0x08006f1d
 8006ad8:	08006f2e 	.word	0x08006f2e

08006adc <memmove>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	4288      	cmp	r0, r1
 8006ae0:	d902      	bls.n	8006ae8 <memmove+0xc>
 8006ae2:	188b      	adds	r3, r1, r2
 8006ae4:	4298      	cmp	r0, r3
 8006ae6:	d308      	bcc.n	8006afa <memmove+0x1e>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d007      	beq.n	8006afe <memmove+0x22>
 8006aee:	5ccc      	ldrb	r4, [r1, r3]
 8006af0:	54c4      	strb	r4, [r0, r3]
 8006af2:	3301      	adds	r3, #1
 8006af4:	e7f9      	b.n	8006aea <memmove+0xe>
 8006af6:	5c8b      	ldrb	r3, [r1, r2]
 8006af8:	5483      	strb	r3, [r0, r2]
 8006afa:	3a01      	subs	r2, #1
 8006afc:	d2fb      	bcs.n	8006af6 <memmove+0x1a>
 8006afe:	bd10      	pop	{r4, pc}

08006b00 <_sbrk_r>:
 8006b00:	2300      	movs	r3, #0
 8006b02:	b570      	push	{r4, r5, r6, lr}
 8006b04:	4d06      	ldr	r5, [pc, #24]	@ (8006b20 <_sbrk_r+0x20>)
 8006b06:	0004      	movs	r4, r0
 8006b08:	0008      	movs	r0, r1
 8006b0a:	602b      	str	r3, [r5, #0]
 8006b0c:	f7fa fd14 	bl	8001538 <_sbrk>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d103      	bne.n	8006b1c <_sbrk_r+0x1c>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d000      	beq.n	8006b1c <_sbrk_r+0x1c>
 8006b1a:	6023      	str	r3, [r4, #0]
 8006b1c:	bd70      	pop	{r4, r5, r6, pc}
 8006b1e:	46c0      	nop			@ (mov r8, r8)
 8006b20:	200003b8 	.word	0x200003b8

08006b24 <memchr>:
 8006b24:	b2c9      	uxtb	r1, r1
 8006b26:	1882      	adds	r2, r0, r2
 8006b28:	4290      	cmp	r0, r2
 8006b2a:	d101      	bne.n	8006b30 <memchr+0xc>
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	4770      	bx	lr
 8006b30:	7803      	ldrb	r3, [r0, #0]
 8006b32:	428b      	cmp	r3, r1
 8006b34:	d0fb      	beq.n	8006b2e <memchr+0xa>
 8006b36:	3001      	adds	r0, #1
 8006b38:	e7f6      	b.n	8006b28 <memchr+0x4>

08006b3a <memcpy>:
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	b510      	push	{r4, lr}
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d100      	bne.n	8006b44 <memcpy+0xa>
 8006b42:	bd10      	pop	{r4, pc}
 8006b44:	5ccc      	ldrb	r4, [r1, r3]
 8006b46:	54c4      	strb	r4, [r0, r3]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	e7f8      	b.n	8006b3e <memcpy+0x4>

08006b4c <_realloc_r>:
 8006b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b4e:	0006      	movs	r6, r0
 8006b50:	000c      	movs	r4, r1
 8006b52:	0015      	movs	r5, r2
 8006b54:	2900      	cmp	r1, #0
 8006b56:	d105      	bne.n	8006b64 <_realloc_r+0x18>
 8006b58:	0011      	movs	r1, r2
 8006b5a:	f7ff fc55 	bl	8006408 <_malloc_r>
 8006b5e:	0004      	movs	r4, r0
 8006b60:	0020      	movs	r0, r4
 8006b62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b64:	2a00      	cmp	r2, #0
 8006b66:	d103      	bne.n	8006b70 <_realloc_r+0x24>
 8006b68:	f7ff fbe2 	bl	8006330 <_free_r>
 8006b6c:	002c      	movs	r4, r5
 8006b6e:	e7f7      	b.n	8006b60 <_realloc_r+0x14>
 8006b70:	f000 f81c 	bl	8006bac <_malloc_usable_size_r>
 8006b74:	0007      	movs	r7, r0
 8006b76:	4285      	cmp	r5, r0
 8006b78:	d802      	bhi.n	8006b80 <_realloc_r+0x34>
 8006b7a:	0843      	lsrs	r3, r0, #1
 8006b7c:	42ab      	cmp	r3, r5
 8006b7e:	d3ef      	bcc.n	8006b60 <_realloc_r+0x14>
 8006b80:	0029      	movs	r1, r5
 8006b82:	0030      	movs	r0, r6
 8006b84:	f7ff fc40 	bl	8006408 <_malloc_r>
 8006b88:	9001      	str	r0, [sp, #4]
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d101      	bne.n	8006b92 <_realloc_r+0x46>
 8006b8e:	9c01      	ldr	r4, [sp, #4]
 8006b90:	e7e6      	b.n	8006b60 <_realloc_r+0x14>
 8006b92:	002a      	movs	r2, r5
 8006b94:	42bd      	cmp	r5, r7
 8006b96:	d900      	bls.n	8006b9a <_realloc_r+0x4e>
 8006b98:	003a      	movs	r2, r7
 8006b9a:	0021      	movs	r1, r4
 8006b9c:	9801      	ldr	r0, [sp, #4]
 8006b9e:	f7ff ffcc 	bl	8006b3a <memcpy>
 8006ba2:	0021      	movs	r1, r4
 8006ba4:	0030      	movs	r0, r6
 8006ba6:	f7ff fbc3 	bl	8006330 <_free_r>
 8006baa:	e7f0      	b.n	8006b8e <_realloc_r+0x42>

08006bac <_malloc_usable_size_r>:
 8006bac:	1f0b      	subs	r3, r1, #4
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	1f18      	subs	r0, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	da01      	bge.n	8006bba <_malloc_usable_size_r+0xe>
 8006bb6:	580b      	ldr	r3, [r1, r0]
 8006bb8:	18c0      	adds	r0, r0, r3
 8006bba:	4770      	bx	lr

08006bbc <_init>:
 8006bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bbe:	46c0      	nop			@ (mov r8, r8)
 8006bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bc2:	bc08      	pop	{r3}
 8006bc4:	469e      	mov	lr, r3
 8006bc6:	4770      	bx	lr

08006bc8 <_fini>:
 8006bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bca:	46c0      	nop			@ (mov r8, r8)
 8006bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bce:	bc08      	pop	{r3}
 8006bd0:	469e      	mov	lr, r3
 8006bd2:	4770      	bx	lr
