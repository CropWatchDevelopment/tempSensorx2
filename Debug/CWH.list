
CWH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007200  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  080072c0  080072c0  000082c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007834  08007834  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007834  08007834  00008834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800783c  0800783c  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800783c  0800783c  0000883c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007840  08007840  00008840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08007844  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  2000005c  080078a0  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  080078a0  000093cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000146e1  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003459  00000000  00000000  0001d765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001128  00000000  00000000  00020bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d41  00000000  00000000  00021ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b15  00000000  00000000  00022a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166a3  00000000  00000000  0003a53e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b0ec  00000000  00000000  00050be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbccd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004250  00000000  00000000  000dbd10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000dff60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080072a8 	.word	0x080072a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	080072a8 	.word	0x080072a8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <ATC_SendReceive>:
    uint32_t command_len,
    char *response,
    uint32_t response_size,
    uint32_t timeout_ms,
    const char *expected_response
) {
 8000470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000472:	b089      	sub	sp, #36	@ 0x24
 8000474:	af02      	add	r7, sp, #8
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
 800047c:	603b      	str	r3, [r7, #0]
    if (!lora || !lora->huart || !command || command_len == 0) {
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d009      	beq.n	8000498 <ATC_SendReceive+0x28>
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d005      	beq.n	8000498 <ATC_SendReceive+0x28>
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d002      	beq.n	8000498 <ATC_SendReceive+0x28>
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d102      	bne.n	800049e <ATC_SendReceive+0x2e>
        return -1;
 8000498:	2301      	movs	r3, #1
 800049a:	425b      	negs	r3, r3
 800049c:	e068      	b.n	8000570 <ATC_SendReceive+0x100>
    }
    HAL_StatusTypeDef status = HAL_UART_Transmit(
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	6818      	ldr	r0, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	b29a      	uxth	r2, r3
 80004a6:	2517      	movs	r5, #23
 80004a8:	197c      	adds	r4, r7, r5
 80004aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004ac:	68b9      	ldr	r1, [r7, #8]
 80004ae:	f005 f9e9 	bl	8005884 <HAL_UART_Transmit>
 80004b2:	0003      	movs	r3, r0
 80004b4:	7023      	strb	r3, [r4, #0]
        lora->huart,
        (const uint8_t *)command,
        command_len,
        timeout_ms
    );
    if (status != HAL_OK) {
 80004b6:	197b      	adds	r3, r7, r5
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d009      	beq.n	80004d2 <ATC_SendReceive+0x62>
        ConsolePrintf("ATC_SendReceive: TX failed (status=%d)\r\n", (int)status);
 80004be:	197b      	adds	r3, r7, r5
 80004c0:	781a      	ldrb	r2, [r3, #0]
 80004c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000578 <ATC_SendReceive+0x108>)
 80004c4:	0011      	movs	r1, r2
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 feb2 	bl	8001230 <ConsolePrintf>
        return -2;
 80004cc:	2302      	movs	r3, #2
 80004ce:	425b      	negs	r3, r3
 80004d0:	e04e      	b.n	8000570 <ATC_SendReceive+0x100>
    }
    if (response && response_size > 0) {
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d033      	beq.n	8000540 <ATC_SendReceive+0xd0>
 80004d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d030      	beq.n	8000540 <ATC_SendReceive+0xd0>
        uint16_t rx_len = 0;
 80004de:	2514      	movs	r5, #20
 80004e0:	197b      	adds	r3, r7, r5
 80004e2:	2200      	movs	r2, #0
 80004e4:	801a      	strh	r2, [r3, #0]
        memset(response, 0, response_size);
 80004e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	2100      	movs	r1, #0
 80004ec:	0018      	movs	r0, r3
 80004ee:	f006 fa4b 	bl	8006988 <memset>
        status = HAL_UARTEx_ReceiveToIdle(
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	6818      	ldr	r0, [r3, #0]
 80004f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	3b01      	subs	r3, #1
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	2617      	movs	r6, #23
 8000500:	19bc      	adds	r4, r7, r6
 8000502:	197d      	adds	r5, r7, r5
 8000504:	6839      	ldr	r1, [r7, #0]
 8000506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	002b      	movs	r3, r5
 800050c:	f006 f80e 	bl	800652c <HAL_UARTEx_ReceiveToIdle>
 8000510:	0003      	movs	r3, r0
 8000512:	7023      	strb	r3, [r4, #0]
            (uint8_t *)response,
            response_size - 1,
            &rx_len,
            timeout_ms
        );
        if (status != HAL_OK) {
 8000514:	19bb      	adds	r3, r7, r6
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d009      	beq.n	8000530 <ATC_SendReceive+0xc0>
            ConsolePrintf("ATC_SendReceive: RX failed (status=%d)\r\n", (int)status);
 800051c:	19bb      	adds	r3, r7, r6
 800051e:	781a      	ldrb	r2, [r3, #0]
 8000520:	4b16      	ldr	r3, [pc, #88]	@ (800057c <ATC_SendReceive+0x10c>)
 8000522:	0011      	movs	r1, r2
 8000524:	0018      	movs	r0, r3
 8000526:	f000 fe83 	bl	8001230 <ConsolePrintf>
            return -4;
 800052a:	2304      	movs	r3, #4
 800052c:	425b      	negs	r3, r3
 800052e:	e01f      	b.n	8000570 <ATC_SendReceive+0x100>
        }
        response[rx_len] = '\0';
 8000530:	2314      	movs	r3, #20
 8000532:	18fb      	adds	r3, r7, r3
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	001a      	movs	r2, r3
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	189b      	adds	r3, r3, r2
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
    }
    if (expected_response && response) {
 8000540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000542:	2b00      	cmp	r3, #0
 8000544:	d013      	beq.n	800056e <ATC_SendReceive+0xfe>
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d010      	beq.n	800056e <ATC_SendReceive+0xfe>
        if (!strstr(response, expected_response)) {
 800054c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	0011      	movs	r1, r2
 8000552:	0018      	movs	r0, r3
 8000554:	f006 fa20 	bl	8006998 <strstr>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d108      	bne.n	800056e <ATC_SendReceive+0xfe>
            ConsolePrintf("ATC_SendReceive: expected response '%s' not found\r\n", expected_response);
 800055c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800055e:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <ATC_SendReceive+0x110>)
 8000560:	0011      	movs	r1, r2
 8000562:	0018      	movs	r0, r3
 8000564:	f000 fe64 	bl	8001230 <ConsolePrintf>
            return -3;
 8000568:	2303      	movs	r3, #3
 800056a:	425b      	negs	r3, r3
 800056c:	e000      	b.n	8000570 <ATC_SendReceive+0x100>
        }
    }
    return 0;
 800056e:	2300      	movs	r3, #0
}
 8000570:	0018      	movs	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	b007      	add	sp, #28
 8000576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000578:	080072c0 	.word	0x080072c0
 800057c:	080072ec 	.word	0x080072ec
 8000580:	08007318 	.word	0x08007318

08000584 <wake_module>:
static LoRaWAN_Error_t wake_module(
    ATC_HandleTypeDef *lora,
    char *response,
    uint32_t response_size,
    uint32_t timeout_ms
) {
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b08b      	sub	sp, #44	@ 0x2c
 8000588:	af04      	add	r7, sp, #16
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
    uint8_t dummy;
    // Flush RX FIFO by reading until no more data
    while (HAL_UART_Receive(lora->huart, &dummy, 1, 1) == HAL_OK) {
 8000592:	46c0      	nop			@ (mov r8, r8)
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	6818      	ldr	r0, [r3, #0]
 8000598:	2313      	movs	r3, #19
 800059a:	18f9      	adds	r1, r7, r3
 800059c:	2301      	movs	r3, #1
 800059e:	2201      	movs	r2, #1
 80005a0:	f005 fa10 	bl	80059c4 <HAL_UART_Receive>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d0f5      	beq.n	8000594 <wake_module+0x10>
    }
    static const char wake_cmd[] = "AT\r\n";
    int rc = ATC_SendReceive(
        lora,
        wake_cmd,
        (uint32_t)strlen(wake_cmd),
 80005a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000620 <wake_module+0x9c>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff fdac 	bl	8000108 <strlen>
 80005b0:	0004      	movs	r4, r0
    int rc = ATC_SendReceive(
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	491a      	ldr	r1, [pc, #104]	@ (8000620 <wake_module+0x9c>)
 80005b6:	68f8      	ldr	r0, [r7, #12]
 80005b8:	2300      	movs	r3, #0
 80005ba:	9302      	str	r3, [sp, #8]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	0013      	movs	r3, r2
 80005c6:	0022      	movs	r2, r4
 80005c8:	f7ff ff52 	bl	8000470 <ATC_SendReceive>
 80005cc:	0003      	movs	r3, r0
 80005ce:	617b      	str	r3, [r7, #20]
        response,
        response_size,
        timeout_ms,
        NULL
    );
    if (rc != 0) {
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d008      	beq.n	80005e8 <wake_module+0x64>
        ConsolePrintf("wake_module: AT transmit error (rc=%d)\r\n", rc);
 80005d6:	697a      	ldr	r2, [r7, #20]
 80005d8:	4b12      	ldr	r3, [pc, #72]	@ (8000624 <wake_module+0xa0>)
 80005da:	0011      	movs	r1, r2
 80005dc:	0018      	movs	r0, r3
 80005de:	f000 fe27 	bl	8001230 <ConsolePrintf>
        return LORAWAN_ERROR_COMMUNICATION;
 80005e2:	2302      	movs	r3, #2
 80005e4:	425b      	negs	r3, r3
 80005e6:	e016      	b.n	8000616 <wake_module+0x92>
    }
    HAL_Delay(100);
 80005e8:	2064      	movs	r0, #100	@ 0x64
 80005ea:	f001 fdc9 	bl	8002180 <HAL_Delay>
    if (strstr(response, "WAKE") || strstr(response, "OK")) {
 80005ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000628 <wake_module+0xa4>)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f006 f9cf 	bl	8006998 <strstr>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d107      	bne.n	800060e <wake_module+0x8a>
 80005fe:	4a0b      	ldr	r2, [pc, #44]	@ (800062c <wake_module+0xa8>)
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	0011      	movs	r1, r2
 8000604:	0018      	movs	r0, r3
 8000606:	f006 f9c7 	bl	8006998 <strstr>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <wake_module+0x8e>
        return LORAWAN_ERROR_OK;
 800060e:	2300      	movs	r3, #0
 8000610:	e001      	b.n	8000616 <wake_module+0x92>
    }
    return LORAWAN_ERROR_COMMUNICATION;
 8000612:	2302      	movs	r3, #2
 8000614:	425b      	negs	r3, r3
}
 8000616:	0018      	movs	r0, r3
 8000618:	46bd      	mov	sp, r7
 800061a:	b007      	add	sp, #28
 800061c:	bd90      	pop	{r4, r7, pc}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	0800768c 	.word	0x0800768c
 8000624:	0800734c 	.word	0x0800734c
 8000628:	08007378 	.word	0x08007378
 800062c:	08007380 	.word	0x08007380

08000630 <send_data_and_get_response>:
    const char *data,
    char *response,
    uint32_t response_size,
    uint32_t timeout_ms,
    const char *expected_response
) {
 8000630:	b5b0      	push	{r4, r5, r7, lr}
 8000632:	b08a      	sub	sp, #40	@ 0x28
 8000634:	af04      	add	r7, sp, #16
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	60b9      	str	r1, [r7, #8]
 800063a:	607a      	str	r2, [r7, #4]
 800063c:	603b      	str	r3, [r7, #0]
    if (!lora || !lora->huart || !data || !response || response_size == 0) {
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00c      	beq.n	800065e <send_data_and_get_response+0x2e>
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d008      	beq.n	800065e <send_data_and_get_response+0x2e>
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d005      	beq.n	800065e <send_data_and_get_response+0x2e>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <send_data_and_get_response+0x2e>
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d102      	bne.n	8000664 <send_data_and_get_response+0x34>
        return LORAWAN_ERROR_INVALID_PARAM;
 800065e:	2301      	movs	r3, #1
 8000660:	425b      	negs	r3, r3
 8000662:	e049      	b.n	80006f8 <send_data_and_get_response+0xc8>
    }
    LoRaWAN_Error_t wake_status = wake_module(
 8000664:	2517      	movs	r5, #23
 8000666:	197c      	adds	r4, r7, r5
 8000668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800066a:	683a      	ldr	r2, [r7, #0]
 800066c:	6879      	ldr	r1, [r7, #4]
 800066e:	68f8      	ldr	r0, [r7, #12]
 8000670:	f7ff ff88 	bl	8000584 <wake_module>
 8000674:	0003      	movs	r3, r0
 8000676:	7023      	strb	r3, [r4, #0]
        lora,
        response,
        response_size,
        timeout_ms
    );
    if (wake_status != LORAWAN_ERROR_OK) {
 8000678:	197b      	adds	r3, r7, r5
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	b25b      	sxtb	r3, r3
 800067e:	2b00      	cmp	r3, #0
 8000680:	d003      	beq.n	800068a <send_data_and_get_response+0x5a>
        return wake_status;
 8000682:	197b      	adds	r3, r7, r5
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	b25b      	sxtb	r3, r3
 8000688:	e036      	b.n	80006f8 <send_data_and_get_response+0xc8>
    }
    HAL_Delay(50);
 800068a:	2032      	movs	r0, #50	@ 0x32
 800068c:	f001 fd78 	bl	8002180 <HAL_Delay>
    int res = ATC_SendReceive(
        lora,
        data,
        (uint32_t)strlen(data),
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	0018      	movs	r0, r3
 8000694:	f7ff fd38 	bl	8000108 <strlen>
 8000698:	0004      	movs	r4, r0
    int res = ATC_SendReceive(
 800069a:	687a      	ldr	r2, [r7, #4]
 800069c:	68b9      	ldr	r1, [r7, #8]
 800069e:	68f8      	ldr	r0, [r7, #12]
 80006a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80006a2:	9302      	str	r3, [sp, #8]
 80006a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	0013      	movs	r3, r2
 80006ae:	0022      	movs	r2, r4
 80006b0:	f7ff fede 	bl	8000470 <ATC_SendReceive>
 80006b4:	0003      	movs	r3, r0
 80006b6:	613b      	str	r3, [r7, #16]
        response,
        response_size,
        timeout_ms,
        expected_response
    );
    switch (res) {
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	3301      	adds	r3, #1
 80006bc:	d00f      	beq.n	80006de <send_data_and_get_response+0xae>
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	da18      	bge.n	80006f6 <send_data_and_get_response+0xc6>
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	3302      	adds	r3, #2
 80006c8:	d00c      	beq.n	80006e4 <send_data_and_get_response+0xb4>
 80006ca:	693b      	ldr	r3, [r7, #16]
 80006cc:	3302      	adds	r3, #2
 80006ce:	dc12      	bgt.n	80006f6 <send_data_and_get_response+0xc6>
 80006d0:	693b      	ldr	r3, [r7, #16]
 80006d2:	3304      	adds	r3, #4
 80006d4:	d00c      	beq.n	80006f0 <send_data_and_get_response+0xc0>
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	3303      	adds	r3, #3
 80006da:	d006      	beq.n	80006ea <send_data_and_get_response+0xba>
 80006dc:	e00b      	b.n	80006f6 <send_data_and_get_response+0xc6>
        case -1: return LORAWAN_ERROR_INVALID_PARAM;
 80006de:	2301      	movs	r3, #1
 80006e0:	425b      	negs	r3, r3
 80006e2:	e009      	b.n	80006f8 <send_data_and_get_response+0xc8>
        case -2: return LORAWAN_ERROR_COMMUNICATION;
 80006e4:	2302      	movs	r3, #2
 80006e6:	425b      	negs	r3, r3
 80006e8:	e006      	b.n	80006f8 <send_data_and_get_response+0xc8>
        case -3: return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 80006ea:	2303      	movs	r3, #3
 80006ec:	425b      	negs	r3, r3
 80006ee:	e003      	b.n	80006f8 <send_data_and_get_response+0xc8>
        case -4: return LORAWAN_ERROR_TIMEOUT;
 80006f0:	2304      	movs	r3, #4
 80006f2:	425b      	negs	r3, r3
 80006f4:	e000      	b.n	80006f8 <send_data_and_get_response+0xc8>
        default:  return LORAWAN_ERROR_OK;
 80006f6:	2300      	movs	r3, #0
    }
}
 80006f8:	0018      	movs	r0, r3
 80006fa:	46bd      	mov	sp, r7
 80006fc:	b006      	add	sp, #24
 80006fe:	bdb0      	pop	{r4, r5, r7, pc}

08000700 <LoRaWAN_Join>:

LoRaWAN_Error_t LoRaWAN_Join(ATC_HandleTypeDef *lora) {
 8000700:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000702:	b0c7      	sub	sp, #284	@ 0x11c
 8000704:	af02      	add	r7, sp, #8
 8000706:	6078      	str	r0, [r7, #4]
    char response[LORAWAN_MAX_RESP_LEN] = {0};
 8000708:	4b34      	ldr	r3, [pc, #208]	@ (80007dc <LoRaWAN_Join+0xdc>)
 800070a:	2288      	movs	r2, #136	@ 0x88
 800070c:	0052      	lsls	r2, r2, #1
 800070e:	189b      	adds	r3, r3, r2
 8000710:	19db      	adds	r3, r3, r7
 8000712:	0018      	movs	r0, r3
 8000714:	2380      	movs	r3, #128	@ 0x80
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	001a      	movs	r2, r3
 800071a:	2100      	movs	r1, #0
 800071c:	f006 f934 	bl	8006988 <memset>
    LoRaWAN_Error_t status = send_data_and_get_response(
 8000720:	2610      	movs	r6, #16
 8000722:	36ff      	adds	r6, #255	@ 0xff
 8000724:	19bc      	adds	r4, r7, r6
 8000726:	2380      	movs	r3, #128	@ 0x80
 8000728:	005d      	lsls	r5, r3, #1
 800072a:	230c      	movs	r3, #12
 800072c:	18fa      	adds	r2, r7, r3
 800072e:	492c      	ldr	r1, [pc, #176]	@ (80007e0 <LoRaWAN_Join+0xe0>)
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	4b2c      	ldr	r3, [pc, #176]	@ (80007e4 <LoRaWAN_Join+0xe4>)
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	4b2c      	ldr	r3, [pc, #176]	@ (80007e8 <LoRaWAN_Join+0xe8>)
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	002b      	movs	r3, r5
 800073c:	f7ff ff78 	bl	8000630 <send_data_and_get_response>
 8000740:	0003      	movs	r3, r0
 8000742:	7023      	strb	r3, [r4, #0]
        response,
        sizeof(response),
        10000,
        "OK"
    );
    if (status != LORAWAN_ERROR_OK) {
 8000744:	19bb      	adds	r3, r7, r6
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b25b      	sxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d003      	beq.n	8000756 <LoRaWAN_Join+0x56>
        return status;
 800074e:	19bb      	adds	r3, r7, r6
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	b25b      	sxtb	r3, r3
 8000754:	e03d      	b.n	80007d2 <LoRaWAN_Join+0xd2>
    }
    memset(response, 0, sizeof(response));
 8000756:	2380      	movs	r3, #128	@ 0x80
 8000758:	005a      	lsls	r2, r3, #1
 800075a:	250c      	movs	r5, #12
 800075c:	197b      	adds	r3, r7, r5
 800075e:	2100      	movs	r1, #0
 8000760:	0018      	movs	r0, r3
 8000762:	f006 f911 	bl	8006988 <memset>
    uint16_t rx_len = 0;
 8000766:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <LoRaWAN_Join+0xec>)
 8000768:	2488      	movs	r4, #136	@ 0x88
 800076a:	0064      	lsls	r4, r4, #1
 800076c:	191b      	adds	r3, r3, r4
 800076e:	19db      	adds	r3, r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	801a      	strh	r2, [r3, #0]
    if (HAL_UARTEx_ReceiveToIdle(
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6818      	ldr	r0, [r3, #0]
 8000778:	230a      	movs	r3, #10
 800077a:	18fb      	adds	r3, r7, r3
 800077c:	1979      	adds	r1, r7, r5
 800077e:	4a1a      	ldr	r2, [pc, #104]	@ (80007e8 <LoRaWAN_Join+0xe8>)
 8000780:	9200      	str	r2, [sp, #0]
 8000782:	22ff      	movs	r2, #255	@ 0xff
 8000784:	f005 fed2 	bl	800652c <HAL_UARTEx_ReceiveToIdle>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d109      	bne.n	80007a0 <LoRaWAN_Join+0xa0>
            (uint8_t *)response,
            sizeof(response) - 1,
            &rx_len,
            10000
        ) == HAL_OK) {
        response[rx_len] = '\0';
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <LoRaWAN_Join+0xec>)
 800078e:	191b      	adds	r3, r3, r4
 8000790:	19db      	adds	r3, r3, r7
 8000792:	881b      	ldrh	r3, [r3, #0]
 8000794:	001a      	movs	r2, r3
 8000796:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <LoRaWAN_Join+0xdc>)
 8000798:	191b      	adds	r3, r3, r4
 800079a:	19db      	adds	r3, r3, r7
 800079c:	2100      	movs	r1, #0
 800079e:	5499      	strb	r1, [r3, r2]
    }
    if (strstr(response, "JOINED")) {
 80007a0:	4a13      	ldr	r2, [pc, #76]	@ (80007f0 <LoRaWAN_Join+0xf0>)
 80007a2:	230c      	movs	r3, #12
 80007a4:	18fb      	adds	r3, r7, r3
 80007a6:	0011      	movs	r1, r2
 80007a8:	0018      	movs	r0, r3
 80007aa:	f006 f8f5 	bl	8006998 <strstr>
 80007ae:	1e03      	subs	r3, r0, #0
 80007b0:	d001      	beq.n	80007b6 <LoRaWAN_Join+0xb6>
        return LORAWAN_ERROR_OK;
 80007b2:	2300      	movs	r3, #0
 80007b4:	e00d      	b.n	80007d2 <LoRaWAN_Join+0xd2>
    }
    if (strstr(response, "JOIN FAILED")) {
 80007b6:	4a0f      	ldr	r2, [pc, #60]	@ (80007f4 <LoRaWAN_Join+0xf4>)
 80007b8:	230c      	movs	r3, #12
 80007ba:	18fb      	adds	r3, r7, r3
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f006 f8ea 	bl	8006998 <strstr>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d002      	beq.n	80007ce <LoRaWAN_Join+0xce>
        return LORAWAN_ERROR_NOT_JOINED;
 80007c8:	2305      	movs	r3, #5
 80007ca:	425b      	negs	r3, r3
 80007cc:	e001      	b.n	80007d2 <LoRaWAN_Join+0xd2>
    }
    return LORAWAN_ERROR_UNEXPECTED_RESPONSE;
 80007ce:	2303      	movs	r3, #3
 80007d0:	425b      	negs	r3, r3
}
 80007d2:	0018      	movs	r0, r3
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b045      	add	sp, #276	@ 0x114
 80007d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	fffffefc 	.word	0xfffffefc
 80007e0:	08007384 	.word	0x08007384
 80007e4:	08007380 	.word	0x08007380
 80007e8:	00002710 	.word	0x00002710
 80007ec:	fffffefa 	.word	0xfffffefa
 80007f0:	08007390 	.word	0x08007390
 80007f4:	08007398 	.word	0x08007398

080007f8 <LoRaWAN_SendHex>:

LoRaWAN_Error_t LoRaWAN_SendHex(
    ATC_HandleTypeDef *lora,
    const uint8_t *payload,
    size_t length
) {
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b0cb      	sub	sp, #300	@ 0x12c
 80007fc:	af02      	add	r7, sp, #8
 80007fe:	60f8      	str	r0, [r7, #12]
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
    if (!lora || !lora->huart || !payload || length == 0 || length > (LORAWAN_MAX_HEX_LEN/2)) {
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d00c      	beq.n	8000824 <LoRaWAN_SendHex+0x2c>
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <LoRaWAN_SendHex+0x2c>
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d005      	beq.n	8000824 <LoRaWAN_SendHex+0x2c>
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d002      	beq.n	8000824 <LoRaWAN_SendHex+0x2c>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b40      	cmp	r3, #64	@ 0x40
 8000822:	d902      	bls.n	800082a <LoRaWAN_SendHex+0x32>
        return LORAWAN_ERROR_INVALID_PARAM;
 8000824:	2301      	movs	r3, #1
 8000826:	425b      	negs	r3, r3
 8000828:	e057      	b.n	80008da <LoRaWAN_SendHex+0xe2>
    }
    char hex[LORAWAN_MAX_HEX_LEN + 1];
    for (size_t i = 0; i < length; ++i) {
 800082a:	2300      	movs	r3, #0
 800082c:	228e      	movs	r2, #142	@ 0x8e
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	18ba      	adds	r2, r7, r2
 8000832:	6013      	str	r3, [r2, #0]
 8000834:	e015      	b.n	8000862 <LoRaWAN_SendHex+0x6a>
        snprintf(&hex[2 * i], 3, "%02X", payload[i]);
 8000836:	248e      	movs	r4, #142	@ 0x8e
 8000838:	0064      	lsls	r4, r4, #1
 800083a:	193b      	adds	r3, r7, r4
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	2294      	movs	r2, #148	@ 0x94
 8000842:	18ba      	adds	r2, r7, r2
 8000844:	18d0      	adds	r0, r2, r3
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	193b      	adds	r3, r7, r4
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	18d3      	adds	r3, r2, r3
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	4a24      	ldr	r2, [pc, #144]	@ (80008e4 <LoRaWAN_SendHex+0xec>)
 8000852:	2103      	movs	r1, #3
 8000854:	f006 f828 	bl	80068a8 <sniprintf>
    for (size_t i = 0; i < length; ++i) {
 8000858:	193b      	adds	r3, r7, r4
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	193a      	adds	r2, r7, r4
 8000860:	6013      	str	r3, [r2, #0]
 8000862:	238e      	movs	r3, #142	@ 0x8e
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	429a      	cmp	r2, r3
 800086e:	d3e2      	bcc.n	8000836 <LoRaWAN_SendHex+0x3e>
    }
    hex[2 * length] = '\0';
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	2094      	movs	r0, #148	@ 0x94
 8000876:	183a      	adds	r2, r7, r0
 8000878:	2100      	movs	r1, #0
 800087a:	54d1      	strb	r1, [r2, r3]
    char cmd[LORAWAN_MAX_CMD_LEN];
    int n = snprintf(cmd, sizeof(cmd), "AT+SEND \"%s\"\r\n", hex);
 800087c:	183b      	adds	r3, r7, r0
 800087e:	4a1a      	ldr	r2, [pc, #104]	@ (80008e8 <LoRaWAN_SendHex+0xf0>)
 8000880:	2154      	movs	r1, #84	@ 0x54
 8000882:	1878      	adds	r0, r7, r1
 8000884:	2140      	movs	r1, #64	@ 0x40
 8000886:	f006 f80f 	bl	80068a8 <sniprintf>
 800088a:	0003      	movs	r3, r0
 800088c:	228c      	movs	r2, #140	@ 0x8c
 800088e:	0052      	lsls	r2, r2, #1
 8000890:	18b9      	adds	r1, r7, r2
 8000892:	600b      	str	r3, [r1, #0]
    if (n < 0 || n >= (int)sizeof(cmd)) {
 8000894:	18bb      	adds	r3, r7, r2
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	db03      	blt.n	80008a4 <LoRaWAN_SendHex+0xac>
 800089c:	18bb      	adds	r3, r7, r2
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b3f      	cmp	r3, #63	@ 0x3f
 80008a2:	dd02      	ble.n	80008aa <LoRaWAN_SendHex+0xb2>
        return LORAWAN_ERROR_INVALID_PARAM;
 80008a4:	2301      	movs	r3, #1
 80008a6:	425b      	negs	r3, r3
 80008a8:	e017      	b.n	80008da <LoRaWAN_SendHex+0xe2>
    }
    char response[64] = {0};
 80008aa:	4b10      	ldr	r3, [pc, #64]	@ (80008ec <LoRaWAN_SendHex+0xf4>)
 80008ac:	2290      	movs	r2, #144	@ 0x90
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	189b      	adds	r3, r3, r2
 80008b2:	19db      	adds	r3, r3, r7
 80008b4:	0018      	movs	r0, r3
 80008b6:	2340      	movs	r3, #64	@ 0x40
 80008b8:	001a      	movs	r2, r3
 80008ba:	2100      	movs	r1, #0
 80008bc:	f006 f864 	bl	8006988 <memset>
    return send_data_and_get_response(
 80008c0:	2314      	movs	r3, #20
 80008c2:	18fa      	adds	r2, r7, r3
 80008c4:	2354      	movs	r3, #84	@ 0x54
 80008c6:	18f9      	adds	r1, r7, r3
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <LoRaWAN_SendHex+0xf8>)
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	4b09      	ldr	r3, [pc, #36]	@ (80008f4 <LoRaWAN_SendHex+0xfc>)
 80008d0:	9300      	str	r3, [sp, #0]
 80008d2:	2340      	movs	r3, #64	@ 0x40
 80008d4:	f7ff feac 	bl	8000630 <send_data_and_get_response>
 80008d8:	0003      	movs	r3, r0
        response,
        sizeof(response),
        5000,
        "OK"
    );
}
 80008da:	0018      	movs	r0, r3
 80008dc:	46bd      	mov	sp, r7
 80008de:	b049      	add	sp, #292	@ 0x124
 80008e0:	bd90      	pop	{r4, r7, pc}
 80008e2:	46c0      	nop			@ (mov r8, r8)
 80008e4:	080073a4 	.word	0x080073a4
 80008e8:	080073ac 	.word	0x080073ac
 80008ec:	fffffef4 	.word	0xfffffef4
 80008f0:	08007380 	.word	0x08007380
 80008f4:	00001388 	.word	0x00001388

080008f8 <LoRaWAN_Join_Status>:


LoRaWAN_Error_t LoRaWAN_Join_Status(ATC_HandleTypeDef *lora) {
 80008f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008fa:	b08f      	sub	sp, #60	@ 0x3c
 80008fc:	af02      	add	r7, sp, #8
 80008fe:	6078      	str	r0, [r7, #4]
    char resp[32] = {0};
 8000900:	2508      	movs	r5, #8
 8000902:	197b      	adds	r3, r7, r5
 8000904:	0018      	movs	r0, r3
 8000906:	2320      	movs	r3, #32
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f006 f83c 	bl	8006988 <memset>

    // Read the full response (don’t stop on any particular substring)
    LoRaWAN_Error_t st = send_data_and_get_response(
 8000910:	262b      	movs	r6, #43	@ 0x2b
 8000912:	19bc      	adds	r4, r7, r6
 8000914:	197a      	adds	r2, r7, r5
 8000916:	491b      	ldr	r1, [pc, #108]	@ (8000984 <LoRaWAN_Join_Status+0x8c>)
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	2300      	movs	r3, #0
 800091c:	9301      	str	r3, [sp, #4]
 800091e:	2396      	movs	r3, #150	@ 0x96
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	2320      	movs	r3, #32
 8000926:	f7ff fe83 	bl	8000630 <send_data_and_get_response>
 800092a:	0003      	movs	r3, r0
 800092c:	7023      	strb	r3, [r4, #0]
        resp,
        sizeof(resp),
        300,
        NULL
    );
    if (st != LORAWAN_ERROR_OK) {
 800092e:	19bb      	adds	r3, r7, r6
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	b25b      	sxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d002      	beq.n	800093e <LoRaWAN_Join_Status+0x46>
        return LORAWAN_ERROR_NOT_JOINED;
 8000938:	2305      	movs	r3, #5
 800093a:	425b      	negs	r3, r3
 800093c:	e01e      	b.n	800097c <LoRaWAN_Join_Status+0x84>
    }

    // Skip leading CR/LF/whitespace
    char *p = resp;
 800093e:	2308      	movs	r3, #8
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (*p && isspace((unsigned char)*p)) {
 8000944:	e002      	b.n	800094c <LoRaWAN_Join_Status+0x54>
        p++;
 8000946:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000948:	3301      	adds	r3, #1
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (*p && isspace((unsigned char)*p)) {
 800094c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d006      	beq.n	8000962 <LoRaWAN_Join_Status+0x6a>
 8000954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	0018      	movs	r0, r3
 800095a:	f005 ff9d 	bl	8006898 <isspace>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d1f1      	bne.n	8000946 <LoRaWAN_Join_Status+0x4e>
    }

    // Option A: parse as integer
    if (strtol(p, NULL, 10) == 1) {
 8000962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000964:	220a      	movs	r2, #10
 8000966:	2100      	movs	r1, #0
 8000968:	0018      	movs	r0, r3
 800096a:	f005 ff89 	bl	8006880 <strtol>
 800096e:	0003      	movs	r3, r0
 8000970:	2b01      	cmp	r3, #1
 8000972:	d101      	bne.n	8000978 <LoRaWAN_Join_Status+0x80>
        return LORAWAN_ERROR_OK;
 8000974:	2300      	movs	r3, #0
 8000976:	e001      	b.n	800097c <LoRaWAN_Join_Status+0x84>
    }

    return LORAWAN_ERROR_NOT_JOINED;
 8000978:	2305      	movs	r3, #5
 800097a:	425b      	negs	r3, r3
}
 800097c:	0018      	movs	r0, r3
 800097e:	46bd      	mov	sp, r7
 8000980:	b00d      	add	sp, #52	@ 0x34
 8000982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000984:	080073bc 	.word	0x080073bc

08000988 <LoRaWAN_SetPort>:

LoRaWAN_Error_t LoRaWAN_SetPort(ATC_HandleTypeDef *lora, uint8_t port) {
 8000988:	b590      	push	{r4, r7, lr}
 800098a:	b09b      	sub	sp, #108	@ 0x6c
 800098c:	af02      	add	r7, sp, #8
 800098e:	6078      	str	r0, [r7, #4]
 8000990:	000a      	movs	r2, r1
 8000992:	1cfb      	adds	r3, r7, #3
 8000994:	701a      	strb	r2, [r3, #0]
    if (!lora || !lora->huart || port < 1 || port > 198) {
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d00b      	beq.n	80009b4 <LoRaWAN_SetPort+0x2c>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d007      	beq.n	80009b4 <LoRaWAN_SetPort+0x2c>
 80009a4:	1cfb      	adds	r3, r7, #3
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d003      	beq.n	80009b4 <LoRaWAN_SetPort+0x2c>
 80009ac:	1cfb      	adds	r3, r7, #3
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2bc6      	cmp	r3, #198	@ 0xc6
 80009b2:	d902      	bls.n	80009ba <LoRaWAN_SetPort+0x32>
        return LORAWAN_ERROR_INVALID_PARAM;
 80009b4:	2301      	movs	r3, #1
 80009b6:	425b      	negs	r3, r3
 80009b8:	e029      	b.n	8000a0e <LoRaWAN_SetPort+0x86>
    }
    // build the ATS command to set the Application Port
    char cmd[16];
    int n = snprintf(cmd, sizeof(cmd), "ATS%u=%u\r\n",
 80009ba:	1cfb      	adds	r3, r7, #3
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4916      	ldr	r1, [pc, #88]	@ (8000a18 <LoRaWAN_SetPort+0x90>)
 80009c0:	4a16      	ldr	r2, [pc, #88]	@ (8000a1c <LoRaWAN_SetPort+0x94>)
 80009c2:	204c      	movs	r0, #76	@ 0x4c
 80009c4:	1838      	adds	r0, r7, r0
 80009c6:	9300      	str	r3, [sp, #0]
 80009c8:	000b      	movs	r3, r1
 80009ca:	2110      	movs	r1, #16
 80009cc:	f005 ff6c 	bl	80068a8 <sniprintf>
 80009d0:	0003      	movs	r3, r0
 80009d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                     (unsigned)APPLICATION_PORT_PARAM,
                     (unsigned)port);
    if (n < 0 || n >= (int)sizeof(cmd)) {
 80009d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	db02      	blt.n	80009e0 <LoRaWAN_SetPort+0x58>
 80009da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	dd02      	ble.n	80009e6 <LoRaWAN_SetPort+0x5e>
        return LORAWAN_ERROR_INVALID_PARAM;
 80009e0:	2301      	movs	r3, #1
 80009e2:	425b      	negs	r3, r3
 80009e4:	e013      	b.n	8000a0e <LoRaWAN_SetPort+0x86>
    }
    // fire off “ATS629=<port>” and wait for “OK”
    char resp[64] = {0};
 80009e6:	240c      	movs	r4, #12
 80009e8:	193b      	adds	r3, r7, r4
 80009ea:	0018      	movs	r0, r3
 80009ec:	2340      	movs	r3, #64	@ 0x40
 80009ee:	001a      	movs	r2, r3
 80009f0:	2100      	movs	r1, #0
 80009f2:	f005 ffc9 	bl	8006988 <memset>
    return send_data_and_get_response(
 80009f6:	193a      	adds	r2, r7, r4
 80009f8:	234c      	movs	r3, #76	@ 0x4c
 80009fa:	18f9      	adds	r1, r7, r3
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	4b08      	ldr	r3, [pc, #32]	@ (8000a20 <LoRaWAN_SetPort+0x98>)
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	4b08      	ldr	r3, [pc, #32]	@ (8000a24 <LoRaWAN_SetPort+0x9c>)
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2340      	movs	r3, #64	@ 0x40
 8000a08:	f7ff fe12 	bl	8000630 <send_data_and_get_response>
 8000a0c:	0003      	movs	r3, r0
        resp,
        sizeof(resp),
        5000,
        "OK"
    );
}
 8000a0e:	0018      	movs	r0, r3
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b019      	add	sp, #100	@ 0x64
 8000a14:	bd90      	pop	{r4, r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	00000275 	.word	0x00000275
 8000a1c:	080073c8 	.word	0x080073c8
 8000a20:	08007380 	.word	0x08007380
 8000a24:	00001388 	.word	0x00001388

08000a28 <LoRaWAN_SendHexOnPort>:
LoRaWAN_Error_t LoRaWAN_SendHexOnPort(
    ATC_HandleTypeDef *lora,
    uint8_t           port,
    const uint8_t    *payload,
    size_t            length
) {
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	200b      	movs	r0, #11
 8000a36:	183b      	adds	r3, r7, r0
 8000a38:	1c0a      	adds	r2, r1, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
    // 1) change to your desired port
    LoRaWAN_Error_t err = LoRaWAN_SetPort(lora, port);
 8000a3c:	2517      	movs	r5, #23
 8000a3e:	197c      	adds	r4, r7, r5
 8000a40:	183b      	adds	r3, r7, r0
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	0011      	movs	r1, r2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f7ff ff9d 	bl	8000988 <LoRaWAN_SetPort>
 8000a4e:	0003      	movs	r3, r0
 8000a50:	7023      	strb	r3, [r4, #0]
    if (err != LORAWAN_ERROR_OK) {
 8000a52:	197b      	adds	r3, r7, r5
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <LoRaWAN_SendHexOnPort+0x3c>
        return err;
 8000a5c:	197b      	adds	r3, r7, r5
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	b25b      	sxtb	r3, r3
 8000a62:	e006      	b.n	8000a72 <LoRaWAN_SendHexOnPort+0x4a>
    }
    // 2) send exactly as before
    return LoRaWAN_SendHex(lora, payload, length);
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	6879      	ldr	r1, [r7, #4]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f7ff fec4 	bl	80007f8 <LoRaWAN_SendHex>
 8000a70:	0003      	movs	r3, r0
}
 8000a72:	0018      	movs	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b006      	add	sp, #24
 8000a78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000a7c <LoRaWAN_Set_Battery>:

LoRaWAN_Error_t LoRaWAN_Set_Battery(
    ATC_HandleTypeDef *lora,
    uint8_t batteryStatus  // 0..254 per spec
) {
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b09b      	sub	sp, #108	@ 0x6c
 8000a80:	af02      	add	r7, sp, #8
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	000a      	movs	r2, r1
 8000a86:	1cfb      	adds	r3, r7, #3
 8000a88:	701a      	strb	r2, [r3, #0]
    if (!lora || !lora->huart || batteryStatus > 254U) {
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d007      	beq.n	8000aa0 <LoRaWAN_Set_Battery+0x24>
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <LoRaWAN_Set_Battery+0x24>
 8000a98:	1cfb      	adds	r3, r7, #3
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	2bff      	cmp	r3, #255	@ 0xff
 8000a9e:	d102      	bne.n	8000aa6 <LoRaWAN_Set_Battery+0x2a>
        return LORAWAN_ERROR_INVALID_PARAM;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	425b      	negs	r3, r3
 8000aa4:	e026      	b.n	8000af4 <LoRaWAN_Set_Battery+0x78>
    }
    char cmd[16];
    int len = snprintf(cmd, sizeof(cmd), "AT+BAT %u\r\n", (unsigned)batteryStatus);
 8000aa6:	1cfb      	adds	r3, r7, #3
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <LoRaWAN_Set_Battery+0x80>)
 8000aac:	214c      	movs	r1, #76	@ 0x4c
 8000aae:	1878      	adds	r0, r7, r1
 8000ab0:	2110      	movs	r1, #16
 8000ab2:	f005 fef9 	bl	80068a8 <sniprintf>
 8000ab6:	0003      	movs	r3, r0
 8000ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (len < 0 || len >= (int)sizeof(cmd)) {
 8000aba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	db02      	blt.n	8000ac6 <LoRaWAN_Set_Battery+0x4a>
 8000ac0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ac2:	2b0f      	cmp	r3, #15
 8000ac4:	dd02      	ble.n	8000acc <LoRaWAN_Set_Battery+0x50>
        return LORAWAN_ERROR_INVALID_PARAM;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	425b      	negs	r3, r3
 8000aca:	e013      	b.n	8000af4 <LoRaWAN_Set_Battery+0x78>
    }
    char resp[64] = {0};
 8000acc:	240c      	movs	r4, #12
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2340      	movs	r3, #64	@ 0x40
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f005 ff56 	bl	8006988 <memset>
    return send_data_and_get_response(
 8000adc:	193a      	adds	r2, r7, r4
 8000ade:	234c      	movs	r3, #76	@ 0x4c
 8000ae0:	18f9      	adds	r1, r7, r3
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <LoRaWAN_Set_Battery+0x84>)
 8000ae6:	9301      	str	r3, [sp, #4]
 8000ae8:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <LoRaWAN_Set_Battery+0x88>)
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2340      	movs	r3, #64	@ 0x40
 8000aee:	f7ff fd9f 	bl	8000630 <send_data_and_get_response>
 8000af2:	0003      	movs	r3, r0
        resp,
        sizeof(resp),
        5000,
        "OK"
    );
}
 8000af4:	0018      	movs	r0, r3
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b019      	add	sp, #100	@ 0x64
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	080073d4 	.word	0x080073d4
 8000b00:	08007380 	.word	0x08007380
 8000b04:	00001388 	.word	0x00001388

08000b08 <LoRaWAN_UpdateBattery>:

LoRaWAN_Error_t LoRaWAN_UpdateBattery(ATC_HandleTypeDef *lora) {
 8000b08:	b5b0      	push	{r4, r5, r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
    uint32_t v_mV;
    uint8_t  pct;
    Battery_Status_t bst = GetBatteryLevel(&v_mV, &pct);
 8000b10:	2516      	movs	r5, #22
 8000b12:	197c      	adds	r4, r7, r5
 8000b14:	230f      	movs	r3, #15
 8000b16:	18fa      	adds	r2, r7, r3
 8000b18:	2310      	movs	r3, #16
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	0011      	movs	r1, r2
 8000b1e:	0018      	movs	r0, r3
 8000b20:	f000 f89c 	bl	8000c5c <GetBatteryLevel>
 8000b24:	0003      	movs	r3, r0
 8000b26:	7023      	strb	r3, [r4, #0]
    if (bst != BATTERY_OK) {
 8000b28:	197b      	adds	r3, r7, r5
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b25b      	sxtb	r3, r3
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <LoRaWAN_UpdateBattery+0x30>
        return LORAWAN_ERROR_COMMUNICATION;
 8000b32:	2302      	movs	r3, #2
 8000b34:	425b      	negs	r3, r3
 8000b36:	e030      	b.n	8000b9a <LoRaWAN_UpdateBattery+0x92>
    // map pct(0..100) → batteryStatus(1..254):
    //   0%   → 1
    //   100% → 254
    //   linearly in between
    uint8_t batteryStatus;
    if (pct == 0) {
 8000b38:	230f      	movs	r3, #15
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d104      	bne.n	8000b4c <LoRaWAN_UpdateBattery+0x44>
        batteryStatus = 1;
 8000b42:	2317      	movs	r3, #23
 8000b44:	18fb      	adds	r3, r7, r3
 8000b46:	2201      	movs	r2, #1
 8000b48:	701a      	strb	r2, [r3, #0]
 8000b4a:	e01d      	b.n	8000b88 <LoRaWAN_UpdateBattery+0x80>
    } else if (pct >= 100) {
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	18fb      	adds	r3, r7, r3
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2b63      	cmp	r3, #99	@ 0x63
 8000b54:	d904      	bls.n	8000b60 <LoRaWAN_UpdateBattery+0x58>
        batteryStatus = 254;
 8000b56:	2317      	movs	r3, #23
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	22fe      	movs	r2, #254	@ 0xfe
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	e013      	b.n	8000b88 <LoRaWAN_UpdateBattery+0x80>
    } else {
        batteryStatus = (uint8_t)(((uint32_t)pct * 253U + 50U) / 100U + 1U);
 8000b60:	230f      	movs	r3, #15
 8000b62:	18fb      	adds	r3, r7, r3
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	001a      	movs	r2, r3
 8000b68:	0013      	movs	r3, r2
 8000b6a:	019b      	lsls	r3, r3, #6
 8000b6c:	1a9b      	subs	r3, r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	189b      	adds	r3, r3, r2
 8000b72:	3332      	adds	r3, #50	@ 0x32
 8000b74:	2164      	movs	r1, #100	@ 0x64
 8000b76:	0018      	movs	r0, r3
 8000b78:	f7ff fad8 	bl	800012c <__udivsi3>
 8000b7c:	0003      	movs	r3, r0
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	2317      	movs	r3, #23
 8000b82:	18fb      	adds	r3, r7, r3
 8000b84:	3201      	adds	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]
    }

    return LoRaWAN_Set_Battery(lora, batteryStatus);
 8000b88:	2317      	movs	r3, #23
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	0011      	movs	r1, r2
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff ff72 	bl	8000a7c <LoRaWAN_Set_Battery>
 8000b98:	0003      	movs	r3, r0
}
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b006      	add	sp, #24
 8000ba0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000ba4 <ReadBatteryVoltage>:
// Battery percentage curve (in mV)
#define V_MIN_MV 3000U    // 3.0 V → 0%
#define V_MAX_MV 4200U    // 4.2 V → 100%

int32_t ReadBatteryVoltage(void)
{
 8000ba4:	b5b0      	push	{r4, r5, r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;
    uint32_t raw;

    // 1) Enable the divider
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_SET);
 8000baa:	4b28      	ldr	r3, [pc, #160]	@ (8000c4c <ReadBatteryVoltage+0xa8>)
 8000bac:	2201      	movs	r2, #1
 8000bae:	2101      	movs	r1, #1
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f002 fb09 	bl	80031c8 <HAL_GPIO_WritePin>

    // 2) Wait for it to settle
    HAL_Delay(VBAT_SETTLE_DELAY_MS);
 8000bb6:	200a      	movs	r0, #10
 8000bb8:	f001 fae2 	bl	8002180 <HAL_Delay>

    // 3) Sample ADC
    status = HAL_ADC_Start(&hadc);
 8000bbc:	2517      	movs	r5, #23
 8000bbe:	197c      	adds	r4, r7, r5
 8000bc0:	4b23      	ldr	r3, [pc, #140]	@ (8000c50 <ReadBatteryVoltage+0xac>)
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f001 fd4a 	bl	800265c <HAL_ADC_Start>
 8000bc8:	0003      	movs	r3, r0
 8000bca:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) goto fail;
 8000bcc:	197b      	adds	r3, r7, r5
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d12c      	bne.n	8000c2e <ReadBatteryVoltage+0x8a>
    status = HAL_ADC_PollForConversion(&hadc, 10);
 8000bd4:	197c      	adds	r4, r7, r5
 8000bd6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c50 <ReadBatteryVoltage+0xac>)
 8000bd8:	210a      	movs	r1, #10
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f001 fdd2 	bl	8002784 <HAL_ADC_PollForConversion>
 8000be0:	0003      	movs	r3, r0
 8000be2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) goto fail;
 8000be4:	197b      	adds	r3, r7, r5
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d122      	bne.n	8000c32 <ReadBatteryVoltage+0x8e>
    raw = HAL_ADC_GetValue(&hadc);
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <ReadBatteryVoltage+0xac>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f001 fe64 	bl	80028bc <HAL_ADC_GetValue>
 8000bf4:	0003      	movs	r3, r0
 8000bf6:	613b      	str	r3, [r7, #16]
    HAL_ADC_Stop(&hadc);
 8000bf8:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <ReadBatteryVoltage+0xac>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f001 fd82 	bl	8002704 <HAL_ADC_Stop>

    // 4) Turn divider off
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_RESET);
 8000c00:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <ReadBatteryVoltage+0xa8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	2101      	movs	r1, #1
 8000c06:	0018      	movs	r0, r3
 8000c08:	f002 fade 	bl	80031c8 <HAL_GPIO_WritePin>

    // 5) Compute VBAT in mV:
    //    VBAT = (raw/ADC_MAX_COUNT) * ADC_REF_VOLTAGE_MV * (DIVIDER_RATIO_NUM/DIVIDER_RATIO_DEN)
    //    = (raw * ADC_REF_VOLTAGE_MV * DIVIDER_RATIO_NUM + denom/2) / denom  (rounded)
    const uint32_t denom = ADC_MAX_COUNT * DIVIDER_RATIO_DEN;
 8000c0c:	4b11      	ldr	r3, [pc, #68]	@ (8000c54 <ReadBatteryVoltage+0xb0>)
 8000c0e:	60fb      	str	r3, [r7, #12]
    uint32_t numerator = raw * ADC_REF_VOLTAGE_MV * DIVIDER_RATIO_NUM + (denom/2U);
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	4a11      	ldr	r2, [pc, #68]	@ (8000c58 <ReadBatteryVoltage+0xb4>)
 8000c14:	435a      	muls	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	085b      	lsrs	r3, r3, #1
 8000c1a:	18d3      	adds	r3, r2, r3
 8000c1c:	60bb      	str	r3, [r7, #8]
    uint32_t vbat_mV = numerator / denom;
 8000c1e:	68f9      	ldr	r1, [r7, #12]
 8000c20:	68b8      	ldr	r0, [r7, #8]
 8000c22:	f7ff fa83 	bl	800012c <__udivsi3>
 8000c26:	0003      	movs	r3, r0
 8000c28:	607b      	str	r3, [r7, #4]

    return (int32_t)vbat_mV;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	e00a      	b.n	8000c44 <ReadBatteryVoltage+0xa0>
    if (status != HAL_OK) goto fail;
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	e000      	b.n	8000c34 <ReadBatteryVoltage+0x90>
    if (status != HAL_OK) goto fail;
 8000c32:	46c0      	nop			@ (mov r8, r8)

fail:
    HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_RESET);
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <ReadBatteryVoltage+0xa8>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	2101      	movs	r1, #1
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f002 fac4 	bl	80031c8 <HAL_GPIO_WritePin>
    return -1;  // ADC error indicator
 8000c40:	2301      	movs	r3, #1
 8000c42:	425b      	negs	r3, r3
}
 8000c44:	0018      	movs	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	b006      	add	sp, #24
 8000c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4c:	50000400 	.word	0x50000400
 8000c50:	20000078 	.word	0x20000078
 8000c54:	00000fff 	.word	0x00000fff
 8000c58:	000019c8 	.word	0x000019c8

08000c5c <GetBatteryLevel>:

Battery_Status_t GetBatteryLevel(uint32_t *out_v, uint8_t *out_pct)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
    if (out_v == NULL || out_pct == NULL) {
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d002      	beq.n	8000c72 <GetBatteryLevel+0x16>
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <GetBatteryLevel+0x1c>
        return BATTERY_ERROR;
 8000c72:	2303      	movs	r3, #3
 8000c74:	425b      	negs	r3, r3
 8000c76:	e034      	b.n	8000ce2 <GetBatteryLevel+0x86>
    }

    int32_t v_mV = ReadBatteryVoltage();
 8000c78:	f7ff ff94 	bl	8000ba4 <ReadBatteryVoltage>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	617b      	str	r3, [r7, #20]
    if (v_mV < 0) {
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	da02      	bge.n	8000c8c <GetBatteryLevel+0x30>
        return BATTERY_ADC_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	425b      	negs	r3, r3
 8000c8a:	e02a      	b.n	8000ce2 <GetBatteryLevel+0x86>
    }

    *out_v = (uint32_t)v_mV;
 8000c8c:	697a      	ldr	r2, [r7, #20]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	601a      	str	r2, [r3, #0]

    if ((uint32_t)v_mV <= V_MIN_MV) {
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	4a15      	ldr	r2, [pc, #84]	@ (8000cec <GetBatteryLevel+0x90>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d803      	bhi.n	8000ca2 <GetBatteryLevel+0x46>
        *out_pct = 0;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e01e      	b.n	8000ce0 <GetBatteryLevel+0x84>
    }
    else if ((uint32_t)v_mV >= V_MAX_MV) {
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	4a12      	ldr	r2, [pc, #72]	@ (8000cf0 <GetBatteryLevel+0x94>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d903      	bls.n	8000cb2 <GetBatteryLevel+0x56>
        *out_pct = 100;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	2264      	movs	r2, #100	@ 0x64
 8000cae:	701a      	strb	r2, [r3, #0]
 8000cb0:	e016      	b.n	8000ce0 <GetBatteryLevel+0x84>
    }
    else {
        uint32_t range = V_MAX_MV - V_MIN_MV;
 8000cb2:	2396      	movs	r3, #150	@ 0x96
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	613b      	str	r3, [r7, #16]
        // pct = ((v_mV - V_MIN_MV) / range) * 100
        // = ( (v_mV - V_MIN_MV)*100 + range/2 ) / range
        uint32_t numerator = (uint32_t)(v_mV - V_MIN_MV) * 100U + (range/2U);
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	2264      	movs	r2, #100	@ 0x64
 8000cbc:	435a      	muls	r2, r3
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	085b      	lsrs	r3, r3, #1
 8000cc2:	18d3      	adds	r3, r2, r3
 8000cc4:	4a0b      	ldr	r2, [pc, #44]	@ (8000cf4 <GetBatteryLevel+0x98>)
 8000cc6:	4694      	mov	ip, r2
 8000cc8:	4463      	add	r3, ip
 8000cca:	60fb      	str	r3, [r7, #12]
        uint32_t pct = numerator / range;
 8000ccc:	6939      	ldr	r1, [r7, #16]
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f7ff fa2c 	bl	800012c <__udivsi3>
 8000cd4:	0003      	movs	r3, r0
 8000cd6:	60bb      	str	r3, [r7, #8]
        *out_pct = (uint8_t)pct;
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	701a      	strb	r2, [r3, #0]
    }

    return BATTERY_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b006      	add	sp, #24
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	00000bb8 	.word	0x00000bb8
 8000cf0:	00001067 	.word	0x00001067
 8000cf4:	fffb6c20 	.word	0xfffb6c20

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfe:	f001 f9cf 	bl	80020a0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(6000);
 8000d02:	4b4d      	ldr	r3, [pc, #308]	@ (8000e38 <main+0x140>)
 8000d04:	0018      	movs	r0, r3
 8000d06:	f001 fa3b 	bl	8002180 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d0a:	f000 f8a3 	bl	8000e54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d0e:	f000 fa35 	bl	800117c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d12:	f000 f961 	bl	8000fd8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d16:	f000 f9d1 	bl	80010bc <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000d1a:	f000 fa05 	bl	8001128 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 8000d1e:	f000 f99b 	bl	8001058 <MX_LPUART1_UART_Init>
  MX_ADC_Init();
 8000d22:	f000 f90f 	bl	8000f44 <MX_ADC_Init>
  RTC_WakeUp_Init();
 8000d26:	f001 f8ed 	bl	8001f04 <RTC_WakeUp_Init>
  LoRaWAN_Join(&lora);
 8000d2a:	4b44      	ldr	r3, [pc, #272]	@ (8000e3c <main+0x144>)
 8000d2c:	0018      	movs	r0, r3
 8000d2e:	f7ff fce7 	bl	8000700 <LoRaWAN_Join>
  LoRaWAN_UpdateBattery(&lora);
 8000d32:	4b42      	ldr	r3, [pc, #264]	@ (8000e3c <main+0x144>)
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff fee7 	bl	8000b08 <LoRaWAN_UpdateBattery>

  uint32_t batt_voltage = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  uint8_t batt_percentage = 0;
 8000d3e:	240f      	movs	r4, #15
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
  if (GetBatteryLevel(&batt_voltage, &batt_percentage) == BATTERY_OK) {
 8000d46:	193a      	adds	r2, r7, r4
 8000d48:	2310      	movs	r3, #16
 8000d4a:	18fb      	adds	r3, r7, r3
 8000d4c:	0011      	movs	r1, r2
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff ff84 	bl	8000c5c <GetBatteryLevel>
 8000d54:	1e03      	subs	r3, r0, #0
 8000d56:	d108      	bne.n	8000d6a <main+0x72>
	ConsolePrintf("Battery: %lu mV (%d%%)\r\n", batt_voltage, batt_percentage);
 8000d58:	6939      	ldr	r1, [r7, #16]
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	001a      	movs	r2, r3
 8000d60:	4b37      	ldr	r3, [pc, #220]	@ (8000e40 <main+0x148>)
 8000d62:	0018      	movs	r0, r3
 8000d64:	f000 fa64 	bl	8001230 <ConsolePrintf>
 8000d68:	e003      	b.n	8000d72 <main+0x7a>
  } else {
	ConsolePrintf("Battery measurement failed\r\n");
 8000d6a:	4b36      	ldr	r3, [pc, #216]	@ (8000e44 <main+0x14c>)
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f000 fa5f 	bl	8001230 <ConsolePrintf>
  }

  while (1)
  {
	  enter_sleep_mode();
 8000d72:	f001 f847 	bl	8001e04 <enter_sleep_mode>
      LoRaWAN_Error_t isConnected = LoRaWAN_Join_Status(&lora);
 8000d76:	2517      	movs	r5, #23
 8000d78:	197c      	adds	r4, r7, r5
 8000d7a:	4b30      	ldr	r3, [pc, #192]	@ (8000e3c <main+0x144>)
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff fdbb 	bl	80008f8 <LoRaWAN_Join_Status>
 8000d82:	0003      	movs	r3, r0
 8000d84:	7023      	strb	r3, [r4, #0]
      if (isConnected == LORAWAN_ERROR_OK)
 8000d86:	197b      	adds	r3, r7, r5
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	b25b      	sxtb	r3, r3
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d149      	bne.n	8000e24 <main+0x12c>
      {
          I2C_Error_t i2c_result = sensor_init_and_read();
 8000d90:	2516      	movs	r5, #22
 8000d92:	197c      	adds	r4, r7, r5
 8000d94:	f000 fcea 	bl	800176c <sensor_init_and_read>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	7023      	strb	r3, [r4, #0]
          uint8_t payload[3];
          if (i2c_result == I2C_ERROR_OK)
 8000d9c:	197b      	adds	r3, r7, r5
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b25b      	sxtb	r3, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d117      	bne.n	8000dd6 <main+0xde>
          {
              payload[0] = (uint8_t)(calculated_temp >> 8);
 8000da6:	4b28      	ldr	r3, [pc, #160]	@ (8000e48 <main+0x150>)
 8000da8:	881b      	ldrh	r3, [r3, #0]
 8000daa:	0a1b      	lsrs	r3, r3, #8
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	210c      	movs	r1, #12
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	701a      	strb	r2, [r3, #0]
              payload[1] = (uint8_t)(calculated_temp & 0xFF);
 8000db6:	4b24      	ldr	r3, [pc, #144]	@ (8000e48 <main+0x150>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	187b      	adds	r3, r7, r1
 8000dbe:	705a      	strb	r2, [r3, #1]
              payload[2] = calculated_hum;
 8000dc0:	4b22      	ldr	r3, [pc, #136]	@ (8000e4c <main+0x154>)
 8000dc2:	781a      	ldrb	r2, [r3, #0]
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	709a      	strb	r2, [r3, #2]
              LoRaWAN_SendHexOnPort(&lora, 1, payload, sizeof(payload));
 8000dc8:	187a      	adds	r2, r7, r1
 8000dca:	481c      	ldr	r0, [pc, #112]	@ (8000e3c <main+0x144>)
 8000dcc:	2303      	movs	r3, #3
 8000dce:	2101      	movs	r1, #1
 8000dd0:	f7ff fe2a 	bl	8000a28 <LoRaWAN_SendHexOnPort>
 8000dd4:	e7cd      	b.n	8000d72 <main+0x7a>
          }
          else if (i2c_result == I2C_ERROR_SENSORS_TOO_DIFFERENT)
 8000dd6:	2316      	movs	r3, #22
 8000dd8:	18fb      	adds	r3, r7, r3
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b25b      	sxtb	r3, r3
 8000dde:	3304      	adds	r3, #4
 8000de0:	d110      	bne.n	8000e04 <main+0x10c>
          {
        	  uint8_t payload[3];
        	  payload[0] = 255;
 8000de2:	2108      	movs	r1, #8
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	22ff      	movs	r2, #255	@ 0xff
 8000de8:	701a      	strb	r2, [r3, #0]
		   	  payload[1] = 255;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	22ff      	movs	r2, #255	@ 0xff
 8000dee:	705a      	strb	r2, [r3, #1]
			  payload[2] = 255;
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	22ff      	movs	r2, #255	@ 0xff
 8000df4:	709a      	strb	r2, [r3, #2]
        	  LoRaWAN_SendHexOnPort(&lora, 6, payload, sizeof(payload));
 8000df6:	187a      	adds	r2, r7, r1
 8000df8:	4810      	ldr	r0, [pc, #64]	@ (8000e3c <main+0x144>)
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	2106      	movs	r1, #6
 8000dfe:	f7ff fe13 	bl	8000a28 <LoRaWAN_SendHexOnPort>
 8000e02:	e7b6      	b.n	8000d72 <main+0x7a>
          }
          else
          {
              uint8_t payload[3];
              payload[0] = 255;
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	22ff      	movs	r2, #255	@ 0xff
 8000e08:	701a      	strb	r2, [r3, #0]
              payload[1] = 255;
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	22ff      	movs	r2, #255	@ 0xff
 8000e0e:	705a      	strb	r2, [r3, #1]
              payload[2] = 255;
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	22ff      	movs	r2, #255	@ 0xff
 8000e14:	709a      	strb	r2, [r3, #2]
//              LoRaWAN_SendHex(&lora, payload, 3);
              LoRaWAN_SendHexOnPort(&lora, 6, payload, sizeof(payload));
 8000e16:	1d3a      	adds	r2, r7, #4
 8000e18:	4808      	ldr	r0, [pc, #32]	@ (8000e3c <main+0x144>)
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	2106      	movs	r1, #6
 8000e1e:	f7ff fe03 	bl	8000a28 <LoRaWAN_SendHexOnPort>
 8000e22:	e7a6      	b.n	8000d72 <main+0x7a>
          }
      }
      else
      {
          ConsolePrintf("I am not joined, trying to join again...\r\n");
 8000e24:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <main+0x158>)
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 fa02 	bl	8001230 <ConsolePrintf>
          LoRaWAN_Join(&lora);
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <main+0x144>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f7ff fc66 	bl	8000700 <LoRaWAN_Join>
  {
 8000e34:	e79d      	b.n	8000d72 <main+0x7a>
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	00001770 	.word	0x00001770
 8000e3c:	2000025c 	.word	0x2000025c
 8000e40:	080073e0 	.word	0x080073e0
 8000e44:	080073fc 	.word	0x080073fc
 8000e48:	2000026e 	.word	0x2000026e
 8000e4c:	20000270 	.word	0x20000270
 8000e50:	0800741c 	.word	0x0800741c

08000e54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b09f      	sub	sp, #124	@ 0x7c
 8000e58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	2440      	movs	r4, #64	@ 0x40
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	0018      	movs	r0, r3
 8000e60:	2338      	movs	r3, #56	@ 0x38
 8000e62:	001a      	movs	r2, r3
 8000e64:	2100      	movs	r1, #0
 8000e66:	f005 fd8f 	bl	8006988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e6a:	232c      	movs	r3, #44	@ 0x2c
 8000e6c:	18fb      	adds	r3, r7, r3
 8000e6e:	0018      	movs	r0, r3
 8000e70:	2314      	movs	r3, #20
 8000e72:	001a      	movs	r2, r3
 8000e74:	2100      	movs	r1, #0
 8000e76:	f005 fd87 	bl	8006988 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	2328      	movs	r3, #40	@ 0x28
 8000e80:	001a      	movs	r2, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	f005 fd80 	bl	8006988 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e88:	4b2c      	ldr	r3, [pc, #176]	@ (8000f3c <SystemClock_Config+0xe8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a2c      	ldr	r2, [pc, #176]	@ (8000f40 <SystemClock_Config+0xec>)
 8000e8e:	401a      	ands	r2, r3
 8000e90:	4b2a      	ldr	r3, [pc, #168]	@ (8000f3c <SystemClock_Config+0xe8>)
 8000e92:	2180      	movs	r1, #128	@ 0x80
 8000e94:	0109      	lsls	r1, r1, #4
 8000e96:	430a      	orrs	r2, r1
 8000e98:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8000e9a:	0021      	movs	r1, r4
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2218      	movs	r2, #24
 8000ea0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ea8:	187b      	adds	r3, r7, r1
 8000eaa:	2201      	movs	r2, #1
 8000eac:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000eae:	187b      	adds	r3, r7, r1
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000eb4:	187b      	adds	r3, r7, r1
 8000eb6:	22a0      	movs	r2, #160	@ 0xa0
 8000eb8:	0212      	lsls	r2, r2, #8
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f003 f969 	bl	800419c <HAL_RCC_OscConfig>
 8000eca:	1e03      	subs	r3, r0, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000ece:	f000 fa25 	bl	800131c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed2:	212c      	movs	r1, #44	@ 0x2c
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	220f      	movs	r2, #15
 8000ed8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	2200      	movs	r2, #0
 8000eea:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eec:	187b      	adds	r3, r7, r1
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f003 fd24 	bl	8004944 <HAL_RCC_ClockConfig>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000f00:	f000 fa0c 	bl	800131c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	222d      	movs	r2, #45	@ 0x2d
 8000f08:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2200      	movs	r2, #0
 8000f14:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2280      	movs	r2, #128	@ 0x80
 8000f20:	0292      	lsls	r2, r2, #10
 8000f22:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	0018      	movs	r0, r3
 8000f28:	f003 ff10 	bl	8004d4c <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	1e03      	subs	r3, r0, #0
 8000f2e:	d001      	beq.n	8000f34 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000f30:	f000 f9f4 	bl	800131c <Error_Handler>
  }
}
 8000f34:	46c0      	nop			@ (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b01f      	add	sp, #124	@ 0x7c
 8000f3a:	bd90      	pop	{r4, r7, pc}
 8000f3c:	40007000 	.word	0x40007000
 8000f40:	ffffe7ff 	.word	0xffffe7ff

08000f44 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
void MX_ADC_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000f48:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000f4a:	4a22      	ldr	r2, [pc, #136]	@ (8000fd4 <MX_ADC_Init+0x90>)
 8000f4c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000f4e:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000f54:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000f56:	22c0      	movs	r2, #192	@ 0xc0
 8000f58:	0612      	lsls	r2, r2, #24
 8000f5a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000f64:	2207      	movs	r2, #7
 8000f66:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000f68:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f6e:	4b18      	ldr	r3, [pc, #96]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f74:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000f76:	2220      	movs	r2, #32
 8000f78:	2100      	movs	r1, #0
 8000f7a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000f7e:	2221      	movs	r2, #33	@ 0x21
 8000f80:	2100      	movs	r1, #0
 8000f82:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f84:	4b12      	ldr	r3, [pc, #72]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f8a:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000f8c:	22c2      	movs	r2, #194	@ 0xc2
 8000f8e:	32ff      	adds	r2, #255	@ 0xff
 8000f90:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f92:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000f94:	222c      	movs	r2, #44	@ 0x2c
 8000f96:	2100      	movs	r1, #0
 8000f98:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = ENABLE;
 8000fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <MX_ADC_Init+0x8c>)
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f001 f93e 	bl	800223c <HAL_ADC_Init>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC_Init+0x84>
  {
    Error_Handler();
 8000fc4:	f000 f9aa 	bl	800131c <Error_Handler>
  // to minimize power consumption
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000fc8:	46c0      	nop			@ (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			@ (mov r8, r8)
 8000fd0:	20000078 	.word	0x20000078
 8000fd4:	40012400 	.word	0x40012400

08000fd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <MX_I2C1_Init+0x78>)
 8000fde:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <MX_I2C1_Init+0x7c>)
 8000fe0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8001050 <MX_I2C1_Init+0x78>)
 8000fe4:	22c1      	movs	r2, #193	@ 0xc1
 8000fe6:	00d2      	lsls	r2, r2, #3
 8000fe8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fea:	4b19      	ldr	r3, [pc, #100]	@ (8001050 <MX_I2C1_Init+0x78>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff0:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <MX_I2C1_Init+0x78>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <MX_I2C1_Init+0x78>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <MX_I2C1_Init+0x78>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001002:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <MX_I2C1_Init+0x78>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001008:	4b11      	ldr	r3, [pc, #68]	@ (8001050 <MX_I2C1_Init+0x78>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800100e:	4b10      	ldr	r3, [pc, #64]	@ (8001050 <MX_I2C1_Init+0x78>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <MX_I2C1_Init+0x78>)
 8001016:	0018      	movs	r0, r3
 8001018:	f002 f8f4 	bl	8003204 <HAL_I2C_Init>
 800101c:	1e03      	subs	r3, r0, #0
 800101e:	d001      	beq.n	8001024 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001020:	f000 f97c 	bl	800131c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001024:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <MX_I2C1_Init+0x78>)
 8001026:	2100      	movs	r1, #0
 8001028:	0018      	movs	r0, r3
 800102a:	f002 ffc3 	bl	8003fb4 <HAL_I2CEx_ConfigAnalogFilter>
 800102e:	1e03      	subs	r3, r0, #0
 8001030:	d001      	beq.n	8001036 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001032:	f000 f973 	bl	800131c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001036:	4b06      	ldr	r3, [pc, #24]	@ (8001050 <MX_I2C1_Init+0x78>)
 8001038:	2100      	movs	r1, #0
 800103a:	0018      	movs	r0, r3
 800103c:	f003 f806 	bl	800404c <HAL_I2CEx_ConfigDigitalFilter>
 8001040:	1e03      	subs	r3, r0, #0
 8001042:	d001      	beq.n	8001048 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001044:	f000 f96a 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	200000d4 	.word	0x200000d4
 8001054:	40005400 	.word	0x40005400

08001058 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_LPUART1_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <MX_LPUART1_UART_Init+0x58>)
 800105e:	4a15      	ldr	r2, [pc, #84]	@ (80010b4 <MX_LPUART1_UART_Init+0x5c>)
 8001060:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001062:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <MX_LPUART1_UART_Init+0x58>)
 8001064:	22e1      	movs	r2, #225	@ 0xe1
 8001066:	0252      	lsls	r2, r2, #9
 8001068:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b11      	ldr	r3, [pc, #68]	@ (80010b0 <MX_LPUART1_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0f      	ldr	r3, [pc, #60]	@ (80010b0 <MX_LPUART1_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0e      	ldr	r3, [pc, #56]	@ (80010b0 <MX_LPUART1_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b0c      	ldr	r3, [pc, #48]	@ (80010b0 <MX_LPUART1_UART_Init+0x58>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	@ (80010b0 <MX_LPUART1_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001088:	4b09      	ldr	r3, [pc, #36]	@ (80010b0 <MX_LPUART1_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800108e:	4b08      	ldr	r3, [pc, #32]	@ (80010b0 <MX_LPUART1_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001094:	4b06      	ldr	r3, [pc, #24]	@ (80010b0 <MX_LPUART1_UART_Init+0x58>)
 8001096:	0018      	movs	r0, r3
 8001098:	f004 fb62 	bl	8005760 <HAL_UART_Init>
 800109c:	1e03      	subs	r3, r0, #0
 800109e:	d001      	beq.n	80010a4 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80010a0:	f000 f93c 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */
  lora.huart = &hlpuart1;
 80010a4:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <MX_LPUART1_UART_Init+0x60>)
 80010a6:	4a02      	ldr	r2, [pc, #8]	@ (80010b0 <MX_LPUART1_UART_Init+0x58>)
 80010a8:	601a      	str	r2, [r3, #0]
  /* USER CODE END LPUART1_Init 2 */

}
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20000128 	.word	0x20000128
 80010b4:	40004800 	.word	0x40004800
 80010b8:	2000025c 	.word	0x2000025c

080010bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010c0:	4b16      	ldr	r3, [pc, #88]	@ (800111c <MX_USART1_UART_Init+0x60>)
 80010c2:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <MX_USART1_UART_Init+0x64>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010c6:	4b15      	ldr	r3, [pc, #84]	@ (800111c <MX_USART1_UART_Init+0x60>)
 80010c8:	22e1      	movs	r2, #225	@ 0xe1
 80010ca:	0252      	lsls	r2, r2, #9
 80010cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <MX_USART1_UART_Init+0x60>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <MX_USART1_UART_Init+0x60>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010da:	4b10      	ldr	r3, [pc, #64]	@ (800111c <MX_USART1_UART_Init+0x60>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <MX_USART1_UART_Init+0x60>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b0d      	ldr	r3, [pc, #52]	@ (800111c <MX_USART1_UART_Init+0x60>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <MX_USART1_UART_Init+0x60>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f2:	4b0a      	ldr	r3, [pc, #40]	@ (800111c <MX_USART1_UART_Init+0x60>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <MX_USART1_UART_Init+0x60>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010fe:	4b07      	ldr	r3, [pc, #28]	@ (800111c <MX_USART1_UART_Init+0x60>)
 8001100:	0018      	movs	r0, r3
 8001102:	f004 fb2d 	bl	8005760 <HAL_UART_Init>
 8001106:	1e03      	subs	r3, r0, #0
 8001108:	d001      	beq.n	800110e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800110a:	f000 f907 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  ConsolePrintf("USART1 (DBG) Cnfigured\r\n");
 800110e:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <MX_USART1_UART_Init+0x68>)
 8001110:	0018      	movs	r0, r3
 8001112:	f000 f88d 	bl	8001230 <ConsolePrintf>
  /* USER CODE END USART1_Init 2 */

}
 8001116:	46c0      	nop			@ (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200001b0 	.word	0x200001b0
 8001120:	40013800 	.word	0x40013800
 8001124:	08007448 	.word	0x08007448

08001128 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800112c:	4b11      	ldr	r3, [pc, #68]	@ (8001174 <MX_RTC_Init+0x4c>)
 800112e:	4a12      	ldr	r2, [pc, #72]	@ (8001178 <MX_RTC_Init+0x50>)
 8001130:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <MX_RTC_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001138:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <MX_RTC_Init+0x4c>)
 800113a:	227f      	movs	r2, #127	@ 0x7f
 800113c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800113e:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <MX_RTC_Init+0x4c>)
 8001140:	22ff      	movs	r2, #255	@ 0xff
 8001142:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <MX_RTC_Init+0x4c>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <MX_RTC_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001150:	4b08      	ldr	r3, [pc, #32]	@ (8001174 <MX_RTC_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001156:	4b07      	ldr	r3, [pc, #28]	@ (8001174 <MX_RTC_Init+0x4c>)
 8001158:	2200      	movs	r2, #0
 800115a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800115c:	4b05      	ldr	r3, [pc, #20]	@ (8001174 <MX_RTC_Init+0x4c>)
 800115e:	0018      	movs	r0, r3
 8001160:	f003 ff92 	bl	8005088 <HAL_RTC_Init>
 8001164:	1e03      	subs	r3, r0, #0
 8001166:	d001      	beq.n	800116c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001168:	f000 f8d8 	bl	800131c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800116c:	46c0      	nop			@ (mov r8, r8)
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			@ (mov r8, r8)
 8001174:	20000238 	.word	0x20000238
 8001178:	40002800 	.word	0x40002800

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b089      	sub	sp, #36	@ 0x24
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	240c      	movs	r4, #12
 8001184:	193b      	adds	r3, r7, r4
 8001186:	0018      	movs	r0, r3
 8001188:	2314      	movs	r3, #20
 800118a:	001a      	movs	r2, r3
 800118c:	2100      	movs	r1, #0
 800118e:	f005 fbfb 	bl	8006988 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b25      	ldr	r3, [pc, #148]	@ (8001228 <MX_GPIO_Init+0xac>)
 8001194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001196:	4b24      	ldr	r3, [pc, #144]	@ (8001228 <MX_GPIO_Init+0xac>)
 8001198:	2101      	movs	r1, #1
 800119a:	430a      	orrs	r2, r1
 800119c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800119e:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011a2:	2201      	movs	r2, #1
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011b0:	2102      	movs	r1, #2
 80011b2:	430a      	orrs	r2, r1
 80011b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <MX_GPIO_Init+0xac>)
 80011b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ba:	2202      	movs	r2, #2
 80011bc:	4013      	ands	r3, r2
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VBAT_MEAS_EN_GPIO_Port, VBAT_MEAS_EN_Pin, GPIO_PIN_SET);
 80011c2:	4b1a      	ldr	r3, [pc, #104]	@ (800122c <MX_GPIO_Init+0xb0>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	2101      	movs	r1, #1
 80011c8:	0018      	movs	r0, r3
 80011ca:	f001 fffd 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80011ce:	4b17      	ldr	r3, [pc, #92]	@ (800122c <MX_GPIO_Init+0xb0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	2120      	movs	r1, #32
 80011d4:	0018      	movs	r0, r3
 80011d6:	f001 fff7 	bl	80031c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VBAT_MEAS_EN_Pin I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = VBAT_MEAS_EN_Pin|I2C_ENABLE_Pin;
 80011da:	193b      	adds	r3, r7, r4
 80011dc:	2221      	movs	r2, #33	@ 0x21
 80011de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	193b      	adds	r3, r7, r4
 80011e2:	2201      	movs	r2, #1
 80011e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	193b      	adds	r3, r7, r4
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	193b      	adds	r3, r7, r4
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f2:	193b      	adds	r3, r7, r4
 80011f4:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <MX_GPIO_Init+0xb0>)
 80011f6:	0019      	movs	r1, r3
 80011f8:	0010      	movs	r0, r2
 80011fa:	f001 fd85 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011fe:	0021      	movs	r1, r4
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2202      	movs	r2, #2
 8001204:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2203      	movs	r2, #3
 800120a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	187b      	adds	r3, r7, r1
 8001214:	4a05      	ldr	r2, [pc, #20]	@ (800122c <MX_GPIO_Init+0xb0>)
 8001216:	0019      	movs	r1, r3
 8001218:	0010      	movs	r0, r2
 800121a:	f001 fd75 	bl	8002d08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b009      	add	sp, #36	@ 0x24
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	40021000 	.word	0x40021000
 800122c:	50000400 	.word	0x50000400

08001230 <ConsolePrintf>:

/* USER CODE BEGIN 4 */
void ConsolePrintf(const char *format, ...)
{
 8001230:	b40f      	push	{r0, r1, r2, r3}
 8001232:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001234:	b0df      	sub	sp, #380	@ 0x17c
 8001236:	af06      	add	r7, sp, #24
  char final_buffer[160];    // Combined buffer (timestamp + message)

  // Get time and date from RTC
  RTC_DateTypeDef date;
  RTC_TimeTypeDef time;
  HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001238:	2308      	movs	r3, #8
 800123a:	18f9      	adds	r1, r7, r3
 800123c:	4b31      	ldr	r3, [pc, #196]	@ (8001304 <ConsolePrintf+0xd4>)
 800123e:	2200      	movs	r2, #0
 8001240:	0018      	movs	r0, r3
 8001242:	f003 ffbd 	bl	80051c0 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001246:	231c      	movs	r3, #28
 8001248:	18f9      	adds	r1, r7, r3
 800124a:	4b2e      	ldr	r3, [pc, #184]	@ (8001304 <ConsolePrintf+0xd4>)
 800124c:	2200      	movs	r2, #0
 800124e:	0018      	movs	r0, r3
 8001250:	f004 f814 	bl	800527c <HAL_RTC_GetDate>

  // Format timestamp as [YYYY-MM-DD HH:MM:SS]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
           date.Year, date.Month, date.Date,
 8001254:	4b2c      	ldr	r3, [pc, #176]	@ (8001308 <ConsolePrintf+0xd8>)
 8001256:	22b0      	movs	r2, #176	@ 0xb0
 8001258:	0052      	lsls	r2, r2, #1
 800125a:	189b      	adds	r3, r3, r2
 800125c:	19db      	adds	r3, r3, r7
 800125e:	78db      	ldrb	r3, [r3, #3]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001260:	469c      	mov	ip, r3
           date.Year, date.Month, date.Date,
 8001262:	4b29      	ldr	r3, [pc, #164]	@ (8001308 <ConsolePrintf+0xd8>)
 8001264:	189b      	adds	r3, r3, r2
 8001266:	19db      	adds	r3, r3, r7
 8001268:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 800126a:	0019      	movs	r1, r3
           date.Year, date.Month, date.Date,
 800126c:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <ConsolePrintf+0xd8>)
 800126e:	189b      	adds	r3, r3, r2
 8001270:	19db      	adds	r3, r3, r7
 8001272:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001274:	001c      	movs	r4, r3
           time.Hours, time.Minutes, time.Seconds);
 8001276:	4b25      	ldr	r3, [pc, #148]	@ (800130c <ConsolePrintf+0xdc>)
 8001278:	189b      	adds	r3, r3, r2
 800127a:	19db      	adds	r3, r3, r7
 800127c:	781b      	ldrb	r3, [r3, #0]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 800127e:	001d      	movs	r5, r3
           time.Hours, time.Minutes, time.Seconds);
 8001280:	4b22      	ldr	r3, [pc, #136]	@ (800130c <ConsolePrintf+0xdc>)
 8001282:	189b      	adds	r3, r3, r2
 8001284:	19db      	adds	r3, r3, r7
 8001286:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001288:	001e      	movs	r6, r3
           time.Hours, time.Minutes, time.Seconds);
 800128a:	4b20      	ldr	r3, [pc, #128]	@ (800130c <ConsolePrintf+0xdc>)
 800128c:	189b      	adds	r3, r3, r2
 800128e:	19db      	adds	r3, r3, r7
 8001290:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_buffer, sizeof(timestamp_buffer), "[20%02d-%02d-%02d %02d:%02d:%02d] ",
 8001292:	4a1f      	ldr	r2, [pc, #124]	@ (8001310 <ConsolePrintf+0xe0>)
 8001294:	20c0      	movs	r0, #192	@ 0xc0
 8001296:	1838      	adds	r0, r7, r0
 8001298:	9304      	str	r3, [sp, #16]
 800129a:	9603      	str	r6, [sp, #12]
 800129c:	9502      	str	r5, [sp, #8]
 800129e:	9401      	str	r4, [sp, #4]
 80012a0:	9100      	str	r1, [sp, #0]
 80012a2:	4663      	mov	r3, ip
 80012a4:	2120      	movs	r1, #32
 80012a6:	f005 faff 	bl	80068a8 <sniprintf>

  // Format the original message
  va_list args;
  va_start(args, format);
 80012aa:	23be      	movs	r3, #190	@ 0xbe
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	18fb      	adds	r3, r7, r3
 80012b0:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), format, args);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	22bc      	movs	r2, #188	@ 0xbc
 80012b6:	0052      	lsls	r2, r2, #1
 80012b8:	18ba      	adds	r2, r7, r2
 80012ba:	6812      	ldr	r2, [r2, #0]
 80012bc:	25e0      	movs	r5, #224	@ 0xe0
 80012be:	1978      	adds	r0, r7, r5
 80012c0:	2180      	movs	r1, #128	@ 0x80
 80012c2:	f005 fb55 	bl	8006970 <vsniprintf>
  va_end(args);

  // Combine timestamp and message
  snprintf(final_buffer, sizeof(final_buffer), "%s%s", timestamp_buffer, buffer);
 80012c6:	20c0      	movs	r0, #192	@ 0xc0
 80012c8:	1839      	adds	r1, r7, r0
 80012ca:	4a12      	ldr	r2, [pc, #72]	@ (8001314 <ConsolePrintf+0xe4>)
 80012cc:	2420      	movs	r4, #32
 80012ce:	1938      	adds	r0, r7, r4
 80012d0:	197b      	adds	r3, r7, r5
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	000b      	movs	r3, r1
 80012d6:	21a0      	movs	r1, #160	@ 0xa0
 80012d8:	f005 fae6 	bl	80068a8 <sniprintf>

  // Transmit the combined message
  HAL_UART_Transmit(&huart1, (uint8_t *)final_buffer, strlen(final_buffer), HAL_MAX_DELAY);
 80012dc:	193b      	adds	r3, r7, r4
 80012de:	0018      	movs	r0, r3
 80012e0:	f7fe ff12 	bl	8000108 <strlen>
 80012e4:	0003      	movs	r3, r0
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	2301      	movs	r3, #1
 80012ea:	425b      	negs	r3, r3
 80012ec:	1939      	adds	r1, r7, r4
 80012ee:	480a      	ldr	r0, [pc, #40]	@ (8001318 <ConsolePrintf+0xe8>)
 80012f0:	f004 fac8 	bl	8005884 <HAL_UART_Transmit>
}
 80012f4:	46c0      	nop			@ (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b059      	add	sp, #356	@ 0x164
 80012fa:	bcf0      	pop	{r4, r5, r6, r7}
 80012fc:	bc08      	pop	{r3}
 80012fe:	b004      	add	sp, #16
 8001300:	4718      	bx	r3
 8001302:	46c0      	nop			@ (mov r8, r8)
 8001304:	20000238 	.word	0x20000238
 8001308:	fffffebc 	.word	0xfffffebc
 800130c:	fffffea8 	.word	0xfffffea8
 8001310:	08007464 	.word	0x08007464
 8001314:	08007488 	.word	0x08007488
 8001318:	200001b0 	.word	0x200001b0

0800131c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001320:	b672      	cpsid	i
}
 8001322:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001324:	46c0      	nop			@ (mov r8, r8)
 8001326:	e7fd      	b.n	8001324 <Error_Handler+0x8>

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_MspInit+0x2c>)
 800132e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001330:	4b08      	ldr	r3, [pc, #32]	@ (8001354 <HAL_MspInit+0x2c>)
 8001332:	2101      	movs	r1, #1
 8001334:	430a      	orrs	r2, r1
 8001336:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001338:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_MspInit+0x2c>)
 800133a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800133c:	4b05      	ldr	r3, [pc, #20]	@ (8001354 <HAL_MspInit+0x2c>)
 800133e:	2180      	movs	r1, #128	@ 0x80
 8001340:	0549      	lsls	r1, r1, #21
 8001342:	430a      	orrs	r2, r1
 8001344:	639a      	str	r2, [r3, #56]	@ 0x38

  /* System interrupt init*/

  /** Select which pad is connected to VREFINT_ADC
  */
  HAL_SYSCFG_VREFINT_OutputSelect(SYSCFG_VREFINT_OUT_PB1);
 8001346:	2020      	movs	r0, #32
 8001348:	f000 ff62 	bl	8002210 <HAL_SYSCFG_VREFINT_OutputSelect>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134c:	46c0      	nop			@ (mov r8, r8)
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			@ (mov r8, r8)
 8001354:	40021000 	.word	0x40021000

08001358 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b089      	sub	sp, #36	@ 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001360:	240c      	movs	r4, #12
 8001362:	193b      	adds	r3, r7, r4
 8001364:	0018      	movs	r0, r3
 8001366:	2314      	movs	r3, #20
 8001368:	001a      	movs	r2, r3
 800136a:	2100      	movs	r1, #0
 800136c:	f005 fb0c 	bl	8006988 <memset>
  if(hadc->Instance==ADC1)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a14      	ldr	r2, [pc, #80]	@ (80013c8 <HAL_ADC_MspInit+0x70>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d122      	bne.n	80013c0 <HAL_ADC_MspInit+0x68>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <HAL_ADC_MspInit+0x74>)
 800137c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800137e:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <HAL_ADC_MspInit+0x74>)
 8001380:	2180      	movs	r1, #128	@ 0x80
 8001382:	0089      	lsls	r1, r1, #2
 8001384:	430a      	orrs	r2, r1
 8001386:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001388:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <HAL_ADC_MspInit+0x74>)
 800138a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800138c:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <HAL_ADC_MspInit+0x74>)
 800138e:	2101      	movs	r1, #1
 8001390:	430a      	orrs	r2, r1
 8001392:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001394:	4b0d      	ldr	r3, [pc, #52]	@ (80013cc <HAL_ADC_MspInit+0x74>)
 8001396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001398:	2201      	movs	r2, #1
 800139a:	4013      	ands	r3, r2
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = VBAT_MEAS_Pin;
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	2201      	movs	r2, #1
 80013a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a6:	193b      	adds	r3, r7, r4
 80013a8:	2203      	movs	r2, #3
 80013aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	193b      	adds	r3, r7, r4
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBAT_MEAS_GPIO_Port, &GPIO_InitStruct);
 80013b2:	193a      	adds	r2, r7, r4
 80013b4:	23a0      	movs	r3, #160	@ 0xa0
 80013b6:	05db      	lsls	r3, r3, #23
 80013b8:	0011      	movs	r1, r2
 80013ba:	0018      	movs	r0, r3
 80013bc:	f001 fca4 	bl	8002d08 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80013c0:	46c0      	nop			@ (mov r8, r8)
 80013c2:	46bd      	mov	sp, r7
 80013c4:	b009      	add	sp, #36	@ 0x24
 80013c6:	bd90      	pop	{r4, r7, pc}
 80013c8:	40012400 	.word	0x40012400
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_ADC_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a09      	ldr	r2, [pc, #36]	@ (8001404 <HAL_ADC_MspDeInit+0x34>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10b      	bne.n	80013fa <HAL_ADC_MspDeInit+0x2a>
  {
    /* USER CODE BEGIN ADC1_MspDeInit 0 */

    /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 80013e2:	4b09      	ldr	r3, [pc, #36]	@ (8001408 <HAL_ADC_MspDeInit+0x38>)
 80013e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <HAL_ADC_MspDeInit+0x38>)
 80013e8:	4908      	ldr	r1, [pc, #32]	@ (800140c <HAL_ADC_MspDeInit+0x3c>)
 80013ea:	400a      	ands	r2, r1
 80013ec:	635a      	str	r2, [r3, #52]	@ 0x34

    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    HAL_GPIO_DeInit(VBAT_MEAS_GPIO_Port, VBAT_MEAS_Pin);
 80013ee:	23a0      	movs	r3, #160	@ 0xa0
 80013f0:	05db      	lsls	r3, r3, #23
 80013f2:	2101      	movs	r1, #1
 80013f4:	0018      	movs	r0, r3
 80013f6:	f001 fe05 	bl	8003004 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN ADC1_MspDeInit 1 */

    /* USER CODE END ADC1_MspDeInit 1 */
  }

}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b002      	add	sp, #8
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			@ (mov r8, r8)
 8001404:	40012400 	.word	0x40012400
 8001408:	40021000 	.word	0x40021000
 800140c:	fffffdff 	.word	0xfffffdff

08001410 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	240c      	movs	r4, #12
 800141a:	193b      	adds	r3, r7, r4
 800141c:	0018      	movs	r0, r3
 800141e:	2314      	movs	r3, #20
 8001420:	001a      	movs	r2, r3
 8001422:	2100      	movs	r1, #0
 8001424:	f005 fab0 	bl	8006988 <memset>
  if(hi2c->Instance==I2C1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a17      	ldr	r2, [pc, #92]	@ (800148c <HAL_I2C_MspInit+0x7c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d128      	bne.n	8001484 <HAL_I2C_MspInit+0x74>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <HAL_I2C_MspInit+0x80>)
 8001434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001436:	4b16      	ldr	r3, [pc, #88]	@ (8001490 <HAL_I2C_MspInit+0x80>)
 8001438:	2102      	movs	r1, #2
 800143a:	430a      	orrs	r2, r1
 800143c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800143e:	4b14      	ldr	r3, [pc, #80]	@ (8001490 <HAL_I2C_MspInit+0x80>)
 8001440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001442:	2202      	movs	r2, #2
 8001444:	4013      	ands	r3, r2
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800144a:	0021      	movs	r1, r4
 800144c:	187b      	adds	r3, r7, r1
 800144e:	22c0      	movs	r2, #192	@ 0xc0
 8001450:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001452:	187b      	adds	r3, r7, r1
 8001454:	2212      	movs	r2, #18
 8001456:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	187b      	adds	r3, r7, r1
 8001460:	2203      	movs	r2, #3
 8001462:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2201      	movs	r2, #1
 8001468:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146a:	187b      	adds	r3, r7, r1
 800146c:	4a09      	ldr	r2, [pc, #36]	@ (8001494 <HAL_I2C_MspInit+0x84>)
 800146e:	0019      	movs	r1, r3
 8001470:	0010      	movs	r0, r2
 8001472:	f001 fc49 	bl	8002d08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_I2C_MspInit+0x80>)
 8001478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800147a:	4b05      	ldr	r3, [pc, #20]	@ (8001490 <HAL_I2C_MspInit+0x80>)
 800147c:	2180      	movs	r1, #128	@ 0x80
 800147e:	0389      	lsls	r1, r1, #14
 8001480:	430a      	orrs	r2, r1
 8001482:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001484:	46c0      	nop			@ (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b009      	add	sp, #36	@ 0x24
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	40005400 	.word	0x40005400
 8001490:	40021000 	.word	0x40021000
 8001494:	50000400 	.word	0x50000400

08001498 <HAL_I2C_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0b      	ldr	r2, [pc, #44]	@ (80014d4 <HAL_I2C_MspDeInit+0x3c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d10f      	bne.n	80014ca <HAL_I2C_MspDeInit+0x32>
  {
    /* USER CODE BEGIN I2C1_MspDeInit 0 */

    /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80014aa:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_I2C_MspDeInit+0x40>)
 80014ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014ae:	4b0a      	ldr	r3, [pc, #40]	@ (80014d8 <HAL_I2C_MspDeInit+0x40>)
 80014b0:	490a      	ldr	r1, [pc, #40]	@ (80014dc <HAL_I2C_MspDeInit+0x44>)
 80014b2:	400a      	ands	r2, r1
 80014b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <HAL_I2C_MspDeInit+0x48>)
 80014b8:	2140      	movs	r1, #64	@ 0x40
 80014ba:	0018      	movs	r0, r3
 80014bc:	f001 fda2 	bl	8003004 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <HAL_I2C_MspDeInit+0x48>)
 80014c2:	2180      	movs	r1, #128	@ 0x80
 80014c4:	0018      	movs	r0, r3
 80014c6:	f001 fd9d 	bl	8003004 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN I2C1_MspDeInit 1 */

    /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80014ca:	46c0      	nop			@ (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	46c0      	nop			@ (mov r8, r8)
 80014d4:	40005400 	.word	0x40005400
 80014d8:	40021000 	.word	0x40021000
 80014dc:	ffdfffff 	.word	0xffdfffff
 80014e0:	50000400 	.word	0x50000400

080014e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b08b      	sub	sp, #44	@ 0x2c
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	2414      	movs	r4, #20
 80014ee:	193b      	adds	r3, r7, r4
 80014f0:	0018      	movs	r0, r3
 80014f2:	2314      	movs	r3, #20
 80014f4:	001a      	movs	r2, r3
 80014f6:	2100      	movs	r1, #0
 80014f8:	f005 fa46 	bl	8006988 <memset>
  if(huart->Instance==LPUART1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a30      	ldr	r2, [pc, #192]	@ (80015c4 <HAL_UART_MspInit+0xe0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d12a      	bne.n	800155c <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN LPUART1_MspInit 0 */

    /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001506:	4b30      	ldr	r3, [pc, #192]	@ (80015c8 <HAL_UART_MspInit+0xe4>)
 8001508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800150a:	4b2f      	ldr	r3, [pc, #188]	@ (80015c8 <HAL_UART_MspInit+0xe4>)
 800150c:	2180      	movs	r1, #128	@ 0x80
 800150e:	02c9      	lsls	r1, r1, #11
 8001510:	430a      	orrs	r2, r1
 8001512:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001514:	4b2c      	ldr	r3, [pc, #176]	@ (80015c8 <HAL_UART_MspInit+0xe4>)
 8001516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001518:	4b2b      	ldr	r3, [pc, #172]	@ (80015c8 <HAL_UART_MspInit+0xe4>)
 800151a:	2101      	movs	r1, #1
 800151c:	430a      	orrs	r2, r1
 800151e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001520:	4b29      	ldr	r3, [pc, #164]	@ (80015c8 <HAL_UART_MspInit+0xe4>)
 8001522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001524:	2201      	movs	r2, #1
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800152c:	0021      	movs	r1, r4
 800152e:	187b      	adds	r3, r7, r1
 8001530:	220c      	movs	r2, #12
 8001532:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	187b      	adds	r3, r7, r1
 8001536:	2202      	movs	r2, #2
 8001538:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	187b      	adds	r3, r7, r1
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001540:	187b      	adds	r3, r7, r1
 8001542:	2203      	movs	r2, #3
 8001544:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8001546:	187b      	adds	r3, r7, r1
 8001548:	2206      	movs	r2, #6
 800154a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	187a      	adds	r2, r7, r1
 800154e:	23a0      	movs	r3, #160	@ 0xa0
 8001550:	05db      	lsls	r3, r3, #23
 8001552:	0011      	movs	r1, r2
 8001554:	0018      	movs	r0, r3
 8001556:	f001 fbd7 	bl	8002d08 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART1_MspInit 1 */

    /* USER CODE END USART1_MspInit 1 */
  }

}
 800155a:	e02f      	b.n	80015bc <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a1a      	ldr	r2, [pc, #104]	@ (80015cc <HAL_UART_MspInit+0xe8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d12a      	bne.n	80015bc <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001566:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <HAL_UART_MspInit+0xe4>)
 8001568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800156a:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <HAL_UART_MspInit+0xe4>)
 800156c:	2180      	movs	r1, #128	@ 0x80
 800156e:	01c9      	lsls	r1, r1, #7
 8001570:	430a      	orrs	r2, r1
 8001572:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <HAL_UART_MspInit+0xe4>)
 8001576:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001578:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <HAL_UART_MspInit+0xe4>)
 800157a:	2101      	movs	r1, #1
 800157c:	430a      	orrs	r2, r1
 800157e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001580:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <HAL_UART_MspInit+0xe4>)
 8001582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001584:	2201      	movs	r2, #1
 8001586:	4013      	ands	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800158c:	2114      	movs	r1, #20
 800158e:	187b      	adds	r3, r7, r1
 8001590:	22c0      	movs	r2, #192	@ 0xc0
 8001592:	00d2      	lsls	r2, r2, #3
 8001594:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2202      	movs	r2, #2
 800159a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	187b      	adds	r3, r7, r1
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a2:	187b      	adds	r3, r7, r1
 80015a4:	2203      	movs	r2, #3
 80015a6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	2204      	movs	r2, #4
 80015ac:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ae:	187a      	adds	r2, r7, r1
 80015b0:	23a0      	movs	r3, #160	@ 0xa0
 80015b2:	05db      	lsls	r3, r3, #23
 80015b4:	0011      	movs	r1, r2
 80015b6:	0018      	movs	r0, r3
 80015b8:	f001 fba6 	bl	8002d08 <HAL_GPIO_Init>
}
 80015bc:	46c0      	nop			@ (mov r8, r8)
 80015be:	46bd      	mov	sp, r7
 80015c0:	b00b      	add	sp, #44	@ 0x2c
 80015c2:	bd90      	pop	{r4, r7, pc}
 80015c4:	40004800 	.word	0x40004800
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40013800 	.word	0x40013800

080015d0 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==LPUART1)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a13      	ldr	r2, [pc, #76]	@ (800162c <HAL_UART_MspDeInit+0x5c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d10c      	bne.n	80015fc <HAL_UART_MspDeInit+0x2c>
  {
    /* USER CODE BEGIN LPUART1_MspDeInit 0 */

    /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 80015e2:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <HAL_UART_MspDeInit+0x60>)
 80015e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015e6:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_UART_MspDeInit+0x60>)
 80015e8:	4912      	ldr	r1, [pc, #72]	@ (8001634 <HAL_UART_MspDeInit+0x64>)
 80015ea:	400a      	ands	r2, r1
 80015ec:	639a      	str	r2, [r3, #56]	@ 0x38

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80015ee:	23a0      	movs	r3, #160	@ 0xa0
 80015f0:	05db      	lsls	r3, r3, #23
 80015f2:	210c      	movs	r1, #12
 80015f4:	0018      	movs	r0, r3
 80015f6:	f001 fd05 	bl	8003004 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN USART1_MspDeInit 1 */

    /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80015fa:	e012      	b.n	8001622 <HAL_UART_MspDeInit+0x52>
  else if(huart->Instance==USART1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <HAL_UART_MspDeInit+0x68>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d10d      	bne.n	8001622 <HAL_UART_MspDeInit+0x52>
    __HAL_RCC_USART1_CLK_DISABLE();
 8001606:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <HAL_UART_MspDeInit+0x60>)
 8001608:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <HAL_UART_MspDeInit+0x60>)
 800160c:	490b      	ldr	r1, [pc, #44]	@ (800163c <HAL_UART_MspDeInit+0x6c>)
 800160e:	400a      	ands	r2, r1
 8001610:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8001612:	23c0      	movs	r3, #192	@ 0xc0
 8001614:	00da      	lsls	r2, r3, #3
 8001616:	23a0      	movs	r3, #160	@ 0xa0
 8001618:	05db      	lsls	r3, r3, #23
 800161a:	0011      	movs	r1, r2
 800161c:	0018      	movs	r0, r3
 800161e:	f001 fcf1 	bl	8003004 <HAL_GPIO_DeInit>
}
 8001622:	46c0      	nop			@ (mov r8, r8)
 8001624:	46bd      	mov	sp, r7
 8001626:	b002      	add	sp, #8
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			@ (mov r8, r8)
 800162c:	40004800 	.word	0x40004800
 8001630:	40021000 	.word	0x40021000
 8001634:	fffbffff 	.word	0xfffbffff
 8001638:	40013800 	.word	0x40013800
 800163c:	ffffbfff 	.word	0xffffbfff

08001640 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a06      	ldr	r2, [pc, #24]	@ (8001668 <HAL_RTC_MspInit+0x28>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d106      	bne.n	8001660 <HAL_RTC_MspInit+0x20>
  {
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001652:	4b06      	ldr	r3, [pc, #24]	@ (800166c <HAL_RTC_MspInit+0x2c>)
 8001654:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001656:	4b05      	ldr	r3, [pc, #20]	@ (800166c <HAL_RTC_MspInit+0x2c>)
 8001658:	2180      	movs	r1, #128	@ 0x80
 800165a:	02c9      	lsls	r1, r1, #11
 800165c:	430a      	orrs	r2, r1
 800165e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001660:	46c0      	nop			@ (mov r8, r8)
 8001662:	46bd      	mov	sp, r7
 8001664:	b002      	add	sp, #8
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40002800 	.word	0x40002800
 800166c:	40021000 	.word	0x40021000

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001674:	46c0      	nop			@ (mov r8, r8)
 8001676:	e7fd      	b.n	8001674 <NMI_Handler+0x4>

08001678 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167c:	46c0      	nop			@ (mov r8, r8)
 800167e:	e7fd      	b.n	800167c <HardFault_Handler+0x4>

08001680 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001684:	46c0      	nop			@ (mov r8, r8)
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001698:	f000 fd56 	bl	8002148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169c:	46c0      	nop			@ (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ac:	4a14      	ldr	r2, [pc, #80]	@ (8001700 <_sbrk+0x5c>)
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <_sbrk+0x60>)
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016b8:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <_sbrk+0x64>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016c0:	4b11      	ldr	r3, [pc, #68]	@ (8001708 <_sbrk+0x64>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	@ (800170c <_sbrk+0x68>)
 80016c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016c6:	4b10      	ldr	r3, [pc, #64]	@ (8001708 <_sbrk+0x64>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	18d3      	adds	r3, r2, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d207      	bcs.n	80016e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016d4:	f005 f976 	bl	80069c4 <__errno>
 80016d8:	0003      	movs	r3, r0
 80016da:	220c      	movs	r2, #12
 80016dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016de:	2301      	movs	r3, #1
 80016e0:	425b      	negs	r3, r3
 80016e2:	e009      	b.n	80016f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016e4:	4b08      	ldr	r3, [pc, #32]	@ (8001708 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ea:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <_sbrk+0x64>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	18d2      	adds	r2, r2, r3
 80016f2:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <_sbrk+0x64>)
 80016f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80016f6:	68fb      	ldr	r3, [r7, #12]
}
 80016f8:	0018      	movs	r0, r3
 80016fa:	46bd      	mov	sp, r7
 80016fc:	b006      	add	sp, #24
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20005000 	.word	0x20005000
 8001704:	00000400 	.word	0x00000400
 8001708:	20000260 	.word	0x20000260
 800170c:	200003d0 	.word	0x200003d0

08001710 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001714:	46c0      	nop			@ (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <scan_i2c_bus>:
uint8_t temp_delta;
uint8_t hum_delta;
int16_t i2c_error_code = 0;

void scan_i2c_bus(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	// we re-set these to false because we want to check this every time for safety
    has_sensor_1 = false;
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <scan_i2c_bus+0x44>)
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
    has_sensor_2 = false;
 8001726:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <scan_i2c_bus+0x48>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_IsDeviceReady(&hi2c1, 68 << 1, 1, 10) == HAL_OK) has_sensor_1 = true;
 800172c:	480e      	ldr	r0, [pc, #56]	@ (8001768 <scan_i2c_bus+0x4c>)
 800172e:	230a      	movs	r3, #10
 8001730:	2201      	movs	r2, #1
 8001732:	2188      	movs	r1, #136	@ 0x88
 8001734:	f002 f86e 	bl	8003814 <HAL_I2C_IsDeviceReady>
 8001738:	1e03      	subs	r3, r0, #0
 800173a:	d102      	bne.n	8001742 <scan_i2c_bus+0x26>
 800173c:	4b08      	ldr	r3, [pc, #32]	@ (8001760 <scan_i2c_bus+0x44>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
    if (HAL_I2C_IsDeviceReady(&hi2c1, 70 << 1, 1, 10) == HAL_OK) has_sensor_2 = true;
 8001742:	4809      	ldr	r0, [pc, #36]	@ (8001768 <scan_i2c_bus+0x4c>)
 8001744:	230a      	movs	r3, #10
 8001746:	2201      	movs	r2, #1
 8001748:	218c      	movs	r1, #140	@ 0x8c
 800174a:	f002 f863 	bl	8003814 <HAL_I2C_IsDeviceReady>
 800174e:	1e03      	subs	r3, r0, #0
 8001750:	d103      	bne.n	800175a <scan_i2c_bus+0x3e>
 8001752:	4b04      	ldr	r3, [pc, #16]	@ (8001764 <scan_i2c_bus+0x48>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
    return;
 8001758:	46c0      	nop			@ (mov r8, r8)
 800175a:	46c0      	nop			@ (mov r8, r8)
}
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000264 	.word	0x20000264
 8001764:	20000265 	.word	0x20000265
 8001768:	200000d4 	.word	0x200000d4

0800176c <sensor_init_and_read>:

I2C_Error_t sensor_init_and_read(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8001772:	4b5f      	ldr	r3, [pc, #380]	@ (80018f0 <sensor_init_and_read+0x184>)
 8001774:	2201      	movs	r2, #1
 8001776:	2120      	movs	r1, #32
 8001778:	0018      	movs	r0, r3
 800177a:	f001 fd25 	bl	80031c8 <HAL_GPIO_WritePin>
	HAL_Delay(320); // WE NEED THIS FOR IC POWER UP!!! IT TAKES 300mS to competely power up!!!
 800177e:	23a0      	movs	r3, #160	@ 0xa0
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	0018      	movs	r0, r3
 8001784:	f000 fcfc 	bl	8002180 <HAL_Delay>
	scan_i2c_bus();
 8001788:	f7ff ffc8 	bl	800171c <scan_i2c_bus>
    if (!has_sensor_1 && !has_sensor_2) {
 800178c:	4b59      	ldr	r3, [pc, #356]	@ (80018f4 <sensor_init_and_read+0x188>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	4053      	eors	r3, r2
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d012      	beq.n	80017c0 <sensor_init_and_read+0x54>
 800179a:	4b57      	ldr	r3, [pc, #348]	@ (80018f8 <sensor_init_and_read+0x18c>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	4053      	eors	r3, r2
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d00b      	beq.n	80017c0 <sensor_init_and_read+0x54>
    	i2c_error_code = NO_SENSORS_FOUND;
 80017a8:	4b54      	ldr	r3, [pc, #336]	@ (80018fc <sensor_init_and_read+0x190>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	801a      	strh	r2, [r3, #0]
    	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 80017ae:	4b50      	ldr	r3, [pc, #320]	@ (80018f0 <sensor_init_and_read+0x184>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	2120      	movs	r1, #32
 80017b4:	0018      	movs	r0, r3
 80017b6:	f001 fd07 	bl	80031c8 <HAL_GPIO_WritePin>
        return I2C_ERROR_BOTH_SENSORS_NOT_RESPONDING;
 80017ba:	2303      	movs	r3, #3
 80017bc:	425b      	negs	r3, r3
 80017be:	e093      	b.n	80018e8 <sensor_init_and_read+0x17c>
    }

    i2c_error_code = NO_ERROR;
 80017c0:	4b4e      	ldr	r3, [pc, #312]	@ (80018fc <sensor_init_and_read+0x190>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	801a      	strh	r2, [r3, #0]
    HAL_Delay(100);
 80017c6:	2064      	movs	r0, #100	@ 0x64
 80017c8:	f000 fcda 	bl	8002180 <HAL_Delay>

    if (has_sensor_1) {
 80017cc:	4b49      	ldr	r3, [pc, #292]	@ (80018f4 <sensor_init_and_read+0x188>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d015      	beq.n	8001800 <sensor_init_and_read+0x94>
        sht4x_init(SHT43_I2C_ADDR_44);
 80017d4:	2044      	movs	r0, #68	@ 0x44
 80017d6:	f000 fa65 	bl	8001ca4 <sht4x_init>
        sht4x_soft_reset();
 80017da:	f000 fad7 	bl	8001d8c <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 80017de:	4b48      	ldr	r3, [pc, #288]	@ (8001900 <sensor_init_and_read+0x194>)
 80017e0:	0018      	movs	r0, r3
 80017e2:	f000 fa35 	bl	8001c50 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT43_I2C_ADDR_44);
 80017e6:	2044      	movs	r0, #68	@ 0x44
 80017e8:	f000 fa5c 	bl	8001ca4 <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 80017ec:	4a45      	ldr	r2, [pc, #276]	@ (8001904 <sensor_init_and_read+0x198>)
 80017ee:	4b46      	ldr	r3, [pc, #280]	@ (8001908 <sensor_init_and_read+0x19c>)
 80017f0:	0011      	movs	r1, r2
 80017f2:	0018      	movs	r0, r3
 80017f4:	f000 fa66 	bl	8001cc4 <sht4x_measure_high_precision_ticks>
 80017f8:	0003      	movs	r3, r0
 80017fa:	001a      	movs	r2, r3
 80017fc:	4b3f      	ldr	r3, [pc, #252]	@ (80018fc <sensor_init_and_read+0x190>)
 80017fe:	801a      	strh	r2, [r3, #0]
    }

    if (has_sensor_2) {
 8001800:	4b3d      	ldr	r3, [pc, #244]	@ (80018f8 <sensor_init_and_read+0x18c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d015      	beq.n	8001834 <sensor_init_and_read+0xc8>
        sht4x_init(SHT40_I2C_ADDR_46);
 8001808:	2046      	movs	r0, #70	@ 0x46
 800180a:	f000 fa4b 	bl	8001ca4 <sht4x_init>
        sht4x_soft_reset();
 800180e:	f000 fabd 	bl	8001d8c <sht4x_soft_reset>
        sensirion_i2c_hal_sleep_usec(10000);
 8001812:	4b3b      	ldr	r3, [pc, #236]	@ (8001900 <sensor_init_and_read+0x194>)
 8001814:	0018      	movs	r0, r3
 8001816:	f000 fa1b 	bl	8001c50 <sensirion_i2c_hal_sleep_usec>
        sht4x_init(SHT40_I2C_ADDR_46);
 800181a:	2046      	movs	r0, #70	@ 0x46
 800181c:	f000 fa42 	bl	8001ca4 <sht4x_init>
        i2c_error_code = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 8001820:	4a3a      	ldr	r2, [pc, #232]	@ (800190c <sensor_init_and_read+0x1a0>)
 8001822:	4b3b      	ldr	r3, [pc, #236]	@ (8001910 <sensor_init_and_read+0x1a4>)
 8001824:	0011      	movs	r1, r2
 8001826:	0018      	movs	r0, r3
 8001828:	f000 fa4c 	bl	8001cc4 <sht4x_measure_high_precision_ticks>
 800182c:	0003      	movs	r3, r0
 800182e:	001a      	movs	r2, r3
 8001830:	4b32      	ldr	r3, [pc, #200]	@ (80018fc <sensor_init_and_read+0x190>)
 8001832:	801a      	strh	r2, [r3, #0]
    }
    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8001834:	4b2e      	ldr	r3, [pc, #184]	@ (80018f0 <sensor_init_and_read+0x184>)
 8001836:	2200      	movs	r2, #0
 8001838:	2120      	movs	r1, #32
 800183a:	0018      	movs	r0, r3
 800183c:	f001 fcc4 	bl	80031c8 <HAL_GPIO_WritePin>

             calculated_temp   = (uint16_t)((temp_ticks_1 + 5U) / 10U);
 8001840:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <sensor_init_and_read+0x19c>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	3305      	adds	r3, #5
 8001846:	210a      	movs	r1, #10
 8001848:	0018      	movs	r0, r3
 800184a:	f7fe fc6f 	bl	800012c <__udivsi3>
 800184e:	0003      	movs	r3, r0
 8001850:	b29a      	uxth	r2, r3
 8001852:	4b30      	ldr	r3, [pc, #192]	@ (8001914 <sensor_init_and_read+0x1a8>)
 8001854:	801a      	strh	r2, [r3, #0]
    uint16_t calculated_temp_2 = (uint16_t)((temp_ticks_2 + 5U) / 10U);
 8001856:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <sensor_init_and_read+0x1a4>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	3305      	adds	r3, #5
 800185c:	210a      	movs	r1, #10
 800185e:	0018      	movs	r0, r3
 8001860:	f7fe fc64 	bl	800012c <__udivsi3>
 8001864:	0003      	movs	r3, r0
 8001866:	001a      	movs	r2, r3
 8001868:	1dbb      	adds	r3, r7, #6
 800186a:	801a      	strh	r2, [r3, #0]

             calculated_hum    = (uint8_t)(hum_ticks_1 / 1000U);
 800186c:	4b25      	ldr	r3, [pc, #148]	@ (8001904 <sensor_init_and_read+0x198>)
 800186e:	881b      	ldrh	r3, [r3, #0]
 8001870:	22fa      	movs	r2, #250	@ 0xfa
 8001872:	0091      	lsls	r1, r2, #2
 8001874:	0018      	movs	r0, r3
 8001876:	f7fe fc59 	bl	800012c <__udivsi3>
 800187a:	0003      	movs	r3, r0
 800187c:	b29b      	uxth	r3, r3
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b25      	ldr	r3, [pc, #148]	@ (8001918 <sensor_init_and_read+0x1ac>)
 8001882:	701a      	strb	r2, [r3, #0]
    uint8_t  calculated_hum_2  = (uint8_t)(hum_ticks_2 / 1000U);
 8001884:	4b21      	ldr	r3, [pc, #132]	@ (800190c <sensor_init_and_read+0x1a0>)
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	22fa      	movs	r2, #250	@ 0xfa
 800188a:	0091      	lsls	r1, r2, #2
 800188c:	0018      	movs	r0, r3
 800188e:	f7fe fc4d 	bl	800012c <__udivsi3>
 8001892:	0003      	movs	r3, r0
 8001894:	b29a      	uxth	r2, r3
 8001896:	1d7b      	adds	r3, r7, #5
 8001898:	701a      	strb	r2, [r3, #0]

             temp_delta        = (uint8_t)abs(calculated_temp - calculated_temp_2);
 800189a:	4b1e      	ldr	r3, [pc, #120]	@ (8001914 <sensor_init_and_read+0x1a8>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	001a      	movs	r2, r3
 80018a0:	1dbb      	adds	r3, r7, #6
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	17da      	asrs	r2, r3, #31
 80018a8:	189b      	adds	r3, r3, r2
 80018aa:	4053      	eors	r3, r2
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <sensor_init_and_read+0x1b0>)
 80018b0:	701a      	strb	r2, [r3, #0]
             hum_delta         = (uint8_t)abs(calculated_hum  - calculated_hum_2);
 80018b2:	4b19      	ldr	r3, [pc, #100]	@ (8001918 <sensor_init_and_read+0x1ac>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	001a      	movs	r2, r3
 80018b8:	1d7b      	adds	r3, r7, #5
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	17da      	asrs	r2, r3, #31
 80018c0:	189b      	adds	r3, r3, r2
 80018c2:	4053      	eors	r3, r2
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <sensor_init_and_read+0x1b4>)
 80018c8:	701a      	strb	r2, [r3, #0]

    if (temp_delta > 120) return I2C_ERROR_SENSORS_TOO_DIFFERENT;
 80018ca:	4b14      	ldr	r3, [pc, #80]	@ (800191c <sensor_init_and_read+0x1b0>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b78      	cmp	r3, #120	@ 0x78
 80018d0:	d902      	bls.n	80018d8 <sensor_init_and_read+0x16c>
 80018d2:	2304      	movs	r3, #4
 80018d4:	425b      	negs	r3, r3
 80018d6:	e007      	b.n	80018e8 <sensor_init_and_read+0x17c>
    if (i2c_error_code) return false;
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <sensor_init_and_read+0x190>)
 80018da:	2200      	movs	r2, #0
 80018dc:	5e9b      	ldrsh	r3, [r3, r2]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <sensor_init_and_read+0x17a>
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <sensor_init_and_read+0x17c>

    return I2C_ERROR_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	0018      	movs	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b002      	add	sp, #8
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	50000400 	.word	0x50000400
 80018f4:	20000264 	.word	0x20000264
 80018f8:	20000265 	.word	0x20000265
 80018fc:	20000274 	.word	0x20000274
 8001900:	00002710 	.word	0x00002710
 8001904:	20000268 	.word	0x20000268
 8001908:	20000266 	.word	0x20000266
 800190c:	2000026c 	.word	0x2000026c
 8001910:	2000026a 	.word	0x2000026a
 8001914:	2000026e 	.word	0x2000026e
 8001918:	20000270 	.word	0x20000270
 800191c:	20000271 	.word	0x20000271
 8001920:	20000272 	.word	0x20000272

08001924 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	b21b      	sxth	r3, r3
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	b21a      	sxth	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	3301      	adds	r3, #1
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b21b      	sxth	r3, r3
 800193e:	4313      	orrs	r3, r2
 8001940:	b21b      	sxth	r3, r3
 8001942:	b29b      	uxth	r3, r3
}
 8001944:	0018      	movs	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	b002      	add	sp, #8
 800194a:	bd80      	pop	{r7, pc}

0800194c <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	000a      	movs	r2, r1
 8001956:	1cbb      	adds	r3, r7, #2
 8001958:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 800195a:	230d      	movs	r3, #13
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	22ff      	movs	r2, #255	@ 0xff
 8001960:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001962:	230e      	movs	r3, #14
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	2200      	movs	r2, #0
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	e038      	b.n	80019de <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 800196c:	230e      	movs	r3, #14
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	18d3      	adds	r3, r2, r3
 8001976:	7819      	ldrb	r1, [r3, #0]
 8001978:	220d      	movs	r2, #13
 800197a:	18bb      	adds	r3, r7, r2
 800197c:	18ba      	adds	r2, r7, r2
 800197e:	7812      	ldrb	r2, [r2, #0]
 8001980:	404a      	eors	r2, r1
 8001982:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001984:	230c      	movs	r3, #12
 8001986:	18fb      	adds	r3, r7, r3
 8001988:	2208      	movs	r2, #8
 800198a:	701a      	strb	r2, [r3, #0]
 800198c:	e01c      	b.n	80019c8 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 800198e:	210d      	movs	r1, #13
 8001990:	187b      	adds	r3, r7, r1
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	b25b      	sxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	da0a      	bge.n	80019b0 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800199a:	187b      	adds	r3, r7, r1
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	18db      	adds	r3, r3, r3
 80019a2:	b25b      	sxtb	r3, r3
 80019a4:	2231      	movs	r2, #49	@ 0x31
 80019a6:	4053      	eors	r3, r2
 80019a8:	b25a      	sxtb	r2, r3
 80019aa:	187b      	adds	r3, r7, r1
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	e005      	b.n	80019bc <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 80019b0:	230d      	movs	r3, #13
 80019b2:	18fa      	adds	r2, r7, r3
 80019b4:	18fb      	adds	r3, r7, r3
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	18db      	adds	r3, r3, r3
 80019ba:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80019bc:	220c      	movs	r2, #12
 80019be:	18bb      	adds	r3, r7, r2
 80019c0:	18ba      	adds	r2, r7, r2
 80019c2:	7812      	ldrb	r2, [r2, #0]
 80019c4:	3a01      	subs	r2, #1
 80019c6:	701a      	strb	r2, [r3, #0]
 80019c8:	230c      	movs	r3, #12
 80019ca:	18fb      	adds	r3, r7, r3
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1dd      	bne.n	800198e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80019d2:	220e      	movs	r2, #14
 80019d4:	18bb      	adds	r3, r7, r2
 80019d6:	18ba      	adds	r2, r7, r2
 80019d8:	8812      	ldrh	r2, [r2, #0]
 80019da:	3201      	adds	r2, #1
 80019dc:	801a      	strh	r2, [r3, #0]
 80019de:	230e      	movs	r3, #14
 80019e0:	18fa      	adds	r2, r7, r3
 80019e2:	1cbb      	adds	r3, r7, #2
 80019e4:	8812      	ldrh	r2, [r2, #0]
 80019e6:	881b      	ldrh	r3, [r3, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d3bf      	bcc.n	800196c <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 80019ec:	230d      	movs	r3, #13
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	781b      	ldrb	r3, [r3, #0]
}
 80019f2:	0018      	movs	r0, r3
 80019f4:	46bd      	mov	sp, r7
 80019f6:	b004      	add	sp, #16
 80019f8:	bd80      	pop	{r7, pc}

080019fa <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	0008      	movs	r0, r1
 8001a04:	0011      	movs	r1, r2
 8001a06:	1cbb      	adds	r3, r7, #2
 8001a08:	1c02      	adds	r2, r0, #0
 8001a0a:	801a      	strh	r2, [r3, #0]
 8001a0c:	1c7b      	adds	r3, r7, #1
 8001a0e:	1c0a      	adds	r2, r1, #0
 8001a10:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8001a12:	1cbb      	adds	r3, r7, #2
 8001a14:	881a      	ldrh	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	0011      	movs	r1, r2
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f7ff ff96 	bl	800194c <sensirion_i2c_generate_crc>
 8001a20:	0003      	movs	r3, r0
 8001a22:	001a      	movs	r2, r3
 8001a24:	1c7b      	adds	r3, r7, #1
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d001      	beq.n	8001a30 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	0008      	movs	r0, r1
 8001a44:	0011      	movs	r1, r2
 8001a46:	1cbb      	adds	r3, r7, #2
 8001a48:	1c02      	adds	r2, r0, #0
 8001a4a:	801a      	strh	r2, [r3, #0]
 8001a4c:	1c7b      	adds	r3, r7, #1
 8001a4e:	1c0a      	adds	r2, r1, #0
 8001a50:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 8001a52:	1cbb      	adds	r3, r7, #2
 8001a54:	881b      	ldrh	r3, [r3, #0]
 8001a56:	1cba      	adds	r2, r7, #2
 8001a58:	1c59      	adds	r1, r3, #1
 8001a5a:	8011      	strh	r1, [r2, #0]
 8001a5c:	001a      	movs	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	189b      	adds	r3, r3, r2
 8001a62:	1c7a      	adds	r2, r7, #1
 8001a64:	7812      	ldrb	r2, [r2, #0]
 8001a66:	701a      	strb	r2, [r3, #0]
    return offset;
 8001a68:	1cbb      	adds	r3, r7, #2
 8001a6a:	881b      	ldrh	r3, [r3, #0]
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b002      	add	sp, #8
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6039      	str	r1, [r7, #0]
 8001a7c:	0011      	movs	r1, r2
 8001a7e:	1dfb      	adds	r3, r7, #7
 8001a80:	1c02      	adds	r2, r0, #0
 8001a82:	701a      	strb	r2, [r3, #0]
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	1c0a      	adds	r2, r1, #0
 8001a88:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	6839      	ldr	r1, [r7, #0]
 8001a92:	1dfb      	adds	r3, r7, #7
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	0018      	movs	r0, r3
 8001a98:	f000 f8b8 	bl	8001c0c <sensirion_i2c_hal_write>
 8001a9c:	0003      	movs	r3, r0
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b002      	add	sp, #8
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8001aa6:	b5b0      	push	{r4, r5, r7, lr}
 8001aa8:	b084      	sub	sp, #16
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	0011      	movs	r1, r2
 8001ab0:	1dfb      	adds	r3, r7, #7
 8001ab2:	1c02      	adds	r2, r0, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	1c0a      	adds	r2, r1, #0
 8001aba:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	085b      	lsrs	r3, r3, #1
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	220a      	movs	r2, #10
 8001ac6:	18ba      	adds	r2, r7, r2
 8001ac8:	1c19      	adds	r1, r3, #0
 8001aca:	1c0b      	adds	r3, r1, #0
 8001acc:	18db      	adds	r3, r3, r3
 8001ace:	185b      	adds	r3, r3, r1
 8001ad0:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8001ad2:	1d3b      	adds	r3, r7, #4
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	4013      	ands	r3, r2
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	e06c      	b.n	8001bbe <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	18fb      	adds	r3, r7, r3
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	1dfb      	adds	r3, r7, #7
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	0018      	movs	r0, r3
 8001af4:	f000 f868 	bl	8001bc8 <sensirion_i2c_hal_read>
 8001af8:	0003      	movs	r3, r0
 8001afa:	001a      	movs	r2, r3
 8001afc:	2108      	movs	r1, #8
 8001afe:	187b      	adds	r3, r7, r1
 8001b00:	801a      	strh	r2, [r3, #0]
    if (error) {
 8001b02:	000a      	movs	r2, r1
 8001b04:	18bb      	adds	r3, r7, r2
 8001b06:	2100      	movs	r1, #0
 8001b08:	5e5b      	ldrsh	r3, [r3, r1]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <sensirion_i2c_read_data_inplace+0x70>
        return error;
 8001b0e:	18bb      	adds	r3, r7, r2
 8001b10:	2200      	movs	r2, #0
 8001b12:	5e9b      	ldrsh	r3, [r3, r2]
 8001b14:	e053      	b.n	8001bbe <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001b16:	230e      	movs	r3, #14
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	801a      	strh	r2, [r3, #0]
 8001b1e:	230c      	movs	r3, #12
 8001b20:	18fb      	adds	r3, r7, r3
 8001b22:	2200      	movs	r2, #0
 8001b24:	801a      	strh	r2, [r3, #0]
 8001b26:	e041      	b.n	8001bac <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001b28:	210e      	movs	r1, #14
 8001b2a:	187b      	adds	r3, r7, r1
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 8001b32:	187b      	adds	r3, r7, r1
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	3302      	adds	r3, #2
 8001b38:	683a      	ldr	r2, [r7, #0]
 8001b3a:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	001a      	movs	r2, r3
 8001b40:	2102      	movs	r1, #2
 8001b42:	f7ff ff5a 	bl	80019fa <sensirion_i2c_check_crc>
 8001b46:	0003      	movs	r3, r0
 8001b48:	001a      	movs	r2, r3
 8001b4a:	2108      	movs	r1, #8
 8001b4c:	187b      	adds	r3, r7, r1
 8001b4e:	801a      	strh	r2, [r3, #0]
        if (error) {
 8001b50:	000a      	movs	r2, r1
 8001b52:	18bb      	adds	r3, r7, r2
 8001b54:	2100      	movs	r1, #0
 8001b56:	5e5b      	ldrsh	r3, [r3, r1]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 8001b5c:	18bb      	adds	r3, r7, r2
 8001b5e:	2200      	movs	r2, #0
 8001b60:	5e9b      	ldrsh	r3, [r3, r2]
 8001b62:	e02c      	b.n	8001bbe <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 8001b64:	240e      	movs	r4, #14
 8001b66:	193b      	adds	r3, r7, r4
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	18d2      	adds	r2, r2, r3
 8001b6e:	250c      	movs	r5, #12
 8001b70:	197b      	adds	r3, r7, r5
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	1979      	adds	r1, r7, r5
 8001b76:	1c58      	adds	r0, r3, #1
 8001b78:	8008      	strh	r0, [r1, #0]
 8001b7a:	0019      	movs	r1, r3
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	185b      	adds	r3, r3, r1
 8001b80:	7812      	ldrb	r2, [r2, #0]
 8001b82:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8001b84:	193b      	adds	r3, r7, r4
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	18d2      	adds	r2, r2, r3
 8001b8e:	197b      	adds	r3, r7, r5
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	1979      	adds	r1, r7, r5
 8001b94:	1c58      	adds	r0, r3, #1
 8001b96:	8008      	strh	r0, [r1, #0]
 8001b98:	0019      	movs	r1, r3
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	185b      	adds	r3, r3, r1
 8001b9e:	7812      	ldrb	r2, [r2, #0]
 8001ba0:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	193a      	adds	r2, r7, r4
 8001ba6:	8812      	ldrh	r2, [r2, #0]
 8001ba8:	3203      	adds	r2, #3
 8001baa:	801a      	strh	r2, [r3, #0]
 8001bac:	230e      	movs	r3, #14
 8001bae:	18fa      	adds	r2, r7, r3
 8001bb0:	230a      	movs	r3, #10
 8001bb2:	18fb      	adds	r3, r7, r3
 8001bb4:	8812      	ldrh	r2, [r2, #0]
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d3b5      	bcc.n	8001b28 <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	0018      	movs	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	b004      	add	sp, #16
 8001bc4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001bc8 <sensirion_i2c_hal_read>:

void sensirion_i2c_hal_free(void) {
    /* nothing to free */
}

int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	6039      	str	r1, [r7, #0]
 8001bd0:	0011      	movs	r1, r2
 8001bd2:	1dfb      	adds	r3, r7, #7
 8001bd4:	1c02      	adds	r2, r0, #0
 8001bd6:	701a      	strb	r2, [r3, #0]
 8001bd8:	1dbb      	adds	r3, r7, #6
 8001bda:	1c0a      	adds	r2, r1, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1), data, count, 100);
 8001bde:	1dfb      	adds	r3, r7, #7
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	18db      	adds	r3, r3, r3
 8001be6:	b299      	uxth	r1, r3
 8001be8:	1dbb      	adds	r3, r7, #6
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	4805      	ldr	r0, [pc, #20]	@ (8001c08 <sensirion_i2c_hal_read+0x40>)
 8001bf2:	2464      	movs	r4, #100	@ 0x64
 8001bf4:	9400      	str	r4, [sp, #0]
 8001bf6:	f001 fd05 	bl	8003604 <HAL_I2C_Master_Receive>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	b25b      	sxtb	r3, r3
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b003      	add	sp, #12
 8001c04:	bd90      	pop	{r4, r7, pc}
 8001c06:	46c0      	nop			@ (mov r8, r8)
 8001c08:	200000d4 	.word	0x200000d4

08001c0c <sensirion_i2c_hal_write>:

int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data, uint8_t count) {
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af02      	add	r7, sp, #8
 8001c12:	6039      	str	r1, [r7, #0]
 8001c14:	0011      	movs	r1, r2
 8001c16:	1dfb      	adds	r3, r7, #7
 8001c18:	1c02      	adds	r2, r0, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
 8001c1c:	1dbb      	adds	r3, r7, #6
 8001c1e:	1c0a      	adds	r2, r1, #0
 8001c20:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1), (uint8_t*)data, count, 100);
 8001c22:	1dfb      	adds	r3, r7, #7
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	18db      	adds	r3, r3, r3
 8001c2a:	b299      	uxth	r1, r3
 8001c2c:	1dbb      	adds	r3, r7, #6
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	4805      	ldr	r0, [pc, #20]	@ (8001c4c <sensirion_i2c_hal_write+0x40>)
 8001c36:	2464      	movs	r4, #100	@ 0x64
 8001c38:	9400      	str	r4, [sp, #0]
 8001c3a:	f001 fbb9 	bl	80033b0 <HAL_I2C_Master_Transmit>
 8001c3e:	0003      	movs	r3, r0
 8001c40:	b25b      	sxtb	r3, r3
}
 8001c42:	0018      	movs	r0, r3
 8001c44:	46bd      	mov	sp, r7
 8001c46:	b003      	add	sp, #12
 8001c48:	bd90      	pop	{r4, r7, pc}
 8001c4a:	46c0      	nop			@ (mov r8, r8)
 8001c4c:	200000d4 	.word	0x200000d4

08001c50 <sensirion_i2c_hal_sleep_usec>:

void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	22fa      	movs	r2, #250	@ 0xfa
 8001c5c:	0091      	lsls	r1, r2, #2
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f7fe fa64 	bl	800012c <__udivsi3>
 8001c64:	0003      	movs	r3, r0
 8001c66:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	22fa      	movs	r2, #250	@ 0xfa
 8001c6c:	0091      	lsls	r1, r2, #2
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f7fe fae2 	bl	8000238 <__aeabi_uidivmod>
 8001c74:	1e0b      	subs	r3, r1, #0
 8001c76:	d002      	beq.n	8001c7e <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	60fb      	str	r3, [r7, #12]
    }
    if (HAL_GetHalVersion() < 0x01010100) {
 8001c7e:	f000 fabf 	bl	8002200 <HAL_GetHalVersion>
 8001c82:	0003      	movs	r3, r0
 8001c84:	4a06      	ldr	r2, [pc, #24]	@ (8001ca0 <sensirion_i2c_hal_sleep_usec+0x50>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d802      	bhi.n	8001c90 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	60fb      	str	r3, [r7, #12]
    }
    HAL_Delay(msec);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	0018      	movs	r0, r3
 8001c94:	f000 fa74 	bl	8002180 <HAL_Delay>
}
 8001c98:	46c0      	nop			@ (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b004      	add	sp, #16
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	010100ff 	.word	0x010100ff

08001ca4 <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	0002      	movs	r2, r0
 8001cac:	1dfb      	adds	r3, r7, #7
 8001cae:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 8001cb0:	4b03      	ldr	r3, [pc, #12]	@ (8001cc0 <sht4x_init+0x1c>)
 8001cb2:	1dfa      	adds	r2, r7, #7
 8001cb4:	7812      	ldrb	r2, [r2, #0]
 8001cb6:	701a      	strb	r2, [r3, #0]
}
 8001cb8:	46c0      	nop			@ (mov r8, r8)
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	b002      	add	sp, #8
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	2000027e 	.word	0x2000027e

08001cc4 <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 8001cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc6:	b087      	sub	sp, #28
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 8001cce:	2516      	movs	r5, #22
 8001cd0:	197b      	adds	r3, r7, r5
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8001cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d80 <sht4x_measure_high_precision_ticks+0xbc>)
 8001cd8:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 8001cda:	260e      	movs	r6, #14
 8001cdc:	19bb      	adds	r3, r7, r6
 8001cde:	2200      	movs	r2, #0
 8001ce0:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 8001ce2:	19bc      	adds	r4, r7, r6
 8001ce4:	19bb      	adds	r3, r7, r6
 8001ce6:	8819      	ldrh	r1, [r3, #0]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	22fd      	movs	r2, #253	@ 0xfd
 8001cec:	0018      	movs	r0, r3
 8001cee:	f7ff fea4 	bl	8001a3a <sensirion_i2c_add_command8_to_buffer>
 8001cf2:	0003      	movs	r3, r0
 8001cf4:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8001cf6:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <sht4x_measure_high_precision_ticks+0xc0>)
 8001cf8:	7818      	ldrb	r0, [r3, #0]
 8001cfa:	197c      	adds	r4, r7, r5
 8001cfc:	19bb      	adds	r3, r7, r6
 8001cfe:	881a      	ldrh	r2, [r3, #0]
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	0019      	movs	r1, r3
 8001d04:	f7ff feb6 	bl	8001a74 <sensirion_i2c_write_data>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001d0c:	197b      	adds	r3, r7, r5
 8001d0e:	2200      	movs	r2, #0
 8001d10:	5e9b      	ldrsh	r3, [r3, r2]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 8001d16:	197b      	adds	r3, r7, r5
 8001d18:	2200      	movs	r2, #0
 8001d1a:	5e9b      	ldrsh	r3, [r3, r2]
 8001d1c:	e02c      	b.n	8001d78 <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d88 <sht4x_measure_high_precision_ticks+0xc4>)
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7ff ff95 	bl	8001c50 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 8001d26:	4b17      	ldr	r3, [pc, #92]	@ (8001d84 <sht4x_measure_high_precision_ticks+0xc0>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2516      	movs	r5, #22
 8001d2c:	197c      	adds	r4, r7, r5
 8001d2e:	6939      	ldr	r1, [r7, #16]
 8001d30:	2204      	movs	r2, #4
 8001d32:	0018      	movs	r0, r3
 8001d34:	f7ff feb7 	bl	8001aa6 <sensirion_i2c_read_data_inplace>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001d3c:	197b      	adds	r3, r7, r5
 8001d3e:	2200      	movs	r2, #0
 8001d40:	5e9b      	ldrsh	r3, [r3, r2]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d003      	beq.n	8001d4e <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 8001d46:	197b      	adds	r3, r7, r5
 8001d48:	2200      	movs	r2, #0
 8001d4a:	5e9b      	ldrsh	r3, [r3, r2]
 8001d4c:	e014      	b.n	8001d78 <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7ff fde7 	bl	8001924 <sensirion_common_bytes_to_uint16_t>
 8001d56:	0003      	movs	r3, r0
 8001d58:	001a      	movs	r2, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	3302      	adds	r3, #2
 8001d62:	0018      	movs	r0, r3
 8001d64:	f7ff fdde 	bl	8001924 <sensirion_common_bytes_to_uint16_t>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	001a      	movs	r2, r3
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	801a      	strh	r2, [r3, #0]
    return local_error;
 8001d70:	2316      	movs	r3, #22
 8001d72:	18fb      	adds	r3, r7, r3
 8001d74:	2200      	movs	r2, #0
 8001d76:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d80:	20000278 	.word	0x20000278
 8001d84:	2000027e 	.word	0x2000027e
 8001d88:	00002710 	.word	0x00002710

08001d8c <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 8001d8c:	b5b0      	push	{r4, r5, r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 8001d92:	250e      	movs	r5, #14
 8001d94:	197b      	adds	r3, r7, r5
 8001d96:	2200      	movs	r2, #0
 8001d98:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8001d9a:	4b17      	ldr	r3, [pc, #92]	@ (8001df8 <sht4x_soft_reset+0x6c>)
 8001d9c:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 8001d9e:	1dbb      	adds	r3, r7, #6
 8001da0:	2200      	movs	r2, #0
 8001da2:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 8001da4:	1dbc      	adds	r4, r7, #6
 8001da6:	1dbb      	adds	r3, r7, #6
 8001da8:	8819      	ldrh	r1, [r3, #0]
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2294      	movs	r2, #148	@ 0x94
 8001dae:	0018      	movs	r0, r3
 8001db0:	f7ff fe43 	bl	8001a3a <sensirion_i2c_add_command8_to_buffer>
 8001db4:	0003      	movs	r3, r0
 8001db6:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8001db8:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <sht4x_soft_reset+0x70>)
 8001dba:	7818      	ldrb	r0, [r3, #0]
 8001dbc:	197c      	adds	r4, r7, r5
 8001dbe:	1dbb      	adds	r3, r7, #6
 8001dc0:	881a      	ldrh	r2, [r3, #0]
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	0019      	movs	r1, r3
 8001dc6:	f7ff fe55 	bl	8001a74 <sensirion_i2c_write_data>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8001dce:	197b      	adds	r3, r7, r5
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	5e9b      	ldrsh	r3, [r3, r2]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <sht4x_soft_reset+0x54>
        return local_error;
 8001dd8:	197b      	adds	r3, r7, r5
 8001dda:	2200      	movs	r2, #0
 8001ddc:	5e9b      	ldrsh	r3, [r3, r2]
 8001dde:	e007      	b.n	8001df0 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8001de0:	4b07      	ldr	r3, [pc, #28]	@ (8001e00 <sht4x_soft_reset+0x74>)
 8001de2:	0018      	movs	r0, r3
 8001de4:	f7ff ff34 	bl	8001c50 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8001de8:	230e      	movs	r3, #14
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	2200      	movs	r2, #0
 8001dee:	5e9b      	ldrsh	r3, [r3, r2]
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b004      	add	sp, #16
 8001df6:	bdb0      	pop	{r4, r5, r7, pc}
 8001df8:	20000278 	.word	0x20000278
 8001dfc:	2000027e 	.word	0x2000027e
 8001e00:	00002710 	.word	0x00002710

08001e04 <enter_sleep_mode>:
#include "main.h"
#include "stm32l0xx_hal.h"
#include "sleep.h"

void enter_sleep_mode()
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	ConsolePrintf("Going to sleep...\r\n");
 8001e08:	4b33      	ldr	r3, [pc, #204]	@ (8001ed8 <enter_sleep_mode+0xd4>)
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f7ff fa10 	bl	8001230 <ConsolePrintf>
	HAL_I2C_DeInit(&hi2c1);
 8001e10:	4b32      	ldr	r3, [pc, #200]	@ (8001edc <enter_sleep_mode+0xd8>)
 8001e12:	0018      	movs	r0, r3
 8001e14:	f001 fa9c 	bl	8003350 <HAL_I2C_DeInit>
	HAL_UART_DeInit(&huart1);
 8001e18:	4b31      	ldr	r3, [pc, #196]	@ (8001ee0 <enter_sleep_mode+0xdc>)
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f003 fcf4 	bl	8005808 <HAL_UART_DeInit>
	HAL_UART_DeInit(&hlpuart1);
 8001e20:	4b30      	ldr	r3, [pc, #192]	@ (8001ee4 <enter_sleep_mode+0xe0>)
 8001e22:	0018      	movs	r0, r3
 8001e24:	f003 fcf0 	bl	8005808 <HAL_UART_DeInit>
	MX_ADC_DeInit();
 8001e28:	f000 f8a6 	bl	8001f78 <MX_ADC_DeInit>
	__HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_RXNE);
 8001e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ee4 <enter_sleep_mode+0xe0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee4 <enter_sleep_mode+0xe0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2120      	movs	r1, #32
 8001e38:	438a      	bics	r2, r1
 8001e3a:	601a      	str	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(&hlpuart1, UART_IT_IDLE);
 8001e3c:	4b29      	ldr	r3, [pc, #164]	@ (8001ee4 <enter_sleep_mode+0xe0>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b28      	ldr	r3, [pc, #160]	@ (8001ee4 <enter_sleep_mode+0xe0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2110      	movs	r1, #16
 8001e48:	438a      	bics	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
	__HAL_UART_CLEAR_FLAG(&hlpuart1, UART_FLAG_RXNE | UART_FLAG_IDLE);
 8001e4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ee4 <enter_sleep_mode+0xe0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2230      	movs	r2, #48	@ 0x30
 8001e52:	621a      	str	r2, [r3, #32]
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8001e54:	4b22      	ldr	r3, [pc, #136]	@ (8001ee0 <enter_sleep_mode+0xdc>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ee0 <enter_sleep_mode+0xdc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2120      	movs	r1, #32
 8001e60:	438a      	bics	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 8001e64:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee0 <enter_sleep_mode+0xdc>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee0 <enter_sleep_mode+0xdc>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2110      	movs	r1, #16
 8001e70:	438a      	bics	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
	__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE | UART_FLAG_IDLE);
 8001e74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <enter_sleep_mode+0xdc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2230      	movs	r2, #48	@ 0x30
 8001e7a:	621a      	str	r2, [r3, #32]
	Enter_Stop_Mode();
 8001e7c:	f000 f89c 	bl	8001fb8 <Enter_Stop_Mode>
	ConsolePrintf("Resumed after wake-up\r\n");
 8001e80:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <enter_sleep_mode+0xe4>)
 8001e82:	0018      	movs	r0, r3
 8001e84:	f7ff f9d4 	bl	8001230 <ConsolePrintf>
	SystemClock_Config();
 8001e88:	f7fe ffe4 	bl	8000e54 <SystemClock_Config>
	ConsolePrintf("System clock reconfigured\r\n");
 8001e8c:	4b17      	ldr	r3, [pc, #92]	@ (8001eec <enter_sleep_mode+0xe8>)
 8001e8e:	0018      	movs	r0, r3
 8001e90:	f7ff f9ce 	bl	8001230 <ConsolePrintf>
	MX_I2C1_Init();
 8001e94:	f7ff f8a0 	bl	8000fd8 <MX_I2C1_Init>
	ConsolePrintf("I2C1 reinitialized\r\n");
 8001e98:	4b15      	ldr	r3, [pc, #84]	@ (8001ef0 <enter_sleep_mode+0xec>)
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f7ff f9c8 	bl	8001230 <ConsolePrintf>
	MX_USART1_UART_Init();
 8001ea0:	f7ff f90c 	bl	80010bc <MX_USART1_UART_Init>
	ConsolePrintf("UART reinitialized\r\n");
 8001ea4:	4b13      	ldr	r3, [pc, #76]	@ (8001ef4 <enter_sleep_mode+0xf0>)
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f7ff f9c2 	bl	8001230 <ConsolePrintf>
	MX_LPUART1_UART_Init();
 8001eac:	f7ff f8d4 	bl	8001058 <MX_LPUART1_UART_Init>
	ConsolePrintf("LPUART1 (lora) reinitialized\r\n");
 8001eb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <enter_sleep_mode+0xf4>)
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7ff f9bc 	bl	8001230 <ConsolePrintf>
	RTC_WakeUp_Init();
 8001eb8:	f000 f824 	bl	8001f04 <RTC_WakeUp_Init>
	ConsolePrintf("RTC Wake-Up Timer reinitialized\r\n");
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <enter_sleep_mode+0xf8>)
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	f7ff f9b6 	bl	8001230 <ConsolePrintf>
	MX_ADC_Init();
 8001ec4:	f7ff f83e 	bl	8000f44 <MX_ADC_Init>
	ConsolePrintf("ADC reinitialized\r\n");
 8001ec8:	4b0d      	ldr	r3, [pc, #52]	@ (8001f00 <enter_sleep_mode+0xfc>)
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f7ff f9b0 	bl	8001230 <ConsolePrintf>
}
 8001ed0:	46c0      	nop			@ (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	08007490 	.word	0x08007490
 8001edc:	200000d4 	.word	0x200000d4
 8001ee0:	200001b0 	.word	0x200001b0
 8001ee4:	20000128 	.word	0x20000128
 8001ee8:	080074a4 	.word	0x080074a4
 8001eec:	080074bc 	.word	0x080074bc
 8001ef0:	080074d8 	.word	0x080074d8
 8001ef4:	080074f0 	.word	0x080074f0
 8001ef8:	08007508 	.word	0x08007508
 8001efc:	08007528 	.word	0x08007528
 8001f00:	0800754c 	.word	0x0800754c

08001f04 <RTC_WakeUp_Init>:

void RTC_WakeUp_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  ConsolePrintf("Starting RTC Wake-Up Timer configuration\r\n");
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <RTC_WakeUp_Init+0x5c>)
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	f7ff f990 	bl	8001230 <ConsolePrintf>

  // Disable the Wake-Up Timer before configuring
  HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8001f10:	4b14      	ldr	r3, [pc, #80]	@ (8001f64 <RTC_WakeUp_Init+0x60>)
 8001f12:	0018      	movs	r0, r3
 8001f14:	f003 fb90 	bl	8005638 <HAL_RTCEx_DeactivateWakeUpTimer>
  ConsolePrintf("RTC Wake-Up Timer disabled\r\n");
 8001f18:	4b13      	ldr	r3, [pc, #76]	@ (8001f68 <RTC_WakeUp_Init+0x64>)
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f7ff f988 	bl	8001230 <ConsolePrintf>

  // Configure Wake-Up Timer for 60 seconds using LSI (~40 kHz)
  // With AsynchPrediv = 127, SynchPrediv = 255: CK_SPRE = 40,000 / (128 * 256) = ~1.22 Hz
  // For ~60 seconds: WakeUpCounter = (60 * 1.22) - 1 = ~72
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 59, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8001f20:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <RTC_WakeUp_Init+0x60>)
 8001f22:	2204      	movs	r2, #4
 8001f24:	213b      	movs	r1, #59	@ 0x3b
 8001f26:	0018      	movs	r0, r3
 8001f28:	f003 faae 	bl	8005488 <HAL_RTCEx_SetWakeUpTimer_IT>
 8001f2c:	1e03      	subs	r3, r0, #0
 8001f2e:	d004      	beq.n	8001f3a <RTC_WakeUp_Init+0x36>
  {
    ConsolePrintf("RTC Wake-Up Timer Init Failed\r\n");
 8001f30:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <RTC_WakeUp_Init+0x68>)
 8001f32:	0018      	movs	r0, r3
 8001f34:	f7ff f97c 	bl	8001230 <ConsolePrintf>
 8001f38:	e003      	b.n	8001f42 <RTC_WakeUp_Init+0x3e>
  }
  else
  {
    ConsolePrintf("RTC Wake-Up Timer Initialized for ~60 seconds\r\n");
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f70 <RTC_WakeUp_Init+0x6c>)
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff f977 	bl	8001230 <ConsolePrintf>
  }

  // Enable RTC Wake-Up interrupt in NVIC
  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	2002      	movs	r0, #2
 8001f48:	f000 feac 	bl	8002ca4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001f4c:	2002      	movs	r0, #2
 8001f4e:	f000 febe 	bl	8002cce <HAL_NVIC_EnableIRQ>
  ConsolePrintf("RTC Wake-Up interrupt enabled in NVIC\r\n");
 8001f52:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <RTC_WakeUp_Init+0x70>)
 8001f54:	0018      	movs	r0, r3
 8001f56:	f7ff f96b 	bl	8001230 <ConsolePrintf>
}
 8001f5a:	46c0      	nop			@ (mov r8, r8)
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	08007560 	.word	0x08007560
 8001f64:	20000238 	.word	0x20000238
 8001f68:	0800758c 	.word	0x0800758c
 8001f6c:	080075ac 	.word	0x080075ac
 8001f70:	080075cc 	.word	0x080075cc
 8001f74:	080075fc 	.word	0x080075fc

08001f78 <MX_ADC_DeInit>:

void MX_ADC_DeInit(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
    /* 1) De‑initialize the ADC handle */
    if (HAL_ADC_DeInit(&hadc) != HAL_OK) {
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa8 <MX_ADC_DeInit+0x30>)
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f000 fad0 	bl	8002524 <HAL_ADC_DeInit>
 8001f84:	1e03      	subs	r3, r0, #0
 8001f86:	d001      	beq.n	8001f8c <MX_ADC_DeInit+0x14>
        Error_Handler();
 8001f88:	f7ff f9c8 	bl	800131c <Error_Handler>
    }
    /* 2) Disable the ADC clock */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001f8c:	4b07      	ldr	r3, [pc, #28]	@ (8001fac <MX_ADC_DeInit+0x34>)
 8001f8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_ADC_DeInit+0x34>)
 8001f92:	4907      	ldr	r1, [pc, #28]	@ (8001fb0 <MX_ADC_DeInit+0x38>)
 8001f94:	400a      	ands	r2, r1
 8001f96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* 3) Reset the GPIO pin back to its default state
       (PB1 was configured as analog in MX_GPIO_Init) */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 8001f98:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <MX_ADC_DeInit+0x3c>)
 8001f9a:	2102      	movs	r1, #2
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f001 f831 	bl	8003004 <HAL_GPIO_DeInit>
}
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000078 	.word	0x20000078
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	fffffdff 	.word	0xfffffdff
 8001fb4:	50000400 	.word	0x50000400

08001fb8 <Enter_Stop_Mode>:

void Enter_Stop_Mode(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  ConsolePrintf("Preparing to enter Stop mode\r\n");
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <Enter_Stop_Mode+0x50>)
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f7ff f936 	bl	8001230 <ConsolePrintf>

  // Clear Wake-Up flag
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);
 8001fc4:	4b11      	ldr	r3, [pc, #68]	@ (800200c <Enter_Stop_Mode+0x54>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	22ff      	movs	r2, #255	@ 0xff
 8001fcc:	401a      	ands	r2, r3
 8001fce:	4b0f      	ldr	r3, [pc, #60]	@ (800200c <Enter_Stop_Mode+0x54>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	490f      	ldr	r1, [pc, #60]	@ (8002010 <Enter_Stop_Mode+0x58>)
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	60da      	str	r2, [r3, #12]
  ConsolePrintf("RTC Wake-Up flag cleared\r\n");
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002014 <Enter_Stop_Mode+0x5c>)
 8001fda:	0018      	movs	r0, r3
 8001fdc:	f7ff f928 	bl	8001230 <ConsolePrintf>

  // Enter Stop mode (low-power mode)
  ConsolePrintf("Entering Stop mode\r\n");
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8002018 <Enter_Stop_Mode+0x60>)
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f7ff f924 	bl	8001230 <ConsolePrintf>
  /* Suspend SysTick to prevent it from waking up the MCU immediately */
  HAL_SuspendTick();
 8001fe8:	f000 f8ee 	bl	80021c8 <HAL_SuspendTick>
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8001fec:	2101      	movs	r1, #1
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f002 f878 	bl	80040e4 <HAL_PWR_EnterSTOPMode>
  /* Resume SysTick after waking up */
  HAL_ResumeTick();
 8001ff4:	f000 f8f6 	bl	80021e4 <HAL_ResumeTick>
  ConsolePrintf("Exited Stop mode\r\n");
 8001ff8:	4b08      	ldr	r3, [pc, #32]	@ (800201c <Enter_Stop_Mode+0x64>)
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f7ff f918 	bl	8001230 <ConsolePrintf>
}
 8002000:	46c0      	nop			@ (mov r8, r8)
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	08007624 	.word	0x08007624
 800200c:	20000238 	.word	0x20000238
 8002010:	fffffb7f 	.word	0xfffffb7f
 8002014:	08007644 	.word	0x08007644
 8002018:	08007660 	.word	0x08007660
 800201c:	08007678 	.word	0x08007678

08002020 <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8002024:	4b03      	ldr	r3, [pc, #12]	@ (8002034 <RTC_IRQHandler+0x14>)
 8002026:	0018      	movs	r0, r3
 8002028:	f003 fb6a 	bl	8005700 <HAL_RTCEx_WakeUpTimerIRQHandler>
}
 800202c:	46c0      	nop			@ (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	20000238 	.word	0x20000238

08002038 <HAL_RTCEx_WakeUpTimerEventCallback>:

void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  // Reconfigure system clock after wake-up
  SystemClock_Config();
 8002040:	f7fe ff08 	bl	8000e54 <SystemClock_Config>
}
 8002044:	46c0      	nop			@ (mov r8, r8)
 8002046:	46bd      	mov	sp, r7
 8002048:	b002      	add	sp, #8
 800204a:	bd80      	pop	{r7, pc}

0800204c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800204c:	480d      	ldr	r0, [pc, #52]	@ (8002084 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800204e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002050:	f7ff fb5e 	bl	8001710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002054:	480c      	ldr	r0, [pc, #48]	@ (8002088 <LoopForever+0x6>)
  ldr r1, =_edata
 8002056:	490d      	ldr	r1, [pc, #52]	@ (800208c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002058:	4a0d      	ldr	r2, [pc, #52]	@ (8002090 <LoopForever+0xe>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206a:	4a0a      	ldr	r2, [pc, #40]	@ (8002094 <LoopForever+0x12>)
  ldr r4, =_ebss
 800206c:	4c0a      	ldr	r4, [pc, #40]	@ (8002098 <LoopForever+0x16>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800207a:	f004 fca9 	bl	80069d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800207e:	f7fe fe3b 	bl	8000cf8 <main>

08002082 <LoopForever>:

LoopForever:
    b LoopForever
 8002082:	e7fe      	b.n	8002082 <LoopForever>
   ldr   r0, =_estack
 8002084:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002088:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800208c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002090:	08007844 	.word	0x08007844
  ldr r2, =_sbss
 8002094:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002098:	200003cc 	.word	0x200003cc

0800209c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800209c:	e7fe      	b.n	800209c <ADC1_COMP_IRQHandler>
	...

080020a0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020a6:	1dfb      	adds	r3, r7, #7
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80020ac:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <HAL_Init+0x3c>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	4b0a      	ldr	r3, [pc, #40]	@ (80020dc <HAL_Init+0x3c>)
 80020b2:	2140      	movs	r1, #64	@ 0x40
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020b8:	2003      	movs	r0, #3
 80020ba:	f000 f811 	bl	80020e0 <HAL_InitTick>
 80020be:	1e03      	subs	r3, r0, #0
 80020c0:	d003      	beq.n	80020ca <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80020c2:	1dfb      	adds	r3, r7, #7
 80020c4:	2201      	movs	r2, #1
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e001      	b.n	80020ce <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80020ca:	f7ff f92d 	bl	8001328 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80020ce:	1dfb      	adds	r3, r7, #7
 80020d0:	781b      	ldrb	r3, [r3, #0]
}
 80020d2:	0018      	movs	r0, r3
 80020d4:	46bd      	mov	sp, r7
 80020d6:	b002      	add	sp, #8
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	40022000 	.word	0x40022000

080020e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e0:	b590      	push	{r4, r7, lr}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e8:	4b14      	ldr	r3, [pc, #80]	@ (800213c <HAL_InitTick+0x5c>)
 80020ea:	681c      	ldr	r4, [r3, #0]
 80020ec:	4b14      	ldr	r3, [pc, #80]	@ (8002140 <HAL_InitTick+0x60>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	0019      	movs	r1, r3
 80020f2:	23fa      	movs	r3, #250	@ 0xfa
 80020f4:	0098      	lsls	r0, r3, #2
 80020f6:	f7fe f819 	bl	800012c <__udivsi3>
 80020fa:	0003      	movs	r3, r0
 80020fc:	0019      	movs	r1, r3
 80020fe:	0020      	movs	r0, r4
 8002100:	f7fe f814 	bl	800012c <__udivsi3>
 8002104:	0003      	movs	r3, r0
 8002106:	0018      	movs	r0, r3
 8002108:	f000 fdf1 	bl	8002cee <HAL_SYSTICK_Config>
 800210c:	1e03      	subs	r3, r0, #0
 800210e:	d001      	beq.n	8002114 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e00f      	b.n	8002134 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b03      	cmp	r3, #3
 8002118:	d80b      	bhi.n	8002132 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800211a:	6879      	ldr	r1, [r7, #4]
 800211c:	2301      	movs	r3, #1
 800211e:	425b      	negs	r3, r3
 8002120:	2200      	movs	r2, #0
 8002122:	0018      	movs	r0, r3
 8002124:	f000 fdbe 	bl	8002ca4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002128:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <HAL_InitTick+0x64>)
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
 8002130:	e000      	b.n	8002134 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b003      	add	sp, #12
 800213a:	bd90      	pop	{r4, r7, pc}
 800213c:	20000000 	.word	0x20000000
 8002140:	20000008 	.word	0x20000008
 8002144:	20000004 	.word	0x20000004

08002148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <HAL_IncTick+0x1c>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	001a      	movs	r2, r3
 8002152:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <HAL_IncTick+0x20>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	18d2      	adds	r2, r2, r3
 8002158:	4b03      	ldr	r3, [pc, #12]	@ (8002168 <HAL_IncTick+0x20>)
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	46c0      	nop			@ (mov r8, r8)
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	46c0      	nop			@ (mov r8, r8)
 8002164:	20000008 	.word	0x20000008
 8002168:	20000280 	.word	0x20000280

0800216c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  return uwTick;
 8002170:	4b02      	ldr	r3, [pc, #8]	@ (800217c <HAL_GetTick+0x10>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			@ (mov r8, r8)
 800217c:	20000280 	.word	0x20000280

08002180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff fff0 	bl	800216c <HAL_GetTick>
 800218c:	0003      	movs	r3, r0
 800218e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3301      	adds	r3, #1
 8002198:	d005      	beq.n	80021a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219a:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <HAL_Delay+0x44>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	001a      	movs	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	189b      	adds	r3, r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021a6:	46c0      	nop			@ (mov r8, r8)
 80021a8:	f7ff ffe0 	bl	800216c <HAL_GetTick>
 80021ac:	0002      	movs	r2, r0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d8f7      	bhi.n	80021a8 <HAL_Delay+0x28>
  {
  }
}
 80021b8:	46c0      	nop			@ (mov r8, r8)
 80021ba:	46c0      	nop			@ (mov r8, r8)
 80021bc:	46bd      	mov	sp, r7
 80021be:	b004      	add	sp, #16
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	46c0      	nop			@ (mov r8, r8)
 80021c4:	20000008 	.word	0x20000008

080021c8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80021cc:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <HAL_SuspendTick+0x18>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b03      	ldr	r3, [pc, #12]	@ (80021e0 <HAL_SuspendTick+0x18>)
 80021d2:	2102      	movs	r1, #2
 80021d4:	438a      	bics	r2, r1
 80021d6:	601a      	str	r2, [r3, #0]
}
 80021d8:	46c0      	nop			@ (mov r8, r8)
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	e000e010 	.word	0xe000e010

080021e4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80021e8:	4b04      	ldr	r3, [pc, #16]	@ (80021fc <HAL_ResumeTick+0x18>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b03      	ldr	r3, [pc, #12]	@ (80021fc <HAL_ResumeTick+0x18>)
 80021ee:	2102      	movs	r1, #2
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
}
 80021f4:	46c0      	nop			@ (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	46c0      	nop			@ (mov r8, r8)
 80021fc:	e000e010 	.word	0xe000e010

08002200 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8002204:	4b01      	ldr	r3, [pc, #4]	@ (800220c <HAL_GetHalVersion+0xc>)
}
 8002206:	0018      	movs	r0, r3
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	010a0700 	.word	0x010a0700

08002210 <HAL_SYSCFG_VREFINT_OutputSelect>:
  *     @arg SYSCFG_VREFINT_OUT_PB1
  *     @arg SYSCFG_VREFINT_OUT_PB0_PB1
  * @retval None
  */
void HAL_SYSCFG_VREFINT_OutputSelect(uint32_t SYSCFG_Vrefint_OUTPUT)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFINT_OUT_SELECT(SYSCFG_Vrefint_OUTPUT));

  /* Set the output Vrefint pin */
  SYSCFG->CFGR3 &= ~(SYSCFG_CFGR3_VREF_OUT);
 8002218:	4b07      	ldr	r3, [pc, #28]	@ (8002238 <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 800221a:	6a1a      	ldr	r2, [r3, #32]
 800221c:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 800221e:	2130      	movs	r1, #48	@ 0x30
 8002220:	438a      	bics	r2, r1
 8002222:	621a      	str	r2, [r3, #32]
  SYSCFG->CFGR3 |= (uint32_t)(SYSCFG_Vrefint_OUTPUT);
 8002224:	4b04      	ldr	r3, [pc, #16]	@ (8002238 <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 8002226:	6a19      	ldr	r1, [r3, #32]
 8002228:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <HAL_SYSCFG_VREFINT_OutputSelect+0x28>)
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	430a      	orrs	r2, r1
 800222e:	621a      	str	r2, [r3, #32]
}
 8002230:	46c0      	nop			@ (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40010000 	.word	0x40010000

0800223c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e159      	b.n	8002502 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002252:	2b00      	cmp	r3, #0
 8002254:	d10a      	bne.n	800226c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2250      	movs	r2, #80	@ 0x50
 8002260:	2100      	movs	r1, #0
 8002262:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	0018      	movs	r0, r3
 8002268:	f7ff f876 	bl	8001358 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002270:	2210      	movs	r2, #16
 8002272:	4013      	ands	r3, r2
 8002274:	2b10      	cmp	r3, #16
 8002276:	d005      	beq.n	8002284 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2204      	movs	r2, #4
 8002280:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002282:	d00b      	beq.n	800229c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002288:	2210      	movs	r2, #16
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2250      	movs	r2, #80	@ 0x50
 8002294:	2100      	movs	r1, #0
 8002296:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e132      	b.n	8002502 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a0:	4a9a      	ldr	r2, [pc, #616]	@ (800250c <HAL_ADC_Init+0x2d0>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	2202      	movs	r2, #2
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2203      	movs	r2, #3
 80022b4:	4013      	ands	r3, r2
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d108      	bne.n	80022cc <HAL_ADC_Init+0x90>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2201      	movs	r2, #1
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d101      	bne.n	80022cc <HAL_ADC_Init+0x90>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <HAL_ADC_Init+0x92>
 80022cc:	2300      	movs	r3, #0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d149      	bne.n	8002366 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	23c0      	movs	r3, #192	@ 0xc0
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	429a      	cmp	r2, r3
 80022dc:	d00b      	beq.n	80022f6 <HAL_ADC_Init+0xba>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	2380      	movs	r3, #128	@ 0x80
 80022e4:	05db      	lsls	r3, r3, #23
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d005      	beq.n	80022f6 <HAL_ADC_Init+0xba>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	2380      	movs	r3, #128	@ 0x80
 80022f0:	061b      	lsls	r3, r3, #24
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d111      	bne.n	800231a <HAL_ADC_Init+0xde>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	691a      	ldr	r2, [r3, #16]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	0092      	lsls	r2, r2, #2
 8002302:	0892      	lsrs	r2, r2, #2
 8002304:	611a      	str	r2, [r3, #16]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6919      	ldr	r1, [r3, #16]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	611a      	str	r2, [r3, #16]
 8002318:	e014      	b.n	8002344 <HAL_ADC_Init+0x108>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	691a      	ldr	r2, [r3, #16]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	0092      	lsls	r2, r2, #2
 8002326:	0892      	lsrs	r2, r2, #2
 8002328:	611a      	str	r2, [r3, #16]
 800232a:	4b79      	ldr	r3, [pc, #484]	@ (8002510 <HAL_ADC_Init+0x2d4>)
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	4b78      	ldr	r3, [pc, #480]	@ (8002510 <HAL_ADC_Init+0x2d4>)
 8002330:	4978      	ldr	r1, [pc, #480]	@ (8002514 <HAL_ADC_Init+0x2d8>)
 8002332:	400a      	ands	r2, r1
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	4b76      	ldr	r3, [pc, #472]	@ (8002510 <HAL_ADC_Init+0x2d4>)
 8002338:	6819      	ldr	r1, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685a      	ldr	r2, [r3, #4]
 800233e:	4b74      	ldr	r3, [pc, #464]	@ (8002510 <HAL_ADC_Init+0x2d4>)
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68da      	ldr	r2, [r3, #12]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2118      	movs	r1, #24
 8002350:	438a      	bics	r2, r1
 8002352:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68d9      	ldr	r1, [r3, #12]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002366:	4b6a      	ldr	r3, [pc, #424]	@ (8002510 <HAL_ADC_Init+0x2d4>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b69      	ldr	r3, [pc, #420]	@ (8002510 <HAL_ADC_Init+0x2d4>)
 800236c:	496a      	ldr	r1, [pc, #424]	@ (8002518 <HAL_ADC_Init+0x2dc>)
 800236e:	400a      	ands	r2, r1
 8002370:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 8002372:	4b67      	ldr	r3, [pc, #412]	@ (8002510 <HAL_ADC_Init+0x2d4>)
 8002374:	6819      	ldr	r1, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800237a:	065a      	lsls	r2, r3, #25
 800237c:	4b64      	ldr	r3, [pc, #400]	@ (8002510 <HAL_ADC_Init+0x2d4>)
 800237e:	430a      	orrs	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	2380      	movs	r3, #128	@ 0x80
 800238a:	055b      	lsls	r3, r3, #21
 800238c:	4013      	ands	r3, r2
 800238e:	d108      	bne.n	80023a2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2180      	movs	r1, #128	@ 0x80
 800239c:	0549      	lsls	r1, r1, #21
 800239e:	430a      	orrs	r2, r1
 80023a0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68da      	ldr	r2, [r3, #12]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	495b      	ldr	r1, [pc, #364]	@ (800251c <HAL_ADC_Init+0x2e0>)
 80023ae:	400a      	ands	r2, r1
 80023b0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68d9      	ldr	r1, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	691b      	ldr	r3, [r3, #16]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d101      	bne.n	80023c8 <HAL_ADC_Init+0x18c>
 80023c4:	2304      	movs	r3, #4
 80023c6:	e000      	b.n	80023ca <HAL_ADC_Init+0x18e>
 80023c8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80023ca:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2020      	movs	r0, #32
 80023d0:	5c1b      	ldrb	r3, [r3, r0]
 80023d2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80023d4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	202c      	movs	r0, #44	@ 0x2c
 80023da:	5c1b      	ldrb	r3, [r3, r0]
 80023dc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80023de:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80023e4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80023ec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80023f4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002402:	23c2      	movs	r3, #194	@ 0xc2
 8002404:	33ff      	adds	r3, #255	@ 0xff
 8002406:	429a      	cmp	r2, r3
 8002408:	d00b      	beq.n	8002422 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68d9      	ldr	r1, [r3, #12]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	430a      	orrs	r2, r1
 8002420:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2221      	movs	r2, #33	@ 0x21
 8002426:	5c9b      	ldrb	r3, [r3, r2]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d11a      	bne.n	8002462 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2220      	movs	r2, #32
 8002430:	5c9b      	ldrb	r3, [r3, r2]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d109      	bne.n	800244a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2180      	movs	r1, #128	@ 0x80
 8002442:	0249      	lsls	r1, r1, #9
 8002444:	430a      	orrs	r2, r1
 8002446:	60da      	str	r2, [r3, #12]
 8002448:	e00b      	b.n	8002462 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244e:	2220      	movs	r2, #32
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800245a:	2201      	movs	r2, #1
 800245c:	431a      	orrs	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002466:	2b01      	cmp	r3, #1
 8002468:	d11f      	bne.n	80024aa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	492a      	ldr	r1, [pc, #168]	@ (8002520 <HAL_ADC_Init+0x2e4>)
 8002476:	400a      	ands	r2, r1
 8002478:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6919      	ldr	r1, [r3, #16]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002488:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800248e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2101      	movs	r1, #1
 80024a4:	430a      	orrs	r2, r1
 80024a6:	611a      	str	r2, [r3, #16]
 80024a8:	e00e      	b.n	80024c8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	2201      	movs	r2, #1
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d107      	bne.n	80024c8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691a      	ldr	r2, [r3, #16]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2101      	movs	r1, #1
 80024c4:	438a      	bics	r2, r1
 80024c6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2107      	movs	r1, #7
 80024d4:	438a      	bics	r2, r1
 80024d6:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6959      	ldr	r1, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f4:	2203      	movs	r2, #3
 80024f6:	4393      	bics	r3, r2
 80024f8:	2201      	movs	r2, #1
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b002      	add	sp, #8
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			@ (mov r8, r8)
 800250c:	fffffefd 	.word	0xfffffefd
 8002510:	40012708 	.word	0x40012708
 8002514:	ffc3ffff 	.word	0xffc3ffff
 8002518:	fdffffff 	.word	0xfdffffff
 800251c:	fffe0219 	.word	0xfffe0219
 8002520:	fffffc03 	.word	0xfffffc03

08002524 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 8002524:	b5b0      	push	{r4, r5, r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252c:	230f      	movs	r3, #15
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	2200      	movs	r2, #0
 8002532:	701a      	strb	r2, [r3, #0]

  /* Check ADC handle */
  if (hadc == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_ADC_DeInit+0x1a>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e07d      	b.n	800263a <HAL_ADC_DeInit+0x116>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002542:	2202      	movs	r2, #2
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800254a:	250f      	movs	r5, #15
 800254c:	197c      	adds	r4, r7, r5
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	0018      	movs	r0, r3
 8002552:	f000 fa8e 	bl	8002a72 <ADC_ConversionStop>
 8002556:	0003      	movs	r3, r0
 8002558:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800255a:	197b      	adds	r3, r7, r5
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10d      	bne.n	800257e <HAL_ADC_DeInit+0x5a>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002562:	197c      	adds	r4, r7, r5
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	0018      	movs	r0, r3
 8002568:	f000 fa1c 	bl	80029a4 <ADC_Disable>
 800256c:	0003      	movs	r3, r0
 800256e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8002570:	197b      	adds	r3, r7, r5
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d002      	beq.n	800257e <HAL_ADC_DeInit+0x5a>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54
  }


  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 800257e:	230f      	movs	r3, #15
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d051      	beq.n	800262c <HAL_ADC_DeInit+0x108>
  {

    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	492c      	ldr	r1, [pc, #176]	@ (8002644 <HAL_ADC_DeInit+0x120>)
 8002594:	400a      	ands	r2, r1
 8002596:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOC | ADC_IT_RDY | ADC_IT_EOSMP));


    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a2a      	ldr	r2, [pc, #168]	@ (8002648 <HAL_ADC_DeInit+0x124>)
 800259e:	601a      	str	r2, [r3, #0]

    /* Reset register CR */
    /* Disable voltage regulator */
    /* Note: Regulator disable useful for power saving */
    /* Reset ADVREGEN bit */
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4928      	ldr	r1, [pc, #160]	@ (800264c <HAL_ADC_DeInit+0x128>)
 80025ac:	400a      	ands	r2, r1
 80025ae:	609a      	str	r2, [r3, #8]

    /* Bits ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode "read-set": no direct reset applicable */
    /* No action */

    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4925      	ldr	r1, [pc, #148]	@ (8002650 <HAL_ADC_DeInit+0x12c>)
 80025bc:	400a      	ands	r2, r1
 80025be:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_CONT   | ADC_CFGR1_OVRMOD | ADC_CFGR1_EXTEN  | \
                               ADC_CFGR1_EXTSEL | ADC_CFGR1_ALIGN  | ADC_CFGR1_RES    | \
                               ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

    /* Reset register CFGR2 */
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691a      	ldr	r2, [r3, #16]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4922      	ldr	r1, [pc, #136]	@ (8002654 <HAL_ADC_DeInit+0x130>)
 80025cc:	400a      	ands	r2, r1
 80025ce:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSE  | ADC_CFGR2_CKMODE);


    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695a      	ldr	r2, [r3, #20]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2107      	movs	r1, #7
 80025dc:	438a      	bics	r2, r1
 80025de:	615a      	str	r2, [r3, #20]

    /* Reset register TR */
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6a1a      	ldr	r2, [r3, #32]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	491b      	ldr	r1, [pc, #108]	@ (8002658 <HAL_ADC_DeInit+0x134>)
 80025ec:	400a      	ands	r2, r1
 80025ee:	621a      	str	r2, [r3, #32]

    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	22b4      	movs	r2, #180	@ 0xb4
 80025f6:	589a      	ldr	r2, [r3, r2]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	217f      	movs	r1, #127	@ 0x7f
 80025fe:	438a      	bics	r2, r1
 8002600:	21b4      	movs	r1, #180	@ 0xb4
 8002602:	505a      	str	r2, [r3, r1]

    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/

    /* Reset register CALFACT */
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	22b4      	movs	r2, #180	@ 0xb4
 800260a:	589a      	ldr	r2, [r3, r2]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	217f      	movs	r1, #127	@ 0x7f
 8002612:	438a      	bics	r2, r1
 8002614:	21b4      	movs	r1, #180	@ 0xb4
 8002616:	505a      	str	r2, [r3, r1]

    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0018      	movs	r0, r3
 800261c:	f7fe fed8 	bl	80013d0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2250      	movs	r2, #80	@ 0x50
 8002630:	2100      	movs	r1, #0
 8002632:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002634:	230f      	movs	r3, #15
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	781b      	ldrb	r3, [r3, #0]
}
 800263a:	0018      	movs	r0, r3
 800263c:	46bd      	mov	sp, r7
 800263e:	b004      	add	sp, #16
 8002640:	bdb0      	pop	{r4, r5, r7, pc}
 8002642:	46c0      	nop			@ (mov r8, r8)
 8002644:	fffff760 	.word	0xfffff760
 8002648:	0000089f 	.word	0x0000089f
 800264c:	efffffff 	.word	0xefffffff
 8002650:	833e0200 	.word	0x833e0200
 8002654:	3ffffc02 	.word	0x3ffffc02
 8002658:	f000f000 	.word	0xf000f000

0800265c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002664:	230f      	movs	r3, #15
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2204      	movs	r2, #4
 8002674:	4013      	ands	r3, r2
 8002676:	d138      	bne.n	80026ea <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2250      	movs	r2, #80	@ 0x50
 800267c:	5c9b      	ldrb	r3, [r3, r2]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_ADC_Start+0x2a>
 8002682:	2302      	movs	r3, #2
 8002684:	e038      	b.n	80026f8 <HAL_ADC_Start+0x9c>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2250      	movs	r2, #80	@ 0x50
 800268a:	2101      	movs	r1, #1
 800268c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d007      	beq.n	80026a6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002696:	230f      	movs	r3, #15
 8002698:	18fc      	adds	r4, r7, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0018      	movs	r0, r3
 800269e:	f000 f919 	bl	80028d4 <ADC_Enable>
 80026a2:	0003      	movs	r3, r0
 80026a4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026a6:	230f      	movs	r3, #15
 80026a8:	18fb      	adds	r3, r7, r3
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d120      	bne.n	80026f2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b4:	4a12      	ldr	r2, [pc, #72]	@ (8002700 <HAL_ADC_Start+0xa4>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	2280      	movs	r2, #128	@ 0x80
 80026ba:	0052      	lsls	r2, r2, #1
 80026bc:	431a      	orrs	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2250      	movs	r2, #80	@ 0x50
 80026cc:	2100      	movs	r1, #0
 80026ce:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	221c      	movs	r2, #28
 80026d6:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2104      	movs	r1, #4
 80026e4:	430a      	orrs	r2, r1
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	e003      	b.n	80026f2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026ea:	230f      	movs	r3, #15
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2202      	movs	r2, #2
 80026f0:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80026f2:	230f      	movs	r3, #15
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	781b      	ldrb	r3, [r3, #0]
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	b005      	add	sp, #20
 80026fe:	bd90      	pop	{r4, r7, pc}
 8002700:	fffff0fe 	.word	0xfffff0fe

08002704 <HAL_ADC_Stop>:
  *         case of auto_injection mode), disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002704:	b5b0      	push	{r4, r5, r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800270c:	230f      	movs	r3, #15
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2250      	movs	r2, #80	@ 0x50
 8002718:	5c9b      	ldrb	r3, [r3, r2]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_ADC_Stop+0x1e>
 800271e:	2302      	movs	r3, #2
 8002720:	e029      	b.n	8002776 <HAL_ADC_Stop+0x72>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2250      	movs	r2, #80	@ 0x50
 8002726:	2101      	movs	r1, #1
 8002728:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800272a:	250f      	movs	r5, #15
 800272c:	197c      	adds	r4, r7, r5
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	0018      	movs	r0, r3
 8002732:	f000 f99e 	bl	8002a72 <ADC_ConversionStop>
 8002736:	0003      	movs	r3, r0
 8002738:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800273a:	197b      	adds	r3, r7, r5
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d112      	bne.n	8002768 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002742:	197c      	adds	r4, r7, r5
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	0018      	movs	r0, r3
 8002748:	f000 f92c 	bl	80029a4 <ADC_Disable>
 800274c:	0003      	movs	r3, r0
 800274e:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002750:	197b      	adds	r3, r7, r5
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d107      	bne.n	8002768 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275c:	4a08      	ldr	r2, [pc, #32]	@ (8002780 <HAL_ADC_Stop+0x7c>)
 800275e:	4013      	ands	r3, r2
 8002760:	2201      	movs	r2, #1
 8002762:	431a      	orrs	r2, r3
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2250      	movs	r2, #80	@ 0x50
 800276c:	2100      	movs	r1, #0
 800276e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002770:	230f      	movs	r3, #15
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	781b      	ldrb	r3, [r3, #0]
}
 8002776:	0018      	movs	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	b004      	add	sp, #16
 800277c:	bdb0      	pop	{r4, r5, r7, pc}
 800277e:	46c0      	nop			@ (mov r8, r8)
 8002780:	fffffefe 	.word	0xfffffefe

08002784 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	2b08      	cmp	r3, #8
 800279c:	d102      	bne.n	80027a4 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800279e:	2308      	movs	r3, #8
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	e014      	b.n	80027ce <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d10b      	bne.n	80027ca <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	2220      	movs	r2, #32
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2250      	movs	r2, #80	@ 0x50
 80027c2:	2100      	movs	r1, #0
 80027c4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e072      	b.n	80028b0 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80027ca:	230c      	movs	r3, #12
 80027cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80027ce:	f7ff fccd 	bl	800216c <HAL_GetTick>
 80027d2:	0003      	movs	r3, r0
 80027d4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80027d6:	e01f      	b.n	8002818 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	3301      	adds	r3, #1
 80027dc:	d01c      	beq.n	8002818 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_ADC_PollForConversion+0x70>
 80027e4:	f7ff fcc2 	bl	800216c <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d211      	bcs.n	8002818 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4013      	ands	r3, r2
 80027fe:	d10b      	bne.n	8002818 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002804:	2204      	movs	r2, #4
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2250      	movs	r2, #80	@ 0x50
 8002810:	2100      	movs	r1, #0
 8002812:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e04b      	b.n	80028b0 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4013      	ands	r3, r2
 8002822:	d0d9      	beq.n	80027d8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002828:	2280      	movs	r2, #128	@ 0x80
 800282a:	0092      	lsls	r2, r2, #2
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68da      	ldr	r2, [r3, #12]
 8002838:	23c0      	movs	r3, #192	@ 0xc0
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4013      	ands	r3, r2
 800283e:	d12e      	bne.n	800289e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2220      	movs	r2, #32
 8002844:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002846:	2b00      	cmp	r3, #0
 8002848:	d129      	bne.n	800289e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2208      	movs	r2, #8
 8002852:	4013      	ands	r3, r2
 8002854:	2b08      	cmp	r3, #8
 8002856:	d122      	bne.n	800289e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2204      	movs	r2, #4
 8002860:	4013      	ands	r3, r2
 8002862:	d110      	bne.n	8002886 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	210c      	movs	r1, #12
 8002870:	438a      	bics	r2, r1
 8002872:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002878:	4a0f      	ldr	r2, [pc, #60]	@ (80028b8 <HAL_ADC_PollForConversion+0x134>)
 800287a:	4013      	ands	r3, r2
 800287c:	2201      	movs	r2, #1
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54
 8002884:	e00b      	b.n	800289e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800288a:	2220      	movs	r2, #32
 800288c:	431a      	orrs	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002896:	2201      	movs	r2, #1
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	220c      	movs	r2, #12
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b004      	add	sp, #16
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	fffffefe 	.word	0xfffffefe

080028bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b002      	add	sp, #8
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028dc:	2300      	movs	r3, #0
 80028de:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2203      	movs	r2, #3
 80028e8:	4013      	ands	r3, r2
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d108      	bne.n	8002900 <ADC_Enable+0x2c>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2201      	movs	r2, #1
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <ADC_Enable+0x2c>
 80028fc:	2301      	movs	r3, #1
 80028fe:	e000      	b.n	8002902 <ADC_Enable+0x2e>
 8002900:	2300      	movs	r3, #0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d146      	bne.n	8002994 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a24      	ldr	r2, [pc, #144]	@ (80029a0 <ADC_Enable+0xcc>)
 800290e:	4013      	ands	r3, r2
 8002910:	d00d      	beq.n	800292e <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002916:	2210      	movs	r2, #16
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002922:	2201      	movs	r2, #1
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e033      	b.n	8002996 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2101      	movs	r1, #1
 800293a:	430a      	orrs	r2, r1
 800293c:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800293e:	2001      	movs	r0, #1
 8002940:	f000 f8e4 	bl	8002b0c <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002944:	f7ff fc12 	bl	800216c <HAL_GetTick>
 8002948:	0003      	movs	r3, r0
 800294a:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800294c:	e01b      	b.n	8002986 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800294e:	f7ff fc0d 	bl	800216c <HAL_GetTick>
 8002952:	0002      	movs	r2, r0
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b0a      	cmp	r3, #10
 800295a:	d914      	bls.n	8002986 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2201      	movs	r2, #1
 8002964:	4013      	ands	r3, r2
 8002966:	2b01      	cmp	r3, #1
 8002968:	d00d      	beq.n	8002986 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296e:	2210      	movs	r2, #16
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297a:	2201      	movs	r2, #1
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e007      	b.n	8002996 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2201      	movs	r2, #1
 800298e:	4013      	ands	r3, r2
 8002990:	2b01      	cmp	r3, #1
 8002992:	d1dc      	bne.n	800294e <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b004      	add	sp, #16
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			@ (mov r8, r8)
 80029a0:	80000017 	.word	0x80000017

080029a4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2203      	movs	r2, #3
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d108      	bne.n	80029d0 <ADC_Disable+0x2c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2201      	movs	r2, #1
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <ADC_Disable+0x2c>
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <ADC_Disable+0x2e>
 80029d0:	2300      	movs	r3, #0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d048      	beq.n	8002a68 <ADC_Disable+0xc4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2205      	movs	r2, #5
 80029de:	4013      	ands	r3, r2
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d110      	bne.n	8002a06 <ADC_Disable+0x62>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2102      	movs	r1, #2
 80029f0:	430a      	orrs	r2, r1
 80029f2:	609a      	str	r2, [r3, #8]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2203      	movs	r2, #3
 80029fa:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029fc:	f7ff fbb6 	bl	800216c <HAL_GetTick>
 8002a00:	0003      	movs	r3, r0
 8002a02:	60fb      	str	r3, [r7, #12]

    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a04:	e029      	b.n	8002a5a <ADC_Disable+0xb6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0a:	2210      	movs	r2, #16
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a16:	2201      	movs	r2, #1
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e023      	b.n	8002a6a <ADC_Disable+0xc6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a22:	f7ff fba3 	bl	800216c <HAL_GetTick>
 8002a26:	0002      	movs	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b0a      	cmp	r3, #10
 8002a2e:	d914      	bls.n	8002a5a <ADC_Disable+0xb6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	2201      	movs	r2, #1
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10d      	bne.n	8002a5a <ADC_Disable+0xb6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a42:	2210      	movs	r2, #16
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4e:	2201      	movs	r2, #1
 8002a50:	431a      	orrs	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e007      	b.n	8002a6a <ADC_Disable+0xc6>
    while (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2201      	movs	r2, #1
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d0dc      	beq.n	8002a22 <ADC_Disable+0x7e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b004      	add	sp, #16
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2204      	movs	r2, #4
 8002a86:	4013      	ands	r3, r2
 8002a88:	d03a      	beq.n	8002b00 <ADC_ConversionStop+0x8e>
  {

    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2204      	movs	r2, #4
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b04      	cmp	r3, #4
 8002a96:	d10d      	bne.n	8002ab4 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) &&
 8002aa2:	d107      	bne.n	8002ab4 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2110      	movs	r1, #16
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	609a      	str	r2, [r3, #8]
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ab4:	f7ff fb5a 	bl	800216c <HAL_GetTick>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002abc:	e01a      	b.n	8002af4 <ADC_ConversionStop+0x82>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002abe:	f7ff fb55 	bl	800216c <HAL_GetTick>
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b0a      	cmp	r3, #10
 8002aca:	d913      	bls.n	8002af4 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	d00d      	beq.n	8002af4 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002adc:	2210      	movs	r2, #16
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae8:	2201      	movs	r2, #1
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e006      	b.n	8002b02 <ADC_ConversionStop+0x90>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2204      	movs	r2, #4
 8002afc:	4013      	ands	r3, r2
 8002afe:	d1de      	bne.n	8002abe <ADC_ConversionStop+0x4c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	0018      	movs	r0, r3
 8002b04:	46bd      	mov	sp, r7
 8002b06:	b004      	add	sp, #16
 8002b08:	bd80      	pop	{r7, pc}
	...

08002b0c <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8002b14:	4b0b      	ldr	r3, [pc, #44]	@ (8002b44 <ADC_DelayMicroSecond+0x38>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	490b      	ldr	r1, [pc, #44]	@ (8002b48 <ADC_DelayMicroSecond+0x3c>)
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f7fd fb06 	bl	800012c <__udivsi3>
 8002b20:	0003      	movs	r3, r0
 8002b22:	001a      	movs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4353      	muls	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8002b2a:	e002      	b.n	8002b32 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f9      	bne.n	8002b2c <ADC_DelayMicroSecond+0x20>
  }
}
 8002b38:	46c0      	nop			@ (mov r8, r8)
 8002b3a:	46c0      	nop			@ (mov r8, r8)
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b004      	add	sp, #16
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	20000000 	.word	0x20000000
 8002b48:	000f4240 	.word	0x000f4240

08002b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	0002      	movs	r2, r0
 8002b54:	1dfb      	adds	r3, r7, #7
 8002b56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b58:	1dfb      	adds	r3, r7, #7
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b5e:	d809      	bhi.n	8002b74 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b60:	1dfb      	adds	r3, r7, #7
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	001a      	movs	r2, r3
 8002b66:	231f      	movs	r3, #31
 8002b68:	401a      	ands	r2, r3
 8002b6a:	4b04      	ldr	r3, [pc, #16]	@ (8002b7c <__NVIC_EnableIRQ+0x30>)
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	4091      	lsls	r1, r2
 8002b70:	000a      	movs	r2, r1
 8002b72:	601a      	str	r2, [r3, #0]
  }
}
 8002b74:	46c0      	nop			@ (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b002      	add	sp, #8
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	e000e100 	.word	0xe000e100

08002b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b80:	b590      	push	{r4, r7, lr}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	0002      	movs	r2, r0
 8002b88:	6039      	str	r1, [r7, #0]
 8002b8a:	1dfb      	adds	r3, r7, #7
 8002b8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002b8e:	1dfb      	adds	r3, r7, #7
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b94:	d828      	bhi.n	8002be8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002b96:	4a2f      	ldr	r2, [pc, #188]	@ (8002c54 <__NVIC_SetPriority+0xd4>)
 8002b98:	1dfb      	adds	r3, r7, #7
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	b25b      	sxtb	r3, r3
 8002b9e:	089b      	lsrs	r3, r3, #2
 8002ba0:	33c0      	adds	r3, #192	@ 0xc0
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	589b      	ldr	r3, [r3, r2]
 8002ba6:	1dfa      	adds	r2, r7, #7
 8002ba8:	7812      	ldrb	r2, [r2, #0]
 8002baa:	0011      	movs	r1, r2
 8002bac:	2203      	movs	r2, #3
 8002bae:	400a      	ands	r2, r1
 8002bb0:	00d2      	lsls	r2, r2, #3
 8002bb2:	21ff      	movs	r1, #255	@ 0xff
 8002bb4:	4091      	lsls	r1, r2
 8002bb6:	000a      	movs	r2, r1
 8002bb8:	43d2      	mvns	r2, r2
 8002bba:	401a      	ands	r2, r3
 8002bbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	019b      	lsls	r3, r3, #6
 8002bc2:	22ff      	movs	r2, #255	@ 0xff
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	1dfb      	adds	r3, r7, #7
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	2303      	movs	r3, #3
 8002bce:	4003      	ands	r3, r0
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002bd4:	481f      	ldr	r0, [pc, #124]	@ (8002c54 <__NVIC_SetPriority+0xd4>)
 8002bd6:	1dfb      	adds	r3, r7, #7
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	b25b      	sxtb	r3, r3
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	430a      	orrs	r2, r1
 8002be0:	33c0      	adds	r3, #192	@ 0xc0
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002be6:	e031      	b.n	8002c4c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002be8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c58 <__NVIC_SetPriority+0xd8>)
 8002bea:	1dfb      	adds	r3, r7, #7
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	0019      	movs	r1, r3
 8002bf0:	230f      	movs	r3, #15
 8002bf2:	400b      	ands	r3, r1
 8002bf4:	3b08      	subs	r3, #8
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	3306      	adds	r3, #6
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	18d3      	adds	r3, r2, r3
 8002bfe:	3304      	adds	r3, #4
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	1dfa      	adds	r2, r7, #7
 8002c04:	7812      	ldrb	r2, [r2, #0]
 8002c06:	0011      	movs	r1, r2
 8002c08:	2203      	movs	r2, #3
 8002c0a:	400a      	ands	r2, r1
 8002c0c:	00d2      	lsls	r2, r2, #3
 8002c0e:	21ff      	movs	r1, #255	@ 0xff
 8002c10:	4091      	lsls	r1, r2
 8002c12:	000a      	movs	r2, r1
 8002c14:	43d2      	mvns	r2, r2
 8002c16:	401a      	ands	r2, r3
 8002c18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	019b      	lsls	r3, r3, #6
 8002c1e:	22ff      	movs	r2, #255	@ 0xff
 8002c20:	401a      	ands	r2, r3
 8002c22:	1dfb      	adds	r3, r7, #7
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	0018      	movs	r0, r3
 8002c28:	2303      	movs	r3, #3
 8002c2a:	4003      	ands	r3, r0
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002c30:	4809      	ldr	r0, [pc, #36]	@ (8002c58 <__NVIC_SetPriority+0xd8>)
 8002c32:	1dfb      	adds	r3, r7, #7
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	001c      	movs	r4, r3
 8002c38:	230f      	movs	r3, #15
 8002c3a:	4023      	ands	r3, r4
 8002c3c:	3b08      	subs	r3, #8
 8002c3e:	089b      	lsrs	r3, r3, #2
 8002c40:	430a      	orrs	r2, r1
 8002c42:	3306      	adds	r3, #6
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	18c3      	adds	r3, r0, r3
 8002c48:	3304      	adds	r3, #4
 8002c4a:	601a      	str	r2, [r3, #0]
}
 8002c4c:	46c0      	nop			@ (mov r8, r8)
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	b003      	add	sp, #12
 8002c52:	bd90      	pop	{r4, r7, pc}
 8002c54:	e000e100 	.word	0xe000e100
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	1e5a      	subs	r2, r3, #1
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	045b      	lsls	r3, r3, #17
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d301      	bcc.n	8002c74 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c70:	2301      	movs	r3, #1
 8002c72:	e010      	b.n	8002c96 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c74:	4b0a      	ldr	r3, [pc, #40]	@ (8002ca0 <SysTick_Config+0x44>)
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	3a01      	subs	r2, #1
 8002c7a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	425b      	negs	r3, r3
 8002c80:	2103      	movs	r1, #3
 8002c82:	0018      	movs	r0, r3
 8002c84:	f7ff ff7c 	bl	8002b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	@ (8002ca0 <SysTick_Config+0x44>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <SysTick_Config+0x44>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	0018      	movs	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b002      	add	sp, #8
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60b9      	str	r1, [r7, #8]
 8002cac:	607a      	str	r2, [r7, #4]
 8002cae:	210f      	movs	r1, #15
 8002cb0:	187b      	adds	r3, r7, r1
 8002cb2:	1c02      	adds	r2, r0, #0
 8002cb4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	187b      	adds	r3, r7, r1
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	b25b      	sxtb	r3, r3
 8002cbe:	0011      	movs	r1, r2
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f7ff ff5d 	bl	8002b80 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8002cc6:	46c0      	nop			@ (mov r8, r8)
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	b004      	add	sp, #16
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b082      	sub	sp, #8
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	1dfb      	adds	r3, r7, #7
 8002cd8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cda:	1dfb      	adds	r3, r7, #7
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b25b      	sxtb	r3, r3
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7ff ff33 	bl	8002b4c <__NVIC_EnableIRQ>
}
 8002ce6:	46c0      	nop			@ (mov r8, r8)
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b002      	add	sp, #8
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f7ff ffaf 	bl	8002c5c <SysTick_Config>
 8002cfe:	0003      	movs	r3, r0
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002d1e:	e155      	b.n	8002fcc <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2101      	movs	r1, #1
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4091      	lsls	r1, r2
 8002d2a:	000a      	movs	r2, r1
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d100      	bne.n	8002d38 <HAL_GPIO_Init+0x30>
 8002d36:	e146      	b.n	8002fc6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	4013      	ands	r3, r2
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d005      	beq.n	8002d50 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d130      	bne.n	8002db2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	0013      	movs	r3, r2
 8002d60:	43da      	mvns	r2, r3
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	409a      	lsls	r2, r3
 8002d72:	0013      	movs	r3, r2
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d86:	2201      	movs	r2, #1
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	0013      	movs	r3, r2
 8002d8e:	43da      	mvns	r2, r3
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	091b      	lsrs	r3, r3, #4
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	401a      	ands	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	409a      	lsls	r2, r3
 8002da4:	0013      	movs	r3, r2
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2203      	movs	r2, #3
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d017      	beq.n	8002dee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	2203      	movs	r2, #3
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	0013      	movs	r3, r2
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	409a      	lsls	r2, r3
 8002de0:	0013      	movs	r3, r2
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	693a      	ldr	r2, [r7, #16]
 8002dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	2203      	movs	r2, #3
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d123      	bne.n	8002e42 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	08da      	lsrs	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3208      	adds	r2, #8
 8002e02:	0092      	lsls	r2, r2, #2
 8002e04:	58d3      	ldr	r3, [r2, r3]
 8002e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2207      	movs	r2, #7
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	220f      	movs	r2, #15
 8002e12:	409a      	lsls	r2, r3
 8002e14:	0013      	movs	r3, r2
 8002e16:	43da      	mvns	r2, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	691a      	ldr	r2, [r3, #16]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2107      	movs	r1, #7
 8002e26:	400b      	ands	r3, r1
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	0013      	movs	r3, r2
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	08da      	lsrs	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3208      	adds	r2, #8
 8002e3c:	0092      	lsls	r2, r2, #2
 8002e3e:	6939      	ldr	r1, [r7, #16]
 8002e40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	2203      	movs	r2, #3
 8002e4e:	409a      	lsls	r2, r3
 8002e50:	0013      	movs	r3, r2
 8002e52:	43da      	mvns	r2, r3
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4013      	ands	r3, r2
 8002e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2203      	movs	r2, #3
 8002e60:	401a      	ands	r2, r3
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	409a      	lsls	r2, r3
 8002e68:	0013      	movs	r3, r2
 8002e6a:	693a      	ldr	r2, [r7, #16]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	23c0      	movs	r3, #192	@ 0xc0
 8002e7c:	029b      	lsls	r3, r3, #10
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d100      	bne.n	8002e84 <HAL_GPIO_Init+0x17c>
 8002e82:	e0a0      	b.n	8002fc6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e84:	4b57      	ldr	r3, [pc, #348]	@ (8002fe4 <HAL_GPIO_Init+0x2dc>)
 8002e86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e88:	4b56      	ldr	r3, [pc, #344]	@ (8002fe4 <HAL_GPIO_Init+0x2dc>)
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e90:	4a55      	ldr	r2, [pc, #340]	@ (8002fe8 <HAL_GPIO_Init+0x2e0>)
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	089b      	lsrs	r3, r3, #2
 8002e96:	3302      	adds	r3, #2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	589b      	ldr	r3, [r3, r2]
 8002e9c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	220f      	movs	r2, #15
 8002ea8:	409a      	lsls	r2, r3
 8002eaa:	0013      	movs	r3, r2
 8002eac:	43da      	mvns	r2, r3
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	23a0      	movs	r3, #160	@ 0xa0
 8002eb8:	05db      	lsls	r3, r3, #23
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d01f      	beq.n	8002efe <HAL_GPIO_Init+0x1f6>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a4a      	ldr	r2, [pc, #296]	@ (8002fec <HAL_GPIO_Init+0x2e4>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d019      	beq.n	8002efa <HAL_GPIO_Init+0x1f2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a49      	ldr	r2, [pc, #292]	@ (8002ff0 <HAL_GPIO_Init+0x2e8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_GPIO_Init+0x1ee>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a48      	ldr	r2, [pc, #288]	@ (8002ff4 <HAL_GPIO_Init+0x2ec>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00d      	beq.n	8002ef2 <HAL_GPIO_Init+0x1ea>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a47      	ldr	r2, [pc, #284]	@ (8002ff8 <HAL_GPIO_Init+0x2f0>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d007      	beq.n	8002eee <HAL_GPIO_Init+0x1e6>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a46      	ldr	r2, [pc, #280]	@ (8002ffc <HAL_GPIO_Init+0x2f4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <HAL_GPIO_Init+0x1e2>
 8002ee6:	2305      	movs	r3, #5
 8002ee8:	e00a      	b.n	8002f00 <HAL_GPIO_Init+0x1f8>
 8002eea:	2306      	movs	r3, #6
 8002eec:	e008      	b.n	8002f00 <HAL_GPIO_Init+0x1f8>
 8002eee:	2304      	movs	r3, #4
 8002ef0:	e006      	b.n	8002f00 <HAL_GPIO_Init+0x1f8>
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e004      	b.n	8002f00 <HAL_GPIO_Init+0x1f8>
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	e002      	b.n	8002f00 <HAL_GPIO_Init+0x1f8>
 8002efa:	2301      	movs	r3, #1
 8002efc:	e000      	b.n	8002f00 <HAL_GPIO_Init+0x1f8>
 8002efe:	2300      	movs	r3, #0
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	2103      	movs	r1, #3
 8002f04:	400a      	ands	r2, r1
 8002f06:	0092      	lsls	r2, r2, #2
 8002f08:	4093      	lsls	r3, r2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f10:	4935      	ldr	r1, [pc, #212]	@ (8002fe8 <HAL_GPIO_Init+0x2e0>)
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	089b      	lsrs	r3, r3, #2
 8002f16:	3302      	adds	r3, #2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1e:	4b38      	ldr	r3, [pc, #224]	@ (8003000 <HAL_GPIO_Init+0x2f8>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	43da      	mvns	r2, r3
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	2380      	movs	r3, #128	@ 0x80
 8002f34:	035b      	lsls	r3, r3, #13
 8002f36:	4013      	ands	r3, r2
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f42:	4b2f      	ldr	r3, [pc, #188]	@ (8003000 <HAL_GPIO_Init+0x2f8>)
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002f48:	4b2d      	ldr	r3, [pc, #180]	@ (8003000 <HAL_GPIO_Init+0x2f8>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	43da      	mvns	r2, r3
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4013      	ands	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	2380      	movs	r3, #128	@ 0x80
 8002f5e:	039b      	lsls	r3, r3, #14
 8002f60:	4013      	ands	r3, r2
 8002f62:	d003      	beq.n	8002f6c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f6c:	4b24      	ldr	r3, [pc, #144]	@ (8003000 <HAL_GPIO_Init+0x2f8>)
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002f72:	4b23      	ldr	r3, [pc, #140]	@ (8003000 <HAL_GPIO_Init+0x2f8>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	2380      	movs	r3, #128	@ 0x80
 8002f88:	029b      	lsls	r3, r3, #10
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f96:	4b1a      	ldr	r3, [pc, #104]	@ (8003000 <HAL_GPIO_Init+0x2f8>)
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f9c:	4b18      	ldr	r3, [pc, #96]	@ (8003000 <HAL_GPIO_Init+0x2f8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	43da      	mvns	r2, r3
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	2380      	movs	r3, #128	@ 0x80
 8002fb2:	025b      	lsls	r3, r3, #9
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002fc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003000 <HAL_GPIO_Init+0x2f8>)
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	40da      	lsrs	r2, r3
 8002fd4:	1e13      	subs	r3, r2, #0
 8002fd6:	d000      	beq.n	8002fda <HAL_GPIO_Init+0x2d2>
 8002fd8:	e6a2      	b.n	8002d20 <HAL_GPIO_Init+0x18>
  }
}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	46c0      	nop			@ (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b006      	add	sp, #24
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	50000400 	.word	0x50000400
 8002ff0:	50000800 	.word	0x50000800
 8002ff4:	50000c00 	.word	0x50000c00
 8002ff8:	50001000 	.word	0x50001000
 8002ffc:	50001c00 	.word	0x50001c00
 8003000:	40010400 	.word	0x40010400

08003004 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800301a:	e0bc      	b.n	8003196 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800301c:	2201      	movs	r2, #1
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	409a      	lsls	r2, r3
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d100      	bne.n	8003030 <HAL_GPIO_DeInit+0x2c>
 800302e:	e0af      	b.n	8003190 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8003030:	4a5e      	ldr	r2, [pc, #376]	@ (80031ac <HAL_GPIO_DeInit+0x1a8>)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	089b      	lsrs	r3, r3, #2
 8003036:	3302      	adds	r3, #2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	589b      	ldr	r3, [r3, r2]
 800303c:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	2203      	movs	r2, #3
 8003042:	4013      	ands	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	220f      	movs	r2, #15
 8003048:	409a      	lsls	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4013      	ands	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	23a0      	movs	r3, #160	@ 0xa0
 8003054:	05db      	lsls	r3, r3, #23
 8003056:	429a      	cmp	r2, r3
 8003058:	d01f      	beq.n	800309a <HAL_GPIO_DeInit+0x96>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a54      	ldr	r2, [pc, #336]	@ (80031b0 <HAL_GPIO_DeInit+0x1ac>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d019      	beq.n	8003096 <HAL_GPIO_DeInit+0x92>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a53      	ldr	r2, [pc, #332]	@ (80031b4 <HAL_GPIO_DeInit+0x1b0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <HAL_GPIO_DeInit+0x8e>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a52      	ldr	r2, [pc, #328]	@ (80031b8 <HAL_GPIO_DeInit+0x1b4>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00d      	beq.n	800308e <HAL_GPIO_DeInit+0x8a>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a51      	ldr	r2, [pc, #324]	@ (80031bc <HAL_GPIO_DeInit+0x1b8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d007      	beq.n	800308a <HAL_GPIO_DeInit+0x86>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a50      	ldr	r2, [pc, #320]	@ (80031c0 <HAL_GPIO_DeInit+0x1bc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d101      	bne.n	8003086 <HAL_GPIO_DeInit+0x82>
 8003082:	2305      	movs	r3, #5
 8003084:	e00a      	b.n	800309c <HAL_GPIO_DeInit+0x98>
 8003086:	2306      	movs	r3, #6
 8003088:	e008      	b.n	800309c <HAL_GPIO_DeInit+0x98>
 800308a:	2304      	movs	r3, #4
 800308c:	e006      	b.n	800309c <HAL_GPIO_DeInit+0x98>
 800308e:	2303      	movs	r3, #3
 8003090:	e004      	b.n	800309c <HAL_GPIO_DeInit+0x98>
 8003092:	2302      	movs	r3, #2
 8003094:	e002      	b.n	800309c <HAL_GPIO_DeInit+0x98>
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <HAL_GPIO_DeInit+0x98>
 800309a:	2300      	movs	r3, #0
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	2103      	movs	r1, #3
 80030a0:	400a      	ands	r2, r1
 80030a2:	0092      	lsls	r2, r2, #2
 80030a4:	4093      	lsls	r3, r2
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d132      	bne.n	8003112 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80030ac:	4b45      	ldr	r3, [pc, #276]	@ (80031c4 <HAL_GPIO_DeInit+0x1c0>)
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	43d9      	mvns	r1, r3
 80030b4:	4b43      	ldr	r3, [pc, #268]	@ (80031c4 <HAL_GPIO_DeInit+0x1c0>)
 80030b6:	400a      	ands	r2, r1
 80030b8:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80030ba:	4b42      	ldr	r3, [pc, #264]	@ (80031c4 <HAL_GPIO_DeInit+0x1c0>)
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	43d9      	mvns	r1, r3
 80030c2:	4b40      	ldr	r3, [pc, #256]	@ (80031c4 <HAL_GPIO_DeInit+0x1c0>)
 80030c4:	400a      	ands	r2, r1
 80030c6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80030c8:	4b3e      	ldr	r3, [pc, #248]	@ (80031c4 <HAL_GPIO_DeInit+0x1c0>)
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	43d9      	mvns	r1, r3
 80030d0:	4b3c      	ldr	r3, [pc, #240]	@ (80031c4 <HAL_GPIO_DeInit+0x1c0>)
 80030d2:	400a      	ands	r2, r1
 80030d4:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80030d6:	4b3b      	ldr	r3, [pc, #236]	@ (80031c4 <HAL_GPIO_DeInit+0x1c0>)
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	43d9      	mvns	r1, r3
 80030de:	4b39      	ldr	r3, [pc, #228]	@ (80031c4 <HAL_GPIO_DeInit+0x1c0>)
 80030e0:	400a      	ands	r2, r1
 80030e2:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2203      	movs	r2, #3
 80030e8:	4013      	ands	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	220f      	movs	r2, #15
 80030ee:	409a      	lsls	r2, r3
 80030f0:	0013      	movs	r3, r2
 80030f2:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80030f4:	4a2d      	ldr	r2, [pc, #180]	@ (80031ac <HAL_GPIO_DeInit+0x1a8>)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	3302      	adds	r3, #2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	589a      	ldr	r2, [r3, r2]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43d9      	mvns	r1, r3
 8003104:	4829      	ldr	r0, [pc, #164]	@ (80031ac <HAL_GPIO_DeInit+0x1a8>)
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	400a      	ands	r2, r1
 800310c:	3302      	adds	r3, #2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	2103      	movs	r1, #3
 800311c:	4099      	lsls	r1, r3
 800311e:	000b      	movs	r3, r1
 8003120:	431a      	orrs	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	08da      	lsrs	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	3208      	adds	r2, #8
 800312e:	0092      	lsls	r2, r2, #2
 8003130:	58d3      	ldr	r3, [r2, r3]
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	2107      	movs	r1, #7
 8003136:	400a      	ands	r2, r1
 8003138:	0092      	lsls	r2, r2, #2
 800313a:	210f      	movs	r1, #15
 800313c:	4091      	lsls	r1, r2
 800313e:	000a      	movs	r2, r1
 8003140:	43d1      	mvns	r1, r2
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	08d2      	lsrs	r2, r2, #3
 8003146:	4019      	ands	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	3208      	adds	r2, #8
 800314c:	0092      	lsls	r2, r2, #2
 800314e:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	0052      	lsls	r2, r2, #1
 8003158:	2103      	movs	r1, #3
 800315a:	4091      	lsls	r1, r2
 800315c:	000a      	movs	r2, r1
 800315e:	43d2      	mvns	r2, r2
 8003160:	401a      	ands	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2101      	movs	r1, #1
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4091      	lsls	r1, r2
 8003170:	000a      	movs	r2, r1
 8003172:	43d2      	mvns	r2, r2
 8003174:	401a      	ands	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	0052      	lsls	r2, r2, #1
 8003182:	2103      	movs	r1, #3
 8003184:	4091      	lsls	r1, r2
 8003186:	000a      	movs	r2, r1
 8003188:	43d2      	mvns	r2, r2
 800318a:	401a      	ands	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	609a      	str	r2, [r3, #8]
    }
    position++;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	3301      	adds	r3, #1
 8003194:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	40da      	lsrs	r2, r3
 800319c:	1e13      	subs	r3, r2, #0
 800319e:	d000      	beq.n	80031a2 <HAL_GPIO_DeInit+0x19e>
 80031a0:	e73c      	b.n	800301c <HAL_GPIO_DeInit+0x18>
  }
}
 80031a2:	46c0      	nop			@ (mov r8, r8)
 80031a4:	46c0      	nop			@ (mov r8, r8)
 80031a6:	46bd      	mov	sp, r7
 80031a8:	b006      	add	sp, #24
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40010000 	.word	0x40010000
 80031b0:	50000400 	.word	0x50000400
 80031b4:	50000800 	.word	0x50000800
 80031b8:	50000c00 	.word	0x50000c00
 80031bc:	50001000 	.word	0x50001000
 80031c0:	50001c00 	.word	0x50001c00
 80031c4:	40010400 	.word	0x40010400

080031c8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b082      	sub	sp, #8
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	0008      	movs	r0, r1
 80031d2:	0011      	movs	r1, r2
 80031d4:	1cbb      	adds	r3, r7, #2
 80031d6:	1c02      	adds	r2, r0, #0
 80031d8:	801a      	strh	r2, [r3, #0]
 80031da:	1c7b      	adds	r3, r7, #1
 80031dc:	1c0a      	adds	r2, r1, #0
 80031de:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031e0:	1c7b      	adds	r3, r7, #1
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e8:	1cbb      	adds	r3, r7, #2
 80031ea:	881a      	ldrh	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80031f0:	e003      	b.n	80031fa <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80031f2:	1cbb      	adds	r3, r7, #2
 80031f4:	881a      	ldrh	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	46bd      	mov	sp, r7
 80031fe:	b002      	add	sp, #8
 8003200:	bd80      	pop	{r7, pc}
	...

08003204 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e08f      	b.n	8003336 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2241      	movs	r2, #65	@ 0x41
 800321a:	5c9b      	ldrb	r3, [r3, r2]
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d107      	bne.n	8003232 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2240      	movs	r2, #64	@ 0x40
 8003226:	2100      	movs	r1, #0
 8003228:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	0018      	movs	r0, r3
 800322e:	f7fe f8ef 	bl	8001410 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2241      	movs	r2, #65	@ 0x41
 8003236:	2124      	movs	r1, #36	@ 0x24
 8003238:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2101      	movs	r1, #1
 8003246:	438a      	bics	r2, r1
 8003248:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	493b      	ldr	r1, [pc, #236]	@ (8003340 <HAL_I2C_Init+0x13c>)
 8003254:	400a      	ands	r2, r1
 8003256:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4938      	ldr	r1, [pc, #224]	@ (8003344 <HAL_I2C_Init+0x140>)
 8003264:	400a      	ands	r2, r1
 8003266:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	2b01      	cmp	r3, #1
 800326e:	d108      	bne.n	8003282 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2180      	movs	r1, #128	@ 0x80
 800327a:	0209      	lsls	r1, r1, #8
 800327c:	430a      	orrs	r2, r1
 800327e:	609a      	str	r2, [r3, #8]
 8003280:	e007      	b.n	8003292 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2184      	movs	r1, #132	@ 0x84
 800328c:	0209      	lsls	r1, r1, #8
 800328e:	430a      	orrs	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d109      	bne.n	80032ae <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2180      	movs	r1, #128	@ 0x80
 80032a6:	0109      	lsls	r1, r1, #4
 80032a8:	430a      	orrs	r2, r1
 80032aa:	605a      	str	r2, [r3, #4]
 80032ac:	e007      	b.n	80032be <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4923      	ldr	r1, [pc, #140]	@ (8003348 <HAL_I2C_Init+0x144>)
 80032ba:	400a      	ands	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4920      	ldr	r1, [pc, #128]	@ (800334c <HAL_I2C_Init+0x148>)
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	491a      	ldr	r1, [pc, #104]	@ (8003344 <HAL_I2C_Init+0x140>)
 80032da:	400a      	ands	r2, r1
 80032dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	431a      	orrs	r2, r3
 80032e8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	430a      	orrs	r2, r1
 80032f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69d9      	ldr	r1, [r3, #28]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1a      	ldr	r2, [r3, #32]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2101      	movs	r1, #1
 8003314:	430a      	orrs	r2, r1
 8003316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2241      	movs	r2, #65	@ 0x41
 8003322:	2120      	movs	r1, #32
 8003324:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2242      	movs	r2, #66	@ 0x42
 8003330:	2100      	movs	r1, #0
 8003332:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	0018      	movs	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	b002      	add	sp, #8
 800333c:	bd80      	pop	{r7, pc}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	f0ffffff 	.word	0xf0ffffff
 8003344:	ffff7fff 	.word	0xffff7fff
 8003348:	fffff7ff 	.word	0xfffff7ff
 800334c:	02008000 	.word	0x02008000

08003350 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e022      	b.n	80033a8 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2241      	movs	r2, #65	@ 0x41
 8003366:	2124      	movs	r1, #36	@ 0x24
 8003368:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	438a      	bics	r2, r1
 8003378:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	0018      	movs	r0, r3
 800337e:	f7fe f88b 	bl	8001498 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2241      	movs	r2, #65	@ 0x41
 800338c:	2100      	movs	r1, #0
 800338e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2242      	movs	r2, #66	@ 0x42
 800339a:	2100      	movs	r1, #0
 800339c:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2240      	movs	r2, #64	@ 0x40
 80033a2:	2100      	movs	r1, #0
 80033a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80033b0:	b590      	push	{r4, r7, lr}
 80033b2:	b089      	sub	sp, #36	@ 0x24
 80033b4:	af02      	add	r7, sp, #8
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	0008      	movs	r0, r1
 80033ba:	607a      	str	r2, [r7, #4]
 80033bc:	0019      	movs	r1, r3
 80033be:	230a      	movs	r3, #10
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	1c02      	adds	r2, r0, #0
 80033c4:	801a      	strh	r2, [r3, #0]
 80033c6:	2308      	movs	r3, #8
 80033c8:	18fb      	adds	r3, r7, r3
 80033ca:	1c0a      	adds	r2, r1, #0
 80033cc:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2241      	movs	r2, #65	@ 0x41
 80033d2:	5c9b      	ldrb	r3, [r3, r2]
 80033d4:	b2db      	uxtb	r3, r3
 80033d6:	2b20      	cmp	r3, #32
 80033d8:	d000      	beq.n	80033dc <HAL_I2C_Master_Transmit+0x2c>
 80033da:	e10a      	b.n	80035f2 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2240      	movs	r2, #64	@ 0x40
 80033e0:	5c9b      	ldrb	r3, [r3, r2]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d101      	bne.n	80033ea <HAL_I2C_Master_Transmit+0x3a>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e104      	b.n	80035f4 <HAL_I2C_Master_Transmit+0x244>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2240      	movs	r2, #64	@ 0x40
 80033ee:	2101      	movs	r1, #1
 80033f0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033f2:	f7fe febb 	bl	800216c <HAL_GetTick>
 80033f6:	0003      	movs	r3, r0
 80033f8:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033fa:	2380      	movs	r3, #128	@ 0x80
 80033fc:	0219      	lsls	r1, r3, #8
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	2319      	movs	r3, #25
 8003406:	2201      	movs	r2, #1
 8003408:	f000 fb22 	bl	8003a50 <I2C_WaitOnFlagUntilTimeout>
 800340c:	1e03      	subs	r3, r0, #0
 800340e:	d001      	beq.n	8003414 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0ef      	b.n	80035f4 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2241      	movs	r2, #65	@ 0x41
 8003418:	2121      	movs	r1, #33	@ 0x21
 800341a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2242      	movs	r2, #66	@ 0x42
 8003420:	2110      	movs	r1, #16
 8003422:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2208      	movs	r2, #8
 8003434:	18ba      	adds	r2, r7, r2
 8003436:	8812      	ldrh	r2, [r2, #0]
 8003438:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003444:	b29b      	uxth	r3, r3
 8003446:	2bff      	cmp	r3, #255	@ 0xff
 8003448:	d906      	bls.n	8003458 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	22ff      	movs	r2, #255	@ 0xff
 800344e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003450:	2380      	movs	r3, #128	@ 0x80
 8003452:	045b      	lsls	r3, r3, #17
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	e007      	b.n	8003468 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003462:	2380      	movs	r3, #128	@ 0x80
 8003464:	049b      	lsls	r3, r3, #18
 8003466:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346c:	2b00      	cmp	r3, #0
 800346e:	d027      	beq.n	80034c0 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	781a      	ldrb	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	3301      	adds	r3, #1
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	697c      	ldr	r4, [r7, #20]
 80034ac:	230a      	movs	r3, #10
 80034ae:	18fb      	adds	r3, r7, r3
 80034b0:	8819      	ldrh	r1, [r3, #0]
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	4b51      	ldr	r3, [pc, #324]	@ (80035fc <HAL_I2C_Master_Transmit+0x24c>)
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	0023      	movs	r3, r4
 80034ba:	f000 fd41 	bl	8003f40 <I2C_TransferConfig>
 80034be:	e06f      	b.n	80035a0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	697c      	ldr	r4, [r7, #20]
 80034c8:	230a      	movs	r3, #10
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	8819      	ldrh	r1, [r3, #0]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	4b4a      	ldr	r3, [pc, #296]	@ (80035fc <HAL_I2C_Master_Transmit+0x24c>)
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	0023      	movs	r3, r4
 80034d6:	f000 fd33 	bl	8003f40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80034da:	e061      	b.n	80035a0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	0018      	movs	r0, r3
 80034e4:	f000 fb0c 	bl	8003b00 <I2C_WaitOnTXISFlagUntilTimeout>
 80034e8:	1e03      	subs	r3, r0, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e081      	b.n	80035f4 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f4:	781a      	ldrb	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350a:	b29b      	uxth	r3, r3
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d03a      	beq.n	80035a0 <HAL_I2C_Master_Transmit+0x1f0>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800352e:	2b00      	cmp	r3, #0
 8003530:	d136      	bne.n	80035a0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003532:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	9300      	str	r3, [sp, #0]
 800353a:	0013      	movs	r3, r2
 800353c:	2200      	movs	r2, #0
 800353e:	2180      	movs	r1, #128	@ 0x80
 8003540:	f000 fa86 	bl	8003a50 <I2C_WaitOnFlagUntilTimeout>
 8003544:	1e03      	subs	r3, r0, #0
 8003546:	d001      	beq.n	800354c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e053      	b.n	80035f4 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003550:	b29b      	uxth	r3, r3
 8003552:	2bff      	cmp	r3, #255	@ 0xff
 8003554:	d911      	bls.n	800357a <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	22ff      	movs	r2, #255	@ 0xff
 800355a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003560:	b2da      	uxtb	r2, r3
 8003562:	2380      	movs	r3, #128	@ 0x80
 8003564:	045c      	lsls	r4, r3, #17
 8003566:	230a      	movs	r3, #10
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	8819      	ldrh	r1, [r3, #0]
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	2300      	movs	r3, #0
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	0023      	movs	r3, r4
 8003574:	f000 fce4 	bl	8003f40 <I2C_TransferConfig>
 8003578:	e012      	b.n	80035a0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003588:	b2da      	uxtb	r2, r3
 800358a:	2380      	movs	r3, #128	@ 0x80
 800358c:	049c      	lsls	r4, r3, #18
 800358e:	230a      	movs	r3, #10
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	8819      	ldrh	r1, [r3, #0]
 8003594:	68f8      	ldr	r0, [r7, #12]
 8003596:	2300      	movs	r3, #0
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	0023      	movs	r3, r4
 800359c:	f000 fcd0 	bl	8003f40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d198      	bne.n	80034dc <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f000 faeb 	bl	8003b8c <I2C_WaitOnSTOPFlagUntilTimeout>
 80035b6:	1e03      	subs	r3, r0, #0
 80035b8:	d001      	beq.n	80035be <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e01a      	b.n	80035f4 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2220      	movs	r2, #32
 80035c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	490b      	ldr	r1, [pc, #44]	@ (8003600 <HAL_I2C_Master_Transmit+0x250>)
 80035d2:	400a      	ands	r2, r1
 80035d4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2241      	movs	r2, #65	@ 0x41
 80035da:	2120      	movs	r1, #32
 80035dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2242      	movs	r2, #66	@ 0x42
 80035e2:	2100      	movs	r1, #0
 80035e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2240      	movs	r2, #64	@ 0x40
 80035ea:	2100      	movs	r1, #0
 80035ec:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80035ee:	2300      	movs	r3, #0
 80035f0:	e000      	b.n	80035f4 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 80035f2:	2302      	movs	r3, #2
  }
}
 80035f4:	0018      	movs	r0, r3
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b007      	add	sp, #28
 80035fa:	bd90      	pop	{r4, r7, pc}
 80035fc:	80002000 	.word	0x80002000
 8003600:	fe00e800 	.word	0xfe00e800

08003604 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003604:	b590      	push	{r4, r7, lr}
 8003606:	b089      	sub	sp, #36	@ 0x24
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	0008      	movs	r0, r1
 800360e:	607a      	str	r2, [r7, #4]
 8003610:	0019      	movs	r1, r3
 8003612:	230a      	movs	r3, #10
 8003614:	18fb      	adds	r3, r7, r3
 8003616:	1c02      	adds	r2, r0, #0
 8003618:	801a      	strh	r2, [r3, #0]
 800361a:	2308      	movs	r3, #8
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	1c0a      	adds	r2, r1, #0
 8003620:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2241      	movs	r2, #65	@ 0x41
 8003626:	5c9b      	ldrb	r3, [r3, r2]
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b20      	cmp	r3, #32
 800362c:	d000      	beq.n	8003630 <HAL_I2C_Master_Receive+0x2c>
 800362e:	e0e8      	b.n	8003802 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2240      	movs	r2, #64	@ 0x40
 8003634:	5c9b      	ldrb	r3, [r3, r2]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d101      	bne.n	800363e <HAL_I2C_Master_Receive+0x3a>
 800363a:	2302      	movs	r3, #2
 800363c:	e0e2      	b.n	8003804 <HAL_I2C_Master_Receive+0x200>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2240      	movs	r2, #64	@ 0x40
 8003642:	2101      	movs	r1, #1
 8003644:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003646:	f7fe fd91 	bl	800216c <HAL_GetTick>
 800364a:	0003      	movs	r3, r0
 800364c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800364e:	2380      	movs	r3, #128	@ 0x80
 8003650:	0219      	lsls	r1, r3, #8
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	2319      	movs	r3, #25
 800365a:	2201      	movs	r2, #1
 800365c:	f000 f9f8 	bl	8003a50 <I2C_WaitOnFlagUntilTimeout>
 8003660:	1e03      	subs	r3, r0, #0
 8003662:	d001      	beq.n	8003668 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0cd      	b.n	8003804 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2241      	movs	r2, #65	@ 0x41
 800366c:	2122      	movs	r1, #34	@ 0x22
 800366e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2242      	movs	r2, #66	@ 0x42
 8003674:	2110      	movs	r1, #16
 8003676:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2208      	movs	r2, #8
 8003688:	18ba      	adds	r2, r7, r2
 800368a:	8812      	ldrh	r2, [r2, #0]
 800368c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003698:	b29b      	uxth	r3, r3
 800369a:	2bff      	cmp	r3, #255	@ 0xff
 800369c:	d911      	bls.n	80036c2 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	2380      	movs	r3, #128	@ 0x80
 80036ac:	045c      	lsls	r4, r3, #17
 80036ae:	230a      	movs	r3, #10
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	8819      	ldrh	r1, [r3, #0]
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	4b55      	ldr	r3, [pc, #340]	@ (800380c <HAL_I2C_Master_Receive+0x208>)
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	0023      	movs	r3, r4
 80036bc:	f000 fc40 	bl	8003f40 <I2C_TransferConfig>
 80036c0:	e076      	b.n	80037b0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	2380      	movs	r3, #128	@ 0x80
 80036d4:	049c      	lsls	r4, r3, #18
 80036d6:	230a      	movs	r3, #10
 80036d8:	18fb      	adds	r3, r7, r3
 80036da:	8819      	ldrh	r1, [r3, #0]
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	4b4b      	ldr	r3, [pc, #300]	@ (800380c <HAL_I2C_Master_Receive+0x208>)
 80036e0:	9300      	str	r3, [sp, #0]
 80036e2:	0023      	movs	r3, r4
 80036e4:	f000 fc2c 	bl	8003f40 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80036e8:	e062      	b.n	80037b0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	0018      	movs	r0, r3
 80036f2:	f000 fa8f 	bl	8003c14 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036f6:	1e03      	subs	r3, r0, #0
 80036f8:	d001      	beq.n	80036fe <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e082      	b.n	8003804 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	1c5a      	adds	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371a:	3b01      	subs	r3, #1
 800371c:	b29a      	uxth	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003726:	b29b      	uxth	r3, r3
 8003728:	3b01      	subs	r3, #1
 800372a:	b29a      	uxth	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d03a      	beq.n	80037b0 <HAL_I2C_Master_Receive+0x1ac>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	d136      	bne.n	80037b0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003742:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	0013      	movs	r3, r2
 800374c:	2200      	movs	r2, #0
 800374e:	2180      	movs	r1, #128	@ 0x80
 8003750:	f000 f97e 	bl	8003a50 <I2C_WaitOnFlagUntilTimeout>
 8003754:	1e03      	subs	r3, r0, #0
 8003756:	d001      	beq.n	800375c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e053      	b.n	8003804 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	2bff      	cmp	r3, #255	@ 0xff
 8003764:	d911      	bls.n	800378a <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	22ff      	movs	r2, #255	@ 0xff
 800376a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003770:	b2da      	uxtb	r2, r3
 8003772:	2380      	movs	r3, #128	@ 0x80
 8003774:	045c      	lsls	r4, r3, #17
 8003776:	230a      	movs	r3, #10
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	8819      	ldrh	r1, [r3, #0]
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	2300      	movs	r3, #0
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	0023      	movs	r3, r4
 8003784:	f000 fbdc 	bl	8003f40 <I2C_TransferConfig>
 8003788:	e012      	b.n	80037b0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003798:	b2da      	uxtb	r2, r3
 800379a:	2380      	movs	r3, #128	@ 0x80
 800379c:	049c      	lsls	r4, r3, #18
 800379e:	230a      	movs	r3, #10
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	8819      	ldrh	r1, [r3, #0]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	2300      	movs	r3, #0
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	0023      	movs	r3, r4
 80037ac:	f000 fbc8 	bl	8003f40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d197      	bne.n	80036ea <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	0018      	movs	r0, r3
 80037c2:	f000 f9e3 	bl	8003b8c <I2C_WaitOnSTOPFlagUntilTimeout>
 80037c6:	1e03      	subs	r3, r0, #0
 80037c8:	d001      	beq.n	80037ce <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e01a      	b.n	8003804 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2220      	movs	r2, #32
 80037d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	490b      	ldr	r1, [pc, #44]	@ (8003810 <HAL_I2C_Master_Receive+0x20c>)
 80037e2:	400a      	ands	r2, r1
 80037e4:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2241      	movs	r2, #65	@ 0x41
 80037ea:	2120      	movs	r1, #32
 80037ec:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2242      	movs	r2, #66	@ 0x42
 80037f2:	2100      	movs	r1, #0
 80037f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2240      	movs	r2, #64	@ 0x40
 80037fa:	2100      	movs	r1, #0
 80037fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037fe:	2300      	movs	r3, #0
 8003800:	e000      	b.n	8003804 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003802:	2302      	movs	r3, #2
  }
}
 8003804:	0018      	movs	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	b007      	add	sp, #28
 800380a:	bd90      	pop	{r4, r7, pc}
 800380c:	80002400 	.word	0x80002400
 8003810:	fe00e800 	.word	0xfe00e800

08003814 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08a      	sub	sp, #40	@ 0x28
 8003818:	af02      	add	r7, sp, #8
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	607a      	str	r2, [r7, #4]
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	230a      	movs	r3, #10
 8003822:	18fb      	adds	r3, r7, r3
 8003824:	1c0a      	adds	r2, r1, #0
 8003826:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003828:	2300      	movs	r3, #0
 800382a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2241      	movs	r2, #65	@ 0x41
 8003830:	5c9b      	ldrb	r3, [r3, r2]
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b20      	cmp	r3, #32
 8003836:	d000      	beq.n	800383a <HAL_I2C_IsDeviceReady+0x26>
 8003838:	e0df      	b.n	80039fa <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	2380      	movs	r3, #128	@ 0x80
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	401a      	ands	r2, r3
 8003846:	2380      	movs	r3, #128	@ 0x80
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	429a      	cmp	r2, r3
 800384c:	d101      	bne.n	8003852 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800384e:	2302      	movs	r3, #2
 8003850:	e0d4      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2240      	movs	r2, #64	@ 0x40
 8003856:	5c9b      	ldrb	r3, [r3, r2]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_I2C_IsDeviceReady+0x4c>
 800385c:	2302      	movs	r3, #2
 800385e:	e0cd      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x1e8>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2240      	movs	r2, #64	@ 0x40
 8003864:	2101      	movs	r1, #1
 8003866:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2241      	movs	r2, #65	@ 0x41
 800386c:	2124      	movs	r1, #36	@ 0x24
 800386e:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d107      	bne.n	800388e <HAL_I2C_IsDeviceReady+0x7a>
 800387e:	230a      	movs	r3, #10
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	059b      	lsls	r3, r3, #22
 8003886:	0d9b      	lsrs	r3, r3, #22
 8003888:	4a5e      	ldr	r2, [pc, #376]	@ (8003a04 <HAL_I2C_IsDeviceReady+0x1f0>)
 800388a:	431a      	orrs	r2, r3
 800388c:	e006      	b.n	800389c <HAL_I2C_IsDeviceReady+0x88>
 800388e:	230a      	movs	r3, #10
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	881b      	ldrh	r3, [r3, #0]
 8003894:	059b      	lsls	r3, r3, #22
 8003896:	0d9b      	lsrs	r3, r3, #22
 8003898:	4a5b      	ldr	r2, [pc, #364]	@ (8003a08 <HAL_I2C_IsDeviceReady+0x1f4>)
 800389a:	431a      	orrs	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80038a2:	f7fe fc63 	bl	800216c <HAL_GetTick>
 80038a6:	0003      	movs	r3, r0
 80038a8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2220      	movs	r2, #32
 80038b2:	4013      	ands	r3, r2
 80038b4:	3b20      	subs	r3, #32
 80038b6:	425a      	negs	r2, r3
 80038b8:	4153      	adcs	r3, r2
 80038ba:	b2da      	uxtb	r2, r3
 80038bc:	231f      	movs	r3, #31
 80038be:	18fb      	adds	r3, r7, r3
 80038c0:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	2210      	movs	r2, #16
 80038ca:	4013      	ands	r3, r2
 80038cc:	3b10      	subs	r3, #16
 80038ce:	425a      	negs	r2, r3
 80038d0:	4153      	adcs	r3, r2
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	231e      	movs	r3, #30
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80038da:	e035      	b.n	8003948 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	3301      	adds	r3, #1
 80038e0:	d01a      	beq.n	8003918 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038e2:	f7fe fc43 	bl	800216c <HAL_GetTick>
 80038e6:	0002      	movs	r2, r0
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d302      	bcc.n	80038f8 <HAL_I2C_IsDeviceReady+0xe4>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10f      	bne.n	8003918 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2241      	movs	r2, #65	@ 0x41
 80038fc:	2120      	movs	r1, #32
 80038fe:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003904:	2220      	movs	r2, #32
 8003906:	431a      	orrs	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2240      	movs	r2, #64	@ 0x40
 8003910:	2100      	movs	r1, #0
 8003912:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e071      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	2220      	movs	r2, #32
 8003920:	4013      	ands	r3, r2
 8003922:	3b20      	subs	r3, #32
 8003924:	425a      	negs	r2, r3
 8003926:	4153      	adcs	r3, r2
 8003928:	b2da      	uxtb	r2, r3
 800392a:	231f      	movs	r3, #31
 800392c:	18fb      	adds	r3, r7, r3
 800392e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2210      	movs	r2, #16
 8003938:	4013      	ands	r3, r2
 800393a:	3b10      	subs	r3, #16
 800393c:	425a      	negs	r2, r3
 800393e:	4153      	adcs	r3, r2
 8003940:	b2da      	uxtb	r2, r3
 8003942:	231e      	movs	r3, #30
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003948:	231f      	movs	r3, #31
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d104      	bne.n	800395c <HAL_I2C_IsDeviceReady+0x148>
 8003952:	231e      	movs	r3, #30
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0bf      	beq.n	80038dc <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	2210      	movs	r2, #16
 8003964:	4013      	ands	r3, r2
 8003966:	2b10      	cmp	r3, #16
 8003968:	d01a      	beq.n	80039a0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	0013      	movs	r3, r2
 8003974:	2200      	movs	r2, #0
 8003976:	2120      	movs	r1, #32
 8003978:	f000 f86a 	bl	8003a50 <I2C_WaitOnFlagUntilTimeout>
 800397c:	1e03      	subs	r3, r0, #0
 800397e:	d001      	beq.n	8003984 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e03b      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2220      	movs	r2, #32
 800398a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2241      	movs	r2, #65	@ 0x41
 8003990:	2120      	movs	r1, #32
 8003992:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2240      	movs	r2, #64	@ 0x40
 8003998:	2100      	movs	r1, #0
 800399a:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800399c:	2300      	movs	r3, #0
 800399e:	e02d      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	0013      	movs	r3, r2
 80039aa:	2200      	movs	r2, #0
 80039ac:	2120      	movs	r1, #32
 80039ae:	f000 f84f 	bl	8003a50 <I2C_WaitOnFlagUntilTimeout>
 80039b2:	1e03      	subs	r3, r0, #0
 80039b4:	d001      	beq.n	80039ba <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e020      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2210      	movs	r2, #16
 80039c0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2220      	movs	r2, #32
 80039c8:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	3301      	adds	r3, #1
 80039ce:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d900      	bls.n	80039da <HAL_I2C_IsDeviceReady+0x1c6>
 80039d8:	e74d      	b.n	8003876 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2241      	movs	r2, #65	@ 0x41
 80039de:	2120      	movs	r1, #32
 80039e0:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	2220      	movs	r2, #32
 80039e8:	431a      	orrs	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2240      	movs	r2, #64	@ 0x40
 80039f2:	2100      	movs	r1, #0
 80039f4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
  }
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b008      	add	sp, #32
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	02002000 	.word	0x02002000
 8003a08:	02002800 	.word	0x02002800

08003a0c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d103      	bne.n	8003a2a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2200      	movs	r2, #0
 8003a28:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2201      	movs	r2, #1
 8003a32:	4013      	ands	r3, r2
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d007      	beq.n	8003a48 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2101      	movs	r1, #1
 8003a44:	430a      	orrs	r2, r1
 8003a46:	619a      	str	r2, [r3, #24]
  }
}
 8003a48:	46c0      	nop			@ (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	603b      	str	r3, [r7, #0]
 8003a5c:	1dfb      	adds	r3, r7, #7
 8003a5e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a60:	e03a      	b.n	8003ad8 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	6839      	ldr	r1, [r7, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	0018      	movs	r0, r3
 8003a6a:	f000 f971 	bl	8003d50 <I2C_IsErrorOccurred>
 8003a6e:	1e03      	subs	r3, r0, #0
 8003a70:	d001      	beq.n	8003a76 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e040      	b.n	8003af8 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	d02d      	beq.n	8003ad8 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a7c:	f7fe fb76 	bl	800216c <HAL_GetTick>
 8003a80:	0002      	movs	r2, r0
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d302      	bcc.n	8003a92 <I2C_WaitOnFlagUntilTimeout+0x42>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d122      	bne.n	8003ad8 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	425a      	negs	r2, r3
 8003aa2:	4153      	adcs	r3, r2
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	001a      	movs	r2, r3
 8003aa8:	1dfb      	adds	r3, r7, #7
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d113      	bne.n	8003ad8 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2241      	movs	r2, #65	@ 0x41
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2242      	movs	r2, #66	@ 0x42
 8003ac8:	2100      	movs	r1, #0
 8003aca:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2240      	movs	r2, #64	@ 0x40
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e00f      	b.n	8003af8 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	425a      	negs	r2, r3
 8003ae8:	4153      	adcs	r3, r2
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	001a      	movs	r2, r3
 8003aee:	1dfb      	adds	r3, r7, #7
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d0b5      	beq.n	8003a62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003af6:	2300      	movs	r3, #0
}
 8003af8:	0018      	movs	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	b004      	add	sp, #16
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b0c:	e032      	b.n	8003b74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	0018      	movs	r0, r3
 8003b16:	f000 f91b 	bl	8003d50 <I2C_IsErrorOccurred>
 8003b1a:	1e03      	subs	r3, r0, #0
 8003b1c:	d001      	beq.n	8003b22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e030      	b.n	8003b84 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	3301      	adds	r3, #1
 8003b26:	d025      	beq.n	8003b74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b28:	f7fe fb20 	bl	800216c <HAL_GetTick>
 8003b2c:	0002      	movs	r2, r0
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d302      	bcc.n	8003b3e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d11a      	bne.n	8003b74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2202      	movs	r2, #2
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d013      	beq.n	8003b74 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b50:	2220      	movs	r2, #32
 8003b52:	431a      	orrs	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2241      	movs	r2, #65	@ 0x41
 8003b5c:	2120      	movs	r1, #32
 8003b5e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2242      	movs	r2, #66	@ 0x42
 8003b64:	2100      	movs	r1, #0
 8003b66:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2240      	movs	r2, #64	@ 0x40
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e007      	b.n	8003b84 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699b      	ldr	r3, [r3, #24]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d1c5      	bne.n	8003b0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	0018      	movs	r0, r3
 8003b86:	46bd      	mov	sp, r7
 8003b88:	b004      	add	sp, #16
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b98:	e02f      	b.n	8003bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	68b9      	ldr	r1, [r7, #8]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	0018      	movs	r0, r3
 8003ba2:	f000 f8d5 	bl	8003d50 <I2C_IsErrorOccurred>
 8003ba6:	1e03      	subs	r3, r0, #0
 8003ba8:	d001      	beq.n	8003bae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e02d      	b.n	8003c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bae:	f7fe fadd 	bl	800216c <HAL_GetTick>
 8003bb2:	0002      	movs	r2, r0
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	68ba      	ldr	r2, [r7, #8]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d11a      	bne.n	8003bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b20      	cmp	r3, #32
 8003bd0:	d013      	beq.n	8003bfa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	431a      	orrs	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2241      	movs	r2, #65	@ 0x41
 8003be2:	2120      	movs	r1, #32
 8003be4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2242      	movs	r2, #66	@ 0x42
 8003bea:	2100      	movs	r1, #0
 8003bec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2240      	movs	r2, #64	@ 0x40
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e007      	b.n	8003c0a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2220      	movs	r2, #32
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d1c8      	bne.n	8003b9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	0018      	movs	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	b004      	add	sp, #16
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c20:	2317      	movs	r3, #23
 8003c22:	18fb      	adds	r3, r7, r3
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003c28:	e07b      	b.n	8003d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	0018      	movs	r0, r3
 8003c32:	f000 f88d 	bl	8003d50 <I2C_IsErrorOccurred>
 8003c36:	1e03      	subs	r3, r0, #0
 8003c38:	d003      	beq.n	8003c42 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8003c3a:	2317      	movs	r3, #23
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	2220      	movs	r2, #32
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	2b20      	cmp	r3, #32
 8003c4e:	d140      	bne.n	8003cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003c50:	2117      	movs	r1, #23
 8003c52:	187b      	adds	r3, r7, r1
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d13b      	bne.n	8003cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2204      	movs	r2, #4
 8003c62:	4013      	ands	r3, r2
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d106      	bne.n	8003c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003c70:	187b      	adds	r3, r7, r1
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	699b      	ldr	r3, [r3, #24]
 8003c7c:	2210      	movs	r2, #16
 8003c7e:	4013      	ands	r3, r2
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	d123      	bne.n	8003ccc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2204      	movs	r2, #4
 8003c90:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2220      	movs	r2, #32
 8003c98:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4929      	ldr	r1, [pc, #164]	@ (8003d4c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8003ca6:	400a      	ands	r2, r1
 8003ca8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2241      	movs	r2, #65	@ 0x41
 8003cae:	2120      	movs	r1, #32
 8003cb0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2242      	movs	r2, #66	@ 0x42
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2240      	movs	r2, #64	@ 0x40
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003cc2:	2317      	movs	r3, #23
 8003cc4:	18fb      	adds	r3, r7, r3
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	701a      	strb	r2, [r3, #0]
 8003cca:	e002      	b.n	8003cd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003cd2:	f7fe fa4b 	bl	800216c <HAL_GetTick>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d302      	bcc.n	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d11c      	bne.n	8003d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003ce8:	2017      	movs	r0, #23
 8003cea:	183b      	adds	r3, r7, r0
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d117      	bne.n	8003d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d010      	beq.n	8003d22 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d04:	2220      	movs	r2, #32
 8003d06:	431a      	orrs	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2241      	movs	r2, #65	@ 0x41
 8003d10:	2120      	movs	r1, #32
 8003d12:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2240      	movs	r2, #64	@ 0x40
 8003d18:	2100      	movs	r1, #0
 8003d1a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003d1c:	183b      	adds	r3, r7, r0
 8003d1e:	2201      	movs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	2204      	movs	r2, #4
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b04      	cmp	r3, #4
 8003d2e:	d005      	beq.n	8003d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003d30:	2317      	movs	r3, #23
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d100      	bne.n	8003d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003d3a:	e776      	b.n	8003c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8003d3c:	2317      	movs	r3, #23
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	781b      	ldrb	r3, [r3, #0]
}
 8003d42:	0018      	movs	r0, r3
 8003d44:	46bd      	mov	sp, r7
 8003d46:	b006      	add	sp, #24
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			@ (mov r8, r8)
 8003d4c:	fe00e800 	.word	0xfe00e800

08003d50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08a      	sub	sp, #40	@ 0x28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5c:	2327      	movs	r3, #39	@ 0x27
 8003d5e:	18fb      	adds	r3, r7, r3
 8003d60:	2200      	movs	r2, #0
 8003d62:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2210      	movs	r2, #16
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <I2C_IsErrorOccurred+0x2e>
 8003d7c:	e079      	b.n	8003e72 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2210      	movs	r2, #16
 8003d84:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d86:	e057      	b.n	8003e38 <I2C_IsErrorOccurred+0xe8>
 8003d88:	2227      	movs	r2, #39	@ 0x27
 8003d8a:	18bb      	adds	r3, r7, r2
 8003d8c:	18ba      	adds	r2, r7, r2
 8003d8e:	7812      	ldrb	r2, [r2, #0]
 8003d90:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	3301      	adds	r3, #1
 8003d96:	d04f      	beq.n	8003e38 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d98:	f7fe f9e8 	bl	800216c <HAL_GetTick>
 8003d9c:	0002      	movs	r2, r0
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d302      	bcc.n	8003dae <I2C_IsErrorOccurred+0x5e>
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d144      	bne.n	8003e38 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	2380      	movs	r3, #128	@ 0x80
 8003db6:	01db      	lsls	r3, r3, #7
 8003db8:	4013      	ands	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003dbc:	2013      	movs	r0, #19
 8003dbe:	183b      	adds	r3, r7, r0
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	2142      	movs	r1, #66	@ 0x42
 8003dc4:	5c52      	ldrb	r2, [r2, r1]
 8003dc6:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	2380      	movs	r3, #128	@ 0x80
 8003dd0:	021b      	lsls	r3, r3, #8
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	2380      	movs	r3, #128	@ 0x80
 8003dd6:	021b      	lsls	r3, r3, #8
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d126      	bne.n	8003e2a <I2C_IsErrorOccurred+0xda>
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	2380      	movs	r3, #128	@ 0x80
 8003de0:	01db      	lsls	r3, r3, #7
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d021      	beq.n	8003e2a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003de6:	183b      	adds	r3, r7, r0
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d01d      	beq.n	8003e2a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2180      	movs	r1, #128	@ 0x80
 8003dfa:	01c9      	lsls	r1, r1, #7
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e00:	f7fe f9b4 	bl	800216c <HAL_GetTick>
 8003e04:	0003      	movs	r3, r0
 8003e06:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e08:	e00f      	b.n	8003e2a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e0a:	f7fe f9af 	bl	800216c <HAL_GetTick>
 8003e0e:	0002      	movs	r2, r0
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b19      	cmp	r3, #25
 8003e16:	d908      	bls.n	8003e2a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e20:	2327      	movs	r3, #39	@ 0x27
 8003e22:	18fb      	adds	r3, r7, r3
 8003e24:	2201      	movs	r2, #1
 8003e26:	701a      	strb	r2, [r3, #0]

              break;
 8003e28:	e006      	b.n	8003e38 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	2220      	movs	r2, #32
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b20      	cmp	r3, #32
 8003e36:	d1e8      	bne.n	8003e0a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	2220      	movs	r2, #32
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	d004      	beq.n	8003e50 <I2C_IsErrorOccurred+0x100>
 8003e46:	2327      	movs	r3, #39	@ 0x27
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d09b      	beq.n	8003d88 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e50:	2327      	movs	r3, #39	@ 0x27
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d103      	bne.n	8003e62 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e62:	6a3b      	ldr	r3, [r7, #32]
 8003e64:	2204      	movs	r2, #4
 8003e66:	4313      	orrs	r3, r2
 8003e68:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e6a:	2327      	movs	r3, #39	@ 0x27
 8003e6c:	18fb      	adds	r3, r7, r3
 8003e6e:	2201      	movs	r2, #1
 8003e70:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	2380      	movs	r3, #128	@ 0x80
 8003e7e:	005b      	lsls	r3, r3, #1
 8003e80:	4013      	ands	r3, r2
 8003e82:	d00c      	beq.n	8003e9e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	2201      	movs	r2, #1
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2280      	movs	r2, #128	@ 0x80
 8003e92:	0052      	lsls	r2, r2, #1
 8003e94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e96:	2327      	movs	r3, #39	@ 0x27
 8003e98:	18fb      	adds	r3, r7, r3
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	2380      	movs	r3, #128	@ 0x80
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	d00c      	beq.n	8003ec2 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	2208      	movs	r2, #8
 8003eac:	4313      	orrs	r3, r2
 8003eae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2280      	movs	r2, #128	@ 0x80
 8003eb6:	00d2      	lsls	r2, r2, #3
 8003eb8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003eba:	2327      	movs	r3, #39	@ 0x27
 8003ebc:	18fb      	adds	r3, r7, r3
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ec2:	69ba      	ldr	r2, [r7, #24]
 8003ec4:	2380      	movs	r3, #128	@ 0x80
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4013      	ands	r3, r2
 8003eca:	d00c      	beq.n	8003ee6 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2280      	movs	r2, #128	@ 0x80
 8003eda:	0092      	lsls	r2, r2, #2
 8003edc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ede:	2327      	movs	r3, #39	@ 0x27
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003ee6:	2327      	movs	r3, #39	@ 0x27
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d01d      	beq.n	8003f2c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f7ff fd8a 	bl	8003a0c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	490e      	ldr	r1, [pc, #56]	@ (8003f3c <I2C_IsErrorOccurred+0x1ec>)
 8003f04:	400a      	ands	r2, r1
 8003f06:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f0c:	6a3b      	ldr	r3, [r7, #32]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2241      	movs	r2, #65	@ 0x41
 8003f18:	2120      	movs	r1, #32
 8003f1a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2242      	movs	r2, #66	@ 0x42
 8003f20:	2100      	movs	r1, #0
 8003f22:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2240      	movs	r2, #64	@ 0x40
 8003f28:	2100      	movs	r1, #0
 8003f2a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003f2c:	2327      	movs	r3, #39	@ 0x27
 8003f2e:	18fb      	adds	r3, r7, r3
 8003f30:	781b      	ldrb	r3, [r3, #0]
}
 8003f32:	0018      	movs	r0, r3
 8003f34:	46bd      	mov	sp, r7
 8003f36:	b00a      	add	sp, #40	@ 0x28
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	46c0      	nop			@ (mov r8, r8)
 8003f3c:	fe00e800 	.word	0xfe00e800

08003f40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f40:	b590      	push	{r4, r7, lr}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	0008      	movs	r0, r1
 8003f4a:	0011      	movs	r1, r2
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	240a      	movs	r4, #10
 8003f50:	193b      	adds	r3, r7, r4
 8003f52:	1c02      	adds	r2, r0, #0
 8003f54:	801a      	strh	r2, [r3, #0]
 8003f56:	2009      	movs	r0, #9
 8003f58:	183b      	adds	r3, r7, r0
 8003f5a:	1c0a      	adds	r2, r1, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f5e:	193b      	adds	r3, r7, r4
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	059b      	lsls	r3, r3, #22
 8003f64:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f66:	183b      	adds	r3, r7, r0
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	0419      	lsls	r1, r3, #16
 8003f6c:	23ff      	movs	r3, #255	@ 0xff
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f72:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	085b      	lsrs	r3, r3, #1
 8003f80:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f8a:	0d51      	lsrs	r1, r2, #21
 8003f8c:	2280      	movs	r2, #128	@ 0x80
 8003f8e:	00d2      	lsls	r2, r2, #3
 8003f90:	400a      	ands	r2, r1
 8003f92:	4907      	ldr	r1, [pc, #28]	@ (8003fb0 <I2C_TransferConfig+0x70>)
 8003f94:	430a      	orrs	r2, r1
 8003f96:	43d2      	mvns	r2, r2
 8003f98:	401a      	ands	r2, r3
 8003f9a:	0011      	movs	r1, r2
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fa6:	46c0      	nop			@ (mov r8, r8)
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	b007      	add	sp, #28
 8003fac:	bd90      	pop	{r4, r7, pc}
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	03ff63ff 	.word	0x03ff63ff

08003fb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2241      	movs	r2, #65	@ 0x41
 8003fc2:	5c9b      	ldrb	r3, [r3, r2]
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d138      	bne.n	800403c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2240      	movs	r2, #64	@ 0x40
 8003fce:	5c9b      	ldrb	r3, [r3, r2]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e032      	b.n	800403e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2240      	movs	r2, #64	@ 0x40
 8003fdc:	2101      	movs	r1, #1
 8003fde:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2241      	movs	r2, #65	@ 0x41
 8003fe4:	2124      	movs	r1, #36	@ 0x24
 8003fe6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	438a      	bics	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4911      	ldr	r1, [pc, #68]	@ (8004048 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004004:	400a      	ands	r2, r1
 8004006:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6819      	ldr	r1, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2101      	movs	r1, #1
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2241      	movs	r2, #65	@ 0x41
 800402c:	2120      	movs	r1, #32
 800402e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2240      	movs	r2, #64	@ 0x40
 8004034:	2100      	movs	r1, #0
 8004036:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	e000      	b.n	800403e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800403c:	2302      	movs	r3, #2
  }
}
 800403e:	0018      	movs	r0, r3
 8004040:	46bd      	mov	sp, r7
 8004042:	b002      	add	sp, #8
 8004044:	bd80      	pop	{r7, pc}
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	ffffefff 	.word	0xffffefff

0800404c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2241      	movs	r2, #65	@ 0x41
 800405a:	5c9b      	ldrb	r3, [r3, r2]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b20      	cmp	r3, #32
 8004060:	d139      	bne.n	80040d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2240      	movs	r2, #64	@ 0x40
 8004066:	5c9b      	ldrb	r3, [r3, r2]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800406c:	2302      	movs	r3, #2
 800406e:	e033      	b.n	80040d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2240      	movs	r2, #64	@ 0x40
 8004074:	2101      	movs	r1, #1
 8004076:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2241      	movs	r2, #65	@ 0x41
 800407c:	2124      	movs	r1, #36	@ 0x24
 800407e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2101      	movs	r1, #1
 800408c:	438a      	bics	r2, r1
 800408e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4a11      	ldr	r2, [pc, #68]	@ (80040e0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800409c:	4013      	ands	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	021b      	lsls	r3, r3, #8
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2101      	movs	r1, #1
 80040be:	430a      	orrs	r2, r1
 80040c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2241      	movs	r2, #65	@ 0x41
 80040c6:	2120      	movs	r1, #32
 80040c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2240      	movs	r2, #64	@ 0x40
 80040ce:	2100      	movs	r1, #0
 80040d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	e000      	b.n	80040d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040d6:	2302      	movs	r3, #2
  }
}
 80040d8:	0018      	movs	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	b004      	add	sp, #16
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	fffff0ff 	.word	0xfffff0ff

080040e4 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	000a      	movs	r2, r1
 80040ee:	1cfb      	adds	r3, r7, #3
 80040f0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80040f6:	4b25      	ldr	r3, [pc, #148]	@ (800418c <HAL_PWR_EnterSTOPMode+0xa8>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	2380      	movs	r3, #128	@ 0x80
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4013      	ands	r3, r2
 8004100:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8004102:	4b23      	ldr	r3, [pc, #140]	@ (8004190 <HAL_PWR_EnterSTOPMode+0xac>)
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	2201      	movs	r2, #1
 8004108:	4013      	ands	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d008      	beq.n	8004124 <HAL_PWR_EnterSTOPMode+0x40>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d005      	beq.n	8004124 <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004118:	4b1c      	ldr	r3, [pc, #112]	@ (800418c <HAL_PWR_EnterSTOPMode+0xa8>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4b1b      	ldr	r3, [pc, #108]	@ (800418c <HAL_PWR_EnterSTOPMode+0xa8>)
 800411e:	491d      	ldr	r1, [pc, #116]	@ (8004194 <HAL_PWR_EnterSTOPMode+0xb0>)
 8004120:	400a      	ands	r2, r1
 8004122:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 8004124:	4b19      	ldr	r3, [pc, #100]	@ (800418c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2203      	movs	r2, #3
 800412e:	4393      	bics	r3, r2
 8004130:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 800413a:	4b14      	ldr	r3, [pc, #80]	@ (800418c <HAL_PWR_EnterSTOPMode+0xa8>)
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004140:	4b15      	ldr	r3, [pc, #84]	@ (8004198 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004142:	691a      	ldr	r2, [r3, #16]
 8004144:	4b14      	ldr	r3, [pc, #80]	@ (8004198 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004146:	2104      	movs	r1, #4
 8004148:	430a      	orrs	r2, r1
 800414a:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 800414c:	1cfb      	adds	r3, r7, #3
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d101      	bne.n	8004158 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004154:	bf30      	wfi
 8004156:	e002      	b.n	800415e <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004158:	bf40      	sev
    __WFE();
 800415a:	bf20      	wfe
    __WFE();
 800415c:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800415e:	4b0e      	ldr	r3, [pc, #56]	@ (8004198 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	4b0d      	ldr	r3, [pc, #52]	@ (8004198 <HAL_PWR_EnterSTOPMode+0xb4>)
 8004164:	2104      	movs	r1, #4
 8004166:	438a      	bics	r2, r1
 8004168:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d009      	beq.n	8004184 <HAL_PWR_EnterSTOPMode+0xa0>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d006      	beq.n	8004184 <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8004176:	4b05      	ldr	r3, [pc, #20]	@ (800418c <HAL_PWR_EnterSTOPMode+0xa8>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4b04      	ldr	r3, [pc, #16]	@ (800418c <HAL_PWR_EnterSTOPMode+0xa8>)
 800417c:	2180      	movs	r1, #128	@ 0x80
 800417e:	0089      	lsls	r1, r1, #2
 8004180:	430a      	orrs	r2, r1
 8004182:	601a      	str	r2, [r3, #0]
  }
}
 8004184:	46c0      	nop			@ (mov r8, r8)
 8004186:	46bd      	mov	sp, r7
 8004188:	b006      	add	sp, #24
 800418a:	bd80      	pop	{r7, pc}
 800418c:	40007000 	.word	0x40007000
 8004190:	40010000 	.word	0x40010000
 8004194:	fffffdff 	.word	0xfffffdff
 8004198:	e000ed00 	.word	0xe000ed00

0800419c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800419c:	b5b0      	push	{r4, r5, r7, lr}
 800419e:	b08a      	sub	sp, #40	@ 0x28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d102      	bne.n	80041b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	f000 fbbf 	bl	800492e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b0:	4bc9      	ldr	r3, [pc, #804]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	220c      	movs	r2, #12
 80041b6:	4013      	ands	r3, r2
 80041b8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041ba:	4bc7      	ldr	r3, [pc, #796]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	2380      	movs	r3, #128	@ 0x80
 80041c0:	025b      	lsls	r3, r3, #9
 80041c2:	4013      	ands	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2201      	movs	r2, #1
 80041cc:	4013      	ands	r3, r2
 80041ce:	d100      	bne.n	80041d2 <HAL_RCC_OscConfig+0x36>
 80041d0:	e07e      	b.n	80042d0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d007      	beq.n	80041e8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	2b0c      	cmp	r3, #12
 80041dc:	d112      	bne.n	8004204 <HAL_RCC_OscConfig+0x68>
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	2380      	movs	r3, #128	@ 0x80
 80041e2:	025b      	lsls	r3, r3, #9
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d10d      	bne.n	8004204 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e8:	4bbb      	ldr	r3, [pc, #748]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	2380      	movs	r3, #128	@ 0x80
 80041ee:	029b      	lsls	r3, r3, #10
 80041f0:	4013      	ands	r3, r2
 80041f2:	d100      	bne.n	80041f6 <HAL_RCC_OscConfig+0x5a>
 80041f4:	e06b      	b.n	80042ce <HAL_RCC_OscConfig+0x132>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d167      	bne.n	80042ce <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	f000 fb95 	bl	800492e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	2380      	movs	r3, #128	@ 0x80
 800420a:	025b      	lsls	r3, r3, #9
 800420c:	429a      	cmp	r2, r3
 800420e:	d107      	bne.n	8004220 <HAL_RCC_OscConfig+0x84>
 8004210:	4bb1      	ldr	r3, [pc, #708]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	4bb0      	ldr	r3, [pc, #704]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004216:	2180      	movs	r1, #128	@ 0x80
 8004218:	0249      	lsls	r1, r1, #9
 800421a:	430a      	orrs	r2, r1
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e027      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685a      	ldr	r2, [r3, #4]
 8004224:	23a0      	movs	r3, #160	@ 0xa0
 8004226:	02db      	lsls	r3, r3, #11
 8004228:	429a      	cmp	r2, r3
 800422a:	d10e      	bne.n	800424a <HAL_RCC_OscConfig+0xae>
 800422c:	4baa      	ldr	r3, [pc, #680]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4ba9      	ldr	r3, [pc, #676]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004232:	2180      	movs	r1, #128	@ 0x80
 8004234:	02c9      	lsls	r1, r1, #11
 8004236:	430a      	orrs	r2, r1
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	4ba7      	ldr	r3, [pc, #668]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	4ba6      	ldr	r3, [pc, #664]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004240:	2180      	movs	r1, #128	@ 0x80
 8004242:	0249      	lsls	r1, r1, #9
 8004244:	430a      	orrs	r2, r1
 8004246:	601a      	str	r2, [r3, #0]
 8004248:	e012      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
 800424a:	4ba3      	ldr	r3, [pc, #652]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4ba2      	ldr	r3, [pc, #648]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004250:	49a2      	ldr	r1, [pc, #648]	@ (80044dc <HAL_RCC_OscConfig+0x340>)
 8004252:	400a      	ands	r2, r1
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	4ba0      	ldr	r3, [pc, #640]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	2380      	movs	r3, #128	@ 0x80
 800425c:	025b      	lsls	r3, r3, #9
 800425e:	4013      	ands	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4b9c      	ldr	r3, [pc, #624]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b9b      	ldr	r3, [pc, #620]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 800426a:	499d      	ldr	r1, [pc, #628]	@ (80044e0 <HAL_RCC_OscConfig+0x344>)
 800426c:	400a      	ands	r2, r1
 800426e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d015      	beq.n	80042a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fd ff78 	bl	800216c <HAL_GetTick>
 800427c:	0003      	movs	r3, r0
 800427e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004280:	e009      	b.n	8004296 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004282:	f7fd ff73 	bl	800216c <HAL_GetTick>
 8004286:	0002      	movs	r2, r0
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b64      	cmp	r3, #100	@ 0x64
 800428e:	d902      	bls.n	8004296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	f000 fb4c 	bl	800492e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004296:	4b90      	ldr	r3, [pc, #576]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	2380      	movs	r3, #128	@ 0x80
 800429c:	029b      	lsls	r3, r3, #10
 800429e:	4013      	ands	r3, r2
 80042a0:	d0ef      	beq.n	8004282 <HAL_RCC_OscConfig+0xe6>
 80042a2:	e015      	b.n	80042d0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a4:	f7fd ff62 	bl	800216c <HAL_GetTick>
 80042a8:	0003      	movs	r3, r0
 80042aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042ac:	e008      	b.n	80042c0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ae:	f7fd ff5d 	bl	800216c <HAL_GetTick>
 80042b2:	0002      	movs	r2, r0
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b64      	cmp	r3, #100	@ 0x64
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e336      	b.n	800492e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042c0:	4b85      	ldr	r3, [pc, #532]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	2380      	movs	r3, #128	@ 0x80
 80042c6:	029b      	lsls	r3, r3, #10
 80042c8:	4013      	ands	r3, r2
 80042ca:	d1f0      	bne.n	80042ae <HAL_RCC_OscConfig+0x112>
 80042cc:	e000      	b.n	80042d0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ce:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2202      	movs	r2, #2
 80042d6:	4013      	ands	r3, r2
 80042d8:	d100      	bne.n	80042dc <HAL_RCC_OscConfig+0x140>
 80042da:	e099      	b.n	8004410 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	2220      	movs	r2, #32
 80042e6:	4013      	ands	r3, r2
 80042e8:	d009      	beq.n	80042fe <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80042ea:	4b7b      	ldr	r3, [pc, #492]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4b7a      	ldr	r3, [pc, #488]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 80042f0:	2120      	movs	r1, #32
 80042f2:	430a      	orrs	r2, r1
 80042f4:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80042f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f8:	2220      	movs	r2, #32
 80042fa:	4393      	bics	r3, r2
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	2b04      	cmp	r3, #4
 8004302:	d005      	beq.n	8004310 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	2b0c      	cmp	r3, #12
 8004308:	d13e      	bne.n	8004388 <HAL_RCC_OscConfig+0x1ec>
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d13b      	bne.n	8004388 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004310:	4b71      	ldr	r3, [pc, #452]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2204      	movs	r2, #4
 8004316:	4013      	ands	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_RCC_OscConfig+0x188>
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e304      	b.n	800492e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004324:	4b6c      	ldr	r3, [pc, #432]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4a6e      	ldr	r2, [pc, #440]	@ (80044e4 <HAL_RCC_OscConfig+0x348>)
 800432a:	4013      	ands	r3, r2
 800432c:	0019      	movs	r1, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	021a      	lsls	r2, r3, #8
 8004334:	4b68      	ldr	r3, [pc, #416]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004336:	430a      	orrs	r2, r1
 8004338:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800433a:	4b67      	ldr	r3, [pc, #412]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2209      	movs	r2, #9
 8004340:	4393      	bics	r3, r2
 8004342:	0019      	movs	r1, r3
 8004344:	4b64      	ldr	r3, [pc, #400]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004348:	430a      	orrs	r2, r1
 800434a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800434c:	f000 fc42 	bl	8004bd4 <HAL_RCC_GetSysClockFreq>
 8004350:	0001      	movs	r1, r0
 8004352:	4b61      	ldr	r3, [pc, #388]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	091b      	lsrs	r3, r3, #4
 8004358:	220f      	movs	r2, #15
 800435a:	4013      	ands	r3, r2
 800435c:	4a62      	ldr	r2, [pc, #392]	@ (80044e8 <HAL_RCC_OscConfig+0x34c>)
 800435e:	5cd3      	ldrb	r3, [r2, r3]
 8004360:	000a      	movs	r2, r1
 8004362:	40da      	lsrs	r2, r3
 8004364:	4b61      	ldr	r3, [pc, #388]	@ (80044ec <HAL_RCC_OscConfig+0x350>)
 8004366:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004368:	4b61      	ldr	r3, [pc, #388]	@ (80044f0 <HAL_RCC_OscConfig+0x354>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2513      	movs	r5, #19
 800436e:	197c      	adds	r4, r7, r5
 8004370:	0018      	movs	r0, r3
 8004372:	f7fd feb5 	bl	80020e0 <HAL_InitTick>
 8004376:	0003      	movs	r3, r0
 8004378:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800437a:	197b      	adds	r3, r7, r5
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d046      	beq.n	8004410 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8004382:	197b      	adds	r3, r7, r5
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	e2d2      	b.n	800492e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	2b00      	cmp	r3, #0
 800438c:	d027      	beq.n	80043de <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800438e:	4b52      	ldr	r3, [pc, #328]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2209      	movs	r2, #9
 8004394:	4393      	bics	r3, r2
 8004396:	0019      	movs	r1, r3
 8004398:	4b4f      	ldr	r3, [pc, #316]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 800439a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439c:	430a      	orrs	r2, r1
 800439e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a0:	f7fd fee4 	bl	800216c <HAL_GetTick>
 80043a4:	0003      	movs	r3, r0
 80043a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043aa:	f7fd fedf 	bl	800216c <HAL_GetTick>
 80043ae:	0002      	movs	r2, r0
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e2b8      	b.n	800492e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043bc:	4b46      	ldr	r3, [pc, #280]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2204      	movs	r2, #4
 80043c2:	4013      	ands	r3, r2
 80043c4:	d0f1      	beq.n	80043aa <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c6:	4b44      	ldr	r3, [pc, #272]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4a46      	ldr	r2, [pc, #280]	@ (80044e4 <HAL_RCC_OscConfig+0x348>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	0019      	movs	r1, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	021a      	lsls	r2, r3, #8
 80043d6:	4b40      	ldr	r3, [pc, #256]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 80043d8:	430a      	orrs	r2, r1
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	e018      	b.n	8004410 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043de:	4b3e      	ldr	r3, [pc, #248]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	4b3d      	ldr	r3, [pc, #244]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 80043e4:	2101      	movs	r1, #1
 80043e6:	438a      	bics	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ea:	f7fd febf 	bl	800216c <HAL_GetTick>
 80043ee:	0003      	movs	r3, r0
 80043f0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f4:	f7fd feba 	bl	800216c <HAL_GetTick>
 80043f8:	0002      	movs	r2, r0
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e293      	b.n	800492e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004406:	4b34      	ldr	r3, [pc, #208]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2204      	movs	r2, #4
 800440c:	4013      	ands	r3, r2
 800440e:	d1f1      	bne.n	80043f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2210      	movs	r2, #16
 8004416:	4013      	ands	r3, r2
 8004418:	d100      	bne.n	800441c <HAL_RCC_OscConfig+0x280>
 800441a:	e0a2      	b.n	8004562 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800441c:	69fb      	ldr	r3, [r7, #28]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d140      	bne.n	80044a4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004422:	4b2d      	ldr	r3, [pc, #180]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	2380      	movs	r3, #128	@ 0x80
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4013      	ands	r3, r2
 800442c:	d005      	beq.n	800443a <HAL_RCC_OscConfig+0x29e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e279      	b.n	800492e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800443a:	4b27      	ldr	r3, [pc, #156]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	4a2d      	ldr	r2, [pc, #180]	@ (80044f4 <HAL_RCC_OscConfig+0x358>)
 8004440:	4013      	ands	r3, r2
 8004442:	0019      	movs	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004448:	4b23      	ldr	r3, [pc, #140]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 800444a:	430a      	orrs	r2, r1
 800444c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800444e:	4b22      	ldr	r3, [pc, #136]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	0a19      	lsrs	r1, r3, #8
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	061a      	lsls	r2, r3, #24
 800445c:	4b1e      	ldr	r3, [pc, #120]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 800445e:	430a      	orrs	r2, r1
 8004460:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004466:	0b5b      	lsrs	r3, r3, #13
 8004468:	3301      	adds	r3, #1
 800446a:	2280      	movs	r2, #128	@ 0x80
 800446c:	0212      	lsls	r2, r2, #8
 800446e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004470:	4b19      	ldr	r3, [pc, #100]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	091b      	lsrs	r3, r3, #4
 8004476:	210f      	movs	r1, #15
 8004478:	400b      	ands	r3, r1
 800447a:	491b      	ldr	r1, [pc, #108]	@ (80044e8 <HAL_RCC_OscConfig+0x34c>)
 800447c:	5ccb      	ldrb	r3, [r1, r3]
 800447e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004480:	4b1a      	ldr	r3, [pc, #104]	@ (80044ec <HAL_RCC_OscConfig+0x350>)
 8004482:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8004484:	4b1a      	ldr	r3, [pc, #104]	@ (80044f0 <HAL_RCC_OscConfig+0x354>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2513      	movs	r5, #19
 800448a:	197c      	adds	r4, r7, r5
 800448c:	0018      	movs	r0, r3
 800448e:	f7fd fe27 	bl	80020e0 <HAL_InitTick>
 8004492:	0003      	movs	r3, r0
 8004494:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8004496:	197b      	adds	r3, r7, r5
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d061      	beq.n	8004562 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800449e:	197b      	adds	r3, r7, r5
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	e244      	b.n	800492e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d040      	beq.n	800452e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80044ac:	4b0a      	ldr	r3, [pc, #40]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	4b09      	ldr	r3, [pc, #36]	@ (80044d8 <HAL_RCC_OscConfig+0x33c>)
 80044b2:	2180      	movs	r1, #128	@ 0x80
 80044b4:	0049      	lsls	r1, r1, #1
 80044b6:	430a      	orrs	r2, r1
 80044b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ba:	f7fd fe57 	bl	800216c <HAL_GetTick>
 80044be:	0003      	movs	r3, r0
 80044c0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044c2:	e019      	b.n	80044f8 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044c4:	f7fd fe52 	bl	800216c <HAL_GetTick>
 80044c8:	0002      	movs	r2, r0
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d912      	bls.n	80044f8 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e22b      	b.n	800492e <HAL_RCC_OscConfig+0x792>
 80044d6:	46c0      	nop			@ (mov r8, r8)
 80044d8:	40021000 	.word	0x40021000
 80044dc:	fffeffff 	.word	0xfffeffff
 80044e0:	fffbffff 	.word	0xfffbffff
 80044e4:	ffffe0ff 	.word	0xffffe0ff
 80044e8:	08007694 	.word	0x08007694
 80044ec:	20000000 	.word	0x20000000
 80044f0:	20000004 	.word	0x20000004
 80044f4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044f8:	4bca      	ldr	r3, [pc, #808]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	2380      	movs	r3, #128	@ 0x80
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4013      	ands	r3, r2
 8004502:	d0df      	beq.n	80044c4 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004504:	4bc7      	ldr	r3, [pc, #796]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4ac7      	ldr	r2, [pc, #796]	@ (8004828 <HAL_RCC_OscConfig+0x68c>)
 800450a:	4013      	ands	r3, r2
 800450c:	0019      	movs	r1, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004512:	4bc4      	ldr	r3, [pc, #784]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004514:	430a      	orrs	r2, r1
 8004516:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004518:	4bc2      	ldr	r3, [pc, #776]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	021b      	lsls	r3, r3, #8
 800451e:	0a19      	lsrs	r1, r3, #8
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a1b      	ldr	r3, [r3, #32]
 8004524:	061a      	lsls	r2, r3, #24
 8004526:	4bbf      	ldr	r3, [pc, #764]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004528:	430a      	orrs	r2, r1
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	e019      	b.n	8004562 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800452e:	4bbd      	ldr	r3, [pc, #756]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4bbc      	ldr	r3, [pc, #752]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004534:	49bd      	ldr	r1, [pc, #756]	@ (800482c <HAL_RCC_OscConfig+0x690>)
 8004536:	400a      	ands	r2, r1
 8004538:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453a:	f7fd fe17 	bl	800216c <HAL_GetTick>
 800453e:	0003      	movs	r3, r0
 8004540:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004544:	f7fd fe12 	bl	800216c <HAL_GetTick>
 8004548:	0002      	movs	r2, r0
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e1eb      	b.n	800492e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004556:	4bb3      	ldr	r3, [pc, #716]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	2380      	movs	r3, #128	@ 0x80
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4013      	ands	r3, r2
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2208      	movs	r2, #8
 8004568:	4013      	ands	r3, r2
 800456a:	d036      	beq.n	80045da <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d019      	beq.n	80045a8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004574:	4bab      	ldr	r3, [pc, #684]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004576:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004578:	4baa      	ldr	r3, [pc, #680]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 800457a:	2101      	movs	r1, #1
 800457c:	430a      	orrs	r2, r1
 800457e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004580:	f7fd fdf4 	bl	800216c <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800458a:	f7fd fdef 	bl	800216c <HAL_GetTick>
 800458e:	0002      	movs	r2, r0
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e1c8      	b.n	800492e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800459c:	4ba1      	ldr	r3, [pc, #644]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 800459e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045a0:	2202      	movs	r2, #2
 80045a2:	4013      	ands	r3, r2
 80045a4:	d0f1      	beq.n	800458a <HAL_RCC_OscConfig+0x3ee>
 80045a6:	e018      	b.n	80045da <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045a8:	4b9e      	ldr	r3, [pc, #632]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80045aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045ac:	4b9d      	ldr	r3, [pc, #628]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80045ae:	2101      	movs	r1, #1
 80045b0:	438a      	bics	r2, r1
 80045b2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b4:	f7fd fdda 	bl	800216c <HAL_GetTick>
 80045b8:	0003      	movs	r3, r0
 80045ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045be:	f7fd fdd5 	bl	800216c <HAL_GetTick>
 80045c2:	0002      	movs	r2, r0
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e1ae      	b.n	800492e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045d0:	4b94      	ldr	r3, [pc, #592]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80045d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045d4:	2202      	movs	r2, #2
 80045d6:	4013      	ands	r3, r2
 80045d8:	d1f1      	bne.n	80045be <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2204      	movs	r2, #4
 80045e0:	4013      	ands	r3, r2
 80045e2:	d100      	bne.n	80045e6 <HAL_RCC_OscConfig+0x44a>
 80045e4:	e0ae      	b.n	8004744 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045e6:	2023      	movs	r0, #35	@ 0x23
 80045e8:	183b      	adds	r3, r7, r0
 80045ea:	2200      	movs	r2, #0
 80045ec:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045ee:	4b8d      	ldr	r3, [pc, #564]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80045f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045f2:	2380      	movs	r3, #128	@ 0x80
 80045f4:	055b      	lsls	r3, r3, #21
 80045f6:	4013      	ands	r3, r2
 80045f8:	d109      	bne.n	800460e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045fa:	4b8a      	ldr	r3, [pc, #552]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80045fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045fe:	4b89      	ldr	r3, [pc, #548]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004600:	2180      	movs	r1, #128	@ 0x80
 8004602:	0549      	lsls	r1, r1, #21
 8004604:	430a      	orrs	r2, r1
 8004606:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004608:	183b      	adds	r3, r7, r0
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460e:	4b88      	ldr	r3, [pc, #544]	@ (8004830 <HAL_RCC_OscConfig+0x694>)
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	2380      	movs	r3, #128	@ 0x80
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	4013      	ands	r3, r2
 8004618:	d11a      	bne.n	8004650 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800461a:	4b85      	ldr	r3, [pc, #532]	@ (8004830 <HAL_RCC_OscConfig+0x694>)
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4b84      	ldr	r3, [pc, #528]	@ (8004830 <HAL_RCC_OscConfig+0x694>)
 8004620:	2180      	movs	r1, #128	@ 0x80
 8004622:	0049      	lsls	r1, r1, #1
 8004624:	430a      	orrs	r2, r1
 8004626:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004628:	f7fd fda0 	bl	800216c <HAL_GetTick>
 800462c:	0003      	movs	r3, r0
 800462e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004632:	f7fd fd9b 	bl	800216c <HAL_GetTick>
 8004636:	0002      	movs	r2, r0
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b64      	cmp	r3, #100	@ 0x64
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e174      	b.n	800492e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004644:	4b7a      	ldr	r3, [pc, #488]	@ (8004830 <HAL_RCC_OscConfig+0x694>)
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	2380      	movs	r3, #128	@ 0x80
 800464a:	005b      	lsls	r3, r3, #1
 800464c:	4013      	ands	r3, r2
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	2380      	movs	r3, #128	@ 0x80
 8004656:	005b      	lsls	r3, r3, #1
 8004658:	429a      	cmp	r2, r3
 800465a:	d107      	bne.n	800466c <HAL_RCC_OscConfig+0x4d0>
 800465c:	4b71      	ldr	r3, [pc, #452]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 800465e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004660:	4b70      	ldr	r3, [pc, #448]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004662:	2180      	movs	r1, #128	@ 0x80
 8004664:	0049      	lsls	r1, r1, #1
 8004666:	430a      	orrs	r2, r1
 8004668:	651a      	str	r2, [r3, #80]	@ 0x50
 800466a:	e031      	b.n	80046d0 <HAL_RCC_OscConfig+0x534>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10c      	bne.n	800468e <HAL_RCC_OscConfig+0x4f2>
 8004674:	4b6b      	ldr	r3, [pc, #428]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004676:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004678:	4b6a      	ldr	r3, [pc, #424]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 800467a:	496c      	ldr	r1, [pc, #432]	@ (800482c <HAL_RCC_OscConfig+0x690>)
 800467c:	400a      	ands	r2, r1
 800467e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004680:	4b68      	ldr	r3, [pc, #416]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004682:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004684:	4b67      	ldr	r3, [pc, #412]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004686:	496b      	ldr	r1, [pc, #428]	@ (8004834 <HAL_RCC_OscConfig+0x698>)
 8004688:	400a      	ands	r2, r1
 800468a:	651a      	str	r2, [r3, #80]	@ 0x50
 800468c:	e020      	b.n	80046d0 <HAL_RCC_OscConfig+0x534>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689a      	ldr	r2, [r3, #8]
 8004692:	23a0      	movs	r3, #160	@ 0xa0
 8004694:	00db      	lsls	r3, r3, #3
 8004696:	429a      	cmp	r2, r3
 8004698:	d10e      	bne.n	80046b8 <HAL_RCC_OscConfig+0x51c>
 800469a:	4b62      	ldr	r3, [pc, #392]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 800469c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800469e:	4b61      	ldr	r3, [pc, #388]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80046a0:	2180      	movs	r1, #128	@ 0x80
 80046a2:	00c9      	lsls	r1, r1, #3
 80046a4:	430a      	orrs	r2, r1
 80046a6:	651a      	str	r2, [r3, #80]	@ 0x50
 80046a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80046aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046ac:	4b5d      	ldr	r3, [pc, #372]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80046ae:	2180      	movs	r1, #128	@ 0x80
 80046b0:	0049      	lsls	r1, r1, #1
 80046b2:	430a      	orrs	r2, r1
 80046b4:	651a      	str	r2, [r3, #80]	@ 0x50
 80046b6:	e00b      	b.n	80046d0 <HAL_RCC_OscConfig+0x534>
 80046b8:	4b5a      	ldr	r3, [pc, #360]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80046ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046bc:	4b59      	ldr	r3, [pc, #356]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80046be:	495b      	ldr	r1, [pc, #364]	@ (800482c <HAL_RCC_OscConfig+0x690>)
 80046c0:	400a      	ands	r2, r1
 80046c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80046c4:	4b57      	ldr	r3, [pc, #348]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80046c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046c8:	4b56      	ldr	r3, [pc, #344]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80046ca:	495a      	ldr	r1, [pc, #360]	@ (8004834 <HAL_RCC_OscConfig+0x698>)
 80046cc:	400a      	ands	r2, r1
 80046ce:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d015      	beq.n	8004704 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046d8:	f7fd fd48 	bl	800216c <HAL_GetTick>
 80046dc:	0003      	movs	r3, r0
 80046de:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046e0:	e009      	b.n	80046f6 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fd fd43 	bl	800216c <HAL_GetTick>
 80046e6:	0002      	movs	r2, r0
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	4a52      	ldr	r2, [pc, #328]	@ (8004838 <HAL_RCC_OscConfig+0x69c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e11b      	b.n	800492e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046f6:	4b4b      	ldr	r3, [pc, #300]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80046f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80046fa:	2380      	movs	r3, #128	@ 0x80
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4013      	ands	r3, r2
 8004700:	d0ef      	beq.n	80046e2 <HAL_RCC_OscConfig+0x546>
 8004702:	e014      	b.n	800472e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004704:	f7fd fd32 	bl	800216c <HAL_GetTick>
 8004708:	0003      	movs	r3, r0
 800470a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800470c:	e009      	b.n	8004722 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800470e:	f7fd fd2d 	bl	800216c <HAL_GetTick>
 8004712:	0002      	movs	r2, r0
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	4a47      	ldr	r2, [pc, #284]	@ (8004838 <HAL_RCC_OscConfig+0x69c>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e105      	b.n	800492e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004722:	4b40      	ldr	r3, [pc, #256]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004724:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004726:	2380      	movs	r3, #128	@ 0x80
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4013      	ands	r3, r2
 800472c:	d1ef      	bne.n	800470e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800472e:	2323      	movs	r3, #35	@ 0x23
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d105      	bne.n	8004744 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004738:	4b3a      	ldr	r3, [pc, #232]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 800473a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800473c:	4b39      	ldr	r3, [pc, #228]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 800473e:	493f      	ldr	r1, [pc, #252]	@ (800483c <HAL_RCC_OscConfig+0x6a0>)
 8004740:	400a      	ands	r2, r1
 8004742:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2220      	movs	r2, #32
 800474a:	4013      	ands	r3, r2
 800474c:	d049      	beq.n	80047e2 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d026      	beq.n	80047a4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004756:	4b33      	ldr	r3, [pc, #204]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004758:	689a      	ldr	r2, [r3, #8]
 800475a:	4b32      	ldr	r3, [pc, #200]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 800475c:	2101      	movs	r1, #1
 800475e:	430a      	orrs	r2, r1
 8004760:	609a      	str	r2, [r3, #8]
 8004762:	4b30      	ldr	r3, [pc, #192]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004764:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004766:	4b2f      	ldr	r3, [pc, #188]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004768:	2101      	movs	r1, #1
 800476a:	430a      	orrs	r2, r1
 800476c:	635a      	str	r2, [r3, #52]	@ 0x34
 800476e:	4b34      	ldr	r3, [pc, #208]	@ (8004840 <HAL_RCC_OscConfig+0x6a4>)
 8004770:	6a1a      	ldr	r2, [r3, #32]
 8004772:	4b33      	ldr	r3, [pc, #204]	@ (8004840 <HAL_RCC_OscConfig+0x6a4>)
 8004774:	2180      	movs	r1, #128	@ 0x80
 8004776:	0189      	lsls	r1, r1, #6
 8004778:	430a      	orrs	r2, r1
 800477a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477c:	f7fd fcf6 	bl	800216c <HAL_GetTick>
 8004780:	0003      	movs	r3, r0
 8004782:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004786:	f7fd fcf1 	bl	800216c <HAL_GetTick>
 800478a:	0002      	movs	r2, r0
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e0ca      	b.n	800492e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004798:	4b22      	ldr	r3, [pc, #136]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2202      	movs	r2, #2
 800479e:	4013      	ands	r3, r2
 80047a0:	d0f1      	beq.n	8004786 <HAL_RCC_OscConfig+0x5ea>
 80047a2:	e01e      	b.n	80047e2 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80047a4:	4b1f      	ldr	r3, [pc, #124]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80047aa:	2101      	movs	r1, #1
 80047ac:	438a      	bics	r2, r1
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	4b23      	ldr	r3, [pc, #140]	@ (8004840 <HAL_RCC_OscConfig+0x6a4>)
 80047b2:	6a1a      	ldr	r2, [r3, #32]
 80047b4:	4b22      	ldr	r3, [pc, #136]	@ (8004840 <HAL_RCC_OscConfig+0x6a4>)
 80047b6:	4923      	ldr	r1, [pc, #140]	@ (8004844 <HAL_RCC_OscConfig+0x6a8>)
 80047b8:	400a      	ands	r2, r1
 80047ba:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047bc:	f7fd fcd6 	bl	800216c <HAL_GetTick>
 80047c0:	0003      	movs	r3, r0
 80047c2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047c6:	f7fd fcd1 	bl	800216c <HAL_GetTick>
 80047ca:	0002      	movs	r2, r0
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e0aa      	b.n	800492e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80047d8:	4b12      	ldr	r3, [pc, #72]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2202      	movs	r2, #2
 80047de:	4013      	ands	r3, r2
 80047e0:	d1f1      	bne.n	80047c6 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d100      	bne.n	80047ec <HAL_RCC_OscConfig+0x650>
 80047ea:	e09f      	b.n	800492c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	2b0c      	cmp	r3, #12
 80047f0:	d100      	bne.n	80047f4 <HAL_RCC_OscConfig+0x658>
 80047f2:	e078      	b.n	80048e6 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d159      	bne.n	80048b0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fc:	4b09      	ldr	r3, [pc, #36]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	4b08      	ldr	r3, [pc, #32]	@ (8004824 <HAL_RCC_OscConfig+0x688>)
 8004802:	4911      	ldr	r1, [pc, #68]	@ (8004848 <HAL_RCC_OscConfig+0x6ac>)
 8004804:	400a      	ands	r2, r1
 8004806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fd fcb0 	bl	800216c <HAL_GetTick>
 800480c:	0003      	movs	r3, r0
 800480e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004810:	e01c      	b.n	800484c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004812:	f7fd fcab 	bl	800216c <HAL_GetTick>
 8004816:	0002      	movs	r2, r0
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d915      	bls.n	800484c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e084      	b.n	800492e <HAL_RCC_OscConfig+0x792>
 8004824:	40021000 	.word	0x40021000
 8004828:	ffff1fff 	.word	0xffff1fff
 800482c:	fffffeff 	.word	0xfffffeff
 8004830:	40007000 	.word	0x40007000
 8004834:	fffffbff 	.word	0xfffffbff
 8004838:	00001388 	.word	0x00001388
 800483c:	efffffff 	.word	0xefffffff
 8004840:	40010000 	.word	0x40010000
 8004844:	ffffdfff 	.word	0xffffdfff
 8004848:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800484c:	4b3a      	ldr	r3, [pc, #232]	@ (8004938 <HAL_RCC_OscConfig+0x79c>)
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	2380      	movs	r3, #128	@ 0x80
 8004852:	049b      	lsls	r3, r3, #18
 8004854:	4013      	ands	r3, r2
 8004856:	d1dc      	bne.n	8004812 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004858:	4b37      	ldr	r3, [pc, #220]	@ (8004938 <HAL_RCC_OscConfig+0x79c>)
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	4a37      	ldr	r2, [pc, #220]	@ (800493c <HAL_RCC_OscConfig+0x7a0>)
 800485e:	4013      	ands	r3, r2
 8004860:	0019      	movs	r1, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004870:	431a      	orrs	r2, r3
 8004872:	4b31      	ldr	r3, [pc, #196]	@ (8004938 <HAL_RCC_OscConfig+0x79c>)
 8004874:	430a      	orrs	r2, r1
 8004876:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004878:	4b2f      	ldr	r3, [pc, #188]	@ (8004938 <HAL_RCC_OscConfig+0x79c>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b2e      	ldr	r3, [pc, #184]	@ (8004938 <HAL_RCC_OscConfig+0x79c>)
 800487e:	2180      	movs	r1, #128	@ 0x80
 8004880:	0449      	lsls	r1, r1, #17
 8004882:	430a      	orrs	r2, r1
 8004884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004886:	f7fd fc71 	bl	800216c <HAL_GetTick>
 800488a:	0003      	movs	r3, r0
 800488c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004890:	f7fd fc6c 	bl	800216c <HAL_GetTick>
 8004894:	0002      	movs	r2, r0
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e045      	b.n	800492e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80048a2:	4b25      	ldr	r3, [pc, #148]	@ (8004938 <HAL_RCC_OscConfig+0x79c>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	2380      	movs	r3, #128	@ 0x80
 80048a8:	049b      	lsls	r3, r3, #18
 80048aa:	4013      	ands	r3, r2
 80048ac:	d0f0      	beq.n	8004890 <HAL_RCC_OscConfig+0x6f4>
 80048ae:	e03d      	b.n	800492c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b0:	4b21      	ldr	r3, [pc, #132]	@ (8004938 <HAL_RCC_OscConfig+0x79c>)
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	4b20      	ldr	r3, [pc, #128]	@ (8004938 <HAL_RCC_OscConfig+0x79c>)
 80048b6:	4922      	ldr	r1, [pc, #136]	@ (8004940 <HAL_RCC_OscConfig+0x7a4>)
 80048b8:	400a      	ands	r2, r1
 80048ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7fd fc56 	bl	800216c <HAL_GetTick>
 80048c0:	0003      	movs	r3, r0
 80048c2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80048c4:	e008      	b.n	80048d8 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c6:	f7fd fc51 	bl	800216c <HAL_GetTick>
 80048ca:	0002      	movs	r2, r0
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d901      	bls.n	80048d8 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e02a      	b.n	800492e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80048d8:	4b17      	ldr	r3, [pc, #92]	@ (8004938 <HAL_RCC_OscConfig+0x79c>)
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	2380      	movs	r3, #128	@ 0x80
 80048de:	049b      	lsls	r3, r3, #18
 80048e0:	4013      	ands	r3, r2
 80048e2:	d1f0      	bne.n	80048c6 <HAL_RCC_OscConfig+0x72a>
 80048e4:	e022      	b.n	800492c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e01d      	b.n	800492e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048f2:	4b11      	ldr	r3, [pc, #68]	@ (8004938 <HAL_RCC_OscConfig+0x79c>)
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	2380      	movs	r3, #128	@ 0x80
 80048fc:	025b      	lsls	r3, r3, #9
 80048fe:	401a      	ands	r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004904:	429a      	cmp	r2, r3
 8004906:	d10f      	bne.n	8004928 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	23f0      	movs	r3, #240	@ 0xf0
 800490c:	039b      	lsls	r3, r3, #14
 800490e:	401a      	ands	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d107      	bne.n	8004928 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	23c0      	movs	r3, #192	@ 0xc0
 800491c:	041b      	lsls	r3, r3, #16
 800491e:	401a      	ands	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	0018      	movs	r0, r3
 8004930:	46bd      	mov	sp, r7
 8004932:	b00a      	add	sp, #40	@ 0x28
 8004934:	bdb0      	pop	{r4, r5, r7, pc}
 8004936:	46c0      	nop			@ (mov r8, r8)
 8004938:	40021000 	.word	0x40021000
 800493c:	ff02ffff 	.word	0xff02ffff
 8004940:	feffffff 	.word	0xfeffffff

08004944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004944:	b5b0      	push	{r4, r5, r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e128      	b.n	8004baa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004958:	4b96      	ldr	r3, [pc, #600]	@ (8004bb4 <HAL_RCC_ClockConfig+0x270>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2201      	movs	r2, #1
 800495e:	4013      	ands	r3, r2
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d91e      	bls.n	80049a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004966:	4b93      	ldr	r3, [pc, #588]	@ (8004bb4 <HAL_RCC_ClockConfig+0x270>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2201      	movs	r2, #1
 800496c:	4393      	bics	r3, r2
 800496e:	0019      	movs	r1, r3
 8004970:	4b90      	ldr	r3, [pc, #576]	@ (8004bb4 <HAL_RCC_ClockConfig+0x270>)
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004978:	f7fd fbf8 	bl	800216c <HAL_GetTick>
 800497c:	0003      	movs	r3, r0
 800497e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004980:	e009      	b.n	8004996 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004982:	f7fd fbf3 	bl	800216c <HAL_GetTick>
 8004986:	0002      	movs	r2, r0
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	4a8a      	ldr	r2, [pc, #552]	@ (8004bb8 <HAL_RCC_ClockConfig+0x274>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e109      	b.n	8004baa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004996:	4b87      	ldr	r3, [pc, #540]	@ (8004bb4 <HAL_RCC_ClockConfig+0x270>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2201      	movs	r2, #1
 800499c:	4013      	ands	r3, r2
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d1ee      	bne.n	8004982 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2202      	movs	r2, #2
 80049aa:	4013      	ands	r3, r2
 80049ac:	d009      	beq.n	80049c2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ae:	4b83      	ldr	r3, [pc, #524]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	22f0      	movs	r2, #240	@ 0xf0
 80049b4:	4393      	bics	r3, r2
 80049b6:	0019      	movs	r1, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	689a      	ldr	r2, [r3, #8]
 80049bc:	4b7f      	ldr	r3, [pc, #508]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 80049be:	430a      	orrs	r2, r1
 80049c0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2201      	movs	r2, #1
 80049c8:	4013      	ands	r3, r2
 80049ca:	d100      	bne.n	80049ce <HAL_RCC_ClockConfig+0x8a>
 80049cc:	e089      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d107      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049d6:	4b79      	ldr	r3, [pc, #484]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	2380      	movs	r3, #128	@ 0x80
 80049dc:	029b      	lsls	r3, r3, #10
 80049de:	4013      	ands	r3, r2
 80049e0:	d120      	bne.n	8004a24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e0e1      	b.n	8004baa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b03      	cmp	r3, #3
 80049ec:	d107      	bne.n	80049fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049ee:	4b73      	ldr	r3, [pc, #460]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	2380      	movs	r3, #128	@ 0x80
 80049f4:	049b      	lsls	r3, r3, #18
 80049f6:	4013      	ands	r3, r2
 80049f8:	d114      	bne.n	8004a24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e0d5      	b.n	8004baa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d106      	bne.n	8004a14 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a06:	4b6d      	ldr	r3, [pc, #436]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2204      	movs	r2, #4
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	d109      	bne.n	8004a24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0ca      	b.n	8004baa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004a14:	4b69      	ldr	r3, [pc, #420]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	2380      	movs	r3, #128	@ 0x80
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	d101      	bne.n	8004a24 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0c2      	b.n	8004baa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a24:	4b65      	ldr	r3, [pc, #404]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	2203      	movs	r2, #3
 8004a2a:	4393      	bics	r3, r2
 8004a2c:	0019      	movs	r1, r3
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	4b62      	ldr	r3, [pc, #392]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 8004a34:	430a      	orrs	r2, r1
 8004a36:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a38:	f7fd fb98 	bl	800216c <HAL_GetTick>
 8004a3c:	0003      	movs	r3, r0
 8004a3e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d111      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a48:	e009      	b.n	8004a5e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a4a:	f7fd fb8f 	bl	800216c <HAL_GetTick>
 8004a4e:	0002      	movs	r2, r0
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	4a58      	ldr	r2, [pc, #352]	@ (8004bb8 <HAL_RCC_ClockConfig+0x274>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e0a5      	b.n	8004baa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a5e:	4b57      	ldr	r3, [pc, #348]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	220c      	movs	r2, #12
 8004a64:	4013      	ands	r3, r2
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d1ef      	bne.n	8004a4a <HAL_RCC_ClockConfig+0x106>
 8004a6a:	e03a      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	d111      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a74:	e009      	b.n	8004a8a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a76:	f7fd fb79 	bl	800216c <HAL_GetTick>
 8004a7a:	0002      	movs	r2, r0
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	4a4d      	ldr	r2, [pc, #308]	@ (8004bb8 <HAL_RCC_ClockConfig+0x274>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e08f      	b.n	8004baa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a8a:	4b4c      	ldr	r3, [pc, #304]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	220c      	movs	r2, #12
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b0c      	cmp	r3, #12
 8004a94:	d1ef      	bne.n	8004a76 <HAL_RCC_ClockConfig+0x132>
 8004a96:	e024      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aa0:	e009      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa2:	f7fd fb63 	bl	800216c <HAL_GetTick>
 8004aa6:	0002      	movs	r2, r0
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	4a42      	ldr	r2, [pc, #264]	@ (8004bb8 <HAL_RCC_ClockConfig+0x274>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e079      	b.n	8004baa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ab6:	4b41      	ldr	r3, [pc, #260]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	220c      	movs	r2, #12
 8004abc:	4013      	ands	r3, r2
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d1ef      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0x15e>
 8004ac2:	e00e      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ac4:	f7fd fb52 	bl	800216c <HAL_GetTick>
 8004ac8:	0002      	movs	r2, r0
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	4a3a      	ldr	r2, [pc, #232]	@ (8004bb8 <HAL_RCC_ClockConfig+0x274>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e068      	b.n	8004baa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004ad8:	4b38      	ldr	r3, [pc, #224]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	220c      	movs	r2, #12
 8004ade:	4013      	ands	r3, r2
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ae2:	4b34      	ldr	r3, [pc, #208]	@ (8004bb4 <HAL_RCC_ClockConfig+0x270>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	4013      	ands	r3, r2
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d21e      	bcs.n	8004b2e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af0:	4b30      	ldr	r3, [pc, #192]	@ (8004bb4 <HAL_RCC_ClockConfig+0x270>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2201      	movs	r2, #1
 8004af6:	4393      	bics	r3, r2
 8004af8:	0019      	movs	r1, r3
 8004afa:	4b2e      	ldr	r3, [pc, #184]	@ (8004bb4 <HAL_RCC_ClockConfig+0x270>)
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004b02:	f7fd fb33 	bl	800216c <HAL_GetTick>
 8004b06:	0003      	movs	r3, r0
 8004b08:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	e009      	b.n	8004b20 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b0c:	f7fd fb2e 	bl	800216c <HAL_GetTick>
 8004b10:	0002      	movs	r2, r0
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	4a28      	ldr	r2, [pc, #160]	@ (8004bb8 <HAL_RCC_ClockConfig+0x274>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e044      	b.n	8004baa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b20:	4b24      	ldr	r3, [pc, #144]	@ (8004bb4 <HAL_RCC_ClockConfig+0x270>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2201      	movs	r2, #1
 8004b26:	4013      	ands	r3, r2
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d1ee      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2204      	movs	r2, #4
 8004b34:	4013      	ands	r3, r2
 8004b36:	d009      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b38:	4b20      	ldr	r3, [pc, #128]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	4a20      	ldr	r2, [pc, #128]	@ (8004bc0 <HAL_RCC_ClockConfig+0x27c>)
 8004b3e:	4013      	ands	r3, r2
 8004b40:	0019      	movs	r1, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	4b1d      	ldr	r3, [pc, #116]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2208      	movs	r2, #8
 8004b52:	4013      	ands	r3, r2
 8004b54:	d00a      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b56:	4b19      	ldr	r3, [pc, #100]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8004bc4 <HAL_RCC_ClockConfig+0x280>)
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	0019      	movs	r1, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	00da      	lsls	r2, r3, #3
 8004b66:	4b15      	ldr	r3, [pc, #84]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 8004b68:	430a      	orrs	r2, r1
 8004b6a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b6c:	f000 f832 	bl	8004bd4 <HAL_RCC_GetSysClockFreq>
 8004b70:	0001      	movs	r1, r0
 8004b72:	4b12      	ldr	r3, [pc, #72]	@ (8004bbc <HAL_RCC_ClockConfig+0x278>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	091b      	lsrs	r3, r3, #4
 8004b78:	220f      	movs	r2, #15
 8004b7a:	4013      	ands	r3, r2
 8004b7c:	4a12      	ldr	r2, [pc, #72]	@ (8004bc8 <HAL_RCC_ClockConfig+0x284>)
 8004b7e:	5cd3      	ldrb	r3, [r2, r3]
 8004b80:	000a      	movs	r2, r1
 8004b82:	40da      	lsrs	r2, r3
 8004b84:	4b11      	ldr	r3, [pc, #68]	@ (8004bcc <HAL_RCC_ClockConfig+0x288>)
 8004b86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b88:	4b11      	ldr	r3, [pc, #68]	@ (8004bd0 <HAL_RCC_ClockConfig+0x28c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	250b      	movs	r5, #11
 8004b8e:	197c      	adds	r4, r7, r5
 8004b90:	0018      	movs	r0, r3
 8004b92:	f7fd faa5 	bl	80020e0 <HAL_InitTick>
 8004b96:	0003      	movs	r3, r0
 8004b98:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004b9a:	197b      	adds	r3, r7, r5
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d002      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004ba2:	197b      	adds	r3, r7, r5
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	e000      	b.n	8004baa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	0018      	movs	r0, r3
 8004bac:	46bd      	mov	sp, r7
 8004bae:	b004      	add	sp, #16
 8004bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8004bb2:	46c0      	nop			@ (mov r8, r8)
 8004bb4:	40022000 	.word	0x40022000
 8004bb8:	00001388 	.word	0x00001388
 8004bbc:	40021000 	.word	0x40021000
 8004bc0:	fffff8ff 	.word	0xfffff8ff
 8004bc4:	ffffc7ff 	.word	0xffffc7ff
 8004bc8:	08007694 	.word	0x08007694
 8004bcc:	20000000 	.word	0x20000000
 8004bd0:	20000004 	.word	0x20000004

08004bd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004bda:	4b3c      	ldr	r3, [pc, #240]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	220c      	movs	r2, #12
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b0c      	cmp	r3, #12
 8004be8:	d013      	beq.n	8004c12 <HAL_RCC_GetSysClockFreq+0x3e>
 8004bea:	d85c      	bhi.n	8004ca6 <HAL_RCC_GetSysClockFreq+0xd2>
 8004bec:	2b04      	cmp	r3, #4
 8004bee:	d002      	beq.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x22>
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d00b      	beq.n	8004c0c <HAL_RCC_GetSysClockFreq+0x38>
 8004bf4:	e057      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004bf6:	4b35      	ldr	r3, [pc, #212]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2210      	movs	r2, #16
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d002      	beq.n	8004c06 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004c00:	4b33      	ldr	r3, [pc, #204]	@ (8004cd0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004c02:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004c04:	e05d      	b.n	8004cc2 <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8004c06:	4b33      	ldr	r3, [pc, #204]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004c08:	613b      	str	r3, [r7, #16]
      break;
 8004c0a:	e05a      	b.n	8004cc2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c0c:	4b32      	ldr	r3, [pc, #200]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x104>)
 8004c0e:	613b      	str	r3, [r7, #16]
      break;
 8004c10:	e057      	b.n	8004cc2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	0c9b      	lsrs	r3, r3, #18
 8004c16:	220f      	movs	r2, #15
 8004c18:	4013      	ands	r3, r2
 8004c1a:	4a30      	ldr	r2, [pc, #192]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c1c:	5cd3      	ldrb	r3, [r2, r3]
 8004c1e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	0d9b      	lsrs	r3, r3, #22
 8004c24:	2203      	movs	r2, #3
 8004c26:	4013      	ands	r3, r2
 8004c28:	3301      	adds	r3, #1
 8004c2a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c2c:	4b27      	ldr	r3, [pc, #156]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c2e:	68da      	ldr	r2, [r3, #12]
 8004c30:	2380      	movs	r3, #128	@ 0x80
 8004c32:	025b      	lsls	r3, r3, #9
 8004c34:	4013      	ands	r3, r2
 8004c36:	d00f      	beq.n	8004c58 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	000a      	movs	r2, r1
 8004c3c:	0152      	lsls	r2, r2, #5
 8004c3e:	1a52      	subs	r2, r2, r1
 8004c40:	0193      	lsls	r3, r2, #6
 8004c42:	1a9b      	subs	r3, r3, r2
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	185b      	adds	r3, r3, r1
 8004c48:	025b      	lsls	r3, r3, #9
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f7fb fa6d 	bl	800012c <__udivsi3>
 8004c52:	0003      	movs	r3, r0
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	e023      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004c58:	4b1c      	ldr	r3, [pc, #112]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2210      	movs	r2, #16
 8004c5e:	4013      	ands	r3, r2
 8004c60:	d00f      	beq.n	8004c82 <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	000a      	movs	r2, r1
 8004c66:	0152      	lsls	r2, r2, #5
 8004c68:	1a52      	subs	r2, r2, r1
 8004c6a:	0193      	lsls	r3, r2, #6
 8004c6c:	1a9b      	subs	r3, r3, r2
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	185b      	adds	r3, r3, r1
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	6879      	ldr	r1, [r7, #4]
 8004c76:	0018      	movs	r0, r3
 8004c78:	f7fb fa58 	bl	800012c <__udivsi3>
 8004c7c:	0003      	movs	r3, r0
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	e00e      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	000a      	movs	r2, r1
 8004c86:	0152      	lsls	r2, r2, #5
 8004c88:	1a52      	subs	r2, r2, r1
 8004c8a:	0193      	lsls	r3, r2, #6
 8004c8c:	1a9b      	subs	r3, r3, r2
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	185b      	adds	r3, r3, r1
 8004c92:	029b      	lsls	r3, r3, #10
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	0018      	movs	r0, r3
 8004c98:	f7fb fa48 	bl	800012c <__udivsi3>
 8004c9c:	0003      	movs	r3, r0
 8004c9e:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	613b      	str	r3, [r7, #16]
      break;
 8004ca4:	e00d      	b.n	8004cc2 <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004ca6:	4b09      	ldr	r3, [pc, #36]	@ (8004ccc <HAL_RCC_GetSysClockFreq+0xf8>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	0b5b      	lsrs	r3, r3, #13
 8004cac:	2207      	movs	r2, #7
 8004cae:	4013      	ands	r3, r2
 8004cb0:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	2280      	movs	r2, #128	@ 0x80
 8004cb8:	0212      	lsls	r2, r2, #8
 8004cba:	409a      	lsls	r2, r3
 8004cbc:	0013      	movs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
      break;
 8004cc0:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004cc2:	693b      	ldr	r3, [r7, #16]
}
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	b006      	add	sp, #24
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	003d0900 	.word	0x003d0900
 8004cd4:	00f42400 	.word	0x00f42400
 8004cd8:	007a1200 	.word	0x007a1200
 8004cdc:	080076ac 	.word	0x080076ac

08004ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce4:	4b02      	ldr	r3, [pc, #8]	@ (8004cf0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
}
 8004ce8:	0018      	movs	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	46c0      	nop			@ (mov r8, r8)
 8004cf0:	20000000 	.word	0x20000000

08004cf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cf8:	f7ff fff2 	bl	8004ce0 <HAL_RCC_GetHCLKFreq>
 8004cfc:	0001      	movs	r1, r0
 8004cfe:	4b06      	ldr	r3, [pc, #24]	@ (8004d18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	2207      	movs	r2, #7
 8004d06:	4013      	ands	r3, r2
 8004d08:	4a04      	ldr	r2, [pc, #16]	@ (8004d1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d0a:	5cd3      	ldrb	r3, [r2, r3]
 8004d0c:	40d9      	lsrs	r1, r3
 8004d0e:	000b      	movs	r3, r1
}
 8004d10:	0018      	movs	r0, r3
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	46c0      	nop			@ (mov r8, r8)
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	080076a4 	.word	0x080076a4

08004d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d24:	f7ff ffdc 	bl	8004ce0 <HAL_RCC_GetHCLKFreq>
 8004d28:	0001      	movs	r1, r0
 8004d2a:	4b06      	ldr	r3, [pc, #24]	@ (8004d44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	0adb      	lsrs	r3, r3, #11
 8004d30:	2207      	movs	r2, #7
 8004d32:	4013      	ands	r3, r2
 8004d34:	4a04      	ldr	r2, [pc, #16]	@ (8004d48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d36:	5cd3      	ldrb	r3, [r2, r3]
 8004d38:	40d9      	lsrs	r1, r3
 8004d3a:	000b      	movs	r3, r1
}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	46c0      	nop			@ (mov r8, r8)
 8004d44:	40021000 	.word	0x40021000
 8004d48:	080076a4 	.word	0x080076a4

08004d4c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b086      	sub	sp, #24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004d54:	2317      	movs	r3, #23
 8004d56:	18fb      	adds	r3, r7, r3
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2220      	movs	r2, #32
 8004d62:	4013      	ands	r3, r2
 8004d64:	d106      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	2380      	movs	r3, #128	@ 0x80
 8004d6c:	011b      	lsls	r3, r3, #4
 8004d6e:	4013      	ands	r3, r2
 8004d70:	d100      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8004d72:	e104      	b.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d74:	4bb9      	ldr	r3, [pc, #740]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d78:	2380      	movs	r3, #128	@ 0x80
 8004d7a:	055b      	lsls	r3, r3, #21
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	d10a      	bne.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d80:	4bb6      	ldr	r3, [pc, #728]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d84:	4bb5      	ldr	r3, [pc, #724]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004d86:	2180      	movs	r1, #128	@ 0x80
 8004d88:	0549      	lsls	r1, r1, #21
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004d8e:	2317      	movs	r3, #23
 8004d90:	18fb      	adds	r3, r7, r3
 8004d92:	2201      	movs	r2, #1
 8004d94:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d96:	4bb2      	ldr	r3, [pc, #712]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	2380      	movs	r3, #128	@ 0x80
 8004d9c:	005b      	lsls	r3, r3, #1
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d11a      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da2:	4baf      	ldr	r3, [pc, #700]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4bae      	ldr	r3, [pc, #696]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004da8:	2180      	movs	r1, #128	@ 0x80
 8004daa:	0049      	lsls	r1, r1, #1
 8004dac:	430a      	orrs	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004db0:	f7fd f9dc 	bl	800216c <HAL_GetTick>
 8004db4:	0003      	movs	r3, r0
 8004db6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db8:	e008      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dba:	f7fd f9d7 	bl	800216c <HAL_GetTick>
 8004dbe:	0002      	movs	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b64      	cmp	r3, #100	@ 0x64
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e143      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dcc:	4ba4      	ldr	r3, [pc, #656]	@ (8005060 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	2380      	movs	r3, #128	@ 0x80
 8004dd2:	005b      	lsls	r3, r3, #1
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	d0f0      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004dd8:	4ba0      	ldr	r3, [pc, #640]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	23c0      	movs	r3, #192	@ 0xc0
 8004dde:	039b      	lsls	r3, r3, #14
 8004de0:	4013      	ands	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	23c0      	movs	r3, #192	@ 0xc0
 8004dea:	039b      	lsls	r3, r3, #14
 8004dec:	4013      	ands	r3, r2
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d107      	bne.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689a      	ldr	r2, [r3, #8]
 8004df8:	23c0      	movs	r3, #192	@ 0xc0
 8004dfa:	039b      	lsls	r3, r3, #14
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d013      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	23c0      	movs	r3, #192	@ 0xc0
 8004e0a:	029b      	lsls	r3, r3, #10
 8004e0c:	401a      	ands	r2, r3
 8004e0e:	23c0      	movs	r3, #192	@ 0xc0
 8004e10:	029b      	lsls	r3, r3, #10
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d10a      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e16:	4b91      	ldr	r3, [pc, #580]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	2380      	movs	r3, #128	@ 0x80
 8004e1c:	029b      	lsls	r3, r3, #10
 8004e1e:	401a      	ands	r2, r3
 8004e20:	2380      	movs	r3, #128	@ 0x80
 8004e22:	029b      	lsls	r3, r3, #10
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d101      	bne.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e113      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004e2c:	4b8b      	ldr	r3, [pc, #556]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e2e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e30:	23c0      	movs	r3, #192	@ 0xc0
 8004e32:	029b      	lsls	r3, r3, #10
 8004e34:	4013      	ands	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d049      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685a      	ldr	r2, [r3, #4]
 8004e42:	23c0      	movs	r3, #192	@ 0xc0
 8004e44:	029b      	lsls	r3, r3, #10
 8004e46:	4013      	ands	r3, r2
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d004      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2220      	movs	r2, #32
 8004e54:	4013      	ands	r3, r2
 8004e56:	d10d      	bne.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	23c0      	movs	r3, #192	@ 0xc0
 8004e5e:	029b      	lsls	r3, r3, #10
 8004e60:	4013      	ands	r3, r2
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d034      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	2380      	movs	r3, #128	@ 0x80
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	4013      	ands	r3, r2
 8004e72:	d02e      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004e74:	4b79      	ldr	r3, [pc, #484]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e78:	4a7a      	ldr	r2, [pc, #488]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e7e:	4b77      	ldr	r3, [pc, #476]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e82:	4b76      	ldr	r3, [pc, #472]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e84:	2180      	movs	r1, #128	@ 0x80
 8004e86:	0309      	lsls	r1, r1, #12
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e8c:	4b73      	ldr	r3, [pc, #460]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e8e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004e90:	4b72      	ldr	r3, [pc, #456]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e92:	4975      	ldr	r1, [pc, #468]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004e94:	400a      	ands	r2, r1
 8004e96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004e98:	4b70      	ldr	r3, [pc, #448]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	2380      	movs	r3, #128	@ 0x80
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d014      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea8:	f7fd f960 	bl	800216c <HAL_GetTick>
 8004eac:	0003      	movs	r3, r0
 8004eae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004eb0:	e009      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb2:	f7fd f95b 	bl	800216c <HAL_GetTick>
 8004eb6:	0002      	movs	r2, r0
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	4a6b      	ldr	r2, [pc, #428]	@ (800506c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e0c6      	b.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ec6:	4b65      	ldr	r3, [pc, #404]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ec8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004eca:	2380      	movs	r3, #128	@ 0x80
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4013      	ands	r3, r2
 8004ed0:	d0ef      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	2380      	movs	r3, #128	@ 0x80
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	4013      	ands	r3, r2
 8004edc:	d01f      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689a      	ldr	r2, [r3, #8]
 8004ee2:	23c0      	movs	r3, #192	@ 0xc0
 8004ee4:	029b      	lsls	r3, r3, #10
 8004ee6:	401a      	ands	r2, r3
 8004ee8:	23c0      	movs	r3, #192	@ 0xc0
 8004eea:	029b      	lsls	r3, r3, #10
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d10c      	bne.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004ef0:	4b5a      	ldr	r3, [pc, #360]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a5e      	ldr	r2, [pc, #376]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	0019      	movs	r1, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689a      	ldr	r2, [r3, #8]
 8004efe:	23c0      	movs	r3, #192	@ 0xc0
 8004f00:	039b      	lsls	r3, r3, #14
 8004f02:	401a      	ands	r2, r3
 8004f04:	4b55      	ldr	r3, [pc, #340]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f06:	430a      	orrs	r2, r1
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	4b54      	ldr	r3, [pc, #336]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f0c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	689a      	ldr	r2, [r3, #8]
 8004f12:	23c0      	movs	r3, #192	@ 0xc0
 8004f14:	029b      	lsls	r3, r3, #10
 8004f16:	401a      	ands	r2, r3
 8004f18:	4b50      	ldr	r3, [pc, #320]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2220      	movs	r2, #32
 8004f24:	4013      	ands	r3, r2
 8004f26:	d01f      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	23c0      	movs	r3, #192	@ 0xc0
 8004f2e:	029b      	lsls	r3, r3, #10
 8004f30:	401a      	ands	r2, r3
 8004f32:	23c0      	movs	r3, #192	@ 0xc0
 8004f34:	029b      	lsls	r3, r3, #10
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004f3a:	4b48      	ldr	r3, [pc, #288]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a4c      	ldr	r2, [pc, #304]	@ (8005070 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	0019      	movs	r1, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	23c0      	movs	r3, #192	@ 0xc0
 8004f4a:	039b      	lsls	r3, r3, #14
 8004f4c:	401a      	ands	r2, r3
 8004f4e:	4b43      	ldr	r3, [pc, #268]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f50:	430a      	orrs	r2, r1
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	4b41      	ldr	r3, [pc, #260]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f56:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	23c0      	movs	r3, #192	@ 0xc0
 8004f5e:	029b      	lsls	r3, r3, #10
 8004f60:	401a      	ands	r2, r3
 8004f62:	4b3e      	ldr	r3, [pc, #248]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f64:	430a      	orrs	r2, r1
 8004f66:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f68:	2317      	movs	r3, #23
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d105      	bne.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f72:	4b3a      	ldr	r3, [pc, #232]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f76:	4b39      	ldr	r3, [pc, #228]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f78:	493e      	ldr	r1, [pc, #248]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004f7a:	400a      	ands	r2, r1
 8004f7c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2201      	movs	r2, #1
 8004f84:	4013      	ands	r3, r2
 8004f86:	d009      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f88:	4b34      	ldr	r3, [pc, #208]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f8c:	2203      	movs	r2, #3
 8004f8e:	4393      	bics	r3, r2
 8004f90:	0019      	movs	r1, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68da      	ldr	r2, [r3, #12]
 8004f96:	4b31      	ldr	r3, [pc, #196]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004faa:	220c      	movs	r2, #12
 8004fac:	4393      	bics	r3, r2
 8004fae:	0019      	movs	r1, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	4b29      	ldr	r3, [pc, #164]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	d009      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fc4:	4b25      	ldr	r3, [pc, #148]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8005078 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004fca:	4013      	ands	r3, r2
 8004fcc:	0019      	movs	r1, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695a      	ldr	r2, [r3, #20]
 8004fd2:	4b22      	ldr	r3, [pc, #136]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2208      	movs	r2, #8
 8004fde:	4013      	ands	r3, r2
 8004fe0:	d009      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fe6:	4a25      	ldr	r2, [pc, #148]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004fe8:	4013      	ands	r3, r2
 8004fea:	0019      	movs	r1, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699a      	ldr	r2, [r3, #24]
 8004ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	2380      	movs	r3, #128	@ 0x80
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	4013      	ands	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005002:	4b16      	ldr	r3, [pc, #88]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005006:	4a17      	ldr	r2, [pc, #92]	@ (8005064 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8005008:	4013      	ands	r3, r2
 800500a:	0019      	movs	r1, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	4b12      	ldr	r3, [pc, #72]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005012:	430a      	orrs	r2, r1
 8005014:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2240      	movs	r2, #64	@ 0x40
 800501c:	4013      	ands	r3, r2
 800501e:	d009      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005020:	4b0e      	ldr	r3, [pc, #56]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005022:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005024:	4a16      	ldr	r2, [pc, #88]	@ (8005080 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8005026:	4013      	ands	r3, r2
 8005028:	0019      	movs	r1, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800502e:	4b0b      	ldr	r3, [pc, #44]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005030:	430a      	orrs	r2, r1
 8005032:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2280      	movs	r2, #128	@ 0x80
 800503a:	4013      	ands	r3, r2
 800503c:	d009      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800503e:	4b07      	ldr	r3, [pc, #28]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005042:	4a10      	ldr	r2, [pc, #64]	@ (8005084 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005044:	4013      	ands	r3, r2
 8005046:	0019      	movs	r1, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a1a      	ldr	r2, [r3, #32]
 800504c:	4b03      	ldr	r3, [pc, #12]	@ (800505c <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800504e:	430a      	orrs	r2, r1
 8005050:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	0018      	movs	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	b006      	add	sp, #24
 800505a:	bd80      	pop	{r7, pc}
 800505c:	40021000 	.word	0x40021000
 8005060:	40007000 	.word	0x40007000
 8005064:	fffcffff 	.word	0xfffcffff
 8005068:	fff7ffff 	.word	0xfff7ffff
 800506c:	00001388 	.word	0x00001388
 8005070:	ffcfffff 	.word	0xffcfffff
 8005074:	efffffff 	.word	0xefffffff
 8005078:	fffff3ff 	.word	0xfffff3ff
 800507c:	ffffcfff 	.word	0xffffcfff
 8005080:	fbffffff 	.word	0xfbffffff
 8005084:	fff3ffff 	.word	0xfff3ffff

08005088 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005088:	b5b0      	push	{r4, r5, r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005090:	230f      	movs	r3, #15
 8005092:	18fb      	adds	r3, r7, r3
 8005094:	2201      	movs	r2, #1
 8005096:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e088      	b.n	80051b4 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2221      	movs	r2, #33	@ 0x21
 80050a6:	5c9b      	ldrb	r3, [r3, r2]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d107      	bne.n	80050be <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	2100      	movs	r1, #0
 80050b4:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	0018      	movs	r0, r3
 80050ba:	f7fc fac1 	bl	8001640 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2221      	movs	r2, #33	@ 0x21
 80050c2:	2102      	movs	r1, #2
 80050c4:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	2210      	movs	r2, #16
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d05f      	beq.n	8005194 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	22ca      	movs	r2, #202	@ 0xca
 80050da:	625a      	str	r2, [r3, #36]	@ 0x24
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2253      	movs	r2, #83	@ 0x53
 80050e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80050e4:	250f      	movs	r5, #15
 80050e6:	197c      	adds	r4, r7, r5
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	0018      	movs	r0, r3
 80050ec:	f000 f93e 	bl	800536c <RTC_EnterInitMode>
 80050f0:	0003      	movs	r3, r0
 80050f2:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 80050f4:	0028      	movs	r0, r5
 80050f6:	183b      	adds	r3, r7, r0
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d12c      	bne.n	8005158 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689a      	ldr	r2, [r3, #8]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	492c      	ldr	r1, [pc, #176]	@ (80051bc <HAL_RTC_Init+0x134>)
 800510a:	400a      	ands	r2, r1
 800510c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6899      	ldr	r1, [r3, #8]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	691b      	ldr	r3, [r3, #16]
 800511c:	431a      	orrs	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	68d2      	ldr	r2, [r2, #12]
 8005134:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6919      	ldr	r1, [r3, #16]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	041a      	lsls	r2, r3, #16
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800514a:	183c      	adds	r4, r7, r0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	0018      	movs	r0, r3
 8005150:	f000 f950 	bl	80053f4 <RTC_ExitInitMode>
 8005154:	0003      	movs	r3, r0
 8005156:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 8005158:	230f      	movs	r3, #15
 800515a:	18fb      	adds	r3, r7, r3
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d113      	bne.n	800518a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2103      	movs	r1, #3
 800516e:	438a      	bics	r2, r1
 8005170:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	69da      	ldr	r2, [r3, #28]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	431a      	orrs	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	430a      	orrs	r2, r1
 8005188:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	22ff      	movs	r2, #255	@ 0xff
 8005190:	625a      	str	r2, [r3, #36]	@ 0x24
 8005192:	e003      	b.n	800519c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005194:	230f      	movs	r3, #15
 8005196:	18fb      	adds	r3, r7, r3
 8005198:	2200      	movs	r2, #0
 800519a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800519c:	230f      	movs	r3, #15
 800519e:	18fb      	adds	r3, r7, r3
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d103      	bne.n	80051ae <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2221      	movs	r2, #33	@ 0x21
 80051aa:	2101      	movs	r1, #1
 80051ac:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80051ae:	230f      	movs	r3, #15
 80051b0:	18fb      	adds	r3, r7, r3
 80051b2:	781b      	ldrb	r3, [r3, #0]
}
 80051b4:	0018      	movs	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	b004      	add	sp, #16
 80051ba:	bdb0      	pop	{r4, r5, r7, pc}
 80051bc:	ff8fffbf 	.word	0xff8fffbf

080051c0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80051cc:	2300      	movs	r3, #0
 80051ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	045b      	lsls	r3, r3, #17
 80051e2:	0c5a      	lsrs	r2, r3, #17
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a22      	ldr	r2, [pc, #136]	@ (8005278 <HAL_RTC_GetTime+0xb8>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	0c1b      	lsrs	r3, r3, #16
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	223f      	movs	r2, #63	@ 0x3f
 80051fc:	4013      	ands	r3, r2
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	0a1b      	lsrs	r3, r3, #8
 8005208:	b2db      	uxtb	r3, r3
 800520a:	227f      	movs	r2, #127	@ 0x7f
 800520c:	4013      	ands	r3, r2
 800520e:	b2da      	uxtb	r2, r3
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	227f      	movs	r2, #127	@ 0x7f
 800521a:	4013      	ands	r3, r2
 800521c:	b2da      	uxtb	r2, r3
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	0d9b      	lsrs	r3, r3, #22
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2201      	movs	r2, #1
 800522a:	4013      	ands	r3, r2
 800522c:	b2da      	uxtb	r2, r3
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d11a      	bne.n	800526e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	0018      	movs	r0, r3
 800523e:	f000 f903 	bl	8005448 <RTC_Bcd2ToByte>
 8005242:	0003      	movs	r3, r0
 8005244:	001a      	movs	r2, r3
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	785b      	ldrb	r3, [r3, #1]
 800524e:	0018      	movs	r0, r3
 8005250:	f000 f8fa 	bl	8005448 <RTC_Bcd2ToByte>
 8005254:	0003      	movs	r3, r0
 8005256:	001a      	movs	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	789b      	ldrb	r3, [r3, #2]
 8005260:	0018      	movs	r0, r3
 8005262:	f000 f8f1 	bl	8005448 <RTC_Bcd2ToByte>
 8005266:	0003      	movs	r3, r0
 8005268:	001a      	movs	r2, r3
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	0018      	movs	r0, r3
 8005272:	46bd      	mov	sp, r7
 8005274:	b006      	add	sp, #24
 8005276:	bd80      	pop	{r7, pc}
 8005278:	007f7f7f 	.word	0x007f7f7f

0800527c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	4a21      	ldr	r2, [pc, #132]	@ (8005318 <HAL_RTC_GetDate+0x9c>)
 8005294:	4013      	ands	r3, r2
 8005296:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	0c1b      	lsrs	r3, r3, #16
 800529c:	b2da      	uxtb	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	0a1b      	lsrs	r3, r3, #8
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	221f      	movs	r2, #31
 80052aa:	4013      	ands	r3, r2
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	223f      	movs	r2, #63	@ 0x3f
 80052b8:	4013      	ands	r3, r2
 80052ba:	b2da      	uxtb	r2, r3
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	0b5b      	lsrs	r3, r3, #13
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2207      	movs	r2, #7
 80052c8:	4013      	ands	r3, r2
 80052ca:	b2da      	uxtb	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d11a      	bne.n	800530c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	78db      	ldrb	r3, [r3, #3]
 80052da:	0018      	movs	r0, r3
 80052dc:	f000 f8b4 	bl	8005448 <RTC_Bcd2ToByte>
 80052e0:	0003      	movs	r3, r0
 80052e2:	001a      	movs	r2, r3
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	0018      	movs	r0, r3
 80052ee:	f000 f8ab 	bl	8005448 <RTC_Bcd2ToByte>
 80052f2:	0003      	movs	r3, r0
 80052f4:	001a      	movs	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	789b      	ldrb	r3, [r3, #2]
 80052fe:	0018      	movs	r0, r3
 8005300:	f000 f8a2 	bl	8005448 <RTC_Bcd2ToByte>
 8005304:	0003      	movs	r3, r0
 8005306:	001a      	movs	r2, r3
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	0018      	movs	r0, r3
 8005310:	46bd      	mov	sp, r7
 8005312:	b006      	add	sp, #24
 8005314:	bd80      	pop	{r7, pc}
 8005316:	46c0      	nop			@ (mov r8, r8)
 8005318:	00ffff3f 	.word	0x00ffff3f

0800531c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a0e      	ldr	r2, [pc, #56]	@ (8005368 <HAL_RTC_WaitForSynchro+0x4c>)
 800532e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005330:	f7fc ff1c 	bl	800216c <HAL_GetTick>
 8005334:	0003      	movs	r3, r0
 8005336:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005338:	e00a      	b.n	8005350 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800533a:	f7fc ff17 	bl	800216c <HAL_GetTick>
 800533e:	0002      	movs	r2, r0
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	1ad2      	subs	r2, r2, r3
 8005344:	23fa      	movs	r3, #250	@ 0xfa
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	429a      	cmp	r2, r3
 800534a:	d901      	bls.n	8005350 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e006      	b.n	800535e <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2220      	movs	r2, #32
 8005358:	4013      	ands	r3, r2
 800535a:	d0ee      	beq.n	800533a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	0018      	movs	r0, r3
 8005360:	46bd      	mov	sp, r7
 8005362:	b004      	add	sp, #16
 8005364:	bd80      	pop	{r7, pc}
 8005366:	46c0      	nop			@ (mov r8, r8)
 8005368:	0001ff5f 	.word	0x0001ff5f

0800536c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005374:	2300      	movs	r3, #0
 8005376:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005378:	230f      	movs	r3, #15
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	2240      	movs	r2, #64	@ 0x40
 8005388:	4013      	ands	r3, r2
 800538a:	d12c      	bne.n	80053e6 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2180      	movs	r1, #128	@ 0x80
 8005398:	430a      	orrs	r2, r1
 800539a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800539c:	f7fc fee6 	bl	800216c <HAL_GetTick>
 80053a0:	0003      	movs	r3, r0
 80053a2:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80053a4:	e014      	b.n	80053d0 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80053a6:	f7fc fee1 	bl	800216c <HAL_GetTick>
 80053aa:	0002      	movs	r2, r0
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	1ad2      	subs	r2, r2, r3
 80053b0:	200f      	movs	r0, #15
 80053b2:	183b      	adds	r3, r7, r0
 80053b4:	1839      	adds	r1, r7, r0
 80053b6:	7809      	ldrb	r1, [r1, #0]
 80053b8:	7019      	strb	r1, [r3, #0]
 80053ba:	23fa      	movs	r3, #250	@ 0xfa
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	429a      	cmp	r2, r3
 80053c0:	d906      	bls.n	80053d0 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2221      	movs	r2, #33	@ 0x21
 80053c6:	2104      	movs	r1, #4
 80053c8:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80053ca:	183b      	adds	r3, r7, r0
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	2240      	movs	r2, #64	@ 0x40
 80053d8:	4013      	ands	r3, r2
 80053da:	d104      	bne.n	80053e6 <RTC_EnterInitMode+0x7a>
 80053dc:	230f      	movs	r3, #15
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d1df      	bne.n	80053a6 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80053e6:	230f      	movs	r3, #15
 80053e8:	18fb      	adds	r3, r7, r3
 80053ea:	781b      	ldrb	r3, [r3, #0]
}
 80053ec:	0018      	movs	r0, r3
 80053ee:	46bd      	mov	sp, r7
 80053f0:	b004      	add	sp, #16
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80053f4:	b590      	push	{r4, r7, lr}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053fc:	240f      	movs	r4, #15
 80053fe:	193b      	adds	r3, r7, r4
 8005400:	2200      	movs	r2, #0
 8005402:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68da      	ldr	r2, [r3, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2180      	movs	r1, #128	@ 0x80
 8005410:	438a      	bics	r2, r1
 8005412:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	2220      	movs	r2, #32
 800541c:	4013      	ands	r3, r2
 800541e:	d10c      	bne.n	800543a <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	0018      	movs	r0, r3
 8005424:	f7ff ff7a 	bl	800531c <HAL_RTC_WaitForSynchro>
 8005428:	1e03      	subs	r3, r0, #0
 800542a:	d006      	beq.n	800543a <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2221      	movs	r2, #33	@ 0x21
 8005430:	2104      	movs	r1, #4
 8005432:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8005434:	193b      	adds	r3, r7, r4
 8005436:	2201      	movs	r2, #1
 8005438:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800543a:	230f      	movs	r3, #15
 800543c:	18fb      	adds	r3, r7, r3
 800543e:	781b      	ldrb	r3, [r3, #0]
}
 8005440:	0018      	movs	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	b005      	add	sp, #20
 8005446:	bd90      	pop	{r4, r7, pc}

08005448 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b084      	sub	sp, #16
 800544c:	af00      	add	r7, sp, #0
 800544e:	0002      	movs	r2, r0
 8005450:	1dfb      	adds	r3, r7, #7
 8005452:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8005458:	1dfb      	adds	r3, r7, #7
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	091b      	lsrs	r3, r3, #4
 800545e:	b2db      	uxtb	r3, r3
 8005460:	001a      	movs	r2, r3
 8005462:	0013      	movs	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	189b      	adds	r3, r3, r2
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	b2da      	uxtb	r2, r3
 8005470:	1dfb      	adds	r3, r7, #7
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	210f      	movs	r1, #15
 8005476:	400b      	ands	r3, r1
 8005478:	b2db      	uxtb	r3, r3
 800547a:	18d3      	adds	r3, r2, r3
 800547c:	b2db      	uxtb	r3, r3
}
 800547e:	0018      	movs	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	b004      	add	sp, #16
 8005484:	bd80      	pop	{r7, pc}
	...

08005488 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005494:	4b64      	ldr	r3, [pc, #400]	@ (8005628 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	22fa      	movs	r2, #250	@ 0xfa
 800549a:	01d1      	lsls	r1, r2, #7
 800549c:	0018      	movs	r0, r3
 800549e:	f7fa fe45 	bl	800012c <__udivsi3>
 80054a2:	0003      	movs	r3, r0
 80054a4:	001a      	movs	r2, r3
 80054a6:	0013      	movs	r3, r2
 80054a8:	015b      	lsls	r3, r3, #5
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	189b      	adds	r3, r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2220      	movs	r2, #32
 80054b8:	5c9b      	ldrb	r3, [r3, r2]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80054be:	2302      	movs	r3, #2
 80054c0:	e0ad      	b.n	800561e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2220      	movs	r2, #32
 80054c6:	2101      	movs	r1, #1
 80054c8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2221      	movs	r2, #33	@ 0x21
 80054ce:	2102      	movs	r1, #2
 80054d0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	22ca      	movs	r2, #202	@ 0xca
 80054d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2253      	movs	r2, #83	@ 0x53
 80054e0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	2380      	movs	r3, #128	@ 0x80
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	4013      	ands	r3, r2
 80054ee:	d019      	beq.n	8005524 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10d      	bne.n	8005518 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	22ff      	movs	r2, #255	@ 0xff
 8005502:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2221      	movs	r2, #33	@ 0x21
 8005508:	2103      	movs	r1, #3
 800550a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	2100      	movs	r1, #0
 8005512:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e082      	b.n	800561e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	2204      	movs	r2, #4
 8005520:	4013      	ands	r3, r2
 8005522:	d1e5      	bne.n	80054f0 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	493f      	ldr	r1, [pc, #252]	@ (800562c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8005530:	400a      	ands	r2, r1
 8005532:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	22ff      	movs	r2, #255	@ 0xff
 800553c:	401a      	ands	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	493b      	ldr	r1, [pc, #236]	@ (8005630 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8005544:	430a      	orrs	r2, r1
 8005546:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005548:	4b37      	ldr	r3, [pc, #220]	@ (8005628 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	22fa      	movs	r2, #250	@ 0xfa
 800554e:	01d1      	lsls	r1, r2, #7
 8005550:	0018      	movs	r0, r3
 8005552:	f7fa fdeb 	bl	800012c <__udivsi3>
 8005556:	0003      	movs	r3, r0
 8005558:	001a      	movs	r2, r3
 800555a:	0013      	movs	r3, r2
 800555c:	015b      	lsls	r3, r3, #5
 800555e:	1a9b      	subs	r3, r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	189b      	adds	r3, r3, r2
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	3b01      	subs	r3, #1
 800556c:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10d      	bne.n	8005590 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	22ff      	movs	r2, #255	@ 0xff
 800557a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2221      	movs	r2, #33	@ 0x21
 8005580:	2103      	movs	r1, #3
 8005582:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	2100      	movs	r1, #0
 800558a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e046      	b.n	800561e <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	2204      	movs	r2, #4
 8005598:	4013      	ands	r3, r2
 800559a:	d0e5      	beq.n	8005568 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	689a      	ldr	r2, [r3, #8]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2107      	movs	r1, #7
 80055a8:	438a      	bics	r2, r1
 80055aa:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6899      	ldr	r1, [r3, #8]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	430a      	orrs	r2, r1
 80055ba:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	615a      	str	r2, [r3, #20]

  /* Enable and configure the EXTI line associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80055c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005634 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005634 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80055ca:	2180      	movs	r1, #128	@ 0x80
 80055cc:	0349      	lsls	r1, r1, #13
 80055ce:	430a      	orrs	r2, r1
 80055d0:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80055d2:	4b18      	ldr	r3, [pc, #96]	@ (8005634 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	4b17      	ldr	r3, [pc, #92]	@ (8005634 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80055d8:	2180      	movs	r1, #128	@ 0x80
 80055da:	0349      	lsls	r1, r1, #13
 80055dc:	430a      	orrs	r2, r1
 80055de:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689a      	ldr	r2, [r3, #8]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2180      	movs	r1, #128	@ 0x80
 80055ec:	01c9      	lsls	r1, r1, #7
 80055ee:	430a      	orrs	r2, r1
 80055f0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2180      	movs	r1, #128	@ 0x80
 80055fe:	00c9      	lsls	r1, r1, #3
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	22ff      	movs	r2, #255	@ 0xff
 800560a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2221      	movs	r2, #33	@ 0x21
 8005610:	2101      	movs	r1, #1
 8005612:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2220      	movs	r2, #32
 8005618:	2100      	movs	r1, #0
 800561a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	0018      	movs	r0, r3
 8005620:	46bd      	mov	sp, r7
 8005622:	b006      	add	sp, #24
 8005624:	bd80      	pop	{r7, pc}
 8005626:	46c0      	nop			@ (mov r8, r8)
 8005628:	20000000 	.word	0x20000000
 800562c:	fffffbff 	.word	0xfffffbff
 8005630:	fffffb7f 	.word	0xfffffb7f
 8005634:	40010400 	.word	0x40010400

08005638 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	5c9b      	ldrb	r3, [r3, r2]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_RTCEx_DeactivateWakeUpTimer+0x1a>
 800564e:	2302      	movs	r3, #2
 8005650:	e04e      	b.n	80056f0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2220      	movs	r2, #32
 8005656:	2101      	movs	r1, #1
 8005658:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2221      	movs	r2, #33	@ 0x21
 800565e:	2102      	movs	r1, #2
 8005660:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	22ca      	movs	r2, #202	@ 0xca
 8005668:	625a      	str	r2, [r3, #36]	@ 0x24
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2253      	movs	r2, #83	@ 0x53
 8005670:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	689a      	ldr	r2, [r3, #8]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	491e      	ldr	r1, [pc, #120]	@ (80056f8 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 800567e:	400a      	ands	r2, r1
 8005680:	609a      	str	r2, [r3, #8]

  /* In case interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	491b      	ldr	r1, [pc, #108]	@ (80056fc <HAL_RTCEx_DeactivateWakeUpTimer+0xc4>)
 800568e:	400a      	ands	r2, r1
 8005690:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005692:	f7fc fd6b 	bl	800216c <HAL_GetTick>
 8005696:	0003      	movs	r3, r0
 8005698:	60fb      	str	r3, [r7, #12]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800569a:	e016      	b.n	80056ca <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800569c:	f7fc fd66 	bl	800216c <HAL_GetTick>
 80056a0:	0002      	movs	r2, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad2      	subs	r2, r2, r3
 80056a6:	23fa      	movs	r3, #250	@ 0xfa
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d90d      	bls.n	80056ca <HAL_RTCEx_DeactivateWakeUpTimer+0x92>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	22ff      	movs	r2, #255	@ 0xff
 80056b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2221      	movs	r2, #33	@ 0x21
 80056ba:	2103      	movs	r1, #3
 80056bc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2220      	movs	r2, #32
 80056c2:	2100      	movs	r1, #0
 80056c4:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e012      	b.n	80056f0 <HAL_RTCEx_DeactivateWakeUpTimer+0xb8>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	2204      	movs	r2, #4
 80056d2:	4013      	ands	r3, r2
 80056d4:	d0e2      	beq.n	800569c <HAL_RTCEx_DeactivateWakeUpTimer+0x64>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	22ff      	movs	r2, #255	@ 0xff
 80056dc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2221      	movs	r2, #33	@ 0x21
 80056e2:	2101      	movs	r1, #1
 80056e4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2220      	movs	r2, #32
 80056ea:	2100      	movs	r1, #0
 80056ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	0018      	movs	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	b004      	add	sp, #16
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	fffffbff 	.word	0xfffffbff
 80056fc:	ffffbfff 	.word	0xffffbfff

08005700 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI flag associated to the RTC Wakeup Timer interrupt */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8005708:	4b13      	ldr	r3, [pc, #76]	@ (8005758 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 800570a:	2280      	movs	r2, #128	@ 0x80
 800570c:	0352      	lsls	r2, r2, #13
 800570e:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	2380      	movs	r3, #128	@ 0x80
 8005718:	01db      	lsls	r3, r3, #7
 800571a:	4013      	ands	r3, r2
 800571c:	d014      	beq.n	8005748 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	2380      	movs	r3, #128	@ 0x80
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	4013      	ands	r3, r2
 800572a:	d00d      	beq.n	8005748 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	22ff      	movs	r2, #255	@ 0xff
 8005734:	401a      	ands	r2, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4908      	ldr	r1, [pc, #32]	@ (800575c <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 800573c:	430a      	orrs	r2, r1
 800573e:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	0018      	movs	r0, r3
 8005744:	f7fc fc78 	bl	8002038 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2221      	movs	r2, #33	@ 0x21
 800574c:	2101      	movs	r1, #1
 800574e:	5499      	strb	r1, [r3, r2]
}
 8005750:	46c0      	nop			@ (mov r8, r8)
 8005752:	46bd      	mov	sp, r7
 8005754:	b002      	add	sp, #8
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40010400 	.word	0x40010400
 800575c:	fffffb7f 	.word	0xfffffb7f

08005760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e044      	b.n	80057fc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d107      	bne.n	800578a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2278      	movs	r2, #120	@ 0x78
 800577e:	2100      	movs	r1, #0
 8005780:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	0018      	movs	r0, r3
 8005786:	f7fb fead 	bl	80014e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2224      	movs	r2, #36	@ 0x24
 800578e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2101      	movs	r1, #1
 800579c:	438a      	bics	r2, r1
 800579e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d003      	beq.n	80057b0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	0018      	movs	r0, r3
 80057ac:	f000 fc8e 	bl	80060cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	0018      	movs	r0, r3
 80057b4:	f000 f9ec 	bl	8005b90 <UART_SetConfig>
 80057b8:	0003      	movs	r3, r0
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d101      	bne.n	80057c2 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e01c      	b.n	80057fc <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	490d      	ldr	r1, [pc, #52]	@ (8005804 <HAL_UART_Init+0xa4>)
 80057ce:	400a      	ands	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	212a      	movs	r1, #42	@ 0x2a
 80057de:	438a      	bics	r2, r1
 80057e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2101      	movs	r1, #1
 80057ee:	430a      	orrs	r2, r1
 80057f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	0018      	movs	r0, r3
 80057f6:	f000 fd1d 	bl	8006234 <UART_CheckIdleState>
 80057fa:	0003      	movs	r3, r0
}
 80057fc:	0018      	movs	r0, r3
 80057fe:	46bd      	mov	sp, r7
 8005800:	b002      	add	sp, #8
 8005802:	bd80      	pop	{r7, pc}
 8005804:	ffffb7ff 	.word	0xffffb7ff

08005808 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e030      	b.n	800587c <HAL_UART_DeInit+0x74>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2224      	movs	r2, #36	@ 0x24
 800581e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2101      	movs	r1, #1
 800582c:	438a      	bics	r2, r1
 800582e:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2200      	movs	r2, #0
 8005836:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2200      	movs	r2, #0
 800583e:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2200      	movs	r2, #0
 8005846:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	0018      	movs	r0, r3
 800584c:	f7fb fec0 	bl	80015d0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2284      	movs	r2, #132	@ 0x84
 8005854:	2100      	movs	r1, #0
 8005856:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_RESET;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2280      	movs	r2, #128	@ 0x80
 8005862:	2100      	movs	r1, #0
 8005864:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2278      	movs	r2, #120	@ 0x78
 8005876:	2100      	movs	r1, #0
 8005878:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800587a:	2300      	movs	r3, #0
}
 800587c:	0018      	movs	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	b002      	add	sp, #8
 8005882:	bd80      	pop	{r7, pc}

08005884 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08a      	sub	sp, #40	@ 0x28
 8005888:	af02      	add	r7, sp, #8
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	1dbb      	adds	r3, r7, #6
 8005892:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005898:	2b20      	cmp	r3, #32
 800589a:	d000      	beq.n	800589e <HAL_UART_Transmit+0x1a>
 800589c:	e08c      	b.n	80059b8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_UART_Transmit+0x28>
 80058a4:	1dbb      	adds	r3, r7, #6
 80058a6:	881b      	ldrh	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e084      	b.n	80059ba <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	2380      	movs	r3, #128	@ 0x80
 80058b6:	015b      	lsls	r3, r3, #5
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d109      	bne.n	80058d0 <HAL_UART_Transmit+0x4c>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d105      	bne.n	80058d0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	2201      	movs	r2, #1
 80058c8:	4013      	ands	r3, r2
 80058ca:	d001      	beq.n	80058d0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e074      	b.n	80059ba <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2284      	movs	r2, #132	@ 0x84
 80058d4:	2100      	movs	r1, #0
 80058d6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2221      	movs	r2, #33	@ 0x21
 80058dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058de:	f7fc fc45 	bl	800216c <HAL_GetTick>
 80058e2:	0003      	movs	r3, r0
 80058e4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	1dba      	adds	r2, r7, #6
 80058ea:	2150      	movs	r1, #80	@ 0x50
 80058ec:	8812      	ldrh	r2, [r2, #0]
 80058ee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1dba      	adds	r2, r7, #6
 80058f4:	2152      	movs	r1, #82	@ 0x52
 80058f6:	8812      	ldrh	r2, [r2, #0]
 80058f8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	2380      	movs	r3, #128	@ 0x80
 8005900:	015b      	lsls	r3, r3, #5
 8005902:	429a      	cmp	r2, r3
 8005904:	d108      	bne.n	8005918 <HAL_UART_Transmit+0x94>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d104      	bne.n	8005918 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800590e:	2300      	movs	r3, #0
 8005910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	61bb      	str	r3, [r7, #24]
 8005916:	e003      	b.n	8005920 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800591c:	2300      	movs	r3, #0
 800591e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005920:	e02f      	b.n	8005982 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	0013      	movs	r3, r2
 800592c:	2200      	movs	r2, #0
 800592e:	2180      	movs	r1, #128	@ 0x80
 8005930:	f000 fd28 	bl	8006384 <UART_WaitOnFlagUntilTimeout>
 8005934:	1e03      	subs	r3, r0, #0
 8005936:	d004      	beq.n	8005942 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e03b      	b.n	80059ba <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10b      	bne.n	8005960 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	001a      	movs	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	05d2      	lsls	r2, r2, #23
 8005954:	0dd2      	lsrs	r2, r2, #23
 8005956:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	3302      	adds	r3, #2
 800595c:	61bb      	str	r3, [r7, #24]
 800595e:	e007      	b.n	8005970 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	781a      	ldrb	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	3301      	adds	r3, #1
 800596e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2252      	movs	r2, #82	@ 0x52
 8005974:	5a9b      	ldrh	r3, [r3, r2]
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b299      	uxth	r1, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2252      	movs	r2, #82	@ 0x52
 8005980:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2252      	movs	r2, #82	@ 0x52
 8005986:	5a9b      	ldrh	r3, [r3, r2]
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1c9      	bne.n	8005922 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	0013      	movs	r3, r2
 8005998:	2200      	movs	r2, #0
 800599a:	2140      	movs	r1, #64	@ 0x40
 800599c:	f000 fcf2 	bl	8006384 <UART_WaitOnFlagUntilTimeout>
 80059a0:	1e03      	subs	r3, r0, #0
 80059a2:	d004      	beq.n	80059ae <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e005      	b.n	80059ba <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	e000      	b.n	80059ba <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80059b8:	2302      	movs	r3, #2
  }
}
 80059ba:	0018      	movs	r0, r3
 80059bc:	46bd      	mov	sp, r7
 80059be:	b008      	add	sp, #32
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08a      	sub	sp, #40	@ 0x28
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	1dbb      	adds	r3, r7, #6
 80059d2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2280      	movs	r2, #128	@ 0x80
 80059d8:	589b      	ldr	r3, [r3, r2]
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d000      	beq.n	80059e0 <HAL_UART_Receive+0x1c>
 80059de:	e0d0      	b.n	8005b82 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_UART_Receive+0x2a>
 80059e6:	1dbb      	adds	r3, r7, #6
 80059e8:	881b      	ldrh	r3, [r3, #0]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e0c8      	b.n	8005b84 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	2380      	movs	r3, #128	@ 0x80
 80059f8:	015b      	lsls	r3, r3, #5
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d109      	bne.n	8005a12 <HAL_UART_Receive+0x4e>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d105      	bne.n	8005a12 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	d001      	beq.n	8005a12 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e0b8      	b.n	8005b84 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2284      	movs	r2, #132	@ 0x84
 8005a16:	2100      	movs	r1, #0
 8005a18:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2280      	movs	r2, #128	@ 0x80
 8005a1e:	2122      	movs	r1, #34	@ 0x22
 8005a20:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a28:	f7fc fba0 	bl	800216c <HAL_GetTick>
 8005a2c:	0003      	movs	r3, r0
 8005a2e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	1dba      	adds	r2, r7, #6
 8005a34:	2158      	movs	r1, #88	@ 0x58
 8005a36:	8812      	ldrh	r2, [r2, #0]
 8005a38:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	1dba      	adds	r2, r7, #6
 8005a3e:	215a      	movs	r1, #90	@ 0x5a
 8005a40:	8812      	ldrh	r2, [r2, #0]
 8005a42:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	2380      	movs	r3, #128	@ 0x80
 8005a4a:	015b      	lsls	r3, r3, #5
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d10d      	bne.n	8005a6c <HAL_UART_Receive+0xa8>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d104      	bne.n	8005a62 <HAL_UART_Receive+0x9e>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	225c      	movs	r2, #92	@ 0x5c
 8005a5c:	494b      	ldr	r1, [pc, #300]	@ (8005b8c <HAL_UART_Receive+0x1c8>)
 8005a5e:	5299      	strh	r1, [r3, r2]
 8005a60:	e02e      	b.n	8005ac0 <HAL_UART_Receive+0xfc>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	225c      	movs	r2, #92	@ 0x5c
 8005a66:	21ff      	movs	r1, #255	@ 0xff
 8005a68:	5299      	strh	r1, [r3, r2]
 8005a6a:	e029      	b.n	8005ac0 <HAL_UART_Receive+0xfc>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d10d      	bne.n	8005a90 <HAL_UART_Receive+0xcc>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d104      	bne.n	8005a86 <HAL_UART_Receive+0xc2>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	225c      	movs	r2, #92	@ 0x5c
 8005a80:	21ff      	movs	r1, #255	@ 0xff
 8005a82:	5299      	strh	r1, [r3, r2]
 8005a84:	e01c      	b.n	8005ac0 <HAL_UART_Receive+0xfc>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	225c      	movs	r2, #92	@ 0x5c
 8005a8a:	217f      	movs	r1, #127	@ 0x7f
 8005a8c:	5299      	strh	r1, [r3, r2]
 8005a8e:	e017      	b.n	8005ac0 <HAL_UART_Receive+0xfc>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	2380      	movs	r3, #128	@ 0x80
 8005a96:	055b      	lsls	r3, r3, #21
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d10d      	bne.n	8005ab8 <HAL_UART_Receive+0xf4>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d104      	bne.n	8005aae <HAL_UART_Receive+0xea>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	225c      	movs	r2, #92	@ 0x5c
 8005aa8:	217f      	movs	r1, #127	@ 0x7f
 8005aaa:	5299      	strh	r1, [r3, r2]
 8005aac:	e008      	b.n	8005ac0 <HAL_UART_Receive+0xfc>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	225c      	movs	r2, #92	@ 0x5c
 8005ab2:	213f      	movs	r1, #63	@ 0x3f
 8005ab4:	5299      	strh	r1, [r3, r2]
 8005ab6:	e003      	b.n	8005ac0 <HAL_UART_Receive+0xfc>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	225c      	movs	r2, #92	@ 0x5c
 8005abc:	2100      	movs	r1, #0
 8005abe:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005ac0:	2312      	movs	r3, #18
 8005ac2:	18fb      	adds	r3, r7, r3
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	215c      	movs	r1, #92	@ 0x5c
 8005ac8:	5a52      	ldrh	r2, [r2, r1]
 8005aca:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689a      	ldr	r2, [r3, #8]
 8005ad0:	2380      	movs	r3, #128	@ 0x80
 8005ad2:	015b      	lsls	r3, r3, #5
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d108      	bne.n	8005aea <HAL_UART_Receive+0x126>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d104      	bne.n	8005aea <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	61bb      	str	r3, [r7, #24]
 8005ae8:	e003      	b.n	8005af2 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005af2:	e03a      	b.n	8005b6a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005af4:	697a      	ldr	r2, [r7, #20]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	0013      	movs	r3, r2
 8005afe:	2200      	movs	r2, #0
 8005b00:	2120      	movs	r1, #32
 8005b02:	f000 fc3f 	bl	8006384 <UART_WaitOnFlagUntilTimeout>
 8005b06:	1e03      	subs	r3, r0, #0
 8005b08:	d005      	beq.n	8005b16 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2280      	movs	r2, #128	@ 0x80
 8005b0e:	2120      	movs	r1, #32
 8005b10:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e036      	b.n	8005b84 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d10e      	bne.n	8005b3a <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2212      	movs	r2, #18
 8005b26:	18ba      	adds	r2, r7, r2
 8005b28:	8812      	ldrh	r2, [r2, #0]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	69bb      	ldr	r3, [r7, #24]
 8005b30:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	3302      	adds	r3, #2
 8005b36:	61bb      	str	r3, [r7, #24]
 8005b38:	e00e      	b.n	8005b58 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2212      	movs	r2, #18
 8005b44:	18ba      	adds	r2, r7, r2
 8005b46:	8812      	ldrh	r2, [r2, #0]
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	3301      	adds	r3, #1
 8005b56:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	225a      	movs	r2, #90	@ 0x5a
 8005b5c:	5a9b      	ldrh	r3, [r3, r2]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	3b01      	subs	r3, #1
 8005b62:	b299      	uxth	r1, r3
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	225a      	movs	r2, #90	@ 0x5a
 8005b68:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	225a      	movs	r2, #90	@ 0x5a
 8005b6e:	5a9b      	ldrh	r3, [r3, r2]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1be      	bne.n	8005af4 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2280      	movs	r2, #128	@ 0x80
 8005b7a:	2120      	movs	r1, #32
 8005b7c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
  }
}
 8005b84:	0018      	movs	r0, r3
 8005b86:	46bd      	mov	sp, r7
 8005b88:	b008      	add	sp, #32
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	000001ff 	.word	0x000001ff

08005b90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b90:	b5b0      	push	{r4, r5, r7, lr}
 8005b92:	b08e      	sub	sp, #56	@ 0x38
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b98:	231a      	movs	r3, #26
 8005b9a:	2218      	movs	r2, #24
 8005b9c:	189b      	adds	r3, r3, r2
 8005b9e:	19db      	adds	r3, r3, r7
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ba4:	69fb      	ldr	r3, [r7, #28]
 8005ba6:	689a      	ldr	r2, [r3, #8]
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	691b      	ldr	r3, [r3, #16]
 8005bac:	431a      	orrs	r2, r3
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4ac3      	ldr	r2, [pc, #780]	@ (8005ed0 <UART_SetConfig+0x340>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	0019      	movs	r1, r3
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4abe      	ldr	r2, [pc, #760]	@ (8005ed4 <UART_SetConfig+0x344>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	0019      	movs	r1, r3
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4ab8      	ldr	r2, [pc, #736]	@ (8005ed8 <UART_SetConfig+0x348>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d004      	beq.n	8005c04 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c00:	4313      	orrs	r3, r2
 8005c02:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c04:	69fb      	ldr	r3, [r7, #28]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	4ab4      	ldr	r2, [pc, #720]	@ (8005edc <UART_SetConfig+0x34c>)
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	0019      	movs	r1, r3
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c16:	430a      	orrs	r2, r1
 8005c18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4ab0      	ldr	r2, [pc, #704]	@ (8005ee0 <UART_SetConfig+0x350>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d131      	bne.n	8005c88 <UART_SetConfig+0xf8>
 8005c24:	4baf      	ldr	r3, [pc, #700]	@ (8005ee4 <UART_SetConfig+0x354>)
 8005c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c28:	2203      	movs	r2, #3
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	d01d      	beq.n	8005c6c <UART_SetConfig+0xdc>
 8005c30:	d823      	bhi.n	8005c7a <UART_SetConfig+0xea>
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d00c      	beq.n	8005c50 <UART_SetConfig+0xc0>
 8005c36:	d820      	bhi.n	8005c7a <UART_SetConfig+0xea>
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <UART_SetConfig+0xb2>
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d00e      	beq.n	8005c5e <UART_SetConfig+0xce>
 8005c40:	e01b      	b.n	8005c7a <UART_SetConfig+0xea>
 8005c42:	231b      	movs	r3, #27
 8005c44:	2218      	movs	r2, #24
 8005c46:	189b      	adds	r3, r3, r2
 8005c48:	19db      	adds	r3, r3, r7
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	e0b4      	b.n	8005dba <UART_SetConfig+0x22a>
 8005c50:	231b      	movs	r3, #27
 8005c52:	2218      	movs	r2, #24
 8005c54:	189b      	adds	r3, r3, r2
 8005c56:	19db      	adds	r3, r3, r7
 8005c58:	2202      	movs	r2, #2
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	e0ad      	b.n	8005dba <UART_SetConfig+0x22a>
 8005c5e:	231b      	movs	r3, #27
 8005c60:	2218      	movs	r2, #24
 8005c62:	189b      	adds	r3, r3, r2
 8005c64:	19db      	adds	r3, r3, r7
 8005c66:	2204      	movs	r2, #4
 8005c68:	701a      	strb	r2, [r3, #0]
 8005c6a:	e0a6      	b.n	8005dba <UART_SetConfig+0x22a>
 8005c6c:	231b      	movs	r3, #27
 8005c6e:	2218      	movs	r2, #24
 8005c70:	189b      	adds	r3, r3, r2
 8005c72:	19db      	adds	r3, r3, r7
 8005c74:	2208      	movs	r2, #8
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	e09f      	b.n	8005dba <UART_SetConfig+0x22a>
 8005c7a:	231b      	movs	r3, #27
 8005c7c:	2218      	movs	r2, #24
 8005c7e:	189b      	adds	r3, r3, r2
 8005c80:	19db      	adds	r3, r3, r7
 8005c82:	2210      	movs	r2, #16
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	e098      	b.n	8005dba <UART_SetConfig+0x22a>
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a96      	ldr	r2, [pc, #600]	@ (8005ee8 <UART_SetConfig+0x358>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d131      	bne.n	8005cf6 <UART_SetConfig+0x166>
 8005c92:	4b94      	ldr	r3, [pc, #592]	@ (8005ee4 <UART_SetConfig+0x354>)
 8005c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c96:	220c      	movs	r2, #12
 8005c98:	4013      	ands	r3, r2
 8005c9a:	2b0c      	cmp	r3, #12
 8005c9c:	d01d      	beq.n	8005cda <UART_SetConfig+0x14a>
 8005c9e:	d823      	bhi.n	8005ce8 <UART_SetConfig+0x158>
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d00c      	beq.n	8005cbe <UART_SetConfig+0x12e>
 8005ca4:	d820      	bhi.n	8005ce8 <UART_SetConfig+0x158>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <UART_SetConfig+0x120>
 8005caa:	2b04      	cmp	r3, #4
 8005cac:	d00e      	beq.n	8005ccc <UART_SetConfig+0x13c>
 8005cae:	e01b      	b.n	8005ce8 <UART_SetConfig+0x158>
 8005cb0:	231b      	movs	r3, #27
 8005cb2:	2218      	movs	r2, #24
 8005cb4:	189b      	adds	r3, r3, r2
 8005cb6:	19db      	adds	r3, r3, r7
 8005cb8:	2200      	movs	r2, #0
 8005cba:	701a      	strb	r2, [r3, #0]
 8005cbc:	e07d      	b.n	8005dba <UART_SetConfig+0x22a>
 8005cbe:	231b      	movs	r3, #27
 8005cc0:	2218      	movs	r2, #24
 8005cc2:	189b      	adds	r3, r3, r2
 8005cc4:	19db      	adds	r3, r3, r7
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	e076      	b.n	8005dba <UART_SetConfig+0x22a>
 8005ccc:	231b      	movs	r3, #27
 8005cce:	2218      	movs	r2, #24
 8005cd0:	189b      	adds	r3, r3, r2
 8005cd2:	19db      	adds	r3, r3, r7
 8005cd4:	2204      	movs	r2, #4
 8005cd6:	701a      	strb	r2, [r3, #0]
 8005cd8:	e06f      	b.n	8005dba <UART_SetConfig+0x22a>
 8005cda:	231b      	movs	r3, #27
 8005cdc:	2218      	movs	r2, #24
 8005cde:	189b      	adds	r3, r3, r2
 8005ce0:	19db      	adds	r3, r3, r7
 8005ce2:	2208      	movs	r2, #8
 8005ce4:	701a      	strb	r2, [r3, #0]
 8005ce6:	e068      	b.n	8005dba <UART_SetConfig+0x22a>
 8005ce8:	231b      	movs	r3, #27
 8005cea:	2218      	movs	r2, #24
 8005cec:	189b      	adds	r3, r3, r2
 8005cee:	19db      	adds	r3, r3, r7
 8005cf0:	2210      	movs	r2, #16
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	e061      	b.n	8005dba <UART_SetConfig+0x22a>
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a7c      	ldr	r2, [pc, #496]	@ (8005eec <UART_SetConfig+0x35c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d106      	bne.n	8005d0e <UART_SetConfig+0x17e>
 8005d00:	231b      	movs	r3, #27
 8005d02:	2218      	movs	r2, #24
 8005d04:	189b      	adds	r3, r3, r2
 8005d06:	19db      	adds	r3, r3, r7
 8005d08:	2200      	movs	r2, #0
 8005d0a:	701a      	strb	r2, [r3, #0]
 8005d0c:	e055      	b.n	8005dba <UART_SetConfig+0x22a>
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a77      	ldr	r2, [pc, #476]	@ (8005ef0 <UART_SetConfig+0x360>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d106      	bne.n	8005d26 <UART_SetConfig+0x196>
 8005d18:	231b      	movs	r3, #27
 8005d1a:	2218      	movs	r2, #24
 8005d1c:	189b      	adds	r3, r3, r2
 8005d1e:	19db      	adds	r3, r3, r7
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]
 8005d24:	e049      	b.n	8005dba <UART_SetConfig+0x22a>
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a6b      	ldr	r2, [pc, #428]	@ (8005ed8 <UART_SetConfig+0x348>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d13e      	bne.n	8005dae <UART_SetConfig+0x21e>
 8005d30:	4b6c      	ldr	r3, [pc, #432]	@ (8005ee4 <UART_SetConfig+0x354>)
 8005d32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d34:	23c0      	movs	r3, #192	@ 0xc0
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	4013      	ands	r3, r2
 8005d3a:	22c0      	movs	r2, #192	@ 0xc0
 8005d3c:	0112      	lsls	r2, r2, #4
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d027      	beq.n	8005d92 <UART_SetConfig+0x202>
 8005d42:	22c0      	movs	r2, #192	@ 0xc0
 8005d44:	0112      	lsls	r2, r2, #4
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d82a      	bhi.n	8005da0 <UART_SetConfig+0x210>
 8005d4a:	2280      	movs	r2, #128	@ 0x80
 8005d4c:	0112      	lsls	r2, r2, #4
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d011      	beq.n	8005d76 <UART_SetConfig+0x1e6>
 8005d52:	2280      	movs	r2, #128	@ 0x80
 8005d54:	0112      	lsls	r2, r2, #4
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d822      	bhi.n	8005da0 <UART_SetConfig+0x210>
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d004      	beq.n	8005d68 <UART_SetConfig+0x1d8>
 8005d5e:	2280      	movs	r2, #128	@ 0x80
 8005d60:	00d2      	lsls	r2, r2, #3
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00e      	beq.n	8005d84 <UART_SetConfig+0x1f4>
 8005d66:	e01b      	b.n	8005da0 <UART_SetConfig+0x210>
 8005d68:	231b      	movs	r3, #27
 8005d6a:	2218      	movs	r2, #24
 8005d6c:	189b      	adds	r3, r3, r2
 8005d6e:	19db      	adds	r3, r3, r7
 8005d70:	2200      	movs	r2, #0
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	e021      	b.n	8005dba <UART_SetConfig+0x22a>
 8005d76:	231b      	movs	r3, #27
 8005d78:	2218      	movs	r2, #24
 8005d7a:	189b      	adds	r3, r3, r2
 8005d7c:	19db      	adds	r3, r3, r7
 8005d7e:	2202      	movs	r2, #2
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	e01a      	b.n	8005dba <UART_SetConfig+0x22a>
 8005d84:	231b      	movs	r3, #27
 8005d86:	2218      	movs	r2, #24
 8005d88:	189b      	adds	r3, r3, r2
 8005d8a:	19db      	adds	r3, r3, r7
 8005d8c:	2204      	movs	r2, #4
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	e013      	b.n	8005dba <UART_SetConfig+0x22a>
 8005d92:	231b      	movs	r3, #27
 8005d94:	2218      	movs	r2, #24
 8005d96:	189b      	adds	r3, r3, r2
 8005d98:	19db      	adds	r3, r3, r7
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	701a      	strb	r2, [r3, #0]
 8005d9e:	e00c      	b.n	8005dba <UART_SetConfig+0x22a>
 8005da0:	231b      	movs	r3, #27
 8005da2:	2218      	movs	r2, #24
 8005da4:	189b      	adds	r3, r3, r2
 8005da6:	19db      	adds	r3, r3, r7
 8005da8:	2210      	movs	r2, #16
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	e005      	b.n	8005dba <UART_SetConfig+0x22a>
 8005dae:	231b      	movs	r3, #27
 8005db0:	2218      	movs	r2, #24
 8005db2:	189b      	adds	r3, r3, r2
 8005db4:	19db      	adds	r3, r3, r7
 8005db6:	2210      	movs	r2, #16
 8005db8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a46      	ldr	r2, [pc, #280]	@ (8005ed8 <UART_SetConfig+0x348>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d000      	beq.n	8005dc6 <UART_SetConfig+0x236>
 8005dc4:	e09a      	b.n	8005efc <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005dc6:	231b      	movs	r3, #27
 8005dc8:	2218      	movs	r2, #24
 8005dca:	189b      	adds	r3, r3, r2
 8005dcc:	19db      	adds	r3, r3, r7
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b08      	cmp	r3, #8
 8005dd2:	d01d      	beq.n	8005e10 <UART_SetConfig+0x280>
 8005dd4:	dc20      	bgt.n	8005e18 <UART_SetConfig+0x288>
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d015      	beq.n	8005e06 <UART_SetConfig+0x276>
 8005dda:	dc1d      	bgt.n	8005e18 <UART_SetConfig+0x288>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <UART_SetConfig+0x256>
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d005      	beq.n	8005df0 <UART_SetConfig+0x260>
 8005de4:	e018      	b.n	8005e18 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005de6:	f7fe ff85 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8005dea:	0003      	movs	r3, r0
 8005dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005dee:	e01c      	b.n	8005e2a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005df0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ee4 <UART_SetConfig+0x354>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2210      	movs	r2, #16
 8005df6:	4013      	ands	r3, r2
 8005df8:	d002      	beq.n	8005e00 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005dfa:	4b3e      	ldr	r3, [pc, #248]	@ (8005ef4 <UART_SetConfig+0x364>)
 8005dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005dfe:	e014      	b.n	8005e2a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8005e00:	4b3d      	ldr	r3, [pc, #244]	@ (8005ef8 <UART_SetConfig+0x368>)
 8005e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005e04:	e011      	b.n	8005e2a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e06:	f7fe fee5 	bl	8004bd4 <HAL_RCC_GetSysClockFreq>
 8005e0a:	0003      	movs	r3, r0
 8005e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005e0e:	e00c      	b.n	8005e2a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e10:	2380      	movs	r3, #128	@ 0x80
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005e16:	e008      	b.n	8005e2a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005e18:	2300      	movs	r3, #0
 8005e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005e1c:	231a      	movs	r3, #26
 8005e1e:	2218      	movs	r2, #24
 8005e20:	189b      	adds	r3, r3, r2
 8005e22:	19db      	adds	r3, r3, r7
 8005e24:	2201      	movs	r2, #1
 8005e26:	701a      	strb	r2, [r3, #0]
        break;
 8005e28:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d100      	bne.n	8005e32 <UART_SetConfig+0x2a2>
 8005e30:	e133      	b.n	800609a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	685a      	ldr	r2, [r3, #4]
 8005e36:	0013      	movs	r3, r2
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	189b      	adds	r3, r3, r2
 8005e3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d305      	bcc.n	8005e4e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d906      	bls.n	8005e5c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8005e4e:	231a      	movs	r3, #26
 8005e50:	2218      	movs	r2, #24
 8005e52:	189b      	adds	r3, r3, r2
 8005e54:	19db      	adds	r3, r3, r7
 8005e56:	2201      	movs	r2, #1
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	e11e      	b.n	800609a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5e:	613b      	str	r3, [r7, #16]
 8005e60:	2300      	movs	r3, #0
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	6939      	ldr	r1, [r7, #16]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	000b      	movs	r3, r1
 8005e6a:	0e1b      	lsrs	r3, r3, #24
 8005e6c:	0010      	movs	r0, r2
 8005e6e:	0205      	lsls	r5, r0, #8
 8005e70:	431d      	orrs	r5, r3
 8005e72:	000b      	movs	r3, r1
 8005e74:	021c      	lsls	r4, r3, #8
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	085b      	lsrs	r3, r3, #1
 8005e7c:	60bb      	str	r3, [r7, #8]
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	68b8      	ldr	r0, [r7, #8]
 8005e84:	68f9      	ldr	r1, [r7, #12]
 8005e86:	1900      	adds	r0, r0, r4
 8005e88:	4169      	adcs	r1, r5
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	603b      	str	r3, [r7, #0]
 8005e90:	2300      	movs	r3, #0
 8005e92:	607b      	str	r3, [r7, #4]
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f7fa f9d4 	bl	8000244 <__aeabi_uldivmod>
 8005e9c:	0002      	movs	r2, r0
 8005e9e:	000b      	movs	r3, r1
 8005ea0:	0013      	movs	r3, r2
 8005ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ea4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ea6:	23c0      	movs	r3, #192	@ 0xc0
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d309      	bcc.n	8005ec2 <UART_SetConfig+0x332>
 8005eae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eb0:	2380      	movs	r3, #128	@ 0x80
 8005eb2:	035b      	lsls	r3, r3, #13
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d204      	bcs.n	8005ec2 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ebe:	60da      	str	r2, [r3, #12]
 8005ec0:	e0eb      	b.n	800609a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8005ec2:	231a      	movs	r3, #26
 8005ec4:	2218      	movs	r2, #24
 8005ec6:	189b      	adds	r3, r3, r2
 8005ec8:	19db      	adds	r3, r3, r7
 8005eca:	2201      	movs	r2, #1
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	e0e4      	b.n	800609a <UART_SetConfig+0x50a>
 8005ed0:	efff69f3 	.word	0xefff69f3
 8005ed4:	ffffcfff 	.word	0xffffcfff
 8005ed8:	40004800 	.word	0x40004800
 8005edc:	fffff4ff 	.word	0xfffff4ff
 8005ee0:	40013800 	.word	0x40013800
 8005ee4:	40021000 	.word	0x40021000
 8005ee8:	40004400 	.word	0x40004400
 8005eec:	40004c00 	.word	0x40004c00
 8005ef0:	40005000 	.word	0x40005000
 8005ef4:	003d0900 	.word	0x003d0900
 8005ef8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	69da      	ldr	r2, [r3, #28]
 8005f00:	2380      	movs	r3, #128	@ 0x80
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d000      	beq.n	8005f0a <UART_SetConfig+0x37a>
 8005f08:	e070      	b.n	8005fec <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8005f0a:	231b      	movs	r3, #27
 8005f0c:	2218      	movs	r2, #24
 8005f0e:	189b      	adds	r3, r3, r2
 8005f10:	19db      	adds	r3, r3, r7
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b08      	cmp	r3, #8
 8005f16:	d822      	bhi.n	8005f5e <UART_SetConfig+0x3ce>
 8005f18:	009a      	lsls	r2, r3, #2
 8005f1a:	4b67      	ldr	r3, [pc, #412]	@ (80060b8 <UART_SetConfig+0x528>)
 8005f1c:	18d3      	adds	r3, r2, r3
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f22:	f7fe fee7 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8005f26:	0003      	movs	r3, r0
 8005f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005f2a:	e021      	b.n	8005f70 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f2c:	f7fe fef8 	bl	8004d20 <HAL_RCC_GetPCLK2Freq>
 8005f30:	0003      	movs	r3, r0
 8005f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005f34:	e01c      	b.n	8005f70 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f36:	4b61      	ldr	r3, [pc, #388]	@ (80060bc <UART_SetConfig+0x52c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2210      	movs	r2, #16
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	d002      	beq.n	8005f46 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005f40:	4b5f      	ldr	r3, [pc, #380]	@ (80060c0 <UART_SetConfig+0x530>)
 8005f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f44:	e014      	b.n	8005f70 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005f46:	4b5f      	ldr	r3, [pc, #380]	@ (80060c4 <UART_SetConfig+0x534>)
 8005f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005f4a:	e011      	b.n	8005f70 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f4c:	f7fe fe42 	bl	8004bd4 <HAL_RCC_GetSysClockFreq>
 8005f50:	0003      	movs	r3, r0
 8005f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005f54:	e00c      	b.n	8005f70 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f56:	2380      	movs	r3, #128	@ 0x80
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005f5c:	e008      	b.n	8005f70 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005f62:	231a      	movs	r3, #26
 8005f64:	2218      	movs	r2, #24
 8005f66:	189b      	adds	r3, r3, r2
 8005f68:	19db      	adds	r3, r3, r7
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	701a      	strb	r2, [r3, #0]
        break;
 8005f6e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d100      	bne.n	8005f78 <UART_SetConfig+0x3e8>
 8005f76:	e090      	b.n	800609a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7a:	005a      	lsls	r2, r3, #1
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	18d2      	adds	r2, r2, r3
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	0019      	movs	r1, r3
 8005f8a:	0010      	movs	r0, r2
 8005f8c:	f7fa f8ce 	bl	800012c <__udivsi3>
 8005f90:	0003      	movs	r3, r0
 8005f92:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f96:	2b0f      	cmp	r3, #15
 8005f98:	d921      	bls.n	8005fde <UART_SetConfig+0x44e>
 8005f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f9c:	2380      	movs	r3, #128	@ 0x80
 8005f9e:	025b      	lsls	r3, r3, #9
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d21c      	bcs.n	8005fde <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	200e      	movs	r0, #14
 8005faa:	2418      	movs	r4, #24
 8005fac:	1903      	adds	r3, r0, r4
 8005fae:	19db      	adds	r3, r3, r7
 8005fb0:	210f      	movs	r1, #15
 8005fb2:	438a      	bics	r2, r1
 8005fb4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb8:	085b      	lsrs	r3, r3, #1
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2207      	movs	r2, #7
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	b299      	uxth	r1, r3
 8005fc2:	1903      	adds	r3, r0, r4
 8005fc4:	19db      	adds	r3, r3, r7
 8005fc6:	1902      	adds	r2, r0, r4
 8005fc8:	19d2      	adds	r2, r2, r7
 8005fca:	8812      	ldrh	r2, [r2, #0]
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	1902      	adds	r2, r0, r4
 8005fd6:	19d2      	adds	r2, r2, r7
 8005fd8:	8812      	ldrh	r2, [r2, #0]
 8005fda:	60da      	str	r2, [r3, #12]
 8005fdc:	e05d      	b.n	800609a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005fde:	231a      	movs	r3, #26
 8005fe0:	2218      	movs	r2, #24
 8005fe2:	189b      	adds	r3, r3, r2
 8005fe4:	19db      	adds	r3, r3, r7
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	701a      	strb	r2, [r3, #0]
 8005fea:	e056      	b.n	800609a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fec:	231b      	movs	r3, #27
 8005fee:	2218      	movs	r2, #24
 8005ff0:	189b      	adds	r3, r3, r2
 8005ff2:	19db      	adds	r3, r3, r7
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d822      	bhi.n	8006040 <UART_SetConfig+0x4b0>
 8005ffa:	009a      	lsls	r2, r3, #2
 8005ffc:	4b32      	ldr	r3, [pc, #200]	@ (80060c8 <UART_SetConfig+0x538>)
 8005ffe:	18d3      	adds	r3, r2, r3
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006004:	f7fe fe76 	bl	8004cf4 <HAL_RCC_GetPCLK1Freq>
 8006008:	0003      	movs	r3, r0
 800600a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800600c:	e021      	b.n	8006052 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800600e:	f7fe fe87 	bl	8004d20 <HAL_RCC_GetPCLK2Freq>
 8006012:	0003      	movs	r3, r0
 8006014:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006016:	e01c      	b.n	8006052 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006018:	4b28      	ldr	r3, [pc, #160]	@ (80060bc <UART_SetConfig+0x52c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2210      	movs	r2, #16
 800601e:	4013      	ands	r3, r2
 8006020:	d002      	beq.n	8006028 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006022:	4b27      	ldr	r3, [pc, #156]	@ (80060c0 <UART_SetConfig+0x530>)
 8006024:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006026:	e014      	b.n	8006052 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006028:	4b26      	ldr	r3, [pc, #152]	@ (80060c4 <UART_SetConfig+0x534>)
 800602a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800602c:	e011      	b.n	8006052 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800602e:	f7fe fdd1 	bl	8004bd4 <HAL_RCC_GetSysClockFreq>
 8006032:	0003      	movs	r3, r0
 8006034:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006036:	e00c      	b.n	8006052 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006038:	2380      	movs	r3, #128	@ 0x80
 800603a:	021b      	lsls	r3, r3, #8
 800603c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800603e:	e008      	b.n	8006052 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006040:	2300      	movs	r3, #0
 8006042:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8006044:	231a      	movs	r3, #26
 8006046:	2218      	movs	r2, #24
 8006048:	189b      	adds	r3, r3, r2
 800604a:	19db      	adds	r3, r3, r7
 800604c:	2201      	movs	r2, #1
 800604e:	701a      	strb	r2, [r3, #0]
        break;
 8006050:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8006052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006054:	2b00      	cmp	r3, #0
 8006056:	d020      	beq.n	800609a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	085a      	lsrs	r2, r3, #1
 800605e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006060:	18d2      	adds	r2, r2, r3
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	0019      	movs	r1, r3
 8006068:	0010      	movs	r0, r2
 800606a:	f7fa f85f 	bl	800012c <__udivsi3>
 800606e:	0003      	movs	r3, r0
 8006070:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006074:	2b0f      	cmp	r3, #15
 8006076:	d90a      	bls.n	800608e <UART_SetConfig+0x4fe>
 8006078:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800607a:	2380      	movs	r3, #128	@ 0x80
 800607c:	025b      	lsls	r3, r3, #9
 800607e:	429a      	cmp	r2, r3
 8006080:	d205      	bcs.n	800608e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006084:	b29a      	uxth	r2, r3
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60da      	str	r2, [r3, #12]
 800608c:	e005      	b.n	800609a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800608e:	231a      	movs	r3, #26
 8006090:	2218      	movs	r2, #24
 8006092:	189b      	adds	r3, r3, r2
 8006094:	19db      	adds	r3, r3, r7
 8006096:	2201      	movs	r2, #1
 8006098:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	2200      	movs	r2, #0
 800609e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	2200      	movs	r2, #0
 80060a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80060a6:	231a      	movs	r3, #26
 80060a8:	2218      	movs	r2, #24
 80060aa:	189b      	adds	r3, r3, r2
 80060ac:	19db      	adds	r3, r3, r7
 80060ae:	781b      	ldrb	r3, [r3, #0]
}
 80060b0:	0018      	movs	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b00e      	add	sp, #56	@ 0x38
 80060b6:	bdb0      	pop	{r4, r5, r7, pc}
 80060b8:	080076b8 	.word	0x080076b8
 80060bc:	40021000 	.word	0x40021000
 80060c0:	003d0900 	.word	0x003d0900
 80060c4:	00f42400 	.word	0x00f42400
 80060c8:	080076dc 	.word	0x080076dc

080060cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d8:	2208      	movs	r2, #8
 80060da:	4013      	ands	r3, r2
 80060dc:	d00b      	beq.n	80060f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	4a4a      	ldr	r2, [pc, #296]	@ (8006210 <UART_AdvFeatureConfig+0x144>)
 80060e6:	4013      	ands	r3, r2
 80060e8:	0019      	movs	r1, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060fa:	2201      	movs	r2, #1
 80060fc:	4013      	ands	r3, r2
 80060fe:	d00b      	beq.n	8006118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	4a43      	ldr	r2, [pc, #268]	@ (8006214 <UART_AdvFeatureConfig+0x148>)
 8006108:	4013      	ands	r3, r2
 800610a:	0019      	movs	r1, r3
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	430a      	orrs	r2, r1
 8006116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611c:	2202      	movs	r2, #2
 800611e:	4013      	ands	r3, r2
 8006120:	d00b      	beq.n	800613a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	4a3b      	ldr	r2, [pc, #236]	@ (8006218 <UART_AdvFeatureConfig+0x14c>)
 800612a:	4013      	ands	r3, r2
 800612c:	0019      	movs	r1, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	430a      	orrs	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	2204      	movs	r2, #4
 8006140:	4013      	ands	r3, r2
 8006142:	d00b      	beq.n	800615c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	4a34      	ldr	r2, [pc, #208]	@ (800621c <UART_AdvFeatureConfig+0x150>)
 800614c:	4013      	ands	r3, r2
 800614e:	0019      	movs	r1, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	430a      	orrs	r2, r1
 800615a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006160:	2210      	movs	r2, #16
 8006162:	4013      	ands	r3, r2
 8006164:	d00b      	beq.n	800617e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	4a2c      	ldr	r2, [pc, #176]	@ (8006220 <UART_AdvFeatureConfig+0x154>)
 800616e:	4013      	ands	r3, r2
 8006170:	0019      	movs	r1, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	430a      	orrs	r2, r1
 800617c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006182:	2220      	movs	r2, #32
 8006184:	4013      	ands	r3, r2
 8006186:	d00b      	beq.n	80061a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	4a25      	ldr	r2, [pc, #148]	@ (8006224 <UART_AdvFeatureConfig+0x158>)
 8006190:	4013      	ands	r3, r2
 8006192:	0019      	movs	r1, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	430a      	orrs	r2, r1
 800619e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a4:	2240      	movs	r2, #64	@ 0x40
 80061a6:	4013      	ands	r3, r2
 80061a8:	d01d      	beq.n	80061e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4a1d      	ldr	r2, [pc, #116]	@ (8006228 <UART_AdvFeatureConfig+0x15c>)
 80061b2:	4013      	ands	r3, r2
 80061b4:	0019      	movs	r1, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061c6:	2380      	movs	r3, #128	@ 0x80
 80061c8:	035b      	lsls	r3, r3, #13
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d10b      	bne.n	80061e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	4a15      	ldr	r2, [pc, #84]	@ (800622c <UART_AdvFeatureConfig+0x160>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	0019      	movs	r1, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ea:	2280      	movs	r2, #128	@ 0x80
 80061ec:	4013      	ands	r3, r2
 80061ee:	d00b      	beq.n	8006208 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006230 <UART_AdvFeatureConfig+0x164>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	0019      	movs	r1, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	605a      	str	r2, [r3, #4]
  }
}
 8006208:	46c0      	nop			@ (mov r8, r8)
 800620a:	46bd      	mov	sp, r7
 800620c:	b002      	add	sp, #8
 800620e:	bd80      	pop	{r7, pc}
 8006210:	ffff7fff 	.word	0xffff7fff
 8006214:	fffdffff 	.word	0xfffdffff
 8006218:	fffeffff 	.word	0xfffeffff
 800621c:	fffbffff 	.word	0xfffbffff
 8006220:	ffffefff 	.word	0xffffefff
 8006224:	ffffdfff 	.word	0xffffdfff
 8006228:	ffefffff 	.word	0xffefffff
 800622c:	ff9fffff 	.word	0xff9fffff
 8006230:	fff7ffff 	.word	0xfff7ffff

08006234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b092      	sub	sp, #72	@ 0x48
 8006238:	af02      	add	r7, sp, #8
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2284      	movs	r2, #132	@ 0x84
 8006240:	2100      	movs	r1, #0
 8006242:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006244:	f7fb ff92 	bl	800216c <HAL_GetTick>
 8006248:	0003      	movs	r3, r0
 800624a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2208      	movs	r2, #8
 8006254:	4013      	ands	r3, r2
 8006256:	2b08      	cmp	r3, #8
 8006258:	d12c      	bne.n	80062b4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800625a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800625c:	2280      	movs	r2, #128	@ 0x80
 800625e:	0391      	lsls	r1, r2, #14
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	4a46      	ldr	r2, [pc, #280]	@ (800637c <UART_CheckIdleState+0x148>)
 8006264:	9200      	str	r2, [sp, #0]
 8006266:	2200      	movs	r2, #0
 8006268:	f000 f88c 	bl	8006384 <UART_WaitOnFlagUntilTimeout>
 800626c:	1e03      	subs	r3, r0, #0
 800626e:	d021      	beq.n	80062b4 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006270:	f3ef 8310 	mrs	r3, PRIMASK
 8006274:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006278:	63bb      	str	r3, [r7, #56]	@ 0x38
 800627a:	2301      	movs	r3, #1
 800627c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800627e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006280:	f383 8810 	msr	PRIMASK, r3
}
 8006284:	46c0      	nop			@ (mov r8, r8)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2180      	movs	r1, #128	@ 0x80
 8006292:	438a      	bics	r2, r1
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006298:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800629a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629c:	f383 8810 	msr	PRIMASK, r3
}
 80062a0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2220      	movs	r2, #32
 80062a6:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2278      	movs	r2, #120	@ 0x78
 80062ac:	2100      	movs	r1, #0
 80062ae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062b0:	2303      	movs	r3, #3
 80062b2:	e05f      	b.n	8006374 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2204      	movs	r2, #4
 80062bc:	4013      	ands	r3, r2
 80062be:	2b04      	cmp	r3, #4
 80062c0:	d146      	bne.n	8006350 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062c4:	2280      	movs	r2, #128	@ 0x80
 80062c6:	03d1      	lsls	r1, r2, #15
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	4a2c      	ldr	r2, [pc, #176]	@ (800637c <UART_CheckIdleState+0x148>)
 80062cc:	9200      	str	r2, [sp, #0]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f000 f858 	bl	8006384 <UART_WaitOnFlagUntilTimeout>
 80062d4:	1e03      	subs	r3, r0, #0
 80062d6:	d03b      	beq.n	8006350 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062d8:	f3ef 8310 	mrs	r3, PRIMASK
 80062dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80062de:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e2:	2301      	movs	r3, #1
 80062e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	f383 8810 	msr	PRIMASK, r3
}
 80062ec:	46c0      	nop			@ (mov r8, r8)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4921      	ldr	r1, [pc, #132]	@ (8006380 <UART_CheckIdleState+0x14c>)
 80062fa:	400a      	ands	r2, r1
 80062fc:	601a      	str	r2, [r3, #0]
 80062fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006300:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f383 8810 	msr	PRIMASK, r3
}
 8006308:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800630a:	f3ef 8310 	mrs	r3, PRIMASK
 800630e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006310:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006312:	633b      	str	r3, [r7, #48]	@ 0x30
 8006314:	2301      	movs	r3, #1
 8006316:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f383 8810 	msr	PRIMASK, r3
}
 800631e:	46c0      	nop			@ (mov r8, r8)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689a      	ldr	r2, [r3, #8]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2101      	movs	r1, #1
 800632c:	438a      	bics	r2, r1
 800632e:	609a      	str	r2, [r3, #8]
 8006330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006332:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	f383 8810 	msr	PRIMASK, r3
}
 800633a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2280      	movs	r2, #128	@ 0x80
 8006340:	2120      	movs	r1, #32
 8006342:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2278      	movs	r2, #120	@ 0x78
 8006348:	2100      	movs	r1, #0
 800634a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e011      	b.n	8006374 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2280      	movs	r2, #128	@ 0x80
 800635a:	2120      	movs	r1, #32
 800635c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2278      	movs	r2, #120	@ 0x78
 800636e:	2100      	movs	r1, #0
 8006370:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006372:	2300      	movs	r3, #0
}
 8006374:	0018      	movs	r0, r3
 8006376:	46bd      	mov	sp, r7
 8006378:	b010      	add	sp, #64	@ 0x40
 800637a:	bd80      	pop	{r7, pc}
 800637c:	01ffffff 	.word	0x01ffffff
 8006380:	fffffedf 	.word	0xfffffedf

08006384 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	1dfb      	adds	r3, r7, #7
 8006392:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006394:	e051      	b.n	800643a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	3301      	adds	r3, #1
 800639a:	d04e      	beq.n	800643a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800639c:	f7fb fee6 	bl	800216c <HAL_GetTick>
 80063a0:	0002      	movs	r2, r0
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d302      	bcc.n	80063b2 <UART_WaitOnFlagUntilTimeout+0x2e>
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80063b2:	2303      	movs	r3, #3
 80063b4:	e051      	b.n	800645a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2204      	movs	r2, #4
 80063be:	4013      	ands	r3, r2
 80063c0:	d03b      	beq.n	800643a <UART_WaitOnFlagUntilTimeout+0xb6>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b80      	cmp	r3, #128	@ 0x80
 80063c6:	d038      	beq.n	800643a <UART_WaitOnFlagUntilTimeout+0xb6>
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b40      	cmp	r3, #64	@ 0x40
 80063cc:	d035      	beq.n	800643a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69db      	ldr	r3, [r3, #28]
 80063d4:	2208      	movs	r2, #8
 80063d6:	4013      	ands	r3, r2
 80063d8:	2b08      	cmp	r3, #8
 80063da:	d111      	bne.n	8006400 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2208      	movs	r2, #8
 80063e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	0018      	movs	r0, r3
 80063e8:	f000 f83c 	bl	8006464 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2284      	movs	r2, #132	@ 0x84
 80063f0:	2108      	movs	r1, #8
 80063f2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2278      	movs	r2, #120	@ 0x78
 80063f8:	2100      	movs	r1, #0
 80063fa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e02c      	b.n	800645a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69da      	ldr	r2, [r3, #28]
 8006406:	2380      	movs	r3, #128	@ 0x80
 8006408:	011b      	lsls	r3, r3, #4
 800640a:	401a      	ands	r2, r3
 800640c:	2380      	movs	r3, #128	@ 0x80
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	429a      	cmp	r2, r3
 8006412:	d112      	bne.n	800643a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	2280      	movs	r2, #128	@ 0x80
 800641a:	0112      	lsls	r2, r2, #4
 800641c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	0018      	movs	r0, r3
 8006422:	f000 f81f 	bl	8006464 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2284      	movs	r2, #132	@ 0x84
 800642a:	2120      	movs	r1, #32
 800642c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2278      	movs	r2, #120	@ 0x78
 8006432:	2100      	movs	r1, #0
 8006434:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e00f      	b.n	800645a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	69db      	ldr	r3, [r3, #28]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	4013      	ands	r3, r2
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	425a      	negs	r2, r3
 800644a:	4153      	adcs	r3, r2
 800644c:	b2db      	uxtb	r3, r3
 800644e:	001a      	movs	r2, r3
 8006450:	1dfb      	adds	r3, r7, #7
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	429a      	cmp	r2, r3
 8006456:	d09e      	beq.n	8006396 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	0018      	movs	r0, r3
 800645c:	46bd      	mov	sp, r7
 800645e:	b004      	add	sp, #16
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b08e      	sub	sp, #56	@ 0x38
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800646c:	f3ef 8310 	mrs	r3, PRIMASK
 8006470:	617b      	str	r3, [r7, #20]
  return(result);
 8006472:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006474:	637b      	str	r3, [r7, #52]	@ 0x34
 8006476:	2301      	movs	r3, #1
 8006478:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	f383 8810 	msr	PRIMASK, r3
}
 8006480:	46c0      	nop			@ (mov r8, r8)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4926      	ldr	r1, [pc, #152]	@ (8006528 <UART_EndRxTransfer+0xc4>)
 800648e:	400a      	ands	r2, r1
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006494:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f383 8810 	msr	PRIMASK, r3
}
 800649c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800649e:	f3ef 8310 	mrs	r3, PRIMASK
 80064a2:	623b      	str	r3, [r7, #32]
  return(result);
 80064a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80064a8:	2301      	movs	r3, #1
 80064aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ae:	f383 8810 	msr	PRIMASK, r3
}
 80064b2:	46c0      	nop			@ (mov r8, r8)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	2101      	movs	r1, #1
 80064c0:	438a      	bics	r2, r1
 80064c2:	609a      	str	r2, [r3, #8]
 80064c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ca:	f383 8810 	msr	PRIMASK, r3
}
 80064ce:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d118      	bne.n	800650a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064d8:	f3ef 8310 	mrs	r3, PRIMASK
 80064dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80064de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064e2:	2301      	movs	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f383 8810 	msr	PRIMASK, r3
}
 80064ec:	46c0      	nop			@ (mov r8, r8)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2110      	movs	r1, #16
 80064fa:	438a      	bics	r2, r1
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006500:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f383 8810 	msr	PRIMASK, r3
}
 8006508:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2280      	movs	r2, #128	@ 0x80
 800650e:	2120      	movs	r1, #32
 8006510:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800651e:	46c0      	nop			@ (mov r8, r8)
 8006520:	46bd      	mov	sp, r7
 8006522:	b00e      	add	sp, #56	@ 0x38
 8006524:	bd80      	pop	{r7, pc}
 8006526:	46c0      	nop			@ (mov r8, r8)
 8006528:	fffffedf 	.word	0xfffffedf

0800652c <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	603b      	str	r3, [r7, #0]
 8006538:	1dbb      	adds	r3, r7, #6
 800653a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2280      	movs	r2, #128	@ 0x80
 8006540:	589b      	ldr	r3, [r3, r2]
 8006542:	2b20      	cmp	r3, #32
 8006544:	d000      	beq.n	8006548 <HAL_UARTEx_ReceiveToIdle+0x1c>
 8006546:	e109      	b.n	800675c <HAL_UARTEx_ReceiveToIdle+0x230>
  {
    if ((pData == NULL) || (Size == 0U))
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_UARTEx_ReceiveToIdle+0x2a>
 800654e:	1dbb      	adds	r3, r7, #6
 8006550:	881b      	ldrh	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_UARTEx_ReceiveToIdle+0x2e>
    {
      return  HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e101      	b.n	800675e <HAL_UARTEx_ReceiveToIdle+0x232>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	2380      	movs	r3, #128	@ 0x80
 8006560:	015b      	lsls	r3, r3, #5
 8006562:	429a      	cmp	r2, r3
 8006564:	d109      	bne.n	800657a <HAL_UARTEx_ReceiveToIdle+0x4e>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d105      	bne.n	800657a <HAL_UARTEx_ReceiveToIdle+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2201      	movs	r2, #1
 8006572:	4013      	ands	r3, r2
 8006574:	d001      	beq.n	800657a <HAL_UARTEx_ReceiveToIdle+0x4e>
      {
        return  HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e0f1      	b.n	800675e <HAL_UARTEx_ReceiveToIdle+0x232>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2284      	movs	r2, #132	@ 0x84
 800657e:	2100      	movs	r1, #0
 8006580:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2280      	movs	r2, #128	@ 0x80
 8006586:	2122      	movs	r1, #34	@ 0x22
 8006588:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2201      	movs	r2, #1
 800658e:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006596:	f7fb fde9 	bl	800216c <HAL_GetTick>
 800659a:	0003      	movs	r3, r0
 800659c:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	1dba      	adds	r2, r7, #6
 80065a2:	2158      	movs	r1, #88	@ 0x58
 80065a4:	8812      	ldrh	r2, [r2, #0]
 80065a6:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	1dba      	adds	r2, r7, #6
 80065ac:	215a      	movs	r1, #90	@ 0x5a
 80065ae:	8812      	ldrh	r2, [r2, #0]
 80065b0:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	2380      	movs	r3, #128	@ 0x80
 80065b8:	015b      	lsls	r3, r3, #5
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d10d      	bne.n	80065da <HAL_UARTEx_ReceiveToIdle+0xae>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d104      	bne.n	80065d0 <HAL_UARTEx_ReceiveToIdle+0xa4>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	225c      	movs	r2, #92	@ 0x5c
 80065ca:	4967      	ldr	r1, [pc, #412]	@ (8006768 <HAL_UARTEx_ReceiveToIdle+0x23c>)
 80065cc:	5299      	strh	r1, [r3, r2]
 80065ce:	e02e      	b.n	800662e <HAL_UARTEx_ReceiveToIdle+0x102>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	225c      	movs	r2, #92	@ 0x5c
 80065d4:	21ff      	movs	r1, #255	@ 0xff
 80065d6:	5299      	strh	r1, [r3, r2]
 80065d8:	e029      	b.n	800662e <HAL_UARTEx_ReceiveToIdle+0x102>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d10d      	bne.n	80065fe <HAL_UARTEx_ReceiveToIdle+0xd2>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d104      	bne.n	80065f4 <HAL_UARTEx_ReceiveToIdle+0xc8>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	225c      	movs	r2, #92	@ 0x5c
 80065ee:	21ff      	movs	r1, #255	@ 0xff
 80065f0:	5299      	strh	r1, [r3, r2]
 80065f2:	e01c      	b.n	800662e <HAL_UARTEx_ReceiveToIdle+0x102>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	225c      	movs	r2, #92	@ 0x5c
 80065f8:	217f      	movs	r1, #127	@ 0x7f
 80065fa:	5299      	strh	r1, [r3, r2]
 80065fc:	e017      	b.n	800662e <HAL_UARTEx_ReceiveToIdle+0x102>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	689a      	ldr	r2, [r3, #8]
 8006602:	2380      	movs	r3, #128	@ 0x80
 8006604:	055b      	lsls	r3, r3, #21
 8006606:	429a      	cmp	r2, r3
 8006608:	d10d      	bne.n	8006626 <HAL_UARTEx_ReceiveToIdle+0xfa>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d104      	bne.n	800661c <HAL_UARTEx_ReceiveToIdle+0xf0>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	225c      	movs	r2, #92	@ 0x5c
 8006616:	217f      	movs	r1, #127	@ 0x7f
 8006618:	5299      	strh	r1, [r3, r2]
 800661a:	e008      	b.n	800662e <HAL_UARTEx_ReceiveToIdle+0x102>
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	225c      	movs	r2, #92	@ 0x5c
 8006620:	213f      	movs	r1, #63	@ 0x3f
 8006622:	5299      	strh	r1, [r3, r2]
 8006624:	e003      	b.n	800662e <HAL_UARTEx_ReceiveToIdle+0x102>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	225c      	movs	r2, #92	@ 0x5c
 800662a:	2100      	movs	r1, #0
 800662c:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800662e:	2312      	movs	r3, #18
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	215c      	movs	r1, #92	@ 0x5c
 8006636:	5a52      	ldrh	r2, [r2, r1]
 8006638:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	689a      	ldr	r2, [r3, #8]
 800663e:	2380      	movs	r3, #128	@ 0x80
 8006640:	015b      	lsls	r3, r3, #5
 8006642:	429a      	cmp	r2, r3
 8006644:	d108      	bne.n	8006658 <HAL_UARTEx_ReceiveToIdle+0x12c>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d104      	bne.n	8006658 <HAL_UARTEx_ReceiveToIdle+0x12c>
    {
      pdata8bits  = NULL;
 800664e:	2300      	movs	r3, #0
 8006650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	61bb      	str	r3, [r7, #24]
 8006656:	e003      	b.n	8006660 <HAL_UARTEx_ReceiveToIdle+0x134>
    }
    else
    {
      pdata8bits  = pData;
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800665c:	2300      	movs	r3, #0
 800665e:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	2200      	movs	r2, #0
 8006664:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006666:	e062      	b.n	800672e <HAL_UARTEx_ReceiveToIdle+0x202>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	2210      	movs	r2, #16
 8006670:	4013      	ands	r3, r2
 8006672:	2b10      	cmp	r3, #16
 8006674:	d110      	bne.n	8006698 <HAL_UARTEx_ReceiveToIdle+0x16c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2210      	movs	r2, #16
 800667c:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	881b      	ldrh	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d008      	beq.n	8006698 <HAL_UARTEx_ReceiveToIdle+0x16c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2202      	movs	r2, #2
 800668a:	665a      	str	r2, [r3, #100]	@ 0x64
          huart->RxState = HAL_UART_STATE_READY;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2280      	movs	r2, #128	@ 0x80
 8006690:	2120      	movs	r1, #32
 8006692:	5099      	str	r1, [r3, r2]

          return HAL_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	e062      	b.n	800675e <HAL_UARTEx_ReceiveToIdle+0x232>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	2220      	movs	r2, #32
 80066a0:	4013      	ands	r3, r2
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	d12f      	bne.n	8006706 <HAL_UARTEx_ReceiveToIdle+0x1da>
      {
        if (pdata8bits == NULL)
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10e      	bne.n	80066ca <HAL_UARTEx_ReceiveToIdle+0x19e>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	2212      	movs	r2, #18
 80066b6:	18ba      	adds	r2, r7, r2
 80066b8:	8812      	ldrh	r2, [r2, #0]
 80066ba:	4013      	ands	r3, r2
 80066bc:	b29a      	uxth	r2, r3
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	3302      	adds	r3, #2
 80066c6:	61bb      	str	r3, [r7, #24]
 80066c8:	e00e      	b.n	80066e8 <HAL_UARTEx_ReceiveToIdle+0x1bc>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d0:	b2db      	uxtb	r3, r3
 80066d2:	2212      	movs	r2, #18
 80066d4:	18ba      	adds	r2, r7, r2
 80066d6:	8812      	ldrh	r2, [r2, #0]
 80066d8:	b2d2      	uxtb	r2, r2
 80066da:	4013      	ands	r3, r2
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	3301      	adds	r3, #1
 80066e6:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	3301      	adds	r3, #1
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	225a      	movs	r2, #90	@ 0x5a
 80066f8:	5a9b      	ldrh	r3, [r3, r2]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	3b01      	subs	r3, #1
 80066fe:	b299      	uxth	r1, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	225a      	movs	r2, #90	@ 0x5a
 8006704:	5299      	strh	r1, [r3, r2]
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006708:	3301      	adds	r3, #1
 800670a:	d010      	beq.n	800672e <HAL_UARTEx_ReceiveToIdle+0x202>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800670c:	f7fb fd2e 	bl	800216c <HAL_GetTick>
 8006710:	0002      	movs	r2, r0
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006718:	429a      	cmp	r2, r3
 800671a:	d302      	bcc.n	8006722 <HAL_UARTEx_ReceiveToIdle+0x1f6>
 800671c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800671e:	2b00      	cmp	r3, #0
 8006720:	d105      	bne.n	800672e <HAL_UARTEx_ReceiveToIdle+0x202>
        {
          huart->RxState = HAL_UART_STATE_READY;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2280      	movs	r2, #128	@ 0x80
 8006726:	2120      	movs	r1, #32
 8006728:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800672a:	2303      	movs	r3, #3
 800672c:	e017      	b.n	800675e <HAL_UARTEx_ReceiveToIdle+0x232>
    while (huart->RxXferCount > 0U)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	225a      	movs	r2, #90	@ 0x5a
 8006732:	5a9b      	ldrh	r3, [r3, r2]
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d196      	bne.n	8006668 <HAL_UARTEx_ReceiveToIdle+0x13c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2258      	movs	r2, #88	@ 0x58
 800673e:	5a9a      	ldrh	r2, [r3, r2]
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	215a      	movs	r1, #90	@ 0x5a
 8006744:	5a5b      	ldrh	r3, [r3, r1]
 8006746:	b29b      	uxth	r3, r3
 8006748:	1ad3      	subs	r3, r2, r3
 800674a:	b29a      	uxth	r2, r3
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	2280      	movs	r2, #128	@ 0x80
 8006754:	2120      	movs	r1, #32
 8006756:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	e000      	b.n	800675e <HAL_UARTEx_ReceiveToIdle+0x232>
  }
  else
  {
    return HAL_BUSY;
 800675c:	2302      	movs	r3, #2
  }
}
 800675e:	0018      	movs	r0, r3
 8006760:	46bd      	mov	sp, r7
 8006762:	b008      	add	sp, #32
 8006764:	bd80      	pop	{r7, pc}
 8006766:	46c0      	nop			@ (mov r8, r8)
 8006768:	000001ff 	.word	0x000001ff

0800676c <_strtol_l.isra.0>:
 800676c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800676e:	b085      	sub	sp, #20
 8006770:	0017      	movs	r7, r2
 8006772:	001e      	movs	r6, r3
 8006774:	9003      	str	r0, [sp, #12]
 8006776:	9101      	str	r1, [sp, #4]
 8006778:	2b24      	cmp	r3, #36	@ 0x24
 800677a:	d823      	bhi.n	80067c4 <_strtol_l.isra.0+0x58>
 800677c:	000c      	movs	r4, r1
 800677e:	2b01      	cmp	r3, #1
 8006780:	d020      	beq.n	80067c4 <_strtol_l.isra.0+0x58>
 8006782:	4b3d      	ldr	r3, [pc, #244]	@ (8006878 <_strtol_l.isra.0+0x10c>)
 8006784:	2208      	movs	r2, #8
 8006786:	469c      	mov	ip, r3
 8006788:	0023      	movs	r3, r4
 800678a:	4661      	mov	r1, ip
 800678c:	781d      	ldrb	r5, [r3, #0]
 800678e:	3401      	adds	r4, #1
 8006790:	5d48      	ldrb	r0, [r1, r5]
 8006792:	0001      	movs	r1, r0
 8006794:	4011      	ands	r1, r2
 8006796:	4210      	tst	r0, r2
 8006798:	d1f6      	bne.n	8006788 <_strtol_l.isra.0+0x1c>
 800679a:	2d2d      	cmp	r5, #45	@ 0x2d
 800679c:	d119      	bne.n	80067d2 <_strtol_l.isra.0+0x66>
 800679e:	7825      	ldrb	r5, [r4, #0]
 80067a0:	1c9c      	adds	r4, r3, #2
 80067a2:	2301      	movs	r3, #1
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	2210      	movs	r2, #16
 80067a8:	0033      	movs	r3, r6
 80067aa:	4393      	bics	r3, r2
 80067ac:	d11d      	bne.n	80067ea <_strtol_l.isra.0+0x7e>
 80067ae:	2d30      	cmp	r5, #48	@ 0x30
 80067b0:	d115      	bne.n	80067de <_strtol_l.isra.0+0x72>
 80067b2:	2120      	movs	r1, #32
 80067b4:	7823      	ldrb	r3, [r4, #0]
 80067b6:	438b      	bics	r3, r1
 80067b8:	2b58      	cmp	r3, #88	@ 0x58
 80067ba:	d110      	bne.n	80067de <_strtol_l.isra.0+0x72>
 80067bc:	7865      	ldrb	r5, [r4, #1]
 80067be:	3402      	adds	r4, #2
 80067c0:	2610      	movs	r6, #16
 80067c2:	e012      	b.n	80067ea <_strtol_l.isra.0+0x7e>
 80067c4:	f000 f8fe 	bl	80069c4 <__errno>
 80067c8:	2316      	movs	r3, #22
 80067ca:	6003      	str	r3, [r0, #0]
 80067cc:	2000      	movs	r0, #0
 80067ce:	b005      	add	sp, #20
 80067d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d2:	9100      	str	r1, [sp, #0]
 80067d4:	2d2b      	cmp	r5, #43	@ 0x2b
 80067d6:	d1e6      	bne.n	80067a6 <_strtol_l.isra.0+0x3a>
 80067d8:	7825      	ldrb	r5, [r4, #0]
 80067da:	1c9c      	adds	r4, r3, #2
 80067dc:	e7e3      	b.n	80067a6 <_strtol_l.isra.0+0x3a>
 80067de:	2e00      	cmp	r6, #0
 80067e0:	d1ee      	bne.n	80067c0 <_strtol_l.isra.0+0x54>
 80067e2:	360a      	adds	r6, #10
 80067e4:	2d30      	cmp	r5, #48	@ 0x30
 80067e6:	d100      	bne.n	80067ea <_strtol_l.isra.0+0x7e>
 80067e8:	3e02      	subs	r6, #2
 80067ea:	4a24      	ldr	r2, [pc, #144]	@ (800687c <_strtol_l.isra.0+0x110>)
 80067ec:	9b00      	ldr	r3, [sp, #0]
 80067ee:	4694      	mov	ip, r2
 80067f0:	4463      	add	r3, ip
 80067f2:	0031      	movs	r1, r6
 80067f4:	0018      	movs	r0, r3
 80067f6:	9302      	str	r3, [sp, #8]
 80067f8:	f7f9 fd1e 	bl	8000238 <__aeabi_uidivmod>
 80067fc:	2200      	movs	r2, #0
 80067fe:	4684      	mov	ip, r0
 8006800:	0010      	movs	r0, r2
 8006802:	002b      	movs	r3, r5
 8006804:	3b30      	subs	r3, #48	@ 0x30
 8006806:	2b09      	cmp	r3, #9
 8006808:	d811      	bhi.n	800682e <_strtol_l.isra.0+0xc2>
 800680a:	001d      	movs	r5, r3
 800680c:	42ae      	cmp	r6, r5
 800680e:	dd1d      	ble.n	800684c <_strtol_l.isra.0+0xe0>
 8006810:	1c53      	adds	r3, r2, #1
 8006812:	d009      	beq.n	8006828 <_strtol_l.isra.0+0xbc>
 8006814:	2201      	movs	r2, #1
 8006816:	4252      	negs	r2, r2
 8006818:	4584      	cmp	ip, r0
 800681a:	d305      	bcc.n	8006828 <_strtol_l.isra.0+0xbc>
 800681c:	d101      	bne.n	8006822 <_strtol_l.isra.0+0xb6>
 800681e:	42a9      	cmp	r1, r5
 8006820:	db11      	blt.n	8006846 <_strtol_l.isra.0+0xda>
 8006822:	2201      	movs	r2, #1
 8006824:	4370      	muls	r0, r6
 8006826:	1828      	adds	r0, r5, r0
 8006828:	7825      	ldrb	r5, [r4, #0]
 800682a:	3401      	adds	r4, #1
 800682c:	e7e9      	b.n	8006802 <_strtol_l.isra.0+0x96>
 800682e:	002b      	movs	r3, r5
 8006830:	3b41      	subs	r3, #65	@ 0x41
 8006832:	2b19      	cmp	r3, #25
 8006834:	d801      	bhi.n	800683a <_strtol_l.isra.0+0xce>
 8006836:	3d37      	subs	r5, #55	@ 0x37
 8006838:	e7e8      	b.n	800680c <_strtol_l.isra.0+0xa0>
 800683a:	002b      	movs	r3, r5
 800683c:	3b61      	subs	r3, #97	@ 0x61
 800683e:	2b19      	cmp	r3, #25
 8006840:	d804      	bhi.n	800684c <_strtol_l.isra.0+0xe0>
 8006842:	3d57      	subs	r5, #87	@ 0x57
 8006844:	e7e2      	b.n	800680c <_strtol_l.isra.0+0xa0>
 8006846:	2201      	movs	r2, #1
 8006848:	4252      	negs	r2, r2
 800684a:	e7ed      	b.n	8006828 <_strtol_l.isra.0+0xbc>
 800684c:	1c53      	adds	r3, r2, #1
 800684e:	d108      	bne.n	8006862 <_strtol_l.isra.0+0xf6>
 8006850:	2322      	movs	r3, #34	@ 0x22
 8006852:	9a03      	ldr	r2, [sp, #12]
 8006854:	9802      	ldr	r0, [sp, #8]
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	2f00      	cmp	r7, #0
 800685a:	d0b8      	beq.n	80067ce <_strtol_l.isra.0+0x62>
 800685c:	1e63      	subs	r3, r4, #1
 800685e:	9301      	str	r3, [sp, #4]
 8006860:	e007      	b.n	8006872 <_strtol_l.isra.0+0x106>
 8006862:	9b00      	ldr	r3, [sp, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d000      	beq.n	800686a <_strtol_l.isra.0+0xfe>
 8006868:	4240      	negs	r0, r0
 800686a:	2f00      	cmp	r7, #0
 800686c:	d0af      	beq.n	80067ce <_strtol_l.isra.0+0x62>
 800686e:	2a00      	cmp	r2, #0
 8006870:	d1f4      	bne.n	800685c <_strtol_l.isra.0+0xf0>
 8006872:	9b01      	ldr	r3, [sp, #4]
 8006874:	603b      	str	r3, [r7, #0]
 8006876:	e7aa      	b.n	80067ce <_strtol_l.isra.0+0x62>
 8006878:	08007701 	.word	0x08007701
 800687c:	7fffffff 	.word	0x7fffffff

08006880 <strtol>:
 8006880:	b510      	push	{r4, lr}
 8006882:	4c04      	ldr	r4, [pc, #16]	@ (8006894 <strtol+0x14>)
 8006884:	0013      	movs	r3, r2
 8006886:	000a      	movs	r2, r1
 8006888:	0001      	movs	r1, r0
 800688a:	6820      	ldr	r0, [r4, #0]
 800688c:	f7ff ff6e 	bl	800676c <_strtol_l.isra.0>
 8006890:	bd10      	pop	{r4, pc}
 8006892:	46c0      	nop			@ (mov r8, r8)
 8006894:	2000000c 	.word	0x2000000c

08006898 <isspace>:
 8006898:	4b02      	ldr	r3, [pc, #8]	@ (80068a4 <isspace+0xc>)
 800689a:	181b      	adds	r3, r3, r0
 800689c:	7858      	ldrb	r0, [r3, #1]
 800689e:	2308      	movs	r3, #8
 80068a0:	4018      	ands	r0, r3
 80068a2:	4770      	bx	lr
 80068a4:	08007700 	.word	0x08007700

080068a8 <sniprintf>:
 80068a8:	b40c      	push	{r2, r3}
 80068aa:	b530      	push	{r4, r5, lr}
 80068ac:	4b18      	ldr	r3, [pc, #96]	@ (8006910 <sniprintf+0x68>)
 80068ae:	000c      	movs	r4, r1
 80068b0:	681d      	ldr	r5, [r3, #0]
 80068b2:	b09d      	sub	sp, #116	@ 0x74
 80068b4:	2900      	cmp	r1, #0
 80068b6:	da08      	bge.n	80068ca <sniprintf+0x22>
 80068b8:	238b      	movs	r3, #139	@ 0x8b
 80068ba:	2001      	movs	r0, #1
 80068bc:	602b      	str	r3, [r5, #0]
 80068be:	4240      	negs	r0, r0
 80068c0:	b01d      	add	sp, #116	@ 0x74
 80068c2:	bc30      	pop	{r4, r5}
 80068c4:	bc08      	pop	{r3}
 80068c6:	b002      	add	sp, #8
 80068c8:	4718      	bx	r3
 80068ca:	2382      	movs	r3, #130	@ 0x82
 80068cc:	466a      	mov	r2, sp
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	8293      	strh	r3, [r2, #20]
 80068d2:	2300      	movs	r3, #0
 80068d4:	9002      	str	r0, [sp, #8]
 80068d6:	931b      	str	r3, [sp, #108]	@ 0x6c
 80068d8:	9006      	str	r0, [sp, #24]
 80068da:	4299      	cmp	r1, r3
 80068dc:	d000      	beq.n	80068e0 <sniprintf+0x38>
 80068de:	1e4b      	subs	r3, r1, #1
 80068e0:	9304      	str	r3, [sp, #16]
 80068e2:	9307      	str	r3, [sp, #28]
 80068e4:	2301      	movs	r3, #1
 80068e6:	466a      	mov	r2, sp
 80068e8:	425b      	negs	r3, r3
 80068ea:	82d3      	strh	r3, [r2, #22]
 80068ec:	0028      	movs	r0, r5
 80068ee:	ab21      	add	r3, sp, #132	@ 0x84
 80068f0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80068f2:	a902      	add	r1, sp, #8
 80068f4:	9301      	str	r3, [sp, #4]
 80068f6:	f000 f9ed 	bl	8006cd4 <_svfiprintf_r>
 80068fa:	1c43      	adds	r3, r0, #1
 80068fc:	da01      	bge.n	8006902 <sniprintf+0x5a>
 80068fe:	238b      	movs	r3, #139	@ 0x8b
 8006900:	602b      	str	r3, [r5, #0]
 8006902:	2c00      	cmp	r4, #0
 8006904:	d0dc      	beq.n	80068c0 <sniprintf+0x18>
 8006906:	2200      	movs	r2, #0
 8006908:	9b02      	ldr	r3, [sp, #8]
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	e7d8      	b.n	80068c0 <sniprintf+0x18>
 800690e:	46c0      	nop			@ (mov r8, r8)
 8006910:	2000000c 	.word	0x2000000c

08006914 <_vsniprintf_r>:
 8006914:	b530      	push	{r4, r5, lr}
 8006916:	0005      	movs	r5, r0
 8006918:	0014      	movs	r4, r2
 800691a:	0008      	movs	r0, r1
 800691c:	001a      	movs	r2, r3
 800691e:	b09b      	sub	sp, #108	@ 0x6c
 8006920:	2c00      	cmp	r4, #0
 8006922:	da05      	bge.n	8006930 <_vsniprintf_r+0x1c>
 8006924:	238b      	movs	r3, #139	@ 0x8b
 8006926:	2001      	movs	r0, #1
 8006928:	602b      	str	r3, [r5, #0]
 800692a:	4240      	negs	r0, r0
 800692c:	b01b      	add	sp, #108	@ 0x6c
 800692e:	bd30      	pop	{r4, r5, pc}
 8006930:	2382      	movs	r3, #130	@ 0x82
 8006932:	4669      	mov	r1, sp
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	818b      	strh	r3, [r1, #12]
 8006938:	2100      	movs	r1, #0
 800693a:	9000      	str	r0, [sp, #0]
 800693c:	9119      	str	r1, [sp, #100]	@ 0x64
 800693e:	9004      	str	r0, [sp, #16]
 8006940:	428c      	cmp	r4, r1
 8006942:	d000      	beq.n	8006946 <_vsniprintf_r+0x32>
 8006944:	1e61      	subs	r1, r4, #1
 8006946:	2301      	movs	r3, #1
 8006948:	9102      	str	r1, [sp, #8]
 800694a:	9105      	str	r1, [sp, #20]
 800694c:	4669      	mov	r1, sp
 800694e:	425b      	negs	r3, r3
 8006950:	81cb      	strh	r3, [r1, #14]
 8006952:	0028      	movs	r0, r5
 8006954:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006956:	f000 f9bd 	bl	8006cd4 <_svfiprintf_r>
 800695a:	1c43      	adds	r3, r0, #1
 800695c:	da01      	bge.n	8006962 <_vsniprintf_r+0x4e>
 800695e:	238b      	movs	r3, #139	@ 0x8b
 8006960:	602b      	str	r3, [r5, #0]
 8006962:	2c00      	cmp	r4, #0
 8006964:	d0e2      	beq.n	800692c <_vsniprintf_r+0x18>
 8006966:	2200      	movs	r2, #0
 8006968:	9b00      	ldr	r3, [sp, #0]
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	e7de      	b.n	800692c <_vsniprintf_r+0x18>
	...

08006970 <vsniprintf>:
 8006970:	b513      	push	{r0, r1, r4, lr}
 8006972:	4c04      	ldr	r4, [pc, #16]	@ (8006984 <vsniprintf+0x14>)
 8006974:	9300      	str	r3, [sp, #0]
 8006976:	0013      	movs	r3, r2
 8006978:	000a      	movs	r2, r1
 800697a:	0001      	movs	r1, r0
 800697c:	6820      	ldr	r0, [r4, #0]
 800697e:	f7ff ffc9 	bl	8006914 <_vsniprintf_r>
 8006982:	bd16      	pop	{r1, r2, r4, pc}
 8006984:	2000000c 	.word	0x2000000c

08006988 <memset>:
 8006988:	0003      	movs	r3, r0
 800698a:	1882      	adds	r2, r0, r2
 800698c:	4293      	cmp	r3, r2
 800698e:	d100      	bne.n	8006992 <memset+0xa>
 8006990:	4770      	bx	lr
 8006992:	7019      	strb	r1, [r3, #0]
 8006994:	3301      	adds	r3, #1
 8006996:	e7f9      	b.n	800698c <memset+0x4>

08006998 <strstr>:
 8006998:	780a      	ldrb	r2, [r1, #0]
 800699a:	b530      	push	{r4, r5, lr}
 800699c:	2a00      	cmp	r2, #0
 800699e:	d10c      	bne.n	80069ba <strstr+0x22>
 80069a0:	bd30      	pop	{r4, r5, pc}
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d108      	bne.n	80069b8 <strstr+0x20>
 80069a6:	2301      	movs	r3, #1
 80069a8:	5ccc      	ldrb	r4, [r1, r3]
 80069aa:	2c00      	cmp	r4, #0
 80069ac:	d0f8      	beq.n	80069a0 <strstr+0x8>
 80069ae:	5cc5      	ldrb	r5, [r0, r3]
 80069b0:	42a5      	cmp	r5, r4
 80069b2:	d101      	bne.n	80069b8 <strstr+0x20>
 80069b4:	3301      	adds	r3, #1
 80069b6:	e7f7      	b.n	80069a8 <strstr+0x10>
 80069b8:	3001      	adds	r0, #1
 80069ba:	7803      	ldrb	r3, [r0, #0]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d1f0      	bne.n	80069a2 <strstr+0xa>
 80069c0:	0018      	movs	r0, r3
 80069c2:	e7ed      	b.n	80069a0 <strstr+0x8>

080069c4 <__errno>:
 80069c4:	4b01      	ldr	r3, [pc, #4]	@ (80069cc <__errno+0x8>)
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	4770      	bx	lr
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	2000000c 	.word	0x2000000c

080069d0 <__libc_init_array>:
 80069d0:	b570      	push	{r4, r5, r6, lr}
 80069d2:	2600      	movs	r6, #0
 80069d4:	4c0c      	ldr	r4, [pc, #48]	@ (8006a08 <__libc_init_array+0x38>)
 80069d6:	4d0d      	ldr	r5, [pc, #52]	@ (8006a0c <__libc_init_array+0x3c>)
 80069d8:	1b64      	subs	r4, r4, r5
 80069da:	10a4      	asrs	r4, r4, #2
 80069dc:	42a6      	cmp	r6, r4
 80069de:	d109      	bne.n	80069f4 <__libc_init_array+0x24>
 80069e0:	2600      	movs	r6, #0
 80069e2:	f000 fc61 	bl	80072a8 <_init>
 80069e6:	4c0a      	ldr	r4, [pc, #40]	@ (8006a10 <__libc_init_array+0x40>)
 80069e8:	4d0a      	ldr	r5, [pc, #40]	@ (8006a14 <__libc_init_array+0x44>)
 80069ea:	1b64      	subs	r4, r4, r5
 80069ec:	10a4      	asrs	r4, r4, #2
 80069ee:	42a6      	cmp	r6, r4
 80069f0:	d105      	bne.n	80069fe <__libc_init_array+0x2e>
 80069f2:	bd70      	pop	{r4, r5, r6, pc}
 80069f4:	00b3      	lsls	r3, r6, #2
 80069f6:	58eb      	ldr	r3, [r5, r3]
 80069f8:	4798      	blx	r3
 80069fa:	3601      	adds	r6, #1
 80069fc:	e7ee      	b.n	80069dc <__libc_init_array+0xc>
 80069fe:	00b3      	lsls	r3, r6, #2
 8006a00:	58eb      	ldr	r3, [r5, r3]
 8006a02:	4798      	blx	r3
 8006a04:	3601      	adds	r6, #1
 8006a06:	e7f2      	b.n	80069ee <__libc_init_array+0x1e>
 8006a08:	0800783c 	.word	0x0800783c
 8006a0c:	0800783c 	.word	0x0800783c
 8006a10:	08007840 	.word	0x08007840
 8006a14:	0800783c 	.word	0x0800783c

08006a18 <__retarget_lock_acquire_recursive>:
 8006a18:	4770      	bx	lr

08006a1a <__retarget_lock_release_recursive>:
 8006a1a:	4770      	bx	lr

08006a1c <_free_r>:
 8006a1c:	b570      	push	{r4, r5, r6, lr}
 8006a1e:	0005      	movs	r5, r0
 8006a20:	1e0c      	subs	r4, r1, #0
 8006a22:	d010      	beq.n	8006a46 <_free_r+0x2a>
 8006a24:	3c04      	subs	r4, #4
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	da00      	bge.n	8006a2e <_free_r+0x12>
 8006a2c:	18e4      	adds	r4, r4, r3
 8006a2e:	0028      	movs	r0, r5
 8006a30:	f000 f8e0 	bl	8006bf4 <__malloc_lock>
 8006a34:	4a1d      	ldr	r2, [pc, #116]	@ (8006aac <_free_r+0x90>)
 8006a36:	6813      	ldr	r3, [r2, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d105      	bne.n	8006a48 <_free_r+0x2c>
 8006a3c:	6063      	str	r3, [r4, #4]
 8006a3e:	6014      	str	r4, [r2, #0]
 8006a40:	0028      	movs	r0, r5
 8006a42:	f000 f8df 	bl	8006c04 <__malloc_unlock>
 8006a46:	bd70      	pop	{r4, r5, r6, pc}
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d908      	bls.n	8006a5e <_free_r+0x42>
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	1821      	adds	r1, r4, r0
 8006a50:	428b      	cmp	r3, r1
 8006a52:	d1f3      	bne.n	8006a3c <_free_r+0x20>
 8006a54:	6819      	ldr	r1, [r3, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	1809      	adds	r1, r1, r0
 8006a5a:	6021      	str	r1, [r4, #0]
 8006a5c:	e7ee      	b.n	8006a3c <_free_r+0x20>
 8006a5e:	001a      	movs	r2, r3
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d001      	beq.n	8006a6a <_free_r+0x4e>
 8006a66:	42a3      	cmp	r3, r4
 8006a68:	d9f9      	bls.n	8006a5e <_free_r+0x42>
 8006a6a:	6811      	ldr	r1, [r2, #0]
 8006a6c:	1850      	adds	r0, r2, r1
 8006a6e:	42a0      	cmp	r0, r4
 8006a70:	d10b      	bne.n	8006a8a <_free_r+0x6e>
 8006a72:	6820      	ldr	r0, [r4, #0]
 8006a74:	1809      	adds	r1, r1, r0
 8006a76:	1850      	adds	r0, r2, r1
 8006a78:	6011      	str	r1, [r2, #0]
 8006a7a:	4283      	cmp	r3, r0
 8006a7c:	d1e0      	bne.n	8006a40 <_free_r+0x24>
 8006a7e:	6818      	ldr	r0, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	1841      	adds	r1, r0, r1
 8006a84:	6011      	str	r1, [r2, #0]
 8006a86:	6053      	str	r3, [r2, #4]
 8006a88:	e7da      	b.n	8006a40 <_free_r+0x24>
 8006a8a:	42a0      	cmp	r0, r4
 8006a8c:	d902      	bls.n	8006a94 <_free_r+0x78>
 8006a8e:	230c      	movs	r3, #12
 8006a90:	602b      	str	r3, [r5, #0]
 8006a92:	e7d5      	b.n	8006a40 <_free_r+0x24>
 8006a94:	6820      	ldr	r0, [r4, #0]
 8006a96:	1821      	adds	r1, r4, r0
 8006a98:	428b      	cmp	r3, r1
 8006a9a:	d103      	bne.n	8006aa4 <_free_r+0x88>
 8006a9c:	6819      	ldr	r1, [r3, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	1809      	adds	r1, r1, r0
 8006aa2:	6021      	str	r1, [r4, #0]
 8006aa4:	6063      	str	r3, [r4, #4]
 8006aa6:	6054      	str	r4, [r2, #4]
 8006aa8:	e7ca      	b.n	8006a40 <_free_r+0x24>
 8006aaa:	46c0      	nop			@ (mov r8, r8)
 8006aac:	200003c8 	.word	0x200003c8

08006ab0 <sbrk_aligned>:
 8006ab0:	b570      	push	{r4, r5, r6, lr}
 8006ab2:	4e0f      	ldr	r6, [pc, #60]	@ (8006af0 <sbrk_aligned+0x40>)
 8006ab4:	000d      	movs	r5, r1
 8006ab6:	6831      	ldr	r1, [r6, #0]
 8006ab8:	0004      	movs	r4, r0
 8006aba:	2900      	cmp	r1, #0
 8006abc:	d102      	bne.n	8006ac4 <sbrk_aligned+0x14>
 8006abe:	f000 fb95 	bl	80071ec <_sbrk_r>
 8006ac2:	6030      	str	r0, [r6, #0]
 8006ac4:	0029      	movs	r1, r5
 8006ac6:	0020      	movs	r0, r4
 8006ac8:	f000 fb90 	bl	80071ec <_sbrk_r>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d103      	bne.n	8006ad8 <sbrk_aligned+0x28>
 8006ad0:	2501      	movs	r5, #1
 8006ad2:	426d      	negs	r5, r5
 8006ad4:	0028      	movs	r0, r5
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}
 8006ad8:	2303      	movs	r3, #3
 8006ada:	1cc5      	adds	r5, r0, #3
 8006adc:	439d      	bics	r5, r3
 8006ade:	42a8      	cmp	r0, r5
 8006ae0:	d0f8      	beq.n	8006ad4 <sbrk_aligned+0x24>
 8006ae2:	1a29      	subs	r1, r5, r0
 8006ae4:	0020      	movs	r0, r4
 8006ae6:	f000 fb81 	bl	80071ec <_sbrk_r>
 8006aea:	3001      	adds	r0, #1
 8006aec:	d1f2      	bne.n	8006ad4 <sbrk_aligned+0x24>
 8006aee:	e7ef      	b.n	8006ad0 <sbrk_aligned+0x20>
 8006af0:	200003c4 	.word	0x200003c4

08006af4 <_malloc_r>:
 8006af4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006af6:	2203      	movs	r2, #3
 8006af8:	1ccb      	adds	r3, r1, #3
 8006afa:	4393      	bics	r3, r2
 8006afc:	3308      	adds	r3, #8
 8006afe:	0005      	movs	r5, r0
 8006b00:	001f      	movs	r7, r3
 8006b02:	2b0c      	cmp	r3, #12
 8006b04:	d234      	bcs.n	8006b70 <_malloc_r+0x7c>
 8006b06:	270c      	movs	r7, #12
 8006b08:	42b9      	cmp	r1, r7
 8006b0a:	d833      	bhi.n	8006b74 <_malloc_r+0x80>
 8006b0c:	0028      	movs	r0, r5
 8006b0e:	f000 f871 	bl	8006bf4 <__malloc_lock>
 8006b12:	4e37      	ldr	r6, [pc, #220]	@ (8006bf0 <_malloc_r+0xfc>)
 8006b14:	6833      	ldr	r3, [r6, #0]
 8006b16:	001c      	movs	r4, r3
 8006b18:	2c00      	cmp	r4, #0
 8006b1a:	d12f      	bne.n	8006b7c <_malloc_r+0x88>
 8006b1c:	0039      	movs	r1, r7
 8006b1e:	0028      	movs	r0, r5
 8006b20:	f7ff ffc6 	bl	8006ab0 <sbrk_aligned>
 8006b24:	0004      	movs	r4, r0
 8006b26:	1c43      	adds	r3, r0, #1
 8006b28:	d15f      	bne.n	8006bea <_malloc_r+0xf6>
 8006b2a:	6834      	ldr	r4, [r6, #0]
 8006b2c:	9400      	str	r4, [sp, #0]
 8006b2e:	9b00      	ldr	r3, [sp, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d14a      	bne.n	8006bca <_malloc_r+0xd6>
 8006b34:	2c00      	cmp	r4, #0
 8006b36:	d052      	beq.n	8006bde <_malloc_r+0xea>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	0028      	movs	r0, r5
 8006b3c:	18e3      	adds	r3, r4, r3
 8006b3e:	9900      	ldr	r1, [sp, #0]
 8006b40:	9301      	str	r3, [sp, #4]
 8006b42:	f000 fb53 	bl	80071ec <_sbrk_r>
 8006b46:	9b01      	ldr	r3, [sp, #4]
 8006b48:	4283      	cmp	r3, r0
 8006b4a:	d148      	bne.n	8006bde <_malloc_r+0xea>
 8006b4c:	6823      	ldr	r3, [r4, #0]
 8006b4e:	0028      	movs	r0, r5
 8006b50:	1aff      	subs	r7, r7, r3
 8006b52:	0039      	movs	r1, r7
 8006b54:	f7ff ffac 	bl	8006ab0 <sbrk_aligned>
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d040      	beq.n	8006bde <_malloc_r+0xea>
 8006b5c:	6823      	ldr	r3, [r4, #0]
 8006b5e:	19db      	adds	r3, r3, r7
 8006b60:	6023      	str	r3, [r4, #0]
 8006b62:	6833      	ldr	r3, [r6, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	2a00      	cmp	r2, #0
 8006b68:	d133      	bne.n	8006bd2 <_malloc_r+0xde>
 8006b6a:	9b00      	ldr	r3, [sp, #0]
 8006b6c:	6033      	str	r3, [r6, #0]
 8006b6e:	e019      	b.n	8006ba4 <_malloc_r+0xb0>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	dac9      	bge.n	8006b08 <_malloc_r+0x14>
 8006b74:	230c      	movs	r3, #12
 8006b76:	602b      	str	r3, [r5, #0]
 8006b78:	2000      	movs	r0, #0
 8006b7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b7c:	6821      	ldr	r1, [r4, #0]
 8006b7e:	1bc9      	subs	r1, r1, r7
 8006b80:	d420      	bmi.n	8006bc4 <_malloc_r+0xd0>
 8006b82:	290b      	cmp	r1, #11
 8006b84:	d90a      	bls.n	8006b9c <_malloc_r+0xa8>
 8006b86:	19e2      	adds	r2, r4, r7
 8006b88:	6027      	str	r7, [r4, #0]
 8006b8a:	42a3      	cmp	r3, r4
 8006b8c:	d104      	bne.n	8006b98 <_malloc_r+0xa4>
 8006b8e:	6032      	str	r2, [r6, #0]
 8006b90:	6863      	ldr	r3, [r4, #4]
 8006b92:	6011      	str	r1, [r2, #0]
 8006b94:	6053      	str	r3, [r2, #4]
 8006b96:	e005      	b.n	8006ba4 <_malloc_r+0xb0>
 8006b98:	605a      	str	r2, [r3, #4]
 8006b9a:	e7f9      	b.n	8006b90 <_malloc_r+0x9c>
 8006b9c:	6862      	ldr	r2, [r4, #4]
 8006b9e:	42a3      	cmp	r3, r4
 8006ba0:	d10e      	bne.n	8006bc0 <_malloc_r+0xcc>
 8006ba2:	6032      	str	r2, [r6, #0]
 8006ba4:	0028      	movs	r0, r5
 8006ba6:	f000 f82d 	bl	8006c04 <__malloc_unlock>
 8006baa:	0020      	movs	r0, r4
 8006bac:	2207      	movs	r2, #7
 8006bae:	300b      	adds	r0, #11
 8006bb0:	1d23      	adds	r3, r4, #4
 8006bb2:	4390      	bics	r0, r2
 8006bb4:	1ac2      	subs	r2, r0, r3
 8006bb6:	4298      	cmp	r0, r3
 8006bb8:	d0df      	beq.n	8006b7a <_malloc_r+0x86>
 8006bba:	1a1b      	subs	r3, r3, r0
 8006bbc:	50a3      	str	r3, [r4, r2]
 8006bbe:	e7dc      	b.n	8006b7a <_malloc_r+0x86>
 8006bc0:	605a      	str	r2, [r3, #4]
 8006bc2:	e7ef      	b.n	8006ba4 <_malloc_r+0xb0>
 8006bc4:	0023      	movs	r3, r4
 8006bc6:	6864      	ldr	r4, [r4, #4]
 8006bc8:	e7a6      	b.n	8006b18 <_malloc_r+0x24>
 8006bca:	9c00      	ldr	r4, [sp, #0]
 8006bcc:	6863      	ldr	r3, [r4, #4]
 8006bce:	9300      	str	r3, [sp, #0]
 8006bd0:	e7ad      	b.n	8006b2e <_malloc_r+0x3a>
 8006bd2:	001a      	movs	r2, r3
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	42a3      	cmp	r3, r4
 8006bd8:	d1fb      	bne.n	8006bd2 <_malloc_r+0xde>
 8006bda:	2300      	movs	r3, #0
 8006bdc:	e7da      	b.n	8006b94 <_malloc_r+0xa0>
 8006bde:	230c      	movs	r3, #12
 8006be0:	0028      	movs	r0, r5
 8006be2:	602b      	str	r3, [r5, #0]
 8006be4:	f000 f80e 	bl	8006c04 <__malloc_unlock>
 8006be8:	e7c6      	b.n	8006b78 <_malloc_r+0x84>
 8006bea:	6007      	str	r7, [r0, #0]
 8006bec:	e7da      	b.n	8006ba4 <_malloc_r+0xb0>
 8006bee:	46c0      	nop			@ (mov r8, r8)
 8006bf0:	200003c8 	.word	0x200003c8

08006bf4 <__malloc_lock>:
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	4802      	ldr	r0, [pc, #8]	@ (8006c00 <__malloc_lock+0xc>)
 8006bf8:	f7ff ff0e 	bl	8006a18 <__retarget_lock_acquire_recursive>
 8006bfc:	bd10      	pop	{r4, pc}
 8006bfe:	46c0      	nop			@ (mov r8, r8)
 8006c00:	200003c0 	.word	0x200003c0

08006c04 <__malloc_unlock>:
 8006c04:	b510      	push	{r4, lr}
 8006c06:	4802      	ldr	r0, [pc, #8]	@ (8006c10 <__malloc_unlock+0xc>)
 8006c08:	f7ff ff07 	bl	8006a1a <__retarget_lock_release_recursive>
 8006c0c:	bd10      	pop	{r4, pc}
 8006c0e:	46c0      	nop			@ (mov r8, r8)
 8006c10:	200003c0 	.word	0x200003c0

08006c14 <__ssputs_r>:
 8006c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c16:	688e      	ldr	r6, [r1, #8]
 8006c18:	b085      	sub	sp, #20
 8006c1a:	001f      	movs	r7, r3
 8006c1c:	000c      	movs	r4, r1
 8006c1e:	680b      	ldr	r3, [r1, #0]
 8006c20:	9002      	str	r0, [sp, #8]
 8006c22:	9203      	str	r2, [sp, #12]
 8006c24:	42be      	cmp	r6, r7
 8006c26:	d830      	bhi.n	8006c8a <__ssputs_r+0x76>
 8006c28:	210c      	movs	r1, #12
 8006c2a:	5e62      	ldrsh	r2, [r4, r1]
 8006c2c:	2190      	movs	r1, #144	@ 0x90
 8006c2e:	00c9      	lsls	r1, r1, #3
 8006c30:	420a      	tst	r2, r1
 8006c32:	d028      	beq.n	8006c86 <__ssputs_r+0x72>
 8006c34:	2003      	movs	r0, #3
 8006c36:	6921      	ldr	r1, [r4, #16]
 8006c38:	1a5b      	subs	r3, r3, r1
 8006c3a:	9301      	str	r3, [sp, #4]
 8006c3c:	6963      	ldr	r3, [r4, #20]
 8006c3e:	4343      	muls	r3, r0
 8006c40:	9801      	ldr	r0, [sp, #4]
 8006c42:	0fdd      	lsrs	r5, r3, #31
 8006c44:	18ed      	adds	r5, r5, r3
 8006c46:	1c7b      	adds	r3, r7, #1
 8006c48:	181b      	adds	r3, r3, r0
 8006c4a:	106d      	asrs	r5, r5, #1
 8006c4c:	42ab      	cmp	r3, r5
 8006c4e:	d900      	bls.n	8006c52 <__ssputs_r+0x3e>
 8006c50:	001d      	movs	r5, r3
 8006c52:	0552      	lsls	r2, r2, #21
 8006c54:	d528      	bpl.n	8006ca8 <__ssputs_r+0x94>
 8006c56:	0029      	movs	r1, r5
 8006c58:	9802      	ldr	r0, [sp, #8]
 8006c5a:	f7ff ff4b 	bl	8006af4 <_malloc_r>
 8006c5e:	1e06      	subs	r6, r0, #0
 8006c60:	d02c      	beq.n	8006cbc <__ssputs_r+0xa8>
 8006c62:	9a01      	ldr	r2, [sp, #4]
 8006c64:	6921      	ldr	r1, [r4, #16]
 8006c66:	f000 fade 	bl	8007226 <memcpy>
 8006c6a:	89a2      	ldrh	r2, [r4, #12]
 8006c6c:	4b18      	ldr	r3, [pc, #96]	@ (8006cd0 <__ssputs_r+0xbc>)
 8006c6e:	401a      	ands	r2, r3
 8006c70:	2380      	movs	r3, #128	@ 0x80
 8006c72:	4313      	orrs	r3, r2
 8006c74:	81a3      	strh	r3, [r4, #12]
 8006c76:	9b01      	ldr	r3, [sp, #4]
 8006c78:	6126      	str	r6, [r4, #16]
 8006c7a:	18f6      	adds	r6, r6, r3
 8006c7c:	6026      	str	r6, [r4, #0]
 8006c7e:	003e      	movs	r6, r7
 8006c80:	6165      	str	r5, [r4, #20]
 8006c82:	1aed      	subs	r5, r5, r3
 8006c84:	60a5      	str	r5, [r4, #8]
 8006c86:	42be      	cmp	r6, r7
 8006c88:	d900      	bls.n	8006c8c <__ssputs_r+0x78>
 8006c8a:	003e      	movs	r6, r7
 8006c8c:	0032      	movs	r2, r6
 8006c8e:	9903      	ldr	r1, [sp, #12]
 8006c90:	6820      	ldr	r0, [r4, #0]
 8006c92:	f000 fa99 	bl	80071c8 <memmove>
 8006c96:	2000      	movs	r0, #0
 8006c98:	68a3      	ldr	r3, [r4, #8]
 8006c9a:	1b9b      	subs	r3, r3, r6
 8006c9c:	60a3      	str	r3, [r4, #8]
 8006c9e:	6823      	ldr	r3, [r4, #0]
 8006ca0:	199b      	adds	r3, r3, r6
 8006ca2:	6023      	str	r3, [r4, #0]
 8006ca4:	b005      	add	sp, #20
 8006ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ca8:	002a      	movs	r2, r5
 8006caa:	9802      	ldr	r0, [sp, #8]
 8006cac:	f000 fac4 	bl	8007238 <_realloc_r>
 8006cb0:	1e06      	subs	r6, r0, #0
 8006cb2:	d1e0      	bne.n	8006c76 <__ssputs_r+0x62>
 8006cb4:	6921      	ldr	r1, [r4, #16]
 8006cb6:	9802      	ldr	r0, [sp, #8]
 8006cb8:	f7ff feb0 	bl	8006a1c <_free_r>
 8006cbc:	230c      	movs	r3, #12
 8006cbe:	2001      	movs	r0, #1
 8006cc0:	9a02      	ldr	r2, [sp, #8]
 8006cc2:	4240      	negs	r0, r0
 8006cc4:	6013      	str	r3, [r2, #0]
 8006cc6:	89a2      	ldrh	r2, [r4, #12]
 8006cc8:	3334      	adds	r3, #52	@ 0x34
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	81a3      	strh	r3, [r4, #12]
 8006cce:	e7e9      	b.n	8006ca4 <__ssputs_r+0x90>
 8006cd0:	fffffb7f 	.word	0xfffffb7f

08006cd4 <_svfiprintf_r>:
 8006cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cd6:	b0a1      	sub	sp, #132	@ 0x84
 8006cd8:	9003      	str	r0, [sp, #12]
 8006cda:	001d      	movs	r5, r3
 8006cdc:	898b      	ldrh	r3, [r1, #12]
 8006cde:	000f      	movs	r7, r1
 8006ce0:	0016      	movs	r6, r2
 8006ce2:	061b      	lsls	r3, r3, #24
 8006ce4:	d511      	bpl.n	8006d0a <_svfiprintf_r+0x36>
 8006ce6:	690b      	ldr	r3, [r1, #16]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10e      	bne.n	8006d0a <_svfiprintf_r+0x36>
 8006cec:	2140      	movs	r1, #64	@ 0x40
 8006cee:	f7ff ff01 	bl	8006af4 <_malloc_r>
 8006cf2:	6038      	str	r0, [r7, #0]
 8006cf4:	6138      	str	r0, [r7, #16]
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	d105      	bne.n	8006d06 <_svfiprintf_r+0x32>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	9a03      	ldr	r2, [sp, #12]
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	2001      	movs	r0, #1
 8006d02:	4240      	negs	r0, r0
 8006d04:	e0cf      	b.n	8006ea6 <_svfiprintf_r+0x1d2>
 8006d06:	2340      	movs	r3, #64	@ 0x40
 8006d08:	617b      	str	r3, [r7, #20]
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	ac08      	add	r4, sp, #32
 8006d0e:	6163      	str	r3, [r4, #20]
 8006d10:	3320      	adds	r3, #32
 8006d12:	7663      	strb	r3, [r4, #25]
 8006d14:	3310      	adds	r3, #16
 8006d16:	76a3      	strb	r3, [r4, #26]
 8006d18:	9507      	str	r5, [sp, #28]
 8006d1a:	0035      	movs	r5, r6
 8006d1c:	782b      	ldrb	r3, [r5, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d001      	beq.n	8006d26 <_svfiprintf_r+0x52>
 8006d22:	2b25      	cmp	r3, #37	@ 0x25
 8006d24:	d148      	bne.n	8006db8 <_svfiprintf_r+0xe4>
 8006d26:	1bab      	subs	r3, r5, r6
 8006d28:	9305      	str	r3, [sp, #20]
 8006d2a:	42b5      	cmp	r5, r6
 8006d2c:	d00b      	beq.n	8006d46 <_svfiprintf_r+0x72>
 8006d2e:	0032      	movs	r2, r6
 8006d30:	0039      	movs	r1, r7
 8006d32:	9803      	ldr	r0, [sp, #12]
 8006d34:	f7ff ff6e 	bl	8006c14 <__ssputs_r>
 8006d38:	3001      	adds	r0, #1
 8006d3a:	d100      	bne.n	8006d3e <_svfiprintf_r+0x6a>
 8006d3c:	e0ae      	b.n	8006e9c <_svfiprintf_r+0x1c8>
 8006d3e:	6963      	ldr	r3, [r4, #20]
 8006d40:	9a05      	ldr	r2, [sp, #20]
 8006d42:	189b      	adds	r3, r3, r2
 8006d44:	6163      	str	r3, [r4, #20]
 8006d46:	782b      	ldrb	r3, [r5, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d100      	bne.n	8006d4e <_svfiprintf_r+0x7a>
 8006d4c:	e0a6      	b.n	8006e9c <_svfiprintf_r+0x1c8>
 8006d4e:	2201      	movs	r2, #1
 8006d50:	2300      	movs	r3, #0
 8006d52:	4252      	negs	r2, r2
 8006d54:	6062      	str	r2, [r4, #4]
 8006d56:	a904      	add	r1, sp, #16
 8006d58:	3254      	adds	r2, #84	@ 0x54
 8006d5a:	1852      	adds	r2, r2, r1
 8006d5c:	1c6e      	adds	r6, r5, #1
 8006d5e:	6023      	str	r3, [r4, #0]
 8006d60:	60e3      	str	r3, [r4, #12]
 8006d62:	60a3      	str	r3, [r4, #8]
 8006d64:	7013      	strb	r3, [r2, #0]
 8006d66:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006d68:	4b54      	ldr	r3, [pc, #336]	@ (8006ebc <_svfiprintf_r+0x1e8>)
 8006d6a:	2205      	movs	r2, #5
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	7831      	ldrb	r1, [r6, #0]
 8006d70:	9305      	str	r3, [sp, #20]
 8006d72:	f000 fa4d 	bl	8007210 <memchr>
 8006d76:	1c75      	adds	r5, r6, #1
 8006d78:	2800      	cmp	r0, #0
 8006d7a:	d11f      	bne.n	8006dbc <_svfiprintf_r+0xe8>
 8006d7c:	6822      	ldr	r2, [r4, #0]
 8006d7e:	06d3      	lsls	r3, r2, #27
 8006d80:	d504      	bpl.n	8006d8c <_svfiprintf_r+0xb8>
 8006d82:	2353      	movs	r3, #83	@ 0x53
 8006d84:	a904      	add	r1, sp, #16
 8006d86:	185b      	adds	r3, r3, r1
 8006d88:	2120      	movs	r1, #32
 8006d8a:	7019      	strb	r1, [r3, #0]
 8006d8c:	0713      	lsls	r3, r2, #28
 8006d8e:	d504      	bpl.n	8006d9a <_svfiprintf_r+0xc6>
 8006d90:	2353      	movs	r3, #83	@ 0x53
 8006d92:	a904      	add	r1, sp, #16
 8006d94:	185b      	adds	r3, r3, r1
 8006d96:	212b      	movs	r1, #43	@ 0x2b
 8006d98:	7019      	strb	r1, [r3, #0]
 8006d9a:	7833      	ldrb	r3, [r6, #0]
 8006d9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d9e:	d016      	beq.n	8006dce <_svfiprintf_r+0xfa>
 8006da0:	0035      	movs	r5, r6
 8006da2:	2100      	movs	r1, #0
 8006da4:	200a      	movs	r0, #10
 8006da6:	68e3      	ldr	r3, [r4, #12]
 8006da8:	782a      	ldrb	r2, [r5, #0]
 8006daa:	1c6e      	adds	r6, r5, #1
 8006dac:	3a30      	subs	r2, #48	@ 0x30
 8006dae:	2a09      	cmp	r2, #9
 8006db0:	d950      	bls.n	8006e54 <_svfiprintf_r+0x180>
 8006db2:	2900      	cmp	r1, #0
 8006db4:	d111      	bne.n	8006dda <_svfiprintf_r+0x106>
 8006db6:	e017      	b.n	8006de8 <_svfiprintf_r+0x114>
 8006db8:	3501      	adds	r5, #1
 8006dba:	e7af      	b.n	8006d1c <_svfiprintf_r+0x48>
 8006dbc:	9b05      	ldr	r3, [sp, #20]
 8006dbe:	6822      	ldr	r2, [r4, #0]
 8006dc0:	1ac0      	subs	r0, r0, r3
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4083      	lsls	r3, r0
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	002e      	movs	r6, r5
 8006dca:	6023      	str	r3, [r4, #0]
 8006dcc:	e7cc      	b.n	8006d68 <_svfiprintf_r+0x94>
 8006dce:	9b07      	ldr	r3, [sp, #28]
 8006dd0:	1d19      	adds	r1, r3, #4
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	9107      	str	r1, [sp, #28]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	db01      	blt.n	8006dde <_svfiprintf_r+0x10a>
 8006dda:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ddc:	e004      	b.n	8006de8 <_svfiprintf_r+0x114>
 8006dde:	425b      	negs	r3, r3
 8006de0:	60e3      	str	r3, [r4, #12]
 8006de2:	2302      	movs	r3, #2
 8006de4:	4313      	orrs	r3, r2
 8006de6:	6023      	str	r3, [r4, #0]
 8006de8:	782b      	ldrb	r3, [r5, #0]
 8006dea:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dec:	d10c      	bne.n	8006e08 <_svfiprintf_r+0x134>
 8006dee:	786b      	ldrb	r3, [r5, #1]
 8006df0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006df2:	d134      	bne.n	8006e5e <_svfiprintf_r+0x18a>
 8006df4:	9b07      	ldr	r3, [sp, #28]
 8006df6:	3502      	adds	r5, #2
 8006df8:	1d1a      	adds	r2, r3, #4
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	9207      	str	r2, [sp, #28]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	da01      	bge.n	8006e06 <_svfiprintf_r+0x132>
 8006e02:	2301      	movs	r3, #1
 8006e04:	425b      	negs	r3, r3
 8006e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e08:	4e2d      	ldr	r6, [pc, #180]	@ (8006ec0 <_svfiprintf_r+0x1ec>)
 8006e0a:	2203      	movs	r2, #3
 8006e0c:	0030      	movs	r0, r6
 8006e0e:	7829      	ldrb	r1, [r5, #0]
 8006e10:	f000 f9fe 	bl	8007210 <memchr>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d006      	beq.n	8006e26 <_svfiprintf_r+0x152>
 8006e18:	2340      	movs	r3, #64	@ 0x40
 8006e1a:	1b80      	subs	r0, r0, r6
 8006e1c:	4083      	lsls	r3, r0
 8006e1e:	6822      	ldr	r2, [r4, #0]
 8006e20:	3501      	adds	r5, #1
 8006e22:	4313      	orrs	r3, r2
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	7829      	ldrb	r1, [r5, #0]
 8006e28:	2206      	movs	r2, #6
 8006e2a:	4826      	ldr	r0, [pc, #152]	@ (8006ec4 <_svfiprintf_r+0x1f0>)
 8006e2c:	1c6e      	adds	r6, r5, #1
 8006e2e:	7621      	strb	r1, [r4, #24]
 8006e30:	f000 f9ee 	bl	8007210 <memchr>
 8006e34:	2800      	cmp	r0, #0
 8006e36:	d038      	beq.n	8006eaa <_svfiprintf_r+0x1d6>
 8006e38:	4b23      	ldr	r3, [pc, #140]	@ (8006ec8 <_svfiprintf_r+0x1f4>)
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d122      	bne.n	8006e84 <_svfiprintf_r+0x1b0>
 8006e3e:	2207      	movs	r2, #7
 8006e40:	9b07      	ldr	r3, [sp, #28]
 8006e42:	3307      	adds	r3, #7
 8006e44:	4393      	bics	r3, r2
 8006e46:	3308      	adds	r3, #8
 8006e48:	9307      	str	r3, [sp, #28]
 8006e4a:	6963      	ldr	r3, [r4, #20]
 8006e4c:	9a04      	ldr	r2, [sp, #16]
 8006e4e:	189b      	adds	r3, r3, r2
 8006e50:	6163      	str	r3, [r4, #20]
 8006e52:	e762      	b.n	8006d1a <_svfiprintf_r+0x46>
 8006e54:	4343      	muls	r3, r0
 8006e56:	0035      	movs	r5, r6
 8006e58:	2101      	movs	r1, #1
 8006e5a:	189b      	adds	r3, r3, r2
 8006e5c:	e7a4      	b.n	8006da8 <_svfiprintf_r+0xd4>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	200a      	movs	r0, #10
 8006e62:	0019      	movs	r1, r3
 8006e64:	3501      	adds	r5, #1
 8006e66:	6063      	str	r3, [r4, #4]
 8006e68:	782a      	ldrb	r2, [r5, #0]
 8006e6a:	1c6e      	adds	r6, r5, #1
 8006e6c:	3a30      	subs	r2, #48	@ 0x30
 8006e6e:	2a09      	cmp	r2, #9
 8006e70:	d903      	bls.n	8006e7a <_svfiprintf_r+0x1a6>
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d0c8      	beq.n	8006e08 <_svfiprintf_r+0x134>
 8006e76:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e78:	e7c6      	b.n	8006e08 <_svfiprintf_r+0x134>
 8006e7a:	4341      	muls	r1, r0
 8006e7c:	0035      	movs	r5, r6
 8006e7e:	2301      	movs	r3, #1
 8006e80:	1889      	adds	r1, r1, r2
 8006e82:	e7f1      	b.n	8006e68 <_svfiprintf_r+0x194>
 8006e84:	aa07      	add	r2, sp, #28
 8006e86:	9200      	str	r2, [sp, #0]
 8006e88:	0021      	movs	r1, r4
 8006e8a:	003a      	movs	r2, r7
 8006e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8006ecc <_svfiprintf_r+0x1f8>)
 8006e8e:	9803      	ldr	r0, [sp, #12]
 8006e90:	e000      	b.n	8006e94 <_svfiprintf_r+0x1c0>
 8006e92:	bf00      	nop
 8006e94:	9004      	str	r0, [sp, #16]
 8006e96:	9b04      	ldr	r3, [sp, #16]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	d1d6      	bne.n	8006e4a <_svfiprintf_r+0x176>
 8006e9c:	89bb      	ldrh	r3, [r7, #12]
 8006e9e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006ea0:	065b      	lsls	r3, r3, #25
 8006ea2:	d500      	bpl.n	8006ea6 <_svfiprintf_r+0x1d2>
 8006ea4:	e72c      	b.n	8006d00 <_svfiprintf_r+0x2c>
 8006ea6:	b021      	add	sp, #132	@ 0x84
 8006ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eaa:	aa07      	add	r2, sp, #28
 8006eac:	9200      	str	r2, [sp, #0]
 8006eae:	0021      	movs	r1, r4
 8006eb0:	003a      	movs	r2, r7
 8006eb2:	4b06      	ldr	r3, [pc, #24]	@ (8006ecc <_svfiprintf_r+0x1f8>)
 8006eb4:	9803      	ldr	r0, [sp, #12]
 8006eb6:	f000 f87b 	bl	8006fb0 <_printf_i>
 8006eba:	e7eb      	b.n	8006e94 <_svfiprintf_r+0x1c0>
 8006ebc:	08007801 	.word	0x08007801
 8006ec0:	08007807 	.word	0x08007807
 8006ec4:	0800780b 	.word	0x0800780b
 8006ec8:	00000000 	.word	0x00000000
 8006ecc:	08006c15 	.word	0x08006c15

08006ed0 <_printf_common>:
 8006ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ed2:	0016      	movs	r6, r2
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	688a      	ldr	r2, [r1, #8]
 8006ed8:	690b      	ldr	r3, [r1, #16]
 8006eda:	000c      	movs	r4, r1
 8006edc:	9000      	str	r0, [sp, #0]
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	da00      	bge.n	8006ee4 <_printf_common+0x14>
 8006ee2:	0013      	movs	r3, r2
 8006ee4:	0022      	movs	r2, r4
 8006ee6:	6033      	str	r3, [r6, #0]
 8006ee8:	3243      	adds	r2, #67	@ 0x43
 8006eea:	7812      	ldrb	r2, [r2, #0]
 8006eec:	2a00      	cmp	r2, #0
 8006eee:	d001      	beq.n	8006ef4 <_printf_common+0x24>
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	6033      	str	r3, [r6, #0]
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	069b      	lsls	r3, r3, #26
 8006ef8:	d502      	bpl.n	8006f00 <_printf_common+0x30>
 8006efa:	6833      	ldr	r3, [r6, #0]
 8006efc:	3302      	adds	r3, #2
 8006efe:	6033      	str	r3, [r6, #0]
 8006f00:	6822      	ldr	r2, [r4, #0]
 8006f02:	2306      	movs	r3, #6
 8006f04:	0015      	movs	r5, r2
 8006f06:	401d      	ands	r5, r3
 8006f08:	421a      	tst	r2, r3
 8006f0a:	d027      	beq.n	8006f5c <_printf_common+0x8c>
 8006f0c:	0023      	movs	r3, r4
 8006f0e:	3343      	adds	r3, #67	@ 0x43
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	1e5a      	subs	r2, r3, #1
 8006f14:	4193      	sbcs	r3, r2
 8006f16:	6822      	ldr	r2, [r4, #0]
 8006f18:	0692      	lsls	r2, r2, #26
 8006f1a:	d430      	bmi.n	8006f7e <_printf_common+0xae>
 8006f1c:	0022      	movs	r2, r4
 8006f1e:	9901      	ldr	r1, [sp, #4]
 8006f20:	9800      	ldr	r0, [sp, #0]
 8006f22:	9d08      	ldr	r5, [sp, #32]
 8006f24:	3243      	adds	r2, #67	@ 0x43
 8006f26:	47a8      	blx	r5
 8006f28:	3001      	adds	r0, #1
 8006f2a:	d025      	beq.n	8006f78 <_printf_common+0xa8>
 8006f2c:	2206      	movs	r2, #6
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	2500      	movs	r5, #0
 8006f32:	4013      	ands	r3, r2
 8006f34:	2b04      	cmp	r3, #4
 8006f36:	d105      	bne.n	8006f44 <_printf_common+0x74>
 8006f38:	6833      	ldr	r3, [r6, #0]
 8006f3a:	68e5      	ldr	r5, [r4, #12]
 8006f3c:	1aed      	subs	r5, r5, r3
 8006f3e:	43eb      	mvns	r3, r5
 8006f40:	17db      	asrs	r3, r3, #31
 8006f42:	401d      	ands	r5, r3
 8006f44:	68a3      	ldr	r3, [r4, #8]
 8006f46:	6922      	ldr	r2, [r4, #16]
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	dd01      	ble.n	8006f50 <_printf_common+0x80>
 8006f4c:	1a9b      	subs	r3, r3, r2
 8006f4e:	18ed      	adds	r5, r5, r3
 8006f50:	2600      	movs	r6, #0
 8006f52:	42b5      	cmp	r5, r6
 8006f54:	d120      	bne.n	8006f98 <_printf_common+0xc8>
 8006f56:	2000      	movs	r0, #0
 8006f58:	e010      	b.n	8006f7c <_printf_common+0xac>
 8006f5a:	3501      	adds	r5, #1
 8006f5c:	68e3      	ldr	r3, [r4, #12]
 8006f5e:	6832      	ldr	r2, [r6, #0]
 8006f60:	1a9b      	subs	r3, r3, r2
 8006f62:	42ab      	cmp	r3, r5
 8006f64:	ddd2      	ble.n	8006f0c <_printf_common+0x3c>
 8006f66:	0022      	movs	r2, r4
 8006f68:	2301      	movs	r3, #1
 8006f6a:	9901      	ldr	r1, [sp, #4]
 8006f6c:	9800      	ldr	r0, [sp, #0]
 8006f6e:	9f08      	ldr	r7, [sp, #32]
 8006f70:	3219      	adds	r2, #25
 8006f72:	47b8      	blx	r7
 8006f74:	3001      	adds	r0, #1
 8006f76:	d1f0      	bne.n	8006f5a <_printf_common+0x8a>
 8006f78:	2001      	movs	r0, #1
 8006f7a:	4240      	negs	r0, r0
 8006f7c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f7e:	2030      	movs	r0, #48	@ 0x30
 8006f80:	18e1      	adds	r1, r4, r3
 8006f82:	3143      	adds	r1, #67	@ 0x43
 8006f84:	7008      	strb	r0, [r1, #0]
 8006f86:	0021      	movs	r1, r4
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	3145      	adds	r1, #69	@ 0x45
 8006f8c:	7809      	ldrb	r1, [r1, #0]
 8006f8e:	18a2      	adds	r2, r4, r2
 8006f90:	3243      	adds	r2, #67	@ 0x43
 8006f92:	3302      	adds	r3, #2
 8006f94:	7011      	strb	r1, [r2, #0]
 8006f96:	e7c1      	b.n	8006f1c <_printf_common+0x4c>
 8006f98:	0022      	movs	r2, r4
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	9901      	ldr	r1, [sp, #4]
 8006f9e:	9800      	ldr	r0, [sp, #0]
 8006fa0:	9f08      	ldr	r7, [sp, #32]
 8006fa2:	321a      	adds	r2, #26
 8006fa4:	47b8      	blx	r7
 8006fa6:	3001      	adds	r0, #1
 8006fa8:	d0e6      	beq.n	8006f78 <_printf_common+0xa8>
 8006faa:	3601      	adds	r6, #1
 8006fac:	e7d1      	b.n	8006f52 <_printf_common+0x82>
	...

08006fb0 <_printf_i>:
 8006fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fb2:	b08b      	sub	sp, #44	@ 0x2c
 8006fb4:	9206      	str	r2, [sp, #24]
 8006fb6:	000a      	movs	r2, r1
 8006fb8:	3243      	adds	r2, #67	@ 0x43
 8006fba:	9307      	str	r3, [sp, #28]
 8006fbc:	9005      	str	r0, [sp, #20]
 8006fbe:	9203      	str	r2, [sp, #12]
 8006fc0:	7e0a      	ldrb	r2, [r1, #24]
 8006fc2:	000c      	movs	r4, r1
 8006fc4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006fc6:	2a78      	cmp	r2, #120	@ 0x78
 8006fc8:	d809      	bhi.n	8006fde <_printf_i+0x2e>
 8006fca:	2a62      	cmp	r2, #98	@ 0x62
 8006fcc:	d80b      	bhi.n	8006fe6 <_printf_i+0x36>
 8006fce:	2a00      	cmp	r2, #0
 8006fd0:	d100      	bne.n	8006fd4 <_printf_i+0x24>
 8006fd2:	e0ba      	b.n	800714a <_printf_i+0x19a>
 8006fd4:	497a      	ldr	r1, [pc, #488]	@ (80071c0 <_printf_i+0x210>)
 8006fd6:	9104      	str	r1, [sp, #16]
 8006fd8:	2a58      	cmp	r2, #88	@ 0x58
 8006fda:	d100      	bne.n	8006fde <_printf_i+0x2e>
 8006fdc:	e08e      	b.n	80070fc <_printf_i+0x14c>
 8006fde:	0025      	movs	r5, r4
 8006fe0:	3542      	adds	r5, #66	@ 0x42
 8006fe2:	702a      	strb	r2, [r5, #0]
 8006fe4:	e022      	b.n	800702c <_printf_i+0x7c>
 8006fe6:	0010      	movs	r0, r2
 8006fe8:	3863      	subs	r0, #99	@ 0x63
 8006fea:	2815      	cmp	r0, #21
 8006fec:	d8f7      	bhi.n	8006fde <_printf_i+0x2e>
 8006fee:	f7f9 f893 	bl	8000118 <__gnu_thumb1_case_shi>
 8006ff2:	0016      	.short	0x0016
 8006ff4:	fff6001f 	.word	0xfff6001f
 8006ff8:	fff6fff6 	.word	0xfff6fff6
 8006ffc:	001ffff6 	.word	0x001ffff6
 8007000:	fff6fff6 	.word	0xfff6fff6
 8007004:	fff6fff6 	.word	0xfff6fff6
 8007008:	0036009f 	.word	0x0036009f
 800700c:	fff6007e 	.word	0xfff6007e
 8007010:	00b0fff6 	.word	0x00b0fff6
 8007014:	0036fff6 	.word	0x0036fff6
 8007018:	fff6fff6 	.word	0xfff6fff6
 800701c:	0082      	.short	0x0082
 800701e:	0025      	movs	r5, r4
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	3542      	adds	r5, #66	@ 0x42
 8007024:	1d11      	adds	r1, r2, #4
 8007026:	6019      	str	r1, [r3, #0]
 8007028:	6813      	ldr	r3, [r2, #0]
 800702a:	702b      	strb	r3, [r5, #0]
 800702c:	2301      	movs	r3, #1
 800702e:	e09e      	b.n	800716e <_printf_i+0x1be>
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	6809      	ldr	r1, [r1, #0]
 8007034:	1d02      	adds	r2, r0, #4
 8007036:	060d      	lsls	r5, r1, #24
 8007038:	d50b      	bpl.n	8007052 <_printf_i+0xa2>
 800703a:	6806      	ldr	r6, [r0, #0]
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	2e00      	cmp	r6, #0
 8007040:	da03      	bge.n	800704a <_printf_i+0x9a>
 8007042:	232d      	movs	r3, #45	@ 0x2d
 8007044:	9a03      	ldr	r2, [sp, #12]
 8007046:	4276      	negs	r6, r6
 8007048:	7013      	strb	r3, [r2, #0]
 800704a:	4b5d      	ldr	r3, [pc, #372]	@ (80071c0 <_printf_i+0x210>)
 800704c:	270a      	movs	r7, #10
 800704e:	9304      	str	r3, [sp, #16]
 8007050:	e018      	b.n	8007084 <_printf_i+0xd4>
 8007052:	6806      	ldr	r6, [r0, #0]
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	0649      	lsls	r1, r1, #25
 8007058:	d5f1      	bpl.n	800703e <_printf_i+0x8e>
 800705a:	b236      	sxth	r6, r6
 800705c:	e7ef      	b.n	800703e <_printf_i+0x8e>
 800705e:	6808      	ldr	r0, [r1, #0]
 8007060:	6819      	ldr	r1, [r3, #0]
 8007062:	c940      	ldmia	r1!, {r6}
 8007064:	0605      	lsls	r5, r0, #24
 8007066:	d402      	bmi.n	800706e <_printf_i+0xbe>
 8007068:	0640      	lsls	r0, r0, #25
 800706a:	d500      	bpl.n	800706e <_printf_i+0xbe>
 800706c:	b2b6      	uxth	r6, r6
 800706e:	6019      	str	r1, [r3, #0]
 8007070:	4b53      	ldr	r3, [pc, #332]	@ (80071c0 <_printf_i+0x210>)
 8007072:	270a      	movs	r7, #10
 8007074:	9304      	str	r3, [sp, #16]
 8007076:	2a6f      	cmp	r2, #111	@ 0x6f
 8007078:	d100      	bne.n	800707c <_printf_i+0xcc>
 800707a:	3f02      	subs	r7, #2
 800707c:	0023      	movs	r3, r4
 800707e:	2200      	movs	r2, #0
 8007080:	3343      	adds	r3, #67	@ 0x43
 8007082:	701a      	strb	r2, [r3, #0]
 8007084:	6863      	ldr	r3, [r4, #4]
 8007086:	60a3      	str	r3, [r4, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	db06      	blt.n	800709a <_printf_i+0xea>
 800708c:	2104      	movs	r1, #4
 800708e:	6822      	ldr	r2, [r4, #0]
 8007090:	9d03      	ldr	r5, [sp, #12]
 8007092:	438a      	bics	r2, r1
 8007094:	6022      	str	r2, [r4, #0]
 8007096:	4333      	orrs	r3, r6
 8007098:	d00c      	beq.n	80070b4 <_printf_i+0x104>
 800709a:	9d03      	ldr	r5, [sp, #12]
 800709c:	0030      	movs	r0, r6
 800709e:	0039      	movs	r1, r7
 80070a0:	f7f9 f8ca 	bl	8000238 <__aeabi_uidivmod>
 80070a4:	9b04      	ldr	r3, [sp, #16]
 80070a6:	3d01      	subs	r5, #1
 80070a8:	5c5b      	ldrb	r3, [r3, r1]
 80070aa:	702b      	strb	r3, [r5, #0]
 80070ac:	0033      	movs	r3, r6
 80070ae:	0006      	movs	r6, r0
 80070b0:	429f      	cmp	r7, r3
 80070b2:	d9f3      	bls.n	800709c <_printf_i+0xec>
 80070b4:	2f08      	cmp	r7, #8
 80070b6:	d109      	bne.n	80070cc <_printf_i+0x11c>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	07db      	lsls	r3, r3, #31
 80070bc:	d506      	bpl.n	80070cc <_printf_i+0x11c>
 80070be:	6862      	ldr	r2, [r4, #4]
 80070c0:	6923      	ldr	r3, [r4, #16]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	dc02      	bgt.n	80070cc <_printf_i+0x11c>
 80070c6:	2330      	movs	r3, #48	@ 0x30
 80070c8:	3d01      	subs	r5, #1
 80070ca:	702b      	strb	r3, [r5, #0]
 80070cc:	9b03      	ldr	r3, [sp, #12]
 80070ce:	1b5b      	subs	r3, r3, r5
 80070d0:	6123      	str	r3, [r4, #16]
 80070d2:	9b07      	ldr	r3, [sp, #28]
 80070d4:	0021      	movs	r1, r4
 80070d6:	9300      	str	r3, [sp, #0]
 80070d8:	9805      	ldr	r0, [sp, #20]
 80070da:	9b06      	ldr	r3, [sp, #24]
 80070dc:	aa09      	add	r2, sp, #36	@ 0x24
 80070de:	f7ff fef7 	bl	8006ed0 <_printf_common>
 80070e2:	3001      	adds	r0, #1
 80070e4:	d148      	bne.n	8007178 <_printf_i+0x1c8>
 80070e6:	2001      	movs	r0, #1
 80070e8:	4240      	negs	r0, r0
 80070ea:	b00b      	add	sp, #44	@ 0x2c
 80070ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ee:	2220      	movs	r2, #32
 80070f0:	6809      	ldr	r1, [r1, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	6022      	str	r2, [r4, #0]
 80070f6:	2278      	movs	r2, #120	@ 0x78
 80070f8:	4932      	ldr	r1, [pc, #200]	@ (80071c4 <_printf_i+0x214>)
 80070fa:	9104      	str	r1, [sp, #16]
 80070fc:	0021      	movs	r1, r4
 80070fe:	3145      	adds	r1, #69	@ 0x45
 8007100:	700a      	strb	r2, [r1, #0]
 8007102:	6819      	ldr	r1, [r3, #0]
 8007104:	6822      	ldr	r2, [r4, #0]
 8007106:	c940      	ldmia	r1!, {r6}
 8007108:	0610      	lsls	r0, r2, #24
 800710a:	d402      	bmi.n	8007112 <_printf_i+0x162>
 800710c:	0650      	lsls	r0, r2, #25
 800710e:	d500      	bpl.n	8007112 <_printf_i+0x162>
 8007110:	b2b6      	uxth	r6, r6
 8007112:	6019      	str	r1, [r3, #0]
 8007114:	07d3      	lsls	r3, r2, #31
 8007116:	d502      	bpl.n	800711e <_printf_i+0x16e>
 8007118:	2320      	movs	r3, #32
 800711a:	4313      	orrs	r3, r2
 800711c:	6023      	str	r3, [r4, #0]
 800711e:	2e00      	cmp	r6, #0
 8007120:	d001      	beq.n	8007126 <_printf_i+0x176>
 8007122:	2710      	movs	r7, #16
 8007124:	e7aa      	b.n	800707c <_printf_i+0xcc>
 8007126:	2220      	movs	r2, #32
 8007128:	6823      	ldr	r3, [r4, #0]
 800712a:	4393      	bics	r3, r2
 800712c:	6023      	str	r3, [r4, #0]
 800712e:	e7f8      	b.n	8007122 <_printf_i+0x172>
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	680d      	ldr	r5, [r1, #0]
 8007134:	1d10      	adds	r0, r2, #4
 8007136:	6949      	ldr	r1, [r1, #20]
 8007138:	6018      	str	r0, [r3, #0]
 800713a:	6813      	ldr	r3, [r2, #0]
 800713c:	062e      	lsls	r6, r5, #24
 800713e:	d501      	bpl.n	8007144 <_printf_i+0x194>
 8007140:	6019      	str	r1, [r3, #0]
 8007142:	e002      	b.n	800714a <_printf_i+0x19a>
 8007144:	066d      	lsls	r5, r5, #25
 8007146:	d5fb      	bpl.n	8007140 <_printf_i+0x190>
 8007148:	8019      	strh	r1, [r3, #0]
 800714a:	2300      	movs	r3, #0
 800714c:	9d03      	ldr	r5, [sp, #12]
 800714e:	6123      	str	r3, [r4, #16]
 8007150:	e7bf      	b.n	80070d2 <_printf_i+0x122>
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	1d11      	adds	r1, r2, #4
 8007156:	6019      	str	r1, [r3, #0]
 8007158:	6815      	ldr	r5, [r2, #0]
 800715a:	2100      	movs	r1, #0
 800715c:	0028      	movs	r0, r5
 800715e:	6862      	ldr	r2, [r4, #4]
 8007160:	f000 f856 	bl	8007210 <memchr>
 8007164:	2800      	cmp	r0, #0
 8007166:	d001      	beq.n	800716c <_printf_i+0x1bc>
 8007168:	1b40      	subs	r0, r0, r5
 800716a:	6060      	str	r0, [r4, #4]
 800716c:	6863      	ldr	r3, [r4, #4]
 800716e:	6123      	str	r3, [r4, #16]
 8007170:	2300      	movs	r3, #0
 8007172:	9a03      	ldr	r2, [sp, #12]
 8007174:	7013      	strb	r3, [r2, #0]
 8007176:	e7ac      	b.n	80070d2 <_printf_i+0x122>
 8007178:	002a      	movs	r2, r5
 800717a:	6923      	ldr	r3, [r4, #16]
 800717c:	9906      	ldr	r1, [sp, #24]
 800717e:	9805      	ldr	r0, [sp, #20]
 8007180:	9d07      	ldr	r5, [sp, #28]
 8007182:	47a8      	blx	r5
 8007184:	3001      	adds	r0, #1
 8007186:	d0ae      	beq.n	80070e6 <_printf_i+0x136>
 8007188:	6823      	ldr	r3, [r4, #0]
 800718a:	079b      	lsls	r3, r3, #30
 800718c:	d415      	bmi.n	80071ba <_printf_i+0x20a>
 800718e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007190:	68e0      	ldr	r0, [r4, #12]
 8007192:	4298      	cmp	r0, r3
 8007194:	daa9      	bge.n	80070ea <_printf_i+0x13a>
 8007196:	0018      	movs	r0, r3
 8007198:	e7a7      	b.n	80070ea <_printf_i+0x13a>
 800719a:	0022      	movs	r2, r4
 800719c:	2301      	movs	r3, #1
 800719e:	9906      	ldr	r1, [sp, #24]
 80071a0:	9805      	ldr	r0, [sp, #20]
 80071a2:	9e07      	ldr	r6, [sp, #28]
 80071a4:	3219      	adds	r2, #25
 80071a6:	47b0      	blx	r6
 80071a8:	3001      	adds	r0, #1
 80071aa:	d09c      	beq.n	80070e6 <_printf_i+0x136>
 80071ac:	3501      	adds	r5, #1
 80071ae:	68e3      	ldr	r3, [r4, #12]
 80071b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071b2:	1a9b      	subs	r3, r3, r2
 80071b4:	42ab      	cmp	r3, r5
 80071b6:	dcf0      	bgt.n	800719a <_printf_i+0x1ea>
 80071b8:	e7e9      	b.n	800718e <_printf_i+0x1de>
 80071ba:	2500      	movs	r5, #0
 80071bc:	e7f7      	b.n	80071ae <_printf_i+0x1fe>
 80071be:	46c0      	nop			@ (mov r8, r8)
 80071c0:	08007812 	.word	0x08007812
 80071c4:	08007823 	.word	0x08007823

080071c8 <memmove>:
 80071c8:	b510      	push	{r4, lr}
 80071ca:	4288      	cmp	r0, r1
 80071cc:	d902      	bls.n	80071d4 <memmove+0xc>
 80071ce:	188b      	adds	r3, r1, r2
 80071d0:	4298      	cmp	r0, r3
 80071d2:	d308      	bcc.n	80071e6 <memmove+0x1e>
 80071d4:	2300      	movs	r3, #0
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d007      	beq.n	80071ea <memmove+0x22>
 80071da:	5ccc      	ldrb	r4, [r1, r3]
 80071dc:	54c4      	strb	r4, [r0, r3]
 80071de:	3301      	adds	r3, #1
 80071e0:	e7f9      	b.n	80071d6 <memmove+0xe>
 80071e2:	5c8b      	ldrb	r3, [r1, r2]
 80071e4:	5483      	strb	r3, [r0, r2]
 80071e6:	3a01      	subs	r2, #1
 80071e8:	d2fb      	bcs.n	80071e2 <memmove+0x1a>
 80071ea:	bd10      	pop	{r4, pc}

080071ec <_sbrk_r>:
 80071ec:	2300      	movs	r3, #0
 80071ee:	b570      	push	{r4, r5, r6, lr}
 80071f0:	4d06      	ldr	r5, [pc, #24]	@ (800720c <_sbrk_r+0x20>)
 80071f2:	0004      	movs	r4, r0
 80071f4:	0008      	movs	r0, r1
 80071f6:	602b      	str	r3, [r5, #0]
 80071f8:	f7fa fa54 	bl	80016a4 <_sbrk>
 80071fc:	1c43      	adds	r3, r0, #1
 80071fe:	d103      	bne.n	8007208 <_sbrk_r+0x1c>
 8007200:	682b      	ldr	r3, [r5, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d000      	beq.n	8007208 <_sbrk_r+0x1c>
 8007206:	6023      	str	r3, [r4, #0]
 8007208:	bd70      	pop	{r4, r5, r6, pc}
 800720a:	46c0      	nop			@ (mov r8, r8)
 800720c:	200003bc 	.word	0x200003bc

08007210 <memchr>:
 8007210:	b2c9      	uxtb	r1, r1
 8007212:	1882      	adds	r2, r0, r2
 8007214:	4290      	cmp	r0, r2
 8007216:	d101      	bne.n	800721c <memchr+0xc>
 8007218:	2000      	movs	r0, #0
 800721a:	4770      	bx	lr
 800721c:	7803      	ldrb	r3, [r0, #0]
 800721e:	428b      	cmp	r3, r1
 8007220:	d0fb      	beq.n	800721a <memchr+0xa>
 8007222:	3001      	adds	r0, #1
 8007224:	e7f6      	b.n	8007214 <memchr+0x4>

08007226 <memcpy>:
 8007226:	2300      	movs	r3, #0
 8007228:	b510      	push	{r4, lr}
 800722a:	429a      	cmp	r2, r3
 800722c:	d100      	bne.n	8007230 <memcpy+0xa>
 800722e:	bd10      	pop	{r4, pc}
 8007230:	5ccc      	ldrb	r4, [r1, r3]
 8007232:	54c4      	strb	r4, [r0, r3]
 8007234:	3301      	adds	r3, #1
 8007236:	e7f8      	b.n	800722a <memcpy+0x4>

08007238 <_realloc_r>:
 8007238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800723a:	0006      	movs	r6, r0
 800723c:	000c      	movs	r4, r1
 800723e:	0015      	movs	r5, r2
 8007240:	2900      	cmp	r1, #0
 8007242:	d105      	bne.n	8007250 <_realloc_r+0x18>
 8007244:	0011      	movs	r1, r2
 8007246:	f7ff fc55 	bl	8006af4 <_malloc_r>
 800724a:	0004      	movs	r4, r0
 800724c:	0020      	movs	r0, r4
 800724e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007250:	2a00      	cmp	r2, #0
 8007252:	d103      	bne.n	800725c <_realloc_r+0x24>
 8007254:	f7ff fbe2 	bl	8006a1c <_free_r>
 8007258:	002c      	movs	r4, r5
 800725a:	e7f7      	b.n	800724c <_realloc_r+0x14>
 800725c:	f000 f81c 	bl	8007298 <_malloc_usable_size_r>
 8007260:	0007      	movs	r7, r0
 8007262:	4285      	cmp	r5, r0
 8007264:	d802      	bhi.n	800726c <_realloc_r+0x34>
 8007266:	0843      	lsrs	r3, r0, #1
 8007268:	42ab      	cmp	r3, r5
 800726a:	d3ef      	bcc.n	800724c <_realloc_r+0x14>
 800726c:	0029      	movs	r1, r5
 800726e:	0030      	movs	r0, r6
 8007270:	f7ff fc40 	bl	8006af4 <_malloc_r>
 8007274:	9001      	str	r0, [sp, #4]
 8007276:	2800      	cmp	r0, #0
 8007278:	d101      	bne.n	800727e <_realloc_r+0x46>
 800727a:	9c01      	ldr	r4, [sp, #4]
 800727c:	e7e6      	b.n	800724c <_realloc_r+0x14>
 800727e:	002a      	movs	r2, r5
 8007280:	42bd      	cmp	r5, r7
 8007282:	d900      	bls.n	8007286 <_realloc_r+0x4e>
 8007284:	003a      	movs	r2, r7
 8007286:	0021      	movs	r1, r4
 8007288:	9801      	ldr	r0, [sp, #4]
 800728a:	f7ff ffcc 	bl	8007226 <memcpy>
 800728e:	0021      	movs	r1, r4
 8007290:	0030      	movs	r0, r6
 8007292:	f7ff fbc3 	bl	8006a1c <_free_r>
 8007296:	e7f0      	b.n	800727a <_realloc_r+0x42>

08007298 <_malloc_usable_size_r>:
 8007298:	1f0b      	subs	r3, r1, #4
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	1f18      	subs	r0, r3, #4
 800729e:	2b00      	cmp	r3, #0
 80072a0:	da01      	bge.n	80072a6 <_malloc_usable_size_r+0xe>
 80072a2:	580b      	ldr	r3, [r1, r0]
 80072a4:	18c0      	adds	r0, r0, r3
 80072a6:	4770      	bx	lr

080072a8 <_init>:
 80072a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072aa:	46c0      	nop			@ (mov r8, r8)
 80072ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ae:	bc08      	pop	{r3}
 80072b0:	469e      	mov	lr, r3
 80072b2:	4770      	bx	lr

080072b4 <_fini>:
 80072b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072b6:	46c0      	nop			@ (mov r8, r8)
 80072b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ba:	bc08      	pop	{r3}
 80072bc:	469e      	mov	lr, r3
 80072be:	4770      	bx	lr
