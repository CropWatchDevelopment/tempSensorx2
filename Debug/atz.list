
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f18  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d74  08006fd8  08006fd8  00007fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d4c  08007d4c  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007d4c  08007d4c  00008d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d54  08007d54  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d54  08007d54  00008d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d58  08007d58  00008d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007d5c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  20000068  08007dc4  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00002400  200004c0  08007dc4  000094c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001006b  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c6f  00000000  00000000  000190fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d68  00000000  00000000  0001bd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a59  00000000  00000000  0001cad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bda  00000000  00000000  0001d531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127b8  00000000  00000000  0003410b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081fe8  00000000  00000000  000468c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c88ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000395c  00000000  00000000  000c88f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000cc24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006fc0 	.word	0x08006fc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006fc0 	.word	0x08006fc0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <MX_DMA_Init+0x38>)
 8000478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800047a:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <MX_DMA_Init+0x38>)
 800047c:	2101      	movs	r1, #1
 800047e:	430a      	orrs	r2, r1
 8000480:	631a      	str	r2, [r3, #48]	@ 0x30
 8000482:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <MX_DMA_Init+0x38>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	2201      	movs	r2, #1
 8000488:	4013      	ands	r3, r2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2100      	movs	r1, #0
 8000492:	200a      	movs	r0, #10
 8000494:	f001 fcc8 	bl	8001e28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000498:	200a      	movs	r0, #10
 800049a:	f001 fcda 	bl	8001e52 <HAL_NVIC_EnableIRQ>

}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	40021000 	.word	0x40021000

080004ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b08b      	sub	sp, #44	@ 0x2c
 80004b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	2414      	movs	r4, #20
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2314      	movs	r3, #20
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f005 fe57 	bl	8006170 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b37      	ldr	r3, [pc, #220]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004c6:	4b36      	ldr	r3, [pc, #216]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004c8:	2104      	movs	r1, #4
 80004ca:	430a      	orrs	r2, r1
 80004cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ce:	4b34      	ldr	r3, [pc, #208]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d2:	2204      	movs	r2, #4
 80004d4:	4013      	ands	r3, r2
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004da:	4b31      	ldr	r3, [pc, #196]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004de:	4b30      	ldr	r3, [pc, #192]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004e0:	2180      	movs	r1, #128	@ 0x80
 80004e2:	430a      	orrs	r2, r1
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004e6:	4b2e      	ldr	r3, [pc, #184]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	4013      	ands	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b2b      	ldr	r3, [pc, #172]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004f6:	4b2a      	ldr	r3, [pc, #168]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004f8:	2101      	movs	r1, #1
 80004fa:	430a      	orrs	r2, r1
 80004fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004fe:	4b28      	ldr	r3, [pc, #160]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 8000500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000502:	2201      	movs	r2, #1
 8000504:	4013      	ands	r3, r2
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 800050c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800050e:	4b24      	ldr	r3, [pc, #144]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 8000510:	2102      	movs	r1, #2
 8000512:	430a      	orrs	r2, r1
 8000514:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000516:	4b22      	ldr	r3, [pc, #136]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 8000518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800051a:	2202      	movs	r2, #2
 800051c:	4013      	ands	r3, r2
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000522:	4b20      	ldr	r3, [pc, #128]	@ (80005a4 <MX_GPIO_Init+0xf8>)
 8000524:	2200      	movs	r2, #0
 8000526:	2120      	movs	r1, #32
 8000528:	0018      	movs	r0, r3
 800052a:	f002 f879 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	2280      	movs	r2, #128	@ 0x80
 8000532:	0192      	lsls	r2, r2, #6
 8000534:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2284      	movs	r2, #132	@ 0x84
 800053a:	0392      	lsls	r2, r2, #14
 800053c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000544:	193b      	adds	r3, r7, r4
 8000546:	4a18      	ldr	r2, [pc, #96]	@ (80005a8 <MX_GPIO_Init+0xfc>)
 8000548:	0019      	movs	r1, r3
 800054a:	0010      	movs	r0, r2
 800054c:	f001 feea 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2220      	movs	r2, #32
 8000554:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	193a      	adds	r2, r7, r4
 8000564:	23a0      	movs	r3, #160	@ 0xa0
 8000566:	05db      	lsls	r3, r3, #23
 8000568:	0011      	movs	r1, r2
 800056a:	0018      	movs	r0, r3
 800056c:	f001 feda 	bl	8002324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000570:	0021      	movs	r1, r4
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2220      	movs	r2, #32
 8000576:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2201      	movs	r2, #1
 800057c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058a:	187b      	adds	r3, r7, r1
 800058c:	4a05      	ldr	r2, [pc, #20]	@ (80005a4 <MX_GPIO_Init+0xf8>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f001 fec7 	bl	8002324 <HAL_GPIO_Init>

}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b00b      	add	sp, #44	@ 0x2c
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	40021000 	.word	0x40021000
 80005a4:	50000400 	.word	0x50000400
 80005a8:	50000800 	.word	0x50000800

080005ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000628 <MX_I2C1_Init+0x7c>)
 80005b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 80005b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005b8:	22c1      	movs	r2, #193	@ 0xc1
 80005ba:	00d2      	lsls	r2, r2, #3
 80005bc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005be:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c4:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005d0:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005d6:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005ea:	0018      	movs	r0, r3
 80005ec:	f002 f836 	bl	800265c <HAL_I2C_Init>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005f4:	f000 fa91 	bl	8000b1a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	0018      	movs	r0, r3
 80005fe:	f002 f8d3 	bl	80027a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000606:	f000 fa88 	bl	8000b1a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_I2C1_Init+0x78>)
 800060c:	2100      	movs	r1, #0
 800060e:	0018      	movs	r0, r3
 8000610:	f002 f916 	bl	8002840 <HAL_I2CEx_ConfigDigitalFilter>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000618:	f000 fa7f 	bl	8000b1a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	20000084 	.word	0x20000084
 8000628:	40005400 	.word	0x40005400

0800062c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b089      	sub	sp, #36	@ 0x24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	240c      	movs	r4, #12
 8000636:	193b      	adds	r3, r7, r4
 8000638:	0018      	movs	r0, r3
 800063a:	2314      	movs	r3, #20
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f005 fd96 	bl	8006170 <memset>
  if(i2cHandle->Instance==I2C1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a17      	ldr	r2, [pc, #92]	@ (80006a8 <HAL_I2C_MspInit+0x7c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d128      	bne.n	80006a0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 8000650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 8000654:	2102      	movs	r1, #2
 8000656:	430a      	orrs	r2, r1
 8000658:	62da      	str	r2, [r3, #44]	@ 0x2c
 800065a:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 800065c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065e:	2202      	movs	r2, #2
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000666:	0021      	movs	r1, r4
 8000668:	187b      	adds	r3, r7, r1
 800066a:	22c0      	movs	r2, #192	@ 0xc0
 800066c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2212      	movs	r2, #18
 8000672:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2203      	movs	r2, #3
 800067e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2201      	movs	r2, #1
 8000684:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	187b      	adds	r3, r7, r1
 8000688:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <HAL_I2C_MspInit+0x84>)
 800068a:	0019      	movs	r1, r3
 800068c:	0010      	movs	r0, r2
 800068e:	f001 fe49 	bl	8002324 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 8000694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000696:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 8000698:	2180      	movs	r1, #128	@ 0x80
 800069a:	0389      	lsls	r1, r1, #14
 800069c:	430a      	orrs	r2, r1
 800069e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b009      	add	sp, #36	@ 0x24
 80006a6:	bd90      	pop	{r4, r7, pc}
 80006a8:	40005400 	.word	0x40005400
 80006ac:	40021000 	.word	0x40021000
 80006b0:	50000400 	.word	0x50000400

080006b4 <cb_WAKE>:
//	LORAWAN_MODULE_ERROR,
} LoRaWAN_State_t;
volatile LoRaWAN_State_t lorawan_state = LORAWAN_NOT_JOINED;

void cb_WAKE(const char* str)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	AWAKE = true;
 80006bc:	4b03      	ldr	r3, [pc, #12]	@ (80006cc <cb_WAKE+0x18>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
	// Start a timer to determine when the module will sleep again
}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	20000114 	.word	0x20000114

080006d0 <cb_JOIN_SUCCESS>:

void cb_JOIN_SUCCESS(const char* str)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_JOINED;
 80006d8:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <cb_JOIN_SUCCESS+0x18>)
 80006da:	2202      	movs	r2, #2
 80006dc:	701a      	strb	r2, [r3, #0]
}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b002      	add	sp, #8
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	20000250 	.word	0x20000250

080006ec <cb_NOT_JOINED>:
void cb_NOT_JOINED(const char* str)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_NOT_JOINED;
 80006f4:	4b03      	ldr	r3, [pc, #12]	@ (8000704 <cb_NOT_JOINED+0x18>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	20000250 	.word	0x20000250

08000708 <cb_DATA_SENT>:
void cb_DATA_SENT(const char* str)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
//    } else {
//        printf("DEBUG: Could not parse TX status from: %s\n", str);
//        last_tx_status = TX_STATUS_UNKNOWN;
//        // TODO: Initiate sleep flag here!
//    }
}
 8000710:	46c0      	nop			@ (mov r8, r8)
 8000712:	46bd      	mov	sp, r7
 8000714:	b002      	add	sp, #8
 8000716:	bd80      	pop	{r7, pc}

08000718 <cb_DATA_RESPONSE>:
void cb_DATA_RESPONSE(const char* str)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    // Fast extraction of hex data from RX message
    // Format: "RX: W:1, P:1, C:2, F:922200000Hz, DR:2, R:-67dBm, S:5dB, 0102030405"
    
    // Find the last comma and extract data after it
    const char* last_comma = strrchr(str, ',');
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	212c      	movs	r1, #44	@ 0x2c
 8000724:	0018      	movs	r0, r3
 8000726:	f005 fd3f 	bl	80061a8 <strrchr>
 800072a:	0003      	movs	r3, r0
 800072c:	60fb      	str	r3, [r7, #12]
    if (last_comma) {
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d04f      	beq.n	80007d4 <cb_DATA_RESPONSE+0xbc>
        last_comma++; // Skip the comma
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	3301      	adds	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
        
        // Skip any spaces
        while (*last_comma == ' ') last_comma++;
 800073a:	e002      	b.n	8000742 <cb_DATA_RESPONSE+0x2a>
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3301      	adds	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b20      	cmp	r3, #32
 8000748:	d0f8      	beq.n	800073c <cb_DATA_RESPONSE+0x24>
        
        // Copy hex data, removing any trailing \r\n
        int i = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
        while (last_comma[i] && last_comma[i] != '\r' && last_comma[i] != '\n' && i < 255) {
 800074e:	e00d      	b.n	800076c <cb_DATA_RESPONSE+0x54>
            last_downlink.data[i] = last_comma[i];
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	68fa      	ldr	r2, [r7, #12]
 8000754:	18d3      	adds	r3, r2, r3
 8000756:	7818      	ldrb	r0, [r3, #0]
 8000758:	4a22      	ldr	r2, [pc, #136]	@ (80007e4 <cb_DATA_RESPONSE+0xcc>)
 800075a:	2128      	movs	r1, #40	@ 0x28
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	18d3      	adds	r3, r2, r3
 8000760:	185b      	adds	r3, r3, r1
 8000762:	1c02      	adds	r2, r0, #0
 8000764:	701a      	strb	r2, [r3, #0]
            i++;
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	3301      	adds	r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
        while (last_comma[i] && last_comma[i] != '\r' && last_comma[i] != '\n' && i < 255) {
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	18d3      	adds	r3, r2, r3
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d00e      	beq.n	8000796 <cb_DATA_RESPONSE+0x7e>
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	18d3      	adds	r3, r2, r3
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b0d      	cmp	r3, #13
 8000782:	d008      	beq.n	8000796 <cb_DATA_RESPONSE+0x7e>
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	18d3      	adds	r3, r2, r3
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b0a      	cmp	r3, #10
 800078e:	d002      	beq.n	8000796 <cb_DATA_RESPONSE+0x7e>
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	2bfe      	cmp	r3, #254	@ 0xfe
 8000794:	dddc      	ble.n	8000750 <cb_DATA_RESPONSE+0x38>
        }
        last_downlink.data[i] = '\0';
 8000796:	4a13      	ldr	r2, [pc, #76]	@ (80007e4 <cb_DATA_RESPONSE+0xcc>)
 8000798:	2128      	movs	r1, #40	@ 0x28
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	18d3      	adds	r3, r2, r3
 800079e:	185b      	adds	r3, r3, r1
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
        last_downlink.data_length = i / 2; // Hex string length / 2 = byte count
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	da00      	bge.n	80007ac <cb_DATA_RESPONSE+0x94>
 80007aa:	3301      	adds	r3, #1
 80007ac:	105b      	asrs	r3, r3, #1
 80007ae:	0019      	movs	r1, r3
 80007b0:	4a0c      	ldr	r2, [pc, #48]	@ (80007e4 <cb_DATA_RESPONSE+0xcc>)
 80007b2:	2394      	movs	r3, #148	@ 0x94
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	50d1      	str	r1, [r2, r3]
        last_downlink.valid = true;
 80007b8:	4a0a      	ldr	r2, [pc, #40]	@ (80007e4 <cb_DATA_RESPONSE+0xcc>)
 80007ba:	2396      	movs	r3, #150	@ 0x96
 80007bc:	005b      	lsls	r3, r3, #1
 80007be:	2101      	movs	r1, #1
 80007c0:	54d1      	strb	r1, [r2, r3]
        
        // Process the hex data (implement your logic here)
        process_downlink_data(last_downlink.data, last_downlink.data_length, 0);
 80007c2:	4a08      	ldr	r2, [pc, #32]	@ (80007e4 <cb_DATA_RESPONSE+0xcc>)
 80007c4:	2394      	movs	r3, #148	@ 0x94
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	58d1      	ldr	r1, [r2, r3]
 80007ca:	4b07      	ldr	r3, [pc, #28]	@ (80007e8 <cb_DATA_RESPONSE+0xd0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 f94e 	bl	8000a70 <process_downlink_data>
    }
    lorawan_state = DEVICE_SLEEP;
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <cb_DATA_RESPONSE+0xd4>)
 80007d6:	2205      	movs	r2, #5
 80007d8:	701a      	strb	r2, [r3, #0]
}
 80007da:	46c0      	nop			@ (mov r8, r8)
 80007dc:	46bd      	mov	sp, r7
 80007de:	b004      	add	sp, #16
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	20000120 	.word	0x20000120
 80007e8:	20000148 	.word	0x20000148
 80007ec:	20000250 	.word	0x20000250

080007f0 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	000a      	movs	r2, r1
 80007fa:	1cbb      	adds	r3, r7, #2
 80007fc:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == LPUART1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a07      	ldr	r2, [pc, #28]	@ (8000820 <HAL_UARTEx_RxEventCallback+0x30>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d106      	bne.n	8000816 <HAL_UARTEx_RxEventCallback+0x26>
	{
		ATC_IdleLineCallback(&lora, Size);
 8000808:	1cbb      	adds	r3, r7, #2
 800080a:	881a      	ldrh	r2, [r3, #0]
 800080c:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <HAL_UARTEx_RxEventCallback+0x34>)
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f005 f87c 	bl	800590e <ATC_IdleLineCallback>
	}
}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	40004800 	.word	0x40004800
 8000824:	200000d8 	.word	0x200000d8

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b590      	push	{r4, r7, lr}
 800082a:	b089      	sub	sp, #36	@ 0x24
 800082c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f001 f9bb 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f8af 	bl	8000994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f7ff fe39 	bl	80004ac <MX_GPIO_Init>
  MX_DMA_Init();
 800083a:	f7ff fe19 	bl	8000470 <MX_DMA_Init>
  MX_I2C1_Init();
 800083e:	f7ff feb5 	bl	80005ac <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000842:	f000 fa65 	bl	8000d10 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ATC_Init(&lora, &hlpuart1, 512, "LoRaWAN");
 8000846:	4b3f      	ldr	r3, [pc, #252]	@ (8000944 <main+0x11c>)
 8000848:	2280      	movs	r2, #128	@ 0x80
 800084a:	0092      	lsls	r2, r2, #2
 800084c:	493e      	ldr	r1, [pc, #248]	@ (8000948 <main+0x120>)
 800084e:	483f      	ldr	r0, [pc, #252]	@ (800094c <main+0x124>)
 8000850:	f004 fe64 	bl	800551c <ATC_Init>
  ATC_SetEvents(&lora, events);
 8000854:	4a3e      	ldr	r2, [pc, #248]	@ (8000950 <main+0x128>)
 8000856:	4b3d      	ldr	r3, [pc, #244]	@ (800094c <main+0x124>)
 8000858:	0011      	movs	r1, r2
 800085a:	0018      	movs	r0, r3
 800085c:	f004 ff15 	bl	800568a <ATC_SetEvents>
//  scan_i2c_bus(); // Check what devices exist
//  sensirion_i2c_hal_init();

  const char *dev_eui = "0025CA00000055EE";
 8000860:	4b3c      	ldr	r3, [pc, #240]	@ (8000954 <main+0x12c>)
 8000862:	60fb      	str	r3, [r7, #12]
  const char *app_eui = "0025CA00000055EE";
 8000864:	4b3b      	ldr	r3, [pc, #236]	@ (8000954 <main+0x12c>)
 8000866:	60bb      	str	r3, [r7, #8]
  const char *app_key = "2B7E151628AED2A6ABF7158809CF4F3C";
 8000868:	4b3b      	ldr	r3, [pc, #236]	@ (8000958 <main+0x130>)
 800086a:	607b      	str	r3, [r7, #4]
  if (lorawan_configure(&lora, dev_eui, app_eui, app_key)) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	68f9      	ldr	r1, [r7, #12]
 8000872:	4836      	ldr	r0, [pc, #216]	@ (800094c <main+0x124>)
 8000874:	f000 fb20 	bl	8000eb8 <lorawan_configure>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d004      	beq.n	8000886 <main+0x5e>
      printf("LoRaWAN configuration successful\n");
 800087c:	4b37      	ldr	r3, [pc, #220]	@ (800095c <main+0x134>)
 800087e:	0018      	movs	r0, r3
 8000880:	f005 fb4a 	bl	8005f18 <puts>
 8000884:	e003      	b.n	800088e <main+0x66>
  } else {
      printf("LoRaWAN configuration failed\n");
 8000886:	4b36      	ldr	r3, [pc, #216]	@ (8000960 <main+0x138>)
 8000888:	0018      	movs	r0, r3
 800088a:	f005 fb45 	bl	8005f18 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ATC_Loop(&lora);
 800088e:	4b2f      	ldr	r3, [pc, #188]	@ (800094c <main+0x124>)
 8000890:	0018      	movs	r0, r3
 8000892:	f004 ff32 	bl	80056fa <ATC_Loop>
	  switch (lorawan_state) {
 8000896:	4b33      	ldr	r3, [pc, #204]	@ (8000964 <main+0x13c>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b06      	cmp	r3, #6
 800089e:	d8f6      	bhi.n	800088e <main+0x66>
 80008a0:	009a      	lsls	r2, r3, #2
 80008a2:	4b31      	ldr	r3, [pc, #196]	@ (8000968 <main+0x140>)
 80008a4:	18d3      	adds	r3, r2, r3
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	469f      	mov	pc, r3
	  case LORAWAN_NOT_JOINED:
		{
			LoRaWAN_Error_t join_result = join_network(&lora);
 80008aa:	1cfc      	adds	r4, r7, #3
 80008ac:	4b27      	ldr	r3, [pc, #156]	@ (800094c <main+0x124>)
 80008ae:	0018      	movs	r0, r3
 80008b0:	f001 f8ee 	bl	8001a90 <join_network>
 80008b4:	0003      	movs	r3, r0
 80008b6:	7023      	strb	r3, [r4, #0]
			if (join_result == LORAWAN_OK) {
 80008b8:	1cfb      	adds	r3, r7, #3
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d107      	bne.n	80008d0 <main+0xa8>
				lorawan_state = LORAWAN_JOINING;
 80008c0:	4b28      	ldr	r3, [pc, #160]	@ (8000964 <main+0x13c>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
				printf("DEBUG: Join command sent successfully\n");
 80008c6:	4b29      	ldr	r3, [pc, #164]	@ (800096c <main+0x144>)
 80008c8:	0018      	movs	r0, r3
 80008ca:	f005 fb25 	bl	8005f18 <puts>
			} else {
				printf("ERROR: Join command failed with error %d\n", join_result);
				// Could implement retry logic here
			}
		}
		break;
 80008ce:	e037      	b.n	8000940 <main+0x118>
				printf("ERROR: Join command failed with error %d\n", join_result);
 80008d0:	1cfb      	adds	r3, r7, #3
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	4b26      	ldr	r3, [pc, #152]	@ (8000970 <main+0x148>)
 80008d6:	0011      	movs	r1, r2
 80008d8:	0018      	movs	r0, r3
 80008da:	f005 faad 	bl	8005e38 <iprintf>
		break;
 80008de:	e02f      	b.n	8000940 <main+0x118>
	  case LORAWAN_JOINING:
		// Wait for join callback to change state
		break;
	  case LORAWAN_JOINED:
		  // Ready to send data
		  printf("DEBUG: Sending test data...\n");
 80008e0:	4b24      	ldr	r3, [pc, #144]	@ (8000974 <main+0x14c>)
 80008e2:	0018      	movs	r0, r3
 80008e4:	f005 fb18 	bl	8005f18 <puts>
		  last_tx_status = TX_STATUS_UNKNOWN; // Reset status before sending
 80008e8:	4b23      	ldr	r3, [pc, #140]	@ (8000978 <main+0x150>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
		  resp = ATC_SendReceive(&lora, "AT+SEND \"AA\"\r\n", 200, NULL, 2000, 2, "OK");
 80008ee:	4923      	ldr	r1, [pc, #140]	@ (800097c <main+0x154>)
 80008f0:	4816      	ldr	r0, [pc, #88]	@ (800094c <main+0x124>)
 80008f2:	4b23      	ldr	r3, [pc, #140]	@ (8000980 <main+0x158>)
 80008f4:	9302      	str	r3, [sp, #8]
 80008f6:	2302      	movs	r3, #2
 80008f8:	9301      	str	r3, [sp, #4]
 80008fa:	23fa      	movs	r3, #250	@ 0xfa
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2300      	movs	r3, #0
 8000902:	22c8      	movs	r2, #200	@ 0xc8
 8000904:	f004 ff09 	bl	800571a <ATC_SendReceive>
 8000908:	0002      	movs	r2, r0
 800090a:	4b1e      	ldr	r3, [pc, #120]	@ (8000984 <main+0x15c>)
 800090c:	601a      	str	r2, [r3, #0]
		  if (resp > 0) {
 800090e:	4b1d      	ldr	r3, [pc, #116]	@ (8000984 <main+0x15c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	dd07      	ble.n	8000926 <main+0xfe>
			  lorawan_state = LORAWAN_DATA_SENDING;
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <main+0x13c>)
 8000918:	2204      	movs	r2, #4
 800091a:	701a      	strb	r2, [r3, #0]
			  printf("DEBUG: Send command accepted\n");
 800091c:	4b1a      	ldr	r3, [pc, #104]	@ (8000988 <main+0x160>)
 800091e:	0018      	movs	r0, r3
 8000920:	f005 fafa 	bl	8005f18 <puts>
		  } else {
			  printf("ERROR: Send command failed\n");
			  // Stay in JOINED state to retry
		  }
	  break;
 8000924:	e00c      	b.n	8000940 <main+0x118>
			  printf("ERROR: Send command failed\n");
 8000926:	4b19      	ldr	r3, [pc, #100]	@ (800098c <main+0x164>)
 8000928:	0018      	movs	r0, r3
 800092a:	f005 faf5 	bl	8005f18 <puts>
	  break;
 800092e:	e007      	b.n	8000940 <main+0x118>
	  case LORAWAN_DATA_SENDING:
      break;
	  case DEVICE_SLEEP:
		  // Eren can do sleep, no clue how, expecially with the atc lib.
		  HAL_Delay(10000); //simulate 10 second sleep
 8000930:	4b17      	ldr	r3, [pc, #92]	@ (8000990 <main+0x168>)
 8000932:	0018      	movs	r0, r3
 8000934:	f001 f9a8 	bl	8001c88 <HAL_Delay>
		  lorawan_state = COLLECT_DATA;
 8000938:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <main+0x13c>)
 800093a:	2206      	movs	r2, #6
 800093c:	701a      	strb	r2, [r3, #0]
	  break;
 800093e:	46c0      	nop			@ (mov r8, r8)
	  ATC_Loop(&lora);
 8000940:	e7a5      	b.n	800088e <main+0x66>
 8000942:	46c0      	nop			@ (mov r8, r8)
 8000944:	08007018 	.word	0x08007018
 8000948:	20000258 	.word	0x20000258
 800094c:	200000d8 	.word	0x200000d8
 8000950:	08007b60 	.word	0x08007b60
 8000954:	08007020 	.word	0x08007020
 8000958:	08007034 	.word	0x08007034
 800095c:	08007058 	.word	0x08007058
 8000960:	0800707c 	.word	0x0800707c
 8000964:	20000250 	.word	0x20000250
 8000968:	08007b90 	.word	0x08007b90
 800096c:	0800709c 	.word	0x0800709c
 8000970:	080070c4 	.word	0x080070c4
 8000974:	080070f0 	.word	0x080070f0
 8000978:	2000011c 	.word	0x2000011c
 800097c:	0800710c 	.word	0x0800710c
 8000980:	0800711c 	.word	0x0800711c
 8000984:	20000118 	.word	0x20000118
 8000988:	08007120 	.word	0x08007120
 800098c:	08007140 	.word	0x08007140
 8000990:	00002710 	.word	0x00002710

08000994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b09f      	sub	sp, #124	@ 0x7c
 8000998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099a:	2440      	movs	r4, #64	@ 0x40
 800099c:	193b      	adds	r3, r7, r4
 800099e:	0018      	movs	r0, r3
 80009a0:	2338      	movs	r3, #56	@ 0x38
 80009a2:	001a      	movs	r2, r3
 80009a4:	2100      	movs	r1, #0
 80009a6:	f005 fbe3 	bl	8006170 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009aa:	232c      	movs	r3, #44	@ 0x2c
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	0018      	movs	r0, r3
 80009b0:	2314      	movs	r3, #20
 80009b2:	001a      	movs	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	f005 fbdb 	bl	8006170 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	0018      	movs	r0, r3
 80009be:	2328      	movs	r3, #40	@ 0x28
 80009c0:	001a      	movs	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	f005 fbd4 	bl	8006170 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c8:	4b27      	ldr	r3, [pc, #156]	@ (8000a68 <SystemClock_Config+0xd4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a27      	ldr	r2, [pc, #156]	@ (8000a6c <SystemClock_Config+0xd8>)
 80009ce:	401a      	ands	r2, r3
 80009d0:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <SystemClock_Config+0xd4>)
 80009d2:	2180      	movs	r1, #128	@ 0x80
 80009d4:	0109      	lsls	r1, r1, #4
 80009d6:	430a      	orrs	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009da:	0021      	movs	r1, r4
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2210      	movs	r2, #16
 80009e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2201      	movs	r2, #1
 80009e6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	22a0      	movs	r2, #160	@ 0xa0
 80009f2:	0212      	lsls	r2, r2, #8
 80009f4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	0018      	movs	r0, r3
 8000a00:	f001 ff6a 	bl	80028d8 <HAL_RCC_OscConfig>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a08:	f000 f887 	bl	8000b1a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	212c      	movs	r1, #44	@ 0x2c
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	220f      	movs	r2, #15
 8000a12:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2100      	movs	r1, #0
 8000a30:	0018      	movs	r0, r3
 8000a32:	f002 fb25 	bl	8003080 <HAL_RCC_ClockConfig>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a3a:	f000 f86e 	bl	8000b1a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	220c      	movs	r2, #12
 8000a42:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	0018      	movs	r0, r3
 8000a54:	f002 fd18 	bl	8003488 <HAL_RCCEx_PeriphCLKConfig>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a5c:	f000 f85d 	bl	8000b1a <Error_Handler>
  }
}
 8000a60:	46c0      	nop			@ (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b01f      	add	sp, #124	@ 0x7c
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	40007000 	.word	0x40007000
 8000a6c:	ffffe7ff 	.word	0xffffe7ff

08000a70 <process_downlink_data>:
//
//	return error;
//}

// Function to process the received downlink data
void process_downlink_data(const char* hex_data, int data_length, int port) {
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b0a9      	sub	sp, #164	@ 0xa4
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
    if (data_length == 0) {
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d045      	beq.n	8000b0e <process_downlink_data+0x9e>
        return;
    }
    
    // Convert hex string to bytes for processing
    uint8_t bytes[128]; // Buffer for converted bytes
    int byte_count = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	229c      	movs	r2, #156	@ 0x9c
 8000a86:	18ba      	adds	r2, r7, r2
 8000a88:	6013      	str	r3, [r2, #0]
    
    for (int i = 0; i < strlen(hex_data) && i < sizeof(bytes) * 2; i += 2) {
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	2298      	movs	r2, #152	@ 0x98
 8000a8e:	18ba      	adds	r2, r7, r2
 8000a90:	6013      	str	r3, [r2, #0]
 8000a92:	e02d      	b.n	8000af0 <process_downlink_data+0x80>
        char hex_byte[3] = {hex_data[i], hex_data[i+1], '\0'};
 8000a94:	2498      	movs	r4, #152	@ 0x98
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	18d3      	adds	r3, r2, r3
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	2114      	movs	r1, #20
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	701a      	strb	r2, [r3, #0]
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	18d3      	adds	r3, r2, r3
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	187b      	adds	r3, r7, r1
 8000ab4:	705a      	strb	r2, [r3, #1]
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	2200      	movs	r2, #0
 8000aba:	709a      	strb	r2, [r3, #2]
        bytes[byte_count] = (uint8_t)strtol(hex_byte, NULL, 16);
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2210      	movs	r2, #16
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f005 f8e8 	bl	8005c98 <strtol>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	b2d9      	uxtb	r1, r3
 8000acc:	2318      	movs	r3, #24
 8000ace:	18fa      	adds	r2, r7, r3
 8000ad0:	209c      	movs	r0, #156	@ 0x9c
 8000ad2:	183b      	adds	r3, r7, r0
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	18d3      	adds	r3, r2, r3
 8000ad8:	1c0a      	adds	r2, r1, #0
 8000ada:	701a      	strb	r2, [r3, #0]
        byte_count++;
 8000adc:	183b      	adds	r3, r7, r0
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	183a      	adds	r2, r7, r0
 8000ae4:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < strlen(hex_data) && i < sizeof(bytes) * 2; i += 2) {
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	3302      	adds	r3, #2
 8000aec:	193a      	adds	r2, r7, r4
 8000aee:	6013      	str	r3, [r2, #0]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff fb08 	bl	8000108 <strlen>
 8000af8:	0002      	movs	r2, r0
 8000afa:	2198      	movs	r1, #152	@ 0x98
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d906      	bls.n	8000b12 <process_downlink_data+0xa2>
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2bff      	cmp	r3, #255	@ 0xff
 8000b0a:	d9c3      	bls.n	8000a94 <process_downlink_data+0x24>
            // Change uplink interval, min 5 minutes, max 1hr
            break;
            
        default:
            // return maybe???
            break;
 8000b0c:	e001      	b.n	8000b12 <process_downlink_data+0xa2>
        return;
 8000b0e:	46c0      	nop			@ (mov r8, r8)
 8000b10:	e000      	b.n	8000b14 <process_downlink_data+0xa4>
            break;
 8000b12:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b029      	add	sp, #164	@ 0xa4
 8000b18:	bd90      	pop	{r4, r7, pc}

08000b1a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1a:	b580      	push	{r7, lr}
 8000b1c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b1e:	b672      	cpsid	i
}
 8000b20:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	e7fd      	b.n	8000b22 <Error_Handler+0x8>
	...

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <HAL_MspInit+0x24>)
 8000b2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_MspInit+0x24>)
 8000b32:	2101      	movs	r1, #1
 8000b34:	430a      	orrs	r2, r1
 8000b36:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <HAL_MspInit+0x24>)
 8000b3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b3c:	4b03      	ldr	r3, [pc, #12]	@ (8000b4c <HAL_MspInit+0x24>)
 8000b3e:	2180      	movs	r1, #128	@ 0x80
 8000b40:	0549      	lsls	r1, r1, #21
 8000b42:	430a      	orrs	r2, r1
 8000b44:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	46c0      	nop			@ (mov r8, r8)
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40021000 	.word	0x40021000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	e7fd      	b.n	8000b54 <NMI_Handler+0x4>

08000b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("HARD FAULT OCCURRED!\n");
 8000b5c:	4b02      	ldr	r3, [pc, #8]	@ (8000b68 <HardFault_Handler+0x10>)
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f005 f9da 	bl	8005f18 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b64:	46c0      	nop			@ (mov r8, r8)
 8000b66:	e7fd      	b.n	8000b64 <HardFault_Handler+0xc>
 8000b68:	0800715c 	.word	0x0800715c

08000b6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b70:	46c0      	nop			@ (mov r8, r8)
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b84:	f001 f864 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b88:	46c0      	nop			@ (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000b94:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000b96:	0018      	movs	r0, r3
 8000b98:	f001 fadd 	bl	8002156 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000b9c:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f001 fad9 	bl	8002156 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000ba4:	46c0      	nop			@ (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	20000328 	.word	0x20000328
 8000bb0:	200002e0 	.word	0x200002e0

08000bb4 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <RNG_LPUART1_IRQHandler+0x14>)
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f002 fffa 	bl	8003bb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8000bc0:	46c0      	nop			@ (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	20000258 	.word	0x20000258

08000bcc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	e00a      	b.n	8000bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000bde:	e000      	b.n	8000be2 <_read+0x16>
 8000be0:	bf00      	nop
 8000be2:	0001      	movs	r1, r0
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1c5a      	adds	r2, r3, #1
 8000be8:	60ba      	str	r2, [r7, #8]
 8000bea:	b2ca      	uxtb	r2, r1
 8000bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	dbf0      	blt.n	8000bde <_read+0x12>
  }

  return len;
 8000bfc:	687b      	ldr	r3, [r7, #4]
}
 8000bfe:	0018      	movs	r0, r3
 8000c00:	46bd      	mov	sp, r7
 8000c02:	b006      	add	sp, #24
 8000c04:	bd80      	pop	{r7, pc}

08000c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b086      	sub	sp, #24
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
 8000c16:	e009      	b.n	8000c2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1c5a      	adds	r2, r3, #1
 8000c1c:	60ba      	str	r2, [r7, #8]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	0018      	movs	r0, r3
 8000c22:	e000      	b.n	8000c26 <_write+0x20>
 8000c24:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c26:	697b      	ldr	r3, [r7, #20]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	617b      	str	r3, [r7, #20]
 8000c2c:	697a      	ldr	r2, [r7, #20]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dbf1      	blt.n	8000c18 <_write+0x12>
  }
  return len;
 8000c34:	687b      	ldr	r3, [r7, #4]
}
 8000c36:	0018      	movs	r0, r3
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b006      	add	sp, #24
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_close>:

int _close(int file)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	425b      	negs	r3, r3
}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b002      	add	sp, #8
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
 8000c5a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2280      	movs	r2, #128	@ 0x80
 8000c60:	0192      	lsls	r2, r2, #6
 8000c62:	605a      	str	r2, [r3, #4]
  return 0;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	0018      	movs	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	b002      	add	sp, #8
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_isatty>:

int _isatty(int file)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c76:	2301      	movs	r3, #1
}
 8000c78:	0018      	movs	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	b002      	add	sp, #8
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c8c:	2300      	movs	r3, #0
}
 8000c8e:	0018      	movs	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b004      	add	sp, #16
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca0:	4a14      	ldr	r2, [pc, #80]	@ (8000cf4 <_sbrk+0x5c>)
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <_sbrk+0x60>)
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <_sbrk+0x64>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <_sbrk+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	18d3      	adds	r3, r2, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d207      	bcs.n	8000cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc8:	f005 faf8 	bl	80062bc <__errno>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	220c      	movs	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	425b      	negs	r3, r3
 8000cd6:	e009      	b.n	8000cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cde:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	18d2      	adds	r2, r2, r3
 8000ce6:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <_sbrk+0x64>)
 8000ce8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	0018      	movs	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b006      	add	sp, #24
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20005000 	.word	0x20005000
 8000cf8:	00000400 	.word	0x00000400
 8000cfc:	20000254 	.word	0x20000254
 8000d00:	200004c0 	.word	0x200004c0

08000d04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d08:	46c0      	nop			@ (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000d14:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <MX_LPUART1_UART_Init+0x54>)
 8000d16:	4a14      	ldr	r2, [pc, #80]	@ (8000d68 <MX_LPUART1_UART_Init+0x58>)
 8000d18:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <MX_LPUART1_UART_Init+0x54>)
 8000d1c:	22e1      	movs	r2, #225	@ 0xe1
 8000d1e:	0252      	lsls	r2, r2, #9
 8000d20:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b10      	ldr	r3, [pc, #64]	@ (8000d64 <MX_LPUART1_UART_Init+0x54>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <MX_LPUART1_UART_Init+0x54>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d64 <MX_LPUART1_UART_Init+0x54>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b0b      	ldr	r3, [pc, #44]	@ (8000d64 <MX_LPUART1_UART_Init+0x54>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d64 <MX_LPUART1_UART_Init+0x54>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d40:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <MX_LPUART1_UART_Init+0x54>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d46:	4b07      	ldr	r3, [pc, #28]	@ (8000d64 <MX_LPUART1_UART_Init+0x54>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <MX_LPUART1_UART_Init+0x54>)
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f002 fd38 	bl	80037c4 <HAL_UART_Init>
 8000d54:	1e03      	subs	r3, r0, #0
 8000d56:	d001      	beq.n	8000d5c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000d58:	f7ff fedf 	bl	8000b1a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000d5c:	46c0      	nop			@ (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	20000258 	.word	0x20000258
 8000d68:	40004800 	.word	0x40004800

08000d6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b089      	sub	sp, #36	@ 0x24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	240c      	movs	r4, #12
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	0018      	movs	r0, r3
 8000d7a:	2314      	movs	r3, #20
 8000d7c:	001a      	movs	r2, r3
 8000d7e:	2100      	movs	r1, #0
 8000d80:	f005 f9f6 	bl	8006170 <memset>
  if(uartHandle->Instance==LPUART1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a45      	ldr	r2, [pc, #276]	@ (8000ea0 <HAL_UART_MspInit+0x134>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d000      	beq.n	8000d90 <HAL_UART_MspInit+0x24>
 8000d8e:	e083      	b.n	8000e98 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d90:	4b44      	ldr	r3, [pc, #272]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000d92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000d94:	4b43      	ldr	r3, [pc, #268]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000d96:	2180      	movs	r1, #128	@ 0x80
 8000d98:	02c9      	lsls	r1, r1, #11
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	4b41      	ldr	r3, [pc, #260]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000da2:	4b40      	ldr	r3, [pc, #256]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000da4:	2101      	movs	r1, #1
 8000da6:	430a      	orrs	r2, r1
 8000da8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000daa:	4b3e      	ldr	r3, [pc, #248]	@ (8000ea4 <HAL_UART_MspInit+0x138>)
 8000dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dae:	2201      	movs	r2, #1
 8000db0:	4013      	ands	r3, r2
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000db6:	0021      	movs	r1, r4
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	187b      	adds	r3, r7, r1
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dca:	187b      	adds	r3, r7, r1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	2206      	movs	r2, #6
 8000dd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	187a      	adds	r2, r7, r1
 8000dd8:	23a0      	movs	r3, #160	@ 0xa0
 8000dda:	05db      	lsls	r3, r3, #23
 8000ddc:	0011      	movs	r1, r2
 8000dde:	0018      	movs	r0, r3
 8000de0:	f001 faa0 	bl	8002324 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000de4:	4b30      	ldr	r3, [pc, #192]	@ (8000ea8 <HAL_UART_MspInit+0x13c>)
 8000de6:	4a31      	ldr	r2, [pc, #196]	@ (8000eac <HAL_UART_MspInit+0x140>)
 8000de8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000dea:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea8 <HAL_UART_MspInit+0x13c>)
 8000dec:	2205      	movs	r2, #5
 8000dee:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df0:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea8 <HAL_UART_MspInit+0x13c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df6:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea8 <HAL_UART_MspInit+0x13c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dfc:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea8 <HAL_UART_MspInit+0x13c>)
 8000dfe:	2280      	movs	r2, #128	@ 0x80
 8000e00:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e02:	4b29      	ldr	r3, [pc, #164]	@ (8000ea8 <HAL_UART_MspInit+0x13c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e08:	4b27      	ldr	r3, [pc, #156]	@ (8000ea8 <HAL_UART_MspInit+0x13c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000e0e:	4b26      	ldr	r3, [pc, #152]	@ (8000ea8 <HAL_UART_MspInit+0x13c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e14:	4b24      	ldr	r3, [pc, #144]	@ (8000ea8 <HAL_UART_MspInit+0x13c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000e1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ea8 <HAL_UART_MspInit+0x13c>)
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f001 f835 	bl	8001e8c <HAL_DMA_Init>
 8000e22:	1e03      	subs	r3, r0, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000e26:	f7ff fe78 	bl	8000b1a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ea8 <HAL_UART_MspInit+0x13c>)
 8000e2e:	675a      	str	r2, [r3, #116]	@ 0x74
 8000e30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea8 <HAL_UART_MspInit+0x13c>)
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000e36:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb0 <HAL_UART_MspInit+0x144>)
 8000e38:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb4 <HAL_UART_MspInit+0x148>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <HAL_UART_MspInit+0x144>)
 8000e3e:	2205      	movs	r2, #5
 8000e40:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <HAL_UART_MspInit+0x144>)
 8000e44:	2210      	movs	r2, #16
 8000e46:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e48:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <HAL_UART_MspInit+0x144>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e4e:	4b18      	ldr	r3, [pc, #96]	@ (8000eb0 <HAL_UART_MspInit+0x144>)
 8000e50:	2280      	movs	r2, #128	@ 0x80
 8000e52:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e54:	4b16      	ldr	r3, [pc, #88]	@ (8000eb0 <HAL_UART_MspInit+0x144>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	@ (8000eb0 <HAL_UART_MspInit+0x144>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000e60:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <HAL_UART_MspInit+0x144>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e66:	4b12      	ldr	r3, [pc, #72]	@ (8000eb0 <HAL_UART_MspInit+0x144>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000e6c:	4b10      	ldr	r3, [pc, #64]	@ (8000eb0 <HAL_UART_MspInit+0x144>)
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f001 f80c 	bl	8001e8c <HAL_DMA_Init>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d001      	beq.n	8000e7c <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000e78:	f7ff fe4f 	bl	8000b1a <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb0 <HAL_UART_MspInit+0x144>)
 8000e80:	671a      	str	r2, [r3, #112]	@ 0x70
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <HAL_UART_MspInit+0x144>)
 8000e84:	687a      	ldr	r2, [r7, #4]
 8000e86:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	201d      	movs	r0, #29
 8000e8e:	f000 ffcb 	bl	8001e28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8000e92:	201d      	movs	r0, #29
 8000e94:	f000 ffdd 	bl	8001e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000e98:	46c0      	nop			@ (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b009      	add	sp, #36	@ 0x24
 8000e9e:	bd90      	pop	{r4, r7, pc}
 8000ea0:	40004800 	.word	0x40004800
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	200002e0 	.word	0x200002e0
 8000eac:	40020030 	.word	0x40020030
 8000eb0:	20000328 	.word	0x20000328
 8000eb4:	4002001c 	.word	0x4002001c

08000eb8 <lorawan_configure>:
 * @param dev_eui Device EUI (16 hex characters).
 * @param app_eui Application EUI (16 hex characters).
 * @param app_key Application key (32 hex characters).
 * @return true if configuration and join are successful, false otherwise.
 */
bool lorawan_configure(ATC_HandleTypeDef *lora, const char *dev_eui, const char *app_eui, const char *app_key) {
 8000eb8:	b5b0      	push	{r4, r5, r7, lr}
 8000eba:	b0cc      	sub	sp, #304	@ 0x130
 8000ebc:	af04      	add	r7, sp, #16
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	607a      	str	r2, [r7, #4]
 8000ec4:	603b      	str	r3, [r7, #0]
    LoRaWAN_Error_t err;

    // Temporarily disable factory reset to avoid issues
    // factor_reset(lora);

    printf("DEBUG: lorawan_configure called with lora handle: %p\n", (void*)lora);
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	4bbe      	ldr	r3, [pc, #760]	@ (80011c4 <lorawan_configure+0x30c>)
 8000eca:	0011      	movs	r1, r2
 8000ecc:	0018      	movs	r0, r3
 8000ece:	f004 ffb3 	bl	8005e38 <iprintf>
    if (lora == NULL) {
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d105      	bne.n	8000ee4 <lorawan_configure+0x2c>
        printf("ERROR: lora handle is NULL!\n");
 8000ed8:	4bbb      	ldr	r3, [pc, #748]	@ (80011c8 <lorawan_configure+0x310>)
 8000eda:	0018      	movs	r0, r3
 8000edc:	f005 f81c 	bl	8005f18 <puts>
        return false;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	e16b      	b.n	80011bc <lorawan_configure+0x304>
    }
    if (lora->hUart == NULL) {
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d105      	bne.n	8000ef8 <lorawan_configure+0x40>
        printf("ERROR: lora->hUart is NULL!\n");
 8000eec:	4bb7      	ldr	r3, [pc, #732]	@ (80011cc <lorawan_configure+0x314>)
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f005 f812 	bl	8005f18 <puts>
        return false;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	e161      	b.n	80011bc <lorawan_configure+0x304>
    }
    printf("DEBUG: lora->hUart = %p, Name = %s\n", (void*)lora->hUart, lora->Name);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6819      	ldr	r1, [r3, #0]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	1d1a      	adds	r2, r3, #4
 8000f00:	4bb3      	ldr	r3, [pc, #716]	@ (80011d0 <lorawan_configure+0x318>)
 8000f02:	0018      	movs	r0, r3
 8000f04:	f004 ff98 	bl	8005e38 <iprintf>

    // Test basic AT communication first
    printf("DEBUG: Testing basic AT communication...\n");
 8000f08:	4bb2      	ldr	r3, [pc, #712]	@ (80011d4 <lorawan_configure+0x31c>)
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f005 f804 	bl	8005f18 <puts>
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 8000f10:	2414      	movs	r4, #20
 8000f12:	193b      	adds	r3, r7, r4
 8000f14:	613b      	str	r3, [r7, #16]
    int resp = ATC_SendReceive(lora, "AT\r\n", 100, &response_ptr, 1000, 1, "OK");
 8000f16:	2310      	movs	r3, #16
 8000f18:	18fa      	adds	r2, r7, r3
 8000f1a:	49af      	ldr	r1, [pc, #700]	@ (80011d8 <lorawan_configure+0x320>)
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	4baf      	ldr	r3, [pc, #700]	@ (80011dc <lorawan_configure+0x324>)
 8000f20:	9302      	str	r3, [sp, #8]
 8000f22:	2301      	movs	r3, #1
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	23fa      	movs	r3, #250	@ 0xfa
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	2264      	movs	r2, #100	@ 0x64
 8000f30:	f004 fbf3 	bl	800571a <ATC_SendReceive>
 8000f34:	0003      	movs	r3, r0
 8000f36:	228a      	movs	r2, #138	@ 0x8a
 8000f38:	0052      	lsls	r2, r2, #1
 8000f3a:	18b9      	adds	r1, r7, r2
 8000f3c:	600b      	str	r3, [r1, #0]
    printf("DEBUG: AT test returned %d, response: %s\n", resp, resp > 0 ? response : "ERROR");
 8000f3e:	18bb      	adds	r3, r7, r2
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	dd01      	ble.n	8000f4a <lorawan_configure+0x92>
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	e000      	b.n	8000f4c <lorawan_configure+0x94>
 8000f4a:	4ba5      	ldr	r3, [pc, #660]	@ (80011e0 <lorawan_configure+0x328>)
 8000f4c:	248a      	movs	r4, #138	@ 0x8a
 8000f4e:	0064      	lsls	r4, r4, #1
 8000f50:	193a      	adds	r2, r7, r4
 8000f52:	6811      	ldr	r1, [r2, #0]
 8000f54:	48a3      	ldr	r0, [pc, #652]	@ (80011e4 <lorawan_configure+0x32c>)
 8000f56:	001a      	movs	r2, r3
 8000f58:	f004 ff6e 	bl	8005e38 <iprintf>
    
    // Try to get version info with different commands
    memset(response, 0, sizeof(response));
 8000f5c:	2380      	movs	r3, #128	@ 0x80
 8000f5e:	005a      	lsls	r2, r3, #1
 8000f60:	2514      	movs	r5, #20
 8000f62:	197b      	adds	r3, r7, r5
 8000f64:	2100      	movs	r1, #0
 8000f66:	0018      	movs	r0, r3
 8000f68:	f005 f902 	bl	8006170 <memset>
    response_ptr = response;
 8000f6c:	197b      	adds	r3, r7, r5
 8000f6e:	613b      	str	r3, [r7, #16]
    resp = ATC_SendReceive(lora, "AT+VER?\r\n", 100, &response_ptr, 1000, 1, "OK");
 8000f70:	2310      	movs	r3, #16
 8000f72:	18fa      	adds	r2, r7, r3
 8000f74:	499c      	ldr	r1, [pc, #624]	@ (80011e8 <lorawan_configure+0x330>)
 8000f76:	68f8      	ldr	r0, [r7, #12]
 8000f78:	4b98      	ldr	r3, [pc, #608]	@ (80011dc <lorawan_configure+0x324>)
 8000f7a:	9302      	str	r3, [sp, #8]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	9301      	str	r3, [sp, #4]
 8000f80:	23fa      	movs	r3, #250	@ 0xfa
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	0013      	movs	r3, r2
 8000f88:	2264      	movs	r2, #100	@ 0x64
 8000f8a:	f004 fbc6 	bl	800571a <ATC_SendReceive>
 8000f8e:	0003      	movs	r3, r0
 8000f90:	193a      	adds	r2, r7, r4
 8000f92:	6013      	str	r3, [r2, #0]
    printf("DEBUG: AT+VER? returned %d, response: %s\n", resp, resp > 0 ? response : "ERROR");
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	dd01      	ble.n	8000fa0 <lorawan_configure+0xe8>
 8000f9c:	197b      	adds	r3, r7, r5
 8000f9e:	e000      	b.n	8000fa2 <lorawan_configure+0xea>
 8000fa0:	4b8f      	ldr	r3, [pc, #572]	@ (80011e0 <lorawan_configure+0x328>)
 8000fa2:	228a      	movs	r2, #138	@ 0x8a
 8000fa4:	0052      	lsls	r2, r2, #1
 8000fa6:	18ba      	adds	r2, r7, r2
 8000fa8:	6811      	ldr	r1, [r2, #0]
 8000faa:	4890      	ldr	r0, [pc, #576]	@ (80011ec <lorawan_configure+0x334>)
 8000fac:	001a      	movs	r2, r3
 8000fae:	f004 ff43 	bl	8005e38 <iprintf>

    // Debug the input parameters
    printf("DEBUG: Input parameters:\n");
 8000fb2:	4b8f      	ldr	r3, [pc, #572]	@ (80011f0 <lorawan_configure+0x338>)
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f004 ffaf 	bl	8005f18 <puts>
    printf("  dev_eui: %s (length: %zu)\n", dev_eui, strlen(dev_eui));
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	f7ff f8a3 	bl	8000108 <strlen>
 8000fc2:	0002      	movs	r2, r0
 8000fc4:	68b9      	ldr	r1, [r7, #8]
 8000fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80011f4 <lorawan_configure+0x33c>)
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f004 ff35 	bl	8005e38 <iprintf>
    printf("  app_eui: %s (length: %zu)\n", app_eui, strlen(app_eui));
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff f899 	bl	8000108 <strlen>
 8000fd6:	0002      	movs	r2, r0
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	4b87      	ldr	r3, [pc, #540]	@ (80011f8 <lorawan_configure+0x340>)
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f004 ff2b 	bl	8005e38 <iprintf>
    printf("  app_key: %s (length: %zu)\n", app_key, strlen(app_key));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff f88f 	bl	8000108 <strlen>
 8000fea:	0002      	movs	r2, r0
 8000fec:	6839      	ldr	r1, [r7, #0]
 8000fee:	4b83      	ldr	r3, [pc, #524]	@ (80011fc <lorawan_configure+0x344>)
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f004 ff21 	bl	8005e38 <iprintf>
    
    // Print hex dump of app_key to see if there are any issues
    printf("  app_key hex dump: ");
 8000ff6:	4b82      	ldr	r3, [pc, #520]	@ (8001200 <lorawan_configure+0x348>)
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	f004 ff1d 	bl	8005e38 <iprintf>
    for (size_t i = 0; i < 32 && app_key[i] != '\0'; i++) {
 8000ffe:	2300      	movs	r3, #0
 8001000:	228c      	movs	r2, #140	@ 0x8c
 8001002:	0052      	lsls	r2, r2, #1
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	e011      	b.n	800102e <lorawan_configure+0x176>
        printf("%02X ", (unsigned char)app_key[i]);
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	248c      	movs	r4, #140	@ 0x8c
 800100e:	0064      	lsls	r4, r4, #1
 8001010:	193b      	adds	r3, r7, r4
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	18d3      	adds	r3, r2, r3
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	001a      	movs	r2, r3
 800101a:	4b7a      	ldr	r3, [pc, #488]	@ (8001204 <lorawan_configure+0x34c>)
 800101c:	0011      	movs	r1, r2
 800101e:	0018      	movs	r0, r3
 8001020:	f004 ff0a 	bl	8005e38 <iprintf>
    for (size_t i = 0; i < 32 && app_key[i] != '\0'; i++) {
 8001024:	193b      	adds	r3, r7, r4
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	193a      	adds	r2, r7, r4
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	218c      	movs	r1, #140	@ 0x8c
 8001030:	0049      	lsls	r1, r1, #1
 8001032:	187b      	adds	r3, r7, r1
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b1f      	cmp	r3, #31
 8001038:	d806      	bhi.n	8001048 <lorawan_configure+0x190>
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	187b      	adds	r3, r7, r1
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	18d3      	adds	r3, r2, r3
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1e0      	bne.n	800100a <lorawan_configure+0x152>
    }
    printf("\n");
 8001048:	200a      	movs	r0, #10
 800104a:	f004 ff05 	bl	8005e58 <putchar>

    // Validate input parameters
    if (!validate_hex_string(dev_eui, DEV_EUI_LENGTH) ||
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	2110      	movs	r1, #16
 8001052:	0018      	movs	r0, r3
 8001054:	f000 f8e4 	bl	8001220 <validate_hex_string>
 8001058:	0003      	movs	r3, r0
 800105a:	001a      	movs	r2, r3
 800105c:	2301      	movs	r3, #1
 800105e:	4053      	eors	r3, r2
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d117      	bne.n	8001096 <lorawan_configure+0x1de>
        !validate_hex_string(app_eui, APP_EUI_LENGTH) ||
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2110      	movs	r1, #16
 800106a:	0018      	movs	r0, r3
 800106c:	f000 f8d8 	bl	8001220 <validate_hex_string>
 8001070:	0003      	movs	r3, r0
 8001072:	001a      	movs	r2, r3
 8001074:	2301      	movs	r3, #1
 8001076:	4053      	eors	r3, r2
 8001078:	b2db      	uxtb	r3, r3
    if (!validate_hex_string(dev_eui, DEV_EUI_LENGTH) ||
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10b      	bne.n	8001096 <lorawan_configure+0x1de>
        !validate_hex_string(app_key, APP_KEY_LENGTH)) {
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2120      	movs	r1, #32
 8001082:	0018      	movs	r0, r3
 8001084:	f000 f8cc 	bl	8001220 <validate_hex_string>
 8001088:	0003      	movs	r3, r0
 800108a:	001a      	movs	r2, r3
 800108c:	2301      	movs	r3, #1
 800108e:	4053      	eors	r3, r2
 8001090:	b2db      	uxtb	r3, r3
        !validate_hex_string(app_eui, APP_EUI_LENGTH) ||
 8001092:	2b00      	cmp	r3, #0
 8001094:	d005      	beq.n	80010a2 <lorawan_configure+0x1ea>
        printf("Invalid EUI or AppKey format\n");
 8001096:	4b5c      	ldr	r3, [pc, #368]	@ (8001208 <lorawan_configure+0x350>)
 8001098:	0018      	movs	r0, r3
 800109a:	f004 ff3d 	bl	8005f18 <puts>
        return false;
 800109e:	2300      	movs	r3, #0
 80010a0:	e08c      	b.n	80011bc <lorawan_configure+0x304>
    }

    // Configure DevEUI, AppEUI, and AppKey
    if ((err = set_dev_eui(lora, dev_eui)) != LORAWAN_OK ||
 80010a2:	2520      	movs	r5, #32
 80010a4:	35ff      	adds	r5, #255	@ 0xff
 80010a6:	197c      	adds	r4, r7, r5
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	0011      	movs	r1, r2
 80010ae:	0018      	movs	r0, r3
 80010b0:	f000 f8fe 	bl	80012b0 <set_dev_eui>
 80010b4:	0003      	movs	r3, r0
 80010b6:	7023      	strb	r3, [r4, #0]
 80010b8:	197b      	adds	r3, r7, r5
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d119      	bne.n	80010f4 <lorawan_configure+0x23c>
        (err = set_app_eui(lora, app_eui)) != LORAWAN_OK ||
 80010c0:	197c      	adds	r4, r7, r5
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	0011      	movs	r1, r2
 80010c8:	0018      	movs	r0, r3
 80010ca:	f000 f9d9 	bl	8001480 <set_app_eui>
 80010ce:	0003      	movs	r3, r0
 80010d0:	7023      	strb	r3, [r4, #0]
    if ((err = set_dev_eui(lora, dev_eui)) != LORAWAN_OK ||
 80010d2:	197b      	adds	r3, r7, r5
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d10c      	bne.n	80010f4 <lorawan_configure+0x23c>
        (err = set_app_key(lora, app_key)) != LORAWAN_OK) {
 80010da:	197c      	adds	r4, r7, r5
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	0011      	movs	r1, r2
 80010e2:	0018      	movs	r0, r3
 80010e4:	f000 fa90 	bl	8001608 <set_app_key>
 80010e8:	0003      	movs	r3, r0
 80010ea:	7023      	strb	r3, [r4, #0]
        (err = set_app_eui(lora, app_eui)) != LORAWAN_OK ||
 80010ec:	197b      	adds	r3, r7, r5
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00a      	beq.n	800110a <lorawan_configure+0x252>
        printf("Error setting EUIs or AppKey: %d\n", err);
 80010f4:	2320      	movs	r3, #32
 80010f6:	33ff      	adds	r3, #255	@ 0xff
 80010f8:	18fb      	adds	r3, r7, r3
 80010fa:	781a      	ldrb	r2, [r3, #0]
 80010fc:	4b43      	ldr	r3, [pc, #268]	@ (800120c <lorawan_configure+0x354>)
 80010fe:	0011      	movs	r1, r2
 8001100:	0018      	movs	r0, r3
 8001102:	f004 fe99 	bl	8005e38 <iprintf>
        return false;
 8001106:	2300      	movs	r3, #0
 8001108:	e058      	b.n	80011bc <lorawan_configure+0x304>
    }

    // Configure region and sub-band
    if ((err = configure_region_and_channel(lora)) != LORAWAN_OK) {
 800110a:	2520      	movs	r5, #32
 800110c:	35ff      	adds	r5, #255	@ 0xff
 800110e:	197c      	adds	r4, r7, r5
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	0018      	movs	r0, r3
 8001114:	f000 fb4a 	bl	80017ac <configure_region_and_channel>
 8001118:	0003      	movs	r3, r0
 800111a:	7023      	strb	r3, [r4, #0]
 800111c:	197b      	adds	r3, r7, r5
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <lorawan_configure+0x27e>
        printf("Error configuring region/channel: %d\n", err);
 8001124:	197b      	adds	r3, r7, r5
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	4b39      	ldr	r3, [pc, #228]	@ (8001210 <lorawan_configure+0x358>)
 800112a:	0011      	movs	r1, r2
 800112c:	0018      	movs	r0, r3
 800112e:	f004 fe83 	bl	8005e38 <iprintf>
        return false;
 8001132:	2300      	movs	r3, #0
 8001134:	e042      	b.n	80011bc <lorawan_configure+0x304>
    }

    // Check and set frequency
    if ((err = check_and_set_frequency(lora)) != LORAWAN_OK) {
 8001136:	2520      	movs	r5, #32
 8001138:	35ff      	adds	r5, #255	@ 0xff
 800113a:	197c      	adds	r4, r7, r5
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	0018      	movs	r0, r3
 8001140:	f000 fb5c 	bl	80017fc <check_and_set_frequency>
 8001144:	0003      	movs	r3, r0
 8001146:	7023      	strb	r3, [r4, #0]
 8001148:	197b      	adds	r3, r7, r5
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d008      	beq.n	8001162 <lorawan_configure+0x2aa>
        printf("Error checking/setting frequency: %d\n", err);
 8001150:	197b      	adds	r3, r7, r5
 8001152:	781a      	ldrb	r2, [r3, #0]
 8001154:	4b2f      	ldr	r3, [pc, #188]	@ (8001214 <lorawan_configure+0x35c>)
 8001156:	0011      	movs	r1, r2
 8001158:	0018      	movs	r0, r3
 800115a:	f004 fe6d 	bl	8005e38 <iprintf>
        return false;
 800115e:	2300      	movs	r3, #0
 8001160:	e02c      	b.n	80011bc <lorawan_configure+0x304>
    }

    // Configure LoRaWAN parameters (ADR, OTAA, Class, DR, TX Power)
    if ((err = configure_lorawan_params(lora)) != LORAWAN_OK) {
 8001162:	2520      	movs	r5, #32
 8001164:	35ff      	adds	r5, #255	@ 0xff
 8001166:	197c      	adds	r4, r7, r5
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	0018      	movs	r0, r3
 800116c:	f000 fb70 	bl	8001850 <configure_lorawan_params>
 8001170:	0003      	movs	r3, r0
 8001172:	7023      	strb	r3, [r4, #0]
 8001174:	197b      	adds	r3, r7, r5
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d008      	beq.n	800118e <lorawan_configure+0x2d6>
        printf("Error configuring LoRaWAN parameters: %d\n", err);
 800117c:	197b      	adds	r3, r7, r5
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <lorawan_configure+0x360>)
 8001182:	0011      	movs	r1, r2
 8001184:	0018      	movs	r0, r3
 8001186:	f004 fe57 	bl	8005e38 <iprintf>
        return false;
 800118a:	2300      	movs	r3, #0
 800118c:	e016      	b.n	80011bc <lorawan_configure+0x304>
    }

    // Save settings and reset
    if ((err = save_and_reset(lora)) != LORAWAN_OK) {
 800118e:	2520      	movs	r5, #32
 8001190:	35ff      	adds	r5, #255	@ 0xff
 8001192:	197c      	adds	r4, r7, r5
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	0018      	movs	r0, r3
 8001198:	f000 fca6 	bl	8001ae8 <save_and_reset>
 800119c:	0003      	movs	r3, r0
 800119e:	7023      	strb	r3, [r4, #0]
 80011a0:	197b      	adds	r3, r7, r5
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d008      	beq.n	80011ba <lorawan_configure+0x302>
        printf("Error saving/resetting: %d\n", err);
 80011a8:	197b      	adds	r3, r7, r5
 80011aa:	781a      	ldrb	r2, [r3, #0]
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <lorawan_configure+0x364>)
 80011ae:	0011      	movs	r1, r2
 80011b0:	0018      	movs	r0, r3
 80011b2:	f004 fe41 	bl	8005e38 <iprintf>
        return false;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <lorawan_configure+0x304>
//    if ((err = join_network(lora)) != LORAWAN_OK) {
//        printf("Error joining network: %d\n", err);
//        return false;
//    }

    return true;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b048      	add	sp, #288	@ 0x120
 80011c2:	bdb0      	pop	{r4, r5, r7, pc}
 80011c4:	08007174 	.word	0x08007174
 80011c8:	080071ac 	.word	0x080071ac
 80011cc:	080071c8 	.word	0x080071c8
 80011d0:	080071e4 	.word	0x080071e4
 80011d4:	08007208 	.word	0x08007208
 80011d8:	08007234 	.word	0x08007234
 80011dc:	0800723c 	.word	0x0800723c
 80011e0:	08007240 	.word	0x08007240
 80011e4:	08007248 	.word	0x08007248
 80011e8:	08007274 	.word	0x08007274
 80011ec:	08007280 	.word	0x08007280
 80011f0:	080072ac 	.word	0x080072ac
 80011f4:	080072c8 	.word	0x080072c8
 80011f8:	080072e8 	.word	0x080072e8
 80011fc:	08007308 	.word	0x08007308
 8001200:	08007328 	.word	0x08007328
 8001204:	08007340 	.word	0x08007340
 8001208:	08007348 	.word	0x08007348
 800120c:	08007368 	.word	0x08007368
 8001210:	0800738c 	.word	0x0800738c
 8001214:	080073b4 	.word	0x080073b4
 8001218:	080073dc 	.word	0x080073dc
 800121c:	08007408 	.word	0x08007408

08001220 <validate_hex_string>:
 * @brief Validates that a string is hexadecimal and of the expected length.
 * @param str The string to validate.
 * @param expected_len The expected length of the string.
 * @return true if the string is valid hexadecimal and matches the length, false otherwise.
 */
static bool validate_hex_string(const char *str, size_t expected_len) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
    if (str == NULL || strlen(str) != expected_len) {
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d007      	beq.n	8001240 <validate_hex_string+0x20>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	0018      	movs	r0, r3
 8001234:	f7fe ff68 	bl	8000108 <strlen>
 8001238:	0002      	movs	r2, r0
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	4293      	cmp	r3, r2
 800123e:	d001      	beq.n	8001244 <validate_hex_string+0x24>
        return false;
 8001240:	2300      	movs	r3, #0
 8001242:	e030      	b.n	80012a6 <validate_hex_string+0x86>
    }
    for (size_t i = 0; i < expected_len; i++) {
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e028      	b.n	800129c <validate_hex_string+0x7c>
        if (!((str[i] >= '0' && str[i] <= '9') ||
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	18d3      	adds	r3, r2, r3
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b2f      	cmp	r3, #47	@ 0x2f
 8001254:	d905      	bls.n	8001262 <validate_hex_string+0x42>
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	18d3      	adds	r3, r2, r3
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b39      	cmp	r3, #57	@ 0x39
 8001260:	d919      	bls.n	8001296 <validate_hex_string+0x76>
              (str[i] >= 'A' && str[i] <= 'F') ||
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	18d3      	adds	r3, r2, r3
 8001268:	781b      	ldrb	r3, [r3, #0]
        if (!((str[i] >= '0' && str[i] <= '9') ||
 800126a:	2b40      	cmp	r3, #64	@ 0x40
 800126c:	d905      	bls.n	800127a <validate_hex_string+0x5a>
              (str[i] >= 'A' && str[i] <= 'F') ||
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	18d3      	adds	r3, r2, r3
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b46      	cmp	r3, #70	@ 0x46
 8001278:	d90d      	bls.n	8001296 <validate_hex_string+0x76>
              (str[i] >= 'a' && str[i] <= 'f'))) {
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	18d3      	adds	r3, r2, r3
 8001280:	781b      	ldrb	r3, [r3, #0]
        if (!((str[i] >= '0' && str[i] <= '9') ||
 8001282:	2b60      	cmp	r3, #96	@ 0x60
 8001284:	d905      	bls.n	8001292 <validate_hex_string+0x72>
              (str[i] >= 'a' && str[i] <= 'f'))) {
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	18d3      	adds	r3, r2, r3
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b66      	cmp	r3, #102	@ 0x66
 8001290:	d901      	bls.n	8001296 <validate_hex_string+0x76>
            return false;
 8001292:	2300      	movs	r3, #0
 8001294:	e007      	b.n	80012a6 <validate_hex_string+0x86>
    for (size_t i = 0; i < expected_len; i++) {
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	3301      	adds	r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d3d2      	bcc.n	800124a <validate_hex_string+0x2a>
        }
    }
    return true;
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	0018      	movs	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	b004      	add	sp, #16
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <set_dev_eui>:
 * @brief Sets the Device EUI (DevEUI) if not already set or invalid.
 * @param lora Pointer to the ATC handle for communication.
 * @param dev_eui Device EUI (16 hex characters).
 * @return LORAWAN_OK on success, LORAWAN_ERR_DEV_EUI or LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_dev_eui(ATC_HandleTypeDef *lora, const char *dev_eui) {
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b0d8      	sub	sp, #352	@ 0x160
 80012b4:	af04      	add	r7, sp, #16
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
    printf("DEBUG: set_dev_eui called with EUI: %s\n", dev_eui);
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	4b5f      	ldr	r3, [pc, #380]	@ (800143c <set_dev_eui+0x18c>)
 80012be:	0011      	movs	r1, r2
 80012c0:	0018      	movs	r0, r3
 80012c2:	f004 fdb9 	bl	8005e38 <iprintf>
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 80012c6:	2348      	movs	r3, #72	@ 0x48
 80012c8:	18fb      	adds	r3, r7, r3
 80012ca:	22a4      	movs	r2, #164	@ 0xa4
 80012cc:	0052      	lsls	r2, r2, #1
 80012ce:	18ba      	adds	r2, r7, r2
 80012d0:	6013      	str	r3, [r2, #0]
    
    // Try multiple command formats for DevEUI
    char command[64];
    int resp = -1;
 80012d2:	2301      	movs	r3, #1
 80012d4:	425b      	negs	r3, r3
 80012d6:	24a6      	movs	r4, #166	@ 0xa6
 80012d8:	0064      	lsls	r4, r4, #1
 80012da:	193a      	adds	r2, r7, r4
 80012dc:	6013      	str	r3, [r2, #0]
    
    // Format 1: ATS 501 (your original format)
    printf("DEBUG: Trying ATS 501 format...\n");
 80012de:	4b58      	ldr	r3, [pc, #352]	@ (8001440 <set_dev_eui+0x190>)
 80012e0:	0018      	movs	r0, r3
 80012e2:	f004 fe19 	bl	8005f18 <puts>
    snprintf(command, sizeof(command), "AT%%S 501=\"%s\"\r\n", dev_eui);
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	4a56      	ldr	r2, [pc, #344]	@ (8001444 <set_dev_eui+0x194>)
 80012ea:	2508      	movs	r5, #8
 80012ec:	1978      	adds	r0, r7, r5
 80012ee:	2140      	movs	r1, #64	@ 0x40
 80012f0:	f004 fe1c 	bl	8005f2c <sniprintf>
    printf("DEBUG: Command string: %s", command);
 80012f4:	197a      	adds	r2, r7, r5
 80012f6:	4b54      	ldr	r3, [pc, #336]	@ (8001448 <set_dev_eui+0x198>)
 80012f8:	0011      	movs	r1, r2
 80012fa:	0018      	movs	r0, r3
 80012fc:	f004 fd9c 	bl	8005e38 <iprintf>
    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001300:	1979      	adds	r1, r7, r5
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	4b51      	ldr	r3, [pc, #324]	@ (800144c <set_dev_eui+0x19c>)
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	2301      	movs	r3, #1
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	23c8      	movs	r3, #200	@ 0xc8
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2300      	movs	r3, #0
 8001312:	2264      	movs	r2, #100	@ 0x64
 8001314:	f004 fa01 	bl	800571a <ATC_SendReceive>
 8001318:	0003      	movs	r3, r0
 800131a:	193a      	adds	r2, r7, r4
 800131c:	6013      	str	r3, [r2, #0]
    printf("DEBUG: ATS 501 format returned %d\n", resp);
 800131e:	193b      	adds	r3, r7, r4
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	4b4b      	ldr	r3, [pc, #300]	@ (8001450 <set_dev_eui+0x1a0>)
 8001324:	0011      	movs	r1, r2
 8001326:	0018      	movs	r0, r3
 8001328:	f004 fd86 	bl	8005e38 <iprintf>
    
    if (resp < 0) {
 800132c:	193b      	adds	r3, r7, r4
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	da1f      	bge.n	8001374 <set_dev_eui+0xc4>
        // Format 2: AT+DEVEUI (common format)
        printf("DEBUG: Trying AT+DEVEUI format...\n");
 8001334:	4b47      	ldr	r3, [pc, #284]	@ (8001454 <set_dev_eui+0x1a4>)
 8001336:	0018      	movs	r0, r3
 8001338:	f004 fdee 	bl	8005f18 <puts>
        snprintf(command, sizeof(command), "AT+DEVEUI=%s\r\n", dev_eui);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	4a46      	ldr	r2, [pc, #280]	@ (8001458 <set_dev_eui+0x1a8>)
 8001340:	1978      	adds	r0, r7, r5
 8001342:	2140      	movs	r1, #64	@ 0x40
 8001344:	f004 fdf2 	bl	8005f2c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001348:	1979      	adds	r1, r7, r5
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	4b3f      	ldr	r3, [pc, #252]	@ (800144c <set_dev_eui+0x19c>)
 800134e:	9302      	str	r3, [sp, #8]
 8001350:	2301      	movs	r3, #1
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	23c8      	movs	r3, #200	@ 0xc8
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	2300      	movs	r3, #0
 800135a:	2264      	movs	r2, #100	@ 0x64
 800135c:	f004 f9dd 	bl	800571a <ATC_SendReceive>
 8001360:	0003      	movs	r3, r0
 8001362:	193a      	adds	r2, r7, r4
 8001364:	6013      	str	r3, [r2, #0]
        printf("DEBUG: AT+DEVEUI format returned %d\n", resp);
 8001366:	193b      	adds	r3, r7, r4
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	4b3c      	ldr	r3, [pc, #240]	@ (800145c <set_dev_eui+0x1ac>)
 800136c:	0011      	movs	r1, r2
 800136e:	0018      	movs	r0, r3
 8001370:	f004 fd62 	bl	8005e38 <iprintf>
    }
    
    if (resp < 0) {
 8001374:	24a6      	movs	r4, #166	@ 0xa6
 8001376:	0064      	lsls	r4, r4, #1
 8001378:	193b      	adds	r3, r7, r4
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	da20      	bge.n	80013c2 <set_dev_eui+0x112>
        // Format 3: AT+DEV_EUI (alternative format)
        printf("DEBUG: Trying AT+DEV_EUI format...\n");
 8001380:	4b37      	ldr	r3, [pc, #220]	@ (8001460 <set_dev_eui+0x1b0>)
 8001382:	0018      	movs	r0, r3
 8001384:	f004 fdc8 	bl	8005f18 <puts>
        snprintf(command, sizeof(command), "AT+DEV_EUI=%s\r\n", dev_eui);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	4a36      	ldr	r2, [pc, #216]	@ (8001464 <set_dev_eui+0x1b4>)
 800138c:	2508      	movs	r5, #8
 800138e:	1978      	adds	r0, r7, r5
 8001390:	2140      	movs	r1, #64	@ 0x40
 8001392:	f004 fdcb 	bl	8005f2c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001396:	1979      	adds	r1, r7, r5
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	4b2c      	ldr	r3, [pc, #176]	@ (800144c <set_dev_eui+0x19c>)
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	23c8      	movs	r3, #200	@ 0xc8
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	2264      	movs	r2, #100	@ 0x64
 80013aa:	f004 f9b6 	bl	800571a <ATC_SendReceive>
 80013ae:	0003      	movs	r3, r0
 80013b0:	193a      	adds	r2, r7, r4
 80013b2:	6013      	str	r3, [r2, #0]
        printf("DEBUG: AT+DEV_EUI format returned %d\n", resp);
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001468 <set_dev_eui+0x1b8>)
 80013ba:	0011      	movs	r1, r2
 80013bc:	0018      	movs	r0, r3
 80013be:	f004 fd3b 	bl	8005e38 <iprintf>
    }
    
    if (resp < 0) {
 80013c2:	24a6      	movs	r4, #166	@ 0xa6
 80013c4:	0064      	lsls	r4, r4, #1
 80013c6:	193b      	adds	r3, r7, r4
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	da20      	bge.n	8001410 <set_dev_eui+0x160>
        // Format 4: AT+ID=DevEui (RAK style)
        printf("DEBUG: Trying AT+ID=DevEui format...\n");
 80013ce:	4b27      	ldr	r3, [pc, #156]	@ (800146c <set_dev_eui+0x1bc>)
 80013d0:	0018      	movs	r0, r3
 80013d2:	f004 fda1 	bl	8005f18 <puts>
        snprintf(command, sizeof(command), "AT+ID=DevEui,\"%s\"\r\n", dev_eui);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	4a25      	ldr	r2, [pc, #148]	@ (8001470 <set_dev_eui+0x1c0>)
 80013da:	2508      	movs	r5, #8
 80013dc:	1978      	adds	r0, r7, r5
 80013de:	2140      	movs	r1, #64	@ 0x40
 80013e0:	f004 fda4 	bl	8005f2c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80013e4:	1979      	adds	r1, r7, r5
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	4b18      	ldr	r3, [pc, #96]	@ (800144c <set_dev_eui+0x19c>)
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	2301      	movs	r3, #1
 80013ee:	9301      	str	r3, [sp, #4]
 80013f0:	23c8      	movs	r3, #200	@ 0xc8
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	2300      	movs	r3, #0
 80013f6:	2264      	movs	r2, #100	@ 0x64
 80013f8:	f004 f98f 	bl	800571a <ATC_SendReceive>
 80013fc:	0003      	movs	r3, r0
 80013fe:	193a      	adds	r2, r7, r4
 8001400:	6013      	str	r3, [r2, #0]
        printf("DEBUG: AT+ID=DevEui format returned %d\n", resp);
 8001402:	193b      	adds	r3, r7, r4
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b1b      	ldr	r3, [pc, #108]	@ (8001474 <set_dev_eui+0x1c4>)
 8001408:	0011      	movs	r1, r2
 800140a:	0018      	movs	r0, r3
 800140c:	f004 fd14 	bl	8005e38 <iprintf>
    }
    
    if (resp < 0) {
 8001410:	23a6      	movs	r3, #166	@ 0xa6
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	da05      	bge.n	8001428 <set_dev_eui+0x178>
        printf("ERROR: All DevEUI command formats failed!\n");
 800141c:	4b16      	ldr	r3, [pc, #88]	@ (8001478 <set_dev_eui+0x1c8>)
 800141e:	0018      	movs	r0, r3
 8001420:	f004 fd7a 	bl	8005f18 <puts>
        return LORAWAN_ERR_DEV_EUI;
 8001424:	2301      	movs	r3, #1
 8001426:	e004      	b.n	8001432 <set_dev_eui+0x182>
    }
    
    printf("DEBUG: DevEUI set successfully with one of the formats\n");
 8001428:	4b14      	ldr	r3, [pc, #80]	@ (800147c <set_dev_eui+0x1cc>)
 800142a:	0018      	movs	r0, r3
 800142c:	f004 fd74 	bl	8005f18 <puts>
    return LORAWAN_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	0018      	movs	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	b054      	add	sp, #336	@ 0x150
 8001438:	bdb0      	pop	{r4, r5, r7, pc}
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	08007424 	.word	0x08007424
 8001440:	0800744c 	.word	0x0800744c
 8001444:	0800746c 	.word	0x0800746c
 8001448:	08007480 	.word	0x08007480
 800144c:	0800723c 	.word	0x0800723c
 8001450:	0800749c 	.word	0x0800749c
 8001454:	080074c0 	.word	0x080074c0
 8001458:	080074e4 	.word	0x080074e4
 800145c:	080074f4 	.word	0x080074f4
 8001460:	0800751c 	.word	0x0800751c
 8001464:	08007540 	.word	0x08007540
 8001468:	08007550 	.word	0x08007550
 800146c:	08007578 	.word	0x08007578
 8001470:	080075a0 	.word	0x080075a0
 8001474:	080075b4 	.word	0x080075b4
 8001478:	080075dc 	.word	0x080075dc
 800147c:	08007608 	.word	0x08007608

08001480 <set_app_eui>:
 * @brief Sets the Application EUI (AppEUI/JoinEUI).
 * @param lora Pointer to the ATC handle for communication.
 * @param app_eui Application EUI (16 hex characters).
 * @return LORAWAN_OK on success, LORAWAN_ERR_APP_EUI on failure.
 */
static LoRaWAN_Error_t set_app_eui(ATC_HandleTypeDef *lora, const char *app_eui) {
 8001480:	b590      	push	{r4, r7, lr}
 8001482:	b099      	sub	sp, #100	@ 0x64
 8001484:	af04      	add	r7, sp, #16
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
    printf("DEBUG: set_app_eui called with EUI: %s\n", app_eui);
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	4b4e      	ldr	r3, [pc, #312]	@ (80015c8 <set_app_eui+0x148>)
 800148e:	0011      	movs	r1, r2
 8001490:	0018      	movs	r0, r3
 8001492:	f004 fcd1 	bl	8005e38 <iprintf>
    char command[64];
    int resp = -1;
 8001496:	2301      	movs	r3, #1
 8001498:	425b      	negs	r3, r3
 800149a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    
    // Try multiple command formats for AppEUI
    
    // Format 1: ATS 502 (your original format)
    printf("DEBUG: Trying ATS 502 format...\n");
 800149c:	4b4b      	ldr	r3, [pc, #300]	@ (80015cc <set_app_eui+0x14c>)
 800149e:	0018      	movs	r0, r3
 80014a0:	f004 fd3a 	bl	8005f18 <puts>
    snprintf(command, sizeof(command), "AT%%S 502=\"%s\"\r\n", app_eui);
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	4a4a      	ldr	r2, [pc, #296]	@ (80015d0 <set_app_eui+0x150>)
 80014a8:	240c      	movs	r4, #12
 80014aa:	1938      	adds	r0, r7, r4
 80014ac:	2140      	movs	r1, #64	@ 0x40
 80014ae:	f004 fd3d 	bl	8005f2c <sniprintf>
    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80014b2:	1939      	adds	r1, r7, r4
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	4b47      	ldr	r3, [pc, #284]	@ (80015d4 <set_app_eui+0x154>)
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	2301      	movs	r3, #1
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	23c8      	movs	r3, #200	@ 0xc8
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2300      	movs	r3, #0
 80014c4:	2264      	movs	r2, #100	@ 0x64
 80014c6:	f004 f928 	bl	800571a <ATC_SendReceive>
 80014ca:	0003      	movs	r3, r0
 80014cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    printf("DEBUG: ATS 502 format returned %d\n", resp);
 80014ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80014d0:	4b41      	ldr	r3, [pc, #260]	@ (80015d8 <set_app_eui+0x158>)
 80014d2:	0011      	movs	r1, r2
 80014d4:	0018      	movs	r0, r3
 80014d6:	f004 fcaf 	bl	8005e38 <iprintf>
    
    if (resp < 0) {
 80014da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014dc:	2b00      	cmp	r3, #0
 80014de:	da1d      	bge.n	800151c <set_app_eui+0x9c>
        // Format 2: AT+APPEUI (common format)
        printf("DEBUG: Trying AT+APPEUI format...\n");
 80014e0:	4b3e      	ldr	r3, [pc, #248]	@ (80015dc <set_app_eui+0x15c>)
 80014e2:	0018      	movs	r0, r3
 80014e4:	f004 fd18 	bl	8005f18 <puts>
        snprintf(command, sizeof(command), "AT+APPEUI=%s\r\n", app_eui);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	4a3d      	ldr	r2, [pc, #244]	@ (80015e0 <set_app_eui+0x160>)
 80014ec:	1938      	adds	r0, r7, r4
 80014ee:	2140      	movs	r1, #64	@ 0x40
 80014f0:	f004 fd1c 	bl	8005f2c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80014f4:	1939      	adds	r1, r7, r4
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	4b36      	ldr	r3, [pc, #216]	@ (80015d4 <set_app_eui+0x154>)
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	2301      	movs	r3, #1
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	23c8      	movs	r3, #200	@ 0xc8
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2300      	movs	r3, #0
 8001506:	2264      	movs	r2, #100	@ 0x64
 8001508:	f004 f907 	bl	800571a <ATC_SendReceive>
 800150c:	0003      	movs	r3, r0
 800150e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        printf("DEBUG: AT+APPEUI format returned %d\n", resp);
 8001510:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001512:	4b34      	ldr	r3, [pc, #208]	@ (80015e4 <set_app_eui+0x164>)
 8001514:	0011      	movs	r1, r2
 8001516:	0018      	movs	r0, r3
 8001518:	f004 fc8e 	bl	8005e38 <iprintf>
    }
    
    if (resp < 0) {
 800151c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800151e:	2b00      	cmp	r3, #0
 8001520:	da1e      	bge.n	8001560 <set_app_eui+0xe0>
        // Format 3: AT+APP_EUI (alternative format)
        printf("DEBUG: Trying AT+APP_EUI format...\n");
 8001522:	4b31      	ldr	r3, [pc, #196]	@ (80015e8 <set_app_eui+0x168>)
 8001524:	0018      	movs	r0, r3
 8001526:	f004 fcf7 	bl	8005f18 <puts>
        snprintf(command, sizeof(command), "AT+APP_EUI=%s\r\n", app_eui);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	4a2f      	ldr	r2, [pc, #188]	@ (80015ec <set_app_eui+0x16c>)
 800152e:	240c      	movs	r4, #12
 8001530:	1938      	adds	r0, r7, r4
 8001532:	2140      	movs	r1, #64	@ 0x40
 8001534:	f004 fcfa 	bl	8005f2c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001538:	1939      	adds	r1, r7, r4
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	4b25      	ldr	r3, [pc, #148]	@ (80015d4 <set_app_eui+0x154>)
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	2301      	movs	r3, #1
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	23c8      	movs	r3, #200	@ 0xc8
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2300      	movs	r3, #0
 800154a:	2264      	movs	r2, #100	@ 0x64
 800154c:	f004 f8e5 	bl	800571a <ATC_SendReceive>
 8001550:	0003      	movs	r3, r0
 8001552:	64fb      	str	r3, [r7, #76]	@ 0x4c
        printf("DEBUG: AT+APP_EUI format returned %d\n", resp);
 8001554:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001556:	4b26      	ldr	r3, [pc, #152]	@ (80015f0 <set_app_eui+0x170>)
 8001558:	0011      	movs	r1, r2
 800155a:	0018      	movs	r0, r3
 800155c:	f004 fc6c 	bl	8005e38 <iprintf>
    }
    
    if (resp < 0) {
 8001560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001562:	2b00      	cmp	r3, #0
 8001564:	da1e      	bge.n	80015a4 <set_app_eui+0x124>
        // Format 4: AT+ID=AppEui (RAK style)
        printf("DEBUG: Trying AT+ID=AppEui format...\n");
 8001566:	4b23      	ldr	r3, [pc, #140]	@ (80015f4 <set_app_eui+0x174>)
 8001568:	0018      	movs	r0, r3
 800156a:	f004 fcd5 	bl	8005f18 <puts>
        snprintf(command, sizeof(command), "AT+ID=AppEui,\"%s\"\r\n", app_eui);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	4a21      	ldr	r2, [pc, #132]	@ (80015f8 <set_app_eui+0x178>)
 8001572:	240c      	movs	r4, #12
 8001574:	1938      	adds	r0, r7, r4
 8001576:	2140      	movs	r1, #64	@ 0x40
 8001578:	f004 fcd8 	bl	8005f2c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800157c:	1939      	adds	r1, r7, r4
 800157e:	6878      	ldr	r0, [r7, #4]
 8001580:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <set_app_eui+0x154>)
 8001582:	9302      	str	r3, [sp, #8]
 8001584:	2301      	movs	r3, #1
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	23c8      	movs	r3, #200	@ 0xc8
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2300      	movs	r3, #0
 800158e:	2264      	movs	r2, #100	@ 0x64
 8001590:	f004 f8c3 	bl	800571a <ATC_SendReceive>
 8001594:	0003      	movs	r3, r0
 8001596:	64fb      	str	r3, [r7, #76]	@ 0x4c
        printf("DEBUG: AT+ID=AppEui format returned %d\n", resp);
 8001598:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800159a:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <set_app_eui+0x17c>)
 800159c:	0011      	movs	r1, r2
 800159e:	0018      	movs	r0, r3
 80015a0:	f004 fc4a 	bl	8005e38 <iprintf>
    }
    
    if (resp < 0) {
 80015a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	da05      	bge.n	80015b6 <set_app_eui+0x136>
        printf("ERROR: All AppEUI command formats failed!\n");
 80015aa:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <set_app_eui+0x180>)
 80015ac:	0018      	movs	r0, r3
 80015ae:	f004 fcb3 	bl	8005f18 <puts>
        return LORAWAN_ERR_APP_EUI;
 80015b2:	2302      	movs	r3, #2
 80015b4:	e004      	b.n	80015c0 <set_app_eui+0x140>
    }
    
    printf("DEBUG: AppEUI set successfully with one of the formats\n");
 80015b6:	4b13      	ldr	r3, [pc, #76]	@ (8001604 <set_app_eui+0x184>)
 80015b8:	0018      	movs	r0, r3
 80015ba:	f004 fcad 	bl	8005f18 <puts>
    return LORAWAN_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	0018      	movs	r0, r3
 80015c2:	46bd      	mov	sp, r7
 80015c4:	b015      	add	sp, #84	@ 0x54
 80015c6:	bd90      	pop	{r4, r7, pc}
 80015c8:	08007640 	.word	0x08007640
 80015cc:	08007668 	.word	0x08007668
 80015d0:	08007688 	.word	0x08007688
 80015d4:	0800723c 	.word	0x0800723c
 80015d8:	0800769c 	.word	0x0800769c
 80015dc:	080076c0 	.word	0x080076c0
 80015e0:	080076e4 	.word	0x080076e4
 80015e4:	080076f4 	.word	0x080076f4
 80015e8:	0800771c 	.word	0x0800771c
 80015ec:	08007740 	.word	0x08007740
 80015f0:	08007750 	.word	0x08007750
 80015f4:	08007778 	.word	0x08007778
 80015f8:	080077a0 	.word	0x080077a0
 80015fc:	080077b4 	.word	0x080077b4
 8001600:	080077dc 	.word	0x080077dc
 8001604:	08007808 	.word	0x08007808

08001608 <set_app_key>:
 * @brief Sets the Application Key (AppKey).
 * @param lora Pointer to the ATC handle for communication.
 * @param app_key Application key (32 hex characters).
 * @return LORAWAN_OK on success, LORAWAN_ERR_APP_KEY on failure.
 */
static LoRaWAN_Error_t set_app_key(ATC_HandleTypeDef *lora, const char *app_key) {
 8001608:	b590      	push	{r4, r7, lr}
 800160a:	b0a1      	sub	sp, #132	@ 0x84
 800160c:	af04      	add	r7, sp, #16
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
    printf("DEBUG: set_app_key called with key: %s\n", app_key);
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	4b54      	ldr	r3, [pc, #336]	@ (8001768 <set_app_key+0x160>)
 8001616:	0011      	movs	r1, r2
 8001618:	0018      	movs	r0, r3
 800161a:	f004 fc0d 	bl	8005e38 <iprintf>
    char command[96];
    int resp = -1;
 800161e:	2301      	movs	r3, #1
 8001620:	425b      	negs	r3, r3
 8001622:	66fb      	str	r3, [r7, #108]	@ 0x6c
    
    // Try multiple command formats for AppKey
    
    // Format 1: ATS 500 (your original format)
    printf("DEBUG: Trying AT%%S 500 format...\n");
 8001624:	4b51      	ldr	r3, [pc, #324]	@ (800176c <set_app_key+0x164>)
 8001626:	0018      	movs	r0, r3
 8001628:	f004 fc06 	bl	8005e38 <iprintf>
    snprintf(command, sizeof(command), "AT%%S 500=\"%s\"\r\n", app_key);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	4a50      	ldr	r2, [pc, #320]	@ (8001770 <set_app_key+0x168>)
 8001630:	240c      	movs	r4, #12
 8001632:	1938      	adds	r0, r7, r4
 8001634:	2160      	movs	r1, #96	@ 0x60
 8001636:	f004 fc79 	bl	8005f2c <sniprintf>
    printf("DEBUG: Command string: %s", command);
 800163a:	193a      	adds	r2, r7, r4
 800163c:	4b4d      	ldr	r3, [pc, #308]	@ (8001774 <set_app_key+0x16c>)
 800163e:	0011      	movs	r1, r2
 8001640:	0018      	movs	r0, r3
 8001642:	f004 fbf9 	bl	8005e38 <iprintf>
    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001646:	1939      	adds	r1, r7, r4
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	4b4b      	ldr	r3, [pc, #300]	@ (8001778 <set_app_key+0x170>)
 800164c:	9302      	str	r3, [sp, #8]
 800164e:	2301      	movs	r3, #1
 8001650:	9301      	str	r3, [sp, #4]
 8001652:	23c8      	movs	r3, #200	@ 0xc8
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	2300      	movs	r3, #0
 8001658:	2264      	movs	r2, #100	@ 0x64
 800165a:	f004 f85e 	bl	800571a <ATC_SendReceive>
 800165e:	0003      	movs	r3, r0
 8001660:	66fb      	str	r3, [r7, #108]	@ 0x6c
    printf("DEBUG: AT%%S 500 format returned %d\n", resp);
 8001662:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001664:	4b45      	ldr	r3, [pc, #276]	@ (800177c <set_app_key+0x174>)
 8001666:	0011      	movs	r1, r2
 8001668:	0018      	movs	r0, r3
 800166a:	f004 fbe5 	bl	8005e38 <iprintf>
    
    if (resp < 0) {
 800166e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001670:	2b00      	cmp	r3, #0
 8001672:	da23      	bge.n	80016bc <set_app_key+0xb4>
        // Format 2: AT+APPKEY (common format)
        printf("DEBUG: Trying AT+APPKEY format...\n");
 8001674:	4b42      	ldr	r3, [pc, #264]	@ (8001780 <set_app_key+0x178>)
 8001676:	0018      	movs	r0, r3
 8001678:	f004 fc4e 	bl	8005f18 <puts>
        snprintf(command, sizeof(command), "AT+APPKEY=%s\r\n", app_key);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	4a41      	ldr	r2, [pc, #260]	@ (8001784 <set_app_key+0x17c>)
 8001680:	1938      	adds	r0, r7, r4
 8001682:	2160      	movs	r1, #96	@ 0x60
 8001684:	f004 fc52 	bl	8005f2c <sniprintf>
        printf("DEBUG: Command string: %s", command);
 8001688:	193a      	adds	r2, r7, r4
 800168a:	4b3a      	ldr	r3, [pc, #232]	@ (8001774 <set_app_key+0x16c>)
 800168c:	0011      	movs	r1, r2
 800168e:	0018      	movs	r0, r3
 8001690:	f004 fbd2 	bl	8005e38 <iprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001694:	1939      	adds	r1, r7, r4
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	4b37      	ldr	r3, [pc, #220]	@ (8001778 <set_app_key+0x170>)
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	2301      	movs	r3, #1
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	23c8      	movs	r3, #200	@ 0xc8
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	2300      	movs	r3, #0
 80016a6:	2264      	movs	r2, #100	@ 0x64
 80016a8:	f004 f837 	bl	800571a <ATC_SendReceive>
 80016ac:	0003      	movs	r3, r0
 80016ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
        printf("DEBUG: AT+APPKEY format returned %d\n", resp);
 80016b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016b2:	4b35      	ldr	r3, [pc, #212]	@ (8001788 <set_app_key+0x180>)
 80016b4:	0011      	movs	r1, r2
 80016b6:	0018      	movs	r0, r3
 80016b8:	f004 fbbe 	bl	8005e38 <iprintf>
    }
    
    if (resp < 0) {
 80016bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da1e      	bge.n	8001700 <set_app_key+0xf8>
        // Format 3: AT+APP_KEY (alternative format)
        printf("DEBUG: Trying AT+APP_KEY format...\n");
 80016c2:	4b32      	ldr	r3, [pc, #200]	@ (800178c <set_app_key+0x184>)
 80016c4:	0018      	movs	r0, r3
 80016c6:	f004 fc27 	bl	8005f18 <puts>
        snprintf(command, sizeof(command), "AT+APP_KEY=%s\r\n", app_key);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	4a30      	ldr	r2, [pc, #192]	@ (8001790 <set_app_key+0x188>)
 80016ce:	240c      	movs	r4, #12
 80016d0:	1938      	adds	r0, r7, r4
 80016d2:	2160      	movs	r1, #96	@ 0x60
 80016d4:	f004 fc2a 	bl	8005f2c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80016d8:	1939      	adds	r1, r7, r4
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	4b26      	ldr	r3, [pc, #152]	@ (8001778 <set_app_key+0x170>)
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	2301      	movs	r3, #1
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	23c8      	movs	r3, #200	@ 0xc8
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2300      	movs	r3, #0
 80016ea:	2264      	movs	r2, #100	@ 0x64
 80016ec:	f004 f815 	bl	800571a <ATC_SendReceive>
 80016f0:	0003      	movs	r3, r0
 80016f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        printf("DEBUG: AT+APP_KEY format returned %d\n", resp);
 80016f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80016f6:	4b27      	ldr	r3, [pc, #156]	@ (8001794 <set_app_key+0x18c>)
 80016f8:	0011      	movs	r1, r2
 80016fa:	0018      	movs	r0, r3
 80016fc:	f004 fb9c 	bl	8005e38 <iprintf>
    }
    
    if (resp < 0) {
 8001700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001702:	2b00      	cmp	r3, #0
 8001704:	da1e      	bge.n	8001744 <set_app_key+0x13c>
        // Format 4: AT+KEY=APPKEY (RAK style)
        printf("DEBUG: Trying AT+KEY=APPKEY format...\n");
 8001706:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <set_app_key+0x190>)
 8001708:	0018      	movs	r0, r3
 800170a:	f004 fc05 	bl	8005f18 <puts>
        snprintf(command, sizeof(command), "AT+KEY=APPKEY,\"%s\"\r\n", app_key);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	4a22      	ldr	r2, [pc, #136]	@ (800179c <set_app_key+0x194>)
 8001712:	240c      	movs	r4, #12
 8001714:	1938      	adds	r0, r7, r4
 8001716:	2160      	movs	r1, #96	@ 0x60
 8001718:	f004 fc08 	bl	8005f2c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800171c:	1939      	adds	r1, r7, r4
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	4b15      	ldr	r3, [pc, #84]	@ (8001778 <set_app_key+0x170>)
 8001722:	9302      	str	r3, [sp, #8]
 8001724:	2301      	movs	r3, #1
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	23c8      	movs	r3, #200	@ 0xc8
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2300      	movs	r3, #0
 800172e:	2264      	movs	r2, #100	@ 0x64
 8001730:	f003 fff3 	bl	800571a <ATC_SendReceive>
 8001734:	0003      	movs	r3, r0
 8001736:	66fb      	str	r3, [r7, #108]	@ 0x6c
        printf("DEBUG: AT+KEY=APPKEY format returned %d\n", resp);
 8001738:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <set_app_key+0x198>)
 800173c:	0011      	movs	r1, r2
 800173e:	0018      	movs	r0, r3
 8001740:	f004 fb7a 	bl	8005e38 <iprintf>
    }
    
    if (resp < 0) {
 8001744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001746:	2b00      	cmp	r3, #0
 8001748:	da05      	bge.n	8001756 <set_app_key+0x14e>
        printf("ERROR: All AppKey command formats failed!\n");
 800174a:	4b16      	ldr	r3, [pc, #88]	@ (80017a4 <set_app_key+0x19c>)
 800174c:	0018      	movs	r0, r3
 800174e:	f004 fbe3 	bl	8005f18 <puts>
        return LORAWAN_ERR_APP_KEY;
 8001752:	2303      	movs	r3, #3
 8001754:	e004      	b.n	8001760 <set_app_key+0x158>
    }
    
    printf("DEBUG: AppKey set successfully with one of the formats\n");
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <set_app_key+0x1a0>)
 8001758:	0018      	movs	r0, r3
 800175a:	f004 fbdd 	bl	8005f18 <puts>
    return LORAWAN_OK;
 800175e:	2300      	movs	r3, #0
}
 8001760:	0018      	movs	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	b01d      	add	sp, #116	@ 0x74
 8001766:	bd90      	pop	{r4, r7, pc}
 8001768:	08007840 	.word	0x08007840
 800176c:	08007868 	.word	0x08007868
 8001770:	0800788c 	.word	0x0800788c
 8001774:	08007480 	.word	0x08007480
 8001778:	0800723c 	.word	0x0800723c
 800177c:	080078a0 	.word	0x080078a0
 8001780:	080078c8 	.word	0x080078c8
 8001784:	080078ec 	.word	0x080078ec
 8001788:	080078fc 	.word	0x080078fc
 800178c:	08007924 	.word	0x08007924
 8001790:	08007948 	.word	0x08007948
 8001794:	08007958 	.word	0x08007958
 8001798:	08007980 	.word	0x08007980
 800179c:	080079a8 	.word	0x080079a8
 80017a0:	080079c0 	.word	0x080079c0
 80017a4:	080079ec 	.word	0x080079ec
 80017a8:	08007a18 	.word	0x08007a18

080017ac <configure_region_and_channel>:
/**
 * @brief Configures the region and sub-band for Japan (AS923-1) with TTN.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t configure_region_and_channel(ATC_HandleTypeDef *lora) {
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b091      	sub	sp, #68	@ 0x44
 80017b0:	af04      	add	r7, sp, #16
 80017b2:	6078      	str	r0, [r7, #4]
    char command[32];
    int resp;

    // Set region to AS923-1 (Japan)
    snprintf(command, sizeof(command), "AT%%S 611=%d\r\n", JAPAN_REGION);
 80017b4:	4a0f      	ldr	r2, [pc, #60]	@ (80017f4 <configure_region_and_channel+0x48>)
 80017b6:	240c      	movs	r4, #12
 80017b8:	1938      	adds	r0, r7, r4
 80017ba:	2309      	movs	r3, #9
 80017bc:	2120      	movs	r1, #32
 80017be:	f004 fbb5 	bl	8005f2c <sniprintf>
    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80017c2:	1939      	adds	r1, r7, r4
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <configure_region_and_channel+0x4c>)
 80017c8:	9302      	str	r3, [sp, #8]
 80017ca:	2301      	movs	r3, #1
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	23c8      	movs	r3, #200	@ 0xc8
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	2264      	movs	r2, #100	@ 0x64
 80017d6:	f003 ffa0 	bl	800571a <ATC_SendReceive>
 80017da:	0003      	movs	r3, r0
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 80017de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	da01      	bge.n	80017e8 <configure_region_and_channel+0x3c>
 80017e4:	2305      	movs	r3, #5
 80017e6:	e000      	b.n	80017ea <configure_region_and_channel+0x3e>
    // Set sub-band channel for TTN
//    snprintf(command, sizeof(command), "ATS 606=%d\r\n", TTN_SUBBAND_CHANNEL);
//    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
//    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;

    return LORAWAN_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	0018      	movs	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b00d      	add	sp, #52	@ 0x34
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	08007a50 	.word	0x08007a50
 80017f8:	0800723c 	.word	0x0800723c

080017fc <check_and_set_frequency>:
/**
 * @brief Checks and sets the frequency to ensure compliance with AS923-1 (923.2–923.4 MHz).
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND or LORAWAN_ERR_FREQ_CHECK on failure.
 */
static LoRaWAN_Error_t check_and_set_frequency(ATC_HandleTypeDef *lora) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b0c8      	sub	sp, #288	@ 0x120
 8001800:	af04      	add	r7, sp, #16
 8001802:	6078      	str	r0, [r7, #4]
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 8001804:	230c      	movs	r3, #12
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	60bb      	str	r3, [r7, #8]
    int resp = ATC_SendReceive(lora, "AT%%S 605?\r\n", 100, &response_ptr, 200, 1, "OK");
 800180a:	2308      	movs	r3, #8
 800180c:	18fa      	adds	r2, r7, r3
 800180e:	490e      	ldr	r1, [pc, #56]	@ (8001848 <check_and_set_frequency+0x4c>)
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <check_and_set_frequency+0x50>)
 8001814:	9302      	str	r3, [sp, #8]
 8001816:	2301      	movs	r3, #1
 8001818:	9301      	str	r3, [sp, #4]
 800181a:	23c8      	movs	r3, #200	@ 0xc8
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	0013      	movs	r3, r2
 8001820:	2264      	movs	r2, #100	@ 0x64
 8001822:	f003 ff7a 	bl	800571a <ATC_SendReceive>
 8001826:	0003      	movs	r3, r0
 8001828:	2286      	movs	r2, #134	@ 0x86
 800182a:	0052      	lsls	r2, r2, #1
 800182c:	18b9      	adds	r1, r7, r2
 800182e:	600b      	str	r3, [r1, #0]
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 8001830:	18bb      	adds	r3, r7, r2
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	da01      	bge.n	800183c <check_and_set_frequency+0x40>
 8001838:	2305      	movs	r3, #5
 800183a:	e000      	b.n	800183e <check_and_set_frequency+0x42>
//        char command[32];
//        snprintf(command, sizeof(command), "ATS 605=%u\r\n", DEFAULT_FREQ);
//        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
//        if (resp < 0) return LORAWAN_ERR_FREQ_CHECK;
//    }
    return LORAWAN_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	0018      	movs	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	b044      	add	sp, #272	@ 0x110
 8001844:	bd80      	pop	{r7, pc}
 8001846:	46c0      	nop			@ (mov r8, r8)
 8001848:	08007a60 	.word	0x08007a60
 800184c:	0800723c 	.word	0x0800723c

08001850 <configure_lorawan_params>:
/**
 * @brief Configures LoRaWAN parameters (ADR, OTAA, Class, Data Rate, TX Power).
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, or an error code from a failed sub-function.
 */
static LoRaWAN_Error_t configure_lorawan_params(ATC_HandleTypeDef *lora) {
 8001850:	b5b0      	push	{r4, r5, r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    LoRaWAN_Error_t err;

    // Disable ADR
    if ((err = set_adr(lora, false)) != LORAWAN_OK) return err;
 8001858:	250f      	movs	r5, #15
 800185a:	197c      	adds	r4, r7, r5
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2100      	movs	r1, #0
 8001860:	0018      	movs	r0, r3
 8001862:	f000 f84d 	bl	8001900 <set_adr>
 8001866:	0003      	movs	r3, r0
 8001868:	7023      	strb	r3, [r4, #0]
 800186a:	197b      	adds	r3, r7, r5
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <configure_lorawan_params+0x28>
 8001872:	197b      	adds	r3, r7, r5
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	e03f      	b.n	80018f8 <configure_lorawan_params+0xa8>

    // Enable OTAA
    if ((err = set_otaa(lora, true)) != LORAWAN_OK) return err;
 8001878:	250f      	movs	r5, #15
 800187a:	197c      	adds	r4, r7, r5
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2101      	movs	r1, #1
 8001880:	0018      	movs	r0, r3
 8001882:	f000 f869 	bl	8001958 <set_otaa>
 8001886:	0003      	movs	r3, r0
 8001888:	7023      	strb	r3, [r4, #0]
 800188a:	197b      	adds	r3, r7, r5
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d002      	beq.n	8001898 <configure_lorawan_params+0x48>
 8001892:	197b      	adds	r3, r7, r5
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	e02f      	b.n	80018f8 <configure_lorawan_params+0xa8>

    // Set Class A
    if ((err = set_class_a(lora)) != LORAWAN_OK) return err;
 8001898:	250f      	movs	r5, #15
 800189a:	197c      	adds	r4, r7, r5
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	0018      	movs	r0, r3
 80018a0:	f000 f886 	bl	80019b0 <set_class_a>
 80018a4:	0003      	movs	r3, r0
 80018a6:	7023      	strb	r3, [r4, #0]
 80018a8:	197b      	adds	r3, r7, r5
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <configure_lorawan_params+0x66>
 80018b0:	197b      	adds	r3, r7, r5
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	e020      	b.n	80018f8 <configure_lorawan_params+0xa8>

    // Set static data rate (DR0)
    if ((err = set_data_rate(lora, DATA_RATE)) != LORAWAN_OK) return err;
 80018b6:	250f      	movs	r5, #15
 80018b8:	197c      	adds	r4, r7, r5
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2100      	movs	r1, #0
 80018be:	0018      	movs	r0, r3
 80018c0:	f000 f896 	bl	80019f0 <set_data_rate>
 80018c4:	0003      	movs	r3, r0
 80018c6:	7023      	strb	r3, [r4, #0]
 80018c8:	197b      	adds	r3, r7, r5
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d002      	beq.n	80018d6 <configure_lorawan_params+0x86>
 80018d0:	197b      	adds	r3, r7, r5
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	e010      	b.n	80018f8 <configure_lorawan_params+0xa8>

    // Set TX power (11 dBm for Japan compliance)
    if ((err = set_tx_power(lora, TX_POWER)) != LORAWAN_OK) return err;
 80018d6:	250f      	movs	r5, #15
 80018d8:	197c      	adds	r4, r7, r5
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	210b      	movs	r1, #11
 80018de:	0018      	movs	r0, r3
 80018e0:	f000 f8ae 	bl	8001a40 <set_tx_power>
 80018e4:	0003      	movs	r3, r0
 80018e6:	7023      	strb	r3, [r4, #0]
 80018e8:	197b      	adds	r3, r7, r5
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d002      	beq.n	80018f6 <configure_lorawan_params+0xa6>
 80018f0:	197b      	adds	r3, r7, r5
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	e000      	b.n	80018f8 <configure_lorawan_params+0xa8>

    return LORAWAN_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	0018      	movs	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b004      	add	sp, #16
 80018fe:	bdb0      	pop	{r4, r5, r7, pc}

08001900 <set_adr>:
 * @brief Disables or enables Adaptive Data Rate (ADR).
 * @param lora Pointer to the ATC handle for communication.
 * @param enable true to enable ADR, false to disable.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_adr(ATC_HandleTypeDef *lora, bool enable) {
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b091      	sub	sp, #68	@ 0x44
 8001904:	af04      	add	r7, sp, #16
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	000a      	movs	r2, r1
 800190a:	1cfb      	adds	r3, r7, #3
 800190c:	701a      	strb	r2, [r3, #0]
    char command[32];
    snprintf(command, sizeof(command), "AT%%S 600=%d\r\n", enable ? 1 : 0);
 800190e:	1cfb      	adds	r3, r7, #3
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	4a0f      	ldr	r2, [pc, #60]	@ (8001950 <set_adr+0x50>)
 8001914:	240c      	movs	r4, #12
 8001916:	1938      	adds	r0, r7, r4
 8001918:	2120      	movs	r1, #32
 800191a:	f004 fb07 	bl	8005f2c <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800191e:	1939      	adds	r1, r7, r4
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	4b0c      	ldr	r3, [pc, #48]	@ (8001954 <set_adr+0x54>)
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	2301      	movs	r3, #1
 8001928:	9301      	str	r3, [sp, #4]
 800192a:	23c8      	movs	r3, #200	@ 0xc8
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2300      	movs	r3, #0
 8001930:	2264      	movs	r2, #100	@ 0x64
 8001932:	f003 fef2 	bl	800571a <ATC_SendReceive>
 8001936:	0003      	movs	r3, r0
 8001938:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 800193a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800193c:	2b00      	cmp	r3, #0
 800193e:	da01      	bge.n	8001944 <set_adr+0x44>
 8001940:	2305      	movs	r3, #5
 8001942:	e000      	b.n	8001946 <set_adr+0x46>
 8001944:	2300      	movs	r3, #0
}
 8001946:	0018      	movs	r0, r3
 8001948:	46bd      	mov	sp, r7
 800194a:	b00d      	add	sp, #52	@ 0x34
 800194c:	bd90      	pop	{r4, r7, pc}
 800194e:	46c0      	nop			@ (mov r8, r8)
 8001950:	08007a70 	.word	0x08007a70
 8001954:	0800723c 	.word	0x0800723c

08001958 <set_otaa>:
 * @brief Enables or disables Over-The-Air Activation (OTAA).
 * @param lora Pointer to the ATC handle for communication.
 * @param enable true to enable OTAA, false to disable.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_otaa(ATC_HandleTypeDef *lora, bool enable) {
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b091      	sub	sp, #68	@ 0x44
 800195c:	af04      	add	r7, sp, #16
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	000a      	movs	r2, r1
 8001962:	1cfb      	adds	r3, r7, #3
 8001964:	701a      	strb	r2, [r3, #0]
    char command[32];
    snprintf(command, sizeof(command), "AT%%S 602=%d\r\n", enable ? 1 : 0);
 8001966:	1cfb      	adds	r3, r7, #3
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	4a0f      	ldr	r2, [pc, #60]	@ (80019a8 <set_otaa+0x50>)
 800196c:	240c      	movs	r4, #12
 800196e:	1938      	adds	r0, r7, r4
 8001970:	2120      	movs	r1, #32
 8001972:	f004 fadb 	bl	8005f2c <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001976:	1939      	adds	r1, r7, r4
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <set_otaa+0x54>)
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	2301      	movs	r3, #1
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	23c8      	movs	r3, #200	@ 0xc8
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2300      	movs	r3, #0
 8001988:	2264      	movs	r2, #100	@ 0x64
 800198a:	f003 fec6 	bl	800571a <ATC_SendReceive>
 800198e:	0003      	movs	r3, r0
 8001990:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 8001992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001994:	2b00      	cmp	r3, #0
 8001996:	da01      	bge.n	800199c <set_otaa+0x44>
 8001998:	2305      	movs	r3, #5
 800199a:	e000      	b.n	800199e <set_otaa+0x46>
 800199c:	2300      	movs	r3, #0
}
 800199e:	0018      	movs	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	b00d      	add	sp, #52	@ 0x34
 80019a4:	bd90      	pop	{r4, r7, pc}
 80019a6:	46c0      	nop			@ (mov r8, r8)
 80019a8:	08007a80 	.word	0x08007a80
 80019ac:	0800723c 	.word	0x0800723c

080019b0 <set_class_a>:
/**
 * @brief Sets the LoRaWAN device to Class A.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_class_a(ATC_HandleTypeDef *lora) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af04      	add	r7, sp, #16
 80019b6:	6078      	str	r0, [r7, #4]
    int resp = ATC_SendReceive(lora, "AT%%S 603=0\r\n", 100, NULL, 200, 1, "OK");
 80019b8:	490b      	ldr	r1, [pc, #44]	@ (80019e8 <set_class_a+0x38>)
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <set_class_a+0x3c>)
 80019be:	9302      	str	r3, [sp, #8]
 80019c0:	2301      	movs	r3, #1
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	23c8      	movs	r3, #200	@ 0xc8
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2300      	movs	r3, #0
 80019ca:	2264      	movs	r2, #100	@ 0x64
 80019cc:	f003 fea5 	bl	800571a <ATC_SendReceive>
 80019d0:	0003      	movs	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da01      	bge.n	80019de <set_class_a+0x2e>
 80019da:	2305      	movs	r3, #5
 80019dc:	e000      	b.n	80019e0 <set_class_a+0x30>
 80019de:	2300      	movs	r3, #0
}
 80019e0:	0018      	movs	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	b004      	add	sp, #16
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	08007a90 	.word	0x08007a90
 80019ec:	0800723c 	.word	0x0800723c

080019f0 <set_data_rate>:
 * @brief Sets the static data rate for LoRaWAN communication.
 * @param lora Pointer to the ATC handle for communication.
 * @param dr Data rate to set (e.g., 0 for DR0).
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_data_rate(ATC_HandleTypeDef *lora, int dr) {
 80019f0:	b590      	push	{r4, r7, lr}
 80019f2:	b091      	sub	sp, #68	@ 0x44
 80019f4:	af04      	add	r7, sp, #16
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
    char command[32];
    snprintf(command, sizeof(command), "AT%%S 713=%d\r\n", dr);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001a38 <set_data_rate+0x48>)
 80019fe:	240c      	movs	r4, #12
 8001a00:	1938      	adds	r0, r7, r4
 8001a02:	2120      	movs	r1, #32
 8001a04:	f004 fa92 	bl	8005f2c <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001a08:	1939      	adds	r1, r7, r4
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a3c <set_data_rate+0x4c>)
 8001a0e:	9302      	str	r3, [sp, #8]
 8001a10:	2301      	movs	r3, #1
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	23c8      	movs	r3, #200	@ 0xc8
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	2264      	movs	r2, #100	@ 0x64
 8001a1c:	f003 fe7d 	bl	800571a <ATC_SendReceive>
 8001a20:	0003      	movs	r3, r0
 8001a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 8001a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	da01      	bge.n	8001a2e <set_data_rate+0x3e>
 8001a2a:	2305      	movs	r3, #5
 8001a2c:	e000      	b.n	8001a30 <set_data_rate+0x40>
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	0018      	movs	r0, r3
 8001a32:	46bd      	mov	sp, r7
 8001a34:	b00d      	add	sp, #52	@ 0x34
 8001a36:	bd90      	pop	{r4, r7, pc}
 8001a38:	08007aa0 	.word	0x08007aa0
 8001a3c:	0800723c 	.word	0x0800723c

08001a40 <set_tx_power>:
 * @brief Sets the TX power for LoRaWAN transmission.
 * @param lora Pointer to the ATC handle for communication.
 * @param power TX power in dBm (e.g., 11 for Japan compliance).
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_tx_power(ATC_HandleTypeDef *lora, int power) {
 8001a40:	b590      	push	{r4, r7, lr}
 8001a42:	b091      	sub	sp, #68	@ 0x44
 8001a44:	af04      	add	r7, sp, #16
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
    char command[32];
    snprintf(command, sizeof(command), "AT%%S 714=%d\r\n", power);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8001a88 <set_tx_power+0x48>)
 8001a4e:	240c      	movs	r4, #12
 8001a50:	1938      	adds	r0, r7, r4
 8001a52:	2120      	movs	r1, #32
 8001a54:	f004 fa6a 	bl	8005f2c <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001a58:	1939      	adds	r1, r7, r4
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <set_tx_power+0x4c>)
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	2301      	movs	r3, #1
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	23c8      	movs	r3, #200	@ 0xc8
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	2300      	movs	r3, #0
 8001a6a:	2264      	movs	r2, #100	@ 0x64
 8001a6c:	f003 fe55 	bl	800571a <ATC_SendReceive>
 8001a70:	0003      	movs	r3, r0
 8001a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 8001a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	da01      	bge.n	8001a7e <set_tx_power+0x3e>
 8001a7a:	2305      	movs	r3, #5
 8001a7c:	e000      	b.n	8001a80 <set_tx_power+0x40>
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	0018      	movs	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	b00d      	add	sp, #52	@ 0x34
 8001a86:	bd90      	pop	{r4, r7, pc}
 8001a88:	08007ab0 	.word	0x08007ab0
 8001a8c:	0800723c 	.word	0x0800723c

08001a90 <join_network>:
/**
 * @brief Initiates the LoRaWAN network join process using OTAA.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on successful join, LORAWAN_ERR_JOIN or LORAWAN_ERR_AT_COMMAND on failure.
 */
LoRaWAN_Error_t join_network(ATC_HandleTypeDef *lora) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b0c8      	sub	sp, #288	@ 0x120
 8001a94:	af04      	add	r7, sp, #16
 8001a96:	6078      	str	r0, [r7, #4]
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 8001a98:	230c      	movs	r3, #12
 8001a9a:	18fb      	adds	r3, r7, r3
 8001a9c:	60bb      	str	r3, [r7, #8]
    int resp = ATC_SendReceive(lora, "AT+JOIN\r\n", 100, &response_ptr, JOIN_TIMEOUT_MS, 1, "OK");
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	18fa      	adds	r2, r7, r3
 8001aa2:	490e      	ldr	r1, [pc, #56]	@ (8001adc <join_network+0x4c>)
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <join_network+0x50>)
 8001aa8:	9302      	str	r3, [sp, #8]
 8001aaa:	2301      	movs	r3, #1
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae4 <join_network+0x54>)
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	0013      	movs	r3, r2
 8001ab4:	2264      	movs	r2, #100	@ 0x64
 8001ab6:	f003 fe30 	bl	800571a <ATC_SendReceive>
 8001aba:	0003      	movs	r3, r0
 8001abc:	2286      	movs	r2, #134	@ 0x86
 8001abe:	0052      	lsls	r2, r2, #1
 8001ac0:	18b9      	adds	r1, r7, r2
 8001ac2:	600b      	str	r3, [r1, #0]
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 8001ac4:	18bb      	adds	r3, r7, r2
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	da01      	bge.n	8001ad0 <join_network+0x40>
 8001acc:	2305      	movs	r3, #5
 8001ace:	e000      	b.n	8001ad2 <join_network+0x42>
    // Check for join success (expecting a response like "+JOIN: Joined" or similar)
//    if (strstr(response, "Joined") == NULL) {
//        return LORAWAN_ERR_JOIN;
//    }

    return LORAWAN_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	0018      	movs	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	b044      	add	sp, #272	@ 0x110
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			@ (mov r8, r8)
 8001adc:	08007ac0 	.word	0x08007ac0
 8001ae0:	0800723c 	.word	0x0800723c
 8001ae4:	00002710 	.word	0x00002710

08001ae8 <save_and_reset>:
/**
 * @brief Saves settings to non-volatile memory and performs a warm reset.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_SAVE_RESET on failure.
 */
static LoRaWAN_Error_t save_and_reset(ATC_HandleTypeDef *lora) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b088      	sub	sp, #32
 8001aec:	af04      	add	r7, sp, #16
 8001aee:	6078      	str	r0, [r7, #4]
    int resp;

    // Save settings to non-volatile memory
    resp = ATC_SendReceive(lora, "AT&W\r\n", 100, NULL, 200, 1, "OK");
 8001af0:	4915      	ldr	r1, [pc, #84]	@ (8001b48 <save_and_reset+0x60>)
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <save_and_reset+0x64>)
 8001af6:	9302      	str	r3, [sp, #8]
 8001af8:	2301      	movs	r3, #1
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	23c8      	movs	r3, #200	@ 0xc8
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2300      	movs	r3, #0
 8001b02:	2264      	movs	r2, #100	@ 0x64
 8001b04:	f003 fe09 	bl	800571a <ATC_SendReceive>
 8001b08:	0003      	movs	r3, r0
 8001b0a:	60fb      	str	r3, [r7, #12]
    if (resp < 0) return LORAWAN_ERR_SAVE_RESET;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	da01      	bge.n	8001b16 <save_and_reset+0x2e>
 8001b12:	2306      	movs	r3, #6
 8001b14:	e013      	b.n	8001b3e <save_and_reset+0x56>

    // Perform warm reset
    resp = ATC_SendReceive(lora, "ATZ\r\n", 100, NULL, 200, 1, "OK");
 8001b16:	490e      	ldr	r1, [pc, #56]	@ (8001b50 <save_and_reset+0x68>)
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <save_and_reset+0x64>)
 8001b1c:	9302      	str	r3, [sp, #8]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	23c8      	movs	r3, #200	@ 0xc8
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2300      	movs	r3, #0
 8001b28:	2264      	movs	r2, #100	@ 0x64
 8001b2a:	f003 fdf6 	bl	800571a <ATC_SendReceive>
 8001b2e:	0003      	movs	r3, r0
 8001b30:	60fb      	str	r3, [r7, #12]
    if (resp < 0) return LORAWAN_ERR_SAVE_RESET;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	da01      	bge.n	8001b3c <save_and_reset+0x54>
 8001b38:	2306      	movs	r3, #6
 8001b3a:	e000      	b.n	8001b3e <save_and_reset+0x56>

    return LORAWAN_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	0018      	movs	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	b004      	add	sp, #16
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	46c0      	nop			@ (mov r8, r8)
 8001b48:	08007b50 	.word	0x08007b50
 8001b4c:	0800723c 	.word	0x0800723c
 8001b50:	08007b58 	.word	0x08007b58

08001b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001b54:	480d      	ldr	r0, [pc, #52]	@ (8001b8c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001b56:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b58:	f7ff f8d4 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b5c:	480c      	ldr	r0, [pc, #48]	@ (8001b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b5e:	490d      	ldr	r1, [pc, #52]	@ (8001b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b60:	4a0d      	ldr	r2, [pc, #52]	@ (8001b98 <LoopForever+0xe>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b74:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba0 <LoopForever+0x16>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001b82:	f004 fba1 	bl	80062c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b86:	f7fe fe4f 	bl	8000828 <main>

08001b8a <LoopForever>:

LoopForever:
    b LoopForever
 8001b8a:	e7fe      	b.n	8001b8a <LoopForever>
   ldr   r0, =_estack
 8001b8c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001b98:	08007d5c 	.word	0x08007d5c
  ldr r2, =_sbss
 8001b9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001ba0:	200004c0 	.word	0x200004c0

08001ba4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC1_COMP_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bae:	1dfb      	adds	r3, r7, #7
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001be4 <HAL_Init+0x3c>)
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001be4 <HAL_Init+0x3c>)
 8001bba:	2140      	movs	r1, #64	@ 0x40
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bc0:	2000      	movs	r0, #0
 8001bc2:	f000 f811 	bl	8001be8 <HAL_InitTick>
 8001bc6:	1e03      	subs	r3, r0, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001bca:	1dfb      	adds	r3, r7, #7
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	e001      	b.n	8001bd6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bd2:	f7fe ffa9 	bl	8000b28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bd6:	1dfb      	adds	r3, r7, #7
 8001bd8:	781b      	ldrb	r3, [r3, #0]
}
 8001bda:	0018      	movs	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	b002      	add	sp, #8
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	46c0      	nop			@ (mov r8, r8)
 8001be4:	40022000 	.word	0x40022000

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b14      	ldr	r3, [pc, #80]	@ (8001c44 <HAL_InitTick+0x5c>)
 8001bf2:	681c      	ldr	r4, [r3, #0]
 8001bf4:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <HAL_InitTick+0x60>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	23fa      	movs	r3, #250	@ 0xfa
 8001bfc:	0098      	lsls	r0, r3, #2
 8001bfe:	f7fe fa95 	bl	800012c <__udivsi3>
 8001c02:	0003      	movs	r3, r0
 8001c04:	0019      	movs	r1, r3
 8001c06:	0020      	movs	r0, r4
 8001c08:	f7fe fa90 	bl	800012c <__udivsi3>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f000 f92f 	bl	8001e72 <HAL_SYSTICK_Config>
 8001c14:	1e03      	subs	r3, r0, #0
 8001c16:	d001      	beq.n	8001c1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e00f      	b.n	8001c3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d80b      	bhi.n	8001c3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c22:	6879      	ldr	r1, [r7, #4]
 8001c24:	2301      	movs	r3, #1
 8001c26:	425b      	negs	r3, r3
 8001c28:	2200      	movs	r2, #0
 8001c2a:	0018      	movs	r0, r3
 8001c2c:	f000 f8fc 	bl	8001e28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <HAL_InitTick+0x64>)
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b003      	add	sp, #12
 8001c42:	bd90      	pop	{r4, r7, pc}
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	20000004 	.word	0x20000004

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c54:	4b05      	ldr	r3, [pc, #20]	@ (8001c6c <HAL_IncTick+0x1c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	001a      	movs	r2, r3
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <HAL_IncTick+0x20>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	18d2      	adds	r2, r2, r3
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_IncTick+0x20>)
 8001c62:	601a      	str	r2, [r3, #0]
}
 8001c64:	46c0      	nop			@ (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			@ (mov r8, r8)
 8001c6c:	20000008 	.word	0x20000008
 8001c70:	20000370 	.word	0x20000370

08001c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  return uwTick;
 8001c78:	4b02      	ldr	r3, [pc, #8]	@ (8001c84 <HAL_GetTick+0x10>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	20000370 	.word	0x20000370

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff fff0 	bl	8001c74 <HAL_GetTick>
 8001c94:	0003      	movs	r3, r0
 8001c96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	189b      	adds	r3, r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cae:	46c0      	nop			@ (mov r8, r8)
 8001cb0:	f7ff ffe0 	bl	8001c74 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	46c0      	nop			@ (mov r8, r8)
 8001cc2:	46c0      	nop			@ (mov r8, r8)
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b004      	add	sp, #16
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	20000008 	.word	0x20000008

08001cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	1dfb      	adds	r3, r7, #7
 8001cda:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ce2:	d809      	bhi.n	8001cf8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce4:	1dfb      	adds	r3, r7, #7
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	001a      	movs	r2, r3
 8001cea:	231f      	movs	r3, #31
 8001cec:	401a      	ands	r2, r3
 8001cee:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <__NVIC_EnableIRQ+0x30>)
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	4091      	lsls	r1, r2
 8001cf4:	000a      	movs	r2, r1
 8001cf6:	601a      	str	r2, [r3, #0]
  }
}
 8001cf8:	46c0      	nop			@ (mov r8, r8)
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	b002      	add	sp, #8
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	e000e100 	.word	0xe000e100

08001d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	1dfb      	adds	r3, r7, #7
 8001d10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d12:	1dfb      	adds	r3, r7, #7
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d18:	d828      	bhi.n	8001d6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8001dd8 <__NVIC_SetPriority+0xd4>)
 8001d1c:	1dfb      	adds	r3, r7, #7
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	b25b      	sxtb	r3, r3
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	33c0      	adds	r3, #192	@ 0xc0
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	589b      	ldr	r3, [r3, r2]
 8001d2a:	1dfa      	adds	r2, r7, #7
 8001d2c:	7812      	ldrb	r2, [r2, #0]
 8001d2e:	0011      	movs	r1, r2
 8001d30:	2203      	movs	r2, #3
 8001d32:	400a      	ands	r2, r1
 8001d34:	00d2      	lsls	r2, r2, #3
 8001d36:	21ff      	movs	r1, #255	@ 0xff
 8001d38:	4091      	lsls	r1, r2
 8001d3a:	000a      	movs	r2, r1
 8001d3c:	43d2      	mvns	r2, r2
 8001d3e:	401a      	ands	r2, r3
 8001d40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	019b      	lsls	r3, r3, #6
 8001d46:	22ff      	movs	r2, #255	@ 0xff
 8001d48:	401a      	ands	r2, r3
 8001d4a:	1dfb      	adds	r3, r7, #7
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	0018      	movs	r0, r3
 8001d50:	2303      	movs	r3, #3
 8001d52:	4003      	ands	r3, r0
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d58:	481f      	ldr	r0, [pc, #124]	@ (8001dd8 <__NVIC_SetPriority+0xd4>)
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	b25b      	sxtb	r3, r3
 8001d60:	089b      	lsrs	r3, r3, #2
 8001d62:	430a      	orrs	r2, r1
 8001d64:	33c0      	adds	r3, #192	@ 0xc0
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001d6a:	e031      	b.n	8001dd0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d6c:	4a1b      	ldr	r2, [pc, #108]	@ (8001ddc <__NVIC_SetPriority+0xd8>)
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	0019      	movs	r1, r3
 8001d74:	230f      	movs	r3, #15
 8001d76:	400b      	ands	r3, r1
 8001d78:	3b08      	subs	r3, #8
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3306      	adds	r3, #6
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	18d3      	adds	r3, r2, r3
 8001d82:	3304      	adds	r3, #4
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	1dfa      	adds	r2, r7, #7
 8001d88:	7812      	ldrb	r2, [r2, #0]
 8001d8a:	0011      	movs	r1, r2
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	400a      	ands	r2, r1
 8001d90:	00d2      	lsls	r2, r2, #3
 8001d92:	21ff      	movs	r1, #255	@ 0xff
 8001d94:	4091      	lsls	r1, r2
 8001d96:	000a      	movs	r2, r1
 8001d98:	43d2      	mvns	r2, r2
 8001d9a:	401a      	ands	r2, r3
 8001d9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	019b      	lsls	r3, r3, #6
 8001da2:	22ff      	movs	r2, #255	@ 0xff
 8001da4:	401a      	ands	r2, r3
 8001da6:	1dfb      	adds	r3, r7, #7
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	0018      	movs	r0, r3
 8001dac:	2303      	movs	r3, #3
 8001dae:	4003      	ands	r3, r0
 8001db0:	00db      	lsls	r3, r3, #3
 8001db2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001db4:	4809      	ldr	r0, [pc, #36]	@ (8001ddc <__NVIC_SetPriority+0xd8>)
 8001db6:	1dfb      	adds	r3, r7, #7
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	001c      	movs	r4, r3
 8001dbc:	230f      	movs	r3, #15
 8001dbe:	4023      	ands	r3, r4
 8001dc0:	3b08      	subs	r3, #8
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	3306      	adds	r3, #6
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	18c3      	adds	r3, r0, r3
 8001dcc:	3304      	adds	r3, #4
 8001dce:	601a      	str	r2, [r3, #0]
}
 8001dd0:	46c0      	nop			@ (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b003      	add	sp, #12
 8001dd6:	bd90      	pop	{r4, r7, pc}
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	1e5a      	subs	r2, r3, #1
 8001dec:	2380      	movs	r3, #128	@ 0x80
 8001dee:	045b      	lsls	r3, r3, #17
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d301      	bcc.n	8001df8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001df4:	2301      	movs	r3, #1
 8001df6:	e010      	b.n	8001e1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001df8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <SysTick_Config+0x44>)
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	3a01      	subs	r2, #1
 8001dfe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e00:	2301      	movs	r3, #1
 8001e02:	425b      	negs	r3, r3
 8001e04:	2103      	movs	r1, #3
 8001e06:	0018      	movs	r0, r3
 8001e08:	f7ff ff7c 	bl	8001d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e0c:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <SysTick_Config+0x44>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e12:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <SysTick_Config+0x44>)
 8001e14:	2207      	movs	r2, #7
 8001e16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b002      	add	sp, #8
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	e000e010 	.word	0xe000e010

08001e28 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
 8001e32:	210f      	movs	r1, #15
 8001e34:	187b      	adds	r3, r7, r1
 8001e36:	1c02      	adds	r2, r0, #0
 8001e38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	b25b      	sxtb	r3, r3
 8001e42:	0011      	movs	r1, r2
 8001e44:	0018      	movs	r0, r3
 8001e46:	f7ff ff5d 	bl	8001d04 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001e4a:	46c0      	nop			@ (mov r8, r8)
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b004      	add	sp, #16
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	0002      	movs	r2, r0
 8001e5a:	1dfb      	adds	r3, r7, #7
 8001e5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e5e:	1dfb      	adds	r3, r7, #7
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b25b      	sxtb	r3, r3
 8001e64:	0018      	movs	r0, r3
 8001e66:	f7ff ff33 	bl	8001cd0 <__NVIC_EnableIRQ>
}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b002      	add	sp, #8
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7ff ffaf 	bl	8001de0 <SysTick_Config>
 8001e82:	0003      	movs	r3, r0
}
 8001e84:	0018      	movs	r0, r3
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b002      	add	sp, #8
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e061      	b.n	8001f62 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a32      	ldr	r2, [pc, #200]	@ (8001f6c <HAL_DMA_Init+0xe0>)
 8001ea4:	4694      	mov	ip, r2
 8001ea6:	4463      	add	r3, ip
 8001ea8:	2114      	movs	r1, #20
 8001eaa:	0018      	movs	r0, r3
 8001eac:	f7fe f93e 	bl	800012c <__udivsi3>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	009a      	lsls	r2, r3, #2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a2d      	ldr	r2, [pc, #180]	@ (8001f70 <HAL_DMA_Init+0xe4>)
 8001ebc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2225      	movs	r2, #37	@ 0x25
 8001ec2:	2102      	movs	r1, #2
 8001ec4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4a28      	ldr	r2, [pc, #160]	@ (8001f74 <HAL_DMA_Init+0xe8>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001ede:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	2380      	movs	r3, #128	@ 0x80
 8001f12:	01db      	lsls	r3, r3, #7
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d018      	beq.n	8001f4a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001f18:	4b17      	ldr	r3, [pc, #92]	@ (8001f78 <HAL_DMA_Init+0xec>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f20:	211c      	movs	r1, #28
 8001f22:	400b      	ands	r3, r1
 8001f24:	210f      	movs	r1, #15
 8001f26:	4099      	lsls	r1, r3
 8001f28:	000b      	movs	r3, r1
 8001f2a:	43d9      	mvns	r1, r3
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_DMA_Init+0xec>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001f32:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <HAL_DMA_Init+0xec>)
 8001f34:	6819      	ldr	r1, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	201c      	movs	r0, #28
 8001f40:	4003      	ands	r3, r0
 8001f42:	409a      	lsls	r2, r3
 8001f44:	4b0c      	ldr	r3, [pc, #48]	@ (8001f78 <HAL_DMA_Init+0xec>)
 8001f46:	430a      	orrs	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2225      	movs	r2, #37	@ 0x25
 8001f54:	2101      	movs	r1, #1
 8001f56:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2224      	movs	r2, #36	@ 0x24
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b004      	add	sp, #16
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	bffdfff8 	.word	0xbffdfff8
 8001f70:	40020000 	.word	0x40020000
 8001f74:	ffff800f 	.word	0xffff800f
 8001f78:	400200a8 	.word	0x400200a8

08001f7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
 8001f88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f8a:	2317      	movs	r3, #23
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2224      	movs	r2, #36	@ 0x24
 8001f96:	5c9b      	ldrb	r3, [r3, r2]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d101      	bne.n	8001fa0 <HAL_DMA_Start_IT+0x24>
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	e04f      	b.n	8002040 <HAL_DMA_Start_IT+0xc4>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2224      	movs	r2, #36	@ 0x24
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2225      	movs	r2, #37	@ 0x25
 8001fac:	5c9b      	ldrb	r3, [r3, r2]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d13a      	bne.n	800202a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2225      	movs	r2, #37	@ 0x25
 8001fb8:	2102      	movs	r1, #2
 8001fba:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2101      	movs	r1, #1
 8001fce:	438a      	bics	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	68f8      	ldr	r0, [r7, #12]
 8001fda:	f000 f974 	bl	80022c6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d008      	beq.n	8001ff8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	210e      	movs	r1, #14
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e00f      	b.n	8002018 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2104      	movs	r1, #4
 8002004:	438a      	bics	r2, r1
 8002006:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	210a      	movs	r1, #10
 8002014:	430a      	orrs	r2, r1
 8002016:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2101      	movs	r1, #1
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e007      	b.n	800203a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2224      	movs	r2, #36	@ 0x24
 800202e:	2100      	movs	r1, #0
 8002030:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002032:	2317      	movs	r3, #23
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	2202      	movs	r2, #2
 8002038:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800203a:	2317      	movs	r3, #23
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	781b      	ldrb	r3, [r3, #0]
}
 8002040:	0018      	movs	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	b006      	add	sp, #24
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002050:	230f      	movs	r3, #15
 8002052:	18fb      	adds	r3, r7, r3
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2225      	movs	r2, #37	@ 0x25
 800205c:	5c9b      	ldrb	r3, [r3, r2]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d008      	beq.n	8002076 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2204      	movs	r2, #4
 8002068:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2224      	movs	r2, #36	@ 0x24
 800206e:	2100      	movs	r1, #0
 8002070:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e024      	b.n	80020c0 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	210e      	movs	r1, #14
 8002082:	438a      	bics	r2, r1
 8002084:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2101      	movs	r1, #1
 8002092:	438a      	bics	r2, r1
 8002094:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209a:	221c      	movs	r2, #28
 800209c:	401a      	ands	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	2101      	movs	r1, #1
 80020a4:	4091      	lsls	r1, r2
 80020a6:	000a      	movs	r2, r1
 80020a8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2225      	movs	r2, #37	@ 0x25
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2224      	movs	r2, #36	@ 0x24
 80020b6:	2100      	movs	r1, #0
 80020b8:	5499      	strb	r1, [r3, r2]

    return status;
 80020ba:	230f      	movs	r3, #15
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b004      	add	sp, #16
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d0:	210f      	movs	r1, #15
 80020d2:	187b      	adds	r3, r7, r1
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2225      	movs	r2, #37	@ 0x25
 80020dc:	5c9b      	ldrb	r3, [r3, r2]
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d006      	beq.n	80020f2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2204      	movs	r2, #4
 80020e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80020ea:	187b      	adds	r3, r7, r1
 80020ec:	2201      	movs	r2, #1
 80020ee:	701a      	strb	r2, [r3, #0]
 80020f0:	e02a      	b.n	8002148 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	210e      	movs	r1, #14
 80020fe:	438a      	bics	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2101      	movs	r1, #1
 800210e:	438a      	bics	r2, r1
 8002110:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	221c      	movs	r2, #28
 8002118:	401a      	ands	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	2101      	movs	r1, #1
 8002120:	4091      	lsls	r1, r2
 8002122:	000a      	movs	r2, r1
 8002124:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2225      	movs	r2, #37	@ 0x25
 800212a:	2101      	movs	r1, #1
 800212c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2224      	movs	r2, #36	@ 0x24
 8002132:	2100      	movs	r1, #0
 8002134:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	0010      	movs	r0, r2
 8002146:	4798      	blx	r3
    }
  }
  return status;
 8002148:	230f      	movs	r3, #15
 800214a:	18fb      	adds	r3, r7, r3
 800214c:	781b      	ldrb	r3, [r3, #0]
}
 800214e:	0018      	movs	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	b004      	add	sp, #16
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b084      	sub	sp, #16
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	221c      	movs	r2, #28
 8002174:	4013      	ands	r3, r2
 8002176:	2204      	movs	r2, #4
 8002178:	409a      	lsls	r2, r3
 800217a:	0013      	movs	r3, r2
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4013      	ands	r3, r2
 8002180:	d026      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x7a>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2204      	movs	r2, #4
 8002186:	4013      	ands	r3, r2
 8002188:	d022      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2220      	movs	r2, #32
 8002192:	4013      	ands	r3, r2
 8002194:	d107      	bne.n	80021a6 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2104      	movs	r1, #4
 80021a2:	438a      	bics	r2, r1
 80021a4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021aa:	221c      	movs	r2, #28
 80021ac:	401a      	ands	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	2104      	movs	r1, #4
 80021b4:	4091      	lsls	r1, r2
 80021b6:	000a      	movs	r2, r1
 80021b8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d100      	bne.n	80021c4 <HAL_DMA_IRQHandler+0x6e>
 80021c2:	e071      	b.n	80022a8 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	0010      	movs	r0, r2
 80021cc:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80021ce:	e06b      	b.n	80022a8 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d4:	221c      	movs	r2, #28
 80021d6:	4013      	ands	r3, r2
 80021d8:	2202      	movs	r2, #2
 80021da:	409a      	lsls	r2, r3
 80021dc:	0013      	movs	r3, r2
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4013      	ands	r3, r2
 80021e2:	d02d      	beq.n	8002240 <HAL_DMA_IRQHandler+0xea>
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2202      	movs	r2, #2
 80021e8:	4013      	ands	r3, r2
 80021ea:	d029      	beq.n	8002240 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2220      	movs	r2, #32
 80021f4:	4013      	ands	r3, r2
 80021f6:	d10b      	bne.n	8002210 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	210a      	movs	r1, #10
 8002204:	438a      	bics	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2225      	movs	r2, #37	@ 0x25
 800220c:	2101      	movs	r1, #1
 800220e:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002214:	221c      	movs	r2, #28
 8002216:	401a      	ands	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221c:	2102      	movs	r1, #2
 800221e:	4091      	lsls	r1, r2
 8002220:	000a      	movs	r2, r1
 8002222:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2224      	movs	r2, #36	@ 0x24
 8002228:	2100      	movs	r1, #0
 800222a:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d039      	beq.n	80022a8 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	0010      	movs	r0, r2
 800223c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800223e:	e033      	b.n	80022a8 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002244:	221c      	movs	r2, #28
 8002246:	4013      	ands	r3, r2
 8002248:	2208      	movs	r2, #8
 800224a:	409a      	lsls	r2, r3
 800224c:	0013      	movs	r3, r2
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4013      	ands	r3, r2
 8002252:	d02a      	beq.n	80022aa <HAL_DMA_IRQHandler+0x154>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2208      	movs	r2, #8
 8002258:	4013      	ands	r3, r2
 800225a:	d026      	beq.n	80022aa <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	210e      	movs	r1, #14
 8002268:	438a      	bics	r2, r1
 800226a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002270:	221c      	movs	r2, #28
 8002272:	401a      	ands	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002278:	2101      	movs	r1, #1
 800227a:	4091      	lsls	r1, r2
 800227c:	000a      	movs	r2, r1
 800227e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2225      	movs	r2, #37	@ 0x25
 800228a:	2101      	movs	r1, #1
 800228c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2224      	movs	r2, #36	@ 0x24
 8002292:	2100      	movs	r1, #0
 8002294:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800229a:	2b00      	cmp	r3, #0
 800229c:	d005      	beq.n	80022aa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	0010      	movs	r0, r2
 80022a6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80022a8:	46c0      	nop			@ (mov r8, r8)
 80022aa:	46c0      	nop			@ (mov r8, r8)
}
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b004      	add	sp, #16
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b082      	sub	sp, #8
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 80022be:	0018      	movs	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	b002      	add	sp, #8
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	60f8      	str	r0, [r7, #12]
 80022ce:	60b9      	str	r1, [r7, #8]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022d8:	221c      	movs	r2, #28
 80022da:	401a      	ands	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	2101      	movs	r1, #1
 80022e2:	4091      	lsls	r1, r2
 80022e4:	000a      	movs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	683a      	ldr	r2, [r7, #0]
 80022ee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b10      	cmp	r3, #16
 80022f6:	d108      	bne.n	800230a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68ba      	ldr	r2, [r7, #8]
 8002306:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002308:	e007      	b.n	800231a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	60da      	str	r2, [r3, #12]
}
 800231a:	46c0      	nop			@ (mov r8, r8)
 800231c:	46bd      	mov	sp, r7
 800231e:	b004      	add	sp, #16
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800233a:	e155      	b.n	80025e8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2101      	movs	r1, #1
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	4091      	lsls	r1, r2
 8002346:	000a      	movs	r2, r1
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d100      	bne.n	8002354 <HAL_GPIO_Init+0x30>
 8002352:	e146      	b.n	80025e2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2203      	movs	r2, #3
 800235a:	4013      	ands	r3, r2
 800235c:	2b01      	cmp	r3, #1
 800235e:	d005      	beq.n	800236c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2203      	movs	r2, #3
 8002366:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002368:	2b02      	cmp	r3, #2
 800236a:	d130      	bne.n	80023ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	2203      	movs	r2, #3
 8002378:	409a      	lsls	r2, r3
 800237a:	0013      	movs	r3, r2
 800237c:	43da      	mvns	r2, r3
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68da      	ldr	r2, [r3, #12]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	409a      	lsls	r2, r3
 800238e:	0013      	movs	r3, r2
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	4313      	orrs	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a2:	2201      	movs	r2, #1
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	43da      	mvns	r2, r3
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	2201      	movs	r2, #1
 80023ba:	401a      	ands	r2, r3
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	409a      	lsls	r2, r3
 80023c0:	0013      	movs	r3, r2
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2203      	movs	r2, #3
 80023d4:	4013      	ands	r3, r2
 80023d6:	2b03      	cmp	r3, #3
 80023d8:	d017      	beq.n	800240a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	2203      	movs	r2, #3
 80023e6:	409a      	lsls	r2, r3
 80023e8:	0013      	movs	r3, r2
 80023ea:	43da      	mvns	r2, r3
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	409a      	lsls	r2, r3
 80023fc:	0013      	movs	r3, r2
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2203      	movs	r2, #3
 8002410:	4013      	ands	r3, r2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d123      	bne.n	800245e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	08da      	lsrs	r2, r3, #3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3208      	adds	r2, #8
 800241e:	0092      	lsls	r2, r2, #2
 8002420:	58d3      	ldr	r3, [r2, r3]
 8002422:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2207      	movs	r2, #7
 8002428:	4013      	ands	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	220f      	movs	r2, #15
 800242e:	409a      	lsls	r2, r3
 8002430:	0013      	movs	r3, r2
 8002432:	43da      	mvns	r2, r3
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	4013      	ands	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2107      	movs	r1, #7
 8002442:	400b      	ands	r3, r1
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	409a      	lsls	r2, r3
 8002448:	0013      	movs	r3, r2
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4313      	orrs	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	08da      	lsrs	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3208      	adds	r2, #8
 8002458:	0092      	lsls	r2, r2, #2
 800245a:	6939      	ldr	r1, [r7, #16]
 800245c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	409a      	lsls	r2, r3
 800246c:	0013      	movs	r3, r2
 800246e:	43da      	mvns	r2, r3
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2203      	movs	r2, #3
 800247c:	401a      	ands	r2, r3
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	409a      	lsls	r2, r3
 8002484:	0013      	movs	r3, r2
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	23c0      	movs	r3, #192	@ 0xc0
 8002498:	029b      	lsls	r3, r3, #10
 800249a:	4013      	ands	r3, r2
 800249c:	d100      	bne.n	80024a0 <HAL_GPIO_Init+0x17c>
 800249e:	e0a0      	b.n	80025e2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a0:	4b57      	ldr	r3, [pc, #348]	@ (8002600 <HAL_GPIO_Init+0x2dc>)
 80024a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024a4:	4b56      	ldr	r3, [pc, #344]	@ (8002600 <HAL_GPIO_Init+0x2dc>)
 80024a6:	2101      	movs	r1, #1
 80024a8:	430a      	orrs	r2, r1
 80024aa:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ac:	4a55      	ldr	r2, [pc, #340]	@ (8002604 <HAL_GPIO_Init+0x2e0>)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	089b      	lsrs	r3, r3, #2
 80024b2:	3302      	adds	r3, #2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	589b      	ldr	r3, [r3, r2]
 80024b8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2203      	movs	r2, #3
 80024be:	4013      	ands	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	220f      	movs	r2, #15
 80024c4:	409a      	lsls	r2, r3
 80024c6:	0013      	movs	r3, r2
 80024c8:	43da      	mvns	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4013      	ands	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	23a0      	movs	r3, #160	@ 0xa0
 80024d4:	05db      	lsls	r3, r3, #23
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d01f      	beq.n	800251a <HAL_GPIO_Init+0x1f6>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002608 <HAL_GPIO_Init+0x2e4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d019      	beq.n	8002516 <HAL_GPIO_Init+0x1f2>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a49      	ldr	r2, [pc, #292]	@ (800260c <HAL_GPIO_Init+0x2e8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d013      	beq.n	8002512 <HAL_GPIO_Init+0x1ee>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a48      	ldr	r2, [pc, #288]	@ (8002610 <HAL_GPIO_Init+0x2ec>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00d      	beq.n	800250e <HAL_GPIO_Init+0x1ea>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a47      	ldr	r2, [pc, #284]	@ (8002614 <HAL_GPIO_Init+0x2f0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_Init+0x1e6>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a46      	ldr	r2, [pc, #280]	@ (8002618 <HAL_GPIO_Init+0x2f4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_GPIO_Init+0x1e2>
 8002502:	2305      	movs	r3, #5
 8002504:	e00a      	b.n	800251c <HAL_GPIO_Init+0x1f8>
 8002506:	2306      	movs	r3, #6
 8002508:	e008      	b.n	800251c <HAL_GPIO_Init+0x1f8>
 800250a:	2304      	movs	r3, #4
 800250c:	e006      	b.n	800251c <HAL_GPIO_Init+0x1f8>
 800250e:	2303      	movs	r3, #3
 8002510:	e004      	b.n	800251c <HAL_GPIO_Init+0x1f8>
 8002512:	2302      	movs	r3, #2
 8002514:	e002      	b.n	800251c <HAL_GPIO_Init+0x1f8>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_GPIO_Init+0x1f8>
 800251a:	2300      	movs	r3, #0
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	2103      	movs	r1, #3
 8002520:	400a      	ands	r2, r1
 8002522:	0092      	lsls	r2, r2, #2
 8002524:	4093      	lsls	r3, r2
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800252c:	4935      	ldr	r1, [pc, #212]	@ (8002604 <HAL_GPIO_Init+0x2e0>)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	3302      	adds	r3, #2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253a:	4b38      	ldr	r3, [pc, #224]	@ (800261c <HAL_GPIO_Init+0x2f8>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	43da      	mvns	r2, r3
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	2380      	movs	r3, #128	@ 0x80
 8002550:	035b      	lsls	r3, r3, #13
 8002552:	4013      	ands	r3, r2
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800255e:	4b2f      	ldr	r3, [pc, #188]	@ (800261c <HAL_GPIO_Init+0x2f8>)
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002564:	4b2d      	ldr	r3, [pc, #180]	@ (800261c <HAL_GPIO_Init+0x2f8>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	43da      	mvns	r2, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	2380      	movs	r3, #128	@ 0x80
 800257a:	039b      	lsls	r3, r3, #14
 800257c:	4013      	ands	r3, r2
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002588:	4b24      	ldr	r3, [pc, #144]	@ (800261c <HAL_GPIO_Init+0x2f8>)
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800258e:	4b23      	ldr	r3, [pc, #140]	@ (800261c <HAL_GPIO_Init+0x2f8>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	43da      	mvns	r2, r3
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	2380      	movs	r3, #128	@ 0x80
 80025a4:	029b      	lsls	r3, r3, #10
 80025a6:	4013      	ands	r3, r2
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025b2:	4b1a      	ldr	r3, [pc, #104]	@ (800261c <HAL_GPIO_Init+0x2f8>)
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025b8:	4b18      	ldr	r3, [pc, #96]	@ (800261c <HAL_GPIO_Init+0x2f8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	43da      	mvns	r2, r3
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	4013      	ands	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685a      	ldr	r2, [r3, #4]
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	025b      	lsls	r3, r3, #9
 80025d0:	4013      	ands	r3, r2
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4313      	orrs	r3, r2
 80025da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	@ (800261c <HAL_GPIO_Init+0x2f8>)
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3301      	adds	r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	40da      	lsrs	r2, r3
 80025f0:	1e13      	subs	r3, r2, #0
 80025f2:	d000      	beq.n	80025f6 <HAL_GPIO_Init+0x2d2>
 80025f4:	e6a2      	b.n	800233c <HAL_GPIO_Init+0x18>
  }
}
 80025f6:	46c0      	nop			@ (mov r8, r8)
 80025f8:	46c0      	nop			@ (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b006      	add	sp, #24
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	40010000 	.word	0x40010000
 8002608:	50000400 	.word	0x50000400
 800260c:	50000800 	.word	0x50000800
 8002610:	50000c00 	.word	0x50000c00
 8002614:	50001000 	.word	0x50001000
 8002618:	50001c00 	.word	0x50001c00
 800261c:	40010400 	.word	0x40010400

08002620 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	0008      	movs	r0, r1
 800262a:	0011      	movs	r1, r2
 800262c:	1cbb      	adds	r3, r7, #2
 800262e:	1c02      	adds	r2, r0, #0
 8002630:	801a      	strh	r2, [r3, #0]
 8002632:	1c7b      	adds	r3, r7, #1
 8002634:	1c0a      	adds	r2, r1, #0
 8002636:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002638:	1c7b      	adds	r3, r7, #1
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d004      	beq.n	800264a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002640:	1cbb      	adds	r3, r7, #2
 8002642:	881a      	ldrh	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002648:	e003      	b.n	8002652 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800264a:	1cbb      	adds	r3, r7, #2
 800264c:	881a      	ldrh	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002652:	46c0      	nop			@ (mov r8, r8)
 8002654:	46bd      	mov	sp, r7
 8002656:	b002      	add	sp, #8
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e08f      	b.n	800278e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2241      	movs	r2, #65	@ 0x41
 8002672:	5c9b      	ldrb	r3, [r3, r2]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d107      	bne.n	800268a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2240      	movs	r2, #64	@ 0x40
 800267e:	2100      	movs	r1, #0
 8002680:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	0018      	movs	r0, r3
 8002686:	f7fd ffd1 	bl	800062c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2241      	movs	r2, #65	@ 0x41
 800268e:	2124      	movs	r1, #36	@ 0x24
 8002690:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	438a      	bics	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	493b      	ldr	r1, [pc, #236]	@ (8002798 <HAL_I2C_Init+0x13c>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	689a      	ldr	r2, [r3, #8]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4938      	ldr	r1, [pc, #224]	@ (800279c <HAL_I2C_Init+0x140>)
 80026bc:	400a      	ands	r2, r1
 80026be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d108      	bne.n	80026da <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2180      	movs	r1, #128	@ 0x80
 80026d2:	0209      	lsls	r1, r1, #8
 80026d4:	430a      	orrs	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	e007      	b.n	80026ea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2184      	movs	r1, #132	@ 0x84
 80026e4:	0209      	lsls	r1, r1, #8
 80026e6:	430a      	orrs	r2, r1
 80026e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d109      	bne.n	8002706 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685a      	ldr	r2, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2180      	movs	r1, #128	@ 0x80
 80026fe:	0109      	lsls	r1, r1, #4
 8002700:	430a      	orrs	r2, r1
 8002702:	605a      	str	r2, [r3, #4]
 8002704:	e007      	b.n	8002716 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4923      	ldr	r1, [pc, #140]	@ (80027a0 <HAL_I2C_Init+0x144>)
 8002712:	400a      	ands	r2, r1
 8002714:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4920      	ldr	r1, [pc, #128]	@ (80027a4 <HAL_I2C_Init+0x148>)
 8002722:	430a      	orrs	r2, r1
 8002724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	491a      	ldr	r1, [pc, #104]	@ (800279c <HAL_I2C_Init+0x140>)
 8002732:	400a      	ands	r2, r1
 8002734:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	431a      	orrs	r2, r3
 8002740:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69d9      	ldr	r1, [r3, #28]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1a      	ldr	r2, [r3, #32]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2101      	movs	r1, #1
 800276c:	430a      	orrs	r2, r1
 800276e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2241      	movs	r2, #65	@ 0x41
 800277a:	2120      	movs	r1, #32
 800277c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2242      	movs	r2, #66	@ 0x42
 8002788:	2100      	movs	r1, #0
 800278a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	0018      	movs	r0, r3
 8002790:	46bd      	mov	sp, r7
 8002792:	b002      	add	sp, #8
 8002794:	bd80      	pop	{r7, pc}
 8002796:	46c0      	nop			@ (mov r8, r8)
 8002798:	f0ffffff 	.word	0xf0ffffff
 800279c:	ffff7fff 	.word	0xffff7fff
 80027a0:	fffff7ff 	.word	0xfffff7ff
 80027a4:	02008000 	.word	0x02008000

080027a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2241      	movs	r2, #65	@ 0x41
 80027b6:	5c9b      	ldrb	r3, [r3, r2]
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d138      	bne.n	8002830 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2240      	movs	r2, #64	@ 0x40
 80027c2:	5c9b      	ldrb	r3, [r3, r2]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e032      	b.n	8002832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2240      	movs	r2, #64	@ 0x40
 80027d0:	2101      	movs	r1, #1
 80027d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2241      	movs	r2, #65	@ 0x41
 80027d8:	2124      	movs	r1, #36	@ 0x24
 80027da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2101      	movs	r1, #1
 80027e8:	438a      	bics	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4911      	ldr	r1, [pc, #68]	@ (800283c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80027f8:	400a      	ands	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6819      	ldr	r1, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2101      	movs	r1, #1
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2241      	movs	r2, #65	@ 0x41
 8002820:	2120      	movs	r1, #32
 8002822:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2240      	movs	r2, #64	@ 0x40
 8002828:	2100      	movs	r1, #0
 800282a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	e000      	b.n	8002832 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002830:	2302      	movs	r3, #2
  }
}
 8002832:	0018      	movs	r0, r3
 8002834:	46bd      	mov	sp, r7
 8002836:	b002      	add	sp, #8
 8002838:	bd80      	pop	{r7, pc}
 800283a:	46c0      	nop			@ (mov r8, r8)
 800283c:	ffffefff 	.word	0xffffefff

08002840 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2241      	movs	r2, #65	@ 0x41
 800284e:	5c9b      	ldrb	r3, [r3, r2]
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b20      	cmp	r3, #32
 8002854:	d139      	bne.n	80028ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2240      	movs	r2, #64	@ 0x40
 800285a:	5c9b      	ldrb	r3, [r3, r2]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002860:	2302      	movs	r3, #2
 8002862:	e033      	b.n	80028cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2240      	movs	r2, #64	@ 0x40
 8002868:	2101      	movs	r1, #1
 800286a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2241      	movs	r2, #65	@ 0x41
 8002870:	2124      	movs	r1, #36	@ 0x24
 8002872:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2101      	movs	r1, #1
 8002880:	438a      	bics	r2, r1
 8002882:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4a11      	ldr	r2, [pc, #68]	@ (80028d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002890:	4013      	ands	r3, r2
 8002892:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2101      	movs	r1, #1
 80028b2:	430a      	orrs	r2, r1
 80028b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2241      	movs	r2, #65	@ 0x41
 80028ba:	2120      	movs	r1, #32
 80028bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2240      	movs	r2, #64	@ 0x40
 80028c2:	2100      	movs	r1, #0
 80028c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028ca:	2302      	movs	r3, #2
  }
}
 80028cc:	0018      	movs	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	b004      	add	sp, #16
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	fffff0ff 	.word	0xfffff0ff

080028d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028d8:	b5b0      	push	{r4, r5, r7, lr}
 80028da:	b08a      	sub	sp, #40	@ 0x28
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d102      	bne.n	80028ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f000 fbbf 	bl	800306a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028ec:	4bc9      	ldr	r3, [pc, #804]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	220c      	movs	r2, #12
 80028f2:	4013      	ands	r3, r2
 80028f4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028f6:	4bc7      	ldr	r3, [pc, #796]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	2380      	movs	r3, #128	@ 0x80
 80028fc:	025b      	lsls	r3, r3, #9
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2201      	movs	r2, #1
 8002908:	4013      	ands	r3, r2
 800290a:	d100      	bne.n	800290e <HAL_RCC_OscConfig+0x36>
 800290c:	e07e      	b.n	8002a0c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	2b08      	cmp	r3, #8
 8002912:	d007      	beq.n	8002924 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	2b0c      	cmp	r3, #12
 8002918:	d112      	bne.n	8002940 <HAL_RCC_OscConfig+0x68>
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	2380      	movs	r3, #128	@ 0x80
 800291e:	025b      	lsls	r3, r3, #9
 8002920:	429a      	cmp	r2, r3
 8002922:	d10d      	bne.n	8002940 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	4bbb      	ldr	r3, [pc, #748]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2380      	movs	r3, #128	@ 0x80
 800292a:	029b      	lsls	r3, r3, #10
 800292c:	4013      	ands	r3, r2
 800292e:	d100      	bne.n	8002932 <HAL_RCC_OscConfig+0x5a>
 8002930:	e06b      	b.n	8002a0a <HAL_RCC_OscConfig+0x132>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d167      	bne.n	8002a0a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	f000 fb95 	bl	800306a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	2380      	movs	r3, #128	@ 0x80
 8002946:	025b      	lsls	r3, r3, #9
 8002948:	429a      	cmp	r2, r3
 800294a:	d107      	bne.n	800295c <HAL_RCC_OscConfig+0x84>
 800294c:	4bb1      	ldr	r3, [pc, #708]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4bb0      	ldr	r3, [pc, #704]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002952:	2180      	movs	r1, #128	@ 0x80
 8002954:	0249      	lsls	r1, r1, #9
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	e027      	b.n	80029ac <HAL_RCC_OscConfig+0xd4>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	23a0      	movs	r3, #160	@ 0xa0
 8002962:	02db      	lsls	r3, r3, #11
 8002964:	429a      	cmp	r2, r3
 8002966:	d10e      	bne.n	8002986 <HAL_RCC_OscConfig+0xae>
 8002968:	4baa      	ldr	r3, [pc, #680]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4ba9      	ldr	r3, [pc, #676]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 800296e:	2180      	movs	r1, #128	@ 0x80
 8002970:	02c9      	lsls	r1, r1, #11
 8002972:	430a      	orrs	r2, r1
 8002974:	601a      	str	r2, [r3, #0]
 8002976:	4ba7      	ldr	r3, [pc, #668]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	4ba6      	ldr	r3, [pc, #664]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 800297c:	2180      	movs	r1, #128	@ 0x80
 800297e:	0249      	lsls	r1, r1, #9
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e012      	b.n	80029ac <HAL_RCC_OscConfig+0xd4>
 8002986:	4ba3      	ldr	r3, [pc, #652]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	4ba2      	ldr	r3, [pc, #648]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 800298c:	49a2      	ldr	r1, [pc, #648]	@ (8002c18 <HAL_RCC_OscConfig+0x340>)
 800298e:	400a      	ands	r2, r1
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	4ba0      	ldr	r3, [pc, #640]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	2380      	movs	r3, #128	@ 0x80
 8002998:	025b      	lsls	r3, r3, #9
 800299a:	4013      	ands	r3, r2
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4b9c      	ldr	r3, [pc, #624]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	4b9b      	ldr	r3, [pc, #620]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 80029a6:	499d      	ldr	r1, [pc, #628]	@ (8002c1c <HAL_RCC_OscConfig+0x344>)
 80029a8:	400a      	ands	r2, r1
 80029aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d015      	beq.n	80029e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b4:	f7ff f95e 	bl	8001c74 <HAL_GetTick>
 80029b8:	0003      	movs	r3, r0
 80029ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029bc:	e009      	b.n	80029d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029be:	f7ff f959 	bl	8001c74 <HAL_GetTick>
 80029c2:	0002      	movs	r2, r0
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b64      	cmp	r3, #100	@ 0x64
 80029ca:	d902      	bls.n	80029d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	f000 fb4c 	bl	800306a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029d2:	4b90      	ldr	r3, [pc, #576]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	2380      	movs	r3, #128	@ 0x80
 80029d8:	029b      	lsls	r3, r3, #10
 80029da:	4013      	ands	r3, r2
 80029dc:	d0ef      	beq.n	80029be <HAL_RCC_OscConfig+0xe6>
 80029de:	e015      	b.n	8002a0c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e0:	f7ff f948 	bl	8001c74 <HAL_GetTick>
 80029e4:	0003      	movs	r3, r0
 80029e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ea:	f7ff f943 	bl	8001c74 <HAL_GetTick>
 80029ee:	0002      	movs	r2, r0
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b64      	cmp	r3, #100	@ 0x64
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e336      	b.n	800306a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80029fc:	4b85      	ldr	r3, [pc, #532]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	2380      	movs	r3, #128	@ 0x80
 8002a02:	029b      	lsls	r3, r3, #10
 8002a04:	4013      	ands	r3, r2
 8002a06:	d1f0      	bne.n	80029ea <HAL_RCC_OscConfig+0x112>
 8002a08:	e000      	b.n	8002a0c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2202      	movs	r2, #2
 8002a12:	4013      	ands	r3, r2
 8002a14:	d100      	bne.n	8002a18 <HAL_RCC_OscConfig+0x140>
 8002a16:	e099      	b.n	8002b4c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	2220      	movs	r2, #32
 8002a22:	4013      	ands	r3, r2
 8002a24:	d009      	beq.n	8002a3a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002a26:	4b7b      	ldr	r3, [pc, #492]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002a2c:	2120      	movs	r1, #32
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	2220      	movs	r2, #32
 8002a36:	4393      	bics	r3, r2
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d005      	beq.n	8002a4c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	2b0c      	cmp	r3, #12
 8002a44:	d13e      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x1ec>
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d13b      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002a4c:	4b71      	ldr	r3, [pc, #452]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2204      	movs	r2, #4
 8002a52:	4013      	ands	r3, r2
 8002a54:	d004      	beq.n	8002a60 <HAL_RCC_OscConfig+0x188>
 8002a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e304      	b.n	800306a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a60:	4b6c      	ldr	r3, [pc, #432]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	4a6e      	ldr	r2, [pc, #440]	@ (8002c20 <HAL_RCC_OscConfig+0x348>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	0019      	movs	r1, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	021a      	lsls	r2, r3, #8
 8002a70:	4b68      	ldr	r3, [pc, #416]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002a72:	430a      	orrs	r2, r1
 8002a74:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002a76:	4b67      	ldr	r3, [pc, #412]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2209      	movs	r2, #9
 8002a7c:	4393      	bics	r3, r2
 8002a7e:	0019      	movs	r1, r3
 8002a80:	4b64      	ldr	r3, [pc, #400]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a84:	430a      	orrs	r2, r1
 8002a86:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a88:	f000 fc42 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 8002a8c:	0001      	movs	r1, r0
 8002a8e:	4b61      	ldr	r3, [pc, #388]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	220f      	movs	r2, #15
 8002a96:	4013      	ands	r3, r2
 8002a98:	4a62      	ldr	r2, [pc, #392]	@ (8002c24 <HAL_RCC_OscConfig+0x34c>)
 8002a9a:	5cd3      	ldrb	r3, [r2, r3]
 8002a9c:	000a      	movs	r2, r1
 8002a9e:	40da      	lsrs	r2, r3
 8002aa0:	4b61      	ldr	r3, [pc, #388]	@ (8002c28 <HAL_RCC_OscConfig+0x350>)
 8002aa2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002aa4:	4b61      	ldr	r3, [pc, #388]	@ (8002c2c <HAL_RCC_OscConfig+0x354>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2513      	movs	r5, #19
 8002aaa:	197c      	adds	r4, r7, r5
 8002aac:	0018      	movs	r0, r3
 8002aae:	f7ff f89b 	bl	8001be8 <HAL_InitTick>
 8002ab2:	0003      	movs	r3, r0
 8002ab4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002ab6:	197b      	adds	r3, r7, r5
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d046      	beq.n	8002b4c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002abe:	197b      	adds	r3, r7, r5
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	e2d2      	b.n	800306a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d027      	beq.n	8002b1a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002aca:	4b52      	ldr	r3, [pc, #328]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2209      	movs	r2, #9
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7ff f8ca 	bl	8001c74 <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae6:	f7ff f8c5 	bl	8001c74 <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e2b8      	b.n	800306a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002af8:	4b46      	ldr	r3, [pc, #280]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2204      	movs	r2, #4
 8002afe:	4013      	ands	r3, r2
 8002b00:	d0f1      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b02:	4b44      	ldr	r3, [pc, #272]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	4a46      	ldr	r2, [pc, #280]	@ (8002c20 <HAL_RCC_OscConfig+0x348>)
 8002b08:	4013      	ands	r3, r2
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	021a      	lsls	r2, r3, #8
 8002b12:	4b40      	ldr	r3, [pc, #256]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002b14:	430a      	orrs	r2, r1
 8002b16:	605a      	str	r2, [r3, #4]
 8002b18:	e018      	b.n	8002b4c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002b20:	2101      	movs	r1, #1
 8002b22:	438a      	bics	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b26:	f7ff f8a5 	bl	8001c74 <HAL_GetTick>
 8002b2a:	0003      	movs	r3, r0
 8002b2c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b30:	f7ff f8a0 	bl	8001c74 <HAL_GetTick>
 8002b34:	0002      	movs	r2, r0
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e293      	b.n	800306a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b42:	4b34      	ldr	r3, [pc, #208]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2204      	movs	r2, #4
 8002b48:	4013      	ands	r3, r2
 8002b4a:	d1f1      	bne.n	8002b30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2210      	movs	r2, #16
 8002b52:	4013      	ands	r3, r2
 8002b54:	d100      	bne.n	8002b58 <HAL_RCC_OscConfig+0x280>
 8002b56:	e0a2      	b.n	8002c9e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d140      	bne.n	8002be0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	2380      	movs	r3, #128	@ 0x80
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4013      	ands	r3, r2
 8002b68:	d005      	beq.n	8002b76 <HAL_RCC_OscConfig+0x29e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e279      	b.n	800306a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b76:	4b27      	ldr	r3, [pc, #156]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c30 <HAL_RCC_OscConfig+0x358>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	0019      	movs	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b84:	4b23      	ldr	r3, [pc, #140]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002b86:	430a      	orrs	r2, r1
 8002b88:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b8a:	4b22      	ldr	r3, [pc, #136]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	0a19      	lsrs	r1, r3, #8
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	061a      	lsls	r2, r3, #24
 8002b98:	4b1e      	ldr	r3, [pc, #120]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba2:	0b5b      	lsrs	r3, r3, #13
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	2280      	movs	r2, #128	@ 0x80
 8002ba8:	0212      	lsls	r2, r2, #8
 8002baa:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002bac:	4b19      	ldr	r3, [pc, #100]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	210f      	movs	r1, #15
 8002bb4:	400b      	ands	r3, r1
 8002bb6:	491b      	ldr	r1, [pc, #108]	@ (8002c24 <HAL_RCC_OscConfig+0x34c>)
 8002bb8:	5ccb      	ldrb	r3, [r1, r3]
 8002bba:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002c28 <HAL_RCC_OscConfig+0x350>)
 8002bbe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c2c <HAL_RCC_OscConfig+0x354>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2513      	movs	r5, #19
 8002bc6:	197c      	adds	r4, r7, r5
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff f80d 	bl	8001be8 <HAL_InitTick>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002bd2:	197b      	adds	r3, r7, r5
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d061      	beq.n	8002c9e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002bda:	197b      	adds	r3, r7, r5
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	e244      	b.n	800306a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d040      	beq.n	8002c6a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002be8:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b09      	ldr	r3, [pc, #36]	@ (8002c14 <HAL_RCC_OscConfig+0x33c>)
 8002bee:	2180      	movs	r1, #128	@ 0x80
 8002bf0:	0049      	lsls	r1, r1, #1
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf6:	f7ff f83d 	bl	8001c74 <HAL_GetTick>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bfe:	e019      	b.n	8002c34 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c00:	f7ff f838 	bl	8001c74 <HAL_GetTick>
 8002c04:	0002      	movs	r2, r0
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d912      	bls.n	8002c34 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e22b      	b.n	800306a <HAL_RCC_OscConfig+0x792>
 8002c12:	46c0      	nop			@ (mov r8, r8)
 8002c14:	40021000 	.word	0x40021000
 8002c18:	fffeffff 	.word	0xfffeffff
 8002c1c:	fffbffff 	.word	0xfffbffff
 8002c20:	ffffe0ff 	.word	0xffffe0ff
 8002c24:	08007bac 	.word	0x08007bac
 8002c28:	20000000 	.word	0x20000000
 8002c2c:	20000004 	.word	0x20000004
 8002c30:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c34:	4bca      	ldr	r3, [pc, #808]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2380      	movs	r3, #128	@ 0x80
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d0df      	beq.n	8002c00 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c40:	4bc7      	ldr	r3, [pc, #796]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4ac7      	ldr	r2, [pc, #796]	@ (8002f64 <HAL_RCC_OscConfig+0x68c>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	0019      	movs	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c4e:	4bc4      	ldr	r3, [pc, #784]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c54:	4bc2      	ldr	r3, [pc, #776]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	021b      	lsls	r3, r3, #8
 8002c5a:	0a19      	lsrs	r1, r3, #8
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	061a      	lsls	r2, r3, #24
 8002c62:	4bbf      	ldr	r3, [pc, #764]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002c64:	430a      	orrs	r2, r1
 8002c66:	605a      	str	r2, [r3, #4]
 8002c68:	e019      	b.n	8002c9e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c6a:	4bbd      	ldr	r3, [pc, #756]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4bbc      	ldr	r3, [pc, #752]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002c70:	49bd      	ldr	r1, [pc, #756]	@ (8002f68 <HAL_RCC_OscConfig+0x690>)
 8002c72:	400a      	ands	r2, r1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c76:	f7fe fffd 	bl	8001c74 <HAL_GetTick>
 8002c7a:	0003      	movs	r3, r0
 8002c7c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c80:	f7fe fff8 	bl	8001c74 <HAL_GetTick>
 8002c84:	0002      	movs	r2, r0
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1eb      	b.n	800306a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002c92:	4bb3      	ldr	r3, [pc, #716]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	2380      	movs	r3, #128	@ 0x80
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2208      	movs	r2, #8
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d036      	beq.n	8002d16 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d019      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cb0:	4bab      	ldr	r3, [pc, #684]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002cb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cb4:	4baa      	ldr	r3, [pc, #680]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cbc:	f7fe ffda 	bl	8001c74 <HAL_GetTick>
 8002cc0:	0003      	movs	r3, r0
 8002cc2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cc6:	f7fe ffd5 	bl	8001c74 <HAL_GetTick>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e1c8      	b.n	800306a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002cd8:	4ba1      	ldr	r3, [pc, #644]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cdc:	2202      	movs	r2, #2
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d0f1      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x3ee>
 8002ce2:	e018      	b.n	8002d16 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ce4:	4b9e      	ldr	r3, [pc, #632]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002ce6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002ce8:	4b9d      	ldr	r3, [pc, #628]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002cea:	2101      	movs	r1, #1
 8002cec:	438a      	bics	r2, r1
 8002cee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf0:	f7fe ffc0 	bl	8001c74 <HAL_GetTick>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002cf8:	e008      	b.n	8002d0c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cfa:	f7fe ffbb 	bl	8001c74 <HAL_GetTick>
 8002cfe:	0002      	movs	r2, r0
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d901      	bls.n	8002d0c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002d08:	2303      	movs	r3, #3
 8002d0a:	e1ae      	b.n	800306a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d0c:	4b94      	ldr	r3, [pc, #592]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d10:	2202      	movs	r2, #2
 8002d12:	4013      	ands	r3, r2
 8002d14:	d1f1      	bne.n	8002cfa <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2204      	movs	r2, #4
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d100      	bne.n	8002d22 <HAL_RCC_OscConfig+0x44a>
 8002d20:	e0ae      	b.n	8002e80 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d22:	2023      	movs	r0, #35	@ 0x23
 8002d24:	183b      	adds	r3, r7, r0
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d2a:	4b8d      	ldr	r3, [pc, #564]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d2e:	2380      	movs	r3, #128	@ 0x80
 8002d30:	055b      	lsls	r3, r3, #21
 8002d32:	4013      	ands	r3, r2
 8002d34:	d109      	bne.n	8002d4a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	4b8a      	ldr	r3, [pc, #552]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002d38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d3a:	4b89      	ldr	r3, [pc, #548]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002d3c:	2180      	movs	r1, #128	@ 0x80
 8002d3e:	0549      	lsls	r1, r1, #21
 8002d40:	430a      	orrs	r2, r1
 8002d42:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002d44:	183b      	adds	r3, r7, r0
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d4a:	4b88      	ldr	r3, [pc, #544]	@ (8002f6c <HAL_RCC_OscConfig+0x694>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	2380      	movs	r3, #128	@ 0x80
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	4013      	ands	r3, r2
 8002d54:	d11a      	bne.n	8002d8c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d56:	4b85      	ldr	r3, [pc, #532]	@ (8002f6c <HAL_RCC_OscConfig+0x694>)
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4b84      	ldr	r3, [pc, #528]	@ (8002f6c <HAL_RCC_OscConfig+0x694>)
 8002d5c:	2180      	movs	r1, #128	@ 0x80
 8002d5e:	0049      	lsls	r1, r1, #1
 8002d60:	430a      	orrs	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d64:	f7fe ff86 	bl	8001c74 <HAL_GetTick>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6e:	f7fe ff81 	bl	8001c74 <HAL_GetTick>
 8002d72:	0002      	movs	r2, r0
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b64      	cmp	r3, #100	@ 0x64
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e174      	b.n	800306a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d80:	4b7a      	ldr	r3, [pc, #488]	@ (8002f6c <HAL_RCC_OscConfig+0x694>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	4013      	ands	r3, r2
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d107      	bne.n	8002da8 <HAL_RCC_OscConfig+0x4d0>
 8002d98:	4b71      	ldr	r3, [pc, #452]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002d9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002d9c:	4b70      	ldr	r3, [pc, #448]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002d9e:	2180      	movs	r1, #128	@ 0x80
 8002da0:	0049      	lsls	r1, r1, #1
 8002da2:	430a      	orrs	r2, r1
 8002da4:	651a      	str	r2, [r3, #80]	@ 0x50
 8002da6:	e031      	b.n	8002e0c <HAL_RCC_OscConfig+0x534>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d10c      	bne.n	8002dca <HAL_RCC_OscConfig+0x4f2>
 8002db0:	4b6b      	ldr	r3, [pc, #428]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002db2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002db4:	4b6a      	ldr	r3, [pc, #424]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002db6:	496c      	ldr	r1, [pc, #432]	@ (8002f68 <HAL_RCC_OscConfig+0x690>)
 8002db8:	400a      	ands	r2, r1
 8002dba:	651a      	str	r2, [r3, #80]	@ 0x50
 8002dbc:	4b68      	ldr	r3, [pc, #416]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002dbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002dc0:	4b67      	ldr	r3, [pc, #412]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002dc2:	496b      	ldr	r1, [pc, #428]	@ (8002f70 <HAL_RCC_OscConfig+0x698>)
 8002dc4:	400a      	ands	r2, r1
 8002dc6:	651a      	str	r2, [r3, #80]	@ 0x50
 8002dc8:	e020      	b.n	8002e0c <HAL_RCC_OscConfig+0x534>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	23a0      	movs	r3, #160	@ 0xa0
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d10e      	bne.n	8002df4 <HAL_RCC_OscConfig+0x51c>
 8002dd6:	4b62      	ldr	r3, [pc, #392]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002dd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002dda:	4b61      	ldr	r3, [pc, #388]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002ddc:	2180      	movs	r1, #128	@ 0x80
 8002dde:	00c9      	lsls	r1, r1, #3
 8002de0:	430a      	orrs	r2, r1
 8002de2:	651a      	str	r2, [r3, #80]	@ 0x50
 8002de4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002de6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002de8:	4b5d      	ldr	r3, [pc, #372]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002dea:	2180      	movs	r1, #128	@ 0x80
 8002dec:	0049      	lsls	r1, r1, #1
 8002dee:	430a      	orrs	r2, r1
 8002df0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0x534>
 8002df4:	4b5a      	ldr	r3, [pc, #360]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002df6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002df8:	4b59      	ldr	r3, [pc, #356]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002dfa:	495b      	ldr	r1, [pc, #364]	@ (8002f68 <HAL_RCC_OscConfig+0x690>)
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	651a      	str	r2, [r3, #80]	@ 0x50
 8002e00:	4b57      	ldr	r3, [pc, #348]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002e02:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e04:	4b56      	ldr	r3, [pc, #344]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002e06:	495a      	ldr	r1, [pc, #360]	@ (8002f70 <HAL_RCC_OscConfig+0x698>)
 8002e08:	400a      	ands	r2, r1
 8002e0a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d015      	beq.n	8002e40 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e14:	f7fe ff2e 	bl	8001c74 <HAL_GetTick>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e1c:	e009      	b.n	8002e32 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe ff29 	bl	8001c74 <HAL_GetTick>
 8002e22:	0002      	movs	r2, r0
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	4a52      	ldr	r2, [pc, #328]	@ (8002f74 <HAL_RCC_OscConfig+0x69c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e11b      	b.n	800306a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e32:	4b4b      	ldr	r3, [pc, #300]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002e34:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e36:	2380      	movs	r3, #128	@ 0x80
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d0ef      	beq.n	8002e1e <HAL_RCC_OscConfig+0x546>
 8002e3e:	e014      	b.n	8002e6a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e40:	f7fe ff18 	bl	8001c74 <HAL_GetTick>
 8002e44:	0003      	movs	r3, r0
 8002e46:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e48:	e009      	b.n	8002e5e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fe ff13 	bl	8001c74 <HAL_GetTick>
 8002e4e:	0002      	movs	r2, r0
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	4a47      	ldr	r2, [pc, #284]	@ (8002f74 <HAL_RCC_OscConfig+0x69c>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e105      	b.n	800306a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e5e:	4b40      	ldr	r3, [pc, #256]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002e60:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e62:	2380      	movs	r3, #128	@ 0x80
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	4013      	ands	r3, r2
 8002e68:	d1ef      	bne.n	8002e4a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e6a:	2323      	movs	r3, #35	@ 0x23
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d105      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e74:	4b3a      	ldr	r3, [pc, #232]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002e76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e78:	4b39      	ldr	r3, [pc, #228]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002e7a:	493f      	ldr	r1, [pc, #252]	@ (8002f78 <HAL_RCC_OscConfig+0x6a0>)
 8002e7c:	400a      	ands	r2, r1
 8002e7e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2220      	movs	r2, #32
 8002e86:	4013      	ands	r3, r2
 8002e88:	d049      	beq.n	8002f1e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d026      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002e92:	4b33      	ldr	r3, [pc, #204]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	4b32      	ldr	r3, [pc, #200]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002e98:	2101      	movs	r1, #1
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	609a      	str	r2, [r3, #8]
 8002e9e:	4b30      	ldr	r3, [pc, #192]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002eaa:	4b34      	ldr	r3, [pc, #208]	@ (8002f7c <HAL_RCC_OscConfig+0x6a4>)
 8002eac:	6a1a      	ldr	r2, [r3, #32]
 8002eae:	4b33      	ldr	r3, [pc, #204]	@ (8002f7c <HAL_RCC_OscConfig+0x6a4>)
 8002eb0:	2180      	movs	r1, #128	@ 0x80
 8002eb2:	0189      	lsls	r1, r1, #6
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fe fedc 	bl	8001c74 <HAL_GetTick>
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ec0:	e008      	b.n	8002ed4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ec2:	f7fe fed7 	bl	8001c74 <HAL_GetTick>
 8002ec6:	0002      	movs	r2, r0
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d901      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0ca      	b.n	800306a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ed4:	4b22      	ldr	r3, [pc, #136]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	4013      	ands	r3, r2
 8002edc:	d0f1      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x5ea>
 8002ede:	e01e      	b.n	8002f1e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	438a      	bics	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]
 8002eec:	4b23      	ldr	r3, [pc, #140]	@ (8002f7c <HAL_RCC_OscConfig+0x6a4>)
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	4b22      	ldr	r3, [pc, #136]	@ (8002f7c <HAL_RCC_OscConfig+0x6a4>)
 8002ef2:	4923      	ldr	r1, [pc, #140]	@ (8002f80 <HAL_RCC_OscConfig+0x6a8>)
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fe febc 	bl	8001c74 <HAL_GetTick>
 8002efc:	0003      	movs	r3, r0
 8002efe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f02:	f7fe feb7 	bl	8001c74 <HAL_GetTick>
 8002f06:	0002      	movs	r2, r0
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0aa      	b.n	800306a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f14:	4b12      	ldr	r3, [pc, #72]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2202      	movs	r2, #2
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d1f1      	bne.n	8002f02 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d100      	bne.n	8002f28 <HAL_RCC_OscConfig+0x650>
 8002f26:	e09f      	b.n	8003068 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d100      	bne.n	8002f30 <HAL_RCC_OscConfig+0x658>
 8002f2e:	e078      	b.n	8003022 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d159      	bne.n	8002fec <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f38:	4b09      	ldr	r3, [pc, #36]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b08      	ldr	r3, [pc, #32]	@ (8002f60 <HAL_RCC_OscConfig+0x688>)
 8002f3e:	4911      	ldr	r1, [pc, #68]	@ (8002f84 <HAL_RCC_OscConfig+0x6ac>)
 8002f40:	400a      	ands	r2, r1
 8002f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f44:	f7fe fe96 	bl	8001c74 <HAL_GetTick>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f4c:	e01c      	b.n	8002f88 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4e:	f7fe fe91 	bl	8001c74 <HAL_GetTick>
 8002f52:	0002      	movs	r2, r0
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d915      	bls.n	8002f88 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e084      	b.n	800306a <HAL_RCC_OscConfig+0x792>
 8002f60:	40021000 	.word	0x40021000
 8002f64:	ffff1fff 	.word	0xffff1fff
 8002f68:	fffffeff 	.word	0xfffffeff
 8002f6c:	40007000 	.word	0x40007000
 8002f70:	fffffbff 	.word	0xfffffbff
 8002f74:	00001388 	.word	0x00001388
 8002f78:	efffffff 	.word	0xefffffff
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	ffffdfff 	.word	0xffffdfff
 8002f84:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002f88:	4b3a      	ldr	r3, [pc, #232]	@ (8003074 <HAL_RCC_OscConfig+0x79c>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2380      	movs	r3, #128	@ 0x80
 8002f8e:	049b      	lsls	r3, r3, #18
 8002f90:	4013      	ands	r3, r2
 8002f92:	d1dc      	bne.n	8002f4e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f94:	4b37      	ldr	r3, [pc, #220]	@ (8003074 <HAL_RCC_OscConfig+0x79c>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4a37      	ldr	r2, [pc, #220]	@ (8003078 <HAL_RCC_OscConfig+0x7a0>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fac:	431a      	orrs	r2, r3
 8002fae:	4b31      	ldr	r3, [pc, #196]	@ (8003074 <HAL_RCC_OscConfig+0x79c>)
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fb4:	4b2f      	ldr	r3, [pc, #188]	@ (8003074 <HAL_RCC_OscConfig+0x79c>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8003074 <HAL_RCC_OscConfig+0x79c>)
 8002fba:	2180      	movs	r1, #128	@ 0x80
 8002fbc:	0449      	lsls	r1, r1, #17
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fe fe57 	bl	8001c74 <HAL_GetTick>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fcc:	f7fe fe52 	bl	8001c74 <HAL_GetTick>
 8002fd0:	0002      	movs	r2, r0
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e045      	b.n	800306a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002fde:	4b25      	ldr	r3, [pc, #148]	@ (8003074 <HAL_RCC_OscConfig+0x79c>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	2380      	movs	r3, #128	@ 0x80
 8002fe4:	049b      	lsls	r3, r3, #18
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	d0f0      	beq.n	8002fcc <HAL_RCC_OscConfig+0x6f4>
 8002fea:	e03d      	b.n	8003068 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fec:	4b21      	ldr	r3, [pc, #132]	@ (8003074 <HAL_RCC_OscConfig+0x79c>)
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	4b20      	ldr	r3, [pc, #128]	@ (8003074 <HAL_RCC_OscConfig+0x79c>)
 8002ff2:	4922      	ldr	r1, [pc, #136]	@ (800307c <HAL_RCC_OscConfig+0x7a4>)
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fe3c 	bl	8001c74 <HAL_GetTick>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003002:	f7fe fe37 	bl	8001c74 <HAL_GetTick>
 8003006:	0002      	movs	r2, r0
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e02a      	b.n	800306a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003014:	4b17      	ldr	r3, [pc, #92]	@ (8003074 <HAL_RCC_OscConfig+0x79c>)
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	2380      	movs	r3, #128	@ 0x80
 800301a:	049b      	lsls	r3, r3, #18
 800301c:	4013      	ands	r3, r2
 800301e:	d1f0      	bne.n	8003002 <HAL_RCC_OscConfig+0x72a>
 8003020:	e022      	b.n	8003068 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e01d      	b.n	800306a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800302e:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <HAL_RCC_OscConfig+0x79c>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	2380      	movs	r3, #128	@ 0x80
 8003038:	025b      	lsls	r3, r3, #9
 800303a:	401a      	ands	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003040:	429a      	cmp	r2, r3
 8003042:	d10f      	bne.n	8003064 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	23f0      	movs	r3, #240	@ 0xf0
 8003048:	039b      	lsls	r3, r3, #14
 800304a:	401a      	ands	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	23c0      	movs	r3, #192	@ 0xc0
 8003058:	041b      	lsls	r3, r3, #16
 800305a:	401a      	ands	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b00a      	add	sp, #40	@ 0x28
 8003070:	bdb0      	pop	{r4, r5, r7, pc}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	40021000 	.word	0x40021000
 8003078:	ff02ffff 	.word	0xff02ffff
 800307c:	feffffff 	.word	0xfeffffff

08003080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003080:	b5b0      	push	{r4, r5, r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e128      	b.n	80032e6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003094:	4b96      	ldr	r3, [pc, #600]	@ (80032f0 <HAL_RCC_ClockConfig+0x270>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2201      	movs	r2, #1
 800309a:	4013      	ands	r3, r2
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	429a      	cmp	r2, r3
 80030a0:	d91e      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a2:	4b93      	ldr	r3, [pc, #588]	@ (80032f0 <HAL_RCC_ClockConfig+0x270>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2201      	movs	r2, #1
 80030a8:	4393      	bics	r3, r2
 80030aa:	0019      	movs	r1, r3
 80030ac:	4b90      	ldr	r3, [pc, #576]	@ (80032f0 <HAL_RCC_ClockConfig+0x270>)
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80030b4:	f7fe fdde 	bl	8001c74 <HAL_GetTick>
 80030b8:	0003      	movs	r3, r0
 80030ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030bc:	e009      	b.n	80030d2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030be:	f7fe fdd9 	bl	8001c74 <HAL_GetTick>
 80030c2:	0002      	movs	r2, r0
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	4a8a      	ldr	r2, [pc, #552]	@ (80032f4 <HAL_RCC_ClockConfig+0x274>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e109      	b.n	80032e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d2:	4b87      	ldr	r3, [pc, #540]	@ (80032f0 <HAL_RCC_ClockConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2201      	movs	r2, #1
 80030d8:	4013      	ands	r3, r2
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d1ee      	bne.n	80030be <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2202      	movs	r2, #2
 80030e6:	4013      	ands	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ea:	4b83      	ldr	r3, [pc, #524]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	22f0      	movs	r2, #240	@ 0xf0
 80030f0:	4393      	bics	r3, r2
 80030f2:	0019      	movs	r1, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	4b7f      	ldr	r3, [pc, #508]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 80030fa:	430a      	orrs	r2, r1
 80030fc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2201      	movs	r2, #1
 8003104:	4013      	ands	r3, r2
 8003106:	d100      	bne.n	800310a <HAL_RCC_ClockConfig+0x8a>
 8003108:	e089      	b.n	800321e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d107      	bne.n	8003122 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003112:	4b79      	ldr	r3, [pc, #484]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	2380      	movs	r3, #128	@ 0x80
 8003118:	029b      	lsls	r3, r3, #10
 800311a:	4013      	ands	r3, r2
 800311c:	d120      	bne.n	8003160 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e0e1      	b.n	80032e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	2b03      	cmp	r3, #3
 8003128:	d107      	bne.n	800313a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800312a:	4b73      	ldr	r3, [pc, #460]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	2380      	movs	r3, #128	@ 0x80
 8003130:	049b      	lsls	r3, r3, #18
 8003132:	4013      	ands	r3, r2
 8003134:	d114      	bne.n	8003160 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e0d5      	b.n	80032e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d106      	bne.n	8003150 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003142:	4b6d      	ldr	r3, [pc, #436]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2204      	movs	r2, #4
 8003148:	4013      	ands	r3, r2
 800314a:	d109      	bne.n	8003160 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0ca      	b.n	80032e6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003150:	4b69      	ldr	r3, [pc, #420]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	2380      	movs	r3, #128	@ 0x80
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4013      	ands	r3, r2
 800315a:	d101      	bne.n	8003160 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0c2      	b.n	80032e6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003160:	4b65      	ldr	r3, [pc, #404]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2203      	movs	r2, #3
 8003166:	4393      	bics	r3, r2
 8003168:	0019      	movs	r1, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	4b62      	ldr	r3, [pc, #392]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 8003170:	430a      	orrs	r2, r1
 8003172:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003174:	f7fe fd7e 	bl	8001c74 <HAL_GetTick>
 8003178:	0003      	movs	r3, r0
 800317a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b02      	cmp	r3, #2
 8003182:	d111      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003184:	e009      	b.n	800319a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003186:	f7fe fd75 	bl	8001c74 <HAL_GetTick>
 800318a:	0002      	movs	r2, r0
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	4a58      	ldr	r2, [pc, #352]	@ (80032f4 <HAL_RCC_ClockConfig+0x274>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0a5      	b.n	80032e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800319a:	4b57      	ldr	r3, [pc, #348]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	220c      	movs	r2, #12
 80031a0:	4013      	ands	r3, r2
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d1ef      	bne.n	8003186 <HAL_RCC_ClockConfig+0x106>
 80031a6:	e03a      	b.n	800321e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d111      	bne.n	80031d4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031b0:	e009      	b.n	80031c6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b2:	f7fe fd5f 	bl	8001c74 <HAL_GetTick>
 80031b6:	0002      	movs	r2, r0
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	4a4d      	ldr	r2, [pc, #308]	@ (80032f4 <HAL_RCC_ClockConfig+0x274>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e08f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031c6:	4b4c      	ldr	r3, [pc, #304]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	220c      	movs	r2, #12
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b0c      	cmp	r3, #12
 80031d0:	d1ef      	bne.n	80031b2 <HAL_RCC_ClockConfig+0x132>
 80031d2:	e024      	b.n	800321e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d11b      	bne.n	8003214 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031dc:	e009      	b.n	80031f2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031de:	f7fe fd49 	bl	8001c74 <HAL_GetTick>
 80031e2:	0002      	movs	r2, r0
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	4a42      	ldr	r2, [pc, #264]	@ (80032f4 <HAL_RCC_ClockConfig+0x274>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e079      	b.n	80032e6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80031f2:	4b41      	ldr	r3, [pc, #260]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	220c      	movs	r2, #12
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d1ef      	bne.n	80031de <HAL_RCC_ClockConfig+0x15e>
 80031fe:	e00e      	b.n	800321e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003200:	f7fe fd38 	bl	8001c74 <HAL_GetTick>
 8003204:	0002      	movs	r2, r0
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	4a3a      	ldr	r2, [pc, #232]	@ (80032f4 <HAL_RCC_ClockConfig+0x274>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d901      	bls.n	8003214 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e068      	b.n	80032e6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003214:	4b38      	ldr	r3, [pc, #224]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	220c      	movs	r2, #12
 800321a:	4013      	ands	r3, r2
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800321e:	4b34      	ldr	r3, [pc, #208]	@ (80032f0 <HAL_RCC_ClockConfig+0x270>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2201      	movs	r2, #1
 8003224:	4013      	ands	r3, r2
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	429a      	cmp	r2, r3
 800322a:	d21e      	bcs.n	800326a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322c:	4b30      	ldr	r3, [pc, #192]	@ (80032f0 <HAL_RCC_ClockConfig+0x270>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2201      	movs	r2, #1
 8003232:	4393      	bics	r3, r2
 8003234:	0019      	movs	r1, r3
 8003236:	4b2e      	ldr	r3, [pc, #184]	@ (80032f0 <HAL_RCC_ClockConfig+0x270>)
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800323e:	f7fe fd19 	bl	8001c74 <HAL_GetTick>
 8003242:	0003      	movs	r3, r0
 8003244:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	e009      	b.n	800325c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003248:	f7fe fd14 	bl	8001c74 <HAL_GetTick>
 800324c:	0002      	movs	r2, r0
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	4a28      	ldr	r2, [pc, #160]	@ (80032f4 <HAL_RCC_ClockConfig+0x274>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e044      	b.n	80032e6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325c:	4b24      	ldr	r3, [pc, #144]	@ (80032f0 <HAL_RCC_ClockConfig+0x270>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2201      	movs	r2, #1
 8003262:	4013      	ands	r3, r2
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d1ee      	bne.n	8003248 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2204      	movs	r2, #4
 8003270:	4013      	ands	r3, r2
 8003272:	d009      	beq.n	8003288 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003274:	4b20      	ldr	r3, [pc, #128]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	4a20      	ldr	r2, [pc, #128]	@ (80032fc <HAL_RCC_ClockConfig+0x27c>)
 800327a:	4013      	ands	r3, r2
 800327c:	0019      	movs	r1, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68da      	ldr	r2, [r3, #12]
 8003282:	4b1d      	ldr	r3, [pc, #116]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 8003284:	430a      	orrs	r2, r1
 8003286:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2208      	movs	r2, #8
 800328e:	4013      	ands	r3, r2
 8003290:	d00a      	beq.n	80032a8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003292:	4b19      	ldr	r3, [pc, #100]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	4a1a      	ldr	r2, [pc, #104]	@ (8003300 <HAL_RCC_ClockConfig+0x280>)
 8003298:	4013      	ands	r3, r2
 800329a:	0019      	movs	r1, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	00da      	lsls	r2, r3, #3
 80032a2:	4b15      	ldr	r3, [pc, #84]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 80032a4:	430a      	orrs	r2, r1
 80032a6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032a8:	f000 f832 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 80032ac:	0001      	movs	r1, r0
 80032ae:	4b12      	ldr	r3, [pc, #72]	@ (80032f8 <HAL_RCC_ClockConfig+0x278>)
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	091b      	lsrs	r3, r3, #4
 80032b4:	220f      	movs	r2, #15
 80032b6:	4013      	ands	r3, r2
 80032b8:	4a12      	ldr	r2, [pc, #72]	@ (8003304 <HAL_RCC_ClockConfig+0x284>)
 80032ba:	5cd3      	ldrb	r3, [r2, r3]
 80032bc:	000a      	movs	r2, r1
 80032be:	40da      	lsrs	r2, r3
 80032c0:	4b11      	ldr	r3, [pc, #68]	@ (8003308 <HAL_RCC_ClockConfig+0x288>)
 80032c2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80032c4:	4b11      	ldr	r3, [pc, #68]	@ (800330c <HAL_RCC_ClockConfig+0x28c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	250b      	movs	r5, #11
 80032ca:	197c      	adds	r4, r7, r5
 80032cc:	0018      	movs	r0, r3
 80032ce:	f7fe fc8b 	bl	8001be8 <HAL_InitTick>
 80032d2:	0003      	movs	r3, r0
 80032d4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80032d6:	197b      	adds	r3, r7, r5
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80032de:	197b      	adds	r3, r7, r5
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	e000      	b.n	80032e6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	0018      	movs	r0, r3
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b004      	add	sp, #16
 80032ec:	bdb0      	pop	{r4, r5, r7, pc}
 80032ee:	46c0      	nop			@ (mov r8, r8)
 80032f0:	40022000 	.word	0x40022000
 80032f4:	00001388 	.word	0x00001388
 80032f8:	40021000 	.word	0x40021000
 80032fc:	fffff8ff 	.word	0xfffff8ff
 8003300:	ffffc7ff 	.word	0xffffc7ff
 8003304:	08007bac 	.word	0x08007bac
 8003308:	20000000 	.word	0x20000000
 800330c:	20000004 	.word	0x20000004

08003310 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003316:	4b3c      	ldr	r3, [pc, #240]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	220c      	movs	r2, #12
 8003320:	4013      	ands	r3, r2
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d013      	beq.n	800334e <HAL_RCC_GetSysClockFreq+0x3e>
 8003326:	d85c      	bhi.n	80033e2 <HAL_RCC_GetSysClockFreq+0xd2>
 8003328:	2b04      	cmp	r3, #4
 800332a:	d002      	beq.n	8003332 <HAL_RCC_GetSysClockFreq+0x22>
 800332c:	2b08      	cmp	r3, #8
 800332e:	d00b      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0x38>
 8003330:	e057      	b.n	80033e2 <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003332:	4b35      	ldr	r3, [pc, #212]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2210      	movs	r2, #16
 8003338:	4013      	ands	r3, r2
 800333a:	d002      	beq.n	8003342 <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800333c:	4b33      	ldr	r3, [pc, #204]	@ (800340c <HAL_RCC_GetSysClockFreq+0xfc>)
 800333e:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003340:	e05d      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 8003342:	4b33      	ldr	r3, [pc, #204]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x100>)
 8003344:	613b      	str	r3, [r7, #16]
      break;
 8003346:	e05a      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003348:	4b32      	ldr	r3, [pc, #200]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x104>)
 800334a:	613b      	str	r3, [r7, #16]
      break;
 800334c:	e057      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	0c9b      	lsrs	r3, r3, #18
 8003352:	220f      	movs	r2, #15
 8003354:	4013      	ands	r3, r2
 8003356:	4a30      	ldr	r2, [pc, #192]	@ (8003418 <HAL_RCC_GetSysClockFreq+0x108>)
 8003358:	5cd3      	ldrb	r3, [r2, r3]
 800335a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	0d9b      	lsrs	r3, r3, #22
 8003360:	2203      	movs	r2, #3
 8003362:	4013      	ands	r3, r2
 8003364:	3301      	adds	r3, #1
 8003366:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003368:	4b27      	ldr	r3, [pc, #156]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xf8>)
 800336a:	68da      	ldr	r2, [r3, #12]
 800336c:	2380      	movs	r3, #128	@ 0x80
 800336e:	025b      	lsls	r3, r3, #9
 8003370:	4013      	ands	r3, r2
 8003372:	d00f      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	000a      	movs	r2, r1
 8003378:	0152      	lsls	r2, r2, #5
 800337a:	1a52      	subs	r2, r2, r1
 800337c:	0193      	lsls	r3, r2, #6
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	185b      	adds	r3, r3, r1
 8003384:	025b      	lsls	r3, r3, #9
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	0018      	movs	r0, r3
 800338a:	f7fc fecf 	bl	800012c <__udivsi3>
 800338e:	0003      	movs	r3, r0
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e023      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003394:	4b1c      	ldr	r3, [pc, #112]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2210      	movs	r2, #16
 800339a:	4013      	ands	r3, r2
 800339c:	d00f      	beq.n	80033be <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	000a      	movs	r2, r1
 80033a2:	0152      	lsls	r2, r2, #5
 80033a4:	1a52      	subs	r2, r2, r1
 80033a6:	0193      	lsls	r3, r2, #6
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	185b      	adds	r3, r3, r1
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	0018      	movs	r0, r3
 80033b4:	f7fc feba 	bl	800012c <__udivsi3>
 80033b8:	0003      	movs	r3, r0
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	e00e      	b.n	80033dc <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 80033be:	68b9      	ldr	r1, [r7, #8]
 80033c0:	000a      	movs	r2, r1
 80033c2:	0152      	lsls	r2, r2, #5
 80033c4:	1a52      	subs	r2, r2, r1
 80033c6:	0193      	lsls	r3, r2, #6
 80033c8:	1a9b      	subs	r3, r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	185b      	adds	r3, r3, r1
 80033ce:	029b      	lsls	r3, r3, #10
 80033d0:	6879      	ldr	r1, [r7, #4]
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7fc feaa 	bl	800012c <__udivsi3>
 80033d8:	0003      	movs	r3, r0
 80033da:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	613b      	str	r3, [r7, #16]
      break;
 80033e0:	e00d      	b.n	80033fe <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80033e2:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <HAL_RCC_GetSysClockFreq+0xf8>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	0b5b      	lsrs	r3, r3, #13
 80033e8:	2207      	movs	r2, #7
 80033ea:	4013      	ands	r3, r2
 80033ec:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	3301      	adds	r3, #1
 80033f2:	2280      	movs	r2, #128	@ 0x80
 80033f4:	0212      	lsls	r2, r2, #8
 80033f6:	409a      	lsls	r2, r3
 80033f8:	0013      	movs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
      break;
 80033fc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80033fe:	693b      	ldr	r3, [r7, #16]
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	b006      	add	sp, #24
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40021000 	.word	0x40021000
 800340c:	003d0900 	.word	0x003d0900
 8003410:	00f42400 	.word	0x00f42400
 8003414:	007a1200 	.word	0x007a1200
 8003418:	08007bc4 	.word	0x08007bc4

0800341c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003420:	4b02      	ldr	r3, [pc, #8]	@ (800342c <HAL_RCC_GetHCLKFreq+0x10>)
 8003422:	681b      	ldr	r3, [r3, #0]
}
 8003424:	0018      	movs	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	46c0      	nop			@ (mov r8, r8)
 800342c:	20000000 	.word	0x20000000

08003430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003434:	f7ff fff2 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8003438:	0001      	movs	r1, r0
 800343a:	4b06      	ldr	r3, [pc, #24]	@ (8003454 <HAL_RCC_GetPCLK1Freq+0x24>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	0a1b      	lsrs	r3, r3, #8
 8003440:	2207      	movs	r2, #7
 8003442:	4013      	ands	r3, r2
 8003444:	4a04      	ldr	r2, [pc, #16]	@ (8003458 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	40d9      	lsrs	r1, r3
 800344a:	000b      	movs	r3, r1
}
 800344c:	0018      	movs	r0, r3
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	46c0      	nop			@ (mov r8, r8)
 8003454:	40021000 	.word	0x40021000
 8003458:	08007bbc 	.word	0x08007bbc

0800345c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003460:	f7ff ffdc 	bl	800341c <HAL_RCC_GetHCLKFreq>
 8003464:	0001      	movs	r1, r0
 8003466:	4b06      	ldr	r3, [pc, #24]	@ (8003480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	0adb      	lsrs	r3, r3, #11
 800346c:	2207      	movs	r2, #7
 800346e:	4013      	ands	r3, r2
 8003470:	4a04      	ldr	r2, [pc, #16]	@ (8003484 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003472:	5cd3      	ldrb	r3, [r2, r3]
 8003474:	40d9      	lsrs	r1, r3
 8003476:	000b      	movs	r3, r1
}
 8003478:	0018      	movs	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	40021000 	.word	0x40021000
 8003484:	08007bbc 	.word	0x08007bbc

08003488 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003490:	2317      	movs	r3, #23
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2220      	movs	r2, #32
 800349e:	4013      	ands	r3, r2
 80034a0:	d106      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	2380      	movs	r3, #128	@ 0x80
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	4013      	ands	r3, r2
 80034ac:	d100      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 80034ae:	e104      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b0:	4bb9      	ldr	r3, [pc, #740]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034b4:	2380      	movs	r3, #128	@ 0x80
 80034b6:	055b      	lsls	r3, r3, #21
 80034b8:	4013      	ands	r3, r2
 80034ba:	d10a      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034bc:	4bb6      	ldr	r3, [pc, #728]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034c0:	4bb5      	ldr	r3, [pc, #724]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034c2:	2180      	movs	r1, #128	@ 0x80
 80034c4:	0549      	lsls	r1, r1, #21
 80034c6:	430a      	orrs	r2, r1
 80034c8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80034ca:	2317      	movs	r3, #23
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d2:	4bb2      	ldr	r3, [pc, #712]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	2380      	movs	r3, #128	@ 0x80
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4013      	ands	r3, r2
 80034dc:	d11a      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034de:	4baf      	ldr	r3, [pc, #700]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	4bae      	ldr	r3, [pc, #696]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80034e4:	2180      	movs	r1, #128	@ 0x80
 80034e6:	0049      	lsls	r1, r1, #1
 80034e8:	430a      	orrs	r2, r1
 80034ea:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ec:	f7fe fbc2 	bl	8001c74 <HAL_GetTick>
 80034f0:	0003      	movs	r3, r0
 80034f2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f4:	e008      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f6:	f7fe fbbd 	bl	8001c74 <HAL_GetTick>
 80034fa:	0002      	movs	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b64      	cmp	r3, #100	@ 0x64
 8003502:	d901      	bls.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e143      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003508:	4ba4      	ldr	r3, [pc, #656]	@ (800379c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	2380      	movs	r3, #128	@ 0x80
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4013      	ands	r3, r2
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003514:	4ba0      	ldr	r3, [pc, #640]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	23c0      	movs	r3, #192	@ 0xc0
 800351a:	039b      	lsls	r3, r3, #14
 800351c:	4013      	ands	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	23c0      	movs	r3, #192	@ 0xc0
 8003526:	039b      	lsls	r3, r3, #14
 8003528:	4013      	ands	r3, r2
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	429a      	cmp	r2, r3
 800352e:	d107      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	23c0      	movs	r3, #192	@ 0xc0
 8003536:	039b      	lsls	r3, r3, #14
 8003538:	4013      	ands	r3, r2
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	429a      	cmp	r2, r3
 800353e:	d013      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	23c0      	movs	r3, #192	@ 0xc0
 8003546:	029b      	lsls	r3, r3, #10
 8003548:	401a      	ands	r2, r3
 800354a:	23c0      	movs	r3, #192	@ 0xc0
 800354c:	029b      	lsls	r3, r3, #10
 800354e:	429a      	cmp	r2, r3
 8003550:	d10a      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003552:	4b91      	ldr	r3, [pc, #580]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	2380      	movs	r3, #128	@ 0x80
 8003558:	029b      	lsls	r3, r3, #10
 800355a:	401a      	ands	r2, r3
 800355c:	2380      	movs	r3, #128	@ 0x80
 800355e:	029b      	lsls	r3, r3, #10
 8003560:	429a      	cmp	r2, r3
 8003562:	d101      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e113      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003568:	4b8b      	ldr	r3, [pc, #556]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800356a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800356c:	23c0      	movs	r3, #192	@ 0xc0
 800356e:	029b      	lsls	r3, r3, #10
 8003570:	4013      	ands	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d049      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	23c0      	movs	r3, #192	@ 0xc0
 8003580:	029b      	lsls	r3, r3, #10
 8003582:	4013      	ands	r3, r2
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	429a      	cmp	r2, r3
 8003588:	d004      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2220      	movs	r2, #32
 8003590:	4013      	ands	r3, r2
 8003592:	d10d      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	23c0      	movs	r3, #192	@ 0xc0
 800359a:	029b      	lsls	r3, r3, #10
 800359c:	4013      	ands	r3, r2
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d034      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	2380      	movs	r3, #128	@ 0x80
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	4013      	ands	r3, r2
 80035ae:	d02e      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80035b0:	4b79      	ldr	r3, [pc, #484]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b4:	4a7a      	ldr	r2, [pc, #488]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80035b6:	4013      	ands	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035ba:	4b77      	ldr	r3, [pc, #476]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035be:	4b76      	ldr	r3, [pc, #472]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035c0:	2180      	movs	r1, #128	@ 0x80
 80035c2:	0309      	lsls	r1, r1, #12
 80035c4:	430a      	orrs	r2, r1
 80035c6:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035c8:	4b73      	ldr	r3, [pc, #460]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80035cc:	4b72      	ldr	r3, [pc, #456]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035ce:	4975      	ldr	r1, [pc, #468]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 80035d0:	400a      	ands	r2, r1
 80035d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80035d4:	4b70      	ldr	r3, [pc, #448]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035d6:	68fa      	ldr	r2, [r7, #12]
 80035d8:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	2380      	movs	r3, #128	@ 0x80
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4013      	ands	r3, r2
 80035e2:	d014      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe fb46 	bl	8001c74 <HAL_GetTick>
 80035e8:	0003      	movs	r3, r0
 80035ea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80035ec:	e009      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fe fb41 	bl	8001c74 <HAL_GetTick>
 80035f2:	0002      	movs	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	4a6b      	ldr	r2, [pc, #428]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0c6      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003602:	4b65      	ldr	r3, [pc, #404]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003604:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003606:	2380      	movs	r3, #128	@ 0x80
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	4013      	ands	r3, r2
 800360c:	d0ef      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	2380      	movs	r3, #128	@ 0x80
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	4013      	ands	r3, r2
 8003618:	d01f      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689a      	ldr	r2, [r3, #8]
 800361e:	23c0      	movs	r3, #192	@ 0xc0
 8003620:	029b      	lsls	r3, r3, #10
 8003622:	401a      	ands	r2, r3
 8003624:	23c0      	movs	r3, #192	@ 0xc0
 8003626:	029b      	lsls	r3, r3, #10
 8003628:	429a      	cmp	r2, r3
 800362a:	d10c      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 800362c:	4b5a      	ldr	r3, [pc, #360]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a5e      	ldr	r2, [pc, #376]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003632:	4013      	ands	r3, r2
 8003634:	0019      	movs	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689a      	ldr	r2, [r3, #8]
 800363a:	23c0      	movs	r3, #192	@ 0xc0
 800363c:	039b      	lsls	r3, r3, #14
 800363e:	401a      	ands	r2, r3
 8003640:	4b55      	ldr	r3, [pc, #340]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003642:	430a      	orrs	r2, r1
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	4b54      	ldr	r3, [pc, #336]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003648:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	23c0      	movs	r3, #192	@ 0xc0
 8003650:	029b      	lsls	r3, r3, #10
 8003652:	401a      	ands	r2, r3
 8003654:	4b50      	ldr	r3, [pc, #320]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003656:	430a      	orrs	r2, r1
 8003658:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2220      	movs	r2, #32
 8003660:	4013      	ands	r3, r2
 8003662:	d01f      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	23c0      	movs	r3, #192	@ 0xc0
 800366a:	029b      	lsls	r3, r3, #10
 800366c:	401a      	ands	r2, r3
 800366e:	23c0      	movs	r3, #192	@ 0xc0
 8003670:	029b      	lsls	r3, r3, #10
 8003672:	429a      	cmp	r2, r3
 8003674:	d10c      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003676:	4b48      	ldr	r3, [pc, #288]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a4c      	ldr	r2, [pc, #304]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800367c:	4013      	ands	r3, r2
 800367e:	0019      	movs	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	23c0      	movs	r3, #192	@ 0xc0
 8003686:	039b      	lsls	r3, r3, #14
 8003688:	401a      	ands	r2, r3
 800368a:	4b43      	ldr	r3, [pc, #268]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800368c:	430a      	orrs	r2, r1
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	4b41      	ldr	r3, [pc, #260]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003692:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	23c0      	movs	r3, #192	@ 0xc0
 800369a:	029b      	lsls	r3, r3, #10
 800369c:	401a      	ands	r2, r3
 800369e:	4b3e      	ldr	r3, [pc, #248]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80036a0:	430a      	orrs	r2, r1
 80036a2:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036a4:	2317      	movs	r3, #23
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d105      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ae:	4b3a      	ldr	r3, [pc, #232]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80036b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80036b2:	4b39      	ldr	r3, [pc, #228]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80036b4:	493e      	ldr	r1, [pc, #248]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 80036b6:	400a      	ands	r2, r1
 80036b8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2201      	movs	r2, #1
 80036c0:	4013      	ands	r3, r2
 80036c2:	d009      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036c4:	4b34      	ldr	r3, [pc, #208]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80036c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036c8:	2203      	movs	r2, #3
 80036ca:	4393      	bics	r3, r2
 80036cc:	0019      	movs	r1, r3
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68da      	ldr	r2, [r3, #12]
 80036d2:	4b31      	ldr	r3, [pc, #196]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80036d4:	430a      	orrs	r2, r1
 80036d6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2202      	movs	r2, #2
 80036de:	4013      	ands	r3, r2
 80036e0:	d009      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80036e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036e6:	220c      	movs	r2, #12
 80036e8:	4393      	bics	r3, r2
 80036ea:	0019      	movs	r1, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	4b29      	ldr	r3, [pc, #164]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80036f2:	430a      	orrs	r2, r1
 80036f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2204      	movs	r2, #4
 80036fc:	4013      	ands	r3, r2
 80036fe:	d009      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003700:	4b25      	ldr	r3, [pc, #148]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003704:	4a2b      	ldr	r2, [pc, #172]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003706:	4013      	ands	r3, r2
 8003708:	0019      	movs	r1, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	4b22      	ldr	r3, [pc, #136]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003710:	430a      	orrs	r2, r1
 8003712:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2208      	movs	r2, #8
 800371a:	4013      	ands	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800371e:	4b1e      	ldr	r3, [pc, #120]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003720:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003722:	4a25      	ldr	r2, [pc, #148]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003724:	4013      	ands	r3, r2
 8003726:	0019      	movs	r1, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699a      	ldr	r2, [r3, #24]
 800372c:	4b1a      	ldr	r3, [pc, #104]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800372e:	430a      	orrs	r2, r1
 8003730:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	005b      	lsls	r3, r3, #1
 800373a:	4013      	ands	r3, r2
 800373c:	d009      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800373e:	4b16      	ldr	r3, [pc, #88]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003742:	4a17      	ldr	r2, [pc, #92]	@ (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003744:	4013      	ands	r3, r2
 8003746:	0019      	movs	r1, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69da      	ldr	r2, [r3, #28]
 800374c:	4b12      	ldr	r3, [pc, #72]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800374e:	430a      	orrs	r2, r1
 8003750:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2240      	movs	r2, #64	@ 0x40
 8003758:	4013      	ands	r3, r2
 800375a:	d009      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800375c:	4b0e      	ldr	r3, [pc, #56]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800375e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003760:	4a16      	ldr	r2, [pc, #88]	@ (80037bc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003762:	4013      	ands	r3, r2
 8003764:	0019      	movs	r1, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800376a:	4b0b      	ldr	r3, [pc, #44]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800376c:	430a      	orrs	r2, r1
 800376e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2280      	movs	r2, #128	@ 0x80
 8003776:	4013      	ands	r3, r2
 8003778:	d009      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800377a:	4b07      	ldr	r3, [pc, #28]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800377c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800377e:	4a10      	ldr	r2, [pc, #64]	@ (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003780:	4013      	ands	r3, r2
 8003782:	0019      	movs	r1, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1a      	ldr	r2, [r3, #32]
 8003788:	4b03      	ldr	r3, [pc, #12]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800378a:	430a      	orrs	r2, r1
 800378c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b006      	add	sp, #24
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40021000 	.word	0x40021000
 800379c:	40007000 	.word	0x40007000
 80037a0:	fffcffff 	.word	0xfffcffff
 80037a4:	fff7ffff 	.word	0xfff7ffff
 80037a8:	00001388 	.word	0x00001388
 80037ac:	ffcfffff 	.word	0xffcfffff
 80037b0:	efffffff 	.word	0xefffffff
 80037b4:	fffff3ff 	.word	0xfffff3ff
 80037b8:	ffffcfff 	.word	0xffffcfff
 80037bc:	fbffffff 	.word	0xfbffffff
 80037c0:	fff3ffff 	.word	0xfff3ffff

080037c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e044      	b.n	8003860 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d107      	bne.n	80037ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2278      	movs	r2, #120	@ 0x78
 80037e2:	2100      	movs	r1, #0
 80037e4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	0018      	movs	r0, r3
 80037ea:	f7fd fabf 	bl	8000d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2224      	movs	r2, #36	@ 0x24
 80037f2:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2101      	movs	r1, #1
 8003800:	438a      	bics	r2, r1
 8003802:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	2b00      	cmp	r3, #0
 800380a:	d003      	beq.n	8003814 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	0018      	movs	r0, r3
 8003810:	f000 ffb4 	bl	800477c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	0018      	movs	r0, r3
 8003818:	f000 fd12 	bl	8004240 <UART_SetConfig>
 800381c:	0003      	movs	r3, r0
 800381e:	2b01      	cmp	r3, #1
 8003820:	d101      	bne.n	8003826 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e01c      	b.n	8003860 <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	490d      	ldr	r1, [pc, #52]	@ (8003868 <HAL_UART_Init+0xa4>)
 8003832:	400a      	ands	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	212a      	movs	r1, #42	@ 0x2a
 8003842:	438a      	bics	r2, r1
 8003844:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2101      	movs	r1, #1
 8003852:	430a      	orrs	r2, r1
 8003854:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	0018      	movs	r0, r3
 800385a:	f001 f843 	bl	80048e4 <UART_CheckIdleState>
 800385e:	0003      	movs	r3, r0
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b002      	add	sp, #8
 8003866:	bd80      	pop	{r7, pc}
 8003868:	ffffb7ff 	.word	0xffffb7ff

0800386c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	1dbb      	adds	r3, r7, #6
 8003878:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800387e:	2b20      	cmp	r3, #32
 8003880:	d000      	beq.n	8003884 <HAL_UART_Transmit_DMA+0x18>
 8003882:	e077      	b.n	8003974 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_UART_Transmit_DMA+0x26>
 800388a:	1dbb      	adds	r3, r7, #6
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e06f      	b.n	8003976 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	2380      	movs	r3, #128	@ 0x80
 800389c:	015b      	lsls	r3, r3, #5
 800389e:	429a      	cmp	r2, r3
 80038a0:	d109      	bne.n	80038b6 <HAL_UART_Transmit_DMA+0x4a>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d105      	bne.n	80038b6 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2201      	movs	r2, #1
 80038ae:	4013      	ands	r3, r2
 80038b0:	d001      	beq.n	80038b6 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e05f      	b.n	8003976 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1dba      	adds	r2, r7, #6
 80038c0:	2150      	movs	r1, #80	@ 0x50
 80038c2:	8812      	ldrh	r2, [r2, #0]
 80038c4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1dba      	adds	r2, r7, #6
 80038ca:	2152      	movs	r1, #82	@ 0x52
 80038cc:	8812      	ldrh	r2, [r2, #0]
 80038ce:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2284      	movs	r2, #132	@ 0x84
 80038d4:	2100      	movs	r1, #0
 80038d6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2221      	movs	r2, #33	@ 0x21
 80038dc:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d027      	beq.n	8003936 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ea:	4a25      	ldr	r2, [pc, #148]	@ (8003980 <HAL_UART_Transmit_DMA+0x114>)
 80038ec:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f2:	4a24      	ldr	r2, [pc, #144]	@ (8003984 <HAL_UART_Transmit_DMA+0x118>)
 80038f4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fa:	4a23      	ldr	r2, [pc, #140]	@ (8003988 <HAL_UART_Transmit_DMA+0x11c>)
 80038fc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003902:	2200      	movs	r2, #0
 8003904:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390e:	0019      	movs	r1, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3328      	adds	r3, #40	@ 0x28
 8003916:	001a      	movs	r2, r3
 8003918:	1dbb      	adds	r3, r7, #6
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	f7fe fb2e 	bl	8001f7c <HAL_DMA_Start_IT>
 8003920:	1e03      	subs	r3, r0, #0
 8003922:	d008      	beq.n	8003936 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2284      	movs	r2, #132	@ 0x84
 8003928:	2110      	movs	r1, #16
 800392a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2220      	movs	r2, #32
 8003930:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e01f      	b.n	8003976 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2240      	movs	r2, #64	@ 0x40
 800393c:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393e:	f3ef 8310 	mrs	r3, PRIMASK
 8003942:	613b      	str	r3, [r7, #16]
  return(result);
 8003944:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	2301      	movs	r3, #1
 800394a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f383 8810 	msr	PRIMASK, r3
}
 8003952:	46c0      	nop			@ (mov r8, r8)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2180      	movs	r1, #128	@ 0x80
 8003960:	430a      	orrs	r2, r1
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	f383 8810 	msr	PRIMASK, r3
}
 800396e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8003970:	2300      	movs	r3, #0
 8003972:	e000      	b.n	8003976 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003974:	2302      	movs	r3, #2
  }
}
 8003976:	0018      	movs	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	b008      	add	sp, #32
 800397c:	bd80      	pop	{r7, pc}
 800397e:	46c0      	nop			@ (mov r8, r8)
 8003980:	08004d65 	.word	0x08004d65
 8003984:	08004dfd 	.word	0x08004dfd
 8003988:	08005003 	.word	0x08005003

0800398c <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b08a      	sub	sp, #40	@ 0x28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003994:	f3ef 8310 	mrs	r3, PRIMASK
 8003998:	617b      	str	r3, [r7, #20]
  return(result);
 800399a:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800399c:	627b      	str	r3, [r7, #36]	@ 0x24
 800399e:	2301      	movs	r3, #1
 80039a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f383 8810 	msr	PRIMASK, r3
}
 80039a8:	46c0      	nop			@ (mov r8, r8)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	21c0      	movs	r1, #192	@ 0xc0
 80039b6:	438a      	bics	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f383 8810 	msr	PRIMASK, r3
}
 80039c4:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2280      	movs	r2, #128	@ 0x80
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b80      	cmp	r3, #128	@ 0x80
 80039d2:	d135      	bne.n	8003a40 <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d4:	f3ef 8310 	mrs	r3, PRIMASK
 80039d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80039da:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80039dc:	623b      	str	r3, [r7, #32]
 80039de:	2301      	movs	r3, #1
 80039e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f383 8810 	msr	PRIMASK, r3
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	689a      	ldr	r2, [r3, #8]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2180      	movs	r1, #128	@ 0x80
 80039f6:	438a      	bics	r2, r1
 80039f8:	609a      	str	r2, [r3, #8]
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f383 8810 	msr	PRIMASK, r3
}
 8003a04:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d018      	beq.n	8003a40 <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a12:	2200      	movs	r2, #0
 8003a14:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f7fe fb14 	bl	8002048 <HAL_DMA_Abort>
 8003a20:	1e03      	subs	r3, r0, #0
 8003a22:	d00d      	beq.n	8003a40 <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7fe fc42 	bl	80022b2 <HAL_DMA_GetError>
 8003a2e:	0003      	movs	r3, r0
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d105      	bne.n	8003a40 <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2284      	movs	r2, #132	@ 0x84
 8003a38:	2110      	movs	r1, #16
 8003a3a:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e007      	b.n	8003a50 <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2252      	movs	r2, #82	@ 0x52
 8003a44:	2100      	movs	r1, #0
 8003a46:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	0018      	movs	r0, r3
 8003a52:	46bd      	mov	sp, r7
 8003a54:	b00a      	add	sp, #40	@ 0x28
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b092      	sub	sp, #72	@ 0x48
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a60:	f3ef 8310 	mrs	r3, PRIMASK
 8003a64:	623b      	str	r3, [r7, #32]
  return(result);
 8003a66:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	f383 8810 	msr	PRIMASK, r3
}
 8003a74:	46c0      	nop			@ (mov r8, r8)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	494b      	ldr	r1, [pc, #300]	@ (8003bb0 <HAL_UART_AbortReceive+0x158>)
 8003a82:	400a      	ands	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8c:	f383 8810 	msr	PRIMASK, r3
}
 8003a90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a92:	f3ef 8310 	mrs	r3, PRIMASK
 8003a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aa2:	f383 8810 	msr	PRIMASK, r3
}
 8003aa6:	46c0      	nop			@ (mov r8, r8)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	689a      	ldr	r2, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	438a      	bics	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]
 8003ab8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003aba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003abc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003abe:	f383 8810 	msr	PRIMASK, r3
}
 8003ac2:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d118      	bne.n	8003afe <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003acc:	f3ef 8310 	mrs	r3, PRIMASK
 8003ad0:	617b      	str	r3, [r7, #20]
  return(result);
 8003ad2:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f383 8810 	msr	PRIMASK, r3
}
 8003ae0:	46c0      	nop			@ (mov r8, r8)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2110      	movs	r1, #16
 8003aee:	438a      	bics	r2, r1
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	f383 8810 	msr	PRIMASK, r3
}
 8003afc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	2240      	movs	r2, #64	@ 0x40
 8003b06:	4013      	ands	r3, r2
 8003b08:	2b40      	cmp	r3, #64	@ 0x40
 8003b0a:	d135      	bne.n	8003b78 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b10:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b12:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b16:	2301      	movs	r3, #1
 8003b18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f383 8810 	msr	PRIMASK, r3
}
 8003b20:	46c0      	nop			@ (mov r8, r8)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2140      	movs	r1, #64	@ 0x40
 8003b2e:	438a      	bics	r2, r1
 8003b30:	609a      	str	r2, [r3, #8]
 8003b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	f383 8810 	msr	PRIMASK, r3
}
 8003b3c:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d018      	beq.n	8003b78 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b52:	0018      	movs	r0, r3
 8003b54:	f7fe fa78 	bl	8002048 <HAL_DMA_Abort>
 8003b58:	1e03      	subs	r3, r0, #0
 8003b5a:	d00d      	beq.n	8003b78 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b60:	0018      	movs	r0, r3
 8003b62:	f7fe fba6 	bl	80022b2 <HAL_DMA_GetError>
 8003b66:	0003      	movs	r3, r0
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	d105      	bne.n	8003b78 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2284      	movs	r2, #132	@ 0x84
 8003b70:	2110      	movs	r1, #16
 8003b72:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e017      	b.n	8003ba8 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	225a      	movs	r2, #90	@ 0x5a
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	220f      	movs	r2, #15
 8003b86:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2108      	movs	r1, #8
 8003b94:	430a      	orrs	r2, r1
 8003b96:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2280      	movs	r2, #128	@ 0x80
 8003b9c:	2120      	movs	r1, #32
 8003b9e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	0018      	movs	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b012      	add	sp, #72	@ 0x48
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	fffffedf 	.word	0xfffffedf

08003bb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b0ab      	sub	sp, #172	@ 0xac
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	69db      	ldr	r3, [r3, #28]
 8003bc2:	22a4      	movs	r2, #164	@ 0xa4
 8003bc4:	18b9      	adds	r1, r7, r2
 8003bc6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	20a0      	movs	r0, #160	@ 0xa0
 8003bd0:	1839      	adds	r1, r7, r0
 8003bd2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	219c      	movs	r1, #156	@ 0x9c
 8003bdc:	1879      	adds	r1, r7, r1
 8003bde:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003be0:	0011      	movs	r1, r2
 8003be2:	18bb      	adds	r3, r7, r2
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a99      	ldr	r2, [pc, #612]	@ (8003e4c <HAL_UART_IRQHandler+0x298>)
 8003be8:	4013      	ands	r3, r2
 8003bea:	2298      	movs	r2, #152	@ 0x98
 8003bec:	18bc      	adds	r4, r7, r2
 8003bee:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003bf0:	18bb      	adds	r3, r7, r2
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d114      	bne.n	8003c22 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003bf8:	187b      	adds	r3, r7, r1
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2220      	movs	r2, #32
 8003bfe:	4013      	ands	r3, r2
 8003c00:	d00f      	beq.n	8003c22 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c02:	183b      	adds	r3, r7, r0
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2220      	movs	r2, #32
 8003c08:	4013      	ands	r3, r2
 8003c0a:	d00a      	beq.n	8003c22 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d100      	bne.n	8003c16 <HAL_UART_IRQHandler+0x62>
 8003c14:	e2be      	b.n	8004194 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	0010      	movs	r0, r2
 8003c1e:	4798      	blx	r3
      }
      return;
 8003c20:	e2b8      	b.n	8004194 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c22:	2398      	movs	r3, #152	@ 0x98
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d100      	bne.n	8003c2e <HAL_UART_IRQHandler+0x7a>
 8003c2c:	e114      	b.n	8003e58 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c2e:	239c      	movs	r3, #156	@ 0x9c
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2201      	movs	r2, #1
 8003c36:	4013      	ands	r3, r2
 8003c38:	d106      	bne.n	8003c48 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c3a:	23a0      	movs	r3, #160	@ 0xa0
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a83      	ldr	r2, [pc, #524]	@ (8003e50 <HAL_UART_IRQHandler+0x29c>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	d100      	bne.n	8003c48 <HAL_UART_IRQHandler+0x94>
 8003c46:	e107      	b.n	8003e58 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c48:	23a4      	movs	r3, #164	@ 0xa4
 8003c4a:	18fb      	adds	r3, r7, r3
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	4013      	ands	r3, r2
 8003c52:	d012      	beq.n	8003c7a <HAL_UART_IRQHandler+0xc6>
 8003c54:	23a0      	movs	r3, #160	@ 0xa0
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	2380      	movs	r3, #128	@ 0x80
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d00b      	beq.n	8003c7a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2201      	movs	r2, #1
 8003c68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2284      	movs	r2, #132	@ 0x84
 8003c6e:	589b      	ldr	r3, [r3, r2]
 8003c70:	2201      	movs	r2, #1
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2184      	movs	r1, #132	@ 0x84
 8003c78:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c7a:	23a4      	movs	r3, #164	@ 0xa4
 8003c7c:	18fb      	adds	r3, r7, r3
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2202      	movs	r2, #2
 8003c82:	4013      	ands	r3, r2
 8003c84:	d011      	beq.n	8003caa <HAL_UART_IRQHandler+0xf6>
 8003c86:	239c      	movs	r3, #156	@ 0x9c
 8003c88:	18fb      	adds	r3, r7, r3
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	4013      	ands	r3, r2
 8003c90:	d00b      	beq.n	8003caa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2202      	movs	r2, #2
 8003c98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2284      	movs	r2, #132	@ 0x84
 8003c9e:	589b      	ldr	r3, [r3, r2]
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2184      	movs	r1, #132	@ 0x84
 8003ca8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003caa:	23a4      	movs	r3, #164	@ 0xa4
 8003cac:	18fb      	adds	r3, r7, r3
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	2204      	movs	r2, #4
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	d011      	beq.n	8003cda <HAL_UART_IRQHandler+0x126>
 8003cb6:	239c      	movs	r3, #156	@ 0x9c
 8003cb8:	18fb      	adds	r3, r7, r3
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	d00b      	beq.n	8003cda <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2204      	movs	r2, #4
 8003cc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2284      	movs	r2, #132	@ 0x84
 8003cce:	589b      	ldr	r3, [r3, r2]
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2184      	movs	r1, #132	@ 0x84
 8003cd8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cda:	23a4      	movs	r3, #164	@ 0xa4
 8003cdc:	18fb      	adds	r3, r7, r3
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	d017      	beq.n	8003d16 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ce6:	23a0      	movs	r3, #160	@ 0xa0
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2220      	movs	r2, #32
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d105      	bne.n	8003cfe <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003cf2:	239c      	movs	r3, #156	@ 0x9c
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cfc:	d00b      	beq.n	8003d16 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2208      	movs	r2, #8
 8003d04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2284      	movs	r2, #132	@ 0x84
 8003d0a:	589b      	ldr	r3, [r3, r2]
 8003d0c:	2208      	movs	r2, #8
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2184      	movs	r1, #132	@ 0x84
 8003d14:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d16:	23a4      	movs	r3, #164	@ 0xa4
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	2380      	movs	r3, #128	@ 0x80
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	4013      	ands	r3, r2
 8003d22:	d013      	beq.n	8003d4c <HAL_UART_IRQHandler+0x198>
 8003d24:	23a0      	movs	r3, #160	@ 0xa0
 8003d26:	18fb      	adds	r3, r7, r3
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	2380      	movs	r3, #128	@ 0x80
 8003d2c:	04db      	lsls	r3, r3, #19
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d00c      	beq.n	8003d4c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2280      	movs	r2, #128	@ 0x80
 8003d38:	0112      	lsls	r2, r2, #4
 8003d3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2284      	movs	r2, #132	@ 0x84
 8003d40:	589b      	ldr	r3, [r3, r2]
 8003d42:	2220      	movs	r2, #32
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2184      	movs	r1, #132	@ 0x84
 8003d4a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2284      	movs	r2, #132	@ 0x84
 8003d50:	589b      	ldr	r3, [r3, r2]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d100      	bne.n	8003d58 <HAL_UART_IRQHandler+0x1a4>
 8003d56:	e21f      	b.n	8004198 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d58:	23a4      	movs	r3, #164	@ 0xa4
 8003d5a:	18fb      	adds	r3, r7, r3
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	4013      	ands	r3, r2
 8003d62:	d00e      	beq.n	8003d82 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d64:	23a0      	movs	r3, #160	@ 0xa0
 8003d66:	18fb      	adds	r3, r7, r3
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d008      	beq.n	8003d82 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d004      	beq.n	8003d82 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	0010      	movs	r0, r2
 8003d80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2284      	movs	r2, #132	@ 0x84
 8003d86:	589b      	ldr	r3, [r3, r2]
 8003d88:	2194      	movs	r1, #148	@ 0x94
 8003d8a:	187a      	adds	r2, r7, r1
 8003d8c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2240      	movs	r2, #64	@ 0x40
 8003d96:	4013      	ands	r3, r2
 8003d98:	2b40      	cmp	r3, #64	@ 0x40
 8003d9a:	d004      	beq.n	8003da6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d9c:	187b      	adds	r3, r7, r1
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2228      	movs	r2, #40	@ 0x28
 8003da2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003da4:	d047      	beq.n	8003e36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	0018      	movs	r0, r3
 8003daa:	f000 ff77 	bl	8004c9c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2240      	movs	r2, #64	@ 0x40
 8003db6:	4013      	ands	r3, r2
 8003db8:	2b40      	cmp	r3, #64	@ 0x40
 8003dba:	d137      	bne.n	8003e2c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003dc0:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003dc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dc4:	2090      	movs	r0, #144	@ 0x90
 8003dc6:	183a      	adds	r2, r7, r0
 8003dc8:	6013      	str	r3, [r2, #0]
 8003dca:	2301      	movs	r3, #1
 8003dcc:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dd0:	f383 8810 	msr	PRIMASK, r3
}
 8003dd4:	46c0      	nop			@ (mov r8, r8)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2140      	movs	r1, #64	@ 0x40
 8003de2:	438a      	bics	r2, r1
 8003de4:	609a      	str	r2, [r3, #8]
 8003de6:	183b      	adds	r3, r7, r0
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003dee:	f383 8810 	msr	PRIMASK, r3
}
 8003df2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d012      	beq.n	8003e22 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e00:	4a14      	ldr	r2, [pc, #80]	@ (8003e54 <HAL_UART_IRQHandler+0x2a0>)
 8003e02:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f7fe f95d 	bl	80020c8 <HAL_DMA_Abort_IT>
 8003e0e:	1e03      	subs	r3, r0, #0
 8003e10:	d01a      	beq.n	8003e48 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e1c:	0018      	movs	r0, r3
 8003e1e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e20:	e012      	b.n	8003e48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	0018      	movs	r0, r3
 8003e26:	f000 f9e5 	bl	80041f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2a:	e00d      	b.n	8003e48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	0018      	movs	r0, r3
 8003e30:	f000 f9e0 	bl	80041f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e34:	e008      	b.n	8003e48 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f000 f9db 	bl	80041f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2284      	movs	r2, #132	@ 0x84
 8003e42:	2100      	movs	r1, #0
 8003e44:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003e46:	e1a7      	b.n	8004198 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e48:	46c0      	nop			@ (mov r8, r8)
    return;
 8003e4a:	e1a5      	b.n	8004198 <HAL_UART_IRQHandler+0x5e4>
 8003e4c:	0000080f 	.word	0x0000080f
 8003e50:	04000120 	.word	0x04000120
 8003e54:	08005087 	.word	0x08005087

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d000      	beq.n	8003e62 <HAL_UART_IRQHandler+0x2ae>
 8003e60:	e159      	b.n	8004116 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e62:	23a4      	movs	r3, #164	@ 0xa4
 8003e64:	18fb      	adds	r3, r7, r3
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2210      	movs	r2, #16
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d100      	bne.n	8003e70 <HAL_UART_IRQHandler+0x2bc>
 8003e6e:	e152      	b.n	8004116 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e70:	23a0      	movs	r3, #160	@ 0xa0
 8003e72:	18fb      	adds	r3, r7, r3
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2210      	movs	r2, #16
 8003e78:	4013      	ands	r3, r2
 8003e7a:	d100      	bne.n	8003e7e <HAL_UART_IRQHandler+0x2ca>
 8003e7c:	e14b      	b.n	8004116 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2210      	movs	r2, #16
 8003e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	2240      	movs	r2, #64	@ 0x40
 8003e8e:	4013      	ands	r3, r2
 8003e90:	2b40      	cmp	r3, #64	@ 0x40
 8003e92:	d000      	beq.n	8003e96 <HAL_UART_IRQHandler+0x2e2>
 8003e94:	e0bf      	b.n	8004016 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	217e      	movs	r1, #126	@ 0x7e
 8003ea0:	187b      	adds	r3, r7, r1
 8003ea2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003ea4:	187b      	adds	r3, r7, r1
 8003ea6:	881b      	ldrh	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d100      	bne.n	8003eae <HAL_UART_IRQHandler+0x2fa>
 8003eac:	e095      	b.n	8003fda <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2258      	movs	r2, #88	@ 0x58
 8003eb2:	5a9b      	ldrh	r3, [r3, r2]
 8003eb4:	187a      	adds	r2, r7, r1
 8003eb6:	8812      	ldrh	r2, [r2, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d300      	bcc.n	8003ebe <HAL_UART_IRQHandler+0x30a>
 8003ebc:	e08d      	b.n	8003fda <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	187a      	adds	r2, r7, r1
 8003ec2:	215a      	movs	r1, #90	@ 0x5a
 8003ec4:	8812      	ldrh	r2, [r2, #0]
 8003ec6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d16f      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eda:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ede:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee6:	f383 8810 	msr	PRIMASK, r3
}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	49ad      	ldr	r1, [pc, #692]	@ (80041ac <HAL_UART_IRQHandler+0x5f8>)
 8003ef8:	400a      	ands	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003efe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f02:	f383 8810 	msr	PRIMASK, r3
}
 8003f06:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f08:	f3ef 8310 	mrs	r3, PRIMASK
 8003f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f10:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f12:	2301      	movs	r3, #1
 8003f14:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f18:	f383 8810 	msr	PRIMASK, r3
}
 8003f1c:	46c0      	nop			@ (mov r8, r8)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2101      	movs	r1, #1
 8003f2a:	438a      	bics	r2, r1
 8003f2c:	609a      	str	r2, [r3, #8]
 8003f2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f30:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f34:	f383 8810 	msr	PRIMASK, r3
}
 8003f38:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003f40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f42:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f44:	2301      	movs	r3, #1
 8003f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f4a:	f383 8810 	msr	PRIMASK, r3
}
 8003f4e:	46c0      	nop			@ (mov r8, r8)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	689a      	ldr	r2, [r3, #8]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2140      	movs	r1, #64	@ 0x40
 8003f5c:	438a      	bics	r2, r1
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f62:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f66:	f383 8810 	msr	PRIMASK, r3
}
 8003f6a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2280      	movs	r2, #128	@ 0x80
 8003f70:	2120      	movs	r1, #32
 8003f72:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f84:	2301      	movs	r3, #1
 8003f86:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f8a:	f383 8810 	msr	PRIMASK, r3
}
 8003f8e:	46c0      	nop			@ (mov r8, r8)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2110      	movs	r1, #16
 8003f9c:	438a      	bics	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003fa6:	f383 8810 	msr	PRIMASK, r3
}
 8003faa:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f7fe f849 	bl	8002048 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2202      	movs	r2, #2
 8003fba:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2258      	movs	r2, #88	@ 0x58
 8003fc0:	5a9a      	ldrh	r2, [r3, r2]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	215a      	movs	r1, #90	@ 0x5a
 8003fc6:	5a5b      	ldrh	r3, [r3, r1]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	0011      	movs	r1, r2
 8003fd2:	0018      	movs	r0, r3
 8003fd4:	f7fc fc0c 	bl	80007f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003fd8:	e0e0      	b.n	800419c <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2258      	movs	r2, #88	@ 0x58
 8003fde:	5a9b      	ldrh	r3, [r3, r2]
 8003fe0:	227e      	movs	r2, #126	@ 0x7e
 8003fe2:	18ba      	adds	r2, r7, r2
 8003fe4:	8812      	ldrh	r2, [r2, #0]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d000      	beq.n	8003fec <HAL_UART_IRQHandler+0x438>
 8003fea:	e0d7      	b.n	800419c <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d000      	beq.n	8003ffe <HAL_UART_IRQHandler+0x44a>
 8003ffc:	e0ce      	b.n	800419c <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2258      	movs	r2, #88	@ 0x58
 8004008:	5a9a      	ldrh	r2, [r3, r2]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0011      	movs	r1, r2
 800400e:	0018      	movs	r0, r3
 8004010:	f7fc fbee 	bl	80007f0 <HAL_UARTEx_RxEventCallback>
      return;
 8004014:	e0c2      	b.n	800419c <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2258      	movs	r2, #88	@ 0x58
 800401a:	5a99      	ldrh	r1, [r3, r2]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	225a      	movs	r2, #90	@ 0x5a
 8004020:	5a9b      	ldrh	r3, [r3, r2]
 8004022:	b29a      	uxth	r2, r3
 8004024:	208e      	movs	r0, #142	@ 0x8e
 8004026:	183b      	adds	r3, r7, r0
 8004028:	1a8a      	subs	r2, r1, r2
 800402a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	225a      	movs	r2, #90	@ 0x5a
 8004030:	5a9b      	ldrh	r3, [r3, r2]
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d100      	bne.n	800403a <HAL_UART_IRQHandler+0x486>
 8004038:	e0b2      	b.n	80041a0 <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 800403a:	183b      	adds	r3, r7, r0
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d100      	bne.n	8004044 <HAL_UART_IRQHandler+0x490>
 8004042:	e0ad      	b.n	80041a0 <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004044:	f3ef 8310 	mrs	r3, PRIMASK
 8004048:	60fb      	str	r3, [r7, #12]
  return(result);
 800404a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800404c:	2488      	movs	r4, #136	@ 0x88
 800404e:	193a      	adds	r2, r7, r4
 8004050:	6013      	str	r3, [r2, #0]
 8004052:	2301      	movs	r3, #1
 8004054:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f383 8810 	msr	PRIMASK, r3
}
 800405c:	46c0      	nop			@ (mov r8, r8)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4951      	ldr	r1, [pc, #324]	@ (80041b0 <HAL_UART_IRQHandler+0x5fc>)
 800406a:	400a      	ands	r2, r1
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	193b      	adds	r3, r7, r4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f383 8810 	msr	PRIMASK, r3
}
 800407a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407c:	f3ef 8310 	mrs	r3, PRIMASK
 8004080:	61bb      	str	r3, [r7, #24]
  return(result);
 8004082:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004084:	2484      	movs	r4, #132	@ 0x84
 8004086:	193a      	adds	r2, r7, r4
 8004088:	6013      	str	r3, [r2, #0]
 800408a:	2301      	movs	r3, #1
 800408c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	f383 8810 	msr	PRIMASK, r3
}
 8004094:	46c0      	nop			@ (mov r8, r8)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2101      	movs	r1, #1
 80040a2:	438a      	bics	r2, r1
 80040a4:	609a      	str	r2, [r3, #8]
 80040a6:	193b      	adds	r3, r7, r4
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	f383 8810 	msr	PRIMASK, r3
}
 80040b2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2280      	movs	r2, #128	@ 0x80
 80040b8:	2120      	movs	r1, #32
 80040ba:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c8:	f3ef 8310 	mrs	r3, PRIMASK
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d0:	2480      	movs	r4, #128	@ 0x80
 80040d2:	193a      	adds	r2, r7, r4
 80040d4:	6013      	str	r3, [r2, #0]
 80040d6:	2301      	movs	r3, #1
 80040d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040dc:	f383 8810 	msr	PRIMASK, r3
}
 80040e0:	46c0      	nop			@ (mov r8, r8)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2110      	movs	r1, #16
 80040ee:	438a      	bics	r2, r1
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	193b      	adds	r3, r7, r4
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fa:	f383 8810 	msr	PRIMASK, r3
}
 80040fe:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004106:	183b      	adds	r3, r7, r0
 8004108:	881a      	ldrh	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	0011      	movs	r1, r2
 800410e:	0018      	movs	r0, r3
 8004110:	f7fc fb6e 	bl	80007f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004114:	e044      	b.n	80041a0 <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004116:	23a4      	movs	r3, #164	@ 0xa4
 8004118:	18fb      	adds	r3, r7, r3
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	2380      	movs	r3, #128	@ 0x80
 800411e:	035b      	lsls	r3, r3, #13
 8004120:	4013      	ands	r3, r2
 8004122:	d010      	beq.n	8004146 <HAL_UART_IRQHandler+0x592>
 8004124:	239c      	movs	r3, #156	@ 0x9c
 8004126:	18fb      	adds	r3, r7, r3
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	2380      	movs	r3, #128	@ 0x80
 800412c:	03db      	lsls	r3, r3, #15
 800412e:	4013      	ands	r3, r2
 8004130:	d009      	beq.n	8004146 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2280      	movs	r2, #128	@ 0x80
 8004138:	0352      	lsls	r2, r2, #13
 800413a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	0018      	movs	r0, r3
 8004140:	f000 ffdf 	bl	8005102 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004144:	e02f      	b.n	80041a6 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004146:	23a4      	movs	r3, #164	@ 0xa4
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2280      	movs	r2, #128	@ 0x80
 800414e:	4013      	ands	r3, r2
 8004150:	d00f      	beq.n	8004172 <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004152:	23a0      	movs	r3, #160	@ 0xa0
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2280      	movs	r2, #128	@ 0x80
 800415a:	4013      	ands	r3, r2
 800415c:	d009      	beq.n	8004172 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d01e      	beq.n	80041a4 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	0010      	movs	r0, r2
 800416e:	4798      	blx	r3
    }
    return;
 8004170:	e018      	b.n	80041a4 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004172:	23a4      	movs	r3, #164	@ 0xa4
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2240      	movs	r2, #64	@ 0x40
 800417a:	4013      	ands	r3, r2
 800417c:	d013      	beq.n	80041a6 <HAL_UART_IRQHandler+0x5f2>
 800417e:	23a0      	movs	r3, #160	@ 0xa0
 8004180:	18fb      	adds	r3, r7, r3
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2240      	movs	r2, #64	@ 0x40
 8004186:	4013      	ands	r3, r2
 8004188:	d00d      	beq.n	80041a6 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	0018      	movs	r0, r3
 800418e:	f000 ff8d 	bl	80050ac <UART_EndTransmit_IT>
    return;
 8004192:	e008      	b.n	80041a6 <HAL_UART_IRQHandler+0x5f2>
      return;
 8004194:	46c0      	nop			@ (mov r8, r8)
 8004196:	e006      	b.n	80041a6 <HAL_UART_IRQHandler+0x5f2>
    return;
 8004198:	46c0      	nop			@ (mov r8, r8)
 800419a:	e004      	b.n	80041a6 <HAL_UART_IRQHandler+0x5f2>
      return;
 800419c:	46c0      	nop			@ (mov r8, r8)
 800419e:	e002      	b.n	80041a6 <HAL_UART_IRQHandler+0x5f2>
      return;
 80041a0:	46c0      	nop			@ (mov r8, r8)
 80041a2:	e000      	b.n	80041a6 <HAL_UART_IRQHandler+0x5f2>
    return;
 80041a4:	46c0      	nop			@ (mov r8, r8)
  }

}
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b02b      	add	sp, #172	@ 0xac
 80041aa:	bd90      	pop	{r4, r7, pc}
 80041ac:	fffffeff 	.word	0xfffffeff
 80041b0:	fffffedf 	.word	0xfffffedf

080041b4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041bc:	46c0      	nop			@ (mov r8, r8)
 80041be:	46bd      	mov	sp, r7
 80041c0:	b002      	add	sp, #8
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80041cc:	46c0      	nop			@ (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	b002      	add	sp, #8
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80041dc:	46c0      	nop			@ (mov r8, r8)
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80041ec:	46c0      	nop			@ (mov r8, r8)
 80041ee:	46bd      	mov	sp, r7
 80041f0:	b002      	add	sp, #8
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041fc:	46c0      	nop			@ (mov r8, r8)
 80041fe:	46bd      	mov	sp, r7
 8004200:	b002      	add	sp, #8
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004210:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2280      	movs	r2, #128	@ 0x80
 8004216:	589b      	ldr	r3, [r3, r2]
 8004218:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	4313      	orrs	r3, r2
}
 8004220:	0018      	movs	r0, r3
 8004222:	46bd      	mov	sp, r7
 8004224:	b004      	add	sp, #16
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2284      	movs	r2, #132	@ 0x84
 8004234:	589b      	ldr	r3, [r3, r2]
}
 8004236:	0018      	movs	r0, r3
 8004238:	46bd      	mov	sp, r7
 800423a:	b002      	add	sp, #8
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004240:	b5b0      	push	{r4, r5, r7, lr}
 8004242:	b08e      	sub	sp, #56	@ 0x38
 8004244:	af00      	add	r7, sp, #0
 8004246:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004248:	231a      	movs	r3, #26
 800424a:	2218      	movs	r2, #24
 800424c:	189b      	adds	r3, r3, r2
 800424e:	19db      	adds	r3, r3, r7
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	431a      	orrs	r2, r3
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	431a      	orrs	r2, r3
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	69db      	ldr	r3, [r3, #28]
 8004268:	4313      	orrs	r3, r2
 800426a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4ac3      	ldr	r2, [pc, #780]	@ (8004580 <UART_SetConfig+0x340>)
 8004274:	4013      	ands	r3, r2
 8004276:	0019      	movs	r1, r3
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800427e:	430a      	orrs	r2, r1
 8004280:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	4abe      	ldr	r2, [pc, #760]	@ (8004584 <UART_SetConfig+0x344>)
 800428a:	4013      	ands	r3, r2
 800428c:	0019      	movs	r1, r3
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4ab8      	ldr	r2, [pc, #736]	@ (8004588 <UART_SetConfig+0x348>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d004      	beq.n	80042b4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042b0:	4313      	orrs	r3, r2
 80042b2:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	4ab4      	ldr	r2, [pc, #720]	@ (800458c <UART_SetConfig+0x34c>)
 80042bc:	4013      	ands	r3, r2
 80042be:	0019      	movs	r1, r3
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80042c6:	430a      	orrs	r2, r1
 80042c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4ab0      	ldr	r2, [pc, #704]	@ (8004590 <UART_SetConfig+0x350>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d131      	bne.n	8004338 <UART_SetConfig+0xf8>
 80042d4:	4baf      	ldr	r3, [pc, #700]	@ (8004594 <UART_SetConfig+0x354>)
 80042d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042d8:	2203      	movs	r2, #3
 80042da:	4013      	ands	r3, r2
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d01d      	beq.n	800431c <UART_SetConfig+0xdc>
 80042e0:	d823      	bhi.n	800432a <UART_SetConfig+0xea>
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d00c      	beq.n	8004300 <UART_SetConfig+0xc0>
 80042e6:	d820      	bhi.n	800432a <UART_SetConfig+0xea>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <UART_SetConfig+0xb2>
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d00e      	beq.n	800430e <UART_SetConfig+0xce>
 80042f0:	e01b      	b.n	800432a <UART_SetConfig+0xea>
 80042f2:	231b      	movs	r3, #27
 80042f4:	2218      	movs	r2, #24
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	19db      	adds	r3, r3, r7
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e0b4      	b.n	800446a <UART_SetConfig+0x22a>
 8004300:	231b      	movs	r3, #27
 8004302:	2218      	movs	r2, #24
 8004304:	189b      	adds	r3, r3, r2
 8004306:	19db      	adds	r3, r3, r7
 8004308:	2202      	movs	r2, #2
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	e0ad      	b.n	800446a <UART_SetConfig+0x22a>
 800430e:	231b      	movs	r3, #27
 8004310:	2218      	movs	r2, #24
 8004312:	189b      	adds	r3, r3, r2
 8004314:	19db      	adds	r3, r3, r7
 8004316:	2204      	movs	r2, #4
 8004318:	701a      	strb	r2, [r3, #0]
 800431a:	e0a6      	b.n	800446a <UART_SetConfig+0x22a>
 800431c:	231b      	movs	r3, #27
 800431e:	2218      	movs	r2, #24
 8004320:	189b      	adds	r3, r3, r2
 8004322:	19db      	adds	r3, r3, r7
 8004324:	2208      	movs	r2, #8
 8004326:	701a      	strb	r2, [r3, #0]
 8004328:	e09f      	b.n	800446a <UART_SetConfig+0x22a>
 800432a:	231b      	movs	r3, #27
 800432c:	2218      	movs	r2, #24
 800432e:	189b      	adds	r3, r3, r2
 8004330:	19db      	adds	r3, r3, r7
 8004332:	2210      	movs	r2, #16
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	e098      	b.n	800446a <UART_SetConfig+0x22a>
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a96      	ldr	r2, [pc, #600]	@ (8004598 <UART_SetConfig+0x358>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d131      	bne.n	80043a6 <UART_SetConfig+0x166>
 8004342:	4b94      	ldr	r3, [pc, #592]	@ (8004594 <UART_SetConfig+0x354>)
 8004344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004346:	220c      	movs	r2, #12
 8004348:	4013      	ands	r3, r2
 800434a:	2b0c      	cmp	r3, #12
 800434c:	d01d      	beq.n	800438a <UART_SetConfig+0x14a>
 800434e:	d823      	bhi.n	8004398 <UART_SetConfig+0x158>
 8004350:	2b08      	cmp	r3, #8
 8004352:	d00c      	beq.n	800436e <UART_SetConfig+0x12e>
 8004354:	d820      	bhi.n	8004398 <UART_SetConfig+0x158>
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <UART_SetConfig+0x120>
 800435a:	2b04      	cmp	r3, #4
 800435c:	d00e      	beq.n	800437c <UART_SetConfig+0x13c>
 800435e:	e01b      	b.n	8004398 <UART_SetConfig+0x158>
 8004360:	231b      	movs	r3, #27
 8004362:	2218      	movs	r2, #24
 8004364:	189b      	adds	r3, r3, r2
 8004366:	19db      	adds	r3, r3, r7
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
 800436c:	e07d      	b.n	800446a <UART_SetConfig+0x22a>
 800436e:	231b      	movs	r3, #27
 8004370:	2218      	movs	r2, #24
 8004372:	189b      	adds	r3, r3, r2
 8004374:	19db      	adds	r3, r3, r7
 8004376:	2202      	movs	r2, #2
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	e076      	b.n	800446a <UART_SetConfig+0x22a>
 800437c:	231b      	movs	r3, #27
 800437e:	2218      	movs	r2, #24
 8004380:	189b      	adds	r3, r3, r2
 8004382:	19db      	adds	r3, r3, r7
 8004384:	2204      	movs	r2, #4
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	e06f      	b.n	800446a <UART_SetConfig+0x22a>
 800438a:	231b      	movs	r3, #27
 800438c:	2218      	movs	r2, #24
 800438e:	189b      	adds	r3, r3, r2
 8004390:	19db      	adds	r3, r3, r7
 8004392:	2208      	movs	r2, #8
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	e068      	b.n	800446a <UART_SetConfig+0x22a>
 8004398:	231b      	movs	r3, #27
 800439a:	2218      	movs	r2, #24
 800439c:	189b      	adds	r3, r3, r2
 800439e:	19db      	adds	r3, r3, r7
 80043a0:	2210      	movs	r2, #16
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	e061      	b.n	800446a <UART_SetConfig+0x22a>
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a7c      	ldr	r2, [pc, #496]	@ (800459c <UART_SetConfig+0x35c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d106      	bne.n	80043be <UART_SetConfig+0x17e>
 80043b0:	231b      	movs	r3, #27
 80043b2:	2218      	movs	r2, #24
 80043b4:	189b      	adds	r3, r3, r2
 80043b6:	19db      	adds	r3, r3, r7
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
 80043bc:	e055      	b.n	800446a <UART_SetConfig+0x22a>
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a77      	ldr	r2, [pc, #476]	@ (80045a0 <UART_SetConfig+0x360>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d106      	bne.n	80043d6 <UART_SetConfig+0x196>
 80043c8:	231b      	movs	r3, #27
 80043ca:	2218      	movs	r2, #24
 80043cc:	189b      	adds	r3, r3, r2
 80043ce:	19db      	adds	r3, r3, r7
 80043d0:	2200      	movs	r2, #0
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	e049      	b.n	800446a <UART_SetConfig+0x22a>
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a6b      	ldr	r2, [pc, #428]	@ (8004588 <UART_SetConfig+0x348>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d13e      	bne.n	800445e <UART_SetConfig+0x21e>
 80043e0:	4b6c      	ldr	r3, [pc, #432]	@ (8004594 <UART_SetConfig+0x354>)
 80043e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043e4:	23c0      	movs	r3, #192	@ 0xc0
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	4013      	ands	r3, r2
 80043ea:	22c0      	movs	r2, #192	@ 0xc0
 80043ec:	0112      	lsls	r2, r2, #4
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d027      	beq.n	8004442 <UART_SetConfig+0x202>
 80043f2:	22c0      	movs	r2, #192	@ 0xc0
 80043f4:	0112      	lsls	r2, r2, #4
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d82a      	bhi.n	8004450 <UART_SetConfig+0x210>
 80043fa:	2280      	movs	r2, #128	@ 0x80
 80043fc:	0112      	lsls	r2, r2, #4
 80043fe:	4293      	cmp	r3, r2
 8004400:	d011      	beq.n	8004426 <UART_SetConfig+0x1e6>
 8004402:	2280      	movs	r2, #128	@ 0x80
 8004404:	0112      	lsls	r2, r2, #4
 8004406:	4293      	cmp	r3, r2
 8004408:	d822      	bhi.n	8004450 <UART_SetConfig+0x210>
 800440a:	2b00      	cmp	r3, #0
 800440c:	d004      	beq.n	8004418 <UART_SetConfig+0x1d8>
 800440e:	2280      	movs	r2, #128	@ 0x80
 8004410:	00d2      	lsls	r2, r2, #3
 8004412:	4293      	cmp	r3, r2
 8004414:	d00e      	beq.n	8004434 <UART_SetConfig+0x1f4>
 8004416:	e01b      	b.n	8004450 <UART_SetConfig+0x210>
 8004418:	231b      	movs	r3, #27
 800441a:	2218      	movs	r2, #24
 800441c:	189b      	adds	r3, r3, r2
 800441e:	19db      	adds	r3, r3, r7
 8004420:	2200      	movs	r2, #0
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	e021      	b.n	800446a <UART_SetConfig+0x22a>
 8004426:	231b      	movs	r3, #27
 8004428:	2218      	movs	r2, #24
 800442a:	189b      	adds	r3, r3, r2
 800442c:	19db      	adds	r3, r3, r7
 800442e:	2202      	movs	r2, #2
 8004430:	701a      	strb	r2, [r3, #0]
 8004432:	e01a      	b.n	800446a <UART_SetConfig+0x22a>
 8004434:	231b      	movs	r3, #27
 8004436:	2218      	movs	r2, #24
 8004438:	189b      	adds	r3, r3, r2
 800443a:	19db      	adds	r3, r3, r7
 800443c:	2204      	movs	r2, #4
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	e013      	b.n	800446a <UART_SetConfig+0x22a>
 8004442:	231b      	movs	r3, #27
 8004444:	2218      	movs	r2, #24
 8004446:	189b      	adds	r3, r3, r2
 8004448:	19db      	adds	r3, r3, r7
 800444a:	2208      	movs	r2, #8
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e00c      	b.n	800446a <UART_SetConfig+0x22a>
 8004450:	231b      	movs	r3, #27
 8004452:	2218      	movs	r2, #24
 8004454:	189b      	adds	r3, r3, r2
 8004456:	19db      	adds	r3, r3, r7
 8004458:	2210      	movs	r2, #16
 800445a:	701a      	strb	r2, [r3, #0]
 800445c:	e005      	b.n	800446a <UART_SetConfig+0x22a>
 800445e:	231b      	movs	r3, #27
 8004460:	2218      	movs	r2, #24
 8004462:	189b      	adds	r3, r3, r2
 8004464:	19db      	adds	r3, r3, r7
 8004466:	2210      	movs	r2, #16
 8004468:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a46      	ldr	r2, [pc, #280]	@ (8004588 <UART_SetConfig+0x348>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d000      	beq.n	8004476 <UART_SetConfig+0x236>
 8004474:	e09a      	b.n	80045ac <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004476:	231b      	movs	r3, #27
 8004478:	2218      	movs	r2, #24
 800447a:	189b      	adds	r3, r3, r2
 800447c:	19db      	adds	r3, r3, r7
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d01d      	beq.n	80044c0 <UART_SetConfig+0x280>
 8004484:	dc20      	bgt.n	80044c8 <UART_SetConfig+0x288>
 8004486:	2b04      	cmp	r3, #4
 8004488:	d015      	beq.n	80044b6 <UART_SetConfig+0x276>
 800448a:	dc1d      	bgt.n	80044c8 <UART_SetConfig+0x288>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <UART_SetConfig+0x256>
 8004490:	2b02      	cmp	r3, #2
 8004492:	d005      	beq.n	80044a0 <UART_SetConfig+0x260>
 8004494:	e018      	b.n	80044c8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004496:	f7fe ffcb 	bl	8003430 <HAL_RCC_GetPCLK1Freq>
 800449a:	0003      	movs	r3, r0
 800449c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800449e:	e01c      	b.n	80044da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044a0:	4b3c      	ldr	r3, [pc, #240]	@ (8004594 <UART_SetConfig+0x354>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2210      	movs	r2, #16
 80044a6:	4013      	ands	r3, r2
 80044a8:	d002      	beq.n	80044b0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80044aa:	4b3e      	ldr	r3, [pc, #248]	@ (80045a4 <UART_SetConfig+0x364>)
 80044ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80044ae:	e014      	b.n	80044da <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80044b0:	4b3d      	ldr	r3, [pc, #244]	@ (80045a8 <UART_SetConfig+0x368>)
 80044b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80044b4:	e011      	b.n	80044da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044b6:	f7fe ff2b 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 80044ba:	0003      	movs	r3, r0
 80044bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80044be:	e00c      	b.n	80044da <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044c0:	2380      	movs	r3, #128	@ 0x80
 80044c2:	021b      	lsls	r3, r3, #8
 80044c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80044c6:	e008      	b.n	80044da <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80044cc:	231a      	movs	r3, #26
 80044ce:	2218      	movs	r2, #24
 80044d0:	189b      	adds	r3, r3, r2
 80044d2:	19db      	adds	r3, r3, r7
 80044d4:	2201      	movs	r2, #1
 80044d6:	701a      	strb	r2, [r3, #0]
        break;
 80044d8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d100      	bne.n	80044e2 <UART_SetConfig+0x2a2>
 80044e0:	e133      	b.n	800474a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	0013      	movs	r3, r2
 80044e8:	005b      	lsls	r3, r3, #1
 80044ea:	189b      	adds	r3, r3, r2
 80044ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d305      	bcc.n	80044fe <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d906      	bls.n	800450c <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80044fe:	231a      	movs	r3, #26
 8004500:	2218      	movs	r2, #24
 8004502:	189b      	adds	r3, r3, r2
 8004504:	19db      	adds	r3, r3, r7
 8004506:	2201      	movs	r2, #1
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	e11e      	b.n	800474a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800450c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	6939      	ldr	r1, [r7, #16]
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	000b      	movs	r3, r1
 800451a:	0e1b      	lsrs	r3, r3, #24
 800451c:	0010      	movs	r0, r2
 800451e:	0205      	lsls	r5, r0, #8
 8004520:	431d      	orrs	r5, r3
 8004522:	000b      	movs	r3, r1
 8004524:	021c      	lsls	r4, r3, #8
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	085b      	lsrs	r3, r3, #1
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	68b8      	ldr	r0, [r7, #8]
 8004534:	68f9      	ldr	r1, [r7, #12]
 8004536:	1900      	adds	r0, r0, r4
 8004538:	4169      	adcs	r1, r5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	2300      	movs	r3, #0
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f7fb fe7c 	bl	8000244 <__aeabi_uldivmod>
 800454c:	0002      	movs	r2, r0
 800454e:	000b      	movs	r3, r1
 8004550:	0013      	movs	r3, r2
 8004552:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004554:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004556:	23c0      	movs	r3, #192	@ 0xc0
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	429a      	cmp	r2, r3
 800455c:	d309      	bcc.n	8004572 <UART_SetConfig+0x332>
 800455e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004560:	2380      	movs	r3, #128	@ 0x80
 8004562:	035b      	lsls	r3, r3, #13
 8004564:	429a      	cmp	r2, r3
 8004566:	d204      	bcs.n	8004572 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800456e:	60da      	str	r2, [r3, #12]
 8004570:	e0eb      	b.n	800474a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004572:	231a      	movs	r3, #26
 8004574:	2218      	movs	r2, #24
 8004576:	189b      	adds	r3, r3, r2
 8004578:	19db      	adds	r3, r3, r7
 800457a:	2201      	movs	r2, #1
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	e0e4      	b.n	800474a <UART_SetConfig+0x50a>
 8004580:	efff69f3 	.word	0xefff69f3
 8004584:	ffffcfff 	.word	0xffffcfff
 8004588:	40004800 	.word	0x40004800
 800458c:	fffff4ff 	.word	0xfffff4ff
 8004590:	40013800 	.word	0x40013800
 8004594:	40021000 	.word	0x40021000
 8004598:	40004400 	.word	0x40004400
 800459c:	40004c00 	.word	0x40004c00
 80045a0:	40005000 	.word	0x40005000
 80045a4:	003d0900 	.word	0x003d0900
 80045a8:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	2380      	movs	r3, #128	@ 0x80
 80045b2:	021b      	lsls	r3, r3, #8
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d000      	beq.n	80045ba <UART_SetConfig+0x37a>
 80045b8:	e070      	b.n	800469c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80045ba:	231b      	movs	r3, #27
 80045bc:	2218      	movs	r2, #24
 80045be:	189b      	adds	r3, r3, r2
 80045c0:	19db      	adds	r3, r3, r7
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d822      	bhi.n	800460e <UART_SetConfig+0x3ce>
 80045c8:	009a      	lsls	r2, r3, #2
 80045ca:	4b67      	ldr	r3, [pc, #412]	@ (8004768 <UART_SetConfig+0x528>)
 80045cc:	18d3      	adds	r3, r2, r3
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d2:	f7fe ff2d 	bl	8003430 <HAL_RCC_GetPCLK1Freq>
 80045d6:	0003      	movs	r3, r0
 80045d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80045da:	e021      	b.n	8004620 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045dc:	f7fe ff3e 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 80045e0:	0003      	movs	r3, r0
 80045e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80045e4:	e01c      	b.n	8004620 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045e6:	4b61      	ldr	r3, [pc, #388]	@ (800476c <UART_SetConfig+0x52c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2210      	movs	r2, #16
 80045ec:	4013      	ands	r3, r2
 80045ee:	d002      	beq.n	80045f6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80045f0:	4b5f      	ldr	r3, [pc, #380]	@ (8004770 <UART_SetConfig+0x530>)
 80045f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80045f4:	e014      	b.n	8004620 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80045f6:	4b5f      	ldr	r3, [pc, #380]	@ (8004774 <UART_SetConfig+0x534>)
 80045f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80045fa:	e011      	b.n	8004620 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fc:	f7fe fe88 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 8004600:	0003      	movs	r3, r0
 8004602:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004604:	e00c      	b.n	8004620 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004606:	2380      	movs	r3, #128	@ 0x80
 8004608:	021b      	lsls	r3, r3, #8
 800460a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800460c:	e008      	b.n	8004620 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004612:	231a      	movs	r3, #26
 8004614:	2218      	movs	r2, #24
 8004616:	189b      	adds	r3, r3, r2
 8004618:	19db      	adds	r3, r3, r7
 800461a:	2201      	movs	r2, #1
 800461c:	701a      	strb	r2, [r3, #0]
        break;
 800461e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004622:	2b00      	cmp	r3, #0
 8004624:	d100      	bne.n	8004628 <UART_SetConfig+0x3e8>
 8004626:	e090      	b.n	800474a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462a:	005a      	lsls	r2, r3, #1
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	085b      	lsrs	r3, r3, #1
 8004632:	18d2      	adds	r2, r2, r3
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	0019      	movs	r1, r3
 800463a:	0010      	movs	r0, r2
 800463c:	f7fb fd76 	bl	800012c <__udivsi3>
 8004640:	0003      	movs	r3, r0
 8004642:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004646:	2b0f      	cmp	r3, #15
 8004648:	d921      	bls.n	800468e <UART_SetConfig+0x44e>
 800464a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800464c:	2380      	movs	r3, #128	@ 0x80
 800464e:	025b      	lsls	r3, r3, #9
 8004650:	429a      	cmp	r2, r3
 8004652:	d21c      	bcs.n	800468e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004656:	b29a      	uxth	r2, r3
 8004658:	200e      	movs	r0, #14
 800465a:	2418      	movs	r4, #24
 800465c:	1903      	adds	r3, r0, r4
 800465e:	19db      	adds	r3, r3, r7
 8004660:	210f      	movs	r1, #15
 8004662:	438a      	bics	r2, r1
 8004664:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	b29b      	uxth	r3, r3
 800466c:	2207      	movs	r2, #7
 800466e:	4013      	ands	r3, r2
 8004670:	b299      	uxth	r1, r3
 8004672:	1903      	adds	r3, r0, r4
 8004674:	19db      	adds	r3, r3, r7
 8004676:	1902      	adds	r2, r0, r4
 8004678:	19d2      	adds	r2, r2, r7
 800467a:	8812      	ldrh	r2, [r2, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	1902      	adds	r2, r0, r4
 8004686:	19d2      	adds	r2, r2, r7
 8004688:	8812      	ldrh	r2, [r2, #0]
 800468a:	60da      	str	r2, [r3, #12]
 800468c:	e05d      	b.n	800474a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800468e:	231a      	movs	r3, #26
 8004690:	2218      	movs	r2, #24
 8004692:	189b      	adds	r3, r3, r2
 8004694:	19db      	adds	r3, r3, r7
 8004696:	2201      	movs	r2, #1
 8004698:	701a      	strb	r2, [r3, #0]
 800469a:	e056      	b.n	800474a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800469c:	231b      	movs	r3, #27
 800469e:	2218      	movs	r2, #24
 80046a0:	189b      	adds	r3, r3, r2
 80046a2:	19db      	adds	r3, r3, r7
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d822      	bhi.n	80046f0 <UART_SetConfig+0x4b0>
 80046aa:	009a      	lsls	r2, r3, #2
 80046ac:	4b32      	ldr	r3, [pc, #200]	@ (8004778 <UART_SetConfig+0x538>)
 80046ae:	18d3      	adds	r3, r2, r3
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046b4:	f7fe febc 	bl	8003430 <HAL_RCC_GetPCLK1Freq>
 80046b8:	0003      	movs	r3, r0
 80046ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80046bc:	e021      	b.n	8004702 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046be:	f7fe fecd 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 80046c2:	0003      	movs	r3, r0
 80046c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80046c6:	e01c      	b.n	8004702 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046c8:	4b28      	ldr	r3, [pc, #160]	@ (800476c <UART_SetConfig+0x52c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2210      	movs	r2, #16
 80046ce:	4013      	ands	r3, r2
 80046d0:	d002      	beq.n	80046d8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80046d2:	4b27      	ldr	r3, [pc, #156]	@ (8004770 <UART_SetConfig+0x530>)
 80046d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80046d6:	e014      	b.n	8004702 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80046d8:	4b26      	ldr	r3, [pc, #152]	@ (8004774 <UART_SetConfig+0x534>)
 80046da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80046dc:	e011      	b.n	8004702 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046de:	f7fe fe17 	bl	8003310 <HAL_RCC_GetSysClockFreq>
 80046e2:	0003      	movs	r3, r0
 80046e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80046e6:	e00c      	b.n	8004702 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e8:	2380      	movs	r3, #128	@ 0x80
 80046ea:	021b      	lsls	r3, r3, #8
 80046ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80046ee:	e008      	b.n	8004702 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80046f4:	231a      	movs	r3, #26
 80046f6:	2218      	movs	r2, #24
 80046f8:	189b      	adds	r3, r3, r2
 80046fa:	19db      	adds	r3, r3, r7
 80046fc:	2201      	movs	r2, #1
 80046fe:	701a      	strb	r2, [r3, #0]
        break;
 8004700:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d020      	beq.n	800474a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	085a      	lsrs	r2, r3, #1
 800470e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004710:	18d2      	adds	r2, r2, r3
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	0019      	movs	r1, r3
 8004718:	0010      	movs	r0, r2
 800471a:	f7fb fd07 	bl	800012c <__udivsi3>
 800471e:	0003      	movs	r3, r0
 8004720:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004724:	2b0f      	cmp	r3, #15
 8004726:	d90a      	bls.n	800473e <UART_SetConfig+0x4fe>
 8004728:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800472a:	2380      	movs	r3, #128	@ 0x80
 800472c:	025b      	lsls	r3, r3, #9
 800472e:	429a      	cmp	r2, r3
 8004730:	d205      	bcs.n	800473e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004734:	b29a      	uxth	r2, r3
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	60da      	str	r2, [r3, #12]
 800473c:	e005      	b.n	800474a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800473e:	231a      	movs	r3, #26
 8004740:	2218      	movs	r2, #24
 8004742:	189b      	adds	r3, r3, r2
 8004744:	19db      	adds	r3, r3, r7
 8004746:	2201      	movs	r2, #1
 8004748:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2200      	movs	r2, #0
 800474e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2200      	movs	r2, #0
 8004754:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004756:	231a      	movs	r3, #26
 8004758:	2218      	movs	r2, #24
 800475a:	189b      	adds	r3, r3, r2
 800475c:	19db      	adds	r3, r3, r7
 800475e:	781b      	ldrb	r3, [r3, #0]
}
 8004760:	0018      	movs	r0, r3
 8004762:	46bd      	mov	sp, r7
 8004764:	b00e      	add	sp, #56	@ 0x38
 8004766:	bdb0      	pop	{r4, r5, r7, pc}
 8004768:	08007bd0 	.word	0x08007bd0
 800476c:	40021000 	.word	0x40021000
 8004770:	003d0900 	.word	0x003d0900
 8004774:	00f42400 	.word	0x00f42400
 8004778:	08007bf4 	.word	0x08007bf4

0800477c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004788:	2208      	movs	r2, #8
 800478a:	4013      	ands	r3, r2
 800478c:	d00b      	beq.n	80047a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	4a4a      	ldr	r2, [pc, #296]	@ (80048c0 <UART_AdvFeatureConfig+0x144>)
 8004796:	4013      	ands	r3, r2
 8004798:	0019      	movs	r1, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047aa:	2201      	movs	r2, #1
 80047ac:	4013      	ands	r3, r2
 80047ae:	d00b      	beq.n	80047c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	4a43      	ldr	r2, [pc, #268]	@ (80048c4 <UART_AdvFeatureConfig+0x148>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	0019      	movs	r1, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047cc:	2202      	movs	r2, #2
 80047ce:	4013      	ands	r3, r2
 80047d0:	d00b      	beq.n	80047ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	4a3b      	ldr	r2, [pc, #236]	@ (80048c8 <UART_AdvFeatureConfig+0x14c>)
 80047da:	4013      	ands	r3, r2
 80047dc:	0019      	movs	r1, r3
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ee:	2204      	movs	r2, #4
 80047f0:	4013      	ands	r3, r2
 80047f2:	d00b      	beq.n	800480c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4a34      	ldr	r2, [pc, #208]	@ (80048cc <UART_AdvFeatureConfig+0x150>)
 80047fc:	4013      	ands	r3, r2
 80047fe:	0019      	movs	r1, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004810:	2210      	movs	r2, #16
 8004812:	4013      	ands	r3, r2
 8004814:	d00b      	beq.n	800482e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	4a2c      	ldr	r2, [pc, #176]	@ (80048d0 <UART_AdvFeatureConfig+0x154>)
 800481e:	4013      	ands	r3, r2
 8004820:	0019      	movs	r1, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	430a      	orrs	r2, r1
 800482c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	2220      	movs	r2, #32
 8004834:	4013      	ands	r3, r2
 8004836:	d00b      	beq.n	8004850 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	4a25      	ldr	r2, [pc, #148]	@ (80048d4 <UART_AdvFeatureConfig+0x158>)
 8004840:	4013      	ands	r3, r2
 8004842:	0019      	movs	r1, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	430a      	orrs	r2, r1
 800484e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004854:	2240      	movs	r2, #64	@ 0x40
 8004856:	4013      	ands	r3, r2
 8004858:	d01d      	beq.n	8004896 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	4a1d      	ldr	r2, [pc, #116]	@ (80048d8 <UART_AdvFeatureConfig+0x15c>)
 8004862:	4013      	ands	r3, r2
 8004864:	0019      	movs	r1, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	430a      	orrs	r2, r1
 8004870:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004876:	2380      	movs	r3, #128	@ 0x80
 8004878:	035b      	lsls	r3, r3, #13
 800487a:	429a      	cmp	r2, r3
 800487c:	d10b      	bne.n	8004896 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	4a15      	ldr	r2, [pc, #84]	@ (80048dc <UART_AdvFeatureConfig+0x160>)
 8004886:	4013      	ands	r3, r2
 8004888:	0019      	movs	r1, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489a:	2280      	movs	r2, #128	@ 0x80
 800489c:	4013      	ands	r3, r2
 800489e:	d00b      	beq.n	80048b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	4a0e      	ldr	r2, [pc, #56]	@ (80048e0 <UART_AdvFeatureConfig+0x164>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	0019      	movs	r1, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	430a      	orrs	r2, r1
 80048b6:	605a      	str	r2, [r3, #4]
  }
}
 80048b8:	46c0      	nop			@ (mov r8, r8)
 80048ba:	46bd      	mov	sp, r7
 80048bc:	b002      	add	sp, #8
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	ffff7fff 	.word	0xffff7fff
 80048c4:	fffdffff 	.word	0xfffdffff
 80048c8:	fffeffff 	.word	0xfffeffff
 80048cc:	fffbffff 	.word	0xfffbffff
 80048d0:	ffffefff 	.word	0xffffefff
 80048d4:	ffffdfff 	.word	0xffffdfff
 80048d8:	ffefffff 	.word	0xffefffff
 80048dc:	ff9fffff 	.word	0xff9fffff
 80048e0:	fff7ffff 	.word	0xfff7ffff

080048e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b092      	sub	sp, #72	@ 0x48
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2284      	movs	r2, #132	@ 0x84
 80048f0:	2100      	movs	r1, #0
 80048f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048f4:	f7fd f9be 	bl	8001c74 <HAL_GetTick>
 80048f8:	0003      	movs	r3, r0
 80048fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2208      	movs	r2, #8
 8004904:	4013      	ands	r3, r2
 8004906:	2b08      	cmp	r3, #8
 8004908:	d12c      	bne.n	8004964 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800490a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800490c:	2280      	movs	r2, #128	@ 0x80
 800490e:	0391      	lsls	r1, r2, #14
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4a46      	ldr	r2, [pc, #280]	@ (8004a2c <UART_CheckIdleState+0x148>)
 8004914:	9200      	str	r2, [sp, #0]
 8004916:	2200      	movs	r2, #0
 8004918:	f000 f88c 	bl	8004a34 <UART_WaitOnFlagUntilTimeout>
 800491c:	1e03      	subs	r3, r0, #0
 800491e:	d021      	beq.n	8004964 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004920:	f3ef 8310 	mrs	r3, PRIMASK
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004928:	63bb      	str	r3, [r7, #56]	@ 0x38
 800492a:	2301      	movs	r3, #1
 800492c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800492e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004930:	f383 8810 	msr	PRIMASK, r3
}
 8004934:	46c0      	nop			@ (mov r8, r8)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2180      	movs	r1, #128	@ 0x80
 8004942:	438a      	bics	r2, r1
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494c:	f383 8810 	msr	PRIMASK, r3
}
 8004950:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2278      	movs	r2, #120	@ 0x78
 800495c:	2100      	movs	r1, #0
 800495e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e05f      	b.n	8004a24 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2204      	movs	r2, #4
 800496c:	4013      	ands	r3, r2
 800496e:	2b04      	cmp	r3, #4
 8004970:	d146      	bne.n	8004a00 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004974:	2280      	movs	r2, #128	@ 0x80
 8004976:	03d1      	lsls	r1, r2, #15
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	4a2c      	ldr	r2, [pc, #176]	@ (8004a2c <UART_CheckIdleState+0x148>)
 800497c:	9200      	str	r2, [sp, #0]
 800497e:	2200      	movs	r2, #0
 8004980:	f000 f858 	bl	8004a34 <UART_WaitOnFlagUntilTimeout>
 8004984:	1e03      	subs	r3, r0, #0
 8004986:	d03b      	beq.n	8004a00 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004988:	f3ef 8310 	mrs	r3, PRIMASK
 800498c:	60fb      	str	r3, [r7, #12]
  return(result);
 800498e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004990:	637b      	str	r3, [r7, #52]	@ 0x34
 8004992:	2301      	movs	r3, #1
 8004994:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f383 8810 	msr	PRIMASK, r3
}
 800499c:	46c0      	nop			@ (mov r8, r8)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4921      	ldr	r1, [pc, #132]	@ (8004a30 <UART_CheckIdleState+0x14c>)
 80049aa:	400a      	ands	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	f383 8810 	msr	PRIMASK, r3
}
 80049b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ba:	f3ef 8310 	mrs	r3, PRIMASK
 80049be:	61bb      	str	r3, [r7, #24]
  return(result);
 80049c0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80049c4:	2301      	movs	r3, #1
 80049c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	f383 8810 	msr	PRIMASK, r3
}
 80049ce:	46c0      	nop			@ (mov r8, r8)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689a      	ldr	r2, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2101      	movs	r1, #1
 80049dc:	438a      	bics	r2, r1
 80049de:	609a      	str	r2, [r3, #8]
 80049e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	f383 8810 	msr	PRIMASK, r3
}
 80049ea:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2280      	movs	r2, #128	@ 0x80
 80049f0:	2120      	movs	r1, #32
 80049f2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2278      	movs	r2, #120	@ 0x78
 80049f8:	2100      	movs	r1, #0
 80049fa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e011      	b.n	8004a24 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2280      	movs	r2, #128	@ 0x80
 8004a0a:	2120      	movs	r1, #32
 8004a0c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2278      	movs	r2, #120	@ 0x78
 8004a1e:	2100      	movs	r1, #0
 8004a20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	0018      	movs	r0, r3
 8004a26:	46bd      	mov	sp, r7
 8004a28:	b010      	add	sp, #64	@ 0x40
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	01ffffff 	.word	0x01ffffff
 8004a30:	fffffedf 	.word	0xfffffedf

08004a34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	603b      	str	r3, [r7, #0]
 8004a40:	1dfb      	adds	r3, r7, #7
 8004a42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a44:	e051      	b.n	8004aea <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	d04e      	beq.n	8004aea <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4c:	f7fd f912 	bl	8001c74 <HAL_GetTick>
 8004a50:	0002      	movs	r2, r0
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	69ba      	ldr	r2, [r7, #24]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d302      	bcc.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e051      	b.n	8004b0a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	4013      	ands	r3, r2
 8004a70:	d03b      	beq.n	8004aea <UART_WaitOnFlagUntilTimeout+0xb6>
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	2b80      	cmp	r3, #128	@ 0x80
 8004a76:	d038      	beq.n	8004aea <UART_WaitOnFlagUntilTimeout+0xb6>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	2b40      	cmp	r3, #64	@ 0x40
 8004a7c:	d035      	beq.n	8004aea <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	2208      	movs	r2, #8
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b08      	cmp	r3, #8
 8004a8a:	d111      	bne.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2208      	movs	r2, #8
 8004a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 f900 	bl	8004c9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2284      	movs	r2, #132	@ 0x84
 8004aa0:	2108      	movs	r1, #8
 8004aa2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2278      	movs	r2, #120	@ 0x78
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004aac:	2301      	movs	r3, #1
 8004aae:	e02c      	b.n	8004b0a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	69da      	ldr	r2, [r3, #28]
 8004ab6:	2380      	movs	r3, #128	@ 0x80
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	401a      	ands	r2, r3
 8004abc:	2380      	movs	r3, #128	@ 0x80
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d112      	bne.n	8004aea <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2280      	movs	r2, #128	@ 0x80
 8004aca:	0112      	lsls	r2, r2, #4
 8004acc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f000 f8e3 	bl	8004c9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2284      	movs	r2, #132	@ 0x84
 8004ada:	2120      	movs	r1, #32
 8004adc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2278      	movs	r2, #120	@ 0x78
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e00f      	b.n	8004b0a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	4013      	ands	r3, r2
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	425a      	negs	r2, r3
 8004afa:	4153      	adcs	r3, r2
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	001a      	movs	r2, r3
 8004b00:	1dfb      	adds	r3, r7, #7
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d09e      	beq.n	8004a46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	0018      	movs	r0, r3
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	b004      	add	sp, #16
 8004b10:	bd80      	pop	{r7, pc}
	...

08004b14 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b090      	sub	sp, #64	@ 0x40
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	1dbb      	adds	r3, r7, #6
 8004b20:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	1dba      	adds	r2, r7, #6
 8004b2c:	2158      	movs	r1, #88	@ 0x58
 8004b2e:	8812      	ldrh	r2, [r2, #0]
 8004b30:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2284      	movs	r2, #132	@ 0x84
 8004b36:	2100      	movs	r1, #0
 8004b38:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2280      	movs	r2, #128	@ 0x80
 8004b3e:	2122      	movs	r1, #34	@ 0x22
 8004b40:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d028      	beq.n	8004b9c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b4e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c48 <UART_Start_Receive_DMA+0x134>)
 8004b50:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b56:	4a3d      	ldr	r2, [pc, #244]	@ (8004c4c <UART_Start_Receive_DMA+0x138>)
 8004b58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b5e:	4a3c      	ldr	r2, [pc, #240]	@ (8004c50 <UART_Start_Receive_DMA+0x13c>)
 8004b60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b66:	2200      	movs	r2, #0
 8004b68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	3324      	adds	r3, #36	@ 0x24
 8004b74:	0019      	movs	r1, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b7a:	001a      	movs	r2, r3
 8004b7c:	1dbb      	adds	r3, r7, #6
 8004b7e:	881b      	ldrh	r3, [r3, #0]
 8004b80:	f7fd f9fc 	bl	8001f7c <HAL_DMA_Start_IT>
 8004b84:	1e03      	subs	r3, r0, #0
 8004b86:	d009      	beq.n	8004b9c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2284      	movs	r2, #132	@ 0x84
 8004b8c:	2110      	movs	r1, #16
 8004b8e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2280      	movs	r2, #128	@ 0x80
 8004b94:	2120      	movs	r1, #32
 8004b96:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e050      	b.n	8004c3e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d019      	beq.n	8004bd8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bae:	2301      	movs	r3, #1
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb4:	f383 8810 	msr	PRIMASK, r3
}
 8004bb8:	46c0      	nop			@ (mov r8, r8)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2180      	movs	r1, #128	@ 0x80
 8004bc6:	0049      	lsls	r1, r1, #1
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bce:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	f383 8810 	msr	PRIMASK, r3
}
 8004bd6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8004bdc:	613b      	str	r3, [r7, #16]
  return(result);
 8004bde:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004be2:	2301      	movs	r3, #1
 8004be4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f383 8810 	msr	PRIMASK, r3
}
 8004bec:	46c0      	nop			@ (mov r8, r8)
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689a      	ldr	r2, [r3, #8]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	609a      	str	r2, [r3, #8]
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	f383 8810 	msr	PRIMASK, r3
}
 8004c08:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c0e:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c10:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c14:	2301      	movs	r3, #1
 8004c16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	f383 8810 	msr	PRIMASK, r3
}
 8004c1e:	46c0      	nop			@ (mov r8, r8)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689a      	ldr	r2, [r3, #8]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2140      	movs	r1, #64	@ 0x40
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	609a      	str	r2, [r3, #8]
 8004c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c32:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c36:	f383 8810 	msr	PRIMASK, r3
}
 8004c3a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	0018      	movs	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	b010      	add	sp, #64	@ 0x40
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	46c0      	nop			@ (mov r8, r8)
 8004c48:	08004e1d 	.word	0x08004e1d
 8004c4c:	08004f85 	.word	0x08004f85
 8004c50:	08005003 	.word	0x08005003

08004c54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c60:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c62:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c64:	617b      	str	r3, [r7, #20]
 8004c66:	2301      	movs	r3, #1
 8004c68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f383 8810 	msr	PRIMASK, r3
}
 8004c70:	46c0      	nop			@ (mov r8, r8)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	21c0      	movs	r1, #192	@ 0xc0
 8004c7e:	438a      	bics	r2, r1
 8004c80:	601a      	str	r2, [r3, #0]
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f383 8810 	msr	PRIMASK, r3
}
 8004c8c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004c94:	46c0      	nop			@ (mov r8, r8)
 8004c96:	46bd      	mov	sp, r7
 8004c98:	b006      	add	sp, #24
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08e      	sub	sp, #56	@ 0x38
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ca8:	617b      	str	r3, [r7, #20]
  return(result);
 8004caa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cae:	2301      	movs	r3, #1
 8004cb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	f383 8810 	msr	PRIMASK, r3
}
 8004cb8:	46c0      	nop			@ (mov r8, r8)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4926      	ldr	r1, [pc, #152]	@ (8004d60 <UART_EndRxTransfer+0xc4>)
 8004cc6:	400a      	ands	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ccc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	f383 8810 	msr	PRIMASK, r3
}
 8004cd4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cda:	623b      	str	r3, [r7, #32]
  return(result);
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cde:	633b      	str	r3, [r7, #48]	@ 0x30
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce6:	f383 8810 	msr	PRIMASK, r3
}
 8004cea:	46c0      	nop			@ (mov r8, r8)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	438a      	bics	r2, r1
 8004cfa:	609a      	str	r2, [r3, #8]
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d02:	f383 8810 	msr	PRIMASK, r3
}
 8004d06:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d118      	bne.n	8004d42 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d10:	f3ef 8310 	mrs	r3, PRIMASK
 8004d14:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d16:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f383 8810 	msr	PRIMASK, r3
}
 8004d24:	46c0      	nop			@ (mov r8, r8)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2110      	movs	r1, #16
 8004d32:	438a      	bics	r2, r1
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f383 8810 	msr	PRIMASK, r3
}
 8004d40:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2280      	movs	r2, #128	@ 0x80
 8004d46:	2120      	movs	r1, #32
 8004d48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d56:	46c0      	nop			@ (mov r8, r8)
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b00e      	add	sp, #56	@ 0x38
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	46c0      	nop			@ (mov r8, r8)
 8004d60:	fffffedf 	.word	0xfffffedf

08004d64 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08c      	sub	sp, #48	@ 0x30
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	d135      	bne.n	8004dea <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8004d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d80:	2252      	movs	r2, #82	@ 0x52
 8004d82:	2100      	movs	r1, #0
 8004d84:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d86:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d8c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d90:	2301      	movs	r3, #1
 8004d92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f383 8810 	msr	PRIMASK, r3
}
 8004d9a:	46c0      	nop			@ (mov r8, r8)
 8004d9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2180      	movs	r1, #128	@ 0x80
 8004da8:	438a      	bics	r2, r1
 8004daa:	609a      	str	r2, [r3, #8]
 8004dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	f383 8810 	msr	PRIMASK, r3
}
 8004db6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004db8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8004dbe:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	f383 8810 	msr	PRIMASK, r3
}
 8004dcc:	46c0      	nop			@ (mov r8, r8)
 8004dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2140      	movs	r1, #64	@ 0x40
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	f383 8810 	msr	PRIMASK, r3
}
 8004de8:	e004      	b.n	8004df4 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8004dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7ff f9e1 	bl	80041b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004df2:	46c0      	nop			@ (mov r8, r8)
 8004df4:	46c0      	nop			@ (mov r8, r8)
 8004df6:	46bd      	mov	sp, r7
 8004df8:	b00c      	add	sp, #48	@ 0x30
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e08:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	0018      	movs	r0, r3
 8004e0e:	f7ff f9d9 	bl	80041c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e12:	46c0      	nop			@ (mov r8, r8)
 8004e14:	46bd      	mov	sp, r7
 8004e16:	b004      	add	sp, #16
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b094      	sub	sp, #80	@ 0x50
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2220      	movs	r2, #32
 8004e32:	4013      	ands	r3, r2
 8004e34:	d16f      	bne.n	8004f16 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e38:	225a      	movs	r2, #90	@ 0x5a
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8004e42:	617b      	str	r3, [r7, #20]
  return(result);
 8004e44:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e48:	2301      	movs	r3, #1
 8004e4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	f383 8810 	msr	PRIMASK, r3
}
 8004e52:	46c0      	nop			@ (mov r8, r8)
 8004e54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4948      	ldr	r1, [pc, #288]	@ (8004f80 <UART_DMAReceiveCplt+0x164>)
 8004e60:	400a      	ands	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f383 8810 	msr	PRIMASK, r3
}
 8004e6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e70:	f3ef 8310 	mrs	r3, PRIMASK
 8004e74:	623b      	str	r3, [r7, #32]
  return(result);
 8004e76:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e78:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	f383 8810 	msr	PRIMASK, r3
}
 8004e84:	46c0      	nop			@ (mov r8, r8)
 8004e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2101      	movs	r1, #1
 8004e92:	438a      	bics	r2, r1
 8004e94:	609a      	str	r2, [r3, #8]
 8004e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ea0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8004ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eaa:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eac:	2301      	movs	r3, #1
 8004eae:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb2:	f383 8810 	msr	PRIMASK, r3
}
 8004eb6:	46c0      	nop			@ (mov r8, r8)
 8004eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689a      	ldr	r2, [r3, #8]
 8004ebe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2140      	movs	r1, #64	@ 0x40
 8004ec4:	438a      	bics	r2, r1
 8004ec6:	609a      	str	r2, [r3, #8]
 8004ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ece:	f383 8810 	msr	PRIMASK, r3
}
 8004ed2:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ed6:	2280      	movs	r2, #128	@ 0x80
 8004ed8:	2120      	movs	r1, #32
 8004eda:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ede:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d118      	bne.n	8004f16 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee8:	60bb      	str	r3, [r7, #8]
  return(result);
 8004eea:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eee:	2301      	movs	r3, #1
 8004ef0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f383 8810 	msr	PRIMASK, r3
}
 8004ef8:	46c0      	nop			@ (mov r8, r8)
 8004efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2110      	movs	r1, #16
 8004f06:	438a      	bics	r2, r1
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f383 8810 	msr	PRIMASK, r3
}
 8004f14:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f18:	2200      	movs	r2, #0
 8004f1a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d124      	bne.n	8004f6e <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8004f24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f26:	225a      	movs	r2, #90	@ 0x5a
 8004f28:	2100      	movs	r1, #0
 8004f2a:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	213a      	movs	r1, #58	@ 0x3a
 8004f34:	187b      	adds	r3, r7, r1
 8004f36:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8004f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f3a:	2258      	movs	r2, #88	@ 0x58
 8004f3c:	5a9b      	ldrh	r3, [r3, r2]
 8004f3e:	187a      	adds	r2, r7, r1
 8004f40:	8812      	ldrh	r2, [r2, #0]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d204      	bcs.n	8004f50 <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8004f46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f48:	187a      	adds	r2, r7, r1
 8004f4a:	215a      	movs	r1, #90	@ 0x5a
 8004f4c:	8812      	ldrh	r2, [r2, #0]
 8004f4e:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f52:	2258      	movs	r2, #88	@ 0x58
 8004f54:	5a9a      	ldrh	r2, [r3, r2]
 8004f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f58:	215a      	movs	r1, #90	@ 0x5a
 8004f5a:	5a5b      	ldrh	r3, [r3, r1]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f64:	0011      	movs	r1, r2
 8004f66:	0018      	movs	r0, r3
 8004f68:	f7fb fc42 	bl	80007f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f6c:	e003      	b.n	8004f76 <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8004f6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f70:	0018      	movs	r0, r3
 8004f72:	f7ff f92f 	bl	80041d4 <HAL_UART_RxCpltCallback>
}
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	b014      	add	sp, #80	@ 0x50
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	46c0      	nop			@ (mov r8, r8)
 8004f80:	fffffeff 	.word	0xfffffeff

08004f84 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f90:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d128      	bne.n	8004ff2 <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2258      	movs	r2, #88	@ 0x58
 8004fa4:	5a9b      	ldrh	r3, [r3, r2]
 8004fa6:	085b      	lsrs	r3, r3, #1
 8004fa8:	b299      	uxth	r1, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	225a      	movs	r2, #90	@ 0x5a
 8004fae:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	210a      	movs	r1, #10
 8004fb8:	187b      	adds	r3, r7, r1
 8004fba:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2258      	movs	r2, #88	@ 0x58
 8004fc0:	5a9b      	ldrh	r3, [r3, r2]
 8004fc2:	187a      	adds	r2, r7, r1
 8004fc4:	8812      	ldrh	r2, [r2, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d804      	bhi.n	8004fd4 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	187a      	adds	r2, r7, r1
 8004fce:	215a      	movs	r1, #90	@ 0x5a
 8004fd0:	8812      	ldrh	r2, [r2, #0]
 8004fd2:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2258      	movs	r2, #88	@ 0x58
 8004fd8:	5a9a      	ldrh	r2, [r3, r2]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	215a      	movs	r1, #90	@ 0x5a
 8004fde:	5a5b      	ldrh	r3, [r3, r1]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	0011      	movs	r1, r2
 8004fea:	0018      	movs	r0, r3
 8004fec:	f7fb fc00 	bl	80007f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ff0:	e003      	b.n	8004ffa <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	f7ff f8f5 	bl	80041e4 <HAL_UART_RxHalfCpltCallback>
}
 8004ffa:	46c0      	nop			@ (mov r8, r8)
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	b004      	add	sp, #16
 8005000:	bd80      	pop	{r7, pc}

08005002 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005002:	b580      	push	{r7, lr}
 8005004:	b086      	sub	sp, #24
 8005006:	af00      	add	r7, sp, #0
 8005008:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005014:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2280      	movs	r2, #128	@ 0x80
 800501a:	589b      	ldr	r3, [r3, r2]
 800501c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2280      	movs	r2, #128	@ 0x80
 8005026:	4013      	ands	r3, r2
 8005028:	2b80      	cmp	r3, #128	@ 0x80
 800502a:	d10a      	bne.n	8005042 <UART_DMAError+0x40>
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	2b21      	cmp	r3, #33	@ 0x21
 8005030:	d107      	bne.n	8005042 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2252      	movs	r2, #82	@ 0x52
 8005036:	2100      	movs	r1, #0
 8005038:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	0018      	movs	r0, r3
 800503e:	f7ff fe09 	bl	8004c54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2240      	movs	r2, #64	@ 0x40
 800504a:	4013      	ands	r3, r2
 800504c:	2b40      	cmp	r3, #64	@ 0x40
 800504e:	d10a      	bne.n	8005066 <UART_DMAError+0x64>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2b22      	cmp	r3, #34	@ 0x22
 8005054:	d107      	bne.n	8005066 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	225a      	movs	r2, #90	@ 0x5a
 800505a:	2100      	movs	r1, #0
 800505c:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	0018      	movs	r0, r3
 8005062:	f7ff fe1b 	bl	8004c9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2284      	movs	r2, #132	@ 0x84
 800506a:	589b      	ldr	r3, [r3, r2]
 800506c:	2210      	movs	r2, #16
 800506e:	431a      	orrs	r2, r3
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	2184      	movs	r1, #132	@ 0x84
 8005074:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	0018      	movs	r0, r3
 800507a:	f7ff f8bb 	bl	80041f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800507e:	46c0      	nop			@ (mov r8, r8)
 8005080:	46bd      	mov	sp, r7
 8005082:	b006      	add	sp, #24
 8005084:	bd80      	pop	{r7, pc}

08005086 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005092:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	225a      	movs	r2, #90	@ 0x5a
 8005098:	2100      	movs	r1, #0
 800509a:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	0018      	movs	r0, r3
 80050a0:	f7ff f8a8 	bl	80041f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050a4:	46c0      	nop			@ (mov r8, r8)
 80050a6:	46bd      	mov	sp, r7
 80050a8:	b004      	add	sp, #16
 80050aa:	bd80      	pop	{r7, pc}

080050ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050b4:	f3ef 8310 	mrs	r3, PRIMASK
 80050b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80050ba:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050bc:	617b      	str	r3, [r7, #20]
 80050be:	2301      	movs	r3, #1
 80050c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f383 8810 	msr	PRIMASK, r3
}
 80050c8:	46c0      	nop			@ (mov r8, r8)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2140      	movs	r1, #64	@ 0x40
 80050d6:	438a      	bics	r2, r1
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f383 8810 	msr	PRIMASK, r3
}
 80050e4:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2220      	movs	r2, #32
 80050ea:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	0018      	movs	r0, r3
 80050f6:	f7ff f85d 	bl	80041b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050fa:	46c0      	nop			@ (mov r8, r8)
 80050fc:	46bd      	mov	sp, r7
 80050fe:	b006      	add	sp, #24
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005102:	b580      	push	{r7, lr}
 8005104:	b082      	sub	sp, #8
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800510a:	46c0      	nop			@ (mov r8, r8)
 800510c:	46bd      	mov	sp, r7
 800510e:	b002      	add	sp, #8
 8005110:	bd80      	pop	{r7, pc}

08005112 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005112:	b5b0      	push	{r4, r5, r7, lr}
 8005114:	b08a      	sub	sp, #40	@ 0x28
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
 800511a:	60b9      	str	r1, [r7, #8]
 800511c:	1dbb      	adds	r3, r7, #6
 800511e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2280      	movs	r2, #128	@ 0x80
 8005124:	589b      	ldr	r3, [r3, r2]
 8005126:	2b20      	cmp	r3, #32
 8005128:	d156      	bne.n	80051d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d003      	beq.n	8005138 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005130:	1dbb      	adds	r3, r7, #6
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d101      	bne.n	800513c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e04e      	b.n	80051da <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	2380      	movs	r3, #128	@ 0x80
 8005142:	015b      	lsls	r3, r3, #5
 8005144:	429a      	cmp	r2, r3
 8005146:	d109      	bne.n	800515c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d105      	bne.n	800515c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2201      	movs	r2, #1
 8005154:	4013      	ands	r3, r2
 8005156:	d001      	beq.n	800515c <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e03e      	b.n	80051da <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2201      	movs	r2, #1
 8005160:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005168:	2527      	movs	r5, #39	@ 0x27
 800516a:	197c      	adds	r4, r7, r5
 800516c:	1dbb      	adds	r3, r7, #6
 800516e:	881a      	ldrh	r2, [r3, #0]
 8005170:	68b9      	ldr	r1, [r7, #8]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	0018      	movs	r0, r3
 8005176:	f7ff fccd 	bl	8004b14 <UART_Start_Receive_DMA>
 800517a:	0003      	movs	r3, r0
 800517c:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800517e:	197b      	adds	r3, r7, r5
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d124      	bne.n	80051d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800518a:	2b01      	cmp	r3, #1
 800518c:	d11c      	bne.n	80051c8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2210      	movs	r2, #16
 8005194:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005196:	f3ef 8310 	mrs	r3, PRIMASK
 800519a:	617b      	str	r3, [r7, #20]
  return(result);
 800519c:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519e:	623b      	str	r3, [r7, #32]
 80051a0:	2301      	movs	r3, #1
 80051a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	f383 8810 	msr	PRIMASK, r3
}
 80051aa:	46c0      	nop			@ (mov r8, r8)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2110      	movs	r1, #16
 80051b8:	430a      	orrs	r2, r1
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	6a3b      	ldr	r3, [r7, #32]
 80051be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f383 8810 	msr	PRIMASK, r3
}
 80051c6:	e003      	b.n	80051d0 <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80051c8:	2327      	movs	r3, #39	@ 0x27
 80051ca:	18fb      	adds	r3, r7, r3
 80051cc:	2201      	movs	r2, #1
 80051ce:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 80051d0:	2327      	movs	r3, #39	@ 0x27
 80051d2:	18fb      	adds	r3, r7, r3
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	e000      	b.n	80051da <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 80051d8:	2302      	movs	r3, #2
  }
}
 80051da:	0018      	movs	r0, r3
 80051dc:	46bd      	mov	sp, r7
 80051de:	b00a      	add	sp, #40	@ 0x28
 80051e0:	bdb0      	pop	{r4, r5, r7, pc}

080051e2 <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 80051ea:	2300      	movs	r3, #0
 80051ec:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f000 fc01 	bl	80059f8 <malloc>
 80051f6:	0003      	movs	r3, r0
 80051f8:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 80051fa:	68fb      	ldr	r3, [r7, #12]
}
 80051fc:	0018      	movs	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	b004      	add	sp, #16
 8005202:	bd80      	pop	{r7, pc}

08005204 <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00b      	beq.n	800522a <ATC_Free+0x26>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d007      	beq.n	800522a <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	0018      	movs	r0, r3
 8005220:	f000 fbf4 	bl	8005a0c <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]
  }
}
 800522a:	46c0      	nop			@ (mov r8, r8)
 800522c:	46bd      	mov	sp, r7
 800522e:	b002      	add	sp, #8
 8005230:	bd80      	pop	{r7, pc}

08005232 <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	8a9b      	ldrh	r3, [r3, #20]
 8005248:	001a      	movs	r2, r3
 800524a:	2100      	movs	r1, #0
 800524c:	f000 ff90 	bl	8006170 <memset>
}
 8005250:	46c0      	nop			@ (mov r8, r8)
 8005252:	46bd      	mov	sp, r7
 8005254:	b002      	add	sp, #8
 8005256:	bd80      	pop	{r7, pc}

08005258 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8005258:	b590      	push	{r4, r7, lr}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	1dbb      	adds	r3, r7, #6
 8005264:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8005266:	2417      	movs	r4, #23
 8005268:	193b      	adds	r3, r7, r4
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1dba      	adds	r2, r7, #6
 8005272:	8812      	ldrh	r2, [r2, #0]
 8005274:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	1dbb      	adds	r3, r7, #6
 800527c:	881a      	ldrh	r2, [r3, #0]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	0019      	movs	r1, r3
 8005282:	f7fe faf3 	bl	800386c <HAL_UART_Transmit_DMA>
 8005286:	1e03      	subs	r3, r0, #0
 8005288:	d103      	bne.n	8005292 <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 800528a:	193b      	adds	r3, r7, r4
 800528c:	2201      	movs	r2, #1
 800528e:	701a      	strb	r2, [r3, #0]
 8005290:	e000      	b.n	8005294 <ATC_TxRaw+0x3c>
      break;
 8005292:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 8005294:	2317      	movs	r3, #23
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	781b      	ldrb	r3, [r3, #0]
}
 800529a:	0018      	movs	r0, r3
 800529c:	46bd      	mov	sp, r7
 800529e:	b007      	add	sp, #28
 80052a0:	bd90      	pop	{r4, r7, pc}

080052a2 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	0018      	movs	r0, r3
 80052b0:	f7fe ffa8 	bl	8004204 <HAL_UART_GetState>
 80052b4:	0003      	movs	r3, r0
 80052b6:	2b21      	cmp	r3, #33	@ 0x21
 80052b8:	d007      	beq.n	80052ca <ATC_TxBusy+0x28>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	0018      	movs	r0, r3
 80052c0:	f7fe ffa0 	bl	8004204 <HAL_UART_GetState>
 80052c4:	0003      	movs	r3, r0
 80052c6:	2b23      	cmp	r3, #35	@ 0x23
 80052c8:	d101      	bne.n	80052ce <ATC_TxBusy+0x2c>
  {
    return true;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 80052ce:	2300      	movs	r3, #0
  }
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b002      	add	sp, #8
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  bool answer = false;
 80052e2:	230f      	movs	r3, #15
 80052e4:	18fb      	adds	r3, r7, r3
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 80052ea:	f7fc fcc3 	bl	8001c74 <HAL_GetTick>
 80052ee:	0003      	movs	r3, r0
 80052f0:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 80052f2:	2001      	movs	r0, #1
 80052f4:	f000 fb73 	bl	80059de <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	0018      	movs	r0, r3
 80052fe:	f7fe ff81 	bl	8004204 <HAL_UART_GetState>
 8005302:	0003      	movs	r3, r0
 8005304:	2b22      	cmp	r3, #34	@ 0x22
 8005306:	d007      	beq.n	8005318 <ATC_TxWait+0x40>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	0018      	movs	r0, r3
 800530e:	f7fe ff79 	bl	8004204 <HAL_UART_GetState>
 8005312:	0003      	movs	r3, r0
 8005314:	2b20      	cmp	r3, #32
 8005316:	d104      	bne.n	8005322 <ATC_TxWait+0x4a>
    {
      answer = true;
 8005318:	230f      	movs	r3, #15
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	2201      	movs	r2, #1
 800531e:	701a      	strb	r2, [r3, #0]
      break;
 8005320:	e01c      	b.n	800535c <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	0018      	movs	r0, r3
 8005328:	f7fe ff6c 	bl	8004204 <HAL_UART_GetState>
 800532c:	0003      	movs	r3, r0
 800532e:	2be0      	cmp	r3, #224	@ 0xe0
 8005330:	d014      	beq.n	800535c <ATC_TxWait+0x84>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	0018      	movs	r0, r3
 8005338:	f7fe ff64 	bl	8004204 <HAL_UART_GetState>
 800533c:	0003      	movs	r3, r0
 800533e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005340:	d00c      	beq.n	800535c <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 8005342:	f7fc fc97 	bl	8001c74 <HAL_GetTick>
 8005346:	0002      	movs	r2, r0
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	683a      	ldr	r2, [r7, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d8cf      	bhi.n	80052f2 <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	0018      	movs	r0, r3
 8005358:	f7fe fb18 	bl	800398c <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 800535c:	230f      	movs	r3, #15
 800535e:	18fb      	adds	r3, r7, r3
 8005360:	781b      	ldrb	r3, [r3, #0]
}
 8005362:	0018      	movs	r0, r3
 8005364:	46bd      	mov	sp, r7
 8005366:	b004      	add	sp, #16
 8005368:	bd80      	pop	{r7, pc}

0800536a <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b084      	sub	sp, #16
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	8b1b      	ldrh	r3, [r3, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d027      	beq.n	80053ca <ATC_CheckEvents+0x60>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
 800537e:	e01b      	b.n	80053b8 <ATC_CheckEvents+0x4e>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	18d3      	adds	r3, r2, r3
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	0019      	movs	r1, r3
 8005392:	f000 ff1d 	bl	80061d0 <strstr>
 8005396:	0003      	movs	r3, r0
 8005398:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d008      	beq.n	80053b2 <ATC_CheckEvents+0x48>
      {
        hAtc->psEvents[ev].EventCallback(found);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	00db      	lsls	r3, r3, #3
 80053a8:	18d3      	adds	r3, r2, r3
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	0010      	movs	r0, r2
 80053b0:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3301      	adds	r3, #1
 80053b6:	60fb      	str	r3, [r7, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	68fa      	ldr	r2, [r7, #12]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d3de      	bcc.n	8005380 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	0018      	movs	r0, r3
 80053c6:	f7ff ff34 	bl	8005232 <ATC_RxFlush>
  }
}
 80053ca:	46c0      	nop			@ (mov r8, r8)
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b004      	add	sp, #16
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
 80053da:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 80053dc:	230f      	movs	r3, #15
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	2200      	movs	r2, #0
 80053e2:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8b1b      	ldrh	r3, [r3, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d031      	beq.n	8005450 <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 80053ec:	230c      	movs	r3, #12
 80053ee:	18fb      	adds	r3, r7, r3
 80053f0:	2200      	movs	r2, #0
 80053f2:	801a      	strh	r2, [r3, #0]
 80053f4:	e025      	b.n	8005442 <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80053fa:	230c      	movs	r3, #12
 80053fc:	18fb      	adds	r3, r7, r3
 80053fe:	881a      	ldrh	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	320a      	adds	r2, #10
 8005404:	0092      	lsls	r2, r2, #2
 8005406:	58d3      	ldr	r3, [r2, r3]
 8005408:	0019      	movs	r1, r3
 800540a:	f000 fee1 	bl	80061d0 <strstr>
 800540e:	0003      	movs	r3, r0
 8005410:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00e      	beq.n	8005436 <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8005424:	230c      	movs	r3, #12
 8005426:	18fb      	adds	r3, r7, r3
 8005428:	881b      	ldrh	r3, [r3, #0]
 800542a:	b2da      	uxtb	r2, r3
 800542c:	230f      	movs	r3, #15
 800542e:	18fb      	adds	r3, r7, r3
 8005430:	3201      	adds	r2, #1
 8005432:	701a      	strb	r2, [r3, #0]
        break;
 8005434:	e00c      	b.n	8005450 <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8005436:	210c      	movs	r1, #12
 8005438:	187b      	adds	r3, r7, r1
 800543a:	881a      	ldrh	r2, [r3, #0]
 800543c:	187b      	adds	r3, r7, r1
 800543e:	3201      	adds	r2, #1
 8005440:	801a      	strh	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	8adb      	ldrh	r3, [r3, #22]
 8005446:	220c      	movs	r2, #12
 8005448:	18ba      	adds	r2, r7, r2
 800544a:	8812      	ldrh	r2, [r2, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d3d2      	bcc.n	80053f6 <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 8005450:	230f      	movs	r3, #15
 8005452:	18fb      	adds	r3, r7, r3
 8005454:	781b      	ldrb	r3, [r3, #0]
}
 8005456:	0018      	movs	r0, r3
 8005458:	46bd      	mov	sp, r7
 800545a:	b004      	add	sp, #16
 800545c:	bd80      	pop	{r7, pc}

0800545e <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b082      	sub	sp, #8
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	0018      	movs	r0, r3
 800546c:	f7fe fedc 	bl	8004228 <HAL_UART_GetError>
 8005470:	1e03      	subs	r3, r0, #0
 8005472:	d01f      	beq.n	80054b4 <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2201      	movs	r2, #1
 800547c:	4252      	negs	r2, r2
 800547e:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	0018      	movs	r0, r3
 8005486:	f7fe fae7 	bl	8003a58 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69d9      	ldr	r1, [r3, #28]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	8a9b      	ldrh	r3, [r3, #20]
 8005496:	001a      	movs	r2, r3
 8005498:	f7ff fe3b 	bl	8005112 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2104      	movs	r1, #4
 80054b0:	438a      	bics	r2, r1
 80054b2:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	0018      	movs	r0, r3
 80054ba:	f7fe fea3 	bl	8004204 <HAL_UART_GetState>
 80054be:	0003      	movs	r3, r0
 80054c0:	2b22      	cmp	r3, #34	@ 0x22
 80054c2:	d027      	beq.n	8005514 <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7fe fe9b 	bl	8004204 <HAL_UART_GetState>
 80054ce:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 80054d0:	2b23      	cmp	r3, #35	@ 0x23
 80054d2:	d01f      	beq.n	8005514 <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2201      	movs	r2, #1
 80054dc:	4252      	negs	r2, r2
 80054de:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	0018      	movs	r0, r3
 80054e6:	f7fe fab7 	bl	8003a58 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69d9      	ldr	r1, [r3, #28]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	8a9b      	ldrh	r3, [r3, #20]
 80054f6:	001a      	movs	r2, r3
 80054f8:	f7ff fe0b 	bl	8005112 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2104      	movs	r1, #4
 8005510:	438a      	bics	r2, r1
 8005512:	601a      	str	r2, [r3, #0]
  }
}
 8005514:	46c0      	nop			@ (mov r8, r8)
 8005516:	46bd      	mov	sp, r7
 8005518:	b002      	add	sp, #8
 800551a:	bd80      	pop	{r7, pc}

0800551c <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	603b      	str	r3, [r7, #0]
 8005528:	1dbb      	adds	r3, r7, #6
 800552a:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 800552c:	2317      	movs	r3, #23
 800552e:	18fb      	adds	r3, r7, r3
 8005530:	2200      	movs	r2, #0
 8005532:	701a      	strb	r2, [r3, #0]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d100      	bne.n	800553c <ATC_Init+0x20>
 800553a:	e07f      	b.n	800563c <ATC_Init+0x120>
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d100      	bne.n	8005544 <ATC_Init+0x28>
 8005542:	e07b      	b.n	800563c <ATC_Init+0x120>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	223c      	movs	r2, #60	@ 0x3c
 8005548:	2100      	movs	r1, #0
 800554a:	0018      	movs	r0, r3
 800554c:	f000 fe10 	bl	8006170 <memset>
    if (pName != NULL)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d006      	beq.n	8005564 <ATC_Init+0x48>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	3304      	adds	r3, #4
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	2207      	movs	r2, #7
 800555e:	0018      	movs	r0, r3
 8005560:	f000 fe0e 	bl	8006180 <strncpy>
    }
    hAtc->hUart = hUart;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 800556a:	1dbb      	adds	r3, r7, #6
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	0018      	movs	r0, r3
 8005570:	f7ff fe37 	bl	80051e2 <ATC_Malloc>
 8005574:	0002      	movs	r2, r0
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d055      	beq.n	800562e <ATC_Init+0x112>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	69d8      	ldr	r0, [r3, #28]
 8005586:	1dbb      	adds	r3, r7, #6
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	001a      	movs	r2, r3
 800558c:	2100      	movs	r1, #0
 800558e:	f000 fdef 	bl	8006170 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 8005592:	1dbb      	adds	r3, r7, #6
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	0018      	movs	r0, r3
 8005598:	f7ff fe23 	bl	80051e2 <ATC_Malloc>
 800559c:	0002      	movs	r2, r0
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d043      	beq.n	8005632 <ATC_Init+0x116>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a18      	ldr	r0, [r3, #32]
 80055ae:	1dbb      	adds	r3, r7, #6
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	001a      	movs	r2, r3
 80055b4:	2100      	movs	r1, #0
 80055b6:	f000 fddb 	bl	8006170 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 80055ba:	1dbb      	adds	r3, r7, #6
 80055bc:	881b      	ldrh	r3, [r3, #0]
 80055be:	0018      	movs	r0, r3
 80055c0:	f7ff fe0f 	bl	80051e2 <ATC_Malloc>
 80055c4:	0002      	movs	r2, r0
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d031      	beq.n	8005636 <ATC_Init+0x11a>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80055d6:	1dbb      	adds	r3, r7, #6
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	001a      	movs	r2, r3
 80055dc:	2100      	movs	r1, #0
 80055de:	f000 fdc7 	bl	8006170 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1dba      	adds	r2, r7, #6
 80055e6:	8812      	ldrh	r2, [r2, #0]
 80055e8:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2201      	movs	r2, #1
 80055f2:	4252      	negs	r2, r2
 80055f4:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6818      	ldr	r0, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	69d9      	ldr	r1, [r3, #28]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8a9b      	ldrh	r3, [r3, #20]
 8005602:	001a      	movs	r2, r3
 8005604:	f7ff fd85 	bl	8005112 <HAL_UARTEx_ReceiveToIdle_DMA>
 8005608:	1e03      	subs	r3, r0, #0
 800560a:	d116      	bne.n	800563a <ATC_Init+0x11e>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2104      	movs	r1, #4
 8005620:	438a      	bics	r2, r1
 8005622:	601a      	str	r2, [r3, #0]
    answer = true;
 8005624:	2317      	movs	r3, #23
 8005626:	18fb      	adds	r3, r7, r3
 8005628:	2201      	movs	r2, #1
 800562a:	701a      	strb	r2, [r3, #0]
 800562c:	e006      	b.n	800563c <ATC_Init+0x120>
      break;
 800562e:	46c0      	nop			@ (mov r8, r8)
 8005630:	e004      	b.n	800563c <ATC_Init+0x120>
      break;
 8005632:	46c0      	nop			@ (mov r8, r8)
 8005634:	e002      	b.n	800563c <ATC_Init+0x120>
      break;
 8005636:	46c0      	nop			@ (mov r8, r8)
 8005638:	e000      	b.n	800563c <ATC_Init+0x120>
      break;
 800563a:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  if (answer == false)
 800563c:	2317      	movs	r3, #23
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2201      	movs	r2, #1
 8005644:	4053      	eors	r3, r2
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d017      	beq.n	800567c <ATC_Init+0x160>
  {
    if (hAtc->pRxBuff != NULL)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	69db      	ldr	r3, [r3, #28]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <ATC_Init+0x142>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	331c      	adds	r3, #28
 8005658:	0018      	movs	r0, r3
 800565a:	f7ff fdd3 	bl	8005204 <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005662:	2b00      	cmp	r3, #0
 8005664:	d004      	beq.n	8005670 <ATC_Init+0x154>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	3324      	adds	r3, #36	@ 0x24
 800566a:	0018      	movs	r0, r3
 800566c:	f7ff fdca 	bl	8005204 <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	223c      	movs	r2, #60	@ 0x3c
 8005674:	2100      	movs	r1, #0
 8005676:	0018      	movs	r0, r3
 8005678:	f000 fd7a 	bl	8006170 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 800567c:	2317      	movs	r3, #23
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	781b      	ldrb	r3, [r3, #0]
}
 8005682:	0018      	movs	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	b006      	add	sp, #24
 8005688:	bd80      	pop	{r7, pc}

0800568a <ATC_SetEvents>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  psEvents: Pointer to the event handler structure.
  * @retval true if events are set successfully, false otherwise.
  */
bool ATC_SetEvents(ATC_HandleTypeDef* hAtc, const ATC_EventTypeDef* psEvents)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b084      	sub	sp, #16
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8005694:	230f      	movs	r3, #15
 8005696:	18fb      	adds	r3, r7, r3
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
  uint32_t ev = 0;
 800569c:	2300      	movs	r3, #0
 800569e:	60bb      	str	r3, [r7, #8]
  do
  {
    if (hAtc == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d01f      	beq.n	80056e6 <ATC_SetEvents+0x5c>
    {
      break;
    }
    if (psEvents == NULL)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01e      	beq.n	80056ea <ATC_SetEvents+0x60>
    {
      break;
    }
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 80056ac:	e002      	b.n	80056b4 <ATC_SetEvents+0x2a>
    {
      ev++;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	3301      	adds	r3, #1
 80056b2:	60bb      	str	r3, [r7, #8]
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	00db      	lsls	r3, r3, #3
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	18d3      	adds	r3, r2, r3
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d006      	beq.n	80056d0 <ATC_SetEvents+0x46>
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	00db      	lsls	r3, r3, #3
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	18d3      	adds	r3, r2, r3
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1ee      	bne.n	80056ae <ATC_SetEvents+0x24>
    }
    hAtc->psEvents = (ATC_EventTypeDef*)psEvents;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	60da      	str	r2, [r3, #12]
    hAtc->Events = ev;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	611a      	str	r2, [r3, #16]
    answer = true;
 80056dc:	230f      	movs	r3, #15
 80056de:	18fb      	adds	r3, r7, r3
 80056e0:	2201      	movs	r2, #1
 80056e2:	701a      	strb	r2, [r3, #0]
 80056e4:	e002      	b.n	80056ec <ATC_SetEvents+0x62>
      break;
 80056e6:	46c0      	nop			@ (mov r8, r8)
 80056e8:	e000      	b.n	80056ec <ATC_SetEvents+0x62>
      break;
 80056ea:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 80056ec:	230f      	movs	r3, #15
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	781b      	ldrb	r3, [r3, #0]
}
 80056f2:	0018      	movs	r0, r3
 80056f4:	46bd      	mov	sp, r7
 80056f6:	b004      	add	sp, #16
 80056f8:	bd80      	pop	{r7, pc}

080056fa <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	0018      	movs	r0, r3
 8005706:	f7ff feaa 	bl	800545e <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	0018      	movs	r0, r3
 800570e:	f7ff fe2c 	bl	800536a <ATC_CheckEvents>
}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	46bd      	mov	sp, r7
 8005716:	b002      	add	sp, #8
 8005718:	bd80      	pop	{r7, pc}

0800571a <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 800571a:	b5b0      	push	{r4, r5, r7, lr}
 800571c:	b08c      	sub	sp, #48	@ 0x30
 800571e:	af00      	add	r7, sp, #0
 8005720:	60f8      	str	r0, [r7, #12]
 8005722:	60b9      	str	r1, [r7, #8]
 8005724:	607a      	str	r2, [r7, #4]
 8005726:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8005728:	2300      	movs	r3, #0
 800572a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	0018      	movs	r0, r3
 8005730:	f7ff fdb7 	bl	80052a2 <ATC_TxBusy>
 8005734:	1e03      	subs	r3, r0, #0
 8005736:	d002      	beq.n	800573e <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8005738:	2304      	movs	r3, #4
 800573a:	425b      	negs	r3, r3
 800573c:	e0e3      	b.n	8005906 <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 800573e:	2344      	movs	r3, #68	@ 0x44
 8005740:	18fb      	adds	r3, r7, r3
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b05      	cmp	r3, #5
 8005746:	d902      	bls.n	800574e <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 8005748:	2305      	movs	r3, #5
 800574a:	425b      	negs	r3, r3
 800574c:	e0db      	b.n	8005906 <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	0018      	movs	r0, r3
 8005752:	f7ff fe84 	bl	800545e <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8005756:	2348      	movs	r3, #72	@ 0x48
 8005758:	18fb      	adds	r3, r7, r3
 800575a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 800575c:	2300      	movs	r3, #0
 800575e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005760:	e051      	b.n	8005806 <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	1d1a      	adds	r2, r3, #4
 8005766:	617a      	str	r2, [r7, #20]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	0018      	movs	r0, r3
 8005770:	f7fa fcca 	bl	8000108 <strlen>
 8005774:	0003      	movs	r3, r0
 8005776:	3301      	adds	r3, #1
 8005778:	0018      	movs	r0, r3
 800577a:	f7ff fd32 	bl	80051e2 <ATC_Malloc>
 800577e:	0001      	movs	r1, r0
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005784:	320a      	adds	r2, #10
 8005786:	0092      	lsls	r2, r2, #2
 8005788:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800578e:	320a      	adds	r2, #10
 8005790:	0092      	lsls	r2, r2, #2
 8005792:	58d3      	ldr	r3, [r2, r3]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d11c      	bne.n	80057d2 <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 8005798:	2327      	movs	r3, #39	@ 0x27
 800579a:	18fb      	adds	r3, r7, r3
 800579c:	2200      	movs	r2, #0
 800579e:	701a      	strb	r2, [r3, #0]
 80057a0:	e00e      	b.n	80057c0 <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 80057a2:	2427      	movs	r4, #39	@ 0x27
 80057a4:	193b      	adds	r3, r7, r4
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	330a      	adds	r3, #10
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	18d3      	adds	r3, r2, r3
 80057b0:	0018      	movs	r0, r3
 80057b2:	f7ff fd27 	bl	8005204 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 80057b6:	193b      	adds	r3, r7, r4
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	193b      	adds	r3, r7, r4
 80057bc:	3201      	adds	r2, #1
 80057be:	701a      	strb	r2, [r3, #0]
 80057c0:	2327      	movs	r3, #39	@ 0x27
 80057c2:	18fb      	adds	r3, r7, r3
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057c8:	429a      	cmp	r2, r3
 80057ca:	dcea      	bgt.n	80057a2 <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 80057cc:	2303      	movs	r3, #3
 80057ce:	425b      	negs	r3, r3
 80057d0:	e099      	b.n	8005906 <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057d6:	320a      	adds	r2, #10
 80057d8:	0092      	lsls	r2, r2, #2
 80057da:	58d3      	ldr	r3, [r2, r3]
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	0011      	movs	r1, r2
 80057e0:	0018      	movs	r0, r3
 80057e2:	f000 fd98 	bl	8006316 <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ea:	320a      	adds	r2, #10
 80057ec:	0092      	lsls	r2, r2, #2
 80057ee:	58d4      	ldr	r4, [r2, r3]
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	0018      	movs	r0, r3
 80057f4:	f7fa fc88 	bl	8000108 <strlen>
 80057f8:	0003      	movs	r3, r0
 80057fa:	18e3      	adds	r3, r4, r3
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	3301      	adds	r3, #1
 8005804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005806:	2344      	movs	r3, #68	@ 0x44
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800580e:	429a      	cmp	r2, r3
 8005810:	dba7      	blt.n	8005762 <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	0018      	movs	r0, r3
 8005816:	f7ff fd0c 	bl	8005232 <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	0018      	movs	r0, r3
 800581e:	f7fa fc73 	bl	8000108 <strlen>
 8005822:	0003      	movs	r3, r0
 8005824:	b29a      	uxth	r2, r3
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	0018      	movs	r0, r3
 800582c:	f7ff fd14 	bl	8005258 <ATC_TxRaw>
 8005830:	0003      	movs	r3, r0
 8005832:	001a      	movs	r2, r3
 8005834:	2301      	movs	r3, #1
 8005836:	4053      	eors	r3, r2
 8005838:	b2db      	uxtb	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	425b      	negs	r3, r3
 8005842:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005844:	e010      	b.n	8005868 <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	0011      	movs	r1, r2
 800584c:	0018      	movs	r0, r3
 800584e:	f7ff fd43 	bl	80052d8 <ATC_TxWait>
 8005852:	0003      	movs	r3, r0
 8005854:	001a      	movs	r2, r3
 8005856:	2301      	movs	r3, #1
 8005858:	4053      	eors	r3, r2
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8005860:	2302      	movs	r3, #2
 8005862:	425b      	negs	r3, r3
 8005864:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005866:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 8005868:	2444      	movs	r4, #68	@ 0x44
 800586a:	193b      	adds	r3, r7, r4
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d029      	beq.n	80058c6 <ATC_SendReceive+0x1ac>
 8005872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d126      	bne.n	80058c6 <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 8005878:	f7fc f9fc 	bl	8001c74 <HAL_GetTick>
 800587c:	0003      	movs	r3, r0
 800587e:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 8005880:	193b      	adds	r3, r7, r4
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	b29a      	uxth	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 800588a:	e014      	b.n	80058b6 <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 800588c:	2001      	movs	r0, #1
 800588e:	f000 f8a6 	bl	80059de <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8005892:	251f      	movs	r5, #31
 8005894:	197c      	adds	r4, r7, r5
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	0011      	movs	r1, r2
 800589c:	0018      	movs	r0, r3
 800589e:	f7ff fd98 	bl	80053d2 <ATC_CheckResponse>
 80058a2:	0003      	movs	r3, r0
 80058a4:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 80058a6:	197b      	adds	r3, r7, r5
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 80058ae:	197b      	adds	r3, r7, r5
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80058b4:	e007      	b.n	80058c6 <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 80058b6:	f7fc f9dd 	bl	8001c74 <HAL_GetTick>
 80058ba:	0002      	movs	r2, r0
 80058bc:	6a3b      	ldr	r3, [r7, #32]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d8e2      	bhi.n	800588c <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 80058cc:	2326      	movs	r3, #38	@ 0x26
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	2200      	movs	r2, #0
 80058d2:	701a      	strb	r2, [r3, #0]
 80058d4:	e00e      	b.n	80058f4 <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 80058d6:	2426      	movs	r4, #38	@ 0x26
 80058d8:	193b      	adds	r3, r7, r4
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	330a      	adds	r3, #10
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	18d3      	adds	r3, r2, r3
 80058e4:	0018      	movs	r0, r3
 80058e6:	f7ff fc8d 	bl	8005204 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 80058ea:	193b      	adds	r3, r7, r4
 80058ec:	781a      	ldrb	r2, [r3, #0]
 80058ee:	193b      	adds	r3, r7, r4
 80058f0:	3201      	adds	r2, #1
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	2326      	movs	r3, #38	@ 0x26
 80058f6:	18fa      	adds	r2, r7, r3
 80058f8:	2344      	movs	r3, #68	@ 0x44
 80058fa:	18fb      	adds	r3, r7, r3
 80058fc:	7812      	ldrb	r2, [r2, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	429a      	cmp	r2, r3
 8005902:	d3e8      	bcc.n	80058d6 <ATC_SendReceive+0x1bc>
  }
  return answer;
 8005904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005906:	0018      	movs	r0, r3
 8005908:	46bd      	mov	sp, r7
 800590a:	b00c      	add	sp, #48	@ 0x30
 800590c:	bdb0      	pop	{r4, r5, r7, pc}

0800590e <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	000a      	movs	r2, r1
 8005918:	1cbb      	adds	r3, r7, #2
 800591a:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 800591c:	1cbb      	adds	r3, r7, #2
 800591e:	881a      	ldrh	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8a9b      	ldrh	r3, [r3, #20]
 8005924:	0019      	movs	r1, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	8b1b      	ldrh	r3, [r3, #24]
 800592a:	1acb      	subs	r3, r1, r3
 800592c:	429a      	cmp	r2, r3
 800592e:	dd06      	ble.n	800593e <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8a99      	ldrh	r1, [r3, #20]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	8b1a      	ldrh	r2, [r3, #24]
 8005938:	1cbb      	adds	r3, r7, #2
 800593a:	1a8a      	subs	r2, r1, r2
 800593c:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	8b12      	ldrh	r2, [r2, #24]
 8005946:	1898      	adds	r0, r3, r2
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69d9      	ldr	r1, [r3, #28]
 800594c:	1cbb      	adds	r3, r7, #2
 800594e:	881b      	ldrh	r3, [r3, #0]
 8005950:	001a      	movs	r2, r3
 8005952:	f000 fce8 	bl	8006326 <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	8b1a      	ldrh	r2, [r3, #24]
 800595a:	1cbb      	adds	r3, r7, #2
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	18d3      	adds	r3, r2, r3
 8005960:	b29a      	uxth	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6818      	ldr	r0, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69d9      	ldr	r1, [r3, #28]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	8a9b      	ldrh	r3, [r3, #20]
 8005972:	001a      	movs	r2, r3
 8005974:	f7ff fbcd 	bl	8005112 <HAL_UARTEx_ReceiveToIdle_DMA>
 8005978:	1e03      	subs	r3, r0, #0
 800597a:	d10c      	bne.n	8005996 <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2104      	movs	r1, #4
 8005990:	438a      	bics	r2, r1
 8005992:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 8005994:	e01f      	b.n	80059d6 <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2201      	movs	r2, #1
 800599e:	4252      	negs	r2, r2
 80059a0:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	0018      	movs	r0, r3
 80059a8:	f7fe f856 	bl	8003a58 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6818      	ldr	r0, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	69d9      	ldr	r1, [r3, #28]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	8a9b      	ldrh	r3, [r3, #20]
 80059b8:	001a      	movs	r2, r3
 80059ba:	f7ff fbaa 	bl	8005112 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2104      	movs	r1, #4
 80059d2:	438a      	bics	r2, r1
 80059d4:	601a      	str	r2, [r3, #0]
}
 80059d6:	46c0      	nop			@ (mov r8, r8)
 80059d8:	46bd      	mov	sp, r7
 80059da:	b002      	add	sp, #8
 80059dc:	bd80      	pop	{r7, pc}

080059de <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b082      	sub	sp, #8
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	0018      	movs	r0, r3
 80059ea:	f7fc f94d 	bl	8001c88 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 80059ee:	46c0      	nop			@ (mov r8, r8)
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b002      	add	sp, #8
 80059f4:	bd80      	pop	{r7, pc}
	...

080059f8 <malloc>:
 80059f8:	b510      	push	{r4, lr}
 80059fa:	4b03      	ldr	r3, [pc, #12]	@ (8005a08 <malloc+0x10>)
 80059fc:	0001      	movs	r1, r0
 80059fe:	6818      	ldr	r0, [r3, #0]
 8005a00:	f000 f830 	bl	8005a64 <_malloc_r>
 8005a04:	bd10      	pop	{r4, pc}
 8005a06:	46c0      	nop			@ (mov r8, r8)
 8005a08:	20000018 	.word	0x20000018

08005a0c <free>:
 8005a0c:	b510      	push	{r4, lr}
 8005a0e:	4b03      	ldr	r3, [pc, #12]	@ (8005a1c <free+0x10>)
 8005a10:	0001      	movs	r1, r0
 8005a12:	6818      	ldr	r0, [r3, #0]
 8005a14:	f000 fc90 	bl	8006338 <_free_r>
 8005a18:	bd10      	pop	{r4, pc}
 8005a1a:	46c0      	nop			@ (mov r8, r8)
 8005a1c:	20000018 	.word	0x20000018

08005a20 <sbrk_aligned>:
 8005a20:	b570      	push	{r4, r5, r6, lr}
 8005a22:	4e0f      	ldr	r6, [pc, #60]	@ (8005a60 <sbrk_aligned+0x40>)
 8005a24:	000d      	movs	r5, r1
 8005a26:	6831      	ldr	r1, [r6, #0]
 8005a28:	0004      	movs	r4, r0
 8005a2a:	2900      	cmp	r1, #0
 8005a2c:	d102      	bne.n	8005a34 <sbrk_aligned+0x14>
 8005a2e:	f000 fc1f 	bl	8006270 <_sbrk_r>
 8005a32:	6030      	str	r0, [r6, #0]
 8005a34:	0029      	movs	r1, r5
 8005a36:	0020      	movs	r0, r4
 8005a38:	f000 fc1a 	bl	8006270 <_sbrk_r>
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	d103      	bne.n	8005a48 <sbrk_aligned+0x28>
 8005a40:	2501      	movs	r5, #1
 8005a42:	426d      	negs	r5, r5
 8005a44:	0028      	movs	r0, r5
 8005a46:	bd70      	pop	{r4, r5, r6, pc}
 8005a48:	2303      	movs	r3, #3
 8005a4a:	1cc5      	adds	r5, r0, #3
 8005a4c:	439d      	bics	r5, r3
 8005a4e:	42a8      	cmp	r0, r5
 8005a50:	d0f8      	beq.n	8005a44 <sbrk_aligned+0x24>
 8005a52:	1a29      	subs	r1, r5, r0
 8005a54:	0020      	movs	r0, r4
 8005a56:	f000 fc0b 	bl	8006270 <_sbrk_r>
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d1f2      	bne.n	8005a44 <sbrk_aligned+0x24>
 8005a5e:	e7ef      	b.n	8005a40 <sbrk_aligned+0x20>
 8005a60:	20000374 	.word	0x20000374

08005a64 <_malloc_r>:
 8005a64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a66:	2203      	movs	r2, #3
 8005a68:	1ccb      	adds	r3, r1, #3
 8005a6a:	4393      	bics	r3, r2
 8005a6c:	3308      	adds	r3, #8
 8005a6e:	0005      	movs	r5, r0
 8005a70:	001f      	movs	r7, r3
 8005a72:	2b0c      	cmp	r3, #12
 8005a74:	d234      	bcs.n	8005ae0 <_malloc_r+0x7c>
 8005a76:	270c      	movs	r7, #12
 8005a78:	42b9      	cmp	r1, r7
 8005a7a:	d833      	bhi.n	8005ae4 <_malloc_r+0x80>
 8005a7c:	0028      	movs	r0, r5
 8005a7e:	f000 f871 	bl	8005b64 <__malloc_lock>
 8005a82:	4e37      	ldr	r6, [pc, #220]	@ (8005b60 <_malloc_r+0xfc>)
 8005a84:	6833      	ldr	r3, [r6, #0]
 8005a86:	001c      	movs	r4, r3
 8005a88:	2c00      	cmp	r4, #0
 8005a8a:	d12f      	bne.n	8005aec <_malloc_r+0x88>
 8005a8c:	0039      	movs	r1, r7
 8005a8e:	0028      	movs	r0, r5
 8005a90:	f7ff ffc6 	bl	8005a20 <sbrk_aligned>
 8005a94:	0004      	movs	r4, r0
 8005a96:	1c43      	adds	r3, r0, #1
 8005a98:	d15f      	bne.n	8005b5a <_malloc_r+0xf6>
 8005a9a:	6834      	ldr	r4, [r6, #0]
 8005a9c:	9400      	str	r4, [sp, #0]
 8005a9e:	9b00      	ldr	r3, [sp, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d14a      	bne.n	8005b3a <_malloc_r+0xd6>
 8005aa4:	2c00      	cmp	r4, #0
 8005aa6:	d052      	beq.n	8005b4e <_malloc_r+0xea>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	0028      	movs	r0, r5
 8005aac:	18e3      	adds	r3, r4, r3
 8005aae:	9900      	ldr	r1, [sp, #0]
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	f000 fbdd 	bl	8006270 <_sbrk_r>
 8005ab6:	9b01      	ldr	r3, [sp, #4]
 8005ab8:	4283      	cmp	r3, r0
 8005aba:	d148      	bne.n	8005b4e <_malloc_r+0xea>
 8005abc:	6823      	ldr	r3, [r4, #0]
 8005abe:	0028      	movs	r0, r5
 8005ac0:	1aff      	subs	r7, r7, r3
 8005ac2:	0039      	movs	r1, r7
 8005ac4:	f7ff ffac 	bl	8005a20 <sbrk_aligned>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d040      	beq.n	8005b4e <_malloc_r+0xea>
 8005acc:	6823      	ldr	r3, [r4, #0]
 8005ace:	19db      	adds	r3, r3, r7
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	6833      	ldr	r3, [r6, #0]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	2a00      	cmp	r2, #0
 8005ad8:	d133      	bne.n	8005b42 <_malloc_r+0xde>
 8005ada:	9b00      	ldr	r3, [sp, #0]
 8005adc:	6033      	str	r3, [r6, #0]
 8005ade:	e019      	b.n	8005b14 <_malloc_r+0xb0>
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dac9      	bge.n	8005a78 <_malloc_r+0x14>
 8005ae4:	230c      	movs	r3, #12
 8005ae6:	602b      	str	r3, [r5, #0]
 8005ae8:	2000      	movs	r0, #0
 8005aea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005aec:	6821      	ldr	r1, [r4, #0]
 8005aee:	1bc9      	subs	r1, r1, r7
 8005af0:	d420      	bmi.n	8005b34 <_malloc_r+0xd0>
 8005af2:	290b      	cmp	r1, #11
 8005af4:	d90a      	bls.n	8005b0c <_malloc_r+0xa8>
 8005af6:	19e2      	adds	r2, r4, r7
 8005af8:	6027      	str	r7, [r4, #0]
 8005afa:	42a3      	cmp	r3, r4
 8005afc:	d104      	bne.n	8005b08 <_malloc_r+0xa4>
 8005afe:	6032      	str	r2, [r6, #0]
 8005b00:	6863      	ldr	r3, [r4, #4]
 8005b02:	6011      	str	r1, [r2, #0]
 8005b04:	6053      	str	r3, [r2, #4]
 8005b06:	e005      	b.n	8005b14 <_malloc_r+0xb0>
 8005b08:	605a      	str	r2, [r3, #4]
 8005b0a:	e7f9      	b.n	8005b00 <_malloc_r+0x9c>
 8005b0c:	6862      	ldr	r2, [r4, #4]
 8005b0e:	42a3      	cmp	r3, r4
 8005b10:	d10e      	bne.n	8005b30 <_malloc_r+0xcc>
 8005b12:	6032      	str	r2, [r6, #0]
 8005b14:	0028      	movs	r0, r5
 8005b16:	f000 f82d 	bl	8005b74 <__malloc_unlock>
 8005b1a:	0020      	movs	r0, r4
 8005b1c:	2207      	movs	r2, #7
 8005b1e:	300b      	adds	r0, #11
 8005b20:	1d23      	adds	r3, r4, #4
 8005b22:	4390      	bics	r0, r2
 8005b24:	1ac2      	subs	r2, r0, r3
 8005b26:	4298      	cmp	r0, r3
 8005b28:	d0df      	beq.n	8005aea <_malloc_r+0x86>
 8005b2a:	1a1b      	subs	r3, r3, r0
 8005b2c:	50a3      	str	r3, [r4, r2]
 8005b2e:	e7dc      	b.n	8005aea <_malloc_r+0x86>
 8005b30:	605a      	str	r2, [r3, #4]
 8005b32:	e7ef      	b.n	8005b14 <_malloc_r+0xb0>
 8005b34:	0023      	movs	r3, r4
 8005b36:	6864      	ldr	r4, [r4, #4]
 8005b38:	e7a6      	b.n	8005a88 <_malloc_r+0x24>
 8005b3a:	9c00      	ldr	r4, [sp, #0]
 8005b3c:	6863      	ldr	r3, [r4, #4]
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	e7ad      	b.n	8005a9e <_malloc_r+0x3a>
 8005b42:	001a      	movs	r2, r3
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	42a3      	cmp	r3, r4
 8005b48:	d1fb      	bne.n	8005b42 <_malloc_r+0xde>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	e7da      	b.n	8005b04 <_malloc_r+0xa0>
 8005b4e:	230c      	movs	r3, #12
 8005b50:	0028      	movs	r0, r5
 8005b52:	602b      	str	r3, [r5, #0]
 8005b54:	f000 f80e 	bl	8005b74 <__malloc_unlock>
 8005b58:	e7c6      	b.n	8005ae8 <_malloc_r+0x84>
 8005b5a:	6007      	str	r7, [r0, #0]
 8005b5c:	e7da      	b.n	8005b14 <_malloc_r+0xb0>
 8005b5e:	46c0      	nop			@ (mov r8, r8)
 8005b60:	20000378 	.word	0x20000378

08005b64 <__malloc_lock>:
 8005b64:	b510      	push	{r4, lr}
 8005b66:	4802      	ldr	r0, [pc, #8]	@ (8005b70 <__malloc_lock+0xc>)
 8005b68:	f000 fbd3 	bl	8006312 <__retarget_lock_acquire_recursive>
 8005b6c:	bd10      	pop	{r4, pc}
 8005b6e:	46c0      	nop			@ (mov r8, r8)
 8005b70:	200004bc 	.word	0x200004bc

08005b74 <__malloc_unlock>:
 8005b74:	b510      	push	{r4, lr}
 8005b76:	4802      	ldr	r0, [pc, #8]	@ (8005b80 <__malloc_unlock+0xc>)
 8005b78:	f000 fbcc 	bl	8006314 <__retarget_lock_release_recursive>
 8005b7c:	bd10      	pop	{r4, pc}
 8005b7e:	46c0      	nop			@ (mov r8, r8)
 8005b80:	200004bc 	.word	0x200004bc

08005b84 <_strtol_l.isra.0>:
 8005b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b86:	b085      	sub	sp, #20
 8005b88:	0017      	movs	r7, r2
 8005b8a:	001e      	movs	r6, r3
 8005b8c:	9003      	str	r0, [sp, #12]
 8005b8e:	9101      	str	r1, [sp, #4]
 8005b90:	2b24      	cmp	r3, #36	@ 0x24
 8005b92:	d823      	bhi.n	8005bdc <_strtol_l.isra.0+0x58>
 8005b94:	000c      	movs	r4, r1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d020      	beq.n	8005bdc <_strtol_l.isra.0+0x58>
 8005b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8005c90 <_strtol_l.isra.0+0x10c>)
 8005b9c:	2208      	movs	r2, #8
 8005b9e:	469c      	mov	ip, r3
 8005ba0:	0023      	movs	r3, r4
 8005ba2:	4661      	mov	r1, ip
 8005ba4:	781d      	ldrb	r5, [r3, #0]
 8005ba6:	3401      	adds	r4, #1
 8005ba8:	5d48      	ldrb	r0, [r1, r5]
 8005baa:	0001      	movs	r1, r0
 8005bac:	4011      	ands	r1, r2
 8005bae:	4210      	tst	r0, r2
 8005bb0:	d1f6      	bne.n	8005ba0 <_strtol_l.isra.0+0x1c>
 8005bb2:	2d2d      	cmp	r5, #45	@ 0x2d
 8005bb4:	d119      	bne.n	8005bea <_strtol_l.isra.0+0x66>
 8005bb6:	7825      	ldrb	r5, [r4, #0]
 8005bb8:	1c9c      	adds	r4, r3, #2
 8005bba:	2301      	movs	r3, #1
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	2210      	movs	r2, #16
 8005bc0:	0033      	movs	r3, r6
 8005bc2:	4393      	bics	r3, r2
 8005bc4:	d11d      	bne.n	8005c02 <_strtol_l.isra.0+0x7e>
 8005bc6:	2d30      	cmp	r5, #48	@ 0x30
 8005bc8:	d115      	bne.n	8005bf6 <_strtol_l.isra.0+0x72>
 8005bca:	2120      	movs	r1, #32
 8005bcc:	7823      	ldrb	r3, [r4, #0]
 8005bce:	438b      	bics	r3, r1
 8005bd0:	2b58      	cmp	r3, #88	@ 0x58
 8005bd2:	d110      	bne.n	8005bf6 <_strtol_l.isra.0+0x72>
 8005bd4:	7865      	ldrb	r5, [r4, #1]
 8005bd6:	3402      	adds	r4, #2
 8005bd8:	2610      	movs	r6, #16
 8005bda:	e012      	b.n	8005c02 <_strtol_l.isra.0+0x7e>
 8005bdc:	f000 fb6e 	bl	80062bc <__errno>
 8005be0:	2316      	movs	r3, #22
 8005be2:	6003      	str	r3, [r0, #0]
 8005be4:	2000      	movs	r0, #0
 8005be6:	b005      	add	sp, #20
 8005be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bea:	9100      	str	r1, [sp, #0]
 8005bec:	2d2b      	cmp	r5, #43	@ 0x2b
 8005bee:	d1e6      	bne.n	8005bbe <_strtol_l.isra.0+0x3a>
 8005bf0:	7825      	ldrb	r5, [r4, #0]
 8005bf2:	1c9c      	adds	r4, r3, #2
 8005bf4:	e7e3      	b.n	8005bbe <_strtol_l.isra.0+0x3a>
 8005bf6:	2e00      	cmp	r6, #0
 8005bf8:	d1ee      	bne.n	8005bd8 <_strtol_l.isra.0+0x54>
 8005bfa:	360a      	adds	r6, #10
 8005bfc:	2d30      	cmp	r5, #48	@ 0x30
 8005bfe:	d100      	bne.n	8005c02 <_strtol_l.isra.0+0x7e>
 8005c00:	3e02      	subs	r6, #2
 8005c02:	4a24      	ldr	r2, [pc, #144]	@ (8005c94 <_strtol_l.isra.0+0x110>)
 8005c04:	9b00      	ldr	r3, [sp, #0]
 8005c06:	4694      	mov	ip, r2
 8005c08:	4463      	add	r3, ip
 8005c0a:	0031      	movs	r1, r6
 8005c0c:	0018      	movs	r0, r3
 8005c0e:	9302      	str	r3, [sp, #8]
 8005c10:	f7fa fb12 	bl	8000238 <__aeabi_uidivmod>
 8005c14:	2200      	movs	r2, #0
 8005c16:	4684      	mov	ip, r0
 8005c18:	0010      	movs	r0, r2
 8005c1a:	002b      	movs	r3, r5
 8005c1c:	3b30      	subs	r3, #48	@ 0x30
 8005c1e:	2b09      	cmp	r3, #9
 8005c20:	d811      	bhi.n	8005c46 <_strtol_l.isra.0+0xc2>
 8005c22:	001d      	movs	r5, r3
 8005c24:	42ae      	cmp	r6, r5
 8005c26:	dd1d      	ble.n	8005c64 <_strtol_l.isra.0+0xe0>
 8005c28:	1c53      	adds	r3, r2, #1
 8005c2a:	d009      	beq.n	8005c40 <_strtol_l.isra.0+0xbc>
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	4252      	negs	r2, r2
 8005c30:	4584      	cmp	ip, r0
 8005c32:	d305      	bcc.n	8005c40 <_strtol_l.isra.0+0xbc>
 8005c34:	d101      	bne.n	8005c3a <_strtol_l.isra.0+0xb6>
 8005c36:	42a9      	cmp	r1, r5
 8005c38:	db11      	blt.n	8005c5e <_strtol_l.isra.0+0xda>
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	4370      	muls	r0, r6
 8005c3e:	1828      	adds	r0, r5, r0
 8005c40:	7825      	ldrb	r5, [r4, #0]
 8005c42:	3401      	adds	r4, #1
 8005c44:	e7e9      	b.n	8005c1a <_strtol_l.isra.0+0x96>
 8005c46:	002b      	movs	r3, r5
 8005c48:	3b41      	subs	r3, #65	@ 0x41
 8005c4a:	2b19      	cmp	r3, #25
 8005c4c:	d801      	bhi.n	8005c52 <_strtol_l.isra.0+0xce>
 8005c4e:	3d37      	subs	r5, #55	@ 0x37
 8005c50:	e7e8      	b.n	8005c24 <_strtol_l.isra.0+0xa0>
 8005c52:	002b      	movs	r3, r5
 8005c54:	3b61      	subs	r3, #97	@ 0x61
 8005c56:	2b19      	cmp	r3, #25
 8005c58:	d804      	bhi.n	8005c64 <_strtol_l.isra.0+0xe0>
 8005c5a:	3d57      	subs	r5, #87	@ 0x57
 8005c5c:	e7e2      	b.n	8005c24 <_strtol_l.isra.0+0xa0>
 8005c5e:	2201      	movs	r2, #1
 8005c60:	4252      	negs	r2, r2
 8005c62:	e7ed      	b.n	8005c40 <_strtol_l.isra.0+0xbc>
 8005c64:	1c53      	adds	r3, r2, #1
 8005c66:	d108      	bne.n	8005c7a <_strtol_l.isra.0+0xf6>
 8005c68:	2322      	movs	r3, #34	@ 0x22
 8005c6a:	9a03      	ldr	r2, [sp, #12]
 8005c6c:	9802      	ldr	r0, [sp, #8]
 8005c6e:	6013      	str	r3, [r2, #0]
 8005c70:	2f00      	cmp	r7, #0
 8005c72:	d0b8      	beq.n	8005be6 <_strtol_l.isra.0+0x62>
 8005c74:	1e63      	subs	r3, r4, #1
 8005c76:	9301      	str	r3, [sp, #4]
 8005c78:	e007      	b.n	8005c8a <_strtol_l.isra.0+0x106>
 8005c7a:	9b00      	ldr	r3, [sp, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d000      	beq.n	8005c82 <_strtol_l.isra.0+0xfe>
 8005c80:	4240      	negs	r0, r0
 8005c82:	2f00      	cmp	r7, #0
 8005c84:	d0af      	beq.n	8005be6 <_strtol_l.isra.0+0x62>
 8005c86:	2a00      	cmp	r2, #0
 8005c88:	d1f4      	bne.n	8005c74 <_strtol_l.isra.0+0xf0>
 8005c8a:	9b01      	ldr	r3, [sp, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
 8005c8e:	e7aa      	b.n	8005be6 <_strtol_l.isra.0+0x62>
 8005c90:	08007c19 	.word	0x08007c19
 8005c94:	7fffffff 	.word	0x7fffffff

08005c98 <strtol>:
 8005c98:	b510      	push	{r4, lr}
 8005c9a:	4c04      	ldr	r4, [pc, #16]	@ (8005cac <strtol+0x14>)
 8005c9c:	0013      	movs	r3, r2
 8005c9e:	000a      	movs	r2, r1
 8005ca0:	0001      	movs	r1, r0
 8005ca2:	6820      	ldr	r0, [r4, #0]
 8005ca4:	f7ff ff6e 	bl	8005b84 <_strtol_l.isra.0>
 8005ca8:	bd10      	pop	{r4, pc}
 8005caa:	46c0      	nop			@ (mov r8, r8)
 8005cac:	20000018 	.word	0x20000018

08005cb0 <std>:
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	b510      	push	{r4, lr}
 8005cb4:	0004      	movs	r4, r0
 8005cb6:	6003      	str	r3, [r0, #0]
 8005cb8:	6043      	str	r3, [r0, #4]
 8005cba:	6083      	str	r3, [r0, #8]
 8005cbc:	8181      	strh	r1, [r0, #12]
 8005cbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cc0:	81c2      	strh	r2, [r0, #14]
 8005cc2:	6103      	str	r3, [r0, #16]
 8005cc4:	6143      	str	r3, [r0, #20]
 8005cc6:	6183      	str	r3, [r0, #24]
 8005cc8:	0019      	movs	r1, r3
 8005cca:	2208      	movs	r2, #8
 8005ccc:	305c      	adds	r0, #92	@ 0x5c
 8005cce:	f000 fa4f 	bl	8006170 <memset>
 8005cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005d00 <std+0x50>)
 8005cd4:	6224      	str	r4, [r4, #32]
 8005cd6:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8005d04 <std+0x54>)
 8005cda:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8005d08 <std+0x58>)
 8005cde:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8005d0c <std+0x5c>)
 8005ce2:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8005d10 <std+0x60>)
 8005ce6:	429c      	cmp	r4, r3
 8005ce8:	d005      	beq.n	8005cf6 <std+0x46>
 8005cea:	4b0a      	ldr	r3, [pc, #40]	@ (8005d14 <std+0x64>)
 8005cec:	429c      	cmp	r4, r3
 8005cee:	d002      	beq.n	8005cf6 <std+0x46>
 8005cf0:	4b09      	ldr	r3, [pc, #36]	@ (8005d18 <std+0x68>)
 8005cf2:	429c      	cmp	r4, r3
 8005cf4:	d103      	bne.n	8005cfe <std+0x4e>
 8005cf6:	0020      	movs	r0, r4
 8005cf8:	3058      	adds	r0, #88	@ 0x58
 8005cfa:	f000 fb09 	bl	8006310 <__retarget_lock_init_recursive>
 8005cfe:	bd10      	pop	{r4, pc}
 8005d00:	08005f99 	.word	0x08005f99
 8005d04:	08005fc1 	.word	0x08005fc1
 8005d08:	08005ff9 	.word	0x08005ff9
 8005d0c:	08006025 	.word	0x08006025
 8005d10:	2000037c 	.word	0x2000037c
 8005d14:	200003e4 	.word	0x200003e4
 8005d18:	2000044c 	.word	0x2000044c

08005d1c <stdio_exit_handler>:
 8005d1c:	b510      	push	{r4, lr}
 8005d1e:	4a03      	ldr	r2, [pc, #12]	@ (8005d2c <stdio_exit_handler+0x10>)
 8005d20:	4903      	ldr	r1, [pc, #12]	@ (8005d30 <stdio_exit_handler+0x14>)
 8005d22:	4804      	ldr	r0, [pc, #16]	@ (8005d34 <stdio_exit_handler+0x18>)
 8005d24:	f000 f86c 	bl	8005e00 <_fwalk_sglue>
 8005d28:	bd10      	pop	{r4, pc}
 8005d2a:	46c0      	nop			@ (mov r8, r8)
 8005d2c:	2000000c 	.word	0x2000000c
 8005d30:	08006d15 	.word	0x08006d15
 8005d34:	2000001c 	.word	0x2000001c

08005d38 <cleanup_stdio>:
 8005d38:	6841      	ldr	r1, [r0, #4]
 8005d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d68 <cleanup_stdio+0x30>)
 8005d3c:	b510      	push	{r4, lr}
 8005d3e:	0004      	movs	r4, r0
 8005d40:	4299      	cmp	r1, r3
 8005d42:	d001      	beq.n	8005d48 <cleanup_stdio+0x10>
 8005d44:	f000 ffe6 	bl	8006d14 <_fflush_r>
 8005d48:	68a1      	ldr	r1, [r4, #8]
 8005d4a:	4b08      	ldr	r3, [pc, #32]	@ (8005d6c <cleanup_stdio+0x34>)
 8005d4c:	4299      	cmp	r1, r3
 8005d4e:	d002      	beq.n	8005d56 <cleanup_stdio+0x1e>
 8005d50:	0020      	movs	r0, r4
 8005d52:	f000 ffdf 	bl	8006d14 <_fflush_r>
 8005d56:	68e1      	ldr	r1, [r4, #12]
 8005d58:	4b05      	ldr	r3, [pc, #20]	@ (8005d70 <cleanup_stdio+0x38>)
 8005d5a:	4299      	cmp	r1, r3
 8005d5c:	d002      	beq.n	8005d64 <cleanup_stdio+0x2c>
 8005d5e:	0020      	movs	r0, r4
 8005d60:	f000 ffd8 	bl	8006d14 <_fflush_r>
 8005d64:	bd10      	pop	{r4, pc}
 8005d66:	46c0      	nop			@ (mov r8, r8)
 8005d68:	2000037c 	.word	0x2000037c
 8005d6c:	200003e4 	.word	0x200003e4
 8005d70:	2000044c 	.word	0x2000044c

08005d74 <global_stdio_init.part.0>:
 8005d74:	b510      	push	{r4, lr}
 8005d76:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <global_stdio_init.part.0+0x28>)
 8005d78:	4a09      	ldr	r2, [pc, #36]	@ (8005da0 <global_stdio_init.part.0+0x2c>)
 8005d7a:	2104      	movs	r1, #4
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	4809      	ldr	r0, [pc, #36]	@ (8005da4 <global_stdio_init.part.0+0x30>)
 8005d80:	2200      	movs	r2, #0
 8005d82:	f7ff ff95 	bl	8005cb0 <std>
 8005d86:	2201      	movs	r2, #1
 8005d88:	2109      	movs	r1, #9
 8005d8a:	4807      	ldr	r0, [pc, #28]	@ (8005da8 <global_stdio_init.part.0+0x34>)
 8005d8c:	f7ff ff90 	bl	8005cb0 <std>
 8005d90:	2202      	movs	r2, #2
 8005d92:	2112      	movs	r1, #18
 8005d94:	4805      	ldr	r0, [pc, #20]	@ (8005dac <global_stdio_init.part.0+0x38>)
 8005d96:	f7ff ff8b 	bl	8005cb0 <std>
 8005d9a:	bd10      	pop	{r4, pc}
 8005d9c:	200004b4 	.word	0x200004b4
 8005da0:	08005d1d 	.word	0x08005d1d
 8005da4:	2000037c 	.word	0x2000037c
 8005da8:	200003e4 	.word	0x200003e4
 8005dac:	2000044c 	.word	0x2000044c

08005db0 <__sfp_lock_acquire>:
 8005db0:	b510      	push	{r4, lr}
 8005db2:	4802      	ldr	r0, [pc, #8]	@ (8005dbc <__sfp_lock_acquire+0xc>)
 8005db4:	f000 faad 	bl	8006312 <__retarget_lock_acquire_recursive>
 8005db8:	bd10      	pop	{r4, pc}
 8005dba:	46c0      	nop			@ (mov r8, r8)
 8005dbc:	200004bd 	.word	0x200004bd

08005dc0 <__sfp_lock_release>:
 8005dc0:	b510      	push	{r4, lr}
 8005dc2:	4802      	ldr	r0, [pc, #8]	@ (8005dcc <__sfp_lock_release+0xc>)
 8005dc4:	f000 faa6 	bl	8006314 <__retarget_lock_release_recursive>
 8005dc8:	bd10      	pop	{r4, pc}
 8005dca:	46c0      	nop			@ (mov r8, r8)
 8005dcc:	200004bd 	.word	0x200004bd

08005dd0 <__sinit>:
 8005dd0:	b510      	push	{r4, lr}
 8005dd2:	0004      	movs	r4, r0
 8005dd4:	f7ff ffec 	bl	8005db0 <__sfp_lock_acquire>
 8005dd8:	6a23      	ldr	r3, [r4, #32]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d002      	beq.n	8005de4 <__sinit+0x14>
 8005dde:	f7ff ffef 	bl	8005dc0 <__sfp_lock_release>
 8005de2:	bd10      	pop	{r4, pc}
 8005de4:	4b04      	ldr	r3, [pc, #16]	@ (8005df8 <__sinit+0x28>)
 8005de6:	6223      	str	r3, [r4, #32]
 8005de8:	4b04      	ldr	r3, [pc, #16]	@ (8005dfc <__sinit+0x2c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1f6      	bne.n	8005dde <__sinit+0xe>
 8005df0:	f7ff ffc0 	bl	8005d74 <global_stdio_init.part.0>
 8005df4:	e7f3      	b.n	8005dde <__sinit+0xe>
 8005df6:	46c0      	nop			@ (mov r8, r8)
 8005df8:	08005d39 	.word	0x08005d39
 8005dfc:	200004b4 	.word	0x200004b4

08005e00 <_fwalk_sglue>:
 8005e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e02:	0014      	movs	r4, r2
 8005e04:	2600      	movs	r6, #0
 8005e06:	9000      	str	r0, [sp, #0]
 8005e08:	9101      	str	r1, [sp, #4]
 8005e0a:	68a5      	ldr	r5, [r4, #8]
 8005e0c:	6867      	ldr	r7, [r4, #4]
 8005e0e:	3f01      	subs	r7, #1
 8005e10:	d504      	bpl.n	8005e1c <_fwalk_sglue+0x1c>
 8005e12:	6824      	ldr	r4, [r4, #0]
 8005e14:	2c00      	cmp	r4, #0
 8005e16:	d1f8      	bne.n	8005e0a <_fwalk_sglue+0xa>
 8005e18:	0030      	movs	r0, r6
 8005e1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e1c:	89ab      	ldrh	r3, [r5, #12]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d908      	bls.n	8005e34 <_fwalk_sglue+0x34>
 8005e22:	220e      	movs	r2, #14
 8005e24:	5eab      	ldrsh	r3, [r5, r2]
 8005e26:	3301      	adds	r3, #1
 8005e28:	d004      	beq.n	8005e34 <_fwalk_sglue+0x34>
 8005e2a:	0029      	movs	r1, r5
 8005e2c:	9800      	ldr	r0, [sp, #0]
 8005e2e:	9b01      	ldr	r3, [sp, #4]
 8005e30:	4798      	blx	r3
 8005e32:	4306      	orrs	r6, r0
 8005e34:	3568      	adds	r5, #104	@ 0x68
 8005e36:	e7ea      	b.n	8005e0e <_fwalk_sglue+0xe>

08005e38 <iprintf>:
 8005e38:	b40f      	push	{r0, r1, r2, r3}
 8005e3a:	b507      	push	{r0, r1, r2, lr}
 8005e3c:	4905      	ldr	r1, [pc, #20]	@ (8005e54 <iprintf+0x1c>)
 8005e3e:	ab04      	add	r3, sp, #16
 8005e40:	6808      	ldr	r0, [r1, #0]
 8005e42:	cb04      	ldmia	r3!, {r2}
 8005e44:	6881      	ldr	r1, [r0, #8]
 8005e46:	9301      	str	r3, [sp, #4]
 8005e48:	f000 fc46 	bl	80066d8 <_vfiprintf_r>
 8005e4c:	b003      	add	sp, #12
 8005e4e:	bc08      	pop	{r3}
 8005e50:	b004      	add	sp, #16
 8005e52:	4718      	bx	r3
 8005e54:	20000018 	.word	0x20000018

08005e58 <putchar>:
 8005e58:	b510      	push	{r4, lr}
 8005e5a:	4b03      	ldr	r3, [pc, #12]	@ (8005e68 <putchar+0x10>)
 8005e5c:	0001      	movs	r1, r0
 8005e5e:	6818      	ldr	r0, [r3, #0]
 8005e60:	6882      	ldr	r2, [r0, #8]
 8005e62:	f000 ffee 	bl	8006e42 <_putc_r>
 8005e66:	bd10      	pop	{r4, pc}
 8005e68:	20000018 	.word	0x20000018

08005e6c <_puts_r>:
 8005e6c:	6a03      	ldr	r3, [r0, #32]
 8005e6e:	b570      	push	{r4, r5, r6, lr}
 8005e70:	0005      	movs	r5, r0
 8005e72:	000e      	movs	r6, r1
 8005e74:	6884      	ldr	r4, [r0, #8]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d101      	bne.n	8005e7e <_puts_r+0x12>
 8005e7a:	f7ff ffa9 	bl	8005dd0 <__sinit>
 8005e7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e80:	07db      	lsls	r3, r3, #31
 8005e82:	d405      	bmi.n	8005e90 <_puts_r+0x24>
 8005e84:	89a3      	ldrh	r3, [r4, #12]
 8005e86:	059b      	lsls	r3, r3, #22
 8005e88:	d402      	bmi.n	8005e90 <_puts_r+0x24>
 8005e8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e8c:	f000 fa41 	bl	8006312 <__retarget_lock_acquire_recursive>
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	071b      	lsls	r3, r3, #28
 8005e94:	d502      	bpl.n	8005e9c <_puts_r+0x30>
 8005e96:	6923      	ldr	r3, [r4, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d11f      	bne.n	8005edc <_puts_r+0x70>
 8005e9c:	0021      	movs	r1, r4
 8005e9e:	0028      	movs	r0, r5
 8005ea0:	f000 f908 	bl	80060b4 <__swsetup_r>
 8005ea4:	2800      	cmp	r0, #0
 8005ea6:	d019      	beq.n	8005edc <_puts_r+0x70>
 8005ea8:	2501      	movs	r5, #1
 8005eaa:	426d      	negs	r5, r5
 8005eac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005eae:	07db      	lsls	r3, r3, #31
 8005eb0:	d405      	bmi.n	8005ebe <_puts_r+0x52>
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	059b      	lsls	r3, r3, #22
 8005eb6:	d402      	bmi.n	8005ebe <_puts_r+0x52>
 8005eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005eba:	f000 fa2b 	bl	8006314 <__retarget_lock_release_recursive>
 8005ebe:	0028      	movs	r0, r5
 8005ec0:	bd70      	pop	{r4, r5, r6, pc}
 8005ec2:	3601      	adds	r6, #1
 8005ec4:	60a3      	str	r3, [r4, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	da04      	bge.n	8005ed4 <_puts_r+0x68>
 8005eca:	69a2      	ldr	r2, [r4, #24]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	dc16      	bgt.n	8005efe <_puts_r+0x92>
 8005ed0:	290a      	cmp	r1, #10
 8005ed2:	d014      	beq.n	8005efe <_puts_r+0x92>
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	6022      	str	r2, [r4, #0]
 8005eda:	7019      	strb	r1, [r3, #0]
 8005edc:	68a3      	ldr	r3, [r4, #8]
 8005ede:	7831      	ldrb	r1, [r6, #0]
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	2900      	cmp	r1, #0
 8005ee4:	d1ed      	bne.n	8005ec2 <_puts_r+0x56>
 8005ee6:	60a3      	str	r3, [r4, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	da0f      	bge.n	8005f0c <_puts_r+0xa0>
 8005eec:	0022      	movs	r2, r4
 8005eee:	0028      	movs	r0, r5
 8005ef0:	310a      	adds	r1, #10
 8005ef2:	f000 f89d 	bl	8006030 <__swbuf_r>
 8005ef6:	3001      	adds	r0, #1
 8005ef8:	d0d6      	beq.n	8005ea8 <_puts_r+0x3c>
 8005efa:	250a      	movs	r5, #10
 8005efc:	e7d6      	b.n	8005eac <_puts_r+0x40>
 8005efe:	0022      	movs	r2, r4
 8005f00:	0028      	movs	r0, r5
 8005f02:	f000 f895 	bl	8006030 <__swbuf_r>
 8005f06:	3001      	adds	r0, #1
 8005f08:	d1e8      	bne.n	8005edc <_puts_r+0x70>
 8005f0a:	e7cd      	b.n	8005ea8 <_puts_r+0x3c>
 8005f0c:	6823      	ldr	r3, [r4, #0]
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	6022      	str	r2, [r4, #0]
 8005f12:	220a      	movs	r2, #10
 8005f14:	701a      	strb	r2, [r3, #0]
 8005f16:	e7f0      	b.n	8005efa <_puts_r+0x8e>

08005f18 <puts>:
 8005f18:	b510      	push	{r4, lr}
 8005f1a:	4b03      	ldr	r3, [pc, #12]	@ (8005f28 <puts+0x10>)
 8005f1c:	0001      	movs	r1, r0
 8005f1e:	6818      	ldr	r0, [r3, #0]
 8005f20:	f7ff ffa4 	bl	8005e6c <_puts_r>
 8005f24:	bd10      	pop	{r4, pc}
 8005f26:	46c0      	nop			@ (mov r8, r8)
 8005f28:	20000018 	.word	0x20000018

08005f2c <sniprintf>:
 8005f2c:	b40c      	push	{r2, r3}
 8005f2e:	b530      	push	{r4, r5, lr}
 8005f30:	4b18      	ldr	r3, [pc, #96]	@ (8005f94 <sniprintf+0x68>)
 8005f32:	000c      	movs	r4, r1
 8005f34:	681d      	ldr	r5, [r3, #0]
 8005f36:	b09d      	sub	sp, #116	@ 0x74
 8005f38:	2900      	cmp	r1, #0
 8005f3a:	da08      	bge.n	8005f4e <sniprintf+0x22>
 8005f3c:	238b      	movs	r3, #139	@ 0x8b
 8005f3e:	2001      	movs	r0, #1
 8005f40:	602b      	str	r3, [r5, #0]
 8005f42:	4240      	negs	r0, r0
 8005f44:	b01d      	add	sp, #116	@ 0x74
 8005f46:	bc30      	pop	{r4, r5}
 8005f48:	bc08      	pop	{r3}
 8005f4a:	b002      	add	sp, #8
 8005f4c:	4718      	bx	r3
 8005f4e:	2382      	movs	r3, #130	@ 0x82
 8005f50:	466a      	mov	r2, sp
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	8293      	strh	r3, [r2, #20]
 8005f56:	2300      	movs	r3, #0
 8005f58:	9002      	str	r0, [sp, #8]
 8005f5a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005f5c:	9006      	str	r0, [sp, #24]
 8005f5e:	4299      	cmp	r1, r3
 8005f60:	d000      	beq.n	8005f64 <sniprintf+0x38>
 8005f62:	1e4b      	subs	r3, r1, #1
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	9307      	str	r3, [sp, #28]
 8005f68:	2301      	movs	r3, #1
 8005f6a:	466a      	mov	r2, sp
 8005f6c:	425b      	negs	r3, r3
 8005f6e:	82d3      	strh	r3, [r2, #22]
 8005f70:	0028      	movs	r0, r5
 8005f72:	ab21      	add	r3, sp, #132	@ 0x84
 8005f74:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005f76:	a902      	add	r1, sp, #8
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	f000 fa87 	bl	800648c <_svfiprintf_r>
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	da01      	bge.n	8005f86 <sniprintf+0x5a>
 8005f82:	238b      	movs	r3, #139	@ 0x8b
 8005f84:	602b      	str	r3, [r5, #0]
 8005f86:	2c00      	cmp	r4, #0
 8005f88:	d0dc      	beq.n	8005f44 <sniprintf+0x18>
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	9b02      	ldr	r3, [sp, #8]
 8005f8e:	701a      	strb	r2, [r3, #0]
 8005f90:	e7d8      	b.n	8005f44 <sniprintf+0x18>
 8005f92:	46c0      	nop			@ (mov r8, r8)
 8005f94:	20000018 	.word	0x20000018

08005f98 <__sread>:
 8005f98:	b570      	push	{r4, r5, r6, lr}
 8005f9a:	000c      	movs	r4, r1
 8005f9c:	250e      	movs	r5, #14
 8005f9e:	5f49      	ldrsh	r1, [r1, r5]
 8005fa0:	f000 f952 	bl	8006248 <_read_r>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	db03      	blt.n	8005fb0 <__sread+0x18>
 8005fa8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005faa:	181b      	adds	r3, r3, r0
 8005fac:	6563      	str	r3, [r4, #84]	@ 0x54
 8005fae:	bd70      	pop	{r4, r5, r6, pc}
 8005fb0:	89a3      	ldrh	r3, [r4, #12]
 8005fb2:	4a02      	ldr	r2, [pc, #8]	@ (8005fbc <__sread+0x24>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	81a3      	strh	r3, [r4, #12]
 8005fb8:	e7f9      	b.n	8005fae <__sread+0x16>
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	ffffefff 	.word	0xffffefff

08005fc0 <__swrite>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	001f      	movs	r7, r3
 8005fc4:	898b      	ldrh	r3, [r1, #12]
 8005fc6:	0005      	movs	r5, r0
 8005fc8:	000c      	movs	r4, r1
 8005fca:	0016      	movs	r6, r2
 8005fcc:	05db      	lsls	r3, r3, #23
 8005fce:	d505      	bpl.n	8005fdc <__swrite+0x1c>
 8005fd0:	230e      	movs	r3, #14
 8005fd2:	5ec9      	ldrsh	r1, [r1, r3]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	f000 f922 	bl	8006220 <_lseek_r>
 8005fdc:	89a3      	ldrh	r3, [r4, #12]
 8005fde:	4a05      	ldr	r2, [pc, #20]	@ (8005ff4 <__swrite+0x34>)
 8005fe0:	0028      	movs	r0, r5
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	81a3      	strh	r3, [r4, #12]
 8005fe6:	0032      	movs	r2, r6
 8005fe8:	230e      	movs	r3, #14
 8005fea:	5ee1      	ldrsh	r1, [r4, r3]
 8005fec:	003b      	movs	r3, r7
 8005fee:	f000 f951 	bl	8006294 <_write_r>
 8005ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff4:	ffffefff 	.word	0xffffefff

08005ff8 <__sseek>:
 8005ff8:	b570      	push	{r4, r5, r6, lr}
 8005ffa:	000c      	movs	r4, r1
 8005ffc:	250e      	movs	r5, #14
 8005ffe:	5f49      	ldrsh	r1, [r1, r5]
 8006000:	f000 f90e 	bl	8006220 <_lseek_r>
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	1c42      	adds	r2, r0, #1
 8006008:	d103      	bne.n	8006012 <__sseek+0x1a>
 800600a:	4a05      	ldr	r2, [pc, #20]	@ (8006020 <__sseek+0x28>)
 800600c:	4013      	ands	r3, r2
 800600e:	81a3      	strh	r3, [r4, #12]
 8006010:	bd70      	pop	{r4, r5, r6, pc}
 8006012:	2280      	movs	r2, #128	@ 0x80
 8006014:	0152      	lsls	r2, r2, #5
 8006016:	4313      	orrs	r3, r2
 8006018:	81a3      	strh	r3, [r4, #12]
 800601a:	6560      	str	r0, [r4, #84]	@ 0x54
 800601c:	e7f8      	b.n	8006010 <__sseek+0x18>
 800601e:	46c0      	nop			@ (mov r8, r8)
 8006020:	ffffefff 	.word	0xffffefff

08006024 <__sclose>:
 8006024:	b510      	push	{r4, lr}
 8006026:	230e      	movs	r3, #14
 8006028:	5ec9      	ldrsh	r1, [r1, r3]
 800602a:	f000 f8e7 	bl	80061fc <_close_r>
 800602e:	bd10      	pop	{r4, pc}

08006030 <__swbuf_r>:
 8006030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006032:	0006      	movs	r6, r0
 8006034:	000d      	movs	r5, r1
 8006036:	0014      	movs	r4, r2
 8006038:	2800      	cmp	r0, #0
 800603a:	d004      	beq.n	8006046 <__swbuf_r+0x16>
 800603c:	6a03      	ldr	r3, [r0, #32]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <__swbuf_r+0x16>
 8006042:	f7ff fec5 	bl	8005dd0 <__sinit>
 8006046:	69a3      	ldr	r3, [r4, #24]
 8006048:	60a3      	str	r3, [r4, #8]
 800604a:	89a3      	ldrh	r3, [r4, #12]
 800604c:	071b      	lsls	r3, r3, #28
 800604e:	d502      	bpl.n	8006056 <__swbuf_r+0x26>
 8006050:	6923      	ldr	r3, [r4, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d109      	bne.n	800606a <__swbuf_r+0x3a>
 8006056:	0021      	movs	r1, r4
 8006058:	0030      	movs	r0, r6
 800605a:	f000 f82b 	bl	80060b4 <__swsetup_r>
 800605e:	2800      	cmp	r0, #0
 8006060:	d003      	beq.n	800606a <__swbuf_r+0x3a>
 8006062:	2501      	movs	r5, #1
 8006064:	426d      	negs	r5, r5
 8006066:	0028      	movs	r0, r5
 8006068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	6820      	ldr	r0, [r4, #0]
 800606e:	b2ef      	uxtb	r7, r5
 8006070:	1ac0      	subs	r0, r0, r3
 8006072:	6963      	ldr	r3, [r4, #20]
 8006074:	b2ed      	uxtb	r5, r5
 8006076:	4283      	cmp	r3, r0
 8006078:	dc05      	bgt.n	8006086 <__swbuf_r+0x56>
 800607a:	0021      	movs	r1, r4
 800607c:	0030      	movs	r0, r6
 800607e:	f000 fe49 	bl	8006d14 <_fflush_r>
 8006082:	2800      	cmp	r0, #0
 8006084:	d1ed      	bne.n	8006062 <__swbuf_r+0x32>
 8006086:	68a3      	ldr	r3, [r4, #8]
 8006088:	3001      	adds	r0, #1
 800608a:	3b01      	subs	r3, #1
 800608c:	60a3      	str	r3, [r4, #8]
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	1c5a      	adds	r2, r3, #1
 8006092:	6022      	str	r2, [r4, #0]
 8006094:	701f      	strb	r7, [r3, #0]
 8006096:	6963      	ldr	r3, [r4, #20]
 8006098:	4283      	cmp	r3, r0
 800609a:	d004      	beq.n	80060a6 <__swbuf_r+0x76>
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	07db      	lsls	r3, r3, #31
 80060a0:	d5e1      	bpl.n	8006066 <__swbuf_r+0x36>
 80060a2:	2d0a      	cmp	r5, #10
 80060a4:	d1df      	bne.n	8006066 <__swbuf_r+0x36>
 80060a6:	0021      	movs	r1, r4
 80060a8:	0030      	movs	r0, r6
 80060aa:	f000 fe33 	bl	8006d14 <_fflush_r>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d0d9      	beq.n	8006066 <__swbuf_r+0x36>
 80060b2:	e7d6      	b.n	8006062 <__swbuf_r+0x32>

080060b4 <__swsetup_r>:
 80060b4:	4b2d      	ldr	r3, [pc, #180]	@ (800616c <__swsetup_r+0xb8>)
 80060b6:	b570      	push	{r4, r5, r6, lr}
 80060b8:	0005      	movs	r5, r0
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	000c      	movs	r4, r1
 80060be:	2800      	cmp	r0, #0
 80060c0:	d004      	beq.n	80060cc <__swsetup_r+0x18>
 80060c2:	6a03      	ldr	r3, [r0, #32]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d101      	bne.n	80060cc <__swsetup_r+0x18>
 80060c8:	f7ff fe82 	bl	8005dd0 <__sinit>
 80060cc:	220c      	movs	r2, #12
 80060ce:	5ea3      	ldrsh	r3, [r4, r2]
 80060d0:	071a      	lsls	r2, r3, #28
 80060d2:	d423      	bmi.n	800611c <__swsetup_r+0x68>
 80060d4:	06da      	lsls	r2, r3, #27
 80060d6:	d407      	bmi.n	80060e8 <__swsetup_r+0x34>
 80060d8:	2209      	movs	r2, #9
 80060da:	602a      	str	r2, [r5, #0]
 80060dc:	2240      	movs	r2, #64	@ 0x40
 80060de:	2001      	movs	r0, #1
 80060e0:	4313      	orrs	r3, r2
 80060e2:	81a3      	strh	r3, [r4, #12]
 80060e4:	4240      	negs	r0, r0
 80060e6:	e03a      	b.n	800615e <__swsetup_r+0xaa>
 80060e8:	075b      	lsls	r3, r3, #29
 80060ea:	d513      	bpl.n	8006114 <__swsetup_r+0x60>
 80060ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060ee:	2900      	cmp	r1, #0
 80060f0:	d008      	beq.n	8006104 <__swsetup_r+0x50>
 80060f2:	0023      	movs	r3, r4
 80060f4:	3344      	adds	r3, #68	@ 0x44
 80060f6:	4299      	cmp	r1, r3
 80060f8:	d002      	beq.n	8006100 <__swsetup_r+0x4c>
 80060fa:	0028      	movs	r0, r5
 80060fc:	f000 f91c 	bl	8006338 <_free_r>
 8006100:	2300      	movs	r3, #0
 8006102:	6363      	str	r3, [r4, #52]	@ 0x34
 8006104:	2224      	movs	r2, #36	@ 0x24
 8006106:	89a3      	ldrh	r3, [r4, #12]
 8006108:	4393      	bics	r3, r2
 800610a:	81a3      	strh	r3, [r4, #12]
 800610c:	2300      	movs	r3, #0
 800610e:	6063      	str	r3, [r4, #4]
 8006110:	6923      	ldr	r3, [r4, #16]
 8006112:	6023      	str	r3, [r4, #0]
 8006114:	2308      	movs	r3, #8
 8006116:	89a2      	ldrh	r2, [r4, #12]
 8006118:	4313      	orrs	r3, r2
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	6923      	ldr	r3, [r4, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10b      	bne.n	800613a <__swsetup_r+0x86>
 8006122:	21a0      	movs	r1, #160	@ 0xa0
 8006124:	2280      	movs	r2, #128	@ 0x80
 8006126:	89a3      	ldrh	r3, [r4, #12]
 8006128:	0089      	lsls	r1, r1, #2
 800612a:	0092      	lsls	r2, r2, #2
 800612c:	400b      	ands	r3, r1
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <__swsetup_r+0x86>
 8006132:	0021      	movs	r1, r4
 8006134:	0028      	movs	r0, r5
 8006136:	f000 fe43 	bl	8006dc0 <__smakebuf_r>
 800613a:	220c      	movs	r2, #12
 800613c:	5ea3      	ldrsh	r3, [r4, r2]
 800613e:	2101      	movs	r1, #1
 8006140:	001a      	movs	r2, r3
 8006142:	400a      	ands	r2, r1
 8006144:	420b      	tst	r3, r1
 8006146:	d00b      	beq.n	8006160 <__swsetup_r+0xac>
 8006148:	2200      	movs	r2, #0
 800614a:	60a2      	str	r2, [r4, #8]
 800614c:	6962      	ldr	r2, [r4, #20]
 800614e:	4252      	negs	r2, r2
 8006150:	61a2      	str	r2, [r4, #24]
 8006152:	2000      	movs	r0, #0
 8006154:	6922      	ldr	r2, [r4, #16]
 8006156:	4282      	cmp	r2, r0
 8006158:	d101      	bne.n	800615e <__swsetup_r+0xaa>
 800615a:	061a      	lsls	r2, r3, #24
 800615c:	d4be      	bmi.n	80060dc <__swsetup_r+0x28>
 800615e:	bd70      	pop	{r4, r5, r6, pc}
 8006160:	0799      	lsls	r1, r3, #30
 8006162:	d400      	bmi.n	8006166 <__swsetup_r+0xb2>
 8006164:	6962      	ldr	r2, [r4, #20]
 8006166:	60a2      	str	r2, [r4, #8]
 8006168:	e7f3      	b.n	8006152 <__swsetup_r+0x9e>
 800616a:	46c0      	nop			@ (mov r8, r8)
 800616c:	20000018 	.word	0x20000018

08006170 <memset>:
 8006170:	0003      	movs	r3, r0
 8006172:	1882      	adds	r2, r0, r2
 8006174:	4293      	cmp	r3, r2
 8006176:	d100      	bne.n	800617a <memset+0xa>
 8006178:	4770      	bx	lr
 800617a:	7019      	strb	r1, [r3, #0]
 800617c:	3301      	adds	r3, #1
 800617e:	e7f9      	b.n	8006174 <memset+0x4>

08006180 <strncpy>:
 8006180:	0003      	movs	r3, r0
 8006182:	b530      	push	{r4, r5, lr}
 8006184:	001d      	movs	r5, r3
 8006186:	2a00      	cmp	r2, #0
 8006188:	d006      	beq.n	8006198 <strncpy+0x18>
 800618a:	780c      	ldrb	r4, [r1, #0]
 800618c:	3a01      	subs	r2, #1
 800618e:	3301      	adds	r3, #1
 8006190:	702c      	strb	r4, [r5, #0]
 8006192:	3101      	adds	r1, #1
 8006194:	2c00      	cmp	r4, #0
 8006196:	d1f5      	bne.n	8006184 <strncpy+0x4>
 8006198:	2100      	movs	r1, #0
 800619a:	189a      	adds	r2, r3, r2
 800619c:	4293      	cmp	r3, r2
 800619e:	d100      	bne.n	80061a2 <strncpy+0x22>
 80061a0:	bd30      	pop	{r4, r5, pc}
 80061a2:	7019      	strb	r1, [r3, #0]
 80061a4:	3301      	adds	r3, #1
 80061a6:	e7f9      	b.n	800619c <strncpy+0x1c>

080061a8 <strrchr>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	2400      	movs	r4, #0
 80061ac:	b2cd      	uxtb	r5, r1
 80061ae:	b2c9      	uxtb	r1, r1
 80061b0:	42a1      	cmp	r1, r4
 80061b2:	d106      	bne.n	80061c2 <strrchr+0x1a>
 80061b4:	0029      	movs	r1, r5
 80061b6:	f000 fe8c 	bl	8006ed2 <strchr>
 80061ba:	0004      	movs	r4, r0
 80061bc:	e006      	b.n	80061cc <strrchr+0x24>
 80061be:	001c      	movs	r4, r3
 80061c0:	1c58      	adds	r0, r3, #1
 80061c2:	0029      	movs	r1, r5
 80061c4:	f000 fe85 	bl	8006ed2 <strchr>
 80061c8:	1e03      	subs	r3, r0, #0
 80061ca:	d1f8      	bne.n	80061be <strrchr+0x16>
 80061cc:	0020      	movs	r0, r4
 80061ce:	bd70      	pop	{r4, r5, r6, pc}

080061d0 <strstr>:
 80061d0:	780a      	ldrb	r2, [r1, #0]
 80061d2:	b530      	push	{r4, r5, lr}
 80061d4:	2a00      	cmp	r2, #0
 80061d6:	d10c      	bne.n	80061f2 <strstr+0x22>
 80061d8:	bd30      	pop	{r4, r5, pc}
 80061da:	429a      	cmp	r2, r3
 80061dc:	d108      	bne.n	80061f0 <strstr+0x20>
 80061de:	2301      	movs	r3, #1
 80061e0:	5ccc      	ldrb	r4, [r1, r3]
 80061e2:	2c00      	cmp	r4, #0
 80061e4:	d0f8      	beq.n	80061d8 <strstr+0x8>
 80061e6:	5cc5      	ldrb	r5, [r0, r3]
 80061e8:	42a5      	cmp	r5, r4
 80061ea:	d101      	bne.n	80061f0 <strstr+0x20>
 80061ec:	3301      	adds	r3, #1
 80061ee:	e7f7      	b.n	80061e0 <strstr+0x10>
 80061f0:	3001      	adds	r0, #1
 80061f2:	7803      	ldrb	r3, [r0, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d1f0      	bne.n	80061da <strstr+0xa>
 80061f8:	0018      	movs	r0, r3
 80061fa:	e7ed      	b.n	80061d8 <strstr+0x8>

080061fc <_close_r>:
 80061fc:	2300      	movs	r3, #0
 80061fe:	b570      	push	{r4, r5, r6, lr}
 8006200:	4d06      	ldr	r5, [pc, #24]	@ (800621c <_close_r+0x20>)
 8006202:	0004      	movs	r4, r0
 8006204:	0008      	movs	r0, r1
 8006206:	602b      	str	r3, [r5, #0]
 8006208:	f7fa fd19 	bl	8000c3e <_close>
 800620c:	1c43      	adds	r3, r0, #1
 800620e:	d103      	bne.n	8006218 <_close_r+0x1c>
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d000      	beq.n	8006218 <_close_r+0x1c>
 8006216:	6023      	str	r3, [r4, #0]
 8006218:	bd70      	pop	{r4, r5, r6, pc}
 800621a:	46c0      	nop			@ (mov r8, r8)
 800621c:	200004b8 	.word	0x200004b8

08006220 <_lseek_r>:
 8006220:	b570      	push	{r4, r5, r6, lr}
 8006222:	0004      	movs	r4, r0
 8006224:	0008      	movs	r0, r1
 8006226:	0011      	movs	r1, r2
 8006228:	001a      	movs	r2, r3
 800622a:	2300      	movs	r3, #0
 800622c:	4d05      	ldr	r5, [pc, #20]	@ (8006244 <_lseek_r+0x24>)
 800622e:	602b      	str	r3, [r5, #0]
 8006230:	f7fa fd26 	bl	8000c80 <_lseek>
 8006234:	1c43      	adds	r3, r0, #1
 8006236:	d103      	bne.n	8006240 <_lseek_r+0x20>
 8006238:	682b      	ldr	r3, [r5, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d000      	beq.n	8006240 <_lseek_r+0x20>
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	bd70      	pop	{r4, r5, r6, pc}
 8006242:	46c0      	nop			@ (mov r8, r8)
 8006244:	200004b8 	.word	0x200004b8

08006248 <_read_r>:
 8006248:	b570      	push	{r4, r5, r6, lr}
 800624a:	0004      	movs	r4, r0
 800624c:	0008      	movs	r0, r1
 800624e:	0011      	movs	r1, r2
 8006250:	001a      	movs	r2, r3
 8006252:	2300      	movs	r3, #0
 8006254:	4d05      	ldr	r5, [pc, #20]	@ (800626c <_read_r+0x24>)
 8006256:	602b      	str	r3, [r5, #0]
 8006258:	f7fa fcb8 	bl	8000bcc <_read>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d103      	bne.n	8006268 <_read_r+0x20>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d000      	beq.n	8006268 <_read_r+0x20>
 8006266:	6023      	str	r3, [r4, #0]
 8006268:	bd70      	pop	{r4, r5, r6, pc}
 800626a:	46c0      	nop			@ (mov r8, r8)
 800626c:	200004b8 	.word	0x200004b8

08006270 <_sbrk_r>:
 8006270:	2300      	movs	r3, #0
 8006272:	b570      	push	{r4, r5, r6, lr}
 8006274:	4d06      	ldr	r5, [pc, #24]	@ (8006290 <_sbrk_r+0x20>)
 8006276:	0004      	movs	r4, r0
 8006278:	0008      	movs	r0, r1
 800627a:	602b      	str	r3, [r5, #0]
 800627c:	f7fa fd0c 	bl	8000c98 <_sbrk>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d103      	bne.n	800628c <_sbrk_r+0x1c>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d000      	beq.n	800628c <_sbrk_r+0x1c>
 800628a:	6023      	str	r3, [r4, #0]
 800628c:	bd70      	pop	{r4, r5, r6, pc}
 800628e:	46c0      	nop			@ (mov r8, r8)
 8006290:	200004b8 	.word	0x200004b8

08006294 <_write_r>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	0004      	movs	r4, r0
 8006298:	0008      	movs	r0, r1
 800629a:	0011      	movs	r1, r2
 800629c:	001a      	movs	r2, r3
 800629e:	2300      	movs	r3, #0
 80062a0:	4d05      	ldr	r5, [pc, #20]	@ (80062b8 <_write_r+0x24>)
 80062a2:	602b      	str	r3, [r5, #0]
 80062a4:	f7fa fcaf 	bl	8000c06 <_write>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d103      	bne.n	80062b4 <_write_r+0x20>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d000      	beq.n	80062b4 <_write_r+0x20>
 80062b2:	6023      	str	r3, [r4, #0]
 80062b4:	bd70      	pop	{r4, r5, r6, pc}
 80062b6:	46c0      	nop			@ (mov r8, r8)
 80062b8:	200004b8 	.word	0x200004b8

080062bc <__errno>:
 80062bc:	4b01      	ldr	r3, [pc, #4]	@ (80062c4 <__errno+0x8>)
 80062be:	6818      	ldr	r0, [r3, #0]
 80062c0:	4770      	bx	lr
 80062c2:	46c0      	nop			@ (mov r8, r8)
 80062c4:	20000018 	.word	0x20000018

080062c8 <__libc_init_array>:
 80062c8:	b570      	push	{r4, r5, r6, lr}
 80062ca:	2600      	movs	r6, #0
 80062cc:	4c0c      	ldr	r4, [pc, #48]	@ (8006300 <__libc_init_array+0x38>)
 80062ce:	4d0d      	ldr	r5, [pc, #52]	@ (8006304 <__libc_init_array+0x3c>)
 80062d0:	1b64      	subs	r4, r4, r5
 80062d2:	10a4      	asrs	r4, r4, #2
 80062d4:	42a6      	cmp	r6, r4
 80062d6:	d109      	bne.n	80062ec <__libc_init_array+0x24>
 80062d8:	2600      	movs	r6, #0
 80062da:	f000 fe71 	bl	8006fc0 <_init>
 80062de:	4c0a      	ldr	r4, [pc, #40]	@ (8006308 <__libc_init_array+0x40>)
 80062e0:	4d0a      	ldr	r5, [pc, #40]	@ (800630c <__libc_init_array+0x44>)
 80062e2:	1b64      	subs	r4, r4, r5
 80062e4:	10a4      	asrs	r4, r4, #2
 80062e6:	42a6      	cmp	r6, r4
 80062e8:	d105      	bne.n	80062f6 <__libc_init_array+0x2e>
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	00b3      	lsls	r3, r6, #2
 80062ee:	58eb      	ldr	r3, [r5, r3]
 80062f0:	4798      	blx	r3
 80062f2:	3601      	adds	r6, #1
 80062f4:	e7ee      	b.n	80062d4 <__libc_init_array+0xc>
 80062f6:	00b3      	lsls	r3, r6, #2
 80062f8:	58eb      	ldr	r3, [r5, r3]
 80062fa:	4798      	blx	r3
 80062fc:	3601      	adds	r6, #1
 80062fe:	e7f2      	b.n	80062e6 <__libc_init_array+0x1e>
 8006300:	08007d54 	.word	0x08007d54
 8006304:	08007d54 	.word	0x08007d54
 8006308:	08007d58 	.word	0x08007d58
 800630c:	08007d54 	.word	0x08007d54

08006310 <__retarget_lock_init_recursive>:
 8006310:	4770      	bx	lr

08006312 <__retarget_lock_acquire_recursive>:
 8006312:	4770      	bx	lr

08006314 <__retarget_lock_release_recursive>:
 8006314:	4770      	bx	lr

08006316 <strcpy>:
 8006316:	0003      	movs	r3, r0
 8006318:	780a      	ldrb	r2, [r1, #0]
 800631a:	3101      	adds	r1, #1
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	3301      	adds	r3, #1
 8006320:	2a00      	cmp	r2, #0
 8006322:	d1f9      	bne.n	8006318 <strcpy+0x2>
 8006324:	4770      	bx	lr

08006326 <memcpy>:
 8006326:	2300      	movs	r3, #0
 8006328:	b510      	push	{r4, lr}
 800632a:	429a      	cmp	r2, r3
 800632c:	d100      	bne.n	8006330 <memcpy+0xa>
 800632e:	bd10      	pop	{r4, pc}
 8006330:	5ccc      	ldrb	r4, [r1, r3]
 8006332:	54c4      	strb	r4, [r0, r3]
 8006334:	3301      	adds	r3, #1
 8006336:	e7f8      	b.n	800632a <memcpy+0x4>

08006338 <_free_r>:
 8006338:	b570      	push	{r4, r5, r6, lr}
 800633a:	0005      	movs	r5, r0
 800633c:	1e0c      	subs	r4, r1, #0
 800633e:	d010      	beq.n	8006362 <_free_r+0x2a>
 8006340:	3c04      	subs	r4, #4
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	da00      	bge.n	800634a <_free_r+0x12>
 8006348:	18e4      	adds	r4, r4, r3
 800634a:	0028      	movs	r0, r5
 800634c:	f7ff fc0a 	bl	8005b64 <__malloc_lock>
 8006350:	4a1d      	ldr	r2, [pc, #116]	@ (80063c8 <_free_r+0x90>)
 8006352:	6813      	ldr	r3, [r2, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d105      	bne.n	8006364 <_free_r+0x2c>
 8006358:	6063      	str	r3, [r4, #4]
 800635a:	6014      	str	r4, [r2, #0]
 800635c:	0028      	movs	r0, r5
 800635e:	f7ff fc09 	bl	8005b74 <__malloc_unlock>
 8006362:	bd70      	pop	{r4, r5, r6, pc}
 8006364:	42a3      	cmp	r3, r4
 8006366:	d908      	bls.n	800637a <_free_r+0x42>
 8006368:	6820      	ldr	r0, [r4, #0]
 800636a:	1821      	adds	r1, r4, r0
 800636c:	428b      	cmp	r3, r1
 800636e:	d1f3      	bne.n	8006358 <_free_r+0x20>
 8006370:	6819      	ldr	r1, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	1809      	adds	r1, r1, r0
 8006376:	6021      	str	r1, [r4, #0]
 8006378:	e7ee      	b.n	8006358 <_free_r+0x20>
 800637a:	001a      	movs	r2, r3
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <_free_r+0x4e>
 8006382:	42a3      	cmp	r3, r4
 8006384:	d9f9      	bls.n	800637a <_free_r+0x42>
 8006386:	6811      	ldr	r1, [r2, #0]
 8006388:	1850      	adds	r0, r2, r1
 800638a:	42a0      	cmp	r0, r4
 800638c:	d10b      	bne.n	80063a6 <_free_r+0x6e>
 800638e:	6820      	ldr	r0, [r4, #0]
 8006390:	1809      	adds	r1, r1, r0
 8006392:	1850      	adds	r0, r2, r1
 8006394:	6011      	str	r1, [r2, #0]
 8006396:	4283      	cmp	r3, r0
 8006398:	d1e0      	bne.n	800635c <_free_r+0x24>
 800639a:	6818      	ldr	r0, [r3, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	1841      	adds	r1, r0, r1
 80063a0:	6011      	str	r1, [r2, #0]
 80063a2:	6053      	str	r3, [r2, #4]
 80063a4:	e7da      	b.n	800635c <_free_r+0x24>
 80063a6:	42a0      	cmp	r0, r4
 80063a8:	d902      	bls.n	80063b0 <_free_r+0x78>
 80063aa:	230c      	movs	r3, #12
 80063ac:	602b      	str	r3, [r5, #0]
 80063ae:	e7d5      	b.n	800635c <_free_r+0x24>
 80063b0:	6820      	ldr	r0, [r4, #0]
 80063b2:	1821      	adds	r1, r4, r0
 80063b4:	428b      	cmp	r3, r1
 80063b6:	d103      	bne.n	80063c0 <_free_r+0x88>
 80063b8:	6819      	ldr	r1, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	1809      	adds	r1, r1, r0
 80063be:	6021      	str	r1, [r4, #0]
 80063c0:	6063      	str	r3, [r4, #4]
 80063c2:	6054      	str	r4, [r2, #4]
 80063c4:	e7ca      	b.n	800635c <_free_r+0x24>
 80063c6:	46c0      	nop			@ (mov r8, r8)
 80063c8:	20000378 	.word	0x20000378

080063cc <__ssputs_r>:
 80063cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ce:	688e      	ldr	r6, [r1, #8]
 80063d0:	b085      	sub	sp, #20
 80063d2:	001f      	movs	r7, r3
 80063d4:	000c      	movs	r4, r1
 80063d6:	680b      	ldr	r3, [r1, #0]
 80063d8:	9002      	str	r0, [sp, #8]
 80063da:	9203      	str	r2, [sp, #12]
 80063dc:	42be      	cmp	r6, r7
 80063de:	d830      	bhi.n	8006442 <__ssputs_r+0x76>
 80063e0:	210c      	movs	r1, #12
 80063e2:	5e62      	ldrsh	r2, [r4, r1]
 80063e4:	2190      	movs	r1, #144	@ 0x90
 80063e6:	00c9      	lsls	r1, r1, #3
 80063e8:	420a      	tst	r2, r1
 80063ea:	d028      	beq.n	800643e <__ssputs_r+0x72>
 80063ec:	2003      	movs	r0, #3
 80063ee:	6921      	ldr	r1, [r4, #16]
 80063f0:	1a5b      	subs	r3, r3, r1
 80063f2:	9301      	str	r3, [sp, #4]
 80063f4:	6963      	ldr	r3, [r4, #20]
 80063f6:	4343      	muls	r3, r0
 80063f8:	9801      	ldr	r0, [sp, #4]
 80063fa:	0fdd      	lsrs	r5, r3, #31
 80063fc:	18ed      	adds	r5, r5, r3
 80063fe:	1c7b      	adds	r3, r7, #1
 8006400:	181b      	adds	r3, r3, r0
 8006402:	106d      	asrs	r5, r5, #1
 8006404:	42ab      	cmp	r3, r5
 8006406:	d900      	bls.n	800640a <__ssputs_r+0x3e>
 8006408:	001d      	movs	r5, r3
 800640a:	0552      	lsls	r2, r2, #21
 800640c:	d528      	bpl.n	8006460 <__ssputs_r+0x94>
 800640e:	0029      	movs	r1, r5
 8006410:	9802      	ldr	r0, [sp, #8]
 8006412:	f7ff fb27 	bl	8005a64 <_malloc_r>
 8006416:	1e06      	subs	r6, r0, #0
 8006418:	d02c      	beq.n	8006474 <__ssputs_r+0xa8>
 800641a:	9a01      	ldr	r2, [sp, #4]
 800641c:	6921      	ldr	r1, [r4, #16]
 800641e:	f7ff ff82 	bl	8006326 <memcpy>
 8006422:	89a2      	ldrh	r2, [r4, #12]
 8006424:	4b18      	ldr	r3, [pc, #96]	@ (8006488 <__ssputs_r+0xbc>)
 8006426:	401a      	ands	r2, r3
 8006428:	2380      	movs	r3, #128	@ 0x80
 800642a:	4313      	orrs	r3, r2
 800642c:	81a3      	strh	r3, [r4, #12]
 800642e:	9b01      	ldr	r3, [sp, #4]
 8006430:	6126      	str	r6, [r4, #16]
 8006432:	18f6      	adds	r6, r6, r3
 8006434:	6026      	str	r6, [r4, #0]
 8006436:	003e      	movs	r6, r7
 8006438:	6165      	str	r5, [r4, #20]
 800643a:	1aed      	subs	r5, r5, r3
 800643c:	60a5      	str	r5, [r4, #8]
 800643e:	42be      	cmp	r6, r7
 8006440:	d900      	bls.n	8006444 <__ssputs_r+0x78>
 8006442:	003e      	movs	r6, r7
 8006444:	0032      	movs	r2, r6
 8006446:	9903      	ldr	r1, [sp, #12]
 8006448:	6820      	ldr	r0, [r4, #0]
 800644a:	f000 fd30 	bl	8006eae <memmove>
 800644e:	2000      	movs	r0, #0
 8006450:	68a3      	ldr	r3, [r4, #8]
 8006452:	1b9b      	subs	r3, r3, r6
 8006454:	60a3      	str	r3, [r4, #8]
 8006456:	6823      	ldr	r3, [r4, #0]
 8006458:	199b      	adds	r3, r3, r6
 800645a:	6023      	str	r3, [r4, #0]
 800645c:	b005      	add	sp, #20
 800645e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006460:	002a      	movs	r2, r5
 8006462:	9802      	ldr	r0, [sp, #8]
 8006464:	f000 fd73 	bl	8006f4e <_realloc_r>
 8006468:	1e06      	subs	r6, r0, #0
 800646a:	d1e0      	bne.n	800642e <__ssputs_r+0x62>
 800646c:	6921      	ldr	r1, [r4, #16]
 800646e:	9802      	ldr	r0, [sp, #8]
 8006470:	f7ff ff62 	bl	8006338 <_free_r>
 8006474:	230c      	movs	r3, #12
 8006476:	2001      	movs	r0, #1
 8006478:	9a02      	ldr	r2, [sp, #8]
 800647a:	4240      	negs	r0, r0
 800647c:	6013      	str	r3, [r2, #0]
 800647e:	89a2      	ldrh	r2, [r4, #12]
 8006480:	3334      	adds	r3, #52	@ 0x34
 8006482:	4313      	orrs	r3, r2
 8006484:	81a3      	strh	r3, [r4, #12]
 8006486:	e7e9      	b.n	800645c <__ssputs_r+0x90>
 8006488:	fffffb7f 	.word	0xfffffb7f

0800648c <_svfiprintf_r>:
 800648c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800648e:	b0a1      	sub	sp, #132	@ 0x84
 8006490:	9003      	str	r0, [sp, #12]
 8006492:	001d      	movs	r5, r3
 8006494:	898b      	ldrh	r3, [r1, #12]
 8006496:	000f      	movs	r7, r1
 8006498:	0016      	movs	r6, r2
 800649a:	061b      	lsls	r3, r3, #24
 800649c:	d511      	bpl.n	80064c2 <_svfiprintf_r+0x36>
 800649e:	690b      	ldr	r3, [r1, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10e      	bne.n	80064c2 <_svfiprintf_r+0x36>
 80064a4:	2140      	movs	r1, #64	@ 0x40
 80064a6:	f7ff fadd 	bl	8005a64 <_malloc_r>
 80064aa:	6038      	str	r0, [r7, #0]
 80064ac:	6138      	str	r0, [r7, #16]
 80064ae:	2800      	cmp	r0, #0
 80064b0:	d105      	bne.n	80064be <_svfiprintf_r+0x32>
 80064b2:	230c      	movs	r3, #12
 80064b4:	9a03      	ldr	r2, [sp, #12]
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	2001      	movs	r0, #1
 80064ba:	4240      	negs	r0, r0
 80064bc:	e0cf      	b.n	800665e <_svfiprintf_r+0x1d2>
 80064be:	2340      	movs	r3, #64	@ 0x40
 80064c0:	617b      	str	r3, [r7, #20]
 80064c2:	2300      	movs	r3, #0
 80064c4:	ac08      	add	r4, sp, #32
 80064c6:	6163      	str	r3, [r4, #20]
 80064c8:	3320      	adds	r3, #32
 80064ca:	7663      	strb	r3, [r4, #25]
 80064cc:	3310      	adds	r3, #16
 80064ce:	76a3      	strb	r3, [r4, #26]
 80064d0:	9507      	str	r5, [sp, #28]
 80064d2:	0035      	movs	r5, r6
 80064d4:	782b      	ldrb	r3, [r5, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d001      	beq.n	80064de <_svfiprintf_r+0x52>
 80064da:	2b25      	cmp	r3, #37	@ 0x25
 80064dc:	d148      	bne.n	8006570 <_svfiprintf_r+0xe4>
 80064de:	1bab      	subs	r3, r5, r6
 80064e0:	9305      	str	r3, [sp, #20]
 80064e2:	42b5      	cmp	r5, r6
 80064e4:	d00b      	beq.n	80064fe <_svfiprintf_r+0x72>
 80064e6:	0032      	movs	r2, r6
 80064e8:	0039      	movs	r1, r7
 80064ea:	9803      	ldr	r0, [sp, #12]
 80064ec:	f7ff ff6e 	bl	80063cc <__ssputs_r>
 80064f0:	3001      	adds	r0, #1
 80064f2:	d100      	bne.n	80064f6 <_svfiprintf_r+0x6a>
 80064f4:	e0ae      	b.n	8006654 <_svfiprintf_r+0x1c8>
 80064f6:	6963      	ldr	r3, [r4, #20]
 80064f8:	9a05      	ldr	r2, [sp, #20]
 80064fa:	189b      	adds	r3, r3, r2
 80064fc:	6163      	str	r3, [r4, #20]
 80064fe:	782b      	ldrb	r3, [r5, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d100      	bne.n	8006506 <_svfiprintf_r+0x7a>
 8006504:	e0a6      	b.n	8006654 <_svfiprintf_r+0x1c8>
 8006506:	2201      	movs	r2, #1
 8006508:	2300      	movs	r3, #0
 800650a:	4252      	negs	r2, r2
 800650c:	6062      	str	r2, [r4, #4]
 800650e:	a904      	add	r1, sp, #16
 8006510:	3254      	adds	r2, #84	@ 0x54
 8006512:	1852      	adds	r2, r2, r1
 8006514:	1c6e      	adds	r6, r5, #1
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	60e3      	str	r3, [r4, #12]
 800651a:	60a3      	str	r3, [r4, #8]
 800651c:	7013      	strb	r3, [r2, #0]
 800651e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006520:	4b54      	ldr	r3, [pc, #336]	@ (8006674 <_svfiprintf_r+0x1e8>)
 8006522:	2205      	movs	r2, #5
 8006524:	0018      	movs	r0, r3
 8006526:	7831      	ldrb	r1, [r6, #0]
 8006528:	9305      	str	r3, [sp, #20]
 800652a:	f000 fd05 	bl	8006f38 <memchr>
 800652e:	1c75      	adds	r5, r6, #1
 8006530:	2800      	cmp	r0, #0
 8006532:	d11f      	bne.n	8006574 <_svfiprintf_r+0xe8>
 8006534:	6822      	ldr	r2, [r4, #0]
 8006536:	06d3      	lsls	r3, r2, #27
 8006538:	d504      	bpl.n	8006544 <_svfiprintf_r+0xb8>
 800653a:	2353      	movs	r3, #83	@ 0x53
 800653c:	a904      	add	r1, sp, #16
 800653e:	185b      	adds	r3, r3, r1
 8006540:	2120      	movs	r1, #32
 8006542:	7019      	strb	r1, [r3, #0]
 8006544:	0713      	lsls	r3, r2, #28
 8006546:	d504      	bpl.n	8006552 <_svfiprintf_r+0xc6>
 8006548:	2353      	movs	r3, #83	@ 0x53
 800654a:	a904      	add	r1, sp, #16
 800654c:	185b      	adds	r3, r3, r1
 800654e:	212b      	movs	r1, #43	@ 0x2b
 8006550:	7019      	strb	r1, [r3, #0]
 8006552:	7833      	ldrb	r3, [r6, #0]
 8006554:	2b2a      	cmp	r3, #42	@ 0x2a
 8006556:	d016      	beq.n	8006586 <_svfiprintf_r+0xfa>
 8006558:	0035      	movs	r5, r6
 800655a:	2100      	movs	r1, #0
 800655c:	200a      	movs	r0, #10
 800655e:	68e3      	ldr	r3, [r4, #12]
 8006560:	782a      	ldrb	r2, [r5, #0]
 8006562:	1c6e      	adds	r6, r5, #1
 8006564:	3a30      	subs	r2, #48	@ 0x30
 8006566:	2a09      	cmp	r2, #9
 8006568:	d950      	bls.n	800660c <_svfiprintf_r+0x180>
 800656a:	2900      	cmp	r1, #0
 800656c:	d111      	bne.n	8006592 <_svfiprintf_r+0x106>
 800656e:	e017      	b.n	80065a0 <_svfiprintf_r+0x114>
 8006570:	3501      	adds	r5, #1
 8006572:	e7af      	b.n	80064d4 <_svfiprintf_r+0x48>
 8006574:	9b05      	ldr	r3, [sp, #20]
 8006576:	6822      	ldr	r2, [r4, #0]
 8006578:	1ac0      	subs	r0, r0, r3
 800657a:	2301      	movs	r3, #1
 800657c:	4083      	lsls	r3, r0
 800657e:	4313      	orrs	r3, r2
 8006580:	002e      	movs	r6, r5
 8006582:	6023      	str	r3, [r4, #0]
 8006584:	e7cc      	b.n	8006520 <_svfiprintf_r+0x94>
 8006586:	9b07      	ldr	r3, [sp, #28]
 8006588:	1d19      	adds	r1, r3, #4
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	9107      	str	r1, [sp, #28]
 800658e:	2b00      	cmp	r3, #0
 8006590:	db01      	blt.n	8006596 <_svfiprintf_r+0x10a>
 8006592:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006594:	e004      	b.n	80065a0 <_svfiprintf_r+0x114>
 8006596:	425b      	negs	r3, r3
 8006598:	60e3      	str	r3, [r4, #12]
 800659a:	2302      	movs	r3, #2
 800659c:	4313      	orrs	r3, r2
 800659e:	6023      	str	r3, [r4, #0]
 80065a0:	782b      	ldrb	r3, [r5, #0]
 80065a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80065a4:	d10c      	bne.n	80065c0 <_svfiprintf_r+0x134>
 80065a6:	786b      	ldrb	r3, [r5, #1]
 80065a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80065aa:	d134      	bne.n	8006616 <_svfiprintf_r+0x18a>
 80065ac:	9b07      	ldr	r3, [sp, #28]
 80065ae:	3502      	adds	r5, #2
 80065b0:	1d1a      	adds	r2, r3, #4
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	9207      	str	r2, [sp, #28]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	da01      	bge.n	80065be <_svfiprintf_r+0x132>
 80065ba:	2301      	movs	r3, #1
 80065bc:	425b      	negs	r3, r3
 80065be:	9309      	str	r3, [sp, #36]	@ 0x24
 80065c0:	4e2d      	ldr	r6, [pc, #180]	@ (8006678 <_svfiprintf_r+0x1ec>)
 80065c2:	2203      	movs	r2, #3
 80065c4:	0030      	movs	r0, r6
 80065c6:	7829      	ldrb	r1, [r5, #0]
 80065c8:	f000 fcb6 	bl	8006f38 <memchr>
 80065cc:	2800      	cmp	r0, #0
 80065ce:	d006      	beq.n	80065de <_svfiprintf_r+0x152>
 80065d0:	2340      	movs	r3, #64	@ 0x40
 80065d2:	1b80      	subs	r0, r0, r6
 80065d4:	4083      	lsls	r3, r0
 80065d6:	6822      	ldr	r2, [r4, #0]
 80065d8:	3501      	adds	r5, #1
 80065da:	4313      	orrs	r3, r2
 80065dc:	6023      	str	r3, [r4, #0]
 80065de:	7829      	ldrb	r1, [r5, #0]
 80065e0:	2206      	movs	r2, #6
 80065e2:	4826      	ldr	r0, [pc, #152]	@ (800667c <_svfiprintf_r+0x1f0>)
 80065e4:	1c6e      	adds	r6, r5, #1
 80065e6:	7621      	strb	r1, [r4, #24]
 80065e8:	f000 fca6 	bl	8006f38 <memchr>
 80065ec:	2800      	cmp	r0, #0
 80065ee:	d038      	beq.n	8006662 <_svfiprintf_r+0x1d6>
 80065f0:	4b23      	ldr	r3, [pc, #140]	@ (8006680 <_svfiprintf_r+0x1f4>)
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d122      	bne.n	800663c <_svfiprintf_r+0x1b0>
 80065f6:	2207      	movs	r2, #7
 80065f8:	9b07      	ldr	r3, [sp, #28]
 80065fa:	3307      	adds	r3, #7
 80065fc:	4393      	bics	r3, r2
 80065fe:	3308      	adds	r3, #8
 8006600:	9307      	str	r3, [sp, #28]
 8006602:	6963      	ldr	r3, [r4, #20]
 8006604:	9a04      	ldr	r2, [sp, #16]
 8006606:	189b      	adds	r3, r3, r2
 8006608:	6163      	str	r3, [r4, #20]
 800660a:	e762      	b.n	80064d2 <_svfiprintf_r+0x46>
 800660c:	4343      	muls	r3, r0
 800660e:	0035      	movs	r5, r6
 8006610:	2101      	movs	r1, #1
 8006612:	189b      	adds	r3, r3, r2
 8006614:	e7a4      	b.n	8006560 <_svfiprintf_r+0xd4>
 8006616:	2300      	movs	r3, #0
 8006618:	200a      	movs	r0, #10
 800661a:	0019      	movs	r1, r3
 800661c:	3501      	adds	r5, #1
 800661e:	6063      	str	r3, [r4, #4]
 8006620:	782a      	ldrb	r2, [r5, #0]
 8006622:	1c6e      	adds	r6, r5, #1
 8006624:	3a30      	subs	r2, #48	@ 0x30
 8006626:	2a09      	cmp	r2, #9
 8006628:	d903      	bls.n	8006632 <_svfiprintf_r+0x1a6>
 800662a:	2b00      	cmp	r3, #0
 800662c:	d0c8      	beq.n	80065c0 <_svfiprintf_r+0x134>
 800662e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006630:	e7c6      	b.n	80065c0 <_svfiprintf_r+0x134>
 8006632:	4341      	muls	r1, r0
 8006634:	0035      	movs	r5, r6
 8006636:	2301      	movs	r3, #1
 8006638:	1889      	adds	r1, r1, r2
 800663a:	e7f1      	b.n	8006620 <_svfiprintf_r+0x194>
 800663c:	aa07      	add	r2, sp, #28
 800663e:	9200      	str	r2, [sp, #0]
 8006640:	0021      	movs	r1, r4
 8006642:	003a      	movs	r2, r7
 8006644:	4b0f      	ldr	r3, [pc, #60]	@ (8006684 <_svfiprintf_r+0x1f8>)
 8006646:	9803      	ldr	r0, [sp, #12]
 8006648:	e000      	b.n	800664c <_svfiprintf_r+0x1c0>
 800664a:	bf00      	nop
 800664c:	9004      	str	r0, [sp, #16]
 800664e:	9b04      	ldr	r3, [sp, #16]
 8006650:	3301      	adds	r3, #1
 8006652:	d1d6      	bne.n	8006602 <_svfiprintf_r+0x176>
 8006654:	89bb      	ldrh	r3, [r7, #12]
 8006656:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006658:	065b      	lsls	r3, r3, #25
 800665a:	d500      	bpl.n	800665e <_svfiprintf_r+0x1d2>
 800665c:	e72c      	b.n	80064b8 <_svfiprintf_r+0x2c>
 800665e:	b021      	add	sp, #132	@ 0x84
 8006660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006662:	aa07      	add	r2, sp, #28
 8006664:	9200      	str	r2, [sp, #0]
 8006666:	0021      	movs	r1, r4
 8006668:	003a      	movs	r2, r7
 800666a:	4b06      	ldr	r3, [pc, #24]	@ (8006684 <_svfiprintf_r+0x1f8>)
 800666c:	9803      	ldr	r0, [sp, #12]
 800666e:	f000 f9bf 	bl	80069f0 <_printf_i>
 8006672:	e7eb      	b.n	800664c <_svfiprintf_r+0x1c0>
 8006674:	08007d19 	.word	0x08007d19
 8006678:	08007d1f 	.word	0x08007d1f
 800667c:	08007d23 	.word	0x08007d23
 8006680:	00000000 	.word	0x00000000
 8006684:	080063cd 	.word	0x080063cd

08006688 <__sfputc_r>:
 8006688:	6893      	ldr	r3, [r2, #8]
 800668a:	b510      	push	{r4, lr}
 800668c:	3b01      	subs	r3, #1
 800668e:	6093      	str	r3, [r2, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	da04      	bge.n	800669e <__sfputc_r+0x16>
 8006694:	6994      	ldr	r4, [r2, #24]
 8006696:	42a3      	cmp	r3, r4
 8006698:	db07      	blt.n	80066aa <__sfputc_r+0x22>
 800669a:	290a      	cmp	r1, #10
 800669c:	d005      	beq.n	80066aa <__sfputc_r+0x22>
 800669e:	6813      	ldr	r3, [r2, #0]
 80066a0:	1c58      	adds	r0, r3, #1
 80066a2:	6010      	str	r0, [r2, #0]
 80066a4:	7019      	strb	r1, [r3, #0]
 80066a6:	0008      	movs	r0, r1
 80066a8:	bd10      	pop	{r4, pc}
 80066aa:	f7ff fcc1 	bl	8006030 <__swbuf_r>
 80066ae:	0001      	movs	r1, r0
 80066b0:	e7f9      	b.n	80066a6 <__sfputc_r+0x1e>

080066b2 <__sfputs_r>:
 80066b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b4:	0006      	movs	r6, r0
 80066b6:	000f      	movs	r7, r1
 80066b8:	0014      	movs	r4, r2
 80066ba:	18d5      	adds	r5, r2, r3
 80066bc:	42ac      	cmp	r4, r5
 80066be:	d101      	bne.n	80066c4 <__sfputs_r+0x12>
 80066c0:	2000      	movs	r0, #0
 80066c2:	e007      	b.n	80066d4 <__sfputs_r+0x22>
 80066c4:	7821      	ldrb	r1, [r4, #0]
 80066c6:	003a      	movs	r2, r7
 80066c8:	0030      	movs	r0, r6
 80066ca:	f7ff ffdd 	bl	8006688 <__sfputc_r>
 80066ce:	3401      	adds	r4, #1
 80066d0:	1c43      	adds	r3, r0, #1
 80066d2:	d1f3      	bne.n	80066bc <__sfputs_r+0xa>
 80066d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066d8 <_vfiprintf_r>:
 80066d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066da:	b0a1      	sub	sp, #132	@ 0x84
 80066dc:	000f      	movs	r7, r1
 80066de:	0015      	movs	r5, r2
 80066e0:	001e      	movs	r6, r3
 80066e2:	9003      	str	r0, [sp, #12]
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d004      	beq.n	80066f2 <_vfiprintf_r+0x1a>
 80066e8:	6a03      	ldr	r3, [r0, #32]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <_vfiprintf_r+0x1a>
 80066ee:	f7ff fb6f 	bl	8005dd0 <__sinit>
 80066f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066f4:	07db      	lsls	r3, r3, #31
 80066f6:	d405      	bmi.n	8006704 <_vfiprintf_r+0x2c>
 80066f8:	89bb      	ldrh	r3, [r7, #12]
 80066fa:	059b      	lsls	r3, r3, #22
 80066fc:	d402      	bmi.n	8006704 <_vfiprintf_r+0x2c>
 80066fe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006700:	f7ff fe07 	bl	8006312 <__retarget_lock_acquire_recursive>
 8006704:	89bb      	ldrh	r3, [r7, #12]
 8006706:	071b      	lsls	r3, r3, #28
 8006708:	d502      	bpl.n	8006710 <_vfiprintf_r+0x38>
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d113      	bne.n	8006738 <_vfiprintf_r+0x60>
 8006710:	0039      	movs	r1, r7
 8006712:	9803      	ldr	r0, [sp, #12]
 8006714:	f7ff fcce 	bl	80060b4 <__swsetup_r>
 8006718:	2800      	cmp	r0, #0
 800671a:	d00d      	beq.n	8006738 <_vfiprintf_r+0x60>
 800671c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800671e:	07db      	lsls	r3, r3, #31
 8006720:	d503      	bpl.n	800672a <_vfiprintf_r+0x52>
 8006722:	2001      	movs	r0, #1
 8006724:	4240      	negs	r0, r0
 8006726:	b021      	add	sp, #132	@ 0x84
 8006728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800672a:	89bb      	ldrh	r3, [r7, #12]
 800672c:	059b      	lsls	r3, r3, #22
 800672e:	d4f8      	bmi.n	8006722 <_vfiprintf_r+0x4a>
 8006730:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006732:	f7ff fdef 	bl	8006314 <__retarget_lock_release_recursive>
 8006736:	e7f4      	b.n	8006722 <_vfiprintf_r+0x4a>
 8006738:	2300      	movs	r3, #0
 800673a:	ac08      	add	r4, sp, #32
 800673c:	6163      	str	r3, [r4, #20]
 800673e:	3320      	adds	r3, #32
 8006740:	7663      	strb	r3, [r4, #25]
 8006742:	3310      	adds	r3, #16
 8006744:	76a3      	strb	r3, [r4, #26]
 8006746:	9607      	str	r6, [sp, #28]
 8006748:	002e      	movs	r6, r5
 800674a:	7833      	ldrb	r3, [r6, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <_vfiprintf_r+0x7c>
 8006750:	2b25      	cmp	r3, #37	@ 0x25
 8006752:	d148      	bne.n	80067e6 <_vfiprintf_r+0x10e>
 8006754:	1b73      	subs	r3, r6, r5
 8006756:	9305      	str	r3, [sp, #20]
 8006758:	42ae      	cmp	r6, r5
 800675a:	d00b      	beq.n	8006774 <_vfiprintf_r+0x9c>
 800675c:	002a      	movs	r2, r5
 800675e:	0039      	movs	r1, r7
 8006760:	9803      	ldr	r0, [sp, #12]
 8006762:	f7ff ffa6 	bl	80066b2 <__sfputs_r>
 8006766:	3001      	adds	r0, #1
 8006768:	d100      	bne.n	800676c <_vfiprintf_r+0x94>
 800676a:	e0ae      	b.n	80068ca <_vfiprintf_r+0x1f2>
 800676c:	6963      	ldr	r3, [r4, #20]
 800676e:	9a05      	ldr	r2, [sp, #20]
 8006770:	189b      	adds	r3, r3, r2
 8006772:	6163      	str	r3, [r4, #20]
 8006774:	7833      	ldrb	r3, [r6, #0]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d100      	bne.n	800677c <_vfiprintf_r+0xa4>
 800677a:	e0a6      	b.n	80068ca <_vfiprintf_r+0x1f2>
 800677c:	2201      	movs	r2, #1
 800677e:	2300      	movs	r3, #0
 8006780:	4252      	negs	r2, r2
 8006782:	6062      	str	r2, [r4, #4]
 8006784:	a904      	add	r1, sp, #16
 8006786:	3254      	adds	r2, #84	@ 0x54
 8006788:	1852      	adds	r2, r2, r1
 800678a:	1c75      	adds	r5, r6, #1
 800678c:	6023      	str	r3, [r4, #0]
 800678e:	60e3      	str	r3, [r4, #12]
 8006790:	60a3      	str	r3, [r4, #8]
 8006792:	7013      	strb	r3, [r2, #0]
 8006794:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006796:	4b59      	ldr	r3, [pc, #356]	@ (80068fc <_vfiprintf_r+0x224>)
 8006798:	2205      	movs	r2, #5
 800679a:	0018      	movs	r0, r3
 800679c:	7829      	ldrb	r1, [r5, #0]
 800679e:	9305      	str	r3, [sp, #20]
 80067a0:	f000 fbca 	bl	8006f38 <memchr>
 80067a4:	1c6e      	adds	r6, r5, #1
 80067a6:	2800      	cmp	r0, #0
 80067a8:	d11f      	bne.n	80067ea <_vfiprintf_r+0x112>
 80067aa:	6822      	ldr	r2, [r4, #0]
 80067ac:	06d3      	lsls	r3, r2, #27
 80067ae:	d504      	bpl.n	80067ba <_vfiprintf_r+0xe2>
 80067b0:	2353      	movs	r3, #83	@ 0x53
 80067b2:	a904      	add	r1, sp, #16
 80067b4:	185b      	adds	r3, r3, r1
 80067b6:	2120      	movs	r1, #32
 80067b8:	7019      	strb	r1, [r3, #0]
 80067ba:	0713      	lsls	r3, r2, #28
 80067bc:	d504      	bpl.n	80067c8 <_vfiprintf_r+0xf0>
 80067be:	2353      	movs	r3, #83	@ 0x53
 80067c0:	a904      	add	r1, sp, #16
 80067c2:	185b      	adds	r3, r3, r1
 80067c4:	212b      	movs	r1, #43	@ 0x2b
 80067c6:	7019      	strb	r1, [r3, #0]
 80067c8:	782b      	ldrb	r3, [r5, #0]
 80067ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80067cc:	d016      	beq.n	80067fc <_vfiprintf_r+0x124>
 80067ce:	002e      	movs	r6, r5
 80067d0:	2100      	movs	r1, #0
 80067d2:	200a      	movs	r0, #10
 80067d4:	68e3      	ldr	r3, [r4, #12]
 80067d6:	7832      	ldrb	r2, [r6, #0]
 80067d8:	1c75      	adds	r5, r6, #1
 80067da:	3a30      	subs	r2, #48	@ 0x30
 80067dc:	2a09      	cmp	r2, #9
 80067de:	d950      	bls.n	8006882 <_vfiprintf_r+0x1aa>
 80067e0:	2900      	cmp	r1, #0
 80067e2:	d111      	bne.n	8006808 <_vfiprintf_r+0x130>
 80067e4:	e017      	b.n	8006816 <_vfiprintf_r+0x13e>
 80067e6:	3601      	adds	r6, #1
 80067e8:	e7af      	b.n	800674a <_vfiprintf_r+0x72>
 80067ea:	9b05      	ldr	r3, [sp, #20]
 80067ec:	6822      	ldr	r2, [r4, #0]
 80067ee:	1ac0      	subs	r0, r0, r3
 80067f0:	2301      	movs	r3, #1
 80067f2:	4083      	lsls	r3, r0
 80067f4:	4313      	orrs	r3, r2
 80067f6:	0035      	movs	r5, r6
 80067f8:	6023      	str	r3, [r4, #0]
 80067fa:	e7cc      	b.n	8006796 <_vfiprintf_r+0xbe>
 80067fc:	9b07      	ldr	r3, [sp, #28]
 80067fe:	1d19      	adds	r1, r3, #4
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	9107      	str	r1, [sp, #28]
 8006804:	2b00      	cmp	r3, #0
 8006806:	db01      	blt.n	800680c <_vfiprintf_r+0x134>
 8006808:	930b      	str	r3, [sp, #44]	@ 0x2c
 800680a:	e004      	b.n	8006816 <_vfiprintf_r+0x13e>
 800680c:	425b      	negs	r3, r3
 800680e:	60e3      	str	r3, [r4, #12]
 8006810:	2302      	movs	r3, #2
 8006812:	4313      	orrs	r3, r2
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	7833      	ldrb	r3, [r6, #0]
 8006818:	2b2e      	cmp	r3, #46	@ 0x2e
 800681a:	d10c      	bne.n	8006836 <_vfiprintf_r+0x15e>
 800681c:	7873      	ldrb	r3, [r6, #1]
 800681e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006820:	d134      	bne.n	800688c <_vfiprintf_r+0x1b4>
 8006822:	9b07      	ldr	r3, [sp, #28]
 8006824:	3602      	adds	r6, #2
 8006826:	1d1a      	adds	r2, r3, #4
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	9207      	str	r2, [sp, #28]
 800682c:	2b00      	cmp	r3, #0
 800682e:	da01      	bge.n	8006834 <_vfiprintf_r+0x15c>
 8006830:	2301      	movs	r3, #1
 8006832:	425b      	negs	r3, r3
 8006834:	9309      	str	r3, [sp, #36]	@ 0x24
 8006836:	4d32      	ldr	r5, [pc, #200]	@ (8006900 <_vfiprintf_r+0x228>)
 8006838:	2203      	movs	r2, #3
 800683a:	0028      	movs	r0, r5
 800683c:	7831      	ldrb	r1, [r6, #0]
 800683e:	f000 fb7b 	bl	8006f38 <memchr>
 8006842:	2800      	cmp	r0, #0
 8006844:	d006      	beq.n	8006854 <_vfiprintf_r+0x17c>
 8006846:	2340      	movs	r3, #64	@ 0x40
 8006848:	1b40      	subs	r0, r0, r5
 800684a:	4083      	lsls	r3, r0
 800684c:	6822      	ldr	r2, [r4, #0]
 800684e:	3601      	adds	r6, #1
 8006850:	4313      	orrs	r3, r2
 8006852:	6023      	str	r3, [r4, #0]
 8006854:	7831      	ldrb	r1, [r6, #0]
 8006856:	2206      	movs	r2, #6
 8006858:	482a      	ldr	r0, [pc, #168]	@ (8006904 <_vfiprintf_r+0x22c>)
 800685a:	1c75      	adds	r5, r6, #1
 800685c:	7621      	strb	r1, [r4, #24]
 800685e:	f000 fb6b 	bl	8006f38 <memchr>
 8006862:	2800      	cmp	r0, #0
 8006864:	d040      	beq.n	80068e8 <_vfiprintf_r+0x210>
 8006866:	4b28      	ldr	r3, [pc, #160]	@ (8006908 <_vfiprintf_r+0x230>)
 8006868:	2b00      	cmp	r3, #0
 800686a:	d122      	bne.n	80068b2 <_vfiprintf_r+0x1da>
 800686c:	2207      	movs	r2, #7
 800686e:	9b07      	ldr	r3, [sp, #28]
 8006870:	3307      	adds	r3, #7
 8006872:	4393      	bics	r3, r2
 8006874:	3308      	adds	r3, #8
 8006876:	9307      	str	r3, [sp, #28]
 8006878:	6963      	ldr	r3, [r4, #20]
 800687a:	9a04      	ldr	r2, [sp, #16]
 800687c:	189b      	adds	r3, r3, r2
 800687e:	6163      	str	r3, [r4, #20]
 8006880:	e762      	b.n	8006748 <_vfiprintf_r+0x70>
 8006882:	4343      	muls	r3, r0
 8006884:	002e      	movs	r6, r5
 8006886:	2101      	movs	r1, #1
 8006888:	189b      	adds	r3, r3, r2
 800688a:	e7a4      	b.n	80067d6 <_vfiprintf_r+0xfe>
 800688c:	2300      	movs	r3, #0
 800688e:	200a      	movs	r0, #10
 8006890:	0019      	movs	r1, r3
 8006892:	3601      	adds	r6, #1
 8006894:	6063      	str	r3, [r4, #4]
 8006896:	7832      	ldrb	r2, [r6, #0]
 8006898:	1c75      	adds	r5, r6, #1
 800689a:	3a30      	subs	r2, #48	@ 0x30
 800689c:	2a09      	cmp	r2, #9
 800689e:	d903      	bls.n	80068a8 <_vfiprintf_r+0x1d0>
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d0c8      	beq.n	8006836 <_vfiprintf_r+0x15e>
 80068a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80068a6:	e7c6      	b.n	8006836 <_vfiprintf_r+0x15e>
 80068a8:	4341      	muls	r1, r0
 80068aa:	002e      	movs	r6, r5
 80068ac:	2301      	movs	r3, #1
 80068ae:	1889      	adds	r1, r1, r2
 80068b0:	e7f1      	b.n	8006896 <_vfiprintf_r+0x1be>
 80068b2:	aa07      	add	r2, sp, #28
 80068b4:	9200      	str	r2, [sp, #0]
 80068b6:	0021      	movs	r1, r4
 80068b8:	003a      	movs	r2, r7
 80068ba:	4b14      	ldr	r3, [pc, #80]	@ (800690c <_vfiprintf_r+0x234>)
 80068bc:	9803      	ldr	r0, [sp, #12]
 80068be:	e000      	b.n	80068c2 <_vfiprintf_r+0x1ea>
 80068c0:	bf00      	nop
 80068c2:	9004      	str	r0, [sp, #16]
 80068c4:	9b04      	ldr	r3, [sp, #16]
 80068c6:	3301      	adds	r3, #1
 80068c8:	d1d6      	bne.n	8006878 <_vfiprintf_r+0x1a0>
 80068ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80068cc:	07db      	lsls	r3, r3, #31
 80068ce:	d405      	bmi.n	80068dc <_vfiprintf_r+0x204>
 80068d0:	89bb      	ldrh	r3, [r7, #12]
 80068d2:	059b      	lsls	r3, r3, #22
 80068d4:	d402      	bmi.n	80068dc <_vfiprintf_r+0x204>
 80068d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80068d8:	f7ff fd1c 	bl	8006314 <__retarget_lock_release_recursive>
 80068dc:	89bb      	ldrh	r3, [r7, #12]
 80068de:	065b      	lsls	r3, r3, #25
 80068e0:	d500      	bpl.n	80068e4 <_vfiprintf_r+0x20c>
 80068e2:	e71e      	b.n	8006722 <_vfiprintf_r+0x4a>
 80068e4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80068e6:	e71e      	b.n	8006726 <_vfiprintf_r+0x4e>
 80068e8:	aa07      	add	r2, sp, #28
 80068ea:	9200      	str	r2, [sp, #0]
 80068ec:	0021      	movs	r1, r4
 80068ee:	003a      	movs	r2, r7
 80068f0:	4b06      	ldr	r3, [pc, #24]	@ (800690c <_vfiprintf_r+0x234>)
 80068f2:	9803      	ldr	r0, [sp, #12]
 80068f4:	f000 f87c 	bl	80069f0 <_printf_i>
 80068f8:	e7e3      	b.n	80068c2 <_vfiprintf_r+0x1ea>
 80068fa:	46c0      	nop			@ (mov r8, r8)
 80068fc:	08007d19 	.word	0x08007d19
 8006900:	08007d1f 	.word	0x08007d1f
 8006904:	08007d23 	.word	0x08007d23
 8006908:	00000000 	.word	0x00000000
 800690c:	080066b3 	.word	0x080066b3

08006910 <_printf_common>:
 8006910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006912:	0016      	movs	r6, r2
 8006914:	9301      	str	r3, [sp, #4]
 8006916:	688a      	ldr	r2, [r1, #8]
 8006918:	690b      	ldr	r3, [r1, #16]
 800691a:	000c      	movs	r4, r1
 800691c:	9000      	str	r0, [sp, #0]
 800691e:	4293      	cmp	r3, r2
 8006920:	da00      	bge.n	8006924 <_printf_common+0x14>
 8006922:	0013      	movs	r3, r2
 8006924:	0022      	movs	r2, r4
 8006926:	6033      	str	r3, [r6, #0]
 8006928:	3243      	adds	r2, #67	@ 0x43
 800692a:	7812      	ldrb	r2, [r2, #0]
 800692c:	2a00      	cmp	r2, #0
 800692e:	d001      	beq.n	8006934 <_printf_common+0x24>
 8006930:	3301      	adds	r3, #1
 8006932:	6033      	str	r3, [r6, #0]
 8006934:	6823      	ldr	r3, [r4, #0]
 8006936:	069b      	lsls	r3, r3, #26
 8006938:	d502      	bpl.n	8006940 <_printf_common+0x30>
 800693a:	6833      	ldr	r3, [r6, #0]
 800693c:	3302      	adds	r3, #2
 800693e:	6033      	str	r3, [r6, #0]
 8006940:	6822      	ldr	r2, [r4, #0]
 8006942:	2306      	movs	r3, #6
 8006944:	0015      	movs	r5, r2
 8006946:	401d      	ands	r5, r3
 8006948:	421a      	tst	r2, r3
 800694a:	d027      	beq.n	800699c <_printf_common+0x8c>
 800694c:	0023      	movs	r3, r4
 800694e:	3343      	adds	r3, #67	@ 0x43
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	1e5a      	subs	r2, r3, #1
 8006954:	4193      	sbcs	r3, r2
 8006956:	6822      	ldr	r2, [r4, #0]
 8006958:	0692      	lsls	r2, r2, #26
 800695a:	d430      	bmi.n	80069be <_printf_common+0xae>
 800695c:	0022      	movs	r2, r4
 800695e:	9901      	ldr	r1, [sp, #4]
 8006960:	9800      	ldr	r0, [sp, #0]
 8006962:	9d08      	ldr	r5, [sp, #32]
 8006964:	3243      	adds	r2, #67	@ 0x43
 8006966:	47a8      	blx	r5
 8006968:	3001      	adds	r0, #1
 800696a:	d025      	beq.n	80069b8 <_printf_common+0xa8>
 800696c:	2206      	movs	r2, #6
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	2500      	movs	r5, #0
 8006972:	4013      	ands	r3, r2
 8006974:	2b04      	cmp	r3, #4
 8006976:	d105      	bne.n	8006984 <_printf_common+0x74>
 8006978:	6833      	ldr	r3, [r6, #0]
 800697a:	68e5      	ldr	r5, [r4, #12]
 800697c:	1aed      	subs	r5, r5, r3
 800697e:	43eb      	mvns	r3, r5
 8006980:	17db      	asrs	r3, r3, #31
 8006982:	401d      	ands	r5, r3
 8006984:	68a3      	ldr	r3, [r4, #8]
 8006986:	6922      	ldr	r2, [r4, #16]
 8006988:	4293      	cmp	r3, r2
 800698a:	dd01      	ble.n	8006990 <_printf_common+0x80>
 800698c:	1a9b      	subs	r3, r3, r2
 800698e:	18ed      	adds	r5, r5, r3
 8006990:	2600      	movs	r6, #0
 8006992:	42b5      	cmp	r5, r6
 8006994:	d120      	bne.n	80069d8 <_printf_common+0xc8>
 8006996:	2000      	movs	r0, #0
 8006998:	e010      	b.n	80069bc <_printf_common+0xac>
 800699a:	3501      	adds	r5, #1
 800699c:	68e3      	ldr	r3, [r4, #12]
 800699e:	6832      	ldr	r2, [r6, #0]
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	42ab      	cmp	r3, r5
 80069a4:	ddd2      	ble.n	800694c <_printf_common+0x3c>
 80069a6:	0022      	movs	r2, r4
 80069a8:	2301      	movs	r3, #1
 80069aa:	9901      	ldr	r1, [sp, #4]
 80069ac:	9800      	ldr	r0, [sp, #0]
 80069ae:	9f08      	ldr	r7, [sp, #32]
 80069b0:	3219      	adds	r2, #25
 80069b2:	47b8      	blx	r7
 80069b4:	3001      	adds	r0, #1
 80069b6:	d1f0      	bne.n	800699a <_printf_common+0x8a>
 80069b8:	2001      	movs	r0, #1
 80069ba:	4240      	negs	r0, r0
 80069bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069be:	2030      	movs	r0, #48	@ 0x30
 80069c0:	18e1      	adds	r1, r4, r3
 80069c2:	3143      	adds	r1, #67	@ 0x43
 80069c4:	7008      	strb	r0, [r1, #0]
 80069c6:	0021      	movs	r1, r4
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	3145      	adds	r1, #69	@ 0x45
 80069cc:	7809      	ldrb	r1, [r1, #0]
 80069ce:	18a2      	adds	r2, r4, r2
 80069d0:	3243      	adds	r2, #67	@ 0x43
 80069d2:	3302      	adds	r3, #2
 80069d4:	7011      	strb	r1, [r2, #0]
 80069d6:	e7c1      	b.n	800695c <_printf_common+0x4c>
 80069d8:	0022      	movs	r2, r4
 80069da:	2301      	movs	r3, #1
 80069dc:	9901      	ldr	r1, [sp, #4]
 80069de:	9800      	ldr	r0, [sp, #0]
 80069e0:	9f08      	ldr	r7, [sp, #32]
 80069e2:	321a      	adds	r2, #26
 80069e4:	47b8      	blx	r7
 80069e6:	3001      	adds	r0, #1
 80069e8:	d0e6      	beq.n	80069b8 <_printf_common+0xa8>
 80069ea:	3601      	adds	r6, #1
 80069ec:	e7d1      	b.n	8006992 <_printf_common+0x82>
	...

080069f0 <_printf_i>:
 80069f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069f2:	b08b      	sub	sp, #44	@ 0x2c
 80069f4:	9206      	str	r2, [sp, #24]
 80069f6:	000a      	movs	r2, r1
 80069f8:	3243      	adds	r2, #67	@ 0x43
 80069fa:	9307      	str	r3, [sp, #28]
 80069fc:	9005      	str	r0, [sp, #20]
 80069fe:	9203      	str	r2, [sp, #12]
 8006a00:	7e0a      	ldrb	r2, [r1, #24]
 8006a02:	000c      	movs	r4, r1
 8006a04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006a06:	2a78      	cmp	r2, #120	@ 0x78
 8006a08:	d809      	bhi.n	8006a1e <_printf_i+0x2e>
 8006a0a:	2a62      	cmp	r2, #98	@ 0x62
 8006a0c:	d80b      	bhi.n	8006a26 <_printf_i+0x36>
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	d100      	bne.n	8006a14 <_printf_i+0x24>
 8006a12:	e0ba      	b.n	8006b8a <_printf_i+0x19a>
 8006a14:	497a      	ldr	r1, [pc, #488]	@ (8006c00 <_printf_i+0x210>)
 8006a16:	9104      	str	r1, [sp, #16]
 8006a18:	2a58      	cmp	r2, #88	@ 0x58
 8006a1a:	d100      	bne.n	8006a1e <_printf_i+0x2e>
 8006a1c:	e08e      	b.n	8006b3c <_printf_i+0x14c>
 8006a1e:	0025      	movs	r5, r4
 8006a20:	3542      	adds	r5, #66	@ 0x42
 8006a22:	702a      	strb	r2, [r5, #0]
 8006a24:	e022      	b.n	8006a6c <_printf_i+0x7c>
 8006a26:	0010      	movs	r0, r2
 8006a28:	3863      	subs	r0, #99	@ 0x63
 8006a2a:	2815      	cmp	r0, #21
 8006a2c:	d8f7      	bhi.n	8006a1e <_printf_i+0x2e>
 8006a2e:	f7f9 fb73 	bl	8000118 <__gnu_thumb1_case_shi>
 8006a32:	0016      	.short	0x0016
 8006a34:	fff6001f 	.word	0xfff6001f
 8006a38:	fff6fff6 	.word	0xfff6fff6
 8006a3c:	001ffff6 	.word	0x001ffff6
 8006a40:	fff6fff6 	.word	0xfff6fff6
 8006a44:	fff6fff6 	.word	0xfff6fff6
 8006a48:	0036009f 	.word	0x0036009f
 8006a4c:	fff6007e 	.word	0xfff6007e
 8006a50:	00b0fff6 	.word	0x00b0fff6
 8006a54:	0036fff6 	.word	0x0036fff6
 8006a58:	fff6fff6 	.word	0xfff6fff6
 8006a5c:	0082      	.short	0x0082
 8006a5e:	0025      	movs	r5, r4
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	3542      	adds	r5, #66	@ 0x42
 8006a64:	1d11      	adds	r1, r2, #4
 8006a66:	6019      	str	r1, [r3, #0]
 8006a68:	6813      	ldr	r3, [r2, #0]
 8006a6a:	702b      	strb	r3, [r5, #0]
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e09e      	b.n	8006bae <_printf_i+0x1be>
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	6809      	ldr	r1, [r1, #0]
 8006a74:	1d02      	adds	r2, r0, #4
 8006a76:	060d      	lsls	r5, r1, #24
 8006a78:	d50b      	bpl.n	8006a92 <_printf_i+0xa2>
 8006a7a:	6806      	ldr	r6, [r0, #0]
 8006a7c:	601a      	str	r2, [r3, #0]
 8006a7e:	2e00      	cmp	r6, #0
 8006a80:	da03      	bge.n	8006a8a <_printf_i+0x9a>
 8006a82:	232d      	movs	r3, #45	@ 0x2d
 8006a84:	9a03      	ldr	r2, [sp, #12]
 8006a86:	4276      	negs	r6, r6
 8006a88:	7013      	strb	r3, [r2, #0]
 8006a8a:	4b5d      	ldr	r3, [pc, #372]	@ (8006c00 <_printf_i+0x210>)
 8006a8c:	270a      	movs	r7, #10
 8006a8e:	9304      	str	r3, [sp, #16]
 8006a90:	e018      	b.n	8006ac4 <_printf_i+0xd4>
 8006a92:	6806      	ldr	r6, [r0, #0]
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	0649      	lsls	r1, r1, #25
 8006a98:	d5f1      	bpl.n	8006a7e <_printf_i+0x8e>
 8006a9a:	b236      	sxth	r6, r6
 8006a9c:	e7ef      	b.n	8006a7e <_printf_i+0x8e>
 8006a9e:	6808      	ldr	r0, [r1, #0]
 8006aa0:	6819      	ldr	r1, [r3, #0]
 8006aa2:	c940      	ldmia	r1!, {r6}
 8006aa4:	0605      	lsls	r5, r0, #24
 8006aa6:	d402      	bmi.n	8006aae <_printf_i+0xbe>
 8006aa8:	0640      	lsls	r0, r0, #25
 8006aaa:	d500      	bpl.n	8006aae <_printf_i+0xbe>
 8006aac:	b2b6      	uxth	r6, r6
 8006aae:	6019      	str	r1, [r3, #0]
 8006ab0:	4b53      	ldr	r3, [pc, #332]	@ (8006c00 <_printf_i+0x210>)
 8006ab2:	270a      	movs	r7, #10
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	2a6f      	cmp	r2, #111	@ 0x6f
 8006ab8:	d100      	bne.n	8006abc <_printf_i+0xcc>
 8006aba:	3f02      	subs	r7, #2
 8006abc:	0023      	movs	r3, r4
 8006abe:	2200      	movs	r2, #0
 8006ac0:	3343      	adds	r3, #67	@ 0x43
 8006ac2:	701a      	strb	r2, [r3, #0]
 8006ac4:	6863      	ldr	r3, [r4, #4]
 8006ac6:	60a3      	str	r3, [r4, #8]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	db06      	blt.n	8006ada <_printf_i+0xea>
 8006acc:	2104      	movs	r1, #4
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	9d03      	ldr	r5, [sp, #12]
 8006ad2:	438a      	bics	r2, r1
 8006ad4:	6022      	str	r2, [r4, #0]
 8006ad6:	4333      	orrs	r3, r6
 8006ad8:	d00c      	beq.n	8006af4 <_printf_i+0x104>
 8006ada:	9d03      	ldr	r5, [sp, #12]
 8006adc:	0030      	movs	r0, r6
 8006ade:	0039      	movs	r1, r7
 8006ae0:	f7f9 fbaa 	bl	8000238 <__aeabi_uidivmod>
 8006ae4:	9b04      	ldr	r3, [sp, #16]
 8006ae6:	3d01      	subs	r5, #1
 8006ae8:	5c5b      	ldrb	r3, [r3, r1]
 8006aea:	702b      	strb	r3, [r5, #0]
 8006aec:	0033      	movs	r3, r6
 8006aee:	0006      	movs	r6, r0
 8006af0:	429f      	cmp	r7, r3
 8006af2:	d9f3      	bls.n	8006adc <_printf_i+0xec>
 8006af4:	2f08      	cmp	r7, #8
 8006af6:	d109      	bne.n	8006b0c <_printf_i+0x11c>
 8006af8:	6823      	ldr	r3, [r4, #0]
 8006afa:	07db      	lsls	r3, r3, #31
 8006afc:	d506      	bpl.n	8006b0c <_printf_i+0x11c>
 8006afe:	6862      	ldr	r2, [r4, #4]
 8006b00:	6923      	ldr	r3, [r4, #16]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	dc02      	bgt.n	8006b0c <_printf_i+0x11c>
 8006b06:	2330      	movs	r3, #48	@ 0x30
 8006b08:	3d01      	subs	r5, #1
 8006b0a:	702b      	strb	r3, [r5, #0]
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	1b5b      	subs	r3, r3, r5
 8006b10:	6123      	str	r3, [r4, #16]
 8006b12:	9b07      	ldr	r3, [sp, #28]
 8006b14:	0021      	movs	r1, r4
 8006b16:	9300      	str	r3, [sp, #0]
 8006b18:	9805      	ldr	r0, [sp, #20]
 8006b1a:	9b06      	ldr	r3, [sp, #24]
 8006b1c:	aa09      	add	r2, sp, #36	@ 0x24
 8006b1e:	f7ff fef7 	bl	8006910 <_printf_common>
 8006b22:	3001      	adds	r0, #1
 8006b24:	d148      	bne.n	8006bb8 <_printf_i+0x1c8>
 8006b26:	2001      	movs	r0, #1
 8006b28:	4240      	negs	r0, r0
 8006b2a:	b00b      	add	sp, #44	@ 0x2c
 8006b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b2e:	2220      	movs	r2, #32
 8006b30:	6809      	ldr	r1, [r1, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	6022      	str	r2, [r4, #0]
 8006b36:	2278      	movs	r2, #120	@ 0x78
 8006b38:	4932      	ldr	r1, [pc, #200]	@ (8006c04 <_printf_i+0x214>)
 8006b3a:	9104      	str	r1, [sp, #16]
 8006b3c:	0021      	movs	r1, r4
 8006b3e:	3145      	adds	r1, #69	@ 0x45
 8006b40:	700a      	strb	r2, [r1, #0]
 8006b42:	6819      	ldr	r1, [r3, #0]
 8006b44:	6822      	ldr	r2, [r4, #0]
 8006b46:	c940      	ldmia	r1!, {r6}
 8006b48:	0610      	lsls	r0, r2, #24
 8006b4a:	d402      	bmi.n	8006b52 <_printf_i+0x162>
 8006b4c:	0650      	lsls	r0, r2, #25
 8006b4e:	d500      	bpl.n	8006b52 <_printf_i+0x162>
 8006b50:	b2b6      	uxth	r6, r6
 8006b52:	6019      	str	r1, [r3, #0]
 8006b54:	07d3      	lsls	r3, r2, #31
 8006b56:	d502      	bpl.n	8006b5e <_printf_i+0x16e>
 8006b58:	2320      	movs	r3, #32
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	6023      	str	r3, [r4, #0]
 8006b5e:	2e00      	cmp	r6, #0
 8006b60:	d001      	beq.n	8006b66 <_printf_i+0x176>
 8006b62:	2710      	movs	r7, #16
 8006b64:	e7aa      	b.n	8006abc <_printf_i+0xcc>
 8006b66:	2220      	movs	r2, #32
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	4393      	bics	r3, r2
 8006b6c:	6023      	str	r3, [r4, #0]
 8006b6e:	e7f8      	b.n	8006b62 <_printf_i+0x172>
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	680d      	ldr	r5, [r1, #0]
 8006b74:	1d10      	adds	r0, r2, #4
 8006b76:	6949      	ldr	r1, [r1, #20]
 8006b78:	6018      	str	r0, [r3, #0]
 8006b7a:	6813      	ldr	r3, [r2, #0]
 8006b7c:	062e      	lsls	r6, r5, #24
 8006b7e:	d501      	bpl.n	8006b84 <_printf_i+0x194>
 8006b80:	6019      	str	r1, [r3, #0]
 8006b82:	e002      	b.n	8006b8a <_printf_i+0x19a>
 8006b84:	066d      	lsls	r5, r5, #25
 8006b86:	d5fb      	bpl.n	8006b80 <_printf_i+0x190>
 8006b88:	8019      	strh	r1, [r3, #0]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	9d03      	ldr	r5, [sp, #12]
 8006b8e:	6123      	str	r3, [r4, #16]
 8006b90:	e7bf      	b.n	8006b12 <_printf_i+0x122>
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	1d11      	adds	r1, r2, #4
 8006b96:	6019      	str	r1, [r3, #0]
 8006b98:	6815      	ldr	r5, [r2, #0]
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	0028      	movs	r0, r5
 8006b9e:	6862      	ldr	r2, [r4, #4]
 8006ba0:	f000 f9ca 	bl	8006f38 <memchr>
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d001      	beq.n	8006bac <_printf_i+0x1bc>
 8006ba8:	1b40      	subs	r0, r0, r5
 8006baa:	6060      	str	r0, [r4, #4]
 8006bac:	6863      	ldr	r3, [r4, #4]
 8006bae:	6123      	str	r3, [r4, #16]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	9a03      	ldr	r2, [sp, #12]
 8006bb4:	7013      	strb	r3, [r2, #0]
 8006bb6:	e7ac      	b.n	8006b12 <_printf_i+0x122>
 8006bb8:	002a      	movs	r2, r5
 8006bba:	6923      	ldr	r3, [r4, #16]
 8006bbc:	9906      	ldr	r1, [sp, #24]
 8006bbe:	9805      	ldr	r0, [sp, #20]
 8006bc0:	9d07      	ldr	r5, [sp, #28]
 8006bc2:	47a8      	blx	r5
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d0ae      	beq.n	8006b26 <_printf_i+0x136>
 8006bc8:	6823      	ldr	r3, [r4, #0]
 8006bca:	079b      	lsls	r3, r3, #30
 8006bcc:	d415      	bmi.n	8006bfa <_printf_i+0x20a>
 8006bce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd0:	68e0      	ldr	r0, [r4, #12]
 8006bd2:	4298      	cmp	r0, r3
 8006bd4:	daa9      	bge.n	8006b2a <_printf_i+0x13a>
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	e7a7      	b.n	8006b2a <_printf_i+0x13a>
 8006bda:	0022      	movs	r2, r4
 8006bdc:	2301      	movs	r3, #1
 8006bde:	9906      	ldr	r1, [sp, #24]
 8006be0:	9805      	ldr	r0, [sp, #20]
 8006be2:	9e07      	ldr	r6, [sp, #28]
 8006be4:	3219      	adds	r2, #25
 8006be6:	47b0      	blx	r6
 8006be8:	3001      	adds	r0, #1
 8006bea:	d09c      	beq.n	8006b26 <_printf_i+0x136>
 8006bec:	3501      	adds	r5, #1
 8006bee:	68e3      	ldr	r3, [r4, #12]
 8006bf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bf2:	1a9b      	subs	r3, r3, r2
 8006bf4:	42ab      	cmp	r3, r5
 8006bf6:	dcf0      	bgt.n	8006bda <_printf_i+0x1ea>
 8006bf8:	e7e9      	b.n	8006bce <_printf_i+0x1de>
 8006bfa:	2500      	movs	r5, #0
 8006bfc:	e7f7      	b.n	8006bee <_printf_i+0x1fe>
 8006bfe:	46c0      	nop			@ (mov r8, r8)
 8006c00:	08007d2a 	.word	0x08007d2a
 8006c04:	08007d3b 	.word	0x08007d3b

08006c08 <__sflush_r>:
 8006c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c0a:	220c      	movs	r2, #12
 8006c0c:	5e8b      	ldrsh	r3, [r1, r2]
 8006c0e:	0005      	movs	r5, r0
 8006c10:	000c      	movs	r4, r1
 8006c12:	071a      	lsls	r2, r3, #28
 8006c14:	d456      	bmi.n	8006cc4 <__sflush_r+0xbc>
 8006c16:	684a      	ldr	r2, [r1, #4]
 8006c18:	2a00      	cmp	r2, #0
 8006c1a:	dc02      	bgt.n	8006c22 <__sflush_r+0x1a>
 8006c1c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006c1e:	2a00      	cmp	r2, #0
 8006c20:	dd4e      	ble.n	8006cc0 <__sflush_r+0xb8>
 8006c22:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006c24:	2f00      	cmp	r7, #0
 8006c26:	d04b      	beq.n	8006cc0 <__sflush_r+0xb8>
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2080      	movs	r0, #128	@ 0x80
 8006c2c:	682e      	ldr	r6, [r5, #0]
 8006c2e:	602a      	str	r2, [r5, #0]
 8006c30:	001a      	movs	r2, r3
 8006c32:	0140      	lsls	r0, r0, #5
 8006c34:	6a21      	ldr	r1, [r4, #32]
 8006c36:	4002      	ands	r2, r0
 8006c38:	4203      	tst	r3, r0
 8006c3a:	d033      	beq.n	8006ca4 <__sflush_r+0x9c>
 8006c3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c3e:	89a3      	ldrh	r3, [r4, #12]
 8006c40:	075b      	lsls	r3, r3, #29
 8006c42:	d506      	bpl.n	8006c52 <__sflush_r+0x4a>
 8006c44:	6863      	ldr	r3, [r4, #4]
 8006c46:	1ad2      	subs	r2, r2, r3
 8006c48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <__sflush_r+0x4a>
 8006c4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c50:	1ad2      	subs	r2, r2, r3
 8006c52:	2300      	movs	r3, #0
 8006c54:	0028      	movs	r0, r5
 8006c56:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006c58:	6a21      	ldr	r1, [r4, #32]
 8006c5a:	47b8      	blx	r7
 8006c5c:	89a2      	ldrh	r2, [r4, #12]
 8006c5e:	1c43      	adds	r3, r0, #1
 8006c60:	d106      	bne.n	8006c70 <__sflush_r+0x68>
 8006c62:	6829      	ldr	r1, [r5, #0]
 8006c64:	291d      	cmp	r1, #29
 8006c66:	d846      	bhi.n	8006cf6 <__sflush_r+0xee>
 8006c68:	4b29      	ldr	r3, [pc, #164]	@ (8006d10 <__sflush_r+0x108>)
 8006c6a:	40cb      	lsrs	r3, r1
 8006c6c:	07db      	lsls	r3, r3, #31
 8006c6e:	d542      	bpl.n	8006cf6 <__sflush_r+0xee>
 8006c70:	2300      	movs	r3, #0
 8006c72:	6063      	str	r3, [r4, #4]
 8006c74:	6923      	ldr	r3, [r4, #16]
 8006c76:	6023      	str	r3, [r4, #0]
 8006c78:	04d2      	lsls	r2, r2, #19
 8006c7a:	d505      	bpl.n	8006c88 <__sflush_r+0x80>
 8006c7c:	1c43      	adds	r3, r0, #1
 8006c7e:	d102      	bne.n	8006c86 <__sflush_r+0x7e>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d100      	bne.n	8006c88 <__sflush_r+0x80>
 8006c86:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c8a:	602e      	str	r6, [r5, #0]
 8006c8c:	2900      	cmp	r1, #0
 8006c8e:	d017      	beq.n	8006cc0 <__sflush_r+0xb8>
 8006c90:	0023      	movs	r3, r4
 8006c92:	3344      	adds	r3, #68	@ 0x44
 8006c94:	4299      	cmp	r1, r3
 8006c96:	d002      	beq.n	8006c9e <__sflush_r+0x96>
 8006c98:	0028      	movs	r0, r5
 8006c9a:	f7ff fb4d 	bl	8006338 <_free_r>
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ca2:	e00d      	b.n	8006cc0 <__sflush_r+0xb8>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	0028      	movs	r0, r5
 8006ca8:	47b8      	blx	r7
 8006caa:	0002      	movs	r2, r0
 8006cac:	1c43      	adds	r3, r0, #1
 8006cae:	d1c6      	bne.n	8006c3e <__sflush_r+0x36>
 8006cb0:	682b      	ldr	r3, [r5, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0c3      	beq.n	8006c3e <__sflush_r+0x36>
 8006cb6:	2b1d      	cmp	r3, #29
 8006cb8:	d001      	beq.n	8006cbe <__sflush_r+0xb6>
 8006cba:	2b16      	cmp	r3, #22
 8006cbc:	d11a      	bne.n	8006cf4 <__sflush_r+0xec>
 8006cbe:	602e      	str	r6, [r5, #0]
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	e01e      	b.n	8006d02 <__sflush_r+0xfa>
 8006cc4:	690e      	ldr	r6, [r1, #16]
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	d0fa      	beq.n	8006cc0 <__sflush_r+0xb8>
 8006cca:	680f      	ldr	r7, [r1, #0]
 8006ccc:	600e      	str	r6, [r1, #0]
 8006cce:	1bba      	subs	r2, r7, r6
 8006cd0:	9201      	str	r2, [sp, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	079b      	lsls	r3, r3, #30
 8006cd6:	d100      	bne.n	8006cda <__sflush_r+0xd2>
 8006cd8:	694a      	ldr	r2, [r1, #20]
 8006cda:	60a2      	str	r2, [r4, #8]
 8006cdc:	9b01      	ldr	r3, [sp, #4]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	ddee      	ble.n	8006cc0 <__sflush_r+0xb8>
 8006ce2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006ce4:	0032      	movs	r2, r6
 8006ce6:	001f      	movs	r7, r3
 8006ce8:	0028      	movs	r0, r5
 8006cea:	9b01      	ldr	r3, [sp, #4]
 8006cec:	6a21      	ldr	r1, [r4, #32]
 8006cee:	47b8      	blx	r7
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	dc07      	bgt.n	8006d04 <__sflush_r+0xfc>
 8006cf4:	89a2      	ldrh	r2, [r4, #12]
 8006cf6:	2340      	movs	r3, #64	@ 0x40
 8006cf8:	2001      	movs	r0, #1
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	b21b      	sxth	r3, r3
 8006cfe:	81a3      	strh	r3, [r4, #12]
 8006d00:	4240      	negs	r0, r0
 8006d02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d04:	9b01      	ldr	r3, [sp, #4]
 8006d06:	1836      	adds	r6, r6, r0
 8006d08:	1a1b      	subs	r3, r3, r0
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	e7e6      	b.n	8006cdc <__sflush_r+0xd4>
 8006d0e:	46c0      	nop			@ (mov r8, r8)
 8006d10:	20400001 	.word	0x20400001

08006d14 <_fflush_r>:
 8006d14:	690b      	ldr	r3, [r1, #16]
 8006d16:	b570      	push	{r4, r5, r6, lr}
 8006d18:	0005      	movs	r5, r0
 8006d1a:	000c      	movs	r4, r1
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <_fflush_r+0x12>
 8006d20:	2500      	movs	r5, #0
 8006d22:	0028      	movs	r0, r5
 8006d24:	bd70      	pop	{r4, r5, r6, pc}
 8006d26:	2800      	cmp	r0, #0
 8006d28:	d004      	beq.n	8006d34 <_fflush_r+0x20>
 8006d2a:	6a03      	ldr	r3, [r0, #32]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <_fflush_r+0x20>
 8006d30:	f7ff f84e 	bl	8005dd0 <__sinit>
 8006d34:	220c      	movs	r2, #12
 8006d36:	5ea3      	ldrsh	r3, [r4, r2]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0f1      	beq.n	8006d20 <_fflush_r+0xc>
 8006d3c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d3e:	07d2      	lsls	r2, r2, #31
 8006d40:	d404      	bmi.n	8006d4c <_fflush_r+0x38>
 8006d42:	059b      	lsls	r3, r3, #22
 8006d44:	d402      	bmi.n	8006d4c <_fflush_r+0x38>
 8006d46:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d48:	f7ff fae3 	bl	8006312 <__retarget_lock_acquire_recursive>
 8006d4c:	0028      	movs	r0, r5
 8006d4e:	0021      	movs	r1, r4
 8006d50:	f7ff ff5a 	bl	8006c08 <__sflush_r>
 8006d54:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d56:	0005      	movs	r5, r0
 8006d58:	07db      	lsls	r3, r3, #31
 8006d5a:	d4e2      	bmi.n	8006d22 <_fflush_r+0xe>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	059b      	lsls	r3, r3, #22
 8006d60:	d4df      	bmi.n	8006d22 <_fflush_r+0xe>
 8006d62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d64:	f7ff fad6 	bl	8006314 <__retarget_lock_release_recursive>
 8006d68:	e7db      	b.n	8006d22 <_fflush_r+0xe>
	...

08006d6c <__swhatbuf_r>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	000e      	movs	r6, r1
 8006d70:	001d      	movs	r5, r3
 8006d72:	230e      	movs	r3, #14
 8006d74:	5ec9      	ldrsh	r1, [r1, r3]
 8006d76:	0014      	movs	r4, r2
 8006d78:	b096      	sub	sp, #88	@ 0x58
 8006d7a:	2900      	cmp	r1, #0
 8006d7c:	da0c      	bge.n	8006d98 <__swhatbuf_r+0x2c>
 8006d7e:	89b2      	ldrh	r2, [r6, #12]
 8006d80:	2380      	movs	r3, #128	@ 0x80
 8006d82:	0011      	movs	r1, r2
 8006d84:	4019      	ands	r1, r3
 8006d86:	421a      	tst	r2, r3
 8006d88:	d114      	bne.n	8006db4 <__swhatbuf_r+0x48>
 8006d8a:	2380      	movs	r3, #128	@ 0x80
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	2000      	movs	r0, #0
 8006d90:	6029      	str	r1, [r5, #0]
 8006d92:	6023      	str	r3, [r4, #0]
 8006d94:	b016      	add	sp, #88	@ 0x58
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	466a      	mov	r2, sp
 8006d9a:	f000 f8a9 	bl	8006ef0 <_fstat_r>
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	dbed      	blt.n	8006d7e <__swhatbuf_r+0x12>
 8006da2:	23f0      	movs	r3, #240	@ 0xf0
 8006da4:	9901      	ldr	r1, [sp, #4]
 8006da6:	021b      	lsls	r3, r3, #8
 8006da8:	4019      	ands	r1, r3
 8006daa:	4b04      	ldr	r3, [pc, #16]	@ (8006dbc <__swhatbuf_r+0x50>)
 8006dac:	18c9      	adds	r1, r1, r3
 8006dae:	424b      	negs	r3, r1
 8006db0:	4159      	adcs	r1, r3
 8006db2:	e7ea      	b.n	8006d8a <__swhatbuf_r+0x1e>
 8006db4:	2100      	movs	r1, #0
 8006db6:	2340      	movs	r3, #64	@ 0x40
 8006db8:	e7e9      	b.n	8006d8e <__swhatbuf_r+0x22>
 8006dba:	46c0      	nop			@ (mov r8, r8)
 8006dbc:	ffffe000 	.word	0xffffe000

08006dc0 <__smakebuf_r>:
 8006dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dc2:	2602      	movs	r6, #2
 8006dc4:	898b      	ldrh	r3, [r1, #12]
 8006dc6:	0005      	movs	r5, r0
 8006dc8:	000c      	movs	r4, r1
 8006dca:	b085      	sub	sp, #20
 8006dcc:	4233      	tst	r3, r6
 8006dce:	d007      	beq.n	8006de0 <__smakebuf_r+0x20>
 8006dd0:	0023      	movs	r3, r4
 8006dd2:	3347      	adds	r3, #71	@ 0x47
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	6123      	str	r3, [r4, #16]
 8006dd8:	2301      	movs	r3, #1
 8006dda:	6163      	str	r3, [r4, #20]
 8006ddc:	b005      	add	sp, #20
 8006dde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de0:	ab03      	add	r3, sp, #12
 8006de2:	aa02      	add	r2, sp, #8
 8006de4:	f7ff ffc2 	bl	8006d6c <__swhatbuf_r>
 8006de8:	9f02      	ldr	r7, [sp, #8]
 8006dea:	9001      	str	r0, [sp, #4]
 8006dec:	0039      	movs	r1, r7
 8006dee:	0028      	movs	r0, r5
 8006df0:	f7fe fe38 	bl	8005a64 <_malloc_r>
 8006df4:	2800      	cmp	r0, #0
 8006df6:	d108      	bne.n	8006e0a <__smakebuf_r+0x4a>
 8006df8:	220c      	movs	r2, #12
 8006dfa:	5ea3      	ldrsh	r3, [r4, r2]
 8006dfc:	059a      	lsls	r2, r3, #22
 8006dfe:	d4ed      	bmi.n	8006ddc <__smakebuf_r+0x1c>
 8006e00:	2203      	movs	r2, #3
 8006e02:	4393      	bics	r3, r2
 8006e04:	431e      	orrs	r6, r3
 8006e06:	81a6      	strh	r6, [r4, #12]
 8006e08:	e7e2      	b.n	8006dd0 <__smakebuf_r+0x10>
 8006e0a:	2380      	movs	r3, #128	@ 0x80
 8006e0c:	89a2      	ldrh	r2, [r4, #12]
 8006e0e:	6020      	str	r0, [r4, #0]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	6120      	str	r0, [r4, #16]
 8006e18:	6167      	str	r7, [r4, #20]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00c      	beq.n	8006e38 <__smakebuf_r+0x78>
 8006e1e:	0028      	movs	r0, r5
 8006e20:	230e      	movs	r3, #14
 8006e22:	5ee1      	ldrsh	r1, [r4, r3]
 8006e24:	f000 f876 	bl	8006f14 <_isatty_r>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	d005      	beq.n	8006e38 <__smakebuf_r+0x78>
 8006e2c:	2303      	movs	r3, #3
 8006e2e:	89a2      	ldrh	r2, [r4, #12]
 8006e30:	439a      	bics	r2, r3
 8006e32:	3b02      	subs	r3, #2
 8006e34:	4313      	orrs	r3, r2
 8006e36:	81a3      	strh	r3, [r4, #12]
 8006e38:	89a3      	ldrh	r3, [r4, #12]
 8006e3a:	9a01      	ldr	r2, [sp, #4]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	81a3      	strh	r3, [r4, #12]
 8006e40:	e7cc      	b.n	8006ddc <__smakebuf_r+0x1c>

08006e42 <_putc_r>:
 8006e42:	b570      	push	{r4, r5, r6, lr}
 8006e44:	0006      	movs	r6, r0
 8006e46:	000d      	movs	r5, r1
 8006e48:	0014      	movs	r4, r2
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d004      	beq.n	8006e58 <_putc_r+0x16>
 8006e4e:	6a03      	ldr	r3, [r0, #32]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d101      	bne.n	8006e58 <_putc_r+0x16>
 8006e54:	f7fe ffbc 	bl	8005dd0 <__sinit>
 8006e58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e5a:	07db      	lsls	r3, r3, #31
 8006e5c:	d405      	bmi.n	8006e6a <_putc_r+0x28>
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	059b      	lsls	r3, r3, #22
 8006e62:	d402      	bmi.n	8006e6a <_putc_r+0x28>
 8006e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e66:	f7ff fa54 	bl	8006312 <__retarget_lock_acquire_recursive>
 8006e6a:	68a3      	ldr	r3, [r4, #8]
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	60a3      	str	r3, [r4, #8]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	da05      	bge.n	8006e80 <_putc_r+0x3e>
 8006e74:	69a2      	ldr	r2, [r4, #24]
 8006e76:	4293      	cmp	r3, r2
 8006e78:	db12      	blt.n	8006ea0 <_putc_r+0x5e>
 8006e7a:	b2eb      	uxtb	r3, r5
 8006e7c:	2b0a      	cmp	r3, #10
 8006e7e:	d00f      	beq.n	8006ea0 <_putc_r+0x5e>
 8006e80:	6823      	ldr	r3, [r4, #0]
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	6022      	str	r2, [r4, #0]
 8006e86:	701d      	strb	r5, [r3, #0]
 8006e88:	b2ed      	uxtb	r5, r5
 8006e8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e8c:	07db      	lsls	r3, r3, #31
 8006e8e:	d405      	bmi.n	8006e9c <_putc_r+0x5a>
 8006e90:	89a3      	ldrh	r3, [r4, #12]
 8006e92:	059b      	lsls	r3, r3, #22
 8006e94:	d402      	bmi.n	8006e9c <_putc_r+0x5a>
 8006e96:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e98:	f7ff fa3c 	bl	8006314 <__retarget_lock_release_recursive>
 8006e9c:	0028      	movs	r0, r5
 8006e9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ea0:	0029      	movs	r1, r5
 8006ea2:	0022      	movs	r2, r4
 8006ea4:	0030      	movs	r0, r6
 8006ea6:	f7ff f8c3 	bl	8006030 <__swbuf_r>
 8006eaa:	0005      	movs	r5, r0
 8006eac:	e7ed      	b.n	8006e8a <_putc_r+0x48>

08006eae <memmove>:
 8006eae:	b510      	push	{r4, lr}
 8006eb0:	4288      	cmp	r0, r1
 8006eb2:	d902      	bls.n	8006eba <memmove+0xc>
 8006eb4:	188b      	adds	r3, r1, r2
 8006eb6:	4298      	cmp	r0, r3
 8006eb8:	d308      	bcc.n	8006ecc <memmove+0x1e>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d007      	beq.n	8006ed0 <memmove+0x22>
 8006ec0:	5ccc      	ldrb	r4, [r1, r3]
 8006ec2:	54c4      	strb	r4, [r0, r3]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	e7f9      	b.n	8006ebc <memmove+0xe>
 8006ec8:	5c8b      	ldrb	r3, [r1, r2]
 8006eca:	5483      	strb	r3, [r0, r2]
 8006ecc:	3a01      	subs	r2, #1
 8006ece:	d2fb      	bcs.n	8006ec8 <memmove+0x1a>
 8006ed0:	bd10      	pop	{r4, pc}

08006ed2 <strchr>:
 8006ed2:	b2c9      	uxtb	r1, r1
 8006ed4:	7803      	ldrb	r3, [r0, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d004      	beq.n	8006ee4 <strchr+0x12>
 8006eda:	428b      	cmp	r3, r1
 8006edc:	d100      	bne.n	8006ee0 <strchr+0xe>
 8006ede:	4770      	bx	lr
 8006ee0:	3001      	adds	r0, #1
 8006ee2:	e7f7      	b.n	8006ed4 <strchr+0x2>
 8006ee4:	424b      	negs	r3, r1
 8006ee6:	4159      	adcs	r1, r3
 8006ee8:	4249      	negs	r1, r1
 8006eea:	4008      	ands	r0, r1
 8006eec:	e7f7      	b.n	8006ede <strchr+0xc>
	...

08006ef0 <_fstat_r>:
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	b570      	push	{r4, r5, r6, lr}
 8006ef4:	4d06      	ldr	r5, [pc, #24]	@ (8006f10 <_fstat_r+0x20>)
 8006ef6:	0004      	movs	r4, r0
 8006ef8:	0008      	movs	r0, r1
 8006efa:	0011      	movs	r1, r2
 8006efc:	602b      	str	r3, [r5, #0]
 8006efe:	f7f9 fea8 	bl	8000c52 <_fstat>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	d103      	bne.n	8006f0e <_fstat_r+0x1e>
 8006f06:	682b      	ldr	r3, [r5, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d000      	beq.n	8006f0e <_fstat_r+0x1e>
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	bd70      	pop	{r4, r5, r6, pc}
 8006f10:	200004b8 	.word	0x200004b8

08006f14 <_isatty_r>:
 8006f14:	2300      	movs	r3, #0
 8006f16:	b570      	push	{r4, r5, r6, lr}
 8006f18:	4d06      	ldr	r5, [pc, #24]	@ (8006f34 <_isatty_r+0x20>)
 8006f1a:	0004      	movs	r4, r0
 8006f1c:	0008      	movs	r0, r1
 8006f1e:	602b      	str	r3, [r5, #0]
 8006f20:	f7f9 fea5 	bl	8000c6e <_isatty>
 8006f24:	1c43      	adds	r3, r0, #1
 8006f26:	d103      	bne.n	8006f30 <_isatty_r+0x1c>
 8006f28:	682b      	ldr	r3, [r5, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d000      	beq.n	8006f30 <_isatty_r+0x1c>
 8006f2e:	6023      	str	r3, [r4, #0]
 8006f30:	bd70      	pop	{r4, r5, r6, pc}
 8006f32:	46c0      	nop			@ (mov r8, r8)
 8006f34:	200004b8 	.word	0x200004b8

08006f38 <memchr>:
 8006f38:	b2c9      	uxtb	r1, r1
 8006f3a:	1882      	adds	r2, r0, r2
 8006f3c:	4290      	cmp	r0, r2
 8006f3e:	d101      	bne.n	8006f44 <memchr+0xc>
 8006f40:	2000      	movs	r0, #0
 8006f42:	4770      	bx	lr
 8006f44:	7803      	ldrb	r3, [r0, #0]
 8006f46:	428b      	cmp	r3, r1
 8006f48:	d0fb      	beq.n	8006f42 <memchr+0xa>
 8006f4a:	3001      	adds	r0, #1
 8006f4c:	e7f6      	b.n	8006f3c <memchr+0x4>

08006f4e <_realloc_r>:
 8006f4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f50:	0006      	movs	r6, r0
 8006f52:	000c      	movs	r4, r1
 8006f54:	0015      	movs	r5, r2
 8006f56:	2900      	cmp	r1, #0
 8006f58:	d105      	bne.n	8006f66 <_realloc_r+0x18>
 8006f5a:	0011      	movs	r1, r2
 8006f5c:	f7fe fd82 	bl	8005a64 <_malloc_r>
 8006f60:	0004      	movs	r4, r0
 8006f62:	0020      	movs	r0, r4
 8006f64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f66:	2a00      	cmp	r2, #0
 8006f68:	d103      	bne.n	8006f72 <_realloc_r+0x24>
 8006f6a:	f7ff f9e5 	bl	8006338 <_free_r>
 8006f6e:	002c      	movs	r4, r5
 8006f70:	e7f7      	b.n	8006f62 <_realloc_r+0x14>
 8006f72:	f000 f81c 	bl	8006fae <_malloc_usable_size_r>
 8006f76:	0007      	movs	r7, r0
 8006f78:	4285      	cmp	r5, r0
 8006f7a:	d802      	bhi.n	8006f82 <_realloc_r+0x34>
 8006f7c:	0843      	lsrs	r3, r0, #1
 8006f7e:	42ab      	cmp	r3, r5
 8006f80:	d3ef      	bcc.n	8006f62 <_realloc_r+0x14>
 8006f82:	0029      	movs	r1, r5
 8006f84:	0030      	movs	r0, r6
 8006f86:	f7fe fd6d 	bl	8005a64 <_malloc_r>
 8006f8a:	9001      	str	r0, [sp, #4]
 8006f8c:	2800      	cmp	r0, #0
 8006f8e:	d101      	bne.n	8006f94 <_realloc_r+0x46>
 8006f90:	9c01      	ldr	r4, [sp, #4]
 8006f92:	e7e6      	b.n	8006f62 <_realloc_r+0x14>
 8006f94:	002a      	movs	r2, r5
 8006f96:	42bd      	cmp	r5, r7
 8006f98:	d900      	bls.n	8006f9c <_realloc_r+0x4e>
 8006f9a:	003a      	movs	r2, r7
 8006f9c:	0021      	movs	r1, r4
 8006f9e:	9801      	ldr	r0, [sp, #4]
 8006fa0:	f7ff f9c1 	bl	8006326 <memcpy>
 8006fa4:	0021      	movs	r1, r4
 8006fa6:	0030      	movs	r0, r6
 8006fa8:	f7ff f9c6 	bl	8006338 <_free_r>
 8006fac:	e7f0      	b.n	8006f90 <_realloc_r+0x42>

08006fae <_malloc_usable_size_r>:
 8006fae:	1f0b      	subs	r3, r1, #4
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	1f18      	subs	r0, r3, #4
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	da01      	bge.n	8006fbc <_malloc_usable_size_r+0xe>
 8006fb8:	580b      	ldr	r3, [r1, r0]
 8006fba:	18c0      	adds	r0, r0, r3
 8006fbc:	4770      	bx	lr
	...

08006fc0 <_init>:
 8006fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc2:	46c0      	nop			@ (mov r8, r8)
 8006fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc6:	bc08      	pop	{r3}
 8006fc8:	469e      	mov	lr, r3
 8006fca:	4770      	bx	lr

08006fcc <_fini>:
 8006fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fce:	46c0      	nop			@ (mov r8, r8)
 8006fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fd2:	bc08      	pop	{r3}
 8006fd4:	469e      	mov	lr, r3
 8006fd6:	4770      	bx	lr
