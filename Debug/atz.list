
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081f4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011c8  080082b4  080082b4  000092b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800947c  0800947c  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800947c  0800947c  0000a47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009484  08009484  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009484  08009484  0000a484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009488  08009488  0000a488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800948c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  2000006c  080094f8  0000b06c  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  200003c4  080094f8  0000b3c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001221c  00000000  00000000  0000b094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034fe  00000000  00000000  0001d2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  000207b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000be5  00000000  00000000  00021730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001784f  00000000  00000000  00022315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001523a  00000000  00000000  00039b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008284e  00000000  00000000  0004ed9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d15ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fbc  00000000  00000000  000d1630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000d55ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800829c 	.word	0x0800829c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	0800829c 	.word	0x0800829c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <MX_DMA_Init+0x38>)
 8000478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800047a:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <MX_DMA_Init+0x38>)
 800047c:	2101      	movs	r1, #1
 800047e:	430a      	orrs	r2, r1
 8000480:	631a      	str	r2, [r3, #48]	@ 0x30
 8000482:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <MX_DMA_Init+0x38>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	2201      	movs	r2, #1
 8000488:	4013      	ands	r3, r2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2100      	movs	r1, #0
 8000492:	200a      	movs	r0, #10
 8000494:	f002 f8ec 	bl	8002670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000498:	200a      	movs	r0, #10
 800049a:	f002 f8fe 	bl	800269a <HAL_NVIC_EnableIRQ>

}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	40021000 	.word	0x40021000

080004ac <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b089      	sub	sp, #36	@ 0x24
 80004b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	240c      	movs	r4, #12
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2314      	movs	r3, #20
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f006 ffe7 	bl	8007490 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b22      	ldr	r3, [pc, #136]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004c6:	4b21      	ldr	r3, [pc, #132]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004c8:	2101      	movs	r1, #1
 80004ca:	430a      	orrs	r2, r1
 80004cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ce:	4b1f      	ldr	r3, [pc, #124]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d2:	2201      	movs	r2, #1
 80004d4:	4013      	ands	r3, r2
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004de:	4b1b      	ldr	r3, [pc, #108]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004e0:	2102      	movs	r1, #2
 80004e2:	430a      	orrs	r2, r1
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004e6:	4b19      	ldr	r3, [pc, #100]	@ (800054c <MX_GPIO_Init+0xa0>)
 80004e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ea:	2202      	movs	r2, #2
 80004ec:	4013      	ands	r3, r2
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 80004f2:	4b17      	ldr	r3, [pc, #92]	@ (8000550 <MX_GPIO_Init+0xa4>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	2120      	movs	r1, #32
 80004f8:	0018      	movs	r0, r3
 80004fa:	f002 fcb5 	bl	8002e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2220      	movs	r2, #32
 8000502:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	193a      	adds	r2, r7, r4
 8000512:	23a0      	movs	r3, #160	@ 0xa0
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	0011      	movs	r1, r2
 8000518:	0018      	movs	r0, r3
 800051a:	f002 fb27 	bl	8002b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_ENABLE_Pin */
  GPIO_InitStruct.Pin = I2C_ENABLE_Pin;
 800051e:	0021      	movs	r1, r4
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2220      	movs	r2, #32
 8000524:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2201      	movs	r2, #1
 800052a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(I2C_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000538:	187b      	adds	r3, r7, r1
 800053a:	4a05      	ldr	r2, [pc, #20]	@ (8000550 <MX_GPIO_Init+0xa4>)
 800053c:	0019      	movs	r1, r3
 800053e:	0010      	movs	r0, r2
 8000540:	f002 fb14 	bl	8002b6c <HAL_GPIO_Init>

}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	b009      	add	sp, #36	@ 0x24
 800054a:	bd90      	pop	{r4, r7, pc}
 800054c:	40021000 	.word	0x40021000
 8000550:	50000400 	.word	0x50000400

08000554 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000558:	4b1c      	ldr	r3, [pc, #112]	@ (80005cc <MX_I2C1_Init+0x78>)
 800055a:	4a1d      	ldr	r2, [pc, #116]	@ (80005d0 <MX_I2C1_Init+0x7c>)
 800055c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 800055e:	4b1b      	ldr	r3, [pc, #108]	@ (80005cc <MX_I2C1_Init+0x78>)
 8000560:	22c1      	movs	r2, #193	@ 0xc1
 8000562:	00d2      	lsls	r2, r2, #3
 8000564:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000566:	4b19      	ldr	r3, [pc, #100]	@ (80005cc <MX_I2C1_Init+0x78>)
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800056c:	4b17      	ldr	r3, [pc, #92]	@ (80005cc <MX_I2C1_Init+0x78>)
 800056e:	2201      	movs	r2, #1
 8000570:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000572:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <MX_I2C1_Init+0x78>)
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000578:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <MX_I2C1_Init+0x78>)
 800057a:	2200      	movs	r2, #0
 800057c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800057e:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <MX_I2C1_Init+0x78>)
 8000580:	2200      	movs	r2, #0
 8000582:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000584:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <MX_I2C1_Init+0x78>)
 8000586:	2200      	movs	r2, #0
 8000588:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800058a:	4b10      	ldr	r3, [pc, #64]	@ (80005cc <MX_I2C1_Init+0x78>)
 800058c:	2200      	movs	r2, #0
 800058e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000590:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <MX_I2C1_Init+0x78>)
 8000592:	0018      	movs	r0, r3
 8000594:	f002 fc86 	bl	8002ea4 <HAL_I2C_Init>
 8000598:	1e03      	subs	r3, r0, #0
 800059a:	d001      	beq.n	80005a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800059c:	f000 fa68 	bl	8000a70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005a0:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <MX_I2C1_Init+0x78>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	0018      	movs	r0, r3
 80005a6:	f003 fb25 	bl	8003bf4 <HAL_I2CEx_ConfigAnalogFilter>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d001      	beq.n	80005b2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80005ae:	f000 fa5f 	bl	8000a70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005b2:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <MX_I2C1_Init+0x78>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	0018      	movs	r0, r3
 80005b8:	f003 fb68 	bl	8003c8c <HAL_I2CEx_ConfigDigitalFilter>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80005c0:	f000 fa56 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005c4:	46c0      	nop			@ (mov r8, r8)
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	20000088 	.word	0x20000088
 80005d0:	40005400 	.word	0x40005400

080005d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005d4:	b590      	push	{r4, r7, lr}
 80005d6:	b089      	sub	sp, #36	@ 0x24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	240c      	movs	r4, #12
 80005de:	193b      	adds	r3, r7, r4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2314      	movs	r3, #20
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f006 ff52 	bl	8007490 <memset>
  if(i2cHandle->Instance==I2C1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <HAL_I2C_MspInit+0x7c>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d128      	bne.n	8000648 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b17      	ldr	r3, [pc, #92]	@ (8000654 <HAL_I2C_MspInit+0x80>)
 80005f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005fa:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <HAL_I2C_MspInit+0x80>)
 80005fc:	2102      	movs	r1, #2
 80005fe:	430a      	orrs	r2, r1
 8000600:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <HAL_I2C_MspInit+0x80>)
 8000604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000606:	2202      	movs	r2, #2
 8000608:	4013      	ands	r3, r2
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800060e:	0021      	movs	r1, r4
 8000610:	187b      	adds	r3, r7, r1
 8000612:	22c0      	movs	r2, #192	@ 0xc0
 8000614:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2212      	movs	r2, #18
 800061a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2201      	movs	r2, #1
 8000620:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2203      	movs	r2, #3
 8000626:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2201      	movs	r2, #1
 800062c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062e:	187b      	adds	r3, r7, r1
 8000630:	4a09      	ldr	r2, [pc, #36]	@ (8000658 <HAL_I2C_MspInit+0x84>)
 8000632:	0019      	movs	r1, r3
 8000634:	0010      	movs	r0, r2
 8000636:	f002 fa99 	bl	8002b6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800063a:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <HAL_I2C_MspInit+0x80>)
 800063c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800063e:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <HAL_I2C_MspInit+0x80>)
 8000640:	2180      	movs	r1, #128	@ 0x80
 8000642:	0389      	lsls	r1, r1, #14
 8000644:	430a      	orrs	r2, r1
 8000646:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	b009      	add	sp, #36	@ 0x24
 800064e:	bd90      	pop	{r4, r7, pc}
 8000650:	40005400 	.word	0x40005400
 8000654:	40021000 	.word	0x40021000
 8000658:	50000400 	.word	0x50000400

0800065c <cb_WAKE>:
//	LORAWAN_MODULE_ERROR,
} LoRaWAN_State_t;
volatile LoRaWAN_State_t lorawan_state = COLLECT_DATA;

void cb_WAKE(const char* str)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	AWAKE = true;
 8000664:	4b03      	ldr	r3, [pc, #12]	@ (8000674 <cb_WAKE+0x18>)
 8000666:	2201      	movs	r2, #1
 8000668:	701a      	strb	r2, [r3, #0]
	// Start a timer to determine when the module will sleep again
}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b002      	add	sp, #8
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	20000118 	.word	0x20000118

08000678 <cb_JOIN_SUCCESS>:

void cb_JOIN_SUCCESS(const char* str)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_JOINED;
 8000680:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <cb_JOIN_SUCCESS+0x18>)
 8000682:	2202      	movs	r2, #2
 8000684:	701a      	strb	r2, [r3, #0]
}
 8000686:	46c0      	nop			@ (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			@ (mov r8, r8)
 8000690:	20000000 	.word	0x20000000

08000694 <cb_NOT_JOINED>:
void cb_NOT_JOINED(const char* str)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_NOT_JOINED;
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <cb_NOT_JOINED+0x18>)
 800069e:	2200      	movs	r2, #0
 80006a0:	701a      	strb	r2, [r3, #0]
}
 80006a2:	46c0      	nop			@ (mov r8, r8)
 80006a4:	46bd      	mov	sp, r7
 80006a6:	b002      	add	sp, #8
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	20000000 	.word	0x20000000

080006b0 <cb_DATA_RESPONSE>:
void cb_DATA_RESPONSE(const char* str)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
  __NOP();
 80006b8:	46c0      	nop			@ (mov r8, r8)
    // You can parse downlink data here if needed
}
 80006ba:	46c0      	nop			@ (mov r8, r8)
 80006bc:	46bd      	mov	sp, r7
 80006be:	b002      	add	sp, #8
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	000a      	movs	r2, r1
 80006ce:	1cbb      	adds	r3, r7, #2
 80006d0:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == LPUART1)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a07      	ldr	r2, [pc, #28]	@ (80006f4 <HAL_UARTEx_RxEventCallback+0x30>)
 80006d8:	4293      	cmp	r3, r2
 80006da:	d106      	bne.n	80006ea <HAL_UARTEx_RxEventCallback+0x26>
	{
		ATC_IdleLineCallback(&lora, Size);
 80006dc:	1cbb      	adds	r3, r7, #2
 80006de:	881a      	ldrh	r2, [r3, #0]
 80006e0:	4b05      	ldr	r3, [pc, #20]	@ (80006f8 <HAL_UARTEx_RxEventCallback+0x34>)
 80006e2:	0011      	movs	r1, r2
 80006e4:	0018      	movs	r0, r3
 80006e6:	f006 fb38 	bl	8006d5a <ATC_IdleLineCallback>
	}
}
 80006ea:	46c0      	nop			@ (mov r8, r8)
 80006ec:	46bd      	mov	sp, r7
 80006ee:	b002      	add	sp, #8
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			@ (mov r8, r8)
 80006f4:	40004800 	.word	0x40004800
 80006f8:	200000dc 	.word	0x200000dc

080006fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006fc:	b5b0      	push	{r4, r5, r7, lr}
 80006fe:	b08c      	sub	sp, #48	@ 0x30
 8000700:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000702:	f001 fe6d 	bl	80023e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000706:	f000 f945 	bl	8000994 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070a:	f7ff fecf 	bl	80004ac <MX_GPIO_Init>
  MX_DMA_Init();
 800070e:	f7ff feaf 	bl	8000470 <MX_DMA_Init>
  MX_I2C1_Init();
 8000712:	f7ff ff1f 	bl	8000554 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000716:	f000 faa5 	bl	8000c64 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("DEBUG: Starting ATC initialization\n");
 800071a:	4b7d      	ldr	r3, [pc, #500]	@ (8000910 <main+0x214>)
 800071c:	0018      	movs	r0, r3
 800071e:	f006 fd8b 	bl	8007238 <puts>
  
  // Check LPUART handle before passing to ATC_Init
  if (hlpuart1.Instance == NULL) {
 8000722:	4b7c      	ldr	r3, [pc, #496]	@ (8000914 <main+0x218>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d105      	bne.n	8000736 <main+0x3a>
      printf("ERROR: hlpuart1.Instance is NULL! LPUART not initialized properly.\n");
 800072a:	4b7b      	ldr	r3, [pc, #492]	@ (8000918 <main+0x21c>)
 800072c:	0018      	movs	r0, r3
 800072e:	f006 fd83 	bl	8007238 <puts>
      Error_Handler();
 8000732:	f000 f99d 	bl	8000a70 <Error_Handler>
  }
  printf("DEBUG: hlpuart1.Instance = %p\n", (void*)hlpuart1.Instance);
 8000736:	4b77      	ldr	r3, [pc, #476]	@ (8000914 <main+0x218>)
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	4b78      	ldr	r3, [pc, #480]	@ (800091c <main+0x220>)
 800073c:	0011      	movs	r1, r2
 800073e:	0018      	movs	r0, r3
 8000740:	f006 fd0a 	bl	8007158 <iprintf>
  
  bool atc_init_result = ATC_Init(&lora, &hlpuart1, 512, "LoRaWAN");
 8000744:	251f      	movs	r5, #31
 8000746:	197c      	adds	r4, r7, r5
 8000748:	4b75      	ldr	r3, [pc, #468]	@ (8000920 <main+0x224>)
 800074a:	2280      	movs	r2, #128	@ 0x80
 800074c:	0092      	lsls	r2, r2, #2
 800074e:	4971      	ldr	r1, [pc, #452]	@ (8000914 <main+0x218>)
 8000750:	4874      	ldr	r0, [pc, #464]	@ (8000924 <main+0x228>)
 8000752:	f006 f909 	bl	8006968 <ATC_Init>
 8000756:	0003      	movs	r3, r0
 8000758:	7023      	strb	r3, [r4, #0]
  if (!atc_init_result) {
 800075a:	197b      	adds	r3, r7, r5
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2201      	movs	r2, #1
 8000760:	4053      	eors	r3, r2
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d005      	beq.n	8000774 <main+0x78>
      printf("ERROR: ATC_Init failed!\n");
 8000768:	4b6f      	ldr	r3, [pc, #444]	@ (8000928 <main+0x22c>)
 800076a:	0018      	movs	r0, r3
 800076c:	f006 fd64 	bl	8007238 <puts>
      Error_Handler();
 8000770:	f000 f97e 	bl	8000a70 <Error_Handler>
  }
  printf("DEBUG: ATC_Init successful\n");
 8000774:	4b6d      	ldr	r3, [pc, #436]	@ (800092c <main+0x230>)
 8000776:	0018      	movs	r0, r3
 8000778:	f006 fd5e 	bl	8007238 <puts>
  
  ATC_SetEvents(&lora, events);
 800077c:	4a6c      	ldr	r2, [pc, #432]	@ (8000930 <main+0x234>)
 800077e:	4b69      	ldr	r3, [pc, #420]	@ (8000924 <main+0x228>)
 8000780:	0011      	movs	r1, r2
 8000782:	0018      	movs	r0, r3
 8000784:	f006 f9a7 	bl	8006ad6 <ATC_SetEvents>
  scan_i2c_bus(); // Check what devices exist
 8000788:	f001 fa00 	bl	8001b8c <scan_i2c_bus>
  sensirion_i2c_hal_init();
 800078c:	f001 fcdb 	bl	8002146 <sensirion_i2c_hal_init>

  const char *dev_eui = "0025CA00000055EE";
 8000790:	4b68      	ldr	r3, [pc, #416]	@ (8000934 <main+0x238>)
 8000792:	61bb      	str	r3, [r7, #24]
  const char *app_eui = "0025CA00000055EE";
 8000794:	4b67      	ldr	r3, [pc, #412]	@ (8000934 <main+0x238>)
 8000796:	617b      	str	r3, [r7, #20]
  const char *app_key = "2B7E151628AED2A6ABF7158809CF4F3C";
 8000798:	4b67      	ldr	r3, [pc, #412]	@ (8000938 <main+0x23c>)
 800079a:	613b      	str	r3, [r7, #16]
  
  printf("DEBUG: Configuring LoRaWAN parameters\n");
 800079c:	4b67      	ldr	r3, [pc, #412]	@ (800093c <main+0x240>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f006 fd4a 	bl	8007238 <puts>
  if (lorawan_configure(&lora, dev_eui, app_eui, app_key)) {
 80007a4:	693b      	ldr	r3, [r7, #16]
 80007a6:	697a      	ldr	r2, [r7, #20]
 80007a8:	69b9      	ldr	r1, [r7, #24]
 80007aa:	485e      	ldr	r0, [pc, #376]	@ (8000924 <main+0x228>)
 80007ac:	f000 fb2e 	bl	8000e0c <lorawan_configure>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d004      	beq.n	80007be <main+0xc2>
      printf("LoRaWAN configuration successful\n");
 80007b4:	4b62      	ldr	r3, [pc, #392]	@ (8000940 <main+0x244>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f006 fd3e 	bl	8007238 <puts>
 80007bc:	e003      	b.n	80007c6 <main+0xca>
  } else {
      printf("LoRaWAN configuration failed\n");
 80007be:	4b61      	ldr	r3, [pc, #388]	@ (8000944 <main+0x248>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f006 fd39 	bl	8007238 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("DEBUG: About to call ATC_Loop\n");
 80007c6:	4b60      	ldr	r3, [pc, #384]	@ (8000948 <main+0x24c>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f006 fd35 	bl	8007238 <puts>
	  ATC_Loop(&lora);
 80007ce:	4b55      	ldr	r3, [pc, #340]	@ (8000924 <main+0x228>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f006 f9b8 	bl	8006b46 <ATC_Loop>
	  printf("DEBUG: ATC_Loop completed successfully\n");
 80007d6:	4b5d      	ldr	r3, [pc, #372]	@ (800094c <main+0x250>)
 80007d8:	0018      	movs	r0, r3
 80007da:	f006 fd2d 	bl	8007238 <puts>
	  switch (lorawan_state) {
 80007de:	4b5c      	ldr	r3, [pc, #368]	@ (8000950 <main+0x254>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	2b06      	cmp	r3, #6
 80007e6:	d8ee      	bhi.n	80007c6 <main+0xca>
 80007e8:	009a      	lsls	r2, r3, #2
 80007ea:	4b5a      	ldr	r3, [pc, #360]	@ (8000954 <main+0x258>)
 80007ec:	18d3      	adds	r3, r2, r3
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	469f      	mov	pc, r3
	  case LORAWAN_NOT_JOINED:
		{
			LoRaWAN_Error_t join_result = join_network(&lora);
 80007f2:	2509      	movs	r5, #9
 80007f4:	197c      	adds	r4, r7, r5
 80007f6:	4b4b      	ldr	r3, [pc, #300]	@ (8000924 <main+0x228>)
 80007f8:	0018      	movs	r0, r3
 80007fa:	f001 f8f3 	bl	80019e4 <join_network>
 80007fe:	0003      	movs	r3, r0
 8000800:	7023      	strb	r3, [r4, #0]
			if (join_result == LORAWAN_OK) {
 8000802:	197b      	adds	r3, r7, r5
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d107      	bne.n	800081a <main+0x11e>
				lorawan_state = LORAWAN_JOINING;
 800080a:	4b51      	ldr	r3, [pc, #324]	@ (8000950 <main+0x254>)
 800080c:	2201      	movs	r2, #1
 800080e:	701a      	strb	r2, [r3, #0]
				printf("DEBUG: Join command sent successfully\n");
 8000810:	4b51      	ldr	r3, [pc, #324]	@ (8000958 <main+0x25c>)
 8000812:	0018      	movs	r0, r3
 8000814:	f006 fd10 	bl	8007238 <puts>
			} else {
				printf("ERROR: Join command failed with error %d\n", join_result);
				// Could implement retry logic here
			}
		}
		break;
 8000818:	e078      	b.n	800090c <main+0x210>
				printf("ERROR: Join command failed with error %d\n", join_result);
 800081a:	2309      	movs	r3, #9
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	781a      	ldrb	r2, [r3, #0]
 8000820:	4b4e      	ldr	r3, [pc, #312]	@ (800095c <main+0x260>)
 8000822:	0011      	movs	r1, r2
 8000824:	0018      	movs	r0, r3
 8000826:	f006 fc97 	bl	8007158 <iprintf>
		break;
 800082a:	e06f      	b.n	800090c <main+0x210>
	  case LORAWAN_JOINING:
		// Wait for join callback to change state
		break;
	  case LORAWAN_JOINED:
		  // Ready to send data
		  last_tx_status = TX_STATUS_UNKNOWN; // Reset status before sending
 800082c:	4b4c      	ldr	r3, [pc, #304]	@ (8000960 <main+0x264>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]

		  char* CONNECTION_STATUS = NULL;
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
		  resp = ATC_SendReceive(&lora, "ATI 3001\r\n", 200, &CONNECTION_STATUS, 2000, 2, "0\r", "1");
 8000836:	1d3a      	adds	r2, r7, #4
 8000838:	494a      	ldr	r1, [pc, #296]	@ (8000964 <main+0x268>)
 800083a:	483a      	ldr	r0, [pc, #232]	@ (8000924 <main+0x228>)
 800083c:	4b4a      	ldr	r3, [pc, #296]	@ (8000968 <main+0x26c>)
 800083e:	9303      	str	r3, [sp, #12]
 8000840:	4b4a      	ldr	r3, [pc, #296]	@ (800096c <main+0x270>)
 8000842:	9302      	str	r3, [sp, #8]
 8000844:	2302      	movs	r3, #2
 8000846:	9301      	str	r3, [sp, #4]
 8000848:	23fa      	movs	r3, #250	@ 0xfa
 800084a:	00db      	lsls	r3, r3, #3
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	0013      	movs	r3, r2
 8000850:	22c8      	movs	r2, #200	@ 0xc8
 8000852:	f006 f988 	bl	8006b66 <ATC_SendReceive>
 8000856:	0002      	movs	r2, r0
 8000858:	4b45      	ldr	r3, [pc, #276]	@ (8000970 <main+0x274>)
 800085a:	601a      	str	r2, [r3, #0]
		  if (CONNECTION_STATUS == 0)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d103      	bne.n	800086a <main+0x16e>
		  {
			  lorawan_state = LORAWAN_NOT_JOINED;
 8000862:	4b3b      	ldr	r3, [pc, #236]	@ (8000950 <main+0x254>)
 8000864:	2200      	movs	r2, #0
 8000866:	701a      	strb	r2, [r3, #0]
			  break;
 8000868:	e050      	b.n	800090c <main+0x210>
		  }

		  char* ATSEND_Result = NULL;
 800086a:	2300      	movs	r3, #0
 800086c:	603b      	str	r3, [r7, #0]
		  resp = ATC_SendReceive(&lora, at_command, 200, &ATSEND_Result, 2000, 2, "OK");
 800086e:	003a      	movs	r2, r7
 8000870:	4940      	ldr	r1, [pc, #256]	@ (8000974 <main+0x278>)
 8000872:	482c      	ldr	r0, [pc, #176]	@ (8000924 <main+0x228>)
 8000874:	4b40      	ldr	r3, [pc, #256]	@ (8000978 <main+0x27c>)
 8000876:	9302      	str	r3, [sp, #8]
 8000878:	2302      	movs	r3, #2
 800087a:	9301      	str	r3, [sp, #4]
 800087c:	23fa      	movs	r3, #250	@ 0xfa
 800087e:	00db      	lsls	r3, r3, #3
 8000880:	9300      	str	r3, [sp, #0]
 8000882:	0013      	movs	r3, r2
 8000884:	22c8      	movs	r2, #200	@ 0xc8
 8000886:	f006 f96e 	bl	8006b66 <ATC_SendReceive>
 800088a:	0002      	movs	r2, r0
 800088c:	4b38      	ldr	r3, [pc, #224]	@ (8000970 <main+0x274>)
 800088e:	601a      	str	r2, [r3, #0]
		  if (resp == 0) {
 8000890:	4b37      	ldr	r3, [pc, #220]	@ (8000970 <main+0x274>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d107      	bne.n	80008a8 <main+0x1ac>
			  lorawan_state = LORAWAN_DATA_SENDING;
 8000898:	4b2d      	ldr	r3, [pc, #180]	@ (8000950 <main+0x254>)
 800089a:	2204      	movs	r2, #4
 800089c:	701a      	strb	r2, [r3, #0]
			  printf("DEBUG: Send command accepted\n");
 800089e:	4b37      	ldr	r3, [pc, #220]	@ (800097c <main+0x280>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f006 fcc9 	bl	8007238 <puts>
		  } else {
			  lorawan_state = LORAWAN_NOT_JOINED;
		  }
	  break;
 80008a6:	e031      	b.n	800090c <main+0x210>
			  lorawan_state = LORAWAN_NOT_JOINED;
 80008a8:	4b29      	ldr	r3, [pc, #164]	@ (8000950 <main+0x254>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	701a      	strb	r2, [r3, #0]
	  break;
 80008ae:	e02d      	b.n	800090c <main+0x210>
	  case LORAWAN_DATA_SENDING:
      break;
	  case DEVICE_SLEEP:
		  // Eren can do sleep, no clue how, expecially with the atc lib.
		  HAL_Delay(10000); //simulate 10 second sleep
 80008b0:	4b33      	ldr	r3, [pc, #204]	@ (8000980 <main+0x284>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 fe04 	bl	80024c0 <HAL_Delay>
		  lorawan_state = COLLECT_DATA;
 80008b8:	4b25      	ldr	r3, [pc, #148]	@ (8000950 <main+0x254>)
 80008ba:	2206      	movs	r2, #6
 80008bc:	701a      	strb	r2, [r3, #0]
	  break;
 80008be:	e025      	b.n	800090c <main+0x210>
	  case COLLECT_DATA:
		  printf("DEBUG: COLLECT_DATA state - starting sensor operations\n");
 80008c0:	4b30      	ldr	r3, [pc, #192]	@ (8000984 <main+0x288>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f006 fcb8 	bl	8007238 <puts>
		  
		  // Call sensor initialization and reading
		  int sensor_result = sensor_init_and_read();
 80008c8:	f001 f9e4 	bl	8001c94 <sensor_init_and_read>
 80008cc:	0003      	movs	r3, r0
 80008ce:	60fb      	str	r3, [r7, #12]
		  if (sensor_result == NO_ERROR) {
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d104      	bne.n	80008e0 <main+0x1e4>
			  printf("DEBUG: Sensor data collected successfully\n");
 80008d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000988 <main+0x28c>)
 80008d8:	0018      	movs	r0, r3
 80008da:	f006 fcad 	bl	8007238 <puts>
 80008de:	e005      	b.n	80008ec <main+0x1f0>
		  } else {
			  printf("ERROR: Sensor data collection failed with error %d\n", sensor_result);
 80008e0:	68fa      	ldr	r2, [r7, #12]
 80008e2:	4b2a      	ldr	r3, [pc, #168]	@ (800098c <main+0x290>)
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f006 fc36 	bl	8007158 <iprintf>
//		  }
//		  else
//		  {
//			  lorawan_state = LORAWAN_JOINED;
//		  }
		  lorawan_state = LORAWAN_JOINED;
 80008ec:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <main+0x254>)
 80008ee:	2202      	movs	r2, #2
 80008f0:	701a      	strb	r2, [r3, #0]

		  uint16_t sensor_val = temp_ticks_2;
 80008f2:	210a      	movs	r1, #10
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	4a26      	ldr	r2, [pc, #152]	@ (8000990 <main+0x294>)
 80008f8:	8812      	ldrh	r2, [r2, #0]
 80008fa:	801a      	strh	r2, [r3, #0]
		  format_at_send_cmd(sensor_val, 4, at_command);
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	881b      	ldrh	r3, [r3, #0]
 8000900:	4a1c      	ldr	r2, [pc, #112]	@ (8000974 <main+0x278>)
 8000902:	2104      	movs	r1, #4
 8000904:	0018      	movs	r0, r3
 8000906:	f001 f907 	bl	8001b18 <format_at_send_cmd>
		  break;
 800090a:	46c0      	nop			@ (mov r8, r8)
	  printf("DEBUG: About to call ATC_Loop\n");
 800090c:	e75b      	b.n	80007c6 <main+0xca>
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	080082ec 	.word	0x080082ec
 8000914:	20000148 	.word	0x20000148
 8000918:	08008310 	.word	0x08008310
 800091c:	08008354 	.word	0x08008354
 8000920:	08008374 	.word	0x08008374
 8000924:	200000dc 	.word	0x200000dc
 8000928:	0800837c 	.word	0x0800837c
 800092c:	08008394 	.word	0x08008394
 8000930:	08009398 	.word	0x08009398
 8000934:	080083b0 	.word	0x080083b0
 8000938:	080083c4 	.word	0x080083c4
 800093c:	080083e8 	.word	0x080083e8
 8000940:	08008410 	.word	0x08008410
 8000944:	08008434 	.word	0x08008434
 8000948:	08008454 	.word	0x08008454
 800094c:	08008474 	.word	0x08008474
 8000950:	20000000 	.word	0x20000000
 8000954:	080093c0 	.word	0x080093c0
 8000958:	0800849c 	.word	0x0800849c
 800095c:	080084c4 	.word	0x080084c4
 8000960:	20000140 	.word	0x20000140
 8000964:	080084f0 	.word	0x080084f0
 8000968:	080084fc 	.word	0x080084fc
 800096c:	08008500 	.word	0x08008500
 8000970:	2000011c 	.word	0x2000011c
 8000974:	20000120 	.word	0x20000120
 8000978:	08008504 	.word	0x08008504
 800097c:	08008508 	.word	0x08008508
 8000980:	00002710 	.word	0x00002710
 8000984:	08008528 	.word	0x08008528
 8000988:	08008560 	.word	0x08008560
 800098c:	0800858c 	.word	0x0800858c
 8000990:	20000266 	.word	0x20000266

08000994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b09f      	sub	sp, #124	@ 0x7c
 8000998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800099a:	2440      	movs	r4, #64	@ 0x40
 800099c:	193b      	adds	r3, r7, r4
 800099e:	0018      	movs	r0, r3
 80009a0:	2338      	movs	r3, #56	@ 0x38
 80009a2:	001a      	movs	r2, r3
 80009a4:	2100      	movs	r1, #0
 80009a6:	f006 fd73 	bl	8007490 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009aa:	232c      	movs	r3, #44	@ 0x2c
 80009ac:	18fb      	adds	r3, r7, r3
 80009ae:	0018      	movs	r0, r3
 80009b0:	2314      	movs	r3, #20
 80009b2:	001a      	movs	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	f006 fd6b 	bl	8007490 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	0018      	movs	r0, r3
 80009be:	2328      	movs	r3, #40	@ 0x28
 80009c0:	001a      	movs	r2, r3
 80009c2:	2100      	movs	r1, #0
 80009c4:	f006 fd64 	bl	8007490 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c8:	4b27      	ldr	r3, [pc, #156]	@ (8000a68 <SystemClock_Config+0xd4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a27      	ldr	r2, [pc, #156]	@ (8000a6c <SystemClock_Config+0xd8>)
 80009ce:	401a      	ands	r2, r3
 80009d0:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <SystemClock_Config+0xd4>)
 80009d2:	2180      	movs	r1, #128	@ 0x80
 80009d4:	0109      	lsls	r1, r1, #4
 80009d6:	430a      	orrs	r2, r1
 80009d8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009da:	0021      	movs	r1, r4
 80009dc:	187b      	adds	r3, r7, r1
 80009de:	2210      	movs	r2, #16
 80009e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009e2:	187b      	adds	r3, r7, r1
 80009e4:	2201      	movs	r2, #1
 80009e6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	22a0      	movs	r2, #160	@ 0xa0
 80009f2:	0212      	lsls	r2, r2, #8
 80009f4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2200      	movs	r2, #0
 80009fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	187b      	adds	r3, r7, r1
 80009fe:	0018      	movs	r0, r3
 8000a00:	f003 f990 	bl	8003d24 <HAL_RCC_OscConfig>
 8000a04:	1e03      	subs	r3, r0, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a08:	f000 f832 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	212c      	movs	r1, #44	@ 0x2c
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	220f      	movs	r2, #15
 8000a12:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	2100      	movs	r1, #0
 8000a30:	0018      	movs	r0, r3
 8000a32:	f003 fd4b 	bl	80044cc <HAL_RCC_ClockConfig>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a3a:	f000 f819 	bl	8000a70 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	220c      	movs	r2, #12
 8000a42:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	0018      	movs	r0, r3
 8000a54:	f003 ff3e 	bl	80048d4 <HAL_RCCEx_PeriphCLKConfig>
 8000a58:	1e03      	subs	r3, r0, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a5c:	f000 f808 	bl	8000a70 <Error_Handler>
  }
}
 8000a60:	46c0      	nop			@ (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b01f      	add	sp, #124	@ 0x7c
 8000a66:	bd90      	pop	{r4, r7, pc}
 8000a68:	40007000 	.word	0x40007000
 8000a6c:	ffffe7ff 	.word	0xffffe7ff

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	46c0      	nop			@ (mov r8, r8)
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a80:	4b07      	ldr	r3, [pc, #28]	@ (8000aa0 <HAL_MspInit+0x24>)
 8000a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <HAL_MspInit+0x24>)
 8000a86:	2101      	movs	r1, #1
 8000a88:	430a      	orrs	r2, r1
 8000a8a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8c:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <HAL_MspInit+0x24>)
 8000a8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a90:	4b03      	ldr	r3, [pc, #12]	@ (8000aa0 <HAL_MspInit+0x24>)
 8000a92:	2180      	movs	r1, #128	@ 0x80
 8000a94:	0549      	lsls	r1, r1, #21
 8000a96:	430a      	orrs	r2, r1
 8000a98:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	46c0      	nop			@ (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa8:	46c0      	nop			@ (mov r8, r8)
 8000aaa:	e7fd      	b.n	8000aa8 <NMI_Handler+0x4>

08000aac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("HARD FAULT OCCURRED!\n");
 8000ab0:	4b02      	ldr	r3, [pc, #8]	@ (8000abc <HardFault_Handler+0x10>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f006 fbc0 	bl	8007238 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	e7fd      	b.n	8000ab8 <HardFault_Handler+0xc>
 8000abc:	080085c0 	.word	0x080085c0

08000ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ac4:	46c0      	nop			@ (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	46c0      	nop			@ (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f001 fcd6 	bl	8002488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	46c0      	nop			@ (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8000ae8:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f001 ff57 	bl	800299e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000af0:	4b04      	ldr	r3, [pc, #16]	@ (8000b04 <DMA1_Channel2_3_IRQHandler+0x20>)
 8000af2:	0018      	movs	r0, r3
 8000af4:	f001 ff53 	bl	800299e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	20000218 	.word	0x20000218
 8000b04:	200001d0 	.word	0x200001d0

08000b08 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000b0c:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <RNG_LPUART1_IRQHandler+0x14>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f004 fa76 	bl	8005000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	20000148 	.word	0x20000148

08000b20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
 8000b30:	e00a      	b.n	8000b48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b32:	e000      	b.n	8000b36 <_read+0x16>
 8000b34:	bf00      	nop
 8000b36:	0001      	movs	r1, r0
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	1c5a      	adds	r2, r3, #1
 8000b3c:	60ba      	str	r2, [r7, #8]
 8000b3e:	b2ca      	uxtb	r2, r1
 8000b40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	3301      	adds	r3, #1
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbf0      	blt.n	8000b32 <_read+0x12>
  }

  return len;
 8000b50:	687b      	ldr	r3, [r7, #4]
}
 8000b52:	0018      	movs	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b006      	add	sp, #24
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b086      	sub	sp, #24
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	60f8      	str	r0, [r7, #12]
 8000b62:	60b9      	str	r1, [r7, #8]
 8000b64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	e009      	b.n	8000b80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	60ba      	str	r2, [r7, #8]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	0018      	movs	r0, r3
 8000b76:	e000      	b.n	8000b7a <_write+0x20>
 8000b78:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	dbf1      	blt.n	8000b6c <_write+0x12>
  }
  return len;
 8000b88:	687b      	ldr	r3, [r7, #4]
}
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b006      	add	sp, #24
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <_close>:

int _close(int file)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	425b      	negs	r3, r3
}
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b002      	add	sp, #8
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
 8000bae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	2280      	movs	r2, #128	@ 0x80
 8000bb4:	0192      	lsls	r2, r2, #6
 8000bb6:	605a      	str	r2, [r3, #4]
  return 0;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	0018      	movs	r0, r3
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	b002      	add	sp, #8
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_isatty>:

int _isatty(int file)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	0018      	movs	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b002      	add	sp, #8
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bf4:	4a14      	ldr	r2, [pc, #80]	@ (8000c48 <_sbrk+0x5c>)
 8000bf6:	4b15      	ldr	r3, [pc, #84]	@ (8000c4c <_sbrk+0x60>)
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c00:	4b13      	ldr	r3, [pc, #76]	@ (8000c50 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c08:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <_sbrk+0x64>)
 8000c0a:	4a12      	ldr	r2, [pc, #72]	@ (8000c54 <_sbrk+0x68>)
 8000c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	18d3      	adds	r3, r2, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d207      	bcs.n	8000c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c1c:	f006 fcca 	bl	80075b4 <__errno>
 8000c20:	0003      	movs	r3, r0
 8000c22:	220c      	movs	r2, #12
 8000c24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	425b      	negs	r3, r3
 8000c2a:	e009      	b.n	8000c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c2c:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c32:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	18d2      	adds	r2, r2, r3
 8000c3a:	4b05      	ldr	r3, [pc, #20]	@ (8000c50 <_sbrk+0x64>)
 8000c3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b006      	add	sp, #24
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	20005000 	.word	0x20005000
 8000c4c:	00000400 	.word	0x00000400
 8000c50:	20000144 	.word	0x20000144
 8000c54:	200003c8 	.word	0x200003c8

08000c58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c5c:	46c0      	nop			@ (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
	...

08000c64 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c68:	4b13      	ldr	r3, [pc, #76]	@ (8000cb8 <MX_LPUART1_UART_Init+0x54>)
 8000c6a:	4a14      	ldr	r2, [pc, #80]	@ (8000cbc <MX_LPUART1_UART_Init+0x58>)
 8000c6c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000c6e:	4b12      	ldr	r3, [pc, #72]	@ (8000cb8 <MX_LPUART1_UART_Init+0x54>)
 8000c70:	22e1      	movs	r2, #225	@ 0xe1
 8000c72:	0252      	lsls	r2, r2, #9
 8000c74:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b10      	ldr	r3, [pc, #64]	@ (8000cb8 <MX_LPUART1_UART_Init+0x54>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb8 <MX_LPUART1_UART_Init+0x54>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0d      	ldr	r3, [pc, #52]	@ (8000cb8 <MX_LPUART1_UART_Init+0x54>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb8 <MX_LPUART1_UART_Init+0x54>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb8 <MX_LPUART1_UART_Init+0x54>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c94:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <MX_LPUART1_UART_Init+0x54>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	@ (8000cb8 <MX_LPUART1_UART_Init+0x54>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000ca0:	4b05      	ldr	r3, [pc, #20]	@ (8000cb8 <MX_LPUART1_UART_Init+0x54>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f003 ffb4 	bl	8004c10 <HAL_UART_Init>
 8000ca8:	1e03      	subs	r3, r0, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000cac:	f7ff fee0 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000cb0:	46c0      	nop			@ (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	20000148 	.word	0x20000148
 8000cbc:	40004800 	.word	0x40004800

08000cc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b089      	sub	sp, #36	@ 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	240c      	movs	r4, #12
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	0018      	movs	r0, r3
 8000cce:	2314      	movs	r3, #20
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	f006 fbdc 	bl	8007490 <memset>
  if(uartHandle->Instance==LPUART1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a45      	ldr	r2, [pc, #276]	@ (8000df4 <HAL_UART_MspInit+0x134>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d000      	beq.n	8000ce4 <HAL_UART_MspInit+0x24>
 8000ce2:	e083      	b.n	8000dec <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ce4:	4b44      	ldr	r3, [pc, #272]	@ (8000df8 <HAL_UART_MspInit+0x138>)
 8000ce6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ce8:	4b43      	ldr	r3, [pc, #268]	@ (8000df8 <HAL_UART_MspInit+0x138>)
 8000cea:	2180      	movs	r1, #128	@ 0x80
 8000cec:	02c9      	lsls	r1, r1, #11
 8000cee:	430a      	orrs	r2, r1
 8000cf0:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b41      	ldr	r3, [pc, #260]	@ (8000df8 <HAL_UART_MspInit+0x138>)
 8000cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000cf6:	4b40      	ldr	r3, [pc, #256]	@ (8000df8 <HAL_UART_MspInit+0x138>)
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cfe:	4b3e      	ldr	r3, [pc, #248]	@ (8000df8 <HAL_UART_MspInit+0x138>)
 8000d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d02:	2201      	movs	r2, #1
 8000d04:	4013      	ands	r3, r2
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d0a:	0021      	movs	r1, r4
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2202      	movs	r2, #2
 8000d16:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2203      	movs	r2, #3
 8000d22:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2206      	movs	r2, #6
 8000d28:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	187a      	adds	r2, r7, r1
 8000d2c:	23a0      	movs	r3, #160	@ 0xa0
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	0011      	movs	r1, r2
 8000d32:	0018      	movs	r0, r3
 8000d34:	f001 ff1a 	bl	8002b6c <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000d38:	4b30      	ldr	r3, [pc, #192]	@ (8000dfc <HAL_UART_MspInit+0x13c>)
 8000d3a:	4a31      	ldr	r2, [pc, #196]	@ (8000e00 <HAL_UART_MspInit+0x140>)
 8000d3c:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000dfc <HAL_UART_MspInit+0x13c>)
 8000d40:	2205      	movs	r2, #5
 8000d42:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d44:	4b2d      	ldr	r3, [pc, #180]	@ (8000dfc <HAL_UART_MspInit+0x13c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d4a:	4b2c      	ldr	r3, [pc, #176]	@ (8000dfc <HAL_UART_MspInit+0x13c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d50:	4b2a      	ldr	r3, [pc, #168]	@ (8000dfc <HAL_UART_MspInit+0x13c>)
 8000d52:	2280      	movs	r2, #128	@ 0x80
 8000d54:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d56:	4b29      	ldr	r3, [pc, #164]	@ (8000dfc <HAL_UART_MspInit+0x13c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d5c:	4b27      	ldr	r3, [pc, #156]	@ (8000dfc <HAL_UART_MspInit+0x13c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000d62:	4b26      	ldr	r3, [pc, #152]	@ (8000dfc <HAL_UART_MspInit+0x13c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d68:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <HAL_UART_MspInit+0x13c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000d6e:	4b23      	ldr	r3, [pc, #140]	@ (8000dfc <HAL_UART_MspInit+0x13c>)
 8000d70:	0018      	movs	r0, r3
 8000d72:	f001 fcaf 	bl	80026d4 <HAL_DMA_Init>
 8000d76:	1e03      	subs	r3, r0, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000d7a:	f7ff fe79 	bl	8000a70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a1e      	ldr	r2, [pc, #120]	@ (8000dfc <HAL_UART_MspInit+0x13c>)
 8000d82:	675a      	str	r2, [r3, #116]	@ 0x74
 8000d84:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <HAL_UART_MspInit+0x13c>)
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e04 <HAL_UART_MspInit+0x144>)
 8000d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8000e08 <HAL_UART_MspInit+0x148>)
 8000d8e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000d90:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <HAL_UART_MspInit+0x144>)
 8000d92:	2205      	movs	r2, #5
 8000d94:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d96:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <HAL_UART_MspInit+0x144>)
 8000d98:	2210      	movs	r2, #16
 8000d9a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d9c:	4b19      	ldr	r3, [pc, #100]	@ (8000e04 <HAL_UART_MspInit+0x144>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000da2:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <HAL_UART_MspInit+0x144>)
 8000da4:	2280      	movs	r2, #128	@ 0x80
 8000da6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000da8:	4b16      	ldr	r3, [pc, #88]	@ (8000e04 <HAL_UART_MspInit+0x144>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <HAL_UART_MspInit+0x144>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <HAL_UART_MspInit+0x144>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dba:	4b12      	ldr	r3, [pc, #72]	@ (8000e04 <HAL_UART_MspInit+0x144>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000dc0:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <HAL_UART_MspInit+0x144>)
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f001 fc86 	bl	80026d4 <HAL_DMA_Init>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000dcc:	f7ff fe50 	bl	8000a70 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	4a0c      	ldr	r2, [pc, #48]	@ (8000e04 <HAL_UART_MspInit+0x144>)
 8000dd4:	671a      	str	r2, [r3, #112]	@ 0x70
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e04 <HAL_UART_MspInit+0x144>)
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	201d      	movs	r0, #29
 8000de2:	f001 fc45 	bl	8002670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8000de6:	201d      	movs	r0, #29
 8000de8:	f001 fc57 	bl	800269a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000dec:	46c0      	nop			@ (mov r8, r8)
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b009      	add	sp, #36	@ 0x24
 8000df2:	bd90      	pop	{r4, r7, pc}
 8000df4:	40004800 	.word	0x40004800
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	200001d0 	.word	0x200001d0
 8000e00:	40020030 	.word	0x40020030
 8000e04:	20000218 	.word	0x20000218
 8000e08:	4002001c 	.word	0x4002001c

08000e0c <lorawan_configure>:
 * @param dev_eui Device EUI (16 hex characters).
 * @param app_eui Application EUI (16 hex characters).
 * @param app_key Application key (32 hex characters).
 * @return true if configuration and join are successful, false otherwise.
 */
bool lorawan_configure(ATC_HandleTypeDef *lora, const char *dev_eui, const char *app_eui, const char *app_key) {
 8000e0c:	b5b0      	push	{r4, r5, r7, lr}
 8000e0e:	b0cc      	sub	sp, #304	@ 0x130
 8000e10:	af04      	add	r7, sp, #16
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
 8000e18:	603b      	str	r3, [r7, #0]
    LoRaWAN_Error_t err;

    // Temporarily disable factory reset to avoid issues
    // factor_reset(lora);

    printf("DEBUG: lorawan_configure called with lora handle: %p\n", (void*)lora);
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	4bbe      	ldr	r3, [pc, #760]	@ (8001118 <lorawan_configure+0x30c>)
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f006 f999 	bl	8007158 <iprintf>
    if (lora == NULL) {
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d105      	bne.n	8000e38 <lorawan_configure+0x2c>
        printf("ERROR: lora handle is NULL!\n");
 8000e2c:	4bbb      	ldr	r3, [pc, #748]	@ (800111c <lorawan_configure+0x310>)
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f006 fa02 	bl	8007238 <puts>
        return false;
 8000e34:	2300      	movs	r3, #0
 8000e36:	e16b      	b.n	8001110 <lorawan_configure+0x304>
    }
    if (lora->hUart == NULL) {
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d105      	bne.n	8000e4c <lorawan_configure+0x40>
        printf("ERROR: lora->hUart is NULL!\n");
 8000e40:	4bb7      	ldr	r3, [pc, #732]	@ (8001120 <lorawan_configure+0x314>)
 8000e42:	0018      	movs	r0, r3
 8000e44:	f006 f9f8 	bl	8007238 <puts>
        return false;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	e161      	b.n	8001110 <lorawan_configure+0x304>
    }
    printf("DEBUG: lora->hUart = %p, Name = %s\n", (void*)lora->hUart, lora->Name);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	6819      	ldr	r1, [r3, #0]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	1d1a      	adds	r2, r3, #4
 8000e54:	4bb3      	ldr	r3, [pc, #716]	@ (8001124 <lorawan_configure+0x318>)
 8000e56:	0018      	movs	r0, r3
 8000e58:	f006 f97e 	bl	8007158 <iprintf>

    // Test basic AT communication first
    printf("DEBUG: Testing basic AT communication...\n");
 8000e5c:	4bb2      	ldr	r3, [pc, #712]	@ (8001128 <lorawan_configure+0x31c>)
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f006 f9ea 	bl	8007238 <puts>
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 8000e64:	2414      	movs	r4, #20
 8000e66:	193b      	adds	r3, r7, r4
 8000e68:	613b      	str	r3, [r7, #16]
    int resp = ATC_SendReceive(lora, "AT\r\n", 100, &response_ptr, 1000, 1, "OK");
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	18fa      	adds	r2, r7, r3
 8000e6e:	49af      	ldr	r1, [pc, #700]	@ (800112c <lorawan_configure+0x320>)
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	4baf      	ldr	r3, [pc, #700]	@ (8001130 <lorawan_configure+0x324>)
 8000e74:	9302      	str	r3, [sp, #8]
 8000e76:	2301      	movs	r3, #1
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	23fa      	movs	r3, #250	@ 0xfa
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	0013      	movs	r3, r2
 8000e82:	2264      	movs	r2, #100	@ 0x64
 8000e84:	f005 fe6f 	bl	8006b66 <ATC_SendReceive>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	228a      	movs	r2, #138	@ 0x8a
 8000e8c:	0052      	lsls	r2, r2, #1
 8000e8e:	18b9      	adds	r1, r7, r2
 8000e90:	600b      	str	r3, [r1, #0]
    printf("DEBUG: AT test returned %d, response: %s\n", resp, resp > 0 ? response : "ERROR");
 8000e92:	18bb      	adds	r3, r7, r2
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	dd01      	ble.n	8000e9e <lorawan_configure+0x92>
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	e000      	b.n	8000ea0 <lorawan_configure+0x94>
 8000e9e:	4ba5      	ldr	r3, [pc, #660]	@ (8001134 <lorawan_configure+0x328>)
 8000ea0:	248a      	movs	r4, #138	@ 0x8a
 8000ea2:	0064      	lsls	r4, r4, #1
 8000ea4:	193a      	adds	r2, r7, r4
 8000ea6:	6811      	ldr	r1, [r2, #0]
 8000ea8:	48a3      	ldr	r0, [pc, #652]	@ (8001138 <lorawan_configure+0x32c>)
 8000eaa:	001a      	movs	r2, r3
 8000eac:	f006 f954 	bl	8007158 <iprintf>
    
    // Try to get version info with different commands
    memset(response, 0, sizeof(response));
 8000eb0:	2380      	movs	r3, #128	@ 0x80
 8000eb2:	005a      	lsls	r2, r3, #1
 8000eb4:	2514      	movs	r5, #20
 8000eb6:	197b      	adds	r3, r7, r5
 8000eb8:	2100      	movs	r1, #0
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f006 fae8 	bl	8007490 <memset>
    response_ptr = response;
 8000ec0:	197b      	adds	r3, r7, r5
 8000ec2:	613b      	str	r3, [r7, #16]
    resp = ATC_SendReceive(lora, "AT+VER?\r\n", 100, &response_ptr, 1000, 1, "OK");
 8000ec4:	2310      	movs	r3, #16
 8000ec6:	18fa      	adds	r2, r7, r3
 8000ec8:	499c      	ldr	r1, [pc, #624]	@ (800113c <lorawan_configure+0x330>)
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	4b98      	ldr	r3, [pc, #608]	@ (8001130 <lorawan_configure+0x324>)
 8000ece:	9302      	str	r3, [sp, #8]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	23fa      	movs	r3, #250	@ 0xfa
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	0013      	movs	r3, r2
 8000edc:	2264      	movs	r2, #100	@ 0x64
 8000ede:	f005 fe42 	bl	8006b66 <ATC_SendReceive>
 8000ee2:	0003      	movs	r3, r0
 8000ee4:	193a      	adds	r2, r7, r4
 8000ee6:	6013      	str	r3, [r2, #0]
    printf("DEBUG: AT+VER? returned %d, response: %s\n", resp, resp > 0 ? response : "ERROR");
 8000ee8:	193b      	adds	r3, r7, r4
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	dd01      	ble.n	8000ef4 <lorawan_configure+0xe8>
 8000ef0:	197b      	adds	r3, r7, r5
 8000ef2:	e000      	b.n	8000ef6 <lorawan_configure+0xea>
 8000ef4:	4b8f      	ldr	r3, [pc, #572]	@ (8001134 <lorawan_configure+0x328>)
 8000ef6:	228a      	movs	r2, #138	@ 0x8a
 8000ef8:	0052      	lsls	r2, r2, #1
 8000efa:	18ba      	adds	r2, r7, r2
 8000efc:	6811      	ldr	r1, [r2, #0]
 8000efe:	4890      	ldr	r0, [pc, #576]	@ (8001140 <lorawan_configure+0x334>)
 8000f00:	001a      	movs	r2, r3
 8000f02:	f006 f929 	bl	8007158 <iprintf>

    // Debug the input parameters
    printf("DEBUG: Input parameters:\n");
 8000f06:	4b8f      	ldr	r3, [pc, #572]	@ (8001144 <lorawan_configure+0x338>)
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f006 f995 	bl	8007238 <puts>
    printf("  dev_eui: %s (length: %zu)\n", dev_eui, strlen(dev_eui));
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	0018      	movs	r0, r3
 8000f12:	f7ff f8f9 	bl	8000108 <strlen>
 8000f16:	0002      	movs	r2, r0
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001148 <lorawan_configure+0x33c>)
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	f006 f91b 	bl	8007158 <iprintf>
    printf("  app_eui: %s (length: %zu)\n", app_eui, strlen(app_eui));
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff f8ef 	bl	8000108 <strlen>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	6879      	ldr	r1, [r7, #4]
 8000f2e:	4b87      	ldr	r3, [pc, #540]	@ (800114c <lorawan_configure+0x340>)
 8000f30:	0018      	movs	r0, r3
 8000f32:	f006 f911 	bl	8007158 <iprintf>
    printf("  app_key: %s (length: %zu)\n", app_key, strlen(app_key));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f7ff f8e5 	bl	8000108 <strlen>
 8000f3e:	0002      	movs	r2, r0
 8000f40:	6839      	ldr	r1, [r7, #0]
 8000f42:	4b83      	ldr	r3, [pc, #524]	@ (8001150 <lorawan_configure+0x344>)
 8000f44:	0018      	movs	r0, r3
 8000f46:	f006 f907 	bl	8007158 <iprintf>
    
    // Print hex dump of app_key to see if there are any issues
    printf("  app_key hex dump: ");
 8000f4a:	4b82      	ldr	r3, [pc, #520]	@ (8001154 <lorawan_configure+0x348>)
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f006 f903 	bl	8007158 <iprintf>
    for (size_t i = 0; i < 32 && app_key[i] != '\0'; i++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	228c      	movs	r2, #140	@ 0x8c
 8000f56:	0052      	lsls	r2, r2, #1
 8000f58:	18ba      	adds	r2, r7, r2
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	e011      	b.n	8000f82 <lorawan_configure+0x176>
        printf("%02X ", (unsigned char)app_key[i]);
 8000f5e:	683a      	ldr	r2, [r7, #0]
 8000f60:	248c      	movs	r4, #140	@ 0x8c
 8000f62:	0064      	lsls	r4, r4, #1
 8000f64:	193b      	adds	r3, r7, r4
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	18d3      	adds	r3, r2, r3
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8001158 <lorawan_configure+0x34c>)
 8000f70:	0011      	movs	r1, r2
 8000f72:	0018      	movs	r0, r3
 8000f74:	f006 f8f0 	bl	8007158 <iprintf>
    for (size_t i = 0; i < 32 && app_key[i] != '\0'; i++) {
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	193a      	adds	r2, r7, r4
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	218c      	movs	r1, #140	@ 0x8c
 8000f84:	0049      	lsls	r1, r1, #1
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b1f      	cmp	r3, #31
 8000f8c:	d806      	bhi.n	8000f9c <lorawan_configure+0x190>
 8000f8e:	683a      	ldr	r2, [r7, #0]
 8000f90:	187b      	adds	r3, r7, r1
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	18d3      	adds	r3, r2, r3
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1e0      	bne.n	8000f5e <lorawan_configure+0x152>
    }
    printf("\n");
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	f006 f8eb 	bl	8007178 <putchar>

    // Validate input parameters
    if (!validate_hex_string(dev_eui, DEV_EUI_LENGTH) ||
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f000 f8e4 	bl	8001174 <validate_hex_string>
 8000fac:	0003      	movs	r3, r0
 8000fae:	001a      	movs	r2, r3
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	4053      	eors	r3, r2
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d117      	bne.n	8000fea <lorawan_configure+0x1de>
        !validate_hex_string(app_eui, APP_EUI_LENGTH) ||
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2110      	movs	r1, #16
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f000 f8d8 	bl	8001174 <validate_hex_string>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	001a      	movs	r2, r3
 8000fc8:	2301      	movs	r3, #1
 8000fca:	4053      	eors	r3, r2
 8000fcc:	b2db      	uxtb	r3, r3
    if (!validate_hex_string(dev_eui, DEV_EUI_LENGTH) ||
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d10b      	bne.n	8000fea <lorawan_configure+0x1de>
        !validate_hex_string(app_key, APP_KEY_LENGTH)) {
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f000 f8cc 	bl	8001174 <validate_hex_string>
 8000fdc:	0003      	movs	r3, r0
 8000fde:	001a      	movs	r2, r3
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	4053      	eors	r3, r2
 8000fe4:	b2db      	uxtb	r3, r3
        !validate_hex_string(app_eui, APP_EUI_LENGTH) ||
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <lorawan_configure+0x1ea>
        printf("Invalid EUI or AppKey format\n");
 8000fea:	4b5c      	ldr	r3, [pc, #368]	@ (800115c <lorawan_configure+0x350>)
 8000fec:	0018      	movs	r0, r3
 8000fee:	f006 f923 	bl	8007238 <puts>
        return false;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e08c      	b.n	8001110 <lorawan_configure+0x304>
    }

    // Configure DevEUI, AppEUI, and AppKey
    if ((err = set_dev_eui(lora, dev_eui)) != LORAWAN_OK ||
 8000ff6:	2520      	movs	r5, #32
 8000ff8:	35ff      	adds	r5, #255	@ 0xff
 8000ffa:	197c      	adds	r4, r7, r5
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	0011      	movs	r1, r2
 8001002:	0018      	movs	r0, r3
 8001004:	f000 f8fe 	bl	8001204 <set_dev_eui>
 8001008:	0003      	movs	r3, r0
 800100a:	7023      	strb	r3, [r4, #0]
 800100c:	197b      	adds	r3, r7, r5
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d119      	bne.n	8001048 <lorawan_configure+0x23c>
        (err = set_app_eui(lora, app_eui)) != LORAWAN_OK ||
 8001014:	197c      	adds	r4, r7, r5
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	0011      	movs	r1, r2
 800101c:	0018      	movs	r0, r3
 800101e:	f000 f9d9 	bl	80013d4 <set_app_eui>
 8001022:	0003      	movs	r3, r0
 8001024:	7023      	strb	r3, [r4, #0]
    if ((err = set_dev_eui(lora, dev_eui)) != LORAWAN_OK ||
 8001026:	197b      	adds	r3, r7, r5
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d10c      	bne.n	8001048 <lorawan_configure+0x23c>
        (err = set_app_key(lora, app_key)) != LORAWAN_OK) {
 800102e:	197c      	adds	r4, r7, r5
 8001030:	683a      	ldr	r2, [r7, #0]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	0011      	movs	r1, r2
 8001036:	0018      	movs	r0, r3
 8001038:	f000 fa90 	bl	800155c <set_app_key>
 800103c:	0003      	movs	r3, r0
 800103e:	7023      	strb	r3, [r4, #0]
        (err = set_app_eui(lora, app_eui)) != LORAWAN_OK ||
 8001040:	197b      	adds	r3, r7, r5
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00a      	beq.n	800105e <lorawan_configure+0x252>
        printf("Error setting EUIs or AppKey: %d\n", err);
 8001048:	2320      	movs	r3, #32
 800104a:	33ff      	adds	r3, #255	@ 0xff
 800104c:	18fb      	adds	r3, r7, r3
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	4b43      	ldr	r3, [pc, #268]	@ (8001160 <lorawan_configure+0x354>)
 8001052:	0011      	movs	r1, r2
 8001054:	0018      	movs	r0, r3
 8001056:	f006 f87f 	bl	8007158 <iprintf>
        return false;
 800105a:	2300      	movs	r3, #0
 800105c:	e058      	b.n	8001110 <lorawan_configure+0x304>
    }

    // Configure region and sub-band
    if ((err = configure_region_and_channel(lora)) != LORAWAN_OK) {
 800105e:	2520      	movs	r5, #32
 8001060:	35ff      	adds	r5, #255	@ 0xff
 8001062:	197c      	adds	r4, r7, r5
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	0018      	movs	r0, r3
 8001068:	f000 fb4a 	bl	8001700 <configure_region_and_channel>
 800106c:	0003      	movs	r3, r0
 800106e:	7023      	strb	r3, [r4, #0]
 8001070:	197b      	adds	r3, r7, r5
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d008      	beq.n	800108a <lorawan_configure+0x27e>
        printf("Error configuring region/channel: %d\n", err);
 8001078:	197b      	adds	r3, r7, r5
 800107a:	781a      	ldrb	r2, [r3, #0]
 800107c:	4b39      	ldr	r3, [pc, #228]	@ (8001164 <lorawan_configure+0x358>)
 800107e:	0011      	movs	r1, r2
 8001080:	0018      	movs	r0, r3
 8001082:	f006 f869 	bl	8007158 <iprintf>
        return false;
 8001086:	2300      	movs	r3, #0
 8001088:	e042      	b.n	8001110 <lorawan_configure+0x304>
    }

    // Check and set frequency
    if ((err = check_and_set_frequency(lora)) != LORAWAN_OK) {
 800108a:	2520      	movs	r5, #32
 800108c:	35ff      	adds	r5, #255	@ 0xff
 800108e:	197c      	adds	r4, r7, r5
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	0018      	movs	r0, r3
 8001094:	f000 fb5c 	bl	8001750 <check_and_set_frequency>
 8001098:	0003      	movs	r3, r0
 800109a:	7023      	strb	r3, [r4, #0]
 800109c:	197b      	adds	r3, r7, r5
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d008      	beq.n	80010b6 <lorawan_configure+0x2aa>
        printf("Error checking/setting frequency: %d\n", err);
 80010a4:	197b      	adds	r3, r7, r5
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001168 <lorawan_configure+0x35c>)
 80010aa:	0011      	movs	r1, r2
 80010ac:	0018      	movs	r0, r3
 80010ae:	f006 f853 	bl	8007158 <iprintf>
        return false;
 80010b2:	2300      	movs	r3, #0
 80010b4:	e02c      	b.n	8001110 <lorawan_configure+0x304>
    }

    // Configure LoRaWAN parameters (ADR, OTAA, Class, DR, TX Power)
    if ((err = configure_lorawan_params(lora)) != LORAWAN_OK) {
 80010b6:	2520      	movs	r5, #32
 80010b8:	35ff      	adds	r5, #255	@ 0xff
 80010ba:	197c      	adds	r4, r7, r5
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	0018      	movs	r0, r3
 80010c0:	f000 fb70 	bl	80017a4 <configure_lorawan_params>
 80010c4:	0003      	movs	r3, r0
 80010c6:	7023      	strb	r3, [r4, #0]
 80010c8:	197b      	adds	r3, r7, r5
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d008      	beq.n	80010e2 <lorawan_configure+0x2d6>
        printf("Error configuring LoRaWAN parameters: %d\n", err);
 80010d0:	197b      	adds	r3, r7, r5
 80010d2:	781a      	ldrb	r2, [r3, #0]
 80010d4:	4b25      	ldr	r3, [pc, #148]	@ (800116c <lorawan_configure+0x360>)
 80010d6:	0011      	movs	r1, r2
 80010d8:	0018      	movs	r0, r3
 80010da:	f006 f83d 	bl	8007158 <iprintf>
        return false;
 80010de:	2300      	movs	r3, #0
 80010e0:	e016      	b.n	8001110 <lorawan_configure+0x304>
    }

    // Save settings and reset
    if ((err = save_and_reset(lora)) != LORAWAN_OK) {
 80010e2:	2520      	movs	r5, #32
 80010e4:	35ff      	adds	r5, #255	@ 0xff
 80010e6:	197c      	adds	r4, r7, r5
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 fca6 	bl	8001a3c <save_and_reset>
 80010f0:	0003      	movs	r3, r0
 80010f2:	7023      	strb	r3, [r4, #0]
 80010f4:	197b      	adds	r3, r7, r5
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d008      	beq.n	800110e <lorawan_configure+0x302>
        printf("Error saving/resetting: %d\n", err);
 80010fc:	197b      	adds	r3, r7, r5
 80010fe:	781a      	ldrb	r2, [r3, #0]
 8001100:	4b1b      	ldr	r3, [pc, #108]	@ (8001170 <lorawan_configure+0x364>)
 8001102:	0011      	movs	r1, r2
 8001104:	0018      	movs	r0, r3
 8001106:	f006 f827 	bl	8007158 <iprintf>
        return false;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <lorawan_configure+0x304>
//    if ((err = join_network(lora)) != LORAWAN_OK) {
//        printf("Error joining network: %d\n", err);
//        return false;
//    }

    return true;
 800110e:	2301      	movs	r3, #1
}
 8001110:	0018      	movs	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	b048      	add	sp, #288	@ 0x120
 8001116:	bdb0      	pop	{r4, r5, r7, pc}
 8001118:	080085d8 	.word	0x080085d8
 800111c:	08008610 	.word	0x08008610
 8001120:	0800862c 	.word	0x0800862c
 8001124:	08008648 	.word	0x08008648
 8001128:	0800866c 	.word	0x0800866c
 800112c:	08008698 	.word	0x08008698
 8001130:	080086a0 	.word	0x080086a0
 8001134:	080086a4 	.word	0x080086a4
 8001138:	080086ac 	.word	0x080086ac
 800113c:	080086d8 	.word	0x080086d8
 8001140:	080086e4 	.word	0x080086e4
 8001144:	08008710 	.word	0x08008710
 8001148:	0800872c 	.word	0x0800872c
 800114c:	0800874c 	.word	0x0800874c
 8001150:	0800876c 	.word	0x0800876c
 8001154:	0800878c 	.word	0x0800878c
 8001158:	080087a4 	.word	0x080087a4
 800115c:	080087ac 	.word	0x080087ac
 8001160:	080087cc 	.word	0x080087cc
 8001164:	080087f0 	.word	0x080087f0
 8001168:	08008818 	.word	0x08008818
 800116c:	08008840 	.word	0x08008840
 8001170:	0800886c 	.word	0x0800886c

08001174 <validate_hex_string>:
 * @brief Validates that a string is hexadecimal and of the expected length.
 * @param str The string to validate.
 * @param expected_len The expected length of the string.
 * @return true if the string is valid hexadecimal and matches the length, false otherwise.
 */
static bool validate_hex_string(const char *str, size_t expected_len) {
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
    if (str == NULL || strlen(str) != expected_len) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d007      	beq.n	8001194 <validate_hex_string+0x20>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	0018      	movs	r0, r3
 8001188:	f7fe ffbe 	bl	8000108 <strlen>
 800118c:	0002      	movs	r2, r0
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	4293      	cmp	r3, r2
 8001192:	d001      	beq.n	8001198 <validate_hex_string+0x24>
        return false;
 8001194:	2300      	movs	r3, #0
 8001196:	e030      	b.n	80011fa <validate_hex_string+0x86>
    }
    for (size_t i = 0; i < expected_len; i++) {
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	e028      	b.n	80011f0 <validate_hex_string+0x7c>
        if (!((str[i] >= '0' && str[i] <= '9') ||
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	18d3      	adds	r3, r2, r3
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80011a8:	d905      	bls.n	80011b6 <validate_hex_string+0x42>
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	18d3      	adds	r3, r2, r3
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b39      	cmp	r3, #57	@ 0x39
 80011b4:	d919      	bls.n	80011ea <validate_hex_string+0x76>
              (str[i] >= 'A' && str[i] <= 'F') ||
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	18d3      	adds	r3, r2, r3
 80011bc:	781b      	ldrb	r3, [r3, #0]
        if (!((str[i] >= '0' && str[i] <= '9') ||
 80011be:	2b40      	cmp	r3, #64	@ 0x40
 80011c0:	d905      	bls.n	80011ce <validate_hex_string+0x5a>
              (str[i] >= 'A' && str[i] <= 'F') ||
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	18d3      	adds	r3, r2, r3
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	2b46      	cmp	r3, #70	@ 0x46
 80011cc:	d90d      	bls.n	80011ea <validate_hex_string+0x76>
              (str[i] >= 'a' && str[i] <= 'f'))) {
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	18d3      	adds	r3, r2, r3
 80011d4:	781b      	ldrb	r3, [r3, #0]
        if (!((str[i] >= '0' && str[i] <= '9') ||
 80011d6:	2b60      	cmp	r3, #96	@ 0x60
 80011d8:	d905      	bls.n	80011e6 <validate_hex_string+0x72>
              (str[i] >= 'a' && str[i] <= 'f'))) {
 80011da:	687a      	ldr	r2, [r7, #4]
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	18d3      	adds	r3, r2, r3
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b66      	cmp	r3, #102	@ 0x66
 80011e4:	d901      	bls.n	80011ea <validate_hex_string+0x76>
            return false;
 80011e6:	2300      	movs	r3, #0
 80011e8:	e007      	b.n	80011fa <validate_hex_string+0x86>
    for (size_t i = 0; i < expected_len; i++) {
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	3301      	adds	r3, #1
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fa      	ldr	r2, [r7, #12]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3d2      	bcc.n	800119e <validate_hex_string+0x2a>
        }
    }
    return true;
 80011f8:	2301      	movs	r3, #1
}
 80011fa:	0018      	movs	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	b004      	add	sp, #16
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <set_dev_eui>:
 * @brief Sets the Device EUI (DevEUI) if not already set or invalid.
 * @param lora Pointer to the ATC handle for communication.
 * @param dev_eui Device EUI (16 hex characters).
 * @return LORAWAN_OK on success, LORAWAN_ERR_DEV_EUI or LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_dev_eui(ATC_HandleTypeDef *lora, const char *dev_eui) {
 8001204:	b5b0      	push	{r4, r5, r7, lr}
 8001206:	b0d8      	sub	sp, #352	@ 0x160
 8001208:	af04      	add	r7, sp, #16
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
    printf("DEBUG: set_dev_eui called with EUI: %s\n", dev_eui);
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	4b5f      	ldr	r3, [pc, #380]	@ (8001390 <set_dev_eui+0x18c>)
 8001212:	0011      	movs	r1, r2
 8001214:	0018      	movs	r0, r3
 8001216:	f005 ff9f 	bl	8007158 <iprintf>
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 800121a:	2348      	movs	r3, #72	@ 0x48
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	22a4      	movs	r2, #164	@ 0xa4
 8001220:	0052      	lsls	r2, r2, #1
 8001222:	18ba      	adds	r2, r7, r2
 8001224:	6013      	str	r3, [r2, #0]
    
    // Try multiple command formats for DevEUI
    char command[64];
    int resp = -1;
 8001226:	2301      	movs	r3, #1
 8001228:	425b      	negs	r3, r3
 800122a:	24a6      	movs	r4, #166	@ 0xa6
 800122c:	0064      	lsls	r4, r4, #1
 800122e:	193a      	adds	r2, r7, r4
 8001230:	6013      	str	r3, [r2, #0]
    
    // Format 1: ATS 501 (your original format)
    printf("DEBUG: Trying ATS 501 format...\n");
 8001232:	4b58      	ldr	r3, [pc, #352]	@ (8001394 <set_dev_eui+0x190>)
 8001234:	0018      	movs	r0, r3
 8001236:	f005 ffff 	bl	8007238 <puts>
    snprintf(command, sizeof(command), "AT%%S 501=\"%s\"\r\n", dev_eui);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	4a56      	ldr	r2, [pc, #344]	@ (8001398 <set_dev_eui+0x194>)
 800123e:	2508      	movs	r5, #8
 8001240:	1978      	adds	r0, r7, r5
 8001242:	2140      	movs	r1, #64	@ 0x40
 8001244:	f006 f802 	bl	800724c <sniprintf>
    printf("DEBUG: Command string: %s", command);
 8001248:	197a      	adds	r2, r7, r5
 800124a:	4b54      	ldr	r3, [pc, #336]	@ (800139c <set_dev_eui+0x198>)
 800124c:	0011      	movs	r1, r2
 800124e:	0018      	movs	r0, r3
 8001250:	f005 ff82 	bl	8007158 <iprintf>
    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001254:	1979      	adds	r1, r7, r5
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	4b51      	ldr	r3, [pc, #324]	@ (80013a0 <set_dev_eui+0x19c>)
 800125a:	9302      	str	r3, [sp, #8]
 800125c:	2301      	movs	r3, #1
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	23c8      	movs	r3, #200	@ 0xc8
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	2264      	movs	r2, #100	@ 0x64
 8001268:	f005 fc7d 	bl	8006b66 <ATC_SendReceive>
 800126c:	0003      	movs	r3, r0
 800126e:	193a      	adds	r2, r7, r4
 8001270:	6013      	str	r3, [r2, #0]
    printf("DEBUG: ATS 501 format returned %d\n", resp);
 8001272:	193b      	adds	r3, r7, r4
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	4b4b      	ldr	r3, [pc, #300]	@ (80013a4 <set_dev_eui+0x1a0>)
 8001278:	0011      	movs	r1, r2
 800127a:	0018      	movs	r0, r3
 800127c:	f005 ff6c 	bl	8007158 <iprintf>
    
    if (resp < 0) {
 8001280:	193b      	adds	r3, r7, r4
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	da1f      	bge.n	80012c8 <set_dev_eui+0xc4>
        // Format 2: AT+DEVEUI (common format)
        printf("DEBUG: Trying AT+DEVEUI format...\n");
 8001288:	4b47      	ldr	r3, [pc, #284]	@ (80013a8 <set_dev_eui+0x1a4>)
 800128a:	0018      	movs	r0, r3
 800128c:	f005 ffd4 	bl	8007238 <puts>
        snprintf(command, sizeof(command), "AT+DEVEUI=%s\r\n", dev_eui);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	4a46      	ldr	r2, [pc, #280]	@ (80013ac <set_dev_eui+0x1a8>)
 8001294:	1978      	adds	r0, r7, r5
 8001296:	2140      	movs	r1, #64	@ 0x40
 8001298:	f005 ffd8 	bl	800724c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800129c:	1979      	adds	r1, r7, r5
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	4b3f      	ldr	r3, [pc, #252]	@ (80013a0 <set_dev_eui+0x19c>)
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2301      	movs	r3, #1
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	23c8      	movs	r3, #200	@ 0xc8
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2300      	movs	r3, #0
 80012ae:	2264      	movs	r2, #100	@ 0x64
 80012b0:	f005 fc59 	bl	8006b66 <ATC_SendReceive>
 80012b4:	0003      	movs	r3, r0
 80012b6:	193a      	adds	r2, r7, r4
 80012b8:	6013      	str	r3, [r2, #0]
        printf("DEBUG: AT+DEVEUI format returned %d\n", resp);
 80012ba:	193b      	adds	r3, r7, r4
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b3c      	ldr	r3, [pc, #240]	@ (80013b0 <set_dev_eui+0x1ac>)
 80012c0:	0011      	movs	r1, r2
 80012c2:	0018      	movs	r0, r3
 80012c4:	f005 ff48 	bl	8007158 <iprintf>
    }
    
    if (resp < 0) {
 80012c8:	24a6      	movs	r4, #166	@ 0xa6
 80012ca:	0064      	lsls	r4, r4, #1
 80012cc:	193b      	adds	r3, r7, r4
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	da20      	bge.n	8001316 <set_dev_eui+0x112>
        // Format 3: AT+DEV_EUI (alternative format)
        printf("DEBUG: Trying AT+DEV_EUI format...\n");
 80012d4:	4b37      	ldr	r3, [pc, #220]	@ (80013b4 <set_dev_eui+0x1b0>)
 80012d6:	0018      	movs	r0, r3
 80012d8:	f005 ffae 	bl	8007238 <puts>
        snprintf(command, sizeof(command), "AT+DEV_EUI=%s\r\n", dev_eui);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	4a36      	ldr	r2, [pc, #216]	@ (80013b8 <set_dev_eui+0x1b4>)
 80012e0:	2508      	movs	r5, #8
 80012e2:	1978      	adds	r0, r7, r5
 80012e4:	2140      	movs	r1, #64	@ 0x40
 80012e6:	f005 ffb1 	bl	800724c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80012ea:	1979      	adds	r1, r7, r5
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	4b2c      	ldr	r3, [pc, #176]	@ (80013a0 <set_dev_eui+0x19c>)
 80012f0:	9302      	str	r3, [sp, #8]
 80012f2:	2301      	movs	r3, #1
 80012f4:	9301      	str	r3, [sp, #4]
 80012f6:	23c8      	movs	r3, #200	@ 0xc8
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2300      	movs	r3, #0
 80012fc:	2264      	movs	r2, #100	@ 0x64
 80012fe:	f005 fc32 	bl	8006b66 <ATC_SendReceive>
 8001302:	0003      	movs	r3, r0
 8001304:	193a      	adds	r2, r7, r4
 8001306:	6013      	str	r3, [r2, #0]
        printf("DEBUG: AT+DEV_EUI format returned %d\n", resp);
 8001308:	193b      	adds	r3, r7, r4
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b2b      	ldr	r3, [pc, #172]	@ (80013bc <set_dev_eui+0x1b8>)
 800130e:	0011      	movs	r1, r2
 8001310:	0018      	movs	r0, r3
 8001312:	f005 ff21 	bl	8007158 <iprintf>
    }
    
    if (resp < 0) {
 8001316:	24a6      	movs	r4, #166	@ 0xa6
 8001318:	0064      	lsls	r4, r4, #1
 800131a:	193b      	adds	r3, r7, r4
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	da20      	bge.n	8001364 <set_dev_eui+0x160>
        // Format 4: AT+ID=DevEui (RAK style)
        printf("DEBUG: Trying AT+ID=DevEui format...\n");
 8001322:	4b27      	ldr	r3, [pc, #156]	@ (80013c0 <set_dev_eui+0x1bc>)
 8001324:	0018      	movs	r0, r3
 8001326:	f005 ff87 	bl	8007238 <puts>
        snprintf(command, sizeof(command), "AT+ID=DevEui,\"%s\"\r\n", dev_eui);
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	4a25      	ldr	r2, [pc, #148]	@ (80013c4 <set_dev_eui+0x1c0>)
 800132e:	2508      	movs	r5, #8
 8001330:	1978      	adds	r0, r7, r5
 8001332:	2140      	movs	r1, #64	@ 0x40
 8001334:	f005 ff8a 	bl	800724c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001338:	1979      	adds	r1, r7, r5
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <set_dev_eui+0x19c>)
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	2301      	movs	r3, #1
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	23c8      	movs	r3, #200	@ 0xc8
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2300      	movs	r3, #0
 800134a:	2264      	movs	r2, #100	@ 0x64
 800134c:	f005 fc0b 	bl	8006b66 <ATC_SendReceive>
 8001350:	0003      	movs	r3, r0
 8001352:	193a      	adds	r2, r7, r4
 8001354:	6013      	str	r3, [r2, #0]
        printf("DEBUG: AT+ID=DevEui format returned %d\n", resp);
 8001356:	193b      	adds	r3, r7, r4
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <set_dev_eui+0x1c4>)
 800135c:	0011      	movs	r1, r2
 800135e:	0018      	movs	r0, r3
 8001360:	f005 fefa 	bl	8007158 <iprintf>
    }
    
    if (resp < 0) {
 8001364:	23a6      	movs	r3, #166	@ 0xa6
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	da05      	bge.n	800137c <set_dev_eui+0x178>
        printf("ERROR: All DevEUI command formats failed!\n");
 8001370:	4b16      	ldr	r3, [pc, #88]	@ (80013cc <set_dev_eui+0x1c8>)
 8001372:	0018      	movs	r0, r3
 8001374:	f005 ff60 	bl	8007238 <puts>
        return LORAWAN_ERR_DEV_EUI;
 8001378:	2301      	movs	r3, #1
 800137a:	e004      	b.n	8001386 <set_dev_eui+0x182>
    }
    
    printf("DEBUG: DevEUI set successfully with one of the formats\n");
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <set_dev_eui+0x1cc>)
 800137e:	0018      	movs	r0, r3
 8001380:	f005 ff5a 	bl	8007238 <puts>
    return LORAWAN_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b054      	add	sp, #336	@ 0x150
 800138c:	bdb0      	pop	{r4, r5, r7, pc}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	08008888 	.word	0x08008888
 8001394:	080088b0 	.word	0x080088b0
 8001398:	080088d0 	.word	0x080088d0
 800139c:	080088e4 	.word	0x080088e4
 80013a0:	080086a0 	.word	0x080086a0
 80013a4:	08008900 	.word	0x08008900
 80013a8:	08008924 	.word	0x08008924
 80013ac:	08008948 	.word	0x08008948
 80013b0:	08008958 	.word	0x08008958
 80013b4:	08008980 	.word	0x08008980
 80013b8:	080089a4 	.word	0x080089a4
 80013bc:	080089b4 	.word	0x080089b4
 80013c0:	080089dc 	.word	0x080089dc
 80013c4:	08008a04 	.word	0x08008a04
 80013c8:	08008a18 	.word	0x08008a18
 80013cc:	08008a40 	.word	0x08008a40
 80013d0:	08008a6c 	.word	0x08008a6c

080013d4 <set_app_eui>:
 * @brief Sets the Application EUI (AppEUI/JoinEUI).
 * @param lora Pointer to the ATC handle for communication.
 * @param app_eui Application EUI (16 hex characters).
 * @return LORAWAN_OK on success, LORAWAN_ERR_APP_EUI on failure.
 */
static LoRaWAN_Error_t set_app_eui(ATC_HandleTypeDef *lora, const char *app_eui) {
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b099      	sub	sp, #100	@ 0x64
 80013d8:	af04      	add	r7, sp, #16
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
    printf("DEBUG: set_app_eui called with EUI: %s\n", app_eui);
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	4b4e      	ldr	r3, [pc, #312]	@ (800151c <set_app_eui+0x148>)
 80013e2:	0011      	movs	r1, r2
 80013e4:	0018      	movs	r0, r3
 80013e6:	f005 feb7 	bl	8007158 <iprintf>
    char command[64];
    int resp = -1;
 80013ea:	2301      	movs	r3, #1
 80013ec:	425b      	negs	r3, r3
 80013ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
    
    // Try multiple command formats for AppEUI
    
    // Format 1: ATS 502 (your original format)
    printf("DEBUG: Trying ATS 502 format...\n");
 80013f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001520 <set_app_eui+0x14c>)
 80013f2:	0018      	movs	r0, r3
 80013f4:	f005 ff20 	bl	8007238 <puts>
    snprintf(command, sizeof(command), "AT%%S 502=\"%s\"\r\n", app_eui);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	4a4a      	ldr	r2, [pc, #296]	@ (8001524 <set_app_eui+0x150>)
 80013fc:	240c      	movs	r4, #12
 80013fe:	1938      	adds	r0, r7, r4
 8001400:	2140      	movs	r1, #64	@ 0x40
 8001402:	f005 ff23 	bl	800724c <sniprintf>
    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001406:	1939      	adds	r1, r7, r4
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	4b47      	ldr	r3, [pc, #284]	@ (8001528 <set_app_eui+0x154>)
 800140c:	9302      	str	r3, [sp, #8]
 800140e:	2301      	movs	r3, #1
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	23c8      	movs	r3, #200	@ 0xc8
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2300      	movs	r3, #0
 8001418:	2264      	movs	r2, #100	@ 0x64
 800141a:	f005 fba4 	bl	8006b66 <ATC_SendReceive>
 800141e:	0003      	movs	r3, r0
 8001420:	64fb      	str	r3, [r7, #76]	@ 0x4c
    printf("DEBUG: ATS 502 format returned %d\n", resp);
 8001422:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001424:	4b41      	ldr	r3, [pc, #260]	@ (800152c <set_app_eui+0x158>)
 8001426:	0011      	movs	r1, r2
 8001428:	0018      	movs	r0, r3
 800142a:	f005 fe95 	bl	8007158 <iprintf>
    
    if (resp < 0) {
 800142e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001430:	2b00      	cmp	r3, #0
 8001432:	da1d      	bge.n	8001470 <set_app_eui+0x9c>
        // Format 2: AT+APPEUI (common format)
        printf("DEBUG: Trying AT+APPEUI format...\n");
 8001434:	4b3e      	ldr	r3, [pc, #248]	@ (8001530 <set_app_eui+0x15c>)
 8001436:	0018      	movs	r0, r3
 8001438:	f005 fefe 	bl	8007238 <puts>
        snprintf(command, sizeof(command), "AT+APPEUI=%s\r\n", app_eui);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	4a3d      	ldr	r2, [pc, #244]	@ (8001534 <set_app_eui+0x160>)
 8001440:	1938      	adds	r0, r7, r4
 8001442:	2140      	movs	r1, #64	@ 0x40
 8001444:	f005 ff02 	bl	800724c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001448:	1939      	adds	r1, r7, r4
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	4b36      	ldr	r3, [pc, #216]	@ (8001528 <set_app_eui+0x154>)
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	2301      	movs	r3, #1
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	23c8      	movs	r3, #200	@ 0xc8
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2300      	movs	r3, #0
 800145a:	2264      	movs	r2, #100	@ 0x64
 800145c:	f005 fb83 	bl	8006b66 <ATC_SendReceive>
 8001460:	0003      	movs	r3, r0
 8001462:	64fb      	str	r3, [r7, #76]	@ 0x4c
        printf("DEBUG: AT+APPEUI format returned %d\n", resp);
 8001464:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001466:	4b34      	ldr	r3, [pc, #208]	@ (8001538 <set_app_eui+0x164>)
 8001468:	0011      	movs	r1, r2
 800146a:	0018      	movs	r0, r3
 800146c:	f005 fe74 	bl	8007158 <iprintf>
    }
    
    if (resp < 0) {
 8001470:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001472:	2b00      	cmp	r3, #0
 8001474:	da1e      	bge.n	80014b4 <set_app_eui+0xe0>
        // Format 3: AT+APP_EUI (alternative format)
        printf("DEBUG: Trying AT+APP_EUI format...\n");
 8001476:	4b31      	ldr	r3, [pc, #196]	@ (800153c <set_app_eui+0x168>)
 8001478:	0018      	movs	r0, r3
 800147a:	f005 fedd 	bl	8007238 <puts>
        snprintf(command, sizeof(command), "AT+APP_EUI=%s\r\n", app_eui);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	4a2f      	ldr	r2, [pc, #188]	@ (8001540 <set_app_eui+0x16c>)
 8001482:	240c      	movs	r4, #12
 8001484:	1938      	adds	r0, r7, r4
 8001486:	2140      	movs	r1, #64	@ 0x40
 8001488:	f005 fee0 	bl	800724c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800148c:	1939      	adds	r1, r7, r4
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	4b25      	ldr	r3, [pc, #148]	@ (8001528 <set_app_eui+0x154>)
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	2301      	movs	r3, #1
 8001496:	9301      	str	r3, [sp, #4]
 8001498:	23c8      	movs	r3, #200	@ 0xc8
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2300      	movs	r3, #0
 800149e:	2264      	movs	r2, #100	@ 0x64
 80014a0:	f005 fb61 	bl	8006b66 <ATC_SendReceive>
 80014a4:	0003      	movs	r3, r0
 80014a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        printf("DEBUG: AT+APP_EUI format returned %d\n", resp);
 80014a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80014aa:	4b26      	ldr	r3, [pc, #152]	@ (8001544 <set_app_eui+0x170>)
 80014ac:	0011      	movs	r1, r2
 80014ae:	0018      	movs	r0, r3
 80014b0:	f005 fe52 	bl	8007158 <iprintf>
    }
    
    if (resp < 0) {
 80014b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	da1e      	bge.n	80014f8 <set_app_eui+0x124>
        // Format 4: AT+ID=AppEui (RAK style)
        printf("DEBUG: Trying AT+ID=AppEui format...\n");
 80014ba:	4b23      	ldr	r3, [pc, #140]	@ (8001548 <set_app_eui+0x174>)
 80014bc:	0018      	movs	r0, r3
 80014be:	f005 febb 	bl	8007238 <puts>
        snprintf(command, sizeof(command), "AT+ID=AppEui,\"%s\"\r\n", app_eui);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	4a21      	ldr	r2, [pc, #132]	@ (800154c <set_app_eui+0x178>)
 80014c6:	240c      	movs	r4, #12
 80014c8:	1938      	adds	r0, r7, r4
 80014ca:	2140      	movs	r1, #64	@ 0x40
 80014cc:	f005 febe 	bl	800724c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80014d0:	1939      	adds	r1, r7, r4
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <set_app_eui+0x154>)
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	2301      	movs	r3, #1
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	23c8      	movs	r3, #200	@ 0xc8
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	2300      	movs	r3, #0
 80014e2:	2264      	movs	r2, #100	@ 0x64
 80014e4:	f005 fb3f 	bl	8006b66 <ATC_SendReceive>
 80014e8:	0003      	movs	r3, r0
 80014ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
        printf("DEBUG: AT+ID=AppEui format returned %d\n", resp);
 80014ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80014ee:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <set_app_eui+0x17c>)
 80014f0:	0011      	movs	r1, r2
 80014f2:	0018      	movs	r0, r3
 80014f4:	f005 fe30 	bl	8007158 <iprintf>
    }
    
    if (resp < 0) {
 80014f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da05      	bge.n	800150a <set_app_eui+0x136>
        printf("ERROR: All AppEUI command formats failed!\n");
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <set_app_eui+0x180>)
 8001500:	0018      	movs	r0, r3
 8001502:	f005 fe99 	bl	8007238 <puts>
        return LORAWAN_ERR_APP_EUI;
 8001506:	2302      	movs	r3, #2
 8001508:	e004      	b.n	8001514 <set_app_eui+0x140>
    }
    
    printf("DEBUG: AppEUI set successfully with one of the formats\n");
 800150a:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <set_app_eui+0x184>)
 800150c:	0018      	movs	r0, r3
 800150e:	f005 fe93 	bl	8007238 <puts>
    return LORAWAN_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	0018      	movs	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	b015      	add	sp, #84	@ 0x54
 800151a:	bd90      	pop	{r4, r7, pc}
 800151c:	08008aa4 	.word	0x08008aa4
 8001520:	08008acc 	.word	0x08008acc
 8001524:	08008aec 	.word	0x08008aec
 8001528:	080086a0 	.word	0x080086a0
 800152c:	08008b00 	.word	0x08008b00
 8001530:	08008b24 	.word	0x08008b24
 8001534:	08008b48 	.word	0x08008b48
 8001538:	08008b58 	.word	0x08008b58
 800153c:	08008b80 	.word	0x08008b80
 8001540:	08008ba4 	.word	0x08008ba4
 8001544:	08008bb4 	.word	0x08008bb4
 8001548:	08008bdc 	.word	0x08008bdc
 800154c:	08008c04 	.word	0x08008c04
 8001550:	08008c18 	.word	0x08008c18
 8001554:	08008c40 	.word	0x08008c40
 8001558:	08008c6c 	.word	0x08008c6c

0800155c <set_app_key>:
 * @brief Sets the Application Key (AppKey).
 * @param lora Pointer to the ATC handle for communication.
 * @param app_key Application key (32 hex characters).
 * @return LORAWAN_OK on success, LORAWAN_ERR_APP_KEY on failure.
 */
static LoRaWAN_Error_t set_app_key(ATC_HandleTypeDef *lora, const char *app_key) {
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b0a1      	sub	sp, #132	@ 0x84
 8001560:	af04      	add	r7, sp, #16
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
    printf("DEBUG: set_app_key called with key: %s\n", app_key);
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	4b54      	ldr	r3, [pc, #336]	@ (80016bc <set_app_key+0x160>)
 800156a:	0011      	movs	r1, r2
 800156c:	0018      	movs	r0, r3
 800156e:	f005 fdf3 	bl	8007158 <iprintf>
    char command[96];
    int resp = -1;
 8001572:	2301      	movs	r3, #1
 8001574:	425b      	negs	r3, r3
 8001576:	66fb      	str	r3, [r7, #108]	@ 0x6c
    
    // Try multiple command formats for AppKey
    
    // Format 1: ATS 500 (your original format)
    printf("DEBUG: Trying AT%%S 500 format...\n");
 8001578:	4b51      	ldr	r3, [pc, #324]	@ (80016c0 <set_app_key+0x164>)
 800157a:	0018      	movs	r0, r3
 800157c:	f005 fdec 	bl	8007158 <iprintf>
    snprintf(command, sizeof(command), "AT%%S 500=\"%s\"\r\n", app_key);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	4a50      	ldr	r2, [pc, #320]	@ (80016c4 <set_app_key+0x168>)
 8001584:	240c      	movs	r4, #12
 8001586:	1938      	adds	r0, r7, r4
 8001588:	2160      	movs	r1, #96	@ 0x60
 800158a:	f005 fe5f 	bl	800724c <sniprintf>
    printf("DEBUG: Command string: %s", command);
 800158e:	193a      	adds	r2, r7, r4
 8001590:	4b4d      	ldr	r3, [pc, #308]	@ (80016c8 <set_app_key+0x16c>)
 8001592:	0011      	movs	r1, r2
 8001594:	0018      	movs	r0, r3
 8001596:	f005 fddf 	bl	8007158 <iprintf>
    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800159a:	1939      	adds	r1, r7, r4
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	4b4b      	ldr	r3, [pc, #300]	@ (80016cc <set_app_key+0x170>)
 80015a0:	9302      	str	r3, [sp, #8]
 80015a2:	2301      	movs	r3, #1
 80015a4:	9301      	str	r3, [sp, #4]
 80015a6:	23c8      	movs	r3, #200	@ 0xc8
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2300      	movs	r3, #0
 80015ac:	2264      	movs	r2, #100	@ 0x64
 80015ae:	f005 fada 	bl	8006b66 <ATC_SendReceive>
 80015b2:	0003      	movs	r3, r0
 80015b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    printf("DEBUG: AT%%S 500 format returned %d\n", resp);
 80015b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015b8:	4b45      	ldr	r3, [pc, #276]	@ (80016d0 <set_app_key+0x174>)
 80015ba:	0011      	movs	r1, r2
 80015bc:	0018      	movs	r0, r3
 80015be:	f005 fdcb 	bl	8007158 <iprintf>
    
    if (resp < 0) {
 80015c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	da23      	bge.n	8001610 <set_app_key+0xb4>
        // Format 2: AT+APPKEY (common format)
        printf("DEBUG: Trying AT+APPKEY format...\n");
 80015c8:	4b42      	ldr	r3, [pc, #264]	@ (80016d4 <set_app_key+0x178>)
 80015ca:	0018      	movs	r0, r3
 80015cc:	f005 fe34 	bl	8007238 <puts>
        snprintf(command, sizeof(command), "AT+APPKEY=%s\r\n", app_key);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	4a41      	ldr	r2, [pc, #260]	@ (80016d8 <set_app_key+0x17c>)
 80015d4:	1938      	adds	r0, r7, r4
 80015d6:	2160      	movs	r1, #96	@ 0x60
 80015d8:	f005 fe38 	bl	800724c <sniprintf>
        printf("DEBUG: Command string: %s", command);
 80015dc:	193a      	adds	r2, r7, r4
 80015de:	4b3a      	ldr	r3, [pc, #232]	@ (80016c8 <set_app_key+0x16c>)
 80015e0:	0011      	movs	r1, r2
 80015e2:	0018      	movs	r0, r3
 80015e4:	f005 fdb8 	bl	8007158 <iprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80015e8:	1939      	adds	r1, r7, r4
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	4b37      	ldr	r3, [pc, #220]	@ (80016cc <set_app_key+0x170>)
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	2301      	movs	r3, #1
 80015f2:	9301      	str	r3, [sp, #4]
 80015f4:	23c8      	movs	r3, #200	@ 0xc8
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	2264      	movs	r2, #100	@ 0x64
 80015fc:	f005 fab3 	bl	8006b66 <ATC_SendReceive>
 8001600:	0003      	movs	r3, r0
 8001602:	66fb      	str	r3, [r7, #108]	@ 0x6c
        printf("DEBUG: AT+APPKEY format returned %d\n", resp);
 8001604:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001606:	4b35      	ldr	r3, [pc, #212]	@ (80016dc <set_app_key+0x180>)
 8001608:	0011      	movs	r1, r2
 800160a:	0018      	movs	r0, r3
 800160c:	f005 fda4 	bl	8007158 <iprintf>
    }
    
    if (resp < 0) {
 8001610:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001612:	2b00      	cmp	r3, #0
 8001614:	da1e      	bge.n	8001654 <set_app_key+0xf8>
        // Format 3: AT+APP_KEY (alternative format)
        printf("DEBUG: Trying AT+APP_KEY format...\n");
 8001616:	4b32      	ldr	r3, [pc, #200]	@ (80016e0 <set_app_key+0x184>)
 8001618:	0018      	movs	r0, r3
 800161a:	f005 fe0d 	bl	8007238 <puts>
        snprintf(command, sizeof(command), "AT+APP_KEY=%s\r\n", app_key);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	4a30      	ldr	r2, [pc, #192]	@ (80016e4 <set_app_key+0x188>)
 8001622:	240c      	movs	r4, #12
 8001624:	1938      	adds	r0, r7, r4
 8001626:	2160      	movs	r1, #96	@ 0x60
 8001628:	f005 fe10 	bl	800724c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800162c:	1939      	adds	r1, r7, r4
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4b26      	ldr	r3, [pc, #152]	@ (80016cc <set_app_key+0x170>)
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2301      	movs	r3, #1
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	23c8      	movs	r3, #200	@ 0xc8
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2300      	movs	r3, #0
 800163e:	2264      	movs	r2, #100	@ 0x64
 8001640:	f005 fa91 	bl	8006b66 <ATC_SendReceive>
 8001644:	0003      	movs	r3, r0
 8001646:	66fb      	str	r3, [r7, #108]	@ 0x6c
        printf("DEBUG: AT+APP_KEY format returned %d\n", resp);
 8001648:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800164a:	4b27      	ldr	r3, [pc, #156]	@ (80016e8 <set_app_key+0x18c>)
 800164c:	0011      	movs	r1, r2
 800164e:	0018      	movs	r0, r3
 8001650:	f005 fd82 	bl	8007158 <iprintf>
    }
    
    if (resp < 0) {
 8001654:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001656:	2b00      	cmp	r3, #0
 8001658:	da1e      	bge.n	8001698 <set_app_key+0x13c>
        // Format 4: AT+KEY=APPKEY (RAK style)
        printf("DEBUG: Trying AT+KEY=APPKEY format...\n");
 800165a:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <set_app_key+0x190>)
 800165c:	0018      	movs	r0, r3
 800165e:	f005 fdeb 	bl	8007238 <puts>
        snprintf(command, sizeof(command), "AT+KEY=APPKEY,\"%s\"\r\n", app_key);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	4a22      	ldr	r2, [pc, #136]	@ (80016f0 <set_app_key+0x194>)
 8001666:	240c      	movs	r4, #12
 8001668:	1938      	adds	r0, r7, r4
 800166a:	2160      	movs	r1, #96	@ 0x60
 800166c:	f005 fdee 	bl	800724c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001670:	1939      	adds	r1, r7, r4
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <set_app_key+0x170>)
 8001676:	9302      	str	r3, [sp, #8]
 8001678:	2301      	movs	r3, #1
 800167a:	9301      	str	r3, [sp, #4]
 800167c:	23c8      	movs	r3, #200	@ 0xc8
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	2300      	movs	r3, #0
 8001682:	2264      	movs	r2, #100	@ 0x64
 8001684:	f005 fa6f 	bl	8006b66 <ATC_SendReceive>
 8001688:	0003      	movs	r3, r0
 800168a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        printf("DEBUG: AT+KEY=APPKEY format returned %d\n", resp);
 800168c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800168e:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <set_app_key+0x198>)
 8001690:	0011      	movs	r1, r2
 8001692:	0018      	movs	r0, r3
 8001694:	f005 fd60 	bl	8007158 <iprintf>
    }
    
    if (resp < 0) {
 8001698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800169a:	2b00      	cmp	r3, #0
 800169c:	da05      	bge.n	80016aa <set_app_key+0x14e>
        printf("ERROR: All AppKey command formats failed!\n");
 800169e:	4b16      	ldr	r3, [pc, #88]	@ (80016f8 <set_app_key+0x19c>)
 80016a0:	0018      	movs	r0, r3
 80016a2:	f005 fdc9 	bl	8007238 <puts>
        return LORAWAN_ERR_APP_KEY;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e004      	b.n	80016b4 <set_app_key+0x158>
    }
    
    printf("DEBUG: AppKey set successfully with one of the formats\n");
 80016aa:	4b14      	ldr	r3, [pc, #80]	@ (80016fc <set_app_key+0x1a0>)
 80016ac:	0018      	movs	r0, r3
 80016ae:	f005 fdc3 	bl	8007238 <puts>
    return LORAWAN_OK;
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	0018      	movs	r0, r3
 80016b6:	46bd      	mov	sp, r7
 80016b8:	b01d      	add	sp, #116	@ 0x74
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	08008ca4 	.word	0x08008ca4
 80016c0:	08008ccc 	.word	0x08008ccc
 80016c4:	08008cf0 	.word	0x08008cf0
 80016c8:	080088e4 	.word	0x080088e4
 80016cc:	080086a0 	.word	0x080086a0
 80016d0:	08008d04 	.word	0x08008d04
 80016d4:	08008d2c 	.word	0x08008d2c
 80016d8:	08008d50 	.word	0x08008d50
 80016dc:	08008d60 	.word	0x08008d60
 80016e0:	08008d88 	.word	0x08008d88
 80016e4:	08008dac 	.word	0x08008dac
 80016e8:	08008dbc 	.word	0x08008dbc
 80016ec:	08008de4 	.word	0x08008de4
 80016f0:	08008e0c 	.word	0x08008e0c
 80016f4:	08008e24 	.word	0x08008e24
 80016f8:	08008e50 	.word	0x08008e50
 80016fc:	08008e7c 	.word	0x08008e7c

08001700 <configure_region_and_channel>:
/**
 * @brief Configures the region and sub-band for Japan (AS923-1) with TTN.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t configure_region_and_channel(ATC_HandleTypeDef *lora) {
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b091      	sub	sp, #68	@ 0x44
 8001704:	af04      	add	r7, sp, #16
 8001706:	6078      	str	r0, [r7, #4]
    char command[32];
    int resp;

    // Set region to AS923-1 (Japan)
    snprintf(command, sizeof(command), "AT%%S 611=%d\r\n", JAPAN_REGION);
 8001708:	4a0f      	ldr	r2, [pc, #60]	@ (8001748 <configure_region_and_channel+0x48>)
 800170a:	240c      	movs	r4, #12
 800170c:	1938      	adds	r0, r7, r4
 800170e:	2309      	movs	r3, #9
 8001710:	2120      	movs	r1, #32
 8001712:	f005 fd9b 	bl	800724c <sniprintf>
    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001716:	1939      	adds	r1, r7, r4
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <configure_region_and_channel+0x4c>)
 800171c:	9302      	str	r3, [sp, #8]
 800171e:	2301      	movs	r3, #1
 8001720:	9301      	str	r3, [sp, #4]
 8001722:	23c8      	movs	r3, #200	@ 0xc8
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2300      	movs	r3, #0
 8001728:	2264      	movs	r2, #100	@ 0x64
 800172a:	f005 fa1c 	bl	8006b66 <ATC_SendReceive>
 800172e:	0003      	movs	r3, r0
 8001730:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 8001732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001734:	2b00      	cmp	r3, #0
 8001736:	da01      	bge.n	800173c <configure_region_and_channel+0x3c>
 8001738:	2305      	movs	r3, #5
 800173a:	e000      	b.n	800173e <configure_region_and_channel+0x3e>
    // Set sub-band channel for TTN
//    snprintf(command, sizeof(command), "ATS 606=%d\r\n", TTN_SUBBAND_CHANNEL);
//    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
//    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;

    return LORAWAN_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b00d      	add	sp, #52	@ 0x34
 8001744:	bd90      	pop	{r4, r7, pc}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	08008eb4 	.word	0x08008eb4
 800174c:	080086a0 	.word	0x080086a0

08001750 <check_and_set_frequency>:
/**
 * @brief Checks and sets the frequency to ensure compliance with AS923-1 (923.2–923.4 MHz).
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND or LORAWAN_ERR_FREQ_CHECK on failure.
 */
static LoRaWAN_Error_t check_and_set_frequency(ATC_HandleTypeDef *lora) {
 8001750:	b580      	push	{r7, lr}
 8001752:	b0c8      	sub	sp, #288	@ 0x120
 8001754:	af04      	add	r7, sp, #16
 8001756:	6078      	str	r0, [r7, #4]
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 8001758:	230c      	movs	r3, #12
 800175a:	18fb      	adds	r3, r7, r3
 800175c:	60bb      	str	r3, [r7, #8]
    int resp = ATC_SendReceive(lora, "AT%%S 605?\r\n", 100, &response_ptr, 200, 1, "OK");
 800175e:	2308      	movs	r3, #8
 8001760:	18fa      	adds	r2, r7, r3
 8001762:	490e      	ldr	r1, [pc, #56]	@ (800179c <check_and_set_frequency+0x4c>)
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <check_and_set_frequency+0x50>)
 8001768:	9302      	str	r3, [sp, #8]
 800176a:	2301      	movs	r3, #1
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	23c8      	movs	r3, #200	@ 0xc8
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	0013      	movs	r3, r2
 8001774:	2264      	movs	r2, #100	@ 0x64
 8001776:	f005 f9f6 	bl	8006b66 <ATC_SendReceive>
 800177a:	0003      	movs	r3, r0
 800177c:	2286      	movs	r2, #134	@ 0x86
 800177e:	0052      	lsls	r2, r2, #1
 8001780:	18b9      	adds	r1, r7, r2
 8001782:	600b      	str	r3, [r1, #0]
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 8001784:	18bb      	adds	r3, r7, r2
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	da01      	bge.n	8001790 <check_and_set_frequency+0x40>
 800178c:	2305      	movs	r3, #5
 800178e:	e000      	b.n	8001792 <check_and_set_frequency+0x42>
//        char command[32];
//        snprintf(command, sizeof(command), "ATS 605=%u\r\n", DEFAULT_FREQ);
//        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
//        if (resp < 0) return LORAWAN_ERR_FREQ_CHECK;
//    }
    return LORAWAN_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	b044      	add	sp, #272	@ 0x110
 8001798:	bd80      	pop	{r7, pc}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	08008ec4 	.word	0x08008ec4
 80017a0:	080086a0 	.word	0x080086a0

080017a4 <configure_lorawan_params>:
/**
 * @brief Configures LoRaWAN parameters (ADR, OTAA, Class, Data Rate, TX Power).
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, or an error code from a failed sub-function.
 */
static LoRaWAN_Error_t configure_lorawan_params(ATC_HandleTypeDef *lora) {
 80017a4:	b5b0      	push	{r4, r5, r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
    LoRaWAN_Error_t err;

    // Disable ADR
    if ((err = set_adr(lora, false)) != LORAWAN_OK) return err;
 80017ac:	250f      	movs	r5, #15
 80017ae:	197c      	adds	r4, r7, r5
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2100      	movs	r1, #0
 80017b4:	0018      	movs	r0, r3
 80017b6:	f000 f84d 	bl	8001854 <set_adr>
 80017ba:	0003      	movs	r3, r0
 80017bc:	7023      	strb	r3, [r4, #0]
 80017be:	197b      	adds	r3, r7, r5
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <configure_lorawan_params+0x28>
 80017c6:	197b      	adds	r3, r7, r5
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	e03f      	b.n	800184c <configure_lorawan_params+0xa8>

    // Enable OTAA
    if ((err = set_otaa(lora, true)) != LORAWAN_OK) return err;
 80017cc:	250f      	movs	r5, #15
 80017ce:	197c      	adds	r4, r7, r5
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2101      	movs	r1, #1
 80017d4:	0018      	movs	r0, r3
 80017d6:	f000 f869 	bl	80018ac <set_otaa>
 80017da:	0003      	movs	r3, r0
 80017dc:	7023      	strb	r3, [r4, #0]
 80017de:	197b      	adds	r3, r7, r5
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <configure_lorawan_params+0x48>
 80017e6:	197b      	adds	r3, r7, r5
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	e02f      	b.n	800184c <configure_lorawan_params+0xa8>

    // Set Class A
    if ((err = set_class_a(lora)) != LORAWAN_OK) return err;
 80017ec:	250f      	movs	r5, #15
 80017ee:	197c      	adds	r4, r7, r5
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	0018      	movs	r0, r3
 80017f4:	f000 f886 	bl	8001904 <set_class_a>
 80017f8:	0003      	movs	r3, r0
 80017fa:	7023      	strb	r3, [r4, #0]
 80017fc:	197b      	adds	r3, r7, r5
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d002      	beq.n	800180a <configure_lorawan_params+0x66>
 8001804:	197b      	adds	r3, r7, r5
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	e020      	b.n	800184c <configure_lorawan_params+0xa8>

    // Set static data rate (DR0)
    if ((err = set_data_rate(lora, DATA_RATE)) != LORAWAN_OK) return err;
 800180a:	250f      	movs	r5, #15
 800180c:	197c      	adds	r4, r7, r5
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2100      	movs	r1, #0
 8001812:	0018      	movs	r0, r3
 8001814:	f000 f896 	bl	8001944 <set_data_rate>
 8001818:	0003      	movs	r3, r0
 800181a:	7023      	strb	r3, [r4, #0]
 800181c:	197b      	adds	r3, r7, r5
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d002      	beq.n	800182a <configure_lorawan_params+0x86>
 8001824:	197b      	adds	r3, r7, r5
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	e010      	b.n	800184c <configure_lorawan_params+0xa8>

    // Set TX power (11 dBm for Japan compliance)
    if ((err = set_tx_power(lora, TX_POWER)) != LORAWAN_OK) return err;
 800182a:	250f      	movs	r5, #15
 800182c:	197c      	adds	r4, r7, r5
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	210b      	movs	r1, #11
 8001832:	0018      	movs	r0, r3
 8001834:	f000 f8ae 	bl	8001994 <set_tx_power>
 8001838:	0003      	movs	r3, r0
 800183a:	7023      	strb	r3, [r4, #0]
 800183c:	197b      	adds	r3, r7, r5
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d002      	beq.n	800184a <configure_lorawan_params+0xa6>
 8001844:	197b      	adds	r3, r7, r5
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	e000      	b.n	800184c <configure_lorawan_params+0xa8>

    return LORAWAN_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	b004      	add	sp, #16
 8001852:	bdb0      	pop	{r4, r5, r7, pc}

08001854 <set_adr>:
 * @brief Disables or enables Adaptive Data Rate (ADR).
 * @param lora Pointer to the ATC handle for communication.
 * @param enable true to enable ADR, false to disable.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_adr(ATC_HandleTypeDef *lora, bool enable) {
 8001854:	b590      	push	{r4, r7, lr}
 8001856:	b091      	sub	sp, #68	@ 0x44
 8001858:	af04      	add	r7, sp, #16
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	000a      	movs	r2, r1
 800185e:	1cfb      	adds	r3, r7, #3
 8001860:	701a      	strb	r2, [r3, #0]
    char command[32];
    snprintf(command, sizeof(command), "AT%%S 600=%d\r\n", enable ? 1 : 0);
 8001862:	1cfb      	adds	r3, r7, #3
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4a0f      	ldr	r2, [pc, #60]	@ (80018a4 <set_adr+0x50>)
 8001868:	240c      	movs	r4, #12
 800186a:	1938      	adds	r0, r7, r4
 800186c:	2120      	movs	r1, #32
 800186e:	f005 fced 	bl	800724c <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001872:	1939      	adds	r1, r7, r4
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <set_adr+0x54>)
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	2301      	movs	r3, #1
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	23c8      	movs	r3, #200	@ 0xc8
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2300      	movs	r3, #0
 8001884:	2264      	movs	r2, #100	@ 0x64
 8001886:	f005 f96e 	bl	8006b66 <ATC_SendReceive>
 800188a:	0003      	movs	r3, r0
 800188c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 800188e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001890:	2b00      	cmp	r3, #0
 8001892:	da01      	bge.n	8001898 <set_adr+0x44>
 8001894:	2305      	movs	r3, #5
 8001896:	e000      	b.n	800189a <set_adr+0x46>
 8001898:	2300      	movs	r3, #0
}
 800189a:	0018      	movs	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	b00d      	add	sp, #52	@ 0x34
 80018a0:	bd90      	pop	{r4, r7, pc}
 80018a2:	46c0      	nop			@ (mov r8, r8)
 80018a4:	08008ed4 	.word	0x08008ed4
 80018a8:	080086a0 	.word	0x080086a0

080018ac <set_otaa>:
 * @brief Enables or disables Over-The-Air Activation (OTAA).
 * @param lora Pointer to the ATC handle for communication.
 * @param enable true to enable OTAA, false to disable.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_otaa(ATC_HandleTypeDef *lora, bool enable) {
 80018ac:	b590      	push	{r4, r7, lr}
 80018ae:	b091      	sub	sp, #68	@ 0x44
 80018b0:	af04      	add	r7, sp, #16
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	000a      	movs	r2, r1
 80018b6:	1cfb      	adds	r3, r7, #3
 80018b8:	701a      	strb	r2, [r3, #0]
    char command[32];
    snprintf(command, sizeof(command), "AT%%S 602=%d\r\n", enable ? 1 : 0);
 80018ba:	1cfb      	adds	r3, r7, #3
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	4a0f      	ldr	r2, [pc, #60]	@ (80018fc <set_otaa+0x50>)
 80018c0:	240c      	movs	r4, #12
 80018c2:	1938      	adds	r0, r7, r4
 80018c4:	2120      	movs	r1, #32
 80018c6:	f005 fcc1 	bl	800724c <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80018ca:	1939      	adds	r1, r7, r4
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <set_otaa+0x54>)
 80018d0:	9302      	str	r3, [sp, #8]
 80018d2:	2301      	movs	r3, #1
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	23c8      	movs	r3, #200	@ 0xc8
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	2300      	movs	r3, #0
 80018dc:	2264      	movs	r2, #100	@ 0x64
 80018de:	f005 f942 	bl	8006b66 <ATC_SendReceive>
 80018e2:	0003      	movs	r3, r0
 80018e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 80018e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da01      	bge.n	80018f0 <set_otaa+0x44>
 80018ec:	2305      	movs	r3, #5
 80018ee:	e000      	b.n	80018f2 <set_otaa+0x46>
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	0018      	movs	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b00d      	add	sp, #52	@ 0x34
 80018f8:	bd90      	pop	{r4, r7, pc}
 80018fa:	46c0      	nop			@ (mov r8, r8)
 80018fc:	08008ee4 	.word	0x08008ee4
 8001900:	080086a0 	.word	0x080086a0

08001904 <set_class_a>:
/**
 * @brief Sets the LoRaWAN device to Class A.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_class_a(ATC_HandleTypeDef *lora) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b088      	sub	sp, #32
 8001908:	af04      	add	r7, sp, #16
 800190a:	6078      	str	r0, [r7, #4]
    int resp = ATC_SendReceive(lora, "AT%%S 603=0\r\n", 100, NULL, 200, 1, "OK");
 800190c:	490b      	ldr	r1, [pc, #44]	@ (800193c <set_class_a+0x38>)
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <set_class_a+0x3c>)
 8001912:	9302      	str	r3, [sp, #8]
 8001914:	2301      	movs	r3, #1
 8001916:	9301      	str	r3, [sp, #4]
 8001918:	23c8      	movs	r3, #200	@ 0xc8
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2300      	movs	r3, #0
 800191e:	2264      	movs	r2, #100	@ 0x64
 8001920:	f005 f921 	bl	8006b66 <ATC_SendReceive>
 8001924:	0003      	movs	r3, r0
 8001926:	60fb      	str	r3, [r7, #12]
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2b00      	cmp	r3, #0
 800192c:	da01      	bge.n	8001932 <set_class_a+0x2e>
 800192e:	2305      	movs	r3, #5
 8001930:	e000      	b.n	8001934 <set_class_a+0x30>
 8001932:	2300      	movs	r3, #0
}
 8001934:	0018      	movs	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	b004      	add	sp, #16
 800193a:	bd80      	pop	{r7, pc}
 800193c:	08008ef4 	.word	0x08008ef4
 8001940:	080086a0 	.word	0x080086a0

08001944 <set_data_rate>:
 * @brief Sets the static data rate for LoRaWAN communication.
 * @param lora Pointer to the ATC handle for communication.
 * @param dr Data rate to set (e.g., 0 for DR0).
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_data_rate(ATC_HandleTypeDef *lora, int dr) {
 8001944:	b590      	push	{r4, r7, lr}
 8001946:	b091      	sub	sp, #68	@ 0x44
 8001948:	af04      	add	r7, sp, #16
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
    char command[32];
    snprintf(command, sizeof(command), "AT%%S 713=%d\r\n", dr);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	4a0e      	ldr	r2, [pc, #56]	@ (800198c <set_data_rate+0x48>)
 8001952:	240c      	movs	r4, #12
 8001954:	1938      	adds	r0, r7, r4
 8001956:	2120      	movs	r1, #32
 8001958:	f005 fc78 	bl	800724c <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800195c:	1939      	adds	r1, r7, r4
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <set_data_rate+0x4c>)
 8001962:	9302      	str	r3, [sp, #8]
 8001964:	2301      	movs	r3, #1
 8001966:	9301      	str	r3, [sp, #4]
 8001968:	23c8      	movs	r3, #200	@ 0xc8
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	2300      	movs	r3, #0
 800196e:	2264      	movs	r2, #100	@ 0x64
 8001970:	f005 f8f9 	bl	8006b66 <ATC_SendReceive>
 8001974:	0003      	movs	r3, r0
 8001976:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 8001978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800197a:	2b00      	cmp	r3, #0
 800197c:	da01      	bge.n	8001982 <set_data_rate+0x3e>
 800197e:	2305      	movs	r3, #5
 8001980:	e000      	b.n	8001984 <set_data_rate+0x40>
 8001982:	2300      	movs	r3, #0
}
 8001984:	0018      	movs	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	b00d      	add	sp, #52	@ 0x34
 800198a:	bd90      	pop	{r4, r7, pc}
 800198c:	08008f04 	.word	0x08008f04
 8001990:	080086a0 	.word	0x080086a0

08001994 <set_tx_power>:
 * @brief Sets the TX power for LoRaWAN transmission.
 * @param lora Pointer to the ATC handle for communication.
 * @param power TX power in dBm (e.g., 11 for Japan compliance).
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_tx_power(ATC_HandleTypeDef *lora, int power) {
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b091      	sub	sp, #68	@ 0x44
 8001998:	af04      	add	r7, sp, #16
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
    char command[32];
    snprintf(command, sizeof(command), "AT%%S 714=%d\r\n", power);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	4a0e      	ldr	r2, [pc, #56]	@ (80019dc <set_tx_power+0x48>)
 80019a2:	240c      	movs	r4, #12
 80019a4:	1938      	adds	r0, r7, r4
 80019a6:	2120      	movs	r1, #32
 80019a8:	f005 fc50 	bl	800724c <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80019ac:	1939      	adds	r1, r7, r4
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	4b0b      	ldr	r3, [pc, #44]	@ (80019e0 <set_tx_power+0x4c>)
 80019b2:	9302      	str	r3, [sp, #8]
 80019b4:	2301      	movs	r3, #1
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	23c8      	movs	r3, #200	@ 0xc8
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	2264      	movs	r2, #100	@ 0x64
 80019c0:	f005 f8d1 	bl	8006b66 <ATC_SendReceive>
 80019c4:	0003      	movs	r3, r0
 80019c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 80019c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	da01      	bge.n	80019d2 <set_tx_power+0x3e>
 80019ce:	2305      	movs	r3, #5
 80019d0:	e000      	b.n	80019d4 <set_tx_power+0x40>
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	0018      	movs	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b00d      	add	sp, #52	@ 0x34
 80019da:	bd90      	pop	{r4, r7, pc}
 80019dc:	08008f14 	.word	0x08008f14
 80019e0:	080086a0 	.word	0x080086a0

080019e4 <join_network>:
/**
 * @brief Initiates the LoRaWAN network join process using OTAA.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on successful join, LORAWAN_ERR_JOIN or LORAWAN_ERR_AT_COMMAND on failure.
 */
LoRaWAN_Error_t join_network(ATC_HandleTypeDef *lora) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b0c8      	sub	sp, #288	@ 0x120
 80019e8:	af04      	add	r7, sp, #16
 80019ea:	6078      	str	r0, [r7, #4]
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 80019ec:	230c      	movs	r3, #12
 80019ee:	18fb      	adds	r3, r7, r3
 80019f0:	60bb      	str	r3, [r7, #8]
    int resp = ATC_SendReceive(lora, "AT+JOIN\r\n", 100, &response_ptr, JOIN_TIMEOUT_MS, 1, "OK");
 80019f2:	2308      	movs	r3, #8
 80019f4:	18fa      	adds	r2, r7, r3
 80019f6:	490e      	ldr	r1, [pc, #56]	@ (8001a30 <join_network+0x4c>)
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <join_network+0x50>)
 80019fc:	9302      	str	r3, [sp, #8]
 80019fe:	2301      	movs	r3, #1
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	4b0d      	ldr	r3, [pc, #52]	@ (8001a38 <join_network+0x54>)
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	0013      	movs	r3, r2
 8001a08:	2264      	movs	r2, #100	@ 0x64
 8001a0a:	f005 f8ac 	bl	8006b66 <ATC_SendReceive>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	2286      	movs	r2, #134	@ 0x86
 8001a12:	0052      	lsls	r2, r2, #1
 8001a14:	18b9      	adds	r1, r7, r2
 8001a16:	600b      	str	r3, [r1, #0]
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 8001a18:	18bb      	adds	r3, r7, r2
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	da01      	bge.n	8001a24 <join_network+0x40>
 8001a20:	2305      	movs	r3, #5
 8001a22:	e000      	b.n	8001a26 <join_network+0x42>
    // Check for join success (expecting a response like "+JOIN: Joined" or similar)
//    if (strstr(response, "Joined") == NULL) {
//        return LORAWAN_ERR_JOIN;
//    }

    return LORAWAN_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b044      	add	sp, #272	@ 0x110
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	08008f24 	.word	0x08008f24
 8001a34:	080086a0 	.word	0x080086a0
 8001a38:	00002710 	.word	0x00002710

08001a3c <save_and_reset>:
/**
 * @brief Saves settings to non-volatile memory and performs a warm reset.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_SAVE_RESET on failure.
 */
static LoRaWAN_Error_t save_and_reset(ATC_HandleTypeDef *lora) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af04      	add	r7, sp, #16
 8001a42:	6078      	str	r0, [r7, #4]
    int resp;

    // Save settings to non-volatile memory
    resp = ATC_SendReceive(lora, "AT&W\r\n", 100, NULL, 200, 1, "OK");
 8001a44:	4915      	ldr	r1, [pc, #84]	@ (8001a9c <save_and_reset+0x60>)
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <save_and_reset+0x64>)
 8001a4a:	9302      	str	r3, [sp, #8]
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	23c8      	movs	r3, #200	@ 0xc8
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	2300      	movs	r3, #0
 8001a56:	2264      	movs	r2, #100	@ 0x64
 8001a58:	f005 f885 	bl	8006b66 <ATC_SendReceive>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	60fb      	str	r3, [r7, #12]
    if (resp < 0) return LORAWAN_ERR_SAVE_RESET;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	da01      	bge.n	8001a6a <save_and_reset+0x2e>
 8001a66:	2306      	movs	r3, #6
 8001a68:	e013      	b.n	8001a92 <save_and_reset+0x56>

    // Perform warm reset
    resp = ATC_SendReceive(lora, "ATZ\r\n", 100, NULL, 200, 1, "OK");
 8001a6a:	490e      	ldr	r1, [pc, #56]	@ (8001aa4 <save_and_reset+0x68>)
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <save_and_reset+0x64>)
 8001a70:	9302      	str	r3, [sp, #8]
 8001a72:	2301      	movs	r3, #1
 8001a74:	9301      	str	r3, [sp, #4]
 8001a76:	23c8      	movs	r3, #200	@ 0xc8
 8001a78:	9300      	str	r3, [sp, #0]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	2264      	movs	r2, #100	@ 0x64
 8001a7e:	f005 f872 	bl	8006b66 <ATC_SendReceive>
 8001a82:	0003      	movs	r3, r0
 8001a84:	60fb      	str	r3, [r7, #12]
    if (resp < 0) return LORAWAN_ERR_SAVE_RESET;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da01      	bge.n	8001a90 <save_and_reset+0x54>
 8001a8c:	2306      	movs	r3, #6
 8001a8e:	e000      	b.n	8001a92 <save_and_reset+0x56>

    return LORAWAN_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	0018      	movs	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b004      	add	sp, #16
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	08008fb4 	.word	0x08008fb4
 8001aa0:	080086a0 	.word	0x080086a0
 8001aa4:	08008fbc 	.word	0x08008fbc

08001aa8 <to_hex_str>:

void to_hex_str(uint32_t value, uint8_t width, char *output) {
 8001aa8:	b5b0      	push	{r4, r5, r7, lr}
 8001aaa:	b08a      	sub	sp, #40	@ 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	607a      	str	r2, [r7, #4]
 8001ab2:	250b      	movs	r5, #11
 8001ab4:	197b      	adds	r3, r7, r5
 8001ab6:	1c0a      	adds	r2, r1, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
    const char hex_chars[] = "0123456789ABCDEF";
 8001aba:	2310      	movs	r3, #16
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	4a15      	ldr	r2, [pc, #84]	@ (8001b14 <to_hex_str+0x6c>)
 8001ac0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ac2:	c313      	stmia	r3!, {r0, r1, r4}
 8001ac4:	6811      	ldr	r1, [r2, #0]
 8001ac6:	6019      	str	r1, [r3, #0]
 8001ac8:	7912      	ldrb	r2, [r2, #4]
 8001aca:	711a      	strb	r2, [r3, #4]
    for (int i = width - 1; i >= 0; --i) {
 8001acc:	197b      	adds	r3, r7, r5
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad4:	e00f      	b.n	8001af6 <to_hex_str+0x4e>
        output[i] = hex_chars[value & 0xF];
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	220f      	movs	r2, #15
 8001ada:	401a      	ands	r2, r3
 8001adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	18cb      	adds	r3, r1, r3
 8001ae2:	2110      	movs	r1, #16
 8001ae4:	1879      	adds	r1, r7, r1
 8001ae6:	5c8a      	ldrb	r2, [r1, r2]
 8001ae8:	701a      	strb	r2, [r3, #0]
        value >>= 4;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	091b      	lsrs	r3, r3, #4
 8001aee:	60fb      	str	r3, [r7, #12]
    for (int i = width - 1; i >= 0; --i) {
 8001af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af2:	3b01      	subs	r3, #1
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	daec      	bge.n	8001ad6 <to_hex_str+0x2e>
    }
    output[width] = '\0';
 8001afc:	230b      	movs	r3, #11
 8001afe:	18fb      	adds	r3, r7, r3
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	18d3      	adds	r3, r2, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
}
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b00a      	add	sp, #40	@ 0x28
 8001b10:	bdb0      	pop	{r4, r5, r7, pc}
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	08008fc4 	.word	0x08008fc4

08001b18 <format_at_send_cmd>:

void format_at_send_cmd(uint32_t data, uint8_t hex_digits, char *out_buf) {
 8001b18:	b5b0      	push	{r4, r5, r7, lr}
 8001b1a:	b08e      	sub	sp, #56	@ 0x38
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	240b      	movs	r4, #11
 8001b24:	193b      	adds	r3, r7, r4
 8001b26:	1c0a      	adds	r2, r1, #0
 8001b28:	701a      	strb	r2, [r3, #0]
    char hex_str[33];  // hex + null
    to_hex_str(data, hex_digits, hex_str);
 8001b2a:	2510      	movs	r5, #16
 8001b2c:	197a      	adds	r2, r7, r5
 8001b2e:	193b      	adds	r3, r7, r4
 8001b30:	7819      	ldrb	r1, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7ff ffb7 	bl	8001aa8 <to_hex_str>

    // Format command: AT+SEND "HEXDATA"\r\n
    char *p = out_buf;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	637b      	str	r3, [r7, #52]	@ 0x34
    strcpy(p, "AT+SEND \""); p += 9;
 8001b3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b40:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <format_at_send_cmd+0x6c>)
 8001b42:	0010      	movs	r0, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	230a      	movs	r3, #10
 8001b48:	001a      	movs	r2, r3
 8001b4a:	f005 fd68 	bl	800761e <memcpy>
 8001b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b50:	3309      	adds	r3, #9
 8001b52:	637b      	str	r3, [r7, #52]	@ 0x34
    strcpy(p, hex_str);     p += hex_digits;
 8001b54:	197a      	adds	r2, r7, r5
 8001b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b58:	0011      	movs	r1, r2
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f005 fd57 	bl	800760e <strcpy>
 8001b60:	193b      	adds	r3, r7, r4
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b66:	18d3      	adds	r3, r2, r3
 8001b68:	637b      	str	r3, [r7, #52]	@ 0x34
    strcpy(p, "\"\r\n");    // terminate
 8001b6a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001b6c:	4b06      	ldr	r3, [pc, #24]	@ (8001b88 <format_at_send_cmd+0x70>)
 8001b6e:	0010      	movs	r0, r2
 8001b70:	0019      	movs	r1, r3
 8001b72:	2304      	movs	r3, #4
 8001b74:	001a      	movs	r2, r3
 8001b76:	f005 fd52 	bl	800761e <memcpy>
}
 8001b7a:	46c0      	nop			@ (mov r8, r8)
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	b00e      	add	sp, #56	@ 0x38
 8001b80:	bdb0      	pop	{r4, r5, r7, pc}
 8001b82:	46c0      	nop			@ (mov r8, r8)
 8001b84:	08008fd8 	.word	0x08008fd8
 8001b88:	08008fe4 	.word	0x08008fe4

08001b8c <scan_i2c_bus>:
uint16_t temp_ticks_2 = 0;
uint16_t hum_ticks_2 = 0;
int16_t error = 0;

void scan_i2c_bus(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
	printf("DEBUG: Starting I2C scan\n");
 8001b92:	4b34      	ldr	r3, [pc, #208]	@ (8001c64 <scan_i2c_bus+0xd8>)
 8001b94:	0018      	movs	r0, r3
 8001b96:	f005 fb4f 	bl	8007238 <puts>
	
	// Reset sensor flags
	has_sensor_1 = false;
 8001b9a:	4b33      	ldr	r3, [pc, #204]	@ (8001c68 <scan_i2c_bus+0xdc>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
	has_sensor_2 = false;
 8001ba0:	4b32      	ldr	r3, [pc, #200]	@ (8001c6c <scan_i2c_bus+0xe0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	701a      	strb	r2, [r3, #0]
	
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8001ba6:	4b32      	ldr	r3, [pc, #200]	@ (8001c70 <scan_i2c_bus+0xe4>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	2120      	movs	r1, #32
 8001bac:	0018      	movs	r0, r3
 8001bae:	f001 f95b 	bl	8002e68 <HAL_GPIO_WritePin>
	printf("DEBUG: I2C power enabled\n");
 8001bb2:	4b30      	ldr	r3, [pc, #192]	@ (8001c74 <scan_i2c_bus+0xe8>)
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f005 fb3f 	bl	8007238 <puts>
    HAL_Delay(100); // let bus settle
 8001bba:	2064      	movs	r0, #100	@ 0x64
 8001bbc:	f000 fc80 	bl	80024c0 <HAL_Delay>

    uint8_t addr;
    for (addr = 3; addr < 0x78; addr++)
 8001bc0:	1dfb      	adds	r3, r7, #7
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	e02d      	b.n	8001c24 <scan_i2c_bus+0x98>
    {
        // HAL expects 8-bit address = 7-bit << 1
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, 10) == HAL_OK)
 8001bc8:	1dfb      	adds	r3, r7, #7
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b29b      	uxth	r3, r3
 8001bce:	18db      	adds	r3, r3, r3
 8001bd0:	b299      	uxth	r1, r3
 8001bd2:	4829      	ldr	r0, [pc, #164]	@ (8001c78 <scan_i2c_bus+0xec>)
 8001bd4:	230a      	movs	r3, #10
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f001 fc3c 	bl	8003454 <HAL_I2C_IsDeviceReady>
 8001bdc:	1e03      	subs	r3, r0, #0
 8001bde:	d11c      	bne.n	8001c1a <scan_i2c_bus+0x8e>
        {
        	printf("DEBUG: Found device at address 0x%02X\n", addr);
 8001be0:	1dfb      	adds	r3, r7, #7
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	4b25      	ldr	r3, [pc, #148]	@ (8001c7c <scan_i2c_bus+0xf0>)
 8001be6:	0011      	movs	r1, r2
 8001be8:	0018      	movs	r0, r3
 8001bea:	f005 fab5 	bl	8007158 <iprintf>
        	// SHT4x sensors use 7-bit addresses 0x44 and 0x46
        	if (addr == 0x44) {
 8001bee:	1dfb      	adds	r3, r7, #7
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b44      	cmp	r3, #68	@ 0x44
 8001bf4:	d106      	bne.n	8001c04 <scan_i2c_bus+0x78>
        		has_sensor_1 = true;
 8001bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c68 <scan_i2c_bus+0xdc>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
        		printf("DEBUG: Sensor 1 detected at 0x44\n");
 8001bfc:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <scan_i2c_bus+0xf4>)
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f005 fb1a 	bl	8007238 <puts>
        	}
        	if (addr == 0x46) {
 8001c04:	1dfb      	adds	r3, r7, #7
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b46      	cmp	r3, #70	@ 0x46
 8001c0a:	d106      	bne.n	8001c1a <scan_i2c_bus+0x8e>
        		has_sensor_2 = true;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <scan_i2c_bus+0xe0>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	701a      	strb	r2, [r3, #0]
        		printf("DEBUG: Sensor 2 detected at 0x46\n");
 8001c12:	4b1c      	ldr	r3, [pc, #112]	@ (8001c84 <scan_i2c_bus+0xf8>)
 8001c14:	0018      	movs	r0, r3
 8001c16:	f005 fb0f 	bl	8007238 <puts>
    for (addr = 3; addr < 0x78; addr++)
 8001c1a:	1dfb      	adds	r3, r7, #7
 8001c1c:	781a      	ldrb	r2, [r3, #0]
 8001c1e:	1dfb      	adds	r3, r7, #7
 8001c20:	3201      	adds	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
 8001c24:	1dfb      	adds	r3, r7, #7
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b77      	cmp	r3, #119	@ 0x77
 8001c2a:	d9cd      	bls.n	8001bc8 <scan_i2c_bus+0x3c>
        	}
        }
    }
    HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8001c2c:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <scan_i2c_bus+0xe4>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2120      	movs	r1, #32
 8001c32:	0018      	movs	r0, r3
 8001c34:	f001 f918 	bl	8002e68 <HAL_GPIO_WritePin>
    printf("DEBUG: I2C scan complete - Sensor1: %s, Sensor2: %s\n", 
           has_sensor_1 ? "found" : "not found",
 8001c38:	4b0b      	ldr	r3, [pc, #44]	@ (8001c68 <scan_i2c_bus+0xdc>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
    printf("DEBUG: I2C scan complete - Sensor1: %s, Sensor2: %s\n", 
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <scan_i2c_bus+0xb8>
 8001c40:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <scan_i2c_bus+0xfc>)
 8001c42:	e000      	b.n	8001c46 <scan_i2c_bus+0xba>
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <scan_i2c_bus+0x100>)
           has_sensor_2 ? "found" : "not found");
 8001c46:	4a09      	ldr	r2, [pc, #36]	@ (8001c6c <scan_i2c_bus+0xe0>)
 8001c48:	7812      	ldrb	r2, [r2, #0]
    printf("DEBUG: I2C scan complete - Sensor1: %s, Sensor2: %s\n", 
 8001c4a:	2a00      	cmp	r2, #0
 8001c4c:	d001      	beq.n	8001c52 <scan_i2c_bus+0xc6>
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c88 <scan_i2c_bus+0xfc>)
 8001c50:	e000      	b.n	8001c54 <scan_i2c_bus+0xc8>
 8001c52:	4a0e      	ldr	r2, [pc, #56]	@ (8001c8c <scan_i2c_bus+0x100>)
 8001c54:	480e      	ldr	r0, [pc, #56]	@ (8001c90 <scan_i2c_bus+0x104>)
 8001c56:	0019      	movs	r1, r3
 8001c58:	f005 fa7e 	bl	8007158 <iprintf>
}
 8001c5c:	46c0      	nop			@ (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	08008fe8 	.word	0x08008fe8
 8001c68:	20000260 	.word	0x20000260
 8001c6c:	20000261 	.word	0x20000261
 8001c70:	50000400 	.word	0x50000400
 8001c74:	08009004 	.word	0x08009004
 8001c78:	20000088 	.word	0x20000088
 8001c7c:	08009020 	.word	0x08009020
 8001c80:	08009048 	.word	0x08009048
 8001c84:	0800906c 	.word	0x0800906c
 8001c88:	08009090 	.word	0x08009090
 8001c8c:	08009098 	.word	0x08009098
 8001c90:	080090a4 	.word	0x080090a4

08001c94 <sensor_init_and_read>:

int sensor_init_and_read(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
	printf("DEBUG: Starting sensor initialization and reading\n");
 8001c98:	4b6a      	ldr	r3, [pc, #424]	@ (8001e44 <sensor_init_and_read+0x1b0>)
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f005 facc 	bl	8007238 <puts>
	if (!has_sensor_1 && !has_sensor_2) {
 8001ca0:	4b69      	ldr	r3, [pc, #420]	@ (8001e48 <sensor_init_and_read+0x1b4>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	4053      	eors	r3, r2
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00d      	beq.n	8001cca <sensor_init_and_read+0x36>
 8001cae:	4b67      	ldr	r3, [pc, #412]	@ (8001e4c <sensor_init_and_read+0x1b8>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	4053      	eors	r3, r2
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <sensor_init_and_read+0x36>
		printf("DEBUG: No sensors detected, returning -1\n");
 8001cbc:	4b64      	ldr	r3, [pc, #400]	@ (8001e50 <sensor_init_and_read+0x1bc>)
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f005 faba 	bl	8007238 <puts>
		return -1;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	425b      	negs	r3, r3
 8001cc8:	e0b9      	b.n	8001e3e <sensor_init_and_read+0x1aa>
	}
	
	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_SET);
 8001cca:	4b62      	ldr	r3, [pc, #392]	@ (8001e54 <sensor_init_and_read+0x1c0>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2120      	movs	r1, #32
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	f001 f8c9 	bl	8002e68 <HAL_GPIO_WritePin>
	printf("DEBUG: I2C power enabled for sensor reading\n");
 8001cd6:	4b60      	ldr	r3, [pc, #384]	@ (8001e58 <sensor_init_and_read+0x1c4>)
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f005 faad 	bl	8007238 <puts>
	error = NO_ERROR;
 8001cde:	4b5f      	ldr	r3, [pc, #380]	@ (8001e5c <sensor_init_and_read+0x1c8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100); // Let power stabilize
 8001ce4:	2064      	movs	r0, #100	@ 0x64
 8001ce6:	f000 fbeb 	bl	80024c0 <HAL_Delay>

	// --- Read From Sensor A (0x44) ---
	if (has_sensor_1)
 8001cea:	4b57      	ldr	r3, [pc, #348]	@ (8001e48 <sensor_init_and_read+0x1b4>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d03e      	beq.n	8001d70 <sensor_init_and_read+0xdc>
	{
		printf("DEBUG: Initializing sensor 1 (0x44)\n");
 8001cf2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e60 <sensor_init_and_read+0x1cc>)
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f005 fa9f 	bl	8007238 <puts>
		sht4x_init(SHT43_I2C_ADDR_44);
 8001cfa:	2044      	movs	r0, #68	@ 0x44
 8001cfc:	f000 fa96 	bl	800222c <sht4x_init>
		printf("DEBUG: Performing soft reset on sensor 1\n");
 8001d00:	4b58      	ldr	r3, [pc, #352]	@ (8001e64 <sensor_init_and_read+0x1d0>)
 8001d02:	0018      	movs	r0, r3
 8001d04:	f005 fa98 	bl	8007238 <puts>
		sht4x_soft_reset();
 8001d08:	f000 fb04 	bl	8002314 <sht4x_soft_reset>
		sensirion_i2c_hal_sleep_usec(10000);
 8001d0c:	4b56      	ldr	r3, [pc, #344]	@ (8001e68 <sensor_init_and_read+0x1d4>)
 8001d0e:	0018      	movs	r0, r3
 8001d10:	f000 fa62 	bl	80021d8 <sensirion_i2c_hal_sleep_usec>
		printf("DEBUG: Re-initializing sensor 1 after reset\n");
 8001d14:	4b55      	ldr	r3, [pc, #340]	@ (8001e6c <sensor_init_and_read+0x1d8>)
 8001d16:	0018      	movs	r0, r3
 8001d18:	f005 fa8e 	bl	8007238 <puts>
		sht4x_init(SHT43_I2C_ADDR_44);
 8001d1c:	2044      	movs	r0, #68	@ 0x44
 8001d1e:	f000 fa85 	bl	800222c <sht4x_init>
		printf("DEBUG: Reading measurement from sensor 1\n");
 8001d22:	4b53      	ldr	r3, [pc, #332]	@ (8001e70 <sensor_init_and_read+0x1dc>)
 8001d24:	0018      	movs	r0, r3
 8001d26:	f005 fa87 	bl	8007238 <puts>
		error = sht4x_measure_high_precision_ticks(&temp_ticks_1, &hum_ticks_1);
 8001d2a:	4a52      	ldr	r2, [pc, #328]	@ (8001e74 <sensor_init_and_read+0x1e0>)
 8001d2c:	4b52      	ldr	r3, [pc, #328]	@ (8001e78 <sensor_init_and_read+0x1e4>)
 8001d2e:	0011      	movs	r1, r2
 8001d30:	0018      	movs	r0, r3
 8001d32:	f000 fa8b 	bl	800224c <sht4x_measure_high_precision_ticks>
 8001d36:	0003      	movs	r3, r0
 8001d38:	001a      	movs	r2, r3
 8001d3a:	4b48      	ldr	r3, [pc, #288]	@ (8001e5c <sensor_init_and_read+0x1c8>)
 8001d3c:	801a      	strh	r2, [r3, #0]
		if (error != NO_ERROR) {
 8001d3e:	4b47      	ldr	r3, [pc, #284]	@ (8001e5c <sensor_init_and_read+0x1c8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	5e9b      	ldrsh	r3, [r3, r2]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d009      	beq.n	8001d5c <sensor_init_and_read+0xc8>
			printf("ERROR: Sensor 1 measurement failed with error %d\n", error);
 8001d48:	4b44      	ldr	r3, [pc, #272]	@ (8001e5c <sensor_init_and_read+0x1c8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	5e9b      	ldrsh	r3, [r3, r2]
 8001d4e:	001a      	movs	r2, r3
 8001d50:	4b4a      	ldr	r3, [pc, #296]	@ (8001e7c <sensor_init_and_read+0x1e8>)
 8001d52:	0011      	movs	r1, r2
 8001d54:	0018      	movs	r0, r3
 8001d56:	f005 f9ff 	bl	8007158 <iprintf>
 8001d5a:	e009      	b.n	8001d70 <sensor_init_and_read+0xdc>
		} else {
			printf("DEBUG: Sensor 1 measurement successful - Temp: %u, Hum: %u\n", temp_ticks_1, hum_ticks_1);
 8001d5c:	4b46      	ldr	r3, [pc, #280]	@ (8001e78 <sensor_init_and_read+0x1e4>)
 8001d5e:	881b      	ldrh	r3, [r3, #0]
 8001d60:	0019      	movs	r1, r3
 8001d62:	4b44      	ldr	r3, [pc, #272]	@ (8001e74 <sensor_init_and_read+0x1e0>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	001a      	movs	r2, r3
 8001d68:	4b45      	ldr	r3, [pc, #276]	@ (8001e80 <sensor_init_and_read+0x1ec>)
 8001d6a:	0018      	movs	r0, r3
 8001d6c:	f005 f9f4 	bl	8007158 <iprintf>
		}
	}

	// --- Read From Sensor B (0x46) ---
	if (has_sensor_2)
 8001d70:	4b36      	ldr	r3, [pc, #216]	@ (8001e4c <sensor_init_and_read+0x1b8>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d054      	beq.n	8001e22 <sensor_init_and_read+0x18e>
	{
		printf("DEBUG: Initializing sensor 2 (0x46)\n");
 8001d78:	4b42      	ldr	r3, [pc, #264]	@ (8001e84 <sensor_init_and_read+0x1f0>)
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	f005 fa5c 	bl	8007238 <puts>
		sht4x_init(SHT40_I2C_ADDR_46);
 8001d80:	2046      	movs	r0, #70	@ 0x46
 8001d82:	f000 fa53 	bl	800222c <sht4x_init>
		printf("DEBUG: Performing soft reset on sensor 2\n");
 8001d86:	4b40      	ldr	r3, [pc, #256]	@ (8001e88 <sensor_init_and_read+0x1f4>)
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f005 fa55 	bl	8007238 <puts>
		sht4x_soft_reset();
 8001d8e:	f000 fac1 	bl	8002314 <sht4x_soft_reset>
		sensirion_i2c_hal_sleep_usec(10000);
 8001d92:	4b35      	ldr	r3, [pc, #212]	@ (8001e68 <sensor_init_and_read+0x1d4>)
 8001d94:	0018      	movs	r0, r3
 8001d96:	f000 fa1f 	bl	80021d8 <sensirion_i2c_hal_sleep_usec>
		printf("DEBUG: Re-initializing sensor 2 after reset\n");
 8001d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8001e8c <sensor_init_and_read+0x1f8>)
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f005 fa4b 	bl	8007238 <puts>
		sht4x_init(SHT40_I2C_ADDR_46);
 8001da2:	2046      	movs	r0, #70	@ 0x46
 8001da4:	f000 fa42 	bl	800222c <sht4x_init>
		printf("DEBUG: Reading measurement from sensor 2\n");
 8001da8:	4b39      	ldr	r3, [pc, #228]	@ (8001e90 <sensor_init_and_read+0x1fc>)
 8001daa:	0018      	movs	r0, r3
 8001dac:	f005 fa44 	bl	8007238 <puts>
		error = sht4x_measure_high_precision_ticks(&temp_ticks_2, &hum_ticks_2);
 8001db0:	4a38      	ldr	r2, [pc, #224]	@ (8001e94 <sensor_init_and_read+0x200>)
 8001db2:	4b39      	ldr	r3, [pc, #228]	@ (8001e98 <sensor_init_and_read+0x204>)
 8001db4:	0011      	movs	r1, r2
 8001db6:	0018      	movs	r0, r3
 8001db8:	f000 fa48 	bl	800224c <sht4x_measure_high_precision_ticks>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	4b26      	ldr	r3, [pc, #152]	@ (8001e5c <sensor_init_and_read+0x1c8>)
 8001dc2:	801a      	strh	r2, [r3, #0]
		if (error != NO_ERROR) {
 8001dc4:	4b25      	ldr	r3, [pc, #148]	@ (8001e5c <sensor_init_and_read+0x1c8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	5e9b      	ldrsh	r3, [r3, r2]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d009      	beq.n	8001de2 <sensor_init_and_read+0x14e>
			printf("ERROR: Sensor 2 measurement failed with error %d\n", error);
 8001dce:	4b23      	ldr	r3, [pc, #140]	@ (8001e5c <sensor_init_and_read+0x1c8>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	5e9b      	ldrsh	r3, [r3, r2]
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <sensor_init_and_read+0x208>)
 8001dd8:	0011      	movs	r1, r2
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f005 f9bc 	bl	8007158 <iprintf>
 8001de0:	e01f      	b.n	8001e22 <sensor_init_and_read+0x18e>
		} else {
			printf("DEBUG: Sensor 2 measurement successful - Temp: %u, Hum: %u\n", temp_ticks_2, hum_ticks_2);
 8001de2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e98 <sensor_init_and_read+0x204>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	0019      	movs	r1, r3
 8001de8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e94 <sensor_init_and_read+0x200>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	001a      	movs	r2, r3
 8001dee:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea0 <sensor_init_and_read+0x20c>)
 8001df0:	0018      	movs	r0, r3
 8001df2:	f005 f9b1 	bl	8007158 <iprintf>
			temp_ticks_2 = temp_ticks_2 / 1000;
 8001df6:	4b28      	ldr	r3, [pc, #160]	@ (8001e98 <sensor_init_and_read+0x204>)
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	22fa      	movs	r2, #250	@ 0xfa
 8001dfc:	0091      	lsls	r1, r2, #2
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f7fe f994 	bl	800012c <__udivsi3>
 8001e04:	0003      	movs	r3, r0
 8001e06:	b29a      	uxth	r2, r3
 8001e08:	4b23      	ldr	r3, [pc, #140]	@ (8001e98 <sensor_init_and_read+0x204>)
 8001e0a:	801a      	strh	r2, [r3, #0]
			hum_ticks_2 = hum_ticks_2 / 1000;
 8001e0c:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <sensor_init_and_read+0x200>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	22fa      	movs	r2, #250	@ 0xfa
 8001e12:	0091      	lsls	r1, r2, #2
 8001e14:	0018      	movs	r0, r3
 8001e16:	f7fe f989 	bl	800012c <__udivsi3>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e94 <sensor_init_and_read+0x200>)
 8001e20:	801a      	strh	r2, [r3, #0]
		}
	}

	HAL_GPIO_WritePin(I2C_ENABLE_GPIO_Port, I2C_ENABLE_Pin, GPIO_PIN_RESET);
 8001e22:	4b0c      	ldr	r3, [pc, #48]	@ (8001e54 <sensor_init_and_read+0x1c0>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	2120      	movs	r1, #32
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f001 f81d 	bl	8002e68 <HAL_GPIO_WritePin>

	if (error) return (-200);
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e5c <sensor_init_and_read+0x1c8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	5e9b      	ldrsh	r3, [r3, r2]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <sensor_init_and_read+0x1aa>
 8001e38:	23c8      	movs	r3, #200	@ 0xc8
 8001e3a:	425b      	negs	r3, r3
 8001e3c:	e7ff      	b.n	8001e3e <sensor_init_and_read+0x1aa>
}
 8001e3e:	0018      	movs	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	080090dc 	.word	0x080090dc
 8001e48:	20000260 	.word	0x20000260
 8001e4c:	20000261 	.word	0x20000261
 8001e50:	08009110 	.word	0x08009110
 8001e54:	50000400 	.word	0x50000400
 8001e58:	0800913c 	.word	0x0800913c
 8001e5c:	2000026a 	.word	0x2000026a
 8001e60:	08009168 	.word	0x08009168
 8001e64:	0800918c 	.word	0x0800918c
 8001e68:	00002710 	.word	0x00002710
 8001e6c:	080091b8 	.word	0x080091b8
 8001e70:	080091e4 	.word	0x080091e4
 8001e74:	20000264 	.word	0x20000264
 8001e78:	20000262 	.word	0x20000262
 8001e7c:	08009210 	.word	0x08009210
 8001e80:	08009244 	.word	0x08009244
 8001e84:	08009280 	.word	0x08009280
 8001e88:	080092a4 	.word	0x080092a4
 8001e8c:	080092d0 	.word	0x080092d0
 8001e90:	080092fc 	.word	0x080092fc
 8001e94:	20000268 	.word	0x20000268
 8001e98:	20000266 	.word	0x20000266
 8001e9c:	08009328 	.word	0x08009328
 8001ea0:	0800935c 	.word	0x0800935c

08001ea4 <sensirion_common_bytes_to_uint16_t>:
 */

#include "sensirion_common.h"
#include "sensirion_config.h"

uint16_t sensirion_common_bytes_to_uint16_t(const uint8_t* bytes) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
    return (uint16_t)bytes[0] << 8 | (uint16_t)bytes[1];
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	b21b      	sxth	r3, r3
 8001ec2:	b29b      	uxth	r3, r3
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b002      	add	sp, #8
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <sensirion_i2c_generate_crc>:
#include "sensirion_i2c.h"
#include "sensirion_common.h"
#include "sensirion_config.h"
#include "sensirion_i2c_hal.h"

uint8_t sensirion_i2c_generate_crc(const uint8_t* data, uint16_t count) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	000a      	movs	r2, r1
 8001ed6:	1cbb      	adds	r3, r7, #2
 8001ed8:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 8001eda:	230d      	movs	r3, #13
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	22ff      	movs	r2, #255	@ 0xff
 8001ee0:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001ee2:	230e      	movs	r3, #14
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	801a      	strh	r2, [r3, #0]
 8001eea:	e038      	b.n	8001f5e <sensirion_i2c_generate_crc+0x92>
        crc ^= (data[current_byte]);
 8001eec:	230e      	movs	r3, #14
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	18d3      	adds	r3, r2, r3
 8001ef6:	7819      	ldrb	r1, [r3, #0]
 8001ef8:	220d      	movs	r2, #13
 8001efa:	18bb      	adds	r3, r7, r2
 8001efc:	18ba      	adds	r2, r7, r2
 8001efe:	7812      	ldrb	r2, [r2, #0]
 8001f00:	404a      	eors	r2, r1
 8001f02:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001f04:	230c      	movs	r3, #12
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	2208      	movs	r2, #8
 8001f0a:	701a      	strb	r2, [r3, #0]
 8001f0c:	e01c      	b.n	8001f48 <sensirion_i2c_generate_crc+0x7c>
            if (crc & 0x80)
 8001f0e:	210d      	movs	r1, #13
 8001f10:	187b      	adds	r3, r7, r1
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	da0a      	bge.n	8001f30 <sensirion_i2c_generate_crc+0x64>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 8001f1a:	187b      	adds	r3, r7, r1
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b25b      	sxtb	r3, r3
 8001f20:	18db      	adds	r3, r3, r3
 8001f22:	b25b      	sxtb	r3, r3
 8001f24:	2231      	movs	r2, #49	@ 0x31
 8001f26:	4053      	eors	r3, r2
 8001f28:	b25a      	sxtb	r2, r3
 8001f2a:	187b      	adds	r3, r7, r1
 8001f2c:	701a      	strb	r2, [r3, #0]
 8001f2e:	e005      	b.n	8001f3c <sensirion_i2c_generate_crc+0x70>
            else
                crc = (crc << 1);
 8001f30:	230d      	movs	r3, #13
 8001f32:	18fa      	adds	r2, r7, r3
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	18db      	adds	r3, r3, r3
 8001f3a:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 8001f3c:	220c      	movs	r2, #12
 8001f3e:	18bb      	adds	r3, r7, r2
 8001f40:	18ba      	adds	r2, r7, r2
 8001f42:	7812      	ldrb	r2, [r2, #0]
 8001f44:	3a01      	subs	r2, #1
 8001f46:	701a      	strb	r2, [r3, #0]
 8001f48:	230c      	movs	r3, #12
 8001f4a:	18fb      	adds	r3, r7, r3
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d1dd      	bne.n	8001f0e <sensirion_i2c_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8001f52:	220e      	movs	r2, #14
 8001f54:	18bb      	adds	r3, r7, r2
 8001f56:	18ba      	adds	r2, r7, r2
 8001f58:	8812      	ldrh	r2, [r2, #0]
 8001f5a:	3201      	adds	r2, #1
 8001f5c:	801a      	strh	r2, [r3, #0]
 8001f5e:	230e      	movs	r3, #14
 8001f60:	18fa      	adds	r2, r7, r3
 8001f62:	1cbb      	adds	r3, r7, #2
 8001f64:	8812      	ldrh	r2, [r2, #0]
 8001f66:	881b      	ldrh	r3, [r3, #0]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d3bf      	bcc.n	8001eec <sensirion_i2c_generate_crc+0x20>
        }
    }
    return crc;
 8001f6c:	230d      	movs	r3, #13
 8001f6e:	18fb      	adds	r3, r7, r3
 8001f70:	781b      	ldrb	r3, [r3, #0]
}
 8001f72:	0018      	movs	r0, r3
 8001f74:	46bd      	mov	sp, r7
 8001f76:	b004      	add	sp, #16
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <sensirion_i2c_check_crc>:

int8_t sensirion_i2c_check_crc(const uint8_t* data, uint16_t count,
                               uint8_t checksum) {
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
 8001f82:	0008      	movs	r0, r1
 8001f84:	0011      	movs	r1, r2
 8001f86:	1cbb      	adds	r3, r7, #2
 8001f88:	1c02      	adds	r2, r0, #0
 8001f8a:	801a      	strh	r2, [r3, #0]
 8001f8c:	1c7b      	adds	r3, r7, #1
 8001f8e:	1c0a      	adds	r2, r1, #0
 8001f90:	701a      	strb	r2, [r3, #0]
    if (sensirion_i2c_generate_crc(data, count) != checksum)
 8001f92:	1cbb      	adds	r3, r7, #2
 8001f94:	881a      	ldrh	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	0011      	movs	r1, r2
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f7ff ff96 	bl	8001ecc <sensirion_i2c_generate_crc>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	1c7b      	adds	r3, r7, #1
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d001      	beq.n	8001fb0 <sensirion_i2c_check_crc+0x36>
        return CRC_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <sensirion_i2c_check_crc+0x38>
    return NO_ERROR;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b002      	add	sp, #8
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <sensirion_i2c_add_command8_to_buffer>:
    buffer[offset++] = (uint8_t)((command & 0x00FF) >> 0);
    return offset;
}

uint16_t sensirion_i2c_add_command8_to_buffer(uint8_t* buffer, uint16_t offset,
                                              uint8_t command) {
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
 8001fc2:	0008      	movs	r0, r1
 8001fc4:	0011      	movs	r1, r2
 8001fc6:	1cbb      	adds	r3, r7, #2
 8001fc8:	1c02      	adds	r2, r0, #0
 8001fca:	801a      	strh	r2, [r3, #0]
 8001fcc:	1c7b      	adds	r3, r7, #1
 8001fce:	1c0a      	adds	r2, r1, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
    buffer[offset++] = command;
 8001fd2:	1cbb      	adds	r3, r7, #2
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	1cba      	adds	r2, r7, #2
 8001fd8:	1c59      	adds	r1, r3, #1
 8001fda:	8011      	strh	r1, [r2, #0]
 8001fdc:	001a      	movs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	189b      	adds	r3, r3, r2
 8001fe2:	1c7a      	adds	r2, r7, #1
 8001fe4:	7812      	ldrb	r2, [r2, #0]
 8001fe6:	701a      	strb	r2, [r3, #0]
    return offset;
 8001fe8:	1cbb      	adds	r3, r7, #2
 8001fea:	881b      	ldrh	r3, [r3, #0]
}
 8001fec:	0018      	movs	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	b002      	add	sp, #8
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <sensirion_i2c_write_data>:

    return offset;
}

int16_t sensirion_i2c_write_data(uint8_t address, const uint8_t* data,
                                 uint16_t data_length) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6039      	str	r1, [r7, #0]
 8001ffc:	0011      	movs	r1, r2
 8001ffe:	1dfb      	adds	r3, r7, #7
 8002000:	1c02      	adds	r2, r0, #0
 8002002:	701a      	strb	r2, [r3, #0]
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	1c0a      	adds	r2, r1, #0
 8002008:	801a      	strh	r2, [r3, #0]
    return sensirion_i2c_hal_write(address, data, data_length);
 800200a:	1d3b      	adds	r3, r7, #4
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	6839      	ldr	r1, [r7, #0]
 8002012:	1dfb      	adds	r3, r7, #7
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	0018      	movs	r0, r3
 8002018:	f000 f8bc 	bl	8002194 <sensirion_i2c_hal_write>
 800201c:	0003      	movs	r3, r0
}
 800201e:	0018      	movs	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	b002      	add	sp, #8
 8002024:	bd80      	pop	{r7, pc}

08002026 <sensirion_i2c_read_data_inplace>:

int16_t sensirion_i2c_read_data_inplace(uint8_t address, uint8_t* buffer,
                                        uint16_t expected_data_length) {
 8002026:	b5b0      	push	{r4, r5, r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6039      	str	r1, [r7, #0]
 800202e:	0011      	movs	r1, r2
 8002030:	1dfb      	adds	r3, r7, #7
 8002032:	1c02      	adds	r2, r0, #0
 8002034:	701a      	strb	r2, [r3, #0]
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	1c0a      	adds	r2, r1, #0
 800203a:	801a      	strh	r2, [r3, #0]
    int16_t error;
    uint16_t i, j;
    uint16_t size = (expected_data_length / SENSIRION_WORD_SIZE) *
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	085b      	lsrs	r3, r3, #1
 8002042:	b29b      	uxth	r3, r3
 8002044:	220a      	movs	r2, #10
 8002046:	18ba      	adds	r2, r7, r2
 8002048:	1c19      	adds	r1, r3, #0
 800204a:	1c0b      	adds	r3, r1, #0
 800204c:	18db      	adds	r3, r3, r3
 800204e:	185b      	adds	r3, r3, r1
 8002050:	8013      	strh	r3, [r2, #0]
                    (SENSIRION_WORD_SIZE + CRC8_LEN);

    if (expected_data_length % SENSIRION_WORD_SIZE != 0) {
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	881b      	ldrh	r3, [r3, #0]
 8002056:	2201      	movs	r2, #1
 8002058:	4013      	ands	r3, r2
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <sensirion_i2c_read_data_inplace+0x3e>
        return BYTE_NUM_ERROR;
 8002060:	2304      	movs	r3, #4
 8002062:	e06c      	b.n	800213e <sensirion_i2c_read_data_inplace+0x118>
    }

    error = sensirion_i2c_hal_read(address, buffer, size);
 8002064:	230a      	movs	r3, #10
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b2da      	uxtb	r2, r3
 800206c:	6839      	ldr	r1, [r7, #0]
 800206e:	1dfb      	adds	r3, r7, #7
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	0018      	movs	r0, r3
 8002074:	f000 f86c 	bl	8002150 <sensirion_i2c_hal_read>
 8002078:	0003      	movs	r3, r0
 800207a:	001a      	movs	r2, r3
 800207c:	2108      	movs	r1, #8
 800207e:	187b      	adds	r3, r7, r1
 8002080:	801a      	strh	r2, [r3, #0]
    if (error) {
 8002082:	000a      	movs	r2, r1
 8002084:	18bb      	adds	r3, r7, r2
 8002086:	2100      	movs	r1, #0
 8002088:	5e5b      	ldrsh	r3, [r3, r1]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <sensirion_i2c_read_data_inplace+0x70>
        return error;
 800208e:	18bb      	adds	r3, r7, r2
 8002090:	2200      	movs	r2, #0
 8002092:	5e9b      	ldrsh	r3, [r3, r2]
 8002094:	e053      	b.n	800213e <sensirion_i2c_read_data_inplace+0x118>
    }

    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8002096:	230e      	movs	r3, #14
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	2200      	movs	r2, #0
 800209c:	801a      	strh	r2, [r3, #0]
 800209e:	230c      	movs	r3, #12
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	2200      	movs	r2, #0
 80020a4:	801a      	strh	r2, [r3, #0]
 80020a6:	e041      	b.n	800212c <sensirion_i2c_read_data_inplace+0x106>

        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80020a8:	210e      	movs	r1, #14
 80020aa:	187b      	adds	r3, r7, r1
 80020ac:	881b      	ldrh	r3, [r3, #0]
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	18d0      	adds	r0, r2, r3
                                        buffer[i + SENSIRION_WORD_SIZE]);
 80020b2:	187b      	adds	r3, r7, r1
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	3302      	adds	r3, #2
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	18d3      	adds	r3, r2, r3
        error = sensirion_i2c_check_crc(&buffer[i], SENSIRION_WORD_SIZE,
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	001a      	movs	r2, r3
 80020c0:	2102      	movs	r1, #2
 80020c2:	f7ff ff5a 	bl	8001f7a <sensirion_i2c_check_crc>
 80020c6:	0003      	movs	r3, r0
 80020c8:	001a      	movs	r2, r3
 80020ca:	2108      	movs	r1, #8
 80020cc:	187b      	adds	r3, r7, r1
 80020ce:	801a      	strh	r2, [r3, #0]
        if (error) {
 80020d0:	000a      	movs	r2, r1
 80020d2:	18bb      	adds	r3, r7, r2
 80020d4:	2100      	movs	r1, #0
 80020d6:	5e5b      	ldrsh	r3, [r3, r1]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <sensirion_i2c_read_data_inplace+0xbe>
            return error;
 80020dc:	18bb      	adds	r3, r7, r2
 80020de:	2200      	movs	r2, #0
 80020e0:	5e9b      	ldrsh	r3, [r3, r2]
 80020e2:	e02c      	b.n	800213e <sensirion_i2c_read_data_inplace+0x118>
        }
        buffer[j++] = buffer[i];
 80020e4:	240e      	movs	r4, #14
 80020e6:	193b      	adds	r3, r7, r4
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	18d2      	adds	r2, r2, r3
 80020ee:	250c      	movs	r5, #12
 80020f0:	197b      	adds	r3, r7, r5
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	1979      	adds	r1, r7, r5
 80020f6:	1c58      	adds	r0, r3, #1
 80020f8:	8008      	strh	r0, [r1, #0]
 80020fa:	0019      	movs	r1, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	185b      	adds	r3, r3, r1
 8002100:	7812      	ldrb	r2, [r2, #0]
 8002102:	701a      	strb	r2, [r3, #0]
        buffer[j++] = buffer[i + 1];
 8002104:	193b      	adds	r3, r7, r4
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	3301      	adds	r3, #1
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	18d2      	adds	r2, r2, r3
 800210e:	197b      	adds	r3, r7, r5
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	1979      	adds	r1, r7, r5
 8002114:	1c58      	adds	r0, r3, #1
 8002116:	8008      	strh	r0, [r1, #0]
 8002118:	0019      	movs	r1, r3
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	185b      	adds	r3, r3, r1
 800211e:	7812      	ldrb	r2, [r2, #0]
 8002120:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8002122:	193b      	adds	r3, r7, r4
 8002124:	193a      	adds	r2, r7, r4
 8002126:	8812      	ldrh	r2, [r2, #0]
 8002128:	3203      	adds	r2, #3
 800212a:	801a      	strh	r2, [r3, #0]
 800212c:	230e      	movs	r3, #14
 800212e:	18fa      	adds	r2, r7, r3
 8002130:	230a      	movs	r3, #10
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	8812      	ldrh	r2, [r2, #0]
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	429a      	cmp	r2, r3
 800213a:	d3b5      	bcc.n	80020a8 <sensirion_i2c_read_data_inplace+0x82>
    }

    return NO_ERROR;
 800213c:	2300      	movs	r3, #0
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b004      	add	sp, #16
 8002144:	bdb0      	pop	{r4, r5, r7, pc}

08002146 <sensirion_i2c_hal_init>:
 * communication.
 * 
 * NOTE: This function is simplified since we use the I2C handle that's already
 * initialized by the main application.
 */
void sensirion_i2c_hal_init(void) {
 8002146:	b580      	push	{r7, lr}
 8002148:	af00      	add	r7, sp, #0
    // The I2C peripheral is already initialized by MX_I2C1_Init() in main
    // No additional initialization needed here
}
 800214a:	46c0      	nop			@ (mov r8, r8)
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <sensirion_i2c_hal_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_read(uint8_t address, uint8_t* data, uint8_t count) {
 8002150:	b590      	push	{r4, r7, lr}
 8002152:	b085      	sub	sp, #20
 8002154:	af02      	add	r7, sp, #8
 8002156:	6039      	str	r1, [r7, #0]
 8002158:	0011      	movs	r1, r2
 800215a:	1dfb      	adds	r3, r7, #7
 800215c:	1c02      	adds	r2, r0, #0
 800215e:	701a      	strb	r2, [r3, #0]
 8002160:	1dbb      	adds	r3, r7, #6
 8002162:	1c0a      	adds	r2, r1, #0
 8002164:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address<<1),
 8002166:	1dfb      	adds	r3, r7, #7
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	18db      	adds	r3, r3, r3
 800216e:	b299      	uxth	r1, r3
 8002170:	1dbb      	adds	r3, r7, #6
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	b29b      	uxth	r3, r3
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	4805      	ldr	r0, [pc, #20]	@ (8002190 <sensirion_i2c_hal_read+0x40>)
 800217a:	2464      	movs	r4, #100	@ 0x64
 800217c:	9400      	str	r4, [sp, #0]
 800217e:	f001 f861 	bl	8003244 <HAL_I2C_Master_Receive>
 8002182:	0003      	movs	r3, r0
 8002184:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b003      	add	sp, #12
 800218c:	bd90      	pop	{r4, r7, pc}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	20000088 	.word	0x20000088

08002194 <sensirion_i2c_hal_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_hal_write(uint8_t address, const uint8_t* data,
                               uint8_t count) {
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b085      	sub	sp, #20
 8002198:	af02      	add	r7, sp, #8
 800219a:	6039      	str	r1, [r7, #0]
 800219c:	0011      	movs	r1, r2
 800219e:	1dfb      	adds	r3, r7, #7
 80021a0:	1c02      	adds	r2, r0, #0
 80021a2:	701a      	strb	r2, [r3, #0]
 80021a4:	1dbb      	adds	r3, r7, #6
 80021a6:	1c0a      	adds	r2, r1, #0
 80021a8:	701a      	strb	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address<<1),
 80021aa:	1dfb      	adds	r3, r7, #7
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	18db      	adds	r3, r3, r3
 80021b2:	b299      	uxth	r1, r3
 80021b4:	1dbb      	adds	r3, r7, #6
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b29b      	uxth	r3, r3
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	4805      	ldr	r0, [pc, #20]	@ (80021d4 <sensirion_i2c_hal_write+0x40>)
 80021be:	2464      	movs	r4, #100	@ 0x64
 80021c0:	9400      	str	r4, [sp, #0]
 80021c2:	f000 ff15 	bl	8002ff0 <HAL_I2C_Master_Transmit>
 80021c6:	0003      	movs	r3, r0
 80021c8:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 80021ca:	0018      	movs	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b003      	add	sp, #12
 80021d0:	bd90      	pop	{r4, r7, pc}
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	20000088 	.word	0x20000088

080021d8 <sensirion_i2c_hal_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_i2c_hal_sleep_usec(uint32_t useconds) {
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	22fa      	movs	r2, #250	@ 0xfa
 80021e4:	0091      	lsls	r1, r2, #2
 80021e6:	0018      	movs	r0, r3
 80021e8:	f7fd ffa0 	bl	800012c <__udivsi3>
 80021ec:	0003      	movs	r3, r0
 80021ee:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	22fa      	movs	r2, #250	@ 0xfa
 80021f4:	0091      	lsls	r1, r2, #2
 80021f6:	0018      	movs	r0, r3
 80021f8:	f7fe f81e 	bl	8000238 <__aeabi_uidivmod>
 80021fc:	1e0b      	subs	r3, r1, #0
 80021fe:	d002      	beq.n	8002206 <sensirion_i2c_hal_sleep_usec+0x2e>
        msec++;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3301      	adds	r3, #1
 8002204:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 8002206:	f000 f97f 	bl	8002508 <HAL_GetHalVersion>
 800220a:	0003      	movs	r3, r0
 800220c:	4a06      	ldr	r2, [pc, #24]	@ (8002228 <sensirion_i2c_hal_sleep_usec+0x50>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d802      	bhi.n	8002218 <sensirion_i2c_hal_sleep_usec+0x40>
        msec++;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3301      	adds	r3, #1
 8002216:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	0018      	movs	r0, r3
 800221c:	f000 f950 	bl	80024c0 <HAL_Delay>
}
 8002220:	46c0      	nop			@ (mov r8, r8)
 8002222:	46bd      	mov	sp, r7
 8002224:	b004      	add	sp, #16
 8002226:	bd80      	pop	{r7, pc}
 8002228:	010100ff 	.word	0x010100ff

0800222c <sht4x_init>:

static uint8_t communication_buffer[6] = {0};

static uint8_t _i2c_address;

void sht4x_init(uint8_t i2c_address) {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	0002      	movs	r2, r0
 8002234:	1dfb      	adds	r3, r7, #7
 8002236:	701a      	strb	r2, [r3, #0]
    _i2c_address = i2c_address;
 8002238:	4b03      	ldr	r3, [pc, #12]	@ (8002248 <sht4x_init+0x1c>)
 800223a:	1dfa      	adds	r2, r7, #7
 800223c:	7812      	ldrb	r2, [r2, #0]
 800223e:	701a      	strb	r2, [r3, #0]
}
 8002240:	46c0      	nop			@ (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000272 	.word	0x20000272

0800224c <sht4x_measure_high_precision_ticks>:

int16_t sht4x_measure_high_precision_ticks(uint16_t* temperature_ticks,
                                           uint16_t* humidity_ticks) {
 800224c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
    int16_t local_error = NO_ERROR;
 8002256:	2516      	movs	r5, #22
 8002258:	197b      	adds	r3, r7, r5
 800225a:	2200      	movs	r2, #0
 800225c:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 800225e:	4b2a      	ldr	r3, [pc, #168]	@ (8002308 <sht4x_measure_high_precision_ticks+0xbc>)
 8002260:	613b      	str	r3, [r7, #16]
    uint16_t local_offset = 0;
 8002262:	260e      	movs	r6, #14
 8002264:	19bb      	adds	r3, r7, r6
 8002266:	2200      	movs	r2, #0
 8002268:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0xfd);
 800226a:	19bc      	adds	r4, r7, r6
 800226c:	19bb      	adds	r3, r7, r6
 800226e:	8819      	ldrh	r1, [r3, #0]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	22fd      	movs	r2, #253	@ 0xfd
 8002274:	0018      	movs	r0, r3
 8002276:	f7ff fea0 	bl	8001fba <sensirion_i2c_add_command8_to_buffer>
 800227a:	0003      	movs	r3, r0
 800227c:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 800227e:	4b23      	ldr	r3, [pc, #140]	@ (800230c <sht4x_measure_high_precision_ticks+0xc0>)
 8002280:	7818      	ldrb	r0, [r3, #0]
 8002282:	197c      	adds	r4, r7, r5
 8002284:	19bb      	adds	r3, r7, r6
 8002286:	881a      	ldrh	r2, [r3, #0]
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	0019      	movs	r1, r3
 800228c:	f7ff feb2 	bl	8001ff4 <sensirion_i2c_write_data>
 8002290:	0003      	movs	r3, r0
 8002292:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8002294:	197b      	adds	r3, r7, r5
 8002296:	2200      	movs	r2, #0
 8002298:	5e9b      	ldrsh	r3, [r3, r2]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d003      	beq.n	80022a6 <sht4x_measure_high_precision_ticks+0x5a>
        return local_error;
 800229e:	197b      	adds	r3, r7, r5
 80022a0:	2200      	movs	r2, #0
 80022a2:	5e9b      	ldrsh	r3, [r3, r2]
 80022a4:	e02c      	b.n	8002300 <sht4x_measure_high_precision_ticks+0xb4>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 80022a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002310 <sht4x_measure_high_precision_ticks+0xc4>)
 80022a8:	0018      	movs	r0, r3
 80022aa:	f7ff ff95 	bl	80021d8 <sensirion_i2c_hal_sleep_usec>
    local_error = sensirion_i2c_read_data_inplace(_i2c_address, buffer_ptr, 4);
 80022ae:	4b17      	ldr	r3, [pc, #92]	@ (800230c <sht4x_measure_high_precision_ticks+0xc0>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2516      	movs	r5, #22
 80022b4:	197c      	adds	r4, r7, r5
 80022b6:	6939      	ldr	r1, [r7, #16]
 80022b8:	2204      	movs	r2, #4
 80022ba:	0018      	movs	r0, r3
 80022bc:	f7ff feb3 	bl	8002026 <sensirion_i2c_read_data_inplace>
 80022c0:	0003      	movs	r3, r0
 80022c2:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 80022c4:	197b      	adds	r3, r7, r5
 80022c6:	2200      	movs	r2, #0
 80022c8:	5e9b      	ldrsh	r3, [r3, r2]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <sht4x_measure_high_precision_ticks+0x8a>
        return local_error;
 80022ce:	197b      	adds	r3, r7, r5
 80022d0:	2200      	movs	r2, #0
 80022d2:	5e9b      	ldrsh	r3, [r3, r2]
 80022d4:	e014      	b.n	8002300 <sht4x_measure_high_precision_ticks+0xb4>
    }
    *temperature_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[0]);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	0018      	movs	r0, r3
 80022da:	f7ff fde3 	bl	8001ea4 <sensirion_common_bytes_to_uint16_t>
 80022de:	0003      	movs	r3, r0
 80022e0:	001a      	movs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	801a      	strh	r2, [r3, #0]
    *humidity_ticks = sensirion_common_bytes_to_uint16_t(&buffer_ptr[2]);
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	3302      	adds	r3, #2
 80022ea:	0018      	movs	r0, r3
 80022ec:	f7ff fdda 	bl	8001ea4 <sensirion_common_bytes_to_uint16_t>
 80022f0:	0003      	movs	r3, r0
 80022f2:	001a      	movs	r2, r3
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	801a      	strh	r2, [r3, #0]
    return local_error;
 80022f8:	2316      	movs	r3, #22
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	2200      	movs	r2, #0
 80022fe:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002300:	0018      	movs	r0, r3
 8002302:	46bd      	mov	sp, r7
 8002304:	b007      	add	sp, #28
 8002306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002308:	2000026c 	.word	0x2000026c
 800230c:	20000272 	.word	0x20000272
 8002310:	00002710 	.word	0x00002710

08002314 <sht4x_soft_reset>:
    }
    *serial_number = sensirion_common_bytes_to_uint32_t(&buffer_ptr[0]);
    return local_error;
}

int16_t sht4x_soft_reset() {
 8002314:	b5b0      	push	{r4, r5, r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
    int16_t local_error = NO_ERROR;
 800231a:	250e      	movs	r5, #14
 800231c:	197b      	adds	r3, r7, r5
 800231e:	2200      	movs	r2, #0
 8002320:	801a      	strh	r2, [r3, #0]
    uint8_t* buffer_ptr = communication_buffer;
 8002322:	4b17      	ldr	r3, [pc, #92]	@ (8002380 <sht4x_soft_reset+0x6c>)
 8002324:	60bb      	str	r3, [r7, #8]
    uint16_t local_offset = 0;
 8002326:	1dbb      	adds	r3, r7, #6
 8002328:	2200      	movs	r2, #0
 800232a:	801a      	strh	r2, [r3, #0]
    local_offset =
        sensirion_i2c_add_command8_to_buffer(buffer_ptr, local_offset, 0x94);
 800232c:	1dbc      	adds	r4, r7, #6
 800232e:	1dbb      	adds	r3, r7, #6
 8002330:	8819      	ldrh	r1, [r3, #0]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2294      	movs	r2, #148	@ 0x94
 8002336:	0018      	movs	r0, r3
 8002338:	f7ff fe3f 	bl	8001fba <sensirion_i2c_add_command8_to_buffer>
 800233c:	0003      	movs	r3, r0
 800233e:	8023      	strh	r3, [r4, #0]
    local_error =
        sensirion_i2c_write_data(_i2c_address, buffer_ptr, local_offset);
 8002340:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <sht4x_soft_reset+0x70>)
 8002342:	7818      	ldrb	r0, [r3, #0]
 8002344:	197c      	adds	r4, r7, r5
 8002346:	1dbb      	adds	r3, r7, #6
 8002348:	881a      	ldrh	r2, [r3, #0]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	0019      	movs	r1, r3
 800234e:	f7ff fe51 	bl	8001ff4 <sensirion_i2c_write_data>
 8002352:	0003      	movs	r3, r0
 8002354:	8023      	strh	r3, [r4, #0]
    if (local_error != NO_ERROR) {
 8002356:	197b      	adds	r3, r7, r5
 8002358:	2200      	movs	r2, #0
 800235a:	5e9b      	ldrsh	r3, [r3, r2]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <sht4x_soft_reset+0x54>
        return local_error;
 8002360:	197b      	adds	r3, r7, r5
 8002362:	2200      	movs	r2, #0
 8002364:	5e9b      	ldrsh	r3, [r3, r2]
 8002366:	e007      	b.n	8002378 <sht4x_soft_reset+0x64>
    }
    sensirion_i2c_hal_sleep_usec(10 * 1000);
 8002368:	4b07      	ldr	r3, [pc, #28]	@ (8002388 <sht4x_soft_reset+0x74>)
 800236a:	0018      	movs	r0, r3
 800236c:	f7ff ff34 	bl	80021d8 <sensirion_i2c_hal_sleep_usec>
    return local_error;
 8002370:	230e      	movs	r3, #14
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	2200      	movs	r2, #0
 8002376:	5e9b      	ldrsh	r3, [r3, r2]
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b004      	add	sp, #16
 800237e:	bdb0      	pop	{r4, r5, r7, pc}
 8002380:	2000026c 	.word	0x2000026c
 8002384:	20000272 	.word	0x20000272
 8002388:	00002710 	.word	0x00002710

0800238c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800238c:	480d      	ldr	r0, [pc, #52]	@ (80023c4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800238e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002390:	f7fe fc62 	bl	8000c58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002394:	480c      	ldr	r0, [pc, #48]	@ (80023c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002396:	490d      	ldr	r1, [pc, #52]	@ (80023cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002398:	4a0d      	ldr	r2, [pc, #52]	@ (80023d0 <LoopForever+0xe>)
  movs r3, #0
 800239a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800239c:	e002      	b.n	80023a4 <LoopCopyDataInit>

0800239e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023a2:	3304      	adds	r3, #4

080023a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a8:	d3f9      	bcc.n	800239e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023aa:	4a0a      	ldr	r2, [pc, #40]	@ (80023d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023ac:	4c0a      	ldr	r4, [pc, #40]	@ (80023d8 <LoopForever+0x16>)
  movs r3, #0
 80023ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023b0:	e001      	b.n	80023b6 <LoopFillZerobss>

080023b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b4:	3204      	adds	r2, #4

080023b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b8:	d3fb      	bcc.n	80023b2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80023ba:	f005 f901 	bl	80075c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023be:	f7fe f99d 	bl	80006fc <main>

080023c2 <LoopForever>:

LoopForever:
    b LoopForever
 80023c2:	e7fe      	b.n	80023c2 <LoopForever>
   ldr   r0, =_estack
 80023c4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80023c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023cc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80023d0:	0800948c 	.word	0x0800948c
  ldr r2, =_sbss
 80023d4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80023d8:	200003c4 	.word	0x200003c4

080023dc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023dc:	e7fe      	b.n	80023dc <ADC1_COMP_IRQHandler>
	...

080023e0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80023ec:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <HAL_Init+0x3c>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <HAL_Init+0x3c>)
 80023f2:	2140      	movs	r1, #64	@ 0x40
 80023f4:	430a      	orrs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023f8:	2000      	movs	r0, #0
 80023fa:	f000 f811 	bl	8002420 <HAL_InitTick>
 80023fe:	1e03      	subs	r3, r0, #0
 8002400:	d003      	beq.n	800240a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002402:	1dfb      	adds	r3, r7, #7
 8002404:	2201      	movs	r2, #1
 8002406:	701a      	strb	r2, [r3, #0]
 8002408:	e001      	b.n	800240e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800240a:	f7fe fb37 	bl	8000a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	781b      	ldrb	r3, [r3, #0]
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b002      	add	sp, #8
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	40022000 	.word	0x40022000

08002420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002420:	b590      	push	{r4, r7, lr}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002428:	4b14      	ldr	r3, [pc, #80]	@ (800247c <HAL_InitTick+0x5c>)
 800242a:	681c      	ldr	r4, [r3, #0]
 800242c:	4b14      	ldr	r3, [pc, #80]	@ (8002480 <HAL_InitTick+0x60>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	0019      	movs	r1, r3
 8002432:	23fa      	movs	r3, #250	@ 0xfa
 8002434:	0098      	lsls	r0, r3, #2
 8002436:	f7fd fe79 	bl	800012c <__udivsi3>
 800243a:	0003      	movs	r3, r0
 800243c:	0019      	movs	r1, r3
 800243e:	0020      	movs	r0, r4
 8002440:	f7fd fe74 	bl	800012c <__udivsi3>
 8002444:	0003      	movs	r3, r0
 8002446:	0018      	movs	r0, r3
 8002448:	f000 f937 	bl	80026ba <HAL_SYSTICK_Config>
 800244c:	1e03      	subs	r3, r0, #0
 800244e:	d001      	beq.n	8002454 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e00f      	b.n	8002474 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b03      	cmp	r3, #3
 8002458:	d80b      	bhi.n	8002472 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	2301      	movs	r3, #1
 800245e:	425b      	negs	r3, r3
 8002460:	2200      	movs	r2, #0
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f904 	bl	8002670 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002468:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_InitTick+0x64>)
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800246e:	2300      	movs	r3, #0
 8002470:	e000      	b.n	8002474 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
}
 8002474:	0018      	movs	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	b003      	add	sp, #12
 800247a:	bd90      	pop	{r4, r7, pc}
 800247c:	20000004 	.word	0x20000004
 8002480:	2000000c 	.word	0x2000000c
 8002484:	20000008 	.word	0x20000008

08002488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_IncTick+0x1c>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	001a      	movs	r2, r3
 8002492:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <HAL_IncTick+0x20>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	18d2      	adds	r2, r2, r3
 8002498:	4b03      	ldr	r3, [pc, #12]	@ (80024a8 <HAL_IncTick+0x20>)
 800249a:	601a      	str	r2, [r3, #0]
}
 800249c:	46c0      	nop			@ (mov r8, r8)
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			@ (mov r8, r8)
 80024a4:	2000000c 	.word	0x2000000c
 80024a8:	20000274 	.word	0x20000274

080024ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  return uwTick;
 80024b0:	4b02      	ldr	r3, [pc, #8]	@ (80024bc <HAL_GetTick+0x10>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	0018      	movs	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	46c0      	nop			@ (mov r8, r8)
 80024bc:	20000274 	.word	0x20000274

080024c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff fff0 	bl	80024ac <HAL_GetTick>
 80024cc:	0003      	movs	r3, r0
 80024ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3301      	adds	r3, #1
 80024d8:	d005      	beq.n	80024e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024da:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <HAL_Delay+0x44>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	001a      	movs	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	189b      	adds	r3, r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024e6:	46c0      	nop			@ (mov r8, r8)
 80024e8:	f7ff ffe0 	bl	80024ac <HAL_GetTick>
 80024ec:	0002      	movs	r2, r0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d8f7      	bhi.n	80024e8 <HAL_Delay+0x28>
  {
  }
}
 80024f8:	46c0      	nop			@ (mov r8, r8)
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b004      	add	sp, #16
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	2000000c 	.word	0x2000000c

08002508 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 800250c:	4b01      	ldr	r3, [pc, #4]	@ (8002514 <HAL_GetHalVersion+0xc>)
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	010a0700 	.word	0x010a0700

08002518 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	0002      	movs	r2, r0
 8002520:	1dfb      	adds	r3, r7, #7
 8002522:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002524:	1dfb      	adds	r3, r7, #7
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b7f      	cmp	r3, #127	@ 0x7f
 800252a:	d809      	bhi.n	8002540 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800252c:	1dfb      	adds	r3, r7, #7
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	001a      	movs	r2, r3
 8002532:	231f      	movs	r3, #31
 8002534:	401a      	ands	r2, r3
 8002536:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <__NVIC_EnableIRQ+0x30>)
 8002538:	2101      	movs	r1, #1
 800253a:	4091      	lsls	r1, r2
 800253c:	000a      	movs	r2, r1
 800253e:	601a      	str	r2, [r3, #0]
  }
}
 8002540:	46c0      	nop			@ (mov r8, r8)
 8002542:	46bd      	mov	sp, r7
 8002544:	b002      	add	sp, #8
 8002546:	bd80      	pop	{r7, pc}
 8002548:	e000e100 	.word	0xe000e100

0800254c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	0002      	movs	r2, r0
 8002554:	6039      	str	r1, [r7, #0]
 8002556:	1dfb      	adds	r3, r7, #7
 8002558:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002560:	d828      	bhi.n	80025b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002562:	4a2f      	ldr	r2, [pc, #188]	@ (8002620 <__NVIC_SetPriority+0xd4>)
 8002564:	1dfb      	adds	r3, r7, #7
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	b25b      	sxtb	r3, r3
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	33c0      	adds	r3, #192	@ 0xc0
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	589b      	ldr	r3, [r3, r2]
 8002572:	1dfa      	adds	r2, r7, #7
 8002574:	7812      	ldrb	r2, [r2, #0]
 8002576:	0011      	movs	r1, r2
 8002578:	2203      	movs	r2, #3
 800257a:	400a      	ands	r2, r1
 800257c:	00d2      	lsls	r2, r2, #3
 800257e:	21ff      	movs	r1, #255	@ 0xff
 8002580:	4091      	lsls	r1, r2
 8002582:	000a      	movs	r2, r1
 8002584:	43d2      	mvns	r2, r2
 8002586:	401a      	ands	r2, r3
 8002588:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	019b      	lsls	r3, r3, #6
 800258e:	22ff      	movs	r2, #255	@ 0xff
 8002590:	401a      	ands	r2, r3
 8002592:	1dfb      	adds	r3, r7, #7
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	0018      	movs	r0, r3
 8002598:	2303      	movs	r3, #3
 800259a:	4003      	ands	r3, r0
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025a0:	481f      	ldr	r0, [pc, #124]	@ (8002620 <__NVIC_SetPriority+0xd4>)
 80025a2:	1dfb      	adds	r3, r7, #7
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	b25b      	sxtb	r3, r3
 80025a8:	089b      	lsrs	r3, r3, #2
 80025aa:	430a      	orrs	r2, r1
 80025ac:	33c0      	adds	r3, #192	@ 0xc0
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80025b2:	e031      	b.n	8002618 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025b4:	4a1b      	ldr	r2, [pc, #108]	@ (8002624 <__NVIC_SetPriority+0xd8>)
 80025b6:	1dfb      	adds	r3, r7, #7
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	0019      	movs	r1, r3
 80025bc:	230f      	movs	r3, #15
 80025be:	400b      	ands	r3, r1
 80025c0:	3b08      	subs	r3, #8
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3306      	adds	r3, #6
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	18d3      	adds	r3, r2, r3
 80025ca:	3304      	adds	r3, #4
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	1dfa      	adds	r2, r7, #7
 80025d0:	7812      	ldrb	r2, [r2, #0]
 80025d2:	0011      	movs	r1, r2
 80025d4:	2203      	movs	r2, #3
 80025d6:	400a      	ands	r2, r1
 80025d8:	00d2      	lsls	r2, r2, #3
 80025da:	21ff      	movs	r1, #255	@ 0xff
 80025dc:	4091      	lsls	r1, r2
 80025de:	000a      	movs	r2, r1
 80025e0:	43d2      	mvns	r2, r2
 80025e2:	401a      	ands	r2, r3
 80025e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	019b      	lsls	r3, r3, #6
 80025ea:	22ff      	movs	r2, #255	@ 0xff
 80025ec:	401a      	ands	r2, r3
 80025ee:	1dfb      	adds	r3, r7, #7
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	0018      	movs	r0, r3
 80025f4:	2303      	movs	r3, #3
 80025f6:	4003      	ands	r3, r0
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80025fc:	4809      	ldr	r0, [pc, #36]	@ (8002624 <__NVIC_SetPriority+0xd8>)
 80025fe:	1dfb      	adds	r3, r7, #7
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	001c      	movs	r4, r3
 8002604:	230f      	movs	r3, #15
 8002606:	4023      	ands	r3, r4
 8002608:	3b08      	subs	r3, #8
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	430a      	orrs	r2, r1
 800260e:	3306      	adds	r3, #6
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	18c3      	adds	r3, r0, r3
 8002614:	3304      	adds	r3, #4
 8002616:	601a      	str	r2, [r3, #0]
}
 8002618:	46c0      	nop			@ (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b003      	add	sp, #12
 800261e:	bd90      	pop	{r4, r7, pc}
 8002620:	e000e100 	.word	0xe000e100
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	1e5a      	subs	r2, r3, #1
 8002634:	2380      	movs	r3, #128	@ 0x80
 8002636:	045b      	lsls	r3, r3, #17
 8002638:	429a      	cmp	r2, r3
 800263a:	d301      	bcc.n	8002640 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800263c:	2301      	movs	r3, #1
 800263e:	e010      	b.n	8002662 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002640:	4b0a      	ldr	r3, [pc, #40]	@ (800266c <SysTick_Config+0x44>)
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	3a01      	subs	r2, #1
 8002646:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002648:	2301      	movs	r3, #1
 800264a:	425b      	negs	r3, r3
 800264c:	2103      	movs	r1, #3
 800264e:	0018      	movs	r0, r3
 8002650:	f7ff ff7c 	bl	800254c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002654:	4b05      	ldr	r3, [pc, #20]	@ (800266c <SysTick_Config+0x44>)
 8002656:	2200      	movs	r2, #0
 8002658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800265a:	4b04      	ldr	r3, [pc, #16]	@ (800266c <SysTick_Config+0x44>)
 800265c:	2207      	movs	r2, #7
 800265e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002660:	2300      	movs	r3, #0
}
 8002662:	0018      	movs	r0, r3
 8002664:	46bd      	mov	sp, r7
 8002666:	b002      	add	sp, #8
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			@ (mov r8, r8)
 800266c:	e000e010 	.word	0xe000e010

08002670 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	60b9      	str	r1, [r7, #8]
 8002678:	607a      	str	r2, [r7, #4]
 800267a:	210f      	movs	r1, #15
 800267c:	187b      	adds	r3, r7, r1
 800267e:	1c02      	adds	r2, r0, #0
 8002680:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	187b      	adds	r3, r7, r1
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	b25b      	sxtb	r3, r3
 800268a:	0011      	movs	r1, r2
 800268c:	0018      	movs	r0, r3
 800268e:	f7ff ff5d 	bl	800254c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8002692:	46c0      	nop			@ (mov r8, r8)
 8002694:	46bd      	mov	sp, r7
 8002696:	b004      	add	sp, #16
 8002698:	bd80      	pop	{r7, pc}

0800269a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b082      	sub	sp, #8
 800269e:	af00      	add	r7, sp, #0
 80026a0:	0002      	movs	r2, r0
 80026a2:	1dfb      	adds	r3, r7, #7
 80026a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026a6:	1dfb      	adds	r3, r7, #7
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	b25b      	sxtb	r3, r3
 80026ac:	0018      	movs	r0, r3
 80026ae:	f7ff ff33 	bl	8002518 <__NVIC_EnableIRQ>
}
 80026b2:	46c0      	nop			@ (mov r8, r8)
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b002      	add	sp, #8
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b082      	sub	sp, #8
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f7ff ffaf 	bl	8002628 <SysTick_Config>
 80026ca:	0003      	movs	r3, r0
}
 80026cc:	0018      	movs	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b002      	add	sp, #8
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e061      	b.n	80027aa <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a32      	ldr	r2, [pc, #200]	@ (80027b4 <HAL_DMA_Init+0xe0>)
 80026ec:	4694      	mov	ip, r2
 80026ee:	4463      	add	r3, ip
 80026f0:	2114      	movs	r1, #20
 80026f2:	0018      	movs	r0, r3
 80026f4:	f7fd fd1a 	bl	800012c <__udivsi3>
 80026f8:	0003      	movs	r3, r0
 80026fa:	009a      	lsls	r2, r3, #2
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a2d      	ldr	r2, [pc, #180]	@ (80027b8 <HAL_DMA_Init+0xe4>)
 8002704:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2225      	movs	r2, #37	@ 0x25
 800270a:	2102      	movs	r1, #2
 800270c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4a28      	ldr	r2, [pc, #160]	@ (80027bc <HAL_DMA_Init+0xe8>)
 800271a:	4013      	ands	r3, r2
 800271c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002726:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002732:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	2380      	movs	r3, #128	@ 0x80
 800275a:	01db      	lsls	r3, r3, #7
 800275c:	429a      	cmp	r2, r3
 800275e:	d018      	beq.n	8002792 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002760:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <HAL_DMA_Init+0xec>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002768:	211c      	movs	r1, #28
 800276a:	400b      	ands	r3, r1
 800276c:	210f      	movs	r1, #15
 800276e:	4099      	lsls	r1, r3
 8002770:	000b      	movs	r3, r1
 8002772:	43d9      	mvns	r1, r3
 8002774:	4b12      	ldr	r3, [pc, #72]	@ (80027c0 <HAL_DMA_Init+0xec>)
 8002776:	400a      	ands	r2, r1
 8002778:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800277a:	4b11      	ldr	r3, [pc, #68]	@ (80027c0 <HAL_DMA_Init+0xec>)
 800277c:	6819      	ldr	r1, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002786:	201c      	movs	r0, #28
 8002788:	4003      	ands	r3, r0
 800278a:	409a      	lsls	r2, r3
 800278c:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <HAL_DMA_Init+0xec>)
 800278e:	430a      	orrs	r2, r1
 8002790:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2225      	movs	r2, #37	@ 0x25
 800279c:	2101      	movs	r1, #1
 800279e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2224      	movs	r2, #36	@ 0x24
 80027a4:	2100      	movs	r1, #0
 80027a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b004      	add	sp, #16
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			@ (mov r8, r8)
 80027b4:	bffdfff8 	.word	0xbffdfff8
 80027b8:	40020000 	.word	0x40020000
 80027bc:	ffff800f 	.word	0xffff800f
 80027c0:	400200a8 	.word	0x400200a8

080027c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027d2:	2317      	movs	r3, #23
 80027d4:	18fb      	adds	r3, r7, r3
 80027d6:	2200      	movs	r2, #0
 80027d8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2224      	movs	r2, #36	@ 0x24
 80027de:	5c9b      	ldrb	r3, [r3, r2]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_DMA_Start_IT+0x24>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e04f      	b.n	8002888 <HAL_DMA_Start_IT+0xc4>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2224      	movs	r2, #36	@ 0x24
 80027ec:	2101      	movs	r1, #1
 80027ee:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2225      	movs	r2, #37	@ 0x25
 80027f4:	5c9b      	ldrb	r3, [r3, r2]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d13a      	bne.n	8002872 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2225      	movs	r2, #37	@ 0x25
 8002800:	2102      	movs	r1, #2
 8002802:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2101      	movs	r1, #1
 8002816:	438a      	bics	r2, r1
 8002818:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f974 	bl	8002b0e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	2b00      	cmp	r3, #0
 800282c:	d008      	beq.n	8002840 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	210e      	movs	r1, #14
 800283a:	430a      	orrs	r2, r1
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	e00f      	b.n	8002860 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2104      	movs	r1, #4
 800284c:	438a      	bics	r2, r1
 800284e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	210a      	movs	r1, #10
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2101      	movs	r1, #1
 800286c:	430a      	orrs	r2, r1
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e007      	b.n	8002882 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2224      	movs	r2, #36	@ 0x24
 8002876:	2100      	movs	r1, #0
 8002878:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800287a:	2317      	movs	r3, #23
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	2202      	movs	r2, #2
 8002880:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8002882:	2317      	movs	r3, #23
 8002884:	18fb      	adds	r3, r7, r3
 8002886:	781b      	ldrb	r3, [r3, #0]
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	b006      	add	sp, #24
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002898:	230f      	movs	r3, #15
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2225      	movs	r2, #37	@ 0x25
 80028a4:	5c9b      	ldrb	r3, [r3, r2]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d008      	beq.n	80028be <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2204      	movs	r2, #4
 80028b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2224      	movs	r2, #36	@ 0x24
 80028b6:	2100      	movs	r1, #0
 80028b8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e024      	b.n	8002908 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	210e      	movs	r1, #14
 80028ca:	438a      	bics	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2101      	movs	r1, #1
 80028da:	438a      	bics	r2, r1
 80028dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	221c      	movs	r2, #28
 80028e4:	401a      	ands	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	2101      	movs	r1, #1
 80028ec:	4091      	lsls	r1, r2
 80028ee:	000a      	movs	r2, r1
 80028f0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2225      	movs	r2, #37	@ 0x25
 80028f6:	2101      	movs	r1, #1
 80028f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2224      	movs	r2, #36	@ 0x24
 80028fe:	2100      	movs	r1, #0
 8002900:	5499      	strb	r1, [r3, r2]

    return status;
 8002902:	230f      	movs	r3, #15
 8002904:	18fb      	adds	r3, r7, r3
 8002906:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002908:	0018      	movs	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	b004      	add	sp, #16
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002918:	210f      	movs	r1, #15
 800291a:	187b      	adds	r3, r7, r1
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2225      	movs	r2, #37	@ 0x25
 8002924:	5c9b      	ldrb	r3, [r3, r2]
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d006      	beq.n	800293a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2204      	movs	r2, #4
 8002930:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002932:	187b      	adds	r3, r7, r1
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
 8002938:	e02a      	b.n	8002990 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	210e      	movs	r1, #14
 8002946:	438a      	bics	r2, r1
 8002948:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2101      	movs	r1, #1
 8002956:	438a      	bics	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295e:	221c      	movs	r2, #28
 8002960:	401a      	ands	r2, r3
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	2101      	movs	r1, #1
 8002968:	4091      	lsls	r1, r2
 800296a:	000a      	movs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2225      	movs	r2, #37	@ 0x25
 8002972:	2101      	movs	r1, #1
 8002974:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2224      	movs	r2, #36	@ 0x24
 800297a:	2100      	movs	r1, #0
 800297c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002982:	2b00      	cmp	r3, #0
 8002984:	d004      	beq.n	8002990 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	0010      	movs	r0, r2
 800298e:	4798      	blx	r3
    }
  }
  return status;
 8002990:	230f      	movs	r3, #15
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	781b      	ldrb	r3, [r3, #0]
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b004      	add	sp, #16
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b084      	sub	sp, #16
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ba:	221c      	movs	r2, #28
 80029bc:	4013      	ands	r3, r2
 80029be:	2204      	movs	r2, #4
 80029c0:	409a      	lsls	r2, r3
 80029c2:	0013      	movs	r3, r2
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	4013      	ands	r3, r2
 80029c8:	d026      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x7a>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2204      	movs	r2, #4
 80029ce:	4013      	ands	r3, r2
 80029d0:	d022      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2220      	movs	r2, #32
 80029da:	4013      	ands	r3, r2
 80029dc:	d107      	bne.n	80029ee <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2104      	movs	r1, #4
 80029ea:	438a      	bics	r2, r1
 80029ec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	221c      	movs	r2, #28
 80029f4:	401a      	ands	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	2104      	movs	r1, #4
 80029fc:	4091      	lsls	r1, r2
 80029fe:	000a      	movs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d100      	bne.n	8002a0c <HAL_DMA_IRQHandler+0x6e>
 8002a0a:	e071      	b.n	8002af0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	0010      	movs	r0, r2
 8002a14:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8002a16:	e06b      	b.n	8002af0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1c:	221c      	movs	r2, #28
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2202      	movs	r2, #2
 8002a22:	409a      	lsls	r2, r3
 8002a24:	0013      	movs	r3, r2
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d02d      	beq.n	8002a88 <HAL_DMA_IRQHandler+0xea>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	4013      	ands	r3, r2
 8002a32:	d029      	beq.n	8002a88 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2220      	movs	r2, #32
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d10b      	bne.n	8002a58 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	210a      	movs	r1, #10
 8002a4c:	438a      	bics	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2225      	movs	r2, #37	@ 0x25
 8002a54:	2101      	movs	r1, #1
 8002a56:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5c:	221c      	movs	r2, #28
 8002a5e:	401a      	ands	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	2102      	movs	r1, #2
 8002a66:	4091      	lsls	r1, r2
 8002a68:	000a      	movs	r2, r1
 8002a6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2224      	movs	r2, #36	@ 0x24
 8002a70:	2100      	movs	r1, #0
 8002a72:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d039      	beq.n	8002af0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	0010      	movs	r0, r2
 8002a84:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002a86:	e033      	b.n	8002af0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8c:	221c      	movs	r2, #28
 8002a8e:	4013      	ands	r3, r2
 8002a90:	2208      	movs	r2, #8
 8002a92:	409a      	lsls	r2, r3
 8002a94:	0013      	movs	r3, r2
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	d02a      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x154>
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2208      	movs	r2, #8
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d026      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	210e      	movs	r1, #14
 8002ab0:	438a      	bics	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab8:	221c      	movs	r2, #28
 8002aba:	401a      	ands	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	4091      	lsls	r1, r2
 8002ac4:	000a      	movs	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2225      	movs	r2, #37	@ 0x25
 8002ad2:	2101      	movs	r1, #1
 8002ad4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2224      	movs	r2, #36	@ 0x24
 8002ada:	2100      	movs	r1, #0
 8002adc:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d005      	beq.n	8002af2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	0010      	movs	r0, r2
 8002aee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002af0:	46c0      	nop			@ (mov r8, r8)
 8002af2:	46c0      	nop			@ (mov r8, r8)
}
 8002af4:	46bd      	mov	sp, r7
 8002af6:	b004      	add	sp, #16
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b082      	sub	sp, #8
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8002b06:	0018      	movs	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b002      	add	sp, #8
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
 8002b1a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b20:	221c      	movs	r2, #28
 8002b22:	401a      	ands	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	2101      	movs	r1, #1
 8002b2a:	4091      	lsls	r1, r2
 8002b2c:	000a      	movs	r2, r1
 8002b2e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b10      	cmp	r3, #16
 8002b3e:	d108      	bne.n	8002b52 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b50:	e007      	b.n	8002b62 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	60da      	str	r2, [r3, #12]
}
 8002b62:	46c0      	nop			@ (mov r8, r8)
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b004      	add	sp, #16
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b82:	e155      	b.n	8002e30 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2101      	movs	r1, #1
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4091      	lsls	r1, r2
 8002b8e:	000a      	movs	r2, r1
 8002b90:	4013      	ands	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d100      	bne.n	8002b9c <HAL_GPIO_Init+0x30>
 8002b9a:	e146      	b.n	8002e2a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2203      	movs	r2, #3
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d005      	beq.n	8002bb4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2203      	movs	r2, #3
 8002bae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d130      	bne.n	8002c16 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	0013      	movs	r3, r2
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	68da      	ldr	r2, [r3, #12]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	409a      	lsls	r2, r3
 8002bd6:	0013      	movs	r3, r2
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bea:	2201      	movs	r2, #1
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	0013      	movs	r3, r2
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	091b      	lsrs	r3, r3, #4
 8002c00:	2201      	movs	r2, #1
 8002c02:	401a      	ands	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	409a      	lsls	r2, r3
 8002c08:	0013      	movs	r3, r2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	2203      	movs	r2, #3
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	2b03      	cmp	r3, #3
 8002c20:	d017      	beq.n	8002c52 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	0013      	movs	r3, r2
 8002c32:	43da      	mvns	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	409a      	lsls	r2, r3
 8002c44:	0013      	movs	r3, r2
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2203      	movs	r2, #3
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d123      	bne.n	8002ca6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	08da      	lsrs	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3208      	adds	r2, #8
 8002c66:	0092      	lsls	r2, r2, #2
 8002c68:	58d3      	ldr	r3, [r2, r3]
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	2207      	movs	r2, #7
 8002c70:	4013      	ands	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	220f      	movs	r2, #15
 8002c76:	409a      	lsls	r2, r3
 8002c78:	0013      	movs	r3, r2
 8002c7a:	43da      	mvns	r2, r3
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2107      	movs	r1, #7
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	0013      	movs	r3, r2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	08da      	lsrs	r2, r3, #3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3208      	adds	r2, #8
 8002ca0:	0092      	lsls	r2, r2, #2
 8002ca2:	6939      	ldr	r1, [r7, #16]
 8002ca4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	2203      	movs	r2, #3
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	0013      	movs	r3, r2
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	2203      	movs	r2, #3
 8002cc4:	401a      	ands	r2, r3
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	0013      	movs	r3, r2
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	693a      	ldr	r2, [r7, #16]
 8002cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	23c0      	movs	r3, #192	@ 0xc0
 8002ce0:	029b      	lsls	r3, r3, #10
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d100      	bne.n	8002ce8 <HAL_GPIO_Init+0x17c>
 8002ce6:	e0a0      	b.n	8002e2a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce8:	4b57      	ldr	r3, [pc, #348]	@ (8002e48 <HAL_GPIO_Init+0x2dc>)
 8002cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cec:	4b56      	ldr	r3, [pc, #344]	@ (8002e48 <HAL_GPIO_Init+0x2dc>)
 8002cee:	2101      	movs	r1, #1
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cf4:	4a55      	ldr	r2, [pc, #340]	@ (8002e4c <HAL_GPIO_Init+0x2e0>)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	589b      	ldr	r3, [r3, r2]
 8002d00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2203      	movs	r2, #3
 8002d06:	4013      	ands	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	0013      	movs	r3, r2
 8002d10:	43da      	mvns	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	23a0      	movs	r3, #160	@ 0xa0
 8002d1c:	05db      	lsls	r3, r3, #23
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d01f      	beq.n	8002d62 <HAL_GPIO_Init+0x1f6>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a4a      	ldr	r2, [pc, #296]	@ (8002e50 <HAL_GPIO_Init+0x2e4>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d019      	beq.n	8002d5e <HAL_GPIO_Init+0x1f2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a49      	ldr	r2, [pc, #292]	@ (8002e54 <HAL_GPIO_Init+0x2e8>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <HAL_GPIO_Init+0x1ee>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a48      	ldr	r2, [pc, #288]	@ (8002e58 <HAL_GPIO_Init+0x2ec>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00d      	beq.n	8002d56 <HAL_GPIO_Init+0x1ea>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a47      	ldr	r2, [pc, #284]	@ (8002e5c <HAL_GPIO_Init+0x2f0>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d007      	beq.n	8002d52 <HAL_GPIO_Init+0x1e6>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a46      	ldr	r2, [pc, #280]	@ (8002e60 <HAL_GPIO_Init+0x2f4>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d101      	bne.n	8002d4e <HAL_GPIO_Init+0x1e2>
 8002d4a:	2305      	movs	r3, #5
 8002d4c:	e00a      	b.n	8002d64 <HAL_GPIO_Init+0x1f8>
 8002d4e:	2306      	movs	r3, #6
 8002d50:	e008      	b.n	8002d64 <HAL_GPIO_Init+0x1f8>
 8002d52:	2304      	movs	r3, #4
 8002d54:	e006      	b.n	8002d64 <HAL_GPIO_Init+0x1f8>
 8002d56:	2303      	movs	r3, #3
 8002d58:	e004      	b.n	8002d64 <HAL_GPIO_Init+0x1f8>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e002      	b.n	8002d64 <HAL_GPIO_Init+0x1f8>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_GPIO_Init+0x1f8>
 8002d62:	2300      	movs	r3, #0
 8002d64:	697a      	ldr	r2, [r7, #20]
 8002d66:	2103      	movs	r1, #3
 8002d68:	400a      	ands	r2, r1
 8002d6a:	0092      	lsls	r2, r2, #2
 8002d6c:	4093      	lsls	r3, r2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d74:	4935      	ldr	r1, [pc, #212]	@ (8002e4c <HAL_GPIO_Init+0x2e0>)
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	089b      	lsrs	r3, r3, #2
 8002d7a:	3302      	adds	r3, #2
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d82:	4b38      	ldr	r3, [pc, #224]	@ (8002e64 <HAL_GPIO_Init+0x2f8>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	43da      	mvns	r2, r3
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	2380      	movs	r3, #128	@ 0x80
 8002d98:	035b      	lsls	r3, r3, #13
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	d003      	beq.n	8002da6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002da6:	4b2f      	ldr	r3, [pc, #188]	@ (8002e64 <HAL_GPIO_Init+0x2f8>)
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002dac:	4b2d      	ldr	r3, [pc, #180]	@ (8002e64 <HAL_GPIO_Init+0x2f8>)
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	43da      	mvns	r2, r3
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4013      	ands	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	2380      	movs	r3, #128	@ 0x80
 8002dc2:	039b      	lsls	r3, r3, #14
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	d003      	beq.n	8002dd0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002dd0:	4b24      	ldr	r3, [pc, #144]	@ (8002e64 <HAL_GPIO_Init+0x2f8>)
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002dd6:	4b23      	ldr	r3, [pc, #140]	@ (8002e64 <HAL_GPIO_Init+0x2f8>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	43da      	mvns	r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685a      	ldr	r2, [r3, #4]
 8002dea:	2380      	movs	r3, #128	@ 0x80
 8002dec:	029b      	lsls	r3, r3, #10
 8002dee:	4013      	ands	r3, r2
 8002df0:	d003      	beq.n	8002dfa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002e64 <HAL_GPIO_Init+0x2f8>)
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e00:	4b18      	ldr	r3, [pc, #96]	@ (8002e64 <HAL_GPIO_Init+0x2f8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	2380      	movs	r3, #128	@ 0x80
 8002e16:	025b      	lsls	r3, r3, #9
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002e24:	4b0f      	ldr	r3, [pc, #60]	@ (8002e64 <HAL_GPIO_Init+0x2f8>)
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	40da      	lsrs	r2, r3
 8002e38:	1e13      	subs	r3, r2, #0
 8002e3a:	d000      	beq.n	8002e3e <HAL_GPIO_Init+0x2d2>
 8002e3c:	e6a2      	b.n	8002b84 <HAL_GPIO_Init+0x18>
  }
}
 8002e3e:	46c0      	nop			@ (mov r8, r8)
 8002e40:	46c0      	nop			@ (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b006      	add	sp, #24
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	50000400 	.word	0x50000400
 8002e54:	50000800 	.word	0x50000800
 8002e58:	50000c00 	.word	0x50000c00
 8002e5c:	50001000 	.word	0x50001000
 8002e60:	50001c00 	.word	0x50001c00
 8002e64:	40010400 	.word	0x40010400

08002e68 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	0008      	movs	r0, r1
 8002e72:	0011      	movs	r1, r2
 8002e74:	1cbb      	adds	r3, r7, #2
 8002e76:	1c02      	adds	r2, r0, #0
 8002e78:	801a      	strh	r2, [r3, #0]
 8002e7a:	1c7b      	adds	r3, r7, #1
 8002e7c:	1c0a      	adds	r2, r1, #0
 8002e7e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e80:	1c7b      	adds	r3, r7, #1
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d004      	beq.n	8002e92 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e88:	1cbb      	adds	r3, r7, #2
 8002e8a:	881a      	ldrh	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002e90:	e003      	b.n	8002e9a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002e92:	1cbb      	adds	r3, r7, #2
 8002e94:	881a      	ldrh	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e9a:	46c0      	nop			@ (mov r8, r8)
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	b002      	add	sp, #8
 8002ea0:	bd80      	pop	{r7, pc}
	...

08002ea4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e08f      	b.n	8002fd6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2241      	movs	r2, #65	@ 0x41
 8002eba:	5c9b      	ldrb	r3, [r3, r2]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d107      	bne.n	8002ed2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2240      	movs	r2, #64	@ 0x40
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	0018      	movs	r0, r3
 8002ece:	f7fd fb81 	bl	80005d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2241      	movs	r2, #65	@ 0x41
 8002ed6:	2124      	movs	r1, #36	@ 0x24
 8002ed8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	438a      	bics	r2, r1
 8002ee8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	493b      	ldr	r1, [pc, #236]	@ (8002fe0 <HAL_I2C_Init+0x13c>)
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4938      	ldr	r1, [pc, #224]	@ (8002fe4 <HAL_I2C_Init+0x140>)
 8002f04:	400a      	ands	r2, r1
 8002f06:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d108      	bne.n	8002f22 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2180      	movs	r1, #128	@ 0x80
 8002f1a:	0209      	lsls	r1, r1, #8
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	e007      	b.n	8002f32 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2184      	movs	r1, #132	@ 0x84
 8002f2c:	0209      	lsls	r1, r1, #8
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d109      	bne.n	8002f4e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2180      	movs	r1, #128	@ 0x80
 8002f46:	0109      	lsls	r1, r1, #4
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	605a      	str	r2, [r3, #4]
 8002f4c:	e007      	b.n	8002f5e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4923      	ldr	r1, [pc, #140]	@ (8002fe8 <HAL_I2C_Init+0x144>)
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4920      	ldr	r1, [pc, #128]	@ (8002fec <HAL_I2C_Init+0x148>)
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68da      	ldr	r2, [r3, #12]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	491a      	ldr	r1, [pc, #104]	@ (8002fe4 <HAL_I2C_Init+0x140>)
 8002f7a:	400a      	ands	r2, r1
 8002f7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691a      	ldr	r2, [r3, #16]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69d9      	ldr	r1, [r3, #28]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1a      	ldr	r2, [r3, #32]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2241      	movs	r2, #65	@ 0x41
 8002fc2:	2120      	movs	r1, #32
 8002fc4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2242      	movs	r2, #66	@ 0x42
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	b002      	add	sp, #8
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	46c0      	nop			@ (mov r8, r8)
 8002fe0:	f0ffffff 	.word	0xf0ffffff
 8002fe4:	ffff7fff 	.word	0xffff7fff
 8002fe8:	fffff7ff 	.word	0xfffff7ff
 8002fec:	02008000 	.word	0x02008000

08002ff0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b089      	sub	sp, #36	@ 0x24
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	0008      	movs	r0, r1
 8002ffa:	607a      	str	r2, [r7, #4]
 8002ffc:	0019      	movs	r1, r3
 8002ffe:	230a      	movs	r3, #10
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	1c02      	adds	r2, r0, #0
 8003004:	801a      	strh	r2, [r3, #0]
 8003006:	2308      	movs	r3, #8
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	1c0a      	adds	r2, r1, #0
 800300c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2241      	movs	r2, #65	@ 0x41
 8003012:	5c9b      	ldrb	r3, [r3, r2]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b20      	cmp	r3, #32
 8003018:	d000      	beq.n	800301c <HAL_I2C_Master_Transmit+0x2c>
 800301a:	e10a      	b.n	8003232 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2240      	movs	r2, #64	@ 0x40
 8003020:	5c9b      	ldrb	r3, [r3, r2]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_I2C_Master_Transmit+0x3a>
 8003026:	2302      	movs	r3, #2
 8003028:	e104      	b.n	8003234 <HAL_I2C_Master_Transmit+0x244>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2240      	movs	r2, #64	@ 0x40
 800302e:	2101      	movs	r1, #1
 8003030:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003032:	f7ff fa3b 	bl	80024ac <HAL_GetTick>
 8003036:	0003      	movs	r3, r0
 8003038:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800303a:	2380      	movs	r3, #128	@ 0x80
 800303c:	0219      	lsls	r1, r3, #8
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	2319      	movs	r3, #25
 8003046:	2201      	movs	r2, #1
 8003048:	f000 fb22 	bl	8003690 <I2C_WaitOnFlagUntilTimeout>
 800304c:	1e03      	subs	r3, r0, #0
 800304e:	d001      	beq.n	8003054 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0ef      	b.n	8003234 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2241      	movs	r2, #65	@ 0x41
 8003058:	2121      	movs	r1, #33	@ 0x21
 800305a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2242      	movs	r2, #66	@ 0x42
 8003060:	2110      	movs	r1, #16
 8003062:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2200      	movs	r2, #0
 8003068:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2208      	movs	r2, #8
 8003074:	18ba      	adds	r2, r7, r2
 8003076:	8812      	ldrh	r2, [r2, #0]
 8003078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	2bff      	cmp	r3, #255	@ 0xff
 8003088:	d906      	bls.n	8003098 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	22ff      	movs	r2, #255	@ 0xff
 800308e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8003090:	2380      	movs	r3, #128	@ 0x80
 8003092:	045b      	lsls	r3, r3, #17
 8003094:	617b      	str	r3, [r7, #20]
 8003096:	e007      	b.n	80030a8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80030a2:	2380      	movs	r3, #128	@ 0x80
 80030a4:	049b      	lsls	r3, r3, #18
 80030a6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d027      	beq.n	8003100 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b4:	781a      	ldrb	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	3301      	adds	r3, #1
 80030e8:	b2da      	uxtb	r2, r3
 80030ea:	697c      	ldr	r4, [r7, #20]
 80030ec:	230a      	movs	r3, #10
 80030ee:	18fb      	adds	r3, r7, r3
 80030f0:	8819      	ldrh	r1, [r3, #0]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	4b51      	ldr	r3, [pc, #324]	@ (800323c <HAL_I2C_Master_Transmit+0x24c>)
 80030f6:	9300      	str	r3, [sp, #0]
 80030f8:	0023      	movs	r3, r4
 80030fa:	f000 fd41 	bl	8003b80 <I2C_TransferConfig>
 80030fe:	e06f      	b.n	80031e0 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003104:	b2da      	uxtb	r2, r3
 8003106:	697c      	ldr	r4, [r7, #20]
 8003108:	230a      	movs	r3, #10
 800310a:	18fb      	adds	r3, r7, r3
 800310c:	8819      	ldrh	r1, [r3, #0]
 800310e:	68f8      	ldr	r0, [r7, #12]
 8003110:	4b4a      	ldr	r3, [pc, #296]	@ (800323c <HAL_I2C_Master_Transmit+0x24c>)
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	0023      	movs	r3, r4
 8003116:	f000 fd33 	bl	8003b80 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800311a:	e061      	b.n	80031e0 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	0018      	movs	r0, r3
 8003124:	f000 fb0c 	bl	8003740 <I2C_WaitOnTXISFlagUntilTimeout>
 8003128:	1e03      	subs	r3, r0, #0
 800312a:	d001      	beq.n	8003130 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e081      	b.n	8003234 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003134:	781a      	ldrb	r2, [r3, #0]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003140:	1c5a      	adds	r2, r3, #1
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800314a:	b29b      	uxth	r3, r3
 800314c:	3b01      	subs	r3, #1
 800314e:	b29a      	uxth	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d03a      	beq.n	80031e0 <HAL_I2C_Master_Transmit+0x1f0>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800316e:	2b00      	cmp	r3, #0
 8003170:	d136      	bne.n	80031e0 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003172:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	0013      	movs	r3, r2
 800317c:	2200      	movs	r2, #0
 800317e:	2180      	movs	r1, #128	@ 0x80
 8003180:	f000 fa86 	bl	8003690 <I2C_WaitOnFlagUntilTimeout>
 8003184:	1e03      	subs	r3, r0, #0
 8003186:	d001      	beq.n	800318c <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e053      	b.n	8003234 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	2bff      	cmp	r3, #255	@ 0xff
 8003194:	d911      	bls.n	80031ba <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	22ff      	movs	r2, #255	@ 0xff
 800319a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	2380      	movs	r3, #128	@ 0x80
 80031a4:	045c      	lsls	r4, r3, #17
 80031a6:	230a      	movs	r3, #10
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	8819      	ldrh	r1, [r3, #0]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	2300      	movs	r3, #0
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	0023      	movs	r3, r4
 80031b4:	f000 fce4 	bl	8003b80 <I2C_TransferConfig>
 80031b8:	e012      	b.n	80031e0 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	2380      	movs	r3, #128	@ 0x80
 80031cc:	049c      	lsls	r4, r3, #18
 80031ce:	230a      	movs	r3, #10
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	8819      	ldrh	r1, [r3, #0]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	2300      	movs	r3, #0
 80031d8:	9300      	str	r3, [sp, #0]
 80031da:	0023      	movs	r3, r4
 80031dc:	f000 fcd0 	bl	8003b80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d198      	bne.n	800311c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f000 faeb 	bl	80037cc <I2C_WaitOnSTOPFlagUntilTimeout>
 80031f6:	1e03      	subs	r3, r0, #0
 80031f8:	d001      	beq.n	80031fe <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e01a      	b.n	8003234 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2220      	movs	r2, #32
 8003204:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	490b      	ldr	r1, [pc, #44]	@ (8003240 <HAL_I2C_Master_Transmit+0x250>)
 8003212:	400a      	ands	r2, r1
 8003214:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2241      	movs	r2, #65	@ 0x41
 800321a:	2120      	movs	r1, #32
 800321c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2242      	movs	r2, #66	@ 0x42
 8003222:	2100      	movs	r1, #0
 8003224:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2240      	movs	r2, #64	@ 0x40
 800322a:	2100      	movs	r1, #0
 800322c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800322e:	2300      	movs	r3, #0
 8003230:	e000      	b.n	8003234 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8003232:	2302      	movs	r3, #2
  }
}
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b007      	add	sp, #28
 800323a:	bd90      	pop	{r4, r7, pc}
 800323c:	80002000 	.word	0x80002000
 8003240:	fe00e800 	.word	0xfe00e800

08003244 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003244:	b590      	push	{r4, r7, lr}
 8003246:	b089      	sub	sp, #36	@ 0x24
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	0008      	movs	r0, r1
 800324e:	607a      	str	r2, [r7, #4]
 8003250:	0019      	movs	r1, r3
 8003252:	230a      	movs	r3, #10
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	1c02      	adds	r2, r0, #0
 8003258:	801a      	strh	r2, [r3, #0]
 800325a:	2308      	movs	r3, #8
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	1c0a      	adds	r2, r1, #0
 8003260:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2241      	movs	r2, #65	@ 0x41
 8003266:	5c9b      	ldrb	r3, [r3, r2]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b20      	cmp	r3, #32
 800326c:	d000      	beq.n	8003270 <HAL_I2C_Master_Receive+0x2c>
 800326e:	e0e8      	b.n	8003442 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2240      	movs	r2, #64	@ 0x40
 8003274:	5c9b      	ldrb	r3, [r3, r2]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_I2C_Master_Receive+0x3a>
 800327a:	2302      	movs	r3, #2
 800327c:	e0e2      	b.n	8003444 <HAL_I2C_Master_Receive+0x200>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2240      	movs	r2, #64	@ 0x40
 8003282:	2101      	movs	r1, #1
 8003284:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003286:	f7ff f911 	bl	80024ac <HAL_GetTick>
 800328a:	0003      	movs	r3, r0
 800328c:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800328e:	2380      	movs	r3, #128	@ 0x80
 8003290:	0219      	lsls	r1, r3, #8
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	2319      	movs	r3, #25
 800329a:	2201      	movs	r2, #1
 800329c:	f000 f9f8 	bl	8003690 <I2C_WaitOnFlagUntilTimeout>
 80032a0:	1e03      	subs	r3, r0, #0
 80032a2:	d001      	beq.n	80032a8 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e0cd      	b.n	8003444 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2241      	movs	r2, #65	@ 0x41
 80032ac:	2122      	movs	r1, #34	@ 0x22
 80032ae:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2242      	movs	r2, #66	@ 0x42
 80032b4:	2110      	movs	r1, #16
 80032b6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2208      	movs	r2, #8
 80032c8:	18ba      	adds	r2, r7, r2
 80032ca:	8812      	ldrh	r2, [r2, #0]
 80032cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2bff      	cmp	r3, #255	@ 0xff
 80032dc:	d911      	bls.n	8003302 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2201      	movs	r2, #1
 80032e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	045c      	lsls	r4, r3, #17
 80032ee:	230a      	movs	r3, #10
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	8819      	ldrh	r1, [r3, #0]
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	4b55      	ldr	r3, [pc, #340]	@ (800344c <HAL_I2C_Master_Receive+0x208>)
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	0023      	movs	r3, r4
 80032fc:	f000 fc40 	bl	8003b80 <I2C_TransferConfig>
 8003300:	e076      	b.n	80033f0 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003310:	b2da      	uxtb	r2, r3
 8003312:	2380      	movs	r3, #128	@ 0x80
 8003314:	049c      	lsls	r4, r3, #18
 8003316:	230a      	movs	r3, #10
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	8819      	ldrh	r1, [r3, #0]
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	4b4b      	ldr	r3, [pc, #300]	@ (800344c <HAL_I2C_Master_Receive+0x208>)
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	0023      	movs	r3, r4
 8003324:	f000 fc2c 	bl	8003b80 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003328:	e062      	b.n	80033f0 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	0018      	movs	r0, r3
 8003332:	f000 fa8f 	bl	8003854 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003336:	1e03      	subs	r3, r0, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e082      	b.n	8003444 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003348:	b2d2      	uxtb	r2, r2
 800334a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003350:	1c5a      	adds	r2, r3, #1
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d03a      	beq.n	80033f0 <HAL_I2C_Master_Receive+0x1ac>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337e:	2b00      	cmp	r3, #0
 8003380:	d136      	bne.n	80033f0 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	0013      	movs	r3, r2
 800338c:	2200      	movs	r2, #0
 800338e:	2180      	movs	r1, #128	@ 0x80
 8003390:	f000 f97e 	bl	8003690 <I2C_WaitOnFlagUntilTimeout>
 8003394:	1e03      	subs	r3, r0, #0
 8003396:	d001      	beq.n	800339c <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e053      	b.n	8003444 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2bff      	cmp	r3, #255	@ 0xff
 80033a4:	d911      	bls.n	80033ca <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	22ff      	movs	r2, #255	@ 0xff
 80033aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b0:	b2da      	uxtb	r2, r3
 80033b2:	2380      	movs	r3, #128	@ 0x80
 80033b4:	045c      	lsls	r4, r3, #17
 80033b6:	230a      	movs	r3, #10
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	8819      	ldrh	r1, [r3, #0]
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	2300      	movs	r3, #0
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	0023      	movs	r3, r4
 80033c4:	f000 fbdc 	bl	8003b80 <I2C_TransferConfig>
 80033c8:	e012      	b.n	80033f0 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ce:	b29a      	uxth	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d8:	b2da      	uxtb	r2, r3
 80033da:	2380      	movs	r3, #128	@ 0x80
 80033dc:	049c      	lsls	r4, r3, #18
 80033de:	230a      	movs	r3, #10
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	8819      	ldrh	r1, [r3, #0]
 80033e4:	68f8      	ldr	r0, [r7, #12]
 80033e6:	2300      	movs	r3, #0
 80033e8:	9300      	str	r3, [sp, #0]
 80033ea:	0023      	movs	r3, r4
 80033ec:	f000 fbc8 	bl	8003b80 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d197      	bne.n	800332a <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	0018      	movs	r0, r3
 8003402:	f000 f9e3 	bl	80037cc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003406:	1e03      	subs	r3, r0, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e01a      	b.n	8003444 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2220      	movs	r2, #32
 8003414:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	490b      	ldr	r1, [pc, #44]	@ (8003450 <HAL_I2C_Master_Receive+0x20c>)
 8003422:	400a      	ands	r2, r1
 8003424:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2241      	movs	r2, #65	@ 0x41
 800342a:	2120      	movs	r1, #32
 800342c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2242      	movs	r2, #66	@ 0x42
 8003432:	2100      	movs	r1, #0
 8003434:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2240      	movs	r2, #64	@ 0x40
 800343a:	2100      	movs	r1, #0
 800343c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800343e:	2300      	movs	r3, #0
 8003440:	e000      	b.n	8003444 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8003442:	2302      	movs	r3, #2
  }
}
 8003444:	0018      	movs	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	b007      	add	sp, #28
 800344a:	bd90      	pop	{r4, r7, pc}
 800344c:	80002400 	.word	0x80002400
 8003450:	fe00e800 	.word	0xfe00e800

08003454 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b08a      	sub	sp, #40	@ 0x28
 8003458:	af02      	add	r7, sp, #8
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	230a      	movs	r3, #10
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	1c0a      	adds	r2, r1, #0
 8003466:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2241      	movs	r2, #65	@ 0x41
 8003470:	5c9b      	ldrb	r3, [r3, r2]
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b20      	cmp	r3, #32
 8003476:	d000      	beq.n	800347a <HAL_I2C_IsDeviceReady+0x26>
 8003478:	e0df      	b.n	800363a <HAL_I2C_IsDeviceReady+0x1e6>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699a      	ldr	r2, [r3, #24]
 8003480:	2380      	movs	r3, #128	@ 0x80
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	401a      	ands	r2, r3
 8003486:	2380      	movs	r3, #128	@ 0x80
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	429a      	cmp	r2, r3
 800348c:	d101      	bne.n	8003492 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
 8003490:	e0d4      	b.n	800363c <HAL_I2C_IsDeviceReady+0x1e8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2240      	movs	r2, #64	@ 0x40
 8003496:	5c9b      	ldrb	r3, [r3, r2]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_I2C_IsDeviceReady+0x4c>
 800349c:	2302      	movs	r3, #2
 800349e:	e0cd      	b.n	800363c <HAL_I2C_IsDeviceReady+0x1e8>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2240      	movs	r2, #64	@ 0x40
 80034a4:	2101      	movs	r1, #1
 80034a6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2241      	movs	r2, #65	@ 0x41
 80034ac:	2124      	movs	r1, #36	@ 0x24
 80034ae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d107      	bne.n	80034ce <HAL_I2C_IsDeviceReady+0x7a>
 80034be:	230a      	movs	r3, #10
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	881b      	ldrh	r3, [r3, #0]
 80034c4:	059b      	lsls	r3, r3, #22
 80034c6:	0d9b      	lsrs	r3, r3, #22
 80034c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003644 <HAL_I2C_IsDeviceReady+0x1f0>)
 80034ca:	431a      	orrs	r2, r3
 80034cc:	e006      	b.n	80034dc <HAL_I2C_IsDeviceReady+0x88>
 80034ce:	230a      	movs	r3, #10
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	881b      	ldrh	r3, [r3, #0]
 80034d4:	059b      	lsls	r3, r3, #22
 80034d6:	0d9b      	lsrs	r3, r3, #22
 80034d8:	4a5b      	ldr	r2, [pc, #364]	@ (8003648 <HAL_I2C_IsDeviceReady+0x1f4>)
 80034da:	431a      	orrs	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80034e2:	f7fe ffe3 	bl	80024ac <HAL_GetTick>
 80034e6:	0003      	movs	r3, r0
 80034e8:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	2220      	movs	r2, #32
 80034f2:	4013      	ands	r3, r2
 80034f4:	3b20      	subs	r3, #32
 80034f6:	425a      	negs	r2, r3
 80034f8:	4153      	adcs	r3, r2
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	231f      	movs	r3, #31
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	2210      	movs	r2, #16
 800350a:	4013      	ands	r3, r2
 800350c:	3b10      	subs	r3, #16
 800350e:	425a      	negs	r2, r3
 8003510:	4153      	adcs	r3, r2
 8003512:	b2da      	uxtb	r2, r3
 8003514:	231e      	movs	r3, #30
 8003516:	18fb      	adds	r3, r7, r3
 8003518:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800351a:	e035      	b.n	8003588 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	d01a      	beq.n	8003558 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003522:	f7fe ffc3 	bl	80024ac <HAL_GetTick>
 8003526:	0002      	movs	r2, r0
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	429a      	cmp	r2, r3
 8003530:	d302      	bcc.n	8003538 <HAL_I2C_IsDeviceReady+0xe4>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10f      	bne.n	8003558 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2241      	movs	r2, #65	@ 0x41
 800353c:	2120      	movs	r1, #32
 800353e:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003544:	2220      	movs	r2, #32
 8003546:	431a      	orrs	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2240      	movs	r2, #64	@ 0x40
 8003550:	2100      	movs	r1, #0
 8003552:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e071      	b.n	800363c <HAL_I2C_IsDeviceReady+0x1e8>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2220      	movs	r2, #32
 8003560:	4013      	ands	r3, r2
 8003562:	3b20      	subs	r3, #32
 8003564:	425a      	negs	r2, r3
 8003566:	4153      	adcs	r3, r2
 8003568:	b2da      	uxtb	r2, r3
 800356a:	231f      	movs	r3, #31
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	2210      	movs	r2, #16
 8003578:	4013      	ands	r3, r2
 800357a:	3b10      	subs	r3, #16
 800357c:	425a      	negs	r2, r3
 800357e:	4153      	adcs	r3, r2
 8003580:	b2da      	uxtb	r2, r3
 8003582:	231e      	movs	r3, #30
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003588:	231f      	movs	r3, #31
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d104      	bne.n	800359c <HAL_I2C_IsDeviceReady+0x148>
 8003592:	231e      	movs	r3, #30
 8003594:	18fb      	adds	r3, r7, r3
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0bf      	beq.n	800351c <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2210      	movs	r2, #16
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d01a      	beq.n	80035e0 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	0013      	movs	r3, r2
 80035b4:	2200      	movs	r2, #0
 80035b6:	2120      	movs	r1, #32
 80035b8:	f000 f86a 	bl	8003690 <I2C_WaitOnFlagUntilTimeout>
 80035bc:	1e03      	subs	r3, r0, #0
 80035be:	d001      	beq.n	80035c4 <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e03b      	b.n	800363c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2220      	movs	r2, #32
 80035ca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2241      	movs	r2, #65	@ 0x41
 80035d0:	2120      	movs	r1, #32
 80035d2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2240      	movs	r2, #64	@ 0x40
 80035d8:	2100      	movs	r1, #0
 80035da:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 80035dc:	2300      	movs	r3, #0
 80035de:	e02d      	b.n	800363c <HAL_I2C_IsDeviceReady+0x1e8>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	0013      	movs	r3, r2
 80035ea:	2200      	movs	r2, #0
 80035ec:	2120      	movs	r1, #32
 80035ee:	f000 f84f 	bl	8003690 <I2C_WaitOnFlagUntilTimeout>
 80035f2:	1e03      	subs	r3, r0, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e020      	b.n	800363c <HAL_I2C_IsDeviceReady+0x1e8>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2210      	movs	r2, #16
 8003600:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2220      	movs	r2, #32
 8003608:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	3301      	adds	r3, #1
 800360e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	429a      	cmp	r2, r3
 8003616:	d900      	bls.n	800361a <HAL_I2C_IsDeviceReady+0x1c6>
 8003618:	e74d      	b.n	80034b6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2241      	movs	r2, #65	@ 0x41
 800361e:	2120      	movs	r1, #32
 8003620:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003626:	2220      	movs	r2, #32
 8003628:	431a      	orrs	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2240      	movs	r2, #64	@ 0x40
 8003632:	2100      	movs	r1, #0
 8003634:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e000      	b.n	800363c <HAL_I2C_IsDeviceReady+0x1e8>
  }
  else
  {
    return HAL_BUSY;
 800363a:	2302      	movs	r3, #2
  }
}
 800363c:	0018      	movs	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	b008      	add	sp, #32
 8003642:	bd80      	pop	{r7, pc}
 8003644:	02002000 	.word	0x02002000
 8003648:	02002800 	.word	0x02002800

0800364c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2202      	movs	r2, #2
 800365c:	4013      	ands	r3, r2
 800365e:	2b02      	cmp	r3, #2
 8003660:	d103      	bne.n	800366a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2200      	movs	r2, #0
 8003668:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2201      	movs	r2, #1
 8003672:	4013      	ands	r3, r2
 8003674:	2b01      	cmp	r3, #1
 8003676:	d007      	beq.n	8003688 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2101      	movs	r1, #1
 8003684:	430a      	orrs	r2, r1
 8003686:	619a      	str	r2, [r3, #24]
  }
}
 8003688:	46c0      	nop			@ (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	b002      	add	sp, #8
 800368e:	bd80      	pop	{r7, pc}

08003690 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	1dfb      	adds	r3, r7, #7
 800369e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a0:	e03a      	b.n	8003718 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	6839      	ldr	r1, [r7, #0]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	0018      	movs	r0, r3
 80036aa:	f000 f971 	bl	8003990 <I2C_IsErrorOccurred>
 80036ae:	1e03      	subs	r3, r0, #0
 80036b0:	d001      	beq.n	80036b6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e040      	b.n	8003738 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	d02d      	beq.n	8003718 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036bc:	f7fe fef6 	bl	80024ac <HAL_GetTick>
 80036c0:	0002      	movs	r2, r0
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d302      	bcc.n	80036d2 <I2C_WaitOnFlagUntilTimeout+0x42>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d122      	bne.n	8003718 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	4013      	ands	r3, r2
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	425a      	negs	r2, r3
 80036e2:	4153      	adcs	r3, r2
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	001a      	movs	r2, r3
 80036e8:	1dfb      	adds	r3, r7, #7
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d113      	bne.n	8003718 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f4:	2220      	movs	r2, #32
 80036f6:	431a      	orrs	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2241      	movs	r2, #65	@ 0x41
 8003700:	2120      	movs	r1, #32
 8003702:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2242      	movs	r2, #66	@ 0x42
 8003708:	2100      	movs	r1, #0
 800370a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2240      	movs	r2, #64	@ 0x40
 8003710:	2100      	movs	r1, #0
 8003712:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e00f      	b.n	8003738 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4013      	ands	r3, r2
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	425a      	negs	r2, r3
 8003728:	4153      	adcs	r3, r2
 800372a:	b2db      	uxtb	r3, r3
 800372c:	001a      	movs	r2, r3
 800372e:	1dfb      	adds	r3, r7, #7
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d0b5      	beq.n	80036a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	0018      	movs	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	b004      	add	sp, #16
 800373e:	bd80      	pop	{r7, pc}

08003740 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800374c:	e032      	b.n	80037b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	68b9      	ldr	r1, [r7, #8]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	0018      	movs	r0, r3
 8003756:	f000 f91b 	bl	8003990 <I2C_IsErrorOccurred>
 800375a:	1e03      	subs	r3, r0, #0
 800375c:	d001      	beq.n	8003762 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e030      	b.n	80037c4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	3301      	adds	r3, #1
 8003766:	d025      	beq.n	80037b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003768:	f7fe fea0 	bl	80024ac <HAL_GetTick>
 800376c:	0002      	movs	r2, r0
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	429a      	cmp	r2, r3
 8003776:	d302      	bcc.n	800377e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d11a      	bne.n	80037b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2202      	movs	r2, #2
 8003786:	4013      	ands	r3, r2
 8003788:	2b02      	cmp	r3, #2
 800378a:	d013      	beq.n	80037b4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003790:	2220      	movs	r2, #32
 8003792:	431a      	orrs	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2241      	movs	r2, #65	@ 0x41
 800379c:	2120      	movs	r1, #32
 800379e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2242      	movs	r2, #66	@ 0x42
 80037a4:	2100      	movs	r1, #0
 80037a6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2240      	movs	r2, #64	@ 0x40
 80037ac:	2100      	movs	r1, #0
 80037ae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e007      	b.n	80037c4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	2202      	movs	r2, #2
 80037bc:	4013      	ands	r3, r2
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d1c5      	bne.n	800374e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b004      	add	sp, #16
 80037ca:	bd80      	pop	{r7, pc}

080037cc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d8:	e02f      	b.n	800383a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	0018      	movs	r0, r3
 80037e2:	f000 f8d5 	bl	8003990 <I2C_IsErrorOccurred>
 80037e6:	1e03      	subs	r3, r0, #0
 80037e8:	d001      	beq.n	80037ee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e02d      	b.n	800384a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ee:	f7fe fe5d 	bl	80024ac <HAL_GetTick>
 80037f2:	0002      	movs	r2, r0
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d302      	bcc.n	8003804 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d11a      	bne.n	800383a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2220      	movs	r2, #32
 800380c:	4013      	ands	r3, r2
 800380e:	2b20      	cmp	r3, #32
 8003810:	d013      	beq.n	800383a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003816:	2220      	movs	r2, #32
 8003818:	431a      	orrs	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2241      	movs	r2, #65	@ 0x41
 8003822:	2120      	movs	r1, #32
 8003824:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2242      	movs	r2, #66	@ 0x42
 800382a:	2100      	movs	r1, #0
 800382c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2240      	movs	r2, #64	@ 0x40
 8003832:	2100      	movs	r1, #0
 8003834:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e007      	b.n	800384a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	2220      	movs	r2, #32
 8003842:	4013      	ands	r3, r2
 8003844:	2b20      	cmp	r3, #32
 8003846:	d1c8      	bne.n	80037da <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	0018      	movs	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	b004      	add	sp, #16
 8003850:	bd80      	pop	{r7, pc}
	...

08003854 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2317      	movs	r3, #23
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003868:	e07b      	b.n	8003962 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	68b9      	ldr	r1, [r7, #8]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	0018      	movs	r0, r3
 8003872:	f000 f88d 	bl	8003990 <I2C_IsErrorOccurred>
 8003876:	1e03      	subs	r3, r0, #0
 8003878:	d003      	beq.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 800387a:	2317      	movs	r3, #23
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	2201      	movs	r2, #1
 8003880:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2220      	movs	r2, #32
 800388a:	4013      	ands	r3, r2
 800388c:	2b20      	cmp	r3, #32
 800388e:	d140      	bne.n	8003912 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8003890:	2117      	movs	r1, #23
 8003892:	187b      	adds	r3, r7, r1
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d13b      	bne.n	8003912 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	2204      	movs	r2, #4
 80038a2:	4013      	ands	r3, r2
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d106      	bne.n	80038b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80038b0:	187b      	adds	r3, r7, r1
 80038b2:	2200      	movs	r2, #0
 80038b4:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	2210      	movs	r2, #16
 80038be:	4013      	ands	r3, r2
 80038c0:	2b10      	cmp	r3, #16
 80038c2:	d123      	bne.n	800390c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2210      	movs	r2, #16
 80038ca:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2204      	movs	r2, #4
 80038d0:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2220      	movs	r2, #32
 80038d8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4929      	ldr	r1, [pc, #164]	@ (800398c <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 80038e6:	400a      	ands	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2241      	movs	r2, #65	@ 0x41
 80038ee:	2120      	movs	r1, #32
 80038f0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2242      	movs	r2, #66	@ 0x42
 80038f6:	2100      	movs	r1, #0
 80038f8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2240      	movs	r2, #64	@ 0x40
 80038fe:	2100      	movs	r1, #0
 8003900:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8003902:	2317      	movs	r3, #23
 8003904:	18fb      	adds	r3, r7, r3
 8003906:	2201      	movs	r2, #1
 8003908:	701a      	strb	r2, [r3, #0]
 800390a:	e002      	b.n	8003912 <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003912:	f7fe fdcb 	bl	80024ac <HAL_GetTick>
 8003916:	0002      	movs	r2, r0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	429a      	cmp	r2, r3
 8003920:	d302      	bcc.n	8003928 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d11c      	bne.n	8003962 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8003928:	2017      	movs	r0, #23
 800392a:	183b      	adds	r3, r7, r0
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d117      	bne.n	8003962 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2204      	movs	r2, #4
 800393a:	4013      	ands	r3, r2
 800393c:	2b04      	cmp	r3, #4
 800393e:	d010      	beq.n	8003962 <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003944:	2220      	movs	r2, #32
 8003946:	431a      	orrs	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2241      	movs	r2, #65	@ 0x41
 8003950:	2120      	movs	r1, #32
 8003952:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2240      	movs	r2, #64	@ 0x40
 8003958:	2100      	movs	r1, #0
 800395a:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 800395c:	183b      	adds	r3, r7, r0
 800395e:	2201      	movs	r2, #1
 8003960:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2204      	movs	r2, #4
 800396a:	4013      	ands	r3, r2
 800396c:	2b04      	cmp	r3, #4
 800396e:	d005      	beq.n	800397c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8003970:	2317      	movs	r3, #23
 8003972:	18fb      	adds	r3, r7, r3
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d100      	bne.n	800397c <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 800397a:	e776      	b.n	800386a <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 800397c:	2317      	movs	r3, #23
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	781b      	ldrb	r3, [r3, #0]
}
 8003982:	0018      	movs	r0, r3
 8003984:	46bd      	mov	sp, r7
 8003986:	b006      	add	sp, #24
 8003988:	bd80      	pop	{r7, pc}
 800398a:	46c0      	nop			@ (mov r8, r8)
 800398c:	fe00e800 	.word	0xfe00e800

08003990 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	@ 0x28
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800399c:	2327      	movs	r3, #39	@ 0x27
 800399e:	18fb      	adds	r3, r7, r3
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80039ac:	2300      	movs	r3, #0
 80039ae:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2210      	movs	r2, #16
 80039b8:	4013      	ands	r3, r2
 80039ba:	d100      	bne.n	80039be <I2C_IsErrorOccurred+0x2e>
 80039bc:	e079      	b.n	8003ab2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2210      	movs	r2, #16
 80039c4:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039c6:	e057      	b.n	8003a78 <I2C_IsErrorOccurred+0xe8>
 80039c8:	2227      	movs	r2, #39	@ 0x27
 80039ca:	18bb      	adds	r3, r7, r2
 80039cc:	18ba      	adds	r2, r7, r2
 80039ce:	7812      	ldrb	r2, [r2, #0]
 80039d0:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	3301      	adds	r3, #1
 80039d6:	d04f      	beq.n	8003a78 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039d8:	f7fe fd68 	bl	80024ac <HAL_GetTick>
 80039dc:	0002      	movs	r2, r0
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	1ad3      	subs	r3, r2, r3
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d302      	bcc.n	80039ee <I2C_IsErrorOccurred+0x5e>
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d144      	bne.n	8003a78 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	685a      	ldr	r2, [r3, #4]
 80039f4:	2380      	movs	r3, #128	@ 0x80
 80039f6:	01db      	lsls	r3, r3, #7
 80039f8:	4013      	ands	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80039fc:	2013      	movs	r0, #19
 80039fe:	183b      	adds	r3, r7, r0
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	2142      	movs	r1, #66	@ 0x42
 8003a04:	5c52      	ldrb	r2, [r2, r1]
 8003a06:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	2380      	movs	r3, #128	@ 0x80
 8003a10:	021b      	lsls	r3, r3, #8
 8003a12:	401a      	ands	r2, r3
 8003a14:	2380      	movs	r3, #128	@ 0x80
 8003a16:	021b      	lsls	r3, r3, #8
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d126      	bne.n	8003a6a <I2C_IsErrorOccurred+0xda>
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	2380      	movs	r3, #128	@ 0x80
 8003a20:	01db      	lsls	r3, r3, #7
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d021      	beq.n	8003a6a <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003a26:	183b      	adds	r3, r7, r0
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d01d      	beq.n	8003a6a <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	2180      	movs	r1, #128	@ 0x80
 8003a3a:	01c9      	lsls	r1, r1, #7
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003a40:	f7fe fd34 	bl	80024ac <HAL_GetTick>
 8003a44:	0003      	movs	r3, r0
 8003a46:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a48:	e00f      	b.n	8003a6a <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003a4a:	f7fe fd2f 	bl	80024ac <HAL_GetTick>
 8003a4e:	0002      	movs	r2, r0
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b19      	cmp	r3, #25
 8003a56:	d908      	bls.n	8003a6a <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003a60:	2327      	movs	r3, #39	@ 0x27
 8003a62:	18fb      	adds	r3, r7, r3
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]

              break;
 8003a68:	e006      	b.n	8003a78 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	2220      	movs	r2, #32
 8003a72:	4013      	ands	r3, r2
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d1e8      	bne.n	8003a4a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d004      	beq.n	8003a90 <I2C_IsErrorOccurred+0x100>
 8003a86:	2327      	movs	r3, #39	@ 0x27
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d09b      	beq.n	80039c8 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a90:	2327      	movs	r3, #39	@ 0x27
 8003a92:	18fb      	adds	r3, r7, r3
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d103      	bne.n	8003aa2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	2204      	movs	r2, #4
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003aaa:	2327      	movs	r3, #39	@ 0x27
 8003aac:	18fb      	adds	r3, r7, r3
 8003aae:	2201      	movs	r2, #1
 8003ab0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	2380      	movs	r3, #128	@ 0x80
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d00c      	beq.n	8003ade <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2280      	movs	r2, #128	@ 0x80
 8003ad2:	0052      	lsls	r2, r2, #1
 8003ad4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ad6:	2327      	movs	r3, #39	@ 0x27
 8003ad8:	18fb      	adds	r3, r7, r3
 8003ada:	2201      	movs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ade:	69ba      	ldr	r2, [r7, #24]
 8003ae0:	2380      	movs	r3, #128	@ 0x80
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d00c      	beq.n	8003b02 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	2208      	movs	r2, #8
 8003aec:	4313      	orrs	r3, r2
 8003aee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2280      	movs	r2, #128	@ 0x80
 8003af6:	00d2      	lsls	r2, r2, #3
 8003af8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003afa:	2327      	movs	r3, #39	@ 0x27
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	2201      	movs	r2, #1
 8003b00:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	2380      	movs	r3, #128	@ 0x80
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4013      	ands	r3, r2
 8003b0a:	d00c      	beq.n	8003b26 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	4313      	orrs	r3, r2
 8003b12:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2280      	movs	r2, #128	@ 0x80
 8003b1a:	0092      	lsls	r2, r2, #2
 8003b1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003b1e:	2327      	movs	r3, #39	@ 0x27
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	2201      	movs	r2, #1
 8003b24:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003b26:	2327      	movs	r3, #39	@ 0x27
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01d      	beq.n	8003b6c <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	0018      	movs	r0, r3
 8003b34:	f7ff fd8a 	bl	800364c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	490e      	ldr	r1, [pc, #56]	@ (8003b7c <I2C_IsErrorOccurred+0x1ec>)
 8003b44:	400a      	ands	r2, r1
 8003b46:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2241      	movs	r2, #65	@ 0x41
 8003b58:	2120      	movs	r1, #32
 8003b5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2242      	movs	r2, #66	@ 0x42
 8003b60:	2100      	movs	r1, #0
 8003b62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2240      	movs	r2, #64	@ 0x40
 8003b68:	2100      	movs	r1, #0
 8003b6a:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8003b6c:	2327      	movs	r3, #39	@ 0x27
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	781b      	ldrb	r3, [r3, #0]
}
 8003b72:	0018      	movs	r0, r3
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b00a      	add	sp, #40	@ 0x28
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			@ (mov r8, r8)
 8003b7c:	fe00e800 	.word	0xfe00e800

08003b80 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	0008      	movs	r0, r1
 8003b8a:	0011      	movs	r1, r2
 8003b8c:	607b      	str	r3, [r7, #4]
 8003b8e:	240a      	movs	r4, #10
 8003b90:	193b      	adds	r3, r7, r4
 8003b92:	1c02      	adds	r2, r0, #0
 8003b94:	801a      	strh	r2, [r3, #0]
 8003b96:	2009      	movs	r0, #9
 8003b98:	183b      	adds	r3, r7, r0
 8003b9a:	1c0a      	adds	r2, r1, #0
 8003b9c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b9e:	193b      	adds	r3, r7, r4
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	059b      	lsls	r3, r3, #22
 8003ba4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ba6:	183b      	adds	r3, r7, r0
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	0419      	lsls	r1, r3, #16
 8003bac:	23ff      	movs	r3, #255	@ 0xff
 8003bae:	041b      	lsls	r3, r3, #16
 8003bb0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bb2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bca:	0d51      	lsrs	r1, r2, #21
 8003bcc:	2280      	movs	r2, #128	@ 0x80
 8003bce:	00d2      	lsls	r2, r2, #3
 8003bd0:	400a      	ands	r2, r1
 8003bd2:	4907      	ldr	r1, [pc, #28]	@ (8003bf0 <I2C_TransferConfig+0x70>)
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	43d2      	mvns	r2, r2
 8003bd8:	401a      	ands	r2, r3
 8003bda:	0011      	movs	r1, r2
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003be6:	46c0      	nop			@ (mov r8, r8)
 8003be8:	46bd      	mov	sp, r7
 8003bea:	b007      	add	sp, #28
 8003bec:	bd90      	pop	{r4, r7, pc}
 8003bee:	46c0      	nop			@ (mov r8, r8)
 8003bf0:	03ff63ff 	.word	0x03ff63ff

08003bf4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2241      	movs	r2, #65	@ 0x41
 8003c02:	5c9b      	ldrb	r3, [r3, r2]
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b20      	cmp	r3, #32
 8003c08:	d138      	bne.n	8003c7c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2240      	movs	r2, #64	@ 0x40
 8003c0e:	5c9b      	ldrb	r3, [r3, r2]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d101      	bne.n	8003c18 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c14:	2302      	movs	r3, #2
 8003c16:	e032      	b.n	8003c7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2240      	movs	r2, #64	@ 0x40
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2241      	movs	r2, #65	@ 0x41
 8003c24:	2124      	movs	r1, #36	@ 0x24
 8003c26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2101      	movs	r1, #1
 8003c34:	438a      	bics	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4911      	ldr	r1, [pc, #68]	@ (8003c88 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003c44:	400a      	ands	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6819      	ldr	r1, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2101      	movs	r1, #1
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2241      	movs	r2, #65	@ 0x41
 8003c6c:	2120      	movs	r1, #32
 8003c6e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2240      	movs	r2, #64	@ 0x40
 8003c74:	2100      	movs	r1, #0
 8003c76:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	0018      	movs	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b002      	add	sp, #8
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	ffffefff 	.word	0xffffefff

08003c8c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2241      	movs	r2, #65	@ 0x41
 8003c9a:	5c9b      	ldrb	r3, [r3, r2]
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d139      	bne.n	8003d16 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2240      	movs	r2, #64	@ 0x40
 8003ca6:	5c9b      	ldrb	r3, [r3, r2]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e033      	b.n	8003d18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2240      	movs	r2, #64	@ 0x40
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2241      	movs	r2, #65	@ 0x41
 8003cbc:	2124      	movs	r1, #36	@ 0x24
 8003cbe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2101      	movs	r1, #1
 8003ccc:	438a      	bics	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4a11      	ldr	r2, [pc, #68]	@ (8003d20 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003cdc:	4013      	ands	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2241      	movs	r2, #65	@ 0x41
 8003d06:	2120      	movs	r1, #32
 8003d08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2240      	movs	r2, #64	@ 0x40
 8003d0e:	2100      	movs	r1, #0
 8003d10:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
  }
}
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b004      	add	sp, #16
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	fffff0ff 	.word	0xfffff0ff

08003d24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d24:	b5b0      	push	{r4, r5, r7, lr}
 8003d26:	b08a      	sub	sp, #40	@ 0x28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	f000 fbbf 	bl	80044b6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d38:	4bc9      	ldr	r3, [pc, #804]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	220c      	movs	r2, #12
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d42:	4bc7      	ldr	r3, [pc, #796]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003d44:	68da      	ldr	r2, [r3, #12]
 8003d46:	2380      	movs	r3, #128	@ 0x80
 8003d48:	025b      	lsls	r3, r3, #9
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2201      	movs	r2, #1
 8003d54:	4013      	ands	r3, r2
 8003d56:	d100      	bne.n	8003d5a <HAL_RCC_OscConfig+0x36>
 8003d58:	e07e      	b.n	8003e58 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d007      	beq.n	8003d70 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	2b0c      	cmp	r3, #12
 8003d64:	d112      	bne.n	8003d8c <HAL_RCC_OscConfig+0x68>
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	2380      	movs	r3, #128	@ 0x80
 8003d6a:	025b      	lsls	r3, r3, #9
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d10d      	bne.n	8003d8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d70:	4bbb      	ldr	r3, [pc, #748]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	2380      	movs	r3, #128	@ 0x80
 8003d76:	029b      	lsls	r3, r3, #10
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <HAL_RCC_OscConfig+0x5a>
 8003d7c:	e06b      	b.n	8003e56 <HAL_RCC_OscConfig+0x132>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d167      	bne.n	8003e56 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f000 fb95 	bl	80044b6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	2380      	movs	r3, #128	@ 0x80
 8003d92:	025b      	lsls	r3, r3, #9
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d107      	bne.n	8003da8 <HAL_RCC_OscConfig+0x84>
 8003d98:	4bb1      	ldr	r3, [pc, #708]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4bb0      	ldr	r3, [pc, #704]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003d9e:	2180      	movs	r1, #128	@ 0x80
 8003da0:	0249      	lsls	r1, r1, #9
 8003da2:	430a      	orrs	r2, r1
 8003da4:	601a      	str	r2, [r3, #0]
 8003da6:	e027      	b.n	8003df8 <HAL_RCC_OscConfig+0xd4>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	23a0      	movs	r3, #160	@ 0xa0
 8003dae:	02db      	lsls	r3, r3, #11
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d10e      	bne.n	8003dd2 <HAL_RCC_OscConfig+0xae>
 8003db4:	4baa      	ldr	r3, [pc, #680]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	4ba9      	ldr	r3, [pc, #676]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003dba:	2180      	movs	r1, #128	@ 0x80
 8003dbc:	02c9      	lsls	r1, r1, #11
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	4ba7      	ldr	r3, [pc, #668]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4ba6      	ldr	r3, [pc, #664]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003dc8:	2180      	movs	r1, #128	@ 0x80
 8003dca:	0249      	lsls	r1, r1, #9
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	e012      	b.n	8003df8 <HAL_RCC_OscConfig+0xd4>
 8003dd2:	4ba3      	ldr	r3, [pc, #652]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4ba2      	ldr	r3, [pc, #648]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003dd8:	49a2      	ldr	r1, [pc, #648]	@ (8004064 <HAL_RCC_OscConfig+0x340>)
 8003dda:	400a      	ands	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	4ba0      	ldr	r3, [pc, #640]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	2380      	movs	r3, #128	@ 0x80
 8003de4:	025b      	lsls	r3, r3, #9
 8003de6:	4013      	ands	r3, r2
 8003de8:	60fb      	str	r3, [r7, #12]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4b9c      	ldr	r3, [pc, #624]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	4b9b      	ldr	r3, [pc, #620]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003df2:	499d      	ldr	r1, [pc, #628]	@ (8004068 <HAL_RCC_OscConfig+0x344>)
 8003df4:	400a      	ands	r2, r1
 8003df6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d015      	beq.n	8003e2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fe fb54 	bl	80024ac <HAL_GetTick>
 8003e04:	0003      	movs	r3, r0
 8003e06:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e08:	e009      	b.n	8003e1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e0a:	f7fe fb4f 	bl	80024ac <HAL_GetTick>
 8003e0e:	0002      	movs	r2, r0
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b64      	cmp	r3, #100	@ 0x64
 8003e16:	d902      	bls.n	8003e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	f000 fb4c 	bl	80044b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e1e:	4b90      	ldr	r3, [pc, #576]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	2380      	movs	r3, #128	@ 0x80
 8003e24:	029b      	lsls	r3, r3, #10
 8003e26:	4013      	ands	r3, r2
 8003e28:	d0ef      	beq.n	8003e0a <HAL_RCC_OscConfig+0xe6>
 8003e2a:	e015      	b.n	8003e58 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2c:	f7fe fb3e 	bl	80024ac <HAL_GetTick>
 8003e30:	0003      	movs	r3, r0
 8003e32:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e34:	e008      	b.n	8003e48 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e36:	f7fe fb39 	bl	80024ac <HAL_GetTick>
 8003e3a:	0002      	movs	r2, r0
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	2b64      	cmp	r3, #100	@ 0x64
 8003e42:	d901      	bls.n	8003e48 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e336      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e48:	4b85      	ldr	r3, [pc, #532]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	2380      	movs	r3, #128	@ 0x80
 8003e4e:	029b      	lsls	r3, r3, #10
 8003e50:	4013      	ands	r3, r2
 8003e52:	d1f0      	bne.n	8003e36 <HAL_RCC_OscConfig+0x112>
 8003e54:	e000      	b.n	8003e58 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e56:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	4013      	ands	r3, r2
 8003e60:	d100      	bne.n	8003e64 <HAL_RCC_OscConfig+0x140>
 8003e62:	e099      	b.n	8003f98 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d009      	beq.n	8003e86 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003e72:	4b7b      	ldr	r3, [pc, #492]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4b7a      	ldr	r3, [pc, #488]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003e78:	2120      	movs	r1, #32
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e80:	2220      	movs	r2, #32
 8003e82:	4393      	bics	r3, r2
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d005      	beq.n	8003e98 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	2b0c      	cmp	r3, #12
 8003e90:	d13e      	bne.n	8003f10 <HAL_RCC_OscConfig+0x1ec>
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d13b      	bne.n	8003f10 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003e98:	4b71      	ldr	r3, [pc, #452]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d004      	beq.n	8003eac <HAL_RCC_OscConfig+0x188>
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e304      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eac:	4b6c      	ldr	r3, [pc, #432]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4a6e      	ldr	r2, [pc, #440]	@ (800406c <HAL_RCC_OscConfig+0x348>)
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	0019      	movs	r1, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	021a      	lsls	r2, r3, #8
 8003ebc:	4b68      	ldr	r3, [pc, #416]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003ec2:	4b67      	ldr	r3, [pc, #412]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2209      	movs	r2, #9
 8003ec8:	4393      	bics	r3, r2
 8003eca:	0019      	movs	r1, r3
 8003ecc:	4b64      	ldr	r3, [pc, #400]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ed4:	f000 fc42 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8003ed8:	0001      	movs	r1, r0
 8003eda:	4b61      	ldr	r3, [pc, #388]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	220f      	movs	r2, #15
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	4a62      	ldr	r2, [pc, #392]	@ (8004070 <HAL_RCC_OscConfig+0x34c>)
 8003ee6:	5cd3      	ldrb	r3, [r2, r3]
 8003ee8:	000a      	movs	r2, r1
 8003eea:	40da      	lsrs	r2, r3
 8003eec:	4b61      	ldr	r3, [pc, #388]	@ (8004074 <HAL_RCC_OscConfig+0x350>)
 8003eee:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003ef0:	4b61      	ldr	r3, [pc, #388]	@ (8004078 <HAL_RCC_OscConfig+0x354>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2513      	movs	r5, #19
 8003ef6:	197c      	adds	r4, r7, r5
 8003ef8:	0018      	movs	r0, r3
 8003efa:	f7fe fa91 	bl	8002420 <HAL_InitTick>
 8003efe:	0003      	movs	r3, r0
 8003f00:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003f02:	197b      	adds	r3, r7, r5
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d046      	beq.n	8003f98 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8003f0a:	197b      	adds	r3, r7, r5
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	e2d2      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d027      	beq.n	8003f66 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003f16:	4b52      	ldr	r3, [pc, #328]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2209      	movs	r2, #9
 8003f1c:	4393      	bics	r3, r2
 8003f1e:	0019      	movs	r1, r3
 8003f20:	4b4f      	ldr	r3, [pc, #316]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f28:	f7fe fac0 	bl	80024ac <HAL_GetTick>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f32:	f7fe fabb 	bl	80024ac <HAL_GetTick>
 8003f36:	0002      	movs	r2, r0
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e2b8      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f44:	4b46      	ldr	r3, [pc, #280]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2204      	movs	r2, #4
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	d0f1      	beq.n	8003f32 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f4e:	4b44      	ldr	r3, [pc, #272]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4a46      	ldr	r2, [pc, #280]	@ (800406c <HAL_RCC_OscConfig+0x348>)
 8003f54:	4013      	ands	r3, r2
 8003f56:	0019      	movs	r1, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	021a      	lsls	r2, r3, #8
 8003f5e:	4b40      	ldr	r3, [pc, #256]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003f60:	430a      	orrs	r2, r1
 8003f62:	605a      	str	r2, [r3, #4]
 8003f64:	e018      	b.n	8003f98 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f66:	4b3e      	ldr	r3, [pc, #248]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	438a      	bics	r2, r1
 8003f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f72:	f7fe fa9b 	bl	80024ac <HAL_GetTick>
 8003f76:	0003      	movs	r3, r0
 8003f78:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f7c:	f7fe fa96 	bl	80024ac <HAL_GetTick>
 8003f80:	0002      	movs	r2, r0
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e293      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f8e:	4b34      	ldr	r3, [pc, #208]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2204      	movs	r2, #4
 8003f94:	4013      	ands	r3, r2
 8003f96:	d1f1      	bne.n	8003f7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2210      	movs	r2, #16
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d100      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x280>
 8003fa2:	e0a2      	b.n	80040ea <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d140      	bne.n	800402c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003faa:	4b2d      	ldr	r3, [pc, #180]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	2380      	movs	r3, #128	@ 0x80
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	d005      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x29e>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e279      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fc2:	4b27      	ldr	r3, [pc, #156]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	4a2d      	ldr	r2, [pc, #180]	@ (800407c <HAL_RCC_OscConfig+0x358>)
 8003fc8:	4013      	ands	r3, r2
 8003fca:	0019      	movs	r1, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fd0:	4b23      	ldr	r3, [pc, #140]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fd6:	4b22      	ldr	r3, [pc, #136]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	0a19      	lsrs	r1, r3, #8
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	061a      	lsls	r2, r3, #24
 8003fe4:	4b1e      	ldr	r3, [pc, #120]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fee:	0b5b      	lsrs	r3, r3, #13
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	2280      	movs	r2, #128	@ 0x80
 8003ff4:	0212      	lsls	r2, r2, #8
 8003ff6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003ff8:	4b19      	ldr	r3, [pc, #100]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	210f      	movs	r1, #15
 8004000:	400b      	ands	r3, r1
 8004002:	491b      	ldr	r1, [pc, #108]	@ (8004070 <HAL_RCC_OscConfig+0x34c>)
 8004004:	5ccb      	ldrb	r3, [r1, r3]
 8004006:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004008:	4b1a      	ldr	r3, [pc, #104]	@ (8004074 <HAL_RCC_OscConfig+0x350>)
 800400a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800400c:	4b1a      	ldr	r3, [pc, #104]	@ (8004078 <HAL_RCC_OscConfig+0x354>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2513      	movs	r5, #19
 8004012:	197c      	adds	r4, r7, r5
 8004014:	0018      	movs	r0, r3
 8004016:	f7fe fa03 	bl	8002420 <HAL_InitTick>
 800401a:	0003      	movs	r3, r0
 800401c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800401e:	197b      	adds	r3, r7, r5
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d061      	beq.n	80040ea <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8004026:	197b      	adds	r3, r7, r5
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	e244      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d040      	beq.n	80040b6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004034:	4b0a      	ldr	r3, [pc, #40]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <HAL_RCC_OscConfig+0x33c>)
 800403a:	2180      	movs	r1, #128	@ 0x80
 800403c:	0049      	lsls	r1, r1, #1
 800403e:	430a      	orrs	r2, r1
 8004040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004042:	f7fe fa33 	bl	80024ac <HAL_GetTick>
 8004046:	0003      	movs	r3, r0
 8004048:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800404a:	e019      	b.n	8004080 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800404c:	f7fe fa2e 	bl	80024ac <HAL_GetTick>
 8004050:	0002      	movs	r2, r0
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	2b02      	cmp	r3, #2
 8004058:	d912      	bls.n	8004080 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800405a:	2303      	movs	r3, #3
 800405c:	e22b      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	40021000 	.word	0x40021000
 8004064:	fffeffff 	.word	0xfffeffff
 8004068:	fffbffff 	.word	0xfffbffff
 800406c:	ffffe0ff 	.word	0xffffe0ff
 8004070:	080093dc 	.word	0x080093dc
 8004074:	20000004 	.word	0x20000004
 8004078:	20000008 	.word	0x20000008
 800407c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004080:	4bca      	ldr	r3, [pc, #808]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	2380      	movs	r3, #128	@ 0x80
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4013      	ands	r3, r2
 800408a:	d0df      	beq.n	800404c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800408c:	4bc7      	ldr	r3, [pc, #796]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	4ac7      	ldr	r2, [pc, #796]	@ (80043b0 <HAL_RCC_OscConfig+0x68c>)
 8004092:	4013      	ands	r3, r2
 8004094:	0019      	movs	r1, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800409a:	4bc4      	ldr	r3, [pc, #784]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 800409c:	430a      	orrs	r2, r1
 800409e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040a0:	4bc2      	ldr	r3, [pc, #776]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	0a19      	lsrs	r1, r3, #8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a1b      	ldr	r3, [r3, #32]
 80040ac:	061a      	lsls	r2, r3, #24
 80040ae:	4bbf      	ldr	r3, [pc, #764]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
 80040b4:	e019      	b.n	80040ea <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040b6:	4bbd      	ldr	r3, [pc, #756]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4bbc      	ldr	r3, [pc, #752]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80040bc:	49bd      	ldr	r1, [pc, #756]	@ (80043b4 <HAL_RCC_OscConfig+0x690>)
 80040be:	400a      	ands	r2, r1
 80040c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c2:	f7fe f9f3 	bl	80024ac <HAL_GetTick>
 80040c6:	0003      	movs	r3, r0
 80040c8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040cc:	f7fe f9ee 	bl	80024ac <HAL_GetTick>
 80040d0:	0002      	movs	r2, r0
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e1eb      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80040de:	4bb3      	ldr	r3, [pc, #716]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	2380      	movs	r3, #128	@ 0x80
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4013      	ands	r3, r2
 80040e8:	d1f0      	bne.n	80040cc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2208      	movs	r2, #8
 80040f0:	4013      	ands	r3, r2
 80040f2:	d036      	beq.n	8004162 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d019      	beq.n	8004130 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fc:	4bab      	ldr	r3, [pc, #684]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80040fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004100:	4baa      	ldr	r3, [pc, #680]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004102:	2101      	movs	r1, #1
 8004104:	430a      	orrs	r2, r1
 8004106:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004108:	f7fe f9d0 	bl	80024ac <HAL_GetTick>
 800410c:	0003      	movs	r3, r0
 800410e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004112:	f7fe f9cb 	bl	80024ac <HAL_GetTick>
 8004116:	0002      	movs	r2, r0
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e1c8      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004124:	4ba1      	ldr	r3, [pc, #644]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004128:	2202      	movs	r2, #2
 800412a:	4013      	ands	r3, r2
 800412c:	d0f1      	beq.n	8004112 <HAL_RCC_OscConfig+0x3ee>
 800412e:	e018      	b.n	8004162 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004130:	4b9e      	ldr	r3, [pc, #632]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004132:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004134:	4b9d      	ldr	r3, [pc, #628]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004136:	2101      	movs	r1, #1
 8004138:	438a      	bics	r2, r1
 800413a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800413c:	f7fe f9b6 	bl	80024ac <HAL_GetTick>
 8004140:	0003      	movs	r3, r0
 8004142:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004146:	f7fe f9b1 	bl	80024ac <HAL_GetTick>
 800414a:	0002      	movs	r2, r0
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e1ae      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004158:	4b94      	ldr	r3, [pc, #592]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 800415a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800415c:	2202      	movs	r2, #2
 800415e:	4013      	ands	r3, r2
 8004160:	d1f1      	bne.n	8004146 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2204      	movs	r2, #4
 8004168:	4013      	ands	r3, r2
 800416a:	d100      	bne.n	800416e <HAL_RCC_OscConfig+0x44a>
 800416c:	e0ae      	b.n	80042cc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800416e:	2023      	movs	r0, #35	@ 0x23
 8004170:	183b      	adds	r3, r7, r0
 8004172:	2200      	movs	r2, #0
 8004174:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004176:	4b8d      	ldr	r3, [pc, #564]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800417a:	2380      	movs	r3, #128	@ 0x80
 800417c:	055b      	lsls	r3, r3, #21
 800417e:	4013      	ands	r3, r2
 8004180:	d109      	bne.n	8004196 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004182:	4b8a      	ldr	r3, [pc, #552]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004184:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004186:	4b89      	ldr	r3, [pc, #548]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004188:	2180      	movs	r1, #128	@ 0x80
 800418a:	0549      	lsls	r1, r1, #21
 800418c:	430a      	orrs	r2, r1
 800418e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004190:	183b      	adds	r3, r7, r0
 8004192:	2201      	movs	r2, #1
 8004194:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004196:	4b88      	ldr	r3, [pc, #544]	@ (80043b8 <HAL_RCC_OscConfig+0x694>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	2380      	movs	r3, #128	@ 0x80
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	4013      	ands	r3, r2
 80041a0:	d11a      	bne.n	80041d8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041a2:	4b85      	ldr	r3, [pc, #532]	@ (80043b8 <HAL_RCC_OscConfig+0x694>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	4b84      	ldr	r3, [pc, #528]	@ (80043b8 <HAL_RCC_OscConfig+0x694>)
 80041a8:	2180      	movs	r1, #128	@ 0x80
 80041aa:	0049      	lsls	r1, r1, #1
 80041ac:	430a      	orrs	r2, r1
 80041ae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041b0:	f7fe f97c 	bl	80024ac <HAL_GetTick>
 80041b4:	0003      	movs	r3, r0
 80041b6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ba:	f7fe f977 	bl	80024ac <HAL_GetTick>
 80041be:	0002      	movs	r2, r0
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b64      	cmp	r3, #100	@ 0x64
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e174      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041cc:	4b7a      	ldr	r3, [pc, #488]	@ (80043b8 <HAL_RCC_OscConfig+0x694>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	2380      	movs	r3, #128	@ 0x80
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	4013      	ands	r3, r2
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689a      	ldr	r2, [r3, #8]
 80041dc:	2380      	movs	r3, #128	@ 0x80
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d107      	bne.n	80041f4 <HAL_RCC_OscConfig+0x4d0>
 80041e4:	4b71      	ldr	r3, [pc, #452]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80041e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80041e8:	4b70      	ldr	r3, [pc, #448]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80041ea:	2180      	movs	r1, #128	@ 0x80
 80041ec:	0049      	lsls	r1, r1, #1
 80041ee:	430a      	orrs	r2, r1
 80041f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80041f2:	e031      	b.n	8004258 <HAL_RCC_OscConfig+0x534>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d10c      	bne.n	8004216 <HAL_RCC_OscConfig+0x4f2>
 80041fc:	4b6b      	ldr	r3, [pc, #428]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80041fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004200:	4b6a      	ldr	r3, [pc, #424]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004202:	496c      	ldr	r1, [pc, #432]	@ (80043b4 <HAL_RCC_OscConfig+0x690>)
 8004204:	400a      	ands	r2, r1
 8004206:	651a      	str	r2, [r3, #80]	@ 0x50
 8004208:	4b68      	ldr	r3, [pc, #416]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 800420a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800420c:	4b67      	ldr	r3, [pc, #412]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 800420e:	496b      	ldr	r1, [pc, #428]	@ (80043bc <HAL_RCC_OscConfig+0x698>)
 8004210:	400a      	ands	r2, r1
 8004212:	651a      	str	r2, [r3, #80]	@ 0x50
 8004214:	e020      	b.n	8004258 <HAL_RCC_OscConfig+0x534>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	23a0      	movs	r3, #160	@ 0xa0
 800421c:	00db      	lsls	r3, r3, #3
 800421e:	429a      	cmp	r2, r3
 8004220:	d10e      	bne.n	8004240 <HAL_RCC_OscConfig+0x51c>
 8004222:	4b62      	ldr	r3, [pc, #392]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004224:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004226:	4b61      	ldr	r3, [pc, #388]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004228:	2180      	movs	r1, #128	@ 0x80
 800422a:	00c9      	lsls	r1, r1, #3
 800422c:	430a      	orrs	r2, r1
 800422e:	651a      	str	r2, [r3, #80]	@ 0x50
 8004230:	4b5e      	ldr	r3, [pc, #376]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004232:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004234:	4b5d      	ldr	r3, [pc, #372]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004236:	2180      	movs	r1, #128	@ 0x80
 8004238:	0049      	lsls	r1, r1, #1
 800423a:	430a      	orrs	r2, r1
 800423c:	651a      	str	r2, [r3, #80]	@ 0x50
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0x534>
 8004240:	4b5a      	ldr	r3, [pc, #360]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004242:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004244:	4b59      	ldr	r3, [pc, #356]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004246:	495b      	ldr	r1, [pc, #364]	@ (80043b4 <HAL_RCC_OscConfig+0x690>)
 8004248:	400a      	ands	r2, r1
 800424a:	651a      	str	r2, [r3, #80]	@ 0x50
 800424c:	4b57      	ldr	r3, [pc, #348]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 800424e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004250:	4b56      	ldr	r3, [pc, #344]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004252:	495a      	ldr	r1, [pc, #360]	@ (80043bc <HAL_RCC_OscConfig+0x698>)
 8004254:	400a      	ands	r2, r1
 8004256:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d015      	beq.n	800428c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004260:	f7fe f924 	bl	80024ac <HAL_GetTick>
 8004264:	0003      	movs	r3, r0
 8004266:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004268:	e009      	b.n	800427e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426a:	f7fe f91f 	bl	80024ac <HAL_GetTick>
 800426e:	0002      	movs	r2, r0
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	4a52      	ldr	r2, [pc, #328]	@ (80043c0 <HAL_RCC_OscConfig+0x69c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e11b      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800427e:	4b4b      	ldr	r3, [pc, #300]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004280:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004282:	2380      	movs	r3, #128	@ 0x80
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4013      	ands	r3, r2
 8004288:	d0ef      	beq.n	800426a <HAL_RCC_OscConfig+0x546>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428c:	f7fe f90e 	bl	80024ac <HAL_GetTick>
 8004290:	0003      	movs	r3, r0
 8004292:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004294:	e009      	b.n	80042aa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004296:	f7fe f909 	bl	80024ac <HAL_GetTick>
 800429a:	0002      	movs	r2, r0
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	4a47      	ldr	r2, [pc, #284]	@ (80043c0 <HAL_RCC_OscConfig+0x69c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e105      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042aa:	4b40      	ldr	r3, [pc, #256]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80042ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042ae:	2380      	movs	r3, #128	@ 0x80
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	4013      	ands	r3, r2
 80042b4:	d1ef      	bne.n	8004296 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042b6:	2323      	movs	r3, #35	@ 0x23
 80042b8:	18fb      	adds	r3, r7, r3
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d105      	bne.n	80042cc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042c0:	4b3a      	ldr	r3, [pc, #232]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80042c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80042c4:	4b39      	ldr	r3, [pc, #228]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80042c6:	493f      	ldr	r1, [pc, #252]	@ (80043c4 <HAL_RCC_OscConfig+0x6a0>)
 80042c8:	400a      	ands	r2, r1
 80042ca:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2220      	movs	r2, #32
 80042d2:	4013      	ands	r3, r2
 80042d4:	d049      	beq.n	800436a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d026      	beq.n	800432c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80042de:	4b33      	ldr	r3, [pc, #204]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	4b32      	ldr	r3, [pc, #200]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80042e4:	2101      	movs	r1, #1
 80042e6:	430a      	orrs	r2, r1
 80042e8:	609a      	str	r2, [r3, #8]
 80042ea:	4b30      	ldr	r3, [pc, #192]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80042ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042ee:	4b2f      	ldr	r3, [pc, #188]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 80042f0:	2101      	movs	r1, #1
 80042f2:	430a      	orrs	r2, r1
 80042f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80042f6:	4b34      	ldr	r3, [pc, #208]	@ (80043c8 <HAL_RCC_OscConfig+0x6a4>)
 80042f8:	6a1a      	ldr	r2, [r3, #32]
 80042fa:	4b33      	ldr	r3, [pc, #204]	@ (80043c8 <HAL_RCC_OscConfig+0x6a4>)
 80042fc:	2180      	movs	r1, #128	@ 0x80
 80042fe:	0189      	lsls	r1, r1, #6
 8004300:	430a      	orrs	r2, r1
 8004302:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004304:	f7fe f8d2 	bl	80024ac <HAL_GetTick>
 8004308:	0003      	movs	r3, r0
 800430a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800430e:	f7fe f8cd 	bl	80024ac <HAL_GetTick>
 8004312:	0002      	movs	r2, r0
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e0ca      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004320:	4b22      	ldr	r3, [pc, #136]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2202      	movs	r2, #2
 8004326:	4013      	ands	r3, r2
 8004328:	d0f1      	beq.n	800430e <HAL_RCC_OscConfig+0x5ea>
 800432a:	e01e      	b.n	800436a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800432c:	4b1f      	ldr	r3, [pc, #124]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	4b1e      	ldr	r3, [pc, #120]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004332:	2101      	movs	r1, #1
 8004334:	438a      	bics	r2, r1
 8004336:	609a      	str	r2, [r3, #8]
 8004338:	4b23      	ldr	r3, [pc, #140]	@ (80043c8 <HAL_RCC_OscConfig+0x6a4>)
 800433a:	6a1a      	ldr	r2, [r3, #32]
 800433c:	4b22      	ldr	r3, [pc, #136]	@ (80043c8 <HAL_RCC_OscConfig+0x6a4>)
 800433e:	4923      	ldr	r1, [pc, #140]	@ (80043cc <HAL_RCC_OscConfig+0x6a8>)
 8004340:	400a      	ands	r2, r1
 8004342:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004344:	f7fe f8b2 	bl	80024ac <HAL_GetTick>
 8004348:	0003      	movs	r3, r0
 800434a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800434e:	f7fe f8ad 	bl	80024ac <HAL_GetTick>
 8004352:	0002      	movs	r2, r0
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e0aa      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004360:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2202      	movs	r2, #2
 8004366:	4013      	ands	r3, r2
 8004368:	d1f1      	bne.n	800434e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436e:	2b00      	cmp	r3, #0
 8004370:	d100      	bne.n	8004374 <HAL_RCC_OscConfig+0x650>
 8004372:	e09f      	b.n	80044b4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	2b0c      	cmp	r3, #12
 8004378:	d100      	bne.n	800437c <HAL_RCC_OscConfig+0x658>
 800437a:	e078      	b.n	800446e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004380:	2b02      	cmp	r3, #2
 8004382:	d159      	bne.n	8004438 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004384:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	4b08      	ldr	r3, [pc, #32]	@ (80043ac <HAL_RCC_OscConfig+0x688>)
 800438a:	4911      	ldr	r1, [pc, #68]	@ (80043d0 <HAL_RCC_OscConfig+0x6ac>)
 800438c:	400a      	ands	r2, r1
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fe f88c 	bl	80024ac <HAL_GetTick>
 8004394:	0003      	movs	r3, r0
 8004396:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004398:	e01c      	b.n	80043d4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800439a:	f7fe f887 	bl	80024ac <HAL_GetTick>
 800439e:	0002      	movs	r2, r0
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d915      	bls.n	80043d4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80043a8:	2303      	movs	r3, #3
 80043aa:	e084      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
 80043ac:	40021000 	.word	0x40021000
 80043b0:	ffff1fff 	.word	0xffff1fff
 80043b4:	fffffeff 	.word	0xfffffeff
 80043b8:	40007000 	.word	0x40007000
 80043bc:	fffffbff 	.word	0xfffffbff
 80043c0:	00001388 	.word	0x00001388
 80043c4:	efffffff 	.word	0xefffffff
 80043c8:	40010000 	.word	0x40010000
 80043cc:	ffffdfff 	.word	0xffffdfff
 80043d0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80043d4:	4b3a      	ldr	r3, [pc, #232]	@ (80044c0 <HAL_RCC_OscConfig+0x79c>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	2380      	movs	r3, #128	@ 0x80
 80043da:	049b      	lsls	r3, r3, #18
 80043dc:	4013      	ands	r3, r2
 80043de:	d1dc      	bne.n	800439a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e0:	4b37      	ldr	r3, [pc, #220]	@ (80044c0 <HAL_RCC_OscConfig+0x79c>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4a37      	ldr	r2, [pc, #220]	@ (80044c4 <HAL_RCC_OscConfig+0x7a0>)
 80043e6:	4013      	ands	r3, r2
 80043e8:	0019      	movs	r1, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f2:	431a      	orrs	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043f8:	431a      	orrs	r2, r3
 80043fa:	4b31      	ldr	r3, [pc, #196]	@ (80044c0 <HAL_RCC_OscConfig+0x79c>)
 80043fc:	430a      	orrs	r2, r1
 80043fe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004400:	4b2f      	ldr	r3, [pc, #188]	@ (80044c0 <HAL_RCC_OscConfig+0x79c>)
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	4b2e      	ldr	r3, [pc, #184]	@ (80044c0 <HAL_RCC_OscConfig+0x79c>)
 8004406:	2180      	movs	r1, #128	@ 0x80
 8004408:	0449      	lsls	r1, r1, #17
 800440a:	430a      	orrs	r2, r1
 800440c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440e:	f7fe f84d 	bl	80024ac <HAL_GetTick>
 8004412:	0003      	movs	r3, r0
 8004414:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004418:	f7fe f848 	bl	80024ac <HAL_GetTick>
 800441c:	0002      	movs	r2, r0
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e045      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800442a:	4b25      	ldr	r3, [pc, #148]	@ (80044c0 <HAL_RCC_OscConfig+0x79c>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	2380      	movs	r3, #128	@ 0x80
 8004430:	049b      	lsls	r3, r3, #18
 8004432:	4013      	ands	r3, r2
 8004434:	d0f0      	beq.n	8004418 <HAL_RCC_OscConfig+0x6f4>
 8004436:	e03d      	b.n	80044b4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004438:	4b21      	ldr	r3, [pc, #132]	@ (80044c0 <HAL_RCC_OscConfig+0x79c>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b20      	ldr	r3, [pc, #128]	@ (80044c0 <HAL_RCC_OscConfig+0x79c>)
 800443e:	4922      	ldr	r1, [pc, #136]	@ (80044c8 <HAL_RCC_OscConfig+0x7a4>)
 8004440:	400a      	ands	r2, r1
 8004442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004444:	f7fe f832 	bl	80024ac <HAL_GetTick>
 8004448:	0003      	movs	r3, r0
 800444a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800444e:	f7fe f82d 	bl	80024ac <HAL_GetTick>
 8004452:	0002      	movs	r2, r0
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e02a      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004460:	4b17      	ldr	r3, [pc, #92]	@ (80044c0 <HAL_RCC_OscConfig+0x79c>)
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	2380      	movs	r3, #128	@ 0x80
 8004466:	049b      	lsls	r3, r3, #18
 8004468:	4013      	ands	r3, r2
 800446a:	d1f0      	bne.n	800444e <HAL_RCC_OscConfig+0x72a>
 800446c:	e022      	b.n	80044b4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e01d      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800447a:	4b11      	ldr	r3, [pc, #68]	@ (80044c0 <HAL_RCC_OscConfig+0x79c>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	2380      	movs	r3, #128	@ 0x80
 8004484:	025b      	lsls	r3, r3, #9
 8004486:	401a      	ands	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	429a      	cmp	r2, r3
 800448e:	d10f      	bne.n	80044b0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	23f0      	movs	r3, #240	@ 0xf0
 8004494:	039b      	lsls	r3, r3, #14
 8004496:	401a      	ands	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d107      	bne.n	80044b0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	23c0      	movs	r3, #192	@ 0xc0
 80044a4:	041b      	lsls	r3, r3, #16
 80044a6:	401a      	ands	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	0018      	movs	r0, r3
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b00a      	add	sp, #40	@ 0x28
 80044bc:	bdb0      	pop	{r4, r5, r7, pc}
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	40021000 	.word	0x40021000
 80044c4:	ff02ffff 	.word	0xff02ffff
 80044c8:	feffffff 	.word	0xfeffffff

080044cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044cc:	b5b0      	push	{r4, r5, r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e128      	b.n	8004732 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044e0:	4b96      	ldr	r3, [pc, #600]	@ (800473c <HAL_RCC_ClockConfig+0x270>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2201      	movs	r2, #1
 80044e6:	4013      	ands	r3, r2
 80044e8:	683a      	ldr	r2, [r7, #0]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d91e      	bls.n	800452c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ee:	4b93      	ldr	r3, [pc, #588]	@ (800473c <HAL_RCC_ClockConfig+0x270>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2201      	movs	r2, #1
 80044f4:	4393      	bics	r3, r2
 80044f6:	0019      	movs	r1, r3
 80044f8:	4b90      	ldr	r3, [pc, #576]	@ (800473c <HAL_RCC_ClockConfig+0x270>)
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	430a      	orrs	r2, r1
 80044fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004500:	f7fd ffd4 	bl	80024ac <HAL_GetTick>
 8004504:	0003      	movs	r3, r0
 8004506:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004508:	e009      	b.n	800451e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800450a:	f7fd ffcf 	bl	80024ac <HAL_GetTick>
 800450e:	0002      	movs	r2, r0
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	4a8a      	ldr	r2, [pc, #552]	@ (8004740 <HAL_RCC_ClockConfig+0x274>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e109      	b.n	8004732 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800451e:	4b87      	ldr	r3, [pc, #540]	@ (800473c <HAL_RCC_ClockConfig+0x270>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2201      	movs	r2, #1
 8004524:	4013      	ands	r3, r2
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	429a      	cmp	r2, r3
 800452a:	d1ee      	bne.n	800450a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2202      	movs	r2, #2
 8004532:	4013      	ands	r3, r2
 8004534:	d009      	beq.n	800454a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004536:	4b83      	ldr	r3, [pc, #524]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	22f0      	movs	r2, #240	@ 0xf0
 800453c:	4393      	bics	r3, r2
 800453e:	0019      	movs	r1, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	4b7f      	ldr	r3, [pc, #508]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 8004546:	430a      	orrs	r2, r1
 8004548:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2201      	movs	r2, #1
 8004550:	4013      	ands	r3, r2
 8004552:	d100      	bne.n	8004556 <HAL_RCC_ClockConfig+0x8a>
 8004554:	e089      	b.n	800466a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d107      	bne.n	800456e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800455e:	4b79      	ldr	r3, [pc, #484]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	2380      	movs	r3, #128	@ 0x80
 8004564:	029b      	lsls	r3, r3, #10
 8004566:	4013      	ands	r3, r2
 8004568:	d120      	bne.n	80045ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e0e1      	b.n	8004732 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b03      	cmp	r3, #3
 8004574:	d107      	bne.n	8004586 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004576:	4b73      	ldr	r3, [pc, #460]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	2380      	movs	r3, #128	@ 0x80
 800457c:	049b      	lsls	r3, r3, #18
 800457e:	4013      	ands	r3, r2
 8004580:	d114      	bne.n	80045ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e0d5      	b.n	8004732 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d106      	bne.n	800459c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800458e:	4b6d      	ldr	r3, [pc, #436]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2204      	movs	r2, #4
 8004594:	4013      	ands	r3, r2
 8004596:	d109      	bne.n	80045ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0ca      	b.n	8004732 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800459c:	4b69      	ldr	r3, [pc, #420]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	2380      	movs	r3, #128	@ 0x80
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4013      	ands	r3, r2
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0c2      	b.n	8004732 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ac:	4b65      	ldr	r3, [pc, #404]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	2203      	movs	r2, #3
 80045b2:	4393      	bics	r3, r2
 80045b4:	0019      	movs	r1, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685a      	ldr	r2, [r3, #4]
 80045ba:	4b62      	ldr	r3, [pc, #392]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 80045bc:	430a      	orrs	r2, r1
 80045be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045c0:	f7fd ff74 	bl	80024ac <HAL_GetTick>
 80045c4:	0003      	movs	r3, r0
 80045c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d111      	bne.n	80045f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045d0:	e009      	b.n	80045e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d2:	f7fd ff6b 	bl	80024ac <HAL_GetTick>
 80045d6:	0002      	movs	r2, r0
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	4a58      	ldr	r2, [pc, #352]	@ (8004740 <HAL_RCC_ClockConfig+0x274>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d901      	bls.n	80045e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e0a5      	b.n	8004732 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80045e6:	4b57      	ldr	r3, [pc, #348]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	220c      	movs	r2, #12
 80045ec:	4013      	ands	r3, r2
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d1ef      	bne.n	80045d2 <HAL_RCC_ClockConfig+0x106>
 80045f2:	e03a      	b.n	800466a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d111      	bne.n	8004620 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045fc:	e009      	b.n	8004612 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045fe:	f7fd ff55 	bl	80024ac <HAL_GetTick>
 8004602:	0002      	movs	r2, r0
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	4a4d      	ldr	r2, [pc, #308]	@ (8004740 <HAL_RCC_ClockConfig+0x274>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e08f      	b.n	8004732 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004612:	4b4c      	ldr	r3, [pc, #304]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	220c      	movs	r2, #12
 8004618:	4013      	ands	r3, r2
 800461a:	2b0c      	cmp	r3, #12
 800461c:	d1ef      	bne.n	80045fe <HAL_RCC_ClockConfig+0x132>
 800461e:	e024      	b.n	800466a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d11b      	bne.n	8004660 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004628:	e009      	b.n	800463e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800462a:	f7fd ff3f 	bl	80024ac <HAL_GetTick>
 800462e:	0002      	movs	r2, r0
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	4a42      	ldr	r2, [pc, #264]	@ (8004740 <HAL_RCC_ClockConfig+0x274>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d901      	bls.n	800463e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e079      	b.n	8004732 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800463e:	4b41      	ldr	r3, [pc, #260]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	220c      	movs	r2, #12
 8004644:	4013      	ands	r3, r2
 8004646:	2b04      	cmp	r3, #4
 8004648:	d1ef      	bne.n	800462a <HAL_RCC_ClockConfig+0x15e>
 800464a:	e00e      	b.n	800466a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800464c:	f7fd ff2e 	bl	80024ac <HAL_GetTick>
 8004650:	0002      	movs	r2, r0
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	4a3a      	ldr	r2, [pc, #232]	@ (8004740 <HAL_RCC_ClockConfig+0x274>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e068      	b.n	8004732 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004660:	4b38      	ldr	r3, [pc, #224]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	220c      	movs	r2, #12
 8004666:	4013      	ands	r3, r2
 8004668:	d1f0      	bne.n	800464c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800466a:	4b34      	ldr	r3, [pc, #208]	@ (800473c <HAL_RCC_ClockConfig+0x270>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2201      	movs	r2, #1
 8004670:	4013      	ands	r3, r2
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	429a      	cmp	r2, r3
 8004676:	d21e      	bcs.n	80046b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004678:	4b30      	ldr	r3, [pc, #192]	@ (800473c <HAL_RCC_ClockConfig+0x270>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2201      	movs	r2, #1
 800467e:	4393      	bics	r3, r2
 8004680:	0019      	movs	r1, r3
 8004682:	4b2e      	ldr	r3, [pc, #184]	@ (800473c <HAL_RCC_ClockConfig+0x270>)
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800468a:	f7fd ff0f 	bl	80024ac <HAL_GetTick>
 800468e:	0003      	movs	r3, r0
 8004690:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004692:	e009      	b.n	80046a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004694:	f7fd ff0a 	bl	80024ac <HAL_GetTick>
 8004698:	0002      	movs	r2, r0
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	4a28      	ldr	r2, [pc, #160]	@ (8004740 <HAL_RCC_ClockConfig+0x274>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e044      	b.n	8004732 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a8:	4b24      	ldr	r3, [pc, #144]	@ (800473c <HAL_RCC_ClockConfig+0x270>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2201      	movs	r2, #1
 80046ae:	4013      	ands	r3, r2
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d1ee      	bne.n	8004694 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2204      	movs	r2, #4
 80046bc:	4013      	ands	r3, r2
 80046be:	d009      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c0:	4b20      	ldr	r3, [pc, #128]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	4a20      	ldr	r2, [pc, #128]	@ (8004748 <HAL_RCC_ClockConfig+0x27c>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	0019      	movs	r1, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 80046d0:	430a      	orrs	r2, r1
 80046d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2208      	movs	r2, #8
 80046da:	4013      	ands	r3, r2
 80046dc:	d00a      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80046de:	4b19      	ldr	r3, [pc, #100]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	4a1a      	ldr	r2, [pc, #104]	@ (800474c <HAL_RCC_ClockConfig+0x280>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	0019      	movs	r1, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	00da      	lsls	r2, r3, #3
 80046ee:	4b15      	ldr	r3, [pc, #84]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 80046f0:	430a      	orrs	r2, r1
 80046f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046f4:	f000 f832 	bl	800475c <HAL_RCC_GetSysClockFreq>
 80046f8:	0001      	movs	r1, r0
 80046fa:	4b12      	ldr	r3, [pc, #72]	@ (8004744 <HAL_RCC_ClockConfig+0x278>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	091b      	lsrs	r3, r3, #4
 8004700:	220f      	movs	r2, #15
 8004702:	4013      	ands	r3, r2
 8004704:	4a12      	ldr	r2, [pc, #72]	@ (8004750 <HAL_RCC_ClockConfig+0x284>)
 8004706:	5cd3      	ldrb	r3, [r2, r3]
 8004708:	000a      	movs	r2, r1
 800470a:	40da      	lsrs	r2, r3
 800470c:	4b11      	ldr	r3, [pc, #68]	@ (8004754 <HAL_RCC_ClockConfig+0x288>)
 800470e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004710:	4b11      	ldr	r3, [pc, #68]	@ (8004758 <HAL_RCC_ClockConfig+0x28c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	250b      	movs	r5, #11
 8004716:	197c      	adds	r4, r7, r5
 8004718:	0018      	movs	r0, r3
 800471a:	f7fd fe81 	bl	8002420 <HAL_InitTick>
 800471e:	0003      	movs	r3, r0
 8004720:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004722:	197b      	adds	r3, r7, r5
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800472a:	197b      	adds	r3, r7, r5
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	e000      	b.n	8004732 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	0018      	movs	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	b004      	add	sp, #16
 8004738:	bdb0      	pop	{r4, r5, r7, pc}
 800473a:	46c0      	nop			@ (mov r8, r8)
 800473c:	40022000 	.word	0x40022000
 8004740:	00001388 	.word	0x00001388
 8004744:	40021000 	.word	0x40021000
 8004748:	fffff8ff 	.word	0xfffff8ff
 800474c:	ffffc7ff 	.word	0xffffc7ff
 8004750:	080093dc 	.word	0x080093dc
 8004754:	20000004 	.word	0x20000004
 8004758:	20000008 	.word	0x20000008

0800475c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004762:	4b3c      	ldr	r3, [pc, #240]	@ (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	220c      	movs	r2, #12
 800476c:	4013      	ands	r3, r2
 800476e:	2b0c      	cmp	r3, #12
 8004770:	d013      	beq.n	800479a <HAL_RCC_GetSysClockFreq+0x3e>
 8004772:	d85c      	bhi.n	800482e <HAL_RCC_GetSysClockFreq+0xd2>
 8004774:	2b04      	cmp	r3, #4
 8004776:	d002      	beq.n	800477e <HAL_RCC_GetSysClockFreq+0x22>
 8004778:	2b08      	cmp	r3, #8
 800477a:	d00b      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0x38>
 800477c:	e057      	b.n	800482e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800477e:	4b35      	ldr	r3, [pc, #212]	@ (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2210      	movs	r2, #16
 8004784:	4013      	ands	r3, r2
 8004786:	d002      	beq.n	800478e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004788:	4b33      	ldr	r3, [pc, #204]	@ (8004858 <HAL_RCC_GetSysClockFreq+0xfc>)
 800478a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800478c:	e05d      	b.n	800484a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800478e:	4b33      	ldr	r3, [pc, #204]	@ (800485c <HAL_RCC_GetSysClockFreq+0x100>)
 8004790:	613b      	str	r3, [r7, #16]
      break;
 8004792:	e05a      	b.n	800484a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004794:	4b32      	ldr	r3, [pc, #200]	@ (8004860 <HAL_RCC_GetSysClockFreq+0x104>)
 8004796:	613b      	str	r3, [r7, #16]
      break;
 8004798:	e057      	b.n	800484a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	0c9b      	lsrs	r3, r3, #18
 800479e:	220f      	movs	r2, #15
 80047a0:	4013      	ands	r3, r2
 80047a2:	4a30      	ldr	r2, [pc, #192]	@ (8004864 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a4:	5cd3      	ldrb	r3, [r2, r3]
 80047a6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	0d9b      	lsrs	r3, r3, #22
 80047ac:	2203      	movs	r2, #3
 80047ae:	4013      	ands	r3, r2
 80047b0:	3301      	adds	r3, #1
 80047b2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047b4:	4b27      	ldr	r3, [pc, #156]	@ (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	2380      	movs	r3, #128	@ 0x80
 80047ba:	025b      	lsls	r3, r3, #9
 80047bc:	4013      	ands	r3, r2
 80047be:	d00f      	beq.n	80047e0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	000a      	movs	r2, r1
 80047c4:	0152      	lsls	r2, r2, #5
 80047c6:	1a52      	subs	r2, r2, r1
 80047c8:	0193      	lsls	r3, r2, #6
 80047ca:	1a9b      	subs	r3, r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	185b      	adds	r3, r3, r1
 80047d0:	025b      	lsls	r3, r3, #9
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	0018      	movs	r0, r3
 80047d6:	f7fb fca9 	bl	800012c <__udivsi3>
 80047da:	0003      	movs	r3, r0
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e023      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80047e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2210      	movs	r2, #16
 80047e6:	4013      	ands	r3, r2
 80047e8:	d00f      	beq.n	800480a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80047ea:	68b9      	ldr	r1, [r7, #8]
 80047ec:	000a      	movs	r2, r1
 80047ee:	0152      	lsls	r2, r2, #5
 80047f0:	1a52      	subs	r2, r2, r1
 80047f2:	0193      	lsls	r3, r2, #6
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	185b      	adds	r3, r3, r1
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	0018      	movs	r0, r3
 8004800:	f7fb fc94 	bl	800012c <__udivsi3>
 8004804:	0003      	movs	r3, r0
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	e00e      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	000a      	movs	r2, r1
 800480e:	0152      	lsls	r2, r2, #5
 8004810:	1a52      	subs	r2, r2, r1
 8004812:	0193      	lsls	r3, r2, #6
 8004814:	1a9b      	subs	r3, r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	185b      	adds	r3, r3, r1
 800481a:	029b      	lsls	r3, r3, #10
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	0018      	movs	r0, r3
 8004820:	f7fb fc84 	bl	800012c <__udivsi3>
 8004824:	0003      	movs	r3, r0
 8004826:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	613b      	str	r3, [r7, #16]
      break;
 800482c:	e00d      	b.n	800484a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800482e:	4b09      	ldr	r3, [pc, #36]	@ (8004854 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	0b5b      	lsrs	r3, r3, #13
 8004834:	2207      	movs	r2, #7
 8004836:	4013      	ands	r3, r2
 8004838:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	3301      	adds	r3, #1
 800483e:	2280      	movs	r2, #128	@ 0x80
 8004840:	0212      	lsls	r2, r2, #8
 8004842:	409a      	lsls	r2, r3
 8004844:	0013      	movs	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
      break;
 8004848:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800484a:	693b      	ldr	r3, [r7, #16]
}
 800484c:	0018      	movs	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	b006      	add	sp, #24
 8004852:	bd80      	pop	{r7, pc}
 8004854:	40021000 	.word	0x40021000
 8004858:	003d0900 	.word	0x003d0900
 800485c:	00f42400 	.word	0x00f42400
 8004860:	007a1200 	.word	0x007a1200
 8004864:	080093f4 	.word	0x080093f4

08004868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800486c:	4b02      	ldr	r3, [pc, #8]	@ (8004878 <HAL_RCC_GetHCLKFreq+0x10>)
 800486e:	681b      	ldr	r3, [r3, #0]
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	46c0      	nop			@ (mov r8, r8)
 8004878:	20000004 	.word	0x20000004

0800487c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004880:	f7ff fff2 	bl	8004868 <HAL_RCC_GetHCLKFreq>
 8004884:	0001      	movs	r1, r0
 8004886:	4b06      	ldr	r3, [pc, #24]	@ (80048a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	2207      	movs	r2, #7
 800488e:	4013      	ands	r3, r2
 8004890:	4a04      	ldr	r2, [pc, #16]	@ (80048a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004892:	5cd3      	ldrb	r3, [r2, r3]
 8004894:	40d9      	lsrs	r1, r3
 8004896:	000b      	movs	r3, r1
}
 8004898:	0018      	movs	r0, r3
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	46c0      	nop			@ (mov r8, r8)
 80048a0:	40021000 	.word	0x40021000
 80048a4:	080093ec 	.word	0x080093ec

080048a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048ac:	f7ff ffdc 	bl	8004868 <HAL_RCC_GetHCLKFreq>
 80048b0:	0001      	movs	r1, r0
 80048b2:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	0adb      	lsrs	r3, r3, #11
 80048b8:	2207      	movs	r2, #7
 80048ba:	4013      	ands	r3, r2
 80048bc:	4a04      	ldr	r2, [pc, #16]	@ (80048d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048be:	5cd3      	ldrb	r3, [r2, r3]
 80048c0:	40d9      	lsrs	r1, r3
 80048c2:	000b      	movs	r3, r1
}
 80048c4:	0018      	movs	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	46c0      	nop			@ (mov r8, r8)
 80048cc:	40021000 	.word	0x40021000
 80048d0:	080093ec 	.word	0x080093ec

080048d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80048dc:	2317      	movs	r3, #23
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2220      	movs	r2, #32
 80048ea:	4013      	ands	r3, r2
 80048ec:	d106      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	2380      	movs	r3, #128	@ 0x80
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	4013      	ands	r3, r2
 80048f8:	d100      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80048fa:	e104      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048fc:	4bb9      	ldr	r3, [pc, #740]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80048fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004900:	2380      	movs	r3, #128	@ 0x80
 8004902:	055b      	lsls	r3, r3, #21
 8004904:	4013      	ands	r3, r2
 8004906:	d10a      	bne.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004908:	4bb6      	ldr	r3, [pc, #728]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800490a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800490c:	4bb5      	ldr	r3, [pc, #724]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800490e:	2180      	movs	r1, #128	@ 0x80
 8004910:	0549      	lsls	r1, r1, #21
 8004912:	430a      	orrs	r2, r1
 8004914:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8004916:	2317      	movs	r3, #23
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	2201      	movs	r2, #1
 800491c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800491e:	4bb2      	ldr	r3, [pc, #712]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	2380      	movs	r3, #128	@ 0x80
 8004924:	005b      	lsls	r3, r3, #1
 8004926:	4013      	ands	r3, r2
 8004928:	d11a      	bne.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800492a:	4baf      	ldr	r3, [pc, #700]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4bae      	ldr	r3, [pc, #696]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004930:	2180      	movs	r1, #128	@ 0x80
 8004932:	0049      	lsls	r1, r1, #1
 8004934:	430a      	orrs	r2, r1
 8004936:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004938:	f7fd fdb8 	bl	80024ac <HAL_GetTick>
 800493c:	0003      	movs	r3, r0
 800493e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004940:	e008      	b.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004942:	f7fd fdb3 	bl	80024ac <HAL_GetTick>
 8004946:	0002      	movs	r2, r0
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	2b64      	cmp	r3, #100	@ 0x64
 800494e:	d901      	bls.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e143      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004954:	4ba4      	ldr	r3, [pc, #656]	@ (8004be8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	2380      	movs	r3, #128	@ 0x80
 800495a:	005b      	lsls	r3, r3, #1
 800495c:	4013      	ands	r3, r2
 800495e:	d0f0      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004960:	4ba0      	ldr	r3, [pc, #640]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	23c0      	movs	r3, #192	@ 0xc0
 8004966:	039b      	lsls	r3, r3, #14
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	23c0      	movs	r3, #192	@ 0xc0
 8004972:	039b      	lsls	r3, r3, #14
 8004974:	4013      	ands	r3, r2
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	429a      	cmp	r2, r3
 800497a:	d107      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	23c0      	movs	r3, #192	@ 0xc0
 8004982:	039b      	lsls	r3, r3, #14
 8004984:	4013      	ands	r3, r2
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	429a      	cmp	r2, r3
 800498a:	d013      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	23c0      	movs	r3, #192	@ 0xc0
 8004992:	029b      	lsls	r3, r3, #10
 8004994:	401a      	ands	r2, r3
 8004996:	23c0      	movs	r3, #192	@ 0xc0
 8004998:	029b      	lsls	r3, r3, #10
 800499a:	429a      	cmp	r2, r3
 800499c:	d10a      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800499e:	4b91      	ldr	r3, [pc, #580]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	2380      	movs	r3, #128	@ 0x80
 80049a4:	029b      	lsls	r3, r3, #10
 80049a6:	401a      	ands	r2, r3
 80049a8:	2380      	movs	r3, #128	@ 0x80
 80049aa:	029b      	lsls	r3, r3, #10
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d101      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e113      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80049b4:	4b8b      	ldr	r3, [pc, #556]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80049b8:	23c0      	movs	r3, #192	@ 0xc0
 80049ba:	029b      	lsls	r3, r3, #10
 80049bc:	4013      	ands	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d049      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	23c0      	movs	r3, #192	@ 0xc0
 80049cc:	029b      	lsls	r3, r3, #10
 80049ce:	4013      	ands	r3, r2
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d004      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2220      	movs	r2, #32
 80049dc:	4013      	ands	r3, r2
 80049de:	d10d      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	689a      	ldr	r2, [r3, #8]
 80049e4:	23c0      	movs	r3, #192	@ 0xc0
 80049e6:	029b      	lsls	r3, r3, #10
 80049e8:	4013      	ands	r3, r2
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d034      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	2380      	movs	r3, #128	@ 0x80
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	4013      	ands	r3, r2
 80049fa:	d02e      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80049fc:	4b79      	ldr	r3, [pc, #484]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80049fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a00:	4a7a      	ldr	r2, [pc, #488]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004a02:	4013      	ands	r3, r2
 8004a04:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a06:	4b77      	ldr	r3, [pc, #476]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a0a:	4b76      	ldr	r3, [pc, #472]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a0c:	2180      	movs	r1, #128	@ 0x80
 8004a0e:	0309      	lsls	r1, r1, #12
 8004a10:	430a      	orrs	r2, r1
 8004a12:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a14:	4b73      	ldr	r3, [pc, #460]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a18:	4b72      	ldr	r3, [pc, #456]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a1a:	4975      	ldr	r1, [pc, #468]	@ (8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004a20:	4b70      	ldr	r3, [pc, #448]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	2380      	movs	r3, #128	@ 0x80
 8004a2a:	005b      	lsls	r3, r3, #1
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d014      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a30:	f7fd fd3c 	bl	80024ac <HAL_GetTick>
 8004a34:	0003      	movs	r3, r0
 8004a36:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a38:	e009      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fd fd37 	bl	80024ac <HAL_GetTick>
 8004a3e:	0002      	movs	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	4a6b      	ldr	r2, [pc, #428]	@ (8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e0c6      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a4e:	4b65      	ldr	r3, [pc, #404]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004a52:	2380      	movs	r3, #128	@ 0x80
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4013      	ands	r3, r2
 8004a58:	d0ef      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	2380      	movs	r3, #128	@ 0x80
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	4013      	ands	r3, r2
 8004a64:	d01f      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	23c0      	movs	r3, #192	@ 0xc0
 8004a6c:	029b      	lsls	r3, r3, #10
 8004a6e:	401a      	ands	r2, r3
 8004a70:	23c0      	movs	r3, #192	@ 0xc0
 8004a72:	029b      	lsls	r3, r3, #10
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d10c      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8004a78:	4b5a      	ldr	r3, [pc, #360]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a5e      	ldr	r2, [pc, #376]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	0019      	movs	r1, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	23c0      	movs	r3, #192	@ 0xc0
 8004a88:	039b      	lsls	r3, r3, #14
 8004a8a:	401a      	ands	r2, r3
 8004a8c:	4b55      	ldr	r3, [pc, #340]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	4b54      	ldr	r3, [pc, #336]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004a94:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	689a      	ldr	r2, [r3, #8]
 8004a9a:	23c0      	movs	r3, #192	@ 0xc0
 8004a9c:	029b      	lsls	r3, r3, #10
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	4b50      	ldr	r3, [pc, #320]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	4013      	ands	r3, r2
 8004aae:	d01f      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	23c0      	movs	r3, #192	@ 0xc0
 8004ab6:	029b      	lsls	r3, r3, #10
 8004ab8:	401a      	ands	r2, r3
 8004aba:	23c0      	movs	r3, #192	@ 0xc0
 8004abc:	029b      	lsls	r3, r3, #10
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d10c      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x208>
 8004ac2:	4b48      	ldr	r3, [pc, #288]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a4c      	ldr	r2, [pc, #304]	@ (8004bf8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	0019      	movs	r1, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	23c0      	movs	r3, #192	@ 0xc0
 8004ad2:	039b      	lsls	r3, r3, #14
 8004ad4:	401a      	ands	r2, r3
 8004ad6:	4b43      	ldr	r3, [pc, #268]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	4b41      	ldr	r3, [pc, #260]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004ade:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	23c0      	movs	r3, #192	@ 0xc0
 8004ae6:	029b      	lsls	r3, r3, #10
 8004ae8:	401a      	ands	r2, r3
 8004aea:	4b3e      	ldr	r3, [pc, #248]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004aec:	430a      	orrs	r2, r1
 8004aee:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004af0:	2317      	movs	r3, #23
 8004af2:	18fb      	adds	r3, r7, r3
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d105      	bne.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afa:	4b3a      	ldr	r3, [pc, #232]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004afc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004afe:	4b39      	ldr	r3, [pc, #228]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b00:	493e      	ldr	r1, [pc, #248]	@ (8004bfc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8004b02:	400a      	ands	r2, r1
 8004b04:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b10:	4b34      	ldr	r3, [pc, #208]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b14:	2203      	movs	r2, #3
 8004b16:	4393      	bics	r3, r2
 8004b18:	0019      	movs	r1, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	4b31      	ldr	r3, [pc, #196]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b20:	430a      	orrs	r2, r1
 8004b22:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2202      	movs	r2, #2
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b32:	220c      	movs	r2, #12
 8004b34:	4393      	bics	r3, r2
 8004b36:	0019      	movs	r1, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	4b29      	ldr	r3, [pc, #164]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2204      	movs	r2, #4
 8004b48:	4013      	ands	r3, r2
 8004b4a:	d009      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b4c:	4b25      	ldr	r3, [pc, #148]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b50:	4a2b      	ldr	r2, [pc, #172]	@ (8004c00 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8004b52:	4013      	ands	r3, r2
 8004b54:	0019      	movs	r1, r3
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695a      	ldr	r2, [r3, #20]
 8004b5a:	4b22      	ldr	r3, [pc, #136]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2208      	movs	r2, #8
 8004b66:	4013      	ands	r3, r2
 8004b68:	d009      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b6e:	4a25      	ldr	r2, [pc, #148]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	0019      	movs	r1, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699a      	ldr	r2, [r3, #24]
 8004b78:	4b1a      	ldr	r3, [pc, #104]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	2380      	movs	r3, #128	@ 0x80
 8004b84:	005b      	lsls	r3, r3, #1
 8004b86:	4013      	ands	r3, r2
 8004b88:	d009      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b8a:	4b16      	ldr	r3, [pc, #88]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b8e:	4a17      	ldr	r2, [pc, #92]	@ (8004bec <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8004b90:	4013      	ands	r3, r2
 8004b92:	0019      	movs	r1, r3
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2240      	movs	r2, #64	@ 0x40
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	d009      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bac:	4a16      	ldr	r2, [pc, #88]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004bae:	4013      	ands	r3, r2
 8004bb0:	0019      	movs	r1, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2280      	movs	r2, #128	@ 0x80
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	d009      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004bc6:	4b07      	ldr	r3, [pc, #28]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bca:	4a10      	ldr	r2, [pc, #64]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bcc:	4013      	ands	r3, r2
 8004bce:	0019      	movs	r1, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1a      	ldr	r2, [r3, #32]
 8004bd4:	4b03      	ldr	r3, [pc, #12]	@ (8004be4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	0018      	movs	r0, r3
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b006      	add	sp, #24
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40021000 	.word	0x40021000
 8004be8:	40007000 	.word	0x40007000
 8004bec:	fffcffff 	.word	0xfffcffff
 8004bf0:	fff7ffff 	.word	0xfff7ffff
 8004bf4:	00001388 	.word	0x00001388
 8004bf8:	ffcfffff 	.word	0xffcfffff
 8004bfc:	efffffff 	.word	0xefffffff
 8004c00:	fffff3ff 	.word	0xfffff3ff
 8004c04:	ffffcfff 	.word	0xffffcfff
 8004c08:	fbffffff 	.word	0xfbffffff
 8004c0c:	fff3ffff 	.word	0xfff3ffff

08004c10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e044      	b.n	8004cac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d107      	bne.n	8004c3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2278      	movs	r2, #120	@ 0x78
 8004c2e:	2100      	movs	r1, #0
 8004c30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7fc f843 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2224      	movs	r2, #36	@ 0x24
 8004c3e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	438a      	bics	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f000 ffb4 	bl	8005bc8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	0018      	movs	r0, r3
 8004c64:	f000 fd12 	bl	800568c <UART_SetConfig>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d101      	bne.n	8004c72 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e01c      	b.n	8004cac <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685a      	ldr	r2, [r3, #4]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	490d      	ldr	r1, [pc, #52]	@ (8004cb4 <HAL_UART_Init+0xa4>)
 8004c7e:	400a      	ands	r2, r1
 8004c80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	212a      	movs	r1, #42	@ 0x2a
 8004c8e:	438a      	bics	r2, r1
 8004c90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	430a      	orrs	r2, r1
 8004ca0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	0018      	movs	r0, r3
 8004ca6:	f001 f843 	bl	8005d30 <UART_CheckIdleState>
 8004caa:	0003      	movs	r3, r0
}
 8004cac:	0018      	movs	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b002      	add	sp, #8
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	ffffb7ff 	.word	0xffffb7ff

08004cb8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b088      	sub	sp, #32
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	1dbb      	adds	r3, r7, #6
 8004cc4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cca:	2b20      	cmp	r3, #32
 8004ccc:	d000      	beq.n	8004cd0 <HAL_UART_Transmit_DMA+0x18>
 8004cce:	e077      	b.n	8004dc0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_UART_Transmit_DMA+0x26>
 8004cd6:	1dbb      	adds	r3, r7, #6
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d101      	bne.n	8004ce2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e06f      	b.n	8004dc2 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	2380      	movs	r3, #128	@ 0x80
 8004ce8:	015b      	lsls	r3, r3, #5
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d109      	bne.n	8004d02 <HAL_UART_Transmit_DMA+0x4a>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d105      	bne.n	8004d02 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d001      	beq.n	8004d02 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e05f      	b.n	8004dc2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1dba      	adds	r2, r7, #6
 8004d0c:	2150      	movs	r1, #80	@ 0x50
 8004d0e:	8812      	ldrh	r2, [r2, #0]
 8004d10:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	1dba      	adds	r2, r7, #6
 8004d16:	2152      	movs	r1, #82	@ 0x52
 8004d18:	8812      	ldrh	r2, [r2, #0]
 8004d1a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2284      	movs	r2, #132	@ 0x84
 8004d20:	2100      	movs	r1, #0
 8004d22:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2221      	movs	r2, #33	@ 0x21
 8004d28:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d027      	beq.n	8004d82 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d36:	4a25      	ldr	r2, [pc, #148]	@ (8004dcc <HAL_UART_Transmit_DMA+0x114>)
 8004d38:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3e:	4a24      	ldr	r2, [pc, #144]	@ (8004dd0 <HAL_UART_Transmit_DMA+0x118>)
 8004d40:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d46:	4a23      	ldr	r2, [pc, #140]	@ (8004dd4 <HAL_UART_Transmit_DMA+0x11c>)
 8004d48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4e:	2200      	movs	r2, #0
 8004d50:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d5a:	0019      	movs	r1, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3328      	adds	r3, #40	@ 0x28
 8004d62:	001a      	movs	r2, r3
 8004d64:	1dbb      	adds	r3, r7, #6
 8004d66:	881b      	ldrh	r3, [r3, #0]
 8004d68:	f7fd fd2c 	bl	80027c4 <HAL_DMA_Start_IT>
 8004d6c:	1e03      	subs	r3, r0, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2284      	movs	r2, #132	@ 0x84
 8004d74:	2110      	movs	r1, #16
 8004d76:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e01f      	b.n	8004dc2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2240      	movs	r2, #64	@ 0x40
 8004d88:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8e:	613b      	str	r3, [r7, #16]
  return(result);
 8004d90:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	2301      	movs	r3, #1
 8004d96:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f383 8810 	msr	PRIMASK, r3
}
 8004d9e:	46c0      	nop			@ (mov r8, r8)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2180      	movs	r1, #128	@ 0x80
 8004dac:	430a      	orrs	r2, r1
 8004dae:	609a      	str	r2, [r3, #8]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	f383 8810 	msr	PRIMASK, r3
}
 8004dba:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	e000      	b.n	8004dc2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004dc0:	2302      	movs	r3, #2
  }
}
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b008      	add	sp, #32
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	080061b1 	.word	0x080061b1
 8004dd0:	08006249 	.word	0x08006249
 8004dd4:	0800644f 	.word	0x0800644f

08004dd8 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	@ 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004de0:	f3ef 8310 	mrs	r3, PRIMASK
 8004de4:	617b      	str	r3, [r7, #20]
  return(result);
 8004de6:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dea:	2301      	movs	r3, #1
 8004dec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	f383 8810 	msr	PRIMASK, r3
}
 8004df4:	46c0      	nop			@ (mov r8, r8)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	21c0      	movs	r1, #192	@ 0xc0
 8004e02:	438a      	bics	r2, r1
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	f383 8810 	msr	PRIMASK, r3
}
 8004e10:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2280      	movs	r2, #128	@ 0x80
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	2b80      	cmp	r3, #128	@ 0x80
 8004e1e:	d135      	bne.n	8004e8c <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e20:	f3ef 8310 	mrs	r3, PRIMASK
 8004e24:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e26:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e28:	623b      	str	r3, [r7, #32]
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f383 8810 	msr	PRIMASK, r3
}
 8004e34:	46c0      	nop			@ (mov r8, r8)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	689a      	ldr	r2, [r3, #8]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2180      	movs	r1, #128	@ 0x80
 8004e42:	438a      	bics	r2, r1
 8004e44:	609a      	str	r2, [r3, #8]
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	f383 8810 	msr	PRIMASK, r3
}
 8004e50:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d018      	beq.n	8004e8c <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e5e:	2200      	movs	r2, #0
 8004e60:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e66:	0018      	movs	r0, r3
 8004e68:	f7fd fd12 	bl	8002890 <HAL_DMA_Abort>
 8004e6c:	1e03      	subs	r3, r0, #0
 8004e6e:	d00d      	beq.n	8004e8c <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e74:	0018      	movs	r0, r3
 8004e76:	f7fd fe40 	bl	8002afa <HAL_DMA_GetError>
 8004e7a:	0003      	movs	r3, r0
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d105      	bne.n	8004e8c <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2284      	movs	r2, #132	@ 0x84
 8004e84:	2110      	movs	r1, #16
 8004e86:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e007      	b.n	8004e9c <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2252      	movs	r2, #82	@ 0x52
 8004e90:	2100      	movs	r1, #0
 8004e92:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	0018      	movs	r0, r3
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	b00a      	add	sp, #40	@ 0x28
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b092      	sub	sp, #72	@ 0x48
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004eac:	f3ef 8310 	mrs	r3, PRIMASK
 8004eb0:	623b      	str	r3, [r7, #32]
  return(result);
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004eb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebc:	f383 8810 	msr	PRIMASK, r3
}
 8004ec0:	46c0      	nop			@ (mov r8, r8)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	494b      	ldr	r1, [pc, #300]	@ (8004ffc <HAL_UART_AbortReceive+0x158>)
 8004ece:	400a      	ands	r2, r1
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	f383 8810 	msr	PRIMASK, r3
}
 8004edc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ede:	f3ef 8310 	mrs	r3, PRIMASK
 8004ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ee8:	2301      	movs	r3, #1
 8004eea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eee:	f383 8810 	msr	PRIMASK, r3
}
 8004ef2:	46c0      	nop			@ (mov r8, r8)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	689a      	ldr	r2, [r3, #8]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2101      	movs	r1, #1
 8004f00:	438a      	bics	r2, r1
 8004f02:	609a      	str	r2, [r3, #8]
 8004f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f06:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0a:	f383 8810 	msr	PRIMASK, r3
}
 8004f0e:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d118      	bne.n	8004f4a <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f18:	f3ef 8310 	mrs	r3, PRIMASK
 8004f1c:	617b      	str	r3, [r7, #20]
  return(result);
 8004f1e:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004f20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f22:	2301      	movs	r3, #1
 8004f24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	f383 8810 	msr	PRIMASK, r3
}
 8004f2c:	46c0      	nop			@ (mov r8, r8)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2110      	movs	r1, #16
 8004f3a:	438a      	bics	r2, r1
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	f383 8810 	msr	PRIMASK, r3
}
 8004f48:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2240      	movs	r2, #64	@ 0x40
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b40      	cmp	r3, #64	@ 0x40
 8004f56:	d135      	bne.n	8004fc4 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f58:	f3ef 8310 	mrs	r3, PRIMASK
 8004f5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f62:	2301      	movs	r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f383 8810 	msr	PRIMASK, r3
}
 8004f6c:	46c0      	nop			@ (mov r8, r8)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2140      	movs	r1, #64	@ 0x40
 8004f7a:	438a      	bics	r2, r1
 8004f7c:	609a      	str	r2, [r3, #8]
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f383 8810 	msr	PRIMASK, r3
}
 8004f88:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d018      	beq.n	8004fc4 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f96:	2200      	movs	r2, #0
 8004f98:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	f7fd fc76 	bl	8002890 <HAL_DMA_Abort>
 8004fa4:	1e03      	subs	r3, r0, #0
 8004fa6:	d00d      	beq.n	8004fc4 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fac:	0018      	movs	r0, r3
 8004fae:	f7fd fda4 	bl	8002afa <HAL_DMA_GetError>
 8004fb2:	0003      	movs	r3, r0
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d105      	bne.n	8004fc4 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2284      	movs	r2, #132	@ 0x84
 8004fbc:	2110      	movs	r1, #16
 8004fbe:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e017      	b.n	8004ff4 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	225a      	movs	r2, #90	@ 0x5a
 8004fc8:	2100      	movs	r1, #0
 8004fca:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	220f      	movs	r2, #15
 8004fd2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	699a      	ldr	r2, [r3, #24]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2108      	movs	r1, #8
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2280      	movs	r2, #128	@ 0x80
 8004fe8:	2120      	movs	r1, #32
 8004fea:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8004ff2:	2300      	movs	r3, #0
}
 8004ff4:	0018      	movs	r0, r3
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b012      	add	sp, #72	@ 0x48
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	fffffedf 	.word	0xfffffedf

08005000 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005000:	b590      	push	{r4, r7, lr}
 8005002:	b0ab      	sub	sp, #172	@ 0xac
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	22a4      	movs	r2, #164	@ 0xa4
 8005010:	18b9      	adds	r1, r7, r2
 8005012:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	20a0      	movs	r0, #160	@ 0xa0
 800501c:	1839      	adds	r1, r7, r0
 800501e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	219c      	movs	r1, #156	@ 0x9c
 8005028:	1879      	adds	r1, r7, r1
 800502a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800502c:	0011      	movs	r1, r2
 800502e:	18bb      	adds	r3, r7, r2
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a99      	ldr	r2, [pc, #612]	@ (8005298 <HAL_UART_IRQHandler+0x298>)
 8005034:	4013      	ands	r3, r2
 8005036:	2298      	movs	r2, #152	@ 0x98
 8005038:	18bc      	adds	r4, r7, r2
 800503a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800503c:	18bb      	adds	r3, r7, r2
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d114      	bne.n	800506e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005044:	187b      	adds	r3, r7, r1
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2220      	movs	r2, #32
 800504a:	4013      	ands	r3, r2
 800504c:	d00f      	beq.n	800506e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800504e:	183b      	adds	r3, r7, r0
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2220      	movs	r2, #32
 8005054:	4013      	ands	r3, r2
 8005056:	d00a      	beq.n	800506e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800505c:	2b00      	cmp	r3, #0
 800505e:	d100      	bne.n	8005062 <HAL_UART_IRQHandler+0x62>
 8005060:	e2be      	b.n	80055e0 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	0010      	movs	r0, r2
 800506a:	4798      	blx	r3
      }
      return;
 800506c:	e2b8      	b.n	80055e0 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800506e:	2398      	movs	r3, #152	@ 0x98
 8005070:	18fb      	adds	r3, r7, r3
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d100      	bne.n	800507a <HAL_UART_IRQHandler+0x7a>
 8005078:	e114      	b.n	80052a4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800507a:	239c      	movs	r3, #156	@ 0x9c
 800507c:	18fb      	adds	r3, r7, r3
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2201      	movs	r2, #1
 8005082:	4013      	ands	r3, r2
 8005084:	d106      	bne.n	8005094 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005086:	23a0      	movs	r3, #160	@ 0xa0
 8005088:	18fb      	adds	r3, r7, r3
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a83      	ldr	r2, [pc, #524]	@ (800529c <HAL_UART_IRQHandler+0x29c>)
 800508e:	4013      	ands	r3, r2
 8005090:	d100      	bne.n	8005094 <HAL_UART_IRQHandler+0x94>
 8005092:	e107      	b.n	80052a4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005094:	23a4      	movs	r3, #164	@ 0xa4
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2201      	movs	r2, #1
 800509c:	4013      	ands	r3, r2
 800509e:	d012      	beq.n	80050c6 <HAL_UART_IRQHandler+0xc6>
 80050a0:	23a0      	movs	r3, #160	@ 0xa0
 80050a2:	18fb      	adds	r3, r7, r3
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	2380      	movs	r3, #128	@ 0x80
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	4013      	ands	r3, r2
 80050ac:	d00b      	beq.n	80050c6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2201      	movs	r2, #1
 80050b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2284      	movs	r2, #132	@ 0x84
 80050ba:	589b      	ldr	r3, [r3, r2]
 80050bc:	2201      	movs	r2, #1
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2184      	movs	r1, #132	@ 0x84
 80050c4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050c6:	23a4      	movs	r3, #164	@ 0xa4
 80050c8:	18fb      	adds	r3, r7, r3
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2202      	movs	r2, #2
 80050ce:	4013      	ands	r3, r2
 80050d0:	d011      	beq.n	80050f6 <HAL_UART_IRQHandler+0xf6>
 80050d2:	239c      	movs	r3, #156	@ 0x9c
 80050d4:	18fb      	adds	r3, r7, r3
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2201      	movs	r2, #1
 80050da:	4013      	ands	r3, r2
 80050dc:	d00b      	beq.n	80050f6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	2202      	movs	r2, #2
 80050e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2284      	movs	r2, #132	@ 0x84
 80050ea:	589b      	ldr	r3, [r3, r2]
 80050ec:	2204      	movs	r2, #4
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2184      	movs	r1, #132	@ 0x84
 80050f4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80050f6:	23a4      	movs	r3, #164	@ 0xa4
 80050f8:	18fb      	adds	r3, r7, r3
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2204      	movs	r2, #4
 80050fe:	4013      	ands	r3, r2
 8005100:	d011      	beq.n	8005126 <HAL_UART_IRQHandler+0x126>
 8005102:	239c      	movs	r3, #156	@ 0x9c
 8005104:	18fb      	adds	r3, r7, r3
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2201      	movs	r2, #1
 800510a:	4013      	ands	r3, r2
 800510c:	d00b      	beq.n	8005126 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2204      	movs	r2, #4
 8005114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2284      	movs	r2, #132	@ 0x84
 800511a:	589b      	ldr	r3, [r3, r2]
 800511c:	2202      	movs	r2, #2
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2184      	movs	r1, #132	@ 0x84
 8005124:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005126:	23a4      	movs	r3, #164	@ 0xa4
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2208      	movs	r2, #8
 800512e:	4013      	ands	r3, r2
 8005130:	d017      	beq.n	8005162 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005132:	23a0      	movs	r3, #160	@ 0xa0
 8005134:	18fb      	adds	r3, r7, r3
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2220      	movs	r2, #32
 800513a:	4013      	ands	r3, r2
 800513c:	d105      	bne.n	800514a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800513e:	239c      	movs	r3, #156	@ 0x9c
 8005140:	18fb      	adds	r3, r7, r3
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2201      	movs	r2, #1
 8005146:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005148:	d00b      	beq.n	8005162 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2208      	movs	r2, #8
 8005150:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2284      	movs	r2, #132	@ 0x84
 8005156:	589b      	ldr	r3, [r3, r2]
 8005158:	2208      	movs	r2, #8
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2184      	movs	r1, #132	@ 0x84
 8005160:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005162:	23a4      	movs	r3, #164	@ 0xa4
 8005164:	18fb      	adds	r3, r7, r3
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	2380      	movs	r3, #128	@ 0x80
 800516a:	011b      	lsls	r3, r3, #4
 800516c:	4013      	ands	r3, r2
 800516e:	d013      	beq.n	8005198 <HAL_UART_IRQHandler+0x198>
 8005170:	23a0      	movs	r3, #160	@ 0xa0
 8005172:	18fb      	adds	r3, r7, r3
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	2380      	movs	r3, #128	@ 0x80
 8005178:	04db      	lsls	r3, r3, #19
 800517a:	4013      	ands	r3, r2
 800517c:	d00c      	beq.n	8005198 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2280      	movs	r2, #128	@ 0x80
 8005184:	0112      	lsls	r2, r2, #4
 8005186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2284      	movs	r2, #132	@ 0x84
 800518c:	589b      	ldr	r3, [r3, r2]
 800518e:	2220      	movs	r2, #32
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2184      	movs	r1, #132	@ 0x84
 8005196:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2284      	movs	r2, #132	@ 0x84
 800519c:	589b      	ldr	r3, [r3, r2]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d100      	bne.n	80051a4 <HAL_UART_IRQHandler+0x1a4>
 80051a2:	e21f      	b.n	80055e4 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80051a4:	23a4      	movs	r3, #164	@ 0xa4
 80051a6:	18fb      	adds	r3, r7, r3
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2220      	movs	r2, #32
 80051ac:	4013      	ands	r3, r2
 80051ae:	d00e      	beq.n	80051ce <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051b0:	23a0      	movs	r3, #160	@ 0xa0
 80051b2:	18fb      	adds	r3, r7, r3
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2220      	movs	r2, #32
 80051b8:	4013      	ands	r3, r2
 80051ba:	d008      	beq.n	80051ce <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d004      	beq.n	80051ce <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80051c8:	687a      	ldr	r2, [r7, #4]
 80051ca:	0010      	movs	r0, r2
 80051cc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2284      	movs	r2, #132	@ 0x84
 80051d2:	589b      	ldr	r3, [r3, r2]
 80051d4:	2194      	movs	r1, #148	@ 0x94
 80051d6:	187a      	adds	r2, r7, r1
 80051d8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	2240      	movs	r2, #64	@ 0x40
 80051e2:	4013      	ands	r3, r2
 80051e4:	2b40      	cmp	r3, #64	@ 0x40
 80051e6:	d004      	beq.n	80051f2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80051e8:	187b      	adds	r3, r7, r1
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2228      	movs	r2, #40	@ 0x28
 80051ee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80051f0:	d047      	beq.n	8005282 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	0018      	movs	r0, r3
 80051f6:	f000 ff77 	bl	80060e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2240      	movs	r2, #64	@ 0x40
 8005202:	4013      	ands	r3, r2
 8005204:	2b40      	cmp	r3, #64	@ 0x40
 8005206:	d137      	bne.n	8005278 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005208:	f3ef 8310 	mrs	r3, PRIMASK
 800520c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800520e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005210:	2090      	movs	r0, #144	@ 0x90
 8005212:	183a      	adds	r2, r7, r0
 8005214:	6013      	str	r3, [r2, #0]
 8005216:	2301      	movs	r3, #1
 8005218:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800521c:	f383 8810 	msr	PRIMASK, r3
}
 8005220:	46c0      	nop			@ (mov r8, r8)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2140      	movs	r1, #64	@ 0x40
 800522e:	438a      	bics	r2, r1
 8005230:	609a      	str	r2, [r3, #8]
 8005232:	183b      	adds	r3, r7, r0
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005238:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800523a:	f383 8810 	msr	PRIMASK, r3
}
 800523e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005244:	2b00      	cmp	r3, #0
 8005246:	d012      	beq.n	800526e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800524c:	4a14      	ldr	r2, [pc, #80]	@ (80052a0 <HAL_UART_IRQHandler+0x2a0>)
 800524e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005254:	0018      	movs	r0, r3
 8005256:	f7fd fb5b 	bl	8002910 <HAL_DMA_Abort_IT>
 800525a:	1e03      	subs	r3, r0, #0
 800525c:	d01a      	beq.n	8005294 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005268:	0018      	movs	r0, r3
 800526a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800526c:	e012      	b.n	8005294 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	0018      	movs	r0, r3
 8005272:	f000 f9e5 	bl	8005640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005276:	e00d      	b.n	8005294 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	0018      	movs	r0, r3
 800527c:	f000 f9e0 	bl	8005640 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005280:	e008      	b.n	8005294 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	0018      	movs	r0, r3
 8005286:	f000 f9db 	bl	8005640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2284      	movs	r2, #132	@ 0x84
 800528e:	2100      	movs	r1, #0
 8005290:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005292:	e1a7      	b.n	80055e4 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005294:	46c0      	nop			@ (mov r8, r8)
    return;
 8005296:	e1a5      	b.n	80055e4 <HAL_UART_IRQHandler+0x5e4>
 8005298:	0000080f 	.word	0x0000080f
 800529c:	04000120 	.word	0x04000120
 80052a0:	080064d3 	.word	0x080064d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d000      	beq.n	80052ae <HAL_UART_IRQHandler+0x2ae>
 80052ac:	e159      	b.n	8005562 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80052ae:	23a4      	movs	r3, #164	@ 0xa4
 80052b0:	18fb      	adds	r3, r7, r3
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2210      	movs	r2, #16
 80052b6:	4013      	ands	r3, r2
 80052b8:	d100      	bne.n	80052bc <HAL_UART_IRQHandler+0x2bc>
 80052ba:	e152      	b.n	8005562 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80052bc:	23a0      	movs	r3, #160	@ 0xa0
 80052be:	18fb      	adds	r3, r7, r3
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2210      	movs	r2, #16
 80052c4:	4013      	ands	r3, r2
 80052c6:	d100      	bne.n	80052ca <HAL_UART_IRQHandler+0x2ca>
 80052c8:	e14b      	b.n	8005562 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2210      	movs	r2, #16
 80052d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2240      	movs	r2, #64	@ 0x40
 80052da:	4013      	ands	r3, r2
 80052dc:	2b40      	cmp	r3, #64	@ 0x40
 80052de:	d000      	beq.n	80052e2 <HAL_UART_IRQHandler+0x2e2>
 80052e0:	e0bf      	b.n	8005462 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	217e      	movs	r1, #126	@ 0x7e
 80052ec:	187b      	adds	r3, r7, r1
 80052ee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80052f0:	187b      	adds	r3, r7, r1
 80052f2:	881b      	ldrh	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d100      	bne.n	80052fa <HAL_UART_IRQHandler+0x2fa>
 80052f8:	e095      	b.n	8005426 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2258      	movs	r2, #88	@ 0x58
 80052fe:	5a9b      	ldrh	r3, [r3, r2]
 8005300:	187a      	adds	r2, r7, r1
 8005302:	8812      	ldrh	r2, [r2, #0]
 8005304:	429a      	cmp	r2, r3
 8005306:	d300      	bcc.n	800530a <HAL_UART_IRQHandler+0x30a>
 8005308:	e08d      	b.n	8005426 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	187a      	adds	r2, r7, r1
 800530e:	215a      	movs	r1, #90	@ 0x5a
 8005310:	8812      	ldrh	r2, [r2, #0]
 8005312:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2220      	movs	r2, #32
 800531e:	4013      	ands	r3, r2
 8005320:	d16f      	bne.n	8005402 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005322:	f3ef 8310 	mrs	r3, PRIMASK
 8005326:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800532a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800532c:	2301      	movs	r3, #1
 800532e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005332:	f383 8810 	msr	PRIMASK, r3
}
 8005336:	46c0      	nop			@ (mov r8, r8)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	49ad      	ldr	r1, [pc, #692]	@ (80055f8 <HAL_UART_IRQHandler+0x5f8>)
 8005344:	400a      	ands	r2, r1
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800534a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800534c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534e:	f383 8810 	msr	PRIMASK, r3
}
 8005352:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005354:	f3ef 8310 	mrs	r3, PRIMASK
 8005358:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800535a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800535c:	677b      	str	r3, [r7, #116]	@ 0x74
 800535e:	2301      	movs	r3, #1
 8005360:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005364:	f383 8810 	msr	PRIMASK, r3
}
 8005368:	46c0      	nop			@ (mov r8, r8)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	689a      	ldr	r2, [r3, #8]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2101      	movs	r1, #1
 8005376:	438a      	bics	r2, r1
 8005378:	609a      	str	r2, [r3, #8]
 800537a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800537c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005380:	f383 8810 	msr	PRIMASK, r3
}
 8005384:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005386:	f3ef 8310 	mrs	r3, PRIMASK
 800538a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800538c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005390:	2301      	movs	r3, #1
 8005392:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005394:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005396:	f383 8810 	msr	PRIMASK, r3
}
 800539a:	46c0      	nop			@ (mov r8, r8)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2140      	movs	r1, #64	@ 0x40
 80053a8:	438a      	bics	r2, r1
 80053aa:	609a      	str	r2, [r3, #8]
 80053ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053ae:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053b2:	f383 8810 	msr	PRIMASK, r3
}
 80053b6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2280      	movs	r2, #128	@ 0x80
 80053bc:	2120      	movs	r1, #32
 80053be:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c6:	f3ef 8310 	mrs	r3, PRIMASK
 80053ca:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80053cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053d0:	2301      	movs	r3, #1
 80053d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80053d6:	f383 8810 	msr	PRIMASK, r3
}
 80053da:	46c0      	nop			@ (mov r8, r8)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2110      	movs	r1, #16
 80053e8:	438a      	bics	r2, r1
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80053ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053f2:	f383 8810 	msr	PRIMASK, r3
}
 80053f6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053fc:	0018      	movs	r0, r3
 80053fe:	f7fd fa47 	bl	8002890 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2202      	movs	r2, #2
 8005406:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2258      	movs	r2, #88	@ 0x58
 800540c:	5a9a      	ldrh	r2, [r3, r2]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	215a      	movs	r1, #90	@ 0x5a
 8005412:	5a5b      	ldrh	r3, [r3, r1]
 8005414:	b29b      	uxth	r3, r3
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	b29a      	uxth	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	0011      	movs	r1, r2
 800541e:	0018      	movs	r0, r3
 8005420:	f7fb f950 	bl	80006c4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005424:	e0e0      	b.n	80055e8 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2258      	movs	r2, #88	@ 0x58
 800542a:	5a9b      	ldrh	r3, [r3, r2]
 800542c:	227e      	movs	r2, #126	@ 0x7e
 800542e:	18ba      	adds	r2, r7, r2
 8005430:	8812      	ldrh	r2, [r2, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d000      	beq.n	8005438 <HAL_UART_IRQHandler+0x438>
 8005436:	e0d7      	b.n	80055e8 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2220      	movs	r2, #32
 8005442:	4013      	ands	r3, r2
 8005444:	2b20      	cmp	r3, #32
 8005446:	d000      	beq.n	800544a <HAL_UART_IRQHandler+0x44a>
 8005448:	e0ce      	b.n	80055e8 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2202      	movs	r2, #2
 800544e:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2258      	movs	r2, #88	@ 0x58
 8005454:	5a9a      	ldrh	r2, [r3, r2]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	0011      	movs	r1, r2
 800545a:	0018      	movs	r0, r3
 800545c:	f7fb f932 	bl	80006c4 <HAL_UARTEx_RxEventCallback>
      return;
 8005460:	e0c2      	b.n	80055e8 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2258      	movs	r2, #88	@ 0x58
 8005466:	5a99      	ldrh	r1, [r3, r2]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	225a      	movs	r2, #90	@ 0x5a
 800546c:	5a9b      	ldrh	r3, [r3, r2]
 800546e:	b29a      	uxth	r2, r3
 8005470:	208e      	movs	r0, #142	@ 0x8e
 8005472:	183b      	adds	r3, r7, r0
 8005474:	1a8a      	subs	r2, r1, r2
 8005476:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	225a      	movs	r2, #90	@ 0x5a
 800547c:	5a9b      	ldrh	r3, [r3, r2]
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d100      	bne.n	8005486 <HAL_UART_IRQHandler+0x486>
 8005484:	e0b2      	b.n	80055ec <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8005486:	183b      	adds	r3, r7, r0
 8005488:	881b      	ldrh	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d100      	bne.n	8005490 <HAL_UART_IRQHandler+0x490>
 800548e:	e0ad      	b.n	80055ec <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005490:	f3ef 8310 	mrs	r3, PRIMASK
 8005494:	60fb      	str	r3, [r7, #12]
  return(result);
 8005496:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005498:	2488      	movs	r4, #136	@ 0x88
 800549a:	193a      	adds	r2, r7, r4
 800549c:	6013      	str	r3, [r2, #0]
 800549e:	2301      	movs	r3, #1
 80054a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	f383 8810 	msr	PRIMASK, r3
}
 80054a8:	46c0      	nop			@ (mov r8, r8)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4951      	ldr	r1, [pc, #324]	@ (80055fc <HAL_UART_IRQHandler+0x5fc>)
 80054b6:	400a      	ands	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]
 80054ba:	193b      	adds	r3, r7, r4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f383 8810 	msr	PRIMASK, r3
}
 80054c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054c8:	f3ef 8310 	mrs	r3, PRIMASK
 80054cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80054ce:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054d0:	2484      	movs	r4, #132	@ 0x84
 80054d2:	193a      	adds	r2, r7, r4
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	2301      	movs	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	f383 8810 	msr	PRIMASK, r3
}
 80054e0:	46c0      	nop			@ (mov r8, r8)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	689a      	ldr	r2, [r3, #8]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2101      	movs	r1, #1
 80054ee:	438a      	bics	r2, r1
 80054f0:	609a      	str	r2, [r3, #8]
 80054f2:	193b      	adds	r3, r7, r4
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	f383 8810 	msr	PRIMASK, r3
}
 80054fe:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2280      	movs	r2, #128	@ 0x80
 8005504:	2120      	movs	r1, #32
 8005506:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005514:	f3ef 8310 	mrs	r3, PRIMASK
 8005518:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800551c:	2480      	movs	r4, #128	@ 0x80
 800551e:	193a      	adds	r2, r7, r4
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	2301      	movs	r3, #1
 8005524:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005528:	f383 8810 	msr	PRIMASK, r3
}
 800552c:	46c0      	nop			@ (mov r8, r8)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2110      	movs	r1, #16
 800553a:	438a      	bics	r2, r1
 800553c:	601a      	str	r2, [r3, #0]
 800553e:	193b      	adds	r3, r7, r4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005546:	f383 8810 	msr	PRIMASK, r3
}
 800554a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005552:	183b      	adds	r3, r7, r0
 8005554:	881a      	ldrh	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	0011      	movs	r1, r2
 800555a:	0018      	movs	r0, r3
 800555c:	f7fb f8b2 	bl	80006c4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005560:	e044      	b.n	80055ec <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005562:	23a4      	movs	r3, #164	@ 0xa4
 8005564:	18fb      	adds	r3, r7, r3
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	2380      	movs	r3, #128	@ 0x80
 800556a:	035b      	lsls	r3, r3, #13
 800556c:	4013      	ands	r3, r2
 800556e:	d010      	beq.n	8005592 <HAL_UART_IRQHandler+0x592>
 8005570:	239c      	movs	r3, #156	@ 0x9c
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	2380      	movs	r3, #128	@ 0x80
 8005578:	03db      	lsls	r3, r3, #15
 800557a:	4013      	ands	r3, r2
 800557c:	d009      	beq.n	8005592 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2280      	movs	r2, #128	@ 0x80
 8005584:	0352      	lsls	r2, r2, #13
 8005586:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	0018      	movs	r0, r3
 800558c:	f000 ffdf 	bl	800654e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005590:	e02f      	b.n	80055f2 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005592:	23a4      	movs	r3, #164	@ 0xa4
 8005594:	18fb      	adds	r3, r7, r3
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2280      	movs	r2, #128	@ 0x80
 800559a:	4013      	ands	r3, r2
 800559c:	d00f      	beq.n	80055be <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800559e:	23a0      	movs	r3, #160	@ 0xa0
 80055a0:	18fb      	adds	r3, r7, r3
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2280      	movs	r2, #128	@ 0x80
 80055a6:	4013      	ands	r3, r2
 80055a8:	d009      	beq.n	80055be <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01e      	beq.n	80055f0 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	0010      	movs	r0, r2
 80055ba:	4798      	blx	r3
    }
    return;
 80055bc:	e018      	b.n	80055f0 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80055be:	23a4      	movs	r3, #164	@ 0xa4
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2240      	movs	r2, #64	@ 0x40
 80055c6:	4013      	ands	r3, r2
 80055c8:	d013      	beq.n	80055f2 <HAL_UART_IRQHandler+0x5f2>
 80055ca:	23a0      	movs	r3, #160	@ 0xa0
 80055cc:	18fb      	adds	r3, r7, r3
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2240      	movs	r2, #64	@ 0x40
 80055d2:	4013      	ands	r3, r2
 80055d4:	d00d      	beq.n	80055f2 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	0018      	movs	r0, r3
 80055da:	f000 ff8d 	bl	80064f8 <UART_EndTransmit_IT>
    return;
 80055de:	e008      	b.n	80055f2 <HAL_UART_IRQHandler+0x5f2>
      return;
 80055e0:	46c0      	nop			@ (mov r8, r8)
 80055e2:	e006      	b.n	80055f2 <HAL_UART_IRQHandler+0x5f2>
    return;
 80055e4:	46c0      	nop			@ (mov r8, r8)
 80055e6:	e004      	b.n	80055f2 <HAL_UART_IRQHandler+0x5f2>
      return;
 80055e8:	46c0      	nop			@ (mov r8, r8)
 80055ea:	e002      	b.n	80055f2 <HAL_UART_IRQHandler+0x5f2>
      return;
 80055ec:	46c0      	nop			@ (mov r8, r8)
 80055ee:	e000      	b.n	80055f2 <HAL_UART_IRQHandler+0x5f2>
    return;
 80055f0:	46c0      	nop			@ (mov r8, r8)
  }

}
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b02b      	add	sp, #172	@ 0xac
 80055f6:	bd90      	pop	{r4, r7, pc}
 80055f8:	fffffeff 	.word	0xfffffeff
 80055fc:	fffffedf 	.word	0xfffffedf

08005600 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005608:	46c0      	nop			@ (mov r8, r8)
 800560a:	46bd      	mov	sp, r7
 800560c:	b002      	add	sp, #8
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005618:	46c0      	nop			@ (mov r8, r8)
 800561a:	46bd      	mov	sp, r7
 800561c:	b002      	add	sp, #8
 800561e:	bd80      	pop	{r7, pc}

08005620 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005628:	46c0      	nop			@ (mov r8, r8)
 800562a:	46bd      	mov	sp, r7
 800562c:	b002      	add	sp, #8
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005638:	46c0      	nop			@ (mov r8, r8)
 800563a:	46bd      	mov	sp, r7
 800563c:	b002      	add	sp, #8
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005648:	46c0      	nop			@ (mov r8, r8)
 800564a:	46bd      	mov	sp, r7
 800564c:	b002      	add	sp, #8
 800564e:	bd80      	pop	{r7, pc}

08005650 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800565c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2280      	movs	r2, #128	@ 0x80
 8005662:	589b      	ldr	r3, [r3, r2]
 8005664:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	4313      	orrs	r3, r2
}
 800566c:	0018      	movs	r0, r3
 800566e:	46bd      	mov	sp, r7
 8005670:	b004      	add	sp, #16
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2284      	movs	r2, #132	@ 0x84
 8005680:	589b      	ldr	r3, [r3, r2]
}
 8005682:	0018      	movs	r0, r3
 8005684:	46bd      	mov	sp, r7
 8005686:	b002      	add	sp, #8
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800568c:	b5b0      	push	{r4, r5, r7, lr}
 800568e:	b08e      	sub	sp, #56	@ 0x38
 8005690:	af00      	add	r7, sp, #0
 8005692:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005694:	231a      	movs	r3, #26
 8005696:	2218      	movs	r2, #24
 8005698:	189b      	adds	r3, r3, r2
 800569a:	19db      	adds	r3, r3, r7
 800569c:	2200      	movs	r2, #0
 800569e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	431a      	orrs	r2, r3
 80056aa:	69fb      	ldr	r3, [r7, #28]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	431a      	orrs	r2, r3
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4ac3      	ldr	r2, [pc, #780]	@ (80059cc <UART_SetConfig+0x340>)
 80056c0:	4013      	ands	r3, r2
 80056c2:	0019      	movs	r1, r3
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056ca:	430a      	orrs	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	4abe      	ldr	r2, [pc, #760]	@ (80059d0 <UART_SetConfig+0x344>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	0019      	movs	r1, r3
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	68da      	ldr	r2, [r3, #12]
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	430a      	orrs	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056e6:	69fb      	ldr	r3, [r7, #28]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4ab8      	ldr	r2, [pc, #736]	@ (80059d4 <UART_SetConfig+0x348>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d004      	beq.n	8005700 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056fc:	4313      	orrs	r3, r2
 80056fe:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	4ab4      	ldr	r2, [pc, #720]	@ (80059d8 <UART_SetConfig+0x34c>)
 8005708:	4013      	ands	r3, r2
 800570a:	0019      	movs	r1, r3
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005712:	430a      	orrs	r2, r1
 8005714:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4ab0      	ldr	r2, [pc, #704]	@ (80059dc <UART_SetConfig+0x350>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d131      	bne.n	8005784 <UART_SetConfig+0xf8>
 8005720:	4baf      	ldr	r3, [pc, #700]	@ (80059e0 <UART_SetConfig+0x354>)
 8005722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005724:	2203      	movs	r2, #3
 8005726:	4013      	ands	r3, r2
 8005728:	2b03      	cmp	r3, #3
 800572a:	d01d      	beq.n	8005768 <UART_SetConfig+0xdc>
 800572c:	d823      	bhi.n	8005776 <UART_SetConfig+0xea>
 800572e:	2b02      	cmp	r3, #2
 8005730:	d00c      	beq.n	800574c <UART_SetConfig+0xc0>
 8005732:	d820      	bhi.n	8005776 <UART_SetConfig+0xea>
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <UART_SetConfig+0xb2>
 8005738:	2b01      	cmp	r3, #1
 800573a:	d00e      	beq.n	800575a <UART_SetConfig+0xce>
 800573c:	e01b      	b.n	8005776 <UART_SetConfig+0xea>
 800573e:	231b      	movs	r3, #27
 8005740:	2218      	movs	r2, #24
 8005742:	189b      	adds	r3, r3, r2
 8005744:	19db      	adds	r3, r3, r7
 8005746:	2201      	movs	r2, #1
 8005748:	701a      	strb	r2, [r3, #0]
 800574a:	e0b4      	b.n	80058b6 <UART_SetConfig+0x22a>
 800574c:	231b      	movs	r3, #27
 800574e:	2218      	movs	r2, #24
 8005750:	189b      	adds	r3, r3, r2
 8005752:	19db      	adds	r3, r3, r7
 8005754:	2202      	movs	r2, #2
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	e0ad      	b.n	80058b6 <UART_SetConfig+0x22a>
 800575a:	231b      	movs	r3, #27
 800575c:	2218      	movs	r2, #24
 800575e:	189b      	adds	r3, r3, r2
 8005760:	19db      	adds	r3, r3, r7
 8005762:	2204      	movs	r2, #4
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	e0a6      	b.n	80058b6 <UART_SetConfig+0x22a>
 8005768:	231b      	movs	r3, #27
 800576a:	2218      	movs	r2, #24
 800576c:	189b      	adds	r3, r3, r2
 800576e:	19db      	adds	r3, r3, r7
 8005770:	2208      	movs	r2, #8
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	e09f      	b.n	80058b6 <UART_SetConfig+0x22a>
 8005776:	231b      	movs	r3, #27
 8005778:	2218      	movs	r2, #24
 800577a:	189b      	adds	r3, r3, r2
 800577c:	19db      	adds	r3, r3, r7
 800577e:	2210      	movs	r2, #16
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	e098      	b.n	80058b6 <UART_SetConfig+0x22a>
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a96      	ldr	r2, [pc, #600]	@ (80059e4 <UART_SetConfig+0x358>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d131      	bne.n	80057f2 <UART_SetConfig+0x166>
 800578e:	4b94      	ldr	r3, [pc, #592]	@ (80059e0 <UART_SetConfig+0x354>)
 8005790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005792:	220c      	movs	r2, #12
 8005794:	4013      	ands	r3, r2
 8005796:	2b0c      	cmp	r3, #12
 8005798:	d01d      	beq.n	80057d6 <UART_SetConfig+0x14a>
 800579a:	d823      	bhi.n	80057e4 <UART_SetConfig+0x158>
 800579c:	2b08      	cmp	r3, #8
 800579e:	d00c      	beq.n	80057ba <UART_SetConfig+0x12e>
 80057a0:	d820      	bhi.n	80057e4 <UART_SetConfig+0x158>
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <UART_SetConfig+0x120>
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d00e      	beq.n	80057c8 <UART_SetConfig+0x13c>
 80057aa:	e01b      	b.n	80057e4 <UART_SetConfig+0x158>
 80057ac:	231b      	movs	r3, #27
 80057ae:	2218      	movs	r2, #24
 80057b0:	189b      	adds	r3, r3, r2
 80057b2:	19db      	adds	r3, r3, r7
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	e07d      	b.n	80058b6 <UART_SetConfig+0x22a>
 80057ba:	231b      	movs	r3, #27
 80057bc:	2218      	movs	r2, #24
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	19db      	adds	r3, r3, r7
 80057c2:	2202      	movs	r2, #2
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	e076      	b.n	80058b6 <UART_SetConfig+0x22a>
 80057c8:	231b      	movs	r3, #27
 80057ca:	2218      	movs	r2, #24
 80057cc:	189b      	adds	r3, r3, r2
 80057ce:	19db      	adds	r3, r3, r7
 80057d0:	2204      	movs	r2, #4
 80057d2:	701a      	strb	r2, [r3, #0]
 80057d4:	e06f      	b.n	80058b6 <UART_SetConfig+0x22a>
 80057d6:	231b      	movs	r3, #27
 80057d8:	2218      	movs	r2, #24
 80057da:	189b      	adds	r3, r3, r2
 80057dc:	19db      	adds	r3, r3, r7
 80057de:	2208      	movs	r2, #8
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	e068      	b.n	80058b6 <UART_SetConfig+0x22a>
 80057e4:	231b      	movs	r3, #27
 80057e6:	2218      	movs	r2, #24
 80057e8:	189b      	adds	r3, r3, r2
 80057ea:	19db      	adds	r3, r3, r7
 80057ec:	2210      	movs	r2, #16
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	e061      	b.n	80058b6 <UART_SetConfig+0x22a>
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a7c      	ldr	r2, [pc, #496]	@ (80059e8 <UART_SetConfig+0x35c>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d106      	bne.n	800580a <UART_SetConfig+0x17e>
 80057fc:	231b      	movs	r3, #27
 80057fe:	2218      	movs	r2, #24
 8005800:	189b      	adds	r3, r3, r2
 8005802:	19db      	adds	r3, r3, r7
 8005804:	2200      	movs	r2, #0
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	e055      	b.n	80058b6 <UART_SetConfig+0x22a>
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a77      	ldr	r2, [pc, #476]	@ (80059ec <UART_SetConfig+0x360>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d106      	bne.n	8005822 <UART_SetConfig+0x196>
 8005814:	231b      	movs	r3, #27
 8005816:	2218      	movs	r2, #24
 8005818:	189b      	adds	r3, r3, r2
 800581a:	19db      	adds	r3, r3, r7
 800581c:	2200      	movs	r2, #0
 800581e:	701a      	strb	r2, [r3, #0]
 8005820:	e049      	b.n	80058b6 <UART_SetConfig+0x22a>
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a6b      	ldr	r2, [pc, #428]	@ (80059d4 <UART_SetConfig+0x348>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d13e      	bne.n	80058aa <UART_SetConfig+0x21e>
 800582c:	4b6c      	ldr	r3, [pc, #432]	@ (80059e0 <UART_SetConfig+0x354>)
 800582e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005830:	23c0      	movs	r3, #192	@ 0xc0
 8005832:	011b      	lsls	r3, r3, #4
 8005834:	4013      	ands	r3, r2
 8005836:	22c0      	movs	r2, #192	@ 0xc0
 8005838:	0112      	lsls	r2, r2, #4
 800583a:	4293      	cmp	r3, r2
 800583c:	d027      	beq.n	800588e <UART_SetConfig+0x202>
 800583e:	22c0      	movs	r2, #192	@ 0xc0
 8005840:	0112      	lsls	r2, r2, #4
 8005842:	4293      	cmp	r3, r2
 8005844:	d82a      	bhi.n	800589c <UART_SetConfig+0x210>
 8005846:	2280      	movs	r2, #128	@ 0x80
 8005848:	0112      	lsls	r2, r2, #4
 800584a:	4293      	cmp	r3, r2
 800584c:	d011      	beq.n	8005872 <UART_SetConfig+0x1e6>
 800584e:	2280      	movs	r2, #128	@ 0x80
 8005850:	0112      	lsls	r2, r2, #4
 8005852:	4293      	cmp	r3, r2
 8005854:	d822      	bhi.n	800589c <UART_SetConfig+0x210>
 8005856:	2b00      	cmp	r3, #0
 8005858:	d004      	beq.n	8005864 <UART_SetConfig+0x1d8>
 800585a:	2280      	movs	r2, #128	@ 0x80
 800585c:	00d2      	lsls	r2, r2, #3
 800585e:	4293      	cmp	r3, r2
 8005860:	d00e      	beq.n	8005880 <UART_SetConfig+0x1f4>
 8005862:	e01b      	b.n	800589c <UART_SetConfig+0x210>
 8005864:	231b      	movs	r3, #27
 8005866:	2218      	movs	r2, #24
 8005868:	189b      	adds	r3, r3, r2
 800586a:	19db      	adds	r3, r3, r7
 800586c:	2200      	movs	r2, #0
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	e021      	b.n	80058b6 <UART_SetConfig+0x22a>
 8005872:	231b      	movs	r3, #27
 8005874:	2218      	movs	r2, #24
 8005876:	189b      	adds	r3, r3, r2
 8005878:	19db      	adds	r3, r3, r7
 800587a:	2202      	movs	r2, #2
 800587c:	701a      	strb	r2, [r3, #0]
 800587e:	e01a      	b.n	80058b6 <UART_SetConfig+0x22a>
 8005880:	231b      	movs	r3, #27
 8005882:	2218      	movs	r2, #24
 8005884:	189b      	adds	r3, r3, r2
 8005886:	19db      	adds	r3, r3, r7
 8005888:	2204      	movs	r2, #4
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	e013      	b.n	80058b6 <UART_SetConfig+0x22a>
 800588e:	231b      	movs	r3, #27
 8005890:	2218      	movs	r2, #24
 8005892:	189b      	adds	r3, r3, r2
 8005894:	19db      	adds	r3, r3, r7
 8005896:	2208      	movs	r2, #8
 8005898:	701a      	strb	r2, [r3, #0]
 800589a:	e00c      	b.n	80058b6 <UART_SetConfig+0x22a>
 800589c:	231b      	movs	r3, #27
 800589e:	2218      	movs	r2, #24
 80058a0:	189b      	adds	r3, r3, r2
 80058a2:	19db      	adds	r3, r3, r7
 80058a4:	2210      	movs	r2, #16
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	e005      	b.n	80058b6 <UART_SetConfig+0x22a>
 80058aa:	231b      	movs	r3, #27
 80058ac:	2218      	movs	r2, #24
 80058ae:	189b      	adds	r3, r3, r2
 80058b0:	19db      	adds	r3, r3, r7
 80058b2:	2210      	movs	r2, #16
 80058b4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a46      	ldr	r2, [pc, #280]	@ (80059d4 <UART_SetConfig+0x348>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d000      	beq.n	80058c2 <UART_SetConfig+0x236>
 80058c0:	e09a      	b.n	80059f8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058c2:	231b      	movs	r3, #27
 80058c4:	2218      	movs	r2, #24
 80058c6:	189b      	adds	r3, r3, r2
 80058c8:	19db      	adds	r3, r3, r7
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d01d      	beq.n	800590c <UART_SetConfig+0x280>
 80058d0:	dc20      	bgt.n	8005914 <UART_SetConfig+0x288>
 80058d2:	2b04      	cmp	r3, #4
 80058d4:	d015      	beq.n	8005902 <UART_SetConfig+0x276>
 80058d6:	dc1d      	bgt.n	8005914 <UART_SetConfig+0x288>
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <UART_SetConfig+0x256>
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d005      	beq.n	80058ec <UART_SetConfig+0x260>
 80058e0:	e018      	b.n	8005914 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e2:	f7fe ffcb 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 80058e6:	0003      	movs	r3, r0
 80058e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80058ea:	e01c      	b.n	8005926 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ec:	4b3c      	ldr	r3, [pc, #240]	@ (80059e0 <UART_SetConfig+0x354>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2210      	movs	r2, #16
 80058f2:	4013      	ands	r3, r2
 80058f4:	d002      	beq.n	80058fc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80058f6:	4b3e      	ldr	r3, [pc, #248]	@ (80059f0 <UART_SetConfig+0x364>)
 80058f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058fa:	e014      	b.n	8005926 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80058fc:	4b3d      	ldr	r3, [pc, #244]	@ (80059f4 <UART_SetConfig+0x368>)
 80058fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005900:	e011      	b.n	8005926 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005902:	f7fe ff2b 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8005906:	0003      	movs	r3, r0
 8005908:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800590a:	e00c      	b.n	8005926 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800590c:	2380      	movs	r3, #128	@ 0x80
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005912:	e008      	b.n	8005926 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8005914:	2300      	movs	r3, #0
 8005916:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005918:	231a      	movs	r3, #26
 800591a:	2218      	movs	r2, #24
 800591c:	189b      	adds	r3, r3, r2
 800591e:	19db      	adds	r3, r3, r7
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
        break;
 8005924:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d100      	bne.n	800592e <UART_SetConfig+0x2a2>
 800592c:	e133      	b.n	8005b96 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	0013      	movs	r3, r2
 8005934:	005b      	lsls	r3, r3, #1
 8005936:	189b      	adds	r3, r3, r2
 8005938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800593a:	429a      	cmp	r2, r3
 800593c:	d305      	bcc.n	800594a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005944:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005946:	429a      	cmp	r2, r3
 8005948:	d906      	bls.n	8005958 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800594a:	231a      	movs	r3, #26
 800594c:	2218      	movs	r2, #24
 800594e:	189b      	adds	r3, r3, r2
 8005950:	19db      	adds	r3, r3, r7
 8005952:	2201      	movs	r2, #1
 8005954:	701a      	strb	r2, [r3, #0]
 8005956:	e11e      	b.n	8005b96 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595a:	613b      	str	r3, [r7, #16]
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	6939      	ldr	r1, [r7, #16]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	000b      	movs	r3, r1
 8005966:	0e1b      	lsrs	r3, r3, #24
 8005968:	0010      	movs	r0, r2
 800596a:	0205      	lsls	r5, r0, #8
 800596c:	431d      	orrs	r5, r3
 800596e:	000b      	movs	r3, r1
 8005970:	021c      	lsls	r4, r3, #8
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	085b      	lsrs	r3, r3, #1
 8005978:	60bb      	str	r3, [r7, #8]
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	68b8      	ldr	r0, [r7, #8]
 8005980:	68f9      	ldr	r1, [r7, #12]
 8005982:	1900      	adds	r0, r0, r4
 8005984:	4169      	adcs	r1, r5
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	603b      	str	r3, [r7, #0]
 800598c:	2300      	movs	r3, #0
 800598e:	607b      	str	r3, [r7, #4]
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f7fa fc56 	bl	8000244 <__aeabi_uldivmod>
 8005998:	0002      	movs	r2, r0
 800599a:	000b      	movs	r3, r1
 800599c:	0013      	movs	r3, r2
 800599e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80059a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059a2:	23c0      	movs	r3, #192	@ 0xc0
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d309      	bcc.n	80059be <UART_SetConfig+0x332>
 80059aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059ac:	2380      	movs	r3, #128	@ 0x80
 80059ae:	035b      	lsls	r3, r3, #13
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d204      	bcs.n	80059be <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80059b4:	69fb      	ldr	r3, [r7, #28]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059ba:	60da      	str	r2, [r3, #12]
 80059bc:	e0eb      	b.n	8005b96 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80059be:	231a      	movs	r3, #26
 80059c0:	2218      	movs	r2, #24
 80059c2:	189b      	adds	r3, r3, r2
 80059c4:	19db      	adds	r3, r3, r7
 80059c6:	2201      	movs	r2, #1
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	e0e4      	b.n	8005b96 <UART_SetConfig+0x50a>
 80059cc:	efff69f3 	.word	0xefff69f3
 80059d0:	ffffcfff 	.word	0xffffcfff
 80059d4:	40004800 	.word	0x40004800
 80059d8:	fffff4ff 	.word	0xfffff4ff
 80059dc:	40013800 	.word	0x40013800
 80059e0:	40021000 	.word	0x40021000
 80059e4:	40004400 	.word	0x40004400
 80059e8:	40004c00 	.word	0x40004c00
 80059ec:	40005000 	.word	0x40005000
 80059f0:	003d0900 	.word	0x003d0900
 80059f4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	2380      	movs	r3, #128	@ 0x80
 80059fe:	021b      	lsls	r3, r3, #8
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d000      	beq.n	8005a06 <UART_SetConfig+0x37a>
 8005a04:	e070      	b.n	8005ae8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8005a06:	231b      	movs	r3, #27
 8005a08:	2218      	movs	r2, #24
 8005a0a:	189b      	adds	r3, r3, r2
 8005a0c:	19db      	adds	r3, r3, r7
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d822      	bhi.n	8005a5a <UART_SetConfig+0x3ce>
 8005a14:	009a      	lsls	r2, r3, #2
 8005a16:	4b67      	ldr	r3, [pc, #412]	@ (8005bb4 <UART_SetConfig+0x528>)
 8005a18:	18d3      	adds	r3, r2, r3
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a1e:	f7fe ff2d 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8005a22:	0003      	movs	r3, r0
 8005a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a26:	e021      	b.n	8005a6c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a28:	f7fe ff3e 	bl	80048a8 <HAL_RCC_GetPCLK2Freq>
 8005a2c:	0003      	movs	r3, r0
 8005a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a30:	e01c      	b.n	8005a6c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a32:	4b61      	ldr	r3, [pc, #388]	@ (8005bb8 <UART_SetConfig+0x52c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	2210      	movs	r2, #16
 8005a38:	4013      	ands	r3, r2
 8005a3a:	d002      	beq.n	8005a42 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005a3c:	4b5f      	ldr	r3, [pc, #380]	@ (8005bbc <UART_SetConfig+0x530>)
 8005a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005a40:	e014      	b.n	8005a6c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8005a42:	4b5f      	ldr	r3, [pc, #380]	@ (8005bc0 <UART_SetConfig+0x534>)
 8005a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a46:	e011      	b.n	8005a6c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005a48:	f7fe fe88 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8005a4c:	0003      	movs	r3, r0
 8005a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a50:	e00c      	b.n	8005a6c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005a52:	2380      	movs	r3, #128	@ 0x80
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005a58:	e008      	b.n	8005a6c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005a5e:	231a      	movs	r3, #26
 8005a60:	2218      	movs	r2, #24
 8005a62:	189b      	adds	r3, r3, r2
 8005a64:	19db      	adds	r3, r3, r7
 8005a66:	2201      	movs	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
        break;
 8005a6a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d100      	bne.n	8005a74 <UART_SetConfig+0x3e8>
 8005a72:	e090      	b.n	8005b96 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a76:	005a      	lsls	r2, r3, #1
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	085b      	lsrs	r3, r3, #1
 8005a7e:	18d2      	adds	r2, r2, r3
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	0019      	movs	r1, r3
 8005a86:	0010      	movs	r0, r2
 8005a88:	f7fa fb50 	bl	800012c <__udivsi3>
 8005a8c:	0003      	movs	r3, r0
 8005a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a92:	2b0f      	cmp	r3, #15
 8005a94:	d921      	bls.n	8005ada <UART_SetConfig+0x44e>
 8005a96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a98:	2380      	movs	r3, #128	@ 0x80
 8005a9a:	025b      	lsls	r3, r3, #9
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d21c      	bcs.n	8005ada <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	200e      	movs	r0, #14
 8005aa6:	2418      	movs	r4, #24
 8005aa8:	1903      	adds	r3, r0, r4
 8005aaa:	19db      	adds	r3, r3, r7
 8005aac:	210f      	movs	r1, #15
 8005aae:	438a      	bics	r2, r1
 8005ab0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab4:	085b      	lsrs	r3, r3, #1
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	2207      	movs	r2, #7
 8005aba:	4013      	ands	r3, r2
 8005abc:	b299      	uxth	r1, r3
 8005abe:	1903      	adds	r3, r0, r4
 8005ac0:	19db      	adds	r3, r3, r7
 8005ac2:	1902      	adds	r2, r0, r4
 8005ac4:	19d2      	adds	r2, r2, r7
 8005ac6:	8812      	ldrh	r2, [r2, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	1902      	adds	r2, r0, r4
 8005ad2:	19d2      	adds	r2, r2, r7
 8005ad4:	8812      	ldrh	r2, [r2, #0]
 8005ad6:	60da      	str	r2, [r3, #12]
 8005ad8:	e05d      	b.n	8005b96 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005ada:	231a      	movs	r3, #26
 8005adc:	2218      	movs	r2, #24
 8005ade:	189b      	adds	r3, r3, r2
 8005ae0:	19db      	adds	r3, r3, r7
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	701a      	strb	r2, [r3, #0]
 8005ae6:	e056      	b.n	8005b96 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005ae8:	231b      	movs	r3, #27
 8005aea:	2218      	movs	r2, #24
 8005aec:	189b      	adds	r3, r3, r2
 8005aee:	19db      	adds	r3, r3, r7
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	d822      	bhi.n	8005b3c <UART_SetConfig+0x4b0>
 8005af6:	009a      	lsls	r2, r3, #2
 8005af8:	4b32      	ldr	r3, [pc, #200]	@ (8005bc4 <UART_SetConfig+0x538>)
 8005afa:	18d3      	adds	r3, r2, r3
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b00:	f7fe febc 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8005b04:	0003      	movs	r3, r0
 8005b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b08:	e021      	b.n	8005b4e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b0a:	f7fe fecd 	bl	80048a8 <HAL_RCC_GetPCLK2Freq>
 8005b0e:	0003      	movs	r3, r0
 8005b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b12:	e01c      	b.n	8005b4e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b14:	4b28      	ldr	r3, [pc, #160]	@ (8005bb8 <UART_SetConfig+0x52c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	2210      	movs	r2, #16
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d002      	beq.n	8005b24 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005b1e:	4b27      	ldr	r3, [pc, #156]	@ (8005bbc <UART_SetConfig+0x530>)
 8005b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b22:	e014      	b.n	8005b4e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005b24:	4b26      	ldr	r3, [pc, #152]	@ (8005bc0 <UART_SetConfig+0x534>)
 8005b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b28:	e011      	b.n	8005b4e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b2a:	f7fe fe17 	bl	800475c <HAL_RCC_GetSysClockFreq>
 8005b2e:	0003      	movs	r3, r0
 8005b30:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b32:	e00c      	b.n	8005b4e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b34:	2380      	movs	r3, #128	@ 0x80
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005b3a:	e008      	b.n	8005b4e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8005b40:	231a      	movs	r3, #26
 8005b42:	2218      	movs	r2, #24
 8005b44:	189b      	adds	r3, r3, r2
 8005b46:	19db      	adds	r3, r3, r7
 8005b48:	2201      	movs	r2, #1
 8005b4a:	701a      	strb	r2, [r3, #0]
        break;
 8005b4c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8005b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d020      	beq.n	8005b96 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	085a      	lsrs	r2, r3, #1
 8005b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5c:	18d2      	adds	r2, r2, r3
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	0019      	movs	r1, r3
 8005b64:	0010      	movs	r0, r2
 8005b66:	f7fa fae1 	bl	800012c <__udivsi3>
 8005b6a:	0003      	movs	r3, r0
 8005b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b70:	2b0f      	cmp	r3, #15
 8005b72:	d90a      	bls.n	8005b8a <UART_SetConfig+0x4fe>
 8005b74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b76:	2380      	movs	r3, #128	@ 0x80
 8005b78:	025b      	lsls	r3, r3, #9
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d205      	bcs.n	8005b8a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	60da      	str	r2, [r3, #12]
 8005b88:	e005      	b.n	8005b96 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8005b8a:	231a      	movs	r3, #26
 8005b8c:	2218      	movs	r2, #24
 8005b8e:	189b      	adds	r3, r3, r2
 8005b90:	19db      	adds	r3, r3, r7
 8005b92:	2201      	movs	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005ba2:	231a      	movs	r3, #26
 8005ba4:	2218      	movs	r2, #24
 8005ba6:	189b      	adds	r3, r3, r2
 8005ba8:	19db      	adds	r3, r3, r7
 8005baa:	781b      	ldrb	r3, [r3, #0]
}
 8005bac:	0018      	movs	r0, r3
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	b00e      	add	sp, #56	@ 0x38
 8005bb2:	bdb0      	pop	{r4, r5, r7, pc}
 8005bb4:	08009400 	.word	0x08009400
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	003d0900 	.word	0x003d0900
 8005bc0:	00f42400 	.word	0x00f42400
 8005bc4:	08009424 	.word	0x08009424

08005bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd4:	2208      	movs	r2, #8
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	d00b      	beq.n	8005bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	4a4a      	ldr	r2, [pc, #296]	@ (8005d0c <UART_AdvFeatureConfig+0x144>)
 8005be2:	4013      	ands	r3, r2
 8005be4:	0019      	movs	r1, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	d00b      	beq.n	8005c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	4a43      	ldr	r2, [pc, #268]	@ (8005d10 <UART_AdvFeatureConfig+0x148>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	0019      	movs	r1, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	430a      	orrs	r2, r1
 8005c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c18:	2202      	movs	r2, #2
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	d00b      	beq.n	8005c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	4a3b      	ldr	r2, [pc, #236]	@ (8005d14 <UART_AdvFeatureConfig+0x14c>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	0019      	movs	r1, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3a:	2204      	movs	r2, #4
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	d00b      	beq.n	8005c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4a34      	ldr	r2, [pc, #208]	@ (8005d18 <UART_AdvFeatureConfig+0x150>)
 8005c48:	4013      	ands	r3, r2
 8005c4a:	0019      	movs	r1, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	430a      	orrs	r2, r1
 8005c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5c:	2210      	movs	r2, #16
 8005c5e:	4013      	ands	r3, r2
 8005c60:	d00b      	beq.n	8005c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	4a2c      	ldr	r2, [pc, #176]	@ (8005d1c <UART_AdvFeatureConfig+0x154>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	0019      	movs	r1, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7e:	2220      	movs	r2, #32
 8005c80:	4013      	ands	r3, r2
 8005c82:	d00b      	beq.n	8005c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	4a25      	ldr	r2, [pc, #148]	@ (8005d20 <UART_AdvFeatureConfig+0x158>)
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	0019      	movs	r1, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca0:	2240      	movs	r2, #64	@ 0x40
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	d01d      	beq.n	8005ce2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	4a1d      	ldr	r2, [pc, #116]	@ (8005d24 <UART_AdvFeatureConfig+0x15c>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	0019      	movs	r1, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	430a      	orrs	r2, r1
 8005cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005cc2:	2380      	movs	r3, #128	@ 0x80
 8005cc4:	035b      	lsls	r3, r3, #13
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d10b      	bne.n	8005ce2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	4a15      	ldr	r2, [pc, #84]	@ (8005d28 <UART_AdvFeatureConfig+0x160>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	0019      	movs	r1, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	2280      	movs	r2, #128	@ 0x80
 8005ce8:	4013      	ands	r3, r2
 8005cea:	d00b      	beq.n	8005d04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8005d2c <UART_AdvFeatureConfig+0x164>)
 8005cf4:	4013      	ands	r3, r2
 8005cf6:	0019      	movs	r1, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	430a      	orrs	r2, r1
 8005d02:	605a      	str	r2, [r3, #4]
  }
}
 8005d04:	46c0      	nop			@ (mov r8, r8)
 8005d06:	46bd      	mov	sp, r7
 8005d08:	b002      	add	sp, #8
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	ffff7fff 	.word	0xffff7fff
 8005d10:	fffdffff 	.word	0xfffdffff
 8005d14:	fffeffff 	.word	0xfffeffff
 8005d18:	fffbffff 	.word	0xfffbffff
 8005d1c:	ffffefff 	.word	0xffffefff
 8005d20:	ffffdfff 	.word	0xffffdfff
 8005d24:	ffefffff 	.word	0xffefffff
 8005d28:	ff9fffff 	.word	0xff9fffff
 8005d2c:	fff7ffff 	.word	0xfff7ffff

08005d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b092      	sub	sp, #72	@ 0x48
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2284      	movs	r2, #132	@ 0x84
 8005d3c:	2100      	movs	r1, #0
 8005d3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d40:	f7fc fbb4 	bl	80024ac <HAL_GetTick>
 8005d44:	0003      	movs	r3, r0
 8005d46:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2208      	movs	r2, #8
 8005d50:	4013      	ands	r3, r2
 8005d52:	2b08      	cmp	r3, #8
 8005d54:	d12c      	bne.n	8005db0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d58:	2280      	movs	r2, #128	@ 0x80
 8005d5a:	0391      	lsls	r1, r2, #14
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	4a46      	ldr	r2, [pc, #280]	@ (8005e78 <UART_CheckIdleState+0x148>)
 8005d60:	9200      	str	r2, [sp, #0]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f000 f88c 	bl	8005e80 <UART_WaitOnFlagUntilTimeout>
 8005d68:	1e03      	subs	r3, r0, #0
 8005d6a:	d021      	beq.n	8005db0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d70:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d76:	2301      	movs	r3, #1
 8005d78:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7c:	f383 8810 	msr	PRIMASK, r3
}
 8005d80:	46c0      	nop			@ (mov r8, r8)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2180      	movs	r1, #128	@ 0x80
 8005d8e:	438a      	bics	r2, r1
 8005d90:	601a      	str	r2, [r3, #0]
 8005d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d98:	f383 8810 	msr	PRIMASK, r3
}
 8005d9c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2278      	movs	r2, #120	@ 0x78
 8005da8:	2100      	movs	r1, #0
 8005daa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e05f      	b.n	8005e70 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2204      	movs	r2, #4
 8005db8:	4013      	ands	r3, r2
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	d146      	bne.n	8005e4c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dc0:	2280      	movs	r2, #128	@ 0x80
 8005dc2:	03d1      	lsls	r1, r2, #15
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4a2c      	ldr	r2, [pc, #176]	@ (8005e78 <UART_CheckIdleState+0x148>)
 8005dc8:	9200      	str	r2, [sp, #0]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f000 f858 	bl	8005e80 <UART_WaitOnFlagUntilTimeout>
 8005dd0:	1e03      	subs	r3, r0, #0
 8005dd2:	d03b      	beq.n	8005e4c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8005dd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8005dda:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ddc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dde:	2301      	movs	r3, #1
 8005de0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	f383 8810 	msr	PRIMASK, r3
}
 8005de8:	46c0      	nop			@ (mov r8, r8)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4921      	ldr	r1, [pc, #132]	@ (8005e7c <UART_CheckIdleState+0x14c>)
 8005df6:	400a      	ands	r2, r1
 8005df8:	601a      	str	r2, [r3, #0]
 8005dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dfc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f383 8810 	msr	PRIMASK, r3
}
 8005e04:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e06:	f3ef 8310 	mrs	r3, PRIMASK
 8005e0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005e0c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e10:	2301      	movs	r3, #1
 8005e12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f383 8810 	msr	PRIMASK, r3
}
 8005e1a:	46c0      	nop			@ (mov r8, r8)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	689a      	ldr	r2, [r3, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2101      	movs	r1, #1
 8005e28:	438a      	bics	r2, r1
 8005e2a:	609a      	str	r2, [r3, #8]
 8005e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	f383 8810 	msr	PRIMASK, r3
}
 8005e36:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2280      	movs	r2, #128	@ 0x80
 8005e3c:	2120      	movs	r1, #32
 8005e3e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2278      	movs	r2, #120	@ 0x78
 8005e44:	2100      	movs	r1, #0
 8005e46:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e011      	b.n	8005e70 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2280      	movs	r2, #128	@ 0x80
 8005e56:	2120      	movs	r1, #32
 8005e58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2278      	movs	r2, #120	@ 0x78
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	0018      	movs	r0, r3
 8005e72:	46bd      	mov	sp, r7
 8005e74:	b010      	add	sp, #64	@ 0x40
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	01ffffff 	.word	0x01ffffff
 8005e7c:	fffffedf 	.word	0xfffffedf

08005e80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	603b      	str	r3, [r7, #0]
 8005e8c:	1dfb      	adds	r3, r7, #7
 8005e8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e90:	e051      	b.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	3301      	adds	r3, #1
 8005e96:	d04e      	beq.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e98:	f7fc fb08 	bl	80024ac <HAL_GetTick>
 8005e9c:	0002      	movs	r2, r0
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	69ba      	ldr	r2, [r7, #24]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d302      	bcc.n	8005eae <UART_WaitOnFlagUntilTimeout+0x2e>
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e051      	b.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2204      	movs	r2, #4
 8005eba:	4013      	ands	r3, r2
 8005ebc:	d03b      	beq.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b80      	cmp	r3, #128	@ 0x80
 8005ec2:	d038      	beq.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xb6>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b40      	cmp	r3, #64	@ 0x40
 8005ec8:	d035      	beq.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	2208      	movs	r2, #8
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d111      	bne.n	8005efc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2208      	movs	r2, #8
 8005ede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	0018      	movs	r0, r3
 8005ee4:	f000 f900 	bl	80060e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2284      	movs	r2, #132	@ 0x84
 8005eec:	2108      	movs	r1, #8
 8005eee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2278      	movs	r2, #120	@ 0x78
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e02c      	b.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	69da      	ldr	r2, [r3, #28]
 8005f02:	2380      	movs	r3, #128	@ 0x80
 8005f04:	011b      	lsls	r3, r3, #4
 8005f06:	401a      	ands	r2, r3
 8005f08:	2380      	movs	r3, #128	@ 0x80
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d112      	bne.n	8005f36 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2280      	movs	r2, #128	@ 0x80
 8005f16:	0112      	lsls	r2, r2, #4
 8005f18:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	0018      	movs	r0, r3
 8005f1e:	f000 f8e3 	bl	80060e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2284      	movs	r2, #132	@ 0x84
 8005f26:	2120      	movs	r1, #32
 8005f28:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2278      	movs	r2, #120	@ 0x78
 8005f2e:	2100      	movs	r1, #0
 8005f30:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e00f      	b.n	8005f56 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	69db      	ldr	r3, [r3, #28]
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	425a      	negs	r2, r3
 8005f46:	4153      	adcs	r3, r2
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	001a      	movs	r2, r3
 8005f4c:	1dfb      	adds	r3, r7, #7
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d09e      	beq.n	8005e92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	0018      	movs	r0, r3
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	b004      	add	sp, #16
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b090      	sub	sp, #64	@ 0x40
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	60f8      	str	r0, [r7, #12]
 8005f68:	60b9      	str	r1, [r7, #8]
 8005f6a:	1dbb      	adds	r3, r7, #6
 8005f6c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	1dba      	adds	r2, r7, #6
 8005f78:	2158      	movs	r1, #88	@ 0x58
 8005f7a:	8812      	ldrh	r2, [r2, #0]
 8005f7c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2284      	movs	r2, #132	@ 0x84
 8005f82:	2100      	movs	r1, #0
 8005f84:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2280      	movs	r2, #128	@ 0x80
 8005f8a:	2122      	movs	r1, #34	@ 0x22
 8005f8c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d028      	beq.n	8005fe8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f9a:	4a3e      	ldr	r2, [pc, #248]	@ (8006094 <UART_Start_Receive_DMA+0x134>)
 8005f9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fa2:	4a3d      	ldr	r2, [pc, #244]	@ (8006098 <UART_Start_Receive_DMA+0x138>)
 8005fa4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005faa:	4a3c      	ldr	r2, [pc, #240]	@ (800609c <UART_Start_Receive_DMA+0x13c>)
 8005fac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	3324      	adds	r3, #36	@ 0x24
 8005fc0:	0019      	movs	r1, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fc6:	001a      	movs	r2, r3
 8005fc8:	1dbb      	adds	r3, r7, #6
 8005fca:	881b      	ldrh	r3, [r3, #0]
 8005fcc:	f7fc fbfa 	bl	80027c4 <HAL_DMA_Start_IT>
 8005fd0:	1e03      	subs	r3, r0, #0
 8005fd2:	d009      	beq.n	8005fe8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2284      	movs	r2, #132	@ 0x84
 8005fd8:	2110      	movs	r1, #16
 8005fda:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2280      	movs	r2, #128	@ 0x80
 8005fe0:	2120      	movs	r1, #32
 8005fe2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e050      	b.n	800608a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d019      	beq.n	8006024 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ff0:	f3ef 8310 	mrs	r3, PRIMASK
 8005ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8005ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006000:	f383 8810 	msr	PRIMASK, r3
}
 8006004:	46c0      	nop			@ (mov r8, r8)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2180      	movs	r1, #128	@ 0x80
 8006012:	0049      	lsls	r1, r1, #1
 8006014:	430a      	orrs	r2, r1
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800601a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800601c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601e:	f383 8810 	msr	PRIMASK, r3
}
 8006022:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006024:	f3ef 8310 	mrs	r3, PRIMASK
 8006028:	613b      	str	r3, [r7, #16]
  return(result);
 800602a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800602c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800602e:	2301      	movs	r3, #1
 8006030:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	f383 8810 	msr	PRIMASK, r3
}
 8006038:	46c0      	nop			@ (mov r8, r8)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2101      	movs	r1, #1
 8006046:	430a      	orrs	r2, r1
 8006048:	609a      	str	r2, [r3, #8]
 800604a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	f383 8810 	msr	PRIMASK, r3
}
 8006054:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006056:	f3ef 8310 	mrs	r3, PRIMASK
 800605a:	61fb      	str	r3, [r7, #28]
  return(result);
 800605c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006060:	2301      	movs	r3, #1
 8006062:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	f383 8810 	msr	PRIMASK, r3
}
 800606a:	46c0      	nop			@ (mov r8, r8)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2140      	movs	r1, #64	@ 0x40
 8006078:	430a      	orrs	r2, r1
 800607a:	609a      	str	r2, [r3, #8]
 800607c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800607e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006082:	f383 8810 	msr	PRIMASK, r3
}
 8006086:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	0018      	movs	r0, r3
 800608c:	46bd      	mov	sp, r7
 800608e:	b010      	add	sp, #64	@ 0x40
 8006090:	bd80      	pop	{r7, pc}
 8006092:	46c0      	nop			@ (mov r8, r8)
 8006094:	08006269 	.word	0x08006269
 8006098:	080063d1 	.word	0x080063d1
 800609c:	0800644f 	.word	0x0800644f

080060a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060a8:	f3ef 8310 	mrs	r3, PRIMASK
 80060ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80060ae:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	2301      	movs	r3, #1
 80060b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f383 8810 	msr	PRIMASK, r3
}
 80060bc:	46c0      	nop			@ (mov r8, r8)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	21c0      	movs	r1, #192	@ 0xc0
 80060ca:	438a      	bics	r2, r1
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	f383 8810 	msr	PRIMASK, r3
}
 80060d8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2220      	movs	r2, #32
 80060de:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80060e0:	46c0      	nop			@ (mov r8, r8)
 80060e2:	46bd      	mov	sp, r7
 80060e4:	b006      	add	sp, #24
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b08e      	sub	sp, #56	@ 0x38
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060f0:	f3ef 8310 	mrs	r3, PRIMASK
 80060f4:	617b      	str	r3, [r7, #20]
  return(result);
 80060f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80060fa:	2301      	movs	r3, #1
 80060fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	f383 8810 	msr	PRIMASK, r3
}
 8006104:	46c0      	nop			@ (mov r8, r8)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4926      	ldr	r1, [pc, #152]	@ (80061ac <UART_EndRxTransfer+0xc4>)
 8006112:	400a      	ands	r2, r1
 8006114:	601a      	str	r2, [r3, #0]
 8006116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006118:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	f383 8810 	msr	PRIMASK, r3
}
 8006120:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006122:	f3ef 8310 	mrs	r3, PRIMASK
 8006126:	623b      	str	r3, [r7, #32]
  return(result);
 8006128:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612a:	633b      	str	r3, [r7, #48]	@ 0x30
 800612c:	2301      	movs	r3, #1
 800612e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	f383 8810 	msr	PRIMASK, r3
}
 8006136:	46c0      	nop			@ (mov r8, r8)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689a      	ldr	r2, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2101      	movs	r1, #1
 8006144:	438a      	bics	r2, r1
 8006146:	609a      	str	r2, [r3, #8]
 8006148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800614c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614e:	f383 8810 	msr	PRIMASK, r3
}
 8006152:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006158:	2b01      	cmp	r3, #1
 800615a:	d118      	bne.n	800618e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800615c:	f3ef 8310 	mrs	r3, PRIMASK
 8006160:	60bb      	str	r3, [r7, #8]
  return(result);
 8006162:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006164:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006166:	2301      	movs	r3, #1
 8006168:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f383 8810 	msr	PRIMASK, r3
}
 8006170:	46c0      	nop			@ (mov r8, r8)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2110      	movs	r1, #16
 800617e:	438a      	bics	r2, r1
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006184:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f383 8810 	msr	PRIMASK, r3
}
 800618c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2280      	movs	r2, #128	@ 0x80
 8006192:	2120      	movs	r1, #32
 8006194:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80061a2:	46c0      	nop			@ (mov r8, r8)
 80061a4:	46bd      	mov	sp, r7
 80061a6:	b00e      	add	sp, #56	@ 0x38
 80061a8:	bd80      	pop	{r7, pc}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	fffffedf 	.word	0xfffffedf

080061b0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08c      	sub	sp, #48	@ 0x30
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2220      	movs	r2, #32
 80061c6:	4013      	ands	r3, r2
 80061c8:	d135      	bne.n	8006236 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80061ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061cc:	2252      	movs	r2, #82	@ 0x52
 80061ce:	2100      	movs	r1, #0
 80061d0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d2:	f3ef 8310 	mrs	r3, PRIMASK
 80061d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80061d8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061dc:	2301      	movs	r3, #1
 80061de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f383 8810 	msr	PRIMASK, r3
}
 80061e6:	46c0      	nop			@ (mov r8, r8)
 80061e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2180      	movs	r1, #128	@ 0x80
 80061f4:	438a      	bics	r2, r1
 80061f6:	609a      	str	r2, [r3, #8]
 80061f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	f383 8810 	msr	PRIMASK, r3
}
 8006202:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006204:	f3ef 8310 	mrs	r3, PRIMASK
 8006208:	61bb      	str	r3, [r7, #24]
  return(result);
 800620a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800620c:	627b      	str	r3, [r7, #36]	@ 0x24
 800620e:	2301      	movs	r3, #1
 8006210:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	f383 8810 	msr	PRIMASK, r3
}
 8006218:	46c0      	nop			@ (mov r8, r8)
 800621a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2140      	movs	r1, #64	@ 0x40
 8006226:	430a      	orrs	r2, r1
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	f383 8810 	msr	PRIMASK, r3
}
 8006234:	e004      	b.n	8006240 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8006236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006238:	0018      	movs	r0, r3
 800623a:	f7ff f9e1 	bl	8005600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800623e:	46c0      	nop			@ (mov r8, r8)
 8006240:	46c0      	nop			@ (mov r8, r8)
 8006242:	46bd      	mov	sp, r7
 8006244:	b00c      	add	sp, #48	@ 0x30
 8006246:	bd80      	pop	{r7, pc}

08006248 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006254:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	0018      	movs	r0, r3
 800625a:	f7ff f9d9 	bl	8005610 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800625e:	46c0      	nop			@ (mov r8, r8)
 8006260:	46bd      	mov	sp, r7
 8006262:	b004      	add	sp, #16
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b094      	sub	sp, #80	@ 0x50
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006274:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2220      	movs	r2, #32
 800627e:	4013      	ands	r3, r2
 8006280:	d16f      	bne.n	8006362 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8006282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006284:	225a      	movs	r2, #90	@ 0x5a
 8006286:	2100      	movs	r1, #0
 8006288:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800628a:	f3ef 8310 	mrs	r3, PRIMASK
 800628e:	617b      	str	r3, [r7, #20]
  return(result);
 8006290:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006292:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006294:	2301      	movs	r3, #1
 8006296:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	f383 8810 	msr	PRIMASK, r3
}
 800629e:	46c0      	nop			@ (mov r8, r8)
 80062a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4948      	ldr	r1, [pc, #288]	@ (80063cc <UART_DMAReceiveCplt+0x164>)
 80062ac:	400a      	ands	r2, r1
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	f383 8810 	msr	PRIMASK, r3
}
 80062ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062bc:	f3ef 8310 	mrs	r3, PRIMASK
 80062c0:	623b      	str	r3, [r7, #32]
  return(result);
 80062c2:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80062c6:	2301      	movs	r3, #1
 80062c8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062cc:	f383 8810 	msr	PRIMASK, r3
}
 80062d0:	46c0      	nop			@ (mov r8, r8)
 80062d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2101      	movs	r1, #1
 80062de:	438a      	bics	r2, r1
 80062e0:	609a      	str	r2, [r3, #8]
 80062e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e8:	f383 8810 	msr	PRIMASK, r3
}
 80062ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ee:	f3ef 8310 	mrs	r3, PRIMASK
 80062f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80062f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80062f8:	2301      	movs	r3, #1
 80062fa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fe:	f383 8810 	msr	PRIMASK, r3
}
 8006302:	46c0      	nop			@ (mov r8, r8)
 8006304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2140      	movs	r1, #64	@ 0x40
 8006310:	438a      	bics	r2, r1
 8006312:	609a      	str	r2, [r3, #8]
 8006314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006316:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800631a:	f383 8810 	msr	PRIMASK, r3
}
 800631e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006322:	2280      	movs	r2, #128	@ 0x80
 8006324:	2120      	movs	r1, #32
 8006326:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800632a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800632c:	2b01      	cmp	r3, #1
 800632e:	d118      	bne.n	8006362 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006330:	f3ef 8310 	mrs	r3, PRIMASK
 8006334:	60bb      	str	r3, [r7, #8]
  return(result);
 8006336:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800633a:	2301      	movs	r3, #1
 800633c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f383 8810 	msr	PRIMASK, r3
}
 8006344:	46c0      	nop			@ (mov r8, r8)
 8006346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2110      	movs	r1, #16
 8006352:	438a      	bics	r2, r1
 8006354:	601a      	str	r2, [r3, #0]
 8006356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006358:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f383 8810 	msr	PRIMASK, r3
}
 8006360:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006364:	2200      	movs	r2, #0
 8006366:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800636a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800636c:	2b01      	cmp	r3, #1
 800636e:	d124      	bne.n	80063ba <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8006370:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006372:	225a      	movs	r2, #90	@ 0x5a
 8006374:	2100      	movs	r1, #0
 8006376:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	213a      	movs	r1, #58	@ 0x3a
 8006380:	187b      	adds	r3, r7, r1
 8006382:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8006384:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006386:	2258      	movs	r2, #88	@ 0x58
 8006388:	5a9b      	ldrh	r3, [r3, r2]
 800638a:	187a      	adds	r2, r7, r1
 800638c:	8812      	ldrh	r2, [r2, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d204      	bcs.n	800639c <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8006392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006394:	187a      	adds	r2, r7, r1
 8006396:	215a      	movs	r1, #90	@ 0x5a
 8006398:	8812      	ldrh	r2, [r2, #0]
 800639a:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800639c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800639e:	2258      	movs	r2, #88	@ 0x58
 80063a0:	5a9a      	ldrh	r2, [r3, r2]
 80063a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063a4:	215a      	movs	r1, #90	@ 0x5a
 80063a6:	5a5b      	ldrh	r3, [r3, r1]
 80063a8:	b29b      	uxth	r3, r3
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	b29a      	uxth	r2, r3
 80063ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063b0:	0011      	movs	r1, r2
 80063b2:	0018      	movs	r0, r3
 80063b4:	f7fa f986 	bl	80006c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063b8:	e003      	b.n	80063c2 <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 80063ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063bc:	0018      	movs	r0, r3
 80063be:	f7ff f92f 	bl	8005620 <HAL_UART_RxCpltCallback>
}
 80063c2:	46c0      	nop			@ (mov r8, r8)
 80063c4:	46bd      	mov	sp, r7
 80063c6:	b014      	add	sp, #80	@ 0x50
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	46c0      	nop			@ (mov r8, r8)
 80063cc:	fffffeff 	.word	0xfffffeff

080063d0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063dc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2201      	movs	r2, #1
 80063e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d128      	bne.n	800643e <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2258      	movs	r2, #88	@ 0x58
 80063f0:	5a9b      	ldrh	r3, [r3, r2]
 80063f2:	085b      	lsrs	r3, r3, #1
 80063f4:	b299      	uxth	r1, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	225a      	movs	r2, #90	@ 0x5a
 80063fa:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	210a      	movs	r1, #10
 8006404:	187b      	adds	r3, r7, r1
 8006406:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2258      	movs	r2, #88	@ 0x58
 800640c:	5a9b      	ldrh	r3, [r3, r2]
 800640e:	187a      	adds	r2, r7, r1
 8006410:	8812      	ldrh	r2, [r2, #0]
 8006412:	429a      	cmp	r2, r3
 8006414:	d804      	bhi.n	8006420 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	187a      	adds	r2, r7, r1
 800641a:	215a      	movs	r1, #90	@ 0x5a
 800641c:	8812      	ldrh	r2, [r2, #0]
 800641e:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2258      	movs	r2, #88	@ 0x58
 8006424:	5a9a      	ldrh	r2, [r3, r2]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	215a      	movs	r1, #90	@ 0x5a
 800642a:	5a5b      	ldrh	r3, [r3, r1]
 800642c:	b29b      	uxth	r3, r3
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	b29a      	uxth	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	0011      	movs	r1, r2
 8006436:	0018      	movs	r0, r3
 8006438:	f7fa f944 	bl	80006c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800643c:	e003      	b.n	8006446 <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	0018      	movs	r0, r3
 8006442:	f7ff f8f5 	bl	8005630 <HAL_UART_RxHalfCpltCallback>
}
 8006446:	46c0      	nop			@ (mov r8, r8)
 8006448:	46bd      	mov	sp, r7
 800644a:	b004      	add	sp, #16
 800644c:	bd80      	pop	{r7, pc}

0800644e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b086      	sub	sp, #24
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006460:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2280      	movs	r2, #128	@ 0x80
 8006466:	589b      	ldr	r3, [r3, r2]
 8006468:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	2280      	movs	r2, #128	@ 0x80
 8006472:	4013      	ands	r3, r2
 8006474:	2b80      	cmp	r3, #128	@ 0x80
 8006476:	d10a      	bne.n	800648e <UART_DMAError+0x40>
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	2b21      	cmp	r3, #33	@ 0x21
 800647c:	d107      	bne.n	800648e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2252      	movs	r2, #82	@ 0x52
 8006482:	2100      	movs	r1, #0
 8006484:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	0018      	movs	r0, r3
 800648a:	f7ff fe09 	bl	80060a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	2240      	movs	r2, #64	@ 0x40
 8006496:	4013      	ands	r3, r2
 8006498:	2b40      	cmp	r3, #64	@ 0x40
 800649a:	d10a      	bne.n	80064b2 <UART_DMAError+0x64>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b22      	cmp	r3, #34	@ 0x22
 80064a0:	d107      	bne.n	80064b2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	225a      	movs	r2, #90	@ 0x5a
 80064a6:	2100      	movs	r1, #0
 80064a8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	0018      	movs	r0, r3
 80064ae:	f7ff fe1b 	bl	80060e8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2284      	movs	r2, #132	@ 0x84
 80064b6:	589b      	ldr	r3, [r3, r2]
 80064b8:	2210      	movs	r2, #16
 80064ba:	431a      	orrs	r2, r3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2184      	movs	r1, #132	@ 0x84
 80064c0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	0018      	movs	r0, r3
 80064c6:	f7ff f8bb 	bl	8005640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064ca:	46c0      	nop			@ (mov r8, r8)
 80064cc:	46bd      	mov	sp, r7
 80064ce:	b006      	add	sp, #24
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b084      	sub	sp, #16
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	225a      	movs	r2, #90	@ 0x5a
 80064e4:	2100      	movs	r1, #0
 80064e6:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	0018      	movs	r0, r3
 80064ec:	f7ff f8a8 	bl	8005640 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064f0:	46c0      	nop			@ (mov r8, r8)
 80064f2:	46bd      	mov	sp, r7
 80064f4:	b004      	add	sp, #16
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006500:	f3ef 8310 	mrs	r3, PRIMASK
 8006504:	60bb      	str	r3, [r7, #8]
  return(result);
 8006506:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	2301      	movs	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f383 8810 	msr	PRIMASK, r3
}
 8006514:	46c0      	nop			@ (mov r8, r8)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2140      	movs	r1, #64	@ 0x40
 8006522:	438a      	bics	r2, r1
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	f383 8810 	msr	PRIMASK, r3
}
 8006530:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	0018      	movs	r0, r3
 8006542:	f7ff f85d 	bl	8005600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006546:	46c0      	nop			@ (mov r8, r8)
 8006548:	46bd      	mov	sp, r7
 800654a:	b006      	add	sp, #24
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006556:	46c0      	nop			@ (mov r8, r8)
 8006558:	46bd      	mov	sp, r7
 800655a:	b002      	add	sp, #8
 800655c:	bd80      	pop	{r7, pc}

0800655e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800655e:	b5b0      	push	{r4, r5, r7, lr}
 8006560:	b08a      	sub	sp, #40	@ 0x28
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	60b9      	str	r1, [r7, #8]
 8006568:	1dbb      	adds	r3, r7, #6
 800656a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2280      	movs	r2, #128	@ 0x80
 8006570:	589b      	ldr	r3, [r3, r2]
 8006572:	2b20      	cmp	r3, #32
 8006574:	d156      	bne.n	8006624 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800657c:	1dbb      	adds	r3, r7, #6
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e04e      	b.n	8006626 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	2380      	movs	r3, #128	@ 0x80
 800658e:	015b      	lsls	r3, r3, #5
 8006590:	429a      	cmp	r2, r3
 8006592:	d109      	bne.n	80065a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2201      	movs	r2, #1
 80065a0:	4013      	ands	r3, r2
 80065a2:	d001      	beq.n	80065a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e03e      	b.n	8006626 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2201      	movs	r2, #1
 80065ac:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2200      	movs	r2, #0
 80065b2:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80065b4:	2527      	movs	r5, #39	@ 0x27
 80065b6:	197c      	adds	r4, r7, r5
 80065b8:	1dbb      	adds	r3, r7, #6
 80065ba:	881a      	ldrh	r2, [r3, #0]
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	0018      	movs	r0, r3
 80065c2:	f7ff fccd 	bl	8005f60 <UART_Start_Receive_DMA>
 80065c6:	0003      	movs	r3, r0
 80065c8:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80065ca:	197b      	adds	r3, r7, r5
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d124      	bne.n	800661c <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d11c      	bne.n	8006614 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2210      	movs	r2, #16
 80065e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065e2:	f3ef 8310 	mrs	r3, PRIMASK
 80065e6:	617b      	str	r3, [r7, #20]
  return(result);
 80065e8:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ea:	623b      	str	r3, [r7, #32]
 80065ec:	2301      	movs	r3, #1
 80065ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	f383 8810 	msr	PRIMASK, r3
}
 80065f6:	46c0      	nop			@ (mov r8, r8)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	681a      	ldr	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2110      	movs	r1, #16
 8006604:	430a      	orrs	r2, r1
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	f383 8810 	msr	PRIMASK, r3
}
 8006612:	e003      	b.n	800661c <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006614:	2327      	movs	r3, #39	@ 0x27
 8006616:	18fb      	adds	r3, r7, r3
 8006618:	2201      	movs	r2, #1
 800661a:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800661c:	2327      	movs	r3, #39	@ 0x27
 800661e:	18fb      	adds	r3, r7, r3
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	e000      	b.n	8006626 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8006624:	2302      	movs	r3, #2
  }
}
 8006626:	0018      	movs	r0, r3
 8006628:	46bd      	mov	sp, r7
 800662a:	b00a      	add	sp, #40	@ 0x28
 800662c:	bdb0      	pop	{r4, r5, r7, pc}

0800662e <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	0018      	movs	r0, r3
 800663e:	f000 fc01 	bl	8006e44 <malloc>
 8006642:	0003      	movs	r3, r0
 8006644:	60fb      	str	r3, [r7, #12]
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  // ThreadX not implemented
  ptr = NULL;
#endif
  return ptr;
 8006646:	68fb      	ldr	r3, [r7, #12]
}
 8006648:	0018      	movs	r0, r3
 800664a:	46bd      	mov	sp, r7
 800664c:	b004      	add	sp, #16
 800664e:	bd80      	pop	{r7, pc}

08006650 <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00b      	beq.n	8006676 <ATC_Free+0x26>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d007      	beq.n	8006676 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	0018      	movs	r0, r3
 800666c:	f000 fbf4 	bl	8006e58 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    // ThreadX not implemented - do nothing
#endif
     *ptr = NULL;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]
  }
}
 8006676:	46c0      	nop			@ (mov r8, r8)
 8006678:	46bd      	mov	sp, r7
 800667a:	b002      	add	sp, #8
 800667c:	bd80      	pop	{r7, pc}

0800667e <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8a9b      	ldrh	r3, [r3, #20]
 8006694:	001a      	movs	r2, r3
 8006696:	2100      	movs	r1, #0
 8006698:	f000 fefa 	bl	8007490 <memset>
}
 800669c:	46c0      	nop			@ (mov r8, r8)
 800669e:	46bd      	mov	sp, r7
 80066a0:	b002      	add	sp, #8
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 80066a4:	b590      	push	{r4, r7, lr}
 80066a6:	b087      	sub	sp, #28
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	1dbb      	adds	r3, r7, #6
 80066b0:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 80066b2:	2417      	movs	r4, #23
 80066b4:	193b      	adds	r3, r7, r4
 80066b6:	2200      	movs	r2, #0
 80066b8:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	1dba      	adds	r2, r7, #6
 80066be:	8812      	ldrh	r2, [r2, #0]
 80066c0:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6818      	ldr	r0, [r3, #0]
 80066c6:	1dbb      	adds	r3, r7, #6
 80066c8:	881a      	ldrh	r2, [r3, #0]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	0019      	movs	r1, r3
 80066ce:	f7fe faf3 	bl	8004cb8 <HAL_UART_Transmit_DMA>
 80066d2:	1e03      	subs	r3, r0, #0
 80066d4:	d103      	bne.n	80066de <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 80066d6:	193b      	adds	r3, r7, r4
 80066d8:	2201      	movs	r2, #1
 80066da:	701a      	strb	r2, [r3, #0]
 80066dc:	e000      	b.n	80066e0 <ATC_TxRaw+0x3c>
      break;
 80066de:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 80066e0:	2317      	movs	r3, #23
 80066e2:	18fb      	adds	r3, r7, r3
 80066e4:	781b      	ldrb	r3, [r3, #0]
}
 80066e6:	0018      	movs	r0, r3
 80066e8:	46bd      	mov	sp, r7
 80066ea:	b007      	add	sp, #28
 80066ec:	bd90      	pop	{r4, r7, pc}

080066ee <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b082      	sub	sp, #8
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	0018      	movs	r0, r3
 80066fc:	f7fe ffa8 	bl	8005650 <HAL_UART_GetState>
 8006700:	0003      	movs	r3, r0
 8006702:	2b21      	cmp	r3, #33	@ 0x21
 8006704:	d007      	beq.n	8006716 <ATC_TxBusy+0x28>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	0018      	movs	r0, r3
 800670c:	f7fe ffa0 	bl	8005650 <HAL_UART_GetState>
 8006710:	0003      	movs	r3, r0
 8006712:	2b23      	cmp	r3, #35	@ 0x23
 8006714:	d101      	bne.n	800671a <ATC_TxBusy+0x2c>
  {
    return true;
 8006716:	2301      	movs	r3, #1
 8006718:	e000      	b.n	800671c <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 800671a:	2300      	movs	r3, #0
  }
}
 800671c:	0018      	movs	r0, r3
 800671e:	46bd      	mov	sp, r7
 8006720:	b002      	add	sp, #8
 8006722:	bd80      	pop	{r7, pc}

08006724 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  bool answer = false;
 800672e:	230f      	movs	r3, #15
 8006730:	18fb      	adds	r3, r7, r3
 8006732:	2200      	movs	r2, #0
 8006734:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 8006736:	f7fb feb9 	bl	80024ac <HAL_GetTick>
 800673a:	0003      	movs	r3, r0
 800673c:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 800673e:	2001      	movs	r0, #1
 8006740:	f000 fb73 	bl	8006e2a <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	0018      	movs	r0, r3
 800674a:	f7fe ff81 	bl	8005650 <HAL_UART_GetState>
 800674e:	0003      	movs	r3, r0
 8006750:	2b22      	cmp	r3, #34	@ 0x22
 8006752:	d007      	beq.n	8006764 <ATC_TxWait+0x40>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	0018      	movs	r0, r3
 800675a:	f7fe ff79 	bl	8005650 <HAL_UART_GetState>
 800675e:	0003      	movs	r3, r0
 8006760:	2b20      	cmp	r3, #32
 8006762:	d104      	bne.n	800676e <ATC_TxWait+0x4a>
    {
      answer = true;
 8006764:	230f      	movs	r3, #15
 8006766:	18fb      	adds	r3, r7, r3
 8006768:	2201      	movs	r2, #1
 800676a:	701a      	strb	r2, [r3, #0]
      break;
 800676c:	e01c      	b.n	80067a8 <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	0018      	movs	r0, r3
 8006774:	f7fe ff6c 	bl	8005650 <HAL_UART_GetState>
 8006778:	0003      	movs	r3, r0
 800677a:	2be0      	cmp	r3, #224	@ 0xe0
 800677c:	d014      	beq.n	80067a8 <ATC_TxWait+0x84>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	0018      	movs	r0, r3
 8006784:	f7fe ff64 	bl	8005650 <HAL_UART_GetState>
 8006788:	0003      	movs	r3, r0
 800678a:	2ba0      	cmp	r3, #160	@ 0xa0
 800678c:	d00c      	beq.n	80067a8 <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 800678e:	f7fb fe8d 	bl	80024ac <HAL_GetTick>
 8006792:	0002      	movs	r2, r0
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	429a      	cmp	r2, r3
 800679c:	d8cf      	bhi.n	800673e <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	0018      	movs	r0, r3
 80067a4:	f7fe fb18 	bl	8004dd8 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 80067a8:	230f      	movs	r3, #15
 80067aa:	18fb      	adds	r3, r7, r3
 80067ac:	781b      	ldrb	r3, [r3, #0]
}
 80067ae:	0018      	movs	r0, r3
 80067b0:	46bd      	mov	sp, r7
 80067b2:	b004      	add	sp, #16
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b084      	sub	sp, #16
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	8b1b      	ldrh	r3, [r3, #24]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d027      	beq.n	8006816 <ATC_CheckEvents+0x60>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]
 80067ca:	e01b      	b.n	8006804 <ATC_CheckEvents+0x4e>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68da      	ldr	r2, [r3, #12]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	18d3      	adds	r3, r2, r3
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	0019      	movs	r1, r3
 80067de:	f000 fe73 	bl	80074c8 <strstr>
 80067e2:	0003      	movs	r3, r0
 80067e4:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <ATC_CheckEvents+0x48>
      {
        hAtc->psEvents[ev].EventCallback(found);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	00db      	lsls	r3, r3, #3
 80067f4:	18d3      	adds	r3, r2, r3
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	68ba      	ldr	r2, [r7, #8]
 80067fa:	0010      	movs	r0, r2
 80067fc:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	3301      	adds	r3, #1
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	429a      	cmp	r2, r3
 800680c:	d3de      	bcc.n	80067cc <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	0018      	movs	r0, r3
 8006812:	f7ff ff34 	bl	800667e <ATC_RxFlush>
  }
}
 8006816:	46c0      	nop			@ (mov r8, r8)
 8006818:	46bd      	mov	sp, r7
 800681a:	b004      	add	sp, #16
 800681c:	bd80      	pop	{r7, pc}

0800681e <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 8006828:	230f      	movs	r3, #15
 800682a:	18fb      	adds	r3, r7, r3
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	8b1b      	ldrh	r3, [r3, #24]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d031      	beq.n	800689c <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8006838:	230c      	movs	r3, #12
 800683a:	18fb      	adds	r3, r7, r3
 800683c:	2200      	movs	r2, #0
 800683e:	801a      	strh	r2, [r3, #0]
 8006840:	e025      	b.n	800688e <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006846:	230c      	movs	r3, #12
 8006848:	18fb      	adds	r3, r7, r3
 800684a:	881a      	ldrh	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	320a      	adds	r2, #10
 8006850:	0092      	lsls	r2, r2, #2
 8006852:	58d3      	ldr	r3, [r2, r3]
 8006854:	0019      	movs	r1, r3
 8006856:	f000 fe37 	bl	80074c8 <strstr>
 800685a:	0003      	movs	r3, r0
 800685c:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00e      	beq.n	8006882 <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8006870:	230c      	movs	r3, #12
 8006872:	18fb      	adds	r3, r7, r3
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	b2da      	uxtb	r2, r3
 8006878:	230f      	movs	r3, #15
 800687a:	18fb      	adds	r3, r7, r3
 800687c:	3201      	adds	r2, #1
 800687e:	701a      	strb	r2, [r3, #0]
        break;
 8006880:	e00c      	b.n	800689c <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8006882:	210c      	movs	r1, #12
 8006884:	187b      	adds	r3, r7, r1
 8006886:	881a      	ldrh	r2, [r3, #0]
 8006888:	187b      	adds	r3, r7, r1
 800688a:	3201      	adds	r2, #1
 800688c:	801a      	strh	r2, [r3, #0]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	8adb      	ldrh	r3, [r3, #22]
 8006892:	220c      	movs	r2, #12
 8006894:	18ba      	adds	r2, r7, r2
 8006896:	8812      	ldrh	r2, [r2, #0]
 8006898:	429a      	cmp	r2, r3
 800689a:	d3d2      	bcc.n	8006842 <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 800689c:	230f      	movs	r3, #15
 800689e:	18fb      	adds	r3, r7, r3
 80068a0:	781b      	ldrb	r3, [r3, #0]
}
 80068a2:	0018      	movs	r0, r3
 80068a4:	46bd      	mov	sp, r7
 80068a6:	b004      	add	sp, #16
 80068a8:	bd80      	pop	{r7, pc}

080068aa <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	0018      	movs	r0, r3
 80068b8:	f7fe fedc 	bl	8005674 <HAL_UART_GetError>
 80068bc:	1e03      	subs	r3, r0, #0
 80068be:	d01f      	beq.n	8006900 <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2201      	movs	r2, #1
 80068c8:	4252      	negs	r2, r2
 80068ca:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	0018      	movs	r0, r3
 80068d2:	f7fe fae7 	bl	8004ea4 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69d9      	ldr	r1, [r3, #28]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	8a9b      	ldrh	r3, [r3, #20]
 80068e2:	001a      	movs	r2, r3
 80068e4:	f7ff fe3b 	bl	800655e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681a      	ldr	r2, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2104      	movs	r1, #4
 80068fc:	438a      	bics	r2, r1
 80068fe:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	0018      	movs	r0, r3
 8006906:	f7fe fea3 	bl	8005650 <HAL_UART_GetState>
 800690a:	0003      	movs	r3, r0
 800690c:	2b22      	cmp	r3, #34	@ 0x22
 800690e:	d027      	beq.n	8006960 <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	0018      	movs	r0, r3
 8006916:	f7fe fe9b 	bl	8005650 <HAL_UART_GetState>
 800691a:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 800691c:	2b23      	cmp	r3, #35	@ 0x23
 800691e:	d01f      	beq.n	8006960 <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2201      	movs	r2, #1
 8006928:	4252      	negs	r2, r2
 800692a:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	0018      	movs	r0, r3
 8006932:	f7fe fab7 	bl	8004ea4 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69d9      	ldr	r1, [r3, #28]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	8a9b      	ldrh	r3, [r3, #20]
 8006942:	001a      	movs	r2, r3
 8006944:	f7ff fe0b 	bl	800655e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2104      	movs	r1, #4
 800695c:	438a      	bics	r2, r1
 800695e:	601a      	str	r2, [r3, #0]
  }
}
 8006960:	46c0      	nop			@ (mov r8, r8)
 8006962:	46bd      	mov	sp, r7
 8006964:	b002      	add	sp, #8
 8006966:	bd80      	pop	{r7, pc}

08006968 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	1dbb      	adds	r3, r7, #6
 8006976:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8006978:	2317      	movs	r3, #23
 800697a:	18fb      	adds	r3, r7, r3
 800697c:	2200      	movs	r2, #0
 800697e:	701a      	strb	r2, [r3, #0]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d100      	bne.n	8006988 <ATC_Init+0x20>
 8006986:	e07f      	b.n	8006a88 <ATC_Init+0x120>
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d100      	bne.n	8006990 <ATC_Init+0x28>
 800698e:	e07b      	b.n	8006a88 <ATC_Init+0x120>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	223c      	movs	r2, #60	@ 0x3c
 8006994:	2100      	movs	r1, #0
 8006996:	0018      	movs	r0, r3
 8006998:	f000 fd7a 	bl	8007490 <memset>
    if (pName != NULL)
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d006      	beq.n	80069b0 <ATC_Init+0x48>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3304      	adds	r3, #4
 80069a6:	6839      	ldr	r1, [r7, #0]
 80069a8:	2207      	movs	r2, #7
 80069aa:	0018      	movs	r0, r3
 80069ac:	f000 fd78 	bl	80074a0 <strncpy>
    }
    hAtc->hUart = hUart;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 80069b6:	1dbb      	adds	r3, r7, #6
 80069b8:	881b      	ldrh	r3, [r3, #0]
 80069ba:	0018      	movs	r0, r3
 80069bc:	f7ff fe37 	bl	800662e <ATC_Malloc>
 80069c0:	0002      	movs	r2, r0
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d055      	beq.n	8006a7a <ATC_Init+0x112>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	69d8      	ldr	r0, [r3, #28]
 80069d2:	1dbb      	adds	r3, r7, #6
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	001a      	movs	r2, r3
 80069d8:	2100      	movs	r1, #0
 80069da:	f000 fd59 	bl	8007490 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 80069de:	1dbb      	adds	r3, r7, #6
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	0018      	movs	r0, r3
 80069e4:	f7ff fe23 	bl	800662e <ATC_Malloc>
 80069e8:	0002      	movs	r2, r0
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d043      	beq.n	8006a7e <ATC_Init+0x116>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6a18      	ldr	r0, [r3, #32]
 80069fa:	1dbb      	adds	r3, r7, #6
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	001a      	movs	r2, r3
 8006a00:	2100      	movs	r1, #0
 8006a02:	f000 fd45 	bl	8007490 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 8006a06:	1dbb      	adds	r3, r7, #6
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	f7ff fe0f 	bl	800662e <ATC_Malloc>
 8006a10:	0002      	movs	r2, r0
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d031      	beq.n	8006a82 <ATC_Init+0x11a>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006a22:	1dbb      	adds	r3, r7, #6
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	001a      	movs	r2, r3
 8006a28:	2100      	movs	r1, #0
 8006a2a:	f000 fd31 	bl	8007490 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1dba      	adds	r2, r7, #6
 8006a32:	8812      	ldrh	r2, [r2, #0]
 8006a34:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	4252      	negs	r2, r2
 8006a40:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	69d9      	ldr	r1, [r3, #28]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	8a9b      	ldrh	r3, [r3, #20]
 8006a4e:	001a      	movs	r2, r3
 8006a50:	f7ff fd85 	bl	800655e <HAL_UARTEx_ReceiveToIdle_DMA>
 8006a54:	1e03      	subs	r3, r0, #0
 8006a56:	d116      	bne.n	8006a86 <ATC_Init+0x11e>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2104      	movs	r1, #4
 8006a6c:	438a      	bics	r2, r1
 8006a6e:	601a      	str	r2, [r3, #0]
    answer = true;
 8006a70:	2317      	movs	r3, #23
 8006a72:	18fb      	adds	r3, r7, r3
 8006a74:	2201      	movs	r2, #1
 8006a76:	701a      	strb	r2, [r3, #0]
 8006a78:	e006      	b.n	8006a88 <ATC_Init+0x120>
      break;
 8006a7a:	46c0      	nop			@ (mov r8, r8)
 8006a7c:	e004      	b.n	8006a88 <ATC_Init+0x120>
      break;
 8006a7e:	46c0      	nop			@ (mov r8, r8)
 8006a80:	e002      	b.n	8006a88 <ATC_Init+0x120>
      break;
 8006a82:	46c0      	nop			@ (mov r8, r8)
 8006a84:	e000      	b.n	8006a88 <ATC_Init+0x120>
      break;
 8006a86:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  if (answer == false)
 8006a88:	2317      	movs	r3, #23
 8006a8a:	18fb      	adds	r3, r7, r3
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	4053      	eors	r3, r2
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d017      	beq.n	8006ac8 <ATC_Init+0x160>
  {
    if (hAtc->pRxBuff != NULL)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	69db      	ldr	r3, [r3, #28]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d004      	beq.n	8006aaa <ATC_Init+0x142>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	331c      	adds	r3, #28
 8006aa4:	0018      	movs	r0, r3
 8006aa6:	f7ff fdd3 	bl	8006650 <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d004      	beq.n	8006abc <ATC_Init+0x154>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	3324      	adds	r3, #36	@ 0x24
 8006ab6:	0018      	movs	r0, r3
 8006ab8:	f7ff fdca 	bl	8006650 <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	223c      	movs	r2, #60	@ 0x3c
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	0018      	movs	r0, r3
 8006ac4:	f000 fce4 	bl	8007490 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 8006ac8:	2317      	movs	r3, #23
 8006aca:	18fb      	adds	r3, r7, r3
 8006acc:	781b      	ldrb	r3, [r3, #0]
}
 8006ace:	0018      	movs	r0, r3
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b006      	add	sp, #24
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <ATC_SetEvents>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  psEvents: Pointer to the event handler structure.
  * @retval true if events are set successfully, false otherwise.
  */
bool ATC_SetEvents(ATC_HandleTypeDef* hAtc, const ATC_EventTypeDef* psEvents)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b084      	sub	sp, #16
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8006ae0:	230f      	movs	r3, #15
 8006ae2:	18fb      	adds	r3, r7, r3
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	701a      	strb	r2, [r3, #0]
  uint32_t ev = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	60bb      	str	r3, [r7, #8]
  do
  {
    if (hAtc == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d01f      	beq.n	8006b32 <ATC_SetEvents+0x5c>
    {
      break;
    }
    if (psEvents == NULL)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d01e      	beq.n	8006b36 <ATC_SetEvents+0x60>
    {
      break;
    }
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 8006af8:	e002      	b.n	8006b00 <ATC_SetEvents+0x2a>
    {
      ev++;
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	3301      	adds	r3, #1
 8006afe:	60bb      	str	r3, [r7, #8]
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	18d3      	adds	r3, r2, r3
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d006      	beq.n	8006b1c <ATC_SetEvents+0x46>
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	18d3      	adds	r3, r2, r3
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1ee      	bne.n	8006afa <ATC_SetEvents+0x24>
    }
    hAtc->psEvents = (ATC_EventTypeDef*)psEvents;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	60da      	str	r2, [r3, #12]
    hAtc->Events = ev;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68ba      	ldr	r2, [r7, #8]
 8006b26:	611a      	str	r2, [r3, #16]
    answer = true;
 8006b28:	230f      	movs	r3, #15
 8006b2a:	18fb      	adds	r3, r7, r3
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	e002      	b.n	8006b38 <ATC_SetEvents+0x62>
      break;
 8006b32:	46c0      	nop			@ (mov r8, r8)
 8006b34:	e000      	b.n	8006b38 <ATC_SetEvents+0x62>
      break;
 8006b36:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 8006b38:	230f      	movs	r3, #15
 8006b3a:	18fb      	adds	r3, r7, r3
 8006b3c:	781b      	ldrb	r3, [r3, #0]
}
 8006b3e:	0018      	movs	r0, r3
 8006b40:	46bd      	mov	sp, r7
 8006b42:	b004      	add	sp, #16
 8006b44:	bd80      	pop	{r7, pc}

08006b46 <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b082      	sub	sp, #8
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	0018      	movs	r0, r3
 8006b52:	f7ff feaa 	bl	80068aa <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	0018      	movs	r0, r3
 8006b5a:	f7ff fe2c 	bl	80067b6 <ATC_CheckEvents>
}
 8006b5e:	46c0      	nop			@ (mov r8, r8)
 8006b60:	46bd      	mov	sp, r7
 8006b62:	b002      	add	sp, #8
 8006b64:	bd80      	pop	{r7, pc}

08006b66 <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8006b66:	b5b0      	push	{r4, r5, r7, lr}
 8006b68:	b08c      	sub	sp, #48	@ 0x30
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	607a      	str	r2, [r7, #4]
 8006b72:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8006b74:	2300      	movs	r3, #0
 8006b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f7ff fdb7 	bl	80066ee <ATC_TxBusy>
 8006b80:	1e03      	subs	r3, r0, #0
 8006b82:	d002      	beq.n	8006b8a <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8006b84:	2304      	movs	r3, #4
 8006b86:	425b      	negs	r3, r3
 8006b88:	e0e3      	b.n	8006d52 <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 8006b8a:	2344      	movs	r3, #68	@ 0x44
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b05      	cmp	r3, #5
 8006b92:	d902      	bls.n	8006b9a <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 8006b94:	2305      	movs	r3, #5
 8006b96:	425b      	negs	r3, r3
 8006b98:	e0db      	b.n	8006d52 <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f7ff fe84 	bl	80068aa <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8006ba2:	2348      	movs	r3, #72	@ 0x48
 8006ba4:	18fb      	adds	r3, r7, r3
 8006ba6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8006ba8:	2300      	movs	r3, #0
 8006baa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bac:	e051      	b.n	8006c52 <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	1d1a      	adds	r2, r3, #4
 8006bb2:	617a      	str	r2, [r7, #20]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	0018      	movs	r0, r3
 8006bbc:	f7f9 faa4 	bl	8000108 <strlen>
 8006bc0:	0003      	movs	r3, r0
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	0018      	movs	r0, r3
 8006bc6:	f7ff fd32 	bl	800662e <ATC_Malloc>
 8006bca:	0001      	movs	r1, r0
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bd0:	320a      	adds	r2, #10
 8006bd2:	0092      	lsls	r2, r2, #2
 8006bd4:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bda:	320a      	adds	r2, #10
 8006bdc:	0092      	lsls	r2, r2, #2
 8006bde:	58d3      	ldr	r3, [r2, r3]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d11c      	bne.n	8006c1e <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 8006be4:	2327      	movs	r3, #39	@ 0x27
 8006be6:	18fb      	adds	r3, r7, r3
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	e00e      	b.n	8006c0c <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8006bee:	2427      	movs	r4, #39	@ 0x27
 8006bf0:	193b      	adds	r3, r7, r4
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	330a      	adds	r3, #10
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	18d3      	adds	r3, r2, r3
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	f7ff fd27 	bl	8006650 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8006c02:	193b      	adds	r3, r7, r4
 8006c04:	781a      	ldrb	r2, [r3, #0]
 8006c06:	193b      	adds	r3, r7, r4
 8006c08:	3201      	adds	r2, #1
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	2327      	movs	r3, #39	@ 0x27
 8006c0e:	18fb      	adds	r3, r7, r3
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c14:	429a      	cmp	r2, r3
 8006c16:	dcea      	bgt.n	8006bee <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	425b      	negs	r3, r3
 8006c1c:	e099      	b.n	8006d52 <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c22:	320a      	adds	r2, #10
 8006c24:	0092      	lsls	r2, r2, #2
 8006c26:	58d3      	ldr	r3, [r2, r3]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	0011      	movs	r1, r2
 8006c2c:	0018      	movs	r0, r3
 8006c2e:	f000 fcee 	bl	800760e <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c36:	320a      	adds	r2, #10
 8006c38:	0092      	lsls	r2, r2, #2
 8006c3a:	58d4      	ldr	r4, [r2, r3]
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f7f9 fa62 	bl	8000108 <strlen>
 8006c44:	0003      	movs	r3, r0
 8006c46:	18e3      	adds	r3, r4, r3
 8006c48:	2200      	movs	r2, #0
 8006c4a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8006c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4e:	3301      	adds	r3, #1
 8006c50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c52:	2344      	movs	r3, #68	@ 0x44
 8006c54:	18fb      	adds	r3, r7, r3
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	dba7      	blt.n	8006bae <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	0018      	movs	r0, r3
 8006c62:	f7ff fd0c 	bl	800667e <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	0018      	movs	r0, r3
 8006c6a:	f7f9 fa4d 	bl	8000108 <strlen>
 8006c6e:	0003      	movs	r3, r0
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	68b9      	ldr	r1, [r7, #8]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	0018      	movs	r0, r3
 8006c78:	f7ff fd14 	bl	80066a4 <ATC_TxRaw>
 8006c7c:	0003      	movs	r3, r0
 8006c7e:	001a      	movs	r2, r3
 8006c80:	2301      	movs	r3, #1
 8006c82:	4053      	eors	r3, r2
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	425b      	negs	r3, r3
 8006c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006c90:	e010      	b.n	8006cb4 <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	0011      	movs	r1, r2
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f7ff fd43 	bl	8006724 <ATC_TxWait>
 8006c9e:	0003      	movs	r3, r0
 8006ca0:	001a      	movs	r2, r3
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	4053      	eors	r3, r2
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8006cac:	2302      	movs	r3, #2
 8006cae:	425b      	negs	r3, r3
 8006cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006cb2:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 8006cb4:	2444      	movs	r4, #68	@ 0x44
 8006cb6:	193b      	adds	r3, r7, r4
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d029      	beq.n	8006d12 <ATC_SendReceive+0x1ac>
 8006cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d126      	bne.n	8006d12 <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 8006cc4:	f7fb fbf2 	bl	80024ac <HAL_GetTick>
 8006cc8:	0003      	movs	r3, r0
 8006cca:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 8006ccc:	193b      	adds	r3, r7, r4
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	b29a      	uxth	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8006cd6:	e014      	b.n	8006d02 <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 8006cd8:	2001      	movs	r0, #1
 8006cda:	f000 f8a6 	bl	8006e2a <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8006cde:	251f      	movs	r5, #31
 8006ce0:	197c      	adds	r4, r7, r5
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	0011      	movs	r1, r2
 8006ce8:	0018      	movs	r0, r3
 8006cea:	f7ff fd98 	bl	800681e <ATC_CheckResponse>
 8006cee:	0003      	movs	r3, r0
 8006cf0:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 8006cf2:	197b      	adds	r3, r7, r5
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 8006cfa:	197b      	adds	r3, r7, r5
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8006d00:	e007      	b.n	8006d12 <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 8006d02:	f7fb fbd3 	bl	80024ac <HAL_GetTick>
 8006d06:	0002      	movs	r2, r0
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d8e2      	bhi.n	8006cd8 <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8006d18:	2326      	movs	r3, #38	@ 0x26
 8006d1a:	18fb      	adds	r3, r7, r3
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	701a      	strb	r2, [r3, #0]
 8006d20:	e00e      	b.n	8006d40 <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8006d22:	2426      	movs	r4, #38	@ 0x26
 8006d24:	193b      	adds	r3, r7, r4
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	330a      	adds	r3, #10
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	18d3      	adds	r3, r2, r3
 8006d30:	0018      	movs	r0, r3
 8006d32:	f7ff fc8d 	bl	8006650 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 8006d36:	193b      	adds	r3, r7, r4
 8006d38:	781a      	ldrb	r2, [r3, #0]
 8006d3a:	193b      	adds	r3, r7, r4
 8006d3c:	3201      	adds	r2, #1
 8006d3e:	701a      	strb	r2, [r3, #0]
 8006d40:	2326      	movs	r3, #38	@ 0x26
 8006d42:	18fa      	adds	r2, r7, r3
 8006d44:	2344      	movs	r3, #68	@ 0x44
 8006d46:	18fb      	adds	r3, r7, r3
 8006d48:	7812      	ldrb	r2, [r2, #0]
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d3e8      	bcc.n	8006d22 <ATC_SendReceive+0x1bc>
  }
  return answer;
 8006d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006d52:	0018      	movs	r0, r3
 8006d54:	46bd      	mov	sp, r7
 8006d56:	b00c      	add	sp, #48	@ 0x30
 8006d58:	bdb0      	pop	{r4, r5, r7, pc}

08006d5a <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	000a      	movs	r2, r1
 8006d64:	1cbb      	adds	r3, r7, #2
 8006d66:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8006d68:	1cbb      	adds	r3, r7, #2
 8006d6a:	881a      	ldrh	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	8a9b      	ldrh	r3, [r3, #20]
 8006d70:	0019      	movs	r1, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	8b1b      	ldrh	r3, [r3, #24]
 8006d76:	1acb      	subs	r3, r1, r3
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	dd06      	ble.n	8006d8a <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	8a99      	ldrh	r1, [r3, #20]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	8b1a      	ldrh	r2, [r3, #24]
 8006d84:	1cbb      	adds	r3, r7, #2
 8006d86:	1a8a      	subs	r2, r1, r2
 8006d88:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	8b12      	ldrh	r2, [r2, #24]
 8006d92:	1898      	adds	r0, r3, r2
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	69d9      	ldr	r1, [r3, #28]
 8006d98:	1cbb      	adds	r3, r7, #2
 8006d9a:	881b      	ldrh	r3, [r3, #0]
 8006d9c:	001a      	movs	r2, r3
 8006d9e:	f000 fc3e 	bl	800761e <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	8b1a      	ldrh	r2, [r3, #24]
 8006da6:	1cbb      	adds	r3, r7, #2
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	18d3      	adds	r3, r2, r3
 8006dac:	b29a      	uxth	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69d9      	ldr	r1, [r3, #28]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	8a9b      	ldrh	r3, [r3, #20]
 8006dbe:	001a      	movs	r2, r3
 8006dc0:	f7ff fbcd 	bl	800655e <HAL_UARTEx_ReceiveToIdle_DMA>
 8006dc4:	1e03      	subs	r3, r0, #0
 8006dc6:	d10c      	bne.n	8006de2 <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2104      	movs	r1, #4
 8006ddc:	438a      	bics	r2, r1
 8006dde:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 8006de0:	e01f      	b.n	8006e22 <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2201      	movs	r2, #1
 8006dea:	4252      	negs	r2, r2
 8006dec:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	0018      	movs	r0, r3
 8006df4:	f7fe f856 	bl	8004ea4 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6818      	ldr	r0, [r3, #0]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	69d9      	ldr	r1, [r3, #28]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	8a9b      	ldrh	r3, [r3, #20]
 8006e04:	001a      	movs	r2, r3
 8006e06:	f7ff fbaa 	bl	800655e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2104      	movs	r1, #4
 8006e1e:	438a      	bics	r2, r1
 8006e20:	601a      	str	r2, [r3, #0]
}
 8006e22:	46c0      	nop			@ (mov r8, r8)
 8006e24:	46bd      	mov	sp, r7
 8006e26:	b002      	add	sp, #8
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b082      	sub	sp, #8
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	0018      	movs	r0, r3
 8006e36:	f7fb fb43 	bl	80024c0 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8006e3a:	46c0      	nop			@ (mov r8, r8)
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	b002      	add	sp, #8
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <malloc>:
 8006e44:	b510      	push	{r4, lr}
 8006e46:	4b03      	ldr	r3, [pc, #12]	@ (8006e54 <malloc+0x10>)
 8006e48:	0001      	movs	r1, r0
 8006e4a:	6818      	ldr	r0, [r3, #0]
 8006e4c:	f000 f830 	bl	8006eb0 <_malloc_r>
 8006e50:	bd10      	pop	{r4, pc}
 8006e52:	46c0      	nop			@ (mov r8, r8)
 8006e54:	2000001c 	.word	0x2000001c

08006e58 <free>:
 8006e58:	b510      	push	{r4, lr}
 8006e5a:	4b03      	ldr	r3, [pc, #12]	@ (8006e68 <free+0x10>)
 8006e5c:	0001      	movs	r1, r0
 8006e5e:	6818      	ldr	r0, [r3, #0]
 8006e60:	f000 fbe6 	bl	8007630 <_free_r>
 8006e64:	bd10      	pop	{r4, pc}
 8006e66:	46c0      	nop			@ (mov r8, r8)
 8006e68:	2000001c 	.word	0x2000001c

08006e6c <sbrk_aligned>:
 8006e6c:	b570      	push	{r4, r5, r6, lr}
 8006e6e:	4e0f      	ldr	r6, [pc, #60]	@ (8006eac <sbrk_aligned+0x40>)
 8006e70:	000d      	movs	r5, r1
 8006e72:	6831      	ldr	r1, [r6, #0]
 8006e74:	0004      	movs	r4, r0
 8006e76:	2900      	cmp	r1, #0
 8006e78:	d102      	bne.n	8006e80 <sbrk_aligned+0x14>
 8006e7a:	f000 fb75 	bl	8007568 <_sbrk_r>
 8006e7e:	6030      	str	r0, [r6, #0]
 8006e80:	0029      	movs	r1, r5
 8006e82:	0020      	movs	r0, r4
 8006e84:	f000 fb70 	bl	8007568 <_sbrk_r>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	d103      	bne.n	8006e94 <sbrk_aligned+0x28>
 8006e8c:	2501      	movs	r5, #1
 8006e8e:	426d      	negs	r5, r5
 8006e90:	0028      	movs	r0, r5
 8006e92:	bd70      	pop	{r4, r5, r6, pc}
 8006e94:	2303      	movs	r3, #3
 8006e96:	1cc5      	adds	r5, r0, #3
 8006e98:	439d      	bics	r5, r3
 8006e9a:	42a8      	cmp	r0, r5
 8006e9c:	d0f8      	beq.n	8006e90 <sbrk_aligned+0x24>
 8006e9e:	1a29      	subs	r1, r5, r0
 8006ea0:	0020      	movs	r0, r4
 8006ea2:	f000 fb61 	bl	8007568 <_sbrk_r>
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	d1f2      	bne.n	8006e90 <sbrk_aligned+0x24>
 8006eaa:	e7ef      	b.n	8006e8c <sbrk_aligned+0x20>
 8006eac:	20000278 	.word	0x20000278

08006eb0 <_malloc_r>:
 8006eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006eb2:	2203      	movs	r2, #3
 8006eb4:	1ccb      	adds	r3, r1, #3
 8006eb6:	4393      	bics	r3, r2
 8006eb8:	3308      	adds	r3, #8
 8006eba:	0005      	movs	r5, r0
 8006ebc:	001f      	movs	r7, r3
 8006ebe:	2b0c      	cmp	r3, #12
 8006ec0:	d234      	bcs.n	8006f2c <_malloc_r+0x7c>
 8006ec2:	270c      	movs	r7, #12
 8006ec4:	42b9      	cmp	r1, r7
 8006ec6:	d833      	bhi.n	8006f30 <_malloc_r+0x80>
 8006ec8:	0028      	movs	r0, r5
 8006eca:	f000 f871 	bl	8006fb0 <__malloc_lock>
 8006ece:	4e37      	ldr	r6, [pc, #220]	@ (8006fac <_malloc_r+0xfc>)
 8006ed0:	6833      	ldr	r3, [r6, #0]
 8006ed2:	001c      	movs	r4, r3
 8006ed4:	2c00      	cmp	r4, #0
 8006ed6:	d12f      	bne.n	8006f38 <_malloc_r+0x88>
 8006ed8:	0039      	movs	r1, r7
 8006eda:	0028      	movs	r0, r5
 8006edc:	f7ff ffc6 	bl	8006e6c <sbrk_aligned>
 8006ee0:	0004      	movs	r4, r0
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	d15f      	bne.n	8006fa6 <_malloc_r+0xf6>
 8006ee6:	6834      	ldr	r4, [r6, #0]
 8006ee8:	9400      	str	r4, [sp, #0]
 8006eea:	9b00      	ldr	r3, [sp, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d14a      	bne.n	8006f86 <_malloc_r+0xd6>
 8006ef0:	2c00      	cmp	r4, #0
 8006ef2:	d052      	beq.n	8006f9a <_malloc_r+0xea>
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	0028      	movs	r0, r5
 8006ef8:	18e3      	adds	r3, r4, r3
 8006efa:	9900      	ldr	r1, [sp, #0]
 8006efc:	9301      	str	r3, [sp, #4]
 8006efe:	f000 fb33 	bl	8007568 <_sbrk_r>
 8006f02:	9b01      	ldr	r3, [sp, #4]
 8006f04:	4283      	cmp	r3, r0
 8006f06:	d148      	bne.n	8006f9a <_malloc_r+0xea>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	0028      	movs	r0, r5
 8006f0c:	1aff      	subs	r7, r7, r3
 8006f0e:	0039      	movs	r1, r7
 8006f10:	f7ff ffac 	bl	8006e6c <sbrk_aligned>
 8006f14:	3001      	adds	r0, #1
 8006f16:	d040      	beq.n	8006f9a <_malloc_r+0xea>
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	19db      	adds	r3, r3, r7
 8006f1c:	6023      	str	r3, [r4, #0]
 8006f1e:	6833      	ldr	r3, [r6, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	2a00      	cmp	r2, #0
 8006f24:	d133      	bne.n	8006f8e <_malloc_r+0xde>
 8006f26:	9b00      	ldr	r3, [sp, #0]
 8006f28:	6033      	str	r3, [r6, #0]
 8006f2a:	e019      	b.n	8006f60 <_malloc_r+0xb0>
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	dac9      	bge.n	8006ec4 <_malloc_r+0x14>
 8006f30:	230c      	movs	r3, #12
 8006f32:	602b      	str	r3, [r5, #0]
 8006f34:	2000      	movs	r0, #0
 8006f36:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f38:	6821      	ldr	r1, [r4, #0]
 8006f3a:	1bc9      	subs	r1, r1, r7
 8006f3c:	d420      	bmi.n	8006f80 <_malloc_r+0xd0>
 8006f3e:	290b      	cmp	r1, #11
 8006f40:	d90a      	bls.n	8006f58 <_malloc_r+0xa8>
 8006f42:	19e2      	adds	r2, r4, r7
 8006f44:	6027      	str	r7, [r4, #0]
 8006f46:	42a3      	cmp	r3, r4
 8006f48:	d104      	bne.n	8006f54 <_malloc_r+0xa4>
 8006f4a:	6032      	str	r2, [r6, #0]
 8006f4c:	6863      	ldr	r3, [r4, #4]
 8006f4e:	6011      	str	r1, [r2, #0]
 8006f50:	6053      	str	r3, [r2, #4]
 8006f52:	e005      	b.n	8006f60 <_malloc_r+0xb0>
 8006f54:	605a      	str	r2, [r3, #4]
 8006f56:	e7f9      	b.n	8006f4c <_malloc_r+0x9c>
 8006f58:	6862      	ldr	r2, [r4, #4]
 8006f5a:	42a3      	cmp	r3, r4
 8006f5c:	d10e      	bne.n	8006f7c <_malloc_r+0xcc>
 8006f5e:	6032      	str	r2, [r6, #0]
 8006f60:	0028      	movs	r0, r5
 8006f62:	f000 f82d 	bl	8006fc0 <__malloc_unlock>
 8006f66:	0020      	movs	r0, r4
 8006f68:	2207      	movs	r2, #7
 8006f6a:	300b      	adds	r0, #11
 8006f6c:	1d23      	adds	r3, r4, #4
 8006f6e:	4390      	bics	r0, r2
 8006f70:	1ac2      	subs	r2, r0, r3
 8006f72:	4298      	cmp	r0, r3
 8006f74:	d0df      	beq.n	8006f36 <_malloc_r+0x86>
 8006f76:	1a1b      	subs	r3, r3, r0
 8006f78:	50a3      	str	r3, [r4, r2]
 8006f7a:	e7dc      	b.n	8006f36 <_malloc_r+0x86>
 8006f7c:	605a      	str	r2, [r3, #4]
 8006f7e:	e7ef      	b.n	8006f60 <_malloc_r+0xb0>
 8006f80:	0023      	movs	r3, r4
 8006f82:	6864      	ldr	r4, [r4, #4]
 8006f84:	e7a6      	b.n	8006ed4 <_malloc_r+0x24>
 8006f86:	9c00      	ldr	r4, [sp, #0]
 8006f88:	6863      	ldr	r3, [r4, #4]
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	e7ad      	b.n	8006eea <_malloc_r+0x3a>
 8006f8e:	001a      	movs	r2, r3
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	42a3      	cmp	r3, r4
 8006f94:	d1fb      	bne.n	8006f8e <_malloc_r+0xde>
 8006f96:	2300      	movs	r3, #0
 8006f98:	e7da      	b.n	8006f50 <_malloc_r+0xa0>
 8006f9a:	230c      	movs	r3, #12
 8006f9c:	0028      	movs	r0, r5
 8006f9e:	602b      	str	r3, [r5, #0]
 8006fa0:	f000 f80e 	bl	8006fc0 <__malloc_unlock>
 8006fa4:	e7c6      	b.n	8006f34 <_malloc_r+0x84>
 8006fa6:	6007      	str	r7, [r0, #0]
 8006fa8:	e7da      	b.n	8006f60 <_malloc_r+0xb0>
 8006faa:	46c0      	nop			@ (mov r8, r8)
 8006fac:	2000027c 	.word	0x2000027c

08006fb0 <__malloc_lock>:
 8006fb0:	b510      	push	{r4, lr}
 8006fb2:	4802      	ldr	r0, [pc, #8]	@ (8006fbc <__malloc_lock+0xc>)
 8006fb4:	f000 fb29 	bl	800760a <__retarget_lock_acquire_recursive>
 8006fb8:	bd10      	pop	{r4, pc}
 8006fba:	46c0      	nop			@ (mov r8, r8)
 8006fbc:	200003c0 	.word	0x200003c0

08006fc0 <__malloc_unlock>:
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	4802      	ldr	r0, [pc, #8]	@ (8006fcc <__malloc_unlock+0xc>)
 8006fc4:	f000 fb22 	bl	800760c <__retarget_lock_release_recursive>
 8006fc8:	bd10      	pop	{r4, pc}
 8006fca:	46c0      	nop			@ (mov r8, r8)
 8006fcc:	200003c0 	.word	0x200003c0

08006fd0 <std>:
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	b510      	push	{r4, lr}
 8006fd4:	0004      	movs	r4, r0
 8006fd6:	6003      	str	r3, [r0, #0]
 8006fd8:	6043      	str	r3, [r0, #4]
 8006fda:	6083      	str	r3, [r0, #8]
 8006fdc:	8181      	strh	r1, [r0, #12]
 8006fde:	6643      	str	r3, [r0, #100]	@ 0x64
 8006fe0:	81c2      	strh	r2, [r0, #14]
 8006fe2:	6103      	str	r3, [r0, #16]
 8006fe4:	6143      	str	r3, [r0, #20]
 8006fe6:	6183      	str	r3, [r0, #24]
 8006fe8:	0019      	movs	r1, r3
 8006fea:	2208      	movs	r2, #8
 8006fec:	305c      	adds	r0, #92	@ 0x5c
 8006fee:	f000 fa4f 	bl	8007490 <memset>
 8006ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8007020 <std+0x50>)
 8006ff4:	6224      	str	r4, [r4, #32]
 8006ff6:	6263      	str	r3, [r4, #36]	@ 0x24
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8007024 <std+0x54>)
 8006ffa:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8007028 <std+0x58>)
 8006ffe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007000:	4b0a      	ldr	r3, [pc, #40]	@ (800702c <std+0x5c>)
 8007002:	6323      	str	r3, [r4, #48]	@ 0x30
 8007004:	4b0a      	ldr	r3, [pc, #40]	@ (8007030 <std+0x60>)
 8007006:	429c      	cmp	r4, r3
 8007008:	d005      	beq.n	8007016 <std+0x46>
 800700a:	4b0a      	ldr	r3, [pc, #40]	@ (8007034 <std+0x64>)
 800700c:	429c      	cmp	r4, r3
 800700e:	d002      	beq.n	8007016 <std+0x46>
 8007010:	4b09      	ldr	r3, [pc, #36]	@ (8007038 <std+0x68>)
 8007012:	429c      	cmp	r4, r3
 8007014:	d103      	bne.n	800701e <std+0x4e>
 8007016:	0020      	movs	r0, r4
 8007018:	3058      	adds	r0, #88	@ 0x58
 800701a:	f000 faf5 	bl	8007608 <__retarget_lock_init_recursive>
 800701e:	bd10      	pop	{r4, pc}
 8007020:	080072b9 	.word	0x080072b9
 8007024:	080072e1 	.word	0x080072e1
 8007028:	08007319 	.word	0x08007319
 800702c:	08007345 	.word	0x08007345
 8007030:	20000280 	.word	0x20000280
 8007034:	200002e8 	.word	0x200002e8
 8007038:	20000350 	.word	0x20000350

0800703c <stdio_exit_handler>:
 800703c:	b510      	push	{r4, lr}
 800703e:	4a03      	ldr	r2, [pc, #12]	@ (800704c <stdio_exit_handler+0x10>)
 8007040:	4903      	ldr	r1, [pc, #12]	@ (8007050 <stdio_exit_handler+0x14>)
 8007042:	4804      	ldr	r0, [pc, #16]	@ (8007054 <stdio_exit_handler+0x18>)
 8007044:	f000 f86c 	bl	8007120 <_fwalk_sglue>
 8007048:	bd10      	pop	{r4, pc}
 800704a:	46c0      	nop			@ (mov r8, r8)
 800704c:	20000010 	.word	0x20000010
 8007050:	0800800d 	.word	0x0800800d
 8007054:	20000020 	.word	0x20000020

08007058 <cleanup_stdio>:
 8007058:	6841      	ldr	r1, [r0, #4]
 800705a:	4b0b      	ldr	r3, [pc, #44]	@ (8007088 <cleanup_stdio+0x30>)
 800705c:	b510      	push	{r4, lr}
 800705e:	0004      	movs	r4, r0
 8007060:	4299      	cmp	r1, r3
 8007062:	d001      	beq.n	8007068 <cleanup_stdio+0x10>
 8007064:	f000 ffd2 	bl	800800c <_fflush_r>
 8007068:	68a1      	ldr	r1, [r4, #8]
 800706a:	4b08      	ldr	r3, [pc, #32]	@ (800708c <cleanup_stdio+0x34>)
 800706c:	4299      	cmp	r1, r3
 800706e:	d002      	beq.n	8007076 <cleanup_stdio+0x1e>
 8007070:	0020      	movs	r0, r4
 8007072:	f000 ffcb 	bl	800800c <_fflush_r>
 8007076:	68e1      	ldr	r1, [r4, #12]
 8007078:	4b05      	ldr	r3, [pc, #20]	@ (8007090 <cleanup_stdio+0x38>)
 800707a:	4299      	cmp	r1, r3
 800707c:	d002      	beq.n	8007084 <cleanup_stdio+0x2c>
 800707e:	0020      	movs	r0, r4
 8007080:	f000 ffc4 	bl	800800c <_fflush_r>
 8007084:	bd10      	pop	{r4, pc}
 8007086:	46c0      	nop			@ (mov r8, r8)
 8007088:	20000280 	.word	0x20000280
 800708c:	200002e8 	.word	0x200002e8
 8007090:	20000350 	.word	0x20000350

08007094 <global_stdio_init.part.0>:
 8007094:	b510      	push	{r4, lr}
 8007096:	4b09      	ldr	r3, [pc, #36]	@ (80070bc <global_stdio_init.part.0+0x28>)
 8007098:	4a09      	ldr	r2, [pc, #36]	@ (80070c0 <global_stdio_init.part.0+0x2c>)
 800709a:	2104      	movs	r1, #4
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	4809      	ldr	r0, [pc, #36]	@ (80070c4 <global_stdio_init.part.0+0x30>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	f7ff ff95 	bl	8006fd0 <std>
 80070a6:	2201      	movs	r2, #1
 80070a8:	2109      	movs	r1, #9
 80070aa:	4807      	ldr	r0, [pc, #28]	@ (80070c8 <global_stdio_init.part.0+0x34>)
 80070ac:	f7ff ff90 	bl	8006fd0 <std>
 80070b0:	2202      	movs	r2, #2
 80070b2:	2112      	movs	r1, #18
 80070b4:	4805      	ldr	r0, [pc, #20]	@ (80070cc <global_stdio_init.part.0+0x38>)
 80070b6:	f7ff ff8b 	bl	8006fd0 <std>
 80070ba:	bd10      	pop	{r4, pc}
 80070bc:	200003b8 	.word	0x200003b8
 80070c0:	0800703d 	.word	0x0800703d
 80070c4:	20000280 	.word	0x20000280
 80070c8:	200002e8 	.word	0x200002e8
 80070cc:	20000350 	.word	0x20000350

080070d0 <__sfp_lock_acquire>:
 80070d0:	b510      	push	{r4, lr}
 80070d2:	4802      	ldr	r0, [pc, #8]	@ (80070dc <__sfp_lock_acquire+0xc>)
 80070d4:	f000 fa99 	bl	800760a <__retarget_lock_acquire_recursive>
 80070d8:	bd10      	pop	{r4, pc}
 80070da:	46c0      	nop			@ (mov r8, r8)
 80070dc:	200003c1 	.word	0x200003c1

080070e0 <__sfp_lock_release>:
 80070e0:	b510      	push	{r4, lr}
 80070e2:	4802      	ldr	r0, [pc, #8]	@ (80070ec <__sfp_lock_release+0xc>)
 80070e4:	f000 fa92 	bl	800760c <__retarget_lock_release_recursive>
 80070e8:	bd10      	pop	{r4, pc}
 80070ea:	46c0      	nop			@ (mov r8, r8)
 80070ec:	200003c1 	.word	0x200003c1

080070f0 <__sinit>:
 80070f0:	b510      	push	{r4, lr}
 80070f2:	0004      	movs	r4, r0
 80070f4:	f7ff ffec 	bl	80070d0 <__sfp_lock_acquire>
 80070f8:	6a23      	ldr	r3, [r4, #32]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <__sinit+0x14>
 80070fe:	f7ff ffef 	bl	80070e0 <__sfp_lock_release>
 8007102:	bd10      	pop	{r4, pc}
 8007104:	4b04      	ldr	r3, [pc, #16]	@ (8007118 <__sinit+0x28>)
 8007106:	6223      	str	r3, [r4, #32]
 8007108:	4b04      	ldr	r3, [pc, #16]	@ (800711c <__sinit+0x2c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1f6      	bne.n	80070fe <__sinit+0xe>
 8007110:	f7ff ffc0 	bl	8007094 <global_stdio_init.part.0>
 8007114:	e7f3      	b.n	80070fe <__sinit+0xe>
 8007116:	46c0      	nop			@ (mov r8, r8)
 8007118:	08007059 	.word	0x08007059
 800711c:	200003b8 	.word	0x200003b8

08007120 <_fwalk_sglue>:
 8007120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007122:	0014      	movs	r4, r2
 8007124:	2600      	movs	r6, #0
 8007126:	9000      	str	r0, [sp, #0]
 8007128:	9101      	str	r1, [sp, #4]
 800712a:	68a5      	ldr	r5, [r4, #8]
 800712c:	6867      	ldr	r7, [r4, #4]
 800712e:	3f01      	subs	r7, #1
 8007130:	d504      	bpl.n	800713c <_fwalk_sglue+0x1c>
 8007132:	6824      	ldr	r4, [r4, #0]
 8007134:	2c00      	cmp	r4, #0
 8007136:	d1f8      	bne.n	800712a <_fwalk_sglue+0xa>
 8007138:	0030      	movs	r0, r6
 800713a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800713c:	89ab      	ldrh	r3, [r5, #12]
 800713e:	2b01      	cmp	r3, #1
 8007140:	d908      	bls.n	8007154 <_fwalk_sglue+0x34>
 8007142:	220e      	movs	r2, #14
 8007144:	5eab      	ldrsh	r3, [r5, r2]
 8007146:	3301      	adds	r3, #1
 8007148:	d004      	beq.n	8007154 <_fwalk_sglue+0x34>
 800714a:	0029      	movs	r1, r5
 800714c:	9800      	ldr	r0, [sp, #0]
 800714e:	9b01      	ldr	r3, [sp, #4]
 8007150:	4798      	blx	r3
 8007152:	4306      	orrs	r6, r0
 8007154:	3568      	adds	r5, #104	@ 0x68
 8007156:	e7ea      	b.n	800712e <_fwalk_sglue+0xe>

08007158 <iprintf>:
 8007158:	b40f      	push	{r0, r1, r2, r3}
 800715a:	b507      	push	{r0, r1, r2, lr}
 800715c:	4905      	ldr	r1, [pc, #20]	@ (8007174 <iprintf+0x1c>)
 800715e:	ab04      	add	r3, sp, #16
 8007160:	6808      	ldr	r0, [r1, #0]
 8007162:	cb04      	ldmia	r3!, {r2}
 8007164:	6881      	ldr	r1, [r0, #8]
 8007166:	9301      	str	r3, [sp, #4]
 8007168:	f000 fc32 	bl	80079d0 <_vfiprintf_r>
 800716c:	b003      	add	sp, #12
 800716e:	bc08      	pop	{r3}
 8007170:	b004      	add	sp, #16
 8007172:	4718      	bx	r3
 8007174:	2000001c 	.word	0x2000001c

08007178 <putchar>:
 8007178:	b510      	push	{r4, lr}
 800717a:	4b03      	ldr	r3, [pc, #12]	@ (8007188 <putchar+0x10>)
 800717c:	0001      	movs	r1, r0
 800717e:	6818      	ldr	r0, [r3, #0]
 8007180:	6882      	ldr	r2, [r0, #8]
 8007182:	f000 ffda 	bl	800813a <_putc_r>
 8007186:	bd10      	pop	{r4, pc}
 8007188:	2000001c 	.word	0x2000001c

0800718c <_puts_r>:
 800718c:	6a03      	ldr	r3, [r0, #32]
 800718e:	b570      	push	{r4, r5, r6, lr}
 8007190:	0005      	movs	r5, r0
 8007192:	000e      	movs	r6, r1
 8007194:	6884      	ldr	r4, [r0, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d101      	bne.n	800719e <_puts_r+0x12>
 800719a:	f7ff ffa9 	bl	80070f0 <__sinit>
 800719e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071a0:	07db      	lsls	r3, r3, #31
 80071a2:	d405      	bmi.n	80071b0 <_puts_r+0x24>
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	059b      	lsls	r3, r3, #22
 80071a8:	d402      	bmi.n	80071b0 <_puts_r+0x24>
 80071aa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071ac:	f000 fa2d 	bl	800760a <__retarget_lock_acquire_recursive>
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	071b      	lsls	r3, r3, #28
 80071b4:	d502      	bpl.n	80071bc <_puts_r+0x30>
 80071b6:	6923      	ldr	r3, [r4, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d11f      	bne.n	80071fc <_puts_r+0x70>
 80071bc:	0021      	movs	r1, r4
 80071be:	0028      	movs	r0, r5
 80071c0:	f000 f908 	bl	80073d4 <__swsetup_r>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	d019      	beq.n	80071fc <_puts_r+0x70>
 80071c8:	2501      	movs	r5, #1
 80071ca:	426d      	negs	r5, r5
 80071cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80071ce:	07db      	lsls	r3, r3, #31
 80071d0:	d405      	bmi.n	80071de <_puts_r+0x52>
 80071d2:	89a3      	ldrh	r3, [r4, #12]
 80071d4:	059b      	lsls	r3, r3, #22
 80071d6:	d402      	bmi.n	80071de <_puts_r+0x52>
 80071d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80071da:	f000 fa17 	bl	800760c <__retarget_lock_release_recursive>
 80071de:	0028      	movs	r0, r5
 80071e0:	bd70      	pop	{r4, r5, r6, pc}
 80071e2:	3601      	adds	r6, #1
 80071e4:	60a3      	str	r3, [r4, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	da04      	bge.n	80071f4 <_puts_r+0x68>
 80071ea:	69a2      	ldr	r2, [r4, #24]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	dc16      	bgt.n	800721e <_puts_r+0x92>
 80071f0:	290a      	cmp	r1, #10
 80071f2:	d014      	beq.n	800721e <_puts_r+0x92>
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	6022      	str	r2, [r4, #0]
 80071fa:	7019      	strb	r1, [r3, #0]
 80071fc:	68a3      	ldr	r3, [r4, #8]
 80071fe:	7831      	ldrb	r1, [r6, #0]
 8007200:	3b01      	subs	r3, #1
 8007202:	2900      	cmp	r1, #0
 8007204:	d1ed      	bne.n	80071e2 <_puts_r+0x56>
 8007206:	60a3      	str	r3, [r4, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	da0f      	bge.n	800722c <_puts_r+0xa0>
 800720c:	0022      	movs	r2, r4
 800720e:	0028      	movs	r0, r5
 8007210:	310a      	adds	r1, #10
 8007212:	f000 f89d 	bl	8007350 <__swbuf_r>
 8007216:	3001      	adds	r0, #1
 8007218:	d0d6      	beq.n	80071c8 <_puts_r+0x3c>
 800721a:	250a      	movs	r5, #10
 800721c:	e7d6      	b.n	80071cc <_puts_r+0x40>
 800721e:	0022      	movs	r2, r4
 8007220:	0028      	movs	r0, r5
 8007222:	f000 f895 	bl	8007350 <__swbuf_r>
 8007226:	3001      	adds	r0, #1
 8007228:	d1e8      	bne.n	80071fc <_puts_r+0x70>
 800722a:	e7cd      	b.n	80071c8 <_puts_r+0x3c>
 800722c:	6823      	ldr	r3, [r4, #0]
 800722e:	1c5a      	adds	r2, r3, #1
 8007230:	6022      	str	r2, [r4, #0]
 8007232:	220a      	movs	r2, #10
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	e7f0      	b.n	800721a <_puts_r+0x8e>

08007238 <puts>:
 8007238:	b510      	push	{r4, lr}
 800723a:	4b03      	ldr	r3, [pc, #12]	@ (8007248 <puts+0x10>)
 800723c:	0001      	movs	r1, r0
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	f7ff ffa4 	bl	800718c <_puts_r>
 8007244:	bd10      	pop	{r4, pc}
 8007246:	46c0      	nop			@ (mov r8, r8)
 8007248:	2000001c 	.word	0x2000001c

0800724c <sniprintf>:
 800724c:	b40c      	push	{r2, r3}
 800724e:	b530      	push	{r4, r5, lr}
 8007250:	4b18      	ldr	r3, [pc, #96]	@ (80072b4 <sniprintf+0x68>)
 8007252:	000c      	movs	r4, r1
 8007254:	681d      	ldr	r5, [r3, #0]
 8007256:	b09d      	sub	sp, #116	@ 0x74
 8007258:	2900      	cmp	r1, #0
 800725a:	da08      	bge.n	800726e <sniprintf+0x22>
 800725c:	238b      	movs	r3, #139	@ 0x8b
 800725e:	2001      	movs	r0, #1
 8007260:	602b      	str	r3, [r5, #0]
 8007262:	4240      	negs	r0, r0
 8007264:	b01d      	add	sp, #116	@ 0x74
 8007266:	bc30      	pop	{r4, r5}
 8007268:	bc08      	pop	{r3}
 800726a:	b002      	add	sp, #8
 800726c:	4718      	bx	r3
 800726e:	2382      	movs	r3, #130	@ 0x82
 8007270:	466a      	mov	r2, sp
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	8293      	strh	r3, [r2, #20]
 8007276:	2300      	movs	r3, #0
 8007278:	9002      	str	r0, [sp, #8]
 800727a:	931b      	str	r3, [sp, #108]	@ 0x6c
 800727c:	9006      	str	r0, [sp, #24]
 800727e:	4299      	cmp	r1, r3
 8007280:	d000      	beq.n	8007284 <sniprintf+0x38>
 8007282:	1e4b      	subs	r3, r1, #1
 8007284:	9304      	str	r3, [sp, #16]
 8007286:	9307      	str	r3, [sp, #28]
 8007288:	2301      	movs	r3, #1
 800728a:	466a      	mov	r2, sp
 800728c:	425b      	negs	r3, r3
 800728e:	82d3      	strh	r3, [r2, #22]
 8007290:	0028      	movs	r0, r5
 8007292:	ab21      	add	r3, sp, #132	@ 0x84
 8007294:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007296:	a902      	add	r1, sp, #8
 8007298:	9301      	str	r3, [sp, #4]
 800729a:	f000 fa73 	bl	8007784 <_svfiprintf_r>
 800729e:	1c43      	adds	r3, r0, #1
 80072a0:	da01      	bge.n	80072a6 <sniprintf+0x5a>
 80072a2:	238b      	movs	r3, #139	@ 0x8b
 80072a4:	602b      	str	r3, [r5, #0]
 80072a6:	2c00      	cmp	r4, #0
 80072a8:	d0dc      	beq.n	8007264 <sniprintf+0x18>
 80072aa:	2200      	movs	r2, #0
 80072ac:	9b02      	ldr	r3, [sp, #8]
 80072ae:	701a      	strb	r2, [r3, #0]
 80072b0:	e7d8      	b.n	8007264 <sniprintf+0x18>
 80072b2:	46c0      	nop			@ (mov r8, r8)
 80072b4:	2000001c 	.word	0x2000001c

080072b8 <__sread>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	000c      	movs	r4, r1
 80072bc:	250e      	movs	r5, #14
 80072be:	5f49      	ldrsh	r1, [r1, r5]
 80072c0:	f000 f93e 	bl	8007540 <_read_r>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	db03      	blt.n	80072d0 <__sread+0x18>
 80072c8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80072ca:	181b      	adds	r3, r3, r0
 80072cc:	6563      	str	r3, [r4, #84]	@ 0x54
 80072ce:	bd70      	pop	{r4, r5, r6, pc}
 80072d0:	89a3      	ldrh	r3, [r4, #12]
 80072d2:	4a02      	ldr	r2, [pc, #8]	@ (80072dc <__sread+0x24>)
 80072d4:	4013      	ands	r3, r2
 80072d6:	81a3      	strh	r3, [r4, #12]
 80072d8:	e7f9      	b.n	80072ce <__sread+0x16>
 80072da:	46c0      	nop			@ (mov r8, r8)
 80072dc:	ffffefff 	.word	0xffffefff

080072e0 <__swrite>:
 80072e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e2:	001f      	movs	r7, r3
 80072e4:	898b      	ldrh	r3, [r1, #12]
 80072e6:	0005      	movs	r5, r0
 80072e8:	000c      	movs	r4, r1
 80072ea:	0016      	movs	r6, r2
 80072ec:	05db      	lsls	r3, r3, #23
 80072ee:	d505      	bpl.n	80072fc <__swrite+0x1c>
 80072f0:	230e      	movs	r3, #14
 80072f2:	5ec9      	ldrsh	r1, [r1, r3]
 80072f4:	2200      	movs	r2, #0
 80072f6:	2302      	movs	r3, #2
 80072f8:	f000 f90e 	bl	8007518 <_lseek_r>
 80072fc:	89a3      	ldrh	r3, [r4, #12]
 80072fe:	4a05      	ldr	r2, [pc, #20]	@ (8007314 <__swrite+0x34>)
 8007300:	0028      	movs	r0, r5
 8007302:	4013      	ands	r3, r2
 8007304:	81a3      	strh	r3, [r4, #12]
 8007306:	0032      	movs	r2, r6
 8007308:	230e      	movs	r3, #14
 800730a:	5ee1      	ldrsh	r1, [r4, r3]
 800730c:	003b      	movs	r3, r7
 800730e:	f000 f93d 	bl	800758c <_write_r>
 8007312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007314:	ffffefff 	.word	0xffffefff

08007318 <__sseek>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	000c      	movs	r4, r1
 800731c:	250e      	movs	r5, #14
 800731e:	5f49      	ldrsh	r1, [r1, r5]
 8007320:	f000 f8fa 	bl	8007518 <_lseek_r>
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	1c42      	adds	r2, r0, #1
 8007328:	d103      	bne.n	8007332 <__sseek+0x1a>
 800732a:	4a05      	ldr	r2, [pc, #20]	@ (8007340 <__sseek+0x28>)
 800732c:	4013      	ands	r3, r2
 800732e:	81a3      	strh	r3, [r4, #12]
 8007330:	bd70      	pop	{r4, r5, r6, pc}
 8007332:	2280      	movs	r2, #128	@ 0x80
 8007334:	0152      	lsls	r2, r2, #5
 8007336:	4313      	orrs	r3, r2
 8007338:	81a3      	strh	r3, [r4, #12]
 800733a:	6560      	str	r0, [r4, #84]	@ 0x54
 800733c:	e7f8      	b.n	8007330 <__sseek+0x18>
 800733e:	46c0      	nop			@ (mov r8, r8)
 8007340:	ffffefff 	.word	0xffffefff

08007344 <__sclose>:
 8007344:	b510      	push	{r4, lr}
 8007346:	230e      	movs	r3, #14
 8007348:	5ec9      	ldrsh	r1, [r1, r3]
 800734a:	f000 f8d3 	bl	80074f4 <_close_r>
 800734e:	bd10      	pop	{r4, pc}

08007350 <__swbuf_r>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	0006      	movs	r6, r0
 8007354:	000d      	movs	r5, r1
 8007356:	0014      	movs	r4, r2
 8007358:	2800      	cmp	r0, #0
 800735a:	d004      	beq.n	8007366 <__swbuf_r+0x16>
 800735c:	6a03      	ldr	r3, [r0, #32]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d101      	bne.n	8007366 <__swbuf_r+0x16>
 8007362:	f7ff fec5 	bl	80070f0 <__sinit>
 8007366:	69a3      	ldr	r3, [r4, #24]
 8007368:	60a3      	str	r3, [r4, #8]
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	071b      	lsls	r3, r3, #28
 800736e:	d502      	bpl.n	8007376 <__swbuf_r+0x26>
 8007370:	6923      	ldr	r3, [r4, #16]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d109      	bne.n	800738a <__swbuf_r+0x3a>
 8007376:	0021      	movs	r1, r4
 8007378:	0030      	movs	r0, r6
 800737a:	f000 f82b 	bl	80073d4 <__swsetup_r>
 800737e:	2800      	cmp	r0, #0
 8007380:	d003      	beq.n	800738a <__swbuf_r+0x3a>
 8007382:	2501      	movs	r5, #1
 8007384:	426d      	negs	r5, r5
 8007386:	0028      	movs	r0, r5
 8007388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800738a:	6923      	ldr	r3, [r4, #16]
 800738c:	6820      	ldr	r0, [r4, #0]
 800738e:	b2ef      	uxtb	r7, r5
 8007390:	1ac0      	subs	r0, r0, r3
 8007392:	6963      	ldr	r3, [r4, #20]
 8007394:	b2ed      	uxtb	r5, r5
 8007396:	4283      	cmp	r3, r0
 8007398:	dc05      	bgt.n	80073a6 <__swbuf_r+0x56>
 800739a:	0021      	movs	r1, r4
 800739c:	0030      	movs	r0, r6
 800739e:	f000 fe35 	bl	800800c <_fflush_r>
 80073a2:	2800      	cmp	r0, #0
 80073a4:	d1ed      	bne.n	8007382 <__swbuf_r+0x32>
 80073a6:	68a3      	ldr	r3, [r4, #8]
 80073a8:	3001      	adds	r0, #1
 80073aa:	3b01      	subs	r3, #1
 80073ac:	60a3      	str	r3, [r4, #8]
 80073ae:	6823      	ldr	r3, [r4, #0]
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	6022      	str	r2, [r4, #0]
 80073b4:	701f      	strb	r7, [r3, #0]
 80073b6:	6963      	ldr	r3, [r4, #20]
 80073b8:	4283      	cmp	r3, r0
 80073ba:	d004      	beq.n	80073c6 <__swbuf_r+0x76>
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	07db      	lsls	r3, r3, #31
 80073c0:	d5e1      	bpl.n	8007386 <__swbuf_r+0x36>
 80073c2:	2d0a      	cmp	r5, #10
 80073c4:	d1df      	bne.n	8007386 <__swbuf_r+0x36>
 80073c6:	0021      	movs	r1, r4
 80073c8:	0030      	movs	r0, r6
 80073ca:	f000 fe1f 	bl	800800c <_fflush_r>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d0d9      	beq.n	8007386 <__swbuf_r+0x36>
 80073d2:	e7d6      	b.n	8007382 <__swbuf_r+0x32>

080073d4 <__swsetup_r>:
 80073d4:	4b2d      	ldr	r3, [pc, #180]	@ (800748c <__swsetup_r+0xb8>)
 80073d6:	b570      	push	{r4, r5, r6, lr}
 80073d8:	0005      	movs	r5, r0
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	000c      	movs	r4, r1
 80073de:	2800      	cmp	r0, #0
 80073e0:	d004      	beq.n	80073ec <__swsetup_r+0x18>
 80073e2:	6a03      	ldr	r3, [r0, #32]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d101      	bne.n	80073ec <__swsetup_r+0x18>
 80073e8:	f7ff fe82 	bl	80070f0 <__sinit>
 80073ec:	220c      	movs	r2, #12
 80073ee:	5ea3      	ldrsh	r3, [r4, r2]
 80073f0:	071a      	lsls	r2, r3, #28
 80073f2:	d423      	bmi.n	800743c <__swsetup_r+0x68>
 80073f4:	06da      	lsls	r2, r3, #27
 80073f6:	d407      	bmi.n	8007408 <__swsetup_r+0x34>
 80073f8:	2209      	movs	r2, #9
 80073fa:	602a      	str	r2, [r5, #0]
 80073fc:	2240      	movs	r2, #64	@ 0x40
 80073fe:	2001      	movs	r0, #1
 8007400:	4313      	orrs	r3, r2
 8007402:	81a3      	strh	r3, [r4, #12]
 8007404:	4240      	negs	r0, r0
 8007406:	e03a      	b.n	800747e <__swsetup_r+0xaa>
 8007408:	075b      	lsls	r3, r3, #29
 800740a:	d513      	bpl.n	8007434 <__swsetup_r+0x60>
 800740c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800740e:	2900      	cmp	r1, #0
 8007410:	d008      	beq.n	8007424 <__swsetup_r+0x50>
 8007412:	0023      	movs	r3, r4
 8007414:	3344      	adds	r3, #68	@ 0x44
 8007416:	4299      	cmp	r1, r3
 8007418:	d002      	beq.n	8007420 <__swsetup_r+0x4c>
 800741a:	0028      	movs	r0, r5
 800741c:	f000 f908 	bl	8007630 <_free_r>
 8007420:	2300      	movs	r3, #0
 8007422:	6363      	str	r3, [r4, #52]	@ 0x34
 8007424:	2224      	movs	r2, #36	@ 0x24
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	4393      	bics	r3, r2
 800742a:	81a3      	strh	r3, [r4, #12]
 800742c:	2300      	movs	r3, #0
 800742e:	6063      	str	r3, [r4, #4]
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	6023      	str	r3, [r4, #0]
 8007434:	2308      	movs	r3, #8
 8007436:	89a2      	ldrh	r2, [r4, #12]
 8007438:	4313      	orrs	r3, r2
 800743a:	81a3      	strh	r3, [r4, #12]
 800743c:	6923      	ldr	r3, [r4, #16]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10b      	bne.n	800745a <__swsetup_r+0x86>
 8007442:	21a0      	movs	r1, #160	@ 0xa0
 8007444:	2280      	movs	r2, #128	@ 0x80
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	0089      	lsls	r1, r1, #2
 800744a:	0092      	lsls	r2, r2, #2
 800744c:	400b      	ands	r3, r1
 800744e:	4293      	cmp	r3, r2
 8007450:	d003      	beq.n	800745a <__swsetup_r+0x86>
 8007452:	0021      	movs	r1, r4
 8007454:	0028      	movs	r0, r5
 8007456:	f000 fe2f 	bl	80080b8 <__smakebuf_r>
 800745a:	220c      	movs	r2, #12
 800745c:	5ea3      	ldrsh	r3, [r4, r2]
 800745e:	2101      	movs	r1, #1
 8007460:	001a      	movs	r2, r3
 8007462:	400a      	ands	r2, r1
 8007464:	420b      	tst	r3, r1
 8007466:	d00b      	beq.n	8007480 <__swsetup_r+0xac>
 8007468:	2200      	movs	r2, #0
 800746a:	60a2      	str	r2, [r4, #8]
 800746c:	6962      	ldr	r2, [r4, #20]
 800746e:	4252      	negs	r2, r2
 8007470:	61a2      	str	r2, [r4, #24]
 8007472:	2000      	movs	r0, #0
 8007474:	6922      	ldr	r2, [r4, #16]
 8007476:	4282      	cmp	r2, r0
 8007478:	d101      	bne.n	800747e <__swsetup_r+0xaa>
 800747a:	061a      	lsls	r2, r3, #24
 800747c:	d4be      	bmi.n	80073fc <__swsetup_r+0x28>
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	0799      	lsls	r1, r3, #30
 8007482:	d400      	bmi.n	8007486 <__swsetup_r+0xb2>
 8007484:	6962      	ldr	r2, [r4, #20]
 8007486:	60a2      	str	r2, [r4, #8]
 8007488:	e7f3      	b.n	8007472 <__swsetup_r+0x9e>
 800748a:	46c0      	nop			@ (mov r8, r8)
 800748c:	2000001c 	.word	0x2000001c

08007490 <memset>:
 8007490:	0003      	movs	r3, r0
 8007492:	1882      	adds	r2, r0, r2
 8007494:	4293      	cmp	r3, r2
 8007496:	d100      	bne.n	800749a <memset+0xa>
 8007498:	4770      	bx	lr
 800749a:	7019      	strb	r1, [r3, #0]
 800749c:	3301      	adds	r3, #1
 800749e:	e7f9      	b.n	8007494 <memset+0x4>

080074a0 <strncpy>:
 80074a0:	0003      	movs	r3, r0
 80074a2:	b530      	push	{r4, r5, lr}
 80074a4:	001d      	movs	r5, r3
 80074a6:	2a00      	cmp	r2, #0
 80074a8:	d006      	beq.n	80074b8 <strncpy+0x18>
 80074aa:	780c      	ldrb	r4, [r1, #0]
 80074ac:	3a01      	subs	r2, #1
 80074ae:	3301      	adds	r3, #1
 80074b0:	702c      	strb	r4, [r5, #0]
 80074b2:	3101      	adds	r1, #1
 80074b4:	2c00      	cmp	r4, #0
 80074b6:	d1f5      	bne.n	80074a4 <strncpy+0x4>
 80074b8:	2100      	movs	r1, #0
 80074ba:	189a      	adds	r2, r3, r2
 80074bc:	4293      	cmp	r3, r2
 80074be:	d100      	bne.n	80074c2 <strncpy+0x22>
 80074c0:	bd30      	pop	{r4, r5, pc}
 80074c2:	7019      	strb	r1, [r3, #0]
 80074c4:	3301      	adds	r3, #1
 80074c6:	e7f9      	b.n	80074bc <strncpy+0x1c>

080074c8 <strstr>:
 80074c8:	780a      	ldrb	r2, [r1, #0]
 80074ca:	b530      	push	{r4, r5, lr}
 80074cc:	2a00      	cmp	r2, #0
 80074ce:	d10c      	bne.n	80074ea <strstr+0x22>
 80074d0:	bd30      	pop	{r4, r5, pc}
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d108      	bne.n	80074e8 <strstr+0x20>
 80074d6:	2301      	movs	r3, #1
 80074d8:	5ccc      	ldrb	r4, [r1, r3]
 80074da:	2c00      	cmp	r4, #0
 80074dc:	d0f8      	beq.n	80074d0 <strstr+0x8>
 80074de:	5cc5      	ldrb	r5, [r0, r3]
 80074e0:	42a5      	cmp	r5, r4
 80074e2:	d101      	bne.n	80074e8 <strstr+0x20>
 80074e4:	3301      	adds	r3, #1
 80074e6:	e7f7      	b.n	80074d8 <strstr+0x10>
 80074e8:	3001      	adds	r0, #1
 80074ea:	7803      	ldrb	r3, [r0, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d1f0      	bne.n	80074d2 <strstr+0xa>
 80074f0:	0018      	movs	r0, r3
 80074f2:	e7ed      	b.n	80074d0 <strstr+0x8>

080074f4 <_close_r>:
 80074f4:	2300      	movs	r3, #0
 80074f6:	b570      	push	{r4, r5, r6, lr}
 80074f8:	4d06      	ldr	r5, [pc, #24]	@ (8007514 <_close_r+0x20>)
 80074fa:	0004      	movs	r4, r0
 80074fc:	0008      	movs	r0, r1
 80074fe:	602b      	str	r3, [r5, #0]
 8007500:	f7f9 fb47 	bl	8000b92 <_close>
 8007504:	1c43      	adds	r3, r0, #1
 8007506:	d103      	bne.n	8007510 <_close_r+0x1c>
 8007508:	682b      	ldr	r3, [r5, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d000      	beq.n	8007510 <_close_r+0x1c>
 800750e:	6023      	str	r3, [r4, #0]
 8007510:	bd70      	pop	{r4, r5, r6, pc}
 8007512:	46c0      	nop			@ (mov r8, r8)
 8007514:	200003bc 	.word	0x200003bc

08007518 <_lseek_r>:
 8007518:	b570      	push	{r4, r5, r6, lr}
 800751a:	0004      	movs	r4, r0
 800751c:	0008      	movs	r0, r1
 800751e:	0011      	movs	r1, r2
 8007520:	001a      	movs	r2, r3
 8007522:	2300      	movs	r3, #0
 8007524:	4d05      	ldr	r5, [pc, #20]	@ (800753c <_lseek_r+0x24>)
 8007526:	602b      	str	r3, [r5, #0]
 8007528:	f7f9 fb54 	bl	8000bd4 <_lseek>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d103      	bne.n	8007538 <_lseek_r+0x20>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d000      	beq.n	8007538 <_lseek_r+0x20>
 8007536:	6023      	str	r3, [r4, #0]
 8007538:	bd70      	pop	{r4, r5, r6, pc}
 800753a:	46c0      	nop			@ (mov r8, r8)
 800753c:	200003bc 	.word	0x200003bc

08007540 <_read_r>:
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	0004      	movs	r4, r0
 8007544:	0008      	movs	r0, r1
 8007546:	0011      	movs	r1, r2
 8007548:	001a      	movs	r2, r3
 800754a:	2300      	movs	r3, #0
 800754c:	4d05      	ldr	r5, [pc, #20]	@ (8007564 <_read_r+0x24>)
 800754e:	602b      	str	r3, [r5, #0]
 8007550:	f7f9 fae6 	bl	8000b20 <_read>
 8007554:	1c43      	adds	r3, r0, #1
 8007556:	d103      	bne.n	8007560 <_read_r+0x20>
 8007558:	682b      	ldr	r3, [r5, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d000      	beq.n	8007560 <_read_r+0x20>
 800755e:	6023      	str	r3, [r4, #0]
 8007560:	bd70      	pop	{r4, r5, r6, pc}
 8007562:	46c0      	nop			@ (mov r8, r8)
 8007564:	200003bc 	.word	0x200003bc

08007568 <_sbrk_r>:
 8007568:	2300      	movs	r3, #0
 800756a:	b570      	push	{r4, r5, r6, lr}
 800756c:	4d06      	ldr	r5, [pc, #24]	@ (8007588 <_sbrk_r+0x20>)
 800756e:	0004      	movs	r4, r0
 8007570:	0008      	movs	r0, r1
 8007572:	602b      	str	r3, [r5, #0]
 8007574:	f7f9 fb3a 	bl	8000bec <_sbrk>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d103      	bne.n	8007584 <_sbrk_r+0x1c>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d000      	beq.n	8007584 <_sbrk_r+0x1c>
 8007582:	6023      	str	r3, [r4, #0]
 8007584:	bd70      	pop	{r4, r5, r6, pc}
 8007586:	46c0      	nop			@ (mov r8, r8)
 8007588:	200003bc 	.word	0x200003bc

0800758c <_write_r>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	0004      	movs	r4, r0
 8007590:	0008      	movs	r0, r1
 8007592:	0011      	movs	r1, r2
 8007594:	001a      	movs	r2, r3
 8007596:	2300      	movs	r3, #0
 8007598:	4d05      	ldr	r5, [pc, #20]	@ (80075b0 <_write_r+0x24>)
 800759a:	602b      	str	r3, [r5, #0]
 800759c:	f7f9 fadd 	bl	8000b5a <_write>
 80075a0:	1c43      	adds	r3, r0, #1
 80075a2:	d103      	bne.n	80075ac <_write_r+0x20>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d000      	beq.n	80075ac <_write_r+0x20>
 80075aa:	6023      	str	r3, [r4, #0]
 80075ac:	bd70      	pop	{r4, r5, r6, pc}
 80075ae:	46c0      	nop			@ (mov r8, r8)
 80075b0:	200003bc 	.word	0x200003bc

080075b4 <__errno>:
 80075b4:	4b01      	ldr	r3, [pc, #4]	@ (80075bc <__errno+0x8>)
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	4770      	bx	lr
 80075ba:	46c0      	nop			@ (mov r8, r8)
 80075bc:	2000001c 	.word	0x2000001c

080075c0 <__libc_init_array>:
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	2600      	movs	r6, #0
 80075c4:	4c0c      	ldr	r4, [pc, #48]	@ (80075f8 <__libc_init_array+0x38>)
 80075c6:	4d0d      	ldr	r5, [pc, #52]	@ (80075fc <__libc_init_array+0x3c>)
 80075c8:	1b64      	subs	r4, r4, r5
 80075ca:	10a4      	asrs	r4, r4, #2
 80075cc:	42a6      	cmp	r6, r4
 80075ce:	d109      	bne.n	80075e4 <__libc_init_array+0x24>
 80075d0:	2600      	movs	r6, #0
 80075d2:	f000 fe63 	bl	800829c <_init>
 80075d6:	4c0a      	ldr	r4, [pc, #40]	@ (8007600 <__libc_init_array+0x40>)
 80075d8:	4d0a      	ldr	r5, [pc, #40]	@ (8007604 <__libc_init_array+0x44>)
 80075da:	1b64      	subs	r4, r4, r5
 80075dc:	10a4      	asrs	r4, r4, #2
 80075de:	42a6      	cmp	r6, r4
 80075e0:	d105      	bne.n	80075ee <__libc_init_array+0x2e>
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	00b3      	lsls	r3, r6, #2
 80075e6:	58eb      	ldr	r3, [r5, r3]
 80075e8:	4798      	blx	r3
 80075ea:	3601      	adds	r6, #1
 80075ec:	e7ee      	b.n	80075cc <__libc_init_array+0xc>
 80075ee:	00b3      	lsls	r3, r6, #2
 80075f0:	58eb      	ldr	r3, [r5, r3]
 80075f2:	4798      	blx	r3
 80075f4:	3601      	adds	r6, #1
 80075f6:	e7f2      	b.n	80075de <__libc_init_array+0x1e>
 80075f8:	08009484 	.word	0x08009484
 80075fc:	08009484 	.word	0x08009484
 8007600:	08009488 	.word	0x08009488
 8007604:	08009484 	.word	0x08009484

08007608 <__retarget_lock_init_recursive>:
 8007608:	4770      	bx	lr

0800760a <__retarget_lock_acquire_recursive>:
 800760a:	4770      	bx	lr

0800760c <__retarget_lock_release_recursive>:
 800760c:	4770      	bx	lr

0800760e <strcpy>:
 800760e:	0003      	movs	r3, r0
 8007610:	780a      	ldrb	r2, [r1, #0]
 8007612:	3101      	adds	r1, #1
 8007614:	701a      	strb	r2, [r3, #0]
 8007616:	3301      	adds	r3, #1
 8007618:	2a00      	cmp	r2, #0
 800761a:	d1f9      	bne.n	8007610 <strcpy+0x2>
 800761c:	4770      	bx	lr

0800761e <memcpy>:
 800761e:	2300      	movs	r3, #0
 8007620:	b510      	push	{r4, lr}
 8007622:	429a      	cmp	r2, r3
 8007624:	d100      	bne.n	8007628 <memcpy+0xa>
 8007626:	bd10      	pop	{r4, pc}
 8007628:	5ccc      	ldrb	r4, [r1, r3]
 800762a:	54c4      	strb	r4, [r0, r3]
 800762c:	3301      	adds	r3, #1
 800762e:	e7f8      	b.n	8007622 <memcpy+0x4>

08007630 <_free_r>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	0005      	movs	r5, r0
 8007634:	1e0c      	subs	r4, r1, #0
 8007636:	d010      	beq.n	800765a <_free_r+0x2a>
 8007638:	3c04      	subs	r4, #4
 800763a:	6823      	ldr	r3, [r4, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	da00      	bge.n	8007642 <_free_r+0x12>
 8007640:	18e4      	adds	r4, r4, r3
 8007642:	0028      	movs	r0, r5
 8007644:	f7ff fcb4 	bl	8006fb0 <__malloc_lock>
 8007648:	4a1d      	ldr	r2, [pc, #116]	@ (80076c0 <_free_r+0x90>)
 800764a:	6813      	ldr	r3, [r2, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d105      	bne.n	800765c <_free_r+0x2c>
 8007650:	6063      	str	r3, [r4, #4]
 8007652:	6014      	str	r4, [r2, #0]
 8007654:	0028      	movs	r0, r5
 8007656:	f7ff fcb3 	bl	8006fc0 <__malloc_unlock>
 800765a:	bd70      	pop	{r4, r5, r6, pc}
 800765c:	42a3      	cmp	r3, r4
 800765e:	d908      	bls.n	8007672 <_free_r+0x42>
 8007660:	6820      	ldr	r0, [r4, #0]
 8007662:	1821      	adds	r1, r4, r0
 8007664:	428b      	cmp	r3, r1
 8007666:	d1f3      	bne.n	8007650 <_free_r+0x20>
 8007668:	6819      	ldr	r1, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	1809      	adds	r1, r1, r0
 800766e:	6021      	str	r1, [r4, #0]
 8007670:	e7ee      	b.n	8007650 <_free_r+0x20>
 8007672:	001a      	movs	r2, r3
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <_free_r+0x4e>
 800767a:	42a3      	cmp	r3, r4
 800767c:	d9f9      	bls.n	8007672 <_free_r+0x42>
 800767e:	6811      	ldr	r1, [r2, #0]
 8007680:	1850      	adds	r0, r2, r1
 8007682:	42a0      	cmp	r0, r4
 8007684:	d10b      	bne.n	800769e <_free_r+0x6e>
 8007686:	6820      	ldr	r0, [r4, #0]
 8007688:	1809      	adds	r1, r1, r0
 800768a:	1850      	adds	r0, r2, r1
 800768c:	6011      	str	r1, [r2, #0]
 800768e:	4283      	cmp	r3, r0
 8007690:	d1e0      	bne.n	8007654 <_free_r+0x24>
 8007692:	6818      	ldr	r0, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	1841      	adds	r1, r0, r1
 8007698:	6011      	str	r1, [r2, #0]
 800769a:	6053      	str	r3, [r2, #4]
 800769c:	e7da      	b.n	8007654 <_free_r+0x24>
 800769e:	42a0      	cmp	r0, r4
 80076a0:	d902      	bls.n	80076a8 <_free_r+0x78>
 80076a2:	230c      	movs	r3, #12
 80076a4:	602b      	str	r3, [r5, #0]
 80076a6:	e7d5      	b.n	8007654 <_free_r+0x24>
 80076a8:	6820      	ldr	r0, [r4, #0]
 80076aa:	1821      	adds	r1, r4, r0
 80076ac:	428b      	cmp	r3, r1
 80076ae:	d103      	bne.n	80076b8 <_free_r+0x88>
 80076b0:	6819      	ldr	r1, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	1809      	adds	r1, r1, r0
 80076b6:	6021      	str	r1, [r4, #0]
 80076b8:	6063      	str	r3, [r4, #4]
 80076ba:	6054      	str	r4, [r2, #4]
 80076bc:	e7ca      	b.n	8007654 <_free_r+0x24>
 80076be:	46c0      	nop			@ (mov r8, r8)
 80076c0:	2000027c 	.word	0x2000027c

080076c4 <__ssputs_r>:
 80076c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80076c6:	688e      	ldr	r6, [r1, #8]
 80076c8:	b085      	sub	sp, #20
 80076ca:	001f      	movs	r7, r3
 80076cc:	000c      	movs	r4, r1
 80076ce:	680b      	ldr	r3, [r1, #0]
 80076d0:	9002      	str	r0, [sp, #8]
 80076d2:	9203      	str	r2, [sp, #12]
 80076d4:	42be      	cmp	r6, r7
 80076d6:	d830      	bhi.n	800773a <__ssputs_r+0x76>
 80076d8:	210c      	movs	r1, #12
 80076da:	5e62      	ldrsh	r2, [r4, r1]
 80076dc:	2190      	movs	r1, #144	@ 0x90
 80076de:	00c9      	lsls	r1, r1, #3
 80076e0:	420a      	tst	r2, r1
 80076e2:	d028      	beq.n	8007736 <__ssputs_r+0x72>
 80076e4:	2003      	movs	r0, #3
 80076e6:	6921      	ldr	r1, [r4, #16]
 80076e8:	1a5b      	subs	r3, r3, r1
 80076ea:	9301      	str	r3, [sp, #4]
 80076ec:	6963      	ldr	r3, [r4, #20]
 80076ee:	4343      	muls	r3, r0
 80076f0:	9801      	ldr	r0, [sp, #4]
 80076f2:	0fdd      	lsrs	r5, r3, #31
 80076f4:	18ed      	adds	r5, r5, r3
 80076f6:	1c7b      	adds	r3, r7, #1
 80076f8:	181b      	adds	r3, r3, r0
 80076fa:	106d      	asrs	r5, r5, #1
 80076fc:	42ab      	cmp	r3, r5
 80076fe:	d900      	bls.n	8007702 <__ssputs_r+0x3e>
 8007700:	001d      	movs	r5, r3
 8007702:	0552      	lsls	r2, r2, #21
 8007704:	d528      	bpl.n	8007758 <__ssputs_r+0x94>
 8007706:	0029      	movs	r1, r5
 8007708:	9802      	ldr	r0, [sp, #8]
 800770a:	f7ff fbd1 	bl	8006eb0 <_malloc_r>
 800770e:	1e06      	subs	r6, r0, #0
 8007710:	d02c      	beq.n	800776c <__ssputs_r+0xa8>
 8007712:	9a01      	ldr	r2, [sp, #4]
 8007714:	6921      	ldr	r1, [r4, #16]
 8007716:	f7ff ff82 	bl	800761e <memcpy>
 800771a:	89a2      	ldrh	r2, [r4, #12]
 800771c:	4b18      	ldr	r3, [pc, #96]	@ (8007780 <__ssputs_r+0xbc>)
 800771e:	401a      	ands	r2, r3
 8007720:	2380      	movs	r3, #128	@ 0x80
 8007722:	4313      	orrs	r3, r2
 8007724:	81a3      	strh	r3, [r4, #12]
 8007726:	9b01      	ldr	r3, [sp, #4]
 8007728:	6126      	str	r6, [r4, #16]
 800772a:	18f6      	adds	r6, r6, r3
 800772c:	6026      	str	r6, [r4, #0]
 800772e:	003e      	movs	r6, r7
 8007730:	6165      	str	r5, [r4, #20]
 8007732:	1aed      	subs	r5, r5, r3
 8007734:	60a5      	str	r5, [r4, #8]
 8007736:	42be      	cmp	r6, r7
 8007738:	d900      	bls.n	800773c <__ssputs_r+0x78>
 800773a:	003e      	movs	r6, r7
 800773c:	0032      	movs	r2, r6
 800773e:	9903      	ldr	r1, [sp, #12]
 8007740:	6820      	ldr	r0, [r4, #0]
 8007742:	f000 fd30 	bl	80081a6 <memmove>
 8007746:	2000      	movs	r0, #0
 8007748:	68a3      	ldr	r3, [r4, #8]
 800774a:	1b9b      	subs	r3, r3, r6
 800774c:	60a3      	str	r3, [r4, #8]
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	199b      	adds	r3, r3, r6
 8007752:	6023      	str	r3, [r4, #0]
 8007754:	b005      	add	sp, #20
 8007756:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007758:	002a      	movs	r2, r5
 800775a:	9802      	ldr	r0, [sp, #8]
 800775c:	f000 fd65 	bl	800822a <_realloc_r>
 8007760:	1e06      	subs	r6, r0, #0
 8007762:	d1e0      	bne.n	8007726 <__ssputs_r+0x62>
 8007764:	6921      	ldr	r1, [r4, #16]
 8007766:	9802      	ldr	r0, [sp, #8]
 8007768:	f7ff ff62 	bl	8007630 <_free_r>
 800776c:	230c      	movs	r3, #12
 800776e:	2001      	movs	r0, #1
 8007770:	9a02      	ldr	r2, [sp, #8]
 8007772:	4240      	negs	r0, r0
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	89a2      	ldrh	r2, [r4, #12]
 8007778:	3334      	adds	r3, #52	@ 0x34
 800777a:	4313      	orrs	r3, r2
 800777c:	81a3      	strh	r3, [r4, #12]
 800777e:	e7e9      	b.n	8007754 <__ssputs_r+0x90>
 8007780:	fffffb7f 	.word	0xfffffb7f

08007784 <_svfiprintf_r>:
 8007784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007786:	b0a1      	sub	sp, #132	@ 0x84
 8007788:	9003      	str	r0, [sp, #12]
 800778a:	001d      	movs	r5, r3
 800778c:	898b      	ldrh	r3, [r1, #12]
 800778e:	000f      	movs	r7, r1
 8007790:	0016      	movs	r6, r2
 8007792:	061b      	lsls	r3, r3, #24
 8007794:	d511      	bpl.n	80077ba <_svfiprintf_r+0x36>
 8007796:	690b      	ldr	r3, [r1, #16]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d10e      	bne.n	80077ba <_svfiprintf_r+0x36>
 800779c:	2140      	movs	r1, #64	@ 0x40
 800779e:	f7ff fb87 	bl	8006eb0 <_malloc_r>
 80077a2:	6038      	str	r0, [r7, #0]
 80077a4:	6138      	str	r0, [r7, #16]
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d105      	bne.n	80077b6 <_svfiprintf_r+0x32>
 80077aa:	230c      	movs	r3, #12
 80077ac:	9a03      	ldr	r2, [sp, #12]
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	2001      	movs	r0, #1
 80077b2:	4240      	negs	r0, r0
 80077b4:	e0cf      	b.n	8007956 <_svfiprintf_r+0x1d2>
 80077b6:	2340      	movs	r3, #64	@ 0x40
 80077b8:	617b      	str	r3, [r7, #20]
 80077ba:	2300      	movs	r3, #0
 80077bc:	ac08      	add	r4, sp, #32
 80077be:	6163      	str	r3, [r4, #20]
 80077c0:	3320      	adds	r3, #32
 80077c2:	7663      	strb	r3, [r4, #25]
 80077c4:	3310      	adds	r3, #16
 80077c6:	76a3      	strb	r3, [r4, #26]
 80077c8:	9507      	str	r5, [sp, #28]
 80077ca:	0035      	movs	r5, r6
 80077cc:	782b      	ldrb	r3, [r5, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <_svfiprintf_r+0x52>
 80077d2:	2b25      	cmp	r3, #37	@ 0x25
 80077d4:	d148      	bne.n	8007868 <_svfiprintf_r+0xe4>
 80077d6:	1bab      	subs	r3, r5, r6
 80077d8:	9305      	str	r3, [sp, #20]
 80077da:	42b5      	cmp	r5, r6
 80077dc:	d00b      	beq.n	80077f6 <_svfiprintf_r+0x72>
 80077de:	0032      	movs	r2, r6
 80077e0:	0039      	movs	r1, r7
 80077e2:	9803      	ldr	r0, [sp, #12]
 80077e4:	f7ff ff6e 	bl	80076c4 <__ssputs_r>
 80077e8:	3001      	adds	r0, #1
 80077ea:	d100      	bne.n	80077ee <_svfiprintf_r+0x6a>
 80077ec:	e0ae      	b.n	800794c <_svfiprintf_r+0x1c8>
 80077ee:	6963      	ldr	r3, [r4, #20]
 80077f0:	9a05      	ldr	r2, [sp, #20]
 80077f2:	189b      	adds	r3, r3, r2
 80077f4:	6163      	str	r3, [r4, #20]
 80077f6:	782b      	ldrb	r3, [r5, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d100      	bne.n	80077fe <_svfiprintf_r+0x7a>
 80077fc:	e0a6      	b.n	800794c <_svfiprintf_r+0x1c8>
 80077fe:	2201      	movs	r2, #1
 8007800:	2300      	movs	r3, #0
 8007802:	4252      	negs	r2, r2
 8007804:	6062      	str	r2, [r4, #4]
 8007806:	a904      	add	r1, sp, #16
 8007808:	3254      	adds	r2, #84	@ 0x54
 800780a:	1852      	adds	r2, r2, r1
 800780c:	1c6e      	adds	r6, r5, #1
 800780e:	6023      	str	r3, [r4, #0]
 8007810:	60e3      	str	r3, [r4, #12]
 8007812:	60a3      	str	r3, [r4, #8]
 8007814:	7013      	strb	r3, [r2, #0]
 8007816:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007818:	4b54      	ldr	r3, [pc, #336]	@ (800796c <_svfiprintf_r+0x1e8>)
 800781a:	2205      	movs	r2, #5
 800781c:	0018      	movs	r0, r3
 800781e:	7831      	ldrb	r1, [r6, #0]
 8007820:	9305      	str	r3, [sp, #20]
 8007822:	f000 fcf7 	bl	8008214 <memchr>
 8007826:	1c75      	adds	r5, r6, #1
 8007828:	2800      	cmp	r0, #0
 800782a:	d11f      	bne.n	800786c <_svfiprintf_r+0xe8>
 800782c:	6822      	ldr	r2, [r4, #0]
 800782e:	06d3      	lsls	r3, r2, #27
 8007830:	d504      	bpl.n	800783c <_svfiprintf_r+0xb8>
 8007832:	2353      	movs	r3, #83	@ 0x53
 8007834:	a904      	add	r1, sp, #16
 8007836:	185b      	adds	r3, r3, r1
 8007838:	2120      	movs	r1, #32
 800783a:	7019      	strb	r1, [r3, #0]
 800783c:	0713      	lsls	r3, r2, #28
 800783e:	d504      	bpl.n	800784a <_svfiprintf_r+0xc6>
 8007840:	2353      	movs	r3, #83	@ 0x53
 8007842:	a904      	add	r1, sp, #16
 8007844:	185b      	adds	r3, r3, r1
 8007846:	212b      	movs	r1, #43	@ 0x2b
 8007848:	7019      	strb	r1, [r3, #0]
 800784a:	7833      	ldrb	r3, [r6, #0]
 800784c:	2b2a      	cmp	r3, #42	@ 0x2a
 800784e:	d016      	beq.n	800787e <_svfiprintf_r+0xfa>
 8007850:	0035      	movs	r5, r6
 8007852:	2100      	movs	r1, #0
 8007854:	200a      	movs	r0, #10
 8007856:	68e3      	ldr	r3, [r4, #12]
 8007858:	782a      	ldrb	r2, [r5, #0]
 800785a:	1c6e      	adds	r6, r5, #1
 800785c:	3a30      	subs	r2, #48	@ 0x30
 800785e:	2a09      	cmp	r2, #9
 8007860:	d950      	bls.n	8007904 <_svfiprintf_r+0x180>
 8007862:	2900      	cmp	r1, #0
 8007864:	d111      	bne.n	800788a <_svfiprintf_r+0x106>
 8007866:	e017      	b.n	8007898 <_svfiprintf_r+0x114>
 8007868:	3501      	adds	r5, #1
 800786a:	e7af      	b.n	80077cc <_svfiprintf_r+0x48>
 800786c:	9b05      	ldr	r3, [sp, #20]
 800786e:	6822      	ldr	r2, [r4, #0]
 8007870:	1ac0      	subs	r0, r0, r3
 8007872:	2301      	movs	r3, #1
 8007874:	4083      	lsls	r3, r0
 8007876:	4313      	orrs	r3, r2
 8007878:	002e      	movs	r6, r5
 800787a:	6023      	str	r3, [r4, #0]
 800787c:	e7cc      	b.n	8007818 <_svfiprintf_r+0x94>
 800787e:	9b07      	ldr	r3, [sp, #28]
 8007880:	1d19      	adds	r1, r3, #4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	9107      	str	r1, [sp, #28]
 8007886:	2b00      	cmp	r3, #0
 8007888:	db01      	blt.n	800788e <_svfiprintf_r+0x10a>
 800788a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800788c:	e004      	b.n	8007898 <_svfiprintf_r+0x114>
 800788e:	425b      	negs	r3, r3
 8007890:	60e3      	str	r3, [r4, #12]
 8007892:	2302      	movs	r3, #2
 8007894:	4313      	orrs	r3, r2
 8007896:	6023      	str	r3, [r4, #0]
 8007898:	782b      	ldrb	r3, [r5, #0]
 800789a:	2b2e      	cmp	r3, #46	@ 0x2e
 800789c:	d10c      	bne.n	80078b8 <_svfiprintf_r+0x134>
 800789e:	786b      	ldrb	r3, [r5, #1]
 80078a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80078a2:	d134      	bne.n	800790e <_svfiprintf_r+0x18a>
 80078a4:	9b07      	ldr	r3, [sp, #28]
 80078a6:	3502      	adds	r5, #2
 80078a8:	1d1a      	adds	r2, r3, #4
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	9207      	str	r2, [sp, #28]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	da01      	bge.n	80078b6 <_svfiprintf_r+0x132>
 80078b2:	2301      	movs	r3, #1
 80078b4:	425b      	negs	r3, r3
 80078b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80078b8:	4e2d      	ldr	r6, [pc, #180]	@ (8007970 <_svfiprintf_r+0x1ec>)
 80078ba:	2203      	movs	r2, #3
 80078bc:	0030      	movs	r0, r6
 80078be:	7829      	ldrb	r1, [r5, #0]
 80078c0:	f000 fca8 	bl	8008214 <memchr>
 80078c4:	2800      	cmp	r0, #0
 80078c6:	d006      	beq.n	80078d6 <_svfiprintf_r+0x152>
 80078c8:	2340      	movs	r3, #64	@ 0x40
 80078ca:	1b80      	subs	r0, r0, r6
 80078cc:	4083      	lsls	r3, r0
 80078ce:	6822      	ldr	r2, [r4, #0]
 80078d0:	3501      	adds	r5, #1
 80078d2:	4313      	orrs	r3, r2
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	7829      	ldrb	r1, [r5, #0]
 80078d8:	2206      	movs	r2, #6
 80078da:	4826      	ldr	r0, [pc, #152]	@ (8007974 <_svfiprintf_r+0x1f0>)
 80078dc:	1c6e      	adds	r6, r5, #1
 80078de:	7621      	strb	r1, [r4, #24]
 80078e0:	f000 fc98 	bl	8008214 <memchr>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d038      	beq.n	800795a <_svfiprintf_r+0x1d6>
 80078e8:	4b23      	ldr	r3, [pc, #140]	@ (8007978 <_svfiprintf_r+0x1f4>)
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d122      	bne.n	8007934 <_svfiprintf_r+0x1b0>
 80078ee:	2207      	movs	r2, #7
 80078f0:	9b07      	ldr	r3, [sp, #28]
 80078f2:	3307      	adds	r3, #7
 80078f4:	4393      	bics	r3, r2
 80078f6:	3308      	adds	r3, #8
 80078f8:	9307      	str	r3, [sp, #28]
 80078fa:	6963      	ldr	r3, [r4, #20]
 80078fc:	9a04      	ldr	r2, [sp, #16]
 80078fe:	189b      	adds	r3, r3, r2
 8007900:	6163      	str	r3, [r4, #20]
 8007902:	e762      	b.n	80077ca <_svfiprintf_r+0x46>
 8007904:	4343      	muls	r3, r0
 8007906:	0035      	movs	r5, r6
 8007908:	2101      	movs	r1, #1
 800790a:	189b      	adds	r3, r3, r2
 800790c:	e7a4      	b.n	8007858 <_svfiprintf_r+0xd4>
 800790e:	2300      	movs	r3, #0
 8007910:	200a      	movs	r0, #10
 8007912:	0019      	movs	r1, r3
 8007914:	3501      	adds	r5, #1
 8007916:	6063      	str	r3, [r4, #4]
 8007918:	782a      	ldrb	r2, [r5, #0]
 800791a:	1c6e      	adds	r6, r5, #1
 800791c:	3a30      	subs	r2, #48	@ 0x30
 800791e:	2a09      	cmp	r2, #9
 8007920:	d903      	bls.n	800792a <_svfiprintf_r+0x1a6>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0c8      	beq.n	80078b8 <_svfiprintf_r+0x134>
 8007926:	9109      	str	r1, [sp, #36]	@ 0x24
 8007928:	e7c6      	b.n	80078b8 <_svfiprintf_r+0x134>
 800792a:	4341      	muls	r1, r0
 800792c:	0035      	movs	r5, r6
 800792e:	2301      	movs	r3, #1
 8007930:	1889      	adds	r1, r1, r2
 8007932:	e7f1      	b.n	8007918 <_svfiprintf_r+0x194>
 8007934:	aa07      	add	r2, sp, #28
 8007936:	9200      	str	r2, [sp, #0]
 8007938:	0021      	movs	r1, r4
 800793a:	003a      	movs	r2, r7
 800793c:	4b0f      	ldr	r3, [pc, #60]	@ (800797c <_svfiprintf_r+0x1f8>)
 800793e:	9803      	ldr	r0, [sp, #12]
 8007940:	e000      	b.n	8007944 <_svfiprintf_r+0x1c0>
 8007942:	bf00      	nop
 8007944:	9004      	str	r0, [sp, #16]
 8007946:	9b04      	ldr	r3, [sp, #16]
 8007948:	3301      	adds	r3, #1
 800794a:	d1d6      	bne.n	80078fa <_svfiprintf_r+0x176>
 800794c:	89bb      	ldrh	r3, [r7, #12]
 800794e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007950:	065b      	lsls	r3, r3, #25
 8007952:	d500      	bpl.n	8007956 <_svfiprintf_r+0x1d2>
 8007954:	e72c      	b.n	80077b0 <_svfiprintf_r+0x2c>
 8007956:	b021      	add	sp, #132	@ 0x84
 8007958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800795a:	aa07      	add	r2, sp, #28
 800795c:	9200      	str	r2, [sp, #0]
 800795e:	0021      	movs	r1, r4
 8007960:	003a      	movs	r2, r7
 8007962:	4b06      	ldr	r3, [pc, #24]	@ (800797c <_svfiprintf_r+0x1f8>)
 8007964:	9803      	ldr	r0, [sp, #12]
 8007966:	f000 f9bf 	bl	8007ce8 <_printf_i>
 800796a:	e7eb      	b.n	8007944 <_svfiprintf_r+0x1c0>
 800796c:	08009448 	.word	0x08009448
 8007970:	0800944e 	.word	0x0800944e
 8007974:	08009452 	.word	0x08009452
 8007978:	00000000 	.word	0x00000000
 800797c:	080076c5 	.word	0x080076c5

08007980 <__sfputc_r>:
 8007980:	6893      	ldr	r3, [r2, #8]
 8007982:	b510      	push	{r4, lr}
 8007984:	3b01      	subs	r3, #1
 8007986:	6093      	str	r3, [r2, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	da04      	bge.n	8007996 <__sfputc_r+0x16>
 800798c:	6994      	ldr	r4, [r2, #24]
 800798e:	42a3      	cmp	r3, r4
 8007990:	db07      	blt.n	80079a2 <__sfputc_r+0x22>
 8007992:	290a      	cmp	r1, #10
 8007994:	d005      	beq.n	80079a2 <__sfputc_r+0x22>
 8007996:	6813      	ldr	r3, [r2, #0]
 8007998:	1c58      	adds	r0, r3, #1
 800799a:	6010      	str	r0, [r2, #0]
 800799c:	7019      	strb	r1, [r3, #0]
 800799e:	0008      	movs	r0, r1
 80079a0:	bd10      	pop	{r4, pc}
 80079a2:	f7ff fcd5 	bl	8007350 <__swbuf_r>
 80079a6:	0001      	movs	r1, r0
 80079a8:	e7f9      	b.n	800799e <__sfputc_r+0x1e>

080079aa <__sfputs_r>:
 80079aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ac:	0006      	movs	r6, r0
 80079ae:	000f      	movs	r7, r1
 80079b0:	0014      	movs	r4, r2
 80079b2:	18d5      	adds	r5, r2, r3
 80079b4:	42ac      	cmp	r4, r5
 80079b6:	d101      	bne.n	80079bc <__sfputs_r+0x12>
 80079b8:	2000      	movs	r0, #0
 80079ba:	e007      	b.n	80079cc <__sfputs_r+0x22>
 80079bc:	7821      	ldrb	r1, [r4, #0]
 80079be:	003a      	movs	r2, r7
 80079c0:	0030      	movs	r0, r6
 80079c2:	f7ff ffdd 	bl	8007980 <__sfputc_r>
 80079c6:	3401      	adds	r4, #1
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d1f3      	bne.n	80079b4 <__sfputs_r+0xa>
 80079cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079d0 <_vfiprintf_r>:
 80079d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079d2:	b0a1      	sub	sp, #132	@ 0x84
 80079d4:	000f      	movs	r7, r1
 80079d6:	0015      	movs	r5, r2
 80079d8:	001e      	movs	r6, r3
 80079da:	9003      	str	r0, [sp, #12]
 80079dc:	2800      	cmp	r0, #0
 80079de:	d004      	beq.n	80079ea <_vfiprintf_r+0x1a>
 80079e0:	6a03      	ldr	r3, [r0, #32]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <_vfiprintf_r+0x1a>
 80079e6:	f7ff fb83 	bl	80070f0 <__sinit>
 80079ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079ec:	07db      	lsls	r3, r3, #31
 80079ee:	d405      	bmi.n	80079fc <_vfiprintf_r+0x2c>
 80079f0:	89bb      	ldrh	r3, [r7, #12]
 80079f2:	059b      	lsls	r3, r3, #22
 80079f4:	d402      	bmi.n	80079fc <_vfiprintf_r+0x2c>
 80079f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80079f8:	f7ff fe07 	bl	800760a <__retarget_lock_acquire_recursive>
 80079fc:	89bb      	ldrh	r3, [r7, #12]
 80079fe:	071b      	lsls	r3, r3, #28
 8007a00:	d502      	bpl.n	8007a08 <_vfiprintf_r+0x38>
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d113      	bne.n	8007a30 <_vfiprintf_r+0x60>
 8007a08:	0039      	movs	r1, r7
 8007a0a:	9803      	ldr	r0, [sp, #12]
 8007a0c:	f7ff fce2 	bl	80073d4 <__swsetup_r>
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d00d      	beq.n	8007a30 <_vfiprintf_r+0x60>
 8007a14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a16:	07db      	lsls	r3, r3, #31
 8007a18:	d503      	bpl.n	8007a22 <_vfiprintf_r+0x52>
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	4240      	negs	r0, r0
 8007a1e:	b021      	add	sp, #132	@ 0x84
 8007a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a22:	89bb      	ldrh	r3, [r7, #12]
 8007a24:	059b      	lsls	r3, r3, #22
 8007a26:	d4f8      	bmi.n	8007a1a <_vfiprintf_r+0x4a>
 8007a28:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007a2a:	f7ff fdef 	bl	800760c <__retarget_lock_release_recursive>
 8007a2e:	e7f4      	b.n	8007a1a <_vfiprintf_r+0x4a>
 8007a30:	2300      	movs	r3, #0
 8007a32:	ac08      	add	r4, sp, #32
 8007a34:	6163      	str	r3, [r4, #20]
 8007a36:	3320      	adds	r3, #32
 8007a38:	7663      	strb	r3, [r4, #25]
 8007a3a:	3310      	adds	r3, #16
 8007a3c:	76a3      	strb	r3, [r4, #26]
 8007a3e:	9607      	str	r6, [sp, #28]
 8007a40:	002e      	movs	r6, r5
 8007a42:	7833      	ldrb	r3, [r6, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <_vfiprintf_r+0x7c>
 8007a48:	2b25      	cmp	r3, #37	@ 0x25
 8007a4a:	d148      	bne.n	8007ade <_vfiprintf_r+0x10e>
 8007a4c:	1b73      	subs	r3, r6, r5
 8007a4e:	9305      	str	r3, [sp, #20]
 8007a50:	42ae      	cmp	r6, r5
 8007a52:	d00b      	beq.n	8007a6c <_vfiprintf_r+0x9c>
 8007a54:	002a      	movs	r2, r5
 8007a56:	0039      	movs	r1, r7
 8007a58:	9803      	ldr	r0, [sp, #12]
 8007a5a:	f7ff ffa6 	bl	80079aa <__sfputs_r>
 8007a5e:	3001      	adds	r0, #1
 8007a60:	d100      	bne.n	8007a64 <_vfiprintf_r+0x94>
 8007a62:	e0ae      	b.n	8007bc2 <_vfiprintf_r+0x1f2>
 8007a64:	6963      	ldr	r3, [r4, #20]
 8007a66:	9a05      	ldr	r2, [sp, #20]
 8007a68:	189b      	adds	r3, r3, r2
 8007a6a:	6163      	str	r3, [r4, #20]
 8007a6c:	7833      	ldrb	r3, [r6, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d100      	bne.n	8007a74 <_vfiprintf_r+0xa4>
 8007a72:	e0a6      	b.n	8007bc2 <_vfiprintf_r+0x1f2>
 8007a74:	2201      	movs	r2, #1
 8007a76:	2300      	movs	r3, #0
 8007a78:	4252      	negs	r2, r2
 8007a7a:	6062      	str	r2, [r4, #4]
 8007a7c:	a904      	add	r1, sp, #16
 8007a7e:	3254      	adds	r2, #84	@ 0x54
 8007a80:	1852      	adds	r2, r2, r1
 8007a82:	1c75      	adds	r5, r6, #1
 8007a84:	6023      	str	r3, [r4, #0]
 8007a86:	60e3      	str	r3, [r4, #12]
 8007a88:	60a3      	str	r3, [r4, #8]
 8007a8a:	7013      	strb	r3, [r2, #0]
 8007a8c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8007a8e:	4b59      	ldr	r3, [pc, #356]	@ (8007bf4 <_vfiprintf_r+0x224>)
 8007a90:	2205      	movs	r2, #5
 8007a92:	0018      	movs	r0, r3
 8007a94:	7829      	ldrb	r1, [r5, #0]
 8007a96:	9305      	str	r3, [sp, #20]
 8007a98:	f000 fbbc 	bl	8008214 <memchr>
 8007a9c:	1c6e      	adds	r6, r5, #1
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	d11f      	bne.n	8007ae2 <_vfiprintf_r+0x112>
 8007aa2:	6822      	ldr	r2, [r4, #0]
 8007aa4:	06d3      	lsls	r3, r2, #27
 8007aa6:	d504      	bpl.n	8007ab2 <_vfiprintf_r+0xe2>
 8007aa8:	2353      	movs	r3, #83	@ 0x53
 8007aaa:	a904      	add	r1, sp, #16
 8007aac:	185b      	adds	r3, r3, r1
 8007aae:	2120      	movs	r1, #32
 8007ab0:	7019      	strb	r1, [r3, #0]
 8007ab2:	0713      	lsls	r3, r2, #28
 8007ab4:	d504      	bpl.n	8007ac0 <_vfiprintf_r+0xf0>
 8007ab6:	2353      	movs	r3, #83	@ 0x53
 8007ab8:	a904      	add	r1, sp, #16
 8007aba:	185b      	adds	r3, r3, r1
 8007abc:	212b      	movs	r1, #43	@ 0x2b
 8007abe:	7019      	strb	r1, [r3, #0]
 8007ac0:	782b      	ldrb	r3, [r5, #0]
 8007ac2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ac4:	d016      	beq.n	8007af4 <_vfiprintf_r+0x124>
 8007ac6:	002e      	movs	r6, r5
 8007ac8:	2100      	movs	r1, #0
 8007aca:	200a      	movs	r0, #10
 8007acc:	68e3      	ldr	r3, [r4, #12]
 8007ace:	7832      	ldrb	r2, [r6, #0]
 8007ad0:	1c75      	adds	r5, r6, #1
 8007ad2:	3a30      	subs	r2, #48	@ 0x30
 8007ad4:	2a09      	cmp	r2, #9
 8007ad6:	d950      	bls.n	8007b7a <_vfiprintf_r+0x1aa>
 8007ad8:	2900      	cmp	r1, #0
 8007ada:	d111      	bne.n	8007b00 <_vfiprintf_r+0x130>
 8007adc:	e017      	b.n	8007b0e <_vfiprintf_r+0x13e>
 8007ade:	3601      	adds	r6, #1
 8007ae0:	e7af      	b.n	8007a42 <_vfiprintf_r+0x72>
 8007ae2:	9b05      	ldr	r3, [sp, #20]
 8007ae4:	6822      	ldr	r2, [r4, #0]
 8007ae6:	1ac0      	subs	r0, r0, r3
 8007ae8:	2301      	movs	r3, #1
 8007aea:	4083      	lsls	r3, r0
 8007aec:	4313      	orrs	r3, r2
 8007aee:	0035      	movs	r5, r6
 8007af0:	6023      	str	r3, [r4, #0]
 8007af2:	e7cc      	b.n	8007a8e <_vfiprintf_r+0xbe>
 8007af4:	9b07      	ldr	r3, [sp, #28]
 8007af6:	1d19      	adds	r1, r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	9107      	str	r1, [sp, #28]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	db01      	blt.n	8007b04 <_vfiprintf_r+0x134>
 8007b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b02:	e004      	b.n	8007b0e <_vfiprintf_r+0x13e>
 8007b04:	425b      	negs	r3, r3
 8007b06:	60e3      	str	r3, [r4, #12]
 8007b08:	2302      	movs	r3, #2
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	6023      	str	r3, [r4, #0]
 8007b0e:	7833      	ldrb	r3, [r6, #0]
 8007b10:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b12:	d10c      	bne.n	8007b2e <_vfiprintf_r+0x15e>
 8007b14:	7873      	ldrb	r3, [r6, #1]
 8007b16:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b18:	d134      	bne.n	8007b84 <_vfiprintf_r+0x1b4>
 8007b1a:	9b07      	ldr	r3, [sp, #28]
 8007b1c:	3602      	adds	r6, #2
 8007b1e:	1d1a      	adds	r2, r3, #4
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	9207      	str	r2, [sp, #28]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	da01      	bge.n	8007b2c <_vfiprintf_r+0x15c>
 8007b28:	2301      	movs	r3, #1
 8007b2a:	425b      	negs	r3, r3
 8007b2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b2e:	4d32      	ldr	r5, [pc, #200]	@ (8007bf8 <_vfiprintf_r+0x228>)
 8007b30:	2203      	movs	r2, #3
 8007b32:	0028      	movs	r0, r5
 8007b34:	7831      	ldrb	r1, [r6, #0]
 8007b36:	f000 fb6d 	bl	8008214 <memchr>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d006      	beq.n	8007b4c <_vfiprintf_r+0x17c>
 8007b3e:	2340      	movs	r3, #64	@ 0x40
 8007b40:	1b40      	subs	r0, r0, r5
 8007b42:	4083      	lsls	r3, r0
 8007b44:	6822      	ldr	r2, [r4, #0]
 8007b46:	3601      	adds	r6, #1
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	6023      	str	r3, [r4, #0]
 8007b4c:	7831      	ldrb	r1, [r6, #0]
 8007b4e:	2206      	movs	r2, #6
 8007b50:	482a      	ldr	r0, [pc, #168]	@ (8007bfc <_vfiprintf_r+0x22c>)
 8007b52:	1c75      	adds	r5, r6, #1
 8007b54:	7621      	strb	r1, [r4, #24]
 8007b56:	f000 fb5d 	bl	8008214 <memchr>
 8007b5a:	2800      	cmp	r0, #0
 8007b5c:	d040      	beq.n	8007be0 <_vfiprintf_r+0x210>
 8007b5e:	4b28      	ldr	r3, [pc, #160]	@ (8007c00 <_vfiprintf_r+0x230>)
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d122      	bne.n	8007baa <_vfiprintf_r+0x1da>
 8007b64:	2207      	movs	r2, #7
 8007b66:	9b07      	ldr	r3, [sp, #28]
 8007b68:	3307      	adds	r3, #7
 8007b6a:	4393      	bics	r3, r2
 8007b6c:	3308      	adds	r3, #8
 8007b6e:	9307      	str	r3, [sp, #28]
 8007b70:	6963      	ldr	r3, [r4, #20]
 8007b72:	9a04      	ldr	r2, [sp, #16]
 8007b74:	189b      	adds	r3, r3, r2
 8007b76:	6163      	str	r3, [r4, #20]
 8007b78:	e762      	b.n	8007a40 <_vfiprintf_r+0x70>
 8007b7a:	4343      	muls	r3, r0
 8007b7c:	002e      	movs	r6, r5
 8007b7e:	2101      	movs	r1, #1
 8007b80:	189b      	adds	r3, r3, r2
 8007b82:	e7a4      	b.n	8007ace <_vfiprintf_r+0xfe>
 8007b84:	2300      	movs	r3, #0
 8007b86:	200a      	movs	r0, #10
 8007b88:	0019      	movs	r1, r3
 8007b8a:	3601      	adds	r6, #1
 8007b8c:	6063      	str	r3, [r4, #4]
 8007b8e:	7832      	ldrb	r2, [r6, #0]
 8007b90:	1c75      	adds	r5, r6, #1
 8007b92:	3a30      	subs	r2, #48	@ 0x30
 8007b94:	2a09      	cmp	r2, #9
 8007b96:	d903      	bls.n	8007ba0 <_vfiprintf_r+0x1d0>
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d0c8      	beq.n	8007b2e <_vfiprintf_r+0x15e>
 8007b9c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b9e:	e7c6      	b.n	8007b2e <_vfiprintf_r+0x15e>
 8007ba0:	4341      	muls	r1, r0
 8007ba2:	002e      	movs	r6, r5
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	1889      	adds	r1, r1, r2
 8007ba8:	e7f1      	b.n	8007b8e <_vfiprintf_r+0x1be>
 8007baa:	aa07      	add	r2, sp, #28
 8007bac:	9200      	str	r2, [sp, #0]
 8007bae:	0021      	movs	r1, r4
 8007bb0:	003a      	movs	r2, r7
 8007bb2:	4b14      	ldr	r3, [pc, #80]	@ (8007c04 <_vfiprintf_r+0x234>)
 8007bb4:	9803      	ldr	r0, [sp, #12]
 8007bb6:	e000      	b.n	8007bba <_vfiprintf_r+0x1ea>
 8007bb8:	bf00      	nop
 8007bba:	9004      	str	r0, [sp, #16]
 8007bbc:	9b04      	ldr	r3, [sp, #16]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	d1d6      	bne.n	8007b70 <_vfiprintf_r+0x1a0>
 8007bc2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bc4:	07db      	lsls	r3, r3, #31
 8007bc6:	d405      	bmi.n	8007bd4 <_vfiprintf_r+0x204>
 8007bc8:	89bb      	ldrh	r3, [r7, #12]
 8007bca:	059b      	lsls	r3, r3, #22
 8007bcc:	d402      	bmi.n	8007bd4 <_vfiprintf_r+0x204>
 8007bce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8007bd0:	f7ff fd1c 	bl	800760c <__retarget_lock_release_recursive>
 8007bd4:	89bb      	ldrh	r3, [r7, #12]
 8007bd6:	065b      	lsls	r3, r3, #25
 8007bd8:	d500      	bpl.n	8007bdc <_vfiprintf_r+0x20c>
 8007bda:	e71e      	b.n	8007a1a <_vfiprintf_r+0x4a>
 8007bdc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8007bde:	e71e      	b.n	8007a1e <_vfiprintf_r+0x4e>
 8007be0:	aa07      	add	r2, sp, #28
 8007be2:	9200      	str	r2, [sp, #0]
 8007be4:	0021      	movs	r1, r4
 8007be6:	003a      	movs	r2, r7
 8007be8:	4b06      	ldr	r3, [pc, #24]	@ (8007c04 <_vfiprintf_r+0x234>)
 8007bea:	9803      	ldr	r0, [sp, #12]
 8007bec:	f000 f87c 	bl	8007ce8 <_printf_i>
 8007bf0:	e7e3      	b.n	8007bba <_vfiprintf_r+0x1ea>
 8007bf2:	46c0      	nop			@ (mov r8, r8)
 8007bf4:	08009448 	.word	0x08009448
 8007bf8:	0800944e 	.word	0x0800944e
 8007bfc:	08009452 	.word	0x08009452
 8007c00:	00000000 	.word	0x00000000
 8007c04:	080079ab 	.word	0x080079ab

08007c08 <_printf_common>:
 8007c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c0a:	0016      	movs	r6, r2
 8007c0c:	9301      	str	r3, [sp, #4]
 8007c0e:	688a      	ldr	r2, [r1, #8]
 8007c10:	690b      	ldr	r3, [r1, #16]
 8007c12:	000c      	movs	r4, r1
 8007c14:	9000      	str	r0, [sp, #0]
 8007c16:	4293      	cmp	r3, r2
 8007c18:	da00      	bge.n	8007c1c <_printf_common+0x14>
 8007c1a:	0013      	movs	r3, r2
 8007c1c:	0022      	movs	r2, r4
 8007c1e:	6033      	str	r3, [r6, #0]
 8007c20:	3243      	adds	r2, #67	@ 0x43
 8007c22:	7812      	ldrb	r2, [r2, #0]
 8007c24:	2a00      	cmp	r2, #0
 8007c26:	d001      	beq.n	8007c2c <_printf_common+0x24>
 8007c28:	3301      	adds	r3, #1
 8007c2a:	6033      	str	r3, [r6, #0]
 8007c2c:	6823      	ldr	r3, [r4, #0]
 8007c2e:	069b      	lsls	r3, r3, #26
 8007c30:	d502      	bpl.n	8007c38 <_printf_common+0x30>
 8007c32:	6833      	ldr	r3, [r6, #0]
 8007c34:	3302      	adds	r3, #2
 8007c36:	6033      	str	r3, [r6, #0]
 8007c38:	6822      	ldr	r2, [r4, #0]
 8007c3a:	2306      	movs	r3, #6
 8007c3c:	0015      	movs	r5, r2
 8007c3e:	401d      	ands	r5, r3
 8007c40:	421a      	tst	r2, r3
 8007c42:	d027      	beq.n	8007c94 <_printf_common+0x8c>
 8007c44:	0023      	movs	r3, r4
 8007c46:	3343      	adds	r3, #67	@ 0x43
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	1e5a      	subs	r2, r3, #1
 8007c4c:	4193      	sbcs	r3, r2
 8007c4e:	6822      	ldr	r2, [r4, #0]
 8007c50:	0692      	lsls	r2, r2, #26
 8007c52:	d430      	bmi.n	8007cb6 <_printf_common+0xae>
 8007c54:	0022      	movs	r2, r4
 8007c56:	9901      	ldr	r1, [sp, #4]
 8007c58:	9800      	ldr	r0, [sp, #0]
 8007c5a:	9d08      	ldr	r5, [sp, #32]
 8007c5c:	3243      	adds	r2, #67	@ 0x43
 8007c5e:	47a8      	blx	r5
 8007c60:	3001      	adds	r0, #1
 8007c62:	d025      	beq.n	8007cb0 <_printf_common+0xa8>
 8007c64:	2206      	movs	r2, #6
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	2500      	movs	r5, #0
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	d105      	bne.n	8007c7c <_printf_common+0x74>
 8007c70:	6833      	ldr	r3, [r6, #0]
 8007c72:	68e5      	ldr	r5, [r4, #12]
 8007c74:	1aed      	subs	r5, r5, r3
 8007c76:	43eb      	mvns	r3, r5
 8007c78:	17db      	asrs	r3, r3, #31
 8007c7a:	401d      	ands	r5, r3
 8007c7c:	68a3      	ldr	r3, [r4, #8]
 8007c7e:	6922      	ldr	r2, [r4, #16]
 8007c80:	4293      	cmp	r3, r2
 8007c82:	dd01      	ble.n	8007c88 <_printf_common+0x80>
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	18ed      	adds	r5, r5, r3
 8007c88:	2600      	movs	r6, #0
 8007c8a:	42b5      	cmp	r5, r6
 8007c8c:	d120      	bne.n	8007cd0 <_printf_common+0xc8>
 8007c8e:	2000      	movs	r0, #0
 8007c90:	e010      	b.n	8007cb4 <_printf_common+0xac>
 8007c92:	3501      	adds	r5, #1
 8007c94:	68e3      	ldr	r3, [r4, #12]
 8007c96:	6832      	ldr	r2, [r6, #0]
 8007c98:	1a9b      	subs	r3, r3, r2
 8007c9a:	42ab      	cmp	r3, r5
 8007c9c:	ddd2      	ble.n	8007c44 <_printf_common+0x3c>
 8007c9e:	0022      	movs	r2, r4
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	9901      	ldr	r1, [sp, #4]
 8007ca4:	9800      	ldr	r0, [sp, #0]
 8007ca6:	9f08      	ldr	r7, [sp, #32]
 8007ca8:	3219      	adds	r2, #25
 8007caa:	47b8      	blx	r7
 8007cac:	3001      	adds	r0, #1
 8007cae:	d1f0      	bne.n	8007c92 <_printf_common+0x8a>
 8007cb0:	2001      	movs	r0, #1
 8007cb2:	4240      	negs	r0, r0
 8007cb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007cb6:	2030      	movs	r0, #48	@ 0x30
 8007cb8:	18e1      	adds	r1, r4, r3
 8007cba:	3143      	adds	r1, #67	@ 0x43
 8007cbc:	7008      	strb	r0, [r1, #0]
 8007cbe:	0021      	movs	r1, r4
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	3145      	adds	r1, #69	@ 0x45
 8007cc4:	7809      	ldrb	r1, [r1, #0]
 8007cc6:	18a2      	adds	r2, r4, r2
 8007cc8:	3243      	adds	r2, #67	@ 0x43
 8007cca:	3302      	adds	r3, #2
 8007ccc:	7011      	strb	r1, [r2, #0]
 8007cce:	e7c1      	b.n	8007c54 <_printf_common+0x4c>
 8007cd0:	0022      	movs	r2, r4
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	9901      	ldr	r1, [sp, #4]
 8007cd6:	9800      	ldr	r0, [sp, #0]
 8007cd8:	9f08      	ldr	r7, [sp, #32]
 8007cda:	321a      	adds	r2, #26
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d0e6      	beq.n	8007cb0 <_printf_common+0xa8>
 8007ce2:	3601      	adds	r6, #1
 8007ce4:	e7d1      	b.n	8007c8a <_printf_common+0x82>
	...

08007ce8 <_printf_i>:
 8007ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cea:	b08b      	sub	sp, #44	@ 0x2c
 8007cec:	9206      	str	r2, [sp, #24]
 8007cee:	000a      	movs	r2, r1
 8007cf0:	3243      	adds	r2, #67	@ 0x43
 8007cf2:	9307      	str	r3, [sp, #28]
 8007cf4:	9005      	str	r0, [sp, #20]
 8007cf6:	9203      	str	r2, [sp, #12]
 8007cf8:	7e0a      	ldrb	r2, [r1, #24]
 8007cfa:	000c      	movs	r4, r1
 8007cfc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007cfe:	2a78      	cmp	r2, #120	@ 0x78
 8007d00:	d809      	bhi.n	8007d16 <_printf_i+0x2e>
 8007d02:	2a62      	cmp	r2, #98	@ 0x62
 8007d04:	d80b      	bhi.n	8007d1e <_printf_i+0x36>
 8007d06:	2a00      	cmp	r2, #0
 8007d08:	d100      	bne.n	8007d0c <_printf_i+0x24>
 8007d0a:	e0ba      	b.n	8007e82 <_printf_i+0x19a>
 8007d0c:	497a      	ldr	r1, [pc, #488]	@ (8007ef8 <_printf_i+0x210>)
 8007d0e:	9104      	str	r1, [sp, #16]
 8007d10:	2a58      	cmp	r2, #88	@ 0x58
 8007d12:	d100      	bne.n	8007d16 <_printf_i+0x2e>
 8007d14:	e08e      	b.n	8007e34 <_printf_i+0x14c>
 8007d16:	0025      	movs	r5, r4
 8007d18:	3542      	adds	r5, #66	@ 0x42
 8007d1a:	702a      	strb	r2, [r5, #0]
 8007d1c:	e022      	b.n	8007d64 <_printf_i+0x7c>
 8007d1e:	0010      	movs	r0, r2
 8007d20:	3863      	subs	r0, #99	@ 0x63
 8007d22:	2815      	cmp	r0, #21
 8007d24:	d8f7      	bhi.n	8007d16 <_printf_i+0x2e>
 8007d26:	f7f8 f9f7 	bl	8000118 <__gnu_thumb1_case_shi>
 8007d2a:	0016      	.short	0x0016
 8007d2c:	fff6001f 	.word	0xfff6001f
 8007d30:	fff6fff6 	.word	0xfff6fff6
 8007d34:	001ffff6 	.word	0x001ffff6
 8007d38:	fff6fff6 	.word	0xfff6fff6
 8007d3c:	fff6fff6 	.word	0xfff6fff6
 8007d40:	0036009f 	.word	0x0036009f
 8007d44:	fff6007e 	.word	0xfff6007e
 8007d48:	00b0fff6 	.word	0x00b0fff6
 8007d4c:	0036fff6 	.word	0x0036fff6
 8007d50:	fff6fff6 	.word	0xfff6fff6
 8007d54:	0082      	.short	0x0082
 8007d56:	0025      	movs	r5, r4
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	3542      	adds	r5, #66	@ 0x42
 8007d5c:	1d11      	adds	r1, r2, #4
 8007d5e:	6019      	str	r1, [r3, #0]
 8007d60:	6813      	ldr	r3, [r2, #0]
 8007d62:	702b      	strb	r3, [r5, #0]
 8007d64:	2301      	movs	r3, #1
 8007d66:	e09e      	b.n	8007ea6 <_printf_i+0x1be>
 8007d68:	6818      	ldr	r0, [r3, #0]
 8007d6a:	6809      	ldr	r1, [r1, #0]
 8007d6c:	1d02      	adds	r2, r0, #4
 8007d6e:	060d      	lsls	r5, r1, #24
 8007d70:	d50b      	bpl.n	8007d8a <_printf_i+0xa2>
 8007d72:	6806      	ldr	r6, [r0, #0]
 8007d74:	601a      	str	r2, [r3, #0]
 8007d76:	2e00      	cmp	r6, #0
 8007d78:	da03      	bge.n	8007d82 <_printf_i+0x9a>
 8007d7a:	232d      	movs	r3, #45	@ 0x2d
 8007d7c:	9a03      	ldr	r2, [sp, #12]
 8007d7e:	4276      	negs	r6, r6
 8007d80:	7013      	strb	r3, [r2, #0]
 8007d82:	4b5d      	ldr	r3, [pc, #372]	@ (8007ef8 <_printf_i+0x210>)
 8007d84:	270a      	movs	r7, #10
 8007d86:	9304      	str	r3, [sp, #16]
 8007d88:	e018      	b.n	8007dbc <_printf_i+0xd4>
 8007d8a:	6806      	ldr	r6, [r0, #0]
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	0649      	lsls	r1, r1, #25
 8007d90:	d5f1      	bpl.n	8007d76 <_printf_i+0x8e>
 8007d92:	b236      	sxth	r6, r6
 8007d94:	e7ef      	b.n	8007d76 <_printf_i+0x8e>
 8007d96:	6808      	ldr	r0, [r1, #0]
 8007d98:	6819      	ldr	r1, [r3, #0]
 8007d9a:	c940      	ldmia	r1!, {r6}
 8007d9c:	0605      	lsls	r5, r0, #24
 8007d9e:	d402      	bmi.n	8007da6 <_printf_i+0xbe>
 8007da0:	0640      	lsls	r0, r0, #25
 8007da2:	d500      	bpl.n	8007da6 <_printf_i+0xbe>
 8007da4:	b2b6      	uxth	r6, r6
 8007da6:	6019      	str	r1, [r3, #0]
 8007da8:	4b53      	ldr	r3, [pc, #332]	@ (8007ef8 <_printf_i+0x210>)
 8007daa:	270a      	movs	r7, #10
 8007dac:	9304      	str	r3, [sp, #16]
 8007dae:	2a6f      	cmp	r2, #111	@ 0x6f
 8007db0:	d100      	bne.n	8007db4 <_printf_i+0xcc>
 8007db2:	3f02      	subs	r7, #2
 8007db4:	0023      	movs	r3, r4
 8007db6:	2200      	movs	r2, #0
 8007db8:	3343      	adds	r3, #67	@ 0x43
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	6863      	ldr	r3, [r4, #4]
 8007dbe:	60a3      	str	r3, [r4, #8]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	db06      	blt.n	8007dd2 <_printf_i+0xea>
 8007dc4:	2104      	movs	r1, #4
 8007dc6:	6822      	ldr	r2, [r4, #0]
 8007dc8:	9d03      	ldr	r5, [sp, #12]
 8007dca:	438a      	bics	r2, r1
 8007dcc:	6022      	str	r2, [r4, #0]
 8007dce:	4333      	orrs	r3, r6
 8007dd0:	d00c      	beq.n	8007dec <_printf_i+0x104>
 8007dd2:	9d03      	ldr	r5, [sp, #12]
 8007dd4:	0030      	movs	r0, r6
 8007dd6:	0039      	movs	r1, r7
 8007dd8:	f7f8 fa2e 	bl	8000238 <__aeabi_uidivmod>
 8007ddc:	9b04      	ldr	r3, [sp, #16]
 8007dde:	3d01      	subs	r5, #1
 8007de0:	5c5b      	ldrb	r3, [r3, r1]
 8007de2:	702b      	strb	r3, [r5, #0]
 8007de4:	0033      	movs	r3, r6
 8007de6:	0006      	movs	r6, r0
 8007de8:	429f      	cmp	r7, r3
 8007dea:	d9f3      	bls.n	8007dd4 <_printf_i+0xec>
 8007dec:	2f08      	cmp	r7, #8
 8007dee:	d109      	bne.n	8007e04 <_printf_i+0x11c>
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	07db      	lsls	r3, r3, #31
 8007df4:	d506      	bpl.n	8007e04 <_printf_i+0x11c>
 8007df6:	6862      	ldr	r2, [r4, #4]
 8007df8:	6923      	ldr	r3, [r4, #16]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	dc02      	bgt.n	8007e04 <_printf_i+0x11c>
 8007dfe:	2330      	movs	r3, #48	@ 0x30
 8007e00:	3d01      	subs	r5, #1
 8007e02:	702b      	strb	r3, [r5, #0]
 8007e04:	9b03      	ldr	r3, [sp, #12]
 8007e06:	1b5b      	subs	r3, r3, r5
 8007e08:	6123      	str	r3, [r4, #16]
 8007e0a:	9b07      	ldr	r3, [sp, #28]
 8007e0c:	0021      	movs	r1, r4
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	9805      	ldr	r0, [sp, #20]
 8007e12:	9b06      	ldr	r3, [sp, #24]
 8007e14:	aa09      	add	r2, sp, #36	@ 0x24
 8007e16:	f7ff fef7 	bl	8007c08 <_printf_common>
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	d148      	bne.n	8007eb0 <_printf_i+0x1c8>
 8007e1e:	2001      	movs	r0, #1
 8007e20:	4240      	negs	r0, r0
 8007e22:	b00b      	add	sp, #44	@ 0x2c
 8007e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e26:	2220      	movs	r2, #32
 8007e28:	6809      	ldr	r1, [r1, #0]
 8007e2a:	430a      	orrs	r2, r1
 8007e2c:	6022      	str	r2, [r4, #0]
 8007e2e:	2278      	movs	r2, #120	@ 0x78
 8007e30:	4932      	ldr	r1, [pc, #200]	@ (8007efc <_printf_i+0x214>)
 8007e32:	9104      	str	r1, [sp, #16]
 8007e34:	0021      	movs	r1, r4
 8007e36:	3145      	adds	r1, #69	@ 0x45
 8007e38:	700a      	strb	r2, [r1, #0]
 8007e3a:	6819      	ldr	r1, [r3, #0]
 8007e3c:	6822      	ldr	r2, [r4, #0]
 8007e3e:	c940      	ldmia	r1!, {r6}
 8007e40:	0610      	lsls	r0, r2, #24
 8007e42:	d402      	bmi.n	8007e4a <_printf_i+0x162>
 8007e44:	0650      	lsls	r0, r2, #25
 8007e46:	d500      	bpl.n	8007e4a <_printf_i+0x162>
 8007e48:	b2b6      	uxth	r6, r6
 8007e4a:	6019      	str	r1, [r3, #0]
 8007e4c:	07d3      	lsls	r3, r2, #31
 8007e4e:	d502      	bpl.n	8007e56 <_printf_i+0x16e>
 8007e50:	2320      	movs	r3, #32
 8007e52:	4313      	orrs	r3, r2
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	2e00      	cmp	r6, #0
 8007e58:	d001      	beq.n	8007e5e <_printf_i+0x176>
 8007e5a:	2710      	movs	r7, #16
 8007e5c:	e7aa      	b.n	8007db4 <_printf_i+0xcc>
 8007e5e:	2220      	movs	r2, #32
 8007e60:	6823      	ldr	r3, [r4, #0]
 8007e62:	4393      	bics	r3, r2
 8007e64:	6023      	str	r3, [r4, #0]
 8007e66:	e7f8      	b.n	8007e5a <_printf_i+0x172>
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	680d      	ldr	r5, [r1, #0]
 8007e6c:	1d10      	adds	r0, r2, #4
 8007e6e:	6949      	ldr	r1, [r1, #20]
 8007e70:	6018      	str	r0, [r3, #0]
 8007e72:	6813      	ldr	r3, [r2, #0]
 8007e74:	062e      	lsls	r6, r5, #24
 8007e76:	d501      	bpl.n	8007e7c <_printf_i+0x194>
 8007e78:	6019      	str	r1, [r3, #0]
 8007e7a:	e002      	b.n	8007e82 <_printf_i+0x19a>
 8007e7c:	066d      	lsls	r5, r5, #25
 8007e7e:	d5fb      	bpl.n	8007e78 <_printf_i+0x190>
 8007e80:	8019      	strh	r1, [r3, #0]
 8007e82:	2300      	movs	r3, #0
 8007e84:	9d03      	ldr	r5, [sp, #12]
 8007e86:	6123      	str	r3, [r4, #16]
 8007e88:	e7bf      	b.n	8007e0a <_printf_i+0x122>
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	1d11      	adds	r1, r2, #4
 8007e8e:	6019      	str	r1, [r3, #0]
 8007e90:	6815      	ldr	r5, [r2, #0]
 8007e92:	2100      	movs	r1, #0
 8007e94:	0028      	movs	r0, r5
 8007e96:	6862      	ldr	r2, [r4, #4]
 8007e98:	f000 f9bc 	bl	8008214 <memchr>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d001      	beq.n	8007ea4 <_printf_i+0x1bc>
 8007ea0:	1b40      	subs	r0, r0, r5
 8007ea2:	6060      	str	r0, [r4, #4]
 8007ea4:	6863      	ldr	r3, [r4, #4]
 8007ea6:	6123      	str	r3, [r4, #16]
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	9a03      	ldr	r2, [sp, #12]
 8007eac:	7013      	strb	r3, [r2, #0]
 8007eae:	e7ac      	b.n	8007e0a <_printf_i+0x122>
 8007eb0:	002a      	movs	r2, r5
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	9906      	ldr	r1, [sp, #24]
 8007eb6:	9805      	ldr	r0, [sp, #20]
 8007eb8:	9d07      	ldr	r5, [sp, #28]
 8007eba:	47a8      	blx	r5
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d0ae      	beq.n	8007e1e <_printf_i+0x136>
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	079b      	lsls	r3, r3, #30
 8007ec4:	d415      	bmi.n	8007ef2 <_printf_i+0x20a>
 8007ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ec8:	68e0      	ldr	r0, [r4, #12]
 8007eca:	4298      	cmp	r0, r3
 8007ecc:	daa9      	bge.n	8007e22 <_printf_i+0x13a>
 8007ece:	0018      	movs	r0, r3
 8007ed0:	e7a7      	b.n	8007e22 <_printf_i+0x13a>
 8007ed2:	0022      	movs	r2, r4
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	9906      	ldr	r1, [sp, #24]
 8007ed8:	9805      	ldr	r0, [sp, #20]
 8007eda:	9e07      	ldr	r6, [sp, #28]
 8007edc:	3219      	adds	r2, #25
 8007ede:	47b0      	blx	r6
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	d09c      	beq.n	8007e1e <_printf_i+0x136>
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	68e3      	ldr	r3, [r4, #12]
 8007ee8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eea:	1a9b      	subs	r3, r3, r2
 8007eec:	42ab      	cmp	r3, r5
 8007eee:	dcf0      	bgt.n	8007ed2 <_printf_i+0x1ea>
 8007ef0:	e7e9      	b.n	8007ec6 <_printf_i+0x1de>
 8007ef2:	2500      	movs	r5, #0
 8007ef4:	e7f7      	b.n	8007ee6 <_printf_i+0x1fe>
 8007ef6:	46c0      	nop			@ (mov r8, r8)
 8007ef8:	08009459 	.word	0x08009459
 8007efc:	0800946a 	.word	0x0800946a

08007f00 <__sflush_r>:
 8007f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f02:	220c      	movs	r2, #12
 8007f04:	5e8b      	ldrsh	r3, [r1, r2]
 8007f06:	0005      	movs	r5, r0
 8007f08:	000c      	movs	r4, r1
 8007f0a:	071a      	lsls	r2, r3, #28
 8007f0c:	d456      	bmi.n	8007fbc <__sflush_r+0xbc>
 8007f0e:	684a      	ldr	r2, [r1, #4]
 8007f10:	2a00      	cmp	r2, #0
 8007f12:	dc02      	bgt.n	8007f1a <__sflush_r+0x1a>
 8007f14:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8007f16:	2a00      	cmp	r2, #0
 8007f18:	dd4e      	ble.n	8007fb8 <__sflush_r+0xb8>
 8007f1a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007f1c:	2f00      	cmp	r7, #0
 8007f1e:	d04b      	beq.n	8007fb8 <__sflush_r+0xb8>
 8007f20:	2200      	movs	r2, #0
 8007f22:	2080      	movs	r0, #128	@ 0x80
 8007f24:	682e      	ldr	r6, [r5, #0]
 8007f26:	602a      	str	r2, [r5, #0]
 8007f28:	001a      	movs	r2, r3
 8007f2a:	0140      	lsls	r0, r0, #5
 8007f2c:	6a21      	ldr	r1, [r4, #32]
 8007f2e:	4002      	ands	r2, r0
 8007f30:	4203      	tst	r3, r0
 8007f32:	d033      	beq.n	8007f9c <__sflush_r+0x9c>
 8007f34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	075b      	lsls	r3, r3, #29
 8007f3a:	d506      	bpl.n	8007f4a <__sflush_r+0x4a>
 8007f3c:	6863      	ldr	r3, [r4, #4]
 8007f3e:	1ad2      	subs	r2, r2, r3
 8007f40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <__sflush_r+0x4a>
 8007f46:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f48:	1ad2      	subs	r2, r2, r3
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	0028      	movs	r0, r5
 8007f4e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8007f50:	6a21      	ldr	r1, [r4, #32]
 8007f52:	47b8      	blx	r7
 8007f54:	89a2      	ldrh	r2, [r4, #12]
 8007f56:	1c43      	adds	r3, r0, #1
 8007f58:	d106      	bne.n	8007f68 <__sflush_r+0x68>
 8007f5a:	6829      	ldr	r1, [r5, #0]
 8007f5c:	291d      	cmp	r1, #29
 8007f5e:	d846      	bhi.n	8007fee <__sflush_r+0xee>
 8007f60:	4b29      	ldr	r3, [pc, #164]	@ (8008008 <__sflush_r+0x108>)
 8007f62:	40cb      	lsrs	r3, r1
 8007f64:	07db      	lsls	r3, r3, #31
 8007f66:	d542      	bpl.n	8007fee <__sflush_r+0xee>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	6063      	str	r3, [r4, #4]
 8007f6c:	6923      	ldr	r3, [r4, #16]
 8007f6e:	6023      	str	r3, [r4, #0]
 8007f70:	04d2      	lsls	r2, r2, #19
 8007f72:	d505      	bpl.n	8007f80 <__sflush_r+0x80>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <__sflush_r+0x7e>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d100      	bne.n	8007f80 <__sflush_r+0x80>
 8007f7e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f82:	602e      	str	r6, [r5, #0]
 8007f84:	2900      	cmp	r1, #0
 8007f86:	d017      	beq.n	8007fb8 <__sflush_r+0xb8>
 8007f88:	0023      	movs	r3, r4
 8007f8a:	3344      	adds	r3, #68	@ 0x44
 8007f8c:	4299      	cmp	r1, r3
 8007f8e:	d002      	beq.n	8007f96 <__sflush_r+0x96>
 8007f90:	0028      	movs	r0, r5
 8007f92:	f7ff fb4d 	bl	8007630 <_free_r>
 8007f96:	2300      	movs	r3, #0
 8007f98:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f9a:	e00d      	b.n	8007fb8 <__sflush_r+0xb8>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	0028      	movs	r0, r5
 8007fa0:	47b8      	blx	r7
 8007fa2:	0002      	movs	r2, r0
 8007fa4:	1c43      	adds	r3, r0, #1
 8007fa6:	d1c6      	bne.n	8007f36 <__sflush_r+0x36>
 8007fa8:	682b      	ldr	r3, [r5, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0c3      	beq.n	8007f36 <__sflush_r+0x36>
 8007fae:	2b1d      	cmp	r3, #29
 8007fb0:	d001      	beq.n	8007fb6 <__sflush_r+0xb6>
 8007fb2:	2b16      	cmp	r3, #22
 8007fb4:	d11a      	bne.n	8007fec <__sflush_r+0xec>
 8007fb6:	602e      	str	r6, [r5, #0]
 8007fb8:	2000      	movs	r0, #0
 8007fba:	e01e      	b.n	8007ffa <__sflush_r+0xfa>
 8007fbc:	690e      	ldr	r6, [r1, #16]
 8007fbe:	2e00      	cmp	r6, #0
 8007fc0:	d0fa      	beq.n	8007fb8 <__sflush_r+0xb8>
 8007fc2:	680f      	ldr	r7, [r1, #0]
 8007fc4:	600e      	str	r6, [r1, #0]
 8007fc6:	1bba      	subs	r2, r7, r6
 8007fc8:	9201      	str	r2, [sp, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	079b      	lsls	r3, r3, #30
 8007fce:	d100      	bne.n	8007fd2 <__sflush_r+0xd2>
 8007fd0:	694a      	ldr	r2, [r1, #20]
 8007fd2:	60a2      	str	r2, [r4, #8]
 8007fd4:	9b01      	ldr	r3, [sp, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	ddee      	ble.n	8007fb8 <__sflush_r+0xb8>
 8007fda:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007fdc:	0032      	movs	r2, r6
 8007fde:	001f      	movs	r7, r3
 8007fe0:	0028      	movs	r0, r5
 8007fe2:	9b01      	ldr	r3, [sp, #4]
 8007fe4:	6a21      	ldr	r1, [r4, #32]
 8007fe6:	47b8      	blx	r7
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	dc07      	bgt.n	8007ffc <__sflush_r+0xfc>
 8007fec:	89a2      	ldrh	r2, [r4, #12]
 8007fee:	2340      	movs	r3, #64	@ 0x40
 8007ff0:	2001      	movs	r0, #1
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	b21b      	sxth	r3, r3
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	4240      	negs	r0, r0
 8007ffa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007ffc:	9b01      	ldr	r3, [sp, #4]
 8007ffe:	1836      	adds	r6, r6, r0
 8008000:	1a1b      	subs	r3, r3, r0
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	e7e6      	b.n	8007fd4 <__sflush_r+0xd4>
 8008006:	46c0      	nop			@ (mov r8, r8)
 8008008:	20400001 	.word	0x20400001

0800800c <_fflush_r>:
 800800c:	690b      	ldr	r3, [r1, #16]
 800800e:	b570      	push	{r4, r5, r6, lr}
 8008010:	0005      	movs	r5, r0
 8008012:	000c      	movs	r4, r1
 8008014:	2b00      	cmp	r3, #0
 8008016:	d102      	bne.n	800801e <_fflush_r+0x12>
 8008018:	2500      	movs	r5, #0
 800801a:	0028      	movs	r0, r5
 800801c:	bd70      	pop	{r4, r5, r6, pc}
 800801e:	2800      	cmp	r0, #0
 8008020:	d004      	beq.n	800802c <_fflush_r+0x20>
 8008022:	6a03      	ldr	r3, [r0, #32]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <_fflush_r+0x20>
 8008028:	f7ff f862 	bl	80070f0 <__sinit>
 800802c:	220c      	movs	r2, #12
 800802e:	5ea3      	ldrsh	r3, [r4, r2]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0f1      	beq.n	8008018 <_fflush_r+0xc>
 8008034:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008036:	07d2      	lsls	r2, r2, #31
 8008038:	d404      	bmi.n	8008044 <_fflush_r+0x38>
 800803a:	059b      	lsls	r3, r3, #22
 800803c:	d402      	bmi.n	8008044 <_fflush_r+0x38>
 800803e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008040:	f7ff fae3 	bl	800760a <__retarget_lock_acquire_recursive>
 8008044:	0028      	movs	r0, r5
 8008046:	0021      	movs	r1, r4
 8008048:	f7ff ff5a 	bl	8007f00 <__sflush_r>
 800804c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800804e:	0005      	movs	r5, r0
 8008050:	07db      	lsls	r3, r3, #31
 8008052:	d4e2      	bmi.n	800801a <_fflush_r+0xe>
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	059b      	lsls	r3, r3, #22
 8008058:	d4df      	bmi.n	800801a <_fflush_r+0xe>
 800805a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800805c:	f7ff fad6 	bl	800760c <__retarget_lock_release_recursive>
 8008060:	e7db      	b.n	800801a <_fflush_r+0xe>
	...

08008064 <__swhatbuf_r>:
 8008064:	b570      	push	{r4, r5, r6, lr}
 8008066:	000e      	movs	r6, r1
 8008068:	001d      	movs	r5, r3
 800806a:	230e      	movs	r3, #14
 800806c:	5ec9      	ldrsh	r1, [r1, r3]
 800806e:	0014      	movs	r4, r2
 8008070:	b096      	sub	sp, #88	@ 0x58
 8008072:	2900      	cmp	r1, #0
 8008074:	da0c      	bge.n	8008090 <__swhatbuf_r+0x2c>
 8008076:	89b2      	ldrh	r2, [r6, #12]
 8008078:	2380      	movs	r3, #128	@ 0x80
 800807a:	0011      	movs	r1, r2
 800807c:	4019      	ands	r1, r3
 800807e:	421a      	tst	r2, r3
 8008080:	d114      	bne.n	80080ac <__swhatbuf_r+0x48>
 8008082:	2380      	movs	r3, #128	@ 0x80
 8008084:	00db      	lsls	r3, r3, #3
 8008086:	2000      	movs	r0, #0
 8008088:	6029      	str	r1, [r5, #0]
 800808a:	6023      	str	r3, [r4, #0]
 800808c:	b016      	add	sp, #88	@ 0x58
 800808e:	bd70      	pop	{r4, r5, r6, pc}
 8008090:	466a      	mov	r2, sp
 8008092:	f000 f89b 	bl	80081cc <_fstat_r>
 8008096:	2800      	cmp	r0, #0
 8008098:	dbed      	blt.n	8008076 <__swhatbuf_r+0x12>
 800809a:	23f0      	movs	r3, #240	@ 0xf0
 800809c:	9901      	ldr	r1, [sp, #4]
 800809e:	021b      	lsls	r3, r3, #8
 80080a0:	4019      	ands	r1, r3
 80080a2:	4b04      	ldr	r3, [pc, #16]	@ (80080b4 <__swhatbuf_r+0x50>)
 80080a4:	18c9      	adds	r1, r1, r3
 80080a6:	424b      	negs	r3, r1
 80080a8:	4159      	adcs	r1, r3
 80080aa:	e7ea      	b.n	8008082 <__swhatbuf_r+0x1e>
 80080ac:	2100      	movs	r1, #0
 80080ae:	2340      	movs	r3, #64	@ 0x40
 80080b0:	e7e9      	b.n	8008086 <__swhatbuf_r+0x22>
 80080b2:	46c0      	nop			@ (mov r8, r8)
 80080b4:	ffffe000 	.word	0xffffe000

080080b8 <__smakebuf_r>:
 80080b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080ba:	2602      	movs	r6, #2
 80080bc:	898b      	ldrh	r3, [r1, #12]
 80080be:	0005      	movs	r5, r0
 80080c0:	000c      	movs	r4, r1
 80080c2:	b085      	sub	sp, #20
 80080c4:	4233      	tst	r3, r6
 80080c6:	d007      	beq.n	80080d8 <__smakebuf_r+0x20>
 80080c8:	0023      	movs	r3, r4
 80080ca:	3347      	adds	r3, #71	@ 0x47
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	6123      	str	r3, [r4, #16]
 80080d0:	2301      	movs	r3, #1
 80080d2:	6163      	str	r3, [r4, #20]
 80080d4:	b005      	add	sp, #20
 80080d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d8:	ab03      	add	r3, sp, #12
 80080da:	aa02      	add	r2, sp, #8
 80080dc:	f7ff ffc2 	bl	8008064 <__swhatbuf_r>
 80080e0:	9f02      	ldr	r7, [sp, #8]
 80080e2:	9001      	str	r0, [sp, #4]
 80080e4:	0039      	movs	r1, r7
 80080e6:	0028      	movs	r0, r5
 80080e8:	f7fe fee2 	bl	8006eb0 <_malloc_r>
 80080ec:	2800      	cmp	r0, #0
 80080ee:	d108      	bne.n	8008102 <__smakebuf_r+0x4a>
 80080f0:	220c      	movs	r2, #12
 80080f2:	5ea3      	ldrsh	r3, [r4, r2]
 80080f4:	059a      	lsls	r2, r3, #22
 80080f6:	d4ed      	bmi.n	80080d4 <__smakebuf_r+0x1c>
 80080f8:	2203      	movs	r2, #3
 80080fa:	4393      	bics	r3, r2
 80080fc:	431e      	orrs	r6, r3
 80080fe:	81a6      	strh	r6, [r4, #12]
 8008100:	e7e2      	b.n	80080c8 <__smakebuf_r+0x10>
 8008102:	2380      	movs	r3, #128	@ 0x80
 8008104:	89a2      	ldrh	r2, [r4, #12]
 8008106:	6020      	str	r0, [r4, #0]
 8008108:	4313      	orrs	r3, r2
 800810a:	81a3      	strh	r3, [r4, #12]
 800810c:	9b03      	ldr	r3, [sp, #12]
 800810e:	6120      	str	r0, [r4, #16]
 8008110:	6167      	str	r7, [r4, #20]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00c      	beq.n	8008130 <__smakebuf_r+0x78>
 8008116:	0028      	movs	r0, r5
 8008118:	230e      	movs	r3, #14
 800811a:	5ee1      	ldrsh	r1, [r4, r3]
 800811c:	f000 f868 	bl	80081f0 <_isatty_r>
 8008120:	2800      	cmp	r0, #0
 8008122:	d005      	beq.n	8008130 <__smakebuf_r+0x78>
 8008124:	2303      	movs	r3, #3
 8008126:	89a2      	ldrh	r2, [r4, #12]
 8008128:	439a      	bics	r2, r3
 800812a:	3b02      	subs	r3, #2
 800812c:	4313      	orrs	r3, r2
 800812e:	81a3      	strh	r3, [r4, #12]
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	9a01      	ldr	r2, [sp, #4]
 8008134:	4313      	orrs	r3, r2
 8008136:	81a3      	strh	r3, [r4, #12]
 8008138:	e7cc      	b.n	80080d4 <__smakebuf_r+0x1c>

0800813a <_putc_r>:
 800813a:	b570      	push	{r4, r5, r6, lr}
 800813c:	0006      	movs	r6, r0
 800813e:	000d      	movs	r5, r1
 8008140:	0014      	movs	r4, r2
 8008142:	2800      	cmp	r0, #0
 8008144:	d004      	beq.n	8008150 <_putc_r+0x16>
 8008146:	6a03      	ldr	r3, [r0, #32]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <_putc_r+0x16>
 800814c:	f7fe ffd0 	bl	80070f0 <__sinit>
 8008150:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008152:	07db      	lsls	r3, r3, #31
 8008154:	d405      	bmi.n	8008162 <_putc_r+0x28>
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	059b      	lsls	r3, r3, #22
 800815a:	d402      	bmi.n	8008162 <_putc_r+0x28>
 800815c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800815e:	f7ff fa54 	bl	800760a <__retarget_lock_acquire_recursive>
 8008162:	68a3      	ldr	r3, [r4, #8]
 8008164:	3b01      	subs	r3, #1
 8008166:	60a3      	str	r3, [r4, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	da05      	bge.n	8008178 <_putc_r+0x3e>
 800816c:	69a2      	ldr	r2, [r4, #24]
 800816e:	4293      	cmp	r3, r2
 8008170:	db12      	blt.n	8008198 <_putc_r+0x5e>
 8008172:	b2eb      	uxtb	r3, r5
 8008174:	2b0a      	cmp	r3, #10
 8008176:	d00f      	beq.n	8008198 <_putc_r+0x5e>
 8008178:	6823      	ldr	r3, [r4, #0]
 800817a:	1c5a      	adds	r2, r3, #1
 800817c:	6022      	str	r2, [r4, #0]
 800817e:	701d      	strb	r5, [r3, #0]
 8008180:	b2ed      	uxtb	r5, r5
 8008182:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008184:	07db      	lsls	r3, r3, #31
 8008186:	d405      	bmi.n	8008194 <_putc_r+0x5a>
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	059b      	lsls	r3, r3, #22
 800818c:	d402      	bmi.n	8008194 <_putc_r+0x5a>
 800818e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008190:	f7ff fa3c 	bl	800760c <__retarget_lock_release_recursive>
 8008194:	0028      	movs	r0, r5
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	0029      	movs	r1, r5
 800819a:	0022      	movs	r2, r4
 800819c:	0030      	movs	r0, r6
 800819e:	f7ff f8d7 	bl	8007350 <__swbuf_r>
 80081a2:	0005      	movs	r5, r0
 80081a4:	e7ed      	b.n	8008182 <_putc_r+0x48>

080081a6 <memmove>:
 80081a6:	b510      	push	{r4, lr}
 80081a8:	4288      	cmp	r0, r1
 80081aa:	d902      	bls.n	80081b2 <memmove+0xc>
 80081ac:	188b      	adds	r3, r1, r2
 80081ae:	4298      	cmp	r0, r3
 80081b0:	d308      	bcc.n	80081c4 <memmove+0x1e>
 80081b2:	2300      	movs	r3, #0
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d007      	beq.n	80081c8 <memmove+0x22>
 80081b8:	5ccc      	ldrb	r4, [r1, r3]
 80081ba:	54c4      	strb	r4, [r0, r3]
 80081bc:	3301      	adds	r3, #1
 80081be:	e7f9      	b.n	80081b4 <memmove+0xe>
 80081c0:	5c8b      	ldrb	r3, [r1, r2]
 80081c2:	5483      	strb	r3, [r0, r2]
 80081c4:	3a01      	subs	r2, #1
 80081c6:	d2fb      	bcs.n	80081c0 <memmove+0x1a>
 80081c8:	bd10      	pop	{r4, pc}
	...

080081cc <_fstat_r>:
 80081cc:	2300      	movs	r3, #0
 80081ce:	b570      	push	{r4, r5, r6, lr}
 80081d0:	4d06      	ldr	r5, [pc, #24]	@ (80081ec <_fstat_r+0x20>)
 80081d2:	0004      	movs	r4, r0
 80081d4:	0008      	movs	r0, r1
 80081d6:	0011      	movs	r1, r2
 80081d8:	602b      	str	r3, [r5, #0]
 80081da:	f7f8 fce4 	bl	8000ba6 <_fstat>
 80081de:	1c43      	adds	r3, r0, #1
 80081e0:	d103      	bne.n	80081ea <_fstat_r+0x1e>
 80081e2:	682b      	ldr	r3, [r5, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d000      	beq.n	80081ea <_fstat_r+0x1e>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	bd70      	pop	{r4, r5, r6, pc}
 80081ec:	200003bc 	.word	0x200003bc

080081f0 <_isatty_r>:
 80081f0:	2300      	movs	r3, #0
 80081f2:	b570      	push	{r4, r5, r6, lr}
 80081f4:	4d06      	ldr	r5, [pc, #24]	@ (8008210 <_isatty_r+0x20>)
 80081f6:	0004      	movs	r4, r0
 80081f8:	0008      	movs	r0, r1
 80081fa:	602b      	str	r3, [r5, #0]
 80081fc:	f7f8 fce1 	bl	8000bc2 <_isatty>
 8008200:	1c43      	adds	r3, r0, #1
 8008202:	d103      	bne.n	800820c <_isatty_r+0x1c>
 8008204:	682b      	ldr	r3, [r5, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d000      	beq.n	800820c <_isatty_r+0x1c>
 800820a:	6023      	str	r3, [r4, #0]
 800820c:	bd70      	pop	{r4, r5, r6, pc}
 800820e:	46c0      	nop			@ (mov r8, r8)
 8008210:	200003bc 	.word	0x200003bc

08008214 <memchr>:
 8008214:	b2c9      	uxtb	r1, r1
 8008216:	1882      	adds	r2, r0, r2
 8008218:	4290      	cmp	r0, r2
 800821a:	d101      	bne.n	8008220 <memchr+0xc>
 800821c:	2000      	movs	r0, #0
 800821e:	4770      	bx	lr
 8008220:	7803      	ldrb	r3, [r0, #0]
 8008222:	428b      	cmp	r3, r1
 8008224:	d0fb      	beq.n	800821e <memchr+0xa>
 8008226:	3001      	adds	r0, #1
 8008228:	e7f6      	b.n	8008218 <memchr+0x4>

0800822a <_realloc_r>:
 800822a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800822c:	0006      	movs	r6, r0
 800822e:	000c      	movs	r4, r1
 8008230:	0015      	movs	r5, r2
 8008232:	2900      	cmp	r1, #0
 8008234:	d105      	bne.n	8008242 <_realloc_r+0x18>
 8008236:	0011      	movs	r1, r2
 8008238:	f7fe fe3a 	bl	8006eb0 <_malloc_r>
 800823c:	0004      	movs	r4, r0
 800823e:	0020      	movs	r0, r4
 8008240:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008242:	2a00      	cmp	r2, #0
 8008244:	d103      	bne.n	800824e <_realloc_r+0x24>
 8008246:	f7ff f9f3 	bl	8007630 <_free_r>
 800824a:	002c      	movs	r4, r5
 800824c:	e7f7      	b.n	800823e <_realloc_r+0x14>
 800824e:	f000 f81c 	bl	800828a <_malloc_usable_size_r>
 8008252:	0007      	movs	r7, r0
 8008254:	4285      	cmp	r5, r0
 8008256:	d802      	bhi.n	800825e <_realloc_r+0x34>
 8008258:	0843      	lsrs	r3, r0, #1
 800825a:	42ab      	cmp	r3, r5
 800825c:	d3ef      	bcc.n	800823e <_realloc_r+0x14>
 800825e:	0029      	movs	r1, r5
 8008260:	0030      	movs	r0, r6
 8008262:	f7fe fe25 	bl	8006eb0 <_malloc_r>
 8008266:	9001      	str	r0, [sp, #4]
 8008268:	2800      	cmp	r0, #0
 800826a:	d101      	bne.n	8008270 <_realloc_r+0x46>
 800826c:	9c01      	ldr	r4, [sp, #4]
 800826e:	e7e6      	b.n	800823e <_realloc_r+0x14>
 8008270:	002a      	movs	r2, r5
 8008272:	42bd      	cmp	r5, r7
 8008274:	d900      	bls.n	8008278 <_realloc_r+0x4e>
 8008276:	003a      	movs	r2, r7
 8008278:	0021      	movs	r1, r4
 800827a:	9801      	ldr	r0, [sp, #4]
 800827c:	f7ff f9cf 	bl	800761e <memcpy>
 8008280:	0021      	movs	r1, r4
 8008282:	0030      	movs	r0, r6
 8008284:	f7ff f9d4 	bl	8007630 <_free_r>
 8008288:	e7f0      	b.n	800826c <_realloc_r+0x42>

0800828a <_malloc_usable_size_r>:
 800828a:	1f0b      	subs	r3, r1, #4
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	1f18      	subs	r0, r3, #4
 8008290:	2b00      	cmp	r3, #0
 8008292:	da01      	bge.n	8008298 <_malloc_usable_size_r+0xe>
 8008294:	580b      	ldr	r3, [r1, r0]
 8008296:	18c0      	adds	r0, r0, r3
 8008298:	4770      	bx	lr
	...

0800829c <_init>:
 800829c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800829e:	46c0      	nop			@ (mov r8, r8)
 80082a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082a2:	bc08      	pop	{r3}
 80082a4:	469e      	mov	lr, r3
 80082a6:	4770      	bx	lr

080082a8 <_fini>:
 80082a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082aa:	46c0      	nop			@ (mov r8, r8)
 80082ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082ae:	bc08      	pop	{r3}
 80082b0:	469e      	mov	lr, r3
 80082b2:	4770      	bx	lr
