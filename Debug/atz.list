
atz.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be4  08006cb4  08006cb4  00007cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007898  08007898  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007898  08007898  00008898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078a0  080078a0  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078a0  080078a0  000088a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078a4  080078a4  000088a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080078a8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000068  08007910  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00002404  2000038c  08007910  0000938c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdf9  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bcc  00000000  00000000  00018e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  0001ba58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a45  00000000  00000000  0001c7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016bda  00000000  00000000  0001d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126c1  00000000  00000000  00033dd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081ee2  00000000  00000000  00046498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c837a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003878  00000000  00000000  000c83c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000cbc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006c9c 	.word	0x08006c9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006c9c 	.word	0x08006c9c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	@ (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	@ (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			@ (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f806 	bl	8000284 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			@ (mov r8, r8)

08000284 <__udivmoddi4>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	4657      	mov	r7, sl
 8000288:	464e      	mov	r6, r9
 800028a:	4645      	mov	r5, r8
 800028c:	46de      	mov	lr, fp
 800028e:	b5e0      	push	{r5, r6, r7, lr}
 8000290:	0004      	movs	r4, r0
 8000292:	000d      	movs	r5, r1
 8000294:	4692      	mov	sl, r2
 8000296:	4699      	mov	r9, r3
 8000298:	b083      	sub	sp, #12
 800029a:	428b      	cmp	r3, r1
 800029c:	d830      	bhi.n	8000300 <__udivmoddi4+0x7c>
 800029e:	d02d      	beq.n	80002fc <__udivmoddi4+0x78>
 80002a0:	4649      	mov	r1, r9
 80002a2:	4650      	mov	r0, sl
 80002a4:	f000 f8ba 	bl	800041c <__clzdi2>
 80002a8:	0029      	movs	r1, r5
 80002aa:	0006      	movs	r6, r0
 80002ac:	0020      	movs	r0, r4
 80002ae:	f000 f8b5 	bl	800041c <__clzdi2>
 80002b2:	1a33      	subs	r3, r6, r0
 80002b4:	4698      	mov	r8, r3
 80002b6:	3b20      	subs	r3, #32
 80002b8:	d434      	bmi.n	8000324 <__udivmoddi4+0xa0>
 80002ba:	469b      	mov	fp, r3
 80002bc:	4653      	mov	r3, sl
 80002be:	465a      	mov	r2, fp
 80002c0:	4093      	lsls	r3, r2
 80002c2:	4642      	mov	r2, r8
 80002c4:	001f      	movs	r7, r3
 80002c6:	4653      	mov	r3, sl
 80002c8:	4093      	lsls	r3, r2
 80002ca:	001e      	movs	r6, r3
 80002cc:	42af      	cmp	r7, r5
 80002ce:	d83b      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80002d0:	42af      	cmp	r7, r5
 80002d2:	d100      	bne.n	80002d6 <__udivmoddi4+0x52>
 80002d4:	e079      	b.n	80003ca <__udivmoddi4+0x146>
 80002d6:	465b      	mov	r3, fp
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	41bd      	sbcs	r5, r7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	da00      	bge.n	80002e2 <__udivmoddi4+0x5e>
 80002e0:	e076      	b.n	80003d0 <__udivmoddi4+0x14c>
 80002e2:	2200      	movs	r2, #0
 80002e4:	2300      	movs	r3, #0
 80002e6:	9200      	str	r2, [sp, #0]
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2301      	movs	r3, #1
 80002ec:	465a      	mov	r2, fp
 80002ee:	4093      	lsls	r3, r2
 80002f0:	9301      	str	r3, [sp, #4]
 80002f2:	2301      	movs	r3, #1
 80002f4:	4642      	mov	r2, r8
 80002f6:	4093      	lsls	r3, r2
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	e029      	b.n	8000350 <__udivmoddi4+0xcc>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	d9cf      	bls.n	80002a0 <__udivmoddi4+0x1c>
 8000300:	2200      	movs	r2, #0
 8000302:	2300      	movs	r3, #0
 8000304:	9200      	str	r2, [sp, #0]
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <__udivmoddi4+0x8e>
 800030e:	601c      	str	r4, [r3, #0]
 8000310:	605d      	str	r5, [r3, #4]
 8000312:	9800      	ldr	r0, [sp, #0]
 8000314:	9901      	ldr	r1, [sp, #4]
 8000316:	b003      	add	sp, #12
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	46bb      	mov	fp, r7
 800031c:	46b2      	mov	sl, r6
 800031e:	46a9      	mov	r9, r5
 8000320:	46a0      	mov	r8, r4
 8000322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000324:	4642      	mov	r2, r8
 8000326:	469b      	mov	fp, r3
 8000328:	2320      	movs	r3, #32
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	4652      	mov	r2, sl
 800032e:	40da      	lsrs	r2, r3
 8000330:	4641      	mov	r1, r8
 8000332:	0013      	movs	r3, r2
 8000334:	464a      	mov	r2, r9
 8000336:	408a      	lsls	r2, r1
 8000338:	0017      	movs	r7, r2
 800033a:	4642      	mov	r2, r8
 800033c:	431f      	orrs	r7, r3
 800033e:	4653      	mov	r3, sl
 8000340:	4093      	lsls	r3, r2
 8000342:	001e      	movs	r6, r3
 8000344:	42af      	cmp	r7, r5
 8000346:	d9c3      	bls.n	80002d0 <__udivmoddi4+0x4c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0d8      	beq.n	8000308 <__udivmoddi4+0x84>
 8000356:	07fb      	lsls	r3, r7, #31
 8000358:	0872      	lsrs	r2, r6, #1
 800035a:	431a      	orrs	r2, r3
 800035c:	4646      	mov	r6, r8
 800035e:	087b      	lsrs	r3, r7, #1
 8000360:	e00e      	b.n	8000380 <__udivmoddi4+0xfc>
 8000362:	42ab      	cmp	r3, r5
 8000364:	d101      	bne.n	800036a <__udivmoddi4+0xe6>
 8000366:	42a2      	cmp	r2, r4
 8000368:	d80c      	bhi.n	8000384 <__udivmoddi4+0x100>
 800036a:	1aa4      	subs	r4, r4, r2
 800036c:	419d      	sbcs	r5, r3
 800036e:	2001      	movs	r0, #1
 8000370:	1924      	adds	r4, r4, r4
 8000372:	416d      	adcs	r5, r5
 8000374:	2100      	movs	r1, #0
 8000376:	3e01      	subs	r6, #1
 8000378:	1824      	adds	r4, r4, r0
 800037a:	414d      	adcs	r5, r1
 800037c:	2e00      	cmp	r6, #0
 800037e:	d006      	beq.n	800038e <__udivmoddi4+0x10a>
 8000380:	42ab      	cmp	r3, r5
 8000382:	d9ee      	bls.n	8000362 <__udivmoddi4+0xde>
 8000384:	3e01      	subs	r6, #1
 8000386:	1924      	adds	r4, r4, r4
 8000388:	416d      	adcs	r5, r5
 800038a:	2e00      	cmp	r6, #0
 800038c:	d1f8      	bne.n	8000380 <__udivmoddi4+0xfc>
 800038e:	9800      	ldr	r0, [sp, #0]
 8000390:	9901      	ldr	r1, [sp, #4]
 8000392:	465b      	mov	r3, fp
 8000394:	1900      	adds	r0, r0, r4
 8000396:	4169      	adcs	r1, r5
 8000398:	2b00      	cmp	r3, #0
 800039a:	db24      	blt.n	80003e6 <__udivmoddi4+0x162>
 800039c:	002b      	movs	r3, r5
 800039e:	465a      	mov	r2, fp
 80003a0:	4644      	mov	r4, r8
 80003a2:	40d3      	lsrs	r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	40e2      	lsrs	r2, r4
 80003a8:	001c      	movs	r4, r3
 80003aa:	465b      	mov	r3, fp
 80003ac:	0015      	movs	r5, r2
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db2a      	blt.n	8000408 <__udivmoddi4+0x184>
 80003b2:	0026      	movs	r6, r4
 80003b4:	409e      	lsls	r6, r3
 80003b6:	0033      	movs	r3, r6
 80003b8:	0026      	movs	r6, r4
 80003ba:	4647      	mov	r7, r8
 80003bc:	40be      	lsls	r6, r7
 80003be:	0032      	movs	r2, r6
 80003c0:	1a80      	subs	r0, r0, r2
 80003c2:	4199      	sbcs	r1, r3
 80003c4:	9000      	str	r0, [sp, #0]
 80003c6:	9101      	str	r1, [sp, #4]
 80003c8:	e79e      	b.n	8000308 <__udivmoddi4+0x84>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d8bc      	bhi.n	8000348 <__udivmoddi4+0xc4>
 80003ce:	e782      	b.n	80002d6 <__udivmoddi4+0x52>
 80003d0:	4642      	mov	r2, r8
 80003d2:	2320      	movs	r3, #32
 80003d4:	2100      	movs	r1, #0
 80003d6:	1a9b      	subs	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	9100      	str	r1, [sp, #0]
 80003dc:	9201      	str	r2, [sp, #4]
 80003de:	2201      	movs	r2, #1
 80003e0:	40da      	lsrs	r2, r3
 80003e2:	9201      	str	r2, [sp, #4]
 80003e4:	e785      	b.n	80002f2 <__udivmoddi4+0x6e>
 80003e6:	4642      	mov	r2, r8
 80003e8:	2320      	movs	r3, #32
 80003ea:	1a9b      	subs	r3, r3, r2
 80003ec:	002a      	movs	r2, r5
 80003ee:	4646      	mov	r6, r8
 80003f0:	409a      	lsls	r2, r3
 80003f2:	0023      	movs	r3, r4
 80003f4:	40f3      	lsrs	r3, r6
 80003f6:	4644      	mov	r4, r8
 80003f8:	4313      	orrs	r3, r2
 80003fa:	002a      	movs	r2, r5
 80003fc:	40e2      	lsrs	r2, r4
 80003fe:	001c      	movs	r4, r3
 8000400:	465b      	mov	r3, fp
 8000402:	0015      	movs	r5, r2
 8000404:	2b00      	cmp	r3, #0
 8000406:	dad4      	bge.n	80003b2 <__udivmoddi4+0x12e>
 8000408:	4642      	mov	r2, r8
 800040a:	002f      	movs	r7, r5
 800040c:	2320      	movs	r3, #32
 800040e:	0026      	movs	r6, r4
 8000410:	4097      	lsls	r7, r2
 8000412:	1a9b      	subs	r3, r3, r2
 8000414:	40de      	lsrs	r6, r3
 8000416:	003b      	movs	r3, r7
 8000418:	4333      	orrs	r3, r6
 800041a:	e7cd      	b.n	80003b8 <__udivmoddi4+0x134>

0800041c <__clzdi2>:
 800041c:	b510      	push	{r4, lr}
 800041e:	2900      	cmp	r1, #0
 8000420:	d103      	bne.n	800042a <__clzdi2+0xe>
 8000422:	f000 f807 	bl	8000434 <__clzsi2>
 8000426:	3020      	adds	r0, #32
 8000428:	e002      	b.n	8000430 <__clzdi2+0x14>
 800042a:	0008      	movs	r0, r1
 800042c:	f000 f802 	bl	8000434 <__clzsi2>
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__clzsi2>:
 8000434:	211c      	movs	r1, #28
 8000436:	2301      	movs	r3, #1
 8000438:	041b      	lsls	r3, r3, #16
 800043a:	4298      	cmp	r0, r3
 800043c:	d301      	bcc.n	8000442 <__clzsi2+0xe>
 800043e:	0c00      	lsrs	r0, r0, #16
 8000440:	3910      	subs	r1, #16
 8000442:	0a1b      	lsrs	r3, r3, #8
 8000444:	4298      	cmp	r0, r3
 8000446:	d301      	bcc.n	800044c <__clzsi2+0x18>
 8000448:	0a00      	lsrs	r0, r0, #8
 800044a:	3908      	subs	r1, #8
 800044c:	091b      	lsrs	r3, r3, #4
 800044e:	4298      	cmp	r0, r3
 8000450:	d301      	bcc.n	8000456 <__clzsi2+0x22>
 8000452:	0900      	lsrs	r0, r0, #4
 8000454:	3904      	subs	r1, #4
 8000456:	a202      	add	r2, pc, #8	@ (adr r2, 8000460 <__clzsi2+0x2c>)
 8000458:	5c10      	ldrb	r0, [r2, r0]
 800045a:	1840      	adds	r0, r0, r1
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	02020304 	.word	0x02020304
 8000464:	01010101 	.word	0x01010101
	...

08000470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000476:	4b0c      	ldr	r3, [pc, #48]	@ (80004a8 <MX_DMA_Init+0x38>)
 8000478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800047a:	4b0b      	ldr	r3, [pc, #44]	@ (80004a8 <MX_DMA_Init+0x38>)
 800047c:	2101      	movs	r1, #1
 800047e:	430a      	orrs	r2, r1
 8000480:	631a      	str	r2, [r3, #48]	@ 0x30
 8000482:	4b09      	ldr	r3, [pc, #36]	@ (80004a8 <MX_DMA_Init+0x38>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	2201      	movs	r2, #1
 8000488:	4013      	ands	r3, r2
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800048e:	2200      	movs	r2, #0
 8000490:	2100      	movs	r1, #0
 8000492:	200a      	movs	r0, #10
 8000494:	f001 fbee 	bl	8001c74 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000498:	200a      	movs	r0, #10
 800049a:	f001 fc00 	bl	8001c9e <HAL_NVIC_EnableIRQ>

}
 800049e:	46c0      	nop			@ (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b002      	add	sp, #8
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)
 80004a8:	40021000 	.word	0x40021000

080004ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b08b      	sub	sp, #44	@ 0x2c
 80004b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	2414      	movs	r4, #20
 80004b4:	193b      	adds	r3, r7, r4
 80004b6:	0018      	movs	r0, r3
 80004b8:	2314      	movs	r3, #20
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f005 fce7 	bl	8005e90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004c2:	4b37      	ldr	r3, [pc, #220]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004c6:	4b36      	ldr	r3, [pc, #216]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004c8:	2104      	movs	r1, #4
 80004ca:	430a      	orrs	r2, r1
 80004cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004ce:	4b34      	ldr	r3, [pc, #208]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004d2:	2204      	movs	r2, #4
 80004d4:	4013      	ands	r3, r2
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004da:	4b31      	ldr	r3, [pc, #196]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004de:	4b30      	ldr	r3, [pc, #192]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004e0:	2180      	movs	r1, #128	@ 0x80
 80004e2:	430a      	orrs	r2, r1
 80004e4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004e6:	4b2e      	ldr	r3, [pc, #184]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ea:	2280      	movs	r2, #128	@ 0x80
 80004ec:	4013      	ands	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	4b2b      	ldr	r3, [pc, #172]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80004f6:	4b2a      	ldr	r3, [pc, #168]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 80004f8:	2101      	movs	r1, #1
 80004fa:	430a      	orrs	r2, r1
 80004fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80004fe:	4b28      	ldr	r3, [pc, #160]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 8000500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000502:	2201      	movs	r2, #1
 8000504:	4013      	ands	r3, r2
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050a:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 800050c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800050e:	4b24      	ldr	r3, [pc, #144]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 8000510:	2102      	movs	r1, #2
 8000512:	430a      	orrs	r2, r1
 8000514:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000516:	4b22      	ldr	r3, [pc, #136]	@ (80005a0 <MX_GPIO_Init+0xf4>)
 8000518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800051a:	2202      	movs	r2, #2
 800051c:	4013      	ands	r3, r2
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000522:	4b20      	ldr	r3, [pc, #128]	@ (80005a4 <MX_GPIO_Init+0xf8>)
 8000524:	2200      	movs	r2, #0
 8000526:	2120      	movs	r1, #32
 8000528:	0018      	movs	r0, r3
 800052a:	f001 ff9f 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	2280      	movs	r2, #128	@ 0x80
 8000532:	0192      	lsls	r2, r2, #6
 8000534:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000536:	193b      	adds	r3, r7, r4
 8000538:	2284      	movs	r2, #132	@ 0x84
 800053a:	0392      	lsls	r2, r2, #14
 800053c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000544:	193b      	adds	r3, r7, r4
 8000546:	4a18      	ldr	r2, [pc, #96]	@ (80005a8 <MX_GPIO_Init+0xfc>)
 8000548:	0019      	movs	r1, r3
 800054a:	0010      	movs	r0, r2
 800054c:	f001 fe10 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000550:	193b      	adds	r3, r7, r4
 8000552:	2220      	movs	r2, #32
 8000554:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	2200      	movs	r2, #0
 800055a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	193a      	adds	r2, r7, r4
 8000564:	23a0      	movs	r3, #160	@ 0xa0
 8000566:	05db      	lsls	r3, r3, #23
 8000568:	0011      	movs	r1, r2
 800056a:	0018      	movs	r0, r3
 800056c:	f001 fe00 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000570:	0021      	movs	r1, r4
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2220      	movs	r2, #32
 8000576:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2201      	movs	r2, #1
 800057c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057e:	187b      	adds	r3, r7, r1
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2200      	movs	r2, #0
 8000588:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058a:	187b      	adds	r3, r7, r1
 800058c:	4a05      	ldr	r2, [pc, #20]	@ (80005a4 <MX_GPIO_Init+0xf8>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f001 fded 	bl	8002170 <HAL_GPIO_Init>

}
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	46bd      	mov	sp, r7
 800059a:	b00b      	add	sp, #44	@ 0x2c
 800059c:	bd90      	pop	{r4, r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	40021000 	.word	0x40021000
 80005a4:	50000400 	.word	0x50000400
 80005a8:	50000800 	.word	0x50000800

080005ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000628 <MX_I2C1_Init+0x7c>)
 80005b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000608;
 80005b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005b8:	22c1      	movs	r2, #193	@ 0xc1
 80005ba:	00d2      	lsls	r2, r2, #3
 80005bc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005be:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005c4:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005d0:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005d6:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005d8:	2200      	movs	r2, #0
 80005da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005de:	2200      	movs	r2, #0
 80005e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 ff5c 	bl	80024a8 <HAL_I2C_Init>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005f4:	f000 f9b8 	bl	8000968 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000624 <MX_I2C1_Init+0x78>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 fff9 	bl	80025f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000606:	f000 f9af 	bl	8000968 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800060a:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_I2C1_Init+0x78>)
 800060c:	2100      	movs	r1, #0
 800060e:	0018      	movs	r0, r3
 8000610:	f002 f83c 	bl	800268c <HAL_I2CEx_ConfigDigitalFilter>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000618:	f000 f9a6 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	20000084 	.word	0x20000084
 8000628:	40005400 	.word	0x40005400

0800062c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800062c:	b590      	push	{r4, r7, lr}
 800062e:	b089      	sub	sp, #36	@ 0x24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	240c      	movs	r4, #12
 8000636:	193b      	adds	r3, r7, r4
 8000638:	0018      	movs	r0, r3
 800063a:	2314      	movs	r3, #20
 800063c:	001a      	movs	r2, r3
 800063e:	2100      	movs	r1, #0
 8000640:	f005 fc26 	bl	8005e90 <memset>
  if(i2cHandle->Instance==I2C1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a17      	ldr	r2, [pc, #92]	@ (80006a8 <HAL_I2C_MspInit+0x7c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d128      	bne.n	80006a0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064e:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 8000650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000652:	4b16      	ldr	r3, [pc, #88]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 8000654:	2102      	movs	r1, #2
 8000656:	430a      	orrs	r2, r1
 8000658:	62da      	str	r2, [r3, #44]	@ 0x2c
 800065a:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 800065c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065e:	2202      	movs	r2, #2
 8000660:	4013      	ands	r3, r2
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000666:	0021      	movs	r1, r4
 8000668:	187b      	adds	r3, r7, r1
 800066a:	22c0      	movs	r2, #192	@ 0xc0
 800066c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2212      	movs	r2, #18
 8000672:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2203      	movs	r2, #3
 800067e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2201      	movs	r2, #1
 8000684:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000686:	187b      	adds	r3, r7, r1
 8000688:	4a09      	ldr	r2, [pc, #36]	@ (80006b0 <HAL_I2C_MspInit+0x84>)
 800068a:	0019      	movs	r1, r3
 800068c:	0010      	movs	r0, r2
 800068e:	f001 fd6f 	bl	8002170 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000692:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 8000694:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000696:	4b05      	ldr	r3, [pc, #20]	@ (80006ac <HAL_I2C_MspInit+0x80>)
 8000698:	2180      	movs	r1, #128	@ 0x80
 800069a:	0389      	lsls	r1, r1, #14
 800069c:	430a      	orrs	r2, r1
 800069e:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006a0:	46c0      	nop			@ (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	b009      	add	sp, #36	@ 0x24
 80006a6:	bd90      	pop	{r4, r7, pc}
 80006a8:	40005400 	.word	0x40005400
 80006ac:	40021000 	.word	0x40021000
 80006b0:	50000400 	.word	0x50000400

080006b4 <cb_WAKE>:
//	LORAWAN_MODULE_ERROR,
} LoRaWAN_State_t;
volatile LoRaWAN_State_t lorawan_state = LORAWAN_NOT_JOINED;

void cb_WAKE(const char* str)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	AWAKE = true;
 80006bc:	4b03      	ldr	r3, [pc, #12]	@ (80006cc <cb_WAKE+0x18>)
 80006be:	2201      	movs	r2, #1
 80006c0:	701a      	strb	r2, [r3, #0]
	// Start a timer to determine when the module will sleep again
}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	46c0      	nop			@ (mov r8, r8)
 80006cc:	20000114 	.word	0x20000114

080006d0 <cb_JOIN_SUCCESS>:

void cb_JOIN_SUCCESS(const char* str)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_JOINED;
 80006d8:	4b03      	ldr	r3, [pc, #12]	@ (80006e8 <cb_JOIN_SUCCESS+0x18>)
 80006da:	2202      	movs	r2, #2
 80006dc:	701a      	strb	r2, [r3, #0]
}
 80006de:	46c0      	nop			@ (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b002      	add	sp, #8
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	46c0      	nop			@ (mov r8, r8)
 80006e8:	2000011c 	.word	0x2000011c

080006ec <cb_NOT_JOINED>:
void cb_NOT_JOINED(const char* str)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	lorawan_state = LORAWAN_NOT_JOINED;
 80006f4:	4b03      	ldr	r3, [pc, #12]	@ (8000704 <cb_NOT_JOINED+0x18>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
}
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	46bd      	mov	sp, r7
 80006fe:	b002      	add	sp, #8
 8000700:	bd80      	pop	{r7, pc}
 8000702:	46c0      	nop			@ (mov r8, r8)
 8000704:	2000011c 	.word	0x2000011c

08000708 <cb_DATA_SENT>:
void cb_DATA_SENT(const char* str)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	__NOP();
 8000710:	46c0      	nop			@ (mov r8, r8)
//	switch(str)
//	{
//	case 'str'
//	}
}
 8000712:	46c0      	nop			@ (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b002      	add	sp, #8
 8000718:	bd80      	pop	{r7, pc}

0800071a <cb_DATA_RECIEVED>:
void cb_DATA_RECIEVED(const char* str)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	b082      	sub	sp, #8
 800071e:	af00      	add	r7, sp, #0
 8000720:	6078      	str	r0, [r7, #4]
	__NOP();
 8000722:	46c0      	nop			@ (mov r8, r8)
}
 8000724:	46c0      	nop			@ (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b002      	add	sp, #8
 800072a:	bd80      	pop	{r7, pc}

0800072c <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	000a      	movs	r2, r1
 8000736:	1cbb      	adds	r3, r7, #2
 8000738:	801a      	strh	r2, [r3, #0]
	if (huart->Instance == LPUART1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a07      	ldr	r2, [pc, #28]	@ (800075c <HAL_UARTEx_RxEventCallback+0x30>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d106      	bne.n	8000752 <HAL_UARTEx_RxEventCallback+0x26>
	{
		ATC_IdleLineCallback(&lora, Size);
 8000744:	1cbb      	adds	r3, r7, #2
 8000746:	881a      	ldrh	r2, [r3, #0]
 8000748:	4b05      	ldr	r3, [pc, #20]	@ (8000760 <HAL_UARTEx_RxEventCallback+0x34>)
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f005 f804 	bl	800575a <ATC_IdleLineCallback>
	}
}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b002      	add	sp, #8
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	40004800 	.word	0x40004800
 8000760:	200000d8 	.word	0x200000d8

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b089      	sub	sp, #36	@ 0x24
 8000768:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f001 f943 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f88d 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f7ff fe9b 	bl	80004ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000776:	f7ff fe7b 	bl	8000470 <MX_DMA_Init>
  MX_I2C1_Init();
 800077a:	f7ff ff17 	bl	80005ac <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800077e:	f000 f9ed 	bl	8000b5c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  ATC_Init(&lora, &hlpuart1, 512, "LoRaWAN");
 8000782:	4b34      	ldr	r3, [pc, #208]	@ (8000854 <main+0xf0>)
 8000784:	2280      	movs	r2, #128	@ 0x80
 8000786:	0092      	lsls	r2, r2, #2
 8000788:	4933      	ldr	r1, [pc, #204]	@ (8000858 <main+0xf4>)
 800078a:	4834      	ldr	r0, [pc, #208]	@ (800085c <main+0xf8>)
 800078c:	f004 fdec 	bl	8005368 <ATC_Init>
  ATC_SetEvents(&lora, events);
 8000790:	4a33      	ldr	r2, [pc, #204]	@ (8000860 <main+0xfc>)
 8000792:	4b32      	ldr	r3, [pc, #200]	@ (800085c <main+0xf8>)
 8000794:	0011      	movs	r1, r2
 8000796:	0018      	movs	r0, r3
 8000798:	f004 fe9d 	bl	80054d6 <ATC_SetEvents>
//  scan_i2c_bus(); // Check what devices exist
//  sensirion_i2c_hal_init();
  // Use the global lora variable, not a local one
  const char *dev_eui = "0025CA00000055EE"; // Replace with your DevEUI
 800079c:	4b31      	ldr	r3, [pc, #196]	@ (8000864 <main+0x100>)
 800079e:	60fb      	str	r3, [r7, #12]
  const char *app_eui = "0025CA00000055EE"; // Replace with your AppEUI
 80007a0:	4b30      	ldr	r3, [pc, #192]	@ (8000864 <main+0x100>)
 80007a2:	60bb      	str	r3, [r7, #8]
  const char *app_key = "2B7E151628AED2A6ABF7158809CF4F3C"; // Test key - replace with your real AppKey
 80007a4:	4b30      	ldr	r3, [pc, #192]	@ (8000868 <main+0x104>)
 80007a6:	607b      	str	r3, [r7, #4]
  if (lorawan_configure(&lora, dev_eui, app_eui, app_key)) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	68f9      	ldr	r1, [r7, #12]
 80007ae:	482b      	ldr	r0, [pc, #172]	@ (800085c <main+0xf8>)
 80007b0:	f000 faa8 	bl	8000d04 <lorawan_configure>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d004      	beq.n	80007c2 <main+0x5e>
      printf("LoRaWAN configuration successful\n");
 80007b8:	4b2c      	ldr	r3, [pc, #176]	@ (800086c <main+0x108>)
 80007ba:	0018      	movs	r0, r3
 80007bc:	f005 fa3c 	bl	8005c38 <puts>
 80007c0:	e003      	b.n	80007ca <main+0x66>
  } else {
      printf("LoRaWAN configuration failed\n");
 80007c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000870 <main+0x10c>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f005 fa37 	bl	8005c38 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ATC_Loop(&lora);
 80007ca:	4b24      	ldr	r3, [pc, #144]	@ (800085c <main+0xf8>)
 80007cc:	0018      	movs	r0, r3
 80007ce:	f004 feba 	bl	8005546 <ATC_Loop>
	  switch (lorawan_state) {
 80007d2:	4b28      	ldr	r3, [pc, #160]	@ (8000874 <main+0x110>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d037      	beq.n	800084c <main+0xe8>
 80007dc:	dcf5      	bgt.n	80007ca <main+0x66>
 80007de:	2b02      	cmp	r3, #2
 80007e0:	d01d      	beq.n	800081e <main+0xba>
 80007e2:	dcf2      	bgt.n	80007ca <main+0x66>
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d133      	bne.n	8000850 <main+0xec>
	  case LORAWAN_NOT_JOINED:
			LoRaWAN_Error_t join_result = join_network(&lora);
 80007e8:	1cfc      	adds	r4, r7, #3
 80007ea:	4b1c      	ldr	r3, [pc, #112]	@ (800085c <main+0xf8>)
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 f875 	bl	80018dc <join_network>
 80007f2:	0003      	movs	r3, r0
 80007f4:	7023      	strb	r3, [r4, #0]
			if (join_result == LORAWAN_OK) {
 80007f6:	1cfb      	adds	r3, r7, #3
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d107      	bne.n	800080e <main+0xaa>
				lorawan_state = LORAWAN_JOINING;
 80007fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <main+0x110>)
 8000800:	2201      	movs	r2, #1
 8000802:	701a      	strb	r2, [r3, #0]
				printf("DEBUG: Join command sent successfully\n");
 8000804:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <main+0x114>)
 8000806:	0018      	movs	r0, r3
 8000808:	f005 fa16 	bl	8005c38 <puts>
			} else {
				printf("ERROR: Join command failed with error %d\n", join_result);
				// Could implement retry logic here
			}
		break;
 800080c:	e021      	b.n	8000852 <main+0xee>
				printf("ERROR: Join command failed with error %d\n", join_result);
 800080e:	1cfb      	adds	r3, r7, #3
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	4b1a      	ldr	r3, [pc, #104]	@ (800087c <main+0x118>)
 8000814:	0011      	movs	r1, r2
 8000816:	0018      	movs	r0, r3
 8000818:	f005 f99e 	bl	8005b58 <iprintf>
		break;
 800081c:	e019      	b.n	8000852 <main+0xee>
	  case LORAWAN_JOINING:
		break;
	  case LORAWAN_JOINED:
		  // Ready to send data
		  HAL_Delay(100); // wait a sec for reasons.
 800081e:	2064      	movs	r0, #100	@ 0x64
 8000820:	f001 f958 	bl	8001ad4 <HAL_Delay>
		  resp = ATC_SendReceive(&lora, "AT+SEND \"AA\"\r\n", 200, NULL, 2000, 2, "OK");
 8000824:	4916      	ldr	r1, [pc, #88]	@ (8000880 <main+0x11c>)
 8000826:	480d      	ldr	r0, [pc, #52]	@ (800085c <main+0xf8>)
 8000828:	4b16      	ldr	r3, [pc, #88]	@ (8000884 <main+0x120>)
 800082a:	9302      	str	r3, [sp, #8]
 800082c:	2302      	movs	r3, #2
 800082e:	9301      	str	r3, [sp, #4]
 8000830:	23fa      	movs	r3, #250	@ 0xfa
 8000832:	00db      	lsls	r3, r3, #3
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2300      	movs	r3, #0
 8000838:	22c8      	movs	r2, #200	@ 0xc8
 800083a:	f004 fe94 	bl	8005566 <ATC_SendReceive>
 800083e:	0002      	movs	r2, r0
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <main+0x124>)
 8000842:	601a      	str	r2, [r3, #0]
		  lorawan_state = LORAWAN_DATA_SENDING;
 8000844:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <main+0x110>)
 8000846:	2204      	movs	r2, #4
 8000848:	701a      	strb	r2, [r3, #0]
	  break;
 800084a:	e002      	b.n	8000852 <main+0xee>
	  case LORAWAN_DATA_SENDING:
      break;
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	e7bc      	b.n	80007ca <main+0x66>
		break;
 8000850:	46c0      	nop			@ (mov r8, r8)
	  ATC_Loop(&lora);
 8000852:	e7ba      	b.n	80007ca <main+0x66>
 8000854:	08006ce0 	.word	0x08006ce0
 8000858:	20000124 	.word	0x20000124
 800085c:	200000d8 	.word	0x200000d8
 8000860:	080077d0 	.word	0x080077d0
 8000864:	08006ce8 	.word	0x08006ce8
 8000868:	08006cfc 	.word	0x08006cfc
 800086c:	08006d20 	.word	0x08006d20
 8000870:	08006d44 	.word	0x08006d44
 8000874:	2000011c 	.word	0x2000011c
 8000878:	08006d64 	.word	0x08006d64
 800087c:	08006d8c 	.word	0x08006d8c
 8000880:	08006db8 	.word	0x08006db8
 8000884:	08006dc8 	.word	0x08006dc8
 8000888:	20000118 	.word	0x20000118

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b09f      	sub	sp, #124	@ 0x7c
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	2440      	movs	r4, #64	@ 0x40
 8000894:	193b      	adds	r3, r7, r4
 8000896:	0018      	movs	r0, r3
 8000898:	2338      	movs	r3, #56	@ 0x38
 800089a:	001a      	movs	r2, r3
 800089c:	2100      	movs	r1, #0
 800089e:	f005 faf7 	bl	8005e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a2:	232c      	movs	r3, #44	@ 0x2c
 80008a4:	18fb      	adds	r3, r7, r3
 80008a6:	0018      	movs	r0, r3
 80008a8:	2314      	movs	r3, #20
 80008aa:	001a      	movs	r2, r3
 80008ac:	2100      	movs	r1, #0
 80008ae:	f005 faef 	bl	8005e90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	0018      	movs	r0, r3
 80008b6:	2328      	movs	r3, #40	@ 0x28
 80008b8:	001a      	movs	r2, r3
 80008ba:	2100      	movs	r1, #0
 80008bc:	f005 fae8 	bl	8005e90 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008c0:	4b27      	ldr	r3, [pc, #156]	@ (8000960 <SystemClock_Config+0xd4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a27      	ldr	r2, [pc, #156]	@ (8000964 <SystemClock_Config+0xd8>)
 80008c6:	401a      	ands	r2, r3
 80008c8:	4b25      	ldr	r3, [pc, #148]	@ (8000960 <SystemClock_Config+0xd4>)
 80008ca:	2180      	movs	r1, #128	@ 0x80
 80008cc:	0109      	lsls	r1, r1, #4
 80008ce:	430a      	orrs	r2, r1
 80008d0:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008d2:	0021      	movs	r1, r4
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2210      	movs	r2, #16
 80008d8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2201      	movs	r2, #1
 80008de:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	22a0      	movs	r2, #160	@ 0xa0
 80008ea:	0212      	lsls	r2, r2, #8
 80008ec:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ee:	187b      	adds	r3, r7, r1
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	187b      	adds	r3, r7, r1
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 ff14 	bl	8002724 <HAL_RCC_OscConfig>
 80008fc:	1e03      	subs	r3, r0, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000900:	f000 f832 	bl	8000968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	212c      	movs	r1, #44	@ 0x2c
 8000906:	187b      	adds	r3, r7, r1
 8000908:	220f      	movs	r2, #15
 800090a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2100      	movs	r1, #0
 8000928:	0018      	movs	r0, r3
 800092a:	f002 facf 	bl	8002ecc <HAL_RCC_ClockConfig>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000932:	f000 f819 	bl	8000968 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1;
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	220c      	movs	r2, #12
 800093a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	0018      	movs	r0, r3
 800094c:	f002 fcc2 	bl	80032d4 <HAL_RCCEx_PeriphCLKConfig>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000954:	f000 f808 	bl	8000968 <Error_Handler>
  }
}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b01f      	add	sp, #124	@ 0x7c
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	40007000 	.word	0x40007000
 8000964:	ffffe7ff 	.word	0xffffe7ff

08000968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800096c:	b672      	cpsid	i
}
 800096e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000970:	46c0      	nop			@ (mov r8, r8)
 8000972:	e7fd      	b.n	8000970 <Error_Handler+0x8>

08000974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000978:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <HAL_MspInit+0x24>)
 800097a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <HAL_MspInit+0x24>)
 800097e:	2101      	movs	r1, #1
 8000980:	430a      	orrs	r2, r1
 8000982:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <HAL_MspInit+0x24>)
 8000986:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000988:	4b03      	ldr	r3, [pc, #12]	@ (8000998 <HAL_MspInit+0x24>)
 800098a:	2180      	movs	r1, #128	@ 0x80
 800098c:	0549      	lsls	r1, r1, #21
 800098e:	430a      	orrs	r2, r1
 8000990:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40021000 	.word	0x40021000

0800099c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	e7fd      	b.n	80009a0 <NMI_Handler+0x4>

080009a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  printf("HARD FAULT OCCURRED!\n");
 80009a8:	4b02      	ldr	r3, [pc, #8]	@ (80009b4 <HardFault_Handler+0x10>)
 80009aa:	0018      	movs	r0, r3
 80009ac:	f005 f944 	bl	8005c38 <puts>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b0:	46c0      	nop			@ (mov r8, r8)
 80009b2:	e7fd      	b.n	80009b0 <HardFault_Handler+0xc>
 80009b4:	08006dcc 	.word	0x08006dcc

080009b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d0:	f001 f864 	bl	8001a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80009e0:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f001 fadd 	bl	8001fa2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80009e8:	4b04      	ldr	r3, [pc, #16]	@ (80009fc <DMA1_Channel2_3_IRQHandler+0x20>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 fad9 	bl	8001fa2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	200001f4 	.word	0x200001f4
 80009fc:	200001ac 	.word	0x200001ac

08000a00 <RNG_LPUART1_IRQHandler>:

/**
  * @brief This function handles RNG and LPUART1 Interrupts / LPUART1 wake-up interrupt through EXTI line 28.
  */
void RNG_LPUART1_IRQHandler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_LPUART1_IRQn 0 */

  /* USER CODE END RNG_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000a04:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <RNG_LPUART1_IRQHandler+0x14>)
 8000a06:	0018      	movs	r0, r3
 8000a08:	f002 fffa 	bl	8003a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN RNG_LPUART1_IRQn 1 */

  /* USER CODE END RNG_LPUART1_IRQn 1 */
}
 8000a0c:	46c0      	nop			@ (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	20000124 	.word	0x20000124

08000a18 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b086      	sub	sp, #24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e00a      	b.n	8000a40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a2a:	e000      	b.n	8000a2e <_read+0x16>
 8000a2c:	bf00      	nop
 8000a2e:	0001      	movs	r1, r0
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	1c5a      	adds	r2, r3, #1
 8000a34:	60ba      	str	r2, [r7, #8]
 8000a36:	b2ca      	uxtb	r2, r1
 8000a38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	617b      	str	r3, [r7, #20]
 8000a40:	697a      	ldr	r2, [r7, #20]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	dbf0      	blt.n	8000a2a <_read+0x12>
  }

  return len;
 8000a48:	687b      	ldr	r3, [r7, #4]
}
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b006      	add	sp, #24
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	60f8      	str	r0, [r7, #12]
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5e:	2300      	movs	r3, #0
 8000a60:	617b      	str	r3, [r7, #20]
 8000a62:	e009      	b.n	8000a78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	1c5a      	adds	r2, r3, #1
 8000a68:	60ba      	str	r2, [r7, #8]
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	e000      	b.n	8000a72 <_write+0x20>
 8000a70:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	3301      	adds	r3, #1
 8000a76:	617b      	str	r3, [r7, #20]
 8000a78:	697a      	ldr	r2, [r7, #20]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	429a      	cmp	r2, r3
 8000a7e:	dbf1      	blt.n	8000a64 <_write+0x12>
  }
  return len;
 8000a80:	687b      	ldr	r3, [r7, #4]
}
 8000a82:	0018      	movs	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b006      	add	sp, #24
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <_close>:

int _close(int file)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a92:	2301      	movs	r3, #1
 8000a94:	425b      	negs	r3, r3
}
 8000a96:	0018      	movs	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b002      	add	sp, #8
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
 8000aa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	2280      	movs	r2, #128	@ 0x80
 8000aac:	0192      	lsls	r2, r2, #6
 8000aae:	605a      	str	r2, [r3, #4]
  return 0;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b002      	add	sp, #8
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_isatty>:

int _isatty(int file)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	b082      	sub	sp, #8
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b002      	add	sp, #8
 8000aca:	bd80      	pop	{r7, pc}

08000acc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	0018      	movs	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b004      	add	sp, #16
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aec:	4a14      	ldr	r2, [pc, #80]	@ (8000b40 <_sbrk+0x5c>)
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <_sbrk+0x60>)
 8000af0:	1ad3      	subs	r3, r2, r3
 8000af2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d102      	bne.n	8000b06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b00:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <_sbrk+0x64>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	@ (8000b4c <_sbrk+0x68>)
 8000b04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	18d3      	adds	r3, r2, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d207      	bcs.n	8000b24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b14:	f005 fa4e 	bl	8005fb4 <__errno>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	425b      	negs	r3, r3
 8000b22:	e009      	b.n	8000b38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <_sbrk+0x64>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b2a:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <_sbrk+0x64>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	18d2      	adds	r2, r2, r3
 8000b32:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <_sbrk+0x64>)
 8000b34:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b36:	68fb      	ldr	r3, [r7, #12]
}
 8000b38:	0018      	movs	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b006      	add	sp, #24
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20005000 	.word	0x20005000
 8000b44:	00000400 	.word	0x00000400
 8000b48:	20000120 	.word	0x20000120
 8000b4c:	20000390 	.word	0x20000390

08000b50 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b54:	46c0      	nop			@ (mov r8, r8)
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b60:	4b13      	ldr	r3, [pc, #76]	@ (8000bb0 <MX_LPUART1_UART_Init+0x54>)
 8000b62:	4a14      	ldr	r2, [pc, #80]	@ (8000bb4 <MX_LPUART1_UART_Init+0x58>)
 8000b64:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000b66:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <MX_LPUART1_UART_Init+0x54>)
 8000b68:	22e1      	movs	r2, #225	@ 0xe1
 8000b6a:	0252      	lsls	r2, r2, #9
 8000b6c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <MX_LPUART1_UART_Init+0x54>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <MX_LPUART1_UART_Init+0x54>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <MX_LPUART1_UART_Init+0x54>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <MX_LPUART1_UART_Init+0x54>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <MX_LPUART1_UART_Init+0x54>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	@ (8000bb0 <MX_LPUART1_UART_Init+0x54>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b92:	4b07      	ldr	r3, [pc, #28]	@ (8000bb0 <MX_LPUART1_UART_Init+0x54>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000b98:	4b05      	ldr	r3, [pc, #20]	@ (8000bb0 <MX_LPUART1_UART_Init+0x54>)
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f002 fd38 	bl	8003610 <HAL_UART_Init>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000ba4:	f7ff fee0 	bl	8000968 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ba8:	46c0      	nop			@ (mov r8, r8)
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	20000124 	.word	0x20000124
 8000bb4:	40004800 	.word	0x40004800

08000bb8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b089      	sub	sp, #36	@ 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	240c      	movs	r4, #12
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	2314      	movs	r3, #20
 8000bc8:	001a      	movs	r2, r3
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f005 f960 	bl	8005e90 <memset>
  if(uartHandle->Instance==LPUART1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a45      	ldr	r2, [pc, #276]	@ (8000cec <HAL_UART_MspInit+0x134>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d000      	beq.n	8000bdc <HAL_UART_MspInit+0x24>
 8000bda:	e083      	b.n	8000ce4 <HAL_UART_MspInit+0x12c>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bdc:	4b44      	ldr	r3, [pc, #272]	@ (8000cf0 <HAL_UART_MspInit+0x138>)
 8000bde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000be0:	4b43      	ldr	r3, [pc, #268]	@ (8000cf0 <HAL_UART_MspInit+0x138>)
 8000be2:	2180      	movs	r1, #128	@ 0x80
 8000be4:	02c9      	lsls	r1, r1, #11
 8000be6:	430a      	orrs	r2, r1
 8000be8:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b41      	ldr	r3, [pc, #260]	@ (8000cf0 <HAL_UART_MspInit+0x138>)
 8000bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bee:	4b40      	ldr	r3, [pc, #256]	@ (8000cf0 <HAL_UART_MspInit+0x138>)
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf0 <HAL_UART_MspInit+0x138>)
 8000bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c02:	0021      	movs	r1, r4
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	187b      	adds	r3, r7, r1
 8000c0c:	2202      	movs	r2, #2
 8000c0e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	187b      	adds	r3, r7, r1
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	2206      	movs	r2, #6
 8000c20:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c22:	187a      	adds	r2, r7, r1
 8000c24:	23a0      	movs	r3, #160	@ 0xa0
 8000c26:	05db      	lsls	r3, r3, #23
 8000c28:	0011      	movs	r1, r2
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f001 faa0 	bl	8002170 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8000c30:	4b30      	ldr	r3, [pc, #192]	@ (8000cf4 <HAL_UART_MspInit+0x13c>)
 8000c32:	4a31      	ldr	r2, [pc, #196]	@ (8000cf8 <HAL_UART_MspInit+0x140>)
 8000c34:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_5;
 8000c36:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf4 <HAL_UART_MspInit+0x13c>)
 8000c38:	2205      	movs	r2, #5
 8000c3a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf4 <HAL_UART_MspInit+0x13c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c42:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf4 <HAL_UART_MspInit+0x13c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c48:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <HAL_UART_MspInit+0x13c>)
 8000c4a:	2280      	movs	r2, #128	@ 0x80
 8000c4c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c4e:	4b29      	ldr	r3, [pc, #164]	@ (8000cf4 <HAL_UART_MspInit+0x13c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c54:	4b27      	ldr	r3, [pc, #156]	@ (8000cf4 <HAL_UART_MspInit+0x13c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8000c5a:	4b26      	ldr	r3, [pc, #152]	@ (8000cf4 <HAL_UART_MspInit+0x13c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c60:	4b24      	ldr	r3, [pc, #144]	@ (8000cf4 <HAL_UART_MspInit+0x13c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8000c66:	4b23      	ldr	r3, [pc, #140]	@ (8000cf4 <HAL_UART_MspInit+0x13c>)
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f001 f835 	bl	8001cd8 <HAL_DMA_Init>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d001      	beq.n	8000c76 <HAL_UART_MspInit+0xbe>
    {
      Error_Handler();
 8000c72:	f7ff fe79 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4a1e      	ldr	r2, [pc, #120]	@ (8000cf4 <HAL_UART_MspInit+0x13c>)
 8000c7a:	675a      	str	r2, [r3, #116]	@ 0x74
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <HAL_UART_MspInit+0x13c>)
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8000c82:	4b1e      	ldr	r3, [pc, #120]	@ (8000cfc <HAL_UART_MspInit+0x144>)
 8000c84:	4a1e      	ldr	r2, [pc, #120]	@ (8000d00 <HAL_UART_MspInit+0x148>)
 8000c86:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_5;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <HAL_UART_MspInit+0x144>)
 8000c8a:	2205      	movs	r2, #5
 8000c8c:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cfc <HAL_UART_MspInit+0x144>)
 8000c90:	2210      	movs	r2, #16
 8000c92:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c94:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <HAL_UART_MspInit+0x144>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <HAL_UART_MspInit+0x144>)
 8000c9c:	2280      	movs	r2, #128	@ 0x80
 8000c9e:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ca0:	4b16      	ldr	r3, [pc, #88]	@ (8000cfc <HAL_UART_MspInit+0x144>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ca6:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <HAL_UART_MspInit+0x144>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8000cac:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <HAL_UART_MspInit+0x144>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cb2:	4b12      	ldr	r3, [pc, #72]	@ (8000cfc <HAL_UART_MspInit+0x144>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8000cb8:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <HAL_UART_MspInit+0x144>)
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f001 f80c 	bl	8001cd8 <HAL_DMA_Init>
 8000cc0:	1e03      	subs	r3, r0, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000cc4:	f7ff fe50 	bl	8000968 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a0c      	ldr	r2, [pc, #48]	@ (8000cfc <HAL_UART_MspInit+0x144>)
 8000ccc:	671a      	str	r2, [r3, #112]	@ 0x70
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <HAL_UART_MspInit+0x144>)
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(RNG_LPUART1_IRQn, 0, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	201d      	movs	r0, #29
 8000cda:	f000 ffcb 	bl	8001c74 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_LPUART1_IRQn);
 8000cde:	201d      	movs	r0, #29
 8000ce0:	f000 ffdd 	bl	8001c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8000ce4:	46c0      	nop			@ (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b009      	add	sp, #36	@ 0x24
 8000cea:	bd90      	pop	{r4, r7, pc}
 8000cec:	40004800 	.word	0x40004800
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	200001ac 	.word	0x200001ac
 8000cf8:	40020030 	.word	0x40020030
 8000cfc:	200001f4 	.word	0x200001f4
 8000d00:	4002001c 	.word	0x4002001c

08000d04 <lorawan_configure>:
 * @param dev_eui Device EUI (16 hex characters).
 * @param app_eui Application EUI (16 hex characters).
 * @param app_key Application key (32 hex characters).
 * @return true if configuration and join are successful, false otherwise.
 */
bool lorawan_configure(ATC_HandleTypeDef *lora, const char *dev_eui, const char *app_eui, const char *app_key) {
 8000d04:	b5b0      	push	{r4, r5, r7, lr}
 8000d06:	b0cc      	sub	sp, #304	@ 0x130
 8000d08:	af04      	add	r7, sp, #16
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	603b      	str	r3, [r7, #0]
    LoRaWAN_Error_t err;

    // Temporarily disable factory reset to avoid issues
    // factor_reset(lora);

    printf("DEBUG: lorawan_configure called with lora handle: %p\n", (void*)lora);
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	4bbe      	ldr	r3, [pc, #760]	@ (8001010 <lorawan_configure+0x30c>)
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f004 ff1d 	bl	8005b58 <iprintf>
    if (lora == NULL) {
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d105      	bne.n	8000d30 <lorawan_configure+0x2c>
        printf("ERROR: lora handle is NULL!\n");
 8000d24:	4bbb      	ldr	r3, [pc, #748]	@ (8001014 <lorawan_configure+0x310>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f004 ff86 	bl	8005c38 <puts>
        return false;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	e16b      	b.n	8001008 <lorawan_configure+0x304>
    }
    if (lora->hUart == NULL) {
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d105      	bne.n	8000d44 <lorawan_configure+0x40>
        printf("ERROR: lora->hUart is NULL!\n");
 8000d38:	4bb7      	ldr	r3, [pc, #732]	@ (8001018 <lorawan_configure+0x314>)
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f004 ff7c 	bl	8005c38 <puts>
        return false;
 8000d40:	2300      	movs	r3, #0
 8000d42:	e161      	b.n	8001008 <lorawan_configure+0x304>
    }
    printf("DEBUG: lora->hUart = %p, Name = %s\n", (void*)lora->hUart, lora->Name);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	6819      	ldr	r1, [r3, #0]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	1d1a      	adds	r2, r3, #4
 8000d4c:	4bb3      	ldr	r3, [pc, #716]	@ (800101c <lorawan_configure+0x318>)
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f004 ff02 	bl	8005b58 <iprintf>

    // Test basic AT communication first
    printf("DEBUG: Testing basic AT communication...\n");
 8000d54:	4bb2      	ldr	r3, [pc, #712]	@ (8001020 <lorawan_configure+0x31c>)
 8000d56:	0018      	movs	r0, r3
 8000d58:	f004 ff6e 	bl	8005c38 <puts>
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 8000d5c:	2414      	movs	r4, #20
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	613b      	str	r3, [r7, #16]
    int resp = ATC_SendReceive(lora, "AT\r\n", 100, &response_ptr, 1000, 1, "OK");
 8000d62:	2310      	movs	r3, #16
 8000d64:	18fa      	adds	r2, r7, r3
 8000d66:	49af      	ldr	r1, [pc, #700]	@ (8001024 <lorawan_configure+0x320>)
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	4baf      	ldr	r3, [pc, #700]	@ (8001028 <lorawan_configure+0x324>)
 8000d6c:	9302      	str	r3, [sp, #8]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	23fa      	movs	r3, #250	@ 0xfa
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	0013      	movs	r3, r2
 8000d7a:	2264      	movs	r2, #100	@ 0x64
 8000d7c:	f004 fbf3 	bl	8005566 <ATC_SendReceive>
 8000d80:	0003      	movs	r3, r0
 8000d82:	228a      	movs	r2, #138	@ 0x8a
 8000d84:	0052      	lsls	r2, r2, #1
 8000d86:	18b9      	adds	r1, r7, r2
 8000d88:	600b      	str	r3, [r1, #0]
    printf("DEBUG: AT test returned %d, response: %s\n", resp, resp > 0 ? response : "ERROR");
 8000d8a:	18bb      	adds	r3, r7, r2
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	dd01      	ble.n	8000d96 <lorawan_configure+0x92>
 8000d92:	193b      	adds	r3, r7, r4
 8000d94:	e000      	b.n	8000d98 <lorawan_configure+0x94>
 8000d96:	4ba5      	ldr	r3, [pc, #660]	@ (800102c <lorawan_configure+0x328>)
 8000d98:	248a      	movs	r4, #138	@ 0x8a
 8000d9a:	0064      	lsls	r4, r4, #1
 8000d9c:	193a      	adds	r2, r7, r4
 8000d9e:	6811      	ldr	r1, [r2, #0]
 8000da0:	48a3      	ldr	r0, [pc, #652]	@ (8001030 <lorawan_configure+0x32c>)
 8000da2:	001a      	movs	r2, r3
 8000da4:	f004 fed8 	bl	8005b58 <iprintf>
    
    // Try to get version info with different commands
    memset(response, 0, sizeof(response));
 8000da8:	2380      	movs	r3, #128	@ 0x80
 8000daa:	005a      	lsls	r2, r3, #1
 8000dac:	2514      	movs	r5, #20
 8000dae:	197b      	adds	r3, r7, r5
 8000db0:	2100      	movs	r1, #0
 8000db2:	0018      	movs	r0, r3
 8000db4:	f005 f86c 	bl	8005e90 <memset>
    response_ptr = response;
 8000db8:	197b      	adds	r3, r7, r5
 8000dba:	613b      	str	r3, [r7, #16]
    resp = ATC_SendReceive(lora, "AT+VER?\r\n", 100, &response_ptr, 1000, 1, "OK");
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	18fa      	adds	r2, r7, r3
 8000dc0:	499c      	ldr	r1, [pc, #624]	@ (8001034 <lorawan_configure+0x330>)
 8000dc2:	68f8      	ldr	r0, [r7, #12]
 8000dc4:	4b98      	ldr	r3, [pc, #608]	@ (8001028 <lorawan_configure+0x324>)
 8000dc6:	9302      	str	r3, [sp, #8]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	23fa      	movs	r3, #250	@ 0xfa
 8000dce:	009b      	lsls	r3, r3, #2
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	0013      	movs	r3, r2
 8000dd4:	2264      	movs	r2, #100	@ 0x64
 8000dd6:	f004 fbc6 	bl	8005566 <ATC_SendReceive>
 8000dda:	0003      	movs	r3, r0
 8000ddc:	193a      	adds	r2, r7, r4
 8000dde:	6013      	str	r3, [r2, #0]
    printf("DEBUG: AT+VER? returned %d, response: %s\n", resp, resp > 0 ? response : "ERROR");
 8000de0:	193b      	adds	r3, r7, r4
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	dd01      	ble.n	8000dec <lorawan_configure+0xe8>
 8000de8:	197b      	adds	r3, r7, r5
 8000dea:	e000      	b.n	8000dee <lorawan_configure+0xea>
 8000dec:	4b8f      	ldr	r3, [pc, #572]	@ (800102c <lorawan_configure+0x328>)
 8000dee:	228a      	movs	r2, #138	@ 0x8a
 8000df0:	0052      	lsls	r2, r2, #1
 8000df2:	18ba      	adds	r2, r7, r2
 8000df4:	6811      	ldr	r1, [r2, #0]
 8000df6:	4890      	ldr	r0, [pc, #576]	@ (8001038 <lorawan_configure+0x334>)
 8000df8:	001a      	movs	r2, r3
 8000dfa:	f004 fead 	bl	8005b58 <iprintf>

    // Debug the input parameters
    printf("DEBUG: Input parameters:\n");
 8000dfe:	4b8f      	ldr	r3, [pc, #572]	@ (800103c <lorawan_configure+0x338>)
 8000e00:	0018      	movs	r0, r3
 8000e02:	f004 ff19 	bl	8005c38 <puts>
    printf("  dev_eui: %s (length: %zu)\n", dev_eui, strlen(dev_eui));
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff f97d 	bl	8000108 <strlen>
 8000e0e:	0002      	movs	r2, r0
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	4b8b      	ldr	r3, [pc, #556]	@ (8001040 <lorawan_configure+0x33c>)
 8000e14:	0018      	movs	r0, r3
 8000e16:	f004 fe9f 	bl	8005b58 <iprintf>
    printf("  app_eui: %s (length: %zu)\n", app_eui, strlen(app_eui));
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff f973 	bl	8000108 <strlen>
 8000e22:	0002      	movs	r2, r0
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	4b87      	ldr	r3, [pc, #540]	@ (8001044 <lorawan_configure+0x340>)
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f004 fe95 	bl	8005b58 <iprintf>
    printf("  app_key: %s (length: %zu)\n", app_key, strlen(app_key));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff f969 	bl	8000108 <strlen>
 8000e36:	0002      	movs	r2, r0
 8000e38:	6839      	ldr	r1, [r7, #0]
 8000e3a:	4b83      	ldr	r3, [pc, #524]	@ (8001048 <lorawan_configure+0x344>)
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f004 fe8b 	bl	8005b58 <iprintf>
    
    // Print hex dump of app_key to see if there are any issues
    printf("  app_key hex dump: ");
 8000e42:	4b82      	ldr	r3, [pc, #520]	@ (800104c <lorawan_configure+0x348>)
 8000e44:	0018      	movs	r0, r3
 8000e46:	f004 fe87 	bl	8005b58 <iprintf>
    for (size_t i = 0; i < 32 && app_key[i] != '\0'; i++) {
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	228c      	movs	r2, #140	@ 0x8c
 8000e4e:	0052      	lsls	r2, r2, #1
 8000e50:	18ba      	adds	r2, r7, r2
 8000e52:	6013      	str	r3, [r2, #0]
 8000e54:	e011      	b.n	8000e7a <lorawan_configure+0x176>
        printf("%02X ", (unsigned char)app_key[i]);
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	248c      	movs	r4, #140	@ 0x8c
 8000e5a:	0064      	lsls	r4, r4, #1
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	18d3      	adds	r3, r2, r3
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	001a      	movs	r2, r3
 8000e66:	4b7a      	ldr	r3, [pc, #488]	@ (8001050 <lorawan_configure+0x34c>)
 8000e68:	0011      	movs	r1, r2
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f004 fe74 	bl	8005b58 <iprintf>
    for (size_t i = 0; i < 32 && app_key[i] != '\0'; i++) {
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	193a      	adds	r2, r7, r4
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	218c      	movs	r1, #140	@ 0x8c
 8000e7c:	0049      	lsls	r1, r1, #1
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b1f      	cmp	r3, #31
 8000e84:	d806      	bhi.n	8000e94 <lorawan_configure+0x190>
 8000e86:	683a      	ldr	r2, [r7, #0]
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	18d3      	adds	r3, r2, r3
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d1e0      	bne.n	8000e56 <lorawan_configure+0x152>
    }
    printf("\n");
 8000e94:	200a      	movs	r0, #10
 8000e96:	f004 fe6f 	bl	8005b78 <putchar>

    // Validate input parameters
    if (!validate_hex_string(dev_eui, DEV_EUI_LENGTH) ||
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2110      	movs	r1, #16
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 f8e4 	bl	800106c <validate_hex_string>
 8000ea4:	0003      	movs	r3, r0
 8000ea6:	001a      	movs	r2, r3
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	4053      	eors	r3, r2
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d117      	bne.n	8000ee2 <lorawan_configure+0x1de>
        !validate_hex_string(app_eui, APP_EUI_LENGTH) ||
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2110      	movs	r1, #16
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f000 f8d8 	bl	800106c <validate_hex_string>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	4053      	eors	r3, r2
 8000ec4:	b2db      	uxtb	r3, r3
    if (!validate_hex_string(dev_eui, DEV_EUI_LENGTH) ||
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d10b      	bne.n	8000ee2 <lorawan_configure+0x1de>
        !validate_hex_string(app_key, APP_KEY_LENGTH)) {
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2120      	movs	r1, #32
 8000ece:	0018      	movs	r0, r3
 8000ed0:	f000 f8cc 	bl	800106c <validate_hex_string>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	2301      	movs	r3, #1
 8000eda:	4053      	eors	r3, r2
 8000edc:	b2db      	uxtb	r3, r3
        !validate_hex_string(app_eui, APP_EUI_LENGTH) ||
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d005      	beq.n	8000eee <lorawan_configure+0x1ea>
        printf("Invalid EUI or AppKey format\n");
 8000ee2:	4b5c      	ldr	r3, [pc, #368]	@ (8001054 <lorawan_configure+0x350>)
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	f004 fea7 	bl	8005c38 <puts>
        return false;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e08c      	b.n	8001008 <lorawan_configure+0x304>
    }

    // Configure DevEUI, AppEUI, and AppKey
    if ((err = set_dev_eui(lora, dev_eui)) != LORAWAN_OK ||
 8000eee:	2520      	movs	r5, #32
 8000ef0:	35ff      	adds	r5, #255	@ 0xff
 8000ef2:	197c      	adds	r4, r7, r5
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	0011      	movs	r1, r2
 8000efa:	0018      	movs	r0, r3
 8000efc:	f000 f8fe 	bl	80010fc <set_dev_eui>
 8000f00:	0003      	movs	r3, r0
 8000f02:	7023      	strb	r3, [r4, #0]
 8000f04:	197b      	adds	r3, r7, r5
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d119      	bne.n	8000f40 <lorawan_configure+0x23c>
        (err = set_app_eui(lora, app_eui)) != LORAWAN_OK ||
 8000f0c:	197c      	adds	r4, r7, r5
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	0011      	movs	r1, r2
 8000f14:	0018      	movs	r0, r3
 8000f16:	f000 f9d9 	bl	80012cc <set_app_eui>
 8000f1a:	0003      	movs	r3, r0
 8000f1c:	7023      	strb	r3, [r4, #0]
    if ((err = set_dev_eui(lora, dev_eui)) != LORAWAN_OK ||
 8000f1e:	197b      	adds	r3, r7, r5
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10c      	bne.n	8000f40 <lorawan_configure+0x23c>
        (err = set_app_key(lora, app_key)) != LORAWAN_OK) {
 8000f26:	197c      	adds	r4, r7, r5
 8000f28:	683a      	ldr	r2, [r7, #0]
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	0011      	movs	r1, r2
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f000 fa90 	bl	8001454 <set_app_key>
 8000f34:	0003      	movs	r3, r0
 8000f36:	7023      	strb	r3, [r4, #0]
        (err = set_app_eui(lora, app_eui)) != LORAWAN_OK ||
 8000f38:	197b      	adds	r3, r7, r5
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00a      	beq.n	8000f56 <lorawan_configure+0x252>
        printf("Error setting EUIs or AppKey: %d\n", err);
 8000f40:	2320      	movs	r3, #32
 8000f42:	33ff      	adds	r3, #255	@ 0xff
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	781a      	ldrb	r2, [r3, #0]
 8000f48:	4b43      	ldr	r3, [pc, #268]	@ (8001058 <lorawan_configure+0x354>)
 8000f4a:	0011      	movs	r1, r2
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f004 fe03 	bl	8005b58 <iprintf>
        return false;
 8000f52:	2300      	movs	r3, #0
 8000f54:	e058      	b.n	8001008 <lorawan_configure+0x304>
    }

    // Configure region and sub-band
    if ((err = configure_region_and_channel(lora)) != LORAWAN_OK) {
 8000f56:	2520      	movs	r5, #32
 8000f58:	35ff      	adds	r5, #255	@ 0xff
 8000f5a:	197c      	adds	r4, r7, r5
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f000 fb4a 	bl	80015f8 <configure_region_and_channel>
 8000f64:	0003      	movs	r3, r0
 8000f66:	7023      	strb	r3, [r4, #0]
 8000f68:	197b      	adds	r3, r7, r5
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d008      	beq.n	8000f82 <lorawan_configure+0x27e>
        printf("Error configuring region/channel: %d\n", err);
 8000f70:	197b      	adds	r3, r7, r5
 8000f72:	781a      	ldrb	r2, [r3, #0]
 8000f74:	4b39      	ldr	r3, [pc, #228]	@ (800105c <lorawan_configure+0x358>)
 8000f76:	0011      	movs	r1, r2
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f004 fded 	bl	8005b58 <iprintf>
        return false;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e042      	b.n	8001008 <lorawan_configure+0x304>
    }

    // Check and set frequency
    if ((err = check_and_set_frequency(lora)) != LORAWAN_OK) {
 8000f82:	2520      	movs	r5, #32
 8000f84:	35ff      	adds	r5, #255	@ 0xff
 8000f86:	197c      	adds	r4, r7, r5
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f000 fb5c 	bl	8001648 <check_and_set_frequency>
 8000f90:	0003      	movs	r3, r0
 8000f92:	7023      	strb	r3, [r4, #0]
 8000f94:	197b      	adds	r3, r7, r5
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d008      	beq.n	8000fae <lorawan_configure+0x2aa>
        printf("Error checking/setting frequency: %d\n", err);
 8000f9c:	197b      	adds	r3, r7, r5
 8000f9e:	781a      	ldrb	r2, [r3, #0]
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8001060 <lorawan_configure+0x35c>)
 8000fa2:	0011      	movs	r1, r2
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	f004 fdd7 	bl	8005b58 <iprintf>
        return false;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e02c      	b.n	8001008 <lorawan_configure+0x304>
    }

    // Configure LoRaWAN parameters (ADR, OTAA, Class, DR, TX Power)
    if ((err = configure_lorawan_params(lora)) != LORAWAN_OK) {
 8000fae:	2520      	movs	r5, #32
 8000fb0:	35ff      	adds	r5, #255	@ 0xff
 8000fb2:	197c      	adds	r4, r7, r5
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	f000 fb70 	bl	800169c <configure_lorawan_params>
 8000fbc:	0003      	movs	r3, r0
 8000fbe:	7023      	strb	r3, [r4, #0]
 8000fc0:	197b      	adds	r3, r7, r5
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d008      	beq.n	8000fda <lorawan_configure+0x2d6>
        printf("Error configuring LoRaWAN parameters: %d\n", err);
 8000fc8:	197b      	adds	r3, r7, r5
 8000fca:	781a      	ldrb	r2, [r3, #0]
 8000fcc:	4b25      	ldr	r3, [pc, #148]	@ (8001064 <lorawan_configure+0x360>)
 8000fce:	0011      	movs	r1, r2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f004 fdc1 	bl	8005b58 <iprintf>
        return false;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e016      	b.n	8001008 <lorawan_configure+0x304>
    }

    // Save settings and reset
    if ((err = save_and_reset(lora)) != LORAWAN_OK) {
 8000fda:	2520      	movs	r5, #32
 8000fdc:	35ff      	adds	r5, #255	@ 0xff
 8000fde:	197c      	adds	r4, r7, r5
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	f000 fca6 	bl	8001934 <save_and_reset>
 8000fe8:	0003      	movs	r3, r0
 8000fea:	7023      	strb	r3, [r4, #0]
 8000fec:	197b      	adds	r3, r7, r5
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d008      	beq.n	8001006 <lorawan_configure+0x302>
        printf("Error saving/resetting: %d\n", err);
 8000ff4:	197b      	adds	r3, r7, r5
 8000ff6:	781a      	ldrb	r2, [r3, #0]
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8001068 <lorawan_configure+0x364>)
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f004 fdab 	bl	8005b58 <iprintf>
        return false;
 8001002:	2300      	movs	r3, #0
 8001004:	e000      	b.n	8001008 <lorawan_configure+0x304>
//    if ((err = join_network(lora)) != LORAWAN_OK) {
//        printf("Error joining network: %d\n", err);
//        return false;
//    }

    return true;
 8001006:	2301      	movs	r3, #1
}
 8001008:	0018      	movs	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	b048      	add	sp, #288	@ 0x120
 800100e:	bdb0      	pop	{r4, r5, r7, pc}
 8001010:	08006de4 	.word	0x08006de4
 8001014:	08006e1c 	.word	0x08006e1c
 8001018:	08006e38 	.word	0x08006e38
 800101c:	08006e54 	.word	0x08006e54
 8001020:	08006e78 	.word	0x08006e78
 8001024:	08006ea4 	.word	0x08006ea4
 8001028:	08006eac 	.word	0x08006eac
 800102c:	08006eb0 	.word	0x08006eb0
 8001030:	08006eb8 	.word	0x08006eb8
 8001034:	08006ee4 	.word	0x08006ee4
 8001038:	08006ef0 	.word	0x08006ef0
 800103c:	08006f1c 	.word	0x08006f1c
 8001040:	08006f38 	.word	0x08006f38
 8001044:	08006f58 	.word	0x08006f58
 8001048:	08006f78 	.word	0x08006f78
 800104c:	08006f98 	.word	0x08006f98
 8001050:	08006fb0 	.word	0x08006fb0
 8001054:	08006fb8 	.word	0x08006fb8
 8001058:	08006fd8 	.word	0x08006fd8
 800105c:	08006ffc 	.word	0x08006ffc
 8001060:	08007024 	.word	0x08007024
 8001064:	0800704c 	.word	0x0800704c
 8001068:	08007078 	.word	0x08007078

0800106c <validate_hex_string>:
 * @brief Validates that a string is hexadecimal and of the expected length.
 * @param str The string to validate.
 * @param expected_len The expected length of the string.
 * @return true if the string is valid hexadecimal and matches the length, false otherwise.
 */
static bool validate_hex_string(const char *str, size_t expected_len) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
    if (str == NULL || strlen(str) != expected_len) {
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d007      	beq.n	800108c <validate_hex_string+0x20>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	0018      	movs	r0, r3
 8001080:	f7ff f842 	bl	8000108 <strlen>
 8001084:	0002      	movs	r2, r0
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	4293      	cmp	r3, r2
 800108a:	d001      	beq.n	8001090 <validate_hex_string+0x24>
        return false;
 800108c:	2300      	movs	r3, #0
 800108e:	e030      	b.n	80010f2 <validate_hex_string+0x86>
    }
    for (size_t i = 0; i < expected_len; i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	e028      	b.n	80010e8 <validate_hex_string+0x7c>
        if (!((str[i] >= '0' && str[i] <= '9') ||
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	18d3      	adds	r3, r2, r3
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b2f      	cmp	r3, #47	@ 0x2f
 80010a0:	d905      	bls.n	80010ae <validate_hex_string+0x42>
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	18d3      	adds	r3, r2, r3
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b39      	cmp	r3, #57	@ 0x39
 80010ac:	d919      	bls.n	80010e2 <validate_hex_string+0x76>
              (str[i] >= 'A' && str[i] <= 'F') ||
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	18d3      	adds	r3, r2, r3
 80010b4:	781b      	ldrb	r3, [r3, #0]
        if (!((str[i] >= '0' && str[i] <= '9') ||
 80010b6:	2b40      	cmp	r3, #64	@ 0x40
 80010b8:	d905      	bls.n	80010c6 <validate_hex_string+0x5a>
              (str[i] >= 'A' && str[i] <= 'F') ||
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	18d3      	adds	r3, r2, r3
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b46      	cmp	r3, #70	@ 0x46
 80010c4:	d90d      	bls.n	80010e2 <validate_hex_string+0x76>
              (str[i] >= 'a' && str[i] <= 'f'))) {
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	18d3      	adds	r3, r2, r3
 80010cc:	781b      	ldrb	r3, [r3, #0]
        if (!((str[i] >= '0' && str[i] <= '9') ||
 80010ce:	2b60      	cmp	r3, #96	@ 0x60
 80010d0:	d905      	bls.n	80010de <validate_hex_string+0x72>
              (str[i] >= 'a' && str[i] <= 'f'))) {
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	18d3      	adds	r3, r2, r3
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b66      	cmp	r3, #102	@ 0x66
 80010dc:	d901      	bls.n	80010e2 <validate_hex_string+0x76>
            return false;
 80010de:	2300      	movs	r3, #0
 80010e0:	e007      	b.n	80010f2 <validate_hex_string+0x86>
    for (size_t i = 0; i < expected_len; i++) {
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	3301      	adds	r3, #1
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d3d2      	bcc.n	8001096 <validate_hex_string+0x2a>
        }
    }
    return true;
 80010f0:	2301      	movs	r3, #1
}
 80010f2:	0018      	movs	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b004      	add	sp, #16
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <set_dev_eui>:
 * @brief Sets the Device EUI (DevEUI) if not already set or invalid.
 * @param lora Pointer to the ATC handle for communication.
 * @param dev_eui Device EUI (16 hex characters).
 * @return LORAWAN_OK on success, LORAWAN_ERR_DEV_EUI or LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_dev_eui(ATC_HandleTypeDef *lora, const char *dev_eui) {
 80010fc:	b5b0      	push	{r4, r5, r7, lr}
 80010fe:	b0d8      	sub	sp, #352	@ 0x160
 8001100:	af04      	add	r7, sp, #16
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
    printf("DEBUG: set_dev_eui called with EUI: %s\n", dev_eui);
 8001106:	683a      	ldr	r2, [r7, #0]
 8001108:	4b5f      	ldr	r3, [pc, #380]	@ (8001288 <set_dev_eui+0x18c>)
 800110a:	0011      	movs	r1, r2
 800110c:	0018      	movs	r0, r3
 800110e:	f004 fd23 	bl	8005b58 <iprintf>
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 8001112:	2348      	movs	r3, #72	@ 0x48
 8001114:	18fb      	adds	r3, r7, r3
 8001116:	22a4      	movs	r2, #164	@ 0xa4
 8001118:	0052      	lsls	r2, r2, #1
 800111a:	18ba      	adds	r2, r7, r2
 800111c:	6013      	str	r3, [r2, #0]
    
    // Try multiple command formats for DevEUI
    char command[64];
    int resp = -1;
 800111e:	2301      	movs	r3, #1
 8001120:	425b      	negs	r3, r3
 8001122:	24a6      	movs	r4, #166	@ 0xa6
 8001124:	0064      	lsls	r4, r4, #1
 8001126:	193a      	adds	r2, r7, r4
 8001128:	6013      	str	r3, [r2, #0]
    
    // Format 1: ATS 501 (your original format)
    printf("DEBUG: Trying ATS 501 format...\n");
 800112a:	4b58      	ldr	r3, [pc, #352]	@ (800128c <set_dev_eui+0x190>)
 800112c:	0018      	movs	r0, r3
 800112e:	f004 fd83 	bl	8005c38 <puts>
    snprintf(command, sizeof(command), "AT%%S 501=\"%s\"\r\n", dev_eui);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	4a56      	ldr	r2, [pc, #344]	@ (8001290 <set_dev_eui+0x194>)
 8001136:	2508      	movs	r5, #8
 8001138:	1978      	adds	r0, r7, r5
 800113a:	2140      	movs	r1, #64	@ 0x40
 800113c:	f004 fd86 	bl	8005c4c <sniprintf>
    printf("DEBUG: Command string: %s", command);
 8001140:	197a      	adds	r2, r7, r5
 8001142:	4b54      	ldr	r3, [pc, #336]	@ (8001294 <set_dev_eui+0x198>)
 8001144:	0011      	movs	r1, r2
 8001146:	0018      	movs	r0, r3
 8001148:	f004 fd06 	bl	8005b58 <iprintf>
    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800114c:	1979      	adds	r1, r7, r5
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	4b51      	ldr	r3, [pc, #324]	@ (8001298 <set_dev_eui+0x19c>)
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	23c8      	movs	r3, #200	@ 0xc8
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	2300      	movs	r3, #0
 800115e:	2264      	movs	r2, #100	@ 0x64
 8001160:	f004 fa01 	bl	8005566 <ATC_SendReceive>
 8001164:	0003      	movs	r3, r0
 8001166:	193a      	adds	r2, r7, r4
 8001168:	6013      	str	r3, [r2, #0]
    printf("DEBUG: ATS 501 format returned %d\n", resp);
 800116a:	193b      	adds	r3, r7, r4
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4b4b      	ldr	r3, [pc, #300]	@ (800129c <set_dev_eui+0x1a0>)
 8001170:	0011      	movs	r1, r2
 8001172:	0018      	movs	r0, r3
 8001174:	f004 fcf0 	bl	8005b58 <iprintf>
    
    if (resp < 0) {
 8001178:	193b      	adds	r3, r7, r4
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	da1f      	bge.n	80011c0 <set_dev_eui+0xc4>
        // Format 2: AT+DEVEUI (common format)
        printf("DEBUG: Trying AT+DEVEUI format...\n");
 8001180:	4b47      	ldr	r3, [pc, #284]	@ (80012a0 <set_dev_eui+0x1a4>)
 8001182:	0018      	movs	r0, r3
 8001184:	f004 fd58 	bl	8005c38 <puts>
        snprintf(command, sizeof(command), "AT+DEVEUI=%s\r\n", dev_eui);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	4a46      	ldr	r2, [pc, #280]	@ (80012a4 <set_dev_eui+0x1a8>)
 800118c:	1978      	adds	r0, r7, r5
 800118e:	2140      	movs	r1, #64	@ 0x40
 8001190:	f004 fd5c 	bl	8005c4c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001194:	1979      	adds	r1, r7, r5
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	4b3f      	ldr	r3, [pc, #252]	@ (8001298 <set_dev_eui+0x19c>)
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	2301      	movs	r3, #1
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	23c8      	movs	r3, #200	@ 0xc8
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2300      	movs	r3, #0
 80011a6:	2264      	movs	r2, #100	@ 0x64
 80011a8:	f004 f9dd 	bl	8005566 <ATC_SendReceive>
 80011ac:	0003      	movs	r3, r0
 80011ae:	193a      	adds	r2, r7, r4
 80011b0:	6013      	str	r3, [r2, #0]
        printf("DEBUG: AT+DEVEUI format returned %d\n", resp);
 80011b2:	193b      	adds	r3, r7, r4
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b3c      	ldr	r3, [pc, #240]	@ (80012a8 <set_dev_eui+0x1ac>)
 80011b8:	0011      	movs	r1, r2
 80011ba:	0018      	movs	r0, r3
 80011bc:	f004 fccc 	bl	8005b58 <iprintf>
    }
    
    if (resp < 0) {
 80011c0:	24a6      	movs	r4, #166	@ 0xa6
 80011c2:	0064      	lsls	r4, r4, #1
 80011c4:	193b      	adds	r3, r7, r4
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	da20      	bge.n	800120e <set_dev_eui+0x112>
        // Format 3: AT+DEV_EUI (alternative format)
        printf("DEBUG: Trying AT+DEV_EUI format...\n");
 80011cc:	4b37      	ldr	r3, [pc, #220]	@ (80012ac <set_dev_eui+0x1b0>)
 80011ce:	0018      	movs	r0, r3
 80011d0:	f004 fd32 	bl	8005c38 <puts>
        snprintf(command, sizeof(command), "AT+DEV_EUI=%s\r\n", dev_eui);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	4a36      	ldr	r2, [pc, #216]	@ (80012b0 <set_dev_eui+0x1b4>)
 80011d8:	2508      	movs	r5, #8
 80011da:	1978      	adds	r0, r7, r5
 80011dc:	2140      	movs	r1, #64	@ 0x40
 80011de:	f004 fd35 	bl	8005c4c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80011e2:	1979      	adds	r1, r7, r5
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001298 <set_dev_eui+0x19c>)
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	2301      	movs	r3, #1
 80011ec:	9301      	str	r3, [sp, #4]
 80011ee:	23c8      	movs	r3, #200	@ 0xc8
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	2300      	movs	r3, #0
 80011f4:	2264      	movs	r2, #100	@ 0x64
 80011f6:	f004 f9b6 	bl	8005566 <ATC_SendReceive>
 80011fa:	0003      	movs	r3, r0
 80011fc:	193a      	adds	r2, r7, r4
 80011fe:	6013      	str	r3, [r2, #0]
        printf("DEBUG: AT+DEV_EUI format returned %d\n", resp);
 8001200:	193b      	adds	r3, r7, r4
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b2b      	ldr	r3, [pc, #172]	@ (80012b4 <set_dev_eui+0x1b8>)
 8001206:	0011      	movs	r1, r2
 8001208:	0018      	movs	r0, r3
 800120a:	f004 fca5 	bl	8005b58 <iprintf>
    }
    
    if (resp < 0) {
 800120e:	24a6      	movs	r4, #166	@ 0xa6
 8001210:	0064      	lsls	r4, r4, #1
 8001212:	193b      	adds	r3, r7, r4
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2b00      	cmp	r3, #0
 8001218:	da20      	bge.n	800125c <set_dev_eui+0x160>
        // Format 4: AT+ID=DevEui (RAK style)
        printf("DEBUG: Trying AT+ID=DevEui format...\n");
 800121a:	4b27      	ldr	r3, [pc, #156]	@ (80012b8 <set_dev_eui+0x1bc>)
 800121c:	0018      	movs	r0, r3
 800121e:	f004 fd0b 	bl	8005c38 <puts>
        snprintf(command, sizeof(command), "AT+ID=DevEui,\"%s\"\r\n", dev_eui);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	4a25      	ldr	r2, [pc, #148]	@ (80012bc <set_dev_eui+0x1c0>)
 8001226:	2508      	movs	r5, #8
 8001228:	1978      	adds	r0, r7, r5
 800122a:	2140      	movs	r1, #64	@ 0x40
 800122c:	f004 fd0e 	bl	8005c4c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001230:	1979      	adds	r1, r7, r5
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	4b18      	ldr	r3, [pc, #96]	@ (8001298 <set_dev_eui+0x19c>)
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	23c8      	movs	r3, #200	@ 0xc8
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	2300      	movs	r3, #0
 8001242:	2264      	movs	r2, #100	@ 0x64
 8001244:	f004 f98f 	bl	8005566 <ATC_SendReceive>
 8001248:	0003      	movs	r3, r0
 800124a:	193a      	adds	r2, r7, r4
 800124c:	6013      	str	r3, [r2, #0]
        printf("DEBUG: AT+ID=DevEui format returned %d\n", resp);
 800124e:	193b      	adds	r3, r7, r4
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <set_dev_eui+0x1c4>)
 8001254:	0011      	movs	r1, r2
 8001256:	0018      	movs	r0, r3
 8001258:	f004 fc7e 	bl	8005b58 <iprintf>
    }
    
    if (resp < 0) {
 800125c:	23a6      	movs	r3, #166	@ 0xa6
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	da05      	bge.n	8001274 <set_dev_eui+0x178>
        printf("ERROR: All DevEUI command formats failed!\n");
 8001268:	4b16      	ldr	r3, [pc, #88]	@ (80012c4 <set_dev_eui+0x1c8>)
 800126a:	0018      	movs	r0, r3
 800126c:	f004 fce4 	bl	8005c38 <puts>
        return LORAWAN_ERR_DEV_EUI;
 8001270:	2301      	movs	r3, #1
 8001272:	e004      	b.n	800127e <set_dev_eui+0x182>
    }
    
    printf("DEBUG: DevEUI set successfully with one of the formats\n");
 8001274:	4b14      	ldr	r3, [pc, #80]	@ (80012c8 <set_dev_eui+0x1cc>)
 8001276:	0018      	movs	r0, r3
 8001278:	f004 fcde 	bl	8005c38 <puts>
    return LORAWAN_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	0018      	movs	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	b054      	add	sp, #336	@ 0x150
 8001284:	bdb0      	pop	{r4, r5, r7, pc}
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	08007094 	.word	0x08007094
 800128c:	080070bc 	.word	0x080070bc
 8001290:	080070dc 	.word	0x080070dc
 8001294:	080070f0 	.word	0x080070f0
 8001298:	08006eac 	.word	0x08006eac
 800129c:	0800710c 	.word	0x0800710c
 80012a0:	08007130 	.word	0x08007130
 80012a4:	08007154 	.word	0x08007154
 80012a8:	08007164 	.word	0x08007164
 80012ac:	0800718c 	.word	0x0800718c
 80012b0:	080071b0 	.word	0x080071b0
 80012b4:	080071c0 	.word	0x080071c0
 80012b8:	080071e8 	.word	0x080071e8
 80012bc:	08007210 	.word	0x08007210
 80012c0:	08007224 	.word	0x08007224
 80012c4:	0800724c 	.word	0x0800724c
 80012c8:	08007278 	.word	0x08007278

080012cc <set_app_eui>:
 * @brief Sets the Application EUI (AppEUI/JoinEUI).
 * @param lora Pointer to the ATC handle for communication.
 * @param app_eui Application EUI (16 hex characters).
 * @return LORAWAN_OK on success, LORAWAN_ERR_APP_EUI on failure.
 */
static LoRaWAN_Error_t set_app_eui(ATC_HandleTypeDef *lora, const char *app_eui) {
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b099      	sub	sp, #100	@ 0x64
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
    printf("DEBUG: set_app_eui called with EUI: %s\n", app_eui);
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001414 <set_app_eui+0x148>)
 80012da:	0011      	movs	r1, r2
 80012dc:	0018      	movs	r0, r3
 80012de:	f004 fc3b 	bl	8005b58 <iprintf>
    char command[64];
    int resp = -1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	425b      	negs	r3, r3
 80012e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    
    // Try multiple command formats for AppEUI
    
    // Format 1: ATS 502 (your original format)
    printf("DEBUG: Trying ATS 502 format...\n");
 80012e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001418 <set_app_eui+0x14c>)
 80012ea:	0018      	movs	r0, r3
 80012ec:	f004 fca4 	bl	8005c38 <puts>
    snprintf(command, sizeof(command), "AT%%S 502=\"%s\"\r\n", app_eui);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	4a4a      	ldr	r2, [pc, #296]	@ (800141c <set_app_eui+0x150>)
 80012f4:	240c      	movs	r4, #12
 80012f6:	1938      	adds	r0, r7, r4
 80012f8:	2140      	movs	r1, #64	@ 0x40
 80012fa:	f004 fca7 	bl	8005c4c <sniprintf>
    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80012fe:	1939      	adds	r1, r7, r4
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	4b47      	ldr	r3, [pc, #284]	@ (8001420 <set_app_eui+0x154>)
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	2301      	movs	r3, #1
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	23c8      	movs	r3, #200	@ 0xc8
 800130c:	9300      	str	r3, [sp, #0]
 800130e:	2300      	movs	r3, #0
 8001310:	2264      	movs	r2, #100	@ 0x64
 8001312:	f004 f928 	bl	8005566 <ATC_SendReceive>
 8001316:	0003      	movs	r3, r0
 8001318:	64fb      	str	r3, [r7, #76]	@ 0x4c
    printf("DEBUG: ATS 502 format returned %d\n", resp);
 800131a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800131c:	4b41      	ldr	r3, [pc, #260]	@ (8001424 <set_app_eui+0x158>)
 800131e:	0011      	movs	r1, r2
 8001320:	0018      	movs	r0, r3
 8001322:	f004 fc19 	bl	8005b58 <iprintf>
    
    if (resp < 0) {
 8001326:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001328:	2b00      	cmp	r3, #0
 800132a:	da1d      	bge.n	8001368 <set_app_eui+0x9c>
        // Format 2: AT+APPEUI (common format)
        printf("DEBUG: Trying AT+APPEUI format...\n");
 800132c:	4b3e      	ldr	r3, [pc, #248]	@ (8001428 <set_app_eui+0x15c>)
 800132e:	0018      	movs	r0, r3
 8001330:	f004 fc82 	bl	8005c38 <puts>
        snprintf(command, sizeof(command), "AT+APPEUI=%s\r\n", app_eui);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	4a3d      	ldr	r2, [pc, #244]	@ (800142c <set_app_eui+0x160>)
 8001338:	1938      	adds	r0, r7, r4
 800133a:	2140      	movs	r1, #64	@ 0x40
 800133c:	f004 fc86 	bl	8005c4c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001340:	1939      	adds	r1, r7, r4
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	4b36      	ldr	r3, [pc, #216]	@ (8001420 <set_app_eui+0x154>)
 8001346:	9302      	str	r3, [sp, #8]
 8001348:	2301      	movs	r3, #1
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	23c8      	movs	r3, #200	@ 0xc8
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	2264      	movs	r2, #100	@ 0x64
 8001354:	f004 f907 	bl	8005566 <ATC_SendReceive>
 8001358:	0003      	movs	r3, r0
 800135a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        printf("DEBUG: AT+APPEUI format returned %d\n", resp);
 800135c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800135e:	4b34      	ldr	r3, [pc, #208]	@ (8001430 <set_app_eui+0x164>)
 8001360:	0011      	movs	r1, r2
 8001362:	0018      	movs	r0, r3
 8001364:	f004 fbf8 	bl	8005b58 <iprintf>
    }
    
    if (resp < 0) {
 8001368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800136a:	2b00      	cmp	r3, #0
 800136c:	da1e      	bge.n	80013ac <set_app_eui+0xe0>
        // Format 3: AT+APP_EUI (alternative format)
        printf("DEBUG: Trying AT+APP_EUI format...\n");
 800136e:	4b31      	ldr	r3, [pc, #196]	@ (8001434 <set_app_eui+0x168>)
 8001370:	0018      	movs	r0, r3
 8001372:	f004 fc61 	bl	8005c38 <puts>
        snprintf(command, sizeof(command), "AT+APP_EUI=%s\r\n", app_eui);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	4a2f      	ldr	r2, [pc, #188]	@ (8001438 <set_app_eui+0x16c>)
 800137a:	240c      	movs	r4, #12
 800137c:	1938      	adds	r0, r7, r4
 800137e:	2140      	movs	r1, #64	@ 0x40
 8001380:	f004 fc64 	bl	8005c4c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001384:	1939      	adds	r1, r7, r4
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <set_app_eui+0x154>)
 800138a:	9302      	str	r3, [sp, #8]
 800138c:	2301      	movs	r3, #1
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	23c8      	movs	r3, #200	@ 0xc8
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2300      	movs	r3, #0
 8001396:	2264      	movs	r2, #100	@ 0x64
 8001398:	f004 f8e5 	bl	8005566 <ATC_SendReceive>
 800139c:	0003      	movs	r3, r0
 800139e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        printf("DEBUG: AT+APP_EUI format returned %d\n", resp);
 80013a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80013a2:	4b26      	ldr	r3, [pc, #152]	@ (800143c <set_app_eui+0x170>)
 80013a4:	0011      	movs	r1, r2
 80013a6:	0018      	movs	r0, r3
 80013a8:	f004 fbd6 	bl	8005b58 <iprintf>
    }
    
    if (resp < 0) {
 80013ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	da1e      	bge.n	80013f0 <set_app_eui+0x124>
        // Format 4: AT+ID=AppEui (RAK style)
        printf("DEBUG: Trying AT+ID=AppEui format...\n");
 80013b2:	4b23      	ldr	r3, [pc, #140]	@ (8001440 <set_app_eui+0x174>)
 80013b4:	0018      	movs	r0, r3
 80013b6:	f004 fc3f 	bl	8005c38 <puts>
        snprintf(command, sizeof(command), "AT+ID=AppEui,\"%s\"\r\n", app_eui);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	4a21      	ldr	r2, [pc, #132]	@ (8001444 <set_app_eui+0x178>)
 80013be:	240c      	movs	r4, #12
 80013c0:	1938      	adds	r0, r7, r4
 80013c2:	2140      	movs	r1, #64	@ 0x40
 80013c4:	f004 fc42 	bl	8005c4c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80013c8:	1939      	adds	r1, r7, r4
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	4b14      	ldr	r3, [pc, #80]	@ (8001420 <set_app_eui+0x154>)
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	23c8      	movs	r3, #200	@ 0xc8
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2300      	movs	r3, #0
 80013da:	2264      	movs	r2, #100	@ 0x64
 80013dc:	f004 f8c3 	bl	8005566 <ATC_SendReceive>
 80013e0:	0003      	movs	r3, r0
 80013e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        printf("DEBUG: AT+ID=AppEui format returned %d\n", resp);
 80013e4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80013e6:	4b18      	ldr	r3, [pc, #96]	@ (8001448 <set_app_eui+0x17c>)
 80013e8:	0011      	movs	r1, r2
 80013ea:	0018      	movs	r0, r3
 80013ec:	f004 fbb4 	bl	8005b58 <iprintf>
    }
    
    if (resp < 0) {
 80013f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	da05      	bge.n	8001402 <set_app_eui+0x136>
        printf("ERROR: All AppEUI command formats failed!\n");
 80013f6:	4b15      	ldr	r3, [pc, #84]	@ (800144c <set_app_eui+0x180>)
 80013f8:	0018      	movs	r0, r3
 80013fa:	f004 fc1d 	bl	8005c38 <puts>
        return LORAWAN_ERR_APP_EUI;
 80013fe:	2302      	movs	r3, #2
 8001400:	e004      	b.n	800140c <set_app_eui+0x140>
    }
    
    printf("DEBUG: AppEUI set successfully with one of the formats\n");
 8001402:	4b13      	ldr	r3, [pc, #76]	@ (8001450 <set_app_eui+0x184>)
 8001404:	0018      	movs	r0, r3
 8001406:	f004 fc17 	bl	8005c38 <puts>
    return LORAWAN_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b015      	add	sp, #84	@ 0x54
 8001412:	bd90      	pop	{r4, r7, pc}
 8001414:	080072b0 	.word	0x080072b0
 8001418:	080072d8 	.word	0x080072d8
 800141c:	080072f8 	.word	0x080072f8
 8001420:	08006eac 	.word	0x08006eac
 8001424:	0800730c 	.word	0x0800730c
 8001428:	08007330 	.word	0x08007330
 800142c:	08007354 	.word	0x08007354
 8001430:	08007364 	.word	0x08007364
 8001434:	0800738c 	.word	0x0800738c
 8001438:	080073b0 	.word	0x080073b0
 800143c:	080073c0 	.word	0x080073c0
 8001440:	080073e8 	.word	0x080073e8
 8001444:	08007410 	.word	0x08007410
 8001448:	08007424 	.word	0x08007424
 800144c:	0800744c 	.word	0x0800744c
 8001450:	08007478 	.word	0x08007478

08001454 <set_app_key>:
 * @brief Sets the Application Key (AppKey).
 * @param lora Pointer to the ATC handle for communication.
 * @param app_key Application key (32 hex characters).
 * @return LORAWAN_OK on success, LORAWAN_ERR_APP_KEY on failure.
 */
static LoRaWAN_Error_t set_app_key(ATC_HandleTypeDef *lora, const char *app_key) {
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b0a1      	sub	sp, #132	@ 0x84
 8001458:	af04      	add	r7, sp, #16
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
    printf("DEBUG: set_app_key called with key: %s\n", app_key);
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	4b54      	ldr	r3, [pc, #336]	@ (80015b4 <set_app_key+0x160>)
 8001462:	0011      	movs	r1, r2
 8001464:	0018      	movs	r0, r3
 8001466:	f004 fb77 	bl	8005b58 <iprintf>
    char command[96];
    int resp = -1;
 800146a:	2301      	movs	r3, #1
 800146c:	425b      	negs	r3, r3
 800146e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    
    // Try multiple command formats for AppKey
    
    // Format 1: ATS 500 (your original format)
    printf("DEBUG: Trying AT%%S 500 format...\n");
 8001470:	4b51      	ldr	r3, [pc, #324]	@ (80015b8 <set_app_key+0x164>)
 8001472:	0018      	movs	r0, r3
 8001474:	f004 fb70 	bl	8005b58 <iprintf>
    snprintf(command, sizeof(command), "AT%%S 500=\"%s\"\r\n", app_key);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4a50      	ldr	r2, [pc, #320]	@ (80015bc <set_app_key+0x168>)
 800147c:	240c      	movs	r4, #12
 800147e:	1938      	adds	r0, r7, r4
 8001480:	2160      	movs	r1, #96	@ 0x60
 8001482:	f004 fbe3 	bl	8005c4c <sniprintf>
    printf("DEBUG: Command string: %s", command);
 8001486:	193a      	adds	r2, r7, r4
 8001488:	4b4d      	ldr	r3, [pc, #308]	@ (80015c0 <set_app_key+0x16c>)
 800148a:	0011      	movs	r1, r2
 800148c:	0018      	movs	r0, r3
 800148e:	f004 fb63 	bl	8005b58 <iprintf>
    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001492:	1939      	adds	r1, r7, r4
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	4b4b      	ldr	r3, [pc, #300]	@ (80015c4 <set_app_key+0x170>)
 8001498:	9302      	str	r3, [sp, #8]
 800149a:	2301      	movs	r3, #1
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	23c8      	movs	r3, #200	@ 0xc8
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	2264      	movs	r2, #100	@ 0x64
 80014a6:	f004 f85e 	bl	8005566 <ATC_SendReceive>
 80014aa:	0003      	movs	r3, r0
 80014ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    printf("DEBUG: AT%%S 500 format returned %d\n", resp);
 80014ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80014b0:	4b45      	ldr	r3, [pc, #276]	@ (80015c8 <set_app_key+0x174>)
 80014b2:	0011      	movs	r1, r2
 80014b4:	0018      	movs	r0, r3
 80014b6:	f004 fb4f 	bl	8005b58 <iprintf>
    
    if (resp < 0) {
 80014ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014bc:	2b00      	cmp	r3, #0
 80014be:	da23      	bge.n	8001508 <set_app_key+0xb4>
        // Format 2: AT+APPKEY (common format)
        printf("DEBUG: Trying AT+APPKEY format...\n");
 80014c0:	4b42      	ldr	r3, [pc, #264]	@ (80015cc <set_app_key+0x178>)
 80014c2:	0018      	movs	r0, r3
 80014c4:	f004 fbb8 	bl	8005c38 <puts>
        snprintf(command, sizeof(command), "AT+APPKEY=%s\r\n", app_key);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	4a41      	ldr	r2, [pc, #260]	@ (80015d0 <set_app_key+0x17c>)
 80014cc:	1938      	adds	r0, r7, r4
 80014ce:	2160      	movs	r1, #96	@ 0x60
 80014d0:	f004 fbbc 	bl	8005c4c <sniprintf>
        printf("DEBUG: Command string: %s", command);
 80014d4:	193a      	adds	r2, r7, r4
 80014d6:	4b3a      	ldr	r3, [pc, #232]	@ (80015c0 <set_app_key+0x16c>)
 80014d8:	0011      	movs	r1, r2
 80014da:	0018      	movs	r0, r3
 80014dc:	f004 fb3c 	bl	8005b58 <iprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80014e0:	1939      	adds	r1, r7, r4
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	4b37      	ldr	r3, [pc, #220]	@ (80015c4 <set_app_key+0x170>)
 80014e6:	9302      	str	r3, [sp, #8]
 80014e8:	2301      	movs	r3, #1
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	23c8      	movs	r3, #200	@ 0xc8
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2300      	movs	r3, #0
 80014f2:	2264      	movs	r2, #100	@ 0x64
 80014f4:	f004 f837 	bl	8005566 <ATC_SendReceive>
 80014f8:	0003      	movs	r3, r0
 80014fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
        printf("DEBUG: AT+APPKEY format returned %d\n", resp);
 80014fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80014fe:	4b35      	ldr	r3, [pc, #212]	@ (80015d4 <set_app_key+0x180>)
 8001500:	0011      	movs	r1, r2
 8001502:	0018      	movs	r0, r3
 8001504:	f004 fb28 	bl	8005b58 <iprintf>
    }
    
    if (resp < 0) {
 8001508:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800150a:	2b00      	cmp	r3, #0
 800150c:	da1e      	bge.n	800154c <set_app_key+0xf8>
        // Format 3: AT+APP_KEY (alternative format)
        printf("DEBUG: Trying AT+APP_KEY format...\n");
 800150e:	4b32      	ldr	r3, [pc, #200]	@ (80015d8 <set_app_key+0x184>)
 8001510:	0018      	movs	r0, r3
 8001512:	f004 fb91 	bl	8005c38 <puts>
        snprintf(command, sizeof(command), "AT+APP_KEY=%s\r\n", app_key);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	4a30      	ldr	r2, [pc, #192]	@ (80015dc <set_app_key+0x188>)
 800151a:	240c      	movs	r4, #12
 800151c:	1938      	adds	r0, r7, r4
 800151e:	2160      	movs	r1, #96	@ 0x60
 8001520:	f004 fb94 	bl	8005c4c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001524:	1939      	adds	r1, r7, r4
 8001526:	6878      	ldr	r0, [r7, #4]
 8001528:	4b26      	ldr	r3, [pc, #152]	@ (80015c4 <set_app_key+0x170>)
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	2301      	movs	r3, #1
 800152e:	9301      	str	r3, [sp, #4]
 8001530:	23c8      	movs	r3, #200	@ 0xc8
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2300      	movs	r3, #0
 8001536:	2264      	movs	r2, #100	@ 0x64
 8001538:	f004 f815 	bl	8005566 <ATC_SendReceive>
 800153c:	0003      	movs	r3, r0
 800153e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        printf("DEBUG: AT+APP_KEY format returned %d\n", resp);
 8001540:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001542:	4b27      	ldr	r3, [pc, #156]	@ (80015e0 <set_app_key+0x18c>)
 8001544:	0011      	movs	r1, r2
 8001546:	0018      	movs	r0, r3
 8001548:	f004 fb06 	bl	8005b58 <iprintf>
    }
    
    if (resp < 0) {
 800154c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800154e:	2b00      	cmp	r3, #0
 8001550:	da1e      	bge.n	8001590 <set_app_key+0x13c>
        // Format 4: AT+KEY=APPKEY (RAK style)
        printf("DEBUG: Trying AT+KEY=APPKEY format...\n");
 8001552:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <set_app_key+0x190>)
 8001554:	0018      	movs	r0, r3
 8001556:	f004 fb6f 	bl	8005c38 <puts>
        snprintf(command, sizeof(command), "AT+KEY=APPKEY,\"%s\"\r\n", app_key);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	4a22      	ldr	r2, [pc, #136]	@ (80015e8 <set_app_key+0x194>)
 800155e:	240c      	movs	r4, #12
 8001560:	1938      	adds	r0, r7, r4
 8001562:	2160      	movs	r1, #96	@ 0x60
 8001564:	f004 fb72 	bl	8005c4c <sniprintf>
        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001568:	1939      	adds	r1, r7, r4
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <set_app_key+0x170>)
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	2301      	movs	r3, #1
 8001572:	9301      	str	r3, [sp, #4]
 8001574:	23c8      	movs	r3, #200	@ 0xc8
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2300      	movs	r3, #0
 800157a:	2264      	movs	r2, #100	@ 0x64
 800157c:	f003 fff3 	bl	8005566 <ATC_SendReceive>
 8001580:	0003      	movs	r3, r0
 8001582:	66fb      	str	r3, [r7, #108]	@ 0x6c
        printf("DEBUG: AT+KEY=APPKEY format returned %d\n", resp);
 8001584:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001586:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <set_app_key+0x198>)
 8001588:	0011      	movs	r1, r2
 800158a:	0018      	movs	r0, r3
 800158c:	f004 fae4 	bl	8005b58 <iprintf>
    }
    
    if (resp < 0) {
 8001590:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001592:	2b00      	cmp	r3, #0
 8001594:	da05      	bge.n	80015a2 <set_app_key+0x14e>
        printf("ERROR: All AppKey command formats failed!\n");
 8001596:	4b16      	ldr	r3, [pc, #88]	@ (80015f0 <set_app_key+0x19c>)
 8001598:	0018      	movs	r0, r3
 800159a:	f004 fb4d 	bl	8005c38 <puts>
        return LORAWAN_ERR_APP_KEY;
 800159e:	2303      	movs	r3, #3
 80015a0:	e004      	b.n	80015ac <set_app_key+0x158>
    }
    
    printf("DEBUG: AppKey set successfully with one of the formats\n");
 80015a2:	4b14      	ldr	r3, [pc, #80]	@ (80015f4 <set_app_key+0x1a0>)
 80015a4:	0018      	movs	r0, r3
 80015a6:	f004 fb47 	bl	8005c38 <puts>
    return LORAWAN_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b01d      	add	sp, #116	@ 0x74
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	080074b0 	.word	0x080074b0
 80015b8:	080074d8 	.word	0x080074d8
 80015bc:	080074fc 	.word	0x080074fc
 80015c0:	080070f0 	.word	0x080070f0
 80015c4:	08006eac 	.word	0x08006eac
 80015c8:	08007510 	.word	0x08007510
 80015cc:	08007538 	.word	0x08007538
 80015d0:	0800755c 	.word	0x0800755c
 80015d4:	0800756c 	.word	0x0800756c
 80015d8:	08007594 	.word	0x08007594
 80015dc:	080075b8 	.word	0x080075b8
 80015e0:	080075c8 	.word	0x080075c8
 80015e4:	080075f0 	.word	0x080075f0
 80015e8:	08007618 	.word	0x08007618
 80015ec:	08007630 	.word	0x08007630
 80015f0:	0800765c 	.word	0x0800765c
 80015f4:	08007688 	.word	0x08007688

080015f8 <configure_region_and_channel>:
/**
 * @brief Configures the region and sub-band for Japan (AS923-1) with TTN.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t configure_region_and_channel(ATC_HandleTypeDef *lora) {
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b091      	sub	sp, #68	@ 0x44
 80015fc:	af04      	add	r7, sp, #16
 80015fe:	6078      	str	r0, [r7, #4]
    char command[32];
    int resp;

    // Set region to AS923-1 (Japan)
    snprintf(command, sizeof(command), "AT%%S 611=%d\r\n", JAPAN_REGION);
 8001600:	4a0f      	ldr	r2, [pc, #60]	@ (8001640 <configure_region_and_channel+0x48>)
 8001602:	240c      	movs	r4, #12
 8001604:	1938      	adds	r0, r7, r4
 8001606:	2309      	movs	r3, #9
 8001608:	2120      	movs	r1, #32
 800160a:	f004 fb1f 	bl	8005c4c <sniprintf>
    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800160e:	1939      	adds	r1, r7, r4
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <configure_region_and_channel+0x4c>)
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	2301      	movs	r3, #1
 8001618:	9301      	str	r3, [sp, #4]
 800161a:	23c8      	movs	r3, #200	@ 0xc8
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2300      	movs	r3, #0
 8001620:	2264      	movs	r2, #100	@ 0x64
 8001622:	f003 ffa0 	bl	8005566 <ATC_SendReceive>
 8001626:	0003      	movs	r3, r0
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 800162a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162c:	2b00      	cmp	r3, #0
 800162e:	da01      	bge.n	8001634 <configure_region_and_channel+0x3c>
 8001630:	2305      	movs	r3, #5
 8001632:	e000      	b.n	8001636 <configure_region_and_channel+0x3e>
    // Set sub-band channel for TTN
//    snprintf(command, sizeof(command), "ATS 606=%d\r\n", TTN_SUBBAND_CHANNEL);
//    resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
//    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;

    return LORAWAN_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	0018      	movs	r0, r3
 8001638:	46bd      	mov	sp, r7
 800163a:	b00d      	add	sp, #52	@ 0x34
 800163c:	bd90      	pop	{r4, r7, pc}
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	080076c0 	.word	0x080076c0
 8001644:	08006eac 	.word	0x08006eac

08001648 <check_and_set_frequency>:
/**
 * @brief Checks and sets the frequency to ensure compliance with AS923-1 (923.2–923.4 MHz).
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND or LORAWAN_ERR_FREQ_CHECK on failure.
 */
static LoRaWAN_Error_t check_and_set_frequency(ATC_HandleTypeDef *lora) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b0c8      	sub	sp, #288	@ 0x120
 800164c:	af04      	add	r7, sp, #16
 800164e:	6078      	str	r0, [r7, #4]
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 8001650:	230c      	movs	r3, #12
 8001652:	18fb      	adds	r3, r7, r3
 8001654:	60bb      	str	r3, [r7, #8]
    int resp = ATC_SendReceive(lora, "AT%%S 605?\r\n", 100, &response_ptr, 200, 1, "OK");
 8001656:	2308      	movs	r3, #8
 8001658:	18fa      	adds	r2, r7, r3
 800165a:	490e      	ldr	r1, [pc, #56]	@ (8001694 <check_and_set_frequency+0x4c>)
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <check_and_set_frequency+0x50>)
 8001660:	9302      	str	r3, [sp, #8]
 8001662:	2301      	movs	r3, #1
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	23c8      	movs	r3, #200	@ 0xc8
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	0013      	movs	r3, r2
 800166c:	2264      	movs	r2, #100	@ 0x64
 800166e:	f003 ff7a 	bl	8005566 <ATC_SendReceive>
 8001672:	0003      	movs	r3, r0
 8001674:	2286      	movs	r2, #134	@ 0x86
 8001676:	0052      	lsls	r2, r2, #1
 8001678:	18b9      	adds	r1, r7, r2
 800167a:	600b      	str	r3, [r1, #0]
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 800167c:	18bb      	adds	r3, r7, r2
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	da01      	bge.n	8001688 <check_and_set_frequency+0x40>
 8001684:	2305      	movs	r3, #5
 8001686:	e000      	b.n	800168a <check_and_set_frequency+0x42>
//        char command[32];
//        snprintf(command, sizeof(command), "ATS 605=%u\r\n", DEFAULT_FREQ);
//        resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
//        if (resp < 0) return LORAWAN_ERR_FREQ_CHECK;
//    }
    return LORAWAN_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b044      	add	sp, #272	@ 0x110
 8001690:	bd80      	pop	{r7, pc}
 8001692:	46c0      	nop			@ (mov r8, r8)
 8001694:	080076d0 	.word	0x080076d0
 8001698:	08006eac 	.word	0x08006eac

0800169c <configure_lorawan_params>:
/**
 * @brief Configures LoRaWAN parameters (ADR, OTAA, Class, Data Rate, TX Power).
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, or an error code from a failed sub-function.
 */
static LoRaWAN_Error_t configure_lorawan_params(ATC_HandleTypeDef *lora) {
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
    LoRaWAN_Error_t err;

    // Disable ADR
    if ((err = set_adr(lora, false)) != LORAWAN_OK) return err;
 80016a4:	250f      	movs	r5, #15
 80016a6:	197c      	adds	r4, r7, r5
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2100      	movs	r1, #0
 80016ac:	0018      	movs	r0, r3
 80016ae:	f000 f84d 	bl	800174c <set_adr>
 80016b2:	0003      	movs	r3, r0
 80016b4:	7023      	strb	r3, [r4, #0]
 80016b6:	197b      	adds	r3, r7, r5
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d002      	beq.n	80016c4 <configure_lorawan_params+0x28>
 80016be:	197b      	adds	r3, r7, r5
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	e03f      	b.n	8001744 <configure_lorawan_params+0xa8>

    // Enable OTAA
    if ((err = set_otaa(lora, true)) != LORAWAN_OK) return err;
 80016c4:	250f      	movs	r5, #15
 80016c6:	197c      	adds	r4, r7, r5
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2101      	movs	r1, #1
 80016cc:	0018      	movs	r0, r3
 80016ce:	f000 f869 	bl	80017a4 <set_otaa>
 80016d2:	0003      	movs	r3, r0
 80016d4:	7023      	strb	r3, [r4, #0]
 80016d6:	197b      	adds	r3, r7, r5
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <configure_lorawan_params+0x48>
 80016de:	197b      	adds	r3, r7, r5
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	e02f      	b.n	8001744 <configure_lorawan_params+0xa8>

    // Set Class A
    if ((err = set_class_a(lora)) != LORAWAN_OK) return err;
 80016e4:	250f      	movs	r5, #15
 80016e6:	197c      	adds	r4, r7, r5
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	0018      	movs	r0, r3
 80016ec:	f000 f886 	bl	80017fc <set_class_a>
 80016f0:	0003      	movs	r3, r0
 80016f2:	7023      	strb	r3, [r4, #0]
 80016f4:	197b      	adds	r3, r7, r5
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d002      	beq.n	8001702 <configure_lorawan_params+0x66>
 80016fc:	197b      	adds	r3, r7, r5
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	e020      	b.n	8001744 <configure_lorawan_params+0xa8>

    // Set static data rate (DR0)
    if ((err = set_data_rate(lora, DATA_RATE)) != LORAWAN_OK) return err;
 8001702:	250f      	movs	r5, #15
 8001704:	197c      	adds	r4, r7, r5
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2100      	movs	r1, #0
 800170a:	0018      	movs	r0, r3
 800170c:	f000 f896 	bl	800183c <set_data_rate>
 8001710:	0003      	movs	r3, r0
 8001712:	7023      	strb	r3, [r4, #0]
 8001714:	197b      	adds	r3, r7, r5
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d002      	beq.n	8001722 <configure_lorawan_params+0x86>
 800171c:	197b      	adds	r3, r7, r5
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	e010      	b.n	8001744 <configure_lorawan_params+0xa8>

    // Set TX power (11 dBm for Japan compliance)
    if ((err = set_tx_power(lora, TX_POWER)) != LORAWAN_OK) return err;
 8001722:	250f      	movs	r5, #15
 8001724:	197c      	adds	r4, r7, r5
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	210b      	movs	r1, #11
 800172a:	0018      	movs	r0, r3
 800172c:	f000 f8ae 	bl	800188c <set_tx_power>
 8001730:	0003      	movs	r3, r0
 8001732:	7023      	strb	r3, [r4, #0]
 8001734:	197b      	adds	r3, r7, r5
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d002      	beq.n	8001742 <configure_lorawan_params+0xa6>
 800173c:	197b      	adds	r3, r7, r5
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	e000      	b.n	8001744 <configure_lorawan_params+0xa8>

    return LORAWAN_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	b004      	add	sp, #16
 800174a:	bdb0      	pop	{r4, r5, r7, pc}

0800174c <set_adr>:
 * @brief Disables or enables Adaptive Data Rate (ADR).
 * @param lora Pointer to the ATC handle for communication.
 * @param enable true to enable ADR, false to disable.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_adr(ATC_HandleTypeDef *lora, bool enable) {
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b091      	sub	sp, #68	@ 0x44
 8001750:	af04      	add	r7, sp, #16
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	000a      	movs	r2, r1
 8001756:	1cfb      	adds	r3, r7, #3
 8001758:	701a      	strb	r2, [r3, #0]
    char command[32];
    snprintf(command, sizeof(command), "AT%%S 600=%d\r\n", enable ? 1 : 0);
 800175a:	1cfb      	adds	r3, r7, #3
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	4a0f      	ldr	r2, [pc, #60]	@ (800179c <set_adr+0x50>)
 8001760:	240c      	movs	r4, #12
 8001762:	1938      	adds	r0, r7, r4
 8001764:	2120      	movs	r1, #32
 8001766:	f004 fa71 	bl	8005c4c <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 800176a:	1939      	adds	r1, r7, r4
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	4b0c      	ldr	r3, [pc, #48]	@ (80017a0 <set_adr+0x54>)
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	2301      	movs	r3, #1
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	23c8      	movs	r3, #200	@ 0xc8
 8001778:	9300      	str	r3, [sp, #0]
 800177a:	2300      	movs	r3, #0
 800177c:	2264      	movs	r2, #100	@ 0x64
 800177e:	f003 fef2 	bl	8005566 <ATC_SendReceive>
 8001782:	0003      	movs	r3, r0
 8001784:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 8001786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001788:	2b00      	cmp	r3, #0
 800178a:	da01      	bge.n	8001790 <set_adr+0x44>
 800178c:	2305      	movs	r3, #5
 800178e:	e000      	b.n	8001792 <set_adr+0x46>
 8001790:	2300      	movs	r3, #0
}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	b00d      	add	sp, #52	@ 0x34
 8001798:	bd90      	pop	{r4, r7, pc}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	080076e0 	.word	0x080076e0
 80017a0:	08006eac 	.word	0x08006eac

080017a4 <set_otaa>:
 * @brief Enables or disables Over-The-Air Activation (OTAA).
 * @param lora Pointer to the ATC handle for communication.
 * @param enable true to enable OTAA, false to disable.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_otaa(ATC_HandleTypeDef *lora, bool enable) {
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b091      	sub	sp, #68	@ 0x44
 80017a8:	af04      	add	r7, sp, #16
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	000a      	movs	r2, r1
 80017ae:	1cfb      	adds	r3, r7, #3
 80017b0:	701a      	strb	r2, [r3, #0]
    char command[32];
    snprintf(command, sizeof(command), "AT%%S 602=%d\r\n", enable ? 1 : 0);
 80017b2:	1cfb      	adds	r3, r7, #3
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	4a0f      	ldr	r2, [pc, #60]	@ (80017f4 <set_otaa+0x50>)
 80017b8:	240c      	movs	r4, #12
 80017ba:	1938      	adds	r0, r7, r4
 80017bc:	2120      	movs	r1, #32
 80017be:	f004 fa45 	bl	8005c4c <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80017c2:	1939      	adds	r1, r7, r4
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	4b0c      	ldr	r3, [pc, #48]	@ (80017f8 <set_otaa+0x54>)
 80017c8:	9302      	str	r3, [sp, #8]
 80017ca:	2301      	movs	r3, #1
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	23c8      	movs	r3, #200	@ 0xc8
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	2264      	movs	r2, #100	@ 0x64
 80017d6:	f003 fec6 	bl	8005566 <ATC_SendReceive>
 80017da:	0003      	movs	r3, r0
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 80017de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	da01      	bge.n	80017e8 <set_otaa+0x44>
 80017e4:	2305      	movs	r3, #5
 80017e6:	e000      	b.n	80017ea <set_otaa+0x46>
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	0018      	movs	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	b00d      	add	sp, #52	@ 0x34
 80017f0:	bd90      	pop	{r4, r7, pc}
 80017f2:	46c0      	nop			@ (mov r8, r8)
 80017f4:	080076f0 	.word	0x080076f0
 80017f8:	08006eac 	.word	0x08006eac

080017fc <set_class_a>:
/**
 * @brief Sets the LoRaWAN device to Class A.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_class_a(ATC_HandleTypeDef *lora) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af04      	add	r7, sp, #16
 8001802:	6078      	str	r0, [r7, #4]
    int resp = ATC_SendReceive(lora, "AT%%S 603=0\r\n", 100, NULL, 200, 1, "OK");
 8001804:	490b      	ldr	r1, [pc, #44]	@ (8001834 <set_class_a+0x38>)
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <set_class_a+0x3c>)
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	2301      	movs	r3, #1
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	23c8      	movs	r3, #200	@ 0xc8
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2300      	movs	r3, #0
 8001816:	2264      	movs	r2, #100	@ 0x64
 8001818:	f003 fea5 	bl	8005566 <ATC_SendReceive>
 800181c:	0003      	movs	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	da01      	bge.n	800182a <set_class_a+0x2e>
 8001826:	2305      	movs	r3, #5
 8001828:	e000      	b.n	800182c <set_class_a+0x30>
 800182a:	2300      	movs	r3, #0
}
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b004      	add	sp, #16
 8001832:	bd80      	pop	{r7, pc}
 8001834:	08007700 	.word	0x08007700
 8001838:	08006eac 	.word	0x08006eac

0800183c <set_data_rate>:
 * @brief Sets the static data rate for LoRaWAN communication.
 * @param lora Pointer to the ATC handle for communication.
 * @param dr Data rate to set (e.g., 0 for DR0).
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_data_rate(ATC_HandleTypeDef *lora, int dr) {
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b091      	sub	sp, #68	@ 0x44
 8001840:	af04      	add	r7, sp, #16
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
    char command[32];
    snprintf(command, sizeof(command), "AT%%S 713=%d\r\n", dr);
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	4a0e      	ldr	r2, [pc, #56]	@ (8001884 <set_data_rate+0x48>)
 800184a:	240c      	movs	r4, #12
 800184c:	1938      	adds	r0, r7, r4
 800184e:	2120      	movs	r1, #32
 8001850:	f004 f9fc 	bl	8005c4c <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 8001854:	1939      	adds	r1, r7, r4
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <set_data_rate+0x4c>)
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	2301      	movs	r3, #1
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	23c8      	movs	r3, #200	@ 0xc8
 8001862:	9300      	str	r3, [sp, #0]
 8001864:	2300      	movs	r3, #0
 8001866:	2264      	movs	r2, #100	@ 0x64
 8001868:	f003 fe7d 	bl	8005566 <ATC_SendReceive>
 800186c:	0003      	movs	r3, r0
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 8001870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001872:	2b00      	cmp	r3, #0
 8001874:	da01      	bge.n	800187a <set_data_rate+0x3e>
 8001876:	2305      	movs	r3, #5
 8001878:	e000      	b.n	800187c <set_data_rate+0x40>
 800187a:	2300      	movs	r3, #0
}
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b00d      	add	sp, #52	@ 0x34
 8001882:	bd90      	pop	{r4, r7, pc}
 8001884:	08007710 	.word	0x08007710
 8001888:	08006eac 	.word	0x08006eac

0800188c <set_tx_power>:
 * @brief Sets the TX power for LoRaWAN transmission.
 * @param lora Pointer to the ATC handle for communication.
 * @param power TX power in dBm (e.g., 11 for Japan compliance).
 * @return LORAWAN_OK on success, LORAWAN_ERR_AT_COMMAND on failure.
 */
static LoRaWAN_Error_t set_tx_power(ATC_HandleTypeDef *lora, int power) {
 800188c:	b590      	push	{r4, r7, lr}
 800188e:	b091      	sub	sp, #68	@ 0x44
 8001890:	af04      	add	r7, sp, #16
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
    char command[32];
    snprintf(command, sizeof(command), "AT%%S 714=%d\r\n", power);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	4a0e      	ldr	r2, [pc, #56]	@ (80018d4 <set_tx_power+0x48>)
 800189a:	240c      	movs	r4, #12
 800189c:	1938      	adds	r0, r7, r4
 800189e:	2120      	movs	r1, #32
 80018a0:	f004 f9d4 	bl	8005c4c <sniprintf>
    int resp = ATC_SendReceive(lora, command, 100, NULL, 200, 1, "OK");
 80018a4:	1939      	adds	r1, r7, r4
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	4b0b      	ldr	r3, [pc, #44]	@ (80018d8 <set_tx_power+0x4c>)
 80018aa:	9302      	str	r3, [sp, #8]
 80018ac:	2301      	movs	r3, #1
 80018ae:	9301      	str	r3, [sp, #4]
 80018b0:	23c8      	movs	r3, #200	@ 0xc8
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2300      	movs	r3, #0
 80018b6:	2264      	movs	r2, #100	@ 0x64
 80018b8:	f003 fe55 	bl	8005566 <ATC_SendReceive>
 80018bc:	0003      	movs	r3, r0
 80018be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return (resp < 0) ? LORAWAN_ERR_AT_COMMAND : LORAWAN_OK;
 80018c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da01      	bge.n	80018ca <set_tx_power+0x3e>
 80018c6:	2305      	movs	r3, #5
 80018c8:	e000      	b.n	80018cc <set_tx_power+0x40>
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	0018      	movs	r0, r3
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b00d      	add	sp, #52	@ 0x34
 80018d2:	bd90      	pop	{r4, r7, pc}
 80018d4:	08007720 	.word	0x08007720
 80018d8:	08006eac 	.word	0x08006eac

080018dc <join_network>:
/**
 * @brief Initiates the LoRaWAN network join process using OTAA.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on successful join, LORAWAN_ERR_JOIN or LORAWAN_ERR_AT_COMMAND on failure.
 */
LoRaWAN_Error_t join_network(ATC_HandleTypeDef *lora) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b0c8      	sub	sp, #288	@ 0x120
 80018e0:	af04      	add	r7, sp, #16
 80018e2:	6078      	str	r0, [r7, #4]
    char response[AT_RESPONSE_BUFFER_SIZE];
    char *response_ptr = response;
 80018e4:	230c      	movs	r3, #12
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	60bb      	str	r3, [r7, #8]
    int resp = ATC_SendReceive(lora, "AT+JOIN\r\n", 100, &response_ptr, JOIN_TIMEOUT_MS, 1, "OK");
 80018ea:	2308      	movs	r3, #8
 80018ec:	18fa      	adds	r2, r7, r3
 80018ee:	490e      	ldr	r1, [pc, #56]	@ (8001928 <join_network+0x4c>)
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <join_network+0x50>)
 80018f4:	9302      	str	r3, [sp, #8]
 80018f6:	2301      	movs	r3, #1
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <join_network+0x54>)
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	0013      	movs	r3, r2
 8001900:	2264      	movs	r2, #100	@ 0x64
 8001902:	f003 fe30 	bl	8005566 <ATC_SendReceive>
 8001906:	0003      	movs	r3, r0
 8001908:	2286      	movs	r2, #134	@ 0x86
 800190a:	0052      	lsls	r2, r2, #1
 800190c:	18b9      	adds	r1, r7, r2
 800190e:	600b      	str	r3, [r1, #0]
    if (resp < 0) return LORAWAN_ERR_AT_COMMAND;
 8001910:	18bb      	adds	r3, r7, r2
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	da01      	bge.n	800191c <join_network+0x40>
 8001918:	2305      	movs	r3, #5
 800191a:	e000      	b.n	800191e <join_network+0x42>
    // Check for join success (expecting a response like "+JOIN: Joined" or similar)
//    if (strstr(response, "Joined") == NULL) {
//        return LORAWAN_ERR_JOIN;
//    }

    return LORAWAN_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	0018      	movs	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	b044      	add	sp, #272	@ 0x110
 8001924:	bd80      	pop	{r7, pc}
 8001926:	46c0      	nop			@ (mov r8, r8)
 8001928:	08007730 	.word	0x08007730
 800192c:	08006eac 	.word	0x08006eac
 8001930:	00002710 	.word	0x00002710

08001934 <save_and_reset>:
/**
 * @brief Saves settings to non-volatile memory and performs a warm reset.
 * @param lora Pointer to the ATC handle for communication.
 * @return LORAWAN_OK on success, LORAWAN_ERR_SAVE_RESET on failure.
 */
static LoRaWAN_Error_t save_and_reset(ATC_HandleTypeDef *lora) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af04      	add	r7, sp, #16
 800193a:	6078      	str	r0, [r7, #4]
    int resp;

    // Save settings to non-volatile memory
    resp = ATC_SendReceive(lora, "AT&W\r\n", 100, NULL, 200, 1, "OK");
 800193c:	4915      	ldr	r1, [pc, #84]	@ (8001994 <save_and_reset+0x60>)
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <save_and_reset+0x64>)
 8001942:	9302      	str	r3, [sp, #8]
 8001944:	2301      	movs	r3, #1
 8001946:	9301      	str	r3, [sp, #4]
 8001948:	23c8      	movs	r3, #200	@ 0xc8
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	2300      	movs	r3, #0
 800194e:	2264      	movs	r2, #100	@ 0x64
 8001950:	f003 fe09 	bl	8005566 <ATC_SendReceive>
 8001954:	0003      	movs	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]
    if (resp < 0) return LORAWAN_ERR_SAVE_RESET;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	da01      	bge.n	8001962 <save_and_reset+0x2e>
 800195e:	2306      	movs	r3, #6
 8001960:	e013      	b.n	800198a <save_and_reset+0x56>

    // Perform warm reset
    resp = ATC_SendReceive(lora, "ATZ\r\n", 100, NULL, 200, 1, "OK");
 8001962:	490e      	ldr	r1, [pc, #56]	@ (800199c <save_and_reset+0x68>)
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <save_and_reset+0x64>)
 8001968:	9302      	str	r3, [sp, #8]
 800196a:	2301      	movs	r3, #1
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	23c8      	movs	r3, #200	@ 0xc8
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	2264      	movs	r2, #100	@ 0x64
 8001976:	f003 fdf6 	bl	8005566 <ATC_SendReceive>
 800197a:	0003      	movs	r3, r0
 800197c:	60fb      	str	r3, [r7, #12]
    if (resp < 0) return LORAWAN_ERR_SAVE_RESET;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	da01      	bge.n	8001988 <save_and_reset+0x54>
 8001984:	2306      	movs	r3, #6
 8001986:	e000      	b.n	800198a <save_and_reset+0x56>

    return LORAWAN_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	b004      	add	sp, #16
 8001990:	bd80      	pop	{r7, pc}
 8001992:	46c0      	nop			@ (mov r8, r8)
 8001994:	080077c0 	.word	0x080077c0
 8001998:	08006eac 	.word	0x08006eac
 800199c:	080077c8 	.word	0x080077c8

080019a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80019a0:	480d      	ldr	r0, [pc, #52]	@ (80019d8 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80019a2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019a4:	f7ff f8d4 	bl	8000b50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019a8:	480c      	ldr	r0, [pc, #48]	@ (80019dc <LoopForever+0x6>)
  ldr r1, =_edata
 80019aa:	490d      	ldr	r1, [pc, #52]	@ (80019e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019ac:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <LoopForever+0xe>)
  movs r3, #0
 80019ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b0:	e002      	b.n	80019b8 <LoopCopyDataInit>

080019b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b6:	3304      	adds	r3, #4

080019b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019bc:	d3f9      	bcc.n	80019b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c0:	4c0a      	ldr	r4, [pc, #40]	@ (80019ec <LoopForever+0x16>)
  movs r3, #0
 80019c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c4:	e001      	b.n	80019ca <LoopFillZerobss>

080019c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019c8:	3204      	adds	r2, #4

080019ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019cc:	d3fb      	bcc.n	80019c6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80019ce:	f004 faf7 	bl	8005fc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019d2:	f7fe fec7 	bl	8000764 <main>

080019d6 <LoopForever>:

LoopForever:
    b LoopForever
 80019d6:	e7fe      	b.n	80019d6 <LoopForever>
   ldr   r0, =_estack
 80019d8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80019e4:	080078a8 	.word	0x080078a8
  ldr r2, =_sbss
 80019e8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019ec:	2000038c 	.word	0x2000038c

080019f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_COMP_IRQHandler>
	...

080019f4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019fa:	1dfb      	adds	r3, r7, #7
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001a00:	4b0b      	ldr	r3, [pc, #44]	@ (8001a30 <HAL_Init+0x3c>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <HAL_Init+0x3c>)
 8001a06:	2140      	movs	r1, #64	@ 0x40
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f000 f811 	bl	8001a34 <HAL_InitTick>
 8001a12:	1e03      	subs	r3, r0, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	2201      	movs	r2, #1
 8001a1a:	701a      	strb	r2, [r3, #0]
 8001a1c:	e001      	b.n	8001a22 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a1e:	f7fe ffa9 	bl	8000974 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a22:	1dfb      	adds	r3, r7, #7
 8001a24:	781b      	ldrb	r3, [r3, #0]
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b002      	add	sp, #8
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	40022000 	.word	0x40022000

08001a34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a3c:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <HAL_InitTick+0x5c>)
 8001a3e:	681c      	ldr	r4, [r3, #0]
 8001a40:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <HAL_InitTick+0x60>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	0019      	movs	r1, r3
 8001a46:	23fa      	movs	r3, #250	@ 0xfa
 8001a48:	0098      	lsls	r0, r3, #2
 8001a4a:	f7fe fb6f 	bl	800012c <__udivsi3>
 8001a4e:	0003      	movs	r3, r0
 8001a50:	0019      	movs	r1, r3
 8001a52:	0020      	movs	r0, r4
 8001a54:	f7fe fb6a 	bl	800012c <__udivsi3>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	f000 f92f 	bl	8001cbe <HAL_SYSTICK_Config>
 8001a60:	1e03      	subs	r3, r0, #0
 8001a62:	d001      	beq.n	8001a68 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e00f      	b.n	8001a88 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d80b      	bhi.n	8001a86 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a6e:	6879      	ldr	r1, [r7, #4]
 8001a70:	2301      	movs	r3, #1
 8001a72:	425b      	negs	r3, r3
 8001a74:	2200      	movs	r2, #0
 8001a76:	0018      	movs	r0, r3
 8001a78:	f000 f8fc 	bl	8001c74 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_InitTick+0x64>)
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e000      	b.n	8001a88 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	0018      	movs	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	b003      	add	sp, #12
 8001a8e:	bd90      	pop	{r4, r7, pc}
 8001a90:	20000000 	.word	0x20000000
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000004 	.word	0x20000004

08001a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <HAL_IncTick+0x1c>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	001a      	movs	r2, r3
 8001aa6:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <HAL_IncTick+0x20>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	18d2      	adds	r2, r2, r3
 8001aac:	4b03      	ldr	r3, [pc, #12]	@ (8001abc <HAL_IncTick+0x20>)
 8001aae:	601a      	str	r2, [r3, #0]
}
 8001ab0:	46c0      	nop			@ (mov r8, r8)
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	2000023c 	.word	0x2000023c

08001ac0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	@ (8001ad0 <HAL_GetTick+0x10>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
}
 8001ac8:	0018      	movs	r0, r3
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			@ (mov r8, r8)
 8001ad0:	2000023c 	.word	0x2000023c

08001ad4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001adc:	f7ff fff0 	bl	8001ac0 <HAL_GetTick>
 8001ae0:	0003      	movs	r3, r0
 8001ae2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	3301      	adds	r3, #1
 8001aec:	d005      	beq.n	8001afa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aee:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <HAL_Delay+0x44>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	001a      	movs	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	189b      	adds	r3, r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	f7ff ffe0 	bl	8001ac0 <HAL_GetTick>
 8001b00:	0002      	movs	r2, r0
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d8f7      	bhi.n	8001afc <HAL_Delay+0x28>
  {
  }
}
 8001b0c:	46c0      	nop			@ (mov r8, r8)
 8001b0e:	46c0      	nop			@ (mov r8, r8)
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b004      	add	sp, #16
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	20000008 	.word	0x20000008

08001b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	0002      	movs	r2, r0
 8001b24:	1dfb      	adds	r3, r7, #7
 8001b26:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b28:	1dfb      	adds	r3, r7, #7
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b2e:	d809      	bhi.n	8001b44 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b30:	1dfb      	adds	r3, r7, #7
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	001a      	movs	r2, r3
 8001b36:	231f      	movs	r3, #31
 8001b38:	401a      	ands	r2, r3
 8001b3a:	4b04      	ldr	r3, [pc, #16]	@ (8001b4c <__NVIC_EnableIRQ+0x30>)
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	4091      	lsls	r1, r2
 8001b40:	000a      	movs	r2, r1
 8001b42:	601a      	str	r2, [r3, #0]
  }
}
 8001b44:	46c0      	nop			@ (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b002      	add	sp, #8
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	e000e100 	.word	0xe000e100

08001b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b50:	b590      	push	{r4, r7, lr}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	0002      	movs	r2, r0
 8001b58:	6039      	str	r1, [r7, #0]
 8001b5a:	1dfb      	adds	r3, r7, #7
 8001b5c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001b5e:	1dfb      	adds	r3, r7, #7
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b64:	d828      	bhi.n	8001bb8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001b66:	4a2f      	ldr	r2, [pc, #188]	@ (8001c24 <__NVIC_SetPriority+0xd4>)
 8001b68:	1dfb      	adds	r3, r7, #7
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b25b      	sxtb	r3, r3
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	33c0      	adds	r3, #192	@ 0xc0
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	589b      	ldr	r3, [r3, r2]
 8001b76:	1dfa      	adds	r2, r7, #7
 8001b78:	7812      	ldrb	r2, [r2, #0]
 8001b7a:	0011      	movs	r1, r2
 8001b7c:	2203      	movs	r2, #3
 8001b7e:	400a      	ands	r2, r1
 8001b80:	00d2      	lsls	r2, r2, #3
 8001b82:	21ff      	movs	r1, #255	@ 0xff
 8001b84:	4091      	lsls	r1, r2
 8001b86:	000a      	movs	r2, r1
 8001b88:	43d2      	mvns	r2, r2
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	019b      	lsls	r3, r3, #6
 8001b92:	22ff      	movs	r2, #255	@ 0xff
 8001b94:	401a      	ands	r2, r3
 8001b96:	1dfb      	adds	r3, r7, #7
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	0018      	movs	r0, r3
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	4003      	ands	r3, r0
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ba4:	481f      	ldr	r0, [pc, #124]	@ (8001c24 <__NVIC_SetPriority+0xd4>)
 8001ba6:	1dfb      	adds	r3, r7, #7
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	b25b      	sxtb	r3, r3
 8001bac:	089b      	lsrs	r3, r3, #2
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	33c0      	adds	r3, #192	@ 0xc0
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001bb6:	e031      	b.n	8001c1c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c28 <__NVIC_SetPriority+0xd8>)
 8001bba:	1dfb      	adds	r3, r7, #7
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	400b      	ands	r3, r1
 8001bc4:	3b08      	subs	r3, #8
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3306      	adds	r3, #6
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	18d3      	adds	r3, r2, r3
 8001bce:	3304      	adds	r3, #4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	1dfa      	adds	r2, r7, #7
 8001bd4:	7812      	ldrb	r2, [r2, #0]
 8001bd6:	0011      	movs	r1, r2
 8001bd8:	2203      	movs	r2, #3
 8001bda:	400a      	ands	r2, r1
 8001bdc:	00d2      	lsls	r2, r2, #3
 8001bde:	21ff      	movs	r1, #255	@ 0xff
 8001be0:	4091      	lsls	r1, r2
 8001be2:	000a      	movs	r2, r1
 8001be4:	43d2      	mvns	r2, r2
 8001be6:	401a      	ands	r2, r3
 8001be8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	019b      	lsls	r3, r3, #6
 8001bee:	22ff      	movs	r2, #255	@ 0xff
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	1dfb      	adds	r3, r7, #7
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	4003      	ands	r3, r0
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001c00:	4809      	ldr	r0, [pc, #36]	@ (8001c28 <__NVIC_SetPriority+0xd8>)
 8001c02:	1dfb      	adds	r3, r7, #7
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	001c      	movs	r4, r3
 8001c08:	230f      	movs	r3, #15
 8001c0a:	4023      	ands	r3, r4
 8001c0c:	3b08      	subs	r3, #8
 8001c0e:	089b      	lsrs	r3, r3, #2
 8001c10:	430a      	orrs	r2, r1
 8001c12:	3306      	adds	r3, #6
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	18c3      	adds	r3, r0, r3
 8001c18:	3304      	adds	r3, #4
 8001c1a:	601a      	str	r2, [r3, #0]
}
 8001c1c:	46c0      	nop			@ (mov r8, r8)
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b003      	add	sp, #12
 8001c22:	bd90      	pop	{r4, r7, pc}
 8001c24:	e000e100 	.word	0xe000e100
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	1e5a      	subs	r2, r3, #1
 8001c38:	2380      	movs	r3, #128	@ 0x80
 8001c3a:	045b      	lsls	r3, r3, #17
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d301      	bcc.n	8001c44 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c40:	2301      	movs	r3, #1
 8001c42:	e010      	b.n	8001c66 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c44:	4b0a      	ldr	r3, [pc, #40]	@ (8001c70 <SysTick_Config+0x44>)
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	3a01      	subs	r2, #1
 8001c4a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	425b      	negs	r3, r3
 8001c50:	2103      	movs	r1, #3
 8001c52:	0018      	movs	r0, r3
 8001c54:	f7ff ff7c 	bl	8001b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <SysTick_Config+0x44>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <SysTick_Config+0x44>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	0018      	movs	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b002      	add	sp, #8
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			@ (mov r8, r8)
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	210f      	movs	r1, #15
 8001c80:	187b      	adds	r3, r7, r1
 8001c82:	1c02      	adds	r2, r0, #0
 8001c84:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001c86:	68ba      	ldr	r2, [r7, #8]
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	b25b      	sxtb	r3, r3
 8001c8e:	0011      	movs	r1, r2
 8001c90:	0018      	movs	r0, r3
 8001c92:	f7ff ff5d 	bl	8001b50 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8001c96:	46c0      	nop			@ (mov r8, r8)
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b004      	add	sp, #16
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	0002      	movs	r2, r0
 8001ca6:	1dfb      	adds	r3, r7, #7
 8001ca8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001caa:	1dfb      	adds	r3, r7, #7
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b25b      	sxtb	r3, r3
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff ff33 	bl	8001b1c <__NVIC_EnableIRQ>
}
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b002      	add	sp, #8
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f7ff ffaf 	bl	8001c2c <SysTick_Config>
 8001cce:	0003      	movs	r3, r0
}
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b002      	add	sp, #8
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e061      	b.n	8001dae <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a32      	ldr	r2, [pc, #200]	@ (8001db8 <HAL_DMA_Init+0xe0>)
 8001cf0:	4694      	mov	ip, r2
 8001cf2:	4463      	add	r3, ip
 8001cf4:	2114      	movs	r1, #20
 8001cf6:	0018      	movs	r0, r3
 8001cf8:	f7fe fa18 	bl	800012c <__udivsi3>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	009a      	lsls	r2, r3, #2
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a2d      	ldr	r2, [pc, #180]	@ (8001dbc <HAL_DMA_Init+0xe4>)
 8001d08:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2225      	movs	r2, #37	@ 0x25
 8001d0e:	2102      	movs	r1, #2
 8001d10:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4a28      	ldr	r2, [pc, #160]	@ (8001dc0 <HAL_DMA_Init+0xe8>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d36:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d42:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	2380      	movs	r3, #128	@ 0x80
 8001d5e:	01db      	lsls	r3, r3, #7
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d018      	beq.n	8001d96 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001d64:	4b17      	ldr	r3, [pc, #92]	@ (8001dc4 <HAL_DMA_Init+0xec>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6c:	211c      	movs	r1, #28
 8001d6e:	400b      	ands	r3, r1
 8001d70:	210f      	movs	r1, #15
 8001d72:	4099      	lsls	r1, r3
 8001d74:	000b      	movs	r3, r1
 8001d76:	43d9      	mvns	r1, r3
 8001d78:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_DMA_Init+0xec>)
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001d7e:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <HAL_DMA_Init+0xec>)
 8001d80:	6819      	ldr	r1, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	201c      	movs	r0, #28
 8001d8c:	4003      	ands	r3, r0
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc4 <HAL_DMA_Init+0xec>)
 8001d92:	430a      	orrs	r2, r1
 8001d94:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2225      	movs	r2, #37	@ 0x25
 8001da0:	2101      	movs	r1, #1
 8001da2:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2224      	movs	r2, #36	@ 0x24
 8001da8:	2100      	movs	r1, #0
 8001daa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	0018      	movs	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	b004      	add	sp, #16
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	46c0      	nop			@ (mov r8, r8)
 8001db8:	bffdfff8 	.word	0xbffdfff8
 8001dbc:	40020000 	.word	0x40020000
 8001dc0:	ffff800f 	.word	0xffff800f
 8001dc4:	400200a8 	.word	0x400200a8

08001dc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
 8001dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dd6:	2317      	movs	r3, #23
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	2200      	movs	r2, #0
 8001ddc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2224      	movs	r2, #36	@ 0x24
 8001de2:	5c9b      	ldrb	r3, [r3, r2]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_DMA_Start_IT+0x24>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e04f      	b.n	8001e8c <HAL_DMA_Start_IT+0xc4>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2224      	movs	r2, #36	@ 0x24
 8001df0:	2101      	movs	r1, #1
 8001df2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2225      	movs	r2, #37	@ 0x25
 8001df8:	5c9b      	ldrb	r3, [r3, r2]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d13a      	bne.n	8001e76 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2225      	movs	r2, #37	@ 0x25
 8001e04:	2102      	movs	r1, #2
 8001e06:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	438a      	bics	r2, r1
 8001e1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 f974 	bl	8002112 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	210e      	movs	r1, #14
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	e00f      	b.n	8001e64 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2104      	movs	r1, #4
 8001e50:	438a      	bics	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	210a      	movs	r1, #10
 8001e60:	430a      	orrs	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2101      	movs	r1, #1
 8001e70:	430a      	orrs	r2, r1
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	e007      	b.n	8001e86 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2224      	movs	r2, #36	@ 0x24
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e7e:	2317      	movs	r3, #23
 8001e80:	18fb      	adds	r3, r7, r3
 8001e82:	2202      	movs	r2, #2
 8001e84:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001e86:	2317      	movs	r3, #23
 8001e88:	18fb      	adds	r3, r7, r3
 8001e8a:	781b      	ldrb	r3, [r3, #0]
}
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b006      	add	sp, #24
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	18fb      	adds	r3, r7, r3
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2225      	movs	r2, #37	@ 0x25
 8001ea8:	5c9b      	ldrb	r3, [r3, r2]
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d008      	beq.n	8001ec2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2204      	movs	r2, #4
 8001eb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2224      	movs	r2, #36	@ 0x24
 8001eba:	2100      	movs	r1, #0
 8001ebc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e024      	b.n	8001f0c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	210e      	movs	r1, #14
 8001ece:	438a      	bics	r2, r1
 8001ed0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2101      	movs	r1, #1
 8001ede:	438a      	bics	r2, r1
 8001ee0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee6:	221c      	movs	r2, #28
 8001ee8:	401a      	ands	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	2101      	movs	r1, #1
 8001ef0:	4091      	lsls	r1, r2
 8001ef2:	000a      	movs	r2, r1
 8001ef4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2225      	movs	r2, #37	@ 0x25
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2224      	movs	r2, #36	@ 0x24
 8001f02:	2100      	movs	r1, #0
 8001f04:	5499      	strb	r1, [r3, r2]

    return status;
 8001f06:	230f      	movs	r3, #15
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	b004      	add	sp, #16
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1c:	210f      	movs	r1, #15
 8001f1e:	187b      	adds	r3, r7, r1
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2225      	movs	r2, #37	@ 0x25
 8001f28:	5c9b      	ldrb	r3, [r3, r2]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d006      	beq.n	8001f3e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2204      	movs	r2, #4
 8001f34:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001f36:	187b      	adds	r3, r7, r1
 8001f38:	2201      	movs	r2, #1
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e02a      	b.n	8001f94 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	210e      	movs	r1, #14
 8001f4a:	438a      	bics	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2101      	movs	r1, #1
 8001f5a:	438a      	bics	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f62:	221c      	movs	r2, #28
 8001f64:	401a      	ands	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	4091      	lsls	r1, r2
 8001f6e:	000a      	movs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2225      	movs	r2, #37	@ 0x25
 8001f76:	2101      	movs	r1, #1
 8001f78:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2224      	movs	r2, #36	@ 0x24
 8001f7e:	2100      	movs	r1, #0
 8001f80:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d004      	beq.n	8001f94 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	0010      	movs	r0, r2
 8001f92:	4798      	blx	r3
    }
  }
  return status;
 8001f94:	230f      	movs	r3, #15
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	781b      	ldrb	r3, [r3, #0]
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b004      	add	sp, #16
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b084      	sub	sp, #16
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	221c      	movs	r2, #28
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	0013      	movs	r3, r2
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d026      	beq.n	800201c <HAL_DMA_IRQHandler+0x7a>
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d022      	beq.n	800201c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d107      	bne.n	8001ff2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2104      	movs	r1, #4
 8001fee:	438a      	bics	r2, r1
 8001ff0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff6:	221c      	movs	r2, #28
 8001ff8:	401a      	ands	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	2104      	movs	r1, #4
 8002000:	4091      	lsls	r1, r2
 8002002:	000a      	movs	r2, r1
 8002004:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	2b00      	cmp	r3, #0
 800200c:	d100      	bne.n	8002010 <HAL_DMA_IRQHandler+0x6e>
 800200e:	e071      	b.n	80020f4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	0010      	movs	r0, r2
 8002018:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800201a:	e06b      	b.n	80020f4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002020:	221c      	movs	r2, #28
 8002022:	4013      	ands	r3, r2
 8002024:	2202      	movs	r2, #2
 8002026:	409a      	lsls	r2, r3
 8002028:	0013      	movs	r3, r2
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	d02d      	beq.n	800208c <HAL_DMA_IRQHandler+0xea>
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	2202      	movs	r2, #2
 8002034:	4013      	ands	r3, r2
 8002036:	d029      	beq.n	800208c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2220      	movs	r2, #32
 8002040:	4013      	ands	r3, r2
 8002042:	d10b      	bne.n	800205c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	210a      	movs	r1, #10
 8002050:	438a      	bics	r2, r1
 8002052:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2225      	movs	r2, #37	@ 0x25
 8002058:	2101      	movs	r1, #1
 800205a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002060:	221c      	movs	r2, #28
 8002062:	401a      	ands	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	2102      	movs	r1, #2
 800206a:	4091      	lsls	r1, r2
 800206c:	000a      	movs	r2, r1
 800206e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2224      	movs	r2, #36	@ 0x24
 8002074:	2100      	movs	r1, #0
 8002076:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207c:	2b00      	cmp	r3, #0
 800207e:	d039      	beq.n	80020f4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	0010      	movs	r0, r2
 8002088:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800208a:	e033      	b.n	80020f4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002090:	221c      	movs	r2, #28
 8002092:	4013      	ands	r3, r2
 8002094:	2208      	movs	r2, #8
 8002096:	409a      	lsls	r2, r3
 8002098:	0013      	movs	r3, r2
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4013      	ands	r3, r2
 800209e:	d02a      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x154>
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2208      	movs	r2, #8
 80020a4:	4013      	ands	r3, r2
 80020a6:	d026      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	210e      	movs	r1, #14
 80020b4:	438a      	bics	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020bc:	221c      	movs	r2, #28
 80020be:	401a      	ands	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	2101      	movs	r1, #1
 80020c6:	4091      	lsls	r1, r2
 80020c8:	000a      	movs	r2, r1
 80020ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2225      	movs	r2, #37	@ 0x25
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2224      	movs	r2, #36	@ 0x24
 80020de:	2100      	movs	r1, #0
 80020e0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	0010      	movs	r0, r2
 80020f2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80020f4:	46c0      	nop			@ (mov r8, r8)
 80020f6:	46c0      	nop			@ (mov r8, r8)
}
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b004      	add	sp, #16
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800210a:	0018      	movs	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	b002      	add	sp, #8
 8002110:	bd80      	pop	{r7, pc}

08002112 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002124:	221c      	movs	r2, #28
 8002126:	401a      	ands	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212c:	2101      	movs	r1, #1
 800212e:	4091      	lsls	r1, r2
 8002130:	000a      	movs	r2, r1
 8002132:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2b10      	cmp	r3, #16
 8002142:	d108      	bne.n	8002156 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002154:	e007      	b.n	8002166 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	60da      	str	r2, [r3, #12]
}
 8002166:	46c0      	nop			@ (mov r8, r8)
 8002168:	46bd      	mov	sp, r7
 800216a:	b004      	add	sp, #16
 800216c:	bd80      	pop	{r7, pc}
	...

08002170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002186:	e155      	b.n	8002434 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2101      	movs	r1, #1
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4091      	lsls	r1, r2
 8002192:	000a      	movs	r2, r1
 8002194:	4013      	ands	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d100      	bne.n	80021a0 <HAL_GPIO_Init+0x30>
 800219e:	e146      	b.n	800242e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2203      	movs	r2, #3
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d005      	beq.n	80021b8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2203      	movs	r2, #3
 80021b2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d130      	bne.n	800221a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	2203      	movs	r2, #3
 80021c4:	409a      	lsls	r2, r3
 80021c6:	0013      	movs	r3, r2
 80021c8:	43da      	mvns	r2, r3
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	409a      	lsls	r2, r3
 80021da:	0013      	movs	r3, r2
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021ee:	2201      	movs	r2, #1
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	409a      	lsls	r2, r3
 80021f4:	0013      	movs	r3, r2
 80021f6:	43da      	mvns	r2, r3
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4013      	ands	r3, r2
 80021fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	091b      	lsrs	r3, r3, #4
 8002204:	2201      	movs	r2, #1
 8002206:	401a      	ands	r2, r3
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	409a      	lsls	r2, r3
 800220c:	0013      	movs	r3, r2
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2203      	movs	r2, #3
 8002220:	4013      	ands	r3, r2
 8002222:	2b03      	cmp	r3, #3
 8002224:	d017      	beq.n	8002256 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	409a      	lsls	r2, r3
 8002234:	0013      	movs	r3, r2
 8002236:	43da      	mvns	r2, r3
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4013      	ands	r3, r2
 800223c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	409a      	lsls	r2, r3
 8002248:	0013      	movs	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2203      	movs	r2, #3
 800225c:	4013      	ands	r3, r2
 800225e:	2b02      	cmp	r3, #2
 8002260:	d123      	bne.n	80022aa <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	08da      	lsrs	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3208      	adds	r2, #8
 800226a:	0092      	lsls	r2, r2, #2
 800226c:	58d3      	ldr	r3, [r2, r3]
 800226e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2207      	movs	r2, #7
 8002274:	4013      	ands	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	220f      	movs	r2, #15
 800227a:	409a      	lsls	r2, r3
 800227c:	0013      	movs	r3, r2
 800227e:	43da      	mvns	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4013      	ands	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2107      	movs	r1, #7
 800228e:	400b      	ands	r3, r1
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	409a      	lsls	r2, r3
 8002294:	0013      	movs	r3, r2
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	08da      	lsrs	r2, r3, #3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3208      	adds	r2, #8
 80022a4:	0092      	lsls	r2, r2, #2
 80022a6:	6939      	ldr	r1, [r7, #16]
 80022a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	2203      	movs	r2, #3
 80022b6:	409a      	lsls	r2, r3
 80022b8:	0013      	movs	r3, r2
 80022ba:	43da      	mvns	r2, r3
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	4013      	ands	r3, r2
 80022c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2203      	movs	r2, #3
 80022c8:	401a      	ands	r2, r3
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	409a      	lsls	r2, r3
 80022d0:	0013      	movs	r3, r2
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685a      	ldr	r2, [r3, #4]
 80022e2:	23c0      	movs	r3, #192	@ 0xc0
 80022e4:	029b      	lsls	r3, r3, #10
 80022e6:	4013      	ands	r3, r2
 80022e8:	d100      	bne.n	80022ec <HAL_GPIO_Init+0x17c>
 80022ea:	e0a0      	b.n	800242e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ec:	4b57      	ldr	r3, [pc, #348]	@ (800244c <HAL_GPIO_Init+0x2dc>)
 80022ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022f0:	4b56      	ldr	r3, [pc, #344]	@ (800244c <HAL_GPIO_Init+0x2dc>)
 80022f2:	2101      	movs	r1, #1
 80022f4:	430a      	orrs	r2, r1
 80022f6:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80022f8:	4a55      	ldr	r2, [pc, #340]	@ (8002450 <HAL_GPIO_Init+0x2e0>)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	089b      	lsrs	r3, r3, #2
 80022fe:	3302      	adds	r3, #2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	589b      	ldr	r3, [r3, r2]
 8002304:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	2203      	movs	r2, #3
 800230a:	4013      	ands	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	220f      	movs	r2, #15
 8002310:	409a      	lsls	r2, r3
 8002312:	0013      	movs	r3, r2
 8002314:	43da      	mvns	r2, r3
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	23a0      	movs	r3, #160	@ 0xa0
 8002320:	05db      	lsls	r3, r3, #23
 8002322:	429a      	cmp	r2, r3
 8002324:	d01f      	beq.n	8002366 <HAL_GPIO_Init+0x1f6>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4a      	ldr	r2, [pc, #296]	@ (8002454 <HAL_GPIO_Init+0x2e4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d019      	beq.n	8002362 <HAL_GPIO_Init+0x1f2>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a49      	ldr	r2, [pc, #292]	@ (8002458 <HAL_GPIO_Init+0x2e8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d013      	beq.n	800235e <HAL_GPIO_Init+0x1ee>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a48      	ldr	r2, [pc, #288]	@ (800245c <HAL_GPIO_Init+0x2ec>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d00d      	beq.n	800235a <HAL_GPIO_Init+0x1ea>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a47      	ldr	r2, [pc, #284]	@ (8002460 <HAL_GPIO_Init+0x2f0>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d007      	beq.n	8002356 <HAL_GPIO_Init+0x1e6>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a46      	ldr	r2, [pc, #280]	@ (8002464 <HAL_GPIO_Init+0x2f4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d101      	bne.n	8002352 <HAL_GPIO_Init+0x1e2>
 800234e:	2305      	movs	r3, #5
 8002350:	e00a      	b.n	8002368 <HAL_GPIO_Init+0x1f8>
 8002352:	2306      	movs	r3, #6
 8002354:	e008      	b.n	8002368 <HAL_GPIO_Init+0x1f8>
 8002356:	2304      	movs	r3, #4
 8002358:	e006      	b.n	8002368 <HAL_GPIO_Init+0x1f8>
 800235a:	2303      	movs	r3, #3
 800235c:	e004      	b.n	8002368 <HAL_GPIO_Init+0x1f8>
 800235e:	2302      	movs	r3, #2
 8002360:	e002      	b.n	8002368 <HAL_GPIO_Init+0x1f8>
 8002362:	2301      	movs	r3, #1
 8002364:	e000      	b.n	8002368 <HAL_GPIO_Init+0x1f8>
 8002366:	2300      	movs	r3, #0
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	2103      	movs	r1, #3
 800236c:	400a      	ands	r2, r1
 800236e:	0092      	lsls	r2, r2, #2
 8002370:	4093      	lsls	r3, r2
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002378:	4935      	ldr	r1, [pc, #212]	@ (8002450 <HAL_GPIO_Init+0x2e0>)
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002386:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <HAL_GPIO_Init+0x2f8>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	43da      	mvns	r2, r3
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	4013      	ands	r3, r2
 8002394:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	2380      	movs	r3, #128	@ 0x80
 800239c:	035b      	lsls	r3, r3, #13
 800239e:	4013      	ands	r3, r2
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80023aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002468 <HAL_GPIO_Init+0x2f8>)
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80023b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002468 <HAL_GPIO_Init+0x2f8>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	43da      	mvns	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	2380      	movs	r3, #128	@ 0x80
 80023c6:	039b      	lsls	r3, r3, #14
 80023c8:	4013      	ands	r3, r2
 80023ca:	d003      	beq.n	80023d4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80023d4:	4b24      	ldr	r3, [pc, #144]	@ (8002468 <HAL_GPIO_Init+0x2f8>)
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 80023da:	4b23      	ldr	r3, [pc, #140]	@ (8002468 <HAL_GPIO_Init+0x2f8>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	43da      	mvns	r2, r3
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4013      	ands	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	2380      	movs	r3, #128	@ 0x80
 80023f0:	029b      	lsls	r3, r3, #10
 80023f2:	4013      	ands	r3, r2
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <HAL_GPIO_Init+0x2f8>)
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002404:	4b18      	ldr	r3, [pc, #96]	@ (8002468 <HAL_GPIO_Init+0x2f8>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	43da      	mvns	r2, r3
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	025b      	lsls	r3, r3, #9
 800241c:	4013      	ands	r3, r2
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002428:	4b0f      	ldr	r3, [pc, #60]	@ (8002468 <HAL_GPIO_Init+0x2f8>)
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3301      	adds	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	40da      	lsrs	r2, r3
 800243c:	1e13      	subs	r3, r2, #0
 800243e:	d000      	beq.n	8002442 <HAL_GPIO_Init+0x2d2>
 8002440:	e6a2      	b.n	8002188 <HAL_GPIO_Init+0x18>
  }
}
 8002442:	46c0      	nop			@ (mov r8, r8)
 8002444:	46c0      	nop			@ (mov r8, r8)
 8002446:	46bd      	mov	sp, r7
 8002448:	b006      	add	sp, #24
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	40010000 	.word	0x40010000
 8002454:	50000400 	.word	0x50000400
 8002458:	50000800 	.word	0x50000800
 800245c:	50000c00 	.word	0x50000c00
 8002460:	50001000 	.word	0x50001000
 8002464:	50001c00 	.word	0x50001c00
 8002468:	40010400 	.word	0x40010400

0800246c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	0008      	movs	r0, r1
 8002476:	0011      	movs	r1, r2
 8002478:	1cbb      	adds	r3, r7, #2
 800247a:	1c02      	adds	r2, r0, #0
 800247c:	801a      	strh	r2, [r3, #0]
 800247e:	1c7b      	adds	r3, r7, #1
 8002480:	1c0a      	adds	r2, r1, #0
 8002482:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002484:	1c7b      	adds	r3, r7, #1
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800248c:	1cbb      	adds	r3, r7, #2
 800248e:	881a      	ldrh	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002494:	e003      	b.n	800249e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002496:	1cbb      	adds	r3, r7, #2
 8002498:	881a      	ldrh	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800249e:	46c0      	nop			@ (mov r8, r8)
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b002      	add	sp, #8
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e08f      	b.n	80025da <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2241      	movs	r2, #65	@ 0x41
 80024be:	5c9b      	ldrb	r3, [r3, r2]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d107      	bne.n	80024d6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2240      	movs	r2, #64	@ 0x40
 80024ca:	2100      	movs	r1, #0
 80024cc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7fe f8ab 	bl	800062c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2241      	movs	r2, #65	@ 0x41
 80024da:	2124      	movs	r1, #36	@ 0x24
 80024dc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2101      	movs	r1, #1
 80024ea:	438a      	bics	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685a      	ldr	r2, [r3, #4]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	493b      	ldr	r1, [pc, #236]	@ (80025e4 <HAL_I2C_Init+0x13c>)
 80024f8:	400a      	ands	r2, r1
 80024fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689a      	ldr	r2, [r3, #8]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4938      	ldr	r1, [pc, #224]	@ (80025e8 <HAL_I2C_Init+0x140>)
 8002508:	400a      	ands	r2, r1
 800250a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d108      	bne.n	8002526 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689a      	ldr	r2, [r3, #8]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2180      	movs	r1, #128	@ 0x80
 800251e:	0209      	lsls	r1, r1, #8
 8002520:	430a      	orrs	r2, r1
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	e007      	b.n	8002536 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2184      	movs	r1, #132	@ 0x84
 8002530:	0209      	lsls	r1, r1, #8
 8002532:	430a      	orrs	r2, r1
 8002534:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d109      	bne.n	8002552 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2180      	movs	r1, #128	@ 0x80
 800254a:	0109      	lsls	r1, r1, #4
 800254c:	430a      	orrs	r2, r1
 800254e:	605a      	str	r2, [r3, #4]
 8002550:	e007      	b.n	8002562 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	685a      	ldr	r2, [r3, #4]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4923      	ldr	r1, [pc, #140]	@ (80025ec <HAL_I2C_Init+0x144>)
 800255e:	400a      	ands	r2, r1
 8002560:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4920      	ldr	r1, [pc, #128]	@ (80025f0 <HAL_I2C_Init+0x148>)
 800256e:	430a      	orrs	r2, r1
 8002570:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	491a      	ldr	r1, [pc, #104]	@ (80025e8 <HAL_I2C_Init+0x140>)
 800257e:	400a      	ands	r2, r1
 8002580:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695b      	ldr	r3, [r3, #20]
 800258a:	431a      	orrs	r2, r3
 800258c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69d9      	ldr	r1, [r3, #28]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a1a      	ldr	r2, [r3, #32]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2101      	movs	r1, #1
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2241      	movs	r2, #65	@ 0x41
 80025c6:	2120      	movs	r1, #32
 80025c8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2242      	movs	r2, #66	@ 0x42
 80025d4:	2100      	movs	r1, #0
 80025d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	0018      	movs	r0, r3
 80025dc:	46bd      	mov	sp, r7
 80025de:	b002      	add	sp, #8
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			@ (mov r8, r8)
 80025e4:	f0ffffff 	.word	0xf0ffffff
 80025e8:	ffff7fff 	.word	0xffff7fff
 80025ec:	fffff7ff 	.word	0xfffff7ff
 80025f0:	02008000 	.word	0x02008000

080025f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2241      	movs	r2, #65	@ 0x41
 8002602:	5c9b      	ldrb	r3, [r3, r2]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b20      	cmp	r3, #32
 8002608:	d138      	bne.n	800267c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2240      	movs	r2, #64	@ 0x40
 800260e:	5c9b      	ldrb	r3, [r3, r2]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002614:	2302      	movs	r3, #2
 8002616:	e032      	b.n	800267e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2240      	movs	r2, #64	@ 0x40
 800261c:	2101      	movs	r1, #1
 800261e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2241      	movs	r2, #65	@ 0x41
 8002624:	2124      	movs	r1, #36	@ 0x24
 8002626:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2101      	movs	r1, #1
 8002634:	438a      	bics	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4911      	ldr	r1, [pc, #68]	@ (8002688 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002644:	400a      	ands	r2, r1
 8002646:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2101      	movs	r1, #1
 8002664:	430a      	orrs	r2, r1
 8002666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2241      	movs	r2, #65	@ 0x41
 800266c:	2120      	movs	r1, #32
 800266e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2240      	movs	r2, #64	@ 0x40
 8002674:	2100      	movs	r1, #0
 8002676:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	e000      	b.n	800267e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800267c:	2302      	movs	r3, #2
  }
}
 800267e:	0018      	movs	r0, r3
 8002680:	46bd      	mov	sp, r7
 8002682:	b002      	add	sp, #8
 8002684:	bd80      	pop	{r7, pc}
 8002686:	46c0      	nop			@ (mov r8, r8)
 8002688:	ffffefff 	.word	0xffffefff

0800268c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2241      	movs	r2, #65	@ 0x41
 800269a:	5c9b      	ldrb	r3, [r3, r2]
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b20      	cmp	r3, #32
 80026a0:	d139      	bne.n	8002716 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2240      	movs	r2, #64	@ 0x40
 80026a6:	5c9b      	ldrb	r3, [r3, r2]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d101      	bne.n	80026b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80026ac:	2302      	movs	r3, #2
 80026ae:	e033      	b.n	8002718 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2240      	movs	r2, #64	@ 0x40
 80026b4:	2101      	movs	r1, #1
 80026b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2241      	movs	r2, #65	@ 0x41
 80026bc:	2124      	movs	r1, #36	@ 0x24
 80026be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2101      	movs	r1, #1
 80026cc:	438a      	bics	r2, r1
 80026ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a11      	ldr	r2, [pc, #68]	@ (8002720 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80026dc:	4013      	ands	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2101      	movs	r1, #1
 80026fe:	430a      	orrs	r2, r1
 8002700:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2241      	movs	r2, #65	@ 0x41
 8002706:	2120      	movs	r1, #32
 8002708:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2240      	movs	r2, #64	@ 0x40
 800270e:	2100      	movs	r1, #0
 8002710:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e000      	b.n	8002718 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002716:	2302      	movs	r3, #2
  }
}
 8002718:	0018      	movs	r0, r3
 800271a:	46bd      	mov	sp, r7
 800271c:	b004      	add	sp, #16
 800271e:	bd80      	pop	{r7, pc}
 8002720:	fffff0ff 	.word	0xfffff0ff

08002724 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002724:	b5b0      	push	{r4, r5, r7, lr}
 8002726:	b08a      	sub	sp, #40	@ 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	f000 fbbf 	bl	8002eb6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002738:	4bc9      	ldr	r3, [pc, #804]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	220c      	movs	r2, #12
 800273e:	4013      	ands	r3, r2
 8002740:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002742:	4bc7      	ldr	r3, [pc, #796]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	2380      	movs	r3, #128	@ 0x80
 8002748:	025b      	lsls	r3, r3, #9
 800274a:	4013      	ands	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2201      	movs	r2, #1
 8002754:	4013      	ands	r3, r2
 8002756:	d100      	bne.n	800275a <HAL_RCC_OscConfig+0x36>
 8002758:	e07e      	b.n	8002858 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	2b08      	cmp	r3, #8
 800275e:	d007      	beq.n	8002770 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	2b0c      	cmp	r3, #12
 8002764:	d112      	bne.n	800278c <HAL_RCC_OscConfig+0x68>
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	2380      	movs	r3, #128	@ 0x80
 800276a:	025b      	lsls	r3, r3, #9
 800276c:	429a      	cmp	r2, r3
 800276e:	d10d      	bne.n	800278c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002770:	4bbb      	ldr	r3, [pc, #748]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	2380      	movs	r3, #128	@ 0x80
 8002776:	029b      	lsls	r3, r3, #10
 8002778:	4013      	ands	r3, r2
 800277a:	d100      	bne.n	800277e <HAL_RCC_OscConfig+0x5a>
 800277c:	e06b      	b.n	8002856 <HAL_RCC_OscConfig+0x132>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d167      	bne.n	8002856 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	f000 fb95 	bl	8002eb6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	2380      	movs	r3, #128	@ 0x80
 8002792:	025b      	lsls	r3, r3, #9
 8002794:	429a      	cmp	r2, r3
 8002796:	d107      	bne.n	80027a8 <HAL_RCC_OscConfig+0x84>
 8002798:	4bb1      	ldr	r3, [pc, #708]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4bb0      	ldr	r3, [pc, #704]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 800279e:	2180      	movs	r1, #128	@ 0x80
 80027a0:	0249      	lsls	r1, r1, #9
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e027      	b.n	80027f8 <HAL_RCC_OscConfig+0xd4>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	23a0      	movs	r3, #160	@ 0xa0
 80027ae:	02db      	lsls	r3, r3, #11
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d10e      	bne.n	80027d2 <HAL_RCC_OscConfig+0xae>
 80027b4:	4baa      	ldr	r3, [pc, #680]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4ba9      	ldr	r3, [pc, #676]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80027ba:	2180      	movs	r1, #128	@ 0x80
 80027bc:	02c9      	lsls	r1, r1, #11
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	4ba7      	ldr	r3, [pc, #668]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	4ba6      	ldr	r3, [pc, #664]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80027c8:	2180      	movs	r1, #128	@ 0x80
 80027ca:	0249      	lsls	r1, r1, #9
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	e012      	b.n	80027f8 <HAL_RCC_OscConfig+0xd4>
 80027d2:	4ba3      	ldr	r3, [pc, #652]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4ba2      	ldr	r3, [pc, #648]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80027d8:	49a2      	ldr	r1, [pc, #648]	@ (8002a64 <HAL_RCC_OscConfig+0x340>)
 80027da:	400a      	ands	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	4ba0      	ldr	r3, [pc, #640]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	2380      	movs	r3, #128	@ 0x80
 80027e4:	025b      	lsls	r3, r3, #9
 80027e6:	4013      	ands	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	4b9c      	ldr	r3, [pc, #624]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b9b      	ldr	r3, [pc, #620]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80027f2:	499d      	ldr	r1, [pc, #628]	@ (8002a68 <HAL_RCC_OscConfig+0x344>)
 80027f4:	400a      	ands	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d015      	beq.n	800282c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7ff f95e 	bl	8001ac0 <HAL_GetTick>
 8002804:	0003      	movs	r3, r0
 8002806:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002808:	e009      	b.n	800281e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280a:	f7ff f959 	bl	8001ac0 <HAL_GetTick>
 800280e:	0002      	movs	r2, r0
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b64      	cmp	r3, #100	@ 0x64
 8002816:	d902      	bls.n	800281e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	f000 fb4c 	bl	8002eb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800281e:	4b90      	ldr	r3, [pc, #576]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	2380      	movs	r3, #128	@ 0x80
 8002824:	029b      	lsls	r3, r3, #10
 8002826:	4013      	ands	r3, r2
 8002828:	d0ef      	beq.n	800280a <HAL_RCC_OscConfig+0xe6>
 800282a:	e015      	b.n	8002858 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7ff f948 	bl	8001ac0 <HAL_GetTick>
 8002830:	0003      	movs	r3, r0
 8002832:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002836:	f7ff f943 	bl	8001ac0 <HAL_GetTick>
 800283a:	0002      	movs	r2, r0
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b64      	cmp	r3, #100	@ 0x64
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e336      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002848:	4b85      	ldr	r3, [pc, #532]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	029b      	lsls	r3, r3, #10
 8002850:	4013      	ands	r3, r2
 8002852:	d1f0      	bne.n	8002836 <HAL_RCC_OscConfig+0x112>
 8002854:	e000      	b.n	8002858 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002856:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2202      	movs	r2, #2
 800285e:	4013      	ands	r3, r2
 8002860:	d100      	bne.n	8002864 <HAL_RCC_OscConfig+0x140>
 8002862:	e099      	b.n	8002998 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800286c:	2220      	movs	r2, #32
 800286e:	4013      	ands	r3, r2
 8002870:	d009      	beq.n	8002886 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002872:	4b7b      	ldr	r3, [pc, #492]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4b7a      	ldr	r3, [pc, #488]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 8002878:	2120      	movs	r1, #32
 800287a:	430a      	orrs	r2, r1
 800287c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	2220      	movs	r2, #32
 8002882:	4393      	bics	r3, r2
 8002884:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	2b04      	cmp	r3, #4
 800288a:	d005      	beq.n	8002898 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d13e      	bne.n	8002910 <HAL_RCC_OscConfig+0x1ec>
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d13b      	bne.n	8002910 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002898:	4b71      	ldr	r3, [pc, #452]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2204      	movs	r2, #4
 800289e:	4013      	ands	r3, r2
 80028a0:	d004      	beq.n	80028ac <HAL_RCC_OscConfig+0x188>
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e304      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4a6e      	ldr	r2, [pc, #440]	@ (8002a6c <HAL_RCC_OscConfig+0x348>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	0019      	movs	r1, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	021a      	lsls	r2, r3, #8
 80028bc:	4b68      	ldr	r3, [pc, #416]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80028be:	430a      	orrs	r2, r1
 80028c0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028c2:	4b67      	ldr	r3, [pc, #412]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2209      	movs	r2, #9
 80028c8:	4393      	bics	r3, r2
 80028ca:	0019      	movs	r1, r3
 80028cc:	4b64      	ldr	r3, [pc, #400]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80028ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d0:	430a      	orrs	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028d4:	f000 fc42 	bl	800315c <HAL_RCC_GetSysClockFreq>
 80028d8:	0001      	movs	r1, r0
 80028da:	4b61      	ldr	r3, [pc, #388]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	220f      	movs	r2, #15
 80028e2:	4013      	ands	r3, r2
 80028e4:	4a62      	ldr	r2, [pc, #392]	@ (8002a70 <HAL_RCC_OscConfig+0x34c>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	000a      	movs	r2, r1
 80028ea:	40da      	lsrs	r2, r3
 80028ec:	4b61      	ldr	r3, [pc, #388]	@ (8002a74 <HAL_RCC_OscConfig+0x350>)
 80028ee:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80028f0:	4b61      	ldr	r3, [pc, #388]	@ (8002a78 <HAL_RCC_OscConfig+0x354>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2513      	movs	r5, #19
 80028f6:	197c      	adds	r4, r7, r5
 80028f8:	0018      	movs	r0, r3
 80028fa:	f7ff f89b 	bl	8001a34 <HAL_InitTick>
 80028fe:	0003      	movs	r3, r0
 8002900:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002902:	197b      	adds	r3, r7, r5
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d046      	beq.n	8002998 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800290a:	197b      	adds	r3, r7, r5
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	e2d2      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	2b00      	cmp	r3, #0
 8002914:	d027      	beq.n	8002966 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002916:	4b52      	ldr	r3, [pc, #328]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2209      	movs	r2, #9
 800291c:	4393      	bics	r3, r2
 800291e:	0019      	movs	r1, r3
 8002920:	4b4f      	ldr	r3, [pc, #316]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 8002922:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7ff f8ca 	bl	8001ac0 <HAL_GetTick>
 800292c:	0003      	movs	r3, r0
 800292e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002932:	f7ff f8c5 	bl	8001ac0 <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e2b8      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002944:	4b46      	ldr	r3, [pc, #280]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2204      	movs	r2, #4
 800294a:	4013      	ands	r3, r2
 800294c:	d0f1      	beq.n	8002932 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294e:	4b44      	ldr	r3, [pc, #272]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4a46      	ldr	r2, [pc, #280]	@ (8002a6c <HAL_RCC_OscConfig+0x348>)
 8002954:	4013      	ands	r3, r2
 8002956:	0019      	movs	r1, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	021a      	lsls	r2, r3, #8
 800295e:	4b40      	ldr	r3, [pc, #256]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 8002960:	430a      	orrs	r2, r1
 8002962:	605a      	str	r2, [r3, #4]
 8002964:	e018      	b.n	8002998 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002966:	4b3e      	ldr	r3, [pc, #248]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 800296c:	2101      	movs	r1, #1
 800296e:	438a      	bics	r2, r1
 8002970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002972:	f7ff f8a5 	bl	8001ac0 <HAL_GetTick>
 8002976:	0003      	movs	r3, r0
 8002978:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800297a:	e008      	b.n	800298e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800297c:	f7ff f8a0 	bl	8001ac0 <HAL_GetTick>
 8002980:	0002      	movs	r2, r0
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	2b02      	cmp	r3, #2
 8002988:	d901      	bls.n	800298e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800298a:	2303      	movs	r3, #3
 800298c:	e293      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800298e:	4b34      	ldr	r3, [pc, #208]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2204      	movs	r2, #4
 8002994:	4013      	ands	r3, r2
 8002996:	d1f1      	bne.n	800297c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2210      	movs	r2, #16
 800299e:	4013      	ands	r3, r2
 80029a0:	d100      	bne.n	80029a4 <HAL_RCC_OscConfig+0x280>
 80029a2:	e0a2      	b.n	8002aea <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d140      	bne.n	8002a2c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	2380      	movs	r3, #128	@ 0x80
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4013      	ands	r3, r2
 80029b4:	d005      	beq.n	80029c2 <HAL_RCC_OscConfig+0x29e>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e279      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029c2:	4b27      	ldr	r3, [pc, #156]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	4a2d      	ldr	r2, [pc, #180]	@ (8002a7c <HAL_RCC_OscConfig+0x358>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	0019      	movs	r1, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029d0:	4b23      	ldr	r3, [pc, #140]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029d6:	4b22      	ldr	r3, [pc, #136]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	021b      	lsls	r3, r3, #8
 80029dc:	0a19      	lsrs	r1, r3, #8
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	061a      	lsls	r2, r3, #24
 80029e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80029e6:	430a      	orrs	r2, r1
 80029e8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ee:	0b5b      	lsrs	r3, r3, #13
 80029f0:	3301      	adds	r3, #1
 80029f2:	2280      	movs	r2, #128	@ 0x80
 80029f4:	0212      	lsls	r2, r2, #8
 80029f6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029f8:	4b19      	ldr	r3, [pc, #100]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	210f      	movs	r1, #15
 8002a00:	400b      	ands	r3, r1
 8002a02:	491b      	ldr	r1, [pc, #108]	@ (8002a70 <HAL_RCC_OscConfig+0x34c>)
 8002a04:	5ccb      	ldrb	r3, [r1, r3]
 8002a06:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002a08:	4b1a      	ldr	r3, [pc, #104]	@ (8002a74 <HAL_RCC_OscConfig+0x350>)
 8002a0a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a78 <HAL_RCC_OscConfig+0x354>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2513      	movs	r5, #19
 8002a12:	197c      	adds	r4, r7, r5
 8002a14:	0018      	movs	r0, r3
 8002a16:	f7ff f80d 	bl	8001a34 <HAL_InitTick>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002a1e:	197b      	adds	r3, r7, r5
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d061      	beq.n	8002aea <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002a26:	197b      	adds	r3, r7, r5
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	e244      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d040      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a34:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	4b09      	ldr	r3, [pc, #36]	@ (8002a60 <HAL_RCC_OscConfig+0x33c>)
 8002a3a:	2180      	movs	r1, #128	@ 0x80
 8002a3c:	0049      	lsls	r1, r1, #1
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7ff f83d 	bl	8001ac0 <HAL_GetTick>
 8002a46:	0003      	movs	r3, r0
 8002a48:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a4a:	e019      	b.n	8002a80 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a4c:	f7ff f838 	bl	8001ac0 <HAL_GetTick>
 8002a50:	0002      	movs	r2, r0
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d912      	bls.n	8002a80 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e22b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
 8002a5e:	46c0      	nop			@ (mov r8, r8)
 8002a60:	40021000 	.word	0x40021000
 8002a64:	fffeffff 	.word	0xfffeffff
 8002a68:	fffbffff 	.word	0xfffbffff
 8002a6c:	ffffe0ff 	.word	0xffffe0ff
 8002a70:	080077f8 	.word	0x080077f8
 8002a74:	20000000 	.word	0x20000000
 8002a78:	20000004 	.word	0x20000004
 8002a7c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a80:	4bca      	ldr	r3, [pc, #808]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d0df      	beq.n	8002a4c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a8c:	4bc7      	ldr	r3, [pc, #796]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4ac7      	ldr	r2, [pc, #796]	@ (8002db0 <HAL_RCC_OscConfig+0x68c>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a9a:	4bc4      	ldr	r3, [pc, #784]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002aa0:	4bc2      	ldr	r3, [pc, #776]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	0a19      	lsrs	r1, r3, #8
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	061a      	lsls	r2, r3, #24
 8002aae:	4bbf      	ldr	r3, [pc, #764]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	e019      	b.n	8002aea <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ab6:	4bbd      	ldr	r3, [pc, #756]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4bbc      	ldr	r3, [pc, #752]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002abc:	49bd      	ldr	r1, [pc, #756]	@ (8002db4 <HAL_RCC_OscConfig+0x690>)
 8002abe:	400a      	ands	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fffd 	bl	8001ac0 <HAL_GetTick>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002acc:	f7fe fff8 	bl	8001ac0 <HAL_GetTick>
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e1eb      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002ade:	4bb3      	ldr	r3, [pc, #716]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	2380      	movs	r3, #128	@ 0x80
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d1f0      	bne.n	8002acc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2208      	movs	r2, #8
 8002af0:	4013      	ands	r3, r2
 8002af2:	d036      	beq.n	8002b62 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	695b      	ldr	r3, [r3, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d019      	beq.n	8002b30 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002afc:	4bab      	ldr	r3, [pc, #684]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002afe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b00:	4baa      	ldr	r3, [pc, #680]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002b02:	2101      	movs	r1, #1
 8002b04:	430a      	orrs	r2, r1
 8002b06:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b08:	f7fe ffda 	bl	8001ac0 <HAL_GetTick>
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b10:	e008      	b.n	8002b24 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b12:	f7fe ffd5 	bl	8001ac0 <HAL_GetTick>
 8002b16:	0002      	movs	r2, r0
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e1c8      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b24:	4ba1      	ldr	r3, [pc, #644]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b28:	2202      	movs	r2, #2
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d0f1      	beq.n	8002b12 <HAL_RCC_OscConfig+0x3ee>
 8002b2e:	e018      	b.n	8002b62 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b30:	4b9e      	ldr	r3, [pc, #632]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002b32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002b34:	4b9d      	ldr	r3, [pc, #628]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002b36:	2101      	movs	r1, #1
 8002b38:	438a      	bics	r2, r1
 8002b3a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b3c:	f7fe ffc0 	bl	8001ac0 <HAL_GetTick>
 8002b40:	0003      	movs	r3, r0
 8002b42:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b46:	f7fe ffbb 	bl	8001ac0 <HAL_GetTick>
 8002b4a:	0002      	movs	r2, r0
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1ae      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b58:	4b94      	ldr	r3, [pc, #592]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002b5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	4013      	ands	r3, r2
 8002b60:	d1f1      	bne.n	8002b46 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2204      	movs	r2, #4
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d100      	bne.n	8002b6e <HAL_RCC_OscConfig+0x44a>
 8002b6c:	e0ae      	b.n	8002ccc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6e:	2023      	movs	r0, #35	@ 0x23
 8002b70:	183b      	adds	r3, r7, r0
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b76:	4b8d      	ldr	r3, [pc, #564]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002b78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b7a:	2380      	movs	r3, #128	@ 0x80
 8002b7c:	055b      	lsls	r3, r3, #21
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d109      	bne.n	8002b96 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b82:	4b8a      	ldr	r3, [pc, #552]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002b84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b86:	4b89      	ldr	r3, [pc, #548]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002b88:	2180      	movs	r1, #128	@ 0x80
 8002b8a:	0549      	lsls	r1, r1, #21
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002b90:	183b      	adds	r3, r7, r0
 8002b92:	2201      	movs	r2, #1
 8002b94:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b96:	4b88      	ldr	r3, [pc, #544]	@ (8002db8 <HAL_RCC_OscConfig+0x694>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d11a      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ba2:	4b85      	ldr	r3, [pc, #532]	@ (8002db8 <HAL_RCC_OscConfig+0x694>)
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	4b84      	ldr	r3, [pc, #528]	@ (8002db8 <HAL_RCC_OscConfig+0x694>)
 8002ba8:	2180      	movs	r1, #128	@ 0x80
 8002baa:	0049      	lsls	r1, r1, #1
 8002bac:	430a      	orrs	r2, r1
 8002bae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb0:	f7fe ff86 	bl	8001ac0 <HAL_GetTick>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb8:	e008      	b.n	8002bcc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bba:	f7fe ff81 	bl	8001ac0 <HAL_GetTick>
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b64      	cmp	r3, #100	@ 0x64
 8002bc6:	d901      	bls.n	8002bcc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e174      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bcc:	4b7a      	ldr	r3, [pc, #488]	@ (8002db8 <HAL_RCC_OscConfig+0x694>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	2380      	movs	r3, #128	@ 0x80
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	d0f0      	beq.n	8002bba <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	2380      	movs	r3, #128	@ 0x80
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d107      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x4d0>
 8002be4:	4b71      	ldr	r3, [pc, #452]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002be6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002be8:	4b70      	ldr	r3, [pc, #448]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002bea:	2180      	movs	r1, #128	@ 0x80
 8002bec:	0049      	lsls	r1, r1, #1
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	651a      	str	r2, [r3, #80]	@ 0x50
 8002bf2:	e031      	b.n	8002c58 <HAL_RCC_OscConfig+0x534>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d10c      	bne.n	8002c16 <HAL_RCC_OscConfig+0x4f2>
 8002bfc:	4b6b      	ldr	r3, [pc, #428]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002bfe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c00:	4b6a      	ldr	r3, [pc, #424]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002c02:	496c      	ldr	r1, [pc, #432]	@ (8002db4 <HAL_RCC_OscConfig+0x690>)
 8002c04:	400a      	ands	r2, r1
 8002c06:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c08:	4b68      	ldr	r3, [pc, #416]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002c0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c0c:	4b67      	ldr	r3, [pc, #412]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002c0e:	496b      	ldr	r1, [pc, #428]	@ (8002dbc <HAL_RCC_OscConfig+0x698>)
 8002c10:	400a      	ands	r2, r1
 8002c12:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c14:	e020      	b.n	8002c58 <HAL_RCC_OscConfig+0x534>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	23a0      	movs	r3, #160	@ 0xa0
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d10e      	bne.n	8002c40 <HAL_RCC_OscConfig+0x51c>
 8002c22:	4b62      	ldr	r3, [pc, #392]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002c24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c26:	4b61      	ldr	r3, [pc, #388]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002c28:	2180      	movs	r1, #128	@ 0x80
 8002c2a:	00c9      	lsls	r1, r1, #3
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c30:	4b5e      	ldr	r3, [pc, #376]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002c32:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c34:	4b5d      	ldr	r3, [pc, #372]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002c36:	2180      	movs	r1, #128	@ 0x80
 8002c38:	0049      	lsls	r1, r1, #1
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c3e:	e00b      	b.n	8002c58 <HAL_RCC_OscConfig+0x534>
 8002c40:	4b5a      	ldr	r3, [pc, #360]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002c42:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c44:	4b59      	ldr	r3, [pc, #356]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002c46:	495b      	ldr	r1, [pc, #364]	@ (8002db4 <HAL_RCC_OscConfig+0x690>)
 8002c48:	400a      	ands	r2, r1
 8002c4a:	651a      	str	r2, [r3, #80]	@ 0x50
 8002c4c:	4b57      	ldr	r3, [pc, #348]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002c4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c50:	4b56      	ldr	r3, [pc, #344]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002c52:	495a      	ldr	r1, [pc, #360]	@ (8002dbc <HAL_RCC_OscConfig+0x698>)
 8002c54:	400a      	ands	r2, r1
 8002c56:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d015      	beq.n	8002c8c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7fe ff2e 	bl	8001ac0 <HAL_GetTick>
 8002c64:	0003      	movs	r3, r0
 8002c66:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c68:	e009      	b.n	8002c7e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6a:	f7fe ff29 	bl	8001ac0 <HAL_GetTick>
 8002c6e:	0002      	movs	r2, r0
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	4a52      	ldr	r2, [pc, #328]	@ (8002dc0 <HAL_RCC_OscConfig+0x69c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e11b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c7e:	4b4b      	ldr	r3, [pc, #300]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002c80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002c82:	2380      	movs	r3, #128	@ 0x80
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4013      	ands	r3, r2
 8002c88:	d0ef      	beq.n	8002c6a <HAL_RCC_OscConfig+0x546>
 8002c8a:	e014      	b.n	8002cb6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8c:	f7fe ff18 	bl	8001ac0 <HAL_GetTick>
 8002c90:	0003      	movs	r3, r0
 8002c92:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c94:	e009      	b.n	8002caa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7fe ff13 	bl	8001ac0 <HAL_GetTick>
 8002c9a:	0002      	movs	r2, r0
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	4a47      	ldr	r2, [pc, #284]	@ (8002dc0 <HAL_RCC_OscConfig+0x69c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e105      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002caa:	4b40      	ldr	r3, [pc, #256]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002cac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002cae:	2380      	movs	r3, #128	@ 0x80
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d1ef      	bne.n	8002c96 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002cb6:	2323      	movs	r3, #35	@ 0x23
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002cc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cc4:	4b39      	ldr	r3, [pc, #228]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002cc6:	493f      	ldr	r1, [pc, #252]	@ (8002dc4 <HAL_RCC_OscConfig+0x6a0>)
 8002cc8:	400a      	ands	r2, r1
 8002cca:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d049      	beq.n	8002d6a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d026      	beq.n	8002d2c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002cde:	4b33      	ldr	r3, [pc, #204]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	4b32      	ldr	r3, [pc, #200]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	609a      	str	r2, [r3, #8]
 8002cea:	4b30      	ldr	r3, [pc, #192]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002cec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cee:	4b2f      	ldr	r3, [pc, #188]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cf6:	4b34      	ldr	r3, [pc, #208]	@ (8002dc8 <HAL_RCC_OscConfig+0x6a4>)
 8002cf8:	6a1a      	ldr	r2, [r3, #32]
 8002cfa:	4b33      	ldr	r3, [pc, #204]	@ (8002dc8 <HAL_RCC_OscConfig+0x6a4>)
 8002cfc:	2180      	movs	r1, #128	@ 0x80
 8002cfe:	0189      	lsls	r1, r1, #6
 8002d00:	430a      	orrs	r2, r1
 8002d02:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fe fedc 	bl	8001ac0 <HAL_GetTick>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d0e:	f7fe fed7 	bl	8001ac0 <HAL_GetTick>
 8002d12:	0002      	movs	r2, r0
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e0ca      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002d20:	4b22      	ldr	r3, [pc, #136]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	2202      	movs	r2, #2
 8002d26:	4013      	ands	r3, r2
 8002d28:	d0f1      	beq.n	8002d0e <HAL_RCC_OscConfig+0x5ea>
 8002d2a:	e01e      	b.n	8002d6a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	4b1e      	ldr	r3, [pc, #120]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002d32:	2101      	movs	r1, #1
 8002d34:	438a      	bics	r2, r1
 8002d36:	609a      	str	r2, [r3, #8]
 8002d38:	4b23      	ldr	r3, [pc, #140]	@ (8002dc8 <HAL_RCC_OscConfig+0x6a4>)
 8002d3a:	6a1a      	ldr	r2, [r3, #32]
 8002d3c:	4b22      	ldr	r3, [pc, #136]	@ (8002dc8 <HAL_RCC_OscConfig+0x6a4>)
 8002d3e:	4923      	ldr	r1, [pc, #140]	@ (8002dcc <HAL_RCC_OscConfig+0x6a8>)
 8002d40:	400a      	ands	r2, r1
 8002d42:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe febc 	bl	8001ac0 <HAL_GetTick>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d4e:	f7fe feb7 	bl	8001ac0 <HAL_GetTick>
 8002d52:	0002      	movs	r2, r0
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e0aa      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002d60:	4b12      	ldr	r3, [pc, #72]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2202      	movs	r2, #2
 8002d66:	4013      	ands	r3, r2
 8002d68:	d1f1      	bne.n	8002d4e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d100      	bne.n	8002d74 <HAL_RCC_OscConfig+0x650>
 8002d72:	e09f      	b.n	8002eb4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d100      	bne.n	8002d7c <HAL_RCC_OscConfig+0x658>
 8002d7a:	e078      	b.n	8002e6e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d159      	bne.n	8002e38 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d84:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b08      	ldr	r3, [pc, #32]	@ (8002dac <HAL_RCC_OscConfig+0x688>)
 8002d8a:	4911      	ldr	r1, [pc, #68]	@ (8002dd0 <HAL_RCC_OscConfig+0x6ac>)
 8002d8c:	400a      	ands	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d90:	f7fe fe96 	bl	8001ac0 <HAL_GetTick>
 8002d94:	0003      	movs	r3, r0
 8002d96:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d98:	e01c      	b.n	8002dd4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d9a:	f7fe fe91 	bl	8001ac0 <HAL_GetTick>
 8002d9e:	0002      	movs	r2, r0
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d915      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e084      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
 8002dac:	40021000 	.word	0x40021000
 8002db0:	ffff1fff 	.word	0xffff1fff
 8002db4:	fffffeff 	.word	0xfffffeff
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	fffffbff 	.word	0xfffffbff
 8002dc0:	00001388 	.word	0x00001388
 8002dc4:	efffffff 	.word	0xefffffff
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	ffffdfff 	.word	0xffffdfff
 8002dd0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002dd4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ec0 <HAL_RCC_OscConfig+0x79c>)
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	049b      	lsls	r3, r3, #18
 8002ddc:	4013      	ands	r3, r2
 8002dde:	d1dc      	bne.n	8002d9a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002de0:	4b37      	ldr	r3, [pc, #220]	@ (8002ec0 <HAL_RCC_OscConfig+0x79c>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a37      	ldr	r2, [pc, #220]	@ (8002ec4 <HAL_RCC_OscConfig+0x7a0>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	0019      	movs	r1, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df8:	431a      	orrs	r2, r3
 8002dfa:	4b31      	ldr	r3, [pc, #196]	@ (8002ec0 <HAL_RCC_OscConfig+0x79c>)
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e00:	4b2f      	ldr	r3, [pc, #188]	@ (8002ec0 <HAL_RCC_OscConfig+0x79c>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ec0 <HAL_RCC_OscConfig+0x79c>)
 8002e06:	2180      	movs	r1, #128	@ 0x80
 8002e08:	0449      	lsls	r1, r1, #17
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fe57 	bl	8001ac0 <HAL_GetTick>
 8002e12:	0003      	movs	r3, r0
 8002e14:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e16:	e008      	b.n	8002e2a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fe fe52 	bl	8001ac0 <HAL_GetTick>
 8002e1c:	0002      	movs	r2, r0
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e045      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002e2a:	4b25      	ldr	r3, [pc, #148]	@ (8002ec0 <HAL_RCC_OscConfig+0x79c>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	2380      	movs	r3, #128	@ 0x80
 8002e30:	049b      	lsls	r3, r3, #18
 8002e32:	4013      	ands	r3, r2
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x6f4>
 8002e36:	e03d      	b.n	8002eb4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e38:	4b21      	ldr	r3, [pc, #132]	@ (8002ec0 <HAL_RCC_OscConfig+0x79c>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b20      	ldr	r3, [pc, #128]	@ (8002ec0 <HAL_RCC_OscConfig+0x79c>)
 8002e3e:	4922      	ldr	r1, [pc, #136]	@ (8002ec8 <HAL_RCC_OscConfig+0x7a4>)
 8002e40:	400a      	ands	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e44:	f7fe fe3c 	bl	8001ac0 <HAL_GetTick>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4e:	f7fe fe37 	bl	8001ac0 <HAL_GetTick>
 8002e52:	0002      	movs	r2, r0
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e02a      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002e60:	4b17      	ldr	r3, [pc, #92]	@ (8002ec0 <HAL_RCC_OscConfig+0x79c>)
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	2380      	movs	r3, #128	@ 0x80
 8002e66:	049b      	lsls	r3, r3, #18
 8002e68:	4013      	ands	r3, r2
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCC_OscConfig+0x72a>
 8002e6c:	e022      	b.n	8002eb4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e01d      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <HAL_RCC_OscConfig+0x79c>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	2380      	movs	r3, #128	@ 0x80
 8002e84:	025b      	lsls	r3, r3, #9
 8002e86:	401a      	ands	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d10f      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	23f0      	movs	r3, #240	@ 0xf0
 8002e94:	039b      	lsls	r3, r3, #14
 8002e96:	401a      	ands	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d107      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	23c0      	movs	r3, #192	@ 0xc0
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	401a      	ands	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	0018      	movs	r0, r3
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	b00a      	add	sp, #40	@ 0x28
 8002ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ebe:	46c0      	nop			@ (mov r8, r8)
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	ff02ffff 	.word	0xff02ffff
 8002ec8:	feffffff 	.word	0xfeffffff

08002ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ecc:	b5b0      	push	{r4, r5, r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e128      	b.n	8003132 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee0:	4b96      	ldr	r3, [pc, #600]	@ (800313c <HAL_RCC_ClockConfig+0x270>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d91e      	bls.n	8002f2c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eee:	4b93      	ldr	r3, [pc, #588]	@ (800313c <HAL_RCC_ClockConfig+0x270>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	4393      	bics	r3, r2
 8002ef6:	0019      	movs	r1, r3
 8002ef8:	4b90      	ldr	r3, [pc, #576]	@ (800313c <HAL_RCC_ClockConfig+0x270>)
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f00:	f7fe fdde 	bl	8001ac0 <HAL_GetTick>
 8002f04:	0003      	movs	r3, r0
 8002f06:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f08:	e009      	b.n	8002f1e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0a:	f7fe fdd9 	bl	8001ac0 <HAL_GetTick>
 8002f0e:	0002      	movs	r2, r0
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	4a8a      	ldr	r2, [pc, #552]	@ (8003140 <HAL_RCC_ClockConfig+0x274>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e109      	b.n	8003132 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b87      	ldr	r3, [pc, #540]	@ (800313c <HAL_RCC_ClockConfig+0x270>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2201      	movs	r2, #1
 8002f24:	4013      	ands	r3, r2
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d1ee      	bne.n	8002f0a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2202      	movs	r2, #2
 8002f32:	4013      	ands	r3, r2
 8002f34:	d009      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f36:	4b83      	ldr	r3, [pc, #524]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	22f0      	movs	r2, #240	@ 0xf0
 8002f3c:	4393      	bics	r3, r2
 8002f3e:	0019      	movs	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689a      	ldr	r2, [r3, #8]
 8002f44:	4b7f      	ldr	r3, [pc, #508]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 8002f46:	430a      	orrs	r2, r1
 8002f48:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	d100      	bne.n	8002f56 <HAL_RCC_ClockConfig+0x8a>
 8002f54:	e089      	b.n	800306a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f5e:	4b79      	ldr	r3, [pc, #484]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	2380      	movs	r3, #128	@ 0x80
 8002f64:	029b      	lsls	r3, r3, #10
 8002f66:	4013      	ands	r3, r2
 8002f68:	d120      	bne.n	8002fac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e0e1      	b.n	8003132 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f76:	4b73      	ldr	r3, [pc, #460]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	2380      	movs	r3, #128	@ 0x80
 8002f7c:	049b      	lsls	r3, r3, #18
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d114      	bne.n	8002fac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e0d5      	b.n	8003132 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d106      	bne.n	8002f9c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f8e:	4b6d      	ldr	r3, [pc, #436]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2204      	movs	r2, #4
 8002f94:	4013      	ands	r3, r2
 8002f96:	d109      	bne.n	8002fac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e0ca      	b.n	8003132 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002f9c:	4b69      	ldr	r3, [pc, #420]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	2380      	movs	r3, #128	@ 0x80
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d101      	bne.n	8002fac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e0c2      	b.n	8003132 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fac:	4b65      	ldr	r3, [pc, #404]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	4393      	bics	r3, r2
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	4b62      	ldr	r3, [pc, #392]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fd7e 	bl	8001ac0 <HAL_GetTick>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d111      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fd0:	e009      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd2:	f7fe fd75 	bl	8001ac0 <HAL_GetTick>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	4a58      	ldr	r2, [pc, #352]	@ (8003140 <HAL_RCC_ClockConfig+0x274>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0a5      	b.n	8003132 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fe6:	4b57      	ldr	r3, [pc, #348]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	220c      	movs	r2, #12
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d1ef      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0x106>
 8002ff2:	e03a      	b.n	800306a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b03      	cmp	r3, #3
 8002ffa:	d111      	bne.n	8003020 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ffc:	e009      	b.n	8003012 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffe:	f7fe fd5f 	bl	8001ac0 <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	4a4d      	ldr	r2, [pc, #308]	@ (8003140 <HAL_RCC_ClockConfig+0x274>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e08f      	b.n	8003132 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003012:	4b4c      	ldr	r3, [pc, #304]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	220c      	movs	r2, #12
 8003018:	4013      	ands	r3, r2
 800301a:	2b0c      	cmp	r3, #12
 800301c:	d1ef      	bne.n	8002ffe <HAL_RCC_ClockConfig+0x132>
 800301e:	e024      	b.n	800306a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d11b      	bne.n	8003060 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003028:	e009      	b.n	800303e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800302a:	f7fe fd49 	bl	8001ac0 <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	4a42      	ldr	r2, [pc, #264]	@ (8003140 <HAL_RCC_ClockConfig+0x274>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e079      	b.n	8003132 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800303e:	4b41      	ldr	r3, [pc, #260]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	220c      	movs	r2, #12
 8003044:	4013      	ands	r3, r2
 8003046:	2b04      	cmp	r3, #4
 8003048:	d1ef      	bne.n	800302a <HAL_RCC_ClockConfig+0x15e>
 800304a:	e00e      	b.n	800306a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304c:	f7fe fd38 	bl	8001ac0 <HAL_GetTick>
 8003050:	0002      	movs	r2, r0
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	4a3a      	ldr	r2, [pc, #232]	@ (8003140 <HAL_RCC_ClockConfig+0x274>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e068      	b.n	8003132 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003060:	4b38      	ldr	r3, [pc, #224]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	220c      	movs	r2, #12
 8003066:	4013      	ands	r3, r2
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800306a:	4b34      	ldr	r3, [pc, #208]	@ (800313c <HAL_RCC_ClockConfig+0x270>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2201      	movs	r2, #1
 8003070:	4013      	ands	r3, r2
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d21e      	bcs.n	80030b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003078:	4b30      	ldr	r3, [pc, #192]	@ (800313c <HAL_RCC_ClockConfig+0x270>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2201      	movs	r2, #1
 800307e:	4393      	bics	r3, r2
 8003080:	0019      	movs	r1, r3
 8003082:	4b2e      	ldr	r3, [pc, #184]	@ (800313c <HAL_RCC_ClockConfig+0x270>)
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800308a:	f7fe fd19 	bl	8001ac0 <HAL_GetTick>
 800308e:	0003      	movs	r3, r0
 8003090:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	e009      	b.n	80030a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003094:	f7fe fd14 	bl	8001ac0 <HAL_GetTick>
 8003098:	0002      	movs	r2, r0
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	4a28      	ldr	r2, [pc, #160]	@ (8003140 <HAL_RCC_ClockConfig+0x274>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e044      	b.n	8003132 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a8:	4b24      	ldr	r3, [pc, #144]	@ (800313c <HAL_RCC_ClockConfig+0x270>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2201      	movs	r2, #1
 80030ae:	4013      	ands	r3, r2
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d1ee      	bne.n	8003094 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	2204      	movs	r2, #4
 80030bc:	4013      	ands	r3, r2
 80030be:	d009      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030c0:	4b20      	ldr	r3, [pc, #128]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a20      	ldr	r2, [pc, #128]	@ (8003148 <HAL_RCC_ClockConfig+0x27c>)
 80030c6:	4013      	ands	r3, r2
 80030c8:	0019      	movs	r1, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 80030d0:	430a      	orrs	r2, r1
 80030d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2208      	movs	r2, #8
 80030da:	4013      	ands	r3, r2
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030de:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	4a1a      	ldr	r2, [pc, #104]	@ (800314c <HAL_RCC_ClockConfig+0x280>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	00da      	lsls	r2, r3, #3
 80030ee:	4b15      	ldr	r3, [pc, #84]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 80030f0:	430a      	orrs	r2, r1
 80030f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030f4:	f000 f832 	bl	800315c <HAL_RCC_GetSysClockFreq>
 80030f8:	0001      	movs	r1, r0
 80030fa:	4b12      	ldr	r3, [pc, #72]	@ (8003144 <HAL_RCC_ClockConfig+0x278>)
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	220f      	movs	r2, #15
 8003102:	4013      	ands	r3, r2
 8003104:	4a12      	ldr	r2, [pc, #72]	@ (8003150 <HAL_RCC_ClockConfig+0x284>)
 8003106:	5cd3      	ldrb	r3, [r2, r3]
 8003108:	000a      	movs	r2, r1
 800310a:	40da      	lsrs	r2, r3
 800310c:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <HAL_RCC_ClockConfig+0x288>)
 800310e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003110:	4b11      	ldr	r3, [pc, #68]	@ (8003158 <HAL_RCC_ClockConfig+0x28c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	250b      	movs	r5, #11
 8003116:	197c      	adds	r4, r7, r5
 8003118:	0018      	movs	r0, r3
 800311a:	f7fe fc8b 	bl	8001a34 <HAL_InitTick>
 800311e:	0003      	movs	r3, r0
 8003120:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003122:	197b      	adds	r3, r7, r5
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d002      	beq.n	8003130 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800312a:	197b      	adds	r3, r7, r5
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	e000      	b.n	8003132 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	0018      	movs	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	b004      	add	sp, #16
 8003138:	bdb0      	pop	{r4, r5, r7, pc}
 800313a:	46c0      	nop			@ (mov r8, r8)
 800313c:	40022000 	.word	0x40022000
 8003140:	00001388 	.word	0x00001388
 8003144:	40021000 	.word	0x40021000
 8003148:	fffff8ff 	.word	0xfffff8ff
 800314c:	ffffc7ff 	.word	0xffffc7ff
 8003150:	080077f8 	.word	0x080077f8
 8003154:	20000000 	.word	0x20000000
 8003158:	20000004 	.word	0x20000004

0800315c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003162:	4b3c      	ldr	r3, [pc, #240]	@ (8003254 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	220c      	movs	r2, #12
 800316c:	4013      	ands	r3, r2
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d013      	beq.n	800319a <HAL_RCC_GetSysClockFreq+0x3e>
 8003172:	d85c      	bhi.n	800322e <HAL_RCC_GetSysClockFreq+0xd2>
 8003174:	2b04      	cmp	r3, #4
 8003176:	d002      	beq.n	800317e <HAL_RCC_GetSysClockFreq+0x22>
 8003178:	2b08      	cmp	r3, #8
 800317a:	d00b      	beq.n	8003194 <HAL_RCC_GetSysClockFreq+0x38>
 800317c:	e057      	b.n	800322e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800317e:	4b35      	ldr	r3, [pc, #212]	@ (8003254 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2210      	movs	r2, #16
 8003184:	4013      	ands	r3, r2
 8003186:	d002      	beq.n	800318e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003188:	4b33      	ldr	r3, [pc, #204]	@ (8003258 <HAL_RCC_GetSysClockFreq+0xfc>)
 800318a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800318c:	e05d      	b.n	800324a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800318e:	4b33      	ldr	r3, [pc, #204]	@ (800325c <HAL_RCC_GetSysClockFreq+0x100>)
 8003190:	613b      	str	r3, [r7, #16]
      break;
 8003192:	e05a      	b.n	800324a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003194:	4b32      	ldr	r3, [pc, #200]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x104>)
 8003196:	613b      	str	r3, [r7, #16]
      break;
 8003198:	e057      	b.n	800324a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	0c9b      	lsrs	r3, r3, #18
 800319e:	220f      	movs	r2, #15
 80031a0:	4013      	ands	r3, r2
 80031a2:	4a30      	ldr	r2, [pc, #192]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a4:	5cd3      	ldrb	r3, [r2, r3]
 80031a6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	0d9b      	lsrs	r3, r3, #22
 80031ac:	2203      	movs	r2, #3
 80031ae:	4013      	ands	r3, r2
 80031b0:	3301      	adds	r3, #1
 80031b2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031b4:	4b27      	ldr	r3, [pc, #156]	@ (8003254 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	2380      	movs	r3, #128	@ 0x80
 80031ba:	025b      	lsls	r3, r3, #9
 80031bc:	4013      	ands	r3, r2
 80031be:	d00f      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80031c0:	68b9      	ldr	r1, [r7, #8]
 80031c2:	000a      	movs	r2, r1
 80031c4:	0152      	lsls	r2, r2, #5
 80031c6:	1a52      	subs	r2, r2, r1
 80031c8:	0193      	lsls	r3, r2, #6
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	185b      	adds	r3, r3, r1
 80031d0:	025b      	lsls	r3, r3, #9
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	0018      	movs	r0, r3
 80031d6:	f7fc ffa9 	bl	800012c <__udivsi3>
 80031da:	0003      	movs	r3, r0
 80031dc:	617b      	str	r3, [r7, #20]
 80031de:	e023      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80031e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003254 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2210      	movs	r2, #16
 80031e6:	4013      	ands	r3, r2
 80031e8:	d00f      	beq.n	800320a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	000a      	movs	r2, r1
 80031ee:	0152      	lsls	r2, r2, #5
 80031f0:	1a52      	subs	r2, r2, r1
 80031f2:	0193      	lsls	r3, r2, #6
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	185b      	adds	r3, r3, r1
 80031fa:	021b      	lsls	r3, r3, #8
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	0018      	movs	r0, r3
 8003200:	f7fc ff94 	bl	800012c <__udivsi3>
 8003204:	0003      	movs	r3, r0
 8003206:	617b      	str	r3, [r7, #20]
 8003208:	e00e      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	000a      	movs	r2, r1
 800320e:	0152      	lsls	r2, r2, #5
 8003210:	1a52      	subs	r2, r2, r1
 8003212:	0193      	lsls	r3, r2, #6
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	185b      	adds	r3, r3, r1
 800321a:	029b      	lsls	r3, r3, #10
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	0018      	movs	r0, r3
 8003220:	f7fc ff84 	bl	800012c <__udivsi3>
 8003224:	0003      	movs	r3, r0
 8003226:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	613b      	str	r3, [r7, #16]
      break;
 800322c:	e00d      	b.n	800324a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800322e:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	0b5b      	lsrs	r3, r3, #13
 8003234:	2207      	movs	r2, #7
 8003236:	4013      	ands	r3, r2
 8003238:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	2280      	movs	r2, #128	@ 0x80
 8003240:	0212      	lsls	r2, r2, #8
 8003242:	409a      	lsls	r2, r3
 8003244:	0013      	movs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
      break;
 8003248:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800324a:	693b      	ldr	r3, [r7, #16]
}
 800324c:	0018      	movs	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	b006      	add	sp, #24
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40021000 	.word	0x40021000
 8003258:	003d0900 	.word	0x003d0900
 800325c:	00f42400 	.word	0x00f42400
 8003260:	007a1200 	.word	0x007a1200
 8003264:	08007810 	.word	0x08007810

08003268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800326c:	4b02      	ldr	r3, [pc, #8]	@ (8003278 <HAL_RCC_GetHCLKFreq+0x10>)
 800326e:	681b      	ldr	r3, [r3, #0]
}
 8003270:	0018      	movs	r0, r3
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	20000000 	.word	0x20000000

0800327c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003280:	f7ff fff2 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 8003284:	0001      	movs	r1, r0
 8003286:	4b06      	ldr	r3, [pc, #24]	@ (80032a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	2207      	movs	r2, #7
 800328e:	4013      	ands	r3, r2
 8003290:	4a04      	ldr	r2, [pc, #16]	@ (80032a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003292:	5cd3      	ldrb	r3, [r2, r3]
 8003294:	40d9      	lsrs	r1, r3
 8003296:	000b      	movs	r3, r1
}
 8003298:	0018      	movs	r0, r3
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	46c0      	nop			@ (mov r8, r8)
 80032a0:	40021000 	.word	0x40021000
 80032a4:	08007808 	.word	0x08007808

080032a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032ac:	f7ff ffdc 	bl	8003268 <HAL_RCC_GetHCLKFreq>
 80032b0:	0001      	movs	r1, r0
 80032b2:	4b06      	ldr	r3, [pc, #24]	@ (80032cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	0adb      	lsrs	r3, r3, #11
 80032b8:	2207      	movs	r2, #7
 80032ba:	4013      	ands	r3, r2
 80032bc:	4a04      	ldr	r2, [pc, #16]	@ (80032d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80032be:	5cd3      	ldrb	r3, [r2, r3]
 80032c0:	40d9      	lsrs	r1, r3
 80032c2:	000b      	movs	r3, r1
}
 80032c4:	0018      	movs	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			@ (mov r8, r8)
 80032cc:	40021000 	.word	0x40021000
 80032d0:	08007808 	.word	0x08007808

080032d4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80032dc:	2317      	movs	r3, #23
 80032de:	18fb      	adds	r3, r7, r3
 80032e0:	2200      	movs	r2, #0
 80032e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2220      	movs	r2, #32
 80032ea:	4013      	ands	r3, r2
 80032ec:	d106      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	2380      	movs	r3, #128	@ 0x80
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	4013      	ands	r3, r2
 80032f8:	d100      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80032fa:	e104      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fc:	4bb9      	ldr	r3, [pc, #740]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80032fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003300:	2380      	movs	r3, #128	@ 0x80
 8003302:	055b      	lsls	r3, r3, #21
 8003304:	4013      	ands	r3, r2
 8003306:	d10a      	bne.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003308:	4bb6      	ldr	r3, [pc, #728]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800330a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800330c:	4bb5      	ldr	r3, [pc, #724]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800330e:	2180      	movs	r1, #128	@ 0x80
 8003310:	0549      	lsls	r1, r1, #21
 8003312:	430a      	orrs	r2, r1
 8003314:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8003316:	2317      	movs	r3, #23
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4bb2      	ldr	r3, [pc, #712]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	2380      	movs	r3, #128	@ 0x80
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4013      	ands	r3, r2
 8003328:	d11a      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332a:	4baf      	ldr	r3, [pc, #700]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	4bae      	ldr	r3, [pc, #696]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003330:	2180      	movs	r1, #128	@ 0x80
 8003332:	0049      	lsls	r1, r1, #1
 8003334:	430a      	orrs	r2, r1
 8003336:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003338:	f7fe fbc2 	bl	8001ac0 <HAL_GetTick>
 800333c:	0003      	movs	r3, r0
 800333e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003340:	e008      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003342:	f7fe fbbd 	bl	8001ac0 <HAL_GetTick>
 8003346:	0002      	movs	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b64      	cmp	r3, #100	@ 0x64
 800334e:	d901      	bls.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e143      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003354:	4ba4      	ldr	r3, [pc, #656]	@ (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	2380      	movs	r3, #128	@ 0x80
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	4013      	ands	r3, r2
 800335e:	d0f0      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003360:	4ba0      	ldr	r3, [pc, #640]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	23c0      	movs	r3, #192	@ 0xc0
 8003366:	039b      	lsls	r3, r3, #14
 8003368:	4013      	ands	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	23c0      	movs	r3, #192	@ 0xc0
 8003372:	039b      	lsls	r3, r3, #14
 8003374:	4013      	ands	r3, r2
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	429a      	cmp	r2, r3
 800337a:	d107      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	23c0      	movs	r3, #192	@ 0xc0
 8003382:	039b      	lsls	r3, r3, #14
 8003384:	4013      	ands	r3, r2
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	429a      	cmp	r2, r3
 800338a:	d013      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	23c0      	movs	r3, #192	@ 0xc0
 8003392:	029b      	lsls	r3, r3, #10
 8003394:	401a      	ands	r2, r3
 8003396:	23c0      	movs	r3, #192	@ 0xc0
 8003398:	029b      	lsls	r3, r3, #10
 800339a:	429a      	cmp	r2, r3
 800339c:	d10a      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800339e:	4b91      	ldr	r3, [pc, #580]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	2380      	movs	r3, #128	@ 0x80
 80033a4:	029b      	lsls	r3, r3, #10
 80033a6:	401a      	ands	r2, r3
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	029b      	lsls	r3, r3, #10
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d101      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e113      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80033b4:	4b8b      	ldr	r3, [pc, #556]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033b6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80033b8:	23c0      	movs	r3, #192	@ 0xc0
 80033ba:	029b      	lsls	r3, r3, #10
 80033bc:	4013      	ands	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d049      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x186>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	23c0      	movs	r3, #192	@ 0xc0
 80033cc:	029b      	lsls	r3, r3, #10
 80033ce:	4013      	ands	r3, r2
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d004      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2220      	movs	r2, #32
 80033dc:	4013      	ands	r3, r2
 80033de:	d10d      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	23c0      	movs	r3, #192	@ 0xc0
 80033e6:	029b      	lsls	r3, r3, #10
 80033e8:	4013      	ands	r3, r2
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d034      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	2380      	movs	r3, #128	@ 0x80
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	4013      	ands	r3, r2
 80033fa:	d02e      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80033fc:	4b79      	ldr	r3, [pc, #484]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80033fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003400:	4a7a      	ldr	r2, [pc, #488]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003402:	4013      	ands	r3, r2
 8003404:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003406:	4b77      	ldr	r3, [pc, #476]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003408:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800340a:	4b76      	ldr	r3, [pc, #472]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800340c:	2180      	movs	r1, #128	@ 0x80
 800340e:	0309      	lsls	r1, r1, #12
 8003410:	430a      	orrs	r2, r1
 8003412:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003414:	4b73      	ldr	r3, [pc, #460]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003416:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003418:	4b72      	ldr	r3, [pc, #456]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800341a:	4975      	ldr	r1, [pc, #468]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800341c:	400a      	ands	r2, r1
 800341e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003420:	4b70      	ldr	r3, [pc, #448]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	2380      	movs	r3, #128	@ 0x80
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4013      	ands	r3, r2
 800342e:	d014      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fb46 	bl	8001ac0 <HAL_GetTick>
 8003434:	0003      	movs	r3, r0
 8003436:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003438:	e009      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800343a:	f7fe fb41 	bl	8001ac0 <HAL_GetTick>
 800343e:	0002      	movs	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	4a6b      	ldr	r2, [pc, #428]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d901      	bls.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e0c6      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800344e:	4b65      	ldr	r3, [pc, #404]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003450:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003452:	2380      	movs	r3, #128	@ 0x80
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4013      	ands	r3, r2
 8003458:	d0ef      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	2380      	movs	r3, #128	@ 0x80
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	4013      	ands	r3, r2
 8003464:	d01f      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	23c0      	movs	r3, #192	@ 0xc0
 800346c:	029b      	lsls	r3, r3, #10
 800346e:	401a      	ands	r2, r3
 8003470:	23c0      	movs	r3, #192	@ 0xc0
 8003472:	029b      	lsls	r3, r3, #10
 8003474:	429a      	cmp	r2, r3
 8003476:	d10c      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003478:	4b5a      	ldr	r3, [pc, #360]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a5e      	ldr	r2, [pc, #376]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 800347e:	4013      	ands	r3, r2
 8003480:	0019      	movs	r1, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689a      	ldr	r2, [r3, #8]
 8003486:	23c0      	movs	r3, #192	@ 0xc0
 8003488:	039b      	lsls	r3, r3, #14
 800348a:	401a      	ands	r2, r3
 800348c:	4b55      	ldr	r3, [pc, #340]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800348e:	430a      	orrs	r2, r1
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	4b54      	ldr	r3, [pc, #336]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003494:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	23c0      	movs	r3, #192	@ 0xc0
 800349c:	029b      	lsls	r3, r3, #10
 800349e:	401a      	ands	r2, r3
 80034a0:	4b50      	ldr	r3, [pc, #320]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034a2:	430a      	orrs	r2, r1
 80034a4:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2220      	movs	r2, #32
 80034ac:	4013      	ands	r3, r2
 80034ae:	d01f      	beq.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	23c0      	movs	r3, #192	@ 0xc0
 80034b6:	029b      	lsls	r3, r3, #10
 80034b8:	401a      	ands	r2, r3
 80034ba:	23c0      	movs	r3, #192	@ 0xc0
 80034bc:	029b      	lsls	r3, r3, #10
 80034be:	429a      	cmp	r2, r3
 80034c0:	d10c      	bne.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x208>
 80034c2:	4b48      	ldr	r3, [pc, #288]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a4c      	ldr	r2, [pc, #304]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	23c0      	movs	r3, #192	@ 0xc0
 80034d2:	039b      	lsls	r3, r3, #14
 80034d4:	401a      	ands	r2, r3
 80034d6:	4b43      	ldr	r3, [pc, #268]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034d8:	430a      	orrs	r2, r1
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	4b41      	ldr	r3, [pc, #260]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034de:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	23c0      	movs	r3, #192	@ 0xc0
 80034e6:	029b      	lsls	r3, r3, #10
 80034e8:	401a      	ands	r2, r3
 80034ea:	4b3e      	ldr	r3, [pc, #248]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034ec:	430a      	orrs	r2, r1
 80034ee:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034f0:	2317      	movs	r3, #23
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d105      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fa:	4b3a      	ldr	r3, [pc, #232]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80034fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034fe:	4b39      	ldr	r3, [pc, #228]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003500:	493e      	ldr	r1, [pc, #248]	@ (80035fc <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003502:	400a      	ands	r2, r1
 8003504:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2201      	movs	r2, #1
 800350c:	4013      	ands	r3, r2
 800350e:	d009      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003510:	4b34      	ldr	r3, [pc, #208]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003512:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003514:	2203      	movs	r2, #3
 8003516:	4393      	bics	r3, r2
 8003518:	0019      	movs	r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	4b31      	ldr	r3, [pc, #196]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003520:	430a      	orrs	r2, r1
 8003522:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2202      	movs	r2, #2
 800352a:	4013      	ands	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800352e:	4b2d      	ldr	r3, [pc, #180]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003532:	220c      	movs	r2, #12
 8003534:	4393      	bics	r3, r2
 8003536:	0019      	movs	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	4b29      	ldr	r3, [pc, #164]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800353e:	430a      	orrs	r2, r1
 8003540:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2204      	movs	r2, #4
 8003548:	4013      	ands	r3, r2
 800354a:	d009      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800354c:	4b25      	ldr	r3, [pc, #148]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800354e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003550:	4a2b      	ldr	r2, [pc, #172]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003552:	4013      	ands	r3, r2
 8003554:	0019      	movs	r1, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	4b22      	ldr	r3, [pc, #136]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800355c:	430a      	orrs	r2, r1
 800355e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2208      	movs	r2, #8
 8003566:	4013      	ands	r3, r2
 8003568:	d009      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800356a:	4b1e      	ldr	r3, [pc, #120]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800356c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800356e:	4a25      	ldr	r2, [pc, #148]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003570:	4013      	ands	r3, r2
 8003572:	0019      	movs	r1, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699a      	ldr	r2, [r3, #24]
 8003578:	4b1a      	ldr	r3, [pc, #104]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800357a:	430a      	orrs	r2, r1
 800357c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	2380      	movs	r3, #128	@ 0x80
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	4013      	ands	r3, r2
 8003588:	d009      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800358a:	4b16      	ldr	r3, [pc, #88]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800358c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800358e:	4a17      	ldr	r2, [pc, #92]	@ (80035ec <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003590:	4013      	ands	r3, r2
 8003592:	0019      	movs	r1, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69da      	ldr	r2, [r3, #28]
 8003598:	4b12      	ldr	r3, [pc, #72]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800359a:	430a      	orrs	r2, r1
 800359c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2240      	movs	r2, #64	@ 0x40
 80035a4:	4013      	ands	r3, r2
 80035a6:	d009      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035a8:	4b0e      	ldr	r3, [pc, #56]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ac:	4a16      	ldr	r2, [pc, #88]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	0019      	movs	r1, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035b6:	4b0b      	ldr	r3, [pc, #44]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035b8:	430a      	orrs	r2, r1
 80035ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2280      	movs	r2, #128	@ 0x80
 80035c2:	4013      	ands	r3, r2
 80035c4:	d009      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80035c6:	4b07      	ldr	r3, [pc, #28]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035ca:	4a10      	ldr	r2, [pc, #64]	@ (800360c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	0019      	movs	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a1a      	ldr	r2, [r3, #32]
 80035d4:	4b03      	ldr	r3, [pc, #12]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80035d6:	430a      	orrs	r2, r1
 80035d8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	0018      	movs	r0, r3
 80035de:	46bd      	mov	sp, r7
 80035e0:	b006      	add	sp, #24
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40007000 	.word	0x40007000
 80035ec:	fffcffff 	.word	0xfffcffff
 80035f0:	fff7ffff 	.word	0xfff7ffff
 80035f4:	00001388 	.word	0x00001388
 80035f8:	ffcfffff 	.word	0xffcfffff
 80035fc:	efffffff 	.word	0xefffffff
 8003600:	fffff3ff 	.word	0xfffff3ff
 8003604:	ffffcfff 	.word	0xffffcfff
 8003608:	fbffffff 	.word	0xfbffffff
 800360c:	fff3ffff 	.word	0xfff3ffff

08003610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e044      	b.n	80036ac <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d107      	bne.n	800363a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2278      	movs	r2, #120	@ 0x78
 800362e:	2100      	movs	r1, #0
 8003630:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	0018      	movs	r0, r3
 8003636:	f7fd fabf 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2224      	movs	r2, #36	@ 0x24
 800363e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2101      	movs	r1, #1
 800364c:	438a      	bics	r2, r1
 800364e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003654:	2b00      	cmp	r3, #0
 8003656:	d003      	beq.n	8003660 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	0018      	movs	r0, r3
 800365c:	f000 ffb4 	bl	80045c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	0018      	movs	r0, r3
 8003664:	f000 fd12 	bl	800408c <UART_SetConfig>
 8003668:	0003      	movs	r3, r0
 800366a:	2b01      	cmp	r3, #1
 800366c:	d101      	bne.n	8003672 <HAL_UART_Init+0x62>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e01c      	b.n	80036ac <HAL_UART_Init+0x9c>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	490d      	ldr	r1, [pc, #52]	@ (80036b4 <HAL_UART_Init+0xa4>)
 800367e:	400a      	ands	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	212a      	movs	r1, #42	@ 0x2a
 800368e:	438a      	bics	r2, r1
 8003690:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2101      	movs	r1, #1
 800369e:	430a      	orrs	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	0018      	movs	r0, r3
 80036a6:	f001 f843 	bl	8004730 <UART_CheckIdleState>
 80036aa:	0003      	movs	r3, r0
}
 80036ac:	0018      	movs	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b002      	add	sp, #8
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	ffffb7ff 	.word	0xffffb7ff

080036b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	1dbb      	adds	r3, r7, #6
 80036c4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d000      	beq.n	80036d0 <HAL_UART_Transmit_DMA+0x18>
 80036ce:	e077      	b.n	80037c0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_UART_Transmit_DMA+0x26>
 80036d6:	1dbb      	adds	r3, r7, #6
 80036d8:	881b      	ldrh	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e06f      	b.n	80037c2 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	2380      	movs	r3, #128	@ 0x80
 80036e8:	015b      	lsls	r3, r3, #5
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d109      	bne.n	8003702 <HAL_UART_Transmit_DMA+0x4a>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d105      	bne.n	8003702 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2201      	movs	r2, #1
 80036fa:	4013      	ands	r3, r2
 80036fc:	d001      	beq.n	8003702 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e05f      	b.n	80037c2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1dba      	adds	r2, r7, #6
 800370c:	2150      	movs	r1, #80	@ 0x50
 800370e:	8812      	ldrh	r2, [r2, #0]
 8003710:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1dba      	adds	r2, r7, #6
 8003716:	2152      	movs	r1, #82	@ 0x52
 8003718:	8812      	ldrh	r2, [r2, #0]
 800371a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2284      	movs	r2, #132	@ 0x84
 8003720:	2100      	movs	r1, #0
 8003722:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2221      	movs	r2, #33	@ 0x21
 8003728:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372e:	2b00      	cmp	r3, #0
 8003730:	d027      	beq.n	8003782 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003736:	4a25      	ldr	r2, [pc, #148]	@ (80037cc <HAL_UART_Transmit_DMA+0x114>)
 8003738:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800373e:	4a24      	ldr	r2, [pc, #144]	@ (80037d0 <HAL_UART_Transmit_DMA+0x118>)
 8003740:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003746:	4a23      	ldr	r2, [pc, #140]	@ (80037d4 <HAL_UART_Transmit_DMA+0x11c>)
 8003748:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374e:	2200      	movs	r2, #0
 8003750:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375a:	0019      	movs	r1, r3
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3328      	adds	r3, #40	@ 0x28
 8003762:	001a      	movs	r2, r3
 8003764:	1dbb      	adds	r3, r7, #6
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	f7fe fb2e 	bl	8001dc8 <HAL_DMA_Start_IT>
 800376c:	1e03      	subs	r3, r0, #0
 800376e:	d008      	beq.n	8003782 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2284      	movs	r2, #132	@ 0x84
 8003774:	2110      	movs	r1, #16
 8003776:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e01f      	b.n	80037c2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2240      	movs	r2, #64	@ 0x40
 8003788:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800378a:	f3ef 8310 	mrs	r3, PRIMASK
 800378e:	613b      	str	r3, [r7, #16]
  return(result);
 8003790:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003792:	61fb      	str	r3, [r7, #28]
 8003794:	2301      	movs	r3, #1
 8003796:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f383 8810 	msr	PRIMASK, r3
}
 800379e:	46c0      	nop			@ (mov r8, r8)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2180      	movs	r1, #128	@ 0x80
 80037ac:	430a      	orrs	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
 80037b0:	69fb      	ldr	r3, [r7, #28]
 80037b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f383 8810 	msr	PRIMASK, r3
}
 80037ba:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
  }
}
 80037c2:	0018      	movs	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	b008      	add	sp, #32
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	46c0      	nop			@ (mov r8, r8)
 80037cc:	08004bb1 	.word	0x08004bb1
 80037d0:	08004c49 	.word	0x08004c49
 80037d4:	08004e4f 	.word	0x08004e4f

080037d8 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	@ 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037e0:	f3ef 8310 	mrs	r3, PRIMASK
 80037e4:	617b      	str	r3, [r7, #20]
  return(result);
 80037e6:	697b      	ldr	r3, [r7, #20]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ea:	2301      	movs	r3, #1
 80037ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f383 8810 	msr	PRIMASK, r3
}
 80037f4:	46c0      	nop			@ (mov r8, r8)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	21c0      	movs	r1, #192	@ 0xc0
 8003802:	438a      	bics	r2, r1
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003808:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f383 8810 	msr	PRIMASK, r3
}
 8003810:	46c0      	nop			@ (mov r8, r8)

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2280      	movs	r2, #128	@ 0x80
 800381a:	4013      	ands	r3, r2
 800381c:	2b80      	cmp	r3, #128	@ 0x80
 800381e:	d135      	bne.n	800388c <HAL_UART_AbortTransmit+0xb4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003820:	f3ef 8310 	mrs	r3, PRIMASK
 8003824:	60bb      	str	r3, [r7, #8]
  return(result);
 8003826:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003828:	623b      	str	r3, [r7, #32]
 800382a:	2301      	movs	r3, #1
 800382c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f383 8810 	msr	PRIMASK, r3
}
 8003834:	46c0      	nop			@ (mov r8, r8)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689a      	ldr	r2, [r3, #8]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2180      	movs	r1, #128	@ 0x80
 8003842:	438a      	bics	r2, r1
 8003844:	609a      	str	r2, [r3, #8]
 8003846:	6a3b      	ldr	r3, [r7, #32]
 8003848:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f383 8810 	msr	PRIMASK, r3
}
 8003850:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003856:	2b00      	cmp	r3, #0
 8003858:	d018      	beq.n	800388c <HAL_UART_AbortTransmit+0xb4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800385e:	2200      	movs	r2, #0
 8003860:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	0018      	movs	r0, r3
 8003868:	f7fe fb14 	bl	8001e94 <HAL_DMA_Abort>
 800386c:	1e03      	subs	r3, r0, #0
 800386e:	d00d      	beq.n	800388c <HAL_UART_AbortTransmit+0xb4>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003874:	0018      	movs	r0, r3
 8003876:	f7fe fc42 	bl	80020fe <HAL_DMA_GetError>
 800387a:	0003      	movs	r3, r0
 800387c:	2b20      	cmp	r3, #32
 800387e:	d105      	bne.n	800388c <HAL_UART_AbortTransmit+0xb4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2284      	movs	r2, #132	@ 0x84
 8003884:	2110      	movs	r1, #16
 8003886:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e007      	b.n	800389c <HAL_UART_AbortTransmit+0xc4>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2252      	movs	r2, #82	@ 0x52
 8003890:	2100      	movs	r1, #0
 8003892:	5299      	strh	r1, [r3, r2]


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b00a      	add	sp, #40	@ 0x28
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b092      	sub	sp, #72	@ 0x48
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ac:	f3ef 8310 	mrs	r3, PRIMASK
 80038b0:	623b      	str	r3, [r7, #32]
  return(result);
 80038b2:	6a3b      	ldr	r3, [r7, #32]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038b6:	2301      	movs	r3, #1
 80038b8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038bc:	f383 8810 	msr	PRIMASK, r3
}
 80038c0:	46c0      	nop			@ (mov r8, r8)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	494b      	ldr	r1, [pc, #300]	@ (80039fc <HAL_UART_AbortReceive+0x158>)
 80038ce:	400a      	ands	r2, r1
 80038d0:	601a      	str	r2, [r3, #0]
 80038d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d8:	f383 8810 	msr	PRIMASK, r3
}
 80038dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038de:	f3ef 8310 	mrs	r3, PRIMASK
 80038e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80038e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80038e8:	2301      	movs	r3, #1
 80038ea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ee:	f383 8810 	msr	PRIMASK, r3
}
 80038f2:	46c0      	nop			@ (mov r8, r8)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2101      	movs	r1, #1
 8003900:	438a      	bics	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
 8003904:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003906:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390a:	f383 8810 	msr	PRIMASK, r3
}
 800390e:	46c0      	nop			@ (mov r8, r8)

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003914:	2b01      	cmp	r3, #1
 8003916:	d118      	bne.n	800394a <HAL_UART_AbortReceive+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003918:	f3ef 8310 	mrs	r3, PRIMASK
 800391c:	617b      	str	r3, [r7, #20]
  return(result);
 800391e:	697b      	ldr	r3, [r7, #20]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003920:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003922:	2301      	movs	r3, #1
 8003924:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f383 8810 	msr	PRIMASK, r3
}
 800392c:	46c0      	nop			@ (mov r8, r8)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2110      	movs	r1, #16
 800393a:	438a      	bics	r2, r1
 800393c:	601a      	str	r2, [r3, #0]
 800393e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003940:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f383 8810 	msr	PRIMASK, r3
}
 8003948:	46c0      	nop			@ (mov r8, r8)
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	2240      	movs	r2, #64	@ 0x40
 8003952:	4013      	ands	r3, r2
 8003954:	2b40      	cmp	r3, #64	@ 0x40
 8003956:	d135      	bne.n	80039c4 <HAL_UART_AbortReceive+0x120>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003958:	f3ef 8310 	mrs	r3, PRIMASK
 800395c:	60bb      	str	r3, [r7, #8]
  return(result);
 800395e:	68bb      	ldr	r3, [r7, #8]
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003960:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003962:	2301      	movs	r3, #1
 8003964:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f383 8810 	msr	PRIMASK, r3
}
 800396c:	46c0      	nop			@ (mov r8, r8)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2140      	movs	r1, #64	@ 0x40
 800397a:	438a      	bics	r2, r1
 800397c:	609a      	str	r2, [r3, #8]
 800397e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003980:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f383 8810 	msr	PRIMASK, r3
}
 8003988:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800398e:	2b00      	cmp	r3, #0
 8003990:	d018      	beq.n	80039c4 <HAL_UART_AbortReceive+0x120>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003996:	2200      	movs	r2, #0
 8003998:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800399e:	0018      	movs	r0, r3
 80039a0:	f7fe fa78 	bl	8001e94 <HAL_DMA_Abort>
 80039a4:	1e03      	subs	r3, r0, #0
 80039a6:	d00d      	beq.n	80039c4 <HAL_UART_AbortReceive+0x120>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039ac:	0018      	movs	r0, r3
 80039ae:	f7fe fba6 	bl	80020fe <HAL_DMA_GetError>
 80039b2:	0003      	movs	r3, r0
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d105      	bne.n	80039c4 <HAL_UART_AbortReceive+0x120>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2284      	movs	r2, #132	@ 0x84
 80039bc:	2110      	movs	r1, #16
 80039be:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e017      	b.n	80039f4 <HAL_UART_AbortReceive+0x150>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	225a      	movs	r2, #90	@ 0x5a
 80039c8:	2100      	movs	r1, #0
 80039ca:	5299      	strh	r1, [r3, r2]

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	220f      	movs	r2, #15
 80039d2:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2108      	movs	r1, #8
 80039e0:	430a      	orrs	r2, r1
 80039e2:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2280      	movs	r2, #128	@ 0x80
 80039e8:	2120      	movs	r1, #32
 80039ea:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	0018      	movs	r0, r3
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b012      	add	sp, #72	@ 0x48
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	fffffedf 	.word	0xfffffedf

08003a00 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b0ab      	sub	sp, #172	@ 0xac
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	22a4      	movs	r2, #164	@ 0xa4
 8003a10:	18b9      	adds	r1, r7, r2
 8003a12:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	20a0      	movs	r0, #160	@ 0xa0
 8003a1c:	1839      	adds	r1, r7, r0
 8003a1e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	219c      	movs	r1, #156	@ 0x9c
 8003a28:	1879      	adds	r1, r7, r1
 8003a2a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003a2c:	0011      	movs	r1, r2
 8003a2e:	18bb      	adds	r3, r7, r2
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a99      	ldr	r2, [pc, #612]	@ (8003c98 <HAL_UART_IRQHandler+0x298>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	2298      	movs	r2, #152	@ 0x98
 8003a38:	18bc      	adds	r4, r7, r2
 8003a3a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003a3c:	18bb      	adds	r3, r7, r2
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d114      	bne.n	8003a6e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003a44:	187b      	adds	r3, r7, r1
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	d00f      	beq.n	8003a6e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003a4e:	183b      	adds	r3, r7, r0
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2220      	movs	r2, #32
 8003a54:	4013      	ands	r3, r2
 8003a56:	d00a      	beq.n	8003a6e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d100      	bne.n	8003a62 <HAL_UART_IRQHandler+0x62>
 8003a60:	e2be      	b.n	8003fe0 <HAL_UART_IRQHandler+0x5e0>
      {
        huart->RxISR(huart);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	0010      	movs	r0, r2
 8003a6a:	4798      	blx	r3
      }
      return;
 8003a6c:	e2b8      	b.n	8003fe0 <HAL_UART_IRQHandler+0x5e0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003a6e:	2398      	movs	r3, #152	@ 0x98
 8003a70:	18fb      	adds	r3, r7, r3
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d100      	bne.n	8003a7a <HAL_UART_IRQHandler+0x7a>
 8003a78:	e114      	b.n	8003ca4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003a7a:	239c      	movs	r3, #156	@ 0x9c
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2201      	movs	r2, #1
 8003a82:	4013      	ands	r3, r2
 8003a84:	d106      	bne.n	8003a94 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003a86:	23a0      	movs	r3, #160	@ 0xa0
 8003a88:	18fb      	adds	r3, r7, r3
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a83      	ldr	r2, [pc, #524]	@ (8003c9c <HAL_UART_IRQHandler+0x29c>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d100      	bne.n	8003a94 <HAL_UART_IRQHandler+0x94>
 8003a92:	e107      	b.n	8003ca4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003a94:	23a4      	movs	r3, #164	@ 0xa4
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d012      	beq.n	8003ac6 <HAL_UART_IRQHandler+0xc6>
 8003aa0:	23a0      	movs	r3, #160	@ 0xa0
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	2380      	movs	r3, #128	@ 0x80
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d00b      	beq.n	8003ac6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2284      	movs	r2, #132	@ 0x84
 8003aba:	589b      	ldr	r3, [r3, r2]
 8003abc:	2201      	movs	r2, #1
 8003abe:	431a      	orrs	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2184      	movs	r1, #132	@ 0x84
 8003ac4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ac6:	23a4      	movs	r3, #164	@ 0xa4
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2202      	movs	r2, #2
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d011      	beq.n	8003af6 <HAL_UART_IRQHandler+0xf6>
 8003ad2:	239c      	movs	r3, #156	@ 0x9c
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	4013      	ands	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2284      	movs	r2, #132	@ 0x84
 8003aea:	589b      	ldr	r3, [r3, r2]
 8003aec:	2204      	movs	r2, #4
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2184      	movs	r1, #132	@ 0x84
 8003af4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003af6:	23a4      	movs	r3, #164	@ 0xa4
 8003af8:	18fb      	adds	r3, r7, r3
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2204      	movs	r2, #4
 8003afe:	4013      	ands	r3, r2
 8003b00:	d011      	beq.n	8003b26 <HAL_UART_IRQHandler+0x126>
 8003b02:	239c      	movs	r3, #156	@ 0x9c
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	d00b      	beq.n	8003b26 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2204      	movs	r2, #4
 8003b14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2284      	movs	r2, #132	@ 0x84
 8003b1a:	589b      	ldr	r3, [r3, r2]
 8003b1c:	2202      	movs	r2, #2
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2184      	movs	r1, #132	@ 0x84
 8003b24:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b26:	23a4      	movs	r3, #164	@ 0xa4
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2208      	movs	r2, #8
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d017      	beq.n	8003b62 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b32:	23a0      	movs	r3, #160	@ 0xa0
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	d105      	bne.n	8003b4a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003b3e:	239c      	movs	r3, #156	@ 0x9c
 8003b40:	18fb      	adds	r3, r7, r3
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2201      	movs	r2, #1
 8003b46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003b48:	d00b      	beq.n	8003b62 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2208      	movs	r2, #8
 8003b50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2284      	movs	r2, #132	@ 0x84
 8003b56:	589b      	ldr	r3, [r3, r2]
 8003b58:	2208      	movs	r2, #8
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2184      	movs	r1, #132	@ 0x84
 8003b60:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003b62:	23a4      	movs	r3, #164	@ 0xa4
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	2380      	movs	r3, #128	@ 0x80
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d013      	beq.n	8003b98 <HAL_UART_IRQHandler+0x198>
 8003b70:	23a0      	movs	r3, #160	@ 0xa0
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	2380      	movs	r3, #128	@ 0x80
 8003b78:	04db      	lsls	r3, r3, #19
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	d00c      	beq.n	8003b98 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2280      	movs	r2, #128	@ 0x80
 8003b84:	0112      	lsls	r2, r2, #4
 8003b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2284      	movs	r2, #132	@ 0x84
 8003b8c:	589b      	ldr	r3, [r3, r2]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	431a      	orrs	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2184      	movs	r1, #132	@ 0x84
 8003b96:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2284      	movs	r2, #132	@ 0x84
 8003b9c:	589b      	ldr	r3, [r3, r2]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d100      	bne.n	8003ba4 <HAL_UART_IRQHandler+0x1a4>
 8003ba2:	e21f      	b.n	8003fe4 <HAL_UART_IRQHandler+0x5e4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ba4:	23a4      	movs	r3, #164	@ 0xa4
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2220      	movs	r2, #32
 8003bac:	4013      	ands	r3, r2
 8003bae:	d00e      	beq.n	8003bce <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003bb0:	23a0      	movs	r3, #160	@ 0xa0
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d008      	beq.n	8003bce <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d004      	beq.n	8003bce <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	0010      	movs	r0, r2
 8003bcc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2284      	movs	r2, #132	@ 0x84
 8003bd2:	589b      	ldr	r3, [r3, r2]
 8003bd4:	2194      	movs	r1, #148	@ 0x94
 8003bd6:	187a      	adds	r2, r7, r1
 8003bd8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2240      	movs	r2, #64	@ 0x40
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b40      	cmp	r3, #64	@ 0x40
 8003be6:	d004      	beq.n	8003bf2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003be8:	187b      	adds	r3, r7, r1
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2228      	movs	r2, #40	@ 0x28
 8003bee:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003bf0:	d047      	beq.n	8003c82 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 ff77 	bl	8004ae8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	2240      	movs	r2, #64	@ 0x40
 8003c02:	4013      	ands	r3, r2
 8003c04:	2b40      	cmp	r3, #64	@ 0x40
 8003c06:	d137      	bne.n	8003c78 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c08:	f3ef 8310 	mrs	r3, PRIMASK
 8003c0c:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003c0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c10:	2090      	movs	r0, #144	@ 0x90
 8003c12:	183a      	adds	r2, r7, r0
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	2301      	movs	r3, #1
 8003c18:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c1c:	f383 8810 	msr	PRIMASK, r3
}
 8003c20:	46c0      	nop			@ (mov r8, r8)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2140      	movs	r1, #64	@ 0x40
 8003c2e:	438a      	bics	r2, r1
 8003c30:	609a      	str	r2, [r3, #8]
 8003c32:	183b      	adds	r3, r7, r0
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c3a:	f383 8810 	msr	PRIMASK, r3
}
 8003c3e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d012      	beq.n	8003c6e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c4c:	4a14      	ldr	r2, [pc, #80]	@ (8003ca0 <HAL_UART_IRQHandler+0x2a0>)
 8003c4e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c54:	0018      	movs	r0, r3
 8003c56:	f7fe f95d 	bl	8001f14 <HAL_DMA_Abort_IT>
 8003c5a:	1e03      	subs	r3, r0, #0
 8003c5c:	d01a      	beq.n	8003c94 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c68:	0018      	movs	r0, r3
 8003c6a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	e012      	b.n	8003c94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	0018      	movs	r0, r3
 8003c72:	f000 f9e5 	bl	8004040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c76:	e00d      	b.n	8003c94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f000 f9e0 	bl	8004040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c80:	e008      	b.n	8003c94 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	0018      	movs	r0, r3
 8003c86:	f000 f9db 	bl	8004040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2284      	movs	r2, #132	@ 0x84
 8003c8e:	2100      	movs	r1, #0
 8003c90:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003c92:	e1a7      	b.n	8003fe4 <HAL_UART_IRQHandler+0x5e4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	46c0      	nop			@ (mov r8, r8)
    return;
 8003c96:	e1a5      	b.n	8003fe4 <HAL_UART_IRQHandler+0x5e4>
 8003c98:	0000080f 	.word	0x0000080f
 8003c9c:	04000120 	.word	0x04000120
 8003ca0:	08004ed3 	.word	0x08004ed3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d000      	beq.n	8003cae <HAL_UART_IRQHandler+0x2ae>
 8003cac:	e159      	b.n	8003f62 <HAL_UART_IRQHandler+0x562>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003cae:	23a4      	movs	r3, #164	@ 0xa4
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d100      	bne.n	8003cbc <HAL_UART_IRQHandler+0x2bc>
 8003cba:	e152      	b.n	8003f62 <HAL_UART_IRQHandler+0x562>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003cbc:	23a0      	movs	r3, #160	@ 0xa0
 8003cbe:	18fb      	adds	r3, r7, r3
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2210      	movs	r2, #16
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	d100      	bne.n	8003cca <HAL_UART_IRQHandler+0x2ca>
 8003cc8:	e14b      	b.n	8003f62 <HAL_UART_IRQHandler+0x562>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2210      	movs	r2, #16
 8003cd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2240      	movs	r2, #64	@ 0x40
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b40      	cmp	r3, #64	@ 0x40
 8003cde:	d000      	beq.n	8003ce2 <HAL_UART_IRQHandler+0x2e2>
 8003ce0:	e0bf      	b.n	8003e62 <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	217e      	movs	r1, #126	@ 0x7e
 8003cec:	187b      	adds	r3, r7, r1
 8003cee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003cf0:	187b      	adds	r3, r7, r1
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d100      	bne.n	8003cfa <HAL_UART_IRQHandler+0x2fa>
 8003cf8:	e095      	b.n	8003e26 <HAL_UART_IRQHandler+0x426>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2258      	movs	r2, #88	@ 0x58
 8003cfe:	5a9b      	ldrh	r3, [r3, r2]
 8003d00:	187a      	adds	r2, r7, r1
 8003d02:	8812      	ldrh	r2, [r2, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d300      	bcc.n	8003d0a <HAL_UART_IRQHandler+0x30a>
 8003d08:	e08d      	b.n	8003e26 <HAL_UART_IRQHandler+0x426>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	187a      	adds	r2, r7, r1
 8003d0e:	215a      	movs	r1, #90	@ 0x5a
 8003d10:	8812      	ldrh	r2, [r2, #0]
 8003d12:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d16f      	bne.n	8003e02 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d22:	f3ef 8310 	mrs	r3, PRIMASK
 8003d26:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d2a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d32:	f383 8810 	msr	PRIMASK, r3
}
 8003d36:	46c0      	nop			@ (mov r8, r8)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	49ad      	ldr	r1, [pc, #692]	@ (8003ff8 <HAL_UART_IRQHandler+0x5f8>)
 8003d44:	400a      	ands	r2, r1
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4e:	f383 8810 	msr	PRIMASK, r3
}
 8003d52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d54:	f3ef 8310 	mrs	r3, PRIMASK
 8003d58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d5e:	2301      	movs	r3, #1
 8003d60:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d64:	f383 8810 	msr	PRIMASK, r3
}
 8003d68:	46c0      	nop			@ (mov r8, r8)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689a      	ldr	r2, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2101      	movs	r1, #1
 8003d76:	438a      	bics	r2, r1
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d7c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d80:	f383 8810 	msr	PRIMASK, r3
}
 8003d84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d86:	f3ef 8310 	mrs	r3, PRIMASK
 8003d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003d8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d8e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d90:	2301      	movs	r3, #1
 8003d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d96:	f383 8810 	msr	PRIMASK, r3
}
 8003d9a:	46c0      	nop			@ (mov r8, r8)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689a      	ldr	r2, [r3, #8]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2140      	movs	r1, #64	@ 0x40
 8003da8:	438a      	bics	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
 8003dac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dae:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003db2:	f383 8810 	msr	PRIMASK, r3
}
 8003db6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2280      	movs	r2, #128	@ 0x80
 8003dbc:	2120      	movs	r1, #32
 8003dbe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dca:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003dcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003dd6:	f383 8810 	msr	PRIMASK, r3
}
 8003dda:	46c0      	nop			@ (mov r8, r8)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2110      	movs	r1, #16
 8003de8:	438a      	bics	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]
 8003dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003df2:	f383 8810 	msr	PRIMASK, r3
}
 8003df6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	f7fe f849 	bl	8001e94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2258      	movs	r2, #88	@ 0x58
 8003e0c:	5a9a      	ldrh	r2, [r3, r2]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	215a      	movs	r1, #90	@ 0x5a
 8003e12:	5a5b      	ldrh	r3, [r3, r1]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	0011      	movs	r1, r2
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f7fc fc84 	bl	800072c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003e24:	e0e0      	b.n	8003fe8 <HAL_UART_IRQHandler+0x5e8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2258      	movs	r2, #88	@ 0x58
 8003e2a:	5a9b      	ldrh	r3, [r3, r2]
 8003e2c:	227e      	movs	r2, #126	@ 0x7e
 8003e2e:	18ba      	adds	r2, r7, r2
 8003e30:	8812      	ldrh	r2, [r2, #0]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d000      	beq.n	8003e38 <HAL_UART_IRQHandler+0x438>
 8003e36:	e0d7      	b.n	8003fe8 <HAL_UART_IRQHandler+0x5e8>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2220      	movs	r2, #32
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d000      	beq.n	8003e4a <HAL_UART_IRQHandler+0x44a>
 8003e48:	e0ce      	b.n	8003fe8 <HAL_UART_IRQHandler+0x5e8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2258      	movs	r2, #88	@ 0x58
 8003e54:	5a9a      	ldrh	r2, [r3, r2]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	0011      	movs	r1, r2
 8003e5a:	0018      	movs	r0, r3
 8003e5c:	f7fc fc66 	bl	800072c <HAL_UARTEx_RxEventCallback>
      return;
 8003e60:	e0c2      	b.n	8003fe8 <HAL_UART_IRQHandler+0x5e8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2258      	movs	r2, #88	@ 0x58
 8003e66:	5a99      	ldrh	r1, [r3, r2]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	225a      	movs	r2, #90	@ 0x5a
 8003e6c:	5a9b      	ldrh	r3, [r3, r2]
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	208e      	movs	r0, #142	@ 0x8e
 8003e72:	183b      	adds	r3, r7, r0
 8003e74:	1a8a      	subs	r2, r1, r2
 8003e76:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	225a      	movs	r2, #90	@ 0x5a
 8003e7c:	5a9b      	ldrh	r3, [r3, r2]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d100      	bne.n	8003e86 <HAL_UART_IRQHandler+0x486>
 8003e84:	e0b2      	b.n	8003fec <HAL_UART_IRQHandler+0x5ec>
          && (nb_rx_data > 0U))
 8003e86:	183b      	adds	r3, r7, r0
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d100      	bne.n	8003e90 <HAL_UART_IRQHandler+0x490>
 8003e8e:	e0ad      	b.n	8003fec <HAL_UART_IRQHandler+0x5ec>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e90:	f3ef 8310 	mrs	r3, PRIMASK
 8003e94:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e96:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e98:	2488      	movs	r4, #136	@ 0x88
 8003e9a:	193a      	adds	r2, r7, r4
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f383 8810 	msr	PRIMASK, r3
}
 8003ea8:	46c0      	nop			@ (mov r8, r8)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4951      	ldr	r1, [pc, #324]	@ (8003ffc <HAL_UART_IRQHandler+0x5fc>)
 8003eb6:	400a      	ands	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]
 8003eba:	193b      	adds	r3, r7, r4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f383 8810 	msr	PRIMASK, r3
}
 8003ec6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ecc:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ece:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed0:	2484      	movs	r4, #132	@ 0x84
 8003ed2:	193a      	adds	r2, r7, r4
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f383 8810 	msr	PRIMASK, r3
}
 8003ee0:	46c0      	nop			@ (mov r8, r8)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689a      	ldr	r2, [r3, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2101      	movs	r1, #1
 8003eee:	438a      	bics	r2, r1
 8003ef0:	609a      	str	r2, [r3, #8]
 8003ef2:	193b      	adds	r3, r7, r4
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	f383 8810 	msr	PRIMASK, r3
}
 8003efe:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2280      	movs	r2, #128	@ 0x80
 8003f04:	2120      	movs	r1, #32
 8003f06:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f14:	f3ef 8310 	mrs	r3, PRIMASK
 8003f18:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f1c:	2480      	movs	r4, #128	@ 0x80
 8003f1e:	193a      	adds	r2, r7, r4
 8003f20:	6013      	str	r3, [r2, #0]
 8003f22:	2301      	movs	r3, #1
 8003f24:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f28:	f383 8810 	msr	PRIMASK, r3
}
 8003f2c:	46c0      	nop			@ (mov r8, r8)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2110      	movs	r1, #16
 8003f3a:	438a      	bics	r2, r1
 8003f3c:	601a      	str	r2, [r3, #0]
 8003f3e:	193b      	adds	r3, r7, r4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f46:	f383 8810 	msr	PRIMASK, r3
}
 8003f4a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f52:	183b      	adds	r3, r7, r0
 8003f54:	881a      	ldrh	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0011      	movs	r1, r2
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f7fc fbe6 	bl	800072c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f60:	e044      	b.n	8003fec <HAL_UART_IRQHandler+0x5ec>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003f62:	23a4      	movs	r3, #164	@ 0xa4
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	2380      	movs	r3, #128	@ 0x80
 8003f6a:	035b      	lsls	r3, r3, #13
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	d010      	beq.n	8003f92 <HAL_UART_IRQHandler+0x592>
 8003f70:	239c      	movs	r3, #156	@ 0x9c
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	2380      	movs	r3, #128	@ 0x80
 8003f78:	03db      	lsls	r3, r3, #15
 8003f7a:	4013      	ands	r3, r2
 8003f7c:	d009      	beq.n	8003f92 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2280      	movs	r2, #128	@ 0x80
 8003f84:	0352      	lsls	r2, r2, #13
 8003f86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	f000 ffdf 	bl	8004f4e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003f90:	e02f      	b.n	8003ff2 <HAL_UART_IRQHandler+0x5f2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003f92:	23a4      	movs	r3, #164	@ 0xa4
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2280      	movs	r2, #128	@ 0x80
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d00f      	beq.n	8003fbe <HAL_UART_IRQHandler+0x5be>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003f9e:	23a0      	movs	r3, #160	@ 0xa0
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2280      	movs	r2, #128	@ 0x80
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d01e      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x5f0>
    {
      huart->TxISR(huart);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	0010      	movs	r0, r2
 8003fba:	4798      	blx	r3
    }
    return;
 8003fbc:	e018      	b.n	8003ff0 <HAL_UART_IRQHandler+0x5f0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003fbe:	23a4      	movs	r3, #164	@ 0xa4
 8003fc0:	18fb      	adds	r3, r7, r3
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2240      	movs	r2, #64	@ 0x40
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	d013      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x5f2>
 8003fca:	23a0      	movs	r3, #160	@ 0xa0
 8003fcc:	18fb      	adds	r3, r7, r3
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2240      	movs	r2, #64	@ 0x40
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	d00d      	beq.n	8003ff2 <HAL_UART_IRQHandler+0x5f2>
  {
    UART_EndTransmit_IT(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 ff8d 	bl	8004ef8 <UART_EndTransmit_IT>
    return;
 8003fde:	e008      	b.n	8003ff2 <HAL_UART_IRQHandler+0x5f2>
      return;
 8003fe0:	46c0      	nop			@ (mov r8, r8)
 8003fe2:	e006      	b.n	8003ff2 <HAL_UART_IRQHandler+0x5f2>
    return;
 8003fe4:	46c0      	nop			@ (mov r8, r8)
 8003fe6:	e004      	b.n	8003ff2 <HAL_UART_IRQHandler+0x5f2>
      return;
 8003fe8:	46c0      	nop			@ (mov r8, r8)
 8003fea:	e002      	b.n	8003ff2 <HAL_UART_IRQHandler+0x5f2>
      return;
 8003fec:	46c0      	nop			@ (mov r8, r8)
 8003fee:	e000      	b.n	8003ff2 <HAL_UART_IRQHandler+0x5f2>
    return;
 8003ff0:	46c0      	nop			@ (mov r8, r8)
  }

}
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b02b      	add	sp, #172	@ 0xac
 8003ff6:	bd90      	pop	{r4, r7, pc}
 8003ff8:	fffffeff 	.word	0xfffffeff
 8003ffc:	fffffedf 	.word	0xfffffedf

08004000 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004008:	46c0      	nop			@ (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004018:	46c0      	nop			@ (mov r8, r8)
 800401a:	46bd      	mov	sp, r7
 800401c:	b002      	add	sp, #8
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004028:	46c0      	nop			@ (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	b002      	add	sp, #8
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004038:	46c0      	nop			@ (mov r8, r8)
 800403a:	46bd      	mov	sp, r7
 800403c:	b002      	add	sp, #8
 800403e:	bd80      	pop	{r7, pc}

08004040 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004048:	46c0      	nop			@ (mov r8, r8)
 800404a:	46bd      	mov	sp, r7
 800404c:	b002      	add	sp, #8
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800405c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2280      	movs	r2, #128	@ 0x80
 8004062:	589b      	ldr	r3, [r3, r2]
 8004064:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4313      	orrs	r3, r2
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b004      	add	sp, #16
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2284      	movs	r2, #132	@ 0x84
 8004080:	589b      	ldr	r3, [r3, r2]
}
 8004082:	0018      	movs	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	b002      	add	sp, #8
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800408c:	b5b0      	push	{r4, r5, r7, lr}
 800408e:	b08e      	sub	sp, #56	@ 0x38
 8004090:	af00      	add	r7, sp, #0
 8004092:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004094:	231a      	movs	r3, #26
 8004096:	2218      	movs	r2, #24
 8004098:	189b      	adds	r3, r3, r2
 800409a:	19db      	adds	r3, r3, r7
 800409c:	2200      	movs	r2, #0
 800409e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	431a      	orrs	r2, r3
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4ac3      	ldr	r2, [pc, #780]	@ (80043cc <UART_SetConfig+0x340>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	0019      	movs	r1, r3
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040ca:	430a      	orrs	r2, r1
 80040cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4abe      	ldr	r2, [pc, #760]	@ (80043d0 <UART_SetConfig+0x344>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	0019      	movs	r1, r3
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4ab8      	ldr	r2, [pc, #736]	@ (80043d4 <UART_SetConfig+0x348>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d004      	beq.n	8004100 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040fc:	4313      	orrs	r3, r2
 80040fe:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	4ab4      	ldr	r2, [pc, #720]	@ (80043d8 <UART_SetConfig+0x34c>)
 8004108:	4013      	ands	r3, r2
 800410a:	0019      	movs	r1, r3
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004112:	430a      	orrs	r2, r1
 8004114:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4ab0      	ldr	r2, [pc, #704]	@ (80043dc <UART_SetConfig+0x350>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d131      	bne.n	8004184 <UART_SetConfig+0xf8>
 8004120:	4baf      	ldr	r3, [pc, #700]	@ (80043e0 <UART_SetConfig+0x354>)
 8004122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004124:	2203      	movs	r2, #3
 8004126:	4013      	ands	r3, r2
 8004128:	2b03      	cmp	r3, #3
 800412a:	d01d      	beq.n	8004168 <UART_SetConfig+0xdc>
 800412c:	d823      	bhi.n	8004176 <UART_SetConfig+0xea>
 800412e:	2b02      	cmp	r3, #2
 8004130:	d00c      	beq.n	800414c <UART_SetConfig+0xc0>
 8004132:	d820      	bhi.n	8004176 <UART_SetConfig+0xea>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d002      	beq.n	800413e <UART_SetConfig+0xb2>
 8004138:	2b01      	cmp	r3, #1
 800413a:	d00e      	beq.n	800415a <UART_SetConfig+0xce>
 800413c:	e01b      	b.n	8004176 <UART_SetConfig+0xea>
 800413e:	231b      	movs	r3, #27
 8004140:	2218      	movs	r2, #24
 8004142:	189b      	adds	r3, r3, r2
 8004144:	19db      	adds	r3, r3, r7
 8004146:	2201      	movs	r2, #1
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	e0b4      	b.n	80042b6 <UART_SetConfig+0x22a>
 800414c:	231b      	movs	r3, #27
 800414e:	2218      	movs	r2, #24
 8004150:	189b      	adds	r3, r3, r2
 8004152:	19db      	adds	r3, r3, r7
 8004154:	2202      	movs	r2, #2
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	e0ad      	b.n	80042b6 <UART_SetConfig+0x22a>
 800415a:	231b      	movs	r3, #27
 800415c:	2218      	movs	r2, #24
 800415e:	189b      	adds	r3, r3, r2
 8004160:	19db      	adds	r3, r3, r7
 8004162:	2204      	movs	r2, #4
 8004164:	701a      	strb	r2, [r3, #0]
 8004166:	e0a6      	b.n	80042b6 <UART_SetConfig+0x22a>
 8004168:	231b      	movs	r3, #27
 800416a:	2218      	movs	r2, #24
 800416c:	189b      	adds	r3, r3, r2
 800416e:	19db      	adds	r3, r3, r7
 8004170:	2208      	movs	r2, #8
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e09f      	b.n	80042b6 <UART_SetConfig+0x22a>
 8004176:	231b      	movs	r3, #27
 8004178:	2218      	movs	r2, #24
 800417a:	189b      	adds	r3, r3, r2
 800417c:	19db      	adds	r3, r3, r7
 800417e:	2210      	movs	r2, #16
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e098      	b.n	80042b6 <UART_SetConfig+0x22a>
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a96      	ldr	r2, [pc, #600]	@ (80043e4 <UART_SetConfig+0x358>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d131      	bne.n	80041f2 <UART_SetConfig+0x166>
 800418e:	4b94      	ldr	r3, [pc, #592]	@ (80043e0 <UART_SetConfig+0x354>)
 8004190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004192:	220c      	movs	r2, #12
 8004194:	4013      	ands	r3, r2
 8004196:	2b0c      	cmp	r3, #12
 8004198:	d01d      	beq.n	80041d6 <UART_SetConfig+0x14a>
 800419a:	d823      	bhi.n	80041e4 <UART_SetConfig+0x158>
 800419c:	2b08      	cmp	r3, #8
 800419e:	d00c      	beq.n	80041ba <UART_SetConfig+0x12e>
 80041a0:	d820      	bhi.n	80041e4 <UART_SetConfig+0x158>
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <UART_SetConfig+0x120>
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	d00e      	beq.n	80041c8 <UART_SetConfig+0x13c>
 80041aa:	e01b      	b.n	80041e4 <UART_SetConfig+0x158>
 80041ac:	231b      	movs	r3, #27
 80041ae:	2218      	movs	r2, #24
 80041b0:	189b      	adds	r3, r3, r2
 80041b2:	19db      	adds	r3, r3, r7
 80041b4:	2200      	movs	r2, #0
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	e07d      	b.n	80042b6 <UART_SetConfig+0x22a>
 80041ba:	231b      	movs	r3, #27
 80041bc:	2218      	movs	r2, #24
 80041be:	189b      	adds	r3, r3, r2
 80041c0:	19db      	adds	r3, r3, r7
 80041c2:	2202      	movs	r2, #2
 80041c4:	701a      	strb	r2, [r3, #0]
 80041c6:	e076      	b.n	80042b6 <UART_SetConfig+0x22a>
 80041c8:	231b      	movs	r3, #27
 80041ca:	2218      	movs	r2, #24
 80041cc:	189b      	adds	r3, r3, r2
 80041ce:	19db      	adds	r3, r3, r7
 80041d0:	2204      	movs	r2, #4
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	e06f      	b.n	80042b6 <UART_SetConfig+0x22a>
 80041d6:	231b      	movs	r3, #27
 80041d8:	2218      	movs	r2, #24
 80041da:	189b      	adds	r3, r3, r2
 80041dc:	19db      	adds	r3, r3, r7
 80041de:	2208      	movs	r2, #8
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e068      	b.n	80042b6 <UART_SetConfig+0x22a>
 80041e4:	231b      	movs	r3, #27
 80041e6:	2218      	movs	r2, #24
 80041e8:	189b      	adds	r3, r3, r2
 80041ea:	19db      	adds	r3, r3, r7
 80041ec:	2210      	movs	r2, #16
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e061      	b.n	80042b6 <UART_SetConfig+0x22a>
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a7c      	ldr	r2, [pc, #496]	@ (80043e8 <UART_SetConfig+0x35c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d106      	bne.n	800420a <UART_SetConfig+0x17e>
 80041fc:	231b      	movs	r3, #27
 80041fe:	2218      	movs	r2, #24
 8004200:	189b      	adds	r3, r3, r2
 8004202:	19db      	adds	r3, r3, r7
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
 8004208:	e055      	b.n	80042b6 <UART_SetConfig+0x22a>
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a77      	ldr	r2, [pc, #476]	@ (80043ec <UART_SetConfig+0x360>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d106      	bne.n	8004222 <UART_SetConfig+0x196>
 8004214:	231b      	movs	r3, #27
 8004216:	2218      	movs	r2, #24
 8004218:	189b      	adds	r3, r3, r2
 800421a:	19db      	adds	r3, r3, r7
 800421c:	2200      	movs	r2, #0
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	e049      	b.n	80042b6 <UART_SetConfig+0x22a>
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a6b      	ldr	r2, [pc, #428]	@ (80043d4 <UART_SetConfig+0x348>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d13e      	bne.n	80042aa <UART_SetConfig+0x21e>
 800422c:	4b6c      	ldr	r3, [pc, #432]	@ (80043e0 <UART_SetConfig+0x354>)
 800422e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004230:	23c0      	movs	r3, #192	@ 0xc0
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	4013      	ands	r3, r2
 8004236:	22c0      	movs	r2, #192	@ 0xc0
 8004238:	0112      	lsls	r2, r2, #4
 800423a:	4293      	cmp	r3, r2
 800423c:	d027      	beq.n	800428e <UART_SetConfig+0x202>
 800423e:	22c0      	movs	r2, #192	@ 0xc0
 8004240:	0112      	lsls	r2, r2, #4
 8004242:	4293      	cmp	r3, r2
 8004244:	d82a      	bhi.n	800429c <UART_SetConfig+0x210>
 8004246:	2280      	movs	r2, #128	@ 0x80
 8004248:	0112      	lsls	r2, r2, #4
 800424a:	4293      	cmp	r3, r2
 800424c:	d011      	beq.n	8004272 <UART_SetConfig+0x1e6>
 800424e:	2280      	movs	r2, #128	@ 0x80
 8004250:	0112      	lsls	r2, r2, #4
 8004252:	4293      	cmp	r3, r2
 8004254:	d822      	bhi.n	800429c <UART_SetConfig+0x210>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d004      	beq.n	8004264 <UART_SetConfig+0x1d8>
 800425a:	2280      	movs	r2, #128	@ 0x80
 800425c:	00d2      	lsls	r2, r2, #3
 800425e:	4293      	cmp	r3, r2
 8004260:	d00e      	beq.n	8004280 <UART_SetConfig+0x1f4>
 8004262:	e01b      	b.n	800429c <UART_SetConfig+0x210>
 8004264:	231b      	movs	r3, #27
 8004266:	2218      	movs	r2, #24
 8004268:	189b      	adds	r3, r3, r2
 800426a:	19db      	adds	r3, r3, r7
 800426c:	2200      	movs	r2, #0
 800426e:	701a      	strb	r2, [r3, #0]
 8004270:	e021      	b.n	80042b6 <UART_SetConfig+0x22a>
 8004272:	231b      	movs	r3, #27
 8004274:	2218      	movs	r2, #24
 8004276:	189b      	adds	r3, r3, r2
 8004278:	19db      	adds	r3, r3, r7
 800427a:	2202      	movs	r2, #2
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	e01a      	b.n	80042b6 <UART_SetConfig+0x22a>
 8004280:	231b      	movs	r3, #27
 8004282:	2218      	movs	r2, #24
 8004284:	189b      	adds	r3, r3, r2
 8004286:	19db      	adds	r3, r3, r7
 8004288:	2204      	movs	r2, #4
 800428a:	701a      	strb	r2, [r3, #0]
 800428c:	e013      	b.n	80042b6 <UART_SetConfig+0x22a>
 800428e:	231b      	movs	r3, #27
 8004290:	2218      	movs	r2, #24
 8004292:	189b      	adds	r3, r3, r2
 8004294:	19db      	adds	r3, r3, r7
 8004296:	2208      	movs	r2, #8
 8004298:	701a      	strb	r2, [r3, #0]
 800429a:	e00c      	b.n	80042b6 <UART_SetConfig+0x22a>
 800429c:	231b      	movs	r3, #27
 800429e:	2218      	movs	r2, #24
 80042a0:	189b      	adds	r3, r3, r2
 80042a2:	19db      	adds	r3, r3, r7
 80042a4:	2210      	movs	r2, #16
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	e005      	b.n	80042b6 <UART_SetConfig+0x22a>
 80042aa:	231b      	movs	r3, #27
 80042ac:	2218      	movs	r2, #24
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	19db      	adds	r3, r3, r7
 80042b2:	2210      	movs	r2, #16
 80042b4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a46      	ldr	r2, [pc, #280]	@ (80043d4 <UART_SetConfig+0x348>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d000      	beq.n	80042c2 <UART_SetConfig+0x236>
 80042c0:	e09a      	b.n	80043f8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042c2:	231b      	movs	r3, #27
 80042c4:	2218      	movs	r2, #24
 80042c6:	189b      	adds	r3, r3, r2
 80042c8:	19db      	adds	r3, r3, r7
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d01d      	beq.n	800430c <UART_SetConfig+0x280>
 80042d0:	dc20      	bgt.n	8004314 <UART_SetConfig+0x288>
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d015      	beq.n	8004302 <UART_SetConfig+0x276>
 80042d6:	dc1d      	bgt.n	8004314 <UART_SetConfig+0x288>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <UART_SetConfig+0x256>
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d005      	beq.n	80042ec <UART_SetConfig+0x260>
 80042e0:	e018      	b.n	8004314 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e2:	f7fe ffcb 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 80042e6:	0003      	movs	r3, r0
 80042e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80042ea:	e01c      	b.n	8004326 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042ec:	4b3c      	ldr	r3, [pc, #240]	@ (80043e0 <UART_SetConfig+0x354>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2210      	movs	r2, #16
 80042f2:	4013      	ands	r3, r2
 80042f4:	d002      	beq.n	80042fc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80042f6:	4b3e      	ldr	r3, [pc, #248]	@ (80043f0 <UART_SetConfig+0x364>)
 80042f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80042fa:	e014      	b.n	8004326 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80042fc:	4b3d      	ldr	r3, [pc, #244]	@ (80043f4 <UART_SetConfig+0x368>)
 80042fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004300:	e011      	b.n	8004326 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004302:	f7fe ff2b 	bl	800315c <HAL_RCC_GetSysClockFreq>
 8004306:	0003      	movs	r3, r0
 8004308:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800430a:	e00c      	b.n	8004326 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800430c:	2380      	movs	r3, #128	@ 0x80
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004312:	e008      	b.n	8004326 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004314:	2300      	movs	r3, #0
 8004316:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004318:	231a      	movs	r3, #26
 800431a:	2218      	movs	r2, #24
 800431c:	189b      	adds	r3, r3, r2
 800431e:	19db      	adds	r3, r3, r7
 8004320:	2201      	movs	r2, #1
 8004322:	701a      	strb	r2, [r3, #0]
        break;
 8004324:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004328:	2b00      	cmp	r3, #0
 800432a:	d100      	bne.n	800432e <UART_SetConfig+0x2a2>
 800432c:	e133      	b.n	8004596 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	0013      	movs	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	189b      	adds	r3, r3, r2
 8004338:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800433a:	429a      	cmp	r2, r3
 800433c:	d305      	bcc.n	800434a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004344:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004346:	429a      	cmp	r2, r3
 8004348:	d906      	bls.n	8004358 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800434a:	231a      	movs	r3, #26
 800434c:	2218      	movs	r2, #24
 800434e:	189b      	adds	r3, r3, r2
 8004350:	19db      	adds	r3, r3, r7
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
 8004356:	e11e      	b.n	8004596 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	6939      	ldr	r1, [r7, #16]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	000b      	movs	r3, r1
 8004366:	0e1b      	lsrs	r3, r3, #24
 8004368:	0010      	movs	r0, r2
 800436a:	0205      	lsls	r5, r0, #8
 800436c:	431d      	orrs	r5, r3
 800436e:	000b      	movs	r3, r1
 8004370:	021c      	lsls	r4, r3, #8
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	085b      	lsrs	r3, r3, #1
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	68b8      	ldr	r0, [r7, #8]
 8004380:	68f9      	ldr	r1, [r7, #12]
 8004382:	1900      	adds	r0, r0, r4
 8004384:	4169      	adcs	r1, r5
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	2300      	movs	r3, #0
 800438e:	607b      	str	r3, [r7, #4]
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	f7fb ff56 	bl	8000244 <__aeabi_uldivmod>
 8004398:	0002      	movs	r2, r0
 800439a:	000b      	movs	r3, r1
 800439c:	0013      	movs	r3, r2
 800439e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043a2:	23c0      	movs	r3, #192	@ 0xc0
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d309      	bcc.n	80043be <UART_SetConfig+0x332>
 80043aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043ac:	2380      	movs	r3, #128	@ 0x80
 80043ae:	035b      	lsls	r3, r3, #13
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d204      	bcs.n	80043be <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043ba:	60da      	str	r2, [r3, #12]
 80043bc:	e0eb      	b.n	8004596 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 80043be:	231a      	movs	r3, #26
 80043c0:	2218      	movs	r2, #24
 80043c2:	189b      	adds	r3, r3, r2
 80043c4:	19db      	adds	r3, r3, r7
 80043c6:	2201      	movs	r2, #1
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	e0e4      	b.n	8004596 <UART_SetConfig+0x50a>
 80043cc:	efff69f3 	.word	0xefff69f3
 80043d0:	ffffcfff 	.word	0xffffcfff
 80043d4:	40004800 	.word	0x40004800
 80043d8:	fffff4ff 	.word	0xfffff4ff
 80043dc:	40013800 	.word	0x40013800
 80043e0:	40021000 	.word	0x40021000
 80043e4:	40004400 	.word	0x40004400
 80043e8:	40004c00 	.word	0x40004c00
 80043ec:	40005000 	.word	0x40005000
 80043f0:	003d0900 	.word	0x003d0900
 80043f4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	69da      	ldr	r2, [r3, #28]
 80043fc:	2380      	movs	r3, #128	@ 0x80
 80043fe:	021b      	lsls	r3, r3, #8
 8004400:	429a      	cmp	r2, r3
 8004402:	d000      	beq.n	8004406 <UART_SetConfig+0x37a>
 8004404:	e070      	b.n	80044e8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004406:	231b      	movs	r3, #27
 8004408:	2218      	movs	r2, #24
 800440a:	189b      	adds	r3, r3, r2
 800440c:	19db      	adds	r3, r3, r7
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b08      	cmp	r3, #8
 8004412:	d822      	bhi.n	800445a <UART_SetConfig+0x3ce>
 8004414:	009a      	lsls	r2, r3, #2
 8004416:	4b67      	ldr	r3, [pc, #412]	@ (80045b4 <UART_SetConfig+0x528>)
 8004418:	18d3      	adds	r3, r2, r3
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800441e:	f7fe ff2d 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8004422:	0003      	movs	r3, r0
 8004424:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004426:	e021      	b.n	800446c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004428:	f7fe ff3e 	bl	80032a8 <HAL_RCC_GetPCLK2Freq>
 800442c:	0003      	movs	r3, r0
 800442e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004430:	e01c      	b.n	800446c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004432:	4b61      	ldr	r3, [pc, #388]	@ (80045b8 <UART_SetConfig+0x52c>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2210      	movs	r2, #16
 8004438:	4013      	ands	r3, r2
 800443a:	d002      	beq.n	8004442 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800443c:	4b5f      	ldr	r3, [pc, #380]	@ (80045bc <UART_SetConfig+0x530>)
 800443e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004440:	e014      	b.n	800446c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004442:	4b5f      	ldr	r3, [pc, #380]	@ (80045c0 <UART_SetConfig+0x534>)
 8004444:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004446:	e011      	b.n	800446c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004448:	f7fe fe88 	bl	800315c <HAL_RCC_GetSysClockFreq>
 800444c:	0003      	movs	r3, r0
 800444e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004450:	e00c      	b.n	800446c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004452:	2380      	movs	r3, #128	@ 0x80
 8004454:	021b      	lsls	r3, r3, #8
 8004456:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004458:	e008      	b.n	800446c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800445e:	231a      	movs	r3, #26
 8004460:	2218      	movs	r2, #24
 8004462:	189b      	adds	r3, r3, r2
 8004464:	19db      	adds	r3, r3, r7
 8004466:	2201      	movs	r2, #1
 8004468:	701a      	strb	r2, [r3, #0]
        break;
 800446a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800446c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800446e:	2b00      	cmp	r3, #0
 8004470:	d100      	bne.n	8004474 <UART_SetConfig+0x3e8>
 8004472:	e090      	b.n	8004596 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004476:	005a      	lsls	r2, r3, #1
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	18d2      	adds	r2, r2, r3
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	0019      	movs	r1, r3
 8004486:	0010      	movs	r0, r2
 8004488:	f7fb fe50 	bl	800012c <__udivsi3>
 800448c:	0003      	movs	r3, r0
 800448e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004492:	2b0f      	cmp	r3, #15
 8004494:	d921      	bls.n	80044da <UART_SetConfig+0x44e>
 8004496:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004498:	2380      	movs	r3, #128	@ 0x80
 800449a:	025b      	lsls	r3, r3, #9
 800449c:	429a      	cmp	r2, r3
 800449e:	d21c      	bcs.n	80044da <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80044a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	200e      	movs	r0, #14
 80044a6:	2418      	movs	r4, #24
 80044a8:	1903      	adds	r3, r0, r4
 80044aa:	19db      	adds	r3, r3, r7
 80044ac:	210f      	movs	r1, #15
 80044ae:	438a      	bics	r2, r1
 80044b0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80044b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b4:	085b      	lsrs	r3, r3, #1
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2207      	movs	r2, #7
 80044ba:	4013      	ands	r3, r2
 80044bc:	b299      	uxth	r1, r3
 80044be:	1903      	adds	r3, r0, r4
 80044c0:	19db      	adds	r3, r3, r7
 80044c2:	1902      	adds	r2, r0, r4
 80044c4:	19d2      	adds	r2, r2, r7
 80044c6:	8812      	ldrh	r2, [r2, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	1902      	adds	r2, r0, r4
 80044d2:	19d2      	adds	r2, r2, r7
 80044d4:	8812      	ldrh	r2, [r2, #0]
 80044d6:	60da      	str	r2, [r3, #12]
 80044d8:	e05d      	b.n	8004596 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 80044da:	231a      	movs	r3, #26
 80044dc:	2218      	movs	r2, #24
 80044de:	189b      	adds	r3, r3, r2
 80044e0:	19db      	adds	r3, r3, r7
 80044e2:	2201      	movs	r2, #1
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	e056      	b.n	8004596 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044e8:	231b      	movs	r3, #27
 80044ea:	2218      	movs	r2, #24
 80044ec:	189b      	adds	r3, r3, r2
 80044ee:	19db      	adds	r3, r3, r7
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b08      	cmp	r3, #8
 80044f4:	d822      	bhi.n	800453c <UART_SetConfig+0x4b0>
 80044f6:	009a      	lsls	r2, r3, #2
 80044f8:	4b32      	ldr	r3, [pc, #200]	@ (80045c4 <UART_SetConfig+0x538>)
 80044fa:	18d3      	adds	r3, r2, r3
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004500:	f7fe febc 	bl	800327c <HAL_RCC_GetPCLK1Freq>
 8004504:	0003      	movs	r3, r0
 8004506:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004508:	e021      	b.n	800454e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800450a:	f7fe fecd 	bl	80032a8 <HAL_RCC_GetPCLK2Freq>
 800450e:	0003      	movs	r3, r0
 8004510:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004512:	e01c      	b.n	800454e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004514:	4b28      	ldr	r3, [pc, #160]	@ (80045b8 <UART_SetConfig+0x52c>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2210      	movs	r2, #16
 800451a:	4013      	ands	r3, r2
 800451c:	d002      	beq.n	8004524 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800451e:	4b27      	ldr	r3, [pc, #156]	@ (80045bc <UART_SetConfig+0x530>)
 8004520:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004522:	e014      	b.n	800454e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004524:	4b26      	ldr	r3, [pc, #152]	@ (80045c0 <UART_SetConfig+0x534>)
 8004526:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004528:	e011      	b.n	800454e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800452a:	f7fe fe17 	bl	800315c <HAL_RCC_GetSysClockFreq>
 800452e:	0003      	movs	r3, r0
 8004530:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8004532:	e00c      	b.n	800454e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004534:	2380      	movs	r3, #128	@ 0x80
 8004536:	021b      	lsls	r3, r3, #8
 8004538:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800453a:	e008      	b.n	800454e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800453c:	2300      	movs	r3, #0
 800453e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8004540:	231a      	movs	r3, #26
 8004542:	2218      	movs	r2, #24
 8004544:	189b      	adds	r3, r3, r2
 8004546:	19db      	adds	r3, r3, r7
 8004548:	2201      	movs	r2, #1
 800454a:	701a      	strb	r2, [r3, #0]
        break;
 800454c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800454e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	085a      	lsrs	r2, r3, #1
 800455a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800455c:	18d2      	adds	r2, r2, r3
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	0019      	movs	r1, r3
 8004564:	0010      	movs	r0, r2
 8004566:	f7fb fde1 	bl	800012c <__udivsi3>
 800456a:	0003      	movs	r3, r0
 800456c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800456e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004570:	2b0f      	cmp	r3, #15
 8004572:	d90a      	bls.n	800458a <UART_SetConfig+0x4fe>
 8004574:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004576:	2380      	movs	r3, #128	@ 0x80
 8004578:	025b      	lsls	r3, r3, #9
 800457a:	429a      	cmp	r2, r3
 800457c:	d205      	bcs.n	800458a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800457e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004580:	b29a      	uxth	r2, r3
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	60da      	str	r2, [r3, #12]
 8004588:	e005      	b.n	8004596 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800458a:	231a      	movs	r3, #26
 800458c:	2218      	movs	r2, #24
 800458e:	189b      	adds	r3, r3, r2
 8004590:	19db      	adds	r3, r3, r7
 8004592:	2201      	movs	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	2200      	movs	r2, #0
 800459a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	2200      	movs	r2, #0
 80045a0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80045a2:	231a      	movs	r3, #26
 80045a4:	2218      	movs	r2, #24
 80045a6:	189b      	adds	r3, r3, r2
 80045a8:	19db      	adds	r3, r3, r7
 80045aa:	781b      	ldrb	r3, [r3, #0]
}
 80045ac:	0018      	movs	r0, r3
 80045ae:	46bd      	mov	sp, r7
 80045b0:	b00e      	add	sp, #56	@ 0x38
 80045b2:	bdb0      	pop	{r4, r5, r7, pc}
 80045b4:	0800781c 	.word	0x0800781c
 80045b8:	40021000 	.word	0x40021000
 80045bc:	003d0900 	.word	0x003d0900
 80045c0:	00f42400 	.word	0x00f42400
 80045c4:	08007840 	.word	0x08007840

080045c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d4:	2208      	movs	r2, #8
 80045d6:	4013      	ands	r3, r2
 80045d8:	d00b      	beq.n	80045f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	4a4a      	ldr	r2, [pc, #296]	@ (800470c <UART_AdvFeatureConfig+0x144>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	0019      	movs	r1, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	2201      	movs	r2, #1
 80045f8:	4013      	ands	r3, r2
 80045fa:	d00b      	beq.n	8004614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	4a43      	ldr	r2, [pc, #268]	@ (8004710 <UART_AdvFeatureConfig+0x148>)
 8004604:	4013      	ands	r3, r2
 8004606:	0019      	movs	r1, r3
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004618:	2202      	movs	r2, #2
 800461a:	4013      	ands	r3, r2
 800461c:	d00b      	beq.n	8004636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4a3b      	ldr	r2, [pc, #236]	@ (8004714 <UART_AdvFeatureConfig+0x14c>)
 8004626:	4013      	ands	r3, r2
 8004628:	0019      	movs	r1, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463a:	2204      	movs	r2, #4
 800463c:	4013      	ands	r3, r2
 800463e:	d00b      	beq.n	8004658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	4a34      	ldr	r2, [pc, #208]	@ (8004718 <UART_AdvFeatureConfig+0x150>)
 8004648:	4013      	ands	r3, r2
 800464a:	0019      	movs	r1, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465c:	2210      	movs	r2, #16
 800465e:	4013      	ands	r3, r2
 8004660:	d00b      	beq.n	800467a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	4a2c      	ldr	r2, [pc, #176]	@ (800471c <UART_AdvFeatureConfig+0x154>)
 800466a:	4013      	ands	r3, r2
 800466c:	0019      	movs	r1, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467e:	2220      	movs	r2, #32
 8004680:	4013      	ands	r3, r2
 8004682:	d00b      	beq.n	800469c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	4a25      	ldr	r2, [pc, #148]	@ (8004720 <UART_AdvFeatureConfig+0x158>)
 800468c:	4013      	ands	r3, r2
 800468e:	0019      	movs	r1, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	2240      	movs	r2, #64	@ 0x40
 80046a2:	4013      	ands	r3, r2
 80046a4:	d01d      	beq.n	80046e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004724 <UART_AdvFeatureConfig+0x15c>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	0019      	movs	r1, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046c2:	2380      	movs	r3, #128	@ 0x80
 80046c4:	035b      	lsls	r3, r3, #13
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d10b      	bne.n	80046e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	4a15      	ldr	r2, [pc, #84]	@ (8004728 <UART_AdvFeatureConfig+0x160>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	0019      	movs	r1, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e6:	2280      	movs	r2, #128	@ 0x80
 80046e8:	4013      	ands	r3, r2
 80046ea:	d00b      	beq.n	8004704 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	4a0e      	ldr	r2, [pc, #56]	@ (800472c <UART_AdvFeatureConfig+0x164>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	0019      	movs	r1, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	605a      	str	r2, [r3, #4]
  }
}
 8004704:	46c0      	nop			@ (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	b002      	add	sp, #8
 800470a:	bd80      	pop	{r7, pc}
 800470c:	ffff7fff 	.word	0xffff7fff
 8004710:	fffdffff 	.word	0xfffdffff
 8004714:	fffeffff 	.word	0xfffeffff
 8004718:	fffbffff 	.word	0xfffbffff
 800471c:	ffffefff 	.word	0xffffefff
 8004720:	ffffdfff 	.word	0xffffdfff
 8004724:	ffefffff 	.word	0xffefffff
 8004728:	ff9fffff 	.word	0xff9fffff
 800472c:	fff7ffff 	.word	0xfff7ffff

08004730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b092      	sub	sp, #72	@ 0x48
 8004734:	af02      	add	r7, sp, #8
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2284      	movs	r2, #132	@ 0x84
 800473c:	2100      	movs	r1, #0
 800473e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004740:	f7fd f9be 	bl	8001ac0 <HAL_GetTick>
 8004744:	0003      	movs	r3, r0
 8004746:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2208      	movs	r2, #8
 8004750:	4013      	ands	r3, r2
 8004752:	2b08      	cmp	r3, #8
 8004754:	d12c      	bne.n	80047b0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004758:	2280      	movs	r2, #128	@ 0x80
 800475a:	0391      	lsls	r1, r2, #14
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	4a46      	ldr	r2, [pc, #280]	@ (8004878 <UART_CheckIdleState+0x148>)
 8004760:	9200      	str	r2, [sp, #0]
 8004762:	2200      	movs	r2, #0
 8004764:	f000 f88c 	bl	8004880 <UART_WaitOnFlagUntilTimeout>
 8004768:	1e03      	subs	r3, r0, #0
 800476a:	d021      	beq.n	80047b0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476c:	f3ef 8310 	mrs	r3, PRIMASK
 8004770:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004774:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004776:	2301      	movs	r3, #1
 8004778:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800477a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800477c:	f383 8810 	msr	PRIMASK, r3
}
 8004780:	46c0      	nop			@ (mov r8, r8)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2180      	movs	r1, #128	@ 0x80
 800478e:	438a      	bics	r2, r1
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004798:	f383 8810 	msr	PRIMASK, r3
}
 800479c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2278      	movs	r2, #120	@ 0x78
 80047a8:	2100      	movs	r1, #0
 80047aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e05f      	b.n	8004870 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2204      	movs	r2, #4
 80047b8:	4013      	ands	r3, r2
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d146      	bne.n	800484c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047c0:	2280      	movs	r2, #128	@ 0x80
 80047c2:	03d1      	lsls	r1, r2, #15
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004878 <UART_CheckIdleState+0x148>)
 80047c8:	9200      	str	r2, [sp, #0]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f000 f858 	bl	8004880 <UART_WaitOnFlagUntilTimeout>
 80047d0:	1e03      	subs	r3, r0, #0
 80047d2:	d03b      	beq.n	800484c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047d4:	f3ef 8310 	mrs	r3, PRIMASK
 80047d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80047da:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80047de:	2301      	movs	r3, #1
 80047e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	f383 8810 	msr	PRIMASK, r3
}
 80047e8:	46c0      	nop			@ (mov r8, r8)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4921      	ldr	r1, [pc, #132]	@ (800487c <UART_CheckIdleState+0x14c>)
 80047f6:	400a      	ands	r2, r1
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f383 8810 	msr	PRIMASK, r3
}
 8004804:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004806:	f3ef 8310 	mrs	r3, PRIMASK
 800480a:	61bb      	str	r3, [r7, #24]
  return(result);
 800480c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004810:	2301      	movs	r3, #1
 8004812:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	f383 8810 	msr	PRIMASK, r3
}
 800481a:	46c0      	nop			@ (mov r8, r8)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2101      	movs	r1, #1
 8004828:	438a      	bics	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004830:	6a3b      	ldr	r3, [r7, #32]
 8004832:	f383 8810 	msr	PRIMASK, r3
}
 8004836:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2280      	movs	r2, #128	@ 0x80
 800483c:	2120      	movs	r1, #32
 800483e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2278      	movs	r2, #120	@ 0x78
 8004844:	2100      	movs	r1, #0
 8004846:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e011      	b.n	8004870 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2220      	movs	r2, #32
 8004850:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2280      	movs	r2, #128	@ 0x80
 8004856:	2120      	movs	r1, #32
 8004858:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2278      	movs	r2, #120	@ 0x78
 800486a:	2100      	movs	r1, #0
 800486c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b010      	add	sp, #64	@ 0x40
 8004876:	bd80      	pop	{r7, pc}
 8004878:	01ffffff 	.word	0x01ffffff
 800487c:	fffffedf 	.word	0xfffffedf

08004880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	603b      	str	r3, [r7, #0]
 800488c:	1dfb      	adds	r3, r7, #7
 800488e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004890:	e051      	b.n	8004936 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	3301      	adds	r3, #1
 8004896:	d04e      	beq.n	8004936 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004898:	f7fd f912 	bl	8001ac0 <HAL_GetTick>
 800489c:	0002      	movs	r2, r0
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d302      	bcc.n	80048ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80048a8:	69bb      	ldr	r3, [r7, #24]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e051      	b.n	8004956 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2204      	movs	r2, #4
 80048ba:	4013      	ands	r3, r2
 80048bc:	d03b      	beq.n	8004936 <UART_WaitOnFlagUntilTimeout+0xb6>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b80      	cmp	r3, #128	@ 0x80
 80048c2:	d038      	beq.n	8004936 <UART_WaitOnFlagUntilTimeout+0xb6>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b40      	cmp	r3, #64	@ 0x40
 80048c8:	d035      	beq.n	8004936 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	2208      	movs	r2, #8
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d111      	bne.n	80048fc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2208      	movs	r2, #8
 80048de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	0018      	movs	r0, r3
 80048e4:	f000 f900 	bl	8004ae8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2284      	movs	r2, #132	@ 0x84
 80048ec:	2108      	movs	r1, #8
 80048ee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2278      	movs	r2, #120	@ 0x78
 80048f4:	2100      	movs	r1, #0
 80048f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e02c      	b.n	8004956 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	69da      	ldr	r2, [r3, #28]
 8004902:	2380      	movs	r3, #128	@ 0x80
 8004904:	011b      	lsls	r3, r3, #4
 8004906:	401a      	ands	r2, r3
 8004908:	2380      	movs	r3, #128	@ 0x80
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	429a      	cmp	r2, r3
 800490e:	d112      	bne.n	8004936 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2280      	movs	r2, #128	@ 0x80
 8004916:	0112      	lsls	r2, r2, #4
 8004918:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	0018      	movs	r0, r3
 800491e:	f000 f8e3 	bl	8004ae8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2284      	movs	r2, #132	@ 0x84
 8004926:	2120      	movs	r1, #32
 8004928:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2278      	movs	r2, #120	@ 0x78
 800492e:	2100      	movs	r1, #0
 8004930:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e00f      	b.n	8004956 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	4013      	ands	r3, r2
 8004940:	68ba      	ldr	r2, [r7, #8]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	425a      	negs	r2, r3
 8004946:	4153      	adcs	r3, r2
 8004948:	b2db      	uxtb	r3, r3
 800494a:	001a      	movs	r2, r3
 800494c:	1dfb      	adds	r3, r7, #7
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	429a      	cmp	r2, r3
 8004952:	d09e      	beq.n	8004892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	0018      	movs	r0, r3
 8004958:	46bd      	mov	sp, r7
 800495a:	b004      	add	sp, #16
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b090      	sub	sp, #64	@ 0x40
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	1dbb      	adds	r3, r7, #6
 800496c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	1dba      	adds	r2, r7, #6
 8004978:	2158      	movs	r1, #88	@ 0x58
 800497a:	8812      	ldrh	r2, [r2, #0]
 800497c:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2284      	movs	r2, #132	@ 0x84
 8004982:	2100      	movs	r1, #0
 8004984:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2280      	movs	r2, #128	@ 0x80
 800498a:	2122      	movs	r1, #34	@ 0x22
 800498c:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004992:	2b00      	cmp	r3, #0
 8004994:	d028      	beq.n	80049e8 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800499a:	4a3e      	ldr	r2, [pc, #248]	@ (8004a94 <UART_Start_Receive_DMA+0x134>)
 800499c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049a2:	4a3d      	ldr	r2, [pc, #244]	@ (8004a98 <UART_Start_Receive_DMA+0x138>)
 80049a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049aa:	4a3c      	ldr	r2, [pc, #240]	@ (8004a9c <UART_Start_Receive_DMA+0x13c>)
 80049ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b2:	2200      	movs	r2, #0
 80049b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3324      	adds	r3, #36	@ 0x24
 80049c0:	0019      	movs	r1, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c6:	001a      	movs	r2, r3
 80049c8:	1dbb      	adds	r3, r7, #6
 80049ca:	881b      	ldrh	r3, [r3, #0]
 80049cc:	f7fd f9fc 	bl	8001dc8 <HAL_DMA_Start_IT>
 80049d0:	1e03      	subs	r3, r0, #0
 80049d2:	d009      	beq.n	80049e8 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2284      	movs	r2, #132	@ 0x84
 80049d8:	2110      	movs	r1, #16
 80049da:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2280      	movs	r2, #128	@ 0x80
 80049e0:	2120      	movs	r1, #32
 80049e2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e050      	b.n	8004a8a <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d019      	beq.n	8004a24 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049f0:	f3ef 8310 	mrs	r3, PRIMASK
 80049f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80049f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049fa:	2301      	movs	r3, #1
 80049fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a00:	f383 8810 	msr	PRIMASK, r3
}
 8004a04:	46c0      	nop			@ (mov r8, r8)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2180      	movs	r1, #128	@ 0x80
 8004a12:	0049      	lsls	r1, r1, #1
 8004a14:	430a      	orrs	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]
 8004a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1e:	f383 8810 	msr	PRIMASK, r3
}
 8004a22:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a24:	f3ef 8310 	mrs	r3, PRIMASK
 8004a28:	613b      	str	r3, [r7, #16]
  return(result);
 8004a2a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a2e:	2301      	movs	r3, #1
 8004a30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f383 8810 	msr	PRIMASK, r3
}
 8004a38:	46c0      	nop			@ (mov r8, r8)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2101      	movs	r1, #1
 8004a46:	430a      	orrs	r2, r1
 8004a48:	609a      	str	r2, [r3, #8]
 8004a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f383 8810 	msr	PRIMASK, r3
}
 8004a54:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a56:	f3ef 8310 	mrs	r3, PRIMASK
 8004a5a:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a5c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a5e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a60:	2301      	movs	r3, #1
 8004a62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	f383 8810 	msr	PRIMASK, r3
}
 8004a6a:	46c0      	nop			@ (mov r8, r8)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2140      	movs	r1, #64	@ 0x40
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a82:	f383 8810 	msr	PRIMASK, r3
}
 8004a86:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	0018      	movs	r0, r3
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	b010      	add	sp, #64	@ 0x40
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	46c0      	nop			@ (mov r8, r8)
 8004a94:	08004c69 	.word	0x08004c69
 8004a98:	08004dd1 	.word	0x08004dd1
 8004a9c:	08004e4f 	.word	0x08004e4f

08004aa0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8004aac:	60bb      	str	r3, [r7, #8]
  return(result);
 8004aae:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ab0:	617b      	str	r3, [r7, #20]
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f383 8810 	msr	PRIMASK, r3
}
 8004abc:	46c0      	nop			@ (mov r8, r8)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	21c0      	movs	r1, #192	@ 0xc0
 8004aca:	438a      	bics	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f383 8810 	msr	PRIMASK, r3
}
 8004ad8:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004ae0:	46c0      	nop			@ (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b006      	add	sp, #24
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b08e      	sub	sp, #56	@ 0x38
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af0:	f3ef 8310 	mrs	r3, PRIMASK
 8004af4:	617b      	str	r3, [r7, #20]
  return(result);
 8004af6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004af8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004afa:	2301      	movs	r3, #1
 8004afc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	f383 8810 	msr	PRIMASK, r3
}
 8004b04:	46c0      	nop			@ (mov r8, r8)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4926      	ldr	r1, [pc, #152]	@ (8004bac <UART_EndRxTransfer+0xc4>)
 8004b12:	400a      	ands	r2, r1
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f383 8810 	msr	PRIMASK, r3
}
 8004b20:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b22:	f3ef 8310 	mrs	r3, PRIMASK
 8004b26:	623b      	str	r3, [r7, #32]
  return(result);
 8004b28:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b32:	f383 8810 	msr	PRIMASK, r3
}
 8004b36:	46c0      	nop			@ (mov r8, r8)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689a      	ldr	r2, [r3, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2101      	movs	r1, #1
 8004b44:	438a      	bics	r2, r1
 8004b46:	609a      	str	r2, [r3, #8]
 8004b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4e:	f383 8810 	msr	PRIMASK, r3
}
 8004b52:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d118      	bne.n	8004b8e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b60:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b62:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b66:	2301      	movs	r3, #1
 8004b68:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f383 8810 	msr	PRIMASK, r3
}
 8004b70:	46c0      	nop			@ (mov r8, r8)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2110      	movs	r1, #16
 8004b7e:	438a      	bics	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b84:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	f383 8810 	msr	PRIMASK, r3
}
 8004b8c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2280      	movs	r2, #128	@ 0x80
 8004b92:	2120      	movs	r1, #32
 8004b94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	b00e      	add	sp, #56	@ 0x38
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	46c0      	nop			@ (mov r8, r8)
 8004bac:	fffffedf 	.word	0xfffffedf

08004bb0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08c      	sub	sp, #48	@ 0x30
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2220      	movs	r2, #32
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d135      	bne.n	8004c36 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8004bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bcc:	2252      	movs	r2, #82	@ 0x52
 8004bce:	2100      	movs	r1, #0
 8004bd0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004bd8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004bda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bdc:	2301      	movs	r3, #1
 8004bde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f383 8810 	msr	PRIMASK, r3
}
 8004be6:	46c0      	nop			@ (mov r8, r8)
 8004be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689a      	ldr	r2, [r3, #8]
 8004bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2180      	movs	r1, #128	@ 0x80
 8004bf4:	438a      	bics	r2, r1
 8004bf6:	609a      	str	r2, [r3, #8]
 8004bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f383 8810 	msr	PRIMASK, r3
}
 8004c02:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c04:	f3ef 8310 	mrs	r3, PRIMASK
 8004c08:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c0a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c0e:	2301      	movs	r3, #1
 8004c10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f383 8810 	msr	PRIMASK, r3
}
 8004c18:	46c0      	nop			@ (mov r8, r8)
 8004c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2140      	movs	r1, #64	@ 0x40
 8004c26:	430a      	orrs	r2, r1
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	f383 8810 	msr	PRIMASK, r3
}
 8004c34:	e004      	b.n	8004c40 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8004c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c38:	0018      	movs	r0, r3
 8004c3a:	f7ff f9e1 	bl	8004000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c3e:	46c0      	nop			@ (mov r8, r8)
 8004c40:	46c0      	nop			@ (mov r8, r8)
 8004c42:	46bd      	mov	sp, r7
 8004c44:	b00c      	add	sp, #48	@ 0x30
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c54:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	0018      	movs	r0, r3
 8004c5a:	f7ff f9d9 	bl	8004010 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c5e:	46c0      	nop			@ (mov r8, r8)
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b004      	add	sp, #16
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b094      	sub	sp, #80	@ 0x50
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c74:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	4013      	ands	r3, r2
 8004c80:	d16f      	bne.n	8004d62 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004c82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c84:	225a      	movs	r2, #90	@ 0x5a
 8004c86:	2100      	movs	r1, #0
 8004c88:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004c8e:	617b      	str	r3, [r7, #20]
  return(result);
 8004c90:	697b      	ldr	r3, [r7, #20]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c94:	2301      	movs	r3, #1
 8004c96:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	f383 8810 	msr	PRIMASK, r3
}
 8004c9e:	46c0      	nop			@ (mov r8, r8)
 8004ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681a      	ldr	r2, [r3, #0]
 8004ca6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4948      	ldr	r1, [pc, #288]	@ (8004dcc <UART_DMAReceiveCplt+0x164>)
 8004cac:	400a      	ands	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cb2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f383 8810 	msr	PRIMASK, r3
}
 8004cba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cbc:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc0:	623b      	str	r3, [r7, #32]
  return(result);
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	f383 8810 	msr	PRIMASK, r3
}
 8004cd0:	46c0      	nop			@ (mov r8, r8)
 8004cd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2101      	movs	r1, #1
 8004cde:	438a      	bics	r2, r1
 8004ce0:	609a      	str	r2, [r3, #8]
 8004ce2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ce8:	f383 8810 	msr	PRIMASK, r3
}
 8004cec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cee:	f3ef 8310 	mrs	r3, PRIMASK
 8004cf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cf6:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfe:	f383 8810 	msr	PRIMASK, r3
}
 8004d02:	46c0      	nop			@ (mov r8, r8)
 8004d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2140      	movs	r1, #64	@ 0x40
 8004d10:	438a      	bics	r2, r1
 8004d12:	609a      	str	r2, [r3, #8]
 8004d14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004d16:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d1a:	f383 8810 	msr	PRIMASK, r3
}
 8004d1e:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d22:	2280      	movs	r2, #128	@ 0x80
 8004d24:	2120      	movs	r1, #32
 8004d26:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d118      	bne.n	8004d62 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d30:	f3ef 8310 	mrs	r3, PRIMASK
 8004d34:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d36:	68bb      	ldr	r3, [r7, #8]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f383 8810 	msr	PRIMASK, r3
}
 8004d44:	46c0      	nop			@ (mov r8, r8)
 8004d46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2110      	movs	r1, #16
 8004d52:	438a      	bics	r2, r1
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f383 8810 	msr	PRIMASK, r3
}
 8004d60:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d64:	2200      	movs	r2, #0
 8004d66:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d124      	bne.n	8004dba <UART_DMAReceiveCplt+0x152>
  {
    huart->RxXferCount = 0;
 8004d70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d72:	225a      	movs	r2, #90	@ 0x5a
 8004d74:	2100      	movs	r1, #0
 8004d76:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side.
       DMA Normal mode, remaining nb of data will be 0
       DMA Circular mode, remaining nb of data is reset to RxXferSize */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	213a      	movs	r1, #58	@ 0x3a
 8004d80:	187b      	adds	r3, r7, r1
 8004d82:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data < huart->RxXferSize)
 8004d84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d86:	2258      	movs	r2, #88	@ 0x58
 8004d88:	5a9b      	ldrh	r3, [r3, r2]
 8004d8a:	187a      	adds	r2, r7, r1
 8004d8c:	8812      	ldrh	r2, [r2, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d204      	bcs.n	8004d9c <UART_DMAReceiveCplt+0x134>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8004d92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d94:	187a      	adds	r2, r7, r1
 8004d96:	215a      	movs	r1, #90	@ 0x5a
 8004d98:	8812      	ldrh	r2, [r2, #0]
 8004d9a:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d9e:	2258      	movs	r2, #88	@ 0x58
 8004da0:	5a9a      	ldrh	r2, [r3, r2]
 8004da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004da4:	215a      	movs	r1, #90	@ 0x5a
 8004da6:	5a5b      	ldrh	r3, [r3, r1]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	b29a      	uxth	r2, r3
 8004dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004db0:	0011      	movs	r1, r2
 8004db2:	0018      	movs	r0, r3
 8004db4:	f7fb fcba 	bl	800072c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004db8:	e003      	b.n	8004dc2 <UART_DMAReceiveCplt+0x15a>
    HAL_UART_RxCpltCallback(huart);
 8004dba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dbc:	0018      	movs	r0, r3
 8004dbe:	f7ff f92f 	bl	8004020 <HAL_UART_RxCpltCallback>
}
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	b014      	add	sp, #80	@ 0x50
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	46c0      	nop			@ (mov r8, r8)
 8004dcc:	fffffeff 	.word	0xfffffeff

08004dd0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d128      	bne.n	8004e3e <UART_DMARxHalfCplt+0x6e>
  {
    huart->RxXferCount = huart->RxXferSize / 2U;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2258      	movs	r2, #88	@ 0x58
 8004df0:	5a9b      	ldrh	r3, [r3, r2]
 8004df2:	085b      	lsrs	r3, r3, #1
 8004df4:	b299      	uxth	r1, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	225a      	movs	r2, #90	@ 0x5a
 8004dfa:	5299      	strh	r1, [r3, r2]

    /* Check current nb of data still to be received on DMA side. */
    uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(hdma);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	210a      	movs	r1, #10
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	801a      	strh	r2, [r3, #0]
    if (nb_remaining_rx_data <= huart->RxXferSize)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2258      	movs	r2, #88	@ 0x58
 8004e0c:	5a9b      	ldrh	r3, [r3, r2]
 8004e0e:	187a      	adds	r2, r7, r1
 8004e10:	8812      	ldrh	r2, [r2, #0]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d804      	bhi.n	8004e20 <UART_DMARxHalfCplt+0x50>
    {
      /* Update nb of remaining data */
      huart->RxXferCount = nb_remaining_rx_data;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	187a      	adds	r2, r7, r1
 8004e1a:	215a      	movs	r1, #90	@ 0x5a
 8004e1c:	8812      	ldrh	r2, [r2, #0]
 8004e1e:	525a      	strh	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2258      	movs	r2, #88	@ 0x58
 8004e24:	5a9a      	ldrh	r2, [r3, r2]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	215a      	movs	r1, #90	@ 0x5a
 8004e2a:	5a5b      	ldrh	r3, [r3, r1]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	0011      	movs	r1, r2
 8004e36:	0018      	movs	r0, r3
 8004e38:	f7fb fc78 	bl	800072c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004e3c:	e003      	b.n	8004e46 <UART_DMARxHalfCplt+0x76>
    HAL_UART_RxHalfCpltCallback(huart);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	0018      	movs	r0, r3
 8004e42:	f7ff f8f5 	bl	8004030 <HAL_UART_RxHalfCpltCallback>
}
 8004e46:	46c0      	nop			@ (mov r8, r8)
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b004      	add	sp, #16
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b086      	sub	sp, #24
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e60:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	2280      	movs	r2, #128	@ 0x80
 8004e66:	589b      	ldr	r3, [r3, r2]
 8004e68:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2280      	movs	r2, #128	@ 0x80
 8004e72:	4013      	ands	r3, r2
 8004e74:	2b80      	cmp	r3, #128	@ 0x80
 8004e76:	d10a      	bne.n	8004e8e <UART_DMAError+0x40>
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b21      	cmp	r3, #33	@ 0x21
 8004e7c:	d107      	bne.n	8004e8e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2252      	movs	r2, #82	@ 0x52
 8004e82:	2100      	movs	r1, #0
 8004e84:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7ff fe09 	bl	8004aa0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2240      	movs	r2, #64	@ 0x40
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b40      	cmp	r3, #64	@ 0x40
 8004e9a:	d10a      	bne.n	8004eb2 <UART_DMAError+0x64>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b22      	cmp	r3, #34	@ 0x22
 8004ea0:	d107      	bne.n	8004eb2 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	225a      	movs	r2, #90	@ 0x5a
 8004ea6:	2100      	movs	r1, #0
 8004ea8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	0018      	movs	r0, r3
 8004eae:	f7ff fe1b 	bl	8004ae8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2284      	movs	r2, #132	@ 0x84
 8004eb6:	589b      	ldr	r3, [r3, r2]
 8004eb8:	2210      	movs	r2, #16
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	2184      	movs	r1, #132	@ 0x84
 8004ec0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f7ff f8bb 	bl	8004040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eca:	46c0      	nop			@ (mov r8, r8)
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	b006      	add	sp, #24
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ede:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	225a      	movs	r2, #90	@ 0x5a
 8004ee4:	2100      	movs	r1, #0
 8004ee6:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	0018      	movs	r0, r3
 8004eec:	f7ff f8a8 	bl	8004040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ef0:	46c0      	nop			@ (mov r8, r8)
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b004      	add	sp, #16
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f00:	f3ef 8310 	mrs	r3, PRIMASK
 8004f04:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f06:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f383 8810 	msr	PRIMASK, r3
}
 8004f14:	46c0      	nop			@ (mov r8, r8)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2140      	movs	r1, #64	@ 0x40
 8004f22:	438a      	bics	r2, r1
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f383 8810 	msr	PRIMASK, r3
}
 8004f30:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2220      	movs	r2, #32
 8004f36:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	0018      	movs	r0, r3
 8004f42:	f7ff f85d 	bl	8004000 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f46:	46c0      	nop			@ (mov r8, r8)
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	b006      	add	sp, #24
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b082      	sub	sp, #8
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004f56:	46c0      	nop			@ (mov r8, r8)
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	b002      	add	sp, #8
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f5e:	b5b0      	push	{r4, r5, r7, lr}
 8004f60:	b08a      	sub	sp, #40	@ 0x28
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	60f8      	str	r0, [r7, #12]
 8004f66:	60b9      	str	r1, [r7, #8]
 8004f68:	1dbb      	adds	r3, r7, #6
 8004f6a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2280      	movs	r2, #128	@ 0x80
 8004f70:	589b      	ldr	r3, [r3, r2]
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d156      	bne.n	8005024 <HAL_UARTEx_ReceiveToIdle_DMA+0xc6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004f7c:	1dbb      	adds	r3, r7, #6
 8004f7e:	881b      	ldrh	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e04e      	b.n	8005026 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data copy from RDR will be
       handled by DMA from a uint16_t frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	2380      	movs	r3, #128	@ 0x80
 8004f8e:	015b      	lsls	r3, r3, #5
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d109      	bne.n	8004fa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d105      	bne.n	8004fa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	d001      	beq.n	8004fa8 <HAL_UARTEx_ReceiveToIdle_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e03e      	b.n	8005026 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2201      	movs	r2, #1
 8004fac:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004fb4:	2527      	movs	r5, #39	@ 0x27
 8004fb6:	197c      	adds	r4, r7, r5
 8004fb8:	1dbb      	adds	r3, r7, #6
 8004fba:	881a      	ldrh	r2, [r3, #0]
 8004fbc:	68b9      	ldr	r1, [r7, #8]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	0018      	movs	r0, r3
 8004fc2:	f7ff fccd 	bl	8004960 <UART_Start_Receive_DMA>
 8004fc6:	0003      	movs	r3, r0
 8004fc8:	7023      	strb	r3, [r4, #0]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004fca:	197b      	adds	r3, r7, r5
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d124      	bne.n	800501c <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d11c      	bne.n	8005014 <HAL_UARTEx_ReceiveToIdle_DMA+0xb6>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2210      	movs	r2, #16
 8004fe0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe6:	617b      	str	r3, [r7, #20]
  return(result);
 8004fe8:	697b      	ldr	r3, [r7, #20]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fea:	623b      	str	r3, [r7, #32]
 8004fec:	2301      	movs	r3, #1
 8004fee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	f383 8810 	msr	PRIMASK, r3
}
 8004ff6:	46c0      	nop			@ (mov r8, r8)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2110      	movs	r1, #16
 8005004:	430a      	orrs	r2, r1
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f383 8810 	msr	PRIMASK, r3
}
 8005012:	e003      	b.n	800501c <HAL_UARTEx_ReceiveToIdle_DMA+0xbe>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005014:	2327      	movs	r3, #39	@ 0x27
 8005016:	18fb      	adds	r3, r7, r3
 8005018:	2201      	movs	r2, #1
 800501a:	701a      	strb	r2, [r3, #0]
      }
    }

    return status;
 800501c:	2327      	movs	r3, #39	@ 0x27
 800501e:	18fb      	adds	r3, r7, r3
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	e000      	b.n	8005026 <HAL_UARTEx_ReceiveToIdle_DMA+0xc8>
  }
  else
  {
    return HAL_BUSY;
 8005024:	2302      	movs	r3, #2
  }
}
 8005026:	0018      	movs	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	b00a      	add	sp, #40	@ 0x28
 800502c:	bdb0      	pop	{r4, r5, r7, pc}

0800502e <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	0018      	movs	r0, r3
 800503e:	f000 fc01 	bl	8005844 <malloc>
 8005042:	0003      	movs	r3, r0
 8005044:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8005046:	68fb      	ldr	r3, [r7, #12]
}
 8005048:	0018      	movs	r0, r3
 800504a:	46bd      	mov	sp, r7
 800504c:	b004      	add	sp, #16
 800504e:	bd80      	pop	{r7, pc}

08005050 <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b082      	sub	sp, #8
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00b      	beq.n	8005076 <ATC_Free+0x26>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d007      	beq.n	8005076 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	0018      	movs	r0, r3
 800506c:	f000 fbf4 	bl	8005858 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
  }
}
 8005076:	46c0      	nop			@ (mov r8, r8)
 8005078:	46bd      	mov	sp, r7
 800507a:	b002      	add	sp, #8
 800507c:	bd80      	pop	{r7, pc}

0800507e <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b082      	sub	sp, #8
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	8a9b      	ldrh	r3, [r3, #20]
 8005094:	001a      	movs	r2, r3
 8005096:	2100      	movs	r1, #0
 8005098:	f000 fefa 	bl	8005e90 <memset>
}
 800509c:	46c0      	nop			@ (mov r8, r8)
 800509e:	46bd      	mov	sp, r7
 80050a0:	b002      	add	sp, #8
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 80050a4:	b590      	push	{r4, r7, lr}
 80050a6:	b087      	sub	sp, #28
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	1dbb      	adds	r3, r7, #6
 80050b0:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 80050b2:	2417      	movs	r4, #23
 80050b4:	193b      	adds	r3, r7, r4
 80050b6:	2200      	movs	r2, #0
 80050b8:	701a      	strb	r2, [r3, #0]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1dba      	adds	r2, r7, #6
 80050be:	8812      	ldrh	r2, [r2, #0]
 80050c0:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6818      	ldr	r0, [r3, #0]
 80050c6:	1dbb      	adds	r3, r7, #6
 80050c8:	881a      	ldrh	r2, [r3, #0]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	0019      	movs	r1, r3
 80050ce:	f7fe faf3 	bl	80036b8 <HAL_UART_Transmit_DMA>
 80050d2:	1e03      	subs	r3, r0, #0
 80050d4:	d103      	bne.n	80050de <ATC_TxRaw+0x3a>
    {
      break;
    }
    answer = true;
 80050d6:	193b      	adds	r3, r7, r4
 80050d8:	2201      	movs	r2, #1
 80050da:	701a      	strb	r2, [r3, #0]
 80050dc:	e000      	b.n	80050e0 <ATC_TxRaw+0x3c>
      break;
 80050de:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 80050e0:	2317      	movs	r3, #23
 80050e2:	18fb      	adds	r3, r7, r3
 80050e4:	781b      	ldrb	r3, [r3, #0]
}
 80050e6:	0018      	movs	r0, r3
 80050e8:	46bd      	mov	sp, r7
 80050ea:	b007      	add	sp, #28
 80050ec:	bd90      	pop	{r4, r7, pc}

080050ee <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	0018      	movs	r0, r3
 80050fc:	f7fe ffa8 	bl	8004050 <HAL_UART_GetState>
 8005100:	0003      	movs	r3, r0
 8005102:	2b21      	cmp	r3, #33	@ 0x21
 8005104:	d007      	beq.n	8005116 <ATC_TxBusy+0x28>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	0018      	movs	r0, r3
 800510c:	f7fe ffa0 	bl	8004050 <HAL_UART_GetState>
 8005110:	0003      	movs	r3, r0
 8005112:	2b23      	cmp	r3, #35	@ 0x23
 8005114:	d101      	bne.n	800511a <ATC_TxBusy+0x2c>
  {
    return true;
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 800511a:	2300      	movs	r3, #0
  }
}
 800511c:	0018      	movs	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	b002      	add	sp, #8
 8005122:	bd80      	pop	{r7, pc}

08005124 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
  bool answer = false;
 800512e:	230f      	movs	r3, #15
 8005130:	18fb      	adds	r3, r7, r3
 8005132:	2200      	movs	r2, #0
 8005134:	701a      	strb	r2, [r3, #0]
  uint32_t start_time = HAL_GetTick();
 8005136:	f7fc fcc3 	bl	8001ac0 <HAL_GetTick>
 800513a:	0003      	movs	r3, r0
 800513c:	60bb      	str	r3, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 800513e:	2001      	movs	r0, #1
 8005140:	f000 fb73 	bl	800582a <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	0018      	movs	r0, r3
 800514a:	f7fe ff81 	bl	8004050 <HAL_UART_GetState>
 800514e:	0003      	movs	r3, r0
 8005150:	2b22      	cmp	r3, #34	@ 0x22
 8005152:	d007      	beq.n	8005164 <ATC_TxWait+0x40>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	0018      	movs	r0, r3
 800515a:	f7fe ff79 	bl	8004050 <HAL_UART_GetState>
 800515e:	0003      	movs	r3, r0
 8005160:	2b20      	cmp	r3, #32
 8005162:	d104      	bne.n	800516e <ATC_TxWait+0x4a>
    {
      answer = true;
 8005164:	230f      	movs	r3, #15
 8005166:	18fb      	adds	r3, r7, r3
 8005168:	2201      	movs	r2, #1
 800516a:	701a      	strb	r2, [r3, #0]
      break;
 800516c:	e01c      	b.n	80051a8 <ATC_TxWait+0x84>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	0018      	movs	r0, r3
 8005174:	f7fe ff6c 	bl	8004050 <HAL_UART_GetState>
 8005178:	0003      	movs	r3, r0
 800517a:	2be0      	cmp	r3, #224	@ 0xe0
 800517c:	d014      	beq.n	80051a8 <ATC_TxWait+0x84>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	0018      	movs	r0, r3
 8005184:	f7fe ff64 	bl	8004050 <HAL_UART_GetState>
 8005188:	0003      	movs	r3, r0
 800518a:	2ba0      	cmp	r3, #160	@ 0xa0
 800518c:	d00c      	beq.n	80051a8 <ATC_TxWait+0x84>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 800518e:	f7fc fc97 	bl	8001ac0 <HAL_GetTick>
 8005192:	0002      	movs	r2, r0
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d8cf      	bhi.n	800513e <ATC_TxWait+0x1a>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	0018      	movs	r0, r3
 80051a4:	f7fe fb18 	bl	80037d8 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 80051a8:	230f      	movs	r3, #15
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	781b      	ldrb	r3, [r3, #0]
}
 80051ae:	0018      	movs	r0, r3
 80051b0:	46bd      	mov	sp, r7
 80051b2:	b004      	add	sp, #16
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	8b1b      	ldrh	r3, [r3, #24]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d027      	beq.n	8005216 <ATC_CheckEvents+0x60>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	e01b      	b.n	8005204 <ATC_CheckEvents+0x4e>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	18d3      	adds	r3, r2, r3
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	0019      	movs	r1, r3
 80051de:	f000 fe73 	bl	8005ec8 <strstr>
 80051e2:	0003      	movs	r3, r0
 80051e4:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d008      	beq.n	80051fe <ATC_CheckEvents+0x48>
      {
        hAtc->psEvents[ev].EventCallback(found);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	18d3      	adds	r3, r2, r3
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	0010      	movs	r0, r2
 80051fc:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3301      	adds	r3, #1
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	429a      	cmp	r2, r3
 800520c:	d3de      	bcc.n	80051cc <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	0018      	movs	r0, r3
 8005212:	f7ff ff34 	bl	800507e <ATC_RxFlush>
  }
}
 8005216:	46c0      	nop			@ (mov r8, r8)
 8005218:	46bd      	mov	sp, r7
 800521a:	b004      	add	sp, #16
 800521c:	bd80      	pop	{r7, pc}

0800521e <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b084      	sub	sp, #16
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 8005228:	230f      	movs	r3, #15
 800522a:	18fb      	adds	r3, r7, r3
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
  if (hAtc->RxIndex > 0)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	8b1b      	ldrh	r3, [r3, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d031      	beq.n	800529c <ATC_CheckResponse+0x7e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8005238:	230c      	movs	r3, #12
 800523a:	18fb      	adds	r3, r7, r3
 800523c:	2200      	movs	r2, #0
 800523e:	801a      	strh	r2, [r3, #0]
 8005240:	e025      	b.n	800528e <ATC_CheckResponse+0x70>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005246:	230c      	movs	r3, #12
 8005248:	18fb      	adds	r3, r7, r3
 800524a:	881a      	ldrh	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	320a      	adds	r2, #10
 8005250:	0092      	lsls	r2, r2, #2
 8005252:	58d3      	ldr	r3, [r2, r3]
 8005254:	0019      	movs	r1, r3
 8005256:	f000 fe37 	bl	8005ec8 <strstr>
 800525a:	0003      	movs	r3, r0
 800525c:	60bb      	str	r3, [r7, #8]
      if (found != NULL)
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00e      	beq.n	8005282 <ATC_CheckResponse+0x64>
      {
        if (ppFound != NULL)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <ATC_CheckResponse+0x52>
        {
          *ppFound = found;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8005270:	230c      	movs	r3, #12
 8005272:	18fb      	adds	r3, r7, r3
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	b2da      	uxtb	r2, r3
 8005278:	230f      	movs	r3, #15
 800527a:	18fb      	adds	r3, r7, r3
 800527c:	3201      	adds	r2, #1
 800527e:	701a      	strb	r2, [r3, #0]
        break;
 8005280:	e00c      	b.n	800529c <ATC_CheckResponse+0x7e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8005282:	210c      	movs	r1, #12
 8005284:	187b      	adds	r3, r7, r1
 8005286:	881a      	ldrh	r2, [r3, #0]
 8005288:	187b      	adds	r3, r7, r1
 800528a:	3201      	adds	r2, #1
 800528c:	801a      	strh	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	8adb      	ldrh	r3, [r3, #22]
 8005292:	220c      	movs	r2, #12
 8005294:	18ba      	adds	r2, r7, r2
 8005296:	8812      	ldrh	r2, [r2, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d3d2      	bcc.n	8005242 <ATC_CheckResponse+0x24>
      }
    }
  }
  return index;
 800529c:	230f      	movs	r3, #15
 800529e:	18fb      	adds	r3, r7, r3
 80052a0:	781b      	ldrb	r3, [r3, #0]
}
 80052a2:	0018      	movs	r0, r3
 80052a4:	46bd      	mov	sp, r7
 80052a6:	b004      	add	sp, #16
 80052a8:	bd80      	pop	{r7, pc}

080052aa <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b082      	sub	sp, #8
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	0018      	movs	r0, r3
 80052b8:	f7fe fedc 	bl	8004074 <HAL_UART_GetError>
 80052bc:	1e03      	subs	r3, r0, #0
 80052be:	d01f      	beq.n	8005300 <ATC_CheckErrors+0x56>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2201      	movs	r2, #1
 80052c8:	4252      	negs	r2, r2
 80052ca:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	0018      	movs	r0, r3
 80052d2:	f7fe fae7 	bl	80038a4 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6818      	ldr	r0, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69d9      	ldr	r1, [r3, #28]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8a9b      	ldrh	r3, [r3, #20]
 80052e2:	001a      	movs	r2, r3
 80052e4:	f7ff fe3b 	bl	8004f5e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2104      	movs	r1, #4
 80052fc:	438a      	bics	r2, r1
 80052fe:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	0018      	movs	r0, r3
 8005306:	f7fe fea3 	bl	8004050 <HAL_UART_GetState>
 800530a:	0003      	movs	r3, r0
 800530c:	2b22      	cmp	r3, #34	@ 0x22
 800530e:	d027      	beq.n	8005360 <ATC_CheckErrors+0xb6>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	0018      	movs	r0, r3
 8005316:	f7fe fe9b 	bl	8004050 <HAL_UART_GetState>
 800531a:	0003      	movs	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 800531c:	2b23      	cmp	r3, #35	@ 0x23
 800531e:	d01f      	beq.n	8005360 <ATC_CheckErrors+0xb6>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2201      	movs	r2, #1
 8005328:	4252      	negs	r2, r2
 800532a:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	0018      	movs	r0, r3
 8005332:	f7fe fab7 	bl	80038a4 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	69d9      	ldr	r1, [r3, #28]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	8a9b      	ldrh	r3, [r3, #20]
 8005342:	001a      	movs	r2, r3
 8005344:	f7ff fe0b 	bl	8004f5e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2104      	movs	r1, #4
 800535c:	438a      	bics	r2, r1
 800535e:	601a      	str	r2, [r3, #0]
  }
}
 8005360:	46c0      	nop			@ (mov r8, r8)
 8005362:	46bd      	mov	sp, r7
 8005364:	b002      	add	sp, #8
 8005366:	bd80      	pop	{r7, pc}

08005368 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	1dbb      	adds	r3, r7, #6
 8005376:	801a      	strh	r2, [r3, #0]
  bool answer = false;
 8005378:	2317      	movs	r3, #23
 800537a:	18fb      	adds	r3, r7, r3
 800537c:	2200      	movs	r2, #0
 800537e:	701a      	strb	r2, [r3, #0]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d100      	bne.n	8005388 <ATC_Init+0x20>
 8005386:	e07f      	b.n	8005488 <ATC_Init+0x120>
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d100      	bne.n	8005390 <ATC_Init+0x28>
 800538e:	e07b      	b.n	8005488 <ATC_Init+0x120>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	223c      	movs	r2, #60	@ 0x3c
 8005394:	2100      	movs	r1, #0
 8005396:	0018      	movs	r0, r3
 8005398:	f000 fd7a 	bl	8005e90 <memset>
    if (pName != NULL)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d006      	beq.n	80053b0 <ATC_Init+0x48>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3304      	adds	r3, #4
 80053a6:	6839      	ldr	r1, [r7, #0]
 80053a8:	2207      	movs	r2, #7
 80053aa:	0018      	movs	r0, r3
 80053ac:	f000 fd78 	bl	8005ea0 <strncpy>
    }
    hAtc->hUart = hUart;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 80053b6:	1dbb      	adds	r3, r7, #6
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	0018      	movs	r0, r3
 80053bc:	f7ff fe37 	bl	800502e <ATC_Malloc>
 80053c0:	0002      	movs	r2, r0
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d055      	beq.n	800547a <ATC_Init+0x112>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	69d8      	ldr	r0, [r3, #28]
 80053d2:	1dbb      	adds	r3, r7, #6
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	001a      	movs	r2, r3
 80053d8:	2100      	movs	r1, #0
 80053da:	f000 fd59 	bl	8005e90 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 80053de:	1dbb      	adds	r3, r7, #6
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	0018      	movs	r0, r3
 80053e4:	f7ff fe23 	bl	800502e <ATC_Malloc>
 80053e8:	0002      	movs	r2, r0
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d043      	beq.n	800547e <ATC_Init+0x116>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a18      	ldr	r0, [r3, #32]
 80053fa:	1dbb      	adds	r3, r7, #6
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	001a      	movs	r2, r3
 8005400:	2100      	movs	r1, #0
 8005402:	f000 fd45 	bl	8005e90 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 8005406:	1dbb      	adds	r3, r7, #6
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	0018      	movs	r0, r3
 800540c:	f7ff fe0f 	bl	800502e <ATC_Malloc>
 8005410:	0002      	movs	r2, r0
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	2b00      	cmp	r3, #0
 800541c:	d031      	beq.n	8005482 <ATC_Init+0x11a>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8005422:	1dbb      	adds	r3, r7, #6
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	001a      	movs	r2, r3
 8005428:	2100      	movs	r1, #0
 800542a:	f000 fd31 	bl	8005e90 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	1dba      	adds	r2, r7, #6
 8005432:	8812      	ldrh	r2, [r2, #0]
 8005434:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2201      	movs	r2, #1
 800543e:	4252      	negs	r2, r2
 8005440:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	69d9      	ldr	r1, [r3, #28]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8a9b      	ldrh	r3, [r3, #20]
 800544e:	001a      	movs	r2, r3
 8005450:	f7ff fd85 	bl	8004f5e <HAL_UARTEx_ReceiveToIdle_DMA>
 8005454:	1e03      	subs	r3, r0, #0
 8005456:	d116      	bne.n	8005486 <ATC_Init+0x11e>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2104      	movs	r1, #4
 800546c:	438a      	bics	r2, r1
 800546e:	601a      	str	r2, [r3, #0]
    answer = true;
 8005470:	2317      	movs	r3, #23
 8005472:	18fb      	adds	r3, r7, r3
 8005474:	2201      	movs	r2, #1
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	e006      	b.n	8005488 <ATC_Init+0x120>
      break;
 800547a:	46c0      	nop			@ (mov r8, r8)
 800547c:	e004      	b.n	8005488 <ATC_Init+0x120>
      break;
 800547e:	46c0      	nop			@ (mov r8, r8)
 8005480:	e002      	b.n	8005488 <ATC_Init+0x120>
      break;
 8005482:	46c0      	nop			@ (mov r8, r8)
 8005484:	e000      	b.n	8005488 <ATC_Init+0x120>
      break;
 8005486:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  if (answer == false)
 8005488:	2317      	movs	r3, #23
 800548a:	18fb      	adds	r3, r7, r3
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2201      	movs	r2, #1
 8005490:	4053      	eors	r3, r2
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d017      	beq.n	80054c8 <ATC_Init+0x160>
  {
    if (hAtc->pRxBuff != NULL)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d004      	beq.n	80054aa <ATC_Init+0x142>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	331c      	adds	r3, #28
 80054a4:	0018      	movs	r0, r3
 80054a6:	f7ff fdd3 	bl	8005050 <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d004      	beq.n	80054bc <ATC_Init+0x154>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3324      	adds	r3, #36	@ 0x24
 80054b6:	0018      	movs	r0, r3
 80054b8:	f7ff fdca 	bl	8005050 <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	223c      	movs	r2, #60	@ 0x3c
 80054c0:	2100      	movs	r1, #0
 80054c2:	0018      	movs	r0, r3
 80054c4:	f000 fce4 	bl	8005e90 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 80054c8:	2317      	movs	r3, #23
 80054ca:	18fb      	adds	r3, r7, r3
 80054cc:	781b      	ldrb	r3, [r3, #0]
}
 80054ce:	0018      	movs	r0, r3
 80054d0:	46bd      	mov	sp, r7
 80054d2:	b006      	add	sp, #24
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <ATC_SetEvents>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  psEvents: Pointer to the event handler structure.
  * @retval true if events are set successfully, false otherwise.
  */
bool ATC_SetEvents(ATC_HandleTypeDef* hAtc, const ATC_EventTypeDef* psEvents)
{
 80054d6:	b580      	push	{r7, lr}
 80054d8:	b084      	sub	sp, #16
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
  bool answer = false;
 80054e0:	230f      	movs	r3, #15
 80054e2:	18fb      	adds	r3, r7, r3
 80054e4:	2200      	movs	r2, #0
 80054e6:	701a      	strb	r2, [r3, #0]
  uint32_t ev = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	60bb      	str	r3, [r7, #8]
  do
  {
    if (hAtc == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d01f      	beq.n	8005532 <ATC_SetEvents+0x5c>
    {
      break;
    }
    if (psEvents == NULL)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01e      	beq.n	8005536 <ATC_SetEvents+0x60>
    {
      break;
    }
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 80054f8:	e002      	b.n	8005500 <ATC_SetEvents+0x2a>
    {
      ev++;
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	3301      	adds	r3, #1
 80054fe:	60bb      	str	r3, [r7, #8]
    while ((psEvents[ev].Event != NULL) && (psEvents[ev].EventCallback != NULL))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	18d3      	adds	r3, r2, r3
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d006      	beq.n	800551c <ATC_SetEvents+0x46>
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	18d3      	adds	r3, r2, r3
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1ee      	bne.n	80054fa <ATC_SetEvents+0x24>
    }
    hAtc->psEvents = (ATC_EventTypeDef*)psEvents;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	60da      	str	r2, [r3, #12]
    hAtc->Events = ev;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	611a      	str	r2, [r3, #16]
    answer = true;
 8005528:	230f      	movs	r3, #15
 800552a:	18fb      	adds	r3, r7, r3
 800552c:	2201      	movs	r2, #1
 800552e:	701a      	strb	r2, [r3, #0]
 8005530:	e002      	b.n	8005538 <ATC_SetEvents+0x62>
      break;
 8005532:	46c0      	nop			@ (mov r8, r8)
 8005534:	e000      	b.n	8005538 <ATC_SetEvents+0x62>
      break;
 8005536:	46c0      	nop			@ (mov r8, r8)

  } while (0);

  return answer;
 8005538:	230f      	movs	r3, #15
 800553a:	18fb      	adds	r3, r7, r3
 800553c:	781b      	ldrb	r3, [r3, #0]
}
 800553e:	0018      	movs	r0, r3
 8005540:	46bd      	mov	sp, r7
 8005542:	b004      	add	sp, #16
 8005544:	bd80      	pop	{r7, pc}

08005546 <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b082      	sub	sp, #8
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	0018      	movs	r0, r3
 8005552:	f7ff feaa 	bl	80052aa <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	0018      	movs	r0, r3
 800555a:	f7ff fe2c 	bl	80051b6 <ATC_CheckEvents>
}
 800555e:	46c0      	nop			@ (mov r8, r8)
 8005560:	46bd      	mov	sp, r7
 8005562:	b002      	add	sp, #8
 8005564:	bd80      	pop	{r7, pc}

08005566 <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8005566:	b5b0      	push	{r4, r5, r7, lr}
 8005568:	b08c      	sub	sp, #48	@ 0x30
 800556a:	af00      	add	r7, sp, #0
 800556c:	60f8      	str	r0, [r7, #12]
 800556e:	60b9      	str	r1, [r7, #8]
 8005570:	607a      	str	r2, [r7, #4]
 8005572:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8005574:	2300      	movs	r3, #0
 8005576:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	0018      	movs	r0, r3
 800557c:	f7ff fdb7 	bl	80050ee <ATC_TxBusy>
 8005580:	1e03      	subs	r3, r0, #0
 8005582:	d002      	beq.n	800558a <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8005584:	2304      	movs	r3, #4
 8005586:	425b      	negs	r3, r3
 8005588:	e0e3      	b.n	8005752 <ATC_SendReceive+0x1ec>
  }
  if (Items > ATC_RESP_MAX)
 800558a:	2344      	movs	r3, #68	@ 0x44
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b05      	cmp	r3, #5
 8005592:	d902      	bls.n	800559a <ATC_SendReceive+0x34>
  {
    return ATC_RESP_ITEMS;
 8005594:	2305      	movs	r3, #5
 8005596:	425b      	negs	r3, r3
 8005598:	e0db      	b.n	8005752 <ATC_SendReceive+0x1ec>
  }
  ATC_CheckErrors(hAtc);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	0018      	movs	r0, r3
 800559e:	f7ff fe84 	bl	80052aa <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 80055a2:	2348      	movs	r3, #72	@ 0x48
 80055a4:	18fb      	adds	r3, r7, r3
 80055a6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 80055a8:	2300      	movs	r3, #0
 80055aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055ac:	e051      	b.n	8005652 <ATC_SendReceive+0xec>
  {
    char *arg = va_arg(args, char*);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	1d1a      	adds	r2, r3, #4
 80055b2:	617a      	str	r2, [r7, #20]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	0018      	movs	r0, r3
 80055bc:	f7fa fda4 	bl	8000108 <strlen>
 80055c0:	0003      	movs	r3, r0
 80055c2:	3301      	adds	r3, #1
 80055c4:	0018      	movs	r0, r3
 80055c6:	f7ff fd32 	bl	800502e <ATC_Malloc>
 80055ca:	0001      	movs	r1, r0
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055d0:	320a      	adds	r2, #10
 80055d2:	0092      	lsls	r2, r2, #2
 80055d4:	50d1      	str	r1, [r2, r3]
    if (hAtc->ppResp[i] == NULL)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055da:	320a      	adds	r2, #10
 80055dc:	0092      	lsls	r2, r2, #2
 80055de:	58d3      	ldr	r3, [r2, r3]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d11c      	bne.n	800561e <ATC_SendReceive+0xb8>
    {
      for (uint8_t j = 0; j < i; j++)
 80055e4:	2327      	movs	r3, #39	@ 0x27
 80055e6:	18fb      	adds	r3, r7, r3
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
 80055ec:	e00e      	b.n	800560c <ATC_SendReceive+0xa6>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 80055ee:	2427      	movs	r4, #39	@ 0x27
 80055f0:	193b      	adds	r3, r7, r4
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	330a      	adds	r3, #10
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	18d3      	adds	r3, r2, r3
 80055fc:	0018      	movs	r0, r3
 80055fe:	f7ff fd27 	bl	8005050 <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8005602:	193b      	adds	r3, r7, r4
 8005604:	781a      	ldrb	r2, [r3, #0]
 8005606:	193b      	adds	r3, r7, r4
 8005608:	3201      	adds	r2, #1
 800560a:	701a      	strb	r2, [r3, #0]
 800560c:	2327      	movs	r3, #39	@ 0x27
 800560e:	18fb      	adds	r3, r7, r3
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005614:	429a      	cmp	r2, r3
 8005616:	dcea      	bgt.n	80055ee <ATC_SendReceive+0x88>
      }
      return ATC_RESP_MEM_ERROR;
 8005618:	2303      	movs	r3, #3
 800561a:	425b      	negs	r3, r3
 800561c:	e099      	b.n	8005752 <ATC_SendReceive+0x1ec>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005622:	320a      	adds	r2, #10
 8005624:	0092      	lsls	r2, r2, #2
 8005626:	58d3      	ldr	r3, [r2, r3]
 8005628:	69ba      	ldr	r2, [r7, #24]
 800562a:	0011      	movs	r1, r2
 800562c:	0018      	movs	r0, r3
 800562e:	f000 fcee 	bl	800600e <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005636:	320a      	adds	r2, #10
 8005638:	0092      	lsls	r2, r2, #2
 800563a:	58d4      	ldr	r4, [r2, r3]
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	0018      	movs	r0, r3
 8005640:	f7fa fd62 	bl	8000108 <strlen>
 8005644:	0003      	movs	r3, r0
 8005646:	18e3      	adds	r3, r4, r3
 8005648:	2200      	movs	r2, #0
 800564a:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 800564c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564e:	3301      	adds	r3, #1
 8005650:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005652:	2344      	movs	r3, #68	@ 0x44
 8005654:	18fb      	adds	r3, r7, r3
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800565a:	429a      	cmp	r2, r3
 800565c:	dba7      	blt.n	80055ae <ATC_SendReceive+0x48>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	0018      	movs	r0, r3
 8005662:	f7ff fd0c 	bl	800507e <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	0018      	movs	r0, r3
 800566a:	f7fa fd4d 	bl	8000108 <strlen>
 800566e:	0003      	movs	r3, r0
 8005670:	b29a      	uxth	r2, r3
 8005672:	68b9      	ldr	r1, [r7, #8]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	0018      	movs	r0, r3
 8005678:	f7ff fd14 	bl	80050a4 <ATC_TxRaw>
 800567c:	0003      	movs	r3, r0
 800567e:	001a      	movs	r2, r3
 8005680:	2301      	movs	r3, #1
 8005682:	4053      	eors	r3, r2
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <ATC_SendReceive+0x12c>
    {
      answer = ATC_RESP_SENDING_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	425b      	negs	r3, r3
 800568e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8005690:	e010      	b.n	80056b4 <ATC_SendReceive+0x14e>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	0011      	movs	r1, r2
 8005698:	0018      	movs	r0, r3
 800569a:	f7ff fd43 	bl	8005124 <ATC_TxWait>
 800569e:	0003      	movs	r3, r0
 80056a0:	001a      	movs	r2, r3
 80056a2:	2301      	movs	r3, #1
 80056a4:	4053      	eors	r3, r2
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <ATC_SendReceive+0x14e>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 80056ac:	2302      	movs	r3, #2
 80056ae:	425b      	negs	r3, r3
 80056b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80056b2:	46c0      	nop			@ (mov r8, r8)
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 80056b4:	2444      	movs	r4, #68	@ 0x44
 80056b6:	193b      	adds	r3, r7, r4
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d029      	beq.n	8005712 <ATC_SendReceive+0x1ac>
 80056be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d126      	bne.n	8005712 <ATC_SendReceive+0x1ac>
  {
    uint32_t start_time = HAL_GetTick();
 80056c4:	f7fc f9fc 	bl	8001ac0 <HAL_GetTick>
 80056c8:	0003      	movs	r3, r0
 80056ca:	623b      	str	r3, [r7, #32]
    hAtc->RespCount = Items;
 80056cc:	193b      	adds	r3, r7, r4
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 80056d6:	e014      	b.n	8005702 <ATC_SendReceive+0x19c>
    {
      ATC_Delay(1);
 80056d8:	2001      	movs	r0, #1
 80056da:	f000 f8a6 	bl	800582a <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 80056de:	251f      	movs	r5, #31
 80056e0:	197c      	adds	r4, r7, r5
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	0011      	movs	r1, r2
 80056e8:	0018      	movs	r0, r3
 80056ea:	f7ff fd98 	bl	800521e <ATC_CheckResponse>
 80056ee:	0003      	movs	r3, r0
 80056f0:	7023      	strb	r3, [r4, #0]
      if (found_index > 0)
 80056f2:	197b      	adds	r3, r7, r5
 80056f4:	781b      	ldrb	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <ATC_SendReceive+0x19c>
      {
        answer = found_index;
 80056fa:	197b      	adds	r3, r7, r5
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8005700:	e007      	b.n	8005712 <ATC_SendReceive+0x1ac>
    while (HAL_GetTick() - start_time < RxTimeout)
 8005702:	f7fc f9dd 	bl	8001ac0 <HAL_GetTick>
 8005706:	0002      	movs	r2, r0
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800570e:	429a      	cmp	r2, r3
 8005710:	d8e2      	bhi.n	80056d8 <ATC_SendReceive+0x172>
      }
    }
  }
  hAtc->RespCount = 0;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8005718:	2326      	movs	r3, #38	@ 0x26
 800571a:	18fb      	adds	r3, r7, r3
 800571c:	2200      	movs	r2, #0
 800571e:	701a      	strb	r2, [r3, #0]
 8005720:	e00e      	b.n	8005740 <ATC_SendReceive+0x1da>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8005722:	2426      	movs	r4, #38	@ 0x26
 8005724:	193b      	adds	r3, r7, r4
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	330a      	adds	r3, #10
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	18d3      	adds	r3, r2, r3
 8005730:	0018      	movs	r0, r3
 8005732:	f7ff fc8d 	bl	8005050 <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 8005736:	193b      	adds	r3, r7, r4
 8005738:	781a      	ldrb	r2, [r3, #0]
 800573a:	193b      	adds	r3, r7, r4
 800573c:	3201      	adds	r2, #1
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	2326      	movs	r3, #38	@ 0x26
 8005742:	18fa      	adds	r2, r7, r3
 8005744:	2344      	movs	r3, #68	@ 0x44
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	7812      	ldrb	r2, [r2, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d3e8      	bcc.n	8005722 <ATC_SendReceive+0x1bc>
  }
  return answer;
 8005750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005752:	0018      	movs	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	b00c      	add	sp, #48	@ 0x30
 8005758:	bdb0      	pop	{r4, r5, r7, pc}

0800575a <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b082      	sub	sp, #8
 800575e:	af00      	add	r7, sp, #0
 8005760:	6078      	str	r0, [r7, #4]
 8005762:	000a      	movs	r2, r1
 8005764:	1cbb      	adds	r3, r7, #2
 8005766:	801a      	strh	r2, [r3, #0]
  if (Len > hAtc->Size - hAtc->RxIndex)
 8005768:	1cbb      	adds	r3, r7, #2
 800576a:	881a      	ldrh	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	8a9b      	ldrh	r3, [r3, #20]
 8005770:	0019      	movs	r1, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	8b1b      	ldrh	r3, [r3, #24]
 8005776:	1acb      	subs	r3, r1, r3
 8005778:	429a      	cmp	r2, r3
 800577a:	dd06      	ble.n	800578a <ATC_IdleLineCallback+0x30>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	8a99      	ldrh	r1, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	8b1a      	ldrh	r2, [r3, #24]
 8005784:	1cbb      	adds	r3, r7, #2
 8005786:	1a8a      	subs	r2, r1, r2
 8005788:	801a      	strh	r2, [r3, #0]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	8b12      	ldrh	r2, [r2, #24]
 8005792:	1898      	adds	r0, r3, r2
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	69d9      	ldr	r1, [r3, #28]
 8005798:	1cbb      	adds	r3, r7, #2
 800579a:	881b      	ldrh	r3, [r3, #0]
 800579c:	001a      	movs	r2, r3
 800579e:	f000 fc3e 	bl	800601e <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	8b1a      	ldrh	r2, [r3, #24]
 80057a6:	1cbb      	adds	r3, r7, #2
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	18d3      	adds	r3, r2, r3
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69d9      	ldr	r1, [r3, #28]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	8a9b      	ldrh	r3, [r3, #20]
 80057be:	001a      	movs	r2, r3
 80057c0:	f7ff fbcd 	bl	8004f5e <HAL_UARTEx_ReceiveToIdle_DMA>
 80057c4:	1e03      	subs	r3, r0, #0
 80057c6:	d10c      	bne.n	80057e2 <ATC_IdleLineCallback+0x88>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2104      	movs	r1, #4
 80057dc:	438a      	bics	r2, r1
 80057de:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 80057e0:	e01f      	b.n	8005822 <ATC_IdleLineCallback+0xc8>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2201      	movs	r2, #1
 80057ea:	4252      	negs	r2, r2
 80057ec:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	0018      	movs	r0, r3
 80057f4:	f7fe f856 	bl	80038a4 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6818      	ldr	r0, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	69d9      	ldr	r1, [r3, #28]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8a9b      	ldrh	r3, [r3, #20]
 8005804:	001a      	movs	r2, r3
 8005806:	f7ff fbaa 	bl	8004f5e <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2104      	movs	r1, #4
 800581e:	438a      	bics	r2, r1
 8005820:	601a      	str	r2, [r3, #0]
}
 8005822:	46c0      	nop			@ (mov r8, r8)
 8005824:	46bd      	mov	sp, r7
 8005826:	b002      	add	sp, #8
 8005828:	bd80      	pop	{r7, pc}

0800582a <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	0018      	movs	r0, r3
 8005836:	f7fc f94d 	bl	8001ad4 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 800583a:	46c0      	nop			@ (mov r8, r8)
 800583c:	46bd      	mov	sp, r7
 800583e:	b002      	add	sp, #8
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <malloc>:
 8005844:	b510      	push	{r4, lr}
 8005846:	4b03      	ldr	r3, [pc, #12]	@ (8005854 <malloc+0x10>)
 8005848:	0001      	movs	r1, r0
 800584a:	6818      	ldr	r0, [r3, #0]
 800584c:	f000 f830 	bl	80058b0 <_malloc_r>
 8005850:	bd10      	pop	{r4, pc}
 8005852:	46c0      	nop			@ (mov r8, r8)
 8005854:	20000018 	.word	0x20000018

08005858 <free>:
 8005858:	b510      	push	{r4, lr}
 800585a:	4b03      	ldr	r3, [pc, #12]	@ (8005868 <free+0x10>)
 800585c:	0001      	movs	r1, r0
 800585e:	6818      	ldr	r0, [r3, #0]
 8005860:	f000 fbe6 	bl	8006030 <_free_r>
 8005864:	bd10      	pop	{r4, pc}
 8005866:	46c0      	nop			@ (mov r8, r8)
 8005868:	20000018 	.word	0x20000018

0800586c <sbrk_aligned>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	4e0f      	ldr	r6, [pc, #60]	@ (80058ac <sbrk_aligned+0x40>)
 8005870:	000d      	movs	r5, r1
 8005872:	6831      	ldr	r1, [r6, #0]
 8005874:	0004      	movs	r4, r0
 8005876:	2900      	cmp	r1, #0
 8005878:	d102      	bne.n	8005880 <sbrk_aligned+0x14>
 800587a:	f000 fb75 	bl	8005f68 <_sbrk_r>
 800587e:	6030      	str	r0, [r6, #0]
 8005880:	0029      	movs	r1, r5
 8005882:	0020      	movs	r0, r4
 8005884:	f000 fb70 	bl	8005f68 <_sbrk_r>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d103      	bne.n	8005894 <sbrk_aligned+0x28>
 800588c:	2501      	movs	r5, #1
 800588e:	426d      	negs	r5, r5
 8005890:	0028      	movs	r0, r5
 8005892:	bd70      	pop	{r4, r5, r6, pc}
 8005894:	2303      	movs	r3, #3
 8005896:	1cc5      	adds	r5, r0, #3
 8005898:	439d      	bics	r5, r3
 800589a:	42a8      	cmp	r0, r5
 800589c:	d0f8      	beq.n	8005890 <sbrk_aligned+0x24>
 800589e:	1a29      	subs	r1, r5, r0
 80058a0:	0020      	movs	r0, r4
 80058a2:	f000 fb61 	bl	8005f68 <_sbrk_r>
 80058a6:	3001      	adds	r0, #1
 80058a8:	d1f2      	bne.n	8005890 <sbrk_aligned+0x24>
 80058aa:	e7ef      	b.n	800588c <sbrk_aligned+0x20>
 80058ac:	20000240 	.word	0x20000240

080058b0 <_malloc_r>:
 80058b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058b2:	2203      	movs	r2, #3
 80058b4:	1ccb      	adds	r3, r1, #3
 80058b6:	4393      	bics	r3, r2
 80058b8:	3308      	adds	r3, #8
 80058ba:	0005      	movs	r5, r0
 80058bc:	001f      	movs	r7, r3
 80058be:	2b0c      	cmp	r3, #12
 80058c0:	d234      	bcs.n	800592c <_malloc_r+0x7c>
 80058c2:	270c      	movs	r7, #12
 80058c4:	42b9      	cmp	r1, r7
 80058c6:	d833      	bhi.n	8005930 <_malloc_r+0x80>
 80058c8:	0028      	movs	r0, r5
 80058ca:	f000 f871 	bl	80059b0 <__malloc_lock>
 80058ce:	4e37      	ldr	r6, [pc, #220]	@ (80059ac <_malloc_r+0xfc>)
 80058d0:	6833      	ldr	r3, [r6, #0]
 80058d2:	001c      	movs	r4, r3
 80058d4:	2c00      	cmp	r4, #0
 80058d6:	d12f      	bne.n	8005938 <_malloc_r+0x88>
 80058d8:	0039      	movs	r1, r7
 80058da:	0028      	movs	r0, r5
 80058dc:	f7ff ffc6 	bl	800586c <sbrk_aligned>
 80058e0:	0004      	movs	r4, r0
 80058e2:	1c43      	adds	r3, r0, #1
 80058e4:	d15f      	bne.n	80059a6 <_malloc_r+0xf6>
 80058e6:	6834      	ldr	r4, [r6, #0]
 80058e8:	9400      	str	r4, [sp, #0]
 80058ea:	9b00      	ldr	r3, [sp, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d14a      	bne.n	8005986 <_malloc_r+0xd6>
 80058f0:	2c00      	cmp	r4, #0
 80058f2:	d052      	beq.n	800599a <_malloc_r+0xea>
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	0028      	movs	r0, r5
 80058f8:	18e3      	adds	r3, r4, r3
 80058fa:	9900      	ldr	r1, [sp, #0]
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	f000 fb33 	bl	8005f68 <_sbrk_r>
 8005902:	9b01      	ldr	r3, [sp, #4]
 8005904:	4283      	cmp	r3, r0
 8005906:	d148      	bne.n	800599a <_malloc_r+0xea>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	0028      	movs	r0, r5
 800590c:	1aff      	subs	r7, r7, r3
 800590e:	0039      	movs	r1, r7
 8005910:	f7ff ffac 	bl	800586c <sbrk_aligned>
 8005914:	3001      	adds	r0, #1
 8005916:	d040      	beq.n	800599a <_malloc_r+0xea>
 8005918:	6823      	ldr	r3, [r4, #0]
 800591a:	19db      	adds	r3, r3, r7
 800591c:	6023      	str	r3, [r4, #0]
 800591e:	6833      	ldr	r3, [r6, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	2a00      	cmp	r2, #0
 8005924:	d133      	bne.n	800598e <_malloc_r+0xde>
 8005926:	9b00      	ldr	r3, [sp, #0]
 8005928:	6033      	str	r3, [r6, #0]
 800592a:	e019      	b.n	8005960 <_malloc_r+0xb0>
 800592c:	2b00      	cmp	r3, #0
 800592e:	dac9      	bge.n	80058c4 <_malloc_r+0x14>
 8005930:	230c      	movs	r3, #12
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	2000      	movs	r0, #0
 8005936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005938:	6821      	ldr	r1, [r4, #0]
 800593a:	1bc9      	subs	r1, r1, r7
 800593c:	d420      	bmi.n	8005980 <_malloc_r+0xd0>
 800593e:	290b      	cmp	r1, #11
 8005940:	d90a      	bls.n	8005958 <_malloc_r+0xa8>
 8005942:	19e2      	adds	r2, r4, r7
 8005944:	6027      	str	r7, [r4, #0]
 8005946:	42a3      	cmp	r3, r4
 8005948:	d104      	bne.n	8005954 <_malloc_r+0xa4>
 800594a:	6032      	str	r2, [r6, #0]
 800594c:	6863      	ldr	r3, [r4, #4]
 800594e:	6011      	str	r1, [r2, #0]
 8005950:	6053      	str	r3, [r2, #4]
 8005952:	e005      	b.n	8005960 <_malloc_r+0xb0>
 8005954:	605a      	str	r2, [r3, #4]
 8005956:	e7f9      	b.n	800594c <_malloc_r+0x9c>
 8005958:	6862      	ldr	r2, [r4, #4]
 800595a:	42a3      	cmp	r3, r4
 800595c:	d10e      	bne.n	800597c <_malloc_r+0xcc>
 800595e:	6032      	str	r2, [r6, #0]
 8005960:	0028      	movs	r0, r5
 8005962:	f000 f82d 	bl	80059c0 <__malloc_unlock>
 8005966:	0020      	movs	r0, r4
 8005968:	2207      	movs	r2, #7
 800596a:	300b      	adds	r0, #11
 800596c:	1d23      	adds	r3, r4, #4
 800596e:	4390      	bics	r0, r2
 8005970:	1ac2      	subs	r2, r0, r3
 8005972:	4298      	cmp	r0, r3
 8005974:	d0df      	beq.n	8005936 <_malloc_r+0x86>
 8005976:	1a1b      	subs	r3, r3, r0
 8005978:	50a3      	str	r3, [r4, r2]
 800597a:	e7dc      	b.n	8005936 <_malloc_r+0x86>
 800597c:	605a      	str	r2, [r3, #4]
 800597e:	e7ef      	b.n	8005960 <_malloc_r+0xb0>
 8005980:	0023      	movs	r3, r4
 8005982:	6864      	ldr	r4, [r4, #4]
 8005984:	e7a6      	b.n	80058d4 <_malloc_r+0x24>
 8005986:	9c00      	ldr	r4, [sp, #0]
 8005988:	6863      	ldr	r3, [r4, #4]
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	e7ad      	b.n	80058ea <_malloc_r+0x3a>
 800598e:	001a      	movs	r2, r3
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	42a3      	cmp	r3, r4
 8005994:	d1fb      	bne.n	800598e <_malloc_r+0xde>
 8005996:	2300      	movs	r3, #0
 8005998:	e7da      	b.n	8005950 <_malloc_r+0xa0>
 800599a:	230c      	movs	r3, #12
 800599c:	0028      	movs	r0, r5
 800599e:	602b      	str	r3, [r5, #0]
 80059a0:	f000 f80e 	bl	80059c0 <__malloc_unlock>
 80059a4:	e7c6      	b.n	8005934 <_malloc_r+0x84>
 80059a6:	6007      	str	r7, [r0, #0]
 80059a8:	e7da      	b.n	8005960 <_malloc_r+0xb0>
 80059aa:	46c0      	nop			@ (mov r8, r8)
 80059ac:	20000244 	.word	0x20000244

080059b0 <__malloc_lock>:
 80059b0:	b510      	push	{r4, lr}
 80059b2:	4802      	ldr	r0, [pc, #8]	@ (80059bc <__malloc_lock+0xc>)
 80059b4:	f000 fb29 	bl	800600a <__retarget_lock_acquire_recursive>
 80059b8:	bd10      	pop	{r4, pc}
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	20000388 	.word	0x20000388

080059c0 <__malloc_unlock>:
 80059c0:	b510      	push	{r4, lr}
 80059c2:	4802      	ldr	r0, [pc, #8]	@ (80059cc <__malloc_unlock+0xc>)
 80059c4:	f000 fb22 	bl	800600c <__retarget_lock_release_recursive>
 80059c8:	bd10      	pop	{r4, pc}
 80059ca:	46c0      	nop			@ (mov r8, r8)
 80059cc:	20000388 	.word	0x20000388

080059d0 <std>:
 80059d0:	2300      	movs	r3, #0
 80059d2:	b510      	push	{r4, lr}
 80059d4:	0004      	movs	r4, r0
 80059d6:	6003      	str	r3, [r0, #0]
 80059d8:	6043      	str	r3, [r0, #4]
 80059da:	6083      	str	r3, [r0, #8]
 80059dc:	8181      	strh	r1, [r0, #12]
 80059de:	6643      	str	r3, [r0, #100]	@ 0x64
 80059e0:	81c2      	strh	r2, [r0, #14]
 80059e2:	6103      	str	r3, [r0, #16]
 80059e4:	6143      	str	r3, [r0, #20]
 80059e6:	6183      	str	r3, [r0, #24]
 80059e8:	0019      	movs	r1, r3
 80059ea:	2208      	movs	r2, #8
 80059ec:	305c      	adds	r0, #92	@ 0x5c
 80059ee:	f000 fa4f 	bl	8005e90 <memset>
 80059f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a20 <std+0x50>)
 80059f4:	6224      	str	r4, [r4, #32]
 80059f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80059f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a24 <std+0x54>)
 80059fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005a28 <std+0x58>)
 80059fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a00:	4b0a      	ldr	r3, [pc, #40]	@ (8005a2c <std+0x5c>)
 8005a02:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a04:	4b0a      	ldr	r3, [pc, #40]	@ (8005a30 <std+0x60>)
 8005a06:	429c      	cmp	r4, r3
 8005a08:	d005      	beq.n	8005a16 <std+0x46>
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <std+0x64>)
 8005a0c:	429c      	cmp	r4, r3
 8005a0e:	d002      	beq.n	8005a16 <std+0x46>
 8005a10:	4b09      	ldr	r3, [pc, #36]	@ (8005a38 <std+0x68>)
 8005a12:	429c      	cmp	r4, r3
 8005a14:	d103      	bne.n	8005a1e <std+0x4e>
 8005a16:	0020      	movs	r0, r4
 8005a18:	3058      	adds	r0, #88	@ 0x58
 8005a1a:	f000 faf5 	bl	8006008 <__retarget_lock_init_recursive>
 8005a1e:	bd10      	pop	{r4, pc}
 8005a20:	08005cb9 	.word	0x08005cb9
 8005a24:	08005ce1 	.word	0x08005ce1
 8005a28:	08005d19 	.word	0x08005d19
 8005a2c:	08005d45 	.word	0x08005d45
 8005a30:	20000248 	.word	0x20000248
 8005a34:	200002b0 	.word	0x200002b0
 8005a38:	20000318 	.word	0x20000318

08005a3c <stdio_exit_handler>:
 8005a3c:	b510      	push	{r4, lr}
 8005a3e:	4a03      	ldr	r2, [pc, #12]	@ (8005a4c <stdio_exit_handler+0x10>)
 8005a40:	4903      	ldr	r1, [pc, #12]	@ (8005a50 <stdio_exit_handler+0x14>)
 8005a42:	4804      	ldr	r0, [pc, #16]	@ (8005a54 <stdio_exit_handler+0x18>)
 8005a44:	f000 f86c 	bl	8005b20 <_fwalk_sglue>
 8005a48:	bd10      	pop	{r4, pc}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	2000000c 	.word	0x2000000c
 8005a50:	08006a0d 	.word	0x08006a0d
 8005a54:	2000001c 	.word	0x2000001c

08005a58 <cleanup_stdio>:
 8005a58:	6841      	ldr	r1, [r0, #4]
 8005a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a88 <cleanup_stdio+0x30>)
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	0004      	movs	r4, r0
 8005a60:	4299      	cmp	r1, r3
 8005a62:	d001      	beq.n	8005a68 <cleanup_stdio+0x10>
 8005a64:	f000 ffd2 	bl	8006a0c <_fflush_r>
 8005a68:	68a1      	ldr	r1, [r4, #8]
 8005a6a:	4b08      	ldr	r3, [pc, #32]	@ (8005a8c <cleanup_stdio+0x34>)
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	d002      	beq.n	8005a76 <cleanup_stdio+0x1e>
 8005a70:	0020      	movs	r0, r4
 8005a72:	f000 ffcb 	bl	8006a0c <_fflush_r>
 8005a76:	68e1      	ldr	r1, [r4, #12]
 8005a78:	4b05      	ldr	r3, [pc, #20]	@ (8005a90 <cleanup_stdio+0x38>)
 8005a7a:	4299      	cmp	r1, r3
 8005a7c:	d002      	beq.n	8005a84 <cleanup_stdio+0x2c>
 8005a7e:	0020      	movs	r0, r4
 8005a80:	f000 ffc4 	bl	8006a0c <_fflush_r>
 8005a84:	bd10      	pop	{r4, pc}
 8005a86:	46c0      	nop			@ (mov r8, r8)
 8005a88:	20000248 	.word	0x20000248
 8005a8c:	200002b0 	.word	0x200002b0
 8005a90:	20000318 	.word	0x20000318

08005a94 <global_stdio_init.part.0>:
 8005a94:	b510      	push	{r4, lr}
 8005a96:	4b09      	ldr	r3, [pc, #36]	@ (8005abc <global_stdio_init.part.0+0x28>)
 8005a98:	4a09      	ldr	r2, [pc, #36]	@ (8005ac0 <global_stdio_init.part.0+0x2c>)
 8005a9a:	2104      	movs	r1, #4
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	4809      	ldr	r0, [pc, #36]	@ (8005ac4 <global_stdio_init.part.0+0x30>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f7ff ff95 	bl	80059d0 <std>
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	2109      	movs	r1, #9
 8005aaa:	4807      	ldr	r0, [pc, #28]	@ (8005ac8 <global_stdio_init.part.0+0x34>)
 8005aac:	f7ff ff90 	bl	80059d0 <std>
 8005ab0:	2202      	movs	r2, #2
 8005ab2:	2112      	movs	r1, #18
 8005ab4:	4805      	ldr	r0, [pc, #20]	@ (8005acc <global_stdio_init.part.0+0x38>)
 8005ab6:	f7ff ff8b 	bl	80059d0 <std>
 8005aba:	bd10      	pop	{r4, pc}
 8005abc:	20000380 	.word	0x20000380
 8005ac0:	08005a3d 	.word	0x08005a3d
 8005ac4:	20000248 	.word	0x20000248
 8005ac8:	200002b0 	.word	0x200002b0
 8005acc:	20000318 	.word	0x20000318

08005ad0 <__sfp_lock_acquire>:
 8005ad0:	b510      	push	{r4, lr}
 8005ad2:	4802      	ldr	r0, [pc, #8]	@ (8005adc <__sfp_lock_acquire+0xc>)
 8005ad4:	f000 fa99 	bl	800600a <__retarget_lock_acquire_recursive>
 8005ad8:	bd10      	pop	{r4, pc}
 8005ada:	46c0      	nop			@ (mov r8, r8)
 8005adc:	20000389 	.word	0x20000389

08005ae0 <__sfp_lock_release>:
 8005ae0:	b510      	push	{r4, lr}
 8005ae2:	4802      	ldr	r0, [pc, #8]	@ (8005aec <__sfp_lock_release+0xc>)
 8005ae4:	f000 fa92 	bl	800600c <__retarget_lock_release_recursive>
 8005ae8:	bd10      	pop	{r4, pc}
 8005aea:	46c0      	nop			@ (mov r8, r8)
 8005aec:	20000389 	.word	0x20000389

08005af0 <__sinit>:
 8005af0:	b510      	push	{r4, lr}
 8005af2:	0004      	movs	r4, r0
 8005af4:	f7ff ffec 	bl	8005ad0 <__sfp_lock_acquire>
 8005af8:	6a23      	ldr	r3, [r4, #32]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <__sinit+0x14>
 8005afe:	f7ff ffef 	bl	8005ae0 <__sfp_lock_release>
 8005b02:	bd10      	pop	{r4, pc}
 8005b04:	4b04      	ldr	r3, [pc, #16]	@ (8005b18 <__sinit+0x28>)
 8005b06:	6223      	str	r3, [r4, #32]
 8005b08:	4b04      	ldr	r3, [pc, #16]	@ (8005b1c <__sinit+0x2c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1f6      	bne.n	8005afe <__sinit+0xe>
 8005b10:	f7ff ffc0 	bl	8005a94 <global_stdio_init.part.0>
 8005b14:	e7f3      	b.n	8005afe <__sinit+0xe>
 8005b16:	46c0      	nop			@ (mov r8, r8)
 8005b18:	08005a59 	.word	0x08005a59
 8005b1c:	20000380 	.word	0x20000380

08005b20 <_fwalk_sglue>:
 8005b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b22:	0014      	movs	r4, r2
 8005b24:	2600      	movs	r6, #0
 8005b26:	9000      	str	r0, [sp, #0]
 8005b28:	9101      	str	r1, [sp, #4]
 8005b2a:	68a5      	ldr	r5, [r4, #8]
 8005b2c:	6867      	ldr	r7, [r4, #4]
 8005b2e:	3f01      	subs	r7, #1
 8005b30:	d504      	bpl.n	8005b3c <_fwalk_sglue+0x1c>
 8005b32:	6824      	ldr	r4, [r4, #0]
 8005b34:	2c00      	cmp	r4, #0
 8005b36:	d1f8      	bne.n	8005b2a <_fwalk_sglue+0xa>
 8005b38:	0030      	movs	r0, r6
 8005b3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005b3c:	89ab      	ldrh	r3, [r5, #12]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d908      	bls.n	8005b54 <_fwalk_sglue+0x34>
 8005b42:	220e      	movs	r2, #14
 8005b44:	5eab      	ldrsh	r3, [r5, r2]
 8005b46:	3301      	adds	r3, #1
 8005b48:	d004      	beq.n	8005b54 <_fwalk_sglue+0x34>
 8005b4a:	0029      	movs	r1, r5
 8005b4c:	9800      	ldr	r0, [sp, #0]
 8005b4e:	9b01      	ldr	r3, [sp, #4]
 8005b50:	4798      	blx	r3
 8005b52:	4306      	orrs	r6, r0
 8005b54:	3568      	adds	r5, #104	@ 0x68
 8005b56:	e7ea      	b.n	8005b2e <_fwalk_sglue+0xe>

08005b58 <iprintf>:
 8005b58:	b40f      	push	{r0, r1, r2, r3}
 8005b5a:	b507      	push	{r0, r1, r2, lr}
 8005b5c:	4905      	ldr	r1, [pc, #20]	@ (8005b74 <iprintf+0x1c>)
 8005b5e:	ab04      	add	r3, sp, #16
 8005b60:	6808      	ldr	r0, [r1, #0]
 8005b62:	cb04      	ldmia	r3!, {r2}
 8005b64:	6881      	ldr	r1, [r0, #8]
 8005b66:	9301      	str	r3, [sp, #4]
 8005b68:	f000 fc32 	bl	80063d0 <_vfiprintf_r>
 8005b6c:	b003      	add	sp, #12
 8005b6e:	bc08      	pop	{r3}
 8005b70:	b004      	add	sp, #16
 8005b72:	4718      	bx	r3
 8005b74:	20000018 	.word	0x20000018

08005b78 <putchar>:
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	4b03      	ldr	r3, [pc, #12]	@ (8005b88 <putchar+0x10>)
 8005b7c:	0001      	movs	r1, r0
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	6882      	ldr	r2, [r0, #8]
 8005b82:	f000 ffda 	bl	8006b3a <_putc_r>
 8005b86:	bd10      	pop	{r4, pc}
 8005b88:	20000018 	.word	0x20000018

08005b8c <_puts_r>:
 8005b8c:	6a03      	ldr	r3, [r0, #32]
 8005b8e:	b570      	push	{r4, r5, r6, lr}
 8005b90:	0005      	movs	r5, r0
 8005b92:	000e      	movs	r6, r1
 8005b94:	6884      	ldr	r4, [r0, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <_puts_r+0x12>
 8005b9a:	f7ff ffa9 	bl	8005af0 <__sinit>
 8005b9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ba0:	07db      	lsls	r3, r3, #31
 8005ba2:	d405      	bmi.n	8005bb0 <_puts_r+0x24>
 8005ba4:	89a3      	ldrh	r3, [r4, #12]
 8005ba6:	059b      	lsls	r3, r3, #22
 8005ba8:	d402      	bmi.n	8005bb0 <_puts_r+0x24>
 8005baa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bac:	f000 fa2d 	bl	800600a <__retarget_lock_acquire_recursive>
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	071b      	lsls	r3, r3, #28
 8005bb4:	d502      	bpl.n	8005bbc <_puts_r+0x30>
 8005bb6:	6923      	ldr	r3, [r4, #16]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d11f      	bne.n	8005bfc <_puts_r+0x70>
 8005bbc:	0021      	movs	r1, r4
 8005bbe:	0028      	movs	r0, r5
 8005bc0:	f000 f908 	bl	8005dd4 <__swsetup_r>
 8005bc4:	2800      	cmp	r0, #0
 8005bc6:	d019      	beq.n	8005bfc <_puts_r+0x70>
 8005bc8:	2501      	movs	r5, #1
 8005bca:	426d      	negs	r5, r5
 8005bcc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bce:	07db      	lsls	r3, r3, #31
 8005bd0:	d405      	bmi.n	8005bde <_puts_r+0x52>
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	059b      	lsls	r3, r3, #22
 8005bd6:	d402      	bmi.n	8005bde <_puts_r+0x52>
 8005bd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bda:	f000 fa17 	bl	800600c <__retarget_lock_release_recursive>
 8005bde:	0028      	movs	r0, r5
 8005be0:	bd70      	pop	{r4, r5, r6, pc}
 8005be2:	3601      	adds	r6, #1
 8005be4:	60a3      	str	r3, [r4, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da04      	bge.n	8005bf4 <_puts_r+0x68>
 8005bea:	69a2      	ldr	r2, [r4, #24]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	dc16      	bgt.n	8005c1e <_puts_r+0x92>
 8005bf0:	290a      	cmp	r1, #10
 8005bf2:	d014      	beq.n	8005c1e <_puts_r+0x92>
 8005bf4:	6823      	ldr	r3, [r4, #0]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	6022      	str	r2, [r4, #0]
 8005bfa:	7019      	strb	r1, [r3, #0]
 8005bfc:	68a3      	ldr	r3, [r4, #8]
 8005bfe:	7831      	ldrb	r1, [r6, #0]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	2900      	cmp	r1, #0
 8005c04:	d1ed      	bne.n	8005be2 <_puts_r+0x56>
 8005c06:	60a3      	str	r3, [r4, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	da0f      	bge.n	8005c2c <_puts_r+0xa0>
 8005c0c:	0022      	movs	r2, r4
 8005c0e:	0028      	movs	r0, r5
 8005c10:	310a      	adds	r1, #10
 8005c12:	f000 f89d 	bl	8005d50 <__swbuf_r>
 8005c16:	3001      	adds	r0, #1
 8005c18:	d0d6      	beq.n	8005bc8 <_puts_r+0x3c>
 8005c1a:	250a      	movs	r5, #10
 8005c1c:	e7d6      	b.n	8005bcc <_puts_r+0x40>
 8005c1e:	0022      	movs	r2, r4
 8005c20:	0028      	movs	r0, r5
 8005c22:	f000 f895 	bl	8005d50 <__swbuf_r>
 8005c26:	3001      	adds	r0, #1
 8005c28:	d1e8      	bne.n	8005bfc <_puts_r+0x70>
 8005c2a:	e7cd      	b.n	8005bc8 <_puts_r+0x3c>
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	6022      	str	r2, [r4, #0]
 8005c32:	220a      	movs	r2, #10
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	e7f0      	b.n	8005c1a <_puts_r+0x8e>

08005c38 <puts>:
 8005c38:	b510      	push	{r4, lr}
 8005c3a:	4b03      	ldr	r3, [pc, #12]	@ (8005c48 <puts+0x10>)
 8005c3c:	0001      	movs	r1, r0
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	f7ff ffa4 	bl	8005b8c <_puts_r>
 8005c44:	bd10      	pop	{r4, pc}
 8005c46:	46c0      	nop			@ (mov r8, r8)
 8005c48:	20000018 	.word	0x20000018

08005c4c <sniprintf>:
 8005c4c:	b40c      	push	{r2, r3}
 8005c4e:	b530      	push	{r4, r5, lr}
 8005c50:	4b18      	ldr	r3, [pc, #96]	@ (8005cb4 <sniprintf+0x68>)
 8005c52:	000c      	movs	r4, r1
 8005c54:	681d      	ldr	r5, [r3, #0]
 8005c56:	b09d      	sub	sp, #116	@ 0x74
 8005c58:	2900      	cmp	r1, #0
 8005c5a:	da08      	bge.n	8005c6e <sniprintf+0x22>
 8005c5c:	238b      	movs	r3, #139	@ 0x8b
 8005c5e:	2001      	movs	r0, #1
 8005c60:	602b      	str	r3, [r5, #0]
 8005c62:	4240      	negs	r0, r0
 8005c64:	b01d      	add	sp, #116	@ 0x74
 8005c66:	bc30      	pop	{r4, r5}
 8005c68:	bc08      	pop	{r3}
 8005c6a:	b002      	add	sp, #8
 8005c6c:	4718      	bx	r3
 8005c6e:	2382      	movs	r3, #130	@ 0x82
 8005c70:	466a      	mov	r2, sp
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	8293      	strh	r3, [r2, #20]
 8005c76:	2300      	movs	r3, #0
 8005c78:	9002      	str	r0, [sp, #8]
 8005c7a:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005c7c:	9006      	str	r0, [sp, #24]
 8005c7e:	4299      	cmp	r1, r3
 8005c80:	d000      	beq.n	8005c84 <sniprintf+0x38>
 8005c82:	1e4b      	subs	r3, r1, #1
 8005c84:	9304      	str	r3, [sp, #16]
 8005c86:	9307      	str	r3, [sp, #28]
 8005c88:	2301      	movs	r3, #1
 8005c8a:	466a      	mov	r2, sp
 8005c8c:	425b      	negs	r3, r3
 8005c8e:	82d3      	strh	r3, [r2, #22]
 8005c90:	0028      	movs	r0, r5
 8005c92:	ab21      	add	r3, sp, #132	@ 0x84
 8005c94:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005c96:	a902      	add	r1, sp, #8
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	f000 fa73 	bl	8006184 <_svfiprintf_r>
 8005c9e:	1c43      	adds	r3, r0, #1
 8005ca0:	da01      	bge.n	8005ca6 <sniprintf+0x5a>
 8005ca2:	238b      	movs	r3, #139	@ 0x8b
 8005ca4:	602b      	str	r3, [r5, #0]
 8005ca6:	2c00      	cmp	r4, #0
 8005ca8:	d0dc      	beq.n	8005c64 <sniprintf+0x18>
 8005caa:	2200      	movs	r2, #0
 8005cac:	9b02      	ldr	r3, [sp, #8]
 8005cae:	701a      	strb	r2, [r3, #0]
 8005cb0:	e7d8      	b.n	8005c64 <sniprintf+0x18>
 8005cb2:	46c0      	nop			@ (mov r8, r8)
 8005cb4:	20000018 	.word	0x20000018

08005cb8 <__sread>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	000c      	movs	r4, r1
 8005cbc:	250e      	movs	r5, #14
 8005cbe:	5f49      	ldrsh	r1, [r1, r5]
 8005cc0:	f000 f93e 	bl	8005f40 <_read_r>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	db03      	blt.n	8005cd0 <__sread+0x18>
 8005cc8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8005cca:	181b      	adds	r3, r3, r0
 8005ccc:	6563      	str	r3, [r4, #84]	@ 0x54
 8005cce:	bd70      	pop	{r4, r5, r6, pc}
 8005cd0:	89a3      	ldrh	r3, [r4, #12]
 8005cd2:	4a02      	ldr	r2, [pc, #8]	@ (8005cdc <__sread+0x24>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	81a3      	strh	r3, [r4, #12]
 8005cd8:	e7f9      	b.n	8005cce <__sread+0x16>
 8005cda:	46c0      	nop			@ (mov r8, r8)
 8005cdc:	ffffefff 	.word	0xffffefff

08005ce0 <__swrite>:
 8005ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce2:	001f      	movs	r7, r3
 8005ce4:	898b      	ldrh	r3, [r1, #12]
 8005ce6:	0005      	movs	r5, r0
 8005ce8:	000c      	movs	r4, r1
 8005cea:	0016      	movs	r6, r2
 8005cec:	05db      	lsls	r3, r3, #23
 8005cee:	d505      	bpl.n	8005cfc <__swrite+0x1c>
 8005cf0:	230e      	movs	r3, #14
 8005cf2:	5ec9      	ldrsh	r1, [r1, r3]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	2302      	movs	r3, #2
 8005cf8:	f000 f90e 	bl	8005f18 <_lseek_r>
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	4a05      	ldr	r2, [pc, #20]	@ (8005d14 <__swrite+0x34>)
 8005d00:	0028      	movs	r0, r5
 8005d02:	4013      	ands	r3, r2
 8005d04:	81a3      	strh	r3, [r4, #12]
 8005d06:	0032      	movs	r2, r6
 8005d08:	230e      	movs	r3, #14
 8005d0a:	5ee1      	ldrsh	r1, [r4, r3]
 8005d0c:	003b      	movs	r3, r7
 8005d0e:	f000 f93d 	bl	8005f8c <_write_r>
 8005d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d14:	ffffefff 	.word	0xffffefff

08005d18 <__sseek>:
 8005d18:	b570      	push	{r4, r5, r6, lr}
 8005d1a:	000c      	movs	r4, r1
 8005d1c:	250e      	movs	r5, #14
 8005d1e:	5f49      	ldrsh	r1, [r1, r5]
 8005d20:	f000 f8fa 	bl	8005f18 <_lseek_r>
 8005d24:	89a3      	ldrh	r3, [r4, #12]
 8005d26:	1c42      	adds	r2, r0, #1
 8005d28:	d103      	bne.n	8005d32 <__sseek+0x1a>
 8005d2a:	4a05      	ldr	r2, [pc, #20]	@ (8005d40 <__sseek+0x28>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	81a3      	strh	r3, [r4, #12]
 8005d30:	bd70      	pop	{r4, r5, r6, pc}
 8005d32:	2280      	movs	r2, #128	@ 0x80
 8005d34:	0152      	lsls	r2, r2, #5
 8005d36:	4313      	orrs	r3, r2
 8005d38:	81a3      	strh	r3, [r4, #12]
 8005d3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d3c:	e7f8      	b.n	8005d30 <__sseek+0x18>
 8005d3e:	46c0      	nop			@ (mov r8, r8)
 8005d40:	ffffefff 	.word	0xffffefff

08005d44 <__sclose>:
 8005d44:	b510      	push	{r4, lr}
 8005d46:	230e      	movs	r3, #14
 8005d48:	5ec9      	ldrsh	r1, [r1, r3]
 8005d4a:	f000 f8d3 	bl	8005ef4 <_close_r>
 8005d4e:	bd10      	pop	{r4, pc}

08005d50 <__swbuf_r>:
 8005d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d52:	0006      	movs	r6, r0
 8005d54:	000d      	movs	r5, r1
 8005d56:	0014      	movs	r4, r2
 8005d58:	2800      	cmp	r0, #0
 8005d5a:	d004      	beq.n	8005d66 <__swbuf_r+0x16>
 8005d5c:	6a03      	ldr	r3, [r0, #32]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <__swbuf_r+0x16>
 8005d62:	f7ff fec5 	bl	8005af0 <__sinit>
 8005d66:	69a3      	ldr	r3, [r4, #24]
 8005d68:	60a3      	str	r3, [r4, #8]
 8005d6a:	89a3      	ldrh	r3, [r4, #12]
 8005d6c:	071b      	lsls	r3, r3, #28
 8005d6e:	d502      	bpl.n	8005d76 <__swbuf_r+0x26>
 8005d70:	6923      	ldr	r3, [r4, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <__swbuf_r+0x3a>
 8005d76:	0021      	movs	r1, r4
 8005d78:	0030      	movs	r0, r6
 8005d7a:	f000 f82b 	bl	8005dd4 <__swsetup_r>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	d003      	beq.n	8005d8a <__swbuf_r+0x3a>
 8005d82:	2501      	movs	r5, #1
 8005d84:	426d      	negs	r5, r5
 8005d86:	0028      	movs	r0, r5
 8005d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	6820      	ldr	r0, [r4, #0]
 8005d8e:	b2ef      	uxtb	r7, r5
 8005d90:	1ac0      	subs	r0, r0, r3
 8005d92:	6963      	ldr	r3, [r4, #20]
 8005d94:	b2ed      	uxtb	r5, r5
 8005d96:	4283      	cmp	r3, r0
 8005d98:	dc05      	bgt.n	8005da6 <__swbuf_r+0x56>
 8005d9a:	0021      	movs	r1, r4
 8005d9c:	0030      	movs	r0, r6
 8005d9e:	f000 fe35 	bl	8006a0c <_fflush_r>
 8005da2:	2800      	cmp	r0, #0
 8005da4:	d1ed      	bne.n	8005d82 <__swbuf_r+0x32>
 8005da6:	68a3      	ldr	r3, [r4, #8]
 8005da8:	3001      	adds	r0, #1
 8005daa:	3b01      	subs	r3, #1
 8005dac:	60a3      	str	r3, [r4, #8]
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	6022      	str	r2, [r4, #0]
 8005db4:	701f      	strb	r7, [r3, #0]
 8005db6:	6963      	ldr	r3, [r4, #20]
 8005db8:	4283      	cmp	r3, r0
 8005dba:	d004      	beq.n	8005dc6 <__swbuf_r+0x76>
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	07db      	lsls	r3, r3, #31
 8005dc0:	d5e1      	bpl.n	8005d86 <__swbuf_r+0x36>
 8005dc2:	2d0a      	cmp	r5, #10
 8005dc4:	d1df      	bne.n	8005d86 <__swbuf_r+0x36>
 8005dc6:	0021      	movs	r1, r4
 8005dc8:	0030      	movs	r0, r6
 8005dca:	f000 fe1f 	bl	8006a0c <_fflush_r>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	d0d9      	beq.n	8005d86 <__swbuf_r+0x36>
 8005dd2:	e7d6      	b.n	8005d82 <__swbuf_r+0x32>

08005dd4 <__swsetup_r>:
 8005dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8005e8c <__swsetup_r+0xb8>)
 8005dd6:	b570      	push	{r4, r5, r6, lr}
 8005dd8:	0005      	movs	r5, r0
 8005dda:	6818      	ldr	r0, [r3, #0]
 8005ddc:	000c      	movs	r4, r1
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d004      	beq.n	8005dec <__swsetup_r+0x18>
 8005de2:	6a03      	ldr	r3, [r0, #32]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d101      	bne.n	8005dec <__swsetup_r+0x18>
 8005de8:	f7ff fe82 	bl	8005af0 <__sinit>
 8005dec:	220c      	movs	r2, #12
 8005dee:	5ea3      	ldrsh	r3, [r4, r2]
 8005df0:	071a      	lsls	r2, r3, #28
 8005df2:	d423      	bmi.n	8005e3c <__swsetup_r+0x68>
 8005df4:	06da      	lsls	r2, r3, #27
 8005df6:	d407      	bmi.n	8005e08 <__swsetup_r+0x34>
 8005df8:	2209      	movs	r2, #9
 8005dfa:	602a      	str	r2, [r5, #0]
 8005dfc:	2240      	movs	r2, #64	@ 0x40
 8005dfe:	2001      	movs	r0, #1
 8005e00:	4313      	orrs	r3, r2
 8005e02:	81a3      	strh	r3, [r4, #12]
 8005e04:	4240      	negs	r0, r0
 8005e06:	e03a      	b.n	8005e7e <__swsetup_r+0xaa>
 8005e08:	075b      	lsls	r3, r3, #29
 8005e0a:	d513      	bpl.n	8005e34 <__swsetup_r+0x60>
 8005e0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e0e:	2900      	cmp	r1, #0
 8005e10:	d008      	beq.n	8005e24 <__swsetup_r+0x50>
 8005e12:	0023      	movs	r3, r4
 8005e14:	3344      	adds	r3, #68	@ 0x44
 8005e16:	4299      	cmp	r1, r3
 8005e18:	d002      	beq.n	8005e20 <__swsetup_r+0x4c>
 8005e1a:	0028      	movs	r0, r5
 8005e1c:	f000 f908 	bl	8006030 <_free_r>
 8005e20:	2300      	movs	r3, #0
 8005e22:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e24:	2224      	movs	r2, #36	@ 0x24
 8005e26:	89a3      	ldrh	r3, [r4, #12]
 8005e28:	4393      	bics	r3, r2
 8005e2a:	81a3      	strh	r3, [r4, #12]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	6063      	str	r3, [r4, #4]
 8005e30:	6923      	ldr	r3, [r4, #16]
 8005e32:	6023      	str	r3, [r4, #0]
 8005e34:	2308      	movs	r3, #8
 8005e36:	89a2      	ldrh	r2, [r4, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	81a3      	strh	r3, [r4, #12]
 8005e3c:	6923      	ldr	r3, [r4, #16]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10b      	bne.n	8005e5a <__swsetup_r+0x86>
 8005e42:	21a0      	movs	r1, #160	@ 0xa0
 8005e44:	2280      	movs	r2, #128	@ 0x80
 8005e46:	89a3      	ldrh	r3, [r4, #12]
 8005e48:	0089      	lsls	r1, r1, #2
 8005e4a:	0092      	lsls	r2, r2, #2
 8005e4c:	400b      	ands	r3, r1
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d003      	beq.n	8005e5a <__swsetup_r+0x86>
 8005e52:	0021      	movs	r1, r4
 8005e54:	0028      	movs	r0, r5
 8005e56:	f000 fe2f 	bl	8006ab8 <__smakebuf_r>
 8005e5a:	220c      	movs	r2, #12
 8005e5c:	5ea3      	ldrsh	r3, [r4, r2]
 8005e5e:	2101      	movs	r1, #1
 8005e60:	001a      	movs	r2, r3
 8005e62:	400a      	ands	r2, r1
 8005e64:	420b      	tst	r3, r1
 8005e66:	d00b      	beq.n	8005e80 <__swsetup_r+0xac>
 8005e68:	2200      	movs	r2, #0
 8005e6a:	60a2      	str	r2, [r4, #8]
 8005e6c:	6962      	ldr	r2, [r4, #20]
 8005e6e:	4252      	negs	r2, r2
 8005e70:	61a2      	str	r2, [r4, #24]
 8005e72:	2000      	movs	r0, #0
 8005e74:	6922      	ldr	r2, [r4, #16]
 8005e76:	4282      	cmp	r2, r0
 8005e78:	d101      	bne.n	8005e7e <__swsetup_r+0xaa>
 8005e7a:	061a      	lsls	r2, r3, #24
 8005e7c:	d4be      	bmi.n	8005dfc <__swsetup_r+0x28>
 8005e7e:	bd70      	pop	{r4, r5, r6, pc}
 8005e80:	0799      	lsls	r1, r3, #30
 8005e82:	d400      	bmi.n	8005e86 <__swsetup_r+0xb2>
 8005e84:	6962      	ldr	r2, [r4, #20]
 8005e86:	60a2      	str	r2, [r4, #8]
 8005e88:	e7f3      	b.n	8005e72 <__swsetup_r+0x9e>
 8005e8a:	46c0      	nop			@ (mov r8, r8)
 8005e8c:	20000018 	.word	0x20000018

08005e90 <memset>:
 8005e90:	0003      	movs	r3, r0
 8005e92:	1882      	adds	r2, r0, r2
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d100      	bne.n	8005e9a <memset+0xa>
 8005e98:	4770      	bx	lr
 8005e9a:	7019      	strb	r1, [r3, #0]
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	e7f9      	b.n	8005e94 <memset+0x4>

08005ea0 <strncpy>:
 8005ea0:	0003      	movs	r3, r0
 8005ea2:	b530      	push	{r4, r5, lr}
 8005ea4:	001d      	movs	r5, r3
 8005ea6:	2a00      	cmp	r2, #0
 8005ea8:	d006      	beq.n	8005eb8 <strncpy+0x18>
 8005eaa:	780c      	ldrb	r4, [r1, #0]
 8005eac:	3a01      	subs	r2, #1
 8005eae:	3301      	adds	r3, #1
 8005eb0:	702c      	strb	r4, [r5, #0]
 8005eb2:	3101      	adds	r1, #1
 8005eb4:	2c00      	cmp	r4, #0
 8005eb6:	d1f5      	bne.n	8005ea4 <strncpy+0x4>
 8005eb8:	2100      	movs	r1, #0
 8005eba:	189a      	adds	r2, r3, r2
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d100      	bne.n	8005ec2 <strncpy+0x22>
 8005ec0:	bd30      	pop	{r4, r5, pc}
 8005ec2:	7019      	strb	r1, [r3, #0]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	e7f9      	b.n	8005ebc <strncpy+0x1c>

08005ec8 <strstr>:
 8005ec8:	780a      	ldrb	r2, [r1, #0]
 8005eca:	b530      	push	{r4, r5, lr}
 8005ecc:	2a00      	cmp	r2, #0
 8005ece:	d10c      	bne.n	8005eea <strstr+0x22>
 8005ed0:	bd30      	pop	{r4, r5, pc}
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d108      	bne.n	8005ee8 <strstr+0x20>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	5ccc      	ldrb	r4, [r1, r3]
 8005eda:	2c00      	cmp	r4, #0
 8005edc:	d0f8      	beq.n	8005ed0 <strstr+0x8>
 8005ede:	5cc5      	ldrb	r5, [r0, r3]
 8005ee0:	42a5      	cmp	r5, r4
 8005ee2:	d101      	bne.n	8005ee8 <strstr+0x20>
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	e7f7      	b.n	8005ed8 <strstr+0x10>
 8005ee8:	3001      	adds	r0, #1
 8005eea:	7803      	ldrb	r3, [r0, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1f0      	bne.n	8005ed2 <strstr+0xa>
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	e7ed      	b.n	8005ed0 <strstr+0x8>

08005ef4 <_close_r>:
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	b570      	push	{r4, r5, r6, lr}
 8005ef8:	4d06      	ldr	r5, [pc, #24]	@ (8005f14 <_close_r+0x20>)
 8005efa:	0004      	movs	r4, r0
 8005efc:	0008      	movs	r0, r1
 8005efe:	602b      	str	r3, [r5, #0]
 8005f00:	f7fa fdc3 	bl	8000a8a <_close>
 8005f04:	1c43      	adds	r3, r0, #1
 8005f06:	d103      	bne.n	8005f10 <_close_r+0x1c>
 8005f08:	682b      	ldr	r3, [r5, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d000      	beq.n	8005f10 <_close_r+0x1c>
 8005f0e:	6023      	str	r3, [r4, #0]
 8005f10:	bd70      	pop	{r4, r5, r6, pc}
 8005f12:	46c0      	nop			@ (mov r8, r8)
 8005f14:	20000384 	.word	0x20000384

08005f18 <_lseek_r>:
 8005f18:	b570      	push	{r4, r5, r6, lr}
 8005f1a:	0004      	movs	r4, r0
 8005f1c:	0008      	movs	r0, r1
 8005f1e:	0011      	movs	r1, r2
 8005f20:	001a      	movs	r2, r3
 8005f22:	2300      	movs	r3, #0
 8005f24:	4d05      	ldr	r5, [pc, #20]	@ (8005f3c <_lseek_r+0x24>)
 8005f26:	602b      	str	r3, [r5, #0]
 8005f28:	f7fa fdd0 	bl	8000acc <_lseek>
 8005f2c:	1c43      	adds	r3, r0, #1
 8005f2e:	d103      	bne.n	8005f38 <_lseek_r+0x20>
 8005f30:	682b      	ldr	r3, [r5, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d000      	beq.n	8005f38 <_lseek_r+0x20>
 8005f36:	6023      	str	r3, [r4, #0]
 8005f38:	bd70      	pop	{r4, r5, r6, pc}
 8005f3a:	46c0      	nop			@ (mov r8, r8)
 8005f3c:	20000384 	.word	0x20000384

08005f40 <_read_r>:
 8005f40:	b570      	push	{r4, r5, r6, lr}
 8005f42:	0004      	movs	r4, r0
 8005f44:	0008      	movs	r0, r1
 8005f46:	0011      	movs	r1, r2
 8005f48:	001a      	movs	r2, r3
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	4d05      	ldr	r5, [pc, #20]	@ (8005f64 <_read_r+0x24>)
 8005f4e:	602b      	str	r3, [r5, #0]
 8005f50:	f7fa fd62 	bl	8000a18 <_read>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d103      	bne.n	8005f60 <_read_r+0x20>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d000      	beq.n	8005f60 <_read_r+0x20>
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	bd70      	pop	{r4, r5, r6, pc}
 8005f62:	46c0      	nop			@ (mov r8, r8)
 8005f64:	20000384 	.word	0x20000384

08005f68 <_sbrk_r>:
 8005f68:	2300      	movs	r3, #0
 8005f6a:	b570      	push	{r4, r5, r6, lr}
 8005f6c:	4d06      	ldr	r5, [pc, #24]	@ (8005f88 <_sbrk_r+0x20>)
 8005f6e:	0004      	movs	r4, r0
 8005f70:	0008      	movs	r0, r1
 8005f72:	602b      	str	r3, [r5, #0]
 8005f74:	f7fa fdb6 	bl	8000ae4 <_sbrk>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d103      	bne.n	8005f84 <_sbrk_r+0x1c>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d000      	beq.n	8005f84 <_sbrk_r+0x1c>
 8005f82:	6023      	str	r3, [r4, #0]
 8005f84:	bd70      	pop	{r4, r5, r6, pc}
 8005f86:	46c0      	nop			@ (mov r8, r8)
 8005f88:	20000384 	.word	0x20000384

08005f8c <_write_r>:
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	0004      	movs	r4, r0
 8005f90:	0008      	movs	r0, r1
 8005f92:	0011      	movs	r1, r2
 8005f94:	001a      	movs	r2, r3
 8005f96:	2300      	movs	r3, #0
 8005f98:	4d05      	ldr	r5, [pc, #20]	@ (8005fb0 <_write_r+0x24>)
 8005f9a:	602b      	str	r3, [r5, #0]
 8005f9c:	f7fa fd59 	bl	8000a52 <_write>
 8005fa0:	1c43      	adds	r3, r0, #1
 8005fa2:	d103      	bne.n	8005fac <_write_r+0x20>
 8005fa4:	682b      	ldr	r3, [r5, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d000      	beq.n	8005fac <_write_r+0x20>
 8005faa:	6023      	str	r3, [r4, #0]
 8005fac:	bd70      	pop	{r4, r5, r6, pc}
 8005fae:	46c0      	nop			@ (mov r8, r8)
 8005fb0:	20000384 	.word	0x20000384

08005fb4 <__errno>:
 8005fb4:	4b01      	ldr	r3, [pc, #4]	@ (8005fbc <__errno+0x8>)
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	4770      	bx	lr
 8005fba:	46c0      	nop			@ (mov r8, r8)
 8005fbc:	20000018 	.word	0x20000018

08005fc0 <__libc_init_array>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	2600      	movs	r6, #0
 8005fc4:	4c0c      	ldr	r4, [pc, #48]	@ (8005ff8 <__libc_init_array+0x38>)
 8005fc6:	4d0d      	ldr	r5, [pc, #52]	@ (8005ffc <__libc_init_array+0x3c>)
 8005fc8:	1b64      	subs	r4, r4, r5
 8005fca:	10a4      	asrs	r4, r4, #2
 8005fcc:	42a6      	cmp	r6, r4
 8005fce:	d109      	bne.n	8005fe4 <__libc_init_array+0x24>
 8005fd0:	2600      	movs	r6, #0
 8005fd2:	f000 fe63 	bl	8006c9c <_init>
 8005fd6:	4c0a      	ldr	r4, [pc, #40]	@ (8006000 <__libc_init_array+0x40>)
 8005fd8:	4d0a      	ldr	r5, [pc, #40]	@ (8006004 <__libc_init_array+0x44>)
 8005fda:	1b64      	subs	r4, r4, r5
 8005fdc:	10a4      	asrs	r4, r4, #2
 8005fde:	42a6      	cmp	r6, r4
 8005fe0:	d105      	bne.n	8005fee <__libc_init_array+0x2e>
 8005fe2:	bd70      	pop	{r4, r5, r6, pc}
 8005fe4:	00b3      	lsls	r3, r6, #2
 8005fe6:	58eb      	ldr	r3, [r5, r3]
 8005fe8:	4798      	blx	r3
 8005fea:	3601      	adds	r6, #1
 8005fec:	e7ee      	b.n	8005fcc <__libc_init_array+0xc>
 8005fee:	00b3      	lsls	r3, r6, #2
 8005ff0:	58eb      	ldr	r3, [r5, r3]
 8005ff2:	4798      	blx	r3
 8005ff4:	3601      	adds	r6, #1
 8005ff6:	e7f2      	b.n	8005fde <__libc_init_array+0x1e>
 8005ff8:	080078a0 	.word	0x080078a0
 8005ffc:	080078a0 	.word	0x080078a0
 8006000:	080078a4 	.word	0x080078a4
 8006004:	080078a0 	.word	0x080078a0

08006008 <__retarget_lock_init_recursive>:
 8006008:	4770      	bx	lr

0800600a <__retarget_lock_acquire_recursive>:
 800600a:	4770      	bx	lr

0800600c <__retarget_lock_release_recursive>:
 800600c:	4770      	bx	lr

0800600e <strcpy>:
 800600e:	0003      	movs	r3, r0
 8006010:	780a      	ldrb	r2, [r1, #0]
 8006012:	3101      	adds	r1, #1
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	3301      	adds	r3, #1
 8006018:	2a00      	cmp	r2, #0
 800601a:	d1f9      	bne.n	8006010 <strcpy+0x2>
 800601c:	4770      	bx	lr

0800601e <memcpy>:
 800601e:	2300      	movs	r3, #0
 8006020:	b510      	push	{r4, lr}
 8006022:	429a      	cmp	r2, r3
 8006024:	d100      	bne.n	8006028 <memcpy+0xa>
 8006026:	bd10      	pop	{r4, pc}
 8006028:	5ccc      	ldrb	r4, [r1, r3]
 800602a:	54c4      	strb	r4, [r0, r3]
 800602c:	3301      	adds	r3, #1
 800602e:	e7f8      	b.n	8006022 <memcpy+0x4>

08006030 <_free_r>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	0005      	movs	r5, r0
 8006034:	1e0c      	subs	r4, r1, #0
 8006036:	d010      	beq.n	800605a <_free_r+0x2a>
 8006038:	3c04      	subs	r4, #4
 800603a:	6823      	ldr	r3, [r4, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	da00      	bge.n	8006042 <_free_r+0x12>
 8006040:	18e4      	adds	r4, r4, r3
 8006042:	0028      	movs	r0, r5
 8006044:	f7ff fcb4 	bl	80059b0 <__malloc_lock>
 8006048:	4a1d      	ldr	r2, [pc, #116]	@ (80060c0 <_free_r+0x90>)
 800604a:	6813      	ldr	r3, [r2, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d105      	bne.n	800605c <_free_r+0x2c>
 8006050:	6063      	str	r3, [r4, #4]
 8006052:	6014      	str	r4, [r2, #0]
 8006054:	0028      	movs	r0, r5
 8006056:	f7ff fcb3 	bl	80059c0 <__malloc_unlock>
 800605a:	bd70      	pop	{r4, r5, r6, pc}
 800605c:	42a3      	cmp	r3, r4
 800605e:	d908      	bls.n	8006072 <_free_r+0x42>
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	1821      	adds	r1, r4, r0
 8006064:	428b      	cmp	r3, r1
 8006066:	d1f3      	bne.n	8006050 <_free_r+0x20>
 8006068:	6819      	ldr	r1, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	1809      	adds	r1, r1, r0
 800606e:	6021      	str	r1, [r4, #0]
 8006070:	e7ee      	b.n	8006050 <_free_r+0x20>
 8006072:	001a      	movs	r2, r3
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d001      	beq.n	800607e <_free_r+0x4e>
 800607a:	42a3      	cmp	r3, r4
 800607c:	d9f9      	bls.n	8006072 <_free_r+0x42>
 800607e:	6811      	ldr	r1, [r2, #0]
 8006080:	1850      	adds	r0, r2, r1
 8006082:	42a0      	cmp	r0, r4
 8006084:	d10b      	bne.n	800609e <_free_r+0x6e>
 8006086:	6820      	ldr	r0, [r4, #0]
 8006088:	1809      	adds	r1, r1, r0
 800608a:	1850      	adds	r0, r2, r1
 800608c:	6011      	str	r1, [r2, #0]
 800608e:	4283      	cmp	r3, r0
 8006090:	d1e0      	bne.n	8006054 <_free_r+0x24>
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	1841      	adds	r1, r0, r1
 8006098:	6011      	str	r1, [r2, #0]
 800609a:	6053      	str	r3, [r2, #4]
 800609c:	e7da      	b.n	8006054 <_free_r+0x24>
 800609e:	42a0      	cmp	r0, r4
 80060a0:	d902      	bls.n	80060a8 <_free_r+0x78>
 80060a2:	230c      	movs	r3, #12
 80060a4:	602b      	str	r3, [r5, #0]
 80060a6:	e7d5      	b.n	8006054 <_free_r+0x24>
 80060a8:	6820      	ldr	r0, [r4, #0]
 80060aa:	1821      	adds	r1, r4, r0
 80060ac:	428b      	cmp	r3, r1
 80060ae:	d103      	bne.n	80060b8 <_free_r+0x88>
 80060b0:	6819      	ldr	r1, [r3, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	1809      	adds	r1, r1, r0
 80060b6:	6021      	str	r1, [r4, #0]
 80060b8:	6063      	str	r3, [r4, #4]
 80060ba:	6054      	str	r4, [r2, #4]
 80060bc:	e7ca      	b.n	8006054 <_free_r+0x24>
 80060be:	46c0      	nop			@ (mov r8, r8)
 80060c0:	20000244 	.word	0x20000244

080060c4 <__ssputs_r>:
 80060c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c6:	688e      	ldr	r6, [r1, #8]
 80060c8:	b085      	sub	sp, #20
 80060ca:	001f      	movs	r7, r3
 80060cc:	000c      	movs	r4, r1
 80060ce:	680b      	ldr	r3, [r1, #0]
 80060d0:	9002      	str	r0, [sp, #8]
 80060d2:	9203      	str	r2, [sp, #12]
 80060d4:	42be      	cmp	r6, r7
 80060d6:	d830      	bhi.n	800613a <__ssputs_r+0x76>
 80060d8:	210c      	movs	r1, #12
 80060da:	5e62      	ldrsh	r2, [r4, r1]
 80060dc:	2190      	movs	r1, #144	@ 0x90
 80060de:	00c9      	lsls	r1, r1, #3
 80060e0:	420a      	tst	r2, r1
 80060e2:	d028      	beq.n	8006136 <__ssputs_r+0x72>
 80060e4:	2003      	movs	r0, #3
 80060e6:	6921      	ldr	r1, [r4, #16]
 80060e8:	1a5b      	subs	r3, r3, r1
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	6963      	ldr	r3, [r4, #20]
 80060ee:	4343      	muls	r3, r0
 80060f0:	9801      	ldr	r0, [sp, #4]
 80060f2:	0fdd      	lsrs	r5, r3, #31
 80060f4:	18ed      	adds	r5, r5, r3
 80060f6:	1c7b      	adds	r3, r7, #1
 80060f8:	181b      	adds	r3, r3, r0
 80060fa:	106d      	asrs	r5, r5, #1
 80060fc:	42ab      	cmp	r3, r5
 80060fe:	d900      	bls.n	8006102 <__ssputs_r+0x3e>
 8006100:	001d      	movs	r5, r3
 8006102:	0552      	lsls	r2, r2, #21
 8006104:	d528      	bpl.n	8006158 <__ssputs_r+0x94>
 8006106:	0029      	movs	r1, r5
 8006108:	9802      	ldr	r0, [sp, #8]
 800610a:	f7ff fbd1 	bl	80058b0 <_malloc_r>
 800610e:	1e06      	subs	r6, r0, #0
 8006110:	d02c      	beq.n	800616c <__ssputs_r+0xa8>
 8006112:	9a01      	ldr	r2, [sp, #4]
 8006114:	6921      	ldr	r1, [r4, #16]
 8006116:	f7ff ff82 	bl	800601e <memcpy>
 800611a:	89a2      	ldrh	r2, [r4, #12]
 800611c:	4b18      	ldr	r3, [pc, #96]	@ (8006180 <__ssputs_r+0xbc>)
 800611e:	401a      	ands	r2, r3
 8006120:	2380      	movs	r3, #128	@ 0x80
 8006122:	4313      	orrs	r3, r2
 8006124:	81a3      	strh	r3, [r4, #12]
 8006126:	9b01      	ldr	r3, [sp, #4]
 8006128:	6126      	str	r6, [r4, #16]
 800612a:	18f6      	adds	r6, r6, r3
 800612c:	6026      	str	r6, [r4, #0]
 800612e:	003e      	movs	r6, r7
 8006130:	6165      	str	r5, [r4, #20]
 8006132:	1aed      	subs	r5, r5, r3
 8006134:	60a5      	str	r5, [r4, #8]
 8006136:	42be      	cmp	r6, r7
 8006138:	d900      	bls.n	800613c <__ssputs_r+0x78>
 800613a:	003e      	movs	r6, r7
 800613c:	0032      	movs	r2, r6
 800613e:	9903      	ldr	r1, [sp, #12]
 8006140:	6820      	ldr	r0, [r4, #0]
 8006142:	f000 fd30 	bl	8006ba6 <memmove>
 8006146:	2000      	movs	r0, #0
 8006148:	68a3      	ldr	r3, [r4, #8]
 800614a:	1b9b      	subs	r3, r3, r6
 800614c:	60a3      	str	r3, [r4, #8]
 800614e:	6823      	ldr	r3, [r4, #0]
 8006150:	199b      	adds	r3, r3, r6
 8006152:	6023      	str	r3, [r4, #0]
 8006154:	b005      	add	sp, #20
 8006156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006158:	002a      	movs	r2, r5
 800615a:	9802      	ldr	r0, [sp, #8]
 800615c:	f000 fd65 	bl	8006c2a <_realloc_r>
 8006160:	1e06      	subs	r6, r0, #0
 8006162:	d1e0      	bne.n	8006126 <__ssputs_r+0x62>
 8006164:	6921      	ldr	r1, [r4, #16]
 8006166:	9802      	ldr	r0, [sp, #8]
 8006168:	f7ff ff62 	bl	8006030 <_free_r>
 800616c:	230c      	movs	r3, #12
 800616e:	2001      	movs	r0, #1
 8006170:	9a02      	ldr	r2, [sp, #8]
 8006172:	4240      	negs	r0, r0
 8006174:	6013      	str	r3, [r2, #0]
 8006176:	89a2      	ldrh	r2, [r4, #12]
 8006178:	3334      	adds	r3, #52	@ 0x34
 800617a:	4313      	orrs	r3, r2
 800617c:	81a3      	strh	r3, [r4, #12]
 800617e:	e7e9      	b.n	8006154 <__ssputs_r+0x90>
 8006180:	fffffb7f 	.word	0xfffffb7f

08006184 <_svfiprintf_r>:
 8006184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006186:	b0a1      	sub	sp, #132	@ 0x84
 8006188:	9003      	str	r0, [sp, #12]
 800618a:	001d      	movs	r5, r3
 800618c:	898b      	ldrh	r3, [r1, #12]
 800618e:	000f      	movs	r7, r1
 8006190:	0016      	movs	r6, r2
 8006192:	061b      	lsls	r3, r3, #24
 8006194:	d511      	bpl.n	80061ba <_svfiprintf_r+0x36>
 8006196:	690b      	ldr	r3, [r1, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10e      	bne.n	80061ba <_svfiprintf_r+0x36>
 800619c:	2140      	movs	r1, #64	@ 0x40
 800619e:	f7ff fb87 	bl	80058b0 <_malloc_r>
 80061a2:	6038      	str	r0, [r7, #0]
 80061a4:	6138      	str	r0, [r7, #16]
 80061a6:	2800      	cmp	r0, #0
 80061a8:	d105      	bne.n	80061b6 <_svfiprintf_r+0x32>
 80061aa:	230c      	movs	r3, #12
 80061ac:	9a03      	ldr	r2, [sp, #12]
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	2001      	movs	r0, #1
 80061b2:	4240      	negs	r0, r0
 80061b4:	e0cf      	b.n	8006356 <_svfiprintf_r+0x1d2>
 80061b6:	2340      	movs	r3, #64	@ 0x40
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	2300      	movs	r3, #0
 80061bc:	ac08      	add	r4, sp, #32
 80061be:	6163      	str	r3, [r4, #20]
 80061c0:	3320      	adds	r3, #32
 80061c2:	7663      	strb	r3, [r4, #25]
 80061c4:	3310      	adds	r3, #16
 80061c6:	76a3      	strb	r3, [r4, #26]
 80061c8:	9507      	str	r5, [sp, #28]
 80061ca:	0035      	movs	r5, r6
 80061cc:	782b      	ldrb	r3, [r5, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <_svfiprintf_r+0x52>
 80061d2:	2b25      	cmp	r3, #37	@ 0x25
 80061d4:	d148      	bne.n	8006268 <_svfiprintf_r+0xe4>
 80061d6:	1bab      	subs	r3, r5, r6
 80061d8:	9305      	str	r3, [sp, #20]
 80061da:	42b5      	cmp	r5, r6
 80061dc:	d00b      	beq.n	80061f6 <_svfiprintf_r+0x72>
 80061de:	0032      	movs	r2, r6
 80061e0:	0039      	movs	r1, r7
 80061e2:	9803      	ldr	r0, [sp, #12]
 80061e4:	f7ff ff6e 	bl	80060c4 <__ssputs_r>
 80061e8:	3001      	adds	r0, #1
 80061ea:	d100      	bne.n	80061ee <_svfiprintf_r+0x6a>
 80061ec:	e0ae      	b.n	800634c <_svfiprintf_r+0x1c8>
 80061ee:	6963      	ldr	r3, [r4, #20]
 80061f0:	9a05      	ldr	r2, [sp, #20]
 80061f2:	189b      	adds	r3, r3, r2
 80061f4:	6163      	str	r3, [r4, #20]
 80061f6:	782b      	ldrb	r3, [r5, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d100      	bne.n	80061fe <_svfiprintf_r+0x7a>
 80061fc:	e0a6      	b.n	800634c <_svfiprintf_r+0x1c8>
 80061fe:	2201      	movs	r2, #1
 8006200:	2300      	movs	r3, #0
 8006202:	4252      	negs	r2, r2
 8006204:	6062      	str	r2, [r4, #4]
 8006206:	a904      	add	r1, sp, #16
 8006208:	3254      	adds	r2, #84	@ 0x54
 800620a:	1852      	adds	r2, r2, r1
 800620c:	1c6e      	adds	r6, r5, #1
 800620e:	6023      	str	r3, [r4, #0]
 8006210:	60e3      	str	r3, [r4, #12]
 8006212:	60a3      	str	r3, [r4, #8]
 8006214:	7013      	strb	r3, [r2, #0]
 8006216:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006218:	4b54      	ldr	r3, [pc, #336]	@ (800636c <_svfiprintf_r+0x1e8>)
 800621a:	2205      	movs	r2, #5
 800621c:	0018      	movs	r0, r3
 800621e:	7831      	ldrb	r1, [r6, #0]
 8006220:	9305      	str	r3, [sp, #20]
 8006222:	f000 fcf7 	bl	8006c14 <memchr>
 8006226:	1c75      	adds	r5, r6, #1
 8006228:	2800      	cmp	r0, #0
 800622a:	d11f      	bne.n	800626c <_svfiprintf_r+0xe8>
 800622c:	6822      	ldr	r2, [r4, #0]
 800622e:	06d3      	lsls	r3, r2, #27
 8006230:	d504      	bpl.n	800623c <_svfiprintf_r+0xb8>
 8006232:	2353      	movs	r3, #83	@ 0x53
 8006234:	a904      	add	r1, sp, #16
 8006236:	185b      	adds	r3, r3, r1
 8006238:	2120      	movs	r1, #32
 800623a:	7019      	strb	r1, [r3, #0]
 800623c:	0713      	lsls	r3, r2, #28
 800623e:	d504      	bpl.n	800624a <_svfiprintf_r+0xc6>
 8006240:	2353      	movs	r3, #83	@ 0x53
 8006242:	a904      	add	r1, sp, #16
 8006244:	185b      	adds	r3, r3, r1
 8006246:	212b      	movs	r1, #43	@ 0x2b
 8006248:	7019      	strb	r1, [r3, #0]
 800624a:	7833      	ldrb	r3, [r6, #0]
 800624c:	2b2a      	cmp	r3, #42	@ 0x2a
 800624e:	d016      	beq.n	800627e <_svfiprintf_r+0xfa>
 8006250:	0035      	movs	r5, r6
 8006252:	2100      	movs	r1, #0
 8006254:	200a      	movs	r0, #10
 8006256:	68e3      	ldr	r3, [r4, #12]
 8006258:	782a      	ldrb	r2, [r5, #0]
 800625a:	1c6e      	adds	r6, r5, #1
 800625c:	3a30      	subs	r2, #48	@ 0x30
 800625e:	2a09      	cmp	r2, #9
 8006260:	d950      	bls.n	8006304 <_svfiprintf_r+0x180>
 8006262:	2900      	cmp	r1, #0
 8006264:	d111      	bne.n	800628a <_svfiprintf_r+0x106>
 8006266:	e017      	b.n	8006298 <_svfiprintf_r+0x114>
 8006268:	3501      	adds	r5, #1
 800626a:	e7af      	b.n	80061cc <_svfiprintf_r+0x48>
 800626c:	9b05      	ldr	r3, [sp, #20]
 800626e:	6822      	ldr	r2, [r4, #0]
 8006270:	1ac0      	subs	r0, r0, r3
 8006272:	2301      	movs	r3, #1
 8006274:	4083      	lsls	r3, r0
 8006276:	4313      	orrs	r3, r2
 8006278:	002e      	movs	r6, r5
 800627a:	6023      	str	r3, [r4, #0]
 800627c:	e7cc      	b.n	8006218 <_svfiprintf_r+0x94>
 800627e:	9b07      	ldr	r3, [sp, #28]
 8006280:	1d19      	adds	r1, r3, #4
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	9107      	str	r1, [sp, #28]
 8006286:	2b00      	cmp	r3, #0
 8006288:	db01      	blt.n	800628e <_svfiprintf_r+0x10a>
 800628a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800628c:	e004      	b.n	8006298 <_svfiprintf_r+0x114>
 800628e:	425b      	negs	r3, r3
 8006290:	60e3      	str	r3, [r4, #12]
 8006292:	2302      	movs	r3, #2
 8006294:	4313      	orrs	r3, r2
 8006296:	6023      	str	r3, [r4, #0]
 8006298:	782b      	ldrb	r3, [r5, #0]
 800629a:	2b2e      	cmp	r3, #46	@ 0x2e
 800629c:	d10c      	bne.n	80062b8 <_svfiprintf_r+0x134>
 800629e:	786b      	ldrb	r3, [r5, #1]
 80062a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80062a2:	d134      	bne.n	800630e <_svfiprintf_r+0x18a>
 80062a4:	9b07      	ldr	r3, [sp, #28]
 80062a6:	3502      	adds	r5, #2
 80062a8:	1d1a      	adds	r2, r3, #4
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	9207      	str	r2, [sp, #28]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	da01      	bge.n	80062b6 <_svfiprintf_r+0x132>
 80062b2:	2301      	movs	r3, #1
 80062b4:	425b      	negs	r3, r3
 80062b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80062b8:	4e2d      	ldr	r6, [pc, #180]	@ (8006370 <_svfiprintf_r+0x1ec>)
 80062ba:	2203      	movs	r2, #3
 80062bc:	0030      	movs	r0, r6
 80062be:	7829      	ldrb	r1, [r5, #0]
 80062c0:	f000 fca8 	bl	8006c14 <memchr>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	d006      	beq.n	80062d6 <_svfiprintf_r+0x152>
 80062c8:	2340      	movs	r3, #64	@ 0x40
 80062ca:	1b80      	subs	r0, r0, r6
 80062cc:	4083      	lsls	r3, r0
 80062ce:	6822      	ldr	r2, [r4, #0]
 80062d0:	3501      	adds	r5, #1
 80062d2:	4313      	orrs	r3, r2
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	7829      	ldrb	r1, [r5, #0]
 80062d8:	2206      	movs	r2, #6
 80062da:	4826      	ldr	r0, [pc, #152]	@ (8006374 <_svfiprintf_r+0x1f0>)
 80062dc:	1c6e      	adds	r6, r5, #1
 80062de:	7621      	strb	r1, [r4, #24]
 80062e0:	f000 fc98 	bl	8006c14 <memchr>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d038      	beq.n	800635a <_svfiprintf_r+0x1d6>
 80062e8:	4b23      	ldr	r3, [pc, #140]	@ (8006378 <_svfiprintf_r+0x1f4>)
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d122      	bne.n	8006334 <_svfiprintf_r+0x1b0>
 80062ee:	2207      	movs	r2, #7
 80062f0:	9b07      	ldr	r3, [sp, #28]
 80062f2:	3307      	adds	r3, #7
 80062f4:	4393      	bics	r3, r2
 80062f6:	3308      	adds	r3, #8
 80062f8:	9307      	str	r3, [sp, #28]
 80062fa:	6963      	ldr	r3, [r4, #20]
 80062fc:	9a04      	ldr	r2, [sp, #16]
 80062fe:	189b      	adds	r3, r3, r2
 8006300:	6163      	str	r3, [r4, #20]
 8006302:	e762      	b.n	80061ca <_svfiprintf_r+0x46>
 8006304:	4343      	muls	r3, r0
 8006306:	0035      	movs	r5, r6
 8006308:	2101      	movs	r1, #1
 800630a:	189b      	adds	r3, r3, r2
 800630c:	e7a4      	b.n	8006258 <_svfiprintf_r+0xd4>
 800630e:	2300      	movs	r3, #0
 8006310:	200a      	movs	r0, #10
 8006312:	0019      	movs	r1, r3
 8006314:	3501      	adds	r5, #1
 8006316:	6063      	str	r3, [r4, #4]
 8006318:	782a      	ldrb	r2, [r5, #0]
 800631a:	1c6e      	adds	r6, r5, #1
 800631c:	3a30      	subs	r2, #48	@ 0x30
 800631e:	2a09      	cmp	r2, #9
 8006320:	d903      	bls.n	800632a <_svfiprintf_r+0x1a6>
 8006322:	2b00      	cmp	r3, #0
 8006324:	d0c8      	beq.n	80062b8 <_svfiprintf_r+0x134>
 8006326:	9109      	str	r1, [sp, #36]	@ 0x24
 8006328:	e7c6      	b.n	80062b8 <_svfiprintf_r+0x134>
 800632a:	4341      	muls	r1, r0
 800632c:	0035      	movs	r5, r6
 800632e:	2301      	movs	r3, #1
 8006330:	1889      	adds	r1, r1, r2
 8006332:	e7f1      	b.n	8006318 <_svfiprintf_r+0x194>
 8006334:	aa07      	add	r2, sp, #28
 8006336:	9200      	str	r2, [sp, #0]
 8006338:	0021      	movs	r1, r4
 800633a:	003a      	movs	r2, r7
 800633c:	4b0f      	ldr	r3, [pc, #60]	@ (800637c <_svfiprintf_r+0x1f8>)
 800633e:	9803      	ldr	r0, [sp, #12]
 8006340:	e000      	b.n	8006344 <_svfiprintf_r+0x1c0>
 8006342:	bf00      	nop
 8006344:	9004      	str	r0, [sp, #16]
 8006346:	9b04      	ldr	r3, [sp, #16]
 8006348:	3301      	adds	r3, #1
 800634a:	d1d6      	bne.n	80062fa <_svfiprintf_r+0x176>
 800634c:	89bb      	ldrh	r3, [r7, #12]
 800634e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8006350:	065b      	lsls	r3, r3, #25
 8006352:	d500      	bpl.n	8006356 <_svfiprintf_r+0x1d2>
 8006354:	e72c      	b.n	80061b0 <_svfiprintf_r+0x2c>
 8006356:	b021      	add	sp, #132	@ 0x84
 8006358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800635a:	aa07      	add	r2, sp, #28
 800635c:	9200      	str	r2, [sp, #0]
 800635e:	0021      	movs	r1, r4
 8006360:	003a      	movs	r2, r7
 8006362:	4b06      	ldr	r3, [pc, #24]	@ (800637c <_svfiprintf_r+0x1f8>)
 8006364:	9803      	ldr	r0, [sp, #12]
 8006366:	f000 f9bf 	bl	80066e8 <_printf_i>
 800636a:	e7eb      	b.n	8006344 <_svfiprintf_r+0x1c0>
 800636c:	08007864 	.word	0x08007864
 8006370:	0800786a 	.word	0x0800786a
 8006374:	0800786e 	.word	0x0800786e
 8006378:	00000000 	.word	0x00000000
 800637c:	080060c5 	.word	0x080060c5

08006380 <__sfputc_r>:
 8006380:	6893      	ldr	r3, [r2, #8]
 8006382:	b510      	push	{r4, lr}
 8006384:	3b01      	subs	r3, #1
 8006386:	6093      	str	r3, [r2, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	da04      	bge.n	8006396 <__sfputc_r+0x16>
 800638c:	6994      	ldr	r4, [r2, #24]
 800638e:	42a3      	cmp	r3, r4
 8006390:	db07      	blt.n	80063a2 <__sfputc_r+0x22>
 8006392:	290a      	cmp	r1, #10
 8006394:	d005      	beq.n	80063a2 <__sfputc_r+0x22>
 8006396:	6813      	ldr	r3, [r2, #0]
 8006398:	1c58      	adds	r0, r3, #1
 800639a:	6010      	str	r0, [r2, #0]
 800639c:	7019      	strb	r1, [r3, #0]
 800639e:	0008      	movs	r0, r1
 80063a0:	bd10      	pop	{r4, pc}
 80063a2:	f7ff fcd5 	bl	8005d50 <__swbuf_r>
 80063a6:	0001      	movs	r1, r0
 80063a8:	e7f9      	b.n	800639e <__sfputc_r+0x1e>

080063aa <__sfputs_r>:
 80063aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ac:	0006      	movs	r6, r0
 80063ae:	000f      	movs	r7, r1
 80063b0:	0014      	movs	r4, r2
 80063b2:	18d5      	adds	r5, r2, r3
 80063b4:	42ac      	cmp	r4, r5
 80063b6:	d101      	bne.n	80063bc <__sfputs_r+0x12>
 80063b8:	2000      	movs	r0, #0
 80063ba:	e007      	b.n	80063cc <__sfputs_r+0x22>
 80063bc:	7821      	ldrb	r1, [r4, #0]
 80063be:	003a      	movs	r2, r7
 80063c0:	0030      	movs	r0, r6
 80063c2:	f7ff ffdd 	bl	8006380 <__sfputc_r>
 80063c6:	3401      	adds	r4, #1
 80063c8:	1c43      	adds	r3, r0, #1
 80063ca:	d1f3      	bne.n	80063b4 <__sfputs_r+0xa>
 80063cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063d0 <_vfiprintf_r>:
 80063d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063d2:	b0a1      	sub	sp, #132	@ 0x84
 80063d4:	000f      	movs	r7, r1
 80063d6:	0015      	movs	r5, r2
 80063d8:	001e      	movs	r6, r3
 80063da:	9003      	str	r0, [sp, #12]
 80063dc:	2800      	cmp	r0, #0
 80063de:	d004      	beq.n	80063ea <_vfiprintf_r+0x1a>
 80063e0:	6a03      	ldr	r3, [r0, #32]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <_vfiprintf_r+0x1a>
 80063e6:	f7ff fb83 	bl	8005af0 <__sinit>
 80063ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063ec:	07db      	lsls	r3, r3, #31
 80063ee:	d405      	bmi.n	80063fc <_vfiprintf_r+0x2c>
 80063f0:	89bb      	ldrh	r3, [r7, #12]
 80063f2:	059b      	lsls	r3, r3, #22
 80063f4:	d402      	bmi.n	80063fc <_vfiprintf_r+0x2c>
 80063f6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80063f8:	f7ff fe07 	bl	800600a <__retarget_lock_acquire_recursive>
 80063fc:	89bb      	ldrh	r3, [r7, #12]
 80063fe:	071b      	lsls	r3, r3, #28
 8006400:	d502      	bpl.n	8006408 <_vfiprintf_r+0x38>
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d113      	bne.n	8006430 <_vfiprintf_r+0x60>
 8006408:	0039      	movs	r1, r7
 800640a:	9803      	ldr	r0, [sp, #12]
 800640c:	f7ff fce2 	bl	8005dd4 <__swsetup_r>
 8006410:	2800      	cmp	r0, #0
 8006412:	d00d      	beq.n	8006430 <_vfiprintf_r+0x60>
 8006414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006416:	07db      	lsls	r3, r3, #31
 8006418:	d503      	bpl.n	8006422 <_vfiprintf_r+0x52>
 800641a:	2001      	movs	r0, #1
 800641c:	4240      	negs	r0, r0
 800641e:	b021      	add	sp, #132	@ 0x84
 8006420:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006422:	89bb      	ldrh	r3, [r7, #12]
 8006424:	059b      	lsls	r3, r3, #22
 8006426:	d4f8      	bmi.n	800641a <_vfiprintf_r+0x4a>
 8006428:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800642a:	f7ff fdef 	bl	800600c <__retarget_lock_release_recursive>
 800642e:	e7f4      	b.n	800641a <_vfiprintf_r+0x4a>
 8006430:	2300      	movs	r3, #0
 8006432:	ac08      	add	r4, sp, #32
 8006434:	6163      	str	r3, [r4, #20]
 8006436:	3320      	adds	r3, #32
 8006438:	7663      	strb	r3, [r4, #25]
 800643a:	3310      	adds	r3, #16
 800643c:	76a3      	strb	r3, [r4, #26]
 800643e:	9607      	str	r6, [sp, #28]
 8006440:	002e      	movs	r6, r5
 8006442:	7833      	ldrb	r3, [r6, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <_vfiprintf_r+0x7c>
 8006448:	2b25      	cmp	r3, #37	@ 0x25
 800644a:	d148      	bne.n	80064de <_vfiprintf_r+0x10e>
 800644c:	1b73      	subs	r3, r6, r5
 800644e:	9305      	str	r3, [sp, #20]
 8006450:	42ae      	cmp	r6, r5
 8006452:	d00b      	beq.n	800646c <_vfiprintf_r+0x9c>
 8006454:	002a      	movs	r2, r5
 8006456:	0039      	movs	r1, r7
 8006458:	9803      	ldr	r0, [sp, #12]
 800645a:	f7ff ffa6 	bl	80063aa <__sfputs_r>
 800645e:	3001      	adds	r0, #1
 8006460:	d100      	bne.n	8006464 <_vfiprintf_r+0x94>
 8006462:	e0ae      	b.n	80065c2 <_vfiprintf_r+0x1f2>
 8006464:	6963      	ldr	r3, [r4, #20]
 8006466:	9a05      	ldr	r2, [sp, #20]
 8006468:	189b      	adds	r3, r3, r2
 800646a:	6163      	str	r3, [r4, #20]
 800646c:	7833      	ldrb	r3, [r6, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d100      	bne.n	8006474 <_vfiprintf_r+0xa4>
 8006472:	e0a6      	b.n	80065c2 <_vfiprintf_r+0x1f2>
 8006474:	2201      	movs	r2, #1
 8006476:	2300      	movs	r3, #0
 8006478:	4252      	negs	r2, r2
 800647a:	6062      	str	r2, [r4, #4]
 800647c:	a904      	add	r1, sp, #16
 800647e:	3254      	adds	r2, #84	@ 0x54
 8006480:	1852      	adds	r2, r2, r1
 8006482:	1c75      	adds	r5, r6, #1
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	60e3      	str	r3, [r4, #12]
 8006488:	60a3      	str	r3, [r4, #8]
 800648a:	7013      	strb	r3, [r2, #0]
 800648c:	65a3      	str	r3, [r4, #88]	@ 0x58
 800648e:	4b59      	ldr	r3, [pc, #356]	@ (80065f4 <_vfiprintf_r+0x224>)
 8006490:	2205      	movs	r2, #5
 8006492:	0018      	movs	r0, r3
 8006494:	7829      	ldrb	r1, [r5, #0]
 8006496:	9305      	str	r3, [sp, #20]
 8006498:	f000 fbbc 	bl	8006c14 <memchr>
 800649c:	1c6e      	adds	r6, r5, #1
 800649e:	2800      	cmp	r0, #0
 80064a0:	d11f      	bne.n	80064e2 <_vfiprintf_r+0x112>
 80064a2:	6822      	ldr	r2, [r4, #0]
 80064a4:	06d3      	lsls	r3, r2, #27
 80064a6:	d504      	bpl.n	80064b2 <_vfiprintf_r+0xe2>
 80064a8:	2353      	movs	r3, #83	@ 0x53
 80064aa:	a904      	add	r1, sp, #16
 80064ac:	185b      	adds	r3, r3, r1
 80064ae:	2120      	movs	r1, #32
 80064b0:	7019      	strb	r1, [r3, #0]
 80064b2:	0713      	lsls	r3, r2, #28
 80064b4:	d504      	bpl.n	80064c0 <_vfiprintf_r+0xf0>
 80064b6:	2353      	movs	r3, #83	@ 0x53
 80064b8:	a904      	add	r1, sp, #16
 80064ba:	185b      	adds	r3, r3, r1
 80064bc:	212b      	movs	r1, #43	@ 0x2b
 80064be:	7019      	strb	r1, [r3, #0]
 80064c0:	782b      	ldrb	r3, [r5, #0]
 80064c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80064c4:	d016      	beq.n	80064f4 <_vfiprintf_r+0x124>
 80064c6:	002e      	movs	r6, r5
 80064c8:	2100      	movs	r1, #0
 80064ca:	200a      	movs	r0, #10
 80064cc:	68e3      	ldr	r3, [r4, #12]
 80064ce:	7832      	ldrb	r2, [r6, #0]
 80064d0:	1c75      	adds	r5, r6, #1
 80064d2:	3a30      	subs	r2, #48	@ 0x30
 80064d4:	2a09      	cmp	r2, #9
 80064d6:	d950      	bls.n	800657a <_vfiprintf_r+0x1aa>
 80064d8:	2900      	cmp	r1, #0
 80064da:	d111      	bne.n	8006500 <_vfiprintf_r+0x130>
 80064dc:	e017      	b.n	800650e <_vfiprintf_r+0x13e>
 80064de:	3601      	adds	r6, #1
 80064e0:	e7af      	b.n	8006442 <_vfiprintf_r+0x72>
 80064e2:	9b05      	ldr	r3, [sp, #20]
 80064e4:	6822      	ldr	r2, [r4, #0]
 80064e6:	1ac0      	subs	r0, r0, r3
 80064e8:	2301      	movs	r3, #1
 80064ea:	4083      	lsls	r3, r0
 80064ec:	4313      	orrs	r3, r2
 80064ee:	0035      	movs	r5, r6
 80064f0:	6023      	str	r3, [r4, #0]
 80064f2:	e7cc      	b.n	800648e <_vfiprintf_r+0xbe>
 80064f4:	9b07      	ldr	r3, [sp, #28]
 80064f6:	1d19      	adds	r1, r3, #4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	9107      	str	r1, [sp, #28]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	db01      	blt.n	8006504 <_vfiprintf_r+0x134>
 8006500:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006502:	e004      	b.n	800650e <_vfiprintf_r+0x13e>
 8006504:	425b      	negs	r3, r3
 8006506:	60e3      	str	r3, [r4, #12]
 8006508:	2302      	movs	r3, #2
 800650a:	4313      	orrs	r3, r2
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	7833      	ldrb	r3, [r6, #0]
 8006510:	2b2e      	cmp	r3, #46	@ 0x2e
 8006512:	d10c      	bne.n	800652e <_vfiprintf_r+0x15e>
 8006514:	7873      	ldrb	r3, [r6, #1]
 8006516:	2b2a      	cmp	r3, #42	@ 0x2a
 8006518:	d134      	bne.n	8006584 <_vfiprintf_r+0x1b4>
 800651a:	9b07      	ldr	r3, [sp, #28]
 800651c:	3602      	adds	r6, #2
 800651e:	1d1a      	adds	r2, r3, #4
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	9207      	str	r2, [sp, #28]
 8006524:	2b00      	cmp	r3, #0
 8006526:	da01      	bge.n	800652c <_vfiprintf_r+0x15c>
 8006528:	2301      	movs	r3, #1
 800652a:	425b      	negs	r3, r3
 800652c:	9309      	str	r3, [sp, #36]	@ 0x24
 800652e:	4d32      	ldr	r5, [pc, #200]	@ (80065f8 <_vfiprintf_r+0x228>)
 8006530:	2203      	movs	r2, #3
 8006532:	0028      	movs	r0, r5
 8006534:	7831      	ldrb	r1, [r6, #0]
 8006536:	f000 fb6d 	bl	8006c14 <memchr>
 800653a:	2800      	cmp	r0, #0
 800653c:	d006      	beq.n	800654c <_vfiprintf_r+0x17c>
 800653e:	2340      	movs	r3, #64	@ 0x40
 8006540:	1b40      	subs	r0, r0, r5
 8006542:	4083      	lsls	r3, r0
 8006544:	6822      	ldr	r2, [r4, #0]
 8006546:	3601      	adds	r6, #1
 8006548:	4313      	orrs	r3, r2
 800654a:	6023      	str	r3, [r4, #0]
 800654c:	7831      	ldrb	r1, [r6, #0]
 800654e:	2206      	movs	r2, #6
 8006550:	482a      	ldr	r0, [pc, #168]	@ (80065fc <_vfiprintf_r+0x22c>)
 8006552:	1c75      	adds	r5, r6, #1
 8006554:	7621      	strb	r1, [r4, #24]
 8006556:	f000 fb5d 	bl	8006c14 <memchr>
 800655a:	2800      	cmp	r0, #0
 800655c:	d040      	beq.n	80065e0 <_vfiprintf_r+0x210>
 800655e:	4b28      	ldr	r3, [pc, #160]	@ (8006600 <_vfiprintf_r+0x230>)
 8006560:	2b00      	cmp	r3, #0
 8006562:	d122      	bne.n	80065aa <_vfiprintf_r+0x1da>
 8006564:	2207      	movs	r2, #7
 8006566:	9b07      	ldr	r3, [sp, #28]
 8006568:	3307      	adds	r3, #7
 800656a:	4393      	bics	r3, r2
 800656c:	3308      	adds	r3, #8
 800656e:	9307      	str	r3, [sp, #28]
 8006570:	6963      	ldr	r3, [r4, #20]
 8006572:	9a04      	ldr	r2, [sp, #16]
 8006574:	189b      	adds	r3, r3, r2
 8006576:	6163      	str	r3, [r4, #20]
 8006578:	e762      	b.n	8006440 <_vfiprintf_r+0x70>
 800657a:	4343      	muls	r3, r0
 800657c:	002e      	movs	r6, r5
 800657e:	2101      	movs	r1, #1
 8006580:	189b      	adds	r3, r3, r2
 8006582:	e7a4      	b.n	80064ce <_vfiprintf_r+0xfe>
 8006584:	2300      	movs	r3, #0
 8006586:	200a      	movs	r0, #10
 8006588:	0019      	movs	r1, r3
 800658a:	3601      	adds	r6, #1
 800658c:	6063      	str	r3, [r4, #4]
 800658e:	7832      	ldrb	r2, [r6, #0]
 8006590:	1c75      	adds	r5, r6, #1
 8006592:	3a30      	subs	r2, #48	@ 0x30
 8006594:	2a09      	cmp	r2, #9
 8006596:	d903      	bls.n	80065a0 <_vfiprintf_r+0x1d0>
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0c8      	beq.n	800652e <_vfiprintf_r+0x15e>
 800659c:	9109      	str	r1, [sp, #36]	@ 0x24
 800659e:	e7c6      	b.n	800652e <_vfiprintf_r+0x15e>
 80065a0:	4341      	muls	r1, r0
 80065a2:	002e      	movs	r6, r5
 80065a4:	2301      	movs	r3, #1
 80065a6:	1889      	adds	r1, r1, r2
 80065a8:	e7f1      	b.n	800658e <_vfiprintf_r+0x1be>
 80065aa:	aa07      	add	r2, sp, #28
 80065ac:	9200      	str	r2, [sp, #0]
 80065ae:	0021      	movs	r1, r4
 80065b0:	003a      	movs	r2, r7
 80065b2:	4b14      	ldr	r3, [pc, #80]	@ (8006604 <_vfiprintf_r+0x234>)
 80065b4:	9803      	ldr	r0, [sp, #12]
 80065b6:	e000      	b.n	80065ba <_vfiprintf_r+0x1ea>
 80065b8:	bf00      	nop
 80065ba:	9004      	str	r0, [sp, #16]
 80065bc:	9b04      	ldr	r3, [sp, #16]
 80065be:	3301      	adds	r3, #1
 80065c0:	d1d6      	bne.n	8006570 <_vfiprintf_r+0x1a0>
 80065c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065c4:	07db      	lsls	r3, r3, #31
 80065c6:	d405      	bmi.n	80065d4 <_vfiprintf_r+0x204>
 80065c8:	89bb      	ldrh	r3, [r7, #12]
 80065ca:	059b      	lsls	r3, r3, #22
 80065cc:	d402      	bmi.n	80065d4 <_vfiprintf_r+0x204>
 80065ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80065d0:	f7ff fd1c 	bl	800600c <__retarget_lock_release_recursive>
 80065d4:	89bb      	ldrh	r3, [r7, #12]
 80065d6:	065b      	lsls	r3, r3, #25
 80065d8:	d500      	bpl.n	80065dc <_vfiprintf_r+0x20c>
 80065da:	e71e      	b.n	800641a <_vfiprintf_r+0x4a>
 80065dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80065de:	e71e      	b.n	800641e <_vfiprintf_r+0x4e>
 80065e0:	aa07      	add	r2, sp, #28
 80065e2:	9200      	str	r2, [sp, #0]
 80065e4:	0021      	movs	r1, r4
 80065e6:	003a      	movs	r2, r7
 80065e8:	4b06      	ldr	r3, [pc, #24]	@ (8006604 <_vfiprintf_r+0x234>)
 80065ea:	9803      	ldr	r0, [sp, #12]
 80065ec:	f000 f87c 	bl	80066e8 <_printf_i>
 80065f0:	e7e3      	b.n	80065ba <_vfiprintf_r+0x1ea>
 80065f2:	46c0      	nop			@ (mov r8, r8)
 80065f4:	08007864 	.word	0x08007864
 80065f8:	0800786a 	.word	0x0800786a
 80065fc:	0800786e 	.word	0x0800786e
 8006600:	00000000 	.word	0x00000000
 8006604:	080063ab 	.word	0x080063ab

08006608 <_printf_common>:
 8006608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800660a:	0016      	movs	r6, r2
 800660c:	9301      	str	r3, [sp, #4]
 800660e:	688a      	ldr	r2, [r1, #8]
 8006610:	690b      	ldr	r3, [r1, #16]
 8006612:	000c      	movs	r4, r1
 8006614:	9000      	str	r0, [sp, #0]
 8006616:	4293      	cmp	r3, r2
 8006618:	da00      	bge.n	800661c <_printf_common+0x14>
 800661a:	0013      	movs	r3, r2
 800661c:	0022      	movs	r2, r4
 800661e:	6033      	str	r3, [r6, #0]
 8006620:	3243      	adds	r2, #67	@ 0x43
 8006622:	7812      	ldrb	r2, [r2, #0]
 8006624:	2a00      	cmp	r2, #0
 8006626:	d001      	beq.n	800662c <_printf_common+0x24>
 8006628:	3301      	adds	r3, #1
 800662a:	6033      	str	r3, [r6, #0]
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	069b      	lsls	r3, r3, #26
 8006630:	d502      	bpl.n	8006638 <_printf_common+0x30>
 8006632:	6833      	ldr	r3, [r6, #0]
 8006634:	3302      	adds	r3, #2
 8006636:	6033      	str	r3, [r6, #0]
 8006638:	6822      	ldr	r2, [r4, #0]
 800663a:	2306      	movs	r3, #6
 800663c:	0015      	movs	r5, r2
 800663e:	401d      	ands	r5, r3
 8006640:	421a      	tst	r2, r3
 8006642:	d027      	beq.n	8006694 <_printf_common+0x8c>
 8006644:	0023      	movs	r3, r4
 8006646:	3343      	adds	r3, #67	@ 0x43
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	1e5a      	subs	r2, r3, #1
 800664c:	4193      	sbcs	r3, r2
 800664e:	6822      	ldr	r2, [r4, #0]
 8006650:	0692      	lsls	r2, r2, #26
 8006652:	d430      	bmi.n	80066b6 <_printf_common+0xae>
 8006654:	0022      	movs	r2, r4
 8006656:	9901      	ldr	r1, [sp, #4]
 8006658:	9800      	ldr	r0, [sp, #0]
 800665a:	9d08      	ldr	r5, [sp, #32]
 800665c:	3243      	adds	r2, #67	@ 0x43
 800665e:	47a8      	blx	r5
 8006660:	3001      	adds	r0, #1
 8006662:	d025      	beq.n	80066b0 <_printf_common+0xa8>
 8006664:	2206      	movs	r2, #6
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	2500      	movs	r5, #0
 800666a:	4013      	ands	r3, r2
 800666c:	2b04      	cmp	r3, #4
 800666e:	d105      	bne.n	800667c <_printf_common+0x74>
 8006670:	6833      	ldr	r3, [r6, #0]
 8006672:	68e5      	ldr	r5, [r4, #12]
 8006674:	1aed      	subs	r5, r5, r3
 8006676:	43eb      	mvns	r3, r5
 8006678:	17db      	asrs	r3, r3, #31
 800667a:	401d      	ands	r5, r3
 800667c:	68a3      	ldr	r3, [r4, #8]
 800667e:	6922      	ldr	r2, [r4, #16]
 8006680:	4293      	cmp	r3, r2
 8006682:	dd01      	ble.n	8006688 <_printf_common+0x80>
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	18ed      	adds	r5, r5, r3
 8006688:	2600      	movs	r6, #0
 800668a:	42b5      	cmp	r5, r6
 800668c:	d120      	bne.n	80066d0 <_printf_common+0xc8>
 800668e:	2000      	movs	r0, #0
 8006690:	e010      	b.n	80066b4 <_printf_common+0xac>
 8006692:	3501      	adds	r5, #1
 8006694:	68e3      	ldr	r3, [r4, #12]
 8006696:	6832      	ldr	r2, [r6, #0]
 8006698:	1a9b      	subs	r3, r3, r2
 800669a:	42ab      	cmp	r3, r5
 800669c:	ddd2      	ble.n	8006644 <_printf_common+0x3c>
 800669e:	0022      	movs	r2, r4
 80066a0:	2301      	movs	r3, #1
 80066a2:	9901      	ldr	r1, [sp, #4]
 80066a4:	9800      	ldr	r0, [sp, #0]
 80066a6:	9f08      	ldr	r7, [sp, #32]
 80066a8:	3219      	adds	r2, #25
 80066aa:	47b8      	blx	r7
 80066ac:	3001      	adds	r0, #1
 80066ae:	d1f0      	bne.n	8006692 <_printf_common+0x8a>
 80066b0:	2001      	movs	r0, #1
 80066b2:	4240      	negs	r0, r0
 80066b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066b6:	2030      	movs	r0, #48	@ 0x30
 80066b8:	18e1      	adds	r1, r4, r3
 80066ba:	3143      	adds	r1, #67	@ 0x43
 80066bc:	7008      	strb	r0, [r1, #0]
 80066be:	0021      	movs	r1, r4
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	3145      	adds	r1, #69	@ 0x45
 80066c4:	7809      	ldrb	r1, [r1, #0]
 80066c6:	18a2      	adds	r2, r4, r2
 80066c8:	3243      	adds	r2, #67	@ 0x43
 80066ca:	3302      	adds	r3, #2
 80066cc:	7011      	strb	r1, [r2, #0]
 80066ce:	e7c1      	b.n	8006654 <_printf_common+0x4c>
 80066d0:	0022      	movs	r2, r4
 80066d2:	2301      	movs	r3, #1
 80066d4:	9901      	ldr	r1, [sp, #4]
 80066d6:	9800      	ldr	r0, [sp, #0]
 80066d8:	9f08      	ldr	r7, [sp, #32]
 80066da:	321a      	adds	r2, #26
 80066dc:	47b8      	blx	r7
 80066de:	3001      	adds	r0, #1
 80066e0:	d0e6      	beq.n	80066b0 <_printf_common+0xa8>
 80066e2:	3601      	adds	r6, #1
 80066e4:	e7d1      	b.n	800668a <_printf_common+0x82>
	...

080066e8 <_printf_i>:
 80066e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ea:	b08b      	sub	sp, #44	@ 0x2c
 80066ec:	9206      	str	r2, [sp, #24]
 80066ee:	000a      	movs	r2, r1
 80066f0:	3243      	adds	r2, #67	@ 0x43
 80066f2:	9307      	str	r3, [sp, #28]
 80066f4:	9005      	str	r0, [sp, #20]
 80066f6:	9203      	str	r2, [sp, #12]
 80066f8:	7e0a      	ldrb	r2, [r1, #24]
 80066fa:	000c      	movs	r4, r1
 80066fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80066fe:	2a78      	cmp	r2, #120	@ 0x78
 8006700:	d809      	bhi.n	8006716 <_printf_i+0x2e>
 8006702:	2a62      	cmp	r2, #98	@ 0x62
 8006704:	d80b      	bhi.n	800671e <_printf_i+0x36>
 8006706:	2a00      	cmp	r2, #0
 8006708:	d100      	bne.n	800670c <_printf_i+0x24>
 800670a:	e0ba      	b.n	8006882 <_printf_i+0x19a>
 800670c:	497a      	ldr	r1, [pc, #488]	@ (80068f8 <_printf_i+0x210>)
 800670e:	9104      	str	r1, [sp, #16]
 8006710:	2a58      	cmp	r2, #88	@ 0x58
 8006712:	d100      	bne.n	8006716 <_printf_i+0x2e>
 8006714:	e08e      	b.n	8006834 <_printf_i+0x14c>
 8006716:	0025      	movs	r5, r4
 8006718:	3542      	adds	r5, #66	@ 0x42
 800671a:	702a      	strb	r2, [r5, #0]
 800671c:	e022      	b.n	8006764 <_printf_i+0x7c>
 800671e:	0010      	movs	r0, r2
 8006720:	3863      	subs	r0, #99	@ 0x63
 8006722:	2815      	cmp	r0, #21
 8006724:	d8f7      	bhi.n	8006716 <_printf_i+0x2e>
 8006726:	f7f9 fcf7 	bl	8000118 <__gnu_thumb1_case_shi>
 800672a:	0016      	.short	0x0016
 800672c:	fff6001f 	.word	0xfff6001f
 8006730:	fff6fff6 	.word	0xfff6fff6
 8006734:	001ffff6 	.word	0x001ffff6
 8006738:	fff6fff6 	.word	0xfff6fff6
 800673c:	fff6fff6 	.word	0xfff6fff6
 8006740:	0036009f 	.word	0x0036009f
 8006744:	fff6007e 	.word	0xfff6007e
 8006748:	00b0fff6 	.word	0x00b0fff6
 800674c:	0036fff6 	.word	0x0036fff6
 8006750:	fff6fff6 	.word	0xfff6fff6
 8006754:	0082      	.short	0x0082
 8006756:	0025      	movs	r5, r4
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	3542      	adds	r5, #66	@ 0x42
 800675c:	1d11      	adds	r1, r2, #4
 800675e:	6019      	str	r1, [r3, #0]
 8006760:	6813      	ldr	r3, [r2, #0]
 8006762:	702b      	strb	r3, [r5, #0]
 8006764:	2301      	movs	r3, #1
 8006766:	e09e      	b.n	80068a6 <_printf_i+0x1be>
 8006768:	6818      	ldr	r0, [r3, #0]
 800676a:	6809      	ldr	r1, [r1, #0]
 800676c:	1d02      	adds	r2, r0, #4
 800676e:	060d      	lsls	r5, r1, #24
 8006770:	d50b      	bpl.n	800678a <_printf_i+0xa2>
 8006772:	6806      	ldr	r6, [r0, #0]
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	2e00      	cmp	r6, #0
 8006778:	da03      	bge.n	8006782 <_printf_i+0x9a>
 800677a:	232d      	movs	r3, #45	@ 0x2d
 800677c:	9a03      	ldr	r2, [sp, #12]
 800677e:	4276      	negs	r6, r6
 8006780:	7013      	strb	r3, [r2, #0]
 8006782:	4b5d      	ldr	r3, [pc, #372]	@ (80068f8 <_printf_i+0x210>)
 8006784:	270a      	movs	r7, #10
 8006786:	9304      	str	r3, [sp, #16]
 8006788:	e018      	b.n	80067bc <_printf_i+0xd4>
 800678a:	6806      	ldr	r6, [r0, #0]
 800678c:	601a      	str	r2, [r3, #0]
 800678e:	0649      	lsls	r1, r1, #25
 8006790:	d5f1      	bpl.n	8006776 <_printf_i+0x8e>
 8006792:	b236      	sxth	r6, r6
 8006794:	e7ef      	b.n	8006776 <_printf_i+0x8e>
 8006796:	6808      	ldr	r0, [r1, #0]
 8006798:	6819      	ldr	r1, [r3, #0]
 800679a:	c940      	ldmia	r1!, {r6}
 800679c:	0605      	lsls	r5, r0, #24
 800679e:	d402      	bmi.n	80067a6 <_printf_i+0xbe>
 80067a0:	0640      	lsls	r0, r0, #25
 80067a2:	d500      	bpl.n	80067a6 <_printf_i+0xbe>
 80067a4:	b2b6      	uxth	r6, r6
 80067a6:	6019      	str	r1, [r3, #0]
 80067a8:	4b53      	ldr	r3, [pc, #332]	@ (80068f8 <_printf_i+0x210>)
 80067aa:	270a      	movs	r7, #10
 80067ac:	9304      	str	r3, [sp, #16]
 80067ae:	2a6f      	cmp	r2, #111	@ 0x6f
 80067b0:	d100      	bne.n	80067b4 <_printf_i+0xcc>
 80067b2:	3f02      	subs	r7, #2
 80067b4:	0023      	movs	r3, r4
 80067b6:	2200      	movs	r2, #0
 80067b8:	3343      	adds	r3, #67	@ 0x43
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	6863      	ldr	r3, [r4, #4]
 80067be:	60a3      	str	r3, [r4, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	db06      	blt.n	80067d2 <_printf_i+0xea>
 80067c4:	2104      	movs	r1, #4
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	9d03      	ldr	r5, [sp, #12]
 80067ca:	438a      	bics	r2, r1
 80067cc:	6022      	str	r2, [r4, #0]
 80067ce:	4333      	orrs	r3, r6
 80067d0:	d00c      	beq.n	80067ec <_printf_i+0x104>
 80067d2:	9d03      	ldr	r5, [sp, #12]
 80067d4:	0030      	movs	r0, r6
 80067d6:	0039      	movs	r1, r7
 80067d8:	f7f9 fd2e 	bl	8000238 <__aeabi_uidivmod>
 80067dc:	9b04      	ldr	r3, [sp, #16]
 80067de:	3d01      	subs	r5, #1
 80067e0:	5c5b      	ldrb	r3, [r3, r1]
 80067e2:	702b      	strb	r3, [r5, #0]
 80067e4:	0033      	movs	r3, r6
 80067e6:	0006      	movs	r6, r0
 80067e8:	429f      	cmp	r7, r3
 80067ea:	d9f3      	bls.n	80067d4 <_printf_i+0xec>
 80067ec:	2f08      	cmp	r7, #8
 80067ee:	d109      	bne.n	8006804 <_printf_i+0x11c>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	07db      	lsls	r3, r3, #31
 80067f4:	d506      	bpl.n	8006804 <_printf_i+0x11c>
 80067f6:	6862      	ldr	r2, [r4, #4]
 80067f8:	6923      	ldr	r3, [r4, #16]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	dc02      	bgt.n	8006804 <_printf_i+0x11c>
 80067fe:	2330      	movs	r3, #48	@ 0x30
 8006800:	3d01      	subs	r5, #1
 8006802:	702b      	strb	r3, [r5, #0]
 8006804:	9b03      	ldr	r3, [sp, #12]
 8006806:	1b5b      	subs	r3, r3, r5
 8006808:	6123      	str	r3, [r4, #16]
 800680a:	9b07      	ldr	r3, [sp, #28]
 800680c:	0021      	movs	r1, r4
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	9805      	ldr	r0, [sp, #20]
 8006812:	9b06      	ldr	r3, [sp, #24]
 8006814:	aa09      	add	r2, sp, #36	@ 0x24
 8006816:	f7ff fef7 	bl	8006608 <_printf_common>
 800681a:	3001      	adds	r0, #1
 800681c:	d148      	bne.n	80068b0 <_printf_i+0x1c8>
 800681e:	2001      	movs	r0, #1
 8006820:	4240      	negs	r0, r0
 8006822:	b00b      	add	sp, #44	@ 0x2c
 8006824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006826:	2220      	movs	r2, #32
 8006828:	6809      	ldr	r1, [r1, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	6022      	str	r2, [r4, #0]
 800682e:	2278      	movs	r2, #120	@ 0x78
 8006830:	4932      	ldr	r1, [pc, #200]	@ (80068fc <_printf_i+0x214>)
 8006832:	9104      	str	r1, [sp, #16]
 8006834:	0021      	movs	r1, r4
 8006836:	3145      	adds	r1, #69	@ 0x45
 8006838:	700a      	strb	r2, [r1, #0]
 800683a:	6819      	ldr	r1, [r3, #0]
 800683c:	6822      	ldr	r2, [r4, #0]
 800683e:	c940      	ldmia	r1!, {r6}
 8006840:	0610      	lsls	r0, r2, #24
 8006842:	d402      	bmi.n	800684a <_printf_i+0x162>
 8006844:	0650      	lsls	r0, r2, #25
 8006846:	d500      	bpl.n	800684a <_printf_i+0x162>
 8006848:	b2b6      	uxth	r6, r6
 800684a:	6019      	str	r1, [r3, #0]
 800684c:	07d3      	lsls	r3, r2, #31
 800684e:	d502      	bpl.n	8006856 <_printf_i+0x16e>
 8006850:	2320      	movs	r3, #32
 8006852:	4313      	orrs	r3, r2
 8006854:	6023      	str	r3, [r4, #0]
 8006856:	2e00      	cmp	r6, #0
 8006858:	d001      	beq.n	800685e <_printf_i+0x176>
 800685a:	2710      	movs	r7, #16
 800685c:	e7aa      	b.n	80067b4 <_printf_i+0xcc>
 800685e:	2220      	movs	r2, #32
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	4393      	bics	r3, r2
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	e7f8      	b.n	800685a <_printf_i+0x172>
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	680d      	ldr	r5, [r1, #0]
 800686c:	1d10      	adds	r0, r2, #4
 800686e:	6949      	ldr	r1, [r1, #20]
 8006870:	6018      	str	r0, [r3, #0]
 8006872:	6813      	ldr	r3, [r2, #0]
 8006874:	062e      	lsls	r6, r5, #24
 8006876:	d501      	bpl.n	800687c <_printf_i+0x194>
 8006878:	6019      	str	r1, [r3, #0]
 800687a:	e002      	b.n	8006882 <_printf_i+0x19a>
 800687c:	066d      	lsls	r5, r5, #25
 800687e:	d5fb      	bpl.n	8006878 <_printf_i+0x190>
 8006880:	8019      	strh	r1, [r3, #0]
 8006882:	2300      	movs	r3, #0
 8006884:	9d03      	ldr	r5, [sp, #12]
 8006886:	6123      	str	r3, [r4, #16]
 8006888:	e7bf      	b.n	800680a <_printf_i+0x122>
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	1d11      	adds	r1, r2, #4
 800688e:	6019      	str	r1, [r3, #0]
 8006890:	6815      	ldr	r5, [r2, #0]
 8006892:	2100      	movs	r1, #0
 8006894:	0028      	movs	r0, r5
 8006896:	6862      	ldr	r2, [r4, #4]
 8006898:	f000 f9bc 	bl	8006c14 <memchr>
 800689c:	2800      	cmp	r0, #0
 800689e:	d001      	beq.n	80068a4 <_printf_i+0x1bc>
 80068a0:	1b40      	subs	r0, r0, r5
 80068a2:	6060      	str	r0, [r4, #4]
 80068a4:	6863      	ldr	r3, [r4, #4]
 80068a6:	6123      	str	r3, [r4, #16]
 80068a8:	2300      	movs	r3, #0
 80068aa:	9a03      	ldr	r2, [sp, #12]
 80068ac:	7013      	strb	r3, [r2, #0]
 80068ae:	e7ac      	b.n	800680a <_printf_i+0x122>
 80068b0:	002a      	movs	r2, r5
 80068b2:	6923      	ldr	r3, [r4, #16]
 80068b4:	9906      	ldr	r1, [sp, #24]
 80068b6:	9805      	ldr	r0, [sp, #20]
 80068b8:	9d07      	ldr	r5, [sp, #28]
 80068ba:	47a8      	blx	r5
 80068bc:	3001      	adds	r0, #1
 80068be:	d0ae      	beq.n	800681e <_printf_i+0x136>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	079b      	lsls	r3, r3, #30
 80068c4:	d415      	bmi.n	80068f2 <_printf_i+0x20a>
 80068c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c8:	68e0      	ldr	r0, [r4, #12]
 80068ca:	4298      	cmp	r0, r3
 80068cc:	daa9      	bge.n	8006822 <_printf_i+0x13a>
 80068ce:	0018      	movs	r0, r3
 80068d0:	e7a7      	b.n	8006822 <_printf_i+0x13a>
 80068d2:	0022      	movs	r2, r4
 80068d4:	2301      	movs	r3, #1
 80068d6:	9906      	ldr	r1, [sp, #24]
 80068d8:	9805      	ldr	r0, [sp, #20]
 80068da:	9e07      	ldr	r6, [sp, #28]
 80068dc:	3219      	adds	r2, #25
 80068de:	47b0      	blx	r6
 80068e0:	3001      	adds	r0, #1
 80068e2:	d09c      	beq.n	800681e <_printf_i+0x136>
 80068e4:	3501      	adds	r5, #1
 80068e6:	68e3      	ldr	r3, [r4, #12]
 80068e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068ea:	1a9b      	subs	r3, r3, r2
 80068ec:	42ab      	cmp	r3, r5
 80068ee:	dcf0      	bgt.n	80068d2 <_printf_i+0x1ea>
 80068f0:	e7e9      	b.n	80068c6 <_printf_i+0x1de>
 80068f2:	2500      	movs	r5, #0
 80068f4:	e7f7      	b.n	80068e6 <_printf_i+0x1fe>
 80068f6:	46c0      	nop			@ (mov r8, r8)
 80068f8:	08007875 	.word	0x08007875
 80068fc:	08007886 	.word	0x08007886

08006900 <__sflush_r>:
 8006900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006902:	220c      	movs	r2, #12
 8006904:	5e8b      	ldrsh	r3, [r1, r2]
 8006906:	0005      	movs	r5, r0
 8006908:	000c      	movs	r4, r1
 800690a:	071a      	lsls	r2, r3, #28
 800690c:	d456      	bmi.n	80069bc <__sflush_r+0xbc>
 800690e:	684a      	ldr	r2, [r1, #4]
 8006910:	2a00      	cmp	r2, #0
 8006912:	dc02      	bgt.n	800691a <__sflush_r+0x1a>
 8006914:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8006916:	2a00      	cmp	r2, #0
 8006918:	dd4e      	ble.n	80069b8 <__sflush_r+0xb8>
 800691a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800691c:	2f00      	cmp	r7, #0
 800691e:	d04b      	beq.n	80069b8 <__sflush_r+0xb8>
 8006920:	2200      	movs	r2, #0
 8006922:	2080      	movs	r0, #128	@ 0x80
 8006924:	682e      	ldr	r6, [r5, #0]
 8006926:	602a      	str	r2, [r5, #0]
 8006928:	001a      	movs	r2, r3
 800692a:	0140      	lsls	r0, r0, #5
 800692c:	6a21      	ldr	r1, [r4, #32]
 800692e:	4002      	ands	r2, r0
 8006930:	4203      	tst	r3, r0
 8006932:	d033      	beq.n	800699c <__sflush_r+0x9c>
 8006934:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	075b      	lsls	r3, r3, #29
 800693a:	d506      	bpl.n	800694a <__sflush_r+0x4a>
 800693c:	6863      	ldr	r3, [r4, #4]
 800693e:	1ad2      	subs	r2, r2, r3
 8006940:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006942:	2b00      	cmp	r3, #0
 8006944:	d001      	beq.n	800694a <__sflush_r+0x4a>
 8006946:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006948:	1ad2      	subs	r2, r2, r3
 800694a:	2300      	movs	r3, #0
 800694c:	0028      	movs	r0, r5
 800694e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006950:	6a21      	ldr	r1, [r4, #32]
 8006952:	47b8      	blx	r7
 8006954:	89a2      	ldrh	r2, [r4, #12]
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	d106      	bne.n	8006968 <__sflush_r+0x68>
 800695a:	6829      	ldr	r1, [r5, #0]
 800695c:	291d      	cmp	r1, #29
 800695e:	d846      	bhi.n	80069ee <__sflush_r+0xee>
 8006960:	4b29      	ldr	r3, [pc, #164]	@ (8006a08 <__sflush_r+0x108>)
 8006962:	40cb      	lsrs	r3, r1
 8006964:	07db      	lsls	r3, r3, #31
 8006966:	d542      	bpl.n	80069ee <__sflush_r+0xee>
 8006968:	2300      	movs	r3, #0
 800696a:	6063      	str	r3, [r4, #4]
 800696c:	6923      	ldr	r3, [r4, #16]
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	04d2      	lsls	r2, r2, #19
 8006972:	d505      	bpl.n	8006980 <__sflush_r+0x80>
 8006974:	1c43      	adds	r3, r0, #1
 8006976:	d102      	bne.n	800697e <__sflush_r+0x7e>
 8006978:	682b      	ldr	r3, [r5, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d100      	bne.n	8006980 <__sflush_r+0x80>
 800697e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006980:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006982:	602e      	str	r6, [r5, #0]
 8006984:	2900      	cmp	r1, #0
 8006986:	d017      	beq.n	80069b8 <__sflush_r+0xb8>
 8006988:	0023      	movs	r3, r4
 800698a:	3344      	adds	r3, #68	@ 0x44
 800698c:	4299      	cmp	r1, r3
 800698e:	d002      	beq.n	8006996 <__sflush_r+0x96>
 8006990:	0028      	movs	r0, r5
 8006992:	f7ff fb4d 	bl	8006030 <_free_r>
 8006996:	2300      	movs	r3, #0
 8006998:	6363      	str	r3, [r4, #52]	@ 0x34
 800699a:	e00d      	b.n	80069b8 <__sflush_r+0xb8>
 800699c:	2301      	movs	r3, #1
 800699e:	0028      	movs	r0, r5
 80069a0:	47b8      	blx	r7
 80069a2:	0002      	movs	r2, r0
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	d1c6      	bne.n	8006936 <__sflush_r+0x36>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0c3      	beq.n	8006936 <__sflush_r+0x36>
 80069ae:	2b1d      	cmp	r3, #29
 80069b0:	d001      	beq.n	80069b6 <__sflush_r+0xb6>
 80069b2:	2b16      	cmp	r3, #22
 80069b4:	d11a      	bne.n	80069ec <__sflush_r+0xec>
 80069b6:	602e      	str	r6, [r5, #0]
 80069b8:	2000      	movs	r0, #0
 80069ba:	e01e      	b.n	80069fa <__sflush_r+0xfa>
 80069bc:	690e      	ldr	r6, [r1, #16]
 80069be:	2e00      	cmp	r6, #0
 80069c0:	d0fa      	beq.n	80069b8 <__sflush_r+0xb8>
 80069c2:	680f      	ldr	r7, [r1, #0]
 80069c4:	600e      	str	r6, [r1, #0]
 80069c6:	1bba      	subs	r2, r7, r6
 80069c8:	9201      	str	r2, [sp, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	079b      	lsls	r3, r3, #30
 80069ce:	d100      	bne.n	80069d2 <__sflush_r+0xd2>
 80069d0:	694a      	ldr	r2, [r1, #20]
 80069d2:	60a2      	str	r2, [r4, #8]
 80069d4:	9b01      	ldr	r3, [sp, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	ddee      	ble.n	80069b8 <__sflush_r+0xb8>
 80069da:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80069dc:	0032      	movs	r2, r6
 80069de:	001f      	movs	r7, r3
 80069e0:	0028      	movs	r0, r5
 80069e2:	9b01      	ldr	r3, [sp, #4]
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	47b8      	blx	r7
 80069e8:	2800      	cmp	r0, #0
 80069ea:	dc07      	bgt.n	80069fc <__sflush_r+0xfc>
 80069ec:	89a2      	ldrh	r2, [r4, #12]
 80069ee:	2340      	movs	r3, #64	@ 0x40
 80069f0:	2001      	movs	r0, #1
 80069f2:	4313      	orrs	r3, r2
 80069f4:	b21b      	sxth	r3, r3
 80069f6:	81a3      	strh	r3, [r4, #12]
 80069f8:	4240      	negs	r0, r0
 80069fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80069fc:	9b01      	ldr	r3, [sp, #4]
 80069fe:	1836      	adds	r6, r6, r0
 8006a00:	1a1b      	subs	r3, r3, r0
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	e7e6      	b.n	80069d4 <__sflush_r+0xd4>
 8006a06:	46c0      	nop			@ (mov r8, r8)
 8006a08:	20400001 	.word	0x20400001

08006a0c <_fflush_r>:
 8006a0c:	690b      	ldr	r3, [r1, #16]
 8006a0e:	b570      	push	{r4, r5, r6, lr}
 8006a10:	0005      	movs	r5, r0
 8006a12:	000c      	movs	r4, r1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d102      	bne.n	8006a1e <_fflush_r+0x12>
 8006a18:	2500      	movs	r5, #0
 8006a1a:	0028      	movs	r0, r5
 8006a1c:	bd70      	pop	{r4, r5, r6, pc}
 8006a1e:	2800      	cmp	r0, #0
 8006a20:	d004      	beq.n	8006a2c <_fflush_r+0x20>
 8006a22:	6a03      	ldr	r3, [r0, #32]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d101      	bne.n	8006a2c <_fflush_r+0x20>
 8006a28:	f7ff f862 	bl	8005af0 <__sinit>
 8006a2c:	220c      	movs	r2, #12
 8006a2e:	5ea3      	ldrsh	r3, [r4, r2]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d0f1      	beq.n	8006a18 <_fflush_r+0xc>
 8006a34:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a36:	07d2      	lsls	r2, r2, #31
 8006a38:	d404      	bmi.n	8006a44 <_fflush_r+0x38>
 8006a3a:	059b      	lsls	r3, r3, #22
 8006a3c:	d402      	bmi.n	8006a44 <_fflush_r+0x38>
 8006a3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a40:	f7ff fae3 	bl	800600a <__retarget_lock_acquire_recursive>
 8006a44:	0028      	movs	r0, r5
 8006a46:	0021      	movs	r1, r4
 8006a48:	f7ff ff5a 	bl	8006900 <__sflush_r>
 8006a4c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a4e:	0005      	movs	r5, r0
 8006a50:	07db      	lsls	r3, r3, #31
 8006a52:	d4e2      	bmi.n	8006a1a <_fflush_r+0xe>
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	059b      	lsls	r3, r3, #22
 8006a58:	d4df      	bmi.n	8006a1a <_fflush_r+0xe>
 8006a5a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a5c:	f7ff fad6 	bl	800600c <__retarget_lock_release_recursive>
 8006a60:	e7db      	b.n	8006a1a <_fflush_r+0xe>
	...

08006a64 <__swhatbuf_r>:
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	000e      	movs	r6, r1
 8006a68:	001d      	movs	r5, r3
 8006a6a:	230e      	movs	r3, #14
 8006a6c:	5ec9      	ldrsh	r1, [r1, r3]
 8006a6e:	0014      	movs	r4, r2
 8006a70:	b096      	sub	sp, #88	@ 0x58
 8006a72:	2900      	cmp	r1, #0
 8006a74:	da0c      	bge.n	8006a90 <__swhatbuf_r+0x2c>
 8006a76:	89b2      	ldrh	r2, [r6, #12]
 8006a78:	2380      	movs	r3, #128	@ 0x80
 8006a7a:	0011      	movs	r1, r2
 8006a7c:	4019      	ands	r1, r3
 8006a7e:	421a      	tst	r2, r3
 8006a80:	d114      	bne.n	8006aac <__swhatbuf_r+0x48>
 8006a82:	2380      	movs	r3, #128	@ 0x80
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	2000      	movs	r0, #0
 8006a88:	6029      	str	r1, [r5, #0]
 8006a8a:	6023      	str	r3, [r4, #0]
 8006a8c:	b016      	add	sp, #88	@ 0x58
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	466a      	mov	r2, sp
 8006a92:	f000 f89b 	bl	8006bcc <_fstat_r>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	dbed      	blt.n	8006a76 <__swhatbuf_r+0x12>
 8006a9a:	23f0      	movs	r3, #240	@ 0xf0
 8006a9c:	9901      	ldr	r1, [sp, #4]
 8006a9e:	021b      	lsls	r3, r3, #8
 8006aa0:	4019      	ands	r1, r3
 8006aa2:	4b04      	ldr	r3, [pc, #16]	@ (8006ab4 <__swhatbuf_r+0x50>)
 8006aa4:	18c9      	adds	r1, r1, r3
 8006aa6:	424b      	negs	r3, r1
 8006aa8:	4159      	adcs	r1, r3
 8006aaa:	e7ea      	b.n	8006a82 <__swhatbuf_r+0x1e>
 8006aac:	2100      	movs	r1, #0
 8006aae:	2340      	movs	r3, #64	@ 0x40
 8006ab0:	e7e9      	b.n	8006a86 <__swhatbuf_r+0x22>
 8006ab2:	46c0      	nop			@ (mov r8, r8)
 8006ab4:	ffffe000 	.word	0xffffe000

08006ab8 <__smakebuf_r>:
 8006ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006aba:	2602      	movs	r6, #2
 8006abc:	898b      	ldrh	r3, [r1, #12]
 8006abe:	0005      	movs	r5, r0
 8006ac0:	000c      	movs	r4, r1
 8006ac2:	b085      	sub	sp, #20
 8006ac4:	4233      	tst	r3, r6
 8006ac6:	d007      	beq.n	8006ad8 <__smakebuf_r+0x20>
 8006ac8:	0023      	movs	r3, r4
 8006aca:	3347      	adds	r3, #71	@ 0x47
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	6123      	str	r3, [r4, #16]
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	6163      	str	r3, [r4, #20]
 8006ad4:	b005      	add	sp, #20
 8006ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ad8:	ab03      	add	r3, sp, #12
 8006ada:	aa02      	add	r2, sp, #8
 8006adc:	f7ff ffc2 	bl	8006a64 <__swhatbuf_r>
 8006ae0:	9f02      	ldr	r7, [sp, #8]
 8006ae2:	9001      	str	r0, [sp, #4]
 8006ae4:	0039      	movs	r1, r7
 8006ae6:	0028      	movs	r0, r5
 8006ae8:	f7fe fee2 	bl	80058b0 <_malloc_r>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d108      	bne.n	8006b02 <__smakebuf_r+0x4a>
 8006af0:	220c      	movs	r2, #12
 8006af2:	5ea3      	ldrsh	r3, [r4, r2]
 8006af4:	059a      	lsls	r2, r3, #22
 8006af6:	d4ed      	bmi.n	8006ad4 <__smakebuf_r+0x1c>
 8006af8:	2203      	movs	r2, #3
 8006afa:	4393      	bics	r3, r2
 8006afc:	431e      	orrs	r6, r3
 8006afe:	81a6      	strh	r6, [r4, #12]
 8006b00:	e7e2      	b.n	8006ac8 <__smakebuf_r+0x10>
 8006b02:	2380      	movs	r3, #128	@ 0x80
 8006b04:	89a2      	ldrh	r2, [r4, #12]
 8006b06:	6020      	str	r0, [r4, #0]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	81a3      	strh	r3, [r4, #12]
 8006b0c:	9b03      	ldr	r3, [sp, #12]
 8006b0e:	6120      	str	r0, [r4, #16]
 8006b10:	6167      	str	r7, [r4, #20]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00c      	beq.n	8006b30 <__smakebuf_r+0x78>
 8006b16:	0028      	movs	r0, r5
 8006b18:	230e      	movs	r3, #14
 8006b1a:	5ee1      	ldrsh	r1, [r4, r3]
 8006b1c:	f000 f868 	bl	8006bf0 <_isatty_r>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d005      	beq.n	8006b30 <__smakebuf_r+0x78>
 8006b24:	2303      	movs	r3, #3
 8006b26:	89a2      	ldrh	r2, [r4, #12]
 8006b28:	439a      	bics	r2, r3
 8006b2a:	3b02      	subs	r3, #2
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	81a3      	strh	r3, [r4, #12]
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	9a01      	ldr	r2, [sp, #4]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	81a3      	strh	r3, [r4, #12]
 8006b38:	e7cc      	b.n	8006ad4 <__smakebuf_r+0x1c>

08006b3a <_putc_r>:
 8006b3a:	b570      	push	{r4, r5, r6, lr}
 8006b3c:	0006      	movs	r6, r0
 8006b3e:	000d      	movs	r5, r1
 8006b40:	0014      	movs	r4, r2
 8006b42:	2800      	cmp	r0, #0
 8006b44:	d004      	beq.n	8006b50 <_putc_r+0x16>
 8006b46:	6a03      	ldr	r3, [r0, #32]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <_putc_r+0x16>
 8006b4c:	f7fe ffd0 	bl	8005af0 <__sinit>
 8006b50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b52:	07db      	lsls	r3, r3, #31
 8006b54:	d405      	bmi.n	8006b62 <_putc_r+0x28>
 8006b56:	89a3      	ldrh	r3, [r4, #12]
 8006b58:	059b      	lsls	r3, r3, #22
 8006b5a:	d402      	bmi.n	8006b62 <_putc_r+0x28>
 8006b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b5e:	f7ff fa54 	bl	800600a <__retarget_lock_acquire_recursive>
 8006b62:	68a3      	ldr	r3, [r4, #8]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	60a3      	str	r3, [r4, #8]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	da05      	bge.n	8006b78 <_putc_r+0x3e>
 8006b6c:	69a2      	ldr	r2, [r4, #24]
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	db12      	blt.n	8006b98 <_putc_r+0x5e>
 8006b72:	b2eb      	uxtb	r3, r5
 8006b74:	2b0a      	cmp	r3, #10
 8006b76:	d00f      	beq.n	8006b98 <_putc_r+0x5e>
 8006b78:	6823      	ldr	r3, [r4, #0]
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	6022      	str	r2, [r4, #0]
 8006b7e:	701d      	strb	r5, [r3, #0]
 8006b80:	b2ed      	uxtb	r5, r5
 8006b82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b84:	07db      	lsls	r3, r3, #31
 8006b86:	d405      	bmi.n	8006b94 <_putc_r+0x5a>
 8006b88:	89a3      	ldrh	r3, [r4, #12]
 8006b8a:	059b      	lsls	r3, r3, #22
 8006b8c:	d402      	bmi.n	8006b94 <_putc_r+0x5a>
 8006b8e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b90:	f7ff fa3c 	bl	800600c <__retarget_lock_release_recursive>
 8006b94:	0028      	movs	r0, r5
 8006b96:	bd70      	pop	{r4, r5, r6, pc}
 8006b98:	0029      	movs	r1, r5
 8006b9a:	0022      	movs	r2, r4
 8006b9c:	0030      	movs	r0, r6
 8006b9e:	f7ff f8d7 	bl	8005d50 <__swbuf_r>
 8006ba2:	0005      	movs	r5, r0
 8006ba4:	e7ed      	b.n	8006b82 <_putc_r+0x48>

08006ba6 <memmove>:
 8006ba6:	b510      	push	{r4, lr}
 8006ba8:	4288      	cmp	r0, r1
 8006baa:	d902      	bls.n	8006bb2 <memmove+0xc>
 8006bac:	188b      	adds	r3, r1, r2
 8006bae:	4298      	cmp	r0, r3
 8006bb0:	d308      	bcc.n	8006bc4 <memmove+0x1e>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d007      	beq.n	8006bc8 <memmove+0x22>
 8006bb8:	5ccc      	ldrb	r4, [r1, r3]
 8006bba:	54c4      	strb	r4, [r0, r3]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	e7f9      	b.n	8006bb4 <memmove+0xe>
 8006bc0:	5c8b      	ldrb	r3, [r1, r2]
 8006bc2:	5483      	strb	r3, [r0, r2]
 8006bc4:	3a01      	subs	r2, #1
 8006bc6:	d2fb      	bcs.n	8006bc0 <memmove+0x1a>
 8006bc8:	bd10      	pop	{r4, pc}
	...

08006bcc <_fstat_r>:
 8006bcc:	2300      	movs	r3, #0
 8006bce:	b570      	push	{r4, r5, r6, lr}
 8006bd0:	4d06      	ldr	r5, [pc, #24]	@ (8006bec <_fstat_r+0x20>)
 8006bd2:	0004      	movs	r4, r0
 8006bd4:	0008      	movs	r0, r1
 8006bd6:	0011      	movs	r1, r2
 8006bd8:	602b      	str	r3, [r5, #0]
 8006bda:	f7f9 ff60 	bl	8000a9e <_fstat>
 8006bde:	1c43      	adds	r3, r0, #1
 8006be0:	d103      	bne.n	8006bea <_fstat_r+0x1e>
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d000      	beq.n	8006bea <_fstat_r+0x1e>
 8006be8:	6023      	str	r3, [r4, #0]
 8006bea:	bd70      	pop	{r4, r5, r6, pc}
 8006bec:	20000384 	.word	0x20000384

08006bf0 <_isatty_r>:
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	b570      	push	{r4, r5, r6, lr}
 8006bf4:	4d06      	ldr	r5, [pc, #24]	@ (8006c10 <_isatty_r+0x20>)
 8006bf6:	0004      	movs	r4, r0
 8006bf8:	0008      	movs	r0, r1
 8006bfa:	602b      	str	r3, [r5, #0]
 8006bfc:	f7f9 ff5d 	bl	8000aba <_isatty>
 8006c00:	1c43      	adds	r3, r0, #1
 8006c02:	d103      	bne.n	8006c0c <_isatty_r+0x1c>
 8006c04:	682b      	ldr	r3, [r5, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d000      	beq.n	8006c0c <_isatty_r+0x1c>
 8006c0a:	6023      	str	r3, [r4, #0]
 8006c0c:	bd70      	pop	{r4, r5, r6, pc}
 8006c0e:	46c0      	nop			@ (mov r8, r8)
 8006c10:	20000384 	.word	0x20000384

08006c14 <memchr>:
 8006c14:	b2c9      	uxtb	r1, r1
 8006c16:	1882      	adds	r2, r0, r2
 8006c18:	4290      	cmp	r0, r2
 8006c1a:	d101      	bne.n	8006c20 <memchr+0xc>
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	4770      	bx	lr
 8006c20:	7803      	ldrb	r3, [r0, #0]
 8006c22:	428b      	cmp	r3, r1
 8006c24:	d0fb      	beq.n	8006c1e <memchr+0xa>
 8006c26:	3001      	adds	r0, #1
 8006c28:	e7f6      	b.n	8006c18 <memchr+0x4>

08006c2a <_realloc_r>:
 8006c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c2c:	0006      	movs	r6, r0
 8006c2e:	000c      	movs	r4, r1
 8006c30:	0015      	movs	r5, r2
 8006c32:	2900      	cmp	r1, #0
 8006c34:	d105      	bne.n	8006c42 <_realloc_r+0x18>
 8006c36:	0011      	movs	r1, r2
 8006c38:	f7fe fe3a 	bl	80058b0 <_malloc_r>
 8006c3c:	0004      	movs	r4, r0
 8006c3e:	0020      	movs	r0, r4
 8006c40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c42:	2a00      	cmp	r2, #0
 8006c44:	d103      	bne.n	8006c4e <_realloc_r+0x24>
 8006c46:	f7ff f9f3 	bl	8006030 <_free_r>
 8006c4a:	002c      	movs	r4, r5
 8006c4c:	e7f7      	b.n	8006c3e <_realloc_r+0x14>
 8006c4e:	f000 f81c 	bl	8006c8a <_malloc_usable_size_r>
 8006c52:	0007      	movs	r7, r0
 8006c54:	4285      	cmp	r5, r0
 8006c56:	d802      	bhi.n	8006c5e <_realloc_r+0x34>
 8006c58:	0843      	lsrs	r3, r0, #1
 8006c5a:	42ab      	cmp	r3, r5
 8006c5c:	d3ef      	bcc.n	8006c3e <_realloc_r+0x14>
 8006c5e:	0029      	movs	r1, r5
 8006c60:	0030      	movs	r0, r6
 8006c62:	f7fe fe25 	bl	80058b0 <_malloc_r>
 8006c66:	9001      	str	r0, [sp, #4]
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d101      	bne.n	8006c70 <_realloc_r+0x46>
 8006c6c:	9c01      	ldr	r4, [sp, #4]
 8006c6e:	e7e6      	b.n	8006c3e <_realloc_r+0x14>
 8006c70:	002a      	movs	r2, r5
 8006c72:	42bd      	cmp	r5, r7
 8006c74:	d900      	bls.n	8006c78 <_realloc_r+0x4e>
 8006c76:	003a      	movs	r2, r7
 8006c78:	0021      	movs	r1, r4
 8006c7a:	9801      	ldr	r0, [sp, #4]
 8006c7c:	f7ff f9cf 	bl	800601e <memcpy>
 8006c80:	0021      	movs	r1, r4
 8006c82:	0030      	movs	r0, r6
 8006c84:	f7ff f9d4 	bl	8006030 <_free_r>
 8006c88:	e7f0      	b.n	8006c6c <_realloc_r+0x42>

08006c8a <_malloc_usable_size_r>:
 8006c8a:	1f0b      	subs	r3, r1, #4
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	1f18      	subs	r0, r3, #4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	da01      	bge.n	8006c98 <_malloc_usable_size_r+0xe>
 8006c94:	580b      	ldr	r3, [r1, r0]
 8006c96:	18c0      	adds	r0, r0, r3
 8006c98:	4770      	bx	lr
	...

08006c9c <_init>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	46c0      	nop			@ (mov r8, r8)
 8006ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca2:	bc08      	pop	{r3}
 8006ca4:	469e      	mov	lr, r3
 8006ca6:	4770      	bx	lr

08006ca8 <_fini>:
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006caa:	46c0      	nop			@ (mov r8, r8)
 8006cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cae:	bc08      	pop	{r3}
 8006cb0:	469e      	mov	lr, r3
 8006cb2:	4770      	bx	lr
